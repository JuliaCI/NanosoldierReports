Julia Version 1.5.0-DEV.667
Commit a8275e544a (2020-04-23 15:25 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed InvertedIndices ───────────── v1.0.0
  Installed DataAPI ───────────────────── v1.2.0
  Installed OrderedCollections ────────── v1.1.0
  Installed KCenters ──────────────────── v0.2.2
  Installed DataStructures ────────────── v0.17.13
  Installed JSON ──────────────────────── v0.21.0
  Installed DataFrames ────────────────── v0.20.2
  Installed PooledArrays ──────────────── v0.5.3
  Installed MappedArrays ──────────────── v0.2.2
  Installed LearnBase ─────────────────── v0.2.2
  Installed MLDataUtils ───────────────── v0.5.1
  Installed CategoricalArrays ─────────── v0.7.7
  Installed DataValueInterfaces ───────── v1.0.0
  Installed StatsBase ─────────────────── v0.32.2
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed SimilaritySearch ──────────── v0.3.19
  Installed TableTraits ───────────────── v1.0.0
  Installed Reexport ──────────────────── v0.2.0
  Installed Missings ──────────────────── v0.4.3
  Installed Compat ────────────────────── v3.8.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed Parsers ───────────────────── v1.0.2
  Installed Tables ────────────────────── v1.0.4
  Installed MLDataPattern ─────────────── v0.5.2
Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.8.0
  [9a962f9c] + DataAPI v1.2.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.13
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.2
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v1.0.2
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_6NYrfP/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_6NYrfP/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.8.0
  [9a962f9c] DataAPI v1.2.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.13
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v1.0.2
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0723782532413801
[ Info: 0.9326678744951884
[ Info: 0.8302954188982645
[ Info: 0.5563809144993623
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.33252118043601514
mean(cdnet.distances) = 0.3930024080475171
mean(crand.distances) = 0.33866275459527967
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6787109375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6787109375,"f1":0.7963347416472425,"seconds":5.39049506187439e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.171875,"distances_sum":1746.903053335547}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6962890625, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6962890625,"f1":0.8096245768120776,"seconds":4.8857182264328e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.2890625,"distances_sum":1803.6921047980936}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6962890625,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.6962890625,"f1":0.8096245768120776,"seconds":4.8857182264328e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.2890625,"distances_sum":1803.6921047980936}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8505859375, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8505859375,"f1":0.9139454295704302,"seconds":5.68293035030365e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.7890625,"distances_sum":2319.4629015659057}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.865234375, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.865234375,"f1":0.9215289918414927,"seconds":5.997717380523682e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.765625,"distances_sum":2400.3473955044074}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.830078125, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.830078125,"f1":0.9002294580419589,"seconds":5.89713454246521e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.7109375,"distances_sum":2231.73826909759}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9571657509157513,"seconds":6.297603249549866e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.8828125,"distances_sum":2657.4140715633957}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84765625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.84765625,"f1":0.9119880119880127,"seconds":6.334856152534485e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.7421875,"distances_sum":2328.0739784171064}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.734375,"f1":0.8371956168831176,"seconds":5.945563316345215e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.40625,"distances_sum":1929.5029983924942}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9248046875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.9571657509157513,"seconds":6.297603249549866e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.8828125,"distances_sum":2657.4140715633957}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9585222069597074,"seconds":6.964430212974548e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.90625,"distances_sum":2673.7003076956184}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9737580128205133,"seconds":6.137415766716003e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.9609375,"distances_sum":2799.87642802001}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9760989010989012,"seconds":7.08363950252533e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.9609375,"distances_sum":2784.1873087765266}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9720638736263738,"seconds":5.887821316719055e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.953125,"distances_sum":2771.062829550697}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9628777472527476,"seconds":5.885958671569824e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.84375,"distances_sum":2704.9976921064}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.95703125,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9760989010989012,"seconds":7.08363950252533e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.9609375,"distances_sum":2784.1873087765266}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.95703125,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9760989010989012,"seconds":7.08363950252533e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.9609375,"distances_sum":2784.1873087765266}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5859375, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.5859375,"f1":0.7231518481518487,"seconds":5.198642611503601e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":7.4453125,"distances_sum":1291.6798447374076}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.39453125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.39453125,"f1":null,"seconds":4.6193599700927734e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":6.625,"distances_sum":900.4868096090839}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.19140625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.19140625,"f1":null,"seconds":3.993511199951172e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":5.8203125,"distances_sum":479.0748473567871}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.73828125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.73828125,"f1":0.8400066946941956,"seconds":6.038695573806763e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.1796875,"distances_sum":1745.3656516677029}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.73828125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.73828125,"f1":0.8400066946941956,"seconds":6.038695573806763e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.1796875,"distances_sum":1745.3656516677029}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9342719780219788,"seconds":6.988644599914551e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.9375,"distances_sum":2233.609981886198}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7724609375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7724609375,"f1":0.8593347624597633,"seconds":6.2622129917144775e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.53125,"distances_sum":1856.2220961447197}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8837890625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8837890625,"f1":0.9342719780219788,"seconds":6.988644599914551e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.9375,"distances_sum":2233.609981886198}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9632097069597074,"seconds":6.9160014390945435e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.8828125,"distances_sum":2474.490346229013}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.933562271062272,"seconds":6.401911377906799e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.90625,"distances_sum":2238.611181715888}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.9360576923076928,"seconds":6.373971700668335e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.859375,"distances_sum":2257.833768925491}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9653102106227113,"seconds":6.530433893203735e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.859375,"distances_sum":2483.106117210279}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9365234375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9653102106227113,"seconds":6.530433893203735e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.859375,"distances_sum":2483.106117210279}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9365234375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9653102106227113,"seconds":6.530433893203735e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.859375,"distances_sum":2483.106117210279}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4326171875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4326171875,"f1":null,"seconds":4.038214683532715e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":6.1875,"distances_sum":975.3272239685448}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5546875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5546875,"f1":0.7013424075924082,"seconds":4.626810550689697e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":7.0,"distances_sum":1285.3303520320794}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5546875,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5546875,"f1":0.7013424075924082,"seconds":4.626810550689697e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":7.0,"distances_sum":1285.3303520320794}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8740234375,"f1":0.9247970779220788,"seconds":6.2175095081329346e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.78125,"distances_sum":2218.8104709624663}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8740234375,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.8740234375,"f1":0.9247970779220788,"seconds":6.2175095081329346e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.78125,"distances_sum":2218.8104709624663}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9607543498168503,"seconds":6.5229833126068115e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.8828125,"distances_sum":2472.368589637964}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9602735805860811,"seconds":6.2212347984313965e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.8671875,"distances_sum":2473.32647980031}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9296875,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.9296875,"f1":0.9607543498168503,"seconds":6.5229833126068115e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.8828125,"distances_sum":2472.368589637964}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9296875,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.9296875,"f1":0.9607543498168503,"seconds":6.5229833126068115e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.8828125,"distances_sum":2472.368589637964}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.431640625, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.431640625,"f1":null,"seconds":4.1369348764419556e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":6.65625,"distances_sum":936.9418877087468}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7744140625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7744140625,"f1":0.863779970029971,"seconds":5.7034194469451904e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.328125,"distances_sum":1822.2943060146372}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.60546875, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.60546875,"f1":null,"seconds":4.798173904418945e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":7.3359375,"distances_sum":1366.3106269800685}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7744140625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7744140625,"f1":0.863779970029971,"seconds":5.7034194469451904e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.328125,"distances_sum":1822.2943060146372}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9517742673992678,"seconds":6.411224603652954e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.8203125,"distances_sum":2351.627072560165}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9313186813186819,"seconds":6.2622129917144775e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.6875,"distances_sum":2192.0228535362126}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8740234375,"f1":0.9274439102564109,"seconds":6.215646862983704e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.6328125,"distances_sum":2180.352650720456}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87109375, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.87109375,"f1":0.9253121878121886,"seconds":6.0051679611206055e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.5234375,"distances_sum":2177.4364794702283}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8076171875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.8076171875,"f1":0.8848646145521153,"seconds":5.805864930152893e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.46875,"distances_sum":1955.128983453425}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.869140625, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.869140625,"f1":0.9242132867132875,"seconds":5.997717380523682e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.5859375,"distances_sum":2157.4581226424275}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9140625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.9517742673992678,"seconds":6.411224603652954e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.8203125,"distances_sum":2351.627072560165}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9684008699633704,"seconds":6.582587957382202e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.9140625,"distances_sum":2465.155021083809}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.962890625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.962890625,"f1":0.9796703296703301,"seconds":6.882473826408386e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.953125,"distances_sum":2543.9841088587395}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9568910256410261,"seconds":6.806105375289917e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.84375,"distances_sum":2383.48574742732}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9549336080586086,"seconds":6.718561053276062e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.8515625,"distances_sum":2360.9713507225642}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9527415293040298,"seconds":6.923452019691467e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.8359375,"distances_sum":2373.664044387001}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":6,"bsize":11}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9688301282051286,"seconds":6.90855085849762e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.9140625,"distances_sum":2465.5834778268063}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9583962912087916,"seconds":6.85080885887146e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.859375,"distances_sum":2393.673881592446}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.962890625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9796703296703301,"seconds":6.882473826408386e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.953125,"distances_sum":2543.9841088587395}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.962890625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9796703296703301,"seconds":6.882473826408386e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.953125,"distances_sum":2543.9841088587395}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.181640625, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.181640625,"f1":null,"seconds":3.594905138015747e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":5.921875,"distances_sum":447.00580747227554}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.171875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.171875,"f1":null,"seconds":3.634020686149597e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":5.765625,"distances_sum":437.8652039521222}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.181640625,"state":{"ssize":3,"bsize":1},"perf":{"precision":null,"recall":0.181640625,"f1":null,"seconds":3.594905138015747e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":5.921875,"distances_sum":447.00580747227554}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78515625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.78515625,"f1":0.8704460470085478,"seconds":6.273388862609863e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.8984375,"distances_sum":1915.778661689288}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.384765625, conf: {"ssize":7,"bsize":2}, perf: {"precision":null,"recall":0.384765625,"f1":null,"seconds":4.252418875694275e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":6.6875,"distances_sum":844.9169990231154}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4052734375, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.4052734375,"f1":null,"seconds":4.550442099571228e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":6.546875,"distances_sum":899.5921833434528}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.400390625, conf: {"ssize":6,"bsize":2}, perf: {"precision":null,"recall":0.400390625,"f1":null,"seconds":4.209578037261963e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":6.5859375,"distances_sum":904.683239972519}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.78515625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.78515625,"f1":0.8704460470085478,"seconds":6.273388862609863e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.8984375,"distances_sum":1915.778661689288}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9684752747252753,"seconds":6.949529051780701e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.9375,"distances_sum":2530.787867347509}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9439674908424913,"seconds":6.910413503646851e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.9140625,"distances_sum":2351.0938612301375}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84765625, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.84765625,"f1":0.9113272144522152,"seconds":6.550922989845276e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.9453125,"distances_sum":2129.4184710514746}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":10,"bsize":6}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9332474816849823,"seconds":6.53974711894989e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.96875,"distances_sum":2293.1234792717833}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.943359375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9684752747252753,"seconds":6.949529051780701e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.9375,"distances_sum":2530.787867347509}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.943359375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9684752747252753,"seconds":6.949529051780701e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.9375,"distances_sum":2530.787867347509}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3310546875, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.3310546875,"f1":null,"seconds":4.073604941368103e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":5.265625,"distances_sum":521.0808510015986}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2998046875, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.2998046875,"f1":null,"seconds":3.866851329803467e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":5.34375,"distances_sum":447.5669806256295}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.484375, conf: {"ssize":1,"bsize":3}, perf: {"precision":0.9685453869047618,"recall":0.484375,"f1":0.6303048513986015,"seconds":4.816800355911255e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":6.4765625,"distances_sum":698.7809550670363}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.484375,"state":{"ssize":1,"bsize":3},"perf":{"precision":0.9685453869047618,"recall":0.484375,"f1":0.6303048513986015,"seconds":4.816800355911255e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":6.4765625,"distances_sum":698.7809550670363}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.837890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":0.9775390625000002,"recall":0.837890625,"f1":0.8976226247710626,"seconds":6.57886266708374e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.71875,"distances_sum":1304.684905528208}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.658203125, conf: {"ssize":5,"bsize":4}, perf: {"precision":0.9803757440476191,"recall":0.658203125,"f1":0.7776033861971368,"seconds":5.599111318588257e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":7.5390625,"distances_sum":966.2057116374622}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7919921875, conf: {"ssize":1,"bsize":6}, perf: {"precision":0.9735026041666667,"recall":0.7919921875,"f1":0.866422965055778,"seconds":6.3050538301467896e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.703125,"distances_sum":1218.3081808663958}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.74609375, conf: {"ssize":1,"bsize":5}, perf: {"precision":0.9765531994047619,"recall":0.74609375,"f1":0.8374943415959044,"seconds":6.020069122314453e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.15625,"distances_sum":1127.7123059204341}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.837890625,"state":{"ssize":1,"bsize":7},"perf":{"precision":0.9775390625000002,"recall":0.837890625,"f1":0.8976226247710626,"seconds":6.57886266708374e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.71875,"distances_sum":1304.684905528208}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":1,"bsize":9}, perf: {"precision":0.9733537946428572,"recall":0.9052734375,"f1":0.9348908253205128,"seconds":7.00727105140686e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.8203125,"distances_sum":1466.1018285603432}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":2,"bsize":10}, perf: {"precision":0.9748604910714286,"recall":0.9267578125,"f1":0.948326608287546,"seconds":7.068738341331482e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.859375,"distances_sum":1514.797965566639}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":5,"bsize":9}, perf: {"precision":0.9779575892857144,"recall":0.9111328125,"f1":0.9404976533882786,"seconds":7.037073373794556e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.78125,"distances_sum":1475.4479726519207}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":1,"bsize":8}, perf: {"precision":0.9800223214285715,"recall":0.8994140625,"f1":0.9337914689477195,"seconds":6.977468729019165e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.765625,"distances_sum":1428.6530468656722}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9267578125,"state":{"ssize":2,"bsize":10},"perf":{"precision":0.9748604910714286,"recall":0.9267578125,"f1":0.948326608287546,"seconds":7.068738341331482e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.859375,"distances_sum":1514.797965566639}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9267578125,"state":{"ssize":2,"bsize":10},"perf":{"precision":0.9748604910714286,"recall":0.9267578125,"f1":0.948326608287546,"seconds":7.068738341331482e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.859375,"distances_sum":1514.797965566639}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2099609375,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2099609375,"f1":null,"seconds":5.2209943532943726e-6,"exhaustive_search_seconds":1.8756836652755737e-6,"evaluations":5.96875,"distances_sum":328.564696518733}}, beam: 2, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.2099609375,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2099609375,"f1":null,"seconds":5.2209943532943726e-6,"exhaustive_search_seconds":1.8756836652755737e-6,"evaluations":5.96875,"distances_sum":328.564696518733}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4052734375, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.4052734375,"f1":null,"seconds":4.4405460357666016e-6,"exhaustive_search_seconds":1.8421560525894165e-6,"evaluations":5.9609375,"distances_sum":772.082348603474}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4052734375,"state":{"ssize":2,"bsize":2},"perf":{"precision":null,"recall":0.4052734375,"f1":null,"seconds":4.4405460357666016e-6,"exhaustive_search_seconds":1.8421560525894165e-6,"evaluations":5.9609375,"distances_sum":772.082348603474}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5107421875, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5107421875,"f1":null,"seconds":5.185604095458984e-6,"exhaustive_search_seconds":1.8421560525894165e-6,"evaluations":7.21875,"distances_sum":956.2727088481806}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7783203125, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7783203125,"f1":0.8646301615051623,"seconds":6.0889869928359985e-6,"exhaustive_search_seconds":1.8421560525894165e-6,"evaluations":8.3359375,"distances_sum":1629.5003919147616}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.79296875, conf: {"ssize":9,"bsize":5}, perf: {"precision":1.0,"recall":0.79296875,"f1":0.8757185522810531,"seconds":6.232410669326782e-6,"exhaustive_search_seconds":1.8421560525894165e-6,"evaluations":8.515625,"distances_sum":1643.2671548712724}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.671875, conf: {"ssize":9,"bsize":4}, perf: {"precision":1.0,"recall":0.671875,"f1":0.7918106199356206,"seconds":5.891546607017517e-6,"exhaustive_search_seconds":1.8421560525894165e-6,"evaluations":8.0390625,"distances_sum":1345.676646667199}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.79296875,"state":{"ssize":9,"bsize":5},"perf":{"precision":1.0,"recall":0.79296875,"f1":0.8757185522810531,"seconds":6.232410669326782e-6,"exhaustive_search_seconds":1.8421560525894165e-6,"evaluations":8.515625,"distances_sum":1643.2671548712724}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":10,"bsize":9}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.950735722610723,"seconds":6.224960088729858e-6,"exhaustive_search_seconds":1.8421560525894165e-6,"evaluations":8.8515625,"distances_sum":2006.3802859892908}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":13,"bsize":9}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9633413461538467,"seconds":6.170943379402161e-6,"exhaustive_search_seconds":1.8421560525894165e-6,"evaluations":8.8671875,"distances_sum":2095.0896951940003}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8701171875, conf: {"ssize":13,"bsize":7}, perf: {"precision":1.0,"recall":0.8701171875,"f1":0.9244136072261078,"seconds":6.081536412239075e-6,"exhaustive_search_seconds":1.8421560525894165e-6,"evaluations":8.6796875,"distances_sum":1858.0490446821211}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8447265625, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8447265625,"f1":0.9085029553779562,"seconds":6.0051679611206055e-6,"exhaustive_search_seconds":1.8421560525894165e-6,"evaluations":8.7421875,"distances_sum":1757.1580075823476}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.833984375, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.833984375,"f1":0.9035688270063278,"seconds":6.346032023429871e-6,"exhaustive_search_seconds":1.8421560525894165e-6,"evaluations":8.71875,"distances_sum":1736.0053693822395}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9371394230769237,"seconds":6.1318278312683105e-6,"exhaustive_search_seconds":1.8421560525894165e-6,"evaluations":8.7578125,"distances_sum":1928.1047146705523}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9345703125,"state":{"ssize":13,"bsize":9},"perf":{"precision":1.0,"recall":0.9345703125,"f1":0.9633413461538467,"seconds":6.170943379402161e-6,"exhaustive_search_seconds":1.8421560525894165e-6,"evaluations":8.8671875,"distances_sum":2095.0896951940003}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9345703125,"state":{"ssize":13,"bsize":9},"perf":{"precision":1.0,"recall":0.9345703125,"f1":0.9633413461538467,"seconds":6.170943379402161e-6,"exhaustive_search_seconds":1.8421560525894165e-6,"evaluations":8.8671875,"distances_sum":2095.0896951940003}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.796875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.796875,"f1":0.8812905844155854,"seconds":5.807727575302124e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.6171875,"distances_sum":1628.685330776854}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.796875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.796875,"f1":0.8812905844155854,"seconds":5.807727575302124e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.6171875,"distances_sum":1628.685330776854}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9568509615384619,"seconds":6.5211206674575806e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.8984375,"distances_sum":2091.580407905066}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.923828125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.9568509615384619,"seconds":6.5211206674575806e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.8984375,"distances_sum":2091.580407905066}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9619140625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9619140625,"f1":0.9793898809523813,"seconds":6.6515058279037476e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.953125,"distances_sum":2211.2408040646474}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9641597985347988,"seconds":6.85080885887146e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.953125,"distances_sum":2101.020343241298}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9619140625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9793898809523813,"seconds":6.6515058279037476e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.953125,"distances_sum":2211.2408040646474}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9619140625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9793898809523813,"seconds":6.6515058279037476e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.953125,"distances_sum":2211.2408040646474}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5517578125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5517578125,"f1":0.6943526959151965,"seconds":4.759058356285095e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":7.90625,"distances_sum":1093.522942379156}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5517578125,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5517578125,"f1":0.6943526959151965,"seconds":4.759058356285095e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":7.90625,"distances_sum":1093.522942379156}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9483521686646693,"seconds":6.409361958503723e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.890625,"distances_sum":2159.9607889690883}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9111328125,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.9111328125,"f1":0.9483521686646693,"seconds":6.409361958503723e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.890625,"distances_sum":2159.9607889690883}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9619140625, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.9619140625,"f1":0.9787202380952386,"seconds":6.724148988723755e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":9.0,"distances_sum":2309.909361366485}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":9,"bsize":11}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.97671130952381,"seconds":6.953254342079163e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":9.0,"distances_sum":2289.5678648094777}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9619140625,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9787202380952386,"seconds":6.724148988723755e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":9.0,"distances_sum":2309.909361366485}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9619140625,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9787202380952386,"seconds":6.724148988723755e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":9.0,"distances_sum":2309.909361366485}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.763671875,"f1":0.8580960705960715,"seconds":5.826354026794434e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.703125,"distances_sum":1623.7425200470343}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.763671875,"f1":0.8566168206793215,"seconds":5.938112735748291e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.5390625,"distances_sum":1647.6820384756356}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76953125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.76953125,"f1":0.8618339993340003,"seconds":5.621463060379028e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.609375,"distances_sum":1657.2972004033825}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.76953125,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.76953125,"f1":0.8618339993340003,"seconds":5.621463060379028e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.609375,"distances_sum":1657.2972004033825}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8564453125, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8564453125,"f1":0.91608911921412,"seconds":6.357207894325256e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.8359375,"distances_sum":1924.001193611667}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9489869505494509,"seconds":6.340444087982178e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.859375,"distances_sum":2147.4711566374463}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.845703125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.845703125,"f1":0.9106570512820522,"seconds":6.094574928283691e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.7890625,"distances_sum":1871.2842959151055}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.849609375, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.849609375,"f1":0.9119396228771236,"seconds":6.057322025299072e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.71875,"distances_sum":1912.8753609443104}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7724609375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7724609375,"f1":0.8657540376290386,"seconds":5.634501576423645e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.6171875,"distances_sum":1648.4051560375813}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91015625,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.91015625,"f1":0.9489869505494509,"seconds":6.340444087982178e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.859375,"distances_sum":2147.4711566374463}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9656822344322349,"seconds":6.319954991340637e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.875,"distances_sum":2234.438923906165}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":3,"bsize":12}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9727506868131871,"seconds":6.798654794692993e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.9765625,"distances_sum":2266.829940207238}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9674507783882786,"seconds":6.632879376411438e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.96875,"distances_sum":2228.794190393927}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9734031593406597,"seconds":6.664544343948364e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.9765625,"distances_sum":2280.308037206895}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9521484375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9734031593406597,"seconds":6.664544343948364e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.9765625,"distances_sum":2280.308037206895}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9521484375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9734031593406597,"seconds":6.664544343948364e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.9765625,"distances_sum":2280.308037206895}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.69140625, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.69140625,"f1":0.8076397560772568,"seconds":5.383044481277466e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.234375,"distances_sum":1489.0992006034426}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.451171875, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.451171875,"f1":null,"seconds":3.995373845100403e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":6.625,"distances_sum":902.4195658743929}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.58203125, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.58203125,"f1":0.7237706737706745,"seconds":4.909932613372803e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.8046875,"distances_sum":1164.0051933552004}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.69140625,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.69140625,"f1":0.8076397560772568,"seconds":5.383044481277466e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.234375,"distances_sum":1489.0992006034426}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7734375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7734375,"f1":0.865193140193141,"seconds":5.7034194469451904e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.5859375,"distances_sum":1680.8186115570857}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.763671875,"f1":0.8582760989010997,"seconds":5.5693089962005615e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.5859375,"distances_sum":1675.21613515218}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.876953125, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.876953125,"f1":0.9292582417582423,"seconds":6.77257776260376e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.890625,"distances_sum":1998.9571201251708}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.765625,"f1":0.8581302378177387,"seconds":5.938112735748291e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.5546875,"distances_sum":1688.5994960431226}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8505859375, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8505859375,"f1":0.9136993215118223,"seconds":6.1765313148498535e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.7265625,"distances_sum":1932.9563575442353}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8349609375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8349609375,"f1":0.9026478729603737,"seconds":6.2193721532821655e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.7109375,"distances_sum":1887.498287074901}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.876953125,"state":{"ssize":7,"bsize":7},"perf":{"precision":1.0,"recall":0.876953125,"f1":0.9292582417582423,"seconds":6.77257776260376e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.890625,"distances_sum":1998.9571201251708}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.961464056776557,"seconds":6.5229833126068115e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.953125,"distances_sum":2245.330294222833}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":11,"bsize":10}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9621508699633705,"seconds":6.491318345069885e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.953125,"distances_sum":2233.8045745478635}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9539892399267405,"seconds":7.268041372299194e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.9296875,"distances_sum":2199.163203615571}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9662774725274731,"seconds":6.705522537231445e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.96875,"distances_sum":2275.756494586581}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9596039377289383,"seconds":6.454065442085266e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.96875,"distances_sum":2217.264522626429}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9599187271062276,"seconds":6.509944796562195e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.9140625,"distances_sum":2263.2935349573468}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9662774725274731,"seconds":6.705522537231445e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.96875,"distances_sum":2275.756494586581}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.939453125,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9662774725274731,"seconds":6.705522537231445e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.96875,"distances_sum":2275.756494586581}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6376953125, conf: {"ssize":1,"bsize":4}, perf: {"precision":null,"recall":0.6376953125,"f1":null,"seconds":5.446374416351318e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":7.796875,"distances_sum":1361.3753724231017}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6376953125,"state":{"ssize":1,"bsize":4},"perf":{"precision":null,"recall":0.6376953125,"f1":null,"seconds":5.446374416351318e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":7.796875,"distances_sum":1361.3753724231017}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6376953125,"state":{"ssize":1,"bsize":4},"perf":{"precision":null,"recall":0.6376953125,"f1":null,"seconds":5.446374416351318e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":7.796875,"distances_sum":1361.3753724231017}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.6376953125,"state":{"ssize":1,"bsize":4},"perf":{"precision":null,"recall":0.6376953125,"f1":null,"seconds":5.446374416351318e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":7.796875,"distances_sum":1361.3753724231017}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6591796875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6591796875,"f1":0.7800296925296935,"seconds":5.168840289115906e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":7.96875,"distances_sum":1191.5625450722418}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1884765625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1884765625,"f1":null,"seconds":4.353001713752747e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":6.140625,"distances_sum":291.41212999652146}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6591796875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6591796875,"f1":0.7800296925296935,"seconds":5.168840289115906e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":7.96875,"distances_sum":1191.5625450722418}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9421531593406598,"seconds":6.191432476043701e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.8125,"distances_sum":1744.1408479914276}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8984375,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.8984375,"f1":0.9421531593406598,"seconds":6.191432476043701e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.8125,"distances_sum":1744.1408479914276}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9555460164835169,"seconds":6.340444087982178e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.8828125,"distances_sum":1807.1186645493208}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9208984375,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.9208984375,"f1":0.9555460164835169,"seconds":6.340444087982178e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.8828125,"distances_sum":1807.1186645493208}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9208984375,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.9208984375,"f1":0.9555460164835169,"seconds":6.340444087982178e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.8828125,"distances_sum":1807.1186645493208}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2275390625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2275390625,"f1":null,"seconds":3.7141144275665283e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":6.578125,"distances_sum":411.1220478207697}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2412109375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2412109375,"f1":null,"seconds":3.7867575883865356e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":6.4921875,"distances_sum":401.49578892679847}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2412109375,"state":{"ssize":4,"bsize":1},"perf":{"precision":null,"recall":0.2412109375,"f1":null,"seconds":3.7867575883865356e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":6.4921875,"distances_sum":401.49578892679847}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8017578125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.8017578125,"f1":0.8838635323010332,"seconds":5.925074219703674e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.671875,"distances_sum":1507.7720929494333}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8017578125,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.8017578125,"f1":0.8838635323010332,"seconds":5.925074219703674e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.671875,"distances_sum":1507.7720929494333}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.841796875, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.841796875,"f1":0.9094608516483526,"seconds":6.154179573059082e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.7734375,"distances_sum":1602.3096741600991}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.841796875,"state":{"ssize":2,"bsize":6},"perf":{"precision":1.0,"recall":0.841796875,"f1":0.9094608516483526,"seconds":6.154179573059082e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.7734375,"distances_sum":1602.3096741600991}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.841796875,"state":{"ssize":2,"bsize":6},"perf":{"precision":1.0,"recall":0.841796875,"f1":0.9094608516483526,"seconds":6.154179573059082e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.7734375,"distances_sum":1602.3096741600991}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4326171875, conf: {"ssize":1,"bsize":2}, perf: {"precision":1.0,"recall":0.4326171875,"f1":0.5845460095460099,"seconds":4.1816383600234985e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":6.421875,"distances_sum":736.6628906125759}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7734375,"f1":0.8662322052947061,"seconds":5.645677447319031e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.625,"distances_sum":1370.4620225327265}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7734375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7734375,"f1":0.8662322052947061,"seconds":5.645677447319031e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.625,"distances_sum":1370.4620225327265}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9473901098901104,"seconds":6.1765313148498535e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.796875,"distances_sum":1721.6408627555627}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.875,"f1":0.9281536172161177,"seconds":6.107613444328308e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.734375,"distances_sum":1627.2430427912232}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9072265625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9072265625,"f1":0.9473901098901104,"seconds":6.1765313148498535e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.796875,"distances_sum":1721.6408627555627}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9732715201465205,"seconds":6.24731183052063e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.90625,"distances_sum":1869.2634322719907}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9676911630036633,"seconds":6.537884473800659e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8671875,"distances_sum":1823.5880597936546}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9757097069597076,"seconds":6.366521120071411e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.9375,"distances_sum":1871.373925374604}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9480025183150188,"seconds":6.1765313148498535e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.7890625,"distances_sum":1736.1043370743726}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9560546875,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9757097069597076,"seconds":6.366521120071411e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.9375,"distances_sum":1871.373925374604}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9560546875,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9757097069597076,"seconds":6.366521120071411e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.9375,"distances_sum":1871.373925374604}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2158203125, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2158203125,"f1":null,"seconds":3.7010759115219116e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":5.7265625,"distances_sum":378.5045807851565}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.65625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.65625,"f1":0.7790416181041188,"seconds":5.338340997695923e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.0390625,"distances_sum":1199.3243999812494}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.408203125, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.408203125,"f1":null,"seconds":4.131346940994263e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":6.34375,"distances_sum":716.0609327770701}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.65625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.65625,"f1":0.7790416181041188,"seconds":5.338340997695923e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.0390625,"distances_sum":1199.3243999812494}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8203125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8203125,"f1":0.8929976273726282,"seconds":6.059184670448303e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.546875,"distances_sum":1575.9478908183917}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7822265625, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.7822265625,"f1":0.8713572885447892,"seconds":5.709007382392883e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.5390625,"distances_sum":1466.907287951806}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8203125,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8203125,"f1":0.8929976273726282,"seconds":6.059184670448303e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.546875,"distances_sum":1575.9478908183917}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9398923992673999,"seconds":6.4782798290252686e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.7578125,"distances_sum":1792.2118421317318}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8330078125, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.8330078125,"f1":0.9023299617049625,"seconds":5.856156349182129e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.671875,"distances_sum":1590.5339839937187}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.957016941391942,"seconds":6.388872861862183e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.9375,"distances_sum":1847.4250582638745}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8271484375, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8271484375,"f1":0.8988698801198808,"seconds":5.796551704406738e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.6875,"distances_sum":1561.3378655334639}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.923828125,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.957016941391942,"seconds":6.388872861862183e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.9375,"distances_sum":1847.4250582638745}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.923828125,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.957016941391942,"seconds":6.388872861862183e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.9375,"distances_sum":1847.4250582638745}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2314453125, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2314453125,"f1":null,"seconds":3.417953848838806e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":6.0390625,"distances_sum":396.0013612793007}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.541015625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.541015625,"f1":0.6874777999778006,"seconds":5.00120222568512e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.1953125,"distances_sum":940.7750307753547}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.541015625,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.541015625,"f1":0.6874777999778006,"seconds":5.00120222568512e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.1953125,"distances_sum":940.7750307753547}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7822265625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7822265625,"f1":0.8721387987012996,"seconds":5.906447768211365e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.46875,"distances_sum":1400.6451324483717}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8125,"f1":0.8888085872460879,"seconds":6.301328539848328e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.75,"distances_sum":1498.3521444044463}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.681640625, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.681640625,"f1":0.7990502553002562,"seconds":6.705522537231445e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.0625,"distances_sum":1181.029483367126}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.54296875, conf: {"ssize":5,"bsize":3}, perf: {"precision":null,"recall":0.54296875,"f1":null,"seconds":4.852190613746643e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.265625,"distances_sum":948.5467107372624}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78515625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.78515625,"f1":0.8704103188478197,"seconds":5.6978315114974976e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.484375,"distances_sum":1414.2408325520666}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8125,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8125,"f1":0.8888085872460879,"seconds":6.301328539848328e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.75,"distances_sum":1498.3521444044463}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9565876831501836,"seconds":7.184222340583801e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8984375,"distances_sum":1778.4429834392272}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9465258699633705,"seconds":7.150694727897644e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8984375,"distances_sum":1726.9338377606825}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9490956959706963,"seconds":6.409361958503723e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8671875,"distances_sum":1745.465844408885}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8681640625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8681640625,"f1":0.9237325174825183,"seconds":7.202848792076111e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.875,"distances_sum":1617.8351307093012}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.921875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.921875,"f1":0.9565876831501836,"seconds":7.184222340583801e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8984375,"distances_sum":1778.4429834392272}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.921875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.921875,"f1":0.9565876831501836,"seconds":7.184222340583801e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8984375,"distances_sum":1778.4429834392272}}, n: 9
mean(cfft.distances) = 0.35308681561925204
mean(cdnet.distances) = 0.3908321515525019
mean(crand.distances) = 0.3884090163868531
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8444444444444444
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8911111111111111
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.9
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.9155555555555556
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8955555555555555
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.9022222222222221
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9177777777777778
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9444444444444443
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.94
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8666666666666667
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8755555555555555
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.9355555555555556
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.9111111111111111
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9422222222222222
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.8955555555555555
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9311111111111111
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9177777777777777
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8466666666666667
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8911111111111111
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8822222222222221
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8711111111111111
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9288888888888889
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9377777777777778
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8866666666666667
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9022222222222221
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9111111111111111
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.9133333333333332
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.9111111111111111
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9022222222222221
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9244444444444445
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9044444444444445
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9044444444444445
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 2, 2, 3, 3, 1, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 2, 2, 3, 3, 1, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 2, 2, 3, 3, 1, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 2, 2, 3, 3, 1, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 2, 2, 3, 3, 1, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 2, 2, 3, 3, 1, 1, 3]
acc = 0.9266666666666666
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 2, 2, 3, 3, 1, 1, 3]
acc = 0.9666666666666667
*** finished computation of 12 references, err: [Inf, 0.5333987021446228] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 32, 8]]
** centroid: 1, normalized-entropy: 0.7219280948873623, [(2, 32), (3, 8)]
*** center 2: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 13]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 1, 1]]
** centroid: 8, normalized-entropy: 1.0, [(2, 1), (3, 1)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 11]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
*** center 11: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
finished with 14 centroids; started with 12
acc = 0.9333333333333333
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.19090973444327758] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19090973444327758, 0.15644070236977223] ***
*** finished computation of 7 references, err: [Inf, 0.19090973444327758, 0.15644070236977223] ***
*** center 1: selecting labels [1] (freq >= 2) [from [104, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [9, 85, 0]]
** centroid: 2, normalized-entropy: 0.45535954758523894, [(1, 9), (2, 85)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [143, 4, 0]]
** centroid: 3, normalized-entropy: 0.1802056702832372, [(1, 143), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [7, 115, 0]]
** centroid: 4, normalized-entropy: 0.3169435645054571, [(1, 7), (2, 115)]
*** center 5: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 52, 22]]
** centroid: 6, normalized-entropy: 0.8779620013943914, [(2, 52), (3, 22)]
*** center 7: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.36522258159651366] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36522258159651366, 0.3084876583945062] ***
*** finished computation of 3 references, err: [Inf, 0.36522258159651366, 0.3084876583945062] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [124, 191, 22]]
** centroid: 1, normalized-entropy: 0.7899522598454861, [(1, 124), (2, 191), (3, 22)]
*** center 2: selecting labels [1] (freq >= 1) [from [168, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [96, 65, 0]]
** centroid: 3, normalized-entropy: 0.9730888786358559, [(1, 96), (2, 65)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.37453912833783737] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37453912833783737, 0.2977621449252543] ***
*** finished computation of 3 references, err: [Inf, 0.37453912833783737, 0.2977621449252543] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [274, 46, 0]]
** centroid: 1, normalized-entropy: 0.5939760926692156, [(1, 274), (2, 46)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [123, 43, 0]]
** centroid: 2, normalized-entropy: 0.825288415630559, [(1, 123), (2, 43)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 158, 23]]
** centroid: 3, normalized-entropy: 0.5493526097279925, [(2, 158), (3, 23)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2686146017962667] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2686146017962667, 0.1789426900393356] ***
*** finished computation of 7 references, err: [Inf, 0.2686146017962667, 0.1789426900393356] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [89, 89, 0]]
** centroid: 1, normalized-entropy: 1.0, [(1, 89), (2, 89)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [71, 39, 0]]
** centroid: 2, normalized-entropy: 0.938062149702295, [(1, 71), (2, 39)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 83, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [159, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 29, 23]]
** centroid: 5, normalized-entropy: 0.990374836448575, [(2, 29), (3, 23)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [78, 7, 0]]
** centroid: 7, normalized-entropy: 0.4104161417181887, [(1, 78), (2, 7)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2158939673145046] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2158939673145046, 0.1636091610723953] ***
*** finished computation of 7 references, err: [Inf, 0.2158939673145046, 0.1636091610723953] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 53, 21]]
** centroid: 1, normalized-entropy: 0.8605553930586318, [(2, 53), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [60, 31, 0]]
** centroid: 2, normalized-entropy: 0.9254482516437047, [(1, 60), (2, 31)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [49, 59, 0]]
** centroid: 3, normalized-entropy: 0.9938067403672294, [(1, 49), (2, 59)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [43, 41, 0]]
** centroid: 4, normalized-entropy: 0.9995910341890979, [(1, 43), (2, 41)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [79, 15, 0]]
** centroid: 5, normalized-entropy: 0.6332905746550958, [(1, 79), (2, 15)]
*** center 6: selecting labels [1] (freq >= 2) [from [160, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 56, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3620560332075567] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3620560332075567, 0.30002310154253375] ***
*** finished computation of 3 references, err: [Inf, 0.3620560332075567, 0.30002310154253375] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [101, 159, 22]]
** centroid: 1, normalized-entropy: 0.8099577180939357, [(1, 101), (2, 159), (3, 22)]
*** center 2: selecting labels [1] (freq >= 1) [from [197, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [90, 97, 0]]
** centroid: 3, normalized-entropy: 0.9989889820169301, [(1, 90), (2, 97)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.48310812891529376] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.48310812891529376, 0.31404876752269234] ***
*** finished computation of 3 references, err: [Inf, 0.48310812891529376, 0.31404876752269234] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [234, 35, 0]]
** centroid: 1, normalized-entropy: 0.5577439611603769, [(1, 234), (2, 35)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [163, 96, 0]]
** centroid: 2, normalized-entropy: 0.9511747386174548, [(1, 163), (2, 96)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 116, 23]]
** centroid: 3, normalized-entropy: 0.6472308538450208, [(2, 116), (3, 23)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3733832066993172] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3733832066993172, 0.29913089430655004] ***
*** finished computation of 3 references, err: [Inf, 0.3733832066993172, 0.29913089430655004] ***
*** center 1: selecting labels [1] (freq >= 1) [from [206, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [111, 62, 0]]
** centroid: 2, normalized-entropy: 0.9413315085104355, [(1, 111), (2, 62)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [74, 193, 21]]
** centroid: 3, normalized-entropy: 0.7357691978668791, [(1, 74), (2, 193), (3, 21)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.1905170336985183] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1905170336985183, 0.15477805425742971] ***
*** starting iteration: 2; err: [Inf, 0.1905170336985183, 0.15477805425742971] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1905170336985183, 0.15477805425742971, 0.1519518683939982] ***
*** starting iteration: 3; err: [Inf, 0.1905170336985183, 0.15477805425742971, 0.1519518683939982] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1905170336985183, 0.15477805425742971, 0.1519518683939982, 0.15001011773518794] ***
*** finished computation of 7 references, err: [Inf, 0.1905170336985183, 0.15477805425742971, 0.1519518683939982, 0.15001011773518794] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [31, 45, 0]]
** centroid: 1, normalized-entropy: 0.9753817903274211, [(1, 31), (2, 45)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 74, 1]]
** centroid: 2, normalized-entropy: 0.10215803640865054, [(2, 74), (3, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 67, 21]]
** centroid: 4, normalized-entropy: 0.7927652363756529, [(2, 67), (3, 21)]
*** center 5: selecting labels [1] (freq >= 1) [from [122, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [100, 15, 0]]
** centroid: 6, normalized-entropy: 0.5586293734521991, [(1, 100), (2, 15)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [45, 55, 0]]
** centroid: 7, normalized-entropy: 0.9927744539878083, [(1, 45), (2, 55)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.18145453686284171] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18145453686284171, 0.15945327550038763] ***
*** starting iteration: 2; err: [Inf, 0.18145453686284171, 0.15945327550038763] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18145453686284171, 0.15945327550038763, 0.15253409151632946] ***
*** starting iteration: 3; err: [Inf, 0.18145453686284171, 0.15945327550038763, 0.15253409151632946] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18145453686284171, 0.15945327550038763, 0.15253409151632946, 0.14668972715190884] ***
*** finished computation of 7 references, err: [Inf, 0.18145453686284171, 0.15945327550038763, 0.15253409151632946, 0.14668972715190884] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 81, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 57, 23]]
** centroid: 2, normalized-entropy: 0.8654698974285927, [(2, 57), (3, 23)]
*** center 3: selecting labels [1] (freq >= 1) [from [102, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [13, 78, 0]]
** centroid: 4, normalized-entropy: 0.5916727785823274, [(1, 13), (2, 78)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [83, 3, 0]]
** centroid: 5, normalized-entropy: 0.21832103023746746, [(1, 83), (2, 3)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [109, 28, 0]]
** centroid: 6, normalized-entropy: 0.7306012127539728, [(1, 109), (2, 28)]
*** center 7: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.20789653450359535] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20789653450359535, 0.1631293472250284] ***
*** starting iteration: 2; err: [Inf, 0.20789653450359535, 0.1631293472250284] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20789653450359535, 0.1631293472250284, 0.15746109820888385] ***
*** starting iteration: 3; err: [Inf, 0.20789653450359535, 0.1631293472250284, 0.15746109820888385] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20789653450359535, 0.1631293472250284, 0.15746109820888385, 0.15620027147121784] ***
*** finished computation of 7 references, err: [Inf, 0.20789653450359535, 0.1631293472250284, 0.15746109820888385, 0.15620027147121784] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [54, 3, 0]]
** centroid: 1, normalized-entropy: 0.2974722489192896, [(1, 54), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [94, 38, 0]]
** centroid: 2, normalized-entropy: 0.8659653498997099, [(1, 94), (2, 38)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 62, 2]]
** centroid: 3, normalized-entropy: 0.2006223243127146, [(2, 62), (3, 2)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 106, 19]]
** centroid: 4, normalized-entropy: 0.6148227571490692, [(2, 106), (3, 19)]
*** center 5: selecting labels [1] (freq >= 1) [from [102, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [35, 46, 0]]
** centroid: 7, normalized-entropy: 0.9866554896538049, [(1, 35), (2, 46)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4733758809900767] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4733758809900767, 0.30276139756362586] ***
*** starting iteration: 2; err: [Inf, 0.4733758809900767, 0.30276139756362586] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4733758809900767, 0.30276139756362586, 0.28784791342410687] ***
*** starting iteration: 3; err: [Inf, 0.4733758809900767, 0.30276139756362586, 0.28784791342410687] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4733758809900767, 0.30276139756362586, 0.28784791342410687, 0.2853628587615383] ***
*** finished computation of 3 references, err: [Inf, 0.4733758809900767, 0.30276139756362586, 0.28784791342410687, 0.2853628587615383] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [228, 5, 0]]
** centroid: 1, normalized-entropy: 0.14955711588175696, [(1, 228), (2, 5)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [156, 67, 0]]
** centroid: 2, normalized-entropy: 0.8818383667221816, [(1, 156), (2, 67)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [4, 184, 22]]
** centroid: 3, normalized-entropy: 0.38921955304314415, [(1, 4), (2, 184), (3, 22)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.5481936624692544] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5481936624692544, 0.32061425036983915] ***
*** starting iteration: 2; err: [Inf, 0.5481936624692544, 0.32061425036983915] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5481936624692544, 0.32061425036983915, 0.29889164438172394] ***
*** starting iteration: 3; err: [Inf, 0.5481936624692544, 0.32061425036983915, 0.29889164438172394] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5481936624692544, 0.32061425036983915, 0.29889164438172394, 0.2900004695676479] ***
*** finished computation of 3 references, err: [Inf, 0.5481936624692544, 0.32061425036983915, 0.29889164438172394, 0.2900004695676479] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [5, 164, 23]]
** centroid: 1, normalized-entropy: 0.440411004257356, [(1, 5), (2, 164), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [119, 78, 0]]
** centroid: 2, normalized-entropy: 0.9685254899898754, [(1, 119), (2, 78)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [273, 5, 0]]
** centroid: 3, normalized-entropy: 0.129975821120786, [(1, 273), (2, 5)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.35101177785378035] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35101177785378035, 0.3071048083803107] ***
*** starting iteration: 2; err: [Inf, 0.35101177785378035, 0.3071048083803107] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35101177785378035, 0.3071048083803107, 0.2973323102336729] ***
*** starting iteration: 3; err: [Inf, 0.35101177785378035, 0.3071048083803107, 0.2973323102336729] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35101177785378035, 0.3071048083803107, 0.2973323102336729, 0.2945500646830946] ***
*** finished computation of 3 references, err: [Inf, 0.35101177785378035, 0.3071048083803107, 0.2973323102336729, 0.2945500646830946] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [124, 95, 0]]
** centroid: 1, normalized-entropy: 0.9873138848093351, [(1, 124), (2, 95)]
*** center 2: selecting labels [1] (freq >= 2) [from [206, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [61, 160, 21]]
** centroid: 3, normalized-entropy: 0.7582700574529344, [(1, 61), (2, 160), (3, 21)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.36479485774407155] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36479485774407155, 0.2585703003018893] ***
*** starting iteration: 2; err: [Inf, 0.36479485774407155, 0.2585703003018893] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36479485774407155, 0.2585703003018893, 0.2426873277145642] ***
*** starting iteration: 3; err: [Inf, 0.36479485774407155, 0.2585703003018893, 0.2426873277145642] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36479485774407155, 0.2585703003018893, 0.2426873277145642, 0.23713839594232808] ***
*** starting iteration: 4; err: [Inf, 0.36479485774407155, 0.2585703003018893, 0.2426873277145642, 0.23713839594232808] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36479485774407155, 0.2585703003018893, 0.2426873277145642, 0.23713839594232808, 0.2354115949882133] ***
*** starting iteration: 5; err: [Inf, 0.36479485774407155, 0.2585703003018893, 0.2426873277145642, 0.23713839594232808, 0.2354115949882133] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36479485774407155, 0.2585703003018893, 0.2426873277145642, 0.23713839594232808, 0.2354115949882133, 0.23430698264149707] ***
*** starting iteration: 6; err: [Inf, 0.36479485774407155, 0.2585703003018893, 0.2426873277145642, 0.23713839594232808, 0.2354115949882133, 0.23430698264149707] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36479485774407155, 0.2585703003018893, 0.2426873277145642, 0.23713839594232808, 0.2354115949882133, 0.23430698264149707, 0.23385353421711283] ***
*** finished computation of 3 references, err: [Inf, 0.36479485774407155, 0.2585703003018893, 0.2426873277145642, 0.23713839594232808, 0.2354115949882133, 0.23430698264149707, 0.23385353421711283] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [170, 40, 0]]
** centroid: 1, normalized-entropy: 0.7024665512903904, [(1, 170), (2, 40)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 194, 22]]
** centroid: 2, normalized-entropy: 0.4748384883008607, [(2, 194), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [218, 22, 0]]
** centroid: 3, normalized-entropy: 0.44200860222772487, [(1, 218), (2, 22)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.25461229679664815] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.25461229679664815, 0.23510938574108986] ***
*** starting iteration: 2; err: [Inf, 0.25461229679664815, 0.23510938574108986] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.25461229679664815, 0.23510938574108986, 0.23248084916452552] ***
*** starting iteration: 3; err: [Inf, 0.25461229679664815, 0.23510938574108986, 0.23248084916452552] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.25461229679664815, 0.23510938574108986, 0.23248084916452552, 0.23125129419545093] ***
*** starting iteration: 4; err: [Inf, 0.25461229679664815, 0.23510938574108986, 0.23248084916452552, 0.23125129419545093] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.25461229679664815, 0.23510938574108986, 0.23248084916452552, 0.23125129419545093, 0.23094591573076226] ***
*** finished computation of 3 references, err: [Inf, 0.25461229679664815, 0.23510938574108986, 0.23248084916452552, 0.23125129419545093, 0.23094591573076226] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [169, 44, 0]]
** centroid: 1, normalized-entropy: 0.7348804373538654, [(1, 169), (2, 44)]
*** center 2: selecting labels [1] (freq >= 1) [from [215, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [13, 203, 23]]
** centroid: 3, normalized-entropy: 0.4754315313987545, [(1, 13), (2, 203), (3, 23)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3027683052079364] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3027683052079364, 0.2404201507283517] ***
*** starting iteration: 2; err: [Inf, 0.3027683052079364, 0.2404201507283517] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3027683052079364, 0.2404201507283517, 0.2351557125757704] ***
*** starting iteration: 3; err: [Inf, 0.3027683052079364, 0.2404201507283517, 0.2351557125757704] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3027683052079364, 0.2404201507283517, 0.2351557125757704, 0.23392021695132378] ***
*** starting iteration: 4; err: [Inf, 0.3027683052079364, 0.2404201507283517, 0.2351557125757704, 0.23392021695132378] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3027683052079364, 0.2404201507283517, 0.2351557125757704, 0.23392021695132378, 0.23332648743027778] ***
*** finished computation of 3 references, err: [Inf, 0.3027683052079364, 0.2404201507283517, 0.2351557125757704, 0.23392021695132378, 0.23332648743027778] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [111, 95, 0]]
** centroid: 1, normalized-entropy: 0.9956440031235009, [(1, 111), (2, 95)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [70, 160, 21]]
** centroid: 2, normalized-entropy: 0.7743605975445133, [(1, 70), (2, 160), (3, 21)]
*** center 3: selecting labels [1] (freq >= 1) [from [210, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2936165848741302] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2936165848741302, 0.24258266326023248] ***
*** starting iteration: 2; err: [Inf, 0.2936165848741302, 0.24258266326023248] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2936165848741302, 0.24258266326023248, 0.2343067386839259] ***
*** starting iteration: 3; err: [Inf, 0.2936165848741302, 0.24258266326023248, 0.2343067386839259] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2936165848741302, 0.24258266326023248, 0.2343067386839259, 0.23332826270478535] ***
*** finished computation of 3 references, err: [Inf, 0.2936165848741302, 0.24258266326023248, 0.2343067386839259, 0.23332826270478535] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [204, 19, 0]]
** centroid: 1, normalized-entropy: 0.4202479155363888, [(1, 204), (2, 19)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 207, 22]]
** centroid: 2, normalized-entropy: 0.4564121033267219, [(2, 207), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [184, 30, 0]]
** centroid: 3, normalized-entropy: 0.5847281182574745, [(1, 184), (2, 30)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3117022732917828] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3117022732917828, 0.23143186480102912] ***
*** starting iteration: 2; err: [Inf, 0.3117022732917828, 0.23143186480102912] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3117022732917828, 0.23143186480102912, 0.23102413826919477] ***
*** finished computation of 3 references, err: [Inf, 0.3117022732917828, 0.23143186480102912, 0.23102413826919477] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [169, 44, 0]]
** centroid: 1, normalized-entropy: 0.7348804373538654, [(1, 169), (2, 44)]
*** center 2: selecting labels [1] (freq >= 1) [from [210, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [18, 203, 23]]
** centroid: 3, normalized-entropy: 0.5169904187124194, [(1, 18), (2, 203), (3, 23)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3933707570470032] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3933707570470032, 0.2559762462412288] ***
*** starting iteration: 2; err: [Inf, 0.3933707570470032, 0.2559762462412288] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3933707570470032, 0.2559762462412288, 0.23703177418207927] ***
*** starting iteration: 3; err: [Inf, 0.3933707570470032, 0.2559762462412288, 0.23703177418207927] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3933707570470032, 0.2559762462412288, 0.23703177418207927, 0.23444923085776315] ***
*** finished computation of 3 references, err: [Inf, 0.3933707570470032, 0.2559762462412288, 0.23703177418207927, 0.23444923085776315] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [109, 95, 0]]
** centroid: 1, normalized-entropy: 0.9965999782846083, [(1, 109), (2, 95)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [96, 160, 21]]
** centroid: 2, normalized-entropy: 0.8008548954806682, [(1, 96), (2, 160), (3, 21)]
*** center 3: selecting labels [1] (freq >= 1) [from [186, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.21650248010539347] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21650248010539347, 0.16895986113881878] ***
*** starting iteration: 2; err: [Inf, 0.21650248010539347, 0.16895986113881878] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21650248010539347, 0.16895986113881878, 0.15973358222929476] ***
*** starting iteration: 3; err: [Inf, 0.21650248010539347, 0.16895986113881878, 0.15973358222929476] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21650248010539347, 0.16895986113881878, 0.15973358222929476, 0.1549380595751062] ***
*** starting iteration: 4; err: [Inf, 0.21650248010539347, 0.16895986113881878, 0.15973358222929476, 0.1549380595751062] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21650248010539347, 0.16895986113881878, 0.15973358222929476, 0.1549380595751062, 0.15257720943462025] ***
*** starting iteration: 5; err: [Inf, 0.21650248010539347, 0.16895986113881878, 0.15973358222929476, 0.1549380595751062, 0.15257720943462025] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21650248010539347, 0.16895986113881878, 0.15973358222929476, 0.1549380595751062, 0.15257720943462025, 0.15158559087462523] ***
*** finished computation of 7 references, err: [Inf, 0.21650248010539347, 0.16895986113881878, 0.15973358222929476, 0.1549380595751062, 0.15257720943462025, 0.15158559087462523] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [89, 51, 0]]
** centroid: 1, normalized-entropy: 0.9461832469695688, [(1, 89), (2, 51)]
*** center 2: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 96, 7]]
** centroid: 3, normalized-entropy: 0.35826863860424546, [(2, 96), (3, 7)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [26, 52, 0]]
** centroid: 4, normalized-entropy: 0.9182958340544894, [(1, 26), (2, 52)]
*** center 5: selecting labels [1] (freq >= 1) [from [93, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [104, 2, 0]]
** centroid: 6, normalized-entropy: 0.13503620280212753, [(1, 104), (2, 2)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 55, 15]]
** centroid: 7, normalized-entropy: 0.7495952572594798, [(2, 55), (3, 15)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2443322064257276] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2443322064257276, 0.1584807439152894] ***
*** starting iteration: 2; err: [Inf, 0.2443322064257276, 0.1584807439152894] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2443322064257276, 0.1584807439152894, 0.15057082686746406] ***
*** starting iteration: 3; err: [Inf, 0.2443322064257276, 0.1584807439152894, 0.15057082686746406] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2443322064257276, 0.1584807439152894, 0.15057082686746406, 0.14802827728239223] ***
*** starting iteration: 4; err: [Inf, 0.2443322064257276, 0.1584807439152894, 0.15057082686746406, 0.14802827728239223] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2443322064257276, 0.1584807439152894, 0.15057082686746406, 0.14802827728239223, 0.1463305669441551] ***
*** starting iteration: 5; err: [Inf, 0.2443322064257276, 0.1584807439152894, 0.15057082686746406, 0.14802827728239223, 0.1463305669441551] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2443322064257276, 0.1584807439152894, 0.15057082686746406, 0.14802827728239223, 0.1463305669441551, 0.14546572031087426] ***
*** finished computation of 7 references, err: [Inf, 0.2443322064257276, 0.1584807439152894, 0.15057082686746406, 0.14802827728239223, 0.1463305669441551, 0.14546572031087426] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [97, 19, 0]]
** centroid: 1, normalized-entropy: 0.6433071292001625, [(1, 97), (2, 19)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [6, 72, 0]]
** centroid: 2, normalized-entropy: 0.3912435636292556, [(1, 6), (2, 72)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [1, 106, 0]]
** centroid: 3, normalized-entropy: 0.07642429309554791, [(1, 1), (2, 106)]
*** center 4: selecting labels [1] (freq >= 1) [from [117, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 46, 23]]
** centroid: 5, normalized-entropy: 0.9182958340544894, [(2, 46), (3, 23)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [90, 4, 0]]
** centroid: 6, normalized-entropy: 0.2538784402981617, [(1, 90), (2, 4)]
*** center 7: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2921384260103084] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2921384260103084, 0.19223897585944122] ***
*** starting iteration: 2; err: [Inf, 0.2921384260103084, 0.19223897585944122] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2921384260103084, 0.19223897585944122, 0.16861226038401317] ***
*** starting iteration: 3; err: [Inf, 0.2921384260103084, 0.19223897585944122, 0.16861226038401317] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2921384260103084, 0.19223897585944122, 0.16861226038401317, 0.1556633383872035] ***
*** starting iteration: 4; err: [Inf, 0.2921384260103084, 0.19223897585944122, 0.16861226038401317, 0.1556633383872035] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2921384260103084, 0.19223897585944122, 0.16861226038401317, 0.1556633383872035, 0.15210724245572554] ***
*** starting iteration: 5; err: [Inf, 0.2921384260103084, 0.19223897585944122, 0.16861226038401317, 0.1556633383872035, 0.15210724245572554] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2921384260103084, 0.19223897585944122, 0.16861226038401317, 0.1556633383872035, 0.15210724245572554, 0.1506699088163607] ***
*** starting iteration: 6; err: [Inf, 0.2921384260103084, 0.19223897585944122, 0.16861226038401317, 0.1556633383872035, 0.15210724245572554, 0.1506699088163607] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2921384260103084, 0.19223897585944122, 0.16861226038401317, 0.1556633383872035, 0.15210724245572554, 0.1506699088163607, 0.14981358156454327] ***
*** finished computation of 7 references, err: [Inf, 0.2921384260103084, 0.19223897585944122, 0.16861226038401317, 0.1556633383872035, 0.15210724245572554, 0.1506699088163607, 0.14981358156454327] ***
*** center 1: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [37, 62, 0]]
** centroid: 3, normalized-entropy: 0.9534985819759996, [(1, 37), (2, 62)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [36, 46, 0]]
** centroid: 4, normalized-entropy: 0.9892452969285004, [(1, 36), (2, 46)]
*** center 5: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 111, 21]]
** centroid: 6, normalized-entropy: 0.6321302781219708, [(2, 111), (3, 21)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [65, 36, 0]]
** centroid: 7, normalized-entropy: 0.9396846718728562, [(1, 65), (2, 36)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26326155893479447] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26326155893479447, 0.16510822296257247] ***
*** starting iteration: 2; err: [Inf, 0.26326155893479447, 0.16510822296257247] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26326155893479447, 0.16510822296257247, 0.15603820369271254] ***
*** starting iteration: 3; err: [Inf, 0.26326155893479447, 0.16510822296257247, 0.15603820369271254] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26326155893479447, 0.16510822296257247, 0.15603820369271254, 0.15306505058436198] ***
*** starting iteration: 4; err: [Inf, 0.26326155893479447, 0.16510822296257247, 0.15603820369271254, 0.15306505058436198] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26326155893479447, 0.16510822296257247, 0.15603820369271254, 0.15306505058436198, 0.15153072641633852] ***
*** starting iteration: 5; err: [Inf, 0.26326155893479447, 0.16510822296257247, 0.15603820369271254, 0.15306505058436198, 0.15153072641633852] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26326155893479447, 0.16510822296257247, 0.15603820369271254, 0.15306505058436198, 0.15153072641633852, 0.14993297399281086] ***
*** starting iteration: 6; err: [Inf, 0.26326155893479447, 0.16510822296257247, 0.15603820369271254, 0.15306505058436198, 0.15153072641633852, 0.14993297399281086] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26326155893479447, 0.16510822296257247, 0.15603820369271254, 0.15306505058436198, 0.15153072641633852, 0.14993297399281086, 0.14849517335513937] ***
*** starting iteration: 7; err: [Inf, 0.26326155893479447, 0.16510822296257247, 0.15603820369271254, 0.15306505058436198, 0.15153072641633852, 0.14993297399281086, 0.14849517335513937] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26326155893479447, 0.16510822296257247, 0.15603820369271254, 0.15306505058436198, 0.15153072641633852, 0.14993297399281086, 0.14849517335513937, 0.14790020623928155] ***
*** finished computation of 7 references, err: [Inf, 0.26326155893479447, 0.16510822296257247, 0.15603820369271254, 0.15306505058436198, 0.15153072641633852, 0.14993297399281086, 0.14849517335513937, 0.14790020623928155] ***
*** center 1: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 113, 22]]
** centroid: 2, normalized-entropy: 0.6413510165846328, [(2, 113), (3, 22)]
*** center 3: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [34, 43, 0]]
** centroid: 4, normalized-entropy: 0.9901226308935799, [(1, 34), (2, 43)]
*** center 5: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [40, 60, 0]]
** centroid: 6, normalized-entropy: 0.9709505944546688, [(1, 40), (2, 60)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [81, 40, 0]]
** centroid: 7, normalized-entropy: 0.9155163444717095, [(1, 81), (2, 40)]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.18856328777948636] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18856328777948636, 0.15963503391226416] ***
*** starting iteration: 2; err: [Inf, 0.18856328777948636, 0.15963503391226416] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18856328777948636, 0.15963503391226416, 0.14896296991022775] ***
*** starting iteration: 3; err: [Inf, 0.18856328777948636, 0.15963503391226416, 0.14896296991022775] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18856328777948636, 0.15963503391226416, 0.14896296991022775, 0.1448687434303288] ***
*** starting iteration: 4; err: [Inf, 0.18856328777948636, 0.15963503391226416, 0.14896296991022775, 0.1448687434303288] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18856328777948636, 0.15963503391226416, 0.14896296991022775, 0.1448687434303288, 0.1431616614607611] ***
*** starting iteration: 5; err: [Inf, 0.18856328777948636, 0.15963503391226416, 0.14896296991022775, 0.1448687434303288, 0.1431616614607611] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18856328777948636, 0.15963503391226416, 0.14896296991022775, 0.1448687434303288, 0.1431616614607611, 0.1424849953996702] ***
*** finished computation of 7 references, err: [Inf, 0.18856328777948636, 0.15963503391226416, 0.14896296991022775, 0.1448687434303288, 0.1431616614607611, 0.1424849953996702] ***
*** center 1: selecting labels [1] (freq >= 2) [from [111, 1, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [1, 102, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [79, 55, 0]]
** centroid: 4, normalized-entropy: 0.9767349863544337, [(1, 79), (2, 55)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 77, 23]]
** centroid: 5, normalized-entropy: 0.7780113035465377, [(2, 77), (3, 23)]
*** center 6: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [61, 12, 0]]
** centroid: 7, normalized-entropy: 0.644694043811662, [(1, 61), (2, 12)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2649618334037767] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2649618334037767, 0.16143176170845128] ***
*** starting iteration: 2; err: [Inf, 0.2649618334037767, 0.16143176170845128] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2649618334037767, 0.16143176170845128, 0.15174485594131934] ***
*** starting iteration: 3; err: [Inf, 0.2649618334037767, 0.16143176170845128, 0.15174485594131934] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2649618334037767, 0.16143176170845128, 0.15174485594131934, 0.1486970155082386] ***
*** starting iteration: 4; err: [Inf, 0.2649618334037767, 0.16143176170845128, 0.15174485594131934, 0.1486970155082386] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2649618334037767, 0.16143176170845128, 0.15174485594131934, 0.1486970155082386, 0.14717866609437108] ***
*** starting iteration: 5; err: [Inf, 0.2649618334037767, 0.16143176170845128, 0.15174485594131934, 0.1486970155082386, 0.14717866609437108] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2649618334037767, 0.16143176170845128, 0.15174485594131934, 0.1486970155082386, 0.14717866609437108, 0.14591648900320103] ***
*** starting iteration: 6; err: [Inf, 0.2649618334037767, 0.16143176170845128, 0.15174485594131934, 0.1486970155082386, 0.14717866609437108, 0.14591648900320103] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2649618334037767, 0.16143176170845128, 0.15174485594131934, 0.1486970155082386, 0.14717866609437108, 0.14591648900320103, 0.1452846011137129] ***
*** finished computation of 7 references, err: [Inf, 0.2649618334037767, 0.16143176170845128, 0.15174485594131934, 0.1486970155082386, 0.14717866609437108, 0.14591648900320103, 0.1452846011137129] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [66, 26, 0]]
** centroid: 1, normalized-entropy: 0.8589810370425965, [(1, 66), (2, 26)]
*** center 2: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 107, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 79, 21]]
** centroid: 5, normalized-entropy: 0.7414827399312738, [(2, 79), (3, 21)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [56, 36, 0]]
** centroid: 6, normalized-entropy: 0.9656361333706099, [(1, 56), (2, 36)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [95, 7, 0]]
** centroid: 7, normalized-entropy: 0.3607805650514635, [(1, 95), (2, 7)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.38166704617239633] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38166704617239633, 0.3046280273098102] ***
*** finished computation of 3 references, err: [Inf, 0.38166704617239633, 0.3046280273098102] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [255, 39, 0]]
** centroid: 1, normalized-entropy: 0.5646695797525669, [(1, 255), (2, 39)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [136, 36, 0]]
** centroid: 2, normalized-entropy: 0.7401470427139037, [(1, 136), (2, 36)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 180, 21]]
** centroid: 3, normalized-entropy: 0.4830306801456181, [(2, 180), (3, 21)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.20014517531134524] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20014517531134524, 0.1512834934948443] ***
*** starting iteration: 2; err: [Inf, 0.20014517531134524, 0.1512834934948443] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20014517531134524, 0.1512834934948443, 0.1471924866726566] ***
*** starting iteration: 3; err: [Inf, 0.20014517531134524, 0.1512834934948443, 0.1471924866726566] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20014517531134524, 0.1512834934948443, 0.1471924866726566, 0.14631103364717182] ***
*** finished computation of 7 references, err: [Inf, 0.20014517531134524, 0.1512834934948443, 0.1471924866726566, 0.14631103364717182] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [10, 102, 0]]
** centroid: 1, normalized-entropy: 0.4340811200043348, [(1, 10), (2, 102)]
*** center 2: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [45, 39, 0]]
** centroid: 3, normalized-entropy: 0.9963165195589622, [(1, 45), (2, 39)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 93, 22]]
** centroid: 4, normalized-entropy: 0.7041920940481365, [(2, 93), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [71, 21, 0]]
** centroid: 5, normalized-entropy: 0.7749672673267259, [(1, 71), (2, 21)]
*** center 6: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [103, 1, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.191514875031896] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.191514875031896, 0.15070145391975007] ***
*** starting iteration: 2; err: [Inf, 0.191514875031896, 0.15070145391975007] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.191514875031896, 0.15070145391975007, 0.14512518705657754] ***
*** starting iteration: 3; err: [Inf, 0.191514875031896, 0.15070145391975007, 0.14512518705657754] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.191514875031896, 0.15070145391975007, 0.14512518705657754, 0.14417394209301276] ***
*** finished computation of 7 references, err: [Inf, 0.191514875031896, 0.15070145391975007, 0.14512518705657754, 0.14417394209301276] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [2, 100, 0]]
** centroid: 1, normalized-entropy: 0.13923299905509884, [(1, 2), (2, 100)]
*** center 2: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [74, 3, 0]]
** centroid: 3, normalized-entropy: 0.23750814382859295, [(1, 74), (2, 3)]
*** center 4: selecting labels [1] (freq >= 2) [from [116, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [102, 4, 0]]
** centroid: 5, normalized-entropy: 0.23181305002459035, [(1, 102), (2, 4)]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 92, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 48, 23]]
** centroid: 7, normalized-entropy: 0.9086185980409245, [(2, 48), (3, 23)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18922672152234385] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18922672152234385, 0.14852311130825324] ***
*** starting iteration: 2; err: [Inf, 0.18922672152234385, 0.14852311130825324] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18922672152234385, 0.14852311130825324, 0.14389842776672404] ***
*** starting iteration: 3; err: [Inf, 0.18922672152234385, 0.14852311130825324, 0.14389842776672404] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18922672152234385, 0.14852311130825324, 0.14389842776672404, 0.14328052680883585] ***
*** finished computation of 7 references, err: [Inf, 0.18922672152234385, 0.14852311130825324, 0.14389842776672404, 0.14328052680883585] ***
*** center 1: selecting labels [1] (freq >= 2) [from [130, 1, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [55, 10, 0]]
** centroid: 2, normalized-entropy: 0.6193821946787638, [(1, 55), (2, 10)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 50, 21]]
** centroid: 3, normalized-entropy: 0.8760643678555242, [(2, 50), (3, 21)]
*** center 4: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [3, 95, 0]]
** centroid: 6, normalized-entropy: 0.19745300438456026, [(1, 3), (2, 95)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 99, 0]]
** centroid: 7, normalized-entropy: 0.1403272709905931, [(1, 2), (2, 99)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18778783355786413] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18778783355786413, 0.15194945678593139] ***
*** starting iteration: 2; err: [Inf, 0.18778783355786413, 0.15194945678593139] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18778783355786413, 0.15194945678593139, 0.14939916534656966] ***
*** starting iteration: 3; err: [Inf, 0.18778783355786413, 0.15194945678593139, 0.14939916534656966] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18778783355786413, 0.15194945678593139, 0.14939916534656966, 0.14912584085051003] ***
*** finished computation of 7 references, err: [Inf, 0.18778783355786413, 0.15194945678593139, 0.14939916534656966, 0.14912584085051003] ***
*** center 1: selecting labels [1] (freq >= 1) [from [100, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [34, 37, 0]]
** centroid: 2, normalized-entropy: 0.9987117514654895, [(1, 34), (2, 37)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 86, 22]]
** centroid: 3, normalized-entropy: 0.7292739418449411, [(2, 86), (3, 22)]
*** center 4: selecting labels [1] (freq >= 1) [from [111, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [32, 59, 0]]
** centroid: 5, normalized-entropy: 0.9355315642388212, [(1, 32), (2, 59)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [22, 74, 0]]
** centroid: 6, normalized-entropy: 0.7765557854444601, [(1, 22), (2, 74)]
*** center 7: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1899685469592853] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1899685469592853, 0.1518925841383893] ***
*** starting iteration: 2; err: [Inf, 0.1899685469592853, 0.1518925841383893] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1899685469592853, 0.1518925841383893, 0.14681610078697485] ***
*** starting iteration: 3; err: [Inf, 0.1899685469592853, 0.1518925841383893, 0.14681610078697485] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1899685469592853, 0.1518925841383893, 0.14681610078697485, 0.14568530636276866] ***
*** starting iteration: 4; err: [Inf, 0.1899685469592853, 0.1518925841383893, 0.14681610078697485, 0.14568530636276866] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1899685469592853, 0.1518925841383893, 0.14681610078697485, 0.14568530636276866, 0.14521026866708783] ***
*** finished computation of 7 references, err: [Inf, 0.1899685469592853, 0.1518925841383893, 0.14681610078697485, 0.14568530636276866, 0.14521026866708783] ***
*** center 1: selecting labels [1] (freq >= 1) [from [123, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 62, 23]]
** centroid: 2, normalized-entropy: 0.8423074510400833, [(2, 62), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [71, 12, 0]]
** centroid: 3, normalized-entropy: 0.5961045458832345, [(1, 71), (2, 12)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [103, 1, 0]]
** centroid: 4, normalized-entropy: 0.07823246525771242, [(1, 103), (2, 1)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [13, 86, 0]]
** centroid: 5, normalized-entropy: 0.5610284863400681, [(1, 13), (2, 86)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [10, 86, 0]]
** centroid: 6, normalized-entropy: 0.4820661480830933, [(1, 10), (2, 86)]
*** center 7: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2128292657951566] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2128292657951566, 0.15422643806905426] ***
*** starting iteration: 2; err: [Inf, 0.2128292657951566, 0.15422643806905426] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2128292657951566, 0.15422643806905426, 0.1490548539598161] ***
*** starting iteration: 3; err: [Inf, 0.2128292657951566, 0.15422643806905426, 0.1490548539598161] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2128292657951566, 0.15422643806905426, 0.1490548539598161, 0.14873498025971793] ***
*** finished computation of 7 references, err: [Inf, 0.2128292657951566, 0.15422643806905426, 0.1490548539598161, 0.14873498025971793] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 94, 21]]
** centroid: 1, normalized-entropy: 0.685750764543924, [(2, 94), (3, 21)]
*** center 2: selecting labels [1] (freq >= 1) [from [104, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [94, 6, 0]]
** centroid: 3, normalized-entropy: 0.3274449191544762, [(1, 94), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [58, 38, 0]]
** centroid: 4, normalized-entropy: 0.968461008760162, [(1, 58), (2, 38)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [49, 29, 0]]
** centroid: 5, normalized-entropy: 0.9520402801398793, [(1, 49), (2, 29)]
*** center 6: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 88, 0]]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 13)
[0.9529919140697584, 0.9510048971126815, 0.9359838880796963, 0.9319858780936624, 0.9239658820497144, 0.9209658760556964, 0.9069848291405179, 0.8999808191424958, 0.8730496964029898, 0.8609837382292472, 0.857962753172334, 0.8559607511703321, 0.7879975784167401]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9529919140697584
finished with 13
iteration 2 finished
generating 4 configurations using top 12 configurations, starting with 13)
[0.9529919140697584, 0.9510048971126815, 0.9359838880796963, 0.9319858780936624, 0.9239658820497144, 0.9209658760556964, 0.9069848291405179, 0.8999808191424958, 0.8730496964029898, 0.8609837382292472, 0.857962753172334, 0.8559607511703321, 0.7879975784167401]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9529919140697584
finished with 13
iteration 3 finished
generating 4 configurations using top 12 configurations, starting with 13)
[0.9529919140697584, 0.9510048971126815, 0.9359838880796963, 0.9319858780936624, 0.9239658820497144, 0.9209658760556964, 0.9069848291405179, 0.8999808191424958, 0.8730496964029898, 0.8609837382292472, 0.857962753172334, 0.8559607511703321, 0.7879975784167401]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9529919140697584
finished with 14
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.25878396316210517] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.25878396316210517, 0.2291902035590843] ***
*** starting iteration: 2; err: [Inf, 0.25878396316210517, 0.2291902035590843] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.25878396316210517, 0.2291902035590843, 0.22467604897952675] ***
*** starting iteration: 3; err: [Inf, 0.25878396316210517, 0.2291902035590843, 0.22467604897952675] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.25878396316210517, 0.2291902035590843, 0.22467604897952675, 0.22412626542271236] ***
*** finished computation of 3 references, err: [Inf, 0.25878396316210517, 0.2291902035590843, 0.22467604897952675, 0.22412626542271236] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [131, 75, 0]]
** centroid: 1, normalized-entropy: 0.9460159884036211, [(1, 131), (2, 75)]
*** center 2: selecting labels [1] (freq >= 2) [from [238, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [19, 181, 22]]
** centroid: 3, normalized-entropy: 0.5515522493716117, [(1, 19), (2, 181), (3, 22)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.34125876591737747] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34125876591737747, 0.2352790259414058] ***
*** starting iteration: 2; err: [Inf, 0.34125876591737747, 0.2352790259414058] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34125876591737747, 0.2352790259414058, 0.23144084402406098] ***
*** starting iteration: 3; err: [Inf, 0.34125876591737747, 0.2352790259414058, 0.23144084402406098] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34125876591737747, 0.2352790259414058, 0.23144084402406098, 0.23074201625566568] ***
*** finished computation of 3 references, err: [Inf, 0.34125876591737747, 0.2352790259414058, 0.23144084402406098, 0.23074201625566568] ***
*** center 1: selecting labels [1] (freq >= 2) [from [247, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [104, 92, 0]]
** centroid: 2, normalized-entropy: 0.9972943816462351, [(1, 104), (2, 92)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [46, 155, 23]]
** centroid: 3, normalized-entropy: 0.7405606842766479, [(1, 46), (2, 155), (3, 23)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.29681938609060854] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29681938609060854, 0.24730919718999286] ***
*** starting iteration: 2; err: [Inf, 0.29681938609060854, 0.24730919718999286] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29681938609060854, 0.24730919718999286, 0.23478869366636876] ***
*** starting iteration: 3; err: [Inf, 0.29681938609060854, 0.24730919718999286, 0.23478869366636876] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29681938609060854, 0.24730919718999286, 0.23478869366636876, 0.23161296992083785] ***
*** finished computation of 3 references, err: [Inf, 0.29681938609060854, 0.24730919718999286, 0.23478869366636876, 0.23161296992083785] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [147, 42, 0]]
** centroid: 1, normalized-entropy: 0.7642045065086204, [(1, 147), (2, 42)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [4, 208, 21]]
** centroid: 2, normalized-entropy: 0.35317239202604395, [(1, 4), (2, 208), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [240, 5, 0]]
** centroid: 3, normalized-entropy: 0.14372616993938164, [(1, 240), (2, 5)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 14)
[0.9529919140697584, 0.9510048971126815, 0.9359838880796963, 0.9319858780936624, 0.9239658820497144, 0.9209658760556964, 0.9189908471345597, 0.9069848291405179, 0.8999808191424958, 0.8730496964029898, 0.8609837382292472, 0.857962753172334, 0.8559607511703321, 0.7879975784167401]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9529919140697584
finished with 15
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.23830734491460137] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23830734491460137, 0.19362480864320342] ***
*** starting iteration: 2; err: [Inf, 0.23830734491460137, 0.19362480864320342] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23830734491460137, 0.19362480864320342, 0.18866364958321302] ***
*** starting iteration: 3; err: [Inf, 0.23830734491460137, 0.19362480864320342, 0.18866364958321302] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23830734491460137, 0.19362480864320342, 0.18866364958321302, 0.18808775610156223] ***
*** finished computation of 7 references, err: [Inf, 0.23830734491460137, 0.19362480864320342, 0.18866364958321302, 0.18808775610156223] ***
*** center 1: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [89, 21, 0]]
** centroid: 2, normalized-entropy: 0.7033693386668108, [(1, 89), (2, 21)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 72, 22]]
** centroid: 3, normalized-entropy: 0.7849920887641585, [(2, 72), (3, 22)]
*** center 4: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [15, 80, 0]]
** centroid: 5, normalized-entropy: 0.6292492238560344, [(1, 15), (2, 80)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [8, 83, 0]]
** centroid: 6, normalized-entropy: 0.4294619720471057, [(1, 8), (2, 83)]
*** center 7: selecting labels [1] (freq >= 2) [from [104, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23025744967441866] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23025744967441866, 0.1847320977819042] ***
*** starting iteration: 2; err: [Inf, 0.23025744967441866, 0.1847320977819042] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23025744967441866, 0.1847320977819042, 0.18172206130294852] ***
*** starting iteration: 3; err: [Inf, 0.23025744967441866, 0.1847320977819042, 0.18172206130294852] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23025744967441866, 0.1847320977819042, 0.18172206130294852, 0.18181258066441455] ***
*** finished computation of 7 references, err: [Inf, 0.23025744967441866, 0.1847320977819042, 0.18172206130294852, 0.18181258066441455] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [9, 82, 0]]
** centroid: 1, normalized-entropy: 0.4655024490815131, [(1, 9), (2, 82)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [62, 22, 0]]
** centroid: 2, normalized-entropy: 0.8296071030882032, [(1, 62), (2, 22)]
*** center 3: selecting labels [1] (freq >= 2) [from [111, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [12, 92, 0]]
** centroid: 4, normalized-entropy: 0.5159469300074472, [(1, 12), (2, 92)]
*** center 5: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [115, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 51, 23]]
** centroid: 7, normalized-entropy: 0.8941071841443881, [(2, 51), (3, 23)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24468012394542726] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24468012394542726, 0.1941209837481536] ***
*** starting iteration: 2; err: [Inf, 0.24468012394542726, 0.1941209837481536] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24468012394542726, 0.1941209837481536, 0.1884042763457015] ***
*** starting iteration: 3; err: [Inf, 0.24468012394542726, 0.1941209837481536, 0.1884042763457015] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24468012394542726, 0.1941209837481536, 0.1884042763457015, 0.1873213312905589] ***
*** starting iteration: 4; err: [Inf, 0.24468012394542726, 0.1941209837481536, 0.1884042763457015, 0.1873213312905589] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24468012394542726, 0.1941209837481536, 0.1884042763457015, 0.1873213312905589, 0.18678161742045604] ***
*** finished computation of 7 references, err: [Inf, 0.24468012394542726, 0.1941209837481536, 0.1884042763457015, 0.1873213312905589, 0.18678161742045604] ***
*** center 1: selecting labels [1] (freq >= 2) [from [101, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [76, 11, 0]]
** centroid: 2, normalized-entropy: 0.5475844288749033, [(1, 76), (2, 11)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 99, 21]]
** centroid: 3, normalized-entropy: 0.6690158350565576, [(2, 99), (3, 21)]
*** center 4: selecting labels [1] (freq >= 2) [from [107, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [48, 43, 0]]
** centroid: 5, normalized-entropy: 0.9978211842997324, [(1, 48), (2, 43)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [59, 35, 0]]
** centroid: 6, normalized-entropy: 0.9524521973646323, [(1, 59), (2, 35)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 67, 0]]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 15)
[0.9529919140697584, 0.9510048971126815, 0.9409948871026715, 0.9359838880796963, 0.9319858780936624, 0.9239658820497144, 0.9209658760556964, 0.9189908471345597, 0.9069848291405179, 0.8999808191424958, 0.8730496964029898, 0.8609837382292472, 0.857962753172334, 0.8559607511703321, 0.7879975784167401]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9529919140697584
finished with 15
iteration 6 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9529919140697584, 0.9510048971126815, 0.9409948871026715, 0.9359838880796963, 0.9319858780936624, 0.9239658820497144, 0.9209658760556964, 0.9189908471345597, 0.9069848291405179, 0.8999808191424958, 0.8730496964029898, 0.8609837382292472, 0.857962753172334, 0.8559607511703321, 0.7879975784167401]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9529919140697584
finished with 16
iteration 7 finished
*** starting iteration: 1; err: [Inf, 0.2968166707833116] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2968166707833116, 0.23973753545768894] ***
*** finished computation of 3 references, err: [Inf, 0.2968166707833116, 0.23973753545768894] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [95, 140, 14]]
** centroid: 1, normalized-entropy: 0.7766304553477741, [(1, 95), (2, 140), (3, 14)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [223, 6, 0]]
** centroid: 2, normalized-entropy: 0.1749660034394991, [(1, 223), (2, 6)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [70, 110, 8]]
** centroid: 3, normalized-entropy: 0.7425617806611673, [(1, 70), (2, 110), (3, 8)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3308166390155041] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3308166390155041, 0.24016576405925985] ***
*** finished computation of 3 references, err: [Inf, 0.3308166390155041, 0.24016576405925985] ***
*** center 1: selecting labels [1] (freq >= 1) [from [172, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [109, 209, 23]]
** centroid: 2, normalized-entropy: 0.7705022367137229, [(1, 109), (2, 209), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [116, 38, 0]]
** centroid: 3, normalized-entropy: 0.8060914696192223, [(1, 116), (2, 38)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2833607609521994] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2833607609521994, 0.2330080240830846] ***
*** finished computation of 3 references, err: [Inf, 0.2833607609521994, 0.2330080240830846] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [257, 1, 0]]
** centroid: 1, normalized-entropy: 0.036632258745631335, [(1, 257), (2, 1)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [117, 60, 0]]
** centroid: 2, normalized-entropy: 0.9238422284571813, [(1, 117), (2, 60)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [17, 194, 21]]
** centroid: 3, normalized-entropy: 0.5083960303113484, [(1, 17), (2, 194), (3, 21)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 16)
[0.9529919140697584, 0.9510048971126815, 0.9409948871026715, 0.9359838880796963, 0.9319858780936624, 0.9239658820497144, 0.9209658760556964, 0.9189908471345597, 0.9069848291405179, 0.9049918181654708, 0.8999808191424958, 0.8730496964029898, 0.8609837382292472, 0.857962753172334, 0.8559607511703321, 0.7879975784167401]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9529919140697584
finished with 18
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.23986942934951894] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23986942934951894, 0.1973887434307564] ***
*** finished computation of 7 references, err: [Inf, 0.23986942934951894, 0.1973887434307564] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [25, 28, 0]]
** centroid: 1, normalized-entropy: 0.9976875760352552, [(1, 25), (2, 28)]
*** center 2: selecting labels [1] (freq >= 1) [from [149, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [25, 91, 0]]
** centroid: 3, normalized-entropy: 0.7518972278650765, [(1, 25), (2, 91)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [118, 20, 0]]
** centroid: 4, normalized-entropy: 0.5969995167604553, [(1, 118), (2, 20)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 62, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [71, 6, 0]]
** centroid: 6, normalized-entropy: 0.39481484603049416, [(1, 71), (2, 6)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 49, 22]]
** centroid: 7, normalized-entropy: 0.893010810044601, [(2, 49), (3, 22)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2769241015904344] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2769241015904344, 0.22398792228324974] ***
*** finished computation of 7 references, err: [Inf, 0.2769241015904344, 0.22398792228324974] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 61, 23]]
** centroid: 1, normalized-entropy: 0.8468781063424823, [(2, 61), (3, 23)]
*** center 2: selecting labels [1] (freq >= 1) [from [166, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [1, 96, 0]]
** centroid: 3, normalized-entropy: 0.0828365528136124, [(1, 1), (2, 96)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [10, 21, 0]]
** centroid: 4, normalized-entropy: 0.9071657675730821, [(1, 10), (2, 21)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [31, 37, 0]]
** centroid: 5, normalized-entropy: 0.9943766625699823, [(1, 31), (2, 37)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [100, 32, 0]]
** centroid: 6, normalized-entropy: 0.7990485210442682, [(1, 100), (2, 32)]
*** center 7: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26057230732005754] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26057230732005754, 0.21998649321613775] ***
*** finished computation of 7 references, err: [Inf, 0.26057230732005754, 0.21998649321613775] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [75, 2, 0]]
** centroid: 1, normalized-entropy: 0.17378132267943294, [(1, 75), (2, 2)]
*** center 2: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 5: selecting labels [1, 2, 3] (freq >= 1) [from [35, 77, 21]]
** centroid: 5, normalized-entropy: 0.8730854735266302, [(1, 35), (2, 77), (3, 21)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [62, 67, 0]]
** centroid: 6, normalized-entropy: 0.9989160383328897, [(1, 62), (2, 67)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [5, 109, 0]]
** centroid: 7, normalized-entropy: 0.2597169275408663, [(1, 5), (2, 109)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24290227844427387] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24290227844427387, 0.15909609825395093] ***
*** finished computation of 7 references, err: [Inf, 0.24290227844427387, 0.15909609825395093] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [24, 50, 0]]
** centroid: 1, normalized-entropy: 0.9090221560878149, [(1, 24), (2, 50)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 43, 22]]
** centroid: 2, normalized-entropy: 0.9233388889944429, [(2, 43), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [82, 6, 0]]
** centroid: 3, normalized-entropy: 0.3591016256485496, [(1, 82), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [4, 89, 0]]
** centroid: 4, normalized-entropy: 0.2559300438391133, [(1, 4), (2, 89)]
*** center 5: selecting labels [1] (freq >= 1) [from [171, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 68, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [107, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22207518851711253] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22207518851711253, 0.16161866828232355] ***
*** finished computation of 7 references, err: [Inf, 0.22207518851711253, 0.16161866828232355] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 51, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 9, 22]]
** centroid: 2, normalized-entropy: 0.8691375806126381, [(2, 9), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [89, 48, 0]]
** centroid: 3, normalized-entropy: 0.9343935764596151, [(1, 89), (2, 48)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 52, 1]]
** centroid: 4, normalized-entropy: 0.13503620280212753, [(2, 52), (3, 1)]
*** center 5: selecting labels [1] (freq >= 1) [from [170, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [14, 69, 0]]
** centroid: 6, normalized-entropy: 0.6546640527143932, [(1, 14), (2, 69)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [124, 18, 0]]
** centroid: 7, normalized-entropy: 0.5484866088431741, [(1, 124), (2, 18)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19964386575060827] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19964386575060827, 0.1556144543725165] ***
*** finished computation of 7 references, err: [Inf, 0.19964386575060827, 0.1556144543725165] ***
*** center 1: selecting labels [1] (freq >= 1) [from [111, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 103, 17]]
** centroid: 2, normalized-entropy: 0.5885870739324579, [(2, 103), (3, 17)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [10, 107, 4]]
** centroid: 3, normalized-entropy: 0.3891230744240944, [(1, 10), (2, 107), (3, 4)]
*** center 4: selecting labels [1] (freq >= 1) [from [102, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [54, 25, 0]]
** centroid: 5, normalized-entropy: 0.9004854334784268, [(1, 54), (2, 25)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [73, 4, 0]]
** centroid: 6, normalized-entropy: 0.29461520565280713, [(1, 73), (2, 4)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [41, 16, 0]]
** centroid: 7, normalized-entropy: 0.8564052389131375, [(1, 41), (2, 16)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 18)
[0.9529919140697584, 0.9510048971126815, 0.9409948871026715, 0.9359838880796963, 0.9319858780936624, 0.9299449149748552, 0.9239658820497144, 0.9209658760556964, 0.9189908471345597, 0.9069848291405179, 0.9049918181654708, 0.9049708391025756, 0.8999808191424958, 0.8730496964029898, 0.8609837382292472, 0.857962753172334, 0.8559607511703321, 0.7879975784167401]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9529919140697584
finished with 18
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.2080942866448313] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2080942866448313, 0.151034479363836] ***
*** starting iteration: 2; err: [Inf, 0.2080942866448313, 0.151034479363836] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2080942866448313, 0.151034479363836, 0.14706656138040125] ***
*** starting iteration: 3; err: [Inf, 0.2080942866448313, 0.151034479363836, 0.14706656138040125] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2080942866448313, 0.151034479363836, 0.14706656138040125, 0.14645884816953914] ***
*** finished computation of 7 references, err: [Inf, 0.2080942866448313, 0.151034479363836, 0.14706656138040125, 0.14645884816953914] ***
*** center 1: selecting labels [1] (freq >= 2) [from [159, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 122, 33]]
** centroid: 2, normalized-entropy: 0.7469956238451984, [(2, 122), (3, 33)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [103, 11, 0]]
** centroid: 3, normalized-entropy: 0.4577733290341998, [(1, 103), (2, 11)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [151, 45, 0]]
** centroid: 4, normalized-entropy: 0.7772991044574414, [(1, 151), (2, 45)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [50, 84, 0]]
** centroid: 5, normalized-entropy: 0.9530483471581301, [(1, 50), (2, 84)]
*** center 6: selecting labels [1] (freq >= 2) [from [123, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 117, 0]]
** centroid: 7, normalized-entropy: 0.1231146356503104, [(1, 2), (2, 117)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19097357851080596] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19097357851080596, 0.15302567406371237] ***
*** starting iteration: 2; err: [Inf, 0.19097357851080596, 0.15302567406371237] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19097357851080596, 0.15302567406371237, 0.14969954997394233] ***
*** starting iteration: 3; err: [Inf, 0.19097357851080596, 0.15302567406371237, 0.14969954997394233] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19097357851080596, 0.15302567406371237, 0.14969954997394233, 0.1488967779641971] ***
*** finished computation of 7 references, err: [Inf, 0.19097357851080596, 0.15302567406371237, 0.14969954997394233, 0.1488967779641971] ***
*** center 1: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [64, 7, 0]]
** centroid: 2, normalized-entropy: 0.4645149440905521, [(1, 64), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 51, 17]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 51), (3, 17)]
*** center 4: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [36, 39, 0]]
** centroid: 5, normalized-entropy: 0.998845535995202, [(1, 36), (2, 39)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [26, 43, 0]]
** centroid: 6, normalized-entropy: 0.9557589912150007, [(1, 26), (2, 43)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 52, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2051210190244019] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2051210190244019, 0.15494799112901092] ***
*** starting iteration: 2; err: [Inf, 0.2051210190244019, 0.15494799112901092] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2051210190244019, 0.15494799112901092, 0.1508169685555622] ***
*** starting iteration: 3; err: [Inf, 0.2051210190244019, 0.15494799112901092, 0.1508169685555622] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2051210190244019, 0.15494799112901092, 0.1508169685555622, 0.14975432053022086] ***
*** starting iteration: 4; err: [Inf, 0.2051210190244019, 0.15494799112901092, 0.1508169685555622, 0.14975432053022086] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2051210190244019, 0.15494799112901092, 0.1508169685555622, 0.14975432053022086, 0.14919283238984643] ***
*** finished computation of 7 references, err: [Inf, 0.2051210190244019, 0.15494799112901092, 0.1508169685555622, 0.14975432053022086, 0.14919283238984643] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [30, 52, 0]]
** centroid: 1, normalized-entropy: 0.9474351361840305, [(1, 30), (2, 52)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [44, 23, 0]]
** centroid: 2, normalized-entropy: 0.9279262619599757, [(1, 44), (2, 23)]
*** center 3: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 64, 20]]
** centroid: 4, normalized-entropy: 0.7918583525674836, [(2, 64), (3, 20)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [24, 44, 0]]
** centroid: 5, normalized-entropy: 0.9366673818775627, [(1, 24), (2, 44)]
*** center 6: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19777563188318162] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19777563188318162, 0.1573785723140463] ***
*** starting iteration: 2; err: [Inf, 0.19777563188318162, 0.1573785723140463] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19777563188318162, 0.1573785723140463, 0.15107070155721158] ***
*** starting iteration: 3; err: [Inf, 0.19777563188318162, 0.1573785723140463, 0.15107070155721158] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19777563188318162, 0.1573785723140463, 0.15107070155721158, 0.14958475244231523] ***
*** starting iteration: 4; err: [Inf, 0.19777563188318162, 0.1573785723140463, 0.15107070155721158, 0.14958475244231523] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19777563188318162, 0.1573785723140463, 0.15107070155721158, 0.14958475244231523, 0.14903088421281427] ***
*** finished computation of 7 references, err: [Inf, 0.19777563188318162, 0.1573785723140463, 0.15107070155721158, 0.14958475244231523, 0.14903088421281427] ***
*** center 1: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [65, 5, 0]]
** centroid: 2, normalized-entropy: 0.3712323266408756, [(1, 65), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 45, 14]]
** centroid: 3, normalized-entropy: 0.7905013842153699, [(2, 45), (3, 14)]
*** center 4: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [44, 16, 0]]
** centroid: 5, normalized-entropy: 0.8366407419411671, [(1, 44), (2, 16)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [4, 61, 0]]
** centroid: 6, normalized-entropy: 0.33352200393097675, [(1, 4), (2, 61)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 79, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2071250067278743] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2071250067278743, 0.152186731855385] ***
*** starting iteration: 2; err: [Inf, 0.2071250067278743, 0.152186731855385] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2071250067278743, 0.152186731855385, 0.1467654382158071] ***
*** starting iteration: 3; err: [Inf, 0.2071250067278743, 0.152186731855385, 0.1467654382158071] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2071250067278743, 0.152186731855385, 0.1467654382158071, 0.1460319040575996] ***
*** finished computation of 7 references, err: [Inf, 0.2071250067278743, 0.152186731855385, 0.1467654382158071, 0.1460319040575996] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [20, 58, 0]]
** centroid: 1, normalized-entropy: 0.8212809417449864, [(1, 20), (2, 58)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [46, 31, 0]]
** centroid: 2, normalized-entropy: 0.9724497147128791, [(1, 46), (2, 31)]
*** center 3: selecting labels [1] (freq >= 2) [from [48, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 61, 15]]
** centroid: 4, normalized-entropy: 0.7166336117927455, [(2, 61), (3, 15)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [46, 25, 0]]
** centroid: 5, normalized-entropy: 0.935940714955517, [(1, 46), (2, 25)]
*** center 6: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19863711583055557] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19863711583055557, 0.15376403149031104] ***
*** starting iteration: 2; err: [Inf, 0.19863711583055557, 0.15376403149031104] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19863711583055557, 0.15376403149031104, 0.1496660147421062] ***
*** starting iteration: 3; err: [Inf, 0.19863711583055557, 0.15376403149031104, 0.1496660147421062] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19863711583055557, 0.15376403149031104, 0.1496660147421062, 0.14894212375208735] ***
*** finished computation of 7 references, err: [Inf, 0.19863711583055557, 0.15376403149031104, 0.1496660147421062, 0.14894212375208735] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [29, 58, 0]]
** centroid: 1, normalized-entropy: 0.9182958340544894, [(1, 29), (2, 58)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [38, 24, 0]]
** centroid: 2, normalized-entropy: 0.9629004147713269, [(1, 38), (2, 24)]
*** center 3: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 74, 20]]
** centroid: 4, normalized-entropy: 0.7467366074830678, [(2, 74), (3, 20)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [26, 47, 0]]
** centroid: 5, normalized-entropy: 0.9394532068181357, [(1, 26), (2, 47)]
*** center 6: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18495375528000296] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18495375528000296, 0.14734799188910983] ***
*** starting iteration: 2; err: [Inf, 0.18495375528000296, 0.14734799188910983] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18495375528000296, 0.14734799188910983, 0.14290491390042007] ***
*** starting iteration: 3; err: [Inf, 0.18495375528000296, 0.14734799188910983, 0.14290491390042007] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18495375528000296, 0.14734799188910983, 0.14290491390042007, 0.142564049879089] ***
*** finished computation of 7 references, err: [Inf, 0.18495375528000296, 0.14734799188910983, 0.14290491390042007, 0.142564049879089] ***
*** center 1: selecting labels [2] (freq >= 2) [from [1, 74, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [35, 24, 0]]
** centroid: 2, normalized-entropy: 0.9747785474909672, [(1, 35), (2, 24)]
*** center 3: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 80, 15]]
** centroid: 4, normalized-entropy: 0.6292492238560344, [(2, 80), (3, 15)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [76, 9, 0]]
** centroid: 5, normalized-entropy: 0.48736957102366285, [(1, 76), (2, 9)]
*** center 6: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [44, 8, 0]]
** centroid: 7, normalized-entropy: 0.6193821946787638, [(1, 44), (2, 8)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20160501406528056] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20160501406528056, 0.1550587184475735] ***
*** starting iteration: 2; err: [Inf, 0.20160501406528056, 0.1550587184475735] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20160501406528056, 0.1550587184475735, 0.1495861972840503] ***
*** starting iteration: 3; err: [Inf, 0.20160501406528056, 0.1550587184475735, 0.1495861972840503] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20160501406528056, 0.1550587184475735, 0.1495861972840503, 0.14784623057581484] ***
*** starting iteration: 4; err: [Inf, 0.20160501406528056, 0.1550587184475735, 0.1495861972840503, 0.14784623057581484] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20160501406528056, 0.1550587184475735, 0.1495861972840503, 0.14784623057581484, 0.1471384900342673] ***
*** finished computation of 7 references, err: [Inf, 0.20160501406528056, 0.1550587184475735, 0.1495861972840503, 0.14784623057581484, 0.1471384900342673] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 72, 13]]
** centroid: 1, normalized-entropy: 0.617151919200282, [(2, 72), (3, 13)]
*** center 2: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [54, 4, 0]]
** centroid: 3, normalized-entropy: 0.36205125173399805, [(1, 54), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [68, 17, 0]]
** centroid: 4, normalized-entropy: 0.7219280948873623, [(1, 68), (2, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [42, 22, 0]]
** centroid: 5, normalized-entropy: 0.9283620723948678, [(1, 42), (2, 22)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 66, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18009528209269046] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18009528209269046, 0.14959913292713464] ***
*** starting iteration: 2; err: [Inf, 0.18009528209269046, 0.14959913292713464] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18009528209269046, 0.14959913292713464, 0.14558463978301733] ***
*** starting iteration: 3; err: [Inf, 0.18009528209269046, 0.14959913292713464, 0.14558463978301733] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18009528209269046, 0.14959913292713464, 0.14558463978301733, 0.14439736769907177] ***
*** starting iteration: 4; err: [Inf, 0.18009528209269046, 0.14959913292713464, 0.14558463978301733, 0.14439736769907177] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18009528209269046, 0.14959913292713464, 0.14558463978301733, 0.14439736769907177, 0.143293328108266] ***
*** starting iteration: 5; err: [Inf, 0.18009528209269046, 0.14959913292713464, 0.14558463978301733, 0.14439736769907177, 0.143293328108266] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18009528209269046, 0.14959913292713464, 0.14558463978301733, 0.14439736769907177, 0.143293328108266, 0.14252292096242308] ***
*** finished computation of 7 references, err: [Inf, 0.18009528209269046, 0.14959913292713464, 0.14558463978301733, 0.14439736769907177, 0.143293328108266, 0.14252292096242308] ***
*** center 1: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 36, 13]]
** centroid: 2, normalized-entropy: 0.834648285181383, [(2, 36), (3, 13)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [55, 6, 0]]
** centroid: 3, normalized-entropy: 0.4637773498877517, [(1, 55), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [73, 26, 0]]
** centroid: 4, normalized-entropy: 0.8306836355350677, [(1, 73), (2, 26)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [8, 53, 0]]
** centroid: 5, normalized-entropy: 0.5605769426145328, [(1, 8), (2, 53)]
*** center 6: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 74, 0]]
** centroid: 7, normalized-entropy: 0.23750814382859295, [(1, 3), (2, 74)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18808286931645124] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18808286931645124, 0.15006623495183885] ***
*** starting iteration: 2; err: [Inf, 0.18808286931645124, 0.15006623495183885] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18808286931645124, 0.15006623495183885, 0.1459619901655242] ***
*** starting iteration: 3; err: [Inf, 0.18808286931645124, 0.15006623495183885, 0.1459619901655242] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18808286931645124, 0.15006623495183885, 0.1459619901655242, 0.14528216545307077] ***
*** finished computation of 7 references, err: [Inf, 0.18808286931645124, 0.15006623495183885, 0.1459619901655242, 0.14528216545307077] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [2, 70, 0]]
** centroid: 1, normalized-entropy: 0.18312206830137262, [(1, 2), (2, 70)]
*** center 2: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [34, 26, 0]]
** centroid: 3, normalized-entropy: 0.9871377743721862, [(1, 34), (2, 26)]
*** center 4: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 76, 17]]
** centroid: 5, normalized-entropy: 0.6861549474202007, [(2, 76), (3, 17)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [75, 9, 0]]
** centroid: 6, normalized-entropy: 0.4912373418243334, [(1, 75), (2, 9)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [53, 3, 0]]
** centroid: 7, normalized-entropy: 0.3013786435930858, [(1, 53), (2, 3)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2200002323128283] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2200002323128283, 0.14961702780239283] ***
*** starting iteration: 2; err: [Inf, 0.2200002323128283, 0.14961702780239283] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2200002323128283, 0.14961702780239283, 0.14599151936359703] ***
*** starting iteration: 3; err: [Inf, 0.2200002323128283, 0.14961702780239283, 0.14599151936359703] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2200002323128283, 0.14961702780239283, 0.14599151936359703, 0.14559650142490863] ***
*** finished computation of 7 references, err: [Inf, 0.2200002323128283, 0.14961702780239283, 0.14599151936359703, 0.14559650142490863] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 63, 18]]
** centroid: 1, normalized-entropy: 0.7642045065086204, [(2, 63), (3, 18)]
*** center 2: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [54, 5, 0]]
** centroid: 3, normalized-entropy: 0.4186843105268563, [(1, 54), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [66, 24, 0]]
** centroid: 4, normalized-entropy: 0.8366407419411671, [(1, 66), (2, 24)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [37, 29, 0]]
** centroid: 5, normalized-entropy: 0.9893755831922303, [(1, 37), (2, 29)]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 61, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20295567556098104] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20295567556098104, 0.15369971746578812] ***
*** starting iteration: 2; err: [Inf, 0.20295567556098104, 0.15369971746578812] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20295567556098104, 0.15369971746578812, 0.1487457392779179] ***
*** starting iteration: 3; err: [Inf, 0.20295567556098104, 0.15369971746578812, 0.1487457392779179] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20295567556098104, 0.15369971746578812, 0.1487457392779179, 0.1479353217240423] ***
*** finished computation of 7 references, err: [Inf, 0.20295567556098104, 0.15369971746578812, 0.1487457392779179, 0.1479353217240423] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 74, 16]]
** centroid: 1, normalized-entropy: 0.6751914401458716, [(2, 74), (3, 16)]
*** center 2: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [64, 6, 0]]
** centroid: 3, normalized-entropy: 0.4220005168831531, [(1, 64), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [38, 23, 0]]
** centroid: 4, normalized-entropy: 0.9559312637896479, [(1, 38), (2, 23)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [50, 17, 0]]
** centroid: 5, normalized-entropy: 0.8171387756817725, [(1, 50), (2, 17)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 54, 1]]
*** center 7: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1869944382030517] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1869944382030517, 0.154651352933608] ***
*** starting iteration: 2; err: [Inf, 0.1869944382030517, 0.154651352933608] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1869944382030517, 0.154651352933608, 0.1496456871763803] ***
*** starting iteration: 3; err: [Inf, 0.1869944382030517, 0.154651352933608, 0.1496456871763803] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1869944382030517, 0.154651352933608, 0.1496456871763803, 0.14739554166048766] ***
*** starting iteration: 4; err: [Inf, 0.1869944382030517, 0.154651352933608, 0.1496456871763803, 0.14739554166048766] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1869944382030517, 0.154651352933608, 0.1496456871763803, 0.14739554166048766, 0.14622571517620236] ***
*** starting iteration: 5; err: [Inf, 0.1869944382030517, 0.154651352933608, 0.1496456871763803, 0.14739554166048766, 0.14622571517620236] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1869944382030517, 0.154651352933608, 0.1496456871763803, 0.14739554166048766, 0.14622571517620236, 0.14518132328707725] ***
*** starting iteration: 6; err: [Inf, 0.1869944382030517, 0.154651352933608, 0.1496456871763803, 0.14739554166048766, 0.14622571517620236, 0.14518132328707725] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1869944382030517, 0.154651352933608, 0.1496456871763803, 0.14739554166048766, 0.14622571517620236, 0.14518132328707725, 0.14463062269054353] ***
*** finished computation of 7 references, err: [Inf, 0.1869944382030517, 0.154651352933608, 0.1496456871763803, 0.14739554166048766, 0.14622571517620236, 0.14518132328707725, 0.14463062269054353] ***
*** center 1: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 49, 17]]
** centroid: 2, normalized-entropy: 0.8230660790114689, [(2, 49), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [69, 17, 0]]
** centroid: 3, normalized-entropy: 0.7172524777375696, [(1, 69), (2, 17)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [44, 19, 0]]
** centroid: 4, normalized-entropy: 0.8832225588099292, [(1, 44), (2, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [26, 43, 0]]
** centroid: 5, normalized-entropy: 0.9557589912150007, [(1, 26), (2, 43)]
*** center 6: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 70, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.192213575408794] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.192213575408794, 0.14882734809676185] ***
*** starting iteration: 2; err: [Inf, 0.192213575408794, 0.14882734809676185] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.192213575408794, 0.14882734809676185, 0.14434463331941516] ***
*** starting iteration: 3; err: [Inf, 0.192213575408794, 0.14882734809676185, 0.14434463331941516] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.192213575408794, 0.14882734809676185, 0.14434463331941516, 0.1432338141631335] ***
*** starting iteration: 4; err: [Inf, 0.192213575408794, 0.14882734809676185, 0.14434463331941516, 0.1432338141631335] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.192213575408794, 0.14882734809676185, 0.14434463331941516, 0.1432338141631335, 0.142924115980044] ***
*** finished computation of 7 references, err: [Inf, 0.192213575408794, 0.14882734809676185, 0.14434463331941516, 0.1432338141631335, 0.142924115980044] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [3, 61, 0]]
** centroid: 1, normalized-entropy: 0.2729708579140699, [(1, 3), (2, 61)]
*** center 2: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [63, 6, 0]]
** centroid: 3, normalized-entropy: 0.42622865699814483, [(1, 63), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [86, 2, 0]]
** centroid: 4, normalized-entropy: 0.1564910629057016, [(1, 86), (2, 2)]
*** center 5: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [3, 66, 0]]
** centroid: 6, normalized-entropy: 0.2580186686648155, [(1, 3), (2, 66)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 41, 13]]
** centroid: 7, normalized-entropy: 0.7962699368824384, [(2, 41), (3, 13)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19548100418969988] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19548100418969988, 0.1497392451018095] ***
*** starting iteration: 2; err: [Inf, 0.19548100418969988, 0.1497392451018095] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19548100418969988, 0.1497392451018095, 0.14492692836746573] ***
*** starting iteration: 3; err: [Inf, 0.19548100418969988, 0.1497392451018095, 0.14492692836746573] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19548100418969988, 0.1497392451018095, 0.14492692836746573, 0.14365002832375467] ***
*** starting iteration: 4; err: [Inf, 0.19548100418969988, 0.1497392451018095, 0.14492692836746573, 0.14365002832375467] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19548100418969988, 0.1497392451018095, 0.14492692836746573, 0.14365002832375467, 0.14340911616757512] ***
*** finished computation of 7 references, err: [Inf, 0.19548100418969988, 0.1497392451018095, 0.14492692836746573, 0.14365002832375467, 0.14340911616757512] ***
*** center 1: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 57, 17]]
** centroid: 2, normalized-entropy: 0.77753986416076, [(2, 57), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [54, 22, 0]]
** centroid: 3, normalized-entropy: 0.8680403986166402, [(1, 54), (2, 22)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [51, 31, 0]]
** centroid: 4, normalized-entropy: 0.956652272148091, [(1, 51), (2, 31)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [7, 71, 0]]
** centroid: 5, normalized-entropy: 0.4356133734874324, [(1, 7), (2, 71)]
*** center 6: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1888282292224467] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1888282292224467, 0.14903576182946562] ***
*** starting iteration: 2; err: [Inf, 0.1888282292224467, 0.14903576182946562] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1888282292224467, 0.14903576182946562, 0.14572441900288685] ***
*** starting iteration: 3; err: [Inf, 0.1888282292224467, 0.14903576182946562, 0.14572441900288685] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1888282292224467, 0.14903576182946562, 0.14572441900288685, 0.14506297068856658] ***
*** finished computation of 7 references, err: [Inf, 0.1888282292224467, 0.14903576182946562, 0.14572441900288685, 0.14506297068856658] ***
*** center 1: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [46, 17, 0]]
** centroid: 2, normalized-entropy: 0.8412367762002599, [(1, 46), (2, 17)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 39, 15]]
** centroid: 3, normalized-entropy: 0.8524051786494784, [(2, 39), (3, 15)]
*** center 4: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [13, 63, 0]]
** centroid: 5, normalized-entropy: 0.6601070987550468, [(1, 13), (2, 63)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [6, 67, 0]]
** centroid: 6, normalized-entropy: 0.4098553703184051, [(1, 6), (2, 67)]
*** center 7: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19746257449872792] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19746257449872792, 0.15072705579735338] ***
*** starting iteration: 2; err: [Inf, 0.19746257449872792, 0.15072705579735338] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19746257449872792, 0.15072705579735338, 0.14627087797503918] ***
*** starting iteration: 3; err: [Inf, 0.19746257449872792, 0.15072705579735338, 0.14627087797503918] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19746257449872792, 0.15072705579735338, 0.14627087797503918, 0.14540481533668936] ***
*** finished computation of 7 references, err: [Inf, 0.19746257449872792, 0.15072705579735338, 0.14627087797503918, 0.14540481533668936] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [50, 39, 0]]
** centroid: 1, normalized-entropy: 0.9889525767600615, [(1, 50), (2, 39)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [51, 18, 0]]
** centroid: 2, normalized-entropy: 0.828055725379504, [(1, 51), (2, 18)]
*** center 3: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 63, 20]]
** centroid: 4, normalized-entropy: 0.7966394665488286, [(2, 63), (3, 20)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [14, 58, 0]]
** centroid: 5, normalized-entropy: 0.710676853856123, [(1, 14), (2, 58)]
*** center 6: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1830830422732979] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1830830422732979, 0.1499247638080269] ***
*** starting iteration: 2; err: [Inf, 0.1830830422732979, 0.1499247638080269] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1830830422732979, 0.1499247638080269, 0.14671845752187074] ***
*** starting iteration: 3; err: [Inf, 0.1830830422732979, 0.1499247638080269, 0.14671845752187074] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1830830422732979, 0.1499247638080269, 0.14671845752187074, 0.1459080072734505] ***
*** finished computation of 7 references, err: [Inf, 0.1830830422732979, 0.1499247638080269, 0.14671845752187074, 0.1459080072734505] ***
*** center 1: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [43, 11, 0]]
** centroid: 2, normalized-entropy: 0.7292739418449411, [(1, 43), (2, 11)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 64, 14]]
** centroid: 3, normalized-entropy: 0.6789538995185759, [(2, 64), (3, 14)]
*** center 4: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [7, 73, 0]]
** centroid: 5, normalized-entropy: 0.4280696292293062, [(1, 7), (2, 73)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [41, 38, 0]]
** centroid: 6, normalized-entropy: 0.9989595114657399, [(1, 41), (2, 38)]
*** center 7: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1919584233928472] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1919584233928472, 0.14830350101843942] ***
*** starting iteration: 2; err: [Inf, 0.1919584233928472, 0.14830350101843942] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1919584233928472, 0.14830350101843942, 0.14418521954491734] ***
*** starting iteration: 3; err: [Inf, 0.1919584233928472, 0.14830350101843942, 0.14418521954491734] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1919584233928472, 0.14830350101843942, 0.14418521954491734, 0.14380140809156] ***
*** finished computation of 7 references, err: [Inf, 0.1919584233928472, 0.14830350101843942, 0.14418521954491734, 0.14380140809156] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [83, 3, 0]]
** centroid: 1, normalized-entropy: 0.21832103023746746, [(1, 83), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [58, 8, 0]]
** centroid: 2, normalized-entropy: 0.5328350630342235, [(1, 58), (2, 8)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 44, 16]]
** centroid: 3, normalized-entropy: 0.8366407419411671, [(2, 44), (3, 16)]
*** center 4: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [46, 17, 0]]
** centroid: 5, normalized-entropy: 0.8412367762002599, [(1, 46), (2, 17)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [16, 59, 0]]
** centroid: 6, normalized-entropy: 0.7478061583312324, [(1, 16), (2, 59)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 67, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18734324510395528] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18734324510395528, 0.14884671347262338] ***
*** starting iteration: 2; err: [Inf, 0.18734324510395528, 0.14884671347262338] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18734324510395528, 0.14884671347262338, 0.1463822504580021] ***
*** starting iteration: 3; err: [Inf, 0.18734324510395528, 0.14884671347262338, 0.1463822504580021] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18734324510395528, 0.14884671347262338, 0.1463822504580021, 0.14531737535633146] ***
*** starting iteration: 4; err: [Inf, 0.18734324510395528, 0.14884671347262338, 0.1463822504580021, 0.14531737535633146] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18734324510395528, 0.14884671347262338, 0.1463822504580021, 0.14531737535633146, 0.1449215214839205] ***
*** finished computation of 7 references, err: [Inf, 0.18734324510395528, 0.14884671347262338, 0.1463822504580021, 0.14531737535633146, 0.1449215214839205] ***
*** center 1: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [50, 5, 0]]
** centroid: 2, normalized-entropy: 0.43949698692151346, [(1, 50), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 62, 17]]
** centroid: 3, normalized-entropy: 0.751286576718343, [(2, 62), (3, 17)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [39, 45, 0]]
** centroid: 4, normalized-entropy: 0.9963165195589622, [(1, 39), (2, 45)]
*** center 5: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [13, 79, 0]]
** centroid: 6, normalized-entropy: 0.5876446142980418, [(1, 13), (2, 79)]
*** center 7: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20733323676977305] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20733323676977305, 0.1485854650810361] ***
*** starting iteration: 2; err: [Inf, 0.20733323676977305, 0.1485854650810361] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20733323676977305, 0.1485854650810361, 0.1443282600659877] ***
*** starting iteration: 3; err: [Inf, 0.20733323676977305, 0.1485854650810361, 0.1443282600659877] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20733323676977305, 0.1485854650810361, 0.1443282600659877, 0.1438094767704606] ***
*** finished computation of 7 references, err: [Inf, 0.20733323676977305, 0.1485854650810361, 0.1443282600659877, 0.1438094767704606] ***
*** center 1: selecting labels [1] (freq >= 2) [from [76, 1, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [70, 1, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 40, 16]]
** centroid: 3, normalized-entropy: 0.8631205685666311, [(2, 40), (3, 16)]
*** center 4: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [53, 18, 0]]
** centroid: 5, normalized-entropy: 0.8168114277045246, [(1, 53), (2, 18)]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 67, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 66, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1932398103661835] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1932398103661835, 0.14955546501837672] ***
*** starting iteration: 2; err: [Inf, 0.1932398103661835, 0.14955546501837672] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1932398103661835, 0.14955546501837672, 0.14551072079967708] ***
*** starting iteration: 3; err: [Inf, 0.1932398103661835, 0.14955546501837672, 0.14551072079967708] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1932398103661835, 0.14955546501837672, 0.14551072079967708, 0.1452325428267941] ***
*** finished computation of 7 references, err: [Inf, 0.1932398103661835, 0.14955546501837672, 0.14551072079967708, 0.1452325428267941] ***
*** center 1: selecting labels [1] (freq >= 2) [from [86, 1, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [39, 19, 0]]
** centroid: 2, normalized-entropy: 0.912441179764541, [(1, 39), (2, 19)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 50, 18]]
** centroid: 3, normalized-entropy: 0.8337649072106652, [(2, 50), (3, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [21, 48, 0]]
** centroid: 5, normalized-entropy: 0.8865408928220899, [(1, 21), (2, 48)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 55, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1887833319939673] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1887833319939673, 0.14730024015158416] ***
*** starting iteration: 2; err: [Inf, 0.1887833319939673, 0.14730024015158416] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1887833319939673, 0.14730024015158416, 0.14355469599366188] ***
*** starting iteration: 3; err: [Inf, 0.1887833319939673, 0.14730024015158416, 0.14355469599366188] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1887833319939673, 0.14730024015158416, 0.14355469599366188, 0.1427787140449509] ***
*** finished computation of 7 references, err: [Inf, 0.1887833319939673, 0.14730024015158416, 0.14355469599366188, 0.1427787140449509] ***
*** center 1: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [59, 10, 0]]
** centroid: 2, normalized-entropy: 0.5969995167604553, [(1, 59), (2, 10)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 52, 19]]
** centroid: 3, normalized-entropy: 0.8380078505079931, [(2, 52), (3, 19)]
*** center 4: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [14, 67, 0]]
** centroid: 5, normalized-entropy: 0.6641593279528072, [(1, 14), (2, 67)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [5, 55, 0]]
** centroid: 6, normalized-entropy: 0.4138168503036336, [(1, 5), (2, 55)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [44, 4, 0]]
** centroid: 7, normalized-entropy: 0.4138168503036336, [(1, 44), (2, 4)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17821823069825768] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17821823069825768, 0.1459379462506622] ***
*** starting iteration: 2; err: [Inf, 0.17821823069825768, 0.1459379462506622] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17821823069825768, 0.1459379462506622, 0.14242858466133476] ***
*** starting iteration: 3; err: [Inf, 0.17821823069825768, 0.1459379462506622, 0.14242858466133476] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17821823069825768, 0.1459379462506622, 0.14242858466133476, 0.1423109466843307] ***
*** finished computation of 7 references, err: [Inf, 0.17821823069825768, 0.1459379462506622, 0.14242858466133476, 0.1423109466843307] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 104, 11]]
** centroid: 1, normalized-entropy: 0.4550598031906027, [(2, 104), (3, 11)]
*** center 2: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [41, 18, 0]]
** centroid: 4, normalized-entropy: 0.8874179270685693, [(1, 41), (2, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [69, 8, 0]]
** centroid: 5, normalized-entropy: 0.481225663841737, [(1, 69), (2, 8)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [8, 60, 0]]
** centroid: 6, normalized-entropy: 0.5225593745369407, [(1, 8), (2, 60)]
*** center 7: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18943960094638168] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18943960094638168, 0.15364393843710422] ***
*** starting iteration: 2; err: [Inf, 0.18943960094638168, 0.15364393843710422] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18943960094638168, 0.15364393843710422, 0.14828440847061575] ***
*** starting iteration: 3; err: [Inf, 0.18943960094638168, 0.15364393843710422, 0.14828440847061575] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18943960094638168, 0.15364393843710422, 0.14828440847061575, 0.14692702796822413] ***
*** starting iteration: 4; err: [Inf, 0.18943960094638168, 0.15364393843710422, 0.14828440847061575, 0.14692702796822413] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18943960094638168, 0.15364393843710422, 0.14828440847061575, 0.14692702796822413, 0.14634563300292938] ***
*** finished computation of 7 references, err: [Inf, 0.18943960094638168, 0.15364393843710422, 0.14828440847061575, 0.14692702796822413, 0.14634563300292938] ***
*** center 1: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [64, 6, 0]]
** centroid: 2, normalized-entropy: 0.4220005168831531, [(1, 64), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 39, 19]]
** centroid: 3, normalized-entropy: 0.912441179764541, [(2, 39), (3, 19)]
*** center 4: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [17, 71, 0]]
** centroid: 5, normalized-entropy: 0.7080803256135676, [(1, 17), (2, 71)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 66, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [33, 15, 0]]
** centroid: 7, normalized-entropy: 0.8960382325345574, [(1, 33), (2, 15)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18951719668135047] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18951719668135047, 0.14977313761971892] ***
*** starting iteration: 2; err: [Inf, 0.18951719668135047, 0.14977313761971892] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18951719668135047, 0.14977313761971892, 0.14417957701161505] ***
*** starting iteration: 3; err: [Inf, 0.18951719668135047, 0.14977313761971892, 0.14417957701161505] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18951719668135047, 0.14977313761971892, 0.14417957701161505, 0.14260922274831683] ***
*** starting iteration: 4; err: [Inf, 0.18951719668135047, 0.14977313761971892, 0.14417957701161505, 0.14260922274831683] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18951719668135047, 0.14977313761971892, 0.14417957701161505, 0.14260922274831683, 0.14208030041027814] ***
*** finished computation of 7 references, err: [Inf, 0.18951719668135047, 0.14977313761971892, 0.14417957701161505, 0.14260922274831683, 0.14208030041027814] ***
*** center 1: selecting labels [1] (freq >= 2) [from [69, 1, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [48, 16, 0]]
** centroid: 2, normalized-entropy: 0.8112781244591328, [(1, 48), (2, 16)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 57, 15]]
** centroid: 3, normalized-entropy: 0.7382848661434506, [(2, 57), (3, 15)]
*** center 4: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [42, 42, 0]]
** centroid: 5, normalized-entropy: 1.0, [(1, 42), (2, 42)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [2, 76, 0]]
** centroid: 6, normalized-entropy: 0.17203694935311387, [(1, 2), (2, 76)]
*** center 7: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19968812216911466] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19968812216911466, 0.15118572181556375] ***
*** starting iteration: 2; err: [Inf, 0.19968812216911466, 0.15118572181556375] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19968812216911466, 0.15118572181556375, 0.14573448157683014] ***
*** starting iteration: 3; err: [Inf, 0.19968812216911466, 0.15118572181556375, 0.14573448157683014] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19968812216911466, 0.15118572181556375, 0.14573448157683014, 0.14484096005372704] ***
*** finished computation of 7 references, err: [Inf, 0.19968812216911466, 0.15118572181556375, 0.14573448157683014, 0.14484096005372704] ***
*** center 1: selecting labels [2] (freq >= 2) [from [1, 77, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [45, 33, 0]]
** centroid: 3, normalized-entropy: 0.9828586897127057, [(1, 45), (2, 33)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [37, 37, 0]]
** centroid: 4, normalized-entropy: 1.0, [(1, 37), (2, 37)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 51, 16]]
** centroid: 5, normalized-entropy: 0.7930490047779772, [(2, 51), (3, 16)]
*** center 6: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19025741464272142] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19025741464272142, 0.14765673230029644] ***
*** starting iteration: 2; err: [Inf, 0.19025741464272142, 0.14765673230029644] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19025741464272142, 0.14765673230029644, 0.14315829863818363] ***
*** starting iteration: 3; err: [Inf, 0.19025741464272142, 0.14765673230029644, 0.14315829863818363] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19025741464272142, 0.14765673230029644, 0.14315829863818363, 0.1424633642528206] ***
*** finished computation of 7 references, err: [Inf, 0.19025741464272142, 0.14765673230029644, 0.14315829863818363, 0.1424633642528206] ***
*** center 1: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 62, 16]]
** centroid: 2, normalized-entropy: 0.7320666900931937, [(2, 62), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [49, 12, 0]]
** centroid: 3, normalized-entropy: 0.7153220528038851, [(1, 49), (2, 12)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [44, 33, 0]]
** centroid: 4, normalized-entropy: 0.9852281360342514, [(1, 44), (2, 33)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [12, 80, 0]]
** centroid: 5, normalized-entropy: 0.5586293734521991, [(1, 12), (2, 80)]
*** center 6: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18409165287576615] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18409165287576615, 0.1507435567639768] ***
*** starting iteration: 2; err: [Inf, 0.18409165287576615, 0.1507435567639768] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18409165287576615, 0.1507435567639768, 0.14672143246140332] ***
*** starting iteration: 3; err: [Inf, 0.18409165287576615, 0.1507435567639768, 0.14672143246140332] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18409165287576615, 0.1507435567639768, 0.14672143246140332, 0.14589315524417906] ***
*** finished computation of 7 references, err: [Inf, 0.18409165287576615, 0.1507435567639768, 0.14672143246140332, 0.14589315524417906] ***
*** center 1: selecting labels [2] (freq >= 2) [from [1, 78, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [44, 11, 0]]
** centroid: 3, normalized-entropy: 0.7219280948873623, [(1, 44), (2, 11)]
*** center 4: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [84, 4, 0]]
** centroid: 5, normalized-entropy: 0.2667649878030262, [(1, 84), (2, 4)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 77, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 33, 18]]
** centroid: 7, normalized-entropy: 0.9366673818775627, [(2, 33), (3, 18)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19695854158326984] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19695854158326984, 0.15473454824648797] ***
*** starting iteration: 2; err: [Inf, 0.19695854158326984, 0.15473454824648797] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19695854158326984, 0.15473454824648797, 0.14820391954574735] ***
*** starting iteration: 3; err: [Inf, 0.19695854158326984, 0.15473454824648797, 0.14820391954574735] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19695854158326984, 0.15473454824648797, 0.14820391954574735, 0.14679336147010327] ***
*** starting iteration: 4; err: [Inf, 0.19695854158326984, 0.15473454824648797, 0.14820391954574735, 0.14679336147010327] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19695854158326984, 0.15473454824648797, 0.14820391954574735, 0.14679336147010327, 0.1464108877973631] ***
*** finished computation of 7 references, err: [Inf, 0.19695854158326984, 0.15473454824648797, 0.14820391954574735, 0.14679336147010327, 0.1464108877973631] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [55, 34, 0]]
** centroid: 1, normalized-entropy: 0.9594579158386692, [(1, 55), (2, 34)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [68, 4, 0]]
** centroid: 2, normalized-entropy: 0.3095434291503252, [(1, 68), (2, 4)]
*** center 3: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 68, 12]]
** centroid: 4, normalized-entropy: 0.6098403047164005, [(2, 68), (3, 12)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [46, 17, 0]]
** centroid: 5, normalized-entropy: 0.8412367762002599, [(1, 46), (2, 17)]
*** center 6: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 72, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19620088214427234] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19620088214427234, 0.15062276958674192] ***
*** starting iteration: 2; err: [Inf, 0.19620088214427234, 0.15062276958674192] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19620088214427234, 0.15062276958674192, 0.14510620478354394] ***
*** starting iteration: 3; err: [Inf, 0.19620088214427234, 0.15062276958674192, 0.14510620478354394] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19620088214427234, 0.15062276958674192, 0.14510620478354394, 0.14418444361072033] ***
*** finished computation of 7 references, err: [Inf, 0.19620088214427234, 0.15062276958674192, 0.14510620478354394, 0.14418444361072033] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [11, 69, 0]]
** centroid: 1, normalized-entropy: 0.5776539033535634, [(1, 11), (2, 69)]
*** center 2: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [65, 2, 0]]
** centroid: 3, normalized-entropy: 0.19364280468389852, [(1, 65), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [84, 5, 0]]
** centroid: 4, normalized-entropy: 0.3120895659343452, [(1, 84), (2, 5)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 46, 14]]
** centroid: 5, normalized-entropy: 0.7837769474847011, [(2, 46), (3, 14)]
*** center 6: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 63, 0]]
finished with 8 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 379,3 => 33,1 => 588), Dict(2 => 352,3 => 23,1 => 625))
[ Info: ===== scores for single classifier: {"micro_f1":0.934,"precision":0.934,"recall":0.934,"macro_recall":0.9486681818181818,"macro_f1":0.8581682797908692,"accuracy":0.934,"class_f1":{"2":0.9046242774566474,"3":0.7076923076923077,"1":0.9621882542236525},"class_precision":{"2":0.9205882352941176,"3":0.5476190476190477,"1":0.9676375404530745},"class_recall":{"2":0.8892045454545454,"3":1.0,"1":0.9568}}
[ Info: ===== scores for 1: {"micro_f1":0.972,"precision":0.972,"recall":0.972,"macro_recall":0.9669708827404478,"macro_f1":0.9526619950867866,"accuracy":0.972,"class_f1":{"2":0.9606741573033708,"3":0.9166666666666666,"1":0.9806451612903226},"class_precision":{"2":0.95,"3":0.88,"1":0.9886178861788618},"class_recall":{"2":0.9715909090909091,"3":0.9565217391304348,"1":0.9728}}
[ Info: ===== scores for 5: {"micro_f1":0.963,"precision":0.963,"recall":0.963,"macro_recall":0.9601027009222661,"macro_f1":0.9400377836357537,"accuracy":0.963,"class_f1":{"2":0.9479606188466948,"3":0.8979591836734695,"1":0.9741935483870968},"class_precision":{"2":0.9387186629526463,"3":0.8461538461538461,"1":0.9821138211382113},"class_recall":{"2":0.9573863636363636,"3":0.9565217391304348,"1":0.9664}}
[ Info: ===== scores for 7: {"micro_f1":0.965,"precision":0.965,"recall":0.965,"macro_recall":0.9619966403162056,"macro_f1":0.9415460637825678,"accuracy":0.965,"class_f1":{"2":0.9509116409537166,"3":0.8979591836734695,"1":0.975767366720517},"class_precision":{"2":0.9390581717451524,"3":0.8461538461538461,"1":0.9853181076672104},"class_recall":{"2":0.9630681818181818,"3":0.9565217391304348,"1":0.9664}}
[ Info: ===== scores for 9: {"micro_f1":0.963,"precision":0.963,"recall":0.963,"macro_recall":0.9601027009222661,"macro_f1":0.9400377836357537,"accuracy":0.963,"class_f1":{"2":0.9479606188466948,"3":0.8979591836734695,"1":0.9741935483870968},"class_precision":{"2":0.9387186629526463,"3":0.8461538461538461,"1":0.9821138211382113},"class_recall":{"2":0.9573863636363636,"3":0.9565217391304348,"1":0.9664}}
[ Info: ===== scores for 11: {"micro_f1":0.965,"precision":0.965,"recall":0.965,"macro_recall":0.9603420948616601,"macro_f1":0.935687145746105,"accuracy":0.965,"class_f1":{"2":0.9503546099290779,"3":0.8800000000000001,"1":0.9767068273092369},"class_precision":{"2":0.9490084985835694,"3":0.8148148148148148,"1":0.9806451612903225},"class_recall":{"2":0.9517045454545454,"3":0.9565217391304348,"1":0.9728}}
(score = 0.97, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.97, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.972, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.972, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.966, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.966, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.963, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.963, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.964, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.964, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.963, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.963, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.964, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.964, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.965, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.965, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.972,"k":1,"kernel":"direct_kernel","dist":"l2_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.972,"precision":0.972,"recall":0.972,"macro_recall":0.9669708827404478,"macro_f1":0.9526619950867866,"accuracy":0.972,"class_f1":{"2":0.9606741573033708,"3":0.9166666666666666,"1":0.9806451612903226},"class_precision":{"2":0.95,"3":0.88,"1":0.9886178861788618},"class_recall":{"2":0.9715909090909091,"3":0.9565217391304348,"1":0.9728}}
Test Summary: | Pass  Total
AKNC          |    8      8
[1297, 3, 1, 1, 1, 2, 2, 5, 1, 2, 1, 2, 2, 4, 13, 1, 5, 3, 2, 3, 9, 2, 1, 9, 14, 7, 2, 3, 8, 3, 2, 2, 9, 4, 3, 5, 11, 16, 2, 5, 32, 11, 15, 14, 7, 31, 4, 16, 3, 5, 15, 8, 20, 3, 14, 10, 3, 32, 70, 8, 14, 5, 1, 22, 5, 27, 12, 47, 11, 8, 12, 19, 3, 10, 3, 12, 7, 6, 15, 13, 50, 24, 73, 5, 22, 14, 2, 8, 30, 2, 69, 10, 36, 55, 1, 13, 29, 3, 7, 24, 41, 52, 4, 2, 8, 31, 5, 32, 17, 20, 8, 15, 13, 13, 5, 14, 66, 13, 44, 12, 10, 19, 12, 5, 12, 12, 27, 25, 7, 110, 60, 17, 5, 124, 63, 18, 1, 12, 41, 2, 24, 19, 7, 74, 5, 92, 5, 22, 3, 3, 139, 8, 110, 95, 31, 8, 28, 16, 20, 9, 17, 8, 90, 3, 17, 67, 20, 1, 19, 9, 38, 1, 9, 11, 30, 3, 4, 12, 2, 13, 37, 25, 4, 61, 24, 21, 96, 57, 10, 12, 25, 70, 22, 119, 6, 20, 131, 108, 130, 20, 13, 31, 106, 12, 74, 8, 18, 19, 4, 8, 81, 112, 31, 9, 15, 4, 87, 23, 11, 11, 132, 5, 27, 36, 44, 189, 22, 14, 36, 4, 743, 4, 8, 19, 25, 19, 46, 7, 24, 19, 4, 3, 42, 84, 42, 31, 6, 35, 45, 18, 19, 13, 18, 29, 48, 89, 203, 4, 4, 85, 21, 26, 34, 43, 1, 79, 55, 13, 7, 7, 42, 86, 41, 17, 109, 51, 81, 11, 13, 29, 13, 24, 27, 27, 11, 8, 8, 82, 13, 128, 190, 59, 42, 14, 16, 17, 6, 6, 11, 5]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6469999999999998, speedup = 0.342317301576704, eval_ratio = 0.089034)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.38355654761904767,"recall":0.36458333333333337,"f1":null,"seconds":0.00020223110914230347,"exhaustive_search_seconds":0.0003662109375,"evaluations":539.03125,"distances_sum":1725.0356741397482}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5243055555555556,"recall":0.5190972222222222,"f1":null,"seconds":0.0003338400274515152,"exhaustive_search_seconds":0.0003662109375,"evaluations":738.0703125,"distances_sum":1672.9122859512688}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.628472222222222,"recall":0.628472222222222,"f1":null,"seconds":0.0005984101444482803,"exhaustive_search_seconds":0.0003662109375,"evaluations":904.3671875,"distances_sum":1638.0425170448416}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7135416666666663,"recall":0.7135416666666663,"f1":null,"seconds":0.0006288141012191772,"exhaustive_search_seconds":0.0003662109375,"evaluations":1084.7734375,"distances_sum":1600.175362765839}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7769097222222219,"recall":0.7769097222222219,"f1":null,"seconds":0.000720122829079628,"exhaustive_search_seconds":0.0003662109375,"evaluations":1240.40625,"distances_sum":1581.8613561771654}
KCenters.DeloneInvIndex> reached performance {"precision":0.8185763888888885,"recall":0.8185763888888885,"f1":null,"seconds":0.000773843377828598,"exhaustive_search_seconds":0.0003662109375,"evaluations":1347.34375,"distances_sum":1571.5580437037358}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8320000000000001, speedup = 0.34958274496575653, eval_ratio = 0.134623)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
