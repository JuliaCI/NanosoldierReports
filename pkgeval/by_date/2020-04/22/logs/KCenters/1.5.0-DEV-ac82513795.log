Julia Version 1.5.0-DEV.662
Commit ac82513795 (2020-04-22 15:15 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed PooledArrays ──────────────── v0.5.3
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed LearnBase ─────────────────── v0.2.2
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed KCenters ──────────────────── v0.2.2
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed MLDataUtils ───────────────── v0.5.1
  Installed SimilaritySearch ──────────── v0.3.19
  Installed CategoricalArrays ─────────── v0.7.7
  Installed InvertedIndices ───────────── v1.0.0
  Installed Tables ────────────────────── v1.0.4
  Installed Compat ────────────────────── v3.8.0
  Installed Parsers ───────────────────── v1.0.2
  Installed JSON ──────────────────────── v0.21.0
  Installed MLDataPattern ─────────────── v0.5.1
  Installed StatsBase ─────────────────── v0.32.2
  Installed TableTraits ───────────────── v1.0.0
  Installed DataFrames ────────────────── v0.20.2
  Installed DataAPI ───────────────────── v1.2.0
  Installed DataValueInterfaces ───────── v1.0.0
  Installed Missings ──────────────────── v0.4.3
  Installed MappedArrays ──────────────── v0.2.2
  Installed Reexport ──────────────────── v0.2.0
  Installed DataStructures ────────────── v0.17.13
  Installed OrderedCollections ────────── v1.1.0
Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.8.0
  [9a962f9c] + DataAPI v1.2.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.13
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.1
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v1.0.2
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_TWiRwn/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_TWiRwn/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.8.0
  [9a962f9c] DataAPI v1.2.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.13
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.1
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v1.0.2
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0723782532413801
[ Info: 0.9323044313987097
[ Info: 0.8302954188982645
[ Info: 0.5553847705821197
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.3433588461826245
mean(cdnet.distances) = 0.3784934232135614
mean(crand.distances) = 0.33542781489590806
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.44140625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.44140625,"f1":null,"seconds":4.958361387252808e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":6.2265625,"distances_sum":1135.7491792141811}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7890625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7890625,"f1":0.8765796703296713,"seconds":6.077811121940613e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.3515625,"distances_sum":2181.7060211932544}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7890625,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7890625,"f1":0.8765796703296713,"seconds":6.077811121940613e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.3515625,"distances_sum":2181.7060211932544}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9516597985347992,"seconds":6.761401891708374e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.8203125,"distances_sum":2711.472753376412}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9130859375,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9516597985347992,"seconds":6.761401891708374e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.8203125,"distances_sum":2711.472753376412}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9729166666666672,"seconds":6.690621376037598e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.9375,"distances_sum":2878.3635154224085}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9619140625, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.9619140625,"f1":0.9792983058608064,"seconds":6.901100277900696e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.9609375,"distances_sum":2930.857404026273}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9637877747252752,"seconds":6.642192602157593e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.84375,"distances_sum":2790.857934614096}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9619140625,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9792983058608064,"seconds":6.901100277900696e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.9609375,"distances_sum":2930.857404026273}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9619140625,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9792983058608064,"seconds":6.901100277900696e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.9609375,"distances_sum":2930.857404026273}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7021484375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.7021484375,"f1":0.8152668512043519,"seconds":5.42961061000824e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.0234375,"distances_sum":1688.0536684539652}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5625, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5625,"f1":0.7085962648462654,"seconds":4.520639777183533e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":7.2421875,"distances_sum":1266.3061542695991}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.765625,"f1":0.8609952547452557,"seconds":5.805864930152893e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.7734375,"distances_sum":1890.2247718222325}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.765625,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.765625,"f1":0.8609952547452557,"seconds":5.805864930152893e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.7734375,"distances_sum":1890.2247718222325}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.845703125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.845703125,"f1":0.9094639735264741,"seconds":6.070360541343689e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.90625,"distances_sum":2188.9809476631026}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8017578125, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.8017578125,"f1":0.8840888278388286,"seconds":5.8747828006744385e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.78125,"distances_sum":2013.2292459223409}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.853515625, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.853515625,"f1":0.9161947427572434,"seconds":6.068497896194458e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.9921875,"distances_sum":2173.4656831408342}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83984375, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.83984375,"f1":0.9081215659340666,"seconds":6.0442835092544556e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.9140625,"distances_sum":2127.4898325564322}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.853515625,"state":{"ssize":4,"bsize":6},"perf":{"precision":1.0,"recall":0.853515625,"f1":0.9161947427572434,"seconds":6.068497896194458e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.9921875,"distances_sum":2173.4656831408342}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9310933857808864,"seconds":6.292015314102173e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.8984375,"distances_sum":2324.9757040907075}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9449862637362643,"seconds":6.357207894325256e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.90625,"distances_sum":2386.3618089783413}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.96386217948718,"seconds":6.290152668952942e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.9765625,"distances_sum":2514.4827877573794}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9584592490842497,"seconds":6.239861249923706e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.9453125,"distances_sum":2519.7621975797565}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9481315559440565,"seconds":5.973502993583679e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.96875,"distances_sum":2413.0251339566234}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.935546875,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.96386217948718,"seconds":6.290152668952942e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.9765625,"distances_sum":2514.4827877573794}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.935546875,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.96386217948718,"seconds":6.290152668952942e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.9765625,"distances_sum":2514.4827877573794}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.646484375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.646484375,"f1":0.774082688145189,"seconds":5.23589551448822e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.90625,"distances_sum":1574.4967174716578}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.736328125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.736328125,"f1":0.8362692862692871,"seconds":6.059184670448303e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.1796875,"distances_sum":1851.523288977805}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5068359375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5068359375,"f1":0.6586240148740153,"seconds":4.954636096954346e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":6.921875,"distances_sum":1208.981208543505}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.736328125,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.736328125,"f1":0.8362692862692871,"seconds":6.059184670448303e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.1796875,"distances_sum":1851.523288977805}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9511389652014657,"seconds":7.225200533866882e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.828125,"distances_sum":2499.282670251243}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9460482226107231,"seconds":6.6086649894714355e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.8046875,"distances_sum":2450.7130456328355}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.75,"f1":0.8467667748917758,"seconds":6.420537829399109e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.3671875,"distances_sum":1892.593820531908}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.86328125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.86328125,"f1":0.9171479562104567,"seconds":6.8731606006622314e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.8203125,"distances_sum":2253.60580467549}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9140625,"state":{"ssize":6,"bsize":8},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.9511389652014657,"seconds":7.225200533866882e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.828125,"distances_sum":2499.282670251243}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9575206043956046,"seconds":7.0035457611083984e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.8984375,"distances_sum":2535.633749723321}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":10,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9627804487179493,"seconds":7.096678018569946e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.921875,"distances_sum":2546.333527270724}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9683035714285716,"seconds":6.536021828651428e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.8671875,"distances_sum":2615.145442320469}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.958155906593407,"seconds":6.411224603652954e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.90625,"distances_sum":2508.7718541523727}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.943359375,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9683035714285716,"seconds":6.536021828651428e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.8671875,"distances_sum":2615.145442320469}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.943359375,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9683035714285716,"seconds":6.536021828651428e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.8671875,"distances_sum":2615.145442320469}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.681640625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.681640625,"f1":0.7999365218115225,"seconds":5.515292286872864e-6,"exhaustive_search_seconds":1.7564743757247925e-6,"evaluations":7.9765625,"distances_sum":1629.9808408338101}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6826171875, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6826171875,"f1":0.8016499125874132,"seconds":5.3960829973220825e-6,"exhaustive_search_seconds":1.7564743757247925e-6,"evaluations":7.9609375,"distances_sum":1598.5714015220715}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4130859375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4130859375,"f1":null,"seconds":4.256144165992737e-6,"exhaustive_search_seconds":1.7564743757247925e-6,"evaluations":6.9140625,"distances_sum":924.5738312458569}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6826171875,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.6826171875,"f1":0.8016499125874132,"seconds":5.3960829973220825e-6,"exhaustive_search_seconds":1.7564743757247925e-6,"evaluations":7.9609375,"distances_sum":1598.5714015220715}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7880859375, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7880859375,"f1":0.8727760087135096,"seconds":5.93625009059906e-6,"exhaustive_search_seconds":1.7564743757247925e-6,"evaluations":8.3828125,"distances_sum":1987.5159703274894}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9516597985347991,"seconds":6.603077054023743e-6,"exhaustive_search_seconds":1.7564743757247925e-6,"evaluations":8.84375,"distances_sum":2430.121784184723}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9485920329670336,"seconds":6.861984729766846e-6,"exhaustive_search_seconds":1.7564743757247925e-6,"evaluations":8.84375,"distances_sum":2419.647907936229}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.779296875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.779296875,"f1":0.8684440559440569,"seconds":5.938112735748291e-6,"exhaustive_search_seconds":1.7564743757247925e-6,"evaluations":8.34375,"distances_sum":1950.6527036548503}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9140625,"state":{"ssize":7,"bsize":8},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.9516597985347991,"seconds":6.603077054023743e-6,"exhaustive_search_seconds":1.7564743757247925e-6,"evaluations":8.84375,"distances_sum":2430.121784184723}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9571085164835168,"seconds":6.750226020812988e-6,"exhaustive_search_seconds":1.7564743757247925e-6,"evaluations":8.8203125,"distances_sum":2484.2019514264975}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.963604624542125,"seconds":6.789341568946838e-6,"exhaustive_search_seconds":1.7564743757247925e-6,"evaluations":8.84375,"distances_sum":2545.74081939286}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":8,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9680460164835172,"seconds":6.964430212974548e-6,"exhaustive_search_seconds":1.7564743757247925e-6,"evaluations":8.8828125,"distances_sum":2560.021837574892}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9706330128205132,"seconds":7.407739758491516e-6,"exhaustive_search_seconds":1.7564743757247925e-6,"evaluations":8.9453125,"distances_sum":2551.0818941284074}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9662259615384617,"seconds":7.711350917816162e-6,"exhaustive_search_seconds":1.7564743757247925e-6,"evaluations":8.9375,"distances_sum":2524.466640519882}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.953125,"f1":0.973626373626374,"seconds":7.499009370803833e-6,"exhaustive_search_seconds":1.7564743757247925e-6,"evaluations":8.9453125,"distances_sum":2588.823030599792}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9659626831501835,"seconds":6.835907697677612e-6,"exhaustive_search_seconds":1.7564743757247925e-6,"evaluations":8.8671875,"distances_sum":2541.8147802949807}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.953125,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.953125,"f1":0.973626373626374,"seconds":7.499009370803833e-6,"exhaustive_search_seconds":1.7564743757247925e-6,"evaluations":8.9453125,"distances_sum":2588.823030599792}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.953125,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.953125,"f1":0.973626373626374,"seconds":7.499009370803833e-6,"exhaustive_search_seconds":1.7564743757247925e-6,"evaluations":8.9453125,"distances_sum":2588.823030599792}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6064453125, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.6064453125,"f1":null,"seconds":4.811212420463562e-6,"exhaustive_search_seconds":1.9855797290802e-6,"evaluations":7.375,"distances_sum":1438.180086355884}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.779296875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.779296875,"f1":0.8681636072261081,"seconds":4.427507519721985e-6,"exhaustive_search_seconds":1.9855797290802e-6,"evaluations":8.3984375,"distances_sum":1897.9003188246195}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.216796875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.216796875,"f1":null,"seconds":2.6691704988479614e-6,"exhaustive_search_seconds":1.9855797290802e-6,"evaluations":5.75,"distances_sum":544.348687723246}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.779296875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.779296875,"f1":0.8681636072261081,"seconds":4.427507519721985e-6,"exhaustive_search_seconds":1.9855797290802e-6,"evaluations":8.3984375,"distances_sum":1897.9003188246195}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8466796875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8466796875,"f1":0.9115702006327013,"seconds":4.233792424201965e-6,"exhaustive_search_seconds":1.9855797290802e-6,"evaluations":8.59375,"distances_sum":2133.6853892403155}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9595810439560444,"seconds":4.956498742103577e-6,"exhaustive_search_seconds":1.9855797290802e-6,"evaluations":8.8828125,"distances_sum":2490.4743851018225}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.927734375,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.9595810439560444,"seconds":4.956498742103577e-6,"exhaustive_search_seconds":1.9855797290802e-6,"evaluations":8.8828125,"distances_sum":2490.4743851018225}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9623569139194145,"seconds":4.552304744720459e-6,"exhaustive_search_seconds":1.9855797290802e-6,"evaluations":8.84375,"distances_sum":2527.366635823934}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9666323260073264,"seconds":7.579103112220764e-6,"exhaustive_search_seconds":1.9855797290802e-6,"evaluations":8.921875,"distances_sum":2523.9521545742477}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9606627747252752,"seconds":7.553026080131531e-6,"exhaustive_search_seconds":1.9855797290802e-6,"evaluations":8.890625,"distances_sum":2496.8208711789216}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9666323260073264,"seconds":7.579103112220764e-6,"exhaustive_search_seconds":1.9855797290802e-6,"evaluations":8.921875,"distances_sum":2523.9521545742477}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.939453125,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9666323260073264,"seconds":7.579103112220764e-6,"exhaustive_search_seconds":1.9855797290802e-6,"evaluations":8.921875,"distances_sum":2523.9521545742477}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5791015625, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5791015625,"f1":0.7198773448773454,"seconds":5.271285772323608e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":7.0625,"distances_sum":1349.9308796866292}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5966796875, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.5966796875,"f1":0.731083673271174,"seconds":5.31412661075592e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":7.1484375,"distances_sum":1430.5787576993837}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.609375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.609375,"f1":0.7402557511932517,"seconds":6.444752216339111e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":7.2265625,"distances_sum":1432.7382699947545}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.609375,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.609375,"f1":0.7402557511932517,"seconds":6.444752216339111e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":7.2265625,"distances_sum":1432.7382699947545}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.818359375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.818359375,"f1":0.8922426531801539,"seconds":7.184222340583801e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.5625,"distances_sum":2092.424597434696}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.938979770229771,"seconds":8.054077625274658e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.71875,"distances_sum":2444.681843329079}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6982421875, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6982421875,"f1":0.8129479895104904,"seconds":5.427747964859009e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":7.6953125,"distances_sum":1702.379879157734}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9380354020979027,"seconds":7.618218660354614e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.6484375,"distances_sum":2429.6212462871003}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6953125, conf: {"ssize":7,"bsize":4}, perf: {"precision":1.0,"recall":0.6953125,"f1":0.8093625124875133,"seconds":5.749985575675964e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":7.6640625,"distances_sum":1707.825992600237}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8955078125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8955078125,"f1":0.938979770229771,"seconds":8.054077625274658e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.71875,"distances_sum":2444.681843329079}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.97185782967033,"seconds":7.582828402519226e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.921875,"distances_sum":2652.677539562533}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9638450091575096,"seconds":7.452443242073059e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.875,"distances_sum":2606.037276485951}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9455414377289384,"seconds":7.370486855506897e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.7265625,"distances_sum":2512.9190433400504}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9684008699633704,"seconds":7.338821887969971e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.8984375,"distances_sum":2633.791851641848}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9523923992673997,"seconds":7.135793566703796e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.7734375,"distances_sum":2540.240643009162}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9628548534798537,"seconds":7.2177499532699585e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.859375,"distances_sum":2598.009667119788}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94921875,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.97185782967033,"seconds":7.582828402519226e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.921875,"distances_sum":2652.677539562533}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94921875,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.97185782967033,"seconds":7.582828402519226e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.921875,"distances_sum":2652.677539562533}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.267578125, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.267578125,"f1":null,"seconds":5.250796675682068e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":6.1875,"distances_sum":400.30553959929017}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.267578125,"state":{"ssize":2,"bsize":2},"perf":{"precision":null,"recall":0.267578125,"f1":null,"seconds":5.250796675682068e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":6.1875,"distances_sum":400.30553959929017}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.77734375, conf: {"ssize":4,"bsize":6}, perf: {"precision":0.9296688988095234,"recall":0.77734375,"f1":0.8429587339743586,"seconds":7.024034857749939e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.640625,"distances_sum":1173.2535096088004}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.77734375,"state":{"ssize":4,"bsize":6},"perf":{"precision":0.9296688988095234,"recall":0.77734375,"f1":0.8429587339743586,"seconds":7.024034857749939e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.640625,"distances_sum":1173.2535096088004}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":7,"bsize":9}, perf: {"precision":0.9474516369047619,"recall":0.90625,"f1":0.9239239926739927,"seconds":4.945322871208191e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.953125,"distances_sum":1477.6340222655094}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.90625,"state":{"ssize":7,"bsize":9},"perf":{"precision":0.9474516369047619,"recall":0.90625,"f1":0.9239239926739927,"seconds":4.945322871208191e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.953125,"distances_sum":1477.6340222655094}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.90625,"state":{"ssize":7,"bsize":9},"perf":{"precision":0.9474516369047619,"recall":0.90625,"f1":0.9239239926739927,"seconds":4.945322871208191e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.953125,"distances_sum":1477.6340222655094}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6279296875, conf: {"ssize":1,"bsize":4}, perf: {"precision":null,"recall":0.6279296875,"f1":null,"seconds":5.3942203521728516e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":7.1484375,"distances_sum":1035.7445375995655}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7392578125, conf: {"ssize":2,"bsize":5}, perf: {"precision":0.9855468749999999,"recall":0.7392578125,"f1":0.8364487075424581,"seconds":6.0014426708221436e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":7.890625,"distances_sum":1232.4987646197737}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7392578125,"state":{"ssize":2,"bsize":5},"perf":{"precision":0.9855468749999999,"recall":0.7392578125,"f1":0.8364487075424581,"seconds":6.0014426708221436e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":7.890625,"distances_sum":1232.4987646197737}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.837890625, conf: {"ssize":4,"bsize":6}, perf: {"precision":0.985063244047619,"recall":0.837890625,"f1":0.8994841096403604,"seconds":6.163492798805237e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":8.3671875,"distances_sum":1521.7730101280304}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":5,"bsize":8}, perf: {"precision":0.9869326636904762,"recall":0.8955078125,"f1":0.9349752461080587,"seconds":6.3050538301467896e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":8.7421875,"distances_sum":1708.0456115912475}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":1,"bsize":8}, perf: {"precision":0.9885602678571429,"recall":0.908203125,"f1":0.9430131066849822,"seconds":6.502494215965271e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":8.78125,"distances_sum":1734.7454706275712}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.908203125,"state":{"ssize":1,"bsize":8},"perf":{"precision":0.9885602678571429,"recall":0.908203125,"f1":0.9430131066849822,"seconds":6.502494215965271e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":8.78125,"distances_sum":1734.7454706275712}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":1,"bsize":10}, perf: {"precision":0.9889787946428572,"recall":0.951171875,"f1":0.9683686755952383,"seconds":6.634742021560669e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":8.9375,"distances_sum":1863.581356781449}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":1,"bsize":12}, perf: {"precision":0.9868861607142858,"recall":0.9443359375,"f1":0.9638206845238099,"seconds":6.508082151412964e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":8.921875,"distances_sum":1852.713008093307}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":2,"bsize":9}, perf: {"precision":0.9896298363095238,"recall":0.9111328125,"f1":0.9453954248876129,"seconds":6.716698408126831e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":8.8046875,"distances_sum":1728.4648237317235}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":3,"bsize":12}, perf: {"precision":0.9892578125,"recall":0.953125,"f1":0.969448975503663,"seconds":7.517635822296143e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":8.9453125,"distances_sum":1859.2717303410116}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":7,"bsize":10}, perf: {"precision":0.9896763392857144,"recall":0.927734375,"f1":0.9551010187728941,"seconds":7.120892405509949e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":8.8359375,"distances_sum":1788.9415177396863}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.953125,"state":{"ssize":3,"bsize":12},"perf":{"precision":0.9892578125,"recall":0.953125,"f1":0.969448975503663,"seconds":7.517635822296143e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":8.9453125,"distances_sum":1859.2717303410116}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.953125,"state":{"ssize":3,"bsize":12},"perf":{"precision":0.9892578125,"recall":0.953125,"f1":0.969448975503663,"seconds":7.517635822296143e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":8.9453125,"distances_sum":1859.2717303410116}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6708984375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6708984375,"f1":0.7869049353424362,"seconds":5.360692739486694e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":7.484375,"distances_sum":1127.1281182427158}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.15625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.15625,"f1":null,"seconds":3.4831464290618896e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":5.1953125,"distances_sum":280.6255473547753}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5888671875, conf: {"ssize":5,"bsize":3}, perf: {"precision":null,"recall":0.5888671875,"f1":null,"seconds":4.734843969345093e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":6.90625,"distances_sum":956.9511780105768}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6708984375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6708984375,"f1":0.7869049353424362,"seconds":5.360692739486694e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":7.484375,"distances_sum":1127.1281182427158}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9414205586080593,"seconds":6.485730409622192e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.7421875,"distances_sum":1779.93744235714}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9491872710622716,"seconds":7.072463631629944e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.703125,"distances_sum":1834.9552143238109}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7890625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7890625,"f1":0.8749375624375633,"seconds":6.2193721532821655e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.1171875,"distances_sum":1437.0466692148048}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.697265625, conf: {"ssize":3,"bsize":4}, perf: {"precision":null,"recall":0.697265625,"f1":null,"seconds":5.561858415603638e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":7.5078125,"distances_sum":1203.8509257143166}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.929550137362638,"seconds":7.387250661849976e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.6484375,"distances_sum":1716.5967282551728}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91015625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.91015625,"f1":0.9491872710622716,"seconds":7.072463631629944e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.703125,"distances_sum":1834.9552143238109}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9697172619047625,"seconds":7.167458534240723e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.8984375,"distances_sum":1900.620880376472}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9599609375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9599609375,"f1":0.9778846153846156,"seconds":7.374212145805359e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.9375,"distances_sum":1930.8184406261366}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.958464972527473,"seconds":6.94766640663147e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.84375,"distances_sum":1826.035477241009}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9741643772893777,"seconds":6.5211206674575806e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.90625,"distances_sum":1939.9759080081835}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9599609375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9599609375,"f1":0.9778846153846156,"seconds":7.374212145805359e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.9375,"distances_sum":1930.8184406261366}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9599609375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9599609375,"f1":0.9778846153846156,"seconds":7.374212145805359e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.9375,"distances_sum":1930.8184406261366}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.40234375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.40234375,"f1":null,"seconds":3.870576620101929e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":5.96875,"distances_sum":776.7911256389737}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5478515625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5478515625,"f1":0.690713453213454,"seconds":4.604458808898926e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":6.796875,"distances_sum":1102.9561064769964}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5478515625,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5478515625,"f1":0.690713453213454,"seconds":4.604458808898926e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":6.796875,"distances_sum":1102.9561064769964}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.556640625, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.556640625,"f1":0.6979236041736047,"seconds":4.600733518600464e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":6.9765625,"distances_sum":1092.9404302120236}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76953125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.76953125,"f1":0.8607928529803538,"seconds":5.85801899433136e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.125,"distances_sum":1678.0566707016255}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8671875, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8671875,"f1":0.9206666597291605,"seconds":6.854534149169922e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.625,"distances_sum":1967.9697150218929}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84765625, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.84765625,"f1":0.9100050990676001,"seconds":3.980472683906555e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.5859375,"distances_sum":1902.4112803444696}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8671875,"state":{"ssize":2,"bsize":6},"perf":{"precision":1.0,"recall":0.8671875,"f1":0.9206666597291605,"seconds":6.854534149169922e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.625,"distances_sum":1967.9697150218929}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.955122481684982,"seconds":3.991648554801941e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.8046875,"distances_sum":2154.471154038854}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9407082500832507,"seconds":4.14624810218811e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.7109375,"distances_sum":2079.9989419506405}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9478880494505499,"seconds":4.215165972709656e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.7734375,"distances_sum":2126.8608909072727}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":9,"bsize":10}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9635645604395611,"seconds":4.326924681663513e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.8828125,"distances_sum":2183.1873588478925}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9401728479853484,"seconds":4.112720489501953e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.7421875,"distances_sum":2054.496880011019}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9722298534798539,"seconds":4.207715392112732e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.921875,"distances_sum":2235.7280994885296}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9306292665667673,"seconds":3.95067036151886e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.6953125,"distances_sum":1977.7330174775961}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94921875,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9722298534798539,"seconds":4.207715392112732e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.921875,"distances_sum":2235.7280994885296}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94921875,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9722298534798539,"seconds":4.207715392112732e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.921875,"distances_sum":2235.7280994885296}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.580078125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.580078125,"f1":0.7205237470862478,"seconds":4.643574357032776e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":7.09375,"distances_sum":1153.9577240889262}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4501953125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4501953125,"f1":null,"seconds":4.304572939872742e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":6.671875,"distances_sum":853.3689863938546}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.580078125,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.580078125,"f1":0.7205237470862478,"seconds":4.643574357032776e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":7.09375,"distances_sum":1153.9577240889262}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.798828125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.798828125,"f1":0.8797114343989355,"seconds":5.9194862842559814e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.1875,"distances_sum":1766.536114372827}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.857421875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.857421875,"f1":0.9161630036630045,"seconds":6.100162863731384e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.546875,"distances_sum":1947.3789635396677}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.857421875,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.857421875,"f1":0.9161630036630045,"seconds":6.100162863731384e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.546875,"distances_sum":1947.3789635396677}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9569997710622716,"seconds":6.418675184249878e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.7890625,"distances_sum":2181.4374481313657}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.949874084249085,"seconds":6.550922989845276e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.7890625,"distances_sum":2132.2087105439527}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9461767399267405,"seconds":6.575137376785278e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.7890625,"distances_sum":2093.253060100669}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9688816391941397,"seconds":6.73346221446991e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.8984375,"distances_sum":2244.46240672036}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.943359375,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9688816391941397,"seconds":6.73346221446991e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.8984375,"distances_sum":2244.46240672036}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.943359375,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9688816391941397,"seconds":6.73346221446991e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.8984375,"distances_sum":2244.46240672036}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.67578125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.67578125,"f1":0.7953846500721509,"seconds":5.41098415851593e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":7.625,"distances_sum":1290.9726527200553}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4326171875, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.4326171875,"f1":null,"seconds":4.217028617858887e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":5.8359375,"distances_sum":766.9286395674407}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.67578125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.67578125,"f1":0.7953846500721509,"seconds":5.41098415851593e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":7.625,"distances_sum":1290.9726527200553}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8232421875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8232421875,"f1":0.8943533896658905,"seconds":6.295740604400635e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.2109375,"distances_sum":1698.367382288986}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.802734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.802734375,"f1":0.8828931485181493,"seconds":5.964189767837524e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.0546875,"distances_sum":1632.1633190319474}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.677734375, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.677734375,"f1":0.7954925283050289,"seconds":5.243346095085144e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":7.46875,"distances_sum":1299.1236173303298}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7744140625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7744140625,"f1":0.862051490176491,"seconds":5.912035703659058e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":7.984375,"distances_sum":1578.042795995812}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6826171875, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6826171875,"f1":0.7980774433899441,"seconds":6.0070306062698364e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":7.6640625,"distances_sum":1321.622917175271}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8232421875,"state":{"ssize":3,"bsize":6},"perf":{"precision":1.0,"recall":0.8232421875,"f1":0.8943533896658905,"seconds":6.295740604400635e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.2109375,"distances_sum":1698.367382288986}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9656078296703301,"seconds":7.148832082748413e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.8828125,"distances_sum":2062.371012613007}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9626144688644693,"seconds":6.748363375663757e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.828125,"distances_sum":2055.7485881999796}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9411916208791217,"seconds":7.402151823043823e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.6875,"distances_sum":1941.2742831418493}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8271484375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8271484375,"f1":0.8971705377955385,"seconds":6.336718797683716e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.28125,"distances_sum":1740.2114985984197}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9551568223443226,"seconds":7.6107680797576904e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.84375,"distances_sum":2016.3593091754735}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9389365842490849,"seconds":6.6962093114852905e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.6328125,"distances_sum":1948.5292292705599}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9656078296703301,"seconds":7.148832082748413e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.8828125,"distances_sum":2062.371012613007}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9656078296703301,"seconds":7.148832082748413e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.8828125,"distances_sum":2062.371012613007}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5859375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5859375,"f1":0.7219089937839944,"seconds":5.055218935012817e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":7.59375,"distances_sum":1160.93561007871}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8203125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.8203125,"f1":0.8942344114219121,"seconds":7.255002856254578e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.6015625,"distances_sum":1762.0010761874166}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3603515625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3603515625,"f1":null,"seconds":5.122274160385132e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":5.9375,"distances_sum":677.6719454175725}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8203125,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.8203125,"f1":0.8942344114219121,"seconds":7.255002856254578e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.6015625,"distances_sum":1762.0010761874166}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8427734375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8427734375,"f1":0.9062708125208134,"seconds":5.258247256278992e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.53125,"distances_sum":1859.4944269438367}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.837890625, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.837890625,"f1":0.9039554195804202,"seconds":3.883615136146545e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.3984375,"distances_sum":1817.09182767213}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8427734375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8427734375,"f1":0.9062708125208134,"seconds":5.258247256278992e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.53125,"distances_sum":1859.4944269438367}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.849609375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.849609375,"f1":0.9090440809190817,"seconds":3.91155481338501e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.578125,"distances_sum":1876.4251760220832}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8583984375, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8583984375,"f1":0.9163263819513824,"seconds":3.7867575883865356e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.46875,"distances_sum":1899.5579775144163}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9632841117216122,"seconds":4.118308424949646e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.8359375,"distances_sum":2190.6050637719386}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.93359375,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9632841117216122,"seconds":4.118308424949646e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.8359375,"distances_sum":2190.6050637719386}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.93359375,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9632841117216122,"seconds":4.118308424949646e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.8359375,"distances_sum":2190.6050637719386}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6806640625, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6806640625,"f1":0.8011061854811863,"seconds":2.9616057872772217e-6,"exhaustive_search_seconds":8.977949619293213e-7,"evaluations":7.40625,"distances_sum":1504.071456902378}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2880859375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2880859375,"f1":null,"seconds":2.0246952772140503e-6,"exhaustive_search_seconds":8.977949619293213e-7,"evaluations":5.65625,"distances_sum":719.7094323154369}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6806640625,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.6806640625,"f1":0.8011061854811863,"seconds":2.9616057872772217e-6,"exhaustive_search_seconds":8.977949619293213e-7,"evaluations":7.40625,"distances_sum":1504.071456902378}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.94336652930403,"seconds":3.42540442943573e-6,"exhaustive_search_seconds":8.977949619293213e-7,"evaluations":8.6875,"distances_sum":2334.8856116104807}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7998046875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.7998046875,"f1":0.8820918664668675,"seconds":3.6172568798065186e-6,"exhaustive_search_seconds":8.977949619293213e-7,"evaluations":8.2578125,"distances_sum":1902.9313041101184}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.716796875, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.716796875,"f1":0.8236565517815525,"seconds":5.112960934638977e-6,"exhaustive_search_seconds":8.977949619293213e-7,"evaluations":7.8828125,"distances_sum":1648.482108989856}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6904296875, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6904296875,"f1":0.8043435730935738,"seconds":4.721805453300476e-6,"exhaustive_search_seconds":8.977949619293213e-7,"evaluations":7.5,"distances_sum":1565.603750653926}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.900390625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.900390625,"f1":0.94336652930403,"seconds":3.42540442943573e-6,"exhaustive_search_seconds":8.977949619293213e-7,"evaluations":8.6875,"distances_sum":2334.8856116104807}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.965516254578755,"seconds":5.910173058509827e-6,"exhaustive_search_seconds":8.977949619293213e-7,"evaluations":8.84375,"distances_sum":2476.733635688653}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9565132783882788,"seconds":5.766749382019043e-6,"exhaustive_search_seconds":8.977949619293213e-7,"evaluations":8.734375,"distances_sum":2437.664931036918}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9384765625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.965516254578755,"seconds":5.910173058509827e-6,"exhaustive_search_seconds":8.977949619293213e-7,"evaluations":8.84375,"distances_sum":2476.733635688653}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9384765625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.965516254578755,"seconds":5.910173058509827e-6,"exhaustive_search_seconds":8.977949619293213e-7,"evaluations":8.84375,"distances_sum":2476.733635688653}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6396484375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6396484375,"f1":0.7682369713619721,"seconds":5.183741450309753e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":7.3125,"distances_sum":1506.0740388320455}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.232421875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.232421875,"f1":null,"seconds":3.637745976448059e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":5.7109375,"distances_sum":542.2147900586821}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6396484375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6396484375,"f1":0.7682369713619721,"seconds":5.183741450309753e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":7.3125,"distances_sum":1506.0740388320455}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8154296875, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8154296875,"f1":0.8928774350649359,"seconds":6.197020411491394e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.375,"distances_sum":2067.014899631649}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.9309039918414924,"seconds":6.493180990219116e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.578125,"distances_sum":2331.9005517001797}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.880859375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.880859375,"f1":0.9309039918414924,"seconds":6.493180990219116e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.578125,"distances_sum":2331.9005517001797}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9449149808524817,"seconds":6.398186087608337e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.6875,"distances_sum":2489.635407587205}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.942902930402931,"seconds":6.137415766716003e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.6953125,"distances_sum":2482.6153742141682}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9619448260073264,"seconds":6.897374987602234e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.84375,"distances_sum":2583.413553951767}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9537259615384621,"seconds":6.303191184997559e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.828125,"distances_sum":2508.528428357338}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9326171875,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9619448260073264,"seconds":6.897374987602234e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.84375,"distances_sum":2583.413553951767}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9326171875,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9619448260073264,"seconds":6.897374987602234e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.84375,"distances_sum":2583.413553951767}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.580078125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.580078125,"f1":0.720766386391387,"seconds":4.7441571950912476e-6,"exhaustive_search_seconds":1.4435499906539917e-6,"evaluations":7.171875,"distances_sum":1367.761689961099}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.576171875, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.576171875,"f1":0.7175995879120887,"seconds":4.6584755182266235e-6,"exhaustive_search_seconds":1.4435499906539917e-6,"evaluations":7.25,"distances_sum":1307.5186347005122}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.580078125,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.580078125,"f1":0.720766386391387,"seconds":4.7441571950912476e-6,"exhaustive_search_seconds":1.4435499906539917e-6,"evaluations":7.171875,"distances_sum":1367.761689961099}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7314453125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7314453125,"f1":0.8381103271728279,"seconds":5.815178155899048e-6,"exhaustive_search_seconds":1.4435499906539917e-6,"evaluations":8.1796875,"distances_sum":1779.3959221518012}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.728515625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.728515625,"f1":0.8373485889110898,"seconds":5.608424544334412e-6,"exhaustive_search_seconds":1.4435499906539917e-6,"evaluations":8.2578125,"distances_sum":1786.7599355169275}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8251953125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8251953125,"f1":0.8979369588744596,"seconds":5.943700671195984e-6,"exhaustive_search_seconds":1.4435499906539917e-6,"evaluations":8.46875,"distances_sum":2122.130796223904}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7373046875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7373046875,"f1":0.8415443931068941,"seconds":5.431473255157471e-6,"exhaustive_search_seconds":1.4435499906539917e-6,"evaluations":8.171875,"distances_sum":1797.0234704536008}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8251953125,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8251953125,"f1":0.8979369588744596,"seconds":5.943700671195984e-6,"exhaustive_search_seconds":1.4435499906539917e-6,"evaluations":8.46875,"distances_sum":2122.130796223904}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9645146520146524,"seconds":5.163252353668213e-6,"exhaustive_search_seconds":1.4435499906539917e-6,"evaluations":8.8828125,"distances_sum":2641.428826063232}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9697802197802202,"seconds":6.6533684730529785e-6,"exhaustive_search_seconds":1.4435499906539917e-6,"evaluations":8.9140625,"distances_sum":2678.7195880803956}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.828125, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.828125,"f1":0.9004583957708966,"seconds":5.2228569984436035e-6,"exhaustive_search_seconds":1.4435499906539917e-6,"evaluations":8.4765625,"distances_sum":2149.8519111136875}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9498054029304036,"seconds":4.200264811515808e-6,"exhaustive_search_seconds":1.4435499906539917e-6,"evaluations":8.8046875,"distances_sum":2550.2958177054234}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9462890625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.9697802197802202,"seconds":6.6533684730529785e-6,"exhaustive_search_seconds":1.4435499906539917e-6,"evaluations":8.9140625,"distances_sum":2678.7195880803956}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9462890625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.9697802197802202,"seconds":6.6533684730529785e-6,"exhaustive_search_seconds":1.4435499906539917e-6,"evaluations":8.9140625,"distances_sum":2678.7195880803956}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.580078125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.580078125,"f1":0.7208789474414481,"seconds":5.230307579040527e-6,"exhaustive_search_seconds":1.125037670135498e-6,"evaluations":7.2265625,"distances_sum":1372.3312467257679}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.580078125,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.580078125,"f1":0.7208789474414481,"seconds":5.230307579040527e-6,"exhaustive_search_seconds":1.125037670135498e-6,"evaluations":7.2265625,"distances_sum":1372.3312467257679}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.73046875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.73046875,"f1":0.8362845487845495,"seconds":6.126239895820618e-6,"exhaustive_search_seconds":1.125037670135498e-6,"evaluations":8.2109375,"distances_sum":1854.1931892609962}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.822265625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.822265625,"f1":0.8970243298368306,"seconds":6.290152668952942e-6,"exhaustive_search_seconds":1.125037670135498e-6,"evaluations":8.65625,"distances_sum":2188.6456571672784}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7412109375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7412109375,"f1":0.8455299908424917,"seconds":6.027519702911377e-6,"exhaustive_search_seconds":1.125037670135498e-6,"evaluations":8.265625,"distances_sum":1864.4072283253188}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7421875, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7421875,"f1":0.8456798409923418,"seconds":6.0033053159713745e-6,"exhaustive_search_seconds":1.125037670135498e-6,"evaluations":8.21875,"distances_sum":1883.4627974514779}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.822265625,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.822265625,"f1":0.8970243298368306,"seconds":6.290152668952942e-6,"exhaustive_search_seconds":1.125037670135498e-6,"evaluations":8.65625,"distances_sum":2188.6456571672784}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9449633699633706,"seconds":6.707385182380676e-6,"exhaustive_search_seconds":1.125037670135498e-6,"evaluations":8.9296875,"distances_sum":2528.804203815287}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9562557234432241,"seconds":6.981194019317627e-6,"exhaustive_search_seconds":1.125037670135498e-6,"evaluations":8.9453125,"distances_sum":2629.0747933780117}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.962053571428572,"seconds":7.186084985733032e-6,"exhaustive_search_seconds":1.125037670135498e-6,"evaluations":8.96875,"distances_sum":2657.947902427307}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9599988553113556,"seconds":7.214024662971497e-6,"exhaustive_search_seconds":1.125037670135498e-6,"evaluations":8.9609375,"distances_sum":2666.6794786209034}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9375,"f1":0.965218635531136,"seconds":7.443130016326904e-6,"exhaustive_search_seconds":1.125037670135498e-6,"evaluations":9.0,"distances_sum":2679.0654837914108}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9545959249084253,"seconds":7.525086402893066e-6,"exhaustive_search_seconds":1.125037670135498e-6,"evaluations":8.96875,"distances_sum":2622.157493087025}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9348557692307702,"seconds":7.126480340957642e-6,"exhaustive_search_seconds":1.125037670135498e-6,"evaluations":8.90625,"distances_sum":2458.724968850435}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9375,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9375,"f1":0.965218635531136,"seconds":7.443130016326904e-6,"exhaustive_search_seconds":1.125037670135498e-6,"evaluations":9.0,"distances_sum":2679.0654837914108}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9375,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9375,"f1":0.965218635531136,"seconds":7.443130016326904e-6,"exhaustive_search_seconds":1.125037670135498e-6,"evaluations":9.0,"distances_sum":2679.0654837914108}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.220703125,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.220703125,"f1":null,"seconds":4.189088940620422e-6,"exhaustive_search_seconds":1.8365681171417236e-6,"evaluations":5.296875,"distances_sum":587.363276463539}}, beam: 3, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.220703125,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.220703125,"f1":null,"seconds":4.189088940620422e-6,"exhaustive_search_seconds":1.8365681171417236e-6,"evaluations":5.296875,"distances_sum":587.363276463539}}, n: 9
mean(cfft.distances) = 0.3433588464933287
mean(cdnet.distances) = 0.4342120734777536
mean(crand.distances) = 0.943576617265344
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8933333333333334
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.9155555555555556
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.9422222222222222
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8711111111111111
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.9111111111111111
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.9111111111111111
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8822222222222221
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8955555555555555
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9177777777777778
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9355555555555556
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9422222222222222
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8466666666666667
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.9400000000000001
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8888888888888888
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8555555555555555
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9022222222222224
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9422222222222222
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9155555555555556
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9355555555555556
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9155555555555556
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8488888888888889
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8688888888888888
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8777777777777778
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8577777777777778
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.8844444444444445
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9355555555555556
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.9044444444444445
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9022222222222221
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9022222222222221
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8999999999999999
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.9111111111111111
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8444444444444444
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8644444444444445
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9111111111111111
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9111111111111111
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.92
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.9733333333333334
*** finished computation of 12 references, err: [Inf, 0.6189801048239072] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [1] (freq >= 1) [from [37, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 1, 22]]
** centroid: 4, normalized-entropy: 0.2580186686648155, [(2, 1), (3, 22)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 9, 12]]
** centroid: 5, normalized-entropy: 0.9852281360342514, [(2, 9), (3, 12)]
*** center 6: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [1] (freq >= 1) [from [3, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 10, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
finished with 14 centroids; started with 12
acc = 0.9333333333333333
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.32663778106852603] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32663778106852603, 0.23213137119068755] ***
*** starting iteration: 2; err: [Inf, 0.32663778106852603, 0.23213137119068755] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32663778106852603, 0.23213137119068755, 0.22810752140553864] ***
*** starting iteration: 3; err: [Inf, 0.32663778106852603, 0.23213137119068755, 0.22810752140553864] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32663778106852603, 0.23213137119068755, 0.22810752140553864, 0.22760883943484006] ***
*** finished computation of 3 references, err: [Inf, 0.32663778106852603, 0.23213137119068755, 0.22810752140553864, 0.22760883943484006] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [245, 2, 0]]
** centroid: 1, normalized-entropy: 0.06789640139994182, [(1, 245), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [145, 64, 0]]
** centroid: 2, normalized-entropy: 0.8887619165202822, [(1, 145), (2, 64)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [4, 184, 22]]
** centroid: 3, normalized-entropy: 0.38921955304314415, [(1, 4), (2, 184), (3, 22)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.349848332093307] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.349848332093307, 0.2308346900561763] ***
*** finished computation of 3 references, err: [Inf, 0.349848332093307, 0.2308346900561763] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [258, 29, 0]]
** centroid: 1, normalized-entropy: 0.472300373512276, [(1, 258), (2, 29)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [136, 60, 0]]
** centroid: 2, normalized-entropy: 0.8886466698980794, [(1, 136), (2, 60)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 161, 22]]
** centroid: 3, normalized-entropy: 0.5299888383579557, [(2, 161), (3, 22)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.30151273438503134] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30151273438503134, 0.23962874122304673] ***
*** starting iteration: 2; err: [Inf, 0.30151273438503134, 0.23962874122304673] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30151273438503134, 0.23962874122304673, 0.23567670566829918] ***
*** starting iteration: 3; err: [Inf, 0.30151273438503134, 0.23962874122304673, 0.23567670566829918] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30151273438503134, 0.23962874122304673, 0.23567670566829918, 0.23472197490606062] ***
*** finished computation of 3 references, err: [Inf, 0.30151273438503134, 0.23962874122304673, 0.23567670566829918, 0.23472197490606062] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 177, 26]]
** centroid: 1, normalized-entropy: 0.5521456953311914, [(2, 177), (3, 26)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [239, 36, 0]]
** centroid: 2, normalized-entropy: 0.5599261096508504, [(1, 239), (2, 36)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [150, 39, 0]]
** centroid: 3, normalized-entropy: 0.7344461802527668, [(1, 150), (2, 39)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.30135816604044213] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30135816604044213, 0.24029717935916634] ***
*** starting iteration: 2; err: [Inf, 0.30135816604044213, 0.24029717935916634] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30135816604044213, 0.24029717935916634, 0.2309536247889789] ***
*** starting iteration: 3; err: [Inf, 0.30135816604044213, 0.24029717935916634, 0.2309536247889789] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30135816604044213, 0.24029717935916634, 0.2309536247889789, 0.229826456459443] ***
*** starting iteration: 4; err: [Inf, 0.30135816604044213, 0.24029717935916634, 0.2309536247889789, 0.229826456459443] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30135816604044213, 0.24029717935916634, 0.2309536247889789, 0.229826456459443, 0.22972907479070517] ***
*** finished computation of 3 references, err: [Inf, 0.30135816604044213, 0.24029717935916634, 0.2309536247889789, 0.229826456459443, 0.22972907479070517] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [84, 127, 6]]
** centroid: 1, normalized-entropy: 0.7100990042657033, [(1, 84), (2, 127), (3, 6)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [81, 153, 16]]
** centroid: 2, normalized-entropy: 0.7660443218354555, [(1, 81), (2, 153), (3, 16)]
*** center 3: selecting labels [1] (freq >= 1) [from [200, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.21810311607613758] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21810311607613758, 0.18884209986893577] ***
*** starting iteration: 2; err: [Inf, 0.21810311607613758, 0.18884209986893577] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21810311607613758, 0.18884209986893577, 0.18584331740693724] ***
*** starting iteration: 3; err: [Inf, 0.21810311607613758, 0.18884209986893577, 0.18584331740693724] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21810311607613758, 0.18884209986893577, 0.18584331740693724, 0.18600262998248096] ***
*** finished computation of 7 references, err: [Inf, 0.21810311607613758, 0.18884209986893577, 0.18584331740693724, 0.18600262998248096] ***
*** center 1: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [18, 85, 0]]
** centroid: 2, normalized-entropy: 0.6684725699243225, [(1, 18), (2, 85)]
*** center 3: selecting labels [1] (freq >= 2) [from [104, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [19, 74, 0]]
** centroid: 4, normalized-entropy: 0.7304472862481346, [(1, 19), (2, 74)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 76, 22]]
** centroid: 5, normalized-entropy: 0.7682814090975241, [(2, 76), (3, 22)]
*** center 6: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [77, 15, 0]]
** centroid: 7, normalized-entropy: 0.6415410585827175, [(1, 77), (2, 15)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2591031328335159] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2591031328335159, 0.21427441593203722] ***
*** starting iteration: 2; err: [Inf, 0.2591031328335159, 0.21427441593203722] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2591031328335159, 0.21427441593203722, 0.2005178838293871] ***
*** starting iteration: 3; err: [Inf, 0.2591031328335159, 0.21427441593203722, 0.2005178838293871] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2591031328335159, 0.21427441593203722, 0.2005178838293871, 0.1959127865067084] ***
*** starting iteration: 4; err: [Inf, 0.2591031328335159, 0.21427441593203722, 0.2005178838293871, 0.1959127865067084] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2591031328335159, 0.21427441593203722, 0.2005178838293871, 0.1959127865067084, 0.19374830740039004] ***
*** starting iteration: 5; err: [Inf, 0.2591031328335159, 0.21427441593203722, 0.2005178838293871, 0.1959127865067084, 0.19374830740039004] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2591031328335159, 0.21427441593203722, 0.2005178838293871, 0.1959127865067084, 0.19374830740039004, 0.1927024433661582] ***
*** starting iteration: 6; err: [Inf, 0.2591031328335159, 0.21427441593203722, 0.2005178838293871, 0.1959127865067084, 0.19374830740039004, 0.1927024433661582] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2591031328335159, 0.21427441593203722, 0.2005178838293871, 0.1959127865067084, 0.19374830740039004, 0.1927024433661582, 0.1915663081644357] ***
*** starting iteration: 7; err: [Inf, 0.2591031328335159, 0.21427441593203722, 0.2005178838293871, 0.1959127865067084, 0.19374830740039004, 0.1927024433661582, 0.1915663081644357] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2591031328335159, 0.21427441593203722, 0.2005178838293871, 0.1959127865067084, 0.19374830740039004, 0.1927024433661582, 0.1915663081644357, 0.19046097596188535] ***
*** starting iteration: 8; err: [Inf, 0.2591031328335159, 0.21427441593203722, 0.2005178838293871, 0.1959127865067084, 0.19374830740039004, 0.1927024433661582, 0.1915663081644357, 0.19046097596188535] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2591031328335159, 0.21427441593203722, 0.2005178838293871, 0.1959127865067084, 0.19374830740039004, 0.1927024433661582, 0.1915663081644357, 0.19046097596188535, 0.18934083247146774] ***
*** starting iteration: 9; err: [Inf, 0.2591031328335159, 0.21427441593203722, 0.2005178838293871, 0.1959127865067084, 0.19374830740039004, 0.1927024433661582, 0.1915663081644357, 0.19046097596188535, 0.18934083247146774] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2591031328335159, 0.21427441593203722, 0.2005178838293871, 0.1959127865067084, 0.19374830740039004, 0.1927024433661582, 0.1915663081644357, 0.19046097596188535, 0.18934083247146774, 0.1890385058831362] ***
*** finished computation of 7 references, err: [Inf, 0.2591031328335159, 0.21427441593203722, 0.2005178838293871, 0.1959127865067084, 0.19374830740039004, 0.1927024433661582, 0.1915663081644357, 0.19046097596188535, 0.18934083247146774, 0.1890385058831362] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [42, 52, 0]]
** centroid: 1, normalized-entropy: 0.9918207974218425, [(1, 42), (2, 52)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [68, 45, 0]]
** centroid: 2, normalized-entropy: 0.9699058425934317, [(1, 68), (2, 45)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 83, 26]]
** centroid: 3, normalized-entropy: 0.7925906965800167, [(2, 83), (3, 26)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [12, 72, 0]]
** centroid: 4, normalized-entropy: 0.5916727785823274, [(1, 12), (2, 72)]
*** center 5: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2239089122589142] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2239089122589142, 0.21107414671159844] ***
*** starting iteration: 2; err: [Inf, 0.2239089122589142, 0.21107414671159844] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2239089122589142, 0.21107414671159844, 0.20540663207890927] ***
*** starting iteration: 3; err: [Inf, 0.2239089122589142, 0.21107414671159844, 0.20540663207890927] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2239089122589142, 0.21107414671159844, 0.20540663207890927, 0.19938840230541496] ***
*** starting iteration: 4; err: [Inf, 0.2239089122589142, 0.21107414671159844, 0.20540663207890927, 0.19938840230541496] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2239089122589142, 0.21107414671159844, 0.20540663207890927, 0.19938840230541496, 0.19444882498308458] ***
*** starting iteration: 5; err: [Inf, 0.2239089122589142, 0.21107414671159844, 0.20540663207890927, 0.19938840230541496, 0.19444882498308458] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2239089122589142, 0.21107414671159844, 0.20540663207890927, 0.19938840230541496, 0.19444882498308458, 0.1899213858746059] ***
*** starting iteration: 6; err: [Inf, 0.2239089122589142, 0.21107414671159844, 0.20540663207890927, 0.19938840230541496, 0.19444882498308458, 0.1899213858746059] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2239089122589142, 0.21107414671159844, 0.20540663207890927, 0.19938840230541496, 0.19444882498308458, 0.1899213858746059, 0.18804275863028985] ***
*** starting iteration: 7; err: [Inf, 0.2239089122589142, 0.21107414671159844, 0.20540663207890927, 0.19938840230541496, 0.19444882498308458, 0.1899213858746059, 0.18804275863028985] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2239089122589142, 0.21107414671159844, 0.20540663207890927, 0.19938840230541496, 0.19444882498308458, 0.1899213858746059, 0.18804275863028985, 0.18694730094009857] ***
*** starting iteration: 8; err: [Inf, 0.2239089122589142, 0.21107414671159844, 0.20540663207890927, 0.19938840230541496, 0.19444882498308458, 0.1899213858746059, 0.18804275863028985, 0.18694730094009857] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2239089122589142, 0.21107414671159844, 0.20540663207890927, 0.19938840230541496, 0.19444882498308458, 0.1899213858746059, 0.18804275863028985, 0.18694730094009857, 0.1864984386713653] ***
*** finished computation of 7 references, err: [Inf, 0.2239089122589142, 0.21107414671159844, 0.20540663207890927, 0.19938840230541496, 0.19444882498308458, 0.1899213858746059, 0.18804275863028985, 0.18694730094009857, 0.1864984386713653] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 97, 22]]
** centroid: 1, normalized-entropy: 0.6906241389199443, [(2, 97), (3, 22)]
*** center 2: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [29, 77, 0]]
** centroid: 4, normalized-entropy: 0.8465618461461522, [(1, 29), (2, 77)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [73, 34, 0]]
** centroid: 5, normalized-entropy: 0.9019255901324292, [(1, 73), (2, 34)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [27, 72, 0]]
** centroid: 6, normalized-entropy: 0.8453509366224364, [(1, 27), (2, 72)]
*** center 7: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3719862611997906] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3719862611997906, 0.3074165752985062] ***
*** starting iteration: 2; err: [Inf, 0.3719862611997906, 0.3074165752985062] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3719862611997906, 0.3074165752985062, 0.29396148455922155] ***
*** starting iteration: 3; err: [Inf, 0.3719862611997906, 0.3074165752985062, 0.29396148455922155] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3719862611997906, 0.3074165752985062, 0.29396148455922155, 0.292002630968195] ***
*** starting iteration: 4; err: [Inf, 0.3719862611997906, 0.3074165752985062, 0.29396148455922155, 0.292002630968195] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3719862611997906, 0.3074165752985062, 0.29396148455922155, 0.292002630968195, 0.29188318003679403] ***
*** finished computation of 3 references, err: [Inf, 0.3719862611997906, 0.3074165752985062, 0.29396148455922155, 0.292002630968195, 0.29188318003679403] ***
*** center 1: selecting labels [1] (freq >= 1) [from [219, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [58, 160, 22]]
** centroid: 2, normalized-entropy: 0.7578382619606719, [(1, 58), (2, 160), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [117, 90, 0]]
** centroid: 3, normalized-entropy: 0.9876925088958032, [(1, 117), (2, 90)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.399335285186533] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.399335285186533, 0.30099238327116534] ***
*** starting iteration: 2; err: [Inf, 0.399335285186533, 0.30099238327116534] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.399335285186533, 0.30099238327116534, 0.2934506551391896] ***
*** starting iteration: 3; err: [Inf, 0.399335285186533, 0.30099238327116534, 0.2934506551391896] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.399335285186533, 0.30099238327116534, 0.2934506551391896, 0.29295561650022306] ***
*** finished computation of 3 references, err: [Inf, 0.399335285186533, 0.30099238327116534, 0.2934506551391896, 0.29295561650022306] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [127, 94, 0]]
** centroid: 1, normalized-entropy: 0.9838559201255357, [(1, 127), (2, 94)]
*** center 2: selecting labels [1] (freq >= 1) [from [209, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [53, 158, 26]]
** centroid: 3, normalized-entropy: 0.7716073221834033, [(1, 53), (2, 158), (3, 26)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3871024748899679] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3871024748899679, 0.3392726326978457] ***
*** starting iteration: 2; err: [Inf, 0.3871024748899679, 0.3392726326978457] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3871024748899679, 0.3392726326978457, 0.3312579220861777] ***
*** starting iteration: 3; err: [Inf, 0.3871024748899679, 0.3392726326978457, 0.3312579220861777] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3871024748899679, 0.3392726326978457, 0.3312579220861777, 0.32902326390448805] ***
*** starting iteration: 4; err: [Inf, 0.3871024748899679, 0.3392726326978457, 0.3312579220861777, 0.32902326390448805] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3871024748899679, 0.3392726326978457, 0.3312579220861777, 0.32902326390448805, 0.3276220216308309] ***
*** starting iteration: 5; err: [Inf, 0.3871024748899679, 0.3392726326978457, 0.3312579220861777, 0.32902326390448805, 0.3276220216308309] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3871024748899679, 0.3392726326978457, 0.3312579220861777, 0.32902326390448805, 0.3276220216308309, 0.3268613034448792] ***
*** finished computation of 3 references, err: [Inf, 0.3871024748899679, 0.3392726326978457, 0.3312579220861777, 0.32902326390448805, 0.3276220216308309, 0.3268613034448792] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [222, 16, 0]]
** centroid: 1, normalized-entropy: 0.35548867788893707, [(1, 222), (2, 16)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [95, 152, 0]]
** centroid: 2, normalized-entropy: 0.961236604722876, [(1, 95), (2, 152)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [48, 112, 22]]
** centroid: 3, normalized-entropy: 0.8244004715432814, [(1, 48), (2, 112), (3, 22)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.5008059123575732] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5008059123575732, 0.3200384220905468] ***
*** starting iteration: 2; err: [Inf, 0.5008059123575732, 0.3200384220905468] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5008059123575732, 0.3200384220905468, 0.30173417114073764] ***
*** starting iteration: 3; err: [Inf, 0.5008059123575732, 0.3200384220905468, 0.30173417114073764] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5008059123575732, 0.3200384220905468, 0.30173417114073764, 0.29369515971652604] ***
*** finished computation of 3 references, err: [Inf, 0.5008059123575732, 0.3200384220905468, 0.30173417114073764, 0.29369515971652604] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [104, 128, 0]]
** centroid: 1, normalized-entropy: 0.9922666387194963, [(1, 104), (2, 128)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [73, 122, 22]]
** centroid: 2, normalized-entropy: 0.8395202875880766, [(1, 73), (2, 122), (3, 22)]
*** center 3: selecting labels [1] (freq >= 2) [from [217, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4674252545868774] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4674252545868774, 0.32620934730135964] ***
*** starting iteration: 2; err: [Inf, 0.4674252545868774, 0.32620934730135964] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4674252545868774, 0.32620934730135964, 0.3042757018204678] ***
*** starting iteration: 3; err: [Inf, 0.4674252545868774, 0.32620934730135964, 0.3042757018204678] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4674252545868774, 0.32620934730135964, 0.3042757018204678, 0.3003996312213333] ***
*** finished computation of 3 references, err: [Inf, 0.4674252545868774, 0.32620934730135964, 0.3042757018204678, 0.3003996312213333] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [174, 37, 0]]
** centroid: 1, normalized-entropy: 0.6698103602429678, [(1, 174), (2, 37)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [215, 14, 0]]
** centroid: 2, normalized-entropy: 0.33193552796357967, [(1, 215), (2, 14)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 201, 26]]
** centroid: 3, normalized-entropy: 0.5134523524951747, [(2, 201), (3, 26)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.40905575643920494] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40905575643920494, 0.2961721283396234] ***
*** starting iteration: 2; err: [Inf, 0.40905575643920494, 0.2961721283396234] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40905575643920494, 0.2961721283396234, 0.29394273473874205] ***
*** starting iteration: 3; err: [Inf, 0.40905575643920494, 0.2961721283396234, 0.29394273473874205] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40905575643920494, 0.2961721283396234, 0.29394273473874205, 0.29397411612902713] ***
*** finished computation of 3 references, err: [Inf, 0.40905575643920494, 0.2961721283396234, 0.29394273473874205, 0.29397411612902713] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [1, 227, 22]]
** centroid: 1, normalized-entropy: 0.4309497142967628, [(2, 227), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [134, 45, 0]]
** centroid: 2, normalized-entropy: 0.8134842641012572, [(1, 134), (2, 45)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [230, 8, 0]]
** centroid: 3, normalized-entropy: 0.21220132752136248, [(1, 230), (2, 8)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.30021039679277317] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30021039679277317, 0.23491641919215298] ***
*** starting iteration: 2; err: [Inf, 0.30021039679277317, 0.23491641919215298] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30021039679277317, 0.23491641919215298, 0.23105383613048955] ***
*** starting iteration: 3; err: [Inf, 0.30021039679277317, 0.23491641919215298, 0.23105383613048955] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30021039679277317, 0.23491641919215298, 0.23105383613048955, 0.23051978494026684] ***
*** finished computation of 3 references, err: [Inf, 0.30021039679277317, 0.23491641919215298, 0.23105383613048955, 0.23051978494026684] ***
*** center 1: selecting labels [1] (freq >= 2) [from [211, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [94, 118, 8]]
** centroid: 2, normalized-entropy: 0.7445427228344375, [(1, 94), (2, 118), (3, 8)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [89, 132, 14]]
** centroid: 3, normalized-entropy: 0.7825628850941562, [(1, 89), (2, 132), (3, 14)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.36209276349547653] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36209276349547653, 0.30580121778353847] ***
*** starting iteration: 2; err: [Inf, 0.36209276349547653, 0.30580121778353847] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36209276349547653, 0.30580121778353847, 0.2934199480250522] ***
*** starting iteration: 3; err: [Inf, 0.36209276349547653, 0.30580121778353847, 0.2934199480250522] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36209276349547653, 0.30580121778353847, 0.2934199480250522, 0.28191401134908334] ***
*** finished computation of 3 references, err: [Inf, 0.36209276349547653, 0.30580121778353847, 0.2934199480250522, 0.28191401134908334] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [85, 135, 25]]
** centroid: 1, normalized-entropy: 0.8452181044993086, [(1, 85), (2, 135), (3, 25)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [67, 8, 0]]
** centroid: 2, normalized-entropy: 0.48977901368693744, [(1, 67), (2, 8)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [237, 109, 1]]
** centroid: 3, normalized-entropy: 0.8988934259327582, [(1, 237), (2, 109)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2901340885705006] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2901340885705006, 0.22890915419987362] ***
*** starting iteration: 2; err: [Inf, 0.2901340885705006, 0.22890915419987362] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2901340885705006, 0.22890915419987362, 0.22868939413866404] ***
*** finished computation of 3 references, err: [Inf, 0.2901340885705006, 0.22890915419987362, 0.22868939413866404] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [58, 167, 22]]
** centroid: 1, normalized-entropy: 0.7466368960576343, [(1, 58), (2, 167), (3, 22)]
*** center 2: selecting labels [1] (freq >= 2) [from [194, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [113, 113, 0]]
** centroid: 3, normalized-entropy: 1.0, [(1, 113), (2, 113)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.44731082840523384] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44731082840523384, 0.36130038536973186] ***
*** starting iteration: 2; err: [Inf, 0.44731082840523384, 0.36130038536973186] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44731082840523384, 0.36130038536973186, 0.3357361273297497] ***
*** starting iteration: 3; err: [Inf, 0.44731082840523384, 0.36130038536973186, 0.3357361273297497] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44731082840523384, 0.36130038536973186, 0.3357361273297497, 0.2929684511852918] ***
*** starting iteration: 4; err: [Inf, 0.44731082840523384, 0.36130038536973186, 0.3357361273297497, 0.2929684511852918] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44731082840523384, 0.36130038536973186, 0.3357361273297497, 0.2929684511852918, 0.2891452036687528] ***
*** starting iteration: 5; err: [Inf, 0.44731082840523384, 0.36130038536973186, 0.3357361273297497, 0.2929684511852918, 0.2891452036687528] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44731082840523384, 0.36130038536973186, 0.3357361273297497, 0.2929684511852918, 0.2891452036687528, 0.2877000575667029] ***
*** starting iteration: 6; err: [Inf, 0.44731082840523384, 0.36130038536973186, 0.3357361273297497, 0.2929684511852918, 0.2891452036687528, 0.2877000575667029] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44731082840523384, 0.36130038536973186, 0.3357361273297497, 0.2929684511852918, 0.2891452036687528, 0.2877000575667029, 0.28715701582184333] ***
*** finished computation of 3 references, err: [Inf, 0.44731082840523384, 0.36130038536973186, 0.3357361273297497, 0.2929684511852918, 0.2891452036687528, 0.2877000575667029, 0.28715701582184333] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [244, 12, 0]]
** centroid: 1, normalized-entropy: 0.2729708579140699, [(1, 244), (2, 12)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [149, 65, 0]]
** centroid: 2, normalized-entropy: 0.8858126995052983, [(1, 149), (2, 65)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [1, 173, 22]]
** centroid: 3, normalized-entropy: 0.34825053128046024, [(1, 1), (2, 173), (3, 22)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4016064995008966] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4016064995008966, 0.3195129314387242] ***
*** starting iteration: 2; err: [Inf, 0.4016064995008966, 0.3195129314387242] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4016064995008966, 0.3195129314387242, 0.3029022998451583] ***
*** starting iteration: 3; err: [Inf, 0.4016064995008966, 0.3195129314387242, 0.3029022998451583] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4016064995008966, 0.3195129314387242, 0.3029022998451583, 0.29875137388560996] ***
*** starting iteration: 4; err: [Inf, 0.4016064995008966, 0.3195129314387242, 0.3029022998451583, 0.29875137388560996] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4016064995008966, 0.3195129314387242, 0.3029022998451583, 0.29875137388560996, 0.296958581217728] ***
*** starting iteration: 5; err: [Inf, 0.4016064995008966, 0.3195129314387242, 0.3029022998451583, 0.29875137388560996, 0.296958581217728] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4016064995008966, 0.3195129314387242, 0.3029022998451583, 0.29875137388560996, 0.296958581217728, 0.29638178087910566] ***
*** finished computation of 3 references, err: [Inf, 0.4016064995008966, 0.3195129314387242, 0.3029022998451583, 0.29875137388560996, 0.296958581217728, 0.29638178087910566] ***
*** center 1: selecting labels [1] (freq >= 1) [from [200, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [117, 86, 0]]
** centroid: 2, normalized-entropy: 0.9831120694234091, [(1, 117), (2, 86)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [72, 166, 26]]
** centroid: 3, normalized-entropy: 0.7958735974778216, [(1, 72), (2, 166), (3, 26)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4380807790268531] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4380807790268531, 0.3446139640145484] ***
*** starting iteration: 2; err: [Inf, 0.4380807790268531, 0.3446139640145484] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4380807790268531, 0.3446139640145484, 0.32750858234872027] ***
*** starting iteration: 3; err: [Inf, 0.4380807790268531, 0.3446139640145484, 0.32750858234872027] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4380807790268531, 0.3446139640145484, 0.32750858234872027, 0.32669720938917934] ***
*** finished computation of 3 references, err: [Inf, 0.4380807790268531, 0.3446139640145484, 0.32750858234872027, 0.32669720938917934] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [205, 33, 0]]
** centroid: 1, normalized-entropy: 0.5807067282766603, [(1, 205), (2, 33)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [124, 119, 0]]
** centroid: 2, normalized-entropy: 0.999694576356325, [(1, 124), (2, 119)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [36, 128, 22]]
** centroid: 3, normalized-entropy: 0.7532444523020535, [(1, 36), (2, 128), (3, 22)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.30459299921435684] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30459299921435684, 0.214311201028895] ***
*** finished computation of 7 references, err: [Inf, 0.30459299921435684, 0.214311201028895] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [268, 15, 0]]
** centroid: 1, normalized-entropy: 0.29902127471594325, [(1, 268), (2, 15)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [85, 33, 0]]
** centroid: 2, normalized-entropy: 0.85498851113698, [(1, 85), (2, 33)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [1, 140, 18]]
** centroid: 3, normalized-entropy: 0.511639783631173, [(2, 140), (3, 18)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 22, 4]]
** centroid: 4, normalized-entropy: 0.6193821946787638, [(2, 22), (3, 4)]
*** center 5: selecting labels [1] (freq >= 2) [from [40, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 40, 0]]
finished with 6 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24433465836069795] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24433465836069795, 0.1632899290964432] ***
*** finished computation of 7 references, err: [Inf, 0.24433465836069795, 0.1632899290964432] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [120, 17, 0]]
** centroid: 1, normalized-entropy: 0.5409974860679866, [(1, 120), (2, 17)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 19, 25]]
** centroid: 2, normalized-entropy: 0.9865446300055647, [(2, 19), (3, 25)]
*** center 3: selecting labels [1] (freq >= 2) [from [123, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [110, 40, 0]]
** centroid: 4, normalized-entropy: 0.8366407419411671, [(1, 110), (2, 40)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [36, 49, 0]]
** centroid: 5, normalized-entropy: 0.9830605548016024, [(1, 36), (2, 49)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 57, 1]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 70, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19813686799302674] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19813686799302674, 0.16547143698084926] ***
*** finished computation of 7 references, err: [Inf, 0.19813686799302674, 0.16547143698084926] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 88, 22]]
** centroid: 1, normalized-entropy: 0.7219280948873623, [(2, 88), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [10, 88, 0]]
** centroid: 2, normalized-entropy: 0.47543164626872053, [(1, 10), (2, 88)]
*** center 3: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [33, 1, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [110, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [58, 22, 0]]
** centroid: 6, normalized-entropy: 0.8485481782946159, [(1, 58), (2, 22)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [88, 81, 0]]
** centroid: 7, normalized-entropy: 0.9987620831831502, [(1, 88), (2, 81)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3085153619256122] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3085153619256122, 0.24823518483334037] ***
*** finished computation of 3 references, err: [Inf, 0.3085153619256122, 0.24823518483334037] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [133, 202, 26]]
** centroid: 1, normalized-entropy: 0.8030476500530053, [(1, 133), (2, 202), (3, 26)]
*** center 2: selecting labels [1] (freq >= 2) [from [147, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [109, 50, 0]]
** centroid: 3, normalized-entropy: 0.8982609371118948, [(1, 109), (2, 50)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3458651397858971] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3458651397858971, 0.23300176861903993] ***
*** finished computation of 3 references, err: [Inf, 0.3458651397858971, 0.23300176861903993] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [236, 59, 0]]
** centroid: 1, normalized-entropy: 0.7219280948873623, [(1, 236), (2, 59)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [129, 48, 0]]
** centroid: 2, normalized-entropy: 0.8431619569518377, [(1, 129), (2, 48)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 173, 22]]
** centroid: 3, normalized-entropy: 0.5083652932820523, [(2, 173), (3, 22)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4885990584867674] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4885990584867674, 0.29280704999476803] ***
*** starting iteration: 2; err: [Inf, 0.4885990584867674, 0.29280704999476803] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4885990584867674, 0.29280704999476803, 0.2875139776284474] ***
*** starting iteration: 3; err: [Inf, 0.4885990584867674, 0.29280704999476803, 0.2875139776284474] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4885990584867674, 0.29280704999476803, 0.2875139776284474, 0.28664974816417593] ***
*** finished computation of 3 references, err: [Inf, 0.4885990584867674, 0.29280704999476803, 0.2875139776284474, 0.28664974816417593] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [62, 164, 22]]
** centroid: 1, normalized-entropy: 0.7600019264438906, [(1, 62), (2, 164), (3, 22)]
*** center 2: selecting labels [1] (freq >= 2) [from [203, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [129, 86, 0]]
** centroid: 3, normalized-entropy: 0.9709505944546688, [(1, 129), (2, 86)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4029974193791154] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4029974193791154, 0.29890082894113734] ***
*** starting iteration: 2; err: [Inf, 0.4029974193791154, 0.29890082894113734] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4029974193791154, 0.29890082894113734, 0.29652536333841584] ***
*** starting iteration: 3; err: [Inf, 0.4029974193791154, 0.29890082894113734, 0.29652536333841584] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4029974193791154, 0.29890082894113734, 0.29652536333841584, 0.29598745913698576] ***
*** finished computation of 3 references, err: [Inf, 0.4029974193791154, 0.29890082894113734, 0.29652536333841584, 0.29598745913698576] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [77, 164, 26]]
** centroid: 1, normalized-entropy: 0.8053529747270766, [(1, 77), (2, 164), (3, 26)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [109, 88, 0]]
** centroid: 2, normalized-entropy: 0.9917874852392844, [(1, 109), (2, 88)]
*** center 3: selecting labels [1] (freq >= 2) [from [203, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3890626843030127] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3890626843030127, 0.3014409030261247] ***
*** starting iteration: 2; err: [Inf, 0.3890626843030127, 0.3014409030261247] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3890626843030127, 0.3014409030261247, 0.2926224365696378] ***
*** starting iteration: 3; err: [Inf, 0.3890626843030127, 0.3014409030261247, 0.2926224365696378] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3890626843030127, 0.3014409030261247, 0.2926224365696378, 0.2905539405131447] ***
*** finished computation of 3 references, err: [Inf, 0.3890626843030127, 0.3014409030261247, 0.2926224365696378, 0.2905539405131447] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [77, 178, 22]]
** centroid: 1, normalized-entropy: 0.7657163246715968, [(1, 77), (2, 178), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [97, 102, 0]]
** centroid: 2, normalized-entropy: 0.9995445674117696, [(1, 97), (2, 102)]
*** center 3: selecting labels [1] (freq >= 2) [from [191, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.23781884892343041] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23781884892343041, 0.19202913040597294] ***
*** starting iteration: 2; err: [Inf, 0.23781884892343041, 0.19202913040597294] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23781884892343041, 0.19202913040597294, 0.18748904389326457] ***
*** starting iteration: 3; err: [Inf, 0.23781884892343041, 0.19202913040597294, 0.18748904389326457] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23781884892343041, 0.19202913040597294, 0.18748904389326457, 0.18631566599970711] ***
*** starting iteration: 4; err: [Inf, 0.23781884892343041, 0.19202913040597294, 0.18748904389326457, 0.18631566599970711] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23781884892343041, 0.19202913040597294, 0.18748904389326457, 0.18631566599970711, 0.18607223540538917] ***
*** finished computation of 7 references, err: [Inf, 0.23781884892343041, 0.19202913040597294, 0.18748904389326457, 0.18631566599970711, 0.18607223540538917] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [79, 31, 0]]
** centroid: 1, normalized-entropy: 0.8579163978157118, [(1, 79), (2, 31)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [52, 14, 0]]
** centroid: 2, normalized-entropy: 0.7455178428108284, [(1, 52), (2, 14)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 95, 22]]
** centroid: 3, normalized-entropy: 0.6973409725623739, [(2, 95), (3, 22)]
*** center 4: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [66, 20, 0]]
** centroid: 5, normalized-entropy: 0.7824441294066888, [(1, 66), (2, 20)]
*** center 6: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [4, 90, 0]]
** centroid: 7, normalized-entropy: 0.2538784402981617, [(1, 4), (2, 90)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2441714831210416] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2441714831210416, 0.19301508313793314] ***
*** starting iteration: 2; err: [Inf, 0.2441714831210416, 0.19301508313793314] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2441714831210416, 0.19301508313793314, 0.18914639756413013] ***
*** starting iteration: 3; err: [Inf, 0.2441714831210416, 0.19301508313793314, 0.18914639756413013] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2441714831210416, 0.19301508313793314, 0.18914639756413013, 0.1886188587372092] ***
*** finished computation of 7 references, err: [Inf, 0.2441714831210416, 0.19301508313793314, 0.18914639756413013, 0.1886188587372092] ***
*** center 1: selecting labels [1] (freq >= 2) [from [109, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [82, 22, 0]]
** centroid: 2, normalized-entropy: 0.7444131797881749, [(1, 82), (2, 22)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 42, 26]]
** centroid: 3, normalized-entropy: 0.9596868937742168, [(2, 42), (3, 26)]
*** center 4: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [85, 16, 0]]
** centroid: 5, normalized-entropy: 0.6305062394675903, [(1, 85), (2, 16)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [13, 88, 0]]
** centroid: 6, normalized-entropy: 0.5538976334852961, [(1, 13), (2, 88)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 84, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2343340129486803] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2343340129486803, 0.1969717126730634] ***
*** starting iteration: 2; err: [Inf, 0.2343340129486803, 0.1969717126730634] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2343340129486803, 0.1969717126730634, 0.19272167330001783] ***
*** starting iteration: 3; err: [Inf, 0.2343340129486803, 0.1969717126730634, 0.19272167330001783] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2343340129486803, 0.1969717126730634, 0.19272167330001783, 0.19195373101101287] ***
*** finished computation of 7 references, err: [Inf, 0.2343340129486803, 0.1969717126730634, 0.19272167330001783, 0.19195373101101287] ***
*** center 1: selecting labels [2] (freq >= 2) [from [1, 112, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [73, 13, 0]]
** centroid: 2, normalized-entropy: 0.6127425554686624, [(1, 73), (2, 13)]
*** center 3: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 62, 22]]
** centroid: 4, normalized-entropy: 0.8296071030882032, [(2, 62), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [34, 80, 0]]
** centroid: 5, normalized-entropy: 0.8791357668533337, [(1, 34), (2, 80)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [66, 12, 0]]
** centroid: 6, normalized-entropy: 0.6193821946787638, [(1, 66), (2, 12)]
*** center 7: selecting labels [1] (freq >= 2) [from [93, 1, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2094107359993326] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2094107359993326, 0.15444454504037136] ***
*** starting iteration: 2; err: [Inf, 0.2094107359993326, 0.15444454504037136] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2094107359993326, 0.15444454504037136, 0.1480912851014485] ***
*** starting iteration: 3; err: [Inf, 0.2094107359993326, 0.15444454504037136, 0.1480912851014485] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2094107359993326, 0.15444454504037136, 0.1480912851014485, 0.14685584387151865] ***
*** finished computation of 7 references, err: [Inf, 0.2094107359993326, 0.15444454504037136, 0.1480912851014485, 0.14685584387151865] ***
*** center 1: selecting labels [1] (freq >= 1) [from [114, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 57, 22]]
** centroid: 2, normalized-entropy: 0.8533728188427888, [(2, 57), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [53, 42, 0]]
** centroid: 3, normalized-entropy: 0.9903070204513952, [(1, 53), (2, 42)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [108, 6, 0]]
** centroid: 4, normalized-entropy: 0.2974722489192896, [(1, 108), (2, 6)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [35, 60, 0]]
** centroid: 5, normalized-entropy: 0.9494520153879484, [(1, 35), (2, 60)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 85, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18677519183505376] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18677519183505376, 0.14997752455818555] ***
*** starting iteration: 2; err: [Inf, 0.18677519183505376, 0.14997752455818555] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18677519183505376, 0.14997752455818555, 0.14705128877841192] ***
*** starting iteration: 3; err: [Inf, 0.18677519183505376, 0.14997752455818555, 0.14705128877841192] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18677519183505376, 0.14997752455818555, 0.14705128877841192, 0.14652152977760943] ***
*** finished computation of 7 references, err: [Inf, 0.18677519183505376, 0.14997752455818555, 0.14705128877841192, 0.14652152977760943] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [81, 34, 0]]
** centroid: 1, normalized-entropy: 0.8759110349777134, [(1, 81), (2, 34)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [70, 31, 0]]
** centroid: 2, normalized-entropy: 0.8895986430672326, [(1, 70), (2, 31)]
*** center 3: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 79, 10]]
** centroid: 4, normalized-entropy: 0.5069923067544342, [(2, 79), (3, 10)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [83, 28, 0]]
** centroid: 5, normalized-entropy: 0.8148283832923793, [(1, 83), (2, 28)]
*** center 6: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 80, 16]]
** centroid: 7, normalized-entropy: 0.6500224216483541, [(2, 80), (3, 16)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20486972175784285] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20486972175784285, 0.1517916907384612] ***
*** starting iteration: 2; err: [Inf, 0.20486972175784285, 0.1517916907384612] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20486972175784285, 0.1517916907384612, 0.14676222150008764] ***
*** starting iteration: 3; err: [Inf, 0.20486972175784285, 0.1517916907384612, 0.14676222150008764] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20486972175784285, 0.1517916907384612, 0.14676222150008764, 0.14594693885684346] ***
*** finished computation of 7 references, err: [Inf, 0.20486972175784285, 0.1517916907384612, 0.14676222150008764, 0.14594693885684346] ***
*** center 1: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 91, 22]]
** centroid: 2, normalized-entropy: 0.7111806626974718, [(2, 91), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [42, 47, 0]]
** centroid: 3, normalized-entropy: 0.9977221075331744, [(1, 42), (2, 47)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [52, 45, 0]]
** centroid: 4, normalized-entropy: 0.9962401135461777, [(1, 52), (2, 45)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [27, 97, 0]]
** centroid: 5, normalized-entropy: 0.7560228567532862, [(1, 27), (2, 97)]
*** center 6: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2000978976633545] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2000978976633545, 0.15434842475608843] ***
*** starting iteration: 2; err: [Inf, 0.2000978976633545, 0.15434842475608843] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2000978976633545, 0.15434842475608843, 0.15039549585691914] ***
*** starting iteration: 3; err: [Inf, 0.2000978976633545, 0.15434842475608843, 0.15039549585691914] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2000978976633545, 0.15434842475608843, 0.15039549585691914, 0.14946636148482315] ***
*** finished computation of 7 references, err: [Inf, 0.2000978976633545, 0.15434842475608843, 0.15039549585691914, 0.14946636148482315] ***
*** center 1: selecting labels [1] (freq >= 1) [from [112, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 67, 22]]
** centroid: 2, normalized-entropy: 0.8067955503968327, [(2, 67), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [76, 7, 0]]
** centroid: 3, normalized-entropy: 0.4172806906708316, [(1, 76), (2, 7)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [87, 60, 0]]
** centroid: 4, normalized-entropy: 0.9755259511264975, [(1, 87), (2, 60)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [36, 59, 0]]
** centroid: 5, normalized-entropy: 0.9572951876544017, [(1, 36), (2, 59)]
*** center 6: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 57, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19305544362628255] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19305544362628255, 0.150719050060388] ***
*** starting iteration: 2; err: [Inf, 0.19305544362628255, 0.150719050060388] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19305544362628255, 0.150719050060388, 0.147288978568975] ***
*** starting iteration: 3; err: [Inf, 0.19305544362628255, 0.150719050060388, 0.147288978568975] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19305544362628255, 0.150719050060388, 0.147288978568975, 0.14665374461620084] ***
*** finished computation of 7 references, err: [Inf, 0.19305544362628255, 0.150719050060388, 0.147288978568975, 0.14665374461620084] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 108, 26]]
** centroid: 1, normalized-entropy: 0.709825885194168, [(2, 108), (3, 26)]
*** center 2: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [70, 3, 0]]
** centroid: 3, normalized-entropy: 0.24729443986205674, [(1, 70), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [75, 32, 0]]
** centroid: 4, normalized-entropy: 0.880145474371324, [(1, 75), (2, 32)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [86, 18, 0]]
** centroid: 5, normalized-entropy: 0.6646953053493416, [(1, 86), (2, 18)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [75, 3, 0]]
** centroid: 6, normalized-entropy: 0.23519338181924157, [(1, 75), (2, 3)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [3, 88, 0]]
** centroid: 7, normalized-entropy: 0.20905980566852464, [(1, 3), (2, 88)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.18907451692611157] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18907451692611157, 0.15577260582153496] ***
*** starting iteration: 2; err: [Inf, 0.18907451692611157, 0.15577260582153496] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18907451692611157, 0.15577260582153496, 0.15073947749775032] ***
*** starting iteration: 3; err: [Inf, 0.18907451692611157, 0.15577260582153496, 0.15073947749775032] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18907451692611157, 0.15577260582153496, 0.15073947749775032, 0.14901527246066565] ***
*** starting iteration: 4; err: [Inf, 0.18907451692611157, 0.15577260582153496, 0.15073947749775032, 0.14901527246066565] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18907451692611157, 0.15577260582153496, 0.15073947749775032, 0.14901527246066565, 0.1479890622160882] ***
*** starting iteration: 5; err: [Inf, 0.18907451692611157, 0.15577260582153496, 0.15073947749775032, 0.14901527246066565, 0.1479890622160882] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18907451692611157, 0.15577260582153496, 0.15073947749775032, 0.14901527246066565, 0.1479890622160882, 0.14743885463885573] ***
*** finished computation of 7 references, err: [Inf, 0.18907451692611157, 0.15577260582153496, 0.15073947749775032, 0.14901527246066565, 0.1479890622160882, 0.14743885463885573] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [48, 54, 0]]
** centroid: 1, normalized-entropy: 0.9975025463691153, [(1, 48), (2, 54)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [52, 20, 0]]
** centroid: 2, normalized-entropy: 0.8524051786494784, [(1, 52), (2, 20)]
*** center 3: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 92, 22]]
** centroid: 4, normalized-entropy: 0.7076690004167966, [(2, 92), (3, 22)]
*** center 5: selecting labels [1] (freq >= 1) [from [102, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [5, 114, 0]]
** centroid: 6, normalized-entropy: 0.25146396423889, [(1, 5), (2, 114)]
*** center 7: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 14)
[0.9379918840996685, 0.9270108431785079, 0.91401281521042, 0.9130297962633293, 0.9019738301175426, 0.9010057962153771, 0.8990157822493151, 0.8960307613002224, 0.8800087512662363, 0.8750247253241265, 0.8720037402672133, 0.8620686554818291, 0.7919626213039387, 0.7820335305365246]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.9379918840996685
finished with 15
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.24125187564151804] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24125187564151804, 0.19793379073543055] ***
*** starting iteration: 2; err: [Inf, 0.24125187564151804, 0.19793379073543055] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24125187564151804, 0.19793379073543055, 0.1910883427007465] ***
*** starting iteration: 3; err: [Inf, 0.24125187564151804, 0.19793379073543055, 0.1910883427007465] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24125187564151804, 0.19793379073543055, 0.1910883427007465, 0.18812318243556195] ***
*** finished computation of 7 references, err: [Inf, 0.24125187564151804, 0.19793379073543055, 0.1910883427007465, 0.18812318243556195] ***
*** center 1: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 60, 22]]
** centroid: 2, normalized-entropy: 0.8390040613676978, [(2, 60), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [101, 4, 0]]
** centroid: 3, normalized-entropy: 0.23348971044772968, [(1, 101), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [24, 84, 0]]
** centroid: 4, normalized-entropy: 0.7642045065086204, [(1, 24), (2, 84)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [9, 86, 0]]
** centroid: 5, normalized-entropy: 0.4520861986745138, [(1, 9), (2, 86)]
*** center 6: selecting labels [1] (freq >= 1) [from [116, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [55, 16, 0]]
** centroid: 7, normalized-entropy: 0.7698205808588191, [(1, 55), (2, 16)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23924351767308707] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23924351767308707, 0.19515400253951193] ***
*** starting iteration: 2; err: [Inf, 0.23924351767308707, 0.19515400253951193] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23924351767308707, 0.19515400253951193, 0.19235866960009623] ***
*** starting iteration: 3; err: [Inf, 0.23924351767308707, 0.19515400253951193, 0.19235866960009623] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23924351767308707, 0.19515400253951193, 0.19235866960009623, 0.1916455409532857] ***
*** finished computation of 7 references, err: [Inf, 0.23924351767308707, 0.19515400253951193, 0.19235866960009623, 0.1916455409532857] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [7, 77, 0]]
** centroid: 1, normalized-entropy: 0.4138168503036336, [(1, 7), (2, 77)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [62, 25, 0]]
** centroid: 2, normalized-entropy: 0.8652817028791377, [(1, 62), (2, 25)]
*** center 3: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [41, 72, 0]]
** centroid: 4, normalized-entropy: 0.9450087651303387, [(1, 41), (2, 72)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 78, 26]]
** centroid: 5, normalized-entropy: 0.8112781244591328, [(2, 78), (3, 26)]
*** center 6: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [109, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23582229462788737] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23582229462788737, 0.19604820938225181] ***
*** starting iteration: 2; err: [Inf, 0.23582229462788737, 0.19604820938225181] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23582229462788737, 0.19604820938225181, 0.19137876480538538] ***
*** starting iteration: 3; err: [Inf, 0.23582229462788737, 0.19604820938225181, 0.19137876480538538] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23582229462788737, 0.19604820938225181, 0.19137876480538538, 0.19081979454111034] ***
*** finished computation of 7 references, err: [Inf, 0.23582229462788737, 0.19604820938225181, 0.19137876480538538, 0.19081979454111034] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [40, 80, 0]]
** centroid: 1, normalized-entropy: 0.9182958340544894, [(1, 40), (2, 80)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [65, 15, 0]]
** centroid: 2, normalized-entropy: 0.6962122601251459, [(1, 65), (2, 15)]
*** center 3: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 58, 22]]
** centroid: 4, normalized-entropy: 0.8485481782946159, [(2, 58), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [70, 17, 0]]
** centroid: 5, normalized-entropy: 0.7126368350739763, [(1, 70), (2, 17)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 110, 0]]
** centroid: 6, normalized-entropy: 0.07414948357792069, [(1, 1), (2, 110)]
*** center 7: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 15)
[0.9379918840996685, 0.9270108431785079, 0.9190028351704999, 0.91401281521042, 0.9130297962633293, 0.9019738301175426, 0.9010057962153771, 0.8990157822493151, 0.8960307613002224, 0.8800087512662363, 0.8750247253241265, 0.8720037402672133, 0.8620686554818291, 0.7919626213039387, 0.7820335305365246]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.9379918840996685
finished with 15
iteration 3 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9379918840996685, 0.9270108431785079, 0.9190028351704999, 0.91401281521042, 0.9130297962633293, 0.9019738301175426, 0.9010057962153771, 0.8990157822493151, 0.8960307613002224, 0.8800087512662363, 0.8750247253241265, 0.8720037402672133, 0.8620686554818291, 0.7919626213039387, 0.7820335305365246]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.9379918840996685
finished with 15
iteration 4 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9379918840996685, 0.9270108431785079, 0.9190028351704999, 0.91401281521042, 0.9130297962633293, 0.9019738301175426, 0.9010057962153771, 0.8990157822493151, 0.8960307613002224, 0.8800087512662363, 0.8750247253241265, 0.8720037402672133, 0.8620686554818291, 0.7919626213039387, 0.7820335305365246]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.9379918840996685
finished with 15
iteration 5 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9379918840996685, 0.9270108431785079, 0.9190028351704999, 0.91401281521042, 0.9130297962633293, 0.9019738301175426, 0.9010057962153771, 0.8990157822493151, 0.8960307613002224, 0.8800087512662363, 0.8750247253241265, 0.8720037402672133, 0.8620686554818291, 0.7919626213039387, 0.7820335305365246]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.9379918840996685
finished with 17
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.39452472296277724] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39452472296277724, 0.2974777701492603] ***
*** starting iteration: 2; err: [Inf, 0.39452472296277724, 0.2974777701492603] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39452472296277724, 0.2974777701492603, 0.2930902532908741] ***
*** starting iteration: 3; err: [Inf, 0.39452472296277724, 0.2974777701492603, 0.2930902532908741] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39452472296277724, 0.2974777701492603, 0.2930902532908741, 0.29123450758903324] ***
*** finished computation of 3 references, err: [Inf, 0.39452472296277724, 0.2974777701492603, 0.2930902532908741, 0.29123450758903324] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [248, 29, 0]]
** centroid: 1, normalized-entropy: 0.4836983615919874, [(1, 248), (2, 29)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [146, 34, 0]]
** centroid: 2, normalized-entropy: 0.6991413063352633, [(1, 146), (2, 34)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 187, 22]]
** centroid: 3, normalized-entropy: 0.48546076074591343, [(2, 187), (3, 22)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.420111612871993] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.420111612871993, 0.30729591345478746] ***
*** starting iteration: 2; err: [Inf, 0.420111612871993, 0.30729591345478746] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.420111612871993, 0.30729591345478746, 0.2977840560446514] ***
*** starting iteration: 3; err: [Inf, 0.420111612871993, 0.30729591345478746, 0.2977840560446514] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.420111612871993, 0.30729591345478746, 0.2977840560446514, 0.296242607634576] ***
*** finished computation of 3 references, err: [Inf, 0.420111612871993, 0.30729591345478746, 0.2977840560446514, 0.296242607634576] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [92, 161, 26]]
** centroid: 1, normalized-entropy: 0.8230876550636234, [(1, 92), (2, 161), (3, 26)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [101, 91, 0]]
** centroid: 2, normalized-entropy: 0.9980423339710904, [(1, 101), (2, 91)]
*** center 3: selecting labels [1] (freq >= 2) [from [196, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3874619603150062] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3874619603150062, 0.31061432739570344] ***
*** starting iteration: 2; err: [Inf, 0.3874619603150062, 0.31061432739570344] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3874619603150062, 0.31061432739570344, 0.29493910660115497] ***
*** starting iteration: 3; err: [Inf, 0.3874619603150062, 0.31061432739570344, 0.29493910660115497] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3874619603150062, 0.31061432739570344, 0.29493910660115497, 0.2910684242933944] ***
*** finished computation of 3 references, err: [Inf, 0.3874619603150062, 0.31061432739570344, 0.29493910660115497, 0.2910684242933944] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [76, 186, 22]]
** centroid: 1, normalized-entropy: 0.7537714576646115, [(1, 76), (2, 186), (3, 22)]
*** center 2: selecting labels [1] (freq >= 2) [from [183, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [106, 94, 0]]
** centroid: 3, normalized-entropy: 0.9974015885677396, [(1, 106), (2, 94)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.30462051090692077] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30462051090692077, 0.24238894393810215] ***
*** starting iteration: 2; err: [Inf, 0.30462051090692077, 0.24238894393810215] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30462051090692077, 0.24238894393810215, 0.22924786358973845] ***
*** starting iteration: 3; err: [Inf, 0.30462051090692077, 0.24238894393810215, 0.22924786358973845] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30462051090692077, 0.24238894393810215, 0.22924786358973845, 0.22739012192587954] ***
*** finished computation of 3 references, err: [Inf, 0.30462051090692077, 0.24238894393810215, 0.22924786358973845, 0.22739012192587954] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [74, 158, 22]]
** centroid: 1, normalized-entropy: 0.7887156162183798, [(1, 74), (2, 158), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [127, 92, 0]]
** centroid: 2, normalized-entropy: 0.981496396691081, [(1, 127), (2, 92)]
*** center 3: selecting labels [1] (freq >= 2) [from [193, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.32046705819498833] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32046705819498833, 0.24642342724278848] ***
*** starting iteration: 2; err: [Inf, 0.32046705819498833, 0.24642342724278848] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32046705819498833, 0.24642342724278848, 0.23689313309135912] ***
*** starting iteration: 3; err: [Inf, 0.32046705819498833, 0.24642342724278848, 0.23689313309135912] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32046705819498833, 0.24642342724278848, 0.23689313309135912, 0.23515287421733097] ***
*** finished computation of 3 references, err: [Inf, 0.32046705819498833, 0.24642342724278848, 0.23689313309135912, 0.23515287421733097] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [87, 162, 26]]
** centroid: 1, normalized-entropy: 0.8181459524023403, [(1, 87), (2, 162), (3, 26)]
*** center 2: selecting labels [1] (freq >= 2) [from [182, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [120, 90, 0]]
** centroid: 3, normalized-entropy: 0.9852281360342514, [(1, 120), (2, 90)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3384719726809676] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3384719726809676, 0.23706124588285854] ***
*** starting iteration: 2; err: [Inf, 0.3384719726809676, 0.23706124588285854] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3384719726809676, 0.23706124588285854, 0.23190449408256913] ***
*** starting iteration: 3; err: [Inf, 0.3384719726809676, 0.23706124588285854, 0.23190449408256913] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3384719726809676, 0.23706124588285854, 0.23190449408256913, 0.23098777019247033] ***
*** finished computation of 3 references, err: [Inf, 0.3384719726809676, 0.23706124588285854, 0.23190449408256913, 0.23098777019247033] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [67, 158, 22]]
** centroid: 1, normalized-entropy: 0.7783524335419686, [(1, 67), (2, 158), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [93, 122, 0]]
** centroid: 2, normalized-entropy: 0.9868359909116974, [(1, 93), (2, 122)]
*** center 3: selecting labels [1] (freq >= 2) [from [205, 0, 0]]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 17)
[0.9379918840996685, 0.9270108431785079, 0.9190028351704999, 0.91401281521042, 0.9130297962633293, 0.9070147992303682, 0.9019738301175426, 0.9010057962153771, 0.8990157822493151, 0.8960307613002224, 0.8800087512662363, 0.8750247253241265, 0.8720037402672133, 0.8680626734518949, 0.8620686554818291, 0.7919626213039387, 0.7820335305365246]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.9379918840996685
finished with 18
iteration 7 finished
*** starting iteration: 1; err: [Inf, 0.3640265676162175] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3640265676162175, 0.3050605130281199] ***
*** starting iteration: 2; err: [Inf, 0.3640265676162175, 0.3050605130281199] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3640265676162175, 0.3050605130281199, 0.29711338551854855] ***
*** starting iteration: 3; err: [Inf, 0.3640265676162175, 0.3050605130281199, 0.29711338551854855] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3640265676162175, 0.3050605130281199, 0.29711338551854855, 0.2948008889763115] ***
*** finished computation of 3 references, err: [Inf, 0.3640265676162175, 0.3050605130281199, 0.29711338551854855, 0.2948008889763115] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [130, 68, 0]]
** centroid: 1, normalized-entropy: 0.9280672822072753, [(1, 130), (2, 68)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [252, 2, 0]]
** centroid: 2, normalized-entropy: 0.06634397526831168, [(1, 252), (2, 2)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [12, 180, 22]]
** centroid: 3, normalized-entropy: 0.49240037609851955, [(1, 12), (2, 180), (3, 22)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.37236417054981996] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37236417054981996, 0.3114885898318136] ***
*** starting iteration: 2; err: [Inf, 0.37236417054981996, 0.3114885898318136] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37236417054981996, 0.3114885898318136, 0.3000527752487958] ***
*** starting iteration: 3; err: [Inf, 0.37236417054981996, 0.3114885898318136, 0.3000527752487958] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37236417054981996, 0.3114885898318136, 0.3000527752487958, 0.2958225229813688] ***
*** finished computation of 3 references, err: [Inf, 0.37236417054981996, 0.3114885898318136, 0.3000527752487958, 0.2958225229813688] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [113, 123, 0]]
** centroid: 1, normalized-entropy: 0.9987044607616604, [(1, 113), (2, 123)]
*** center 2: selecting labels [1] (freq >= 2) [from [195, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [81, 129, 26]]
** centroid: 3, normalized-entropy: 0.8558085188317672, [(1, 81), (2, 129), (3, 26)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.31933510520899] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31933510520899, 0.29841859731962833] ***
*** starting iteration: 2; err: [Inf, 0.31933510520899, 0.29841859731962833] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31933510520899, 0.29841859731962833, 0.29699745069982586] ***
*** starting iteration: 3; err: [Inf, 0.31933510520899, 0.29841859731962833, 0.29699745069982586] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31933510520899, 0.29841859731962833, 0.29699745069982586, 0.29580810192184914] ***
*** finished computation of 3 references, err: [Inf, 0.31933510520899, 0.29841859731962833, 0.29699745069982586, 0.29580810192184914] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [128, 75, 0]]
** centroid: 1, normalized-entropy: 0.9502551202039395, [(1, 128), (2, 75)]
*** center 2: selecting labels [1] (freq >= 2) [from [230, 1, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [7, 204, 22]]
** centroid: 3, normalized-entropy: 0.40461178999842096, [(1, 7), (2, 204), (3, 22)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 18)
[0.9379918840996685, 0.9270108431785079, 0.9190028351704999, 0.91401281521042, 0.9130297962633293, 0.9070147992303682, 0.9019738301175426, 0.9010057962153771, 0.8990157822493151, 0.8960307613002224, 0.8850167532802263, 0.8800087512662363, 0.8750247253241265, 0.8720037402672133, 0.8680626734518949, 0.8620686554818291, 0.7919626213039387, 0.7820335305365246]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.9379918840996685
finished with 19
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.2218607457077785] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2218607457077785, 0.15386052910859385] ***
*** starting iteration: 2; err: [Inf, 0.2218607457077785, 0.15386052910859385] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2218607457077785, 0.15386052910859385, 0.14633798199096085] ***
*** starting iteration: 3; err: [Inf, 0.2218607457077785, 0.15386052910859385, 0.14633798199096085] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2218607457077785, 0.15386052910859385, 0.14633798199096085, 0.1454582332406898] ***
*** finished computation of 7 references, err: [Inf, 0.2218607457077785, 0.15386052910859385, 0.14633798199096085, 0.1454582332406898] ***
*** center 1: selecting labels [1] (freq >= 2) [from [104, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 62, 22]]
** centroid: 2, normalized-entropy: 0.8296071030882032, [(2, 62), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [109, 6, 0]]
** centroid: 3, normalized-entropy: 0.295560777857315, [(1, 109), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [55, 56, 0]]
** centroid: 4, normalized-entropy: 0.999941453025042, [(1, 55), (2, 56)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [37, 52, 0]]
** centroid: 5, normalized-entropy: 0.9794116346561961, [(1, 37), (2, 52)]
*** center 6: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 74, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19957147570916156] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19957147570916156, 0.15661658283471055] ***
*** starting iteration: 2; err: [Inf, 0.19957147570916156, 0.15661658283471055] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19957147570916156, 0.15661658283471055, 0.14931284784963508] ***
*** starting iteration: 3; err: [Inf, 0.19957147570916156, 0.15661658283471055, 0.14931284784963508] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19957147570916156, 0.15661658283471055, 0.14931284784963508, 0.1481086948467279] ***
*** starting iteration: 4; err: [Inf, 0.19957147570916156, 0.15661658283471055, 0.14931284784963508, 0.1481086948467279] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19957147570916156, 0.15661658283471055, 0.14931284784963508, 0.1481086948467279, 0.14770178355254243] ***
*** finished computation of 7 references, err: [Inf, 0.19957147570916156, 0.15661658283471055, 0.14931284784963508, 0.1481086948467279, 0.14770178355254243] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [47, 42, 0]]
** centroid: 1, normalized-entropy: 0.9977221075331744, [(1, 47), (2, 42)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [63, 13, 0]]
** centroid: 2, normalized-entropy: 0.6601070987550468, [(1, 63), (2, 13)]
*** center 3: selecting labels [1] (freq >= 2) [from [104, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 85, 26]]
** centroid: 4, normalized-entropy: 0.7853198101035018, [(2, 85), (3, 26)]
*** center 5: selecting labels [1] (freq >= 2) [from [94, 1, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [2, 93, 0]]
** centroid: 6, normalized-entropy: 0.14731066693045392, [(1, 2), (2, 93)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [79, 18, 0]]
** centroid: 7, normalized-entropy: 0.6921053253628727, [(1, 79), (2, 18)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20242134128268557] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20242134128268557, 0.15310296603062049] ***
*** starting iteration: 2; err: [Inf, 0.20242134128268557, 0.15310296603062049] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20242134128268557, 0.15310296603062049, 0.1493010687501473] ***
*** starting iteration: 3; err: [Inf, 0.20242134128268557, 0.15310296603062049, 0.1493010687501473] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20242134128268557, 0.15310296603062049, 0.1493010687501473, 0.14826755901408345] ***
*** starting iteration: 4; err: [Inf, 0.20242134128268557, 0.15310296603062049, 0.1493010687501473, 0.14826755901408345] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20242134128268557, 0.15310296603062049, 0.1493010687501473, 0.14826755901408345, 0.14787056548465072] ***
*** finished computation of 7 references, err: [Inf, 0.20242134128268557, 0.15310296603062049, 0.1493010687501473, 0.14826755901408345, 0.14787056548465072] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [56, 23, 0]]
** centroid: 1, normalized-entropy: 0.8701883352082787, [(1, 56), (2, 23)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [88, 30, 0]]
** centroid: 2, normalized-entropy: 0.8179252501386403, [(1, 88), (2, 30)]
*** center 3: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 94, 22]]
** centroid: 4, normalized-entropy: 0.7007495497162061, [(2, 94), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [49, 45, 0]]
** centroid: 5, normalized-entropy: 0.998693408098057, [(1, 49), (2, 45)]
*** center 6: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 88, 0]]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 19)
[0.9449839060617503, 0.9379918840996685, 0.9270108431785079, 0.9190028351704999, 0.91401281521042, 0.9130297962633293, 0.9070147992303682, 0.9019738301175426, 0.9010057962153771, 0.8990157822493151, 0.8960307613002224, 0.8850167532802263, 0.8800087512662363, 0.8750247253241265, 0.8720037402672133, 0.8680626734518949, 0.8620686554818291, 0.7919626213039387, 0.7820335305365246]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9449839060617503
finished with 19
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.18639178418018856] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18639178418018856, 0.1549277028692886] ***
*** starting iteration: 2; err: [Inf, 0.18639178418018856, 0.1549277028692886] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18639178418018856, 0.1549277028692886, 0.1496769956452772] ***
*** starting iteration: 3; err: [Inf, 0.18639178418018856, 0.1549277028692886, 0.1496769956452772] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18639178418018856, 0.1549277028692886, 0.1496769956452772, 0.14821637801313772] ***
*** starting iteration: 4; err: [Inf, 0.18639178418018856, 0.1549277028692886, 0.1496769956452772, 0.14821637801313772] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18639178418018856, 0.1549277028692886, 0.1496769956452772, 0.14821637801313772, 0.14767767575988547] ***
*** finished computation of 7 references, err: [Inf, 0.18639178418018856, 0.1549277028692886, 0.1496769956452772, 0.14821637801313772, 0.14767767575988547] ***
*** center 1: selecting labels [1] (freq >= 2) [from [187, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 80, 35]]
** centroid: 2, normalized-entropy: 0.8865408928220899, [(2, 80), (3, 35)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [155, 14, 0]]
** centroid: 3, normalized-entropy: 0.4121087160081413, [(1, 155), (2, 14)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [73, 25, 0]]
** centroid: 4, normalized-entropy: 0.8192649712314392, [(1, 73), (2, 25)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [15, 138, 0]]
** centroid: 5, normalized-entropy: 0.462749058578174, [(1, 15), (2, 138)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [12, 134, 0]]
** centroid: 6, normalized-entropy: 0.4098553703184051, [(1, 12), (2, 134)]
*** center 7: selecting labels [1] (freq >= 2) [from [132, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19053263717703522] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19053263717703522, 0.15509403044171632] ***
*** starting iteration: 2; err: [Inf, 0.19053263717703522, 0.15509403044171632] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19053263717703522, 0.15509403044171632, 0.15130861155875028] ***
*** starting iteration: 3; err: [Inf, 0.19053263717703522, 0.15509403044171632, 0.15130861155875028] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19053263717703522, 0.15509403044171632, 0.15130861155875028, 0.14999443780817093] ***
*** starting iteration: 4; err: [Inf, 0.19053263717703522, 0.15509403044171632, 0.15130861155875028, 0.14999443780817093] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19053263717703522, 0.15509403044171632, 0.15130861155875028, 0.14999443780817093, 0.14953025426436214] ***
*** finished computation of 7 references, err: [Inf, 0.19053263717703522, 0.15509403044171632, 0.15130861155875028, 0.14999443780817093, 0.14953025426436214] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 71, 6]]
** centroid: 1, normalized-entropy: 0.39481484603049416, [(2, 71), (3, 6)]
*** center 2: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [33, 22, 0]]
** centroid: 3, normalized-entropy: 0.9709505944546688, [(1, 33), (2, 22)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [85, 18, 0]]
** centroid: 4, normalized-entropy: 0.6684725699243225, [(1, 85), (2, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [57, 30, 0]]
** centroid: 5, normalized-entropy: 0.9293636260137188, [(1, 57), (2, 30)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 50, 9]]
** centroid: 6, normalized-entropy: 0.6161661934005354, [(2, 50), (3, 9)]
*** center 7: selecting labels [1] (freq >= 2) [from [45, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2004532861309126] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2004532861309126, 0.16041686851158737] ***
*** starting iteration: 2; err: [Inf, 0.2004532861309126, 0.16041686851158737] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2004532861309126, 0.16041686851158737, 0.15553260384127499] ***
*** starting iteration: 3; err: [Inf, 0.2004532861309126, 0.16041686851158737, 0.15553260384127499] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2004532861309126, 0.16041686851158737, 0.15553260384127499, 0.15300148139242084] ***
*** starting iteration: 4; err: [Inf, 0.2004532861309126, 0.16041686851158737, 0.15553260384127499, 0.15300148139242084] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2004532861309126, 0.16041686851158737, 0.15553260384127499, 0.15300148139242084, 0.15109048369526862] ***
*** starting iteration: 5; err: [Inf, 0.2004532861309126, 0.16041686851158737, 0.15553260384127499, 0.15300148139242084, 0.15109048369526862] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2004532861309126, 0.16041686851158737, 0.15553260384127499, 0.15300148139242084, 0.15109048369526862, 0.15012085100635886] ***
*** finished computation of 7 references, err: [Inf, 0.2004532861309126, 0.16041686851158737, 0.15553260384127499, 0.15300148139242084, 0.15109048369526862, 0.15012085100635886] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [3, 83, 0]]
** centroid: 1, normalized-entropy: 0.21832103023746746, [(1, 3), (2, 83)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [47, 21, 0]]
** centroid: 2, normalized-entropy: 0.8918107543797084, [(1, 47), (2, 21)]
*** center 3: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 72, 18]]
** centroid: 4, normalized-entropy: 0.7219280948873623, [(2, 72), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [62, 10, 0]]
** centroid: 5, normalized-entropy: 0.581321498763703, [(1, 62), (2, 10)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [39, 15, 0]]
** centroid: 6, normalized-entropy: 0.8524051786494784, [(1, 39), (2, 15)]
*** center 7: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19277149814239236] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19277149814239236, 0.153848646862898] ***
*** starting iteration: 2; err: [Inf, 0.19277149814239236, 0.153848646862898] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19277149814239236, 0.153848646862898, 0.14853415325563402] ***
*** starting iteration: 3; err: [Inf, 0.19277149814239236, 0.153848646862898, 0.14853415325563402] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19277149814239236, 0.153848646862898, 0.14853415325563402, 0.14623811330460013] ***
*** starting iteration: 4; err: [Inf, 0.19277149814239236, 0.153848646862898, 0.14853415325563402, 0.14623811330460013] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19277149814239236, 0.153848646862898, 0.14853415325563402, 0.14623811330460013, 0.14505115014873446] ***
*** starting iteration: 5; err: [Inf, 0.19277149814239236, 0.153848646862898, 0.14853415325563402, 0.14623811330460013, 0.14505115014873446] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19277149814239236, 0.153848646862898, 0.14853415325563402, 0.14623811330460013, 0.14505115014873446, 0.14461330324690788] ***
*** finished computation of 7 references, err: [Inf, 0.19277149814239236, 0.153848646862898, 0.14853415325563402, 0.14623811330460013, 0.14505115014873446, 0.14461330324690788] ***
*** center 1: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [68, 8, 0]]
** centroid: 2, normalized-entropy: 0.48546076074591343, [(1, 68), (2, 8)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 63, 16]]
** centroid: 3, normalized-entropy: 0.7269625813353975, [(2, 63), (3, 16)]
*** center 4: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [40, 34, 0]]
** centroid: 5, normalized-entropy: 0.9952525494396791, [(1, 40), (2, 34)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [43, 33, 0]]
** centroid: 6, normalized-entropy: 0.9874750082985965, [(1, 43), (2, 33)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 57, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19138188737817108] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19138188737817108, 0.15150208878424018] ***
*** starting iteration: 2; err: [Inf, 0.19138188737817108, 0.15150208878424018] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19138188737817108, 0.15150208878424018, 0.14729277239926158] ***
*** starting iteration: 3; err: [Inf, 0.19138188737817108, 0.15150208878424018, 0.14729277239926158] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19138188737817108, 0.15150208878424018, 0.14729277239926158, 0.14606738694105298] ***
*** starting iteration: 4; err: [Inf, 0.19138188737817108, 0.15150208878424018, 0.14729277239926158, 0.14606738694105298] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19138188737817108, 0.15150208878424018, 0.14729277239926158, 0.14606738694105298, 0.14544216438848526] ***
*** finished computation of 7 references, err: [Inf, 0.19138188737817108, 0.15150208878424018, 0.14729277239926158, 0.14606738694105298, 0.14544216438848526] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [21, 50, 0]]
** centroid: 1, normalized-entropy: 0.8760643678555242, [(1, 21), (2, 50)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [51, 25, 0]]
** centroid: 2, normalized-entropy: 0.9138472873262908, [(1, 51), (2, 25)]
*** center 3: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 71, 15]]
** centroid: 4, normalized-entropy: 0.6677135405281421, [(2, 71), (3, 15)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [34, 43, 0]]
** centroid: 5, normalized-entropy: 0.9901226308935799, [(1, 34), (2, 43)]
*** center 6: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19152116322144866] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19152116322144866, 0.15045495965331793] ***
*** starting iteration: 2; err: [Inf, 0.19152116322144866, 0.15045495965331793] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19152116322144866, 0.15045495965331793, 0.1447834620345384] ***
*** starting iteration: 3; err: [Inf, 0.19152116322144866, 0.15045495965331793, 0.1447834620345384] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19152116322144866, 0.15045495965331793, 0.1447834620345384, 0.14301823541428893] ***
*** starting iteration: 4; err: [Inf, 0.19152116322144866, 0.15045495965331793, 0.1447834620345384, 0.14301823541428893] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19152116322144866, 0.15045495965331793, 0.1447834620345384, 0.14301823541428893, 0.14232131914980709] ***
*** finished computation of 7 references, err: [Inf, 0.19152116322144866, 0.15045495965331793, 0.1447834620345384, 0.14301823541428893, 0.14232131914980709] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [40, 40, 0]]
** centroid: 1, normalized-entropy: 1.0, [(1, 40), (2, 40)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [48, 20, 0]]
** centroid: 2, normalized-entropy: 0.8739810481273581, [(1, 48), (2, 20)]
*** center 3: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 71, 22]]
** centroid: 4, normalized-entropy: 0.7892712724536985, [(2, 71), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [16, 64, 0]]
** centroid: 5, normalized-entropy: 0.7219280948873623, [(1, 16), (2, 64)]
*** center 6: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18873894354328513] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18873894354328513, 0.15481765098357572] ***
*** starting iteration: 2; err: [Inf, 0.18873894354328513, 0.15481765098357572] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18873894354328513, 0.15481765098357572, 0.14873040568456053] ***
*** starting iteration: 3; err: [Inf, 0.18873894354328513, 0.15481765098357572, 0.14873040568456053] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18873894354328513, 0.15481765098357572, 0.14873040568456053, 0.1473156748339534] ***
*** starting iteration: 4; err: [Inf, 0.18873894354328513, 0.15481765098357572, 0.14873040568456053, 0.1473156748339534] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18873894354328513, 0.15481765098357572, 0.14873040568456053, 0.1473156748339534, 0.14676677221618592] ***
*** finished computation of 7 references, err: [Inf, 0.18873894354328513, 0.15481765098357572, 0.14873040568456053, 0.1473156748339534, 0.14676677221618592] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [71, 6, 0]]
** centroid: 1, normalized-entropy: 0.39481484603049416, [(1, 71), (2, 6)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [48, 8, 0]]
** centroid: 2, normalized-entropy: 0.5916727785823274, [(1, 48), (2, 8)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 40, 19]]
** centroid: 3, normalized-entropy: 0.9065795484987461, [(2, 40), (3, 19)]
*** center 4: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [45, 35, 0]]
** centroid: 5, normalized-entropy: 0.9886994082884974, [(1, 45), (2, 35)]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 90, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.191850401584059] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.191850401584059, 0.15472560727922247] ***
*** starting iteration: 2; err: [Inf, 0.191850401584059, 0.15472560727922247] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.191850401584059, 0.15472560727922247, 0.15057333200238646] ***
*** starting iteration: 3; err: [Inf, 0.191850401584059, 0.15472560727922247, 0.15057333200238646] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.191850401584059, 0.15472560727922247, 0.15057333200238646, 0.148655981130898] ***
*** starting iteration: 4; err: [Inf, 0.191850401584059, 0.15472560727922247, 0.15057333200238646, 0.148655981130898] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.191850401584059, 0.15472560727922247, 0.15057333200238646, 0.148655981130898, 0.14746811475604774] ***
*** starting iteration: 5; err: [Inf, 0.191850401584059, 0.15472560727922247, 0.15057333200238646, 0.148655981130898, 0.14746811475604774] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.191850401584059, 0.15472560727922247, 0.15057333200238646, 0.148655981130898, 0.14746811475604774, 0.14692482217215003] ***
*** finished computation of 7 references, err: [Inf, 0.191850401584059, 0.15472560727922247, 0.15057333200238646, 0.148655981130898, 0.14746811475604774, 0.14692482217215003] ***
*** center 1: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 50, 14]]
** centroid: 2, normalized-entropy: 0.7578784625383954, [(2, 50), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [40, 10, 0]]
** centroid: 3, normalized-entropy: 0.7219280948873623, [(1, 40), (2, 10)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [77, 19, 0]]
** centroid: 4, normalized-entropy: 0.7177418091697444, [(1, 77), (2, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [21, 46, 0]]
** centroid: 5, normalized-entropy: 0.8970964164730478, [(1, 21), (2, 46)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 63, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [77, 1, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1941561394818127] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1941561394818127, 0.15557435670681297] ***
*** starting iteration: 2; err: [Inf, 0.1941561394818127, 0.15557435670681297] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1941561394818127, 0.15557435670681297, 0.15010700038075447] ***
*** starting iteration: 3; err: [Inf, 0.1941561394818127, 0.15557435670681297, 0.15010700038075447] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1941561394818127, 0.15557435670681297, 0.15010700038075447, 0.14851859096251427] ***
*** starting iteration: 4; err: [Inf, 0.1941561394818127, 0.15557435670681297, 0.15010700038075447, 0.14851859096251427] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1941561394818127, 0.15557435670681297, 0.15010700038075447, 0.14851859096251427, 0.14721822486445307] ***
*** starting iteration: 5; err: [Inf, 0.1941561394818127, 0.15557435670681297, 0.15010700038075447, 0.14851859096251427, 0.14721822486445307] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1941561394818127, 0.15557435670681297, 0.15010700038075447, 0.14851859096251427, 0.14721822486445307, 0.14646632095240056] ***
*** finished computation of 7 references, err: [Inf, 0.1941561394818127, 0.15557435670681297, 0.15010700038075447, 0.14851859096251427, 0.14721822486445307, 0.14646632095240056] ***
*** center 1: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 45, 14]]
** centroid: 3, normalized-entropy: 0.7905013842153699, [(2, 45), (3, 14)]
*** center 4: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [28, 48, 0]]
** centroid: 5, normalized-entropy: 0.9494520153879484, [(1, 28), (2, 48)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [13, 55, 0]]
** centroid: 6, normalized-entropy: 0.7039260680195971, [(1, 13), (2, 55)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [11, 48, 0]]
** centroid: 7, normalized-entropy: 0.693965967334286, [(1, 11), (2, 48)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19258015163894743] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19258015163894743, 0.15066387398308143] ***
*** starting iteration: 2; err: [Inf, 0.19258015163894743, 0.15066387398308143] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19258015163894743, 0.15066387398308143, 0.14568543789349497] ***
*** starting iteration: 3; err: [Inf, 0.19258015163894743, 0.15066387398308143, 0.14568543789349497] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19258015163894743, 0.15066387398308143, 0.14568543789349497, 0.14498005651962012] ***
*** finished computation of 7 references, err: [Inf, 0.19258015163894743, 0.15066387398308143, 0.14568543789349497, 0.14498005651962012] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 80, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [52, 22, 0]]
** centroid: 2, normalized-entropy: 0.8779620013943914, [(1, 52), (2, 22)]
*** center 3: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 64, 18]]
** centroid: 4, normalized-entropy: 0.7592757847892834, [(2, 64), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [51, 28, 0]]
** centroid: 5, normalized-entropy: 0.9379626436434424, [(1, 51), (2, 28)]
*** center 6: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [38, 13, 0]]
** centroid: 7, normalized-entropy: 0.8189555018403103, [(1, 38), (2, 13)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19079838493093848] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19079838493093848, 0.15369558402244002] ***
*** starting iteration: 2; err: [Inf, 0.19079838493093848, 0.15369558402244002] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19079838493093848, 0.15369558402244002, 0.150079704022035] ***
*** starting iteration: 3; err: [Inf, 0.19079838493093848, 0.15369558402244002, 0.150079704022035] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19079838493093848, 0.15369558402244002, 0.150079704022035, 0.14861599319335073] ***
*** starting iteration: 4; err: [Inf, 0.19079838493093848, 0.15369558402244002, 0.150079704022035, 0.14861599319335073] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19079838493093848, 0.15369558402244002, 0.150079704022035, 0.14861599319335073, 0.14733917539427058] ***
*** starting iteration: 5; err: [Inf, 0.19079838493093848, 0.15369558402244002, 0.150079704022035, 0.14861599319335073, 0.14733917539427058] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19079838493093848, 0.15369558402244002, 0.150079704022035, 0.14861599319335073, 0.14733917539427058, 0.1467552415789105] ***
*** finished computation of 7 references, err: [Inf, 0.19079838493093848, 0.15369558402244002, 0.150079704022035, 0.14861599319335073, 0.14733917539427058, 0.1467552415789105] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [39, 45, 0]]
** centroid: 1, normalized-entropy: 0.9963165195589622, [(1, 39), (2, 45)]
*** center 2: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 58, 18]]
** centroid: 4, normalized-entropy: 0.7897492536625221, [(2, 58), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [61, 17, 0]]
** centroid: 5, normalized-entropy: 0.7564041945982506, [(1, 61), (2, 17)]
*** center 6: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 66, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19257463159039617] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19257463159039617, 0.160394597902894] ***
*** starting iteration: 2; err: [Inf, 0.19257463159039617, 0.160394597902894] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19257463159039617, 0.160394597902894, 0.1519661602145061] ***
*** starting iteration: 3; err: [Inf, 0.19257463159039617, 0.160394597902894, 0.1519661602145061] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19257463159039617, 0.160394597902894, 0.1519661602145061, 0.15023930867668242] ***
*** starting iteration: 4; err: [Inf, 0.19257463159039617, 0.160394597902894, 0.1519661602145061, 0.15023930867668242] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19257463159039617, 0.160394597902894, 0.1519661602145061, 0.15023930867668242, 0.14921848685108124] ***
*** starting iteration: 5; err: [Inf, 0.19257463159039617, 0.160394597902894, 0.1519661602145061, 0.15023930867668242, 0.14921848685108124] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19257463159039617, 0.160394597902894, 0.1519661602145061, 0.15023930867668242, 0.14921848685108124, 0.14880006661824882] ***
*** finished computation of 7 references, err: [Inf, 0.19257463159039617, 0.160394597902894, 0.1519661602145061, 0.15023930867668242, 0.14921848685108124, 0.14880006661824882] ***
*** center 1: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [50, 7, 0]]
** centroid: 2, normalized-entropy: 0.5373760853377334, [(1, 50), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 42, 13]]
** centroid: 3, normalized-entropy: 0.7889406572966208, [(2, 42), (3, 13)]
*** center 4: selecting labels [2] (freq >= 2) [from [1, 75, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [29, 58, 0]]
** centroid: 6, normalized-entropy: 0.9182958340544894, [(1, 29), (2, 58)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [56, 12, 0]]
** centroid: 7, normalized-entropy: 0.6722948170756378, [(1, 56), (2, 12)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18467224013060332] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18467224013060332, 0.15868066779896617] ***
*** starting iteration: 2; err: [Inf, 0.18467224013060332, 0.15868066779896617] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18467224013060332, 0.15868066779896617, 0.15262388637289404] ***
*** starting iteration: 3; err: [Inf, 0.18467224013060332, 0.15868066779896617, 0.15262388637289404] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18467224013060332, 0.15868066779896617, 0.15262388637289404, 0.15158581151999534] ***
*** starting iteration: 4; err: [Inf, 0.18467224013060332, 0.15868066779896617, 0.15262388637289404, 0.15158581151999534] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18467224013060332, 0.15868066779896617, 0.15262388637289404, 0.15158581151999534, 0.15081180214881898] ***
*** finished computation of 7 references, err: [Inf, 0.18467224013060332, 0.15868066779896617, 0.15262388637289404, 0.15158581151999534, 0.15081180214881898] ***
*** center 1: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 44, 19]]
** centroid: 2, normalized-entropy: 0.8832225588099292, [(2, 44), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [42, 9, 0]]
** centroid: 3, normalized-entropy: 0.6722948170756378, [(1, 42), (2, 9)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [68, 4, 0]]
** centroid: 4, normalized-entropy: 0.3095434291503252, [(1, 68), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [7, 73, 0]]
** centroid: 5, normalized-entropy: 0.4280696292293062, [(1, 7), (2, 73)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [11, 80, 0]]
** centroid: 6, normalized-entropy: 0.5318826028800231, [(1, 11), (2, 80)]
*** center 7: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19326415146142245] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19326415146142245, 0.15407586386799813] ***
*** starting iteration: 2; err: [Inf, 0.19326415146142245, 0.15407586386799813] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19326415146142245, 0.15407586386799813, 0.1481642892230302] ***
*** starting iteration: 3; err: [Inf, 0.19326415146142245, 0.15407586386799813, 0.1481642892230302] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19326415146142245, 0.15407586386799813, 0.1481642892230302, 0.1467315138587728] ***
*** starting iteration: 4; err: [Inf, 0.19326415146142245, 0.15407586386799813, 0.1481642892230302, 0.1467315138587728] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19326415146142245, 0.15407586386799813, 0.1481642892230302, 0.1467315138587728, 0.14607944966480135] ***
*** finished computation of 7 references, err: [Inf, 0.19326415146142245, 0.15407586386799813, 0.1481642892230302, 0.1467315138587728, 0.14607944966480135] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [87, 3, 0]]
** centroid: 1, normalized-entropy: 0.2108423003185322, [(1, 87), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [57, 16, 0]]
** centroid: 2, normalized-entropy: 0.7586638628883696, [(1, 57), (2, 16)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 36, 15]]
** centroid: 3, normalized-entropy: 0.8739810481273581, [(2, 36), (3, 15)]
*** center 4: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [3, 66, 0]]
** centroid: 5, normalized-entropy: 0.2580186686648155, [(1, 3), (2, 66)]
*** center 6: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 73, 0]]
** centroid: 7, normalized-entropy: 0.1773894531859976, [(1, 2), (2, 73)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1958246448878199] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1958246448878199, 0.1518918768996373] ***
*** starting iteration: 2; err: [Inf, 0.1958246448878199, 0.1518918768996373] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1958246448878199, 0.1518918768996373, 0.14813149534445255] ***
*** starting iteration: 3; err: [Inf, 0.1958246448878199, 0.1518918768996373, 0.14813149534445255] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1958246448878199, 0.1518918768996373, 0.14813149534445255, 0.14786477340757848] ***
*** finished computation of 7 references, err: [Inf, 0.1958246448878199, 0.1518918768996373, 0.14813149534445255, 0.14786477340757848] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [37, 32, 0]]
** centroid: 1, normalized-entropy: 0.9962088839046743, [(1, 37), (2, 32)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [56, 19, 0]]
** centroid: 2, normalized-entropy: 0.8165187119538281, [(1, 56), (2, 19)]
*** center 3: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 68, 18]]
** centroid: 4, normalized-entropy: 0.7401470427139037, [(2, 68), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [53, 28, 0]]
** centroid: 5, normalized-entropy: 0.9301497323974339, [(1, 53), (2, 28)]
*** center 6: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 59, 1]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2031534522473812] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2031534522473812, 0.1550263149505481] ***
*** starting iteration: 2; err: [Inf, 0.2031534522473812, 0.1550263149505481] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2031534522473812, 0.1550263149505481, 0.1472710103597492] ***
*** starting iteration: 3; err: [Inf, 0.2031534522473812, 0.1550263149505481, 0.1472710103597492] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2031534522473812, 0.1550263149505481, 0.1472710103597492, 0.14575212972890586] ***
*** starting iteration: 4; err: [Inf, 0.2031534522473812, 0.1550263149505481, 0.1472710103597492, 0.14575212972890586] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2031534522473812, 0.1550263149505481, 0.1472710103597492, 0.14575212972890586, 0.14493380712438375] ***
*** finished computation of 7 references, err: [Inf, 0.2031534522473812, 0.1550263149505481, 0.1472710103597492, 0.14575212972890586, 0.14493380712438375] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [5, 65, 0]]
** centroid: 1, normalized-entropy: 0.3712323266408756, [(1, 5), (2, 65)]
*** center 2: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [33, 72, 0]]
** centroid: 3, normalized-entropy: 0.8980587934501658, [(1, 33), (2, 72)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [50, 17, 0]]
** centroid: 4, normalized-entropy: 0.8171387756817725, [(1, 50), (2, 17)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 49, 18]]
** centroid: 5, normalized-entropy: 0.8395304981054318, [(2, 49), (3, 18)]
*** center 6: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21506769856996835] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21506769856996835, 0.15396794988960028] ***
*** starting iteration: 2; err: [Inf, 0.21506769856996835, 0.15396794988960028] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21506769856996835, 0.15396794988960028, 0.14692621551454066] ***
*** starting iteration: 3; err: [Inf, 0.21506769856996835, 0.15396794988960028, 0.14692621551454066] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21506769856996835, 0.15396794988960028, 0.14692621551454066, 0.14589793936815112] ***
*** starting iteration: 4; err: [Inf, 0.21506769856996835, 0.15396794988960028, 0.14692621551454066, 0.14589793936815112] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21506769856996835, 0.15396794988960028, 0.14692621551454066, 0.14589793936815112, 0.14551721689291297] ***
*** finished computation of 7 references, err: [Inf, 0.21506769856996835, 0.15396794988960028, 0.14692621551454066, 0.14589793936815112, 0.14551721689291297] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 52, 19]]
** centroid: 1, normalized-entropy: 0.8380078505079931, [(2, 52), (3, 19)]
*** center 2: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [71, 8, 0]]
** centroid: 3, normalized-entropy: 0.47299536229314826, [(1, 71), (2, 8)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [35, 43, 0]]
** centroid: 4, normalized-entropy: 0.9923985003332222, [(1, 35), (2, 43)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [30, 30, 0]]
** centroid: 5, normalized-entropy: 1.0, [(1, 30), (2, 30)]
*** center 6: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 66, 1]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2017820936879143] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2017820936879143, 0.14936580367572605] ***
*** starting iteration: 2; err: [Inf, 0.2017820936879143, 0.14936580367572605] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2017820936879143, 0.14936580367572605, 0.14390486538782715] ***
*** starting iteration: 3; err: [Inf, 0.2017820936879143, 0.14936580367572605, 0.14390486538782715] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2017820936879143, 0.14936580367572605, 0.14390486538782715, 0.14212016231194138] ***
*** starting iteration: 4; err: [Inf, 0.2017820936879143, 0.14936580367572605, 0.14390486538782715, 0.14212016231194138] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2017820936879143, 0.14936580367572605, 0.14390486538782715, 0.14212016231194138, 0.1412400596952066] ***
*** finished computation of 7 references, err: [Inf, 0.2017820936879143, 0.14936580367572605, 0.14390486538782715, 0.14212016231194138, 0.1412400596952066] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [50, 35, 0]]
** centroid: 1, normalized-entropy: 0.9774178175281716, [(1, 50), (2, 35)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [59, 16, 0]]
** centroid: 2, normalized-entropy: 0.7478061583312324, [(1, 59), (2, 16)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 50, 23]]
** centroid: 3, normalized-entropy: 0.8989377852081333, [(2, 50), (3, 23)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [50, 32, 0]]
** centroid: 4, normalized-entropy: 0.9649567669505686, [(1, 50), (2, 32)]
*** center 5: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 70, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20717116432264449] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20717116432264449, 0.1522586824838072] ***
*** starting iteration: 2; err: [Inf, 0.20717116432264449, 0.1522586824838072] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20717116432264449, 0.1522586824838072, 0.14694829035224394] ***
*** starting iteration: 3; err: [Inf, 0.20717116432264449, 0.1522586824838072, 0.14694829035224394] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20717116432264449, 0.1522586824838072, 0.14694829035224394, 0.14630134425126015] ***
*** finished computation of 7 references, err: [Inf, 0.20717116432264449, 0.1522586824838072, 0.14694829035224394, 0.14630134425126015] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [76, 5, 0]]
** centroid: 1, normalized-entropy: 0.33426813256179383, [(1, 76), (2, 5)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [87, 5, 0]]
** centroid: 2, normalized-entropy: 0.30458668852140236, [(1, 87), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 39, 19]]
** centroid: 3, normalized-entropy: 0.912441179764541, [(2, 39), (3, 19)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [52, 4, 0]]
** centroid: 4, normalized-entropy: 0.3712323266408756, [(1, 52), (2, 4)]
*** center 5: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [2, 61, 0]]
** centroid: 6, normalized-entropy: 0.20307392998664567, [(1, 2), (2, 61)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 79, 0]]
** centroid: 7, normalized-entropy: 0.16702680404522793, [(1, 2), (2, 79)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18390480481460691] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18390480481460691, 0.1531926727760583] ***
*** starting iteration: 2; err: [Inf, 0.18390480481460691, 0.1531926727760583] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18390480481460691, 0.1531926727760583, 0.1495042416676879] ***
*** starting iteration: 3; err: [Inf, 0.18390480481460691, 0.1531926727760583, 0.1495042416676879] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18390480481460691, 0.1531926727760583, 0.1495042416676879, 0.14804078839719295] ***
*** starting iteration: 4; err: [Inf, 0.18390480481460691, 0.1531926727760583, 0.1495042416676879, 0.14804078839719295] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18390480481460691, 0.1531926727760583, 0.1495042416676879, 0.14804078839719295, 0.14762814854830503] ***
*** finished computation of 7 references, err: [Inf, 0.18390480481460691, 0.1531926727760583, 0.1495042416676879, 0.14804078839719295, 0.14762814854830503] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [47, 39, 0]]
** centroid: 1, normalized-entropy: 0.9937489109291138, [(1, 47), (2, 39)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [49, 16, 0]]
** centroid: 2, normalized-entropy: 0.8051250074646822, [(1, 49), (2, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 59, 18]]
** centroid: 4, normalized-entropy: 0.7845191388986644, [(2, 59), (3, 18)]
*** center 5: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [4, 80, 0]]
** centroid: 6, normalized-entropy: 0.2761954276479391, [(1, 4), (2, 80)]
*** center 7: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19440754717215897] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19440754717215897, 0.15372997216321527] ***
*** starting iteration: 2; err: [Inf, 0.19440754717215897, 0.15372997216321527] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19440754717215897, 0.15372997216321527, 0.1494998445212841] ***
*** starting iteration: 3; err: [Inf, 0.19440754717215897, 0.15372997216321527, 0.1494998445212841] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19440754717215897, 0.15372997216321527, 0.1494998445212841, 0.14759388556703926] ***
*** starting iteration: 4; err: [Inf, 0.19440754717215897, 0.15372997216321527, 0.1494998445212841, 0.14759388556703926] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19440754717215897, 0.15372997216321527, 0.1494998445212841, 0.14759388556703926, 0.14639977752277628] ***
*** starting iteration: 5; err: [Inf, 0.19440754717215897, 0.15372997216321527, 0.1494998445212841, 0.14759388556703926, 0.14639977752277628] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19440754717215897, 0.15372997216321527, 0.1494998445212841, 0.14759388556703926, 0.14639977752277628, 0.1458197399266064] ***
*** finished computation of 7 references, err: [Inf, 0.19440754717215897, 0.15372997216321527, 0.1494998445212841, 0.14759388556703926, 0.14639977752277628, 0.1458197399266064] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 71, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [22, 36, 0]]
** centroid: 2, normalized-entropy: 0.9575534837147484, [(1, 22), (2, 36)]
*** center 3: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 56, 19]]
** centroid: 4, normalized-entropy: 0.8165187119538281, [(2, 56), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [47, 34, 0]]
** centroid: 5, normalized-entropy: 0.9813387358307915, [(1, 47), (2, 34)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [95, 2, 0]]
** centroid: 6, normalized-entropy: 0.14489961753310668, [(1, 95), (2, 2)]
*** center 7: selecting labels [1] (freq >= 2) [from [40, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18421967600658537] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18421967600658537, 0.1506357873212546] ***
*** starting iteration: 2; err: [Inf, 0.18421967600658537, 0.1506357873212546] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18421967600658537, 0.1506357873212546, 0.14485423627123237] ***
*** starting iteration: 3; err: [Inf, 0.18421967600658537, 0.1506357873212546, 0.14485423627123237] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18421967600658537, 0.1506357873212546, 0.14485423627123237, 0.14365780745260417] ***
*** starting iteration: 4; err: [Inf, 0.18421967600658537, 0.1506357873212546, 0.14485423627123237, 0.14365780745260417] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18421967600658537, 0.1506357873212546, 0.14485423627123237, 0.14365780745260417, 0.14341834706999362] ***
*** finished computation of 7 references, err: [Inf, 0.18421967600658537, 0.1506357873212546, 0.14485423627123237, 0.14365780745260417, 0.14341834706999362] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [30, 62, 0]]
** centroid: 1, normalized-entropy: 0.9108783787500366, [(1, 30), (2, 62)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [63, 10, 0]]
** centroid: 2, normalized-entropy: 0.576291461217437, [(1, 63), (2, 10)]
*** center 3: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 39, 19]]
** centroid: 4, normalized-entropy: 0.912441179764541, [(2, 39), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [72, 6, 0]]
** centroid: 5, normalized-entropy: 0.3912435636292556, [(1, 72), (2, 6)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 79, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21179327779076992] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21179327779076992, 0.1538421148955822] ***
*** starting iteration: 2; err: [Inf, 0.21179327779076992, 0.1538421148955822] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21179327779076992, 0.1538421148955822, 0.14728949787653983] ***
*** starting iteration: 3; err: [Inf, 0.21179327779076992, 0.1538421148955822, 0.14728949787653983] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21179327779076992, 0.1538421148955822, 0.14728949787653983, 0.14584158159978688] ***
*** starting iteration: 4; err: [Inf, 0.21179327779076992, 0.1538421148955822, 0.14728949787653983, 0.14584158159978688] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21179327779076992, 0.1538421148955822, 0.14728949787653983, 0.14584158159978688, 0.14535950802266598] ***
*** finished computation of 7 references, err: [Inf, 0.21179327779076992, 0.1538421148955822, 0.14728949787653983, 0.14584158159978688, 0.14535950802266598] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [9, 82, 0]]
** centroid: 1, normalized-entropy: 0.4655024490815131, [(1, 9), (2, 82)]
*** center 2: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [47, 29, 0]]
** centroid: 3, normalized-entropy: 0.9591495543968941, [(1, 47), (2, 29)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [37, 30, 0]]
** centroid: 4, normalized-entropy: 0.9921116920021501, [(1, 37), (2, 30)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 53, 19]]
** centroid: 5, normalized-entropy: 0.8325582396745668, [(2, 53), (3, 19)]
*** center 6: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [53, 2, 0]]
** centroid: 7, normalized-entropy: 0.22536363912739493, [(1, 53), (2, 2)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1933079880978912] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1933079880978912, 0.15173853837884962] ***
*** starting iteration: 2; err: [Inf, 0.1933079880978912, 0.15173853837884962] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1933079880978912, 0.15173853837884962, 0.14855912160035223] ***
*** starting iteration: 3; err: [Inf, 0.1933079880978912, 0.15173853837884962, 0.14855912160035223] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1933079880978912, 0.15173853837884962, 0.14855912160035223, 0.1477079971721396] ***
*** finished computation of 7 references, err: [Inf, 0.1933079880978912, 0.15173853837884962, 0.14855912160035223, 0.1477079971721396] ***
*** center 1: selecting labels [1] (freq >= 2) [from [89, 1, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [46, 19, 0]]
** centroid: 2, normalized-entropy: 0.871683617119982, [(1, 46), (2, 19)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 55, 17]]
** centroid: 3, normalized-entropy: 0.7885131605379784, [(2, 55), (3, 17)]
*** center 4: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [17, 61, 0]]
** centroid: 5, normalized-entropy: 0.7564041945982506, [(1, 17), (2, 61)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [4, 78, 0]]
** centroid: 6, normalized-entropy: 0.2811937964320427, [(1, 4), (2, 78)]
*** center 7: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19138805804029108] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19138805804029108, 0.14674187793326565] ***
*** starting iteration: 2; err: [Inf, 0.19138805804029108, 0.14674187793326565] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19138805804029108, 0.14674187793326565, 0.14267111294157803] ***
*** starting iteration: 3; err: [Inf, 0.19138805804029108, 0.14674187793326565, 0.14267111294157803] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19138805804029108, 0.14674187793326565, 0.14267111294157803, 0.14229885470634326] ***
*** finished computation of 7 references, err: [Inf, 0.19138805804029108, 0.14674187793326565, 0.14267111294157803, 0.14229885470634326] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [5, 86, 0]]
** centroid: 1, normalized-entropy: 0.30704288878312236, [(1, 5), (2, 86)]
*** center 2: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [63, 11, 0]]
** centroid: 3, normalized-entropy: 0.6064481901491525, [(1, 63), (2, 11)]
*** center 4: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [64, 10, 0]]
** centroid: 5, normalized-entropy: 0.5713549744279549, [(1, 64), (2, 10)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 70, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 30, 19]]
** centroid: 7, normalized-entropy: 0.9633355456726842, [(2, 30), (3, 19)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19600735190697013] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19600735190697013, 0.15949767994321884] ***
*** starting iteration: 2; err: [Inf, 0.19600735190697013, 0.15949767994321884] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19600735190697013, 0.15949767994321884, 0.1515440586116165] ***
*** starting iteration: 3; err: [Inf, 0.19600735190697013, 0.15949767994321884, 0.1515440586116165] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19600735190697013, 0.15949767994321884, 0.1515440586116165, 0.15000789768993855] ***
*** starting iteration: 4; err: [Inf, 0.19600735190697013, 0.15949767994321884, 0.1515440586116165, 0.15000789768993855] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19600735190697013, 0.15949767994321884, 0.1515440586116165, 0.15000789768993855, 0.14954125578515232] ***
*** finished computation of 7 references, err: [Inf, 0.19600735190697013, 0.15949767994321884, 0.1515440586116165, 0.15000789768993855, 0.14954125578515232] ***
*** center 1: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [63, 14, 0]]
** centroid: 2, normalized-entropy: 0.6840384356390419, [(1, 63), (2, 14)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 35, 17]]
** centroid: 3, normalized-entropy: 0.9117517586347538, [(2, 35), (3, 17)]
*** center 4: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [24, 61, 0]]
** centroid: 5, normalized-entropy: 0.8586370819183629, [(1, 24), (2, 61)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 59, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [60, 11, 0]]
** centroid: 7, normalized-entropy: 0.6220403090607189, [(1, 60), (2, 11)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20145138673111795] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20145138673111795, 0.1530600735601038] ***
*** starting iteration: 2; err: [Inf, 0.20145138673111795, 0.1530600735601038] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20145138673111795, 0.1530600735601038, 0.14783806946501135] ***
*** starting iteration: 3; err: [Inf, 0.20145138673111795, 0.1530600735601038, 0.14783806946501135] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20145138673111795, 0.1530600735601038, 0.14783806946501135, 0.1462804856263101] ***
*** starting iteration: 4; err: [Inf, 0.20145138673111795, 0.1530600735601038, 0.14783806946501135, 0.1462804856263101] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20145138673111795, 0.1530600735601038, 0.14783806946501135, 0.1462804856263101, 0.1454876376390457] ***
*** finished computation of 7 references, err: [Inf, 0.20145138673111795, 0.1530600735601038, 0.14783806946501135, 0.1462804856263101, 0.1454876376390457] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [45, 24, 0]]
** centroid: 1, normalized-entropy: 0.9321115676166747, [(1, 45), (2, 24)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [35, 41, 0]]
** centroid: 2, normalized-entropy: 0.9954993847275952, [(1, 35), (2, 41)]
*** center 3: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 64, 17]]
** centroid: 4, normalized-entropy: 0.7412466905234424, [(2, 64), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [22, 65, 0]]
** centroid: 5, normalized-entropy: 0.8158009273789572, [(1, 22), (2, 65)]
*** center 6: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20435825431905688] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20435825431905688, 0.15620134022831916] ***
*** starting iteration: 2; err: [Inf, 0.20435825431905688, 0.15620134022831916] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20435825431905688, 0.15620134022831916, 0.1488805889710784] ***
*** starting iteration: 3; err: [Inf, 0.20435825431905688, 0.15620134022831916, 0.1488805889710784] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20435825431905688, 0.15620134022831916, 0.1488805889710784, 0.14767044923268258] ***
*** starting iteration: 4; err: [Inf, 0.20435825431905688, 0.15620134022831916, 0.1488805889710784, 0.14767044923268258] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20435825431905688, 0.15620134022831916, 0.1488805889710784, 0.14767044923268258, 0.14703100885788445] ***
*** finished computation of 7 references, err: [Inf, 0.20435825431905688, 0.15620134022831916, 0.1488805889710784, 0.14767044923268258, 0.14703100885788445] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [7, 71, 0]]
** centroid: 1, normalized-entropy: 0.4356133734874324, [(1, 7), (2, 71)]
*** center 2: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [69, 17, 0]]
** centroid: 3, normalized-entropy: 0.7172524777375696, [(1, 69), (2, 17)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [63, 3, 0]]
** centroid: 4, normalized-entropy: 0.2667649878030262, [(1, 63), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [75, 2, 0]]
** centroid: 5, normalized-entropy: 0.17378132267943294, [(1, 75), (2, 2)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 64, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 36, 20]]
** centroid: 7, normalized-entropy: 0.940285958670631, [(2, 36), (3, 20)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2141184368878603] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2141184368878603, 0.14967768661864103] ***
*** starting iteration: 2; err: [Inf, 0.2141184368878603, 0.14967768661864103] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2141184368878603, 0.14967768661864103, 0.14559076481871308] ***
*** starting iteration: 3; err: [Inf, 0.2141184368878603, 0.14967768661864103, 0.14559076481871308] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2141184368878603, 0.14967768661864103, 0.14559076481871308, 0.14524173158593476] ***
*** finished computation of 7 references, err: [Inf, 0.2141184368878603, 0.14967768661864103, 0.14559076481871308, 0.14524173158593476] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [48, 42, 0]]
** centroid: 1, normalized-entropy: 0.9967916319816367, [(1, 48), (2, 42)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [53, 13, 0]]
** centroid: 2, normalized-entropy: 0.7158259310602146, [(1, 53), (2, 13)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [62, 17, 0]]
** centroid: 3, normalized-entropy: 0.751286576718343, [(1, 62), (2, 17)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 48, 18]]
** centroid: 4, normalized-entropy: 0.8453509366224364, [(2, 48), (3, 18)]
*** center 5: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 67, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1890786700891331] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1890786700891331, 0.15129800436273216] ***
*** starting iteration: 2; err: [Inf, 0.1890786700891331, 0.15129800436273216] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1890786700891331, 0.15129800436273216, 0.14481450711470098] ***
*** starting iteration: 3; err: [Inf, 0.1890786700891331, 0.15129800436273216, 0.14481450711470098] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1890786700891331, 0.15129800436273216, 0.14481450711470098, 0.14430196197819897] ***
*** finished computation of 7 references, err: [Inf, 0.1890786700891331, 0.15129800436273216, 0.14481450711470098, 0.14430196197819897] ***
*** center 1: selecting labels [2] (freq >= 2) [from [1, 74, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [53, 24, 0]]
** centroid: 2, normalized-entropy: 0.8951127210954559, [(1, 53), (2, 24)]
*** center 3: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 67, 18]]
** centroid: 4, normalized-entropy: 0.7448423974714387, [(2, 67), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [67, 13, 0]]
** centroid: 5, normalized-entropy: 0.6402569436810504, [(1, 67), (2, 13)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [36, 9, 0]]
** centroid: 6, normalized-entropy: 0.7219280948873623, [(1, 36), (2, 9)]
*** center 7: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1890075713507831] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1890075713507831, 0.14926913207583128] ***
*** starting iteration: 2; err: [Inf, 0.1890075713507831, 0.14926913207583128] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1890075713507831, 0.14926913207583128, 0.14569243128597736] ***
*** starting iteration: 3; err: [Inf, 0.1890075713507831, 0.14926913207583128, 0.14569243128597736] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1890075713507831, 0.14926913207583128, 0.14569243128597736, 0.1452497669607401] ***
*** finished computation of 7 references, err: [Inf, 0.1890075713507831, 0.14926913207583128, 0.14569243128597736, 0.1452497669607401] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [13, 83, 0]]
** centroid: 1, normalized-entropy: 0.572108447204188, [(1, 13), (2, 83)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [50, 16, 0]]
** centroid: 2, normalized-entropy: 0.7990485210442682, [(1, 50), (2, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 66, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [62, 14, 0]]
** centroid: 5, normalized-entropy: 0.6892019851173655, [(1, 62), (2, 14)]
*** center 6: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 23, 25]]
** centroid: 7, normalized-entropy: 0.9987472979361685, [(2, 23), (3, 25)]
finished with 10 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 391,3 => 35,1 => 574), Dict(2 => 379,3 => 31,1 => 590))
[ Info: ===== scores for single classifier: {"micro_f1":0.943,"precision":0.943,"recall":0.943,"macro_recall":0.952576322158443,"macro_f1":0.922303409124121,"accuracy":0.943,"class_f1":{"2":0.9272030651340996,"3":0.8823529411764706,"1":0.9573542210617928},"class_precision":{"2":0.8985148514851485,"3":0.8108108108108109,"1":0.9838998211091234},"class_recall":{"2":0.9577836411609498,"3":0.967741935483871,"1":0.9322033898305084}}
[ Info: ===== scores for 1: {"micro_f1":0.978,"precision":0.978,"recall":0.978,"macro_recall":0.9761247621506914,"macro_f1":0.9790380964795996,"accuracy":0.978,"class_f1":{"2":0.971502590673575,"3":0.9836065573770492,"1":0.9820051413881747},"class_precision":{"2":0.9541984732824428,"3":1.0,"1":0.9930675909878682},"class_recall":{"2":0.9894459102902374,"3":0.967741935483871,"1":0.9711864406779661}}
[ Info: ===== scores for 5: {"micro_f1":0.969,"precision":0.969,"recall":0.969,"macro_recall":0.9802841256354068,"macro_f1":0.9543068766701897,"accuracy":0.969,"class_f1":{"2":0.96,"3":0.9253731343283582,"1":0.9775474956822107},"class_precision":{"2":0.9393939393939394,"3":0.8611111111111112,"1":0.9964788732394366},"class_recall":{"2":0.9815303430079155,"3":1.0,"1":0.9593220338983051}}
[ Info: ===== scores for 7: {"micro_f1":0.97,"precision":0.97,"recall":0.97,"macro_recall":0.9808490973868192,"macro_f1":0.9550143750550509,"accuracy":0.97,"class_f1":{"2":0.9612403100775194,"3":0.9253731343283582,"1":0.9784296807592752},"class_precision":{"2":0.9417721518987342,"3":0.8611111111111112,"1":0.9964850615114236},"class_recall":{"2":0.9815303430079155,"3":1.0,"1":0.9610169491525423}}
[ Info: ===== scores for 9: {"micro_f1":0.974,"precision":0.974,"recall":0.974,"macro_recall":0.9837380558412713,"macro_f1":0.9622788969621369,"accuracy":0.974,"class_f1":{"2":0.9664082687338502,"3":0.9393939393939393,"1":0.9810344827586207},"class_precision":{"2":0.9468354430379747,"3":0.8857142857142857,"1":0.9982456140350877},"class_recall":{"2":0.9868073878627969,"3":1.0,"1":0.964406779661017}}
[ Info: ===== scores for 11: {"micro_f1":0.972,"precision":0.972,"recall":0.972,"macro_recall":0.9816645051652432,"macro_f1":0.9480330776589624,"accuracy":0.972,"class_f1":{"2":0.9636363636363635,"3":0.898550724637681,"1":0.9819121447028424},"class_precision":{"2":0.948849104859335,"3":0.8157894736842105,"1":0.9982486865148862},"class_recall":{"2":0.978891820580475,"3":1.0,"1":0.9661016949152542}}
(score = 0.978, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.978, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.978, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.978, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.975, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.975, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.969, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.969, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.976, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.976, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.969, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.969, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.977, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.977, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.97, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.97, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.978,"k":1,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.978,"precision":0.978,"recall":0.978,"macro_recall":0.9656225100056598,"macro_f1":0.9686650118965815,"accuracy":0.978,"class_f1":{"2":0.9714285714285714,"3":0.9508196721311476,"1":0.9837467921300256},"class_precision":{"2":0.9565217391304348,"3":0.9666666666666667,"1":0.9930915371329879},"class_recall":{"2":0.9868073878627969,"3":0.9354838709677419,"1":0.9745762711864406}}
Test Summary: | Pass  Total
AKNC          |    8      8
[421, 2, 1, 1, 1, 1, 4, 10, 1, 5, 17, 3, 4, 1, 5, 13, 8, 2, 8, 1, 15, 14, 3, 3, 7, 7, 6, 8, 3, 3, 3, 1, 2, 3, 95, 10, 1, 2, 1, 2, 2, 20, 6, 11, 3, 12, 5, 5, 18, 23, 11, 2, 9, 13, 7, 3, 14, 9, 7, 5, 12, 4, 8, 5, 26, 29, 6, 17, 1, 19, 2, 52, 5, 213, 7, 2, 18, 39, 48, 47, 23, 6, 11, 6, 19, 73, 7, 30, 3, 11, 53, 2, 8, 15, 66, 14, 64, 10, 13, 25, 1, 42, 9, 4, 9, 2, 35, 9, 37, 61, 6, 11, 16, 58, 27, 137, 4, 7, 3, 20, 6, 12, 11, 387, 1, 8, 7, 84, 4, 112, 26, 18, 1, 32, 87, 28, 17, 13, 3, 8, 28, 56, 29, 40, 190, 36, 57, 18, 25, 53, 9, 17, 32, 7, 40, 3, 43, 4, 15, 15, 3, 11, 34, 48, 8, 29, 94, 8, 2, 4, 5, 59, 2, 53, 10, 7, 5, 33, 7, 2, 8, 13, 7, 62, 13, 157, 85, 53, 17, 36, 18, 57, 56, 21, 1, 81, 15, 5, 7, 27, 27, 1, 30, 54, 6, 107, 26, 12, 269, 33, 2, 13, 1, 6, 7, 56, 167, 148, 10, 2, 14, 4, 29, 7, 13, 63, 46, 236, 10, 20, 51, 26, 54, 3, 54, 3, 6, 33, 7, 33, 5, 8, 12, 70, 10, 38, 64, 14, 10, 15, 23, 23, 19, 39, 28, 924, 10, 10, 33, 3, 35, 12, 29, 24, 36, 15, 49, 9, 31, 14, 69, 15, 33, 11, 62, 71, 63, 66, 2, 108, 21, 262, 35, 14, 38, 9, 284, 8, 5, 12, 68, 6, 28, 62, 26, 81, 13, 13, 28, 41]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6159999999999999, speedup = 0.33002829189902644, eval_ratio = 0.07413099999999999)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.39324466765873023,"recall":0.39149305555555564,"f1":null,"seconds":0.00012007728219032288,"exhaustive_search_seconds":0.0004008989781141281,"evaluations":506.8046875,"distances_sum":1758.1273091155297}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5529513888888888,"recall":0.5529513888888888,"f1":0.5529513888888888,"seconds":0.0002540517598390579,"exhaustive_search_seconds":0.0004008989781141281,"evaluations":647.3125,"distances_sum":1665.5782955071436}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6631944444444443,"recall":0.6631944444444443,"f1":0.6631944444444443,"seconds":0.0006561353802680969,"exhaustive_search_seconds":0.0004008989781141281,"evaluations":772.1875,"distances_sum":1615.930084382099}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7517361111111108,"recall":0.7517361111111108,"f1":0.7517361111111108,"seconds":0.00046736374497413635,"exhaustive_search_seconds":0.0004008989781141281,"evaluations":912.0,"distances_sum":1579.7410565809548}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7934027777777768,"recall":0.7934027777777768,"f1":0.7934027777777768,"seconds":0.000530468299984932,"exhaustive_search_seconds":0.0004008989781141281,"evaluations":999.5078125,"distances_sum":1568.7206850948994}
KCenters.DeloneInvIndex> reached performance {"precision":0.8446180555555549,"recall":0.8446180555555549,"f1":0.8446180555555549,"seconds":0.0007804017513990402,"exhaustive_search_seconds":0.0004008989781141281,"evaluations":1114.4453125,"distances_sum":1557.7142633907752}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8280000000000004, speedup = 0.675120216328212, eval_ratio = 0.10700599999999999)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
