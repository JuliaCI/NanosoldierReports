Julia Version 1.5.0-DEV.658
Commit 07477669a1 (2020-04-21 14:52 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed Missings ──────────────────── v0.4.3
  Installed Reexport ──────────────────── v0.2.0
  Installed TableTraits ───────────────── v1.0.0
  Installed OrderedCollections ────────── v1.1.0
  Installed KCenters ──────────────────── v0.2.2
  Installed DataStructures ────────────── v0.17.13
  Installed StatsBase ─────────────────── v0.32.2
  Installed SimilaritySearch ──────────── v0.3.19
  Installed InvertedIndices ───────────── v1.0.0
  Installed PooledArrays ──────────────── v0.5.3
  Installed Parsers ───────────────────── v1.0.2
  Installed LearnBase ─────────────────── v0.2.2
  Installed Compat ────────────────────── v3.8.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed JSON ──────────────────────── v0.21.0
  Installed DataAPI ───────────────────── v1.2.0
  Installed MappedArrays ──────────────── v0.2.2
  Installed MLDataPattern ─────────────── v0.5.1
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed DataValueInterfaces ───────── v1.0.0
  Installed Tables ────────────────────── v1.0.4
  Installed CategoricalArrays ─────────── v0.7.7
  Installed MLDataUtils ───────────────── v0.5.1
  Installed DataFrames ────────────────── v0.20.2
  Installed MLLabelUtils ──────────────── v0.5.2
Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.8.0
  [9a962f9c] + DataAPI v1.2.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.13
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.1
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v1.0.2
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_nuiQ1D/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_nuiQ1D/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.8.0
  [9a962f9c] DataAPI v1.2.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.13
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.1
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v1.0.2
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.9370718047022819
[ Info: 0.8321307849884033
[ Info: 0.5544419614970684
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.33293488835295043
mean(cdnet.distances) = 0.3485903367896875
mean(crand.distances) = 0.337244615778327
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6318359375, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6318359375,"f1":0.7630281177156185,"seconds":3.956258296966553e-6,"exhaustive_search_seconds":1.6633421182632446e-6,"evaluations":7.3515625,"distances_sum":1697.8001441849412}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.443359375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.443359375,"f1":null,"seconds":4.602596163749695e-6,"exhaustive_search_seconds":1.6633421182632446e-6,"evaluations":6.5078125,"distances_sum":1175.0737105592953}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6318359375,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.6318359375,"f1":0.7630281177156185,"seconds":3.956258296966553e-6,"exhaustive_search_seconds":1.6633421182632446e-6,"evaluations":7.3515625,"distances_sum":1697.8001441849412}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.654296875, conf: {"ssize":8,"bsize":4}, perf: {"precision":1.0,"recall":0.654296875,"f1":0.7789294039294048,"seconds":8.042901754379272e-6,"exhaustive_search_seconds":1.6633421182632446e-6,"evaluations":7.59375,"distances_sum":1785.0661743303376}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7724609375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7724609375,"f1":0.8648590992341,"seconds":5.8282166719436646e-6,"exhaustive_search_seconds":1.6633421182632446e-6,"evaluations":8.3203125,"distances_sum":2220.5817863879342}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9715086996336999,"seconds":6.604939699172974e-6,"exhaustive_search_seconds":1.6633421182632446e-6,"evaluations":8.953125,"distances_sum":3016.155536158294}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8310546875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8310546875,"f1":0.9027847152847162,"seconds":5.688518285751343e-6,"exhaustive_search_seconds":1.6633421182632446e-6,"evaluations":8.8125,"distances_sum":2457.4658514832777}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94921875,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9715086996336999,"seconds":6.604939699172974e-6,"exhaustive_search_seconds":1.6633421182632446e-6,"evaluations":8.953125,"distances_sum":3016.155536158294}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9753949175824178,"seconds":5.850568413734436e-6,"exhaustive_search_seconds":1.6633421182632446e-6,"evaluations":8.953125,"distances_sum":3047.3531536817372}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9609375, conf: {"ssize":2,"bsize":12}, perf: {"precision":1.0,"recall":0.9609375,"f1":0.9786286630036634,"seconds":5.46872615814209e-6,"exhaustive_search_seconds":1.6633421182632446e-6,"evaluations":8.9765625,"distances_sum":3080.304416494767}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9609375,"state":{"ssize":2,"bsize":12},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9786286630036634,"seconds":5.46872615814209e-6,"exhaustive_search_seconds":1.6633421182632446e-6,"evaluations":8.9765625,"distances_sum":3080.304416494767}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9609375,"state":{"ssize":2,"bsize":12},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9786286630036634,"seconds":5.46872615814209e-6,"exhaustive_search_seconds":1.6633421182632446e-6,"evaluations":8.9765625,"distances_sum":3080.304416494767}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6796875, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6796875,"f1":0.8012201340326348,"seconds":3.7550926208496094e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":8.2578125,"distances_sum":1786.3117370023813}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.583984375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.583984375,"f1":0.7271759490509497,"seconds":3.2242387533187866e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":7.5234375,"distances_sum":1481.1947169595314}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2724609375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2724609375,"f1":null,"seconds":2.734363079071045e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":7.109375,"distances_sum":754.4507778046122}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6796875,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.6796875,"f1":0.8012201340326348,"seconds":3.7550926208496094e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":8.2578125,"distances_sum":1786.3117370023813}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.77734375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.77734375,"f1":0.8697146603396613,"seconds":4.820525646209717e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":8.5625,"distances_sum":2130.5372487012864}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78515625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.78515625,"f1":0.8729484057609066,"seconds":4.8074871301651e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":8.546875,"distances_sum":2191.4283818567374}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8359375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8359375,"f1":0.9057609057609066,"seconds":4.284083843231201e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":8.796875,"distances_sum":2373.6575898531387}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9415064102564106,"seconds":4.567205905914307e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":8.9765625,"distances_sum":2645.318586179032}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7666015625, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7666015625,"f1":0.85939008907759,"seconds":4.0512531995773315e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":8.4921875,"distances_sum":2116.8042240649393}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8955078125,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.8955078125,"f1":0.9415064102564106,"seconds":4.567205905914307e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":8.9765625,"distances_sum":2645.318586179032}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9664262820512826,"seconds":4.781410098075867e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":8.9921875,"distances_sum":2855.0527150636626}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9565934065934071,"seconds":4.45730984210968e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":8.9765625,"distances_sum":2779.6776762562977}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9506956585081587,"seconds":4.33996319770813e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":8.953125,"distances_sum":2749.2918504777954}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9731227106227108,"seconds":4.289671778678894e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":9.0,"distances_sum":2930.238443357603}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9461595695970701,"seconds":4.3120235204696655e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":8.921875,"distances_sum":2698.961720697867}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.951171875,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9731227106227108,"seconds":4.289671778678894e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":9.0,"distances_sum":2930.238443357603}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.951171875,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9731227106227108,"seconds":4.289671778678894e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":9.0,"distances_sum":2930.238443357603}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7666015625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7666015625,"f1":0.8568899850149859,"seconds":3.809109330177307e-6,"exhaustive_search_seconds":1.0933727025985718e-6,"evaluations":8.5703125,"distances_sum":1980.8250612318448}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3798828125, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.3798828125,"f1":null,"seconds":2.559274435043335e-6,"exhaustive_search_seconds":1.0933727025985718e-6,"evaluations":6.1640625,"distances_sum":966.1656090164925}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1943359375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.1943359375,"f1":null,"seconds":2.1141022443771362e-6,"exhaustive_search_seconds":1.0933727025985718e-6,"evaluations":5.0390625,"distances_sum":519.7480001313124}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7666015625,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7666015625,"f1":0.8568899850149859,"seconds":3.809109330177307e-6,"exhaustive_search_seconds":1.0933727025985718e-6,"evaluations":8.5703125,"distances_sum":1980.8250612318448}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9484635156510159,"seconds":4.220753908157349e-6,"exhaustive_search_seconds":1.0933727025985718e-6,"evaluations":8.78125,"distances_sum":2603.2154195367652}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8857421875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8857421875,"f1":0.9343864468864475,"seconds":4.254281520843506e-6,"exhaustive_search_seconds":1.0933727025985718e-6,"evaluations":8.828125,"distances_sum":2485.575213668503}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8193359375, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8193359375,"f1":0.8916760323010333,"seconds":4.066154360771179e-6,"exhaustive_search_seconds":1.0933727025985718e-6,"evaluations":8.578125,"distances_sum":2189.4537381895598}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.779296875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.779296875,"f1":0.8684903638028645,"seconds":3.7979334592819214e-6,"exhaustive_search_seconds":1.0933727025985718e-6,"evaluations":8.7265625,"distances_sum":2009.8725919541512}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8359375, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8359375,"f1":0.9045990467865475,"seconds":3.997236490249634e-6,"exhaustive_search_seconds":1.0933727025985718e-6,"evaluations":8.65625,"distances_sum":2277.0942993903086}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9111328125,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.9111328125,"f1":0.9484635156510159,"seconds":4.220753908157349e-6,"exhaustive_search_seconds":1.0933727025985718e-6,"evaluations":8.78125,"distances_sum":2603.2154195367652}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.958984375, conf: {"ssize":3,"bsize":13}, perf: {"precision":1.0,"recall":0.958984375,"f1":0.977140567765568,"seconds":4.470348358154297e-6,"exhaustive_search_seconds":1.0933727025985718e-6,"evaluations":8.9453125,"distances_sum":2808.987416625302}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":6,"bsize":12}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9760989010989014,"seconds":4.297122359275818e-6,"exhaustive_search_seconds":1.0933727025985718e-6,"evaluations":8.9296875,"distances_sum":2808.018506584615}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9601476648351652,"seconds":3.563240170478821e-6,"exhaustive_search_seconds":1.0933727025985718e-6,"evaluations":8.8515625,"distances_sum":2710.8403269383894}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.958984375,"state":{"ssize":3,"bsize":13},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.977140567765568,"seconds":4.470348358154297e-6,"exhaustive_search_seconds":1.0933727025985718e-6,"evaluations":8.9453125,"distances_sum":2808.987416625302}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.958984375,"state":{"ssize":3,"bsize":13},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.977140567765568,"seconds":4.470348358154297e-6,"exhaustive_search_seconds":1.0933727025985718e-6,"evaluations":8.9453125,"distances_sum":2808.987416625302}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.568359375, conf: {"ssize":2,"bsize":3}, perf: {"precision":null,"recall":0.568359375,"f1":null,"seconds":4.293397068977356e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":6.6328125,"distances_sum":1371.5908668434577}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5615234375, conf: {"ssize":3,"bsize":3}, perf: {"precision":null,"recall":0.5615234375,"f1":null,"seconds":4.239380359649658e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":6.703125,"distances_sum":1369.4706242264217}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.671875, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.671875,"f1":0.7915123071373078,"seconds":4.716217517852783e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":7.78125,"distances_sum":1692.99350618036}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.671875,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.671875,"f1":0.7915123071373078,"seconds":4.716217517852783e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":7.78125,"distances_sum":1692.99350618036}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9532680860805866,"seconds":5.770474672317505e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.75,"distances_sum":2686.4340728877523}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7509765625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7509765625,"f1":0.8486445845820855,"seconds":5.751848220825195e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.078125,"distances_sum":1944.13865136755}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7880859375, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7880859375,"f1":0.8735384407259416,"seconds":4.3567270040512085e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.1796875,"distances_sum":2105.7965376585735}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6728515625, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6728515625,"f1":0.7948655511155519,"seconds":3.1869858503341675e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":7.890625,"distances_sum":1697.0805150711471}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9189453125,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.9189453125,"f1":0.9532680860805866,"seconds":5.770474672317505e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.75,"distances_sum":2686.4340728877523}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9618189102564106,"seconds":4.0978193283081055e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.8671875,"distances_sum":2698.1888367730703}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9561240842490848,"seconds":4.5709311962127686e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.8359375,"distances_sum":2653.2878777217566}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9690361721611722,"seconds":6.7409127950668335e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.8828125,"distances_sum":2753.1696598650647}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.96073717948718,"seconds":4.081055521965027e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.8515625,"distances_sum":2707.255764360674}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9453125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9453125,"f1":0.9690361721611722,"seconds":6.7409127950668335e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.8828125,"distances_sum":2753.1696598650647}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9453125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9453125,"f1":0.9690361721611722,"seconds":6.7409127950668335e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.8828125,"distances_sum":2753.1696598650647}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5478515625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5478515625,"f1":0.6935876623376629,"seconds":3.3136457204818726e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":7.0,"distances_sum":1292.0253673184793}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5478515625,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5478515625,"f1":0.6935876623376629,"seconds":3.3136457204818726e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":7.0,"distances_sum":1292.0253673184793}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8388671875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8388671875,"f1":0.9061532217782227,"seconds":4.4405460357666016e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.7578125,"distances_sum":2256.7134162019884}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6708984375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6708984375,"f1":0.7933072136197145,"seconds":3.727152943611145e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.328125,"distances_sum":1634.6684314875044}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9426396520146528,"seconds":4.798173904418945e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.9140625,"distances_sum":2503.8545545307843}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.669921875, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.669921875,"f1":0.7906208374958382,"seconds":3.7811696529388428e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.2109375,"distances_sum":1609.629820081176}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.654296875, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.654296875,"f1":0.7803424006549015,"seconds":3.7811696529388428e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.15625,"distances_sum":1560.4743671041936}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8974609375,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.8974609375,"f1":0.9426396520146528,"seconds":4.798173904418945e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.9140625,"distances_sum":2503.8545545307843}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9627060439560443,"seconds":4.654750227928162e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.9375,"distances_sum":2681.466756280617}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9688816391941395,"seconds":4.779547452926636e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.96875,"distances_sum":2706.640618185028}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.943359375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9688816391941395,"seconds":4.779547452926636e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.96875,"distances_sum":2706.640618185028}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.943359375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9688816391941395,"seconds":4.779547452926636e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.96875,"distances_sum":2706.640618185028}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.8573456057831067,"seconds":4.0940940380096436e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.6171875,"distances_sum":2018.1101985819737}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.236328125, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.236328125,"f1":null,"seconds":3.0510127544403076e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":6.5390625,"distances_sum":615.0839056654305}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.767578125,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.767578125,"f1":0.8573456057831067,"seconds":4.0940940380096436e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.6171875,"distances_sum":2018.1101985819737}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9552712912087917,"seconds":4.850327968597412e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.8984375,"distances_sum":2668.0597002312397}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.783203125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.783203125,"f1":0.8697266275391284,"seconds":4.131346940994263e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.5859375,"distances_sum":2074.3288414596745}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9208984375,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.9208984375,"f1":0.9552712912087917,"seconds":4.850327968597412e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.8984375,"distances_sum":2668.0597002312397}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9673363095238099,"seconds":4.757195711135864e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.9375,"distances_sum":2756.6936755647703}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9627461080586084,"seconds":4.516914486885071e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.875,"distances_sum":2726.55291690951}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9404296875,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9673363095238099,"seconds":4.757195711135864e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.9375,"distances_sum":2756.6936755647703}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9404296875,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9673363095238099,"seconds":4.757195711135864e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.9375,"distances_sum":2756.6936755647703}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2509765625, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2509765625,"f1":null,"seconds":3.6973506212234497e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":6.671875,"distances_sum":740.1306391738334}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.42578125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.42578125,"f1":null,"seconds":3.863126039505005e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":6.5078125,"distances_sum":1018.4617878721214}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.42578125,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.42578125,"f1":null,"seconds":3.863126039505005e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":6.5078125,"distances_sum":1018.4617878721214}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6748046875, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6748046875,"f1":0.793227432289933,"seconds":5.025416612625122e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.09375,"distances_sum":1737.0956376373995}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6748046875,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.6748046875,"f1":0.793227432289933,"seconds":5.025416612625122e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.09375,"distances_sum":1737.0956376373995}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.849609375, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.849609375,"f1":0.9132045038295045,"seconds":5.505979061126709e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.6875,"distances_sum":2370.6989356753115}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.849609375,"state":{"ssize":2,"bsize":6},"perf":{"precision":1.0,"recall":0.849609375,"f1":0.9132045038295045,"seconds":5.505979061126709e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.6875,"distances_sum":2370.6989356753115}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.849609375,"state":{"ssize":2,"bsize":6},"perf":{"precision":1.0,"recall":0.849609375,"f1":0.9132045038295045,"seconds":5.505979061126709e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.6875,"distances_sum":2370.6989356753115}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.66015625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.66015625,"f1":0.785707001332002,"seconds":5.036592483520508e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":7.5,"distances_sum":1346.2316514561492}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3955078125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3955078125,"f1":null,"seconds":3.5874545574188232e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":6.0078125,"distances_sum":827.6445485457713}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.66015625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.66015625,"f1":0.785707001332002,"seconds":5.036592483520508e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":7.5,"distances_sum":1346.2316514561492}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8525390625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8525390625,"f1":0.91364520895771,"seconds":5.7015568017959595e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.4921875,"distances_sum":1897.003758550894}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87109375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.87109375,"f1":0.9269974816849824,"seconds":5.766749382019043e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.5390625,"distances_sum":1954.5446489772096}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.87109375,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.87109375,"f1":0.9269974816849824,"seconds":5.766749382019043e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.5390625,"distances_sum":1954.5446489772096}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9588369963369968,"seconds":6.5583735704422e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.828125,"distances_sum":2163.9558711626805}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9587454212454217,"seconds":6.38328492641449e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.7109375,"distances_sum":2210.1164276418567}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9710622710622715,"seconds":6.768852472305298e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.84375,"distances_sum":2270.988619313328}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.960551427738928,"seconds":6.511807441711426e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.796875,"distances_sum":2190.2404493060853}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9482421875,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9710622710622715,"seconds":6.768852472305298e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.84375,"distances_sum":2270.988619313328}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9482421875,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9710622710622715,"seconds":6.768852472305298e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.84375,"distances_sum":2270.988619313328}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1943359375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.1943359375,"f1":null,"seconds":3.550201654434204e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":4.359375,"distances_sum":499.1021231641719}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7431640625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7431640625,"f1":0.839039953102454,"seconds":5.85801899433136e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.03125,"distances_sum":1717.7374348008163}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7431640625,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7431640625,"f1":0.839039953102454,"seconds":5.85801899433136e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.03125,"distances_sum":1717.7374348008163}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.748046875, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.748046875,"f1":0.8432182400932409,"seconds":5.925074219703674e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.0546875,"distances_sum":1714.5757517402099}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83203125, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.83203125,"f1":0.9020489926739934,"seconds":6.625428795814514e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.5546875,"distances_sum":2045.8211322669313}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.837890625, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.837890625,"f1":0.9049882409257417,"seconds":6.485730409622192e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.59375,"distances_sum":2074.340088108152}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.837890625,"state":{"ssize":8,"bsize":7},"perf":{"precision":1.0,"recall":0.837890625,"f1":0.9049882409257417,"seconds":6.485730409622192e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.59375,"distances_sum":2074.340088108152}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":11,"bsize":8}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.9352907509157515,"seconds":6.498768925666809e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.6328125,"distances_sum":2305.88994449701}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8876953125,"state":{"ssize":11,"bsize":8},"perf":{"precision":1.0,"recall":0.8876953125,"f1":0.9352907509157515,"seconds":6.498768925666809e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.6328125,"distances_sum":2305.88994449701}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8876953125,"state":{"ssize":11,"bsize":8},"perf":{"precision":1.0,"recall":0.8876953125,"f1":0.9352907509157515,"seconds":6.498768925666809e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.6328125,"distances_sum":2305.88994449701}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2958984375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2958984375,"f1":null,"seconds":3.844499588012695e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":6.4453125,"distances_sum":673.1689975362984}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5439453125, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.5439453125,"f1":0.690767045454546,"seconds":4.8745423555374146e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.109375,"distances_sum":1093.7902053825733}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.73046875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.73046875,"f1":0.8362158674658683,"seconds":5.805864930152893e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.03125,"distances_sum":1598.0335826193364}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.73046875,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.73046875,"f1":0.8362158674658683,"seconds":5.805864930152893e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.03125,"distances_sum":1598.0335826193364}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9554201007326014,"seconds":6.537884473800659e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8359375,"distances_sum":2246.9571414964344}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9485951548451552,"seconds":6.537884473800659e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8046875,"distances_sum":2221.0213848554226}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.921875,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.921875,"f1":0.9554201007326014,"seconds":6.537884473800659e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8359375,"distances_sum":2246.9571414964344}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9685096153846159,"seconds":6.7856162786483765e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.9375,"distances_sum":2321.142693692228}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9687156593406598,"seconds":6.841495633125305e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.9296875,"distances_sum":2319.2622631638455}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9719894688644691,"seconds":6.927177309989929e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.9609375,"distances_sum":2335.9478136648963}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94921875,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9719894688644691,"seconds":6.927177309989929e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.9609375,"distances_sum":2335.9478136648963}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94921875,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9719894688644691,"seconds":6.927177309989929e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.9609375,"distances_sum":2335.9478136648963}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5537109375, conf: {"ssize":4,"bsize":3}, perf: {"precision":null,"recall":0.5537109375,"f1":null,"seconds":3.0212104320526123e-6,"exhaustive_search_seconds":9.927898645401e-7,"evaluations":6.9296875,"distances_sum":1175.5168598720386}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2783203125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2783203125,"f1":null,"seconds":2.469867467880249e-6,"exhaustive_search_seconds":9.927898645401e-7,"evaluations":6.2421875,"distances_sum":613.3597284057832}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2578125, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2578125,"f1":null,"seconds":2.641230821609497e-6,"exhaustive_search_seconds":9.927898645401e-7,"evaluations":6.0546875,"distances_sum":544.6120801249955}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5537109375,"state":{"ssize":4,"bsize":3},"perf":{"precision":null,"recall":0.5537109375,"f1":null,"seconds":3.0212104320526123e-6,"exhaustive_search_seconds":9.927898645401e-7,"evaluations":6.9296875,"distances_sum":1175.5168598720386}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.564453125, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.564453125,"f1":0.7029253732378739,"seconds":4.760921001434326e-6,"exhaustive_search_seconds":9.927898645401e-7,"evaluations":6.859375,"distances_sum":1198.322453841195}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6708984375, conf: {"ssize":7,"bsize":4}, perf: {"precision":1.0,"recall":0.6708984375,"f1":0.7885799963924972,"seconds":5.211681127548218e-6,"exhaustive_search_seconds":9.927898645401e-7,"evaluations":7.71875,"distances_sum":1422.722108556225}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6796875, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6796875,"f1":0.8000270562770572,"seconds":5.695968866348267e-6,"exhaustive_search_seconds":9.927898645401e-7,"evaluations":7.6640625,"distances_sum":1456.426488759208}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6796875,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.6796875,"f1":0.8000270562770572,"seconds":5.695968866348267e-6,"exhaustive_search_seconds":9.927898645401e-7,"evaluations":7.6640625,"distances_sum":1456.426488759208}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9507128288378295,"seconds":7.14324414730072e-6,"exhaustive_search_seconds":9.927898645401e-7,"evaluations":8.8203125,"distances_sum":2258.738406120338}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6875, conf: {"ssize":8,"bsize":4}, perf: {"precision":1.0,"recall":0.6875,"f1":0.8025500541125549,"seconds":5.582347512245178e-6,"exhaustive_search_seconds":9.927898645401e-7,"evaluations":7.6796875,"distances_sum":1499.9252150302586}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.875, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.875,"f1":0.9269095487845495,"seconds":6.6943466663360596e-6,"exhaustive_search_seconds":9.927898645401e-7,"evaluations":8.8984375,"distances_sum":2081.802864661649}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9140625,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.9507128288378295,"seconds":7.14324414730072e-6,"exhaustive_search_seconds":9.927898645401e-7,"evaluations":8.8203125,"distances_sum":2258.738406120338}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9140625,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.9507128288378295,"seconds":7.14324414730072e-6,"exhaustive_search_seconds":9.927898645401e-7,"evaluations":8.8203125,"distances_sum":2258.738406120338}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2783203125, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2783203125,"f1":null,"seconds":4.999339580535889e-6,"exhaustive_search_seconds":1.7024576663970947e-6,"evaluations":6.2109375,"distances_sum":604.0118768131928}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2783203125,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.2783203125,"f1":null,"seconds":4.999339580535889e-6,"exhaustive_search_seconds":1.7024576663970947e-6,"evaluations":6.2109375,"distances_sum":604.0118768131928}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4296875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4296875,"f1":null,"seconds":3.917142748832703e-6,"exhaustive_search_seconds":1.7024576663970947e-6,"evaluations":6.125,"distances_sum":880.0592128715041}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.67578125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.67578125,"f1":0.7928233225108232,"seconds":4.932284355163574e-6,"exhaustive_search_seconds":1.7024576663970947e-6,"evaluations":7.3359375,"distances_sum":1482.208192421445}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.67578125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.67578125,"f1":0.7928233225108232,"seconds":4.932284355163574e-6,"exhaustive_search_seconds":1.7024576663970947e-6,"evaluations":7.3359375,"distances_sum":1482.208192421445}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.962854853479854,"seconds":6.07222318649292e-6,"exhaustive_search_seconds":1.7024576663970947e-6,"evaluations":8.8359375,"distances_sum":2393.771066367232}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.826171875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.826171875,"f1":0.8979000166500172,"seconds":5.470588803291321e-6,"exhaustive_search_seconds":1.7024576663970947e-6,"evaluations":8.3828125,"distances_sum":1971.9929887795104}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.93359375,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.962854853479854,"seconds":6.07222318649292e-6,"exhaustive_search_seconds":1.7024576663970947e-6,"evaluations":8.8359375,"distances_sum":2393.771066367232}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.93359375,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.962854853479854,"seconds":6.07222318649292e-6,"exhaustive_search_seconds":1.7024576663970947e-6,"evaluations":8.8359375,"distances_sum":2393.771066367232}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5595703125, conf: {"ssize":5,"bsize":3}, perf: {"precision":null,"recall":0.5595703125,"f1":null,"seconds":4.3157488107681274e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":6.7265625,"distances_sum":1083.2410604433544}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6689453125, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6689453125,"f1":0.7881108474858483,"seconds":5.073845386505127e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.421875,"distances_sum":1433.0081617416502}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6689453125,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.6689453125,"f1":0.7881108474858483,"seconds":5.073845386505127e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.421875,"distances_sum":1433.0081617416502}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.9363953754578759,"seconds":5.865469574928284e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.828125,"distances_sum":2073.49510825097}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.890625,"f1":0.936939102564103,"seconds":9.601376950740814e-5,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.671875,"distances_sum":2156.5963777449288}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.890625,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.890625,"f1":0.936939102564103,"seconds":9.601376950740814e-5,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.671875,"distances_sum":2156.5963777449288}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9696829212454217,"seconds":5.796551704406738e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.8984375,"distances_sum":2328.6792449198397}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9408539377289384,"seconds":5.360692739486694e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.7265625,"distances_sum":2166.418920849653}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9462890625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.9696829212454217,"seconds":5.796551704406738e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.8984375,"distances_sum":2328.6792449198397}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9462890625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.9696829212454217,"seconds":5.796551704406738e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.8984375,"distances_sum":2328.6792449198397}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.580078125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.580078125,"f1":0.7207783535908544,"seconds":4.278495907783508e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.8828125,"distances_sum":1010.6552620091339}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7802734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7802734375,"f1":0.8679466366966374,"seconds":5.198642611503601e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.6171875,"distances_sum":1455.1308678566284}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3740234375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3740234375,"f1":null,"seconds":3.6228448152542114e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":6.9296875,"distances_sum":577.3026332167235}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7802734375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7802734375,"f1":0.8679466366966374,"seconds":5.198642611503601e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.6171875,"distances_sum":1455.1308678566284}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8359375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8359375,"f1":0.9031300296925308,"seconds":5.505979061126709e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.7890625,"distances_sum":1578.936494754417}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8486328125, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8486328125,"f1":0.9120223526473535,"seconds":5.416572093963623e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8359375,"distances_sum":1639.9671830945329}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8486328125,"state":{"ssize":4,"bsize":6},"perf":{"precision":1.0,"recall":0.8486328125,"f1":0.9120223526473535,"seconds":5.416572093963623e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8359375,"distances_sum":1639.9671830945329}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.95448717948718,"seconds":5.297362804412842e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8359375,"distances_sum":1874.7508030455863}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9451751373626377,"seconds":5.444511771202087e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8671875,"distances_sum":1795.5399086829761}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9533711080586085,"seconds":5.500391125679016e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.84375,"distances_sum":1852.0361819980621}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9404304029304035,"seconds":5.465000867843628e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8046875,"distances_sum":1764.5103688344147}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9189453125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9189453125,"f1":0.95448717948718,"seconds":5.297362804412842e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8359375,"distances_sum":1874.7508030455863}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9189453125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9189453125,"f1":0.95448717948718,"seconds":5.297362804412842e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8359375,"distances_sum":1874.7508030455863}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2314453125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2314453125,"f1":null,"seconds":3.3099204301834106e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":6.4375,"distances_sum":357.51347062525343}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.556640625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.556640625,"f1":0.7031175421800426,"seconds":4.24310564994812e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":7.96875,"distances_sum":961.8818678589971}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.556640625,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.556640625,"f1":0.7031175421800426,"seconds":4.24310564994812e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":7.96875,"distances_sum":961.8818678589971}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9489068223443229,"seconds":5.641952157020569e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.8828125,"distances_sum":1832.444121040336}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9091796875,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.9091796875,"f1":0.9489068223443229,"seconds":5.641952157020569e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.8828125,"distances_sum":1832.444121040336}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9757268772893777,"seconds":5.755573511123657e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.9140625,"distances_sum":2032.02286658286}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9560546875,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9757268772893777,"seconds":5.755573511123657e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.9140625,"distances_sum":2032.02286658286}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9560546875,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9757268772893777,"seconds":5.755573511123657e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.9140625,"distances_sum":2032.02286658286}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.216796875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.216796875,"f1":null,"seconds":2.8014183044433594e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":5.7578125,"distances_sum":335.4465910146998}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5419921875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5419921875,"f1":0.6907717282717288,"seconds":3.939494490623474e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":7.7421875,"distances_sum":1063.7743982209684}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2314453125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2314453125,"f1":null,"seconds":2.8405338525772095e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":5.8203125,"distances_sum":370.7712717294656}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5419921875,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5419921875,"f1":0.6907717282717288,"seconds":3.939494490623474e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":7.7421875,"distances_sum":1063.7743982209684}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9408539377289382,"seconds":5.420297384262085e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.765625,"distances_sum":1928.2214576259366}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8408203125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8408203125,"f1":0.903926108613609,"seconds":5.302950739860535e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.7890625,"distances_sum":1764.7207099112109}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.666015625, conf: {"ssize":8,"bsize":4}, perf: {"precision":1.0,"recall":0.666015625,"f1":0.7860334110334117,"seconds":4.526227712631226e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.0859375,"distances_sum":1313.3100078064126}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6669921875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6669921875,"f1":0.7919596028971038,"seconds":4.503875970840454e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.2265625,"distances_sum":1252.7296181172217}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.763671875,"f1":0.8568743756243764,"seconds":4.8745423555374146e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.5,"distances_sum":1501.5381181179293}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8974609375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8974609375,"f1":0.9408539377289382,"seconds":5.420297384262085e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.765625,"distances_sum":1928.2214576259366}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.962890625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.962890625,"f1":0.9798363095238098,"seconds":5.673617124557495e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.9609375,"distances_sum":2153.3292144208617}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9685096153846158,"seconds":5.6978315114974976e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.9453125,"distances_sum":2072.493848536114}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9733630952380956,"seconds":5.5264681577682495e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.8984375,"distances_sum":2119.5479425000026}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9468463827838832,"seconds":5.425885319709778e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.7734375,"distances_sum":1953.7041681457883}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.962890625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9798363095238098,"seconds":5.673617124557495e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.9609375,"distances_sum":2153.3292144208617}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.962890625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9798363095238098,"seconds":5.673617124557495e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.9609375,"distances_sum":2153.3292144208617}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.568359375, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.568359375,"f1":0.7119304306804313,"seconds":4.0940940380096436e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":7.6328125,"distances_sum":1095.6696807883727}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5537109375, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.5537109375,"f1":0.7005737318237324,"seconds":4.332512617111206e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":7.640625,"distances_sum":1012.2821069735569}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3818359375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3818359375,"f1":null,"seconds":3.766268491744995e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":6.4609375,"distances_sum":685.2011988653985}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.568359375,"state":{"ssize":4,"bsize":3},"perf":{"precision":1.0,"recall":0.568359375,"f1":0.7119304306804313,"seconds":4.0940940380096436e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":7.6328125,"distances_sum":1095.6696807883727}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7763671875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7763671875,"f1":0.8664294039294048,"seconds":5.127862095832825e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.5546875,"distances_sum":1535.6895432384558}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8427734375, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8427734375,"f1":0.9081246878121884,"seconds":5.589798092842102e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.8203125,"distances_sum":1739.2560010544237}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7646484375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7646484375,"f1":0.8610493672993683,"seconds":5.083158612251282e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.484375,"distances_sum":1456.1974054533014}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8427734375,"state":{"ssize":6,"bsize":6},"perf":{"precision":1.0,"recall":0.8427734375,"f1":0.9081246878121884,"seconds":5.589798092842102e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.8203125,"distances_sum":1739.2560010544237}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9423878205128209,"seconds":5.729496479034424e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.859375,"distances_sum":1900.0964450146314}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9552884615384619,"seconds":6.020069122314453e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.84375,"distances_sum":2010.6623696299034}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9634901556776561,"seconds":5.798414349555969e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.890625,"distances_sum":2052.702179995241}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.946153846153847,"seconds":5.947425961494446e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.8203125,"distances_sum":1928.0734016973317}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9397409881784887,"seconds":6.008893251419067e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.859375,"distances_sum":1877.7707967480837}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9345703125,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.9345703125,"f1":0.9634901556776561,"seconds":5.798414349555969e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.890625,"distances_sum":2052.702179995241}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9345703125,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.9345703125,"f1":0.9634901556776561,"seconds":5.798414349555969e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.890625,"distances_sum":2052.702179995241}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2138671875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2138671875,"f1":null,"seconds":3.071501851081848e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":5.328125,"distances_sum":418.83244543903356}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.392578125, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.392578125,"f1":null,"seconds":3.5725533962249756e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":6.3125,"distances_sum":819.5249299499543}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.35546875, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.35546875,"f1":null,"seconds":3.548339009284973e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":5.9609375,"distances_sum":731.21970624342}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.392578125,"state":{"ssize":3,"bsize":2},"perf":{"precision":null,"recall":0.392578125,"f1":null,"seconds":3.5725533962249756e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":6.3125,"distances_sum":819.5249299499543}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.658203125, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.658203125,"f1":0.7778903388278396,"seconds":4.895031452178955e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":7.8359375,"distances_sum":1390.5222567014223}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.751953125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.751953125,"f1":0.8484633422133431,"seconds":5.228444933891296e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.265625,"distances_sum":1636.9708720320534}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76953125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.76953125,"f1":0.8605410214785224,"seconds":5.219131708145142e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.28125,"distances_sum":1675.0779836794932}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.76953125,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.76953125,"f1":0.8605410214785224,"seconds":5.219131708145142e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.28125,"distances_sum":1675.0779836794932}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9392862345987351,"seconds":5.930662155151367e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.8046875,"distances_sum":2008.8149187903584}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9597184065934069,"seconds":5.854293704032898e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.890625,"distances_sum":2083.8728403891114}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9474988553113558,"seconds":5.891546607017517e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.828125,"distances_sum":2027.9349901289656}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.775390625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.775390625,"f1":0.8648159132534142,"seconds":5.248934030532837e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.34375,"distances_sum":1689.7976903285335}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9287109375,"state":{"ssize":9,"bsize":9},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9597184065934069,"seconds":5.854293704032898e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.890625,"distances_sum":2083.8728403891114}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9287109375,"state":{"ssize":9,"bsize":9},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9597184065934069,"seconds":5.854293704032898e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.890625,"distances_sum":2083.8728403891114}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.388671875, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.388671875,"f1":null,"seconds":4.049390554428101e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":6.3984375,"distances_sum":785.1773292851253}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5263671875, conf: {"ssize":5,"bsize":3}, perf: {"precision":null,"recall":0.5263671875,"f1":null,"seconds":4.51505184173584e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":7.125,"distances_sum":1039.4033350719346}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2373046875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2373046875,"f1":null,"seconds":3.548339009284973e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":5.859375,"distances_sum":405.4618697784378}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5263671875,"state":{"ssize":5,"bsize":3},"perf":{"precision":null,"recall":0.5263671875,"f1":null,"seconds":4.51505184173584e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":7.125,"distances_sum":1039.4033350719346}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6767578125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6767578125,"f1":0.7952968906093913,"seconds":5.2209943532943726e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":7.875,"distances_sum":1437.4896204553243}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7451171875, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7451171875,"f1":0.8457556332556342,"seconds":5.0477683544158936e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.125,"distances_sum":1603.9214208978474}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5498046875, conf: {"ssize":8,"bsize":3}, perf: {"precision":1.0,"recall":0.5498046875,"f1":0.6944794788544792,"seconds":4.306435585021973e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":7.4375,"distances_sum":1140.744581768147}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7451171875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7451171875,"f1":0.8459972319347329,"seconds":5.329027771949768e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.3515625,"distances_sum":1597.0327917934403}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7421875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7421875,"f1":0.8433098151848161,"seconds":4.945322871208191e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.2890625,"distances_sum":1524.627169552704}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7451171875,"state":{"ssize":6,"bsize":5},"perf":{"precision":1.0,"recall":0.7451171875,"f1":0.8457556332556342,"seconds":5.0477683544158936e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.125,"distances_sum":1603.9214208978474}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8076171875, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.8076171875,"f1":0.8860837079587089,"seconds":5.144625902175903e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.6328125,"distances_sum":1725.106334079974}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9357460248085252,"seconds":5.478039383888245e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.734375,"distances_sum":2001.1500674596755}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9621737637362642,"seconds":5.621463060379028e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.8359375,"distances_sum":2157.018357406608}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9476076007326011,"seconds":5.5674463510513306e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.78125,"distances_sum":2048.1362535067688}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.80859375, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.80859375,"f1":0.8851169663669672,"seconds":5.334615707397461e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.5859375,"distances_sum":1748.062253755515}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8154296875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8154296875,"f1":0.8915870587745596,"seconds":5.2638351917266846e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.640625,"distances_sum":1774.0834346743325}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8291015625, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8291015625,"f1":0.8992965367965378,"seconds":5.33275306224823e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.65625,"distances_sum":1799.3646914518206}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76171875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.76171875,"f1":0.8576012529137538,"seconds":5.0943344831466675e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.390625,"distances_sum":1619.7537235137443}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.93359375,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9621737637362642,"seconds":5.621463060379028e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.8359375,"distances_sum":2157.018357406608}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.93359375,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9621737637362642,"seconds":5.621463060379028e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.8359375,"distances_sum":2157.018357406608}}, n: 9
mean(cfft.distances) = 0.3397523833189986
mean(cdnet.distances) = 0.3722833970808778
mean(crand.distances) = 0.3349653839687338
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8911111111111111
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.9
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8577777777777778
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8711111111111111
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8844444444444445
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.9022222222222221
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.88
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9466666666666667
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9444444444444445
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8644444444444445
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8866666666666667
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8844444444444445
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.9244444444444445
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9377777777777778
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8911111111111111
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.8844444444444445
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9266666666666666
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9355555555555556
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8533333333333332
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8755555555555555
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.9177777777777778
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.9
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9288888888888889
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9355555555555556
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8711111111111111
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9066666666666667
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9066666666666666
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8866666666666667
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.9022222222222224
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8911111111111111
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8955555555555555
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9066666666666667
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9044444444444445
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 2, 10]]
** centroid: 4, normalized-entropy: 0.6500224216483541, [(2, 2), (3, 10)]
*** center 5: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 22, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 9: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 1, 10]]
** centroid: 11, normalized-entropy: 0.43949698692151346, [(2, 1), (3, 10)]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 1]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 2, 3, 1, 2, 2, 3, 1, 3, 3, 3]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 2, 10]]
** centroid: 4, normalized-entropy: 0.6500224216483541, [(2, 2), (3, 10)]
*** center 5: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 22, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 9: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 1, 10]]
** centroid: 11, normalized-entropy: 0.43949698692151346, [(2, 1), (3, 10)]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 1]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 2, 3, 1, 2, 2, 3, 1, 3, 3, 3]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 2, 10]]
** centroid: 4, normalized-entropy: 0.6500224216483541, [(2, 2), (3, 10)]
*** center 5: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 22, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 9: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 1, 10]]
** centroid: 11, normalized-entropy: 0.43949698692151346, [(2, 1), (3, 10)]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 1]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 2, 3, 1, 2, 2, 3, 1, 3, 3, 3]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 2, 10]]
** centroid: 4, normalized-entropy: 0.6500224216483541, [(2, 2), (3, 10)]
*** center 5: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 22, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 9: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 1, 10]]
** centroid: 11, normalized-entropy: 0.43949698692151346, [(2, 1), (3, 10)]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 1]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 2, 3, 1, 2, 2, 3, 1, 3, 3, 3]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 2, 10]]
** centroid: 4, normalized-entropy: 0.6500224216483541, [(2, 2), (3, 10)]
*** center 5: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 22, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 9: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 1, 10]]
** centroid: 11, normalized-entropy: 0.43949698692151346, [(2, 1), (3, 10)]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 1]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 2, 3, 1, 2, 2, 3, 1, 3, 3, 3]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 2, 10]]
** centroid: 4, normalized-entropy: 0.6500224216483541, [(2, 2), (3, 10)]
*** center 5: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 22, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 9: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 1, 10]]
** centroid: 11, normalized-entropy: 0.43949698692151346, [(2, 1), (3, 10)]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 1]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 2, 3, 1, 2, 2, 3, 1, 3, 3, 3]
acc = 0.9266666666666666
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 2, 10]]
** centroid: 4, normalized-entropy: 0.6500224216483541, [(2, 2), (3, 10)]
*** center 5: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 22, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 9: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 1, 10]]
** centroid: 11, normalized-entropy: 0.43949698692151346, [(2, 1), (3, 10)]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 1]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 2, 3, 1, 2, 2, 3, 1, 3, 3, 3]
acc = 0.9666666666666667
*** finished computation of 12 references, err: [Inf, 0.6258883431553841] ***
*** center 1: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 15, 2]]
** centroid: 4, normalized-entropy: 0.5225593745369407, [(2, 15), (3, 2)]
*** center 5: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 7]]
** centroid: 9, normalized-entropy: 0.8812908992306927, [(2, 3), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 13]]
** centroid: 12, normalized-entropy: 0.3712323266408756, [(2, 1), (3, 13)]
finished with 15 centroids; started with 12
acc = 0.9333333333333333
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.39190223881298] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39190223881298, 0.24424584925261414] ***
*** finished computation of 3 references, err: [Inf, 0.39190223881298, 0.24424584925261414] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [54, 181, 28]]
** centroid: 1, normalized-entropy: 0.7470249681050707, [(1, 54), (2, 181), (3, 28)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [256, 12, 0]]
** centroid: 2, normalized-entropy: 0.26377743669413856, [(1, 256), (2, 12)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [90, 45, 0]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(1, 90), (2, 45)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19091544560416862] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19091544560416862, 0.1520707977281229] ***
*** finished computation of 7 references, err: [Inf, 0.19091544560416862, 0.1520707977281229] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [127, 3, 0]]
** centroid: 1, normalized-entropy: 0.15838440747285035, [(1, 127), (2, 3)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 55, 28]]
** centroid: 2, normalized-entropy: 0.9222596474738021, [(2, 55), (3, 28)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [51, 11, 0]]
** centroid: 3, normalized-entropy: 0.674398887071447, [(1, 51), (2, 11)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [14, 112, 0]]
** centroid: 4, normalized-entropy: 0.5032583347756457, [(1, 14), (2, 112)]
*** center 5: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [58, 57, 0]]
** centroid: 6, normalized-entropy: 0.9999454550766408, [(1, 58), (2, 57)]
*** center 7: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.33306035820835983] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33306035820835983, 0.23736467365785663] ***
*** finished computation of 3 references, err: [Inf, 0.33306035820835983, 0.23736467365785663] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [214, 55, 0]]
** centroid: 1, normalized-entropy: 0.7307608036952794, [(1, 214), (2, 55)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [185, 40, 0]]
** centroid: 2, normalized-entropy: 0.6751914401458716, [(1, 185), (2, 40)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 153, 20]]
** centroid: 3, normalized-entropy: 0.5165998933608693, [(2, 153), (3, 20)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3139261201392675] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3139261201392675, 0.23723870002548733] ***
*** finished computation of 3 references, err: [Inf, 0.3139261201392675, 0.23723870002548733] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [162, 58, 0]]
** centroid: 1, normalized-entropy: 0.8321842672305305, [(1, 162), (2, 58)]
*** center 2: selecting labels [1] (freq >= 2) [from [169, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [68, 188, 22]]
** centroid: 3, normalized-entropy: 0.7370256873833526, [(1, 68), (2, 188), (3, 22)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4612718130840833] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4612718130840833, 0.33487395434458556] ***
*** starting iteration: 2; err: [Inf, 0.4612718130840833, 0.33487395434458556] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4612718130840833, 0.33487395434458556, 0.30755184084042775] ***
*** starting iteration: 3; err: [Inf, 0.4612718130840833, 0.33487395434458556, 0.30755184084042775] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4612718130840833, 0.33487395434458556, 0.30755184084042775, 0.30122880486200926] ***
*** starting iteration: 4; err: [Inf, 0.4612718130840833, 0.33487395434458556, 0.30755184084042775, 0.30122880486200926] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4612718130840833, 0.33487395434458556, 0.30755184084042775, 0.30122880486200926, 0.30070925517113983] ***
*** finished computation of 3 references, err: [Inf, 0.4612718130840833, 0.33487395434458556, 0.30755184084042775, 0.30122880486200926, 0.30070925517113983] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 155, 28]]
** centroid: 1, normalized-entropy: 0.6173106544855739, [(2, 155), (3, 28)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [157, 53, 0]]
** centroid: 2, normalized-entropy: 0.8150300811526227, [(1, 157), (2, 53)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [243, 30, 0]]
** centroid: 3, normalized-entropy: 0.49958440742366095, [(1, 243), (2, 30)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.400580254798082] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.400580254798082, 0.321460480815724] ***
*** starting iteration: 2; err: [Inf, 0.400580254798082, 0.321460480815724] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.400580254798082, 0.321460480815724, 0.31771739906836666] ***
*** starting iteration: 3; err: [Inf, 0.400580254798082, 0.321460480815724, 0.31771739906836666] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.400580254798082, 0.321460480815724, 0.31771739906836666, 0.3154368925060535] ***
*** starting iteration: 4; err: [Inf, 0.400580254798082, 0.321460480815724, 0.31771739906836666, 0.3154368925060535] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.400580254798082, 0.321460480815724, 0.31771739906836666, 0.3154368925060535, 0.3144211564073409] ***
*** starting iteration: 5; err: [Inf, 0.400580254798082, 0.321460480815724, 0.31771739906836666, 0.3154368925060535, 0.3144211564073409] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.400580254798082, 0.321460480815724, 0.31771739906836666, 0.3154368925060535, 0.3144211564073409, 0.3135138270480075] ***
*** finished computation of 3 references, err: [Inf, 0.400580254798082, 0.321460480815724, 0.31771739906836666, 0.3154368925060535, 0.3144211564073409, 0.3135138270480075] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [57, 172, 20]]
** centroid: 1, normalized-entropy: 0.7242000498118043, [(1, 57), (2, 172), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [146, 56, 0]]
** centroid: 2, normalized-entropy: 0.8516458330898723, [(1, 146), (2, 56)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [196, 20, 0]]
** centroid: 3, normalized-entropy: 0.44506485705083854, [(1, 196), (2, 20)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.32312210681925024] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32312210681925024, 0.29999663470511223] ***
*** starting iteration: 2; err: [Inf, 0.32312210681925024, 0.29999663470511223] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32312210681925024, 0.29999663470511223, 0.29739763498001887] ***
*** starting iteration: 3; err: [Inf, 0.32312210681925024, 0.29999663470511223, 0.29739763498001887] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32312210681925024, 0.29999663470511223, 0.29739763498001887, 0.2968416821038437] ***
*** finished computation of 3 references, err: [Inf, 0.32312210681925024, 0.29999663470511223, 0.29739763498001887, 0.2968416821038437] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [264, 30, 0]]
** centroid: 1, normalized-entropy: 0.47543164626872053, [(1, 264), (2, 30)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [135, 56, 0]]
** centroid: 2, normalized-entropy: 0.8728111252237696, [(1, 135), (2, 56)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 160, 22]]
** centroid: 3, normalized-entropy: 0.5318826028800231, [(2, 160), (3, 22)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.446218627960877] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.446218627960877, 0.30516429169260123] ***
*** starting iteration: 2; err: [Inf, 0.446218627960877, 0.30516429169260123] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.446218627960877, 0.30516429169260123, 0.29444433750470056] ***
*** starting iteration: 3; err: [Inf, 0.446218627960877, 0.30516429169260123, 0.29444433750470056] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.446218627960877, 0.30516429169260123, 0.29444433750470056, 0.2923582954872008] ***
*** finished computation of 3 references, err: [Inf, 0.446218627960877, 0.30516429169260123, 0.29444433750470056, 0.2923582954872008] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [245, 11, 0]]
** centroid: 1, normalized-entropy: 0.2557420200756249, [(1, 245), (2, 11)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [2, 177, 28]]
** centroid: 2, normalized-entropy: 0.4089756156973501, [(1, 2), (2, 177), (3, 28)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [153, 50, 0]]
** centroid: 3, normalized-entropy: 0.8053696638811764, [(1, 153), (2, 50)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.40477103200172826] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40477103200172826, 0.3055236227656791] ***
*** starting iteration: 2; err: [Inf, 0.40477103200172826, 0.3055236227656791] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40477103200172826, 0.3055236227656791, 0.2940534605243909] ***
*** starting iteration: 3; err: [Inf, 0.40477103200172826, 0.3055236227656791, 0.2940534605243909] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40477103200172826, 0.3055236227656791, 0.2940534605243909, 0.2926641980177727] ***
*** finished computation of 3 references, err: [Inf, 0.40477103200172826, 0.3055236227656791, 0.2940534605243909, 0.2926641980177727] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [240, 25, 0]]
** centroid: 1, normalized-entropy: 0.4507913883546652, [(1, 240), (2, 25)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [159, 55, 0]]
** centroid: 2, normalized-entropy: 0.8221998175503582, [(1, 159), (2, 55)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 168, 20]]
** centroid: 3, normalized-entropy: 0.48890859144051524, [(2, 168), (3, 20)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.33254905911986304] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33254905911986304, 0.29927852147187606] ***
*** starting iteration: 2; err: [Inf, 0.33254905911986304, 0.29927852147187606] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33254905911986304, 0.29927852147187606, 0.29703893021274097] ***
*** starting iteration: 3; err: [Inf, 0.33254905911986304, 0.29927852147187606, 0.29703893021274097] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33254905911986304, 0.29927852147187606, 0.29703893021274097, 0.2962320457803256] ***
*** finished computation of 3 references, err: [Inf, 0.33254905911986304, 0.29927852147187606, 0.29703893021274097, 0.2962320457803256] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [98, 107, 0]]
** centroid: 1, normalized-entropy: 0.9986092103922113, [(1, 98), (2, 107)]
*** center 2: selecting labels [1] (freq >= 2) [from [225, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [76, 139, 22]]
** centroid: 3, normalized-entropy: 0.8176779172392117, [(1, 76), (2, 139), (3, 22)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.26641463486242806] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26641463486242806, 0.2346865520267202] ***
*** starting iteration: 2; err: [Inf, 0.26641463486242806, 0.2346865520267202] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26641463486242806, 0.2346865520267202, 0.23106322868646043] ***
*** starting iteration: 3; err: [Inf, 0.26641463486242806, 0.2346865520267202, 0.23106322868646043] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26641463486242806, 0.2346865520267202, 0.23106322868646043, 0.23055452374914834] ***
*** finished computation of 3 references, err: [Inf, 0.26641463486242806, 0.2346865520267202, 0.23106322868646043, 0.23055452374914834] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [146, 55, 0]]
** centroid: 1, normalized-entropy: 0.8466279606299794, [(1, 146), (2, 55)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [5, 163, 28]]
** centroid: 2, normalized-entropy: 0.4777839878312071, [(1, 5), (2, 163), (3, 28)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [249, 20, 0]]
** centroid: 3, normalized-entropy: 0.38194919161722135, [(1, 249), (2, 20)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2559764606450898] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2559764606450898, 0.2347042747875159] ***
*** starting iteration: 2; err: [Inf, 0.2559764606450898, 0.2347042747875159] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2559764606450898, 0.2347042747875159, 0.23441457004332425] ***
*** finished computation of 3 references, err: [Inf, 0.2559764606450898, 0.2347042747875159, 0.23441457004332425] ***
*** center 1: selecting labels [1] (freq >= 1) [from [232, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [57, 156, 20]]
** centroid: 2, normalized-entropy: 0.749856851667436, [(1, 57), (2, 156), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [110, 92, 0]]
** centroid: 3, normalized-entropy: 0.9942646092619051, [(1, 110), (2, 92)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.26136756362463315] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26136756362463315, 0.23440006982278208] ***
*** starting iteration: 2; err: [Inf, 0.26136756362463315, 0.23440006982278208] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26136756362463315, 0.23440006982278208, 0.23209329508314805] ***
*** starting iteration: 3; err: [Inf, 0.26136756362463315, 0.23440006982278208, 0.23209329508314805] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26136756362463315, 0.23440006982278208, 0.23209329508314805, 0.23186301174252455] ***
*** finished computation of 3 references, err: [Inf, 0.26136756362463315, 0.23440006982278208, 0.23209329508314805, 0.23186301174252455] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [77, 154, 22]]
** centroid: 1, normalized-entropy: 0.7979196219596978, [(1, 77), (2, 154), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [121, 92, 0]]
** centroid: 2, normalized-entropy: 0.9865868424442837, [(1, 121), (2, 92)]
*** center 3: selecting labels [1] (freq >= 1) [from [201, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.21726370392599376] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21726370392599376, 0.17606652720115362] ***
*** finished computation of 7 references, err: [Inf, 0.21726370392599376, 0.17606652720115362] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [132, 52, 0]]
** centroid: 1, normalized-entropy: 0.8589810370425965, [(1, 132), (2, 52)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [77, 52, 0]]
** centroid: 2, normalized-entropy: 0.9727355579283379, [(1, 77), (2, 52)]
*** center 3: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [62, 3, 0]]
** centroid: 4, normalized-entropy: 0.269828447703074, [(1, 62), (2, 3)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 131, 28]]
** centroid: 5, normalized-entropy: 0.6714719425861232, [(2, 131), (3, 28)]
*** center 6: selecting labels [1] (freq >= 2) [from [37, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [25, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.20913799045917422] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20913799045917422, 0.15489167760990594] ***
*** finished computation of 7 references, err: [Inf, 0.20913799045917422, 0.15489167760990594] ***
*** center 1: selecting labels [1] (freq >= 2) [from [119, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 49, 4]]
** centroid: 2, normalized-entropy: 0.3860189005698936, [(2, 49), (3, 4)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [14, 88, 0]]
** centroid: 3, normalized-entropy: 0.577004250315725, [(1, 14), (2, 88)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [61, 51, 0]]
** centroid: 4, normalized-entropy: 0.9942417967729406, [(1, 61), (2, 51)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [126, 5, 0]]
** centroid: 5, normalized-entropy: 0.23382826233572301, [(1, 126), (2, 5)]
*** center 6: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 55, 16]]
** centroid: 7, normalized-entropy: 0.7698205808588191, [(2, 55), (3, 16)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.26233133784044294] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26233133784044294, 0.19772682093485988] ***
*** finished computation of 7 references, err: [Inf, 0.26233133784044294, 0.19772682093485988] ***
*** center 1: selecting labels [1] (freq >= 2) [from [206, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [54, 59, 0]]
** centroid: 2, normalized-entropy: 0.998587236493277, [(1, 54), (2, 59)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [85, 80, 0]]
** centroid: 3, normalized-entropy: 0.9993375041688846, [(1, 85), (2, 80)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [54, 34, 0]]
** centroid: 4, normalized-entropy: 0.9624127354629922, [(1, 54), (2, 34)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 68, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 5, 22]]
** centroid: 6, normalized-entropy: 0.6912898694057888, [(2, 5), (3, 22)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3392669296118657] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3392669296118657, 0.2489045015508281] ***
*** finished computation of 3 references, err: [Inf, 0.3392669296118657, 0.2489045015508281] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [9, 143, 28]]
** centroid: 1, normalized-entropy: 0.5662128118206057, [(1, 9), (2, 143), (3, 28)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [170, 91, 0]]
** centroid: 2, normalized-entropy: 0.9328647268323724, [(1, 170), (2, 91)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [221, 4, 0]]
** centroid: 3, normalized-entropy: 0.1287746773258975, [(1, 221), (2, 4)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2893851518231644] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2893851518231644, 0.24812208938606453] ***
*** finished computation of 3 references, err: [Inf, 0.2893851518231644, 0.24812208938606453] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [203, 21, 0]]
** centroid: 1, normalized-entropy: 0.44886448872302936, [(1, 203), (2, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [102, 81, 0]]
** centroid: 2, normalized-entropy: 0.9904799742690307, [(1, 102), (2, 81)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [94, 146, 20]]
** centroid: 3, normalized-entropy: 0.8093647730896668, [(1, 94), (2, 146), (3, 20)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2751559250699384] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2751559250699384, 0.23681690131706454] ***
*** finished computation of 3 references, err: [Inf, 0.2751559250699384, 0.23681690131706454] ***
*** center 1: selecting labels [1] (freq >= 1) [from [193, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [94, 165, 22]]
** centroid: 2, normalized-entropy: 0.7995334550682299, [(1, 94), (2, 165), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [112, 81, 0]]
** centroid: 3, normalized-entropy: 0.9813088429462864, [(1, 112), (2, 81)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4812238531134038] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4812238531134038, 0.3086441635565312] ***
*** starting iteration: 2; err: [Inf, 0.4812238531134038, 0.3086441635565312] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4812238531134038, 0.3086441635565312, 0.30680934946659627] ***
*** starting iteration: 3; err: [Inf, 0.4812238531134038, 0.3086441635565312, 0.30680934946659627] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4812238531134038, 0.3086441635565312, 0.30680934946659627, 0.30643016564122794] ***
*** finished computation of 3 references, err: [Inf, 0.4812238531134038, 0.3086441635565312, 0.30680934946659627, 0.30643016564122794] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [79, 159, 28]]
** centroid: 1, normalized-entropy: 0.8238901809160354, [(1, 79), (2, 159), (3, 28)]
*** center 2: selecting labels [1] (freq >= 2) [from [221, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [100, 79, 0]]
** centroid: 3, normalized-entropy: 0.9900487488650184, [(1, 100), (2, 79)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3892432189193265] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3892432189193265, 0.29661594063596525] ***
*** starting iteration: 2; err: [Inf, 0.3892432189193265, 0.29661594063596525] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3892432189193265, 0.29661594063596525, 0.2950439347782224] ***
*** starting iteration: 3; err: [Inf, 0.3892432189193265, 0.29661594063596525, 0.2950439347782224] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3892432189193265, 0.29661594063596525, 0.2950439347782224, 0.294653786755428] ***
*** finished computation of 3 references, err: [Inf, 0.3892432189193265, 0.29661594063596525, 0.2950439347782224, 0.294653786755428] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [261, 29, 0]]
** centroid: 1, normalized-entropy: 0.46899559358928133, [(1, 261), (2, 29)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 163, 20]]
** centroid: 2, normalized-entropy: 0.4977695047462671, [(2, 163), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [138, 56, 0]]
** centroid: 3, normalized-entropy: 0.8669837150190186, [(1, 138), (2, 56)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4642733696783925] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4642733696783925, 0.30272290388588563] ***
*** starting iteration: 2; err: [Inf, 0.4642733696783925, 0.30272290388588563] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4642733696783925, 0.30272290388588563, 0.29814138531131945] ***
*** starting iteration: 3; err: [Inf, 0.4642733696783925, 0.30272290388588563, 0.29814138531131945] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4642733696783925, 0.30272290388588563, 0.29814138531131945, 0.2967292766409299] ***
*** starting iteration: 4; err: [Inf, 0.4642733696783925, 0.30272290388588563, 0.29814138531131945, 0.2967292766409299] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4642733696783925, 0.30272290388588563, 0.29814138531131945, 0.2967292766409299, 0.2961529620547501] ***
*** finished computation of 3 references, err: [Inf, 0.4642733696783925, 0.30272290388588563, 0.29814138531131945, 0.2967292766409299, 0.2961529620547501] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [267, 10, 0]]
** centroid: 1, normalized-entropy: 0.22412088550965586, [(1, 267), (2, 10)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [2, 171, 22]]
** centroid: 2, normalized-entropy: 0.37166336087268803, [(1, 2), (2, 171), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [130, 65, 0]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(1, 130), (2, 65)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4922193300829188] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4922193300829188, 0.31439232347147156] ***
*** finished computation of 3 references, err: [Inf, 0.4922193300829188, 0.31439232347147156] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [88, 176, 28]]
** centroid: 1, normalized-entropy: 0.811420791975089, [(1, 88), (2, 176), (3, 28)]
*** center 2: selecting labels [1] (freq >= 1) [from [212, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [100, 62, 0]]
** centroid: 3, normalized-entropy: 0.9599377175669783, [(1, 100), (2, 62)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3850495964414377] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3850495964414377, 0.29803717277407915] ***
*** finished computation of 3 references, err: [Inf, 0.3850495964414377, 0.29803717277407915] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [282, 27, 0]]
** centroid: 1, normalized-entropy: 0.4276590022251725, [(1, 282), (2, 27)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [117, 51, 0]]
** centroid: 2, normalized-entropy: 0.8856128713989709, [(1, 117), (2, 51)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 170, 20]]
** centroid: 3, normalized-entropy: 0.48546076074591343, [(2, 170), (3, 20)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3898166262850478] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3898166262850478, 0.3077934308499768] ***
*** finished computation of 3 references, err: [Inf, 0.3898166262850478, 0.3077934308499768] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [108, 177, 22]]
** centroid: 1, normalized-entropy: 0.7954679907714023, [(1, 108), (2, 177), (3, 22)]
*** center 2: selecting labels [1] (freq >= 1) [from [194, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [97, 69, 0]]
** centroid: 3, normalized-entropy: 0.9793783879141233, [(1, 97), (2, 69)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.5328227138837559] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5328227138837559, 0.29415705574916917] ***
*** starting iteration: 2; err: [Inf, 0.5328227138837559, 0.29415705574916917] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5328227138837559, 0.29415705574916917, 0.2915271079201285] ***
*** starting iteration: 3; err: [Inf, 0.5328227138837559, 0.29415705574916917, 0.2915271079201285] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5328227138837559, 0.29415705574916917, 0.2915271079201285, 0.2911859621327404] ***
*** finished computation of 3 references, err: [Inf, 0.5328227138837559, 0.29415705574916917, 0.2915271079201285, 0.2911859621327404] ***
*** center 1: selecting labels [1] (freq >= 1) [from [212, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [45, 178, 28]]
** centroid: 2, normalized-entropy: 0.7250351991145815, [(1, 45), (2, 178), (3, 28)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [143, 60, 0]]
** centroid: 3, normalized-entropy: 0.875803715727931, [(1, 143), (2, 60)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3880798558312199] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3880798558312199, 0.3008935483342883] ***
*** starting iteration: 2; err: [Inf, 0.3880798558312199, 0.3008935483342883] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3880798558312199, 0.3008935483342883, 0.2903598508967933] ***
*** starting iteration: 3; err: [Inf, 0.3880798558312199, 0.3008935483342883, 0.2903598508967933] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3880798558312199, 0.3008935483342883, 0.2903598508967933, 0.2885073183238439] ***
*** finished computation of 3 references, err: [Inf, 0.3880798558312199, 0.3008935483342883, 0.2903598508967933, 0.2885073183238439] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [77, 165, 20]]
** centroid: 1, normalized-entropy: 0.7714020141113863, [(1, 77), (2, 165), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [120, 83, 0]]
** centroid: 2, normalized-entropy: 0.9759017089348464, [(1, 120), (2, 83)]
*** center 3: selecting labels [1] (freq >= 1) [from [202, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.38634753512076175] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38634753512076175, 0.30119796476928684] ***
*** starting iteration: 2; err: [Inf, 0.38634753512076175, 0.30119796476928684] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38634753512076175, 0.30119796476928684, 0.2974629404548293] ***
*** starting iteration: 3; err: [Inf, 0.38634753512076175, 0.30119796476928684, 0.2974629404548293] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38634753512076175, 0.30119796476928684, 0.2974629404548293, 0.29680811247692024] ***
*** finished computation of 3 references, err: [Inf, 0.38634753512076175, 0.30119796476928684, 0.2974629404548293, 0.29680811247692024] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [265, 31, 0]]
** centroid: 1, normalized-entropy: 0.4838116385127609, [(1, 265), (2, 31)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 159, 22]]
** centroid: 2, normalized-entropy: 0.5337912710598184, [(2, 159), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [134, 56, 0]]
** centroid: 3, normalized-entropy: 0.8747617811911199, [(1, 134), (2, 56)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3585383806471341] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3585383806471341, 0.24507797048944566] ***
*** starting iteration: 2; err: [Inf, 0.3585383806471341, 0.24507797048944566] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3585383806471341, 0.24507797048944566, 0.24200819921470038] ***
*** starting iteration: 3; err: [Inf, 0.3585383806471341, 0.24507797048944566, 0.24200819921470038] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3585383806471341, 0.24507797048944566, 0.24200819921470038, 0.24049073831645307] ***
*** finished computation of 3 references, err: [Inf, 0.3585383806471341, 0.24507797048944566, 0.24200819921470038, 0.24049073831645307] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [267, 31, 0]]
** centroid: 1, normalized-entropy: 0.48163194535286624, [(1, 267), (2, 31)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 144, 28]]
** centroid: 2, normalized-entropy: 0.6409441847875289, [(2, 144), (3, 28)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [133, 63, 0]]
** centroid: 3, normalized-entropy: 0.9059282160429994, [(1, 133), (2, 63)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3596940227495185] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3596940227495185, 0.23410108408191124] ***
*** starting iteration: 2; err: [Inf, 0.3596940227495185, 0.23410108408191124] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3596940227495185, 0.23410108408191124, 0.231607496020743] ***
*** starting iteration: 3; err: [Inf, 0.3596940227495185, 0.23410108408191124, 0.231607496020743] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3596940227495185, 0.23410108408191124, 0.231607496020743, 0.23121799965775844] ***
*** finished computation of 3 references, err: [Inf, 0.3596940227495185, 0.23410108408191124, 0.231607496020743, 0.23121799965775844] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [244, 4, 0]]
** centroid: 1, normalized-entropy: 0.11911602665564841, [(1, 244), (2, 4)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [15, 182, 20]]
** centroid: 2, normalized-entropy: 0.5024063741169711, [(1, 15), (2, 182), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [140, 62, 0]]
** centroid: 3, normalized-entropy: 0.8895986430672326, [(1, 140), (2, 62)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3080781303496956] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3080781303496956, 0.2496051862752107] ***
*** starting iteration: 2; err: [Inf, 0.3080781303496956, 0.2496051862752107] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3080781303496956, 0.2496051862752107, 0.23815093091039777] ***
*** starting iteration: 3; err: [Inf, 0.3080781303496956, 0.2496051862752107, 0.23815093091039777] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3080781303496956, 0.2496051862752107, 0.23815093091039777, 0.2362665381712624] ***
*** finished computation of 3 references, err: [Inf, 0.3080781303496956, 0.2496051862752107, 0.23815093091039777, 0.2362665381712624] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [267, 32, 0]]
** centroid: 1, normalized-entropy: 0.4908718622898212, [(1, 267), (2, 32)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 153, 22]]
** centroid: 2, normalized-entropy: 0.5455663373066358, [(2, 153), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [132, 61, 0]]
** centroid: 3, normalized-entropy: 0.900047703865739, [(1, 132), (2, 61)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.20045046164965566] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20045046164965566, 0.1517877604985523] ***
*** finished computation of 7 references, err: [Inf, 0.20045046164965566, 0.1517877604985523] ***
*** center 1: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [73, 17, 0]]
** centroid: 2, normalized-entropy: 0.6991413063352633, [(1, 73), (2, 17)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 75, 20]]
** centroid: 3, normalized-entropy: 0.7424875695421234, [(2, 75), (3, 20)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [53, 74, 0]]
** centroid: 4, normalized-entropy: 0.9801860005643562, [(1, 53), (2, 74)]
*** center 5: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [22, 82, 0]]
** centroid: 6, normalized-entropy: 0.7444131797881749, [(1, 22), (2, 82)]
*** center 7: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19102196703836702] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19102196703836702, 0.15221168546179223] ***
*** finished computation of 7 references, err: [Inf, 0.19102196703836702, 0.15221168546179223] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [65, 68, 0]]
** centroid: 1, normalized-entropy: 0.9996329539081622, [(1, 65), (2, 68)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [57, 8, 0]]
** centroid: 2, normalized-entropy: 0.5381411852224502, [(1, 57), (2, 8)]
*** center 3: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 59, 22]]
** centroid: 4, normalized-entropy: 0.8437582063121657, [(2, 59), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [95, 22, 0]]
** centroid: 5, normalized-entropy: 0.6973409725623739, [(1, 95), (2, 22)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 89, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24009873525745742] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24009873525745742, 0.19327663524529418] ***
*** starting iteration: 2; err: [Inf, 0.24009873525745742, 0.19327663524529418] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24009873525745742, 0.19327663524529418, 0.19037950382212754] ***
*** starting iteration: 3; err: [Inf, 0.24009873525745742, 0.19327663524529418, 0.19037950382212754] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24009873525745742, 0.19327663524529418, 0.19037950382212754, 0.19040100529996884] ***
*** finished computation of 7 references, err: [Inf, 0.24009873525745742, 0.19327663524529418, 0.19037950382212754, 0.19040100529996884] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 94, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [59, 19, 0]]
** centroid: 3, normalized-entropy: 0.8009591077369054, [(1, 59), (2, 19)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [59, 22, 0]]
** centroid: 4, normalized-entropy: 0.8437582063121657, [(1, 59), (2, 22)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [101, 24, 0]]
** centroid: 5, normalized-entropy: 0.705636606460175, [(1, 101), (2, 24)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 75, 28]]
** centroid: 6, normalized-entropy: 0.844099171796772, [(2, 75), (3, 28)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [93, 4, 0]]
** centroid: 7, normalized-entropy: 0.24793583772272637, [(1, 93), (2, 4)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2535330227756317] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2535330227756317, 0.1945466150849432] ***
*** starting iteration: 2; err: [Inf, 0.2535330227756317, 0.1945466150849432] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2535330227756317, 0.1945466150849432, 0.19066633951516523] ***
*** starting iteration: 3; err: [Inf, 0.2535330227756317, 0.1945466150849432, 0.19066633951516523] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2535330227756317, 0.1945466150849432, 0.19066633951516523, 0.18988915006986176] ***
*** finished computation of 7 references, err: [Inf, 0.2535330227756317, 0.1945466150849432, 0.19066633951516523, 0.18988915006986176] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [30, 64, 0]]
** centroid: 1, normalized-entropy: 0.9034535552068337, [(1, 30), (2, 64)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [59, 15, 0]]
** centroid: 2, normalized-entropy: 0.7273006785144036, [(1, 59), (2, 15)]
*** center 3: selecting labels [1] (freq >= 2) [from [128, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [81, 9, 0]]
** centroid: 4, normalized-entropy: 0.46899559358928133, [(1, 81), (2, 9)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 80, 20]]
** centroid: 5, normalized-entropy: 0.7219280948873623, [(2, 80), (3, 20)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [17, 80, 0]]
** centroid: 6, normalized-entropy: 0.6695920597928519, [(1, 17), (2, 80)]
*** center 7: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22398954607976385] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22398954607976385, 0.1925734042007102] ***
*** starting iteration: 2; err: [Inf, 0.22398954607976385, 0.1925734042007102] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22398954607976385, 0.1925734042007102, 0.18807940934316955] ***
*** starting iteration: 3; err: [Inf, 0.22398954607976385, 0.1925734042007102, 0.18807940934316955] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22398954607976385, 0.1925734042007102, 0.18807940934316955, 0.1873650828179536] ***
*** finished computation of 7 references, err: [Inf, 0.22398954607976385, 0.1925734042007102, 0.18807940934316955, 0.1873650828179536] ***
*** center 1: selecting labels [1] (freq >= 2) [from [135, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 73, 22]]
** centroid: 2, normalized-entropy: 0.7807536250860868, [(2, 73), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [53, 17, 0]]
** centroid: 3, normalized-entropy: 0.7997594113291759, [(1, 53), (2, 17)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [77, 4, 0]]
** centroid: 4, normalized-entropy: 0.2837689703721877, [(1, 77), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [17, 86, 0]]
** centroid: 5, normalized-entropy: 0.646251622274129, [(1, 17), (2, 86)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [41, 66, 0]]
** centroid: 6, normalized-entropy: 0.9602553596067602, [(1, 41), (2, 66)]
*** center 7: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 14)
[0.9269988551425676, 0.9220537903172633, 0.9219968471465477, 0.8900157642672614, 0.8880317443191695, 0.8820137502772233, 0.8720097342851835, 0.8519687352022682, 0.8509557461653271, 0.8449976923030814, 0.8439727152302002, 0.831037624450798, 0.8150305994617372, 0.8079546612480742]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9269988551425676
finished with 15
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.3153703193300524] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3153703193300524, 0.25233647453825214] ***
*** starting iteration: 2; err: [Inf, 0.3153703193300524, 0.25233647453825214] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3153703193300524, 0.25233647453825214, 0.2427932946878421] ***
*** starting iteration: 3; err: [Inf, 0.3153703193300524, 0.25233647453825214, 0.2427932946878421] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3153703193300524, 0.25233647453825214, 0.2427932946878421, 0.2403361088269063] ***
*** starting iteration: 4; err: [Inf, 0.3153703193300524, 0.25233647453825214, 0.2427932946878421, 0.2403361088269063] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3153703193300524, 0.25233647453825214, 0.2427932946878421, 0.2403361088269063, 0.23915885389550356] ***
*** starting iteration: 5; err: [Inf, 0.3153703193300524, 0.25233647453825214, 0.2427932946878421, 0.2403361088269063, 0.23915885389550356] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3153703193300524, 0.25233647453825214, 0.2427932946878421, 0.2403361088269063, 0.23915885389550356, 0.23890737330194217] ***
*** finished computation of 3 references, err: [Inf, 0.3153703193300524, 0.25233647453825214, 0.2427932946878421, 0.2403361088269063, 0.23915885389550356, 0.23890737330194217] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [101, 123, 25]]
** centroid: 1, normalized-entropy: 0.8603333602781843, [(1, 101), (2, 123), (3, 25)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [81, 115, 3]]
** centroid: 2, normalized-entropy: 0.6790395926930434, [(1, 81), (2, 115), (3, 3)]
*** center 3: selecting labels [1] (freq >= 2) [from [218, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3223426683234802] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3223426683234802, 0.23665876226077998] ***
*** starting iteration: 2; err: [Inf, 0.3223426683234802, 0.23665876226077998] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3223426683234802, 0.23665876226077998, 0.2332735975514511] ***
*** starting iteration: 3; err: [Inf, 0.3223426683234802, 0.23665876226077998, 0.2332735975514511] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3223426683234802, 0.23665876226077998, 0.2332735975514511, 0.23245279710723096] ***
*** finished computation of 3 references, err: [Inf, 0.3223426683234802, 0.23665876226077998, 0.2332735975514511, 0.23245279710723096] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [246, 17, 0]]
** centroid: 1, normalized-entropy: 0.34559033296261116, [(1, 246), (2, 17)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [2, 171, 20]]
** centroid: 2, normalized-entropy: 0.3545395864088997, [(1, 2), (2, 171), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [151, 60, 0]]
** centroid: 3, normalized-entropy: 0.8613240637090903, [(1, 151), (2, 60)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.32944988244739565] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32944988244739565, 0.24216780496825432] ***
*** starting iteration: 2; err: [Inf, 0.32944988244739565, 0.24216780496825432] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32944988244739565, 0.24216780496825432, 0.23580392012637907] ***
*** starting iteration: 3; err: [Inf, 0.32944988244739565, 0.24216780496825432, 0.23580392012637907] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32944988244739565, 0.24216780496825432, 0.23580392012637907, 0.23455198638062963] ***
*** starting iteration: 4; err: [Inf, 0.32944988244739565, 0.24216780496825432, 0.23580392012637907, 0.23455198638062963] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32944988244739565, 0.24216780496825432, 0.23580392012637907, 0.23455198638062963, 0.23418698308227034] ***
*** finished computation of 3 references, err: [Inf, 0.32944988244739565, 0.24216780496825432, 0.23580392012637907, 0.23455198638062963, 0.23418698308227034] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [76, 147, 22]]
** centroid: 1, normalized-entropy: 0.8064942593355174, [(1, 76), (2, 147), (3, 22)]
*** center 2: selecting labels [1] (freq >= 2) [from [219, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [104, 99, 0]]
** centroid: 3, normalized-entropy: 0.9995623404632309, [(1, 104), (2, 99)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 15)
[0.9269988551425676, 0.9220537903172633, 0.9219968471465477, 0.8900157642672614, 0.8880317443191695, 0.8820137502772233, 0.876984769200338, 0.8720097342851835, 0.8519687352022682, 0.8509557461653271, 0.8449976923030814, 0.8439727152302002, 0.831037624450798, 0.8150305994617372, 0.8079546612480742]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9269988551425676
finished with 17
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.3096793061947344] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3096793061947344, 0.2192238188438207] ***
*** finished computation of 7 references, err: [Inf, 0.3096793061947344, 0.2192238188438207] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 103, 28]]
** centroid: 1, normalized-entropy: 0.7485719166711572, [(2, 103), (3, 28)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [23, 104, 0]]
** centroid: 2, normalized-entropy: 0.6824826735754346, [(1, 23), (2, 104)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [79, 15, 0]]
** centroid: 3, normalized-entropy: 0.6332905746550958, [(1, 79), (2, 15)]
*** center 4: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [47, 16, 0]]
** centroid: 7, normalized-entropy: 0.8175072881213616, [(1, 47), (2, 16)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.28779268121022894] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28779268121022894, 0.21370949792344754] ***
*** finished computation of 7 references, err: [Inf, 0.28779268121022894, 0.21370949792344754] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [131, 48, 0]]
** centroid: 1, normalized-entropy: 0.8388067647725163, [(1, 131), (2, 48)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [29, 86, 0]]
** centroid: 2, normalized-entropy: 0.814705548656723, [(1, 29), (2, 86)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 114, 20]]
** centroid: 3, normalized-entropy: 0.6079696120060726, [(2, 114), (3, 20)]
*** center 4: selecting labels [1] (freq >= 1) [from [19, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3162984871214767] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3162984871214767, 0.21491300335748756] ***
*** finished computation of 7 references, err: [Inf, 0.3162984871214767, 0.21491300335748756] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [4, 90, 0]]
** centroid: 1, normalized-entropy: 0.2538784402981617, [(1, 4), (2, 90)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 78, 22]]
** centroid: 2, normalized-entropy: 0.7601675029619658, [(2, 78), (3, 22)]
*** center 3: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [93, 21, 0]]
** centroid: 4, normalized-entropy: 0.6892019851173655, [(1, 93), (2, 21)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [72, 6, 0]]
** centroid: 5, normalized-entropy: 0.3912435636292556, [(1, 72), (2, 6)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [28, 51, 0]]
** centroid: 6, normalized-entropy: 0.9379626436434424, [(1, 28), (2, 51)]
*** center 7: selecting labels [1] (freq >= 1) [from [135, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21235008929945617] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21235008929945617, 0.1589015243300894] ***
*** finished computation of 7 references, err: [Inf, 0.21235008929945617, 0.1589015243300894] ***
*** center 1: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [64, 50, 0]]
** centroid: 3, normalized-entropy: 0.9890934397021431, [(1, 64), (2, 50)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 80, 28]]
** centroid: 4, normalized-entropy: 0.8256265261578954, [(2, 80), (3, 28)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [82, 31, 0]]
** centroid: 5, normalized-entropy: 0.8476183429401788, [(1, 82), (2, 31)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [86, 24, 0]]
** centroid: 6, normalized-entropy: 0.7568336324184036, [(1, 86), (2, 24)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [15, 53, 0]]
** centroid: 7, normalized-entropy: 0.7612401496918493, [(1, 15), (2, 53)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2032834559775375] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2032834559775375, 0.15702941607700652] ***
*** finished computation of 7 references, err: [Inf, 0.2032834559775375, 0.15702941607700652] ***
*** center 1: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [15, 44, 0]]
** centroid: 2, normalized-entropy: 0.8179252501386403, [(1, 15), (2, 44)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [78, 58, 0]]
** centroid: 3, normalized-entropy: 0.9843432030984676, [(1, 78), (2, 58)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [93, 47, 0]]
** centroid: 4, normalized-entropy: 0.9206584065028529, [(1, 93), (2, 47)]
*** center 5: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 99, 20]]
** centroid: 6, normalized-entropy: 0.6532642567060226, [(2, 99), (3, 20)]
*** center 7: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26652000004769827] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26652000004769827, 0.1867852198976515] ***
*** finished computation of 7 references, err: [Inf, 0.26652000004769827, 0.1867852198976515] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [32, 108, 0]]
** centroid: 1, normalized-entropy: 0.775512658133148, [(1, 32), (2, 108)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [18, 9, 0]]
** centroid: 2, normalized-entropy: 0.9182958340544894, [(1, 18), (2, 9)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 71, 22]]
** centroid: 3, normalized-entropy: 0.7892712724536985, [(2, 71), (3, 22)]
*** center 4: selecting labels [1] (freq >= 1) [from [140, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [20, 56, 0]]
** centroid: 5, normalized-entropy: 0.8314743880097292, [(1, 20), (2, 56)]
*** center 6: selecting labels [1] (freq >= 1) [from [49, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [140, 2, 0]]
** centroid: 7, normalized-entropy: 0.10679203237584184, [(1, 140), (2, 2)]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 17)
[0.9269988551425676, 0.9220537903172633, 0.9219968471465477, 0.9190058321794848, 0.8940167712622803, 0.8900157642672614, 0.8880317443191695, 0.8820137502772233, 0.876984769200338, 0.8720097342851835, 0.8519687352022682, 0.8509557461653271, 0.8449976923030814, 0.8439727152302002, 0.831037624450798, 0.8150305994617372, 0.8079546612480742]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9269988551425676
finished with 18
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.31915595170177585] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31915595170177585, 0.253431013157429] ***
*** starting iteration: 2; err: [Inf, 0.31915595170177585, 0.253431013157429] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31915595170177585, 0.253431013157429, 0.23596630696005919] ***
*** starting iteration: 3; err: [Inf, 0.31915595170177585, 0.253431013157429, 0.23596630696005919] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31915595170177585, 0.253431013157429, 0.23596630696005919, 0.23193930452493755] ***
*** starting iteration: 4; err: [Inf, 0.31915595170177585, 0.253431013157429, 0.23596630696005919, 0.23193930452493755] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31915595170177585, 0.253431013157429, 0.23596630696005919, 0.23193930452493755, 0.23090147174889217] ***
*** starting iteration: 5; err: [Inf, 0.31915595170177585, 0.253431013157429, 0.23596630696005919, 0.23193930452493755, 0.23090147174889217] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31915595170177585, 0.253431013157429, 0.23596630696005919, 0.23193930452493755, 0.23090147174889217, 0.23052090584641663] ***
*** finished computation of 3 references, err: [Inf, 0.31915595170177585, 0.253431013157429, 0.23596630696005919, 0.23193930452493755, 0.23090147174889217, 0.23052090584641663] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [53, 174, 28]]
** centroid: 1, normalized-entropy: 0.7553892731685039, [(1, 53), (2, 174), (3, 28)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [136, 64, 0]]
** centroid: 2, normalized-entropy: 0.9043814577244941, [(1, 136), (2, 64)]
*** center 3: selecting labels [1] (freq >= 1) [from [211, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3483902046218168] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3483902046218168, 0.23893361982807093] ***
*** starting iteration: 2; err: [Inf, 0.3483902046218168, 0.23893361982807093] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3483902046218168, 0.23893361982807093, 0.22928502339300053] ***
*** starting iteration: 3; err: [Inf, 0.3483902046218168, 0.23893361982807093, 0.22928502339300053] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3483902046218168, 0.23893361982807093, 0.22928502339300053, 0.22786713408437492] ***
*** starting iteration: 4; err: [Inf, 0.3483902046218168, 0.23893361982807093, 0.22928502339300053, 0.22786713408437492] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3483902046218168, 0.23893361982807093, 0.22928502339300053, 0.22786713408437492, 0.2276793053747899] ***
*** finished computation of 3 references, err: [Inf, 0.3483902046218168, 0.23893361982807093, 0.22928502339300053, 0.22786713408437492, 0.2276793053747899] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [63, 171, 20]]
** centroid: 1, normalized-entropy: 0.739394858086354, [(1, 63), (2, 171), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [130, 77, 0]]
** centroid: 2, normalized-entropy: 0.9521807771746562, [(1, 130), (2, 77)]
*** center 3: selecting labels [1] (freq >= 1) [from [206, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.41813689400197596] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41813689400197596, 0.2856732916835321] ***
*** starting iteration: 2; err: [Inf, 0.41813689400197596, 0.2856732916835321] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41813689400197596, 0.2856732916835321, 0.25240061360912613] ***
*** starting iteration: 3; err: [Inf, 0.41813689400197596, 0.2856732916835321, 0.25240061360912613] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41813689400197596, 0.2856732916835321, 0.25240061360912613, 0.23987331947470936] ***
*** starting iteration: 4; err: [Inf, 0.41813689400197596, 0.2856732916835321, 0.25240061360912613, 0.23987331947470936] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41813689400197596, 0.2856732916835321, 0.25240061360912613, 0.23987331947470936, 0.23717438565173382] ***
*** starting iteration: 5; err: [Inf, 0.41813689400197596, 0.2856732916835321, 0.25240061360912613, 0.23987331947470936, 0.23717438565173382] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41813689400197596, 0.2856732916835321, 0.25240061360912613, 0.23987331947470936, 0.23717438565173382, 0.23628496256694645] ***
*** finished computation of 3 references, err: [Inf, 0.41813689400197596, 0.2856732916835321, 0.25240061360912613, 0.23987331947470936, 0.23717438565173382, 0.23628496256694645] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [250, 7, 0]]
** centroid: 1, normalized-entropy: 0.1803422316066214, [(1, 250), (2, 7)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [142, 57, 0]]
** centroid: 2, normalized-entropy: 0.864067727191613, [(1, 142), (2, 57)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [7, 182, 22]]
** centroid: 3, normalized-entropy: 0.4335005434350961, [(1, 7), (2, 182), (3, 22)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 18)
[0.9269988551425676, 0.9220537903172633, 0.9219968471465477, 0.9190058321794848, 0.900004795214376, 0.8940167712622803, 0.8900157642672614, 0.8880317443191695, 0.8820137502772233, 0.876984769200338, 0.8720097342851835, 0.8519687352022682, 0.8509557461653271, 0.8449976923030814, 0.8439727152302002, 0.831037624450798, 0.8150305994617372, 0.8079546612480742]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9269988551425676
finished with 18
iteration 5 finished
generating 4 configurations using top 12 configurations, starting with 18)
[0.9269988551425676, 0.9220537903172633, 0.9219968471465477, 0.9190058321794848, 0.900004795214376, 0.8940167712622803, 0.8900157642672614, 0.8880317443191695, 0.8820137502772233, 0.876984769200338, 0.8720097342851835, 0.8519687352022682, 0.8509557461653271, 0.8449976923030814, 0.8439727152302002, 0.831037624450798, 0.8150305994617372, 0.8079546612480742]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9269988551425676
finished with 18
iteration 6 finished
generating 4 configurations using top 12 configurations, starting with 18)
[0.9269988551425676, 0.9220537903172633, 0.9219968471465477, 0.9190058321794848, 0.900004795214376, 0.8940167712622803, 0.8900157642672614, 0.8880317443191695, 0.8820137502772233, 0.876984769200338, 0.8720097342851835, 0.8519687352022682, 0.8509557461653271, 0.8449976923030814, 0.8439727152302002, 0.831037624450798, 0.8150305994617372, 0.8079546612480742]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9269988551425676
finished with 19
iteration 7 finished
*** starting iteration: 1; err: [Inf, 0.3689602115135584] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3689602115135584, 0.23116859784293864] ***
*** finished computation of 3 references, err: [Inf, 0.3689602115135584, 0.23116859784293864] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [257, 22, 0]]
** centroid: 1, normalized-entropy: 0.3981248790232835, [(1, 257), (2, 22)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [5, 162, 28]]
** centroid: 2, normalized-entropy: 0.47937114860770863, [(1, 5), (2, 162), (3, 28)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [138, 54, 0]]
** centroid: 3, normalized-entropy: 0.8571484374283717, [(1, 138), (2, 54)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.39782262799041024] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39782262799041024, 0.23179276404285182] ***
*** finished computation of 3 references, err: [Inf, 0.39782262799041024, 0.23179276404285182] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [250, 4, 0]]
** centroid: 1, normalized-entropy: 0.116849760923655, [(1, 250), (2, 4)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [13, 185, 20]]
** centroid: 2, normalized-entropy: 0.47931656501558595, [(1, 13), (2, 185), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [136, 59, 0]]
** centroid: 3, normalized-entropy: 0.8844026915834835, [(1, 136), (2, 59)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3297645146406997] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3297645146406997, 0.23763099045114316] ***
*** finished computation of 3 references, err: [Inf, 0.3297645146406997, 0.23763099045114316] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [86, 195, 22]]
** centroid: 1, normalized-entropy: 0.7568784107657092, [(1, 86), (2, 195), (3, 22)]
*** center 2: selecting labels [1] (freq >= 1) [from [193, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [120, 51, 0]]
** centroid: 3, normalized-entropy: 0.8791357668533337, [(1, 120), (2, 51)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 19)
[0.9269988551425676, 0.9220537903172633, 0.9219968471465477, 0.9190058321794848, 0.900004795214376, 0.8940167712622803, 0.8900157642672614, 0.8880317443191695, 0.8820137502772233, 0.8780217343091595, 0.876984769200338, 0.8720097342851835, 0.8519687352022682, 0.8509557461653271, 0.8449976923030814, 0.8439727152302002, 0.831037624450798, 0.8150305994617372, 0.8079546612480742]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9269988551425676
finished with 19
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 19)
[0.9269988551425676, 0.9220537903172633, 0.9219968471465477, 0.9190058321794848, 0.900004795214376, 0.8940167712622803, 0.8900157642672614, 0.8880317443191695, 0.8820137502772233, 0.8780217343091595, 0.876984769200338, 0.8720097342851835, 0.8519687352022682, 0.8509557461653271, 0.8449976923030814, 0.8439727152302002, 0.831037624450798, 0.8150305994617372, 0.8079546612480742]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9269988551425676
finished with 19
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.21378980938345193] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21378980938345193, 0.15448195297061465] ***
*** finished computation of 7 references, err: [Inf, 0.21378980938345193, 0.15448195297061465] ***
*** center 1: selecting labels [1] (freq >= 2) [from [192, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 92, 35]]
** centroid: 2, normalized-entropy: 0.8493728320452445, [(2, 92), (3, 35)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [76, 46, 0]]
** centroid: 3, normalized-entropy: 0.9559312637896479, [(1, 76), (2, 46)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [154, 11, 0]]
** centroid: 4, normalized-entropy: 0.3533593350214213, [(1, 154), (2, 11)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [63, 108, 0]]
** centroid: 5, normalized-entropy: 0.9494520153879484, [(1, 63), (2, 108)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [3, 109, 0]]
** centroid: 6, normalized-entropy: 0.17800689613931453, [(1, 3), (2, 109)]
*** center 7: selecting labels [1] (freq >= 2) [from [111, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21534504671767354] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21534504671767354, 0.15064092325791717] ***
*** finished computation of 7 references, err: [Inf, 0.21534504671767354, 0.15064092325791717] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [52, 39, 0]]
** centroid: 1, normalized-entropy: 0.9852281360342514, [(1, 52), (2, 39)]
*** center 2: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [38, 7, 0]]
** centroid: 3, normalized-entropy: 0.6235702082127973, [(1, 38), (2, 7)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [65, 21, 0]]
** centroid: 4, normalized-entropy: 0.8019325020834525, [(1, 65), (2, 21)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 51, 19]]
** centroid: 5, normalized-entropy: 0.8435070855739035, [(2, 51), (3, 19)]
*** center 6: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 63, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20207643766328692] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20207643766328692, 0.1495100102405995] ***
*** finished computation of 7 references, err: [Inf, 0.20207643766328692, 0.1495100102405995] ***
*** center 1: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 51, 14]]
** centroid: 2, normalized-entropy: 0.7516499461153354, [(2, 51), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [37, 14, 0]]
** centroid: 3, normalized-entropy: 0.8478617451660525, [(1, 37), (2, 14)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [62, 50, 0]]
** centroid: 4, normalized-entropy: 0.9917033083725819, [(1, 62), (2, 50)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [16, 79, 0]]
** centroid: 5, normalized-entropy: 0.6540800387941991, [(1, 16), (2, 79)]
*** center 6: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1947025255896151] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1947025255896151, 0.15065050887688994] ***
*** finished computation of 7 references, err: [Inf, 0.1947025255896151, 0.15065050887688994] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 69, 17]]
** centroid: 1, normalized-entropy: 0.7172524777375696, [(2, 69), (3, 17)]
*** center 2: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [45, 6, 0]]
** centroid: 3, normalized-entropy: 0.5225593745369407, [(1, 45), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [48, 25, 0]]
** centroid: 4, normalized-entropy: 0.9271587399898307, [(1, 48), (2, 25)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [73, 20, 0]]
** centroid: 5, normalized-entropy: 0.7510324165275097, [(1, 73), (2, 20)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 63, 1]]
*** center 7: selecting labels [1] (freq >= 2) [from [74, 1, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18455719066411258] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18455719066411258, 0.1544585459525697] ***
*** finished computation of 7 references, err: [Inf, 0.18455719066411258, 0.1544585459525697] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [102, 23, 0]]
** centroid: 1, normalized-entropy: 0.6887498056988564, [(1, 102), (2, 23)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [36, 5, 0]]
** centroid: 2, normalized-entropy: 0.5349436990971067, [(1, 36), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 22, 21]]
** centroid: 3, normalized-entropy: 0.9996098363678071, [(2, 22), (3, 21)]
*** center 4: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [74, 2, 0]]
** centroid: 5, normalized-entropy: 0.17556502585750275, [(1, 74), (2, 2)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [5, 67, 0]]
** centroid: 6, normalized-entropy: 0.3638469981769295, [(1, 5), (2, 67)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 72, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19149188739433884] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19149188739433884, 0.15116831312561407] ***
*** finished computation of 7 references, err: [Inf, 0.19149188739433884, 0.15116831312561407] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [52, 46, 0]]
** centroid: 1, normalized-entropy: 0.9972943816462351, [(1, 52), (2, 46)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [44, 11, 0]]
** centroid: 2, normalized-entropy: 0.7219280948873623, [(1, 44), (2, 11)]
*** center 3: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 50, 18]]
** centroid: 4, normalized-entropy: 0.8337649072106652, [(2, 50), (3, 18)]
*** center 5: selecting labels [1] (freq >= 2) [from [94, 1, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [40, 9, 0]]
** centroid: 6, normalized-entropy: 0.6880476235340797, [(1, 40), (2, 9)]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 69, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19924896452762186] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19924896452762186, 0.1509766134470701] ***
*** finished computation of 7 references, err: [Inf, 0.19924896452762186, 0.1509766134470701] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [35, 48, 0]]
** centroid: 1, normalized-entropy: 0.9822309298084991, [(1, 35), (2, 48)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [48, 27, 0]]
** centroid: 2, normalized-entropy: 0.9426831892554921, [(1, 48), (2, 27)]
*** center 3: selecting labels [1] (freq >= 2) [from [47, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 75, 17]]
** centroid: 4, normalized-entropy: 0.6904285855304167, [(2, 75), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [39, 37, 0]]
** centroid: 5, normalized-entropy: 0.9995003941817588, [(1, 39), (2, 37)]
*** center 6: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18756298069003968] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18756298069003968, 0.15132432093843817] ***
*** finished computation of 7 references, err: [Inf, 0.18756298069003968, 0.15132432093843817] ***
*** center 1: selecting labels [1] (freq >= 2) [from [120, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 36, 20]]
** centroid: 2, normalized-entropy: 0.940285958670631, [(2, 36), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [32, 9, 0]]
** centroid: 3, normalized-entropy: 0.7592757847892834, [(1, 32), (2, 9)]
*** center 4: selecting labels [1] (freq >= 2) [from [61, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [18, 71, 0]]
** centroid: 5, normalized-entropy: 0.7263997735417457, [(1, 18), (2, 71)]
*** center 6: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [13, 67, 0]]
** centroid: 7, normalized-entropy: 0.6402569436810504, [(1, 13), (2, 67)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1880698476601392] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1880698476601392, 0.15182486214581878] ***
*** finished computation of 7 references, err: [Inf, 0.1880698476601392, 0.15182486214581878] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [4, 73, 1]]
** centroid: 1, normalized-entropy: 0.29461520565280713, [(1, 4), (2, 73)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [41, 22, 0]]
** centroid: 2, normalized-entropy: 0.9333572600179806, [(1, 41), (2, 22)]
*** center 3: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 65, 16]]
** centroid: 4, normalized-entropy: 0.7169622516889513, [(2, 65), (3, 16)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [78, 17, 0]]
** centroid: 5, normalized-entropy: 0.6777688570413568, [(1, 78), (2, 17)]
*** center 6: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20147856981679796] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20147856981679796, 0.15420063568186015] ***
*** finished computation of 7 references, err: [Inf, 0.20147856981679796, 0.15420063568186015] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [40, 60, 0]]
** centroid: 1, normalized-entropy: 0.9709505944546688, [(1, 40), (2, 60)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [51, 10, 0]]
** centroid: 2, normalized-entropy: 0.6436394131461666, [(1, 51), (2, 10)]
*** center 3: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 36, 19]]
** centroid: 4, normalized-entropy: 0.9299429352091801, [(2, 36), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [43, 8, 0]]
** centroid: 5, normalized-entropy: 0.6267511370265896, [(1, 43), (2, 8)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [91, 3, 0]]
** centroid: 6, normalized-entropy: 0.2039058755048202, [(1, 91), (2, 3)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 50, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19279177865758537] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19279177865758537, 0.1581106812879443] ***
*** finished computation of 7 references, err: [Inf, 0.19279177865758537, 0.1581106812879443] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 79, 21]]
** centroid: 1, normalized-entropy: 0.7414827399312738, [(2, 79), (3, 21)]
*** center 2: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [42, 4, 0]]
** centroid: 3, normalized-entropy: 0.42622865699814483, [(1, 42), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [45, 16, 0]]
** centroid: 4, normalized-entropy: 0.8301899714180444, [(1, 45), (2, 16)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [77, 15, 0]]
** centroid: 5, normalized-entropy: 0.6415410585827175, [(1, 77), (2, 15)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [78, 4, 0]]
** centroid: 6, normalized-entropy: 0.2811937964320427, [(1, 78), (2, 4)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 65, 2]]
** centroid: 7, normalized-entropy: 0.19364280468389852, [(2, 65), (3, 2)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18540614382456988] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18540614382456988, 0.15006935518421233] ***
*** finished computation of 7 references, err: [Inf, 0.18540614382456988, 0.15006935518421233] ***
*** center 1: selecting labels [1] (freq >= 2) [from [99, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 37, 16]]
** centroid: 2, normalized-entropy: 0.8835850861052531, [(2, 37), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [44, 8, 0]]
** centroid: 3, normalized-entropy: 0.6193821946787638, [(1, 44), (2, 8)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [65, 5, 0]]
** centroid: 4, normalized-entropy: 0.3712323266408756, [(1, 65), (2, 5)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [18, 71, 0]]
** centroid: 5, normalized-entropy: 0.7263997735417457, [(1, 18), (2, 71)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [16, 60, 0]]
** centroid: 6, normalized-entropy: 0.7424875695421234, [(1, 16), (2, 60)]
*** center 7: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20468097705766558] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20468097705766558, 0.14825754782184958] ***
*** finished computation of 7 references, err: [Inf, 0.20468097705766558, 0.14825754782184958] ***
*** center 1: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 75, 9]]
** centroid: 2, normalized-entropy: 0.4912373418243334, [(2, 75), (3, 9)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [46, 18, 0]]
** centroid: 3, normalized-entropy: 0.8571484374283717, [(1, 46), (2, 18)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [50, 29, 0]]
** centroid: 4, normalized-entropy: 0.9484103893488014, [(1, 50), (2, 29)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [29, 58, 0]]
** centroid: 5, normalized-entropy: 0.9182958340544894, [(1, 29), (2, 58)]
*** center 6: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2044304125867784] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2044304125867784, 0.15394849817221984] ***
*** finished computation of 7 references, err: [Inf, 0.2044304125867784, 0.15394849817221984] ***
*** center 1: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [50, 9, 0]]
** centroid: 2, normalized-entropy: 0.6161661934005354, [(1, 50), (2, 9)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 43, 19]]
** centroid: 3, normalized-entropy: 0.8890349038123858, [(2, 43), (3, 19)]
*** center 4: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [28, 63, 0]]
** centroid: 5, normalized-entropy: 0.8904916402194913, [(1, 28), (2, 63)]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 53, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [37, 9, 0]]
** centroid: 7, normalized-entropy: 0.7131467486384921, [(1, 37), (2, 9)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1911427858825773] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1911427858825773, 0.14819522676989436] ***
*** finished computation of 7 references, err: [Inf, 0.1911427858825773, 0.14819522676989436] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [10, 76, 0]]
** centroid: 1, normalized-entropy: 0.5185697317883058, [(1, 10), (2, 76)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [47, 26, 0]]
** centroid: 2, normalized-entropy: 0.9394532068181357, [(1, 47), (2, 26)]
*** center 3: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [42, 9, 0]]
** centroid: 4, normalized-entropy: 0.6722948170756378, [(1, 42), (2, 9)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 48, 15]]
** centroid: 5, normalized-entropy: 0.7918583525674836, [(2, 48), (3, 15)]
*** center 6: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [93, 11, 0]]
** centroid: 7, normalized-entropy: 0.48702128315977294, [(1, 93), (2, 11)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18829261873289943] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18829261873289943, 0.1499241082142107] ***
*** finished computation of 7 references, err: [Inf, 0.18829261873289943, 0.1499241082142107] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [60, 55, 0]]
** centroid: 1, normalized-entropy: 0.9986359641585719, [(1, 60), (2, 55)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [48, 4, 0]]
** centroid: 2, normalized-entropy: 0.3912435636292556, [(1, 48), (2, 4)]
*** center 3: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 45, 15]]
** centroid: 4, normalized-entropy: 0.8112781244591328, [(2, 45), (3, 15)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [75, 10, 0]]
** centroid: 5, normalized-entropy: 0.5225593745369407, [(1, 75), (2, 10)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 70, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22431840676255524] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22431840676255524, 0.15338410509191452] ***
*** finished computation of 7 references, err: [Inf, 0.22431840676255524, 0.15338410509191452] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [27, 61, 0]]
** centroid: 1, normalized-entropy: 0.8894663896628687, [(1, 27), (2, 61)]
*** center 2: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [104, 3, 0]]
** centroid: 3, normalized-entropy: 0.18445186314098744, [(1, 104), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [38, 17, 0]]
** centroid: 4, normalized-entropy: 0.8921212805771683, [(1, 38), (2, 17)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 39, 20]]
** centroid: 5, normalized-entropy: 0.9238422284571813, [(2, 39), (3, 20)]
*** center 6: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 53, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2026281159017235] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2026281159017235, 0.14751915137958713] ***
*** finished computation of 7 references, err: [Inf, 0.2026281159017235, 0.14751915137958713] ***
*** center 1: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 50, 27]]
** centroid: 2, normalized-entropy: 0.9346466439786693, [(2, 50), (3, 27)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [59, 16, 0]]
** centroid: 3, normalized-entropy: 0.7478061583312324, [(1, 59), (2, 16)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [55, 3, 0]]
** centroid: 4, normalized-entropy: 0.29367630985136944, [(1, 55), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [26, 50, 0]]
** centroid: 5, normalized-entropy: 0.9268190639645774, [(1, 26), (2, 50)]
*** center 6: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 70, 0]]
** centroid: 7, normalized-entropy: 0.18312206830137262, [(1, 2), (2, 70)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19407377156987787] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19407377156987787, 0.15121185513492674] ***
*** finished computation of 7 references, err: [Inf, 0.19407377156987787, 0.15121185513492674] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [82, 14, 0]]
** centroid: 1, normalized-entropy: 0.5993142373098089, [(1, 82), (2, 14)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [39, 9, 0]]
** centroid: 2, normalized-entropy: 0.6962122601251459, [(1, 39), (2, 9)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 49, 15]]
** centroid: 3, normalized-entropy: 0.7855602922535471, [(2, 49), (3, 15)]
*** center 4: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [45, 27, 0]]
** centroid: 5, normalized-entropy: 0.954434002924965, [(1, 45), (2, 27)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [6, 90, 0]]
** centroid: 6, normalized-entropy: 0.3372900666170139, [(1, 6), (2, 90)]
*** center 7: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19547643702849746] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19547643702849746, 0.1521588818244636] ***
*** finished computation of 7 references, err: [Inf, 0.19547643702849746, 0.1521588818244636] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [53, 53, 0]]
** centroid: 1, normalized-entropy: 1.0, [(1, 53), (2, 53)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [60, 5, 0]]
** centroid: 2, normalized-entropy: 0.3912435636292556, [(1, 60), (2, 5)]
*** center 3: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 52, 16]]
** centroid: 4, normalized-entropy: 0.787126586201269, [(2, 52), (3, 16)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [78, 14, 0]]
** centroid: 5, normalized-entropy: 0.6152538910563409, [(1, 78), (2, 14)]
*** center 6: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 64, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21658683443441987] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21658683443441987, 0.1523521291408688] ***
*** finished computation of 7 references, err: [Inf, 0.21658683443441987, 0.1523521291408688] ***
*** center 1: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 43, 15]]
** centroid: 2, normalized-entropy: 0.8246578332945033, [(2, 43), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [40, 23, 0]]
** centroid: 3, normalized-entropy: 0.9468188316776024, [(1, 40), (2, 23)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [89, 3, 0]]
** centroid: 4, normalized-entropy: 0.20731018585948177, [(1, 89), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [29, 59, 0]]
** centroid: 5, normalized-entropy: 0.9144612916935675, [(1, 29), (2, 59)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 60, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20545903675444424] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20545903675444424, 0.15314024417567998] ***
*** finished computation of 7 references, err: [Inf, 0.20545903675444424, 0.15314024417567998] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [30, 57, 0]]
** centroid: 1, normalized-entropy: 0.9293636260137188, [(1, 30), (2, 57)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [60, 3, 0]]
** centroid: 2, normalized-entropy: 0.2761954276479391, [(1, 60), (2, 3)]
*** center 3: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 58, 15]]
** centroid: 4, normalized-entropy: 0.7327525499549903, [(2, 58), (3, 15)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [87, 17, 0]]
** centroid: 5, normalized-entropy: 0.6425267139094084, [(1, 87), (2, 17)]
*** center 6: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 48, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.184546249053441] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.184546249053441, 0.15449024770595132] ***
*** finished computation of 7 references, err: [Inf, 0.184546249053441, 0.15449024770595132] ***
*** center 1: selecting labels [1] (freq >= 2) [from [119, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 42, 16]]
** centroid: 2, normalized-entropy: 0.8497511372532974, [(2, 42), (3, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [41, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [56, 4, 0]]
** centroid: 4, normalized-entropy: 0.3533593350214213, [(1, 56), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [18, 72, 0]]
** centroid: 5, normalized-entropy: 0.7219280948873623, [(1, 18), (2, 72)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [5, 58, 0]]
** centroid: 6, normalized-entropy: 0.39993804743902767, [(1, 5), (2, 58)]
*** center 7: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20130196370370687] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20130196370370687, 0.1523582233004272] ***
*** finished computation of 7 references, err: [Inf, 0.20130196370370687, 0.1523582233004272] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [50, 45, 0]]
** centroid: 1, normalized-entropy: 0.9980008838722993, [(1, 50), (2, 45)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [41, 5, 0]]
** centroid: 2, normalized-entropy: 0.49596907206183377, [(1, 41), (2, 5)]
*** center 3: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 50, 17]]
** centroid: 4, normalized-entropy: 0.8171387756817725, [(2, 50), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [57, 13, 0]]
** centroid: 5, normalized-entropy: 0.6924194863274741, [(1, 57), (2, 13)]
*** center 6: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 76, 0]]
** centroid: 7, normalized-entropy: 0.17203694935311387, [(1, 2), (2, 76)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19855663312226535] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19855663312226535, 0.14678313847724347] ***
*** finished computation of 7 references, err: [Inf, 0.19855663312226535, 0.14678313847724347] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [6, 76, 0]]
** centroid: 1, normalized-entropy: 0.3776463213737003, [(1, 6), (2, 76)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [52, 12, 0]]
** centroid: 2, normalized-entropy: 0.6962122601251459, [(1, 52), (2, 12)]
*** center 3: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 62, 17]]
** centroid: 4, normalized-entropy: 0.751286576718343, [(2, 62), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [74, 21, 0]]
** centroid: 5, normalized-entropy: 0.762084924805724, [(1, 74), (2, 21)]
*** center 6: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [50, 5, 0]]
** centroid: 7, normalized-entropy: 0.43949698692151346, [(1, 50), (2, 5)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18990642001852392] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18990642001852392, 0.14911919983802363] ***
*** finished computation of 7 references, err: [Inf, 0.18990642001852392, 0.14911919983802363] ***
*** center 1: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 44, 21]]
** centroid: 2, normalized-entropy: 0.9076961653608385, [(2, 44), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [38, 32, 0]]
** centroid: 3, normalized-entropy: 0.9946937953613056, [(1, 38), (2, 32)]
*** center 4: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [28, 63, 0]]
** centroid: 5, normalized-entropy: 0.8904916402194913, [(1, 28), (2, 63)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 56, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1915547986952588] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1915547986952588, 0.15049802858475594] ***
*** finished computation of 7 references, err: [Inf, 0.1915547986952588, 0.15049802858475594] ***
*** center 1: selecting labels [1] (freq >= 2) [from [86, 1, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 51, 17]]
** centroid: 2, normalized-entropy: 0.8112781244591328, [(2, 51), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [35, 5, 0]]
** centroid: 3, normalized-entropy: 0.5435644431995963, [(1, 35), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [17, 81, 0]]
** centroid: 4, normalized-entropy: 0.665580063146735, [(1, 17), (2, 81)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [42, 47, 0]]
** centroid: 5, normalized-entropy: 0.9977221075331744, [(1, 42), (2, 47)]
*** center 6: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19260851081460714] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19260851081460714, 0.14863818387687205] ***
*** finished computation of 7 references, err: [Inf, 0.19260851081460714, 0.14863818387687205] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [91, 11, 0]]
** centroid: 1, normalized-entropy: 0.493375733509813, [(1, 91), (2, 11)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [46, 9, 0]]
** centroid: 2, normalized-entropy: 0.6429383500409613, [(1, 46), (2, 9)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 41, 22]]
** centroid: 3, normalized-entropy: 0.9333572600179806, [(2, 41), (3, 22)]
*** center 4: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [6, 93, 0]]
** centroid: 5, normalized-entropy: 0.32984607020714635, [(1, 6), (2, 93)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [39, 24, 0]]
** centroid: 6, normalized-entropy: 0.9587118829771317, [(1, 39), (2, 24)]
*** center 7: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20697898961603642] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20697898961603642, 0.15026396172121168] ***
*** finished computation of 7 references, err: [Inf, 0.20697898961603642, 0.15026396172121168] ***
*** center 1: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 49, 19]]
** centroid: 2, normalized-entropy: 0.8546480601169081, [(2, 49), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [42, 8, 0]]
** centroid: 3, normalized-entropy: 0.634309554640566, [(1, 42), (2, 8)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [55, 19, 0]]
** centroid: 4, normalized-entropy: 0.8218127305034848, [(1, 55), (2, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [57, 54, 0]]
** centroid: 5, normalized-entropy: 0.9994730201859837, [(1, 57), (2, 54)]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 61, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18737652193196117] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18737652193196117, 0.1534543829448521] ***
*** finished computation of 7 references, err: [Inf, 0.18737652193196117, 0.1534543829448521] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 70, 17]]
** centroid: 1, normalized-entropy: 0.7126368350739763, [(2, 70), (3, 17)]
*** center 2: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [59, 14, 0]]
** centroid: 3, normalized-entropy: 0.7051819722888517, [(1, 59), (2, 14)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [27, 4, 0]]
** centroid: 4, normalized-entropy: 0.5547781633412736, [(1, 27), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [88, 29, 0]]
** centroid: 5, normalized-entropy: 0.8078738537818512, [(1, 88), (2, 29)]
*** center 6: selecting labels [1] (freq >= 2) [from [42, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [23, 55, 0]]
** centroid: 7, normalized-entropy: 0.8749315876677922, [(1, 23), (2, 55)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1901064305836335] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1901064305836335, 0.1518560301233083] ***
*** finished computation of 7 references, err: [Inf, 0.1901064305836335, 0.1518560301233083] ***
*** center 1: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 48, 21]]
** centroid: 2, normalized-entropy: 0.8865408928220899, [(2, 48), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [28, 19, 0]]
** centroid: 3, normalized-entropy: 0.9733854352299557, [(1, 28), (2, 19)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [36, 40, 0]]
** centroid: 4, normalized-entropy: 0.9980008838722993, [(1, 36), (2, 40)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [10, 84, 0]]
** centroid: 5, normalized-entropy: 0.48890859144051524, [(1, 10), (2, 84)]
*** center 6: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
finished with 10 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 366,3 => 35,1 => 599), Dict(2 => 405,3 => 27,1 => 568))
[ Info: ===== scores for single classifier: {"micro_f1":0.943,"precision":0.943,"recall":0.943,"macro_recall":0.9578102359010027,"macro_f1":0.8912743002635738,"accuracy":0.943,"class_f1":{"2":0.9281210592686003,"3":0.782608695652174,"1":0.9630931458699472},"class_precision":{"2":0.9484536082474226,"3":0.6428571428571429,"1":0.9614035087719298},"class_recall":{"2":0.908641975308642,"3":1.0,"1":0.9647887323943662}}
[ Info: ===== scores for 1: {"micro_f1":0.975,"precision":0.975,"recall":0.975,"macro_recall":0.9843838752680694,"macro_f1":0.9824762925670304,"accuracy":0.975,"class_f1":{"2":0.969770253929867,"3":1.0,"1":0.9776586237712243},"class_precision":{"2":0.9502369668246445,"3":1.0,"1":0.9927404718693285},"class_recall":{"2":0.9901234567901235,"3":1.0,"1":0.9630281690140845}}
[ Info: ===== scores for 5: {"micro_f1":0.972,"precision":0.972,"recall":0.972,"macro_recall":0.9823871210803917,"macro_f1":0.9690572660418383,"accuracy":0.972,"class_f1":{"2":0.9661835748792271,"3":0.9642857142857143,"1":0.9767025089605734},"class_precision":{"2":0.9456264775413712,"3":0.9310344827586207,"1":0.9945255474452555},"class_recall":{"2":0.9876543209876543,"3":1.0,"1":0.9595070422535211}}
[ Info: ===== scores for 7: {"micro_f1":0.972,"precision":0.972,"recall":0.972,"macro_recall":0.9823871210803917,"macro_f1":0.9690572660418383,"accuracy":0.972,"class_f1":{"2":0.9661835748792271,"3":0.9642857142857143,"1":0.9767025089605734},"class_precision":{"2":0.9456264775413712,"3":0.9310344827586207,"1":0.9945255474452555},"class_recall":{"2":0.9876543209876543,"3":1.0,"1":0.9595070422535211}}
[ Info: ===== scores for 9: {"micro_f1":0.967,"precision":0.967,"recall":0.967,"macro_recall":0.9785080855503391,"macro_f1":0.9655274692540109,"accuracy":0.967,"class_f1":{"2":0.9600000000000001,"3":0.9642857142857143,"1":0.9722966934763182},"class_precision":{"2":0.9428571428571428,"3":0.9310344827586207,"1":0.9872958257713249},"class_recall":{"2":0.9777777777777777,"3":1.0,"1":0.9577464788732394}}
[ Info: ===== scores for 11: {"micro_f1":0.968,"precision":0.968,"recall":0.968,"macro_recall":0.9788587492030372,"macro_f1":0.9662061019939938,"accuracy":0.968,"class_f1":{"2":0.9610705596107055,"3":0.9642857142857143,"1":0.9732620320855616},"class_precision":{"2":0.947242206235012,"3":0.9310344827586207,"1":0.9855595667870036},"class_recall":{"2":0.9753086419753086,"3":1.0,"1":0.9612676056338029}}
(score = 0.976, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.976, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.975, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.975, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.97, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.97, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.971, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.971, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.969, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.969, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.972, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.972, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.968, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.968, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.972, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.972, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.976,"k":1,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.976,"precision":0.976,"recall":0.976,"macro_recall":0.973920477598099,"macro_f1":0.9772193729783205,"accuracy":0.976,"class_f1":{"2":0.9711538461538463,"3":0.9811320754716981,"1":0.9793721973094172},"class_precision":{"2":0.9461358313817331,"3":1.0,"1":0.9981718464351006},"class_recall":{"2":0.9975308641975309,"3":0.9629629629629629,"1":0.9612676056338029}}
Test Summary: | Pass  Total
AKNC          |    8      8
[572, 1, 3, 6, 3, 1, 7, 1, 1, 4, 1, 3, 2, 10, 5, 1, 3, 1, 8, 4, 5, 3, 2, 2, 1, 68, 6, 8, 8, 4, 4, 3, 6, 42, 8, 1, 2, 2, 30, 33, 9, 8, 19, 12, 66, 3, 4, 6, 8, 11, 2, 12, 6, 3, 104, 5, 16, 13, 6, 12, 15, 2, 4, 40, 3, 80, 2, 67, 8, 3, 4, 6, 33, 3, 7, 6, 13, 24, 104, 15, 9, 16, 8, 6, 27, 6, 8, 8, 6, 78, 45, 8, 9, 4, 111, 21, 2, 4, 13, 45, 12, 26, 14, 22, 73, 8, 12, 7, 5, 51, 42, 93, 3, 24, 18, 6, 11, 21, 142, 27, 6, 5, 4, 6, 16, 3, 14, 17, 54, 63, 2, 135, 5, 2, 15, 434, 11, 10, 59, 28, 54, 2, 14, 12, 261, 11, 16, 257, 38, 83, 39, 7, 15, 84, 12, 15, 66, 222, 2, 76, 16, 20, 8, 76, 17, 2, 3, 22, 3, 28, 18, 1, 15, 6, 26, 18, 1, 13, 32, 19, 8, 13, 82, 15, 46, 25, 32, 10, 1, 2, 5, 26, 61, 108, 3, 43, 8, 3, 31, 14, 27, 12, 38, 15, 51, 63, 38, 13, 52, 13, 38, 10, 5, 9, 43, 57, 38, 4, 35, 8, 20, 117, 14, 19, 85, 14, 19, 9, 15, 9, 14, 25, 9, 8, 26, 29, 105, 6, 21, 81, 182, 22, 23, 10, 91, 14, 17, 7, 550, 7, 7, 15, 15, 34, 99, 9, 12, 117, 58, 11, 14, 6, 38, 9, 32, 13, 1, 75, 184, 22, 54, 2, 91, 64, 46, 17, 46, 6, 13, 6, 41, 39, 42, 79, 12, 101, 7, 89, 104, 17, 18, 12, 6, 336, 6, 6, 13, 31, 34, 9]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6190000000000001, speedup = 0.3468862155681356, eval_ratio = 0.06792100000000001)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.36928013392857156,"recall":0.3645833333333334,"f1":null,"seconds":0.00012544356286525726,"exhaustive_search_seconds":0.000336257740855217,"evaluations":446.0390625,"distances_sum":1788.4970828853152}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5598958333333335,"recall":0.5598958333333335,"f1":null,"seconds":0.0002343636006116867,"exhaustive_search_seconds":0.000336257740855217,"evaluations":559.59375,"distances_sum":1687.2912050214793}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.65625,"recall":0.65625,"f1":0.65625,"seconds":0.00027231499552726746,"exhaustive_search_seconds":0.000336257740855217,"evaluations":660.6484375,"distances_sum":1636.3545835238378}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7482638888888884,"recall":0.7482638888888884,"f1":0.7482638888888884,"seconds":0.0003536008298397064,"exhaustive_search_seconds":0.000336257740855217,"evaluations":791.6953125,"distances_sum":1603.9702920287843}
KCenters.DeloneInvIndex> reached performance {"precision":0.8116319444444442,"recall":0.8116319444444442,"f1":0.8116319444444442,"seconds":0.0003823656588792801,"exhaustive_search_seconds":0.000336257740855217,"evaluations":898.6484375,"distances_sum":1582.9279837271145}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.747, speedup = 0.9305501130369254, eval_ratio = 0.089948)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
