Julia Version 1.5.0-DEV.616
Commit bc2fbef2bf (2020-04-12 16:10 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed OrderedCollections ────────── v1.1.0
  Installed Parsers ───────────────────── v1.0.1
  Installed KCenters ──────────────────── v0.2.2
  Installed Tables ────────────────────── v1.0.3
  Installed JSON ──────────────────────── v0.21.0
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed DataStructures ────────────── v0.17.12
  Installed DataFrames ────────────────── v0.20.2
  Installed Reexport ──────────────────── v0.2.0
  Installed PooledArrays ──────────────── v0.5.3
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed TableTraits ───────────────── v1.0.0
  Installed Compat ────────────────────── v3.8.0
  Installed MLDataUtils ───────────────── v0.5.1
  Installed StatsBase ─────────────────── v0.32.2
  Installed DataAPI ───────────────────── v1.1.0
  Installed LearnBase ─────────────────── v0.2.2
  Installed DataValueInterfaces ───────── v1.0.0
  Installed MappedArrays ──────────────── v0.2.2
  Installed Missings ──────────────────── v0.4.3
  Installed MLDataPattern ─────────────── v0.5.1
  Installed CategoricalArrays ─────────── v0.7.7
  Installed InvertedIndices ───────────── v1.0.0
  Installed SimilaritySearch ──────────── v0.3.19
Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.8.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.12
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.1
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v1.0.1
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.3
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_bknPCO/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_bknPCO/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.8.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.12
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.1
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v1.0.1
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.3
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0723782532413801
[ Info: 0.9364293802777927
[ Info: 0.8321307849884033
[ Info: 0.5576448714236418
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.3258345034470161
mean(cdnet.distances) = 0.4234395529081424
mean(crand.distances) = 0.32727376389006774
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3720703125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3720703125,"f1":null,"seconds":4.330649971961975e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":5.25,"distances_sum":1208.2512604104754}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6259765625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6259765625,"f1":0.7541722166722173,"seconds":4.9211084842681885e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.171875,"distances_sum":1954.4265963859743}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.513671875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.513671875,"f1":0.6599078005328011,"seconds":4.231929779052734e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":6.828125,"distances_sum":1590.069745651617}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.736328125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.736328125,"f1":0.8387633200133209,"seconds":5.373731255531311e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.25,"distances_sum":2363.779016843485}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.736328125,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.736328125,"f1":0.8387633200133209,"seconds":5.373731255531311e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.25,"distances_sum":2363.779016843485}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9598443223443228,"seconds":6.709247827529907e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.859375,"distances_sum":3358.069220568198}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.74609375, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.74609375,"f1":0.8431622197247206,"seconds":5.757436156272888e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.4140625,"distances_sum":2373.0246052721272}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8720703125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8720703125,"f1":0.9257190725940733,"seconds":5.971640348434448e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.7578125,"distances_sum":3024.7739451073994}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.932191766566767,"seconds":6.012618541717529e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.78125,"distances_sum":3086.6190677266163}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.74609375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.74609375,"f1":0.8450726356976366,"seconds":5.561858415603638e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.3671875,"distances_sum":2382.503513038479}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9296875,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.9296875,"f1":0.9598443223443228,"seconds":6.709247827529907e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.859375,"distances_sum":3358.069220568198}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9716174450549454,"seconds":6.271526217460632e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.90625,"distances_sum":3442.7059368953464}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9652186355311358,"seconds":6.1355531215667725e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8125,"distances_sum":3426.110208913946}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9627664002664006,"seconds":5.992129445075989e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.828125,"distances_sum":3395.9629958528117}, best_list's length: 14, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9709306318681323,"seconds":6.139278411865234e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.890625,"distances_sum":3463.913540449098}, best_list's length: 16, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94921875,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9716174450549454,"seconds":6.271526217460632e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.90625,"distances_sum":3442.7059368953464}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94921875,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9716174450549454,"seconds":6.271526217460632e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.90625,"distances_sum":3442.7059368953464}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7529296875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7529296875,"f1":0.8521494130869139,"seconds":5.362555384635925e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":7.9765625,"distances_sum":2269.059683585909}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7392578125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7392578125,"f1":0.8383900821400828,"seconds":5.04031777381897e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":7.9609375,"distances_sum":2234.233180711555}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7529296875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7529296875,"f1":0.8521494130869139,"seconds":5.362555384635925e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":7.9765625,"distances_sum":2269.059683585909}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8232421875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8232421875,"f1":0.8968349358974368,"seconds":5.8300793170928955e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.0859375,"distances_sum":2563.0095854181136}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9632841117216122,"seconds":5.930662155151367e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.828125,"distances_sum":3159.484821019177}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.93359375,"state":{"ssize":7,"bsize":8},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9632841117216122,"seconds":5.930662155151367e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.828125,"distances_sum":3159.484821019177}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.96698717948718,"seconds":6.077811121940613e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.859375,"distances_sum":3202.499296103003}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":9,"bsize":11}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9755952380952383,"seconds":5.893409252166748e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.890625,"distances_sum":3294.8627020456497}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9657051282051284,"seconds":5.809590220451355e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.8046875,"distances_sum":3236.806793242526}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.955078125,"state":{"ssize":9,"bsize":11},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9755952380952383,"seconds":5.893409252166748e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.890625,"distances_sum":3294.8627020456497}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.955078125,"state":{"ssize":9,"bsize":11},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9755952380952383,"seconds":5.893409252166748e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.890625,"distances_sum":3294.8627020456497}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.677734375, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.677734375,"f1":0.7976497460872469,"seconds":4.533678293228149e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.4921875,"distances_sum":1973.2255487119119}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4033203125, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.4033203125,"f1":null,"seconds":3.373250365257263e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":5.8359375,"distances_sum":1055.7015321032075}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7431640625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7431640625,"f1":0.8407181360306367,"seconds":4.824250936508179e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.7890625,"distances_sum":2215.3996959274796}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7431640625,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7431640625,"f1":0.8407181360306367,"seconds":4.824250936508179e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.7890625,"distances_sum":2215.3996959274796}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8505859375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8505859375,"f1":0.912866300366301,"seconds":5.23589551448822e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.1875,"distances_sum":2716.721110706097}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9526671245421248,"seconds":5.62518835067749e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.75,"distances_sum":3056.69569698402}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.751953125, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.751953125,"f1":0.851629100066601,"seconds":4.986301064491272e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.96875,"distances_sum":2215.0648577129896}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.865234375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.865234375,"f1":0.9198634698634705,"seconds":5.284324288368225e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.3046875,"distances_sum":2848.9993083223358}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7783203125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7783203125,"f1":0.8681698509823518,"seconds":5.036592483520508e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.0234375,"distances_sum":2402.2545114913946}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.916015625,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.9526671245421248,"seconds":5.62518835067749e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.75,"distances_sum":3056.69569698402}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":3,"bsize":12}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9721554487179489,"seconds":5.630776286125183e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.90625,"distances_sum":3196.1136464764436}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9659855769230772,"seconds":5.850568413734436e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.8359375,"distances_sum":3159.293936889162}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9537488553113556,"seconds":5.327165126800537e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.6796875,"distances_sum":3084.1273768952087}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9560496794871801,"seconds":5.666166543960571e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.7265625,"distances_sum":3120.9273759300563}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94921875,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9721554487179489,"seconds":5.630776286125183e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.90625,"distances_sum":3196.1136464764436}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94921875,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9721554487179489,"seconds":5.630776286125183e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.90625,"distances_sum":3196.1136464764436}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.212890625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.212890625,"f1":null,"seconds":3.376975655555725e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":6.4765625,"distances_sum":598.5437704882303}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.419921875, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.419921875,"f1":null,"seconds":3.6284327507019043e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":6.390625,"distances_sum":1078.831707996522}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.419921875,"state":{"ssize":3,"bsize":2},"perf":{"precision":null,"recall":0.419921875,"f1":null,"seconds":3.6284327507019043e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":6.390625,"distances_sum":1078.831707996522}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7685546875, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.7685546875,"f1":0.8600852272727282,"seconds":5.241483449935913e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.3046875,"distances_sum":2256.3778964672724}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7685546875,"state":{"ssize":7,"bsize":5},"perf":{"precision":1.0,"recall":0.7685546875,"f1":0.8600852272727282,"seconds":5.241483449935913e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.3046875,"distances_sum":2256.3778964672724}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9533367673992679,"seconds":5.869194865226746e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.796875,"distances_sum":3017.0185164175364}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9542296245421251,"seconds":5.835667252540588e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.734375,"distances_sum":3024.104892754447}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9397212162837169,"seconds":5.932524800300598e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.640625,"distances_sum":2926.3189987731275}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9189453125,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.9189453125,"f1":0.9542296245421251,"seconds":5.835667252540588e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.734375,"distances_sum":3024.104892754447}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9189453125,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.9189453125,"f1":0.9542296245421251,"seconds":5.835667252540588e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.734375,"distances_sum":3024.104892754447}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3994140625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3994140625,"f1":null,"seconds":3.848224878311157e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":6.0078125,"distances_sum":907.638355861248}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1806640625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.1806640625,"f1":null,"seconds":3.1404197216033936e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":5.015625,"distances_sum":461.52249636680733}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3994140625,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.3994140625,"f1":null,"seconds":3.848224878311157e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":6.0078125,"distances_sum":907.638355861248}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6884765625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6884765625,"f1":0.8040220196470206,"seconds":4.848465323448181e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":7.609375,"distances_sum":1663.0581084383273}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6884765625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6884765625,"f1":0.8040220196470206,"seconds":4.848465323448181e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":7.609375,"distances_sum":1663.0581084383273}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.84375,"f1":0.910505640193141,"seconds":5.103647708892822e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.578125,"distances_sum":2278.8385352625273}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8623046875, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8623046875,"f1":0.9181126165501171,"seconds":5.144625902175903e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.6640625,"distances_sum":2413.9064844014447}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8623046875,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.8623046875,"f1":0.9181126165501171,"seconds":5.144625902175903e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.6640625,"distances_sum":2413.9064844014447}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8623046875,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.8623046875,"f1":0.9181126165501171,"seconds":5.144625902175903e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.6640625,"distances_sum":2413.9064844014447}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.32421875, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.32421875,"f1":null,"seconds":3.85381281375885e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":5.8671875,"distances_sum":839.1292093682755}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2236328125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2236328125,"f1":null,"seconds":3.416091203689575e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":5.890625,"distances_sum":585.3856118187176}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.216796875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.216796875,"f1":null,"seconds":3.416091203689575e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":5.6953125,"distances_sum":566.2029968238421}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.32421875,"state":{"ssize":5,"bsize":2},"perf":{"precision":null,"recall":0.32421875,"f1":null,"seconds":3.85381281375885e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":5.8671875,"distances_sum":839.1292093682755}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.646484375, conf: {"ssize":9,"bsize":4}, perf: {"precision":1.0,"recall":0.646484375,"f1":0.7691461316461323,"seconds":4.742294549942017e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":7.25,"distances_sum":1586.9752705746093}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3427734375, conf: {"ssize":7,"bsize":2}, perf: {"precision":null,"recall":0.3427734375,"f1":null,"seconds":3.766268491744995e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":5.9296875,"distances_sum":829.1046332896994}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.50390625, conf: {"ssize":7,"bsize":3}, perf: {"precision":1.0,"recall":0.50390625,"f1":0.6520859348984354,"seconds":4.287809133529663e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":6.5625,"distances_sum":1186.4564243381062}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7802734375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7802734375,"f1":0.8649054070929076,"seconds":5.3122639656066895e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.1953125,"distances_sum":1980.0595689172972}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.66796875, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.66796875,"f1":0.7877880799755808,"seconds":4.932284355163574e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":7.375,"distances_sum":1658.9510763052988}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7900390625, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.7900390625,"f1":0.8718505452880461,"seconds":5.505979061126709e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.1796875,"distances_sum":2007.8544638004064}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.654296875, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.654296875,"f1":0.777796682484183,"seconds":4.9602240324020386e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":7.375,"distances_sum":1562.0213211159155}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7900390625,"state":{"ssize":7,"bsize":5},"perf":{"precision":1.0,"recall":0.7900390625,"f1":0.8718505452880461,"seconds":5.505979061126709e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.1796875,"distances_sum":2007.8544638004064}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9552483974358978,"seconds":6.118789315223694e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.7265625,"distances_sum":2667.597662696435}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9537431318681325,"seconds":6.036832928657532e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.75,"distances_sum":2659.1540375182185}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.837890625, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.837890625,"f1":0.9034772519147526,"seconds":5.824491381645203e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.421875,"distances_sum":2268.535300379789}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.919921875,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.9552483974358978,"seconds":6.118789315223694e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.7265625,"distances_sum":2667.597662696435}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.919921875,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.9552483974358978,"seconds":6.118789315223694e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.7265625,"distances_sum":2667.597662696435}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.79296875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.79296875,"f1":0.8753813894438904,"seconds":5.714595317840576e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.234375,"distances_sum":2161.2145559199425}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5478515625, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.5478515625,"f1":0.6940257659007666,"seconds":4.513189196586609e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":6.546875,"distances_sum":1343.3508736335025}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3955078125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3955078125,"f1":null,"seconds":3.829598426818848e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":5.6484375,"distances_sum":999.0085404806828}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.79296875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.79296875,"f1":0.8753813894438904,"seconds":5.714595317840576e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.234375,"distances_sum":2161.2145559199425}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.869140625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.869140625,"f1":0.9250489094239099,"seconds":5.934387445449829e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.6875,"distances_sum":2536.234240832668}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.869140625,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.869140625,"f1":0.9250489094239099,"seconds":5.934387445449829e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.6875,"distances_sum":2536.234240832668}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9387362637362643,"seconds":6.204470992088318e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.6484375,"distances_sum":2721.0245511169296}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9662831959706966,"seconds":6.144866347312927e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.8828125,"distances_sum":2868.3363143610536}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9447058150183156,"seconds":6.094574928283691e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.7265625,"distances_sum":2740.79839174875}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9469780219780225,"seconds":6.143003702163696e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.6796875,"distances_sum":2780.4812447156555}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9556776556776562,"seconds":8.124858140945435e-5,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.8046875,"distances_sum":2799.6844358609605}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9404296875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9662831959706966,"seconds":6.144866347312927e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.8828125,"distances_sum":2868.3363143610536}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9404296875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9662831959706966,"seconds":6.144866347312927e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.8828125,"distances_sum":2868.3363143610536}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1904296875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.1904296875,"f1":null,"seconds":3.1925737857818604e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":4.7109375,"distances_sum":553.7182512716588}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.197265625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.197265625,"f1":null,"seconds":2.769753336906433e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":4.921875,"distances_sum":587.5568890903589}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.197265625,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.197265625,"f1":null,"seconds":2.769753336906433e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":4.921875,"distances_sum":587.5568890903589}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5185546875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5185546875,"f1":0.6652056277056283,"seconds":4.045665264129639e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":6.390625,"distances_sum":1305.8961767608598}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.765625,"f1":0.8572869838494848,"seconds":4.8782676458358765e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":7.9609375,"distances_sum":2112.2658724054822}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.765625,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.765625,"f1":0.8572869838494848,"seconds":4.8782676458358765e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":7.9609375,"distances_sum":2112.2658724054822}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.845703125, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.845703125,"f1":0.9091809232434239,"seconds":5.39049506187439e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.4765625,"distances_sum":2498.098439806745}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.845703125,"state":{"ssize":8,"bsize":7},"perf":{"precision":1.0,"recall":0.845703125,"f1":0.9091809232434239,"seconds":5.39049506187439e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.4765625,"distances_sum":2498.098439806745}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.845703125,"state":{"ssize":8,"bsize":7},"perf":{"precision":1.0,"recall":0.845703125,"f1":0.9091809232434239,"seconds":5.39049506187439e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.4765625,"distances_sum":2498.098439806745}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.654296875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.654296875,"f1":0.7759311868686876,"seconds":4.425644874572754e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":7.0546875,"distances_sum":1725.4393278254142}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5107421875, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5107421875,"f1":null,"seconds":3.904104232788086e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":6.2578125,"distances_sum":1231.4102241060855}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3779296875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3779296875,"f1":null,"seconds":3.643333911895752e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":5.4921875,"distances_sum":916.349858422534}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.654296875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.654296875,"f1":0.7759311868686876,"seconds":4.425644874572754e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":7.0546875,"distances_sum":1725.4393278254142}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9462511446886449,"seconds":5.457550287246704e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.71875,"distances_sum":2747.683963038193}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7900390625, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.7900390625,"f1":0.8739073426573435,"seconds":4.936009645462036e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.0703125,"distances_sum":2217.6864391069776}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.849609375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.849609375,"f1":0.9127461080586088,"seconds":5.416572093963623e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.625,"distances_sum":2429.046776785107}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7783203125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7783203125,"f1":0.866945034132535,"seconds":4.958361387252808e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.0703125,"distances_sum":2095.957255575812}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.810546875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.810546875,"f1":0.8878236346986356,"seconds":5.301088094711304e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.21875,"distances_sum":2232.6140079006227}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.90625,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.90625,"f1":0.9462511446886449,"seconds":5.457550287246704e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.71875,"distances_sum":2747.683963038193}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9520521145521152,"seconds":5.42961061000824e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.6640625,"distances_sum":2813.728203042044}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9478136446886453,"seconds":5.48921525478363e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.71875,"distances_sum":2771.5065268029157}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9562156593406599,"seconds":5.513429641723633e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.8046875,"distances_sum":2782.7162052394833}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9630208333333338,"seconds":5.638226866722107e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.875,"distances_sum":2814.8655616528376}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9546359890109897,"seconds":5.602836608886719e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.8515625,"distances_sum":2773.6597521459707}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9632669413919417,"seconds":5.06080687046051e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.8046875,"distances_sum":2837.2802728228944}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.948577984515485,"seconds":4.04752790927887e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.8046875,"distances_sum":2702.1334897405613}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.935546875,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9632669413919417,"seconds":5.06080687046051e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.8046875,"distances_sum":2837.2802728228944}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.935546875,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9632669413919417,"seconds":5.06080687046051e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.8046875,"distances_sum":2837.2802728228944}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6279296875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6279296875,"f1":0.7543397574647582,"seconds":2.7120113372802734e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":6.9921875,"distances_sum":1556.3375315431185}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3486328125, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.3486328125,"f1":null,"seconds":1.996755599975586e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":5.171875,"distances_sum":895.3985980946635}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.8589238886113894,"seconds":3.127381205558777e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":7.9453125,"distances_sum":2015.6544310792772}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.767578125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.767578125,"f1":0.8589238886113894,"seconds":3.127381205558777e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":7.9453125,"distances_sum":2015.6544310792772}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9545787545787553,"seconds":3.4440308809280396e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":8.6953125,"distances_sum":2766.1846730066636}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9517399267399271,"seconds":3.5017728805541992e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":8.6796875,"distances_sum":2754.779979988318}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9478766025641032,"seconds":3.4552067518234253e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":8.6015625,"distances_sum":2719.0733967109136}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7841796875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.7841796875,"f1":0.8680017898767908,"seconds":3.209337592124939e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":7.96875,"distances_sum":2130.444035696752}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91796875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9545787545787553,"seconds":3.4440308809280396e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":8.6953125,"distances_sum":2766.1846730066636}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.958984375, conf: {"ssize":5,"bsize":13}, perf: {"precision":1.0,"recall":0.958984375,"f1":0.9773637820512823,"seconds":4.3995678424835205e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":8.8828125,"distances_sum":2878.586215419981}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9609375, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.9609375,"f1":0.9783310439560442,"seconds":4.373490810394287e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":8.90625,"distances_sum":2879.1267899961013}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9599609375, conf: {"ssize":2,"bsize":13}, perf: {"precision":1.0,"recall":0.9599609375,"f1":0.9780334249084255,"seconds":4.427507519721985e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":8.9296875,"distances_sum":2878.897849060187}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9579097985347989,"seconds":4.254281520843506e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":8.8046875,"distances_sum":2735.847418940179}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9609375,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9783310439560442,"seconds":4.373490810394287e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":8.90625,"distances_sum":2879.1267899961013}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9609375,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9783310439560442,"seconds":4.373490810394287e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":8.90625,"distances_sum":2879.1267899961013}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6865234375, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6865234375,"f1":0.8017643814518822,"seconds":3.4850090742111206e-6,"exhaustive_search_seconds":1.0635703802108765e-6,"evaluations":7.7109375,"distances_sum":1595.4552157865785}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8154296875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.8154296875,"f1":0.8932921245421255,"seconds":5.383044481277466e-6,"exhaustive_search_seconds":1.0635703802108765e-6,"evaluations":8.34375,"distances_sum":1954.2992144205393}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7880859375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7880859375,"f1":0.8718774281274289,"seconds":5.131587386131287e-6,"exhaustive_search_seconds":1.0635703802108765e-6,"evaluations":8.265625,"distances_sum":1863.545687753507}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8154296875,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.8154296875,"f1":0.8932921245421255,"seconds":5.383044481277466e-6,"exhaustive_search_seconds":1.0635703802108765e-6,"evaluations":8.34375,"distances_sum":1954.2992144205393}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.830078125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.830078125,"f1":0.9001665001665009,"seconds":3.91155481338501e-6,"exhaustive_search_seconds":1.0635703802108765e-6,"evaluations":8.375,"distances_sum":2000.9244262402576}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8447265625, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8447265625,"f1":0.9092438811188818,"seconds":5.647540092468262e-6,"exhaustive_search_seconds":1.0635703802108765e-6,"evaluations":8.4140625,"distances_sum":2089.2367426181427}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8447265625,"state":{"ssize":5,"bsize":6},"perf":{"precision":1.0,"recall":0.8447265625,"f1":0.9092438811188818,"seconds":5.647540092468262e-6,"exhaustive_search_seconds":1.0635703802108765e-6,"evaluations":8.4140625,"distances_sum":2089.2367426181427}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":9,"bsize":10}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.958877060439561,"seconds":5.8002769947052e-6,"exhaustive_search_seconds":1.0635703802108765e-6,"evaluations":8.7265625,"distances_sum":2441.253147013553}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9566620879120884,"seconds":4.110857844352722e-6,"exhaustive_search_seconds":1.0635703802108765e-6,"evaluations":8.7578125,"distances_sum":2399.745145190654}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.92578125,"state":{"ssize":9,"bsize":10},"perf":{"precision":1.0,"recall":0.92578125,"f1":0.958877060439561,"seconds":5.8002769947052e-6,"exhaustive_search_seconds":1.0635703802108765e-6,"evaluations":8.7265625,"distances_sum":2441.253147013553}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.92578125,"state":{"ssize":9,"bsize":10},"perf":{"precision":1.0,"recall":0.92578125,"f1":0.958877060439561,"seconds":5.8002769947052e-6,"exhaustive_search_seconds":1.0635703802108765e-6,"evaluations":8.7265625,"distances_sum":2441.253147013553}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.646484375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.646484375,"f1":0.7715083527583535,"seconds":3.2186508178710938e-6,"exhaustive_search_seconds":1.0710209608078003e-6,"evaluations":7.34375,"distances_sum":1467.1628992558408}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.646484375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.646484375,"f1":0.7715083527583535,"seconds":3.2186508178710938e-6,"exhaustive_search_seconds":1.0710209608078003e-6,"evaluations":7.34375,"distances_sum":1467.1628992558408}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9385931776556781,"seconds":4.023313522338867e-6,"exhaustive_search_seconds":1.0710209608078003e-6,"evaluations":8.703125,"distances_sum":2313.6435561514713}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.765625,"f1":0.8575362137862146,"seconds":3.071501851081848e-6,"exhaustive_search_seconds":1.0710209608078003e-6,"evaluations":7.8359375,"distances_sum":1855.8219907187238}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8935546875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.8935546875,"f1":0.9385931776556781,"seconds":4.023313522338867e-6,"exhaustive_search_seconds":1.0710209608078003e-6,"evaluations":8.703125,"distances_sum":2313.6435561514713}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.96484375, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.96484375,"f1":0.9809523809523812,"seconds":3.7904828786849976e-6,"exhaustive_search_seconds":1.0710209608078003e-6,"evaluations":8.921875,"distances_sum":2640.847553007092}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9548248626373629,"seconds":3.7830322980880737e-6,"exhaustive_search_seconds":1.0710209608078003e-6,"evaluations":8.796875,"distances_sum":2445.996763162887}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.957057005494506,"seconds":3.734603524208069e-6,"exhaustive_search_seconds":1.0710209608078003e-6,"evaluations":8.8203125,"distances_sum":2460.2171685960757}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9525526556776562,"seconds":3.7979334592819214e-6,"exhaustive_search_seconds":1.0710209608078003e-6,"evaluations":8.7109375,"distances_sum":2457.6624295156994}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.96484375,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.96484375,"f1":0.9809523809523812,"seconds":3.7904828786849976e-6,"exhaustive_search_seconds":1.0710209608078003e-6,"evaluations":8.921875,"distances_sum":2640.847553007092}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.96484375,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.96484375,"f1":0.9809523809523812,"seconds":3.7904828786849976e-6,"exhaustive_search_seconds":1.0710209608078003e-6,"evaluations":8.921875,"distances_sum":2640.847553007092}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.240234375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.240234375,"f1":null,"seconds":2.030283212661743e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":6.2734375,"distances_sum":577.3404389615619}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.75,"f1":0.8491966366966376,"seconds":3.2614916563034058e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.328125,"distances_sum":1821.275182683855}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.75,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.75,"f1":0.8491966366966376,"seconds":3.2614916563034058e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.328125,"distances_sum":1821.275182683855}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.75,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.75,"f1":0.8491966366966376,"seconds":3.2614916563034058e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.328125,"distances_sum":1821.275182683855}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.75,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.75,"f1":0.8491966366966376,"seconds":3.2614916563034058e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.328125,"distances_sum":1821.275182683855}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7587890625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7587890625,"f1":0.8539897602397613,"seconds":3.21120023727417e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":7.8671875,"distances_sum":1783.2883997634508}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.392578125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.392578125,"f1":null,"seconds":2.1457672119140625e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":5.875,"distances_sum":837.2547355649324}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7587890625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7587890625,"f1":0.8539897602397613,"seconds":3.21120023727417e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":7.8671875,"distances_sum":1783.2883997634508}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8408203125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8408203125,"f1":0.9059185606060615,"seconds":3.516674041748047e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.4765625,"distances_sum":2097.7353833273773}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9574461996336999,"seconds":3.546476364135742e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.8515625,"distances_sum":2408.6300926140807}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8740234375,"f1":0.9268346237096242,"seconds":3.520399332046509e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.609375,"distances_sum":2256.7976452022003}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.923828125,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.9574461996336999,"seconds":3.546476364135742e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.8515625,"distances_sum":2408.6300926140807}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":5,"bsize":13}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9723614926739929,"seconds":3.7401914596557617e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.9453125,"distances_sum":2507.941744126761}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9639938186813192,"seconds":3.6079436540603638e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.875,"distances_sum":2463.9672663572933}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9501953125,"state":{"ssize":5,"bsize":13},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9723614926739929,"seconds":3.7401914596557617e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.9453125,"distances_sum":2507.941744126761}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9501953125,"state":{"ssize":5,"bsize":13},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9723614926739929,"seconds":3.7401914596557617e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.9453125,"distances_sum":2507.941744126761}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3369140625, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.3369140625,"f1":null,"seconds":2.1085143089294434e-6,"exhaustive_search_seconds":8.810311555862427e-7,"evaluations":5.5390625,"distances_sum":714.3920766865517}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3369140625,"state":{"ssize":4,"bsize":2},"perf":{"precision":null,"recall":0.3369140625,"f1":null,"seconds":2.1085143089294434e-6,"exhaustive_search_seconds":8.810311555862427e-7,"evaluations":5.5390625,"distances_sum":714.3920766865517}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6845703125, conf: {"ssize":7,"bsize":4}, perf: {"precision":1.0,"recall":0.6845703125,"f1":0.8009540806415816,"seconds":2.9653310775756836e-6,"exhaustive_search_seconds":8.810311555862427e-7,"evaluations":7.8984375,"distances_sum":1611.933919375782}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5107421875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5107421875,"f1":0.6634178321678327,"seconds":2.5015324354171753e-6,"exhaustive_search_seconds":8.810311555862427e-7,"evaluations":6.7890625,"distances_sum":1115.8396785402492}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3408203125, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.3408203125,"f1":null,"seconds":2.032145857810974e-6,"exhaustive_search_seconds":8.810311555862427e-7,"evaluations":5.3515625,"distances_sum":771.7329883255516}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7626953125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7626953125,"f1":0.8552416333666341,"seconds":3.21120023727417e-6,"exhaustive_search_seconds":8.810311555862427e-7,"evaluations":8.1796875,"distances_sum":1809.7871595675567}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7626953125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7626953125,"f1":0.8552416333666341,"seconds":3.21120023727417e-6,"exhaustive_search_seconds":8.810311555862427e-7,"evaluations":8.1796875,"distances_sum":1809.7871595675567}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9478308150183155,"seconds":3.5408884286880493e-6,"exhaustive_search_seconds":8.810311555862427e-7,"evaluations":8.71875,"distances_sum":2373.4554128607824}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8271484375, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.8271484375,"f1":0.898105540293041,"seconds":3.337860107421875e-6,"exhaustive_search_seconds":8.810311555862427e-7,"evaluations":8.1796875,"distances_sum":2062.414457725513}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.841796875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.841796875,"f1":0.9088255494505503,"seconds":3.4403055906295776e-6,"exhaustive_search_seconds":8.810311555862427e-7,"evaluations":8.3359375,"distances_sum":2126.167052345432}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.822265625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.822265625,"f1":0.8953530844155853,"seconds":3.2745301723480225e-6,"exhaustive_search_seconds":8.810311555862427e-7,"evaluations":8.2109375,"distances_sum":1997.7402020783481}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.908203125,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.908203125,"f1":0.9478308150183155,"seconds":3.5408884286880493e-6,"exhaustive_search_seconds":8.810311555862427e-7,"evaluations":8.71875,"distances_sum":2373.4554128607824}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.908203125,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.908203125,"f1":0.9478308150183155,"seconds":3.5408884286880493e-6,"exhaustive_search_seconds":8.810311555862427e-7,"evaluations":8.71875,"distances_sum":2373.4554128607824}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.85719644938395,"seconds":3.2689422369003296e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":8.28125,"distances_sum":1786.3082001310938}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6513671875, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6513671875,"f1":0.7774173742923751,"seconds":2.950429916381836e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":7.9609375,"distances_sum":1437.1861451142424}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.416015625, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.416015625,"f1":null,"seconds":2.825632691383362e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":6.53125,"distances_sum":817.4045937005692}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.767578125,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.767578125,"f1":0.85719644938395,"seconds":3.2689422369003296e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":8.28125,"distances_sum":1786.3082001310938}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9499370421245424,"seconds":4.284083843231201e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":8.8203125,"distances_sum":2376.835068962696}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.941935668498169,"seconds":4.231929779052734e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":8.7421875,"distances_sum":2276.6781370279573}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9140625,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.9499370421245424,"seconds":4.284083843231201e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":8.8203125,"distances_sum":2376.835068962696}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9724530677655681,"seconds":4.334375262260437e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":8.953125,"distances_sum":2505.7096235015683}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9618360805860809,"seconds":4.326924681663513e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":8.9140625,"distances_sum":2418.702236001741}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9703182234432237,"seconds":4.239380359649658e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":8.9140625,"distances_sum":2496.4169384397123}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":11,"bsize":8}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9572406759906765,"seconds":4.2244791984558105e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":8.875,"distances_sum":2422.4653933314944}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9501953125,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9724530677655681,"seconds":4.334375262260437e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":8.953125,"distances_sum":2505.7096235015683}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9501953125,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9724530677655681,"seconds":4.334375262260437e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":8.953125,"distances_sum":2505.7096235015683}}, n: 9
mean(cfft.distances) = 0.33670652874094575
mean(cdnet.distances) = 0.4033698735223398
mean(crand.distances) = 0.3438705549203596
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.9377777777777778
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.9333333333333332
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8911111111111111
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.851111111111111
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.9
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.9066666666666666
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8844444444444445
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.9022222222222221
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.8977777777777778
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9377777777777778
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9444444444444445
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.9022222222222221
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.88
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.9355555555555556
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8822222222222224
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9044444444444445
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9355555555555556
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.88
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9288888888888889
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9400000000000001
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8622222222222223
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8711111111111111
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8844444444444445
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.9088888888888889
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9311111111111111
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9311111111111111
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8822222222222221
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9088888888888889
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8088888888888889
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8977777777777778
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9111111111111111
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.851111111111111
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9044444444444445
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9066666666666666
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 14, 1]]
** centroid: 1, normalized-entropy: 0.3533593350214213, [(2, 14), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 17, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 3, 2, 1, 2, 3, 1, 2, 3, 3, 2]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 14, 1]]
** centroid: 1, normalized-entropy: 0.3533593350214213, [(2, 14), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 17, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 3, 2, 1, 2, 3, 1, 2, 3, 3, 2]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 14, 1]]
** centroid: 1, normalized-entropy: 0.3533593350214213, [(2, 14), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 17, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 3, 2, 1, 2, 3, 1, 2, 3, 3, 2]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 14, 1]]
** centroid: 1, normalized-entropy: 0.3533593350214213, [(2, 14), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 17, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 3, 2, 1, 2, 3, 1, 2, 3, 3, 2]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 14, 1]]
** centroid: 1, normalized-entropy: 0.3533593350214213, [(2, 14), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 17, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 3, 2, 1, 2, 3, 1, 2, 3, 3, 2]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 14, 1]]
** centroid: 1, normalized-entropy: 0.3533593350214213, [(2, 14), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 17, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 3, 2, 1, 2, 3, 1, 2, 3, 3, 2]
acc = 0.9333333333333333
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 14, 1]]
** centroid: 1, normalized-entropy: 0.3533593350214213, [(2, 14), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 17, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 3, 2, 1, 2, 3, 1, 2, 3, 3, 2]
acc = 0.9733333333333334
*** finished computation of 12 references, err: [Inf, 0.60868832975626] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 3, 24]]
** centroid: 1, normalized-entropy: 0.5032583347756457, [(2, 3), (3, 24)]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 5]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 10, 2]]
** centroid: 6, normalized-entropy: 0.6500224216483541, [(2, 10), (3, 2)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 1, 1]]
** centroid: 8, normalized-entropy: 1.0, [(2, 1), (3, 1)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 14, 3]]
** centroid: 10, normalized-entropy: 0.6722948170756378, [(2, 14), (3, 3)]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 1, 5]]
** centroid: 11, normalized-entropy: 0.6500224216483541, [(2, 1), (3, 5)]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 17, 0]]
finished with 17 centroids; started with 12
acc = 0.96
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.24625088468644288] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24625088468644288, 0.19674999681343366] ***
*** starting iteration: 2; err: [Inf, 0.24625088468644288, 0.19674999681343366] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24625088468644288, 0.19674999681343366, 0.19196394189958693] ***
*** starting iteration: 3; err: [Inf, 0.24625088468644288, 0.19674999681343366, 0.19196394189958693] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24625088468644288, 0.19674999681343366, 0.19196394189958693, 0.18902044140876414] ***
*** starting iteration: 4; err: [Inf, 0.24625088468644288, 0.19674999681343366, 0.19196394189958693, 0.18902044140876414] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24625088468644288, 0.19674999681343366, 0.19196394189958693, 0.18902044140876414, 0.1873928423266153] ***
*** starting iteration: 5; err: [Inf, 0.24625088468644288, 0.19674999681343366, 0.19196394189958693, 0.18902044140876414, 0.1873928423266153] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24625088468644288, 0.19674999681343366, 0.19196394189958693, 0.18902044140876414, 0.1873928423266153, 0.18726525504097297] ***
*** finished computation of 7 references, err: [Inf, 0.24625088468644288, 0.19674999681343366, 0.19196394189958693, 0.18902044140876414, 0.1873928423266153, 0.18726525504097297] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [60, 57, 0]]
** centroid: 1, normalized-entropy: 0.9995256892936492, [(1, 60), (2, 57)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [6, 65, 0]]
** centroid: 2, normalized-entropy: 0.4178642624458583, [(1, 6), (2, 65)]
*** center 3: selecting labels [1] (freq >= 2) [from [106, 1, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [22, 65, 0]]
** centroid: 5, normalized-entropy: 0.8158009273789572, [(1, 22), (2, 65)]
*** center 6: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 59, 26]]
** centroid: 7, normalized-entropy: 0.8883630233845602, [(2, 59), (3, 26)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1955060362480245] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1955060362480245, 0.15264898956146417] ***
*** starting iteration: 2; err: [Inf, 0.1955060362480245, 0.15264898956146417] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1955060362480245, 0.15264898956146417, 0.14747505769967004] ***
*** starting iteration: 3; err: [Inf, 0.1955060362480245, 0.15264898956146417, 0.14747505769967004] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1955060362480245, 0.15264898956146417, 0.14747505769967004, 0.1462925011536817] ***
*** finished computation of 7 references, err: [Inf, 0.1955060362480245, 0.15264898956146417, 0.14747505769967004, 0.1462925011536817] ***
*** center 1: selecting labels [1] (freq >= 2) [from [119, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 61, 26]]
** centroid: 2, normalized-entropy: 0.8798813089176428, [(2, 61), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [50, 39, 0]]
** centroid: 3, normalized-entropy: 0.9889525767600615, [(1, 50), (2, 39)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [112, 3, 0]]
** centroid: 4, normalized-entropy: 0.17437145292163486, [(1, 112), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [21, 56, 0]]
** centroid: 5, normalized-entropy: 0.8453509366224364, [(1, 21), (2, 56)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [5, 88, 0]]
** centroid: 6, normalized-entropy: 0.30217361847879526, [(1, 5), (2, 88)]
*** center 7: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1901117778450217] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1901117778450217, 0.14892896211313747] ***
*** starting iteration: 2; err: [Inf, 0.1901117778450217, 0.14892896211313747] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1901117778450217, 0.14892896211313747, 0.14619698664564443] ***
*** starting iteration: 3; err: [Inf, 0.1901117778450217, 0.14892896211313747, 0.14619698664564443] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1901117778450217, 0.14892896211313747, 0.14619698664564443, 0.14571104477951374] ***
*** finished computation of 7 references, err: [Inf, 0.1901117778450217, 0.14892896211313747, 0.14619698664564443, 0.14571104477951374] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [92, 6, 0]]
** centroid: 1, normalized-entropy: 0.3322866302216152, [(1, 92), (2, 6)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [101, 32, 0]]
** centroid: 2, normalized-entropy: 0.7960391290505787, [(1, 101), (2, 32)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 54, 25]]
** centroid: 3, normalized-entropy: 0.9004854334784268, [(2, 54), (3, 25)]
*** center 4: selecting labels [1] (freq >= 2) [from [101, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [24, 56, 0]]
** centroid: 5, normalized-entropy: 0.8812908992306927, [(1, 24), (2, 56)]
*** center 6: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 100, 0]]
** centroid: 7, normalized-entropy: 0.18999075553626757, [(1, 3), (2, 100)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20087079627291374] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20087079627291374, 0.150428359051175] ***
*** starting iteration: 2; err: [Inf, 0.20087079627291374, 0.150428359051175] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20087079627291374, 0.150428359051175, 0.14704537218174096] ***
*** starting iteration: 3; err: [Inf, 0.20087079627291374, 0.150428359051175, 0.14704537218174096] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20087079627291374, 0.150428359051175, 0.14704537218174096, 0.14642801982486087] ***
*** finished computation of 7 references, err: [Inf, 0.20087079627291374, 0.150428359051175, 0.14704537218174096, 0.14642801982486087] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [63, 60, 0]]
** centroid: 1, normalized-entropy: 0.9995708393473225, [(1, 63), (2, 60)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [61, 39, 0]]
** centroid: 2, normalized-entropy: 0.9647995485050873, [(1, 61), (2, 39)]
*** center 3: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 71, 25]]
** centroid: 4, normalized-entropy: 0.8273744775003173, [(2, 71), (3, 25)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [15, 71, 0]]
** centroid: 5, normalized-entropy: 0.6677135405281421, [(1, 15), (2, 71)]
*** center 6: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19038354646094288] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19038354646094288, 0.15015878566742144] ***
*** finished computation of 7 references, err: [Inf, 0.19038354646094288, 0.15015878566742144] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [81, 43, 0]]
** centroid: 1, normalized-entropy: 0.9311540951784492, [(1, 81), (2, 43)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [61, 4, 0]]
** centroid: 2, normalized-entropy: 0.33352200393097675, [(1, 61), (2, 4)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 63, 26]]
** centroid: 3, normalized-entropy: 0.8714630056611941, [(2, 63), (3, 26)]
*** center 4: selecting labels [1] (freq >= 2) [from [101, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [6, 110, 0]]
** centroid: 5, normalized-entropy: 0.29367630985136944, [(1, 6), (2, 110)]
*** center 6: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [48, 27, 0]]
** centroid: 7, normalized-entropy: 0.9426831892554921, [(1, 48), (2, 27)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2028158294117969] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2028158294117969, 0.15132088651859676] ***
*** finished computation of 7 references, err: [Inf, 0.2028158294117969, 0.15132088651859676] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 39, 25]]
** centroid: 1, normalized-entropy: 0.9652016987500656, [(2, 39), (3, 25)]
*** center 2: selecting labels [1] (freq >= 2) [from [111, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [79, 31, 0]]
** centroid: 5, normalized-entropy: 0.8579163978157118, [(1, 79), (2, 31)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [3, 101, 0]]
** centroid: 6, normalized-entropy: 0.18857195602479668, [(1, 3), (2, 101)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 77, 0]]
** centroid: 7, normalized-entropy: 0.2307099556914763, [(1, 3), (2, 77)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20808595576989597] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20808595576989597, 0.15350475158358085] ***
*** finished computation of 7 references, err: [Inf, 0.20808595576989597, 0.15350475158358085] ***
*** center 1: selecting labels [1] (freq >= 2) [from [121, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 54, 25]]
** centroid: 2, normalized-entropy: 0.9004854334784268, [(2, 54), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [58, 28, 0]]
** centroid: 3, normalized-entropy: 0.9103480624345157, [(1, 58), (2, 28)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [95, 3, 0]]
** centroid: 4, normalized-entropy: 0.19745300438456026, [(1, 95), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [37, 82, 0]]
** centroid: 5, normalized-entropy: 0.8942376044259772, [(1, 37), (2, 82)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [3, 74, 0]]
** centroid: 6, normalized-entropy: 0.23750814382859295, [(1, 3), (2, 74)]
*** center 7: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23715652302872423] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23715652302872423, 0.19213757546501117] ***
*** finished computation of 7 references, err: [Inf, 0.23715652302872423, 0.19213757546501117] ***
*** center 1: selecting labels [1] (freq >= 1) [from [122, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 63, 26]]
** centroid: 2, normalized-entropy: 0.8714630056611941, [(2, 63), (3, 26)]
*** center 3: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [49, 92, 0]]
** centroid: 4, normalized-entropy: 0.9318316196407058, [(1, 49), (2, 92)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [68, 7, 0]]
** centroid: 5, normalized-entropy: 0.44749925503686355, [(1, 68), (2, 7)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 83, 0]]
** centroid: 6, normalized-entropy: 0.16082302082246946, [(1, 2), (2, 83)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [97, 2, 0]]
** centroid: 7, normalized-entropy: 0.14257333025989857, [(1, 97), (2, 2)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2298328037914084] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2298328037914084, 0.1891323066214616] ***
*** finished computation of 7 references, err: [Inf, 0.2298328037914084, 0.1891323066214616] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [111, 3, 0]]
** centroid: 1, normalized-entropy: 0.17556502585750275, [(1, 111), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [98, 23, 0]]
** centroid: 2, normalized-entropy: 0.7016443140299524, [(1, 98), (2, 23)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 44, 25]]
** centroid: 3, normalized-entropy: 0.9445911819316588, [(2, 44), (3, 25)]
*** center 4: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [20, 79, 0]]
** centroid: 5, normalized-entropy: 0.7259501452943735, [(1, 20), (2, 79)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [4, 99, 0]]
** centroid: 6, normalized-entropy: 0.23692474671835093, [(1, 4), (2, 99)]
*** center 7: selecting labels [1] (freq >= 1) [from [93, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24917925607742578] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24917925607742578, 0.19449137762465377] ***
*** finished computation of 7 references, err: [Inf, 0.24917925607742578, 0.19449137762465377] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [53, 90, 0]]
** centroid: 1, normalized-entropy: 0.951154114669856, [(1, 53), (2, 90)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [56, 15, 0]]
** centroid: 2, normalized-entropy: 0.743898745288434, [(1, 56), (2, 15)]
*** center 3: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 76, 25]]
** centroid: 4, normalized-entropy: 0.8073313266519867, [(2, 76), (3, 25)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [40, 57, 0]]
** centroid: 5, normalized-entropy: 0.9777287741161507, [(1, 40), (2, 57)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [63, 3, 0]]
** centroid: 6, normalized-entropy: 0.2667649878030262, [(1, 63), (2, 3)]
*** center 7: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.49985526876339503] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.49985526876339503, 0.29967368552013784] ***
*** starting iteration: 2; err: [Inf, 0.49985526876339503, 0.29967368552013784] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.49985526876339503, 0.29967368552013784, 0.2961648461764102] ***
*** starting iteration: 3; err: [Inf, 0.49985526876339503, 0.29967368552013784, 0.2961648461764102] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.49985526876339503, 0.29967368552013784, 0.2961648461764102, 0.29470218034242995] ***
*** starting iteration: 4; err: [Inf, 0.49985526876339503, 0.29967368552013784, 0.2961648461764102, 0.29470218034242995] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.49985526876339503, 0.29967368552013784, 0.2961648461764102, 0.29470218034242995, 0.29388524870969934] ***
*** finished computation of 3 references, err: [Inf, 0.49985526876339503, 0.29967368552013784, 0.2961648461764102, 0.29470218034242995, 0.29388524870969934] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [237, 16, 0]]
** centroid: 1, normalized-entropy: 0.34017875260384617, [(1, 237), (2, 16)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [156, 52, 0]]
** centroid: 2, normalized-entropy: 0.8112781244591328, [(1, 156), (2, 52)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 179, 26]]
** centroid: 3, normalized-entropy: 0.5486778712031519, [(2, 179), (3, 26)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.5164163163479144] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5164163163479144, 0.298595305801002] ***
*** starting iteration: 2; err: [Inf, 0.5164163163479144, 0.298595305801002] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5164163163479144, 0.298595305801002, 0.29745710274620707] ***
*** starting iteration: 3; err: [Inf, 0.5164163163479144, 0.298595305801002, 0.29745710274620707] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5164163163479144, 0.298595305801002, 0.29745710274620707, 0.2972542283054011] ***
*** finished computation of 3 references, err: [Inf, 0.5164163163479144, 0.298595305801002, 0.29745710274620707, 0.2972542283054011] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [163, 49, 0]]
** centroid: 1, normalized-entropy: 0.7799795512551293, [(1, 163), (2, 49)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [231, 36, 0]]
** centroid: 2, normalized-entropy: 0.5705411428522262, [(1, 231), (2, 36)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 163, 25]]
** centroid: 3, normalized-entropy: 0.5655511182519258, [(2, 163), (3, 25)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3980770204607202] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3980770204607202, 0.2970064483873401] ***
*** starting iteration: 2; err: [Inf, 0.3980770204607202, 0.2970064483873401] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3980770204607202, 0.2970064483873401, 0.29340159655946574] ***
*** starting iteration: 3; err: [Inf, 0.3980770204607202, 0.2970064483873401, 0.29340159655946574] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3980770204607202, 0.2970064483873401, 0.29340159655946574, 0.2925445888976174] ***
*** finished computation of 3 references, err: [Inf, 0.3980770204607202, 0.2970064483873401, 0.29340159655946574, 0.2925445888976174] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [78, 130, 25]]
** centroid: 1, normalized-entropy: 0.8478011012978209, [(1, 78), (2, 130), (3, 25)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [110, 111, 0]]
** centroid: 2, normalized-entropy: 0.9999852306467515, [(1, 110), (2, 111)]
*** center 3: selecting labels [1] (freq >= 2) [from [213, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.30654403658701046] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30654403658701046, 0.2243386637712682] ***
*** starting iteration: 2; err: [Inf, 0.30654403658701046, 0.2243386637712682] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30654403658701046, 0.2243386637712682, 0.19493094417357307] ***
*** starting iteration: 3; err: [Inf, 0.30654403658701046, 0.2243386637712682, 0.19493094417357307] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30654403658701046, 0.2243386637712682, 0.19493094417357307, 0.19182911344889042] ***
*** starting iteration: 4; err: [Inf, 0.30654403658701046, 0.2243386637712682, 0.19493094417357307, 0.19182911344889042] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30654403658701046, 0.2243386637712682, 0.19493094417357307, 0.19182911344889042, 0.19089671903927957] ***
*** finished computation of 7 references, err: [Inf, 0.30654403658701046, 0.2243386637712682, 0.19493094417357307, 0.19182911344889042, 0.19089671903927957] ***
*** center 1: selecting labels [1] (freq >= 2) [from [101, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 69, 25]]
** centroid: 2, normalized-entropy: 0.8356038276131503, [(2, 69), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [39, 65, 0]]
** centroid: 3, normalized-entropy: 0.954434002924965, [(1, 39), (2, 65)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [5, 68, 0]]
** centroid: 4, normalized-entropy: 0.3602750564216625, [(1, 5), (2, 68)]
*** center 5: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [55, 46, 0]]
** centroid: 6, normalized-entropy: 0.9942646092619051, [(1, 55), (2, 46)]
*** center 7: selecting labels [1] (freq >= 2) [from [113, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2848484545409948] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2848484545409948, 0.20606424249122213] ***
*** starting iteration: 2; err: [Inf, 0.2848484545409948, 0.20606424249122213] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2848484545409948, 0.20606424249122213, 0.1892932664751001] ***
*** starting iteration: 3; err: [Inf, 0.2848484545409948, 0.20606424249122213, 0.1892932664751001] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2848484545409948, 0.20606424249122213, 0.1892932664751001, 0.18718081754192464] ***
*** starting iteration: 4; err: [Inf, 0.2848484545409948, 0.20606424249122213, 0.1892932664751001, 0.18718081754192464] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2848484545409948, 0.20606424249122213, 0.1892932664751001, 0.18718081754192464, 0.18573036924914932] ***
*** starting iteration: 5; err: [Inf, 0.2848484545409948, 0.20606424249122213, 0.1892932664751001, 0.18718081754192464, 0.18573036924914932] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2848484545409948, 0.20606424249122213, 0.1892932664751001, 0.18718081754192464, 0.18573036924914932, 0.18468950676691273] ***
*** starting iteration: 6; err: [Inf, 0.2848484545409948, 0.20606424249122213, 0.1892932664751001, 0.18718081754192464, 0.18573036924914932, 0.18468950676691273] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2848484545409948, 0.20606424249122213, 0.1892932664751001, 0.18718081754192464, 0.18573036924914932, 0.18468950676691273, 0.1837811943749594] ***
*** finished computation of 7 references, err: [Inf, 0.2848484545409948, 0.20606424249122213, 0.1892932664751001, 0.18718081754192464, 0.18573036924914932, 0.18468950676691273, 0.1837811943749594] ***
*** center 1: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [101, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [84, 15, 0]]
** centroid: 3, normalized-entropy: 0.6136190195993708, [(1, 84), (2, 15)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [76, 6, 0]]
** centroid: 4, normalized-entropy: 0.3776463213737003, [(1, 76), (2, 6)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 68, 25]]
** centroid: 5, normalized-entropy: 0.8397622740178036, [(2, 68), (3, 25)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [11, 106, 0]]
** centroid: 6, normalized-entropy: 0.4497380872012732, [(1, 11), (2, 106)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [43, 46, 0]]
** centroid: 7, normalized-entropy: 0.9991802351145687, [(1, 43), (2, 46)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2540292114622621] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2540292114622621, 0.21244731486436572] ***
*** finished computation of 7 references, err: [Inf, 0.2540292114622621, 0.21244731486436572] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [90, 64, 0]]
** centroid: 1, normalized-entropy: 0.9793399259567798, [(1, 90), (2, 64)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [112, 57, 0]]
** centroid: 2, normalized-entropy: 0.9221901932180309, [(1, 112), (2, 57)]
*** center 3: selecting labels [1] (freq >= 2) [from [101, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 35, 17]]
** centroid: 4, normalized-entropy: 0.9117517586347538, [(2, 35), (3, 17)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 85, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 6, 9]]
** centroid: 7, normalized-entropy: 0.9709505944546688, [(2, 6), (3, 9)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24910989770668557] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24910989770668557, 0.21523211822137125] ***
*** finished computation of 7 references, err: [Inf, 0.24910989770668557, 0.21523211822137125] ***
*** center 1: selecting labels [1] (freq >= 2) [from [111, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [18, 97, 0]]
** centroid: 2, normalized-entropy: 0.6259231316564361, [(1, 18), (2, 97)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [62, 25, 0]]
** centroid: 3, normalized-entropy: 0.8652817028791377, [(1, 62), (2, 25)]
*** center 4: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
*** center 5: selecting labels [1, 2, 3] (freq >= 2) [from [50, 126, 25]]
** centroid: 5, normalized-entropy: 0.8174931872789751, [(1, 50), (2, 126), (3, 25)]
*** center 6: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2591796308020032] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2591796308020032, 0.22813508646615754] ***
*** finished computation of 7 references, err: [Inf, 0.2591796308020032, 0.22813508646615754] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 69, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [52, 32, 0]]
** centroid: 2, normalized-entropy: 0.9587118829771317, [(1, 52), (2, 32)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 66, 25]]
** centroid: 3, normalized-entropy: 0.8481636883083004, [(2, 66), (3, 25)]
*** center 4: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [102, 28, 0]]
** centroid: 5, normalized-entropy: 0.7516499461153354, [(1, 102), (2, 28)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [13, 46, 0]]
** centroid: 6, normalized-entropy: 0.7607859931846075, [(1, 13), (2, 46)]
*** center 7: selecting labels [1] (freq >= 2) [from [146, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.898058847733983] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.898058847733983, 0.40114456929920894] ***
*** starting iteration: 2; err: [Inf, 0.898058847733983, 0.40114456929920894] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.898058847733983, 0.40114456929920894, 0.3308515829836821] ***
*** starting iteration: 3; err: [Inf, 0.898058847733983, 0.40114456929920894, 0.3308515829836821] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.898058847733983, 0.40114456929920894, 0.3308515829836821, 0.3059681670798979] ***
*** finished computation of 3 references, err: [Inf, 0.898058847733983, 0.40114456929920894, 0.3308515829836821, 0.3059681670798979] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [286, 23, 0]]
** centroid: 1, normalized-entropy: 0.3822554961634987, [(1, 286), (2, 23)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [107, 67, 0]]
** centroid: 2, normalized-entropy: 0.9615357757016392, [(1, 107), (2, 67)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 157, 26]]
** centroid: 3, normalized-entropy: 0.5896512576957701, [(2, 157), (3, 26)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.36889676920890896] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36889676920890896, 0.33219520682455045] ***
*** starting iteration: 2; err: [Inf, 0.36889676920890896, 0.33219520682455045] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36889676920890896, 0.33219520682455045, 0.32567084611098895] ***
*** starting iteration: 3; err: [Inf, 0.36889676920890896, 0.33219520682455045, 0.32567084611098895] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36889676920890896, 0.33219520682455045, 0.32567084611098895, 0.315797483480104] ***
*** finished computation of 3 references, err: [Inf, 0.36889676920890896, 0.33219520682455045, 0.32567084611098895, 0.315797483480104] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [53, 150, 0]]
** centroid: 1, normalized-entropy: 0.8283773572530004, [(1, 53), (2, 150)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [112, 98, 25]]
** centroid: 2, normalized-entropy: 0.8704676355545564, [(1, 112), (2, 98), (3, 25)]
*** center 3: selecting labels [1] (freq >= 2) [from [229, 0, 0]]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4331343104752867] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4331343104752867, 0.30517547008493495] ***
*** starting iteration: 2; err: [Inf, 0.4331343104752867, 0.30517547008493495] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4331343104752867, 0.30517547008493495, 0.29287246201394024] ***
*** starting iteration: 3; err: [Inf, 0.4331343104752867, 0.30517547008493495, 0.29287246201394024] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4331343104752867, 0.30517547008493495, 0.29287246201394024, 0.28979576393023604] ***
*** finished computation of 3 references, err: [Inf, 0.4331343104752867, 0.30517547008493495, 0.29287246201394024, 0.28979576393023604] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [123, 72, 0]]
** centroid: 1, normalized-entropy: 0.9500796252338518, [(1, 123), (2, 72)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [77, 169, 25]]
** centroid: 2, normalized-entropy: 0.793609046979121, [(1, 77), (2, 169), (3, 25)]
*** center 3: selecting labels [1] (freq >= 2) [from [201, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.33741862943162443] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33741862943162443, 0.252138848514394] ***
*** finished computation of 3 references, err: [Inf, 0.33741862943162443, 0.252138848514394] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [296, 22, 0]]
** centroid: 1, normalized-entropy: 0.36286505642841305, [(1, 296), (2, 22)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [94, 31, 0]]
** centroid: 2, normalized-entropy: 0.8080927832245587, [(1, 94), (2, 31)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [3, 194, 26]]
** centroid: 3, normalized-entropy: 0.39115173662159713, [(1, 3), (2, 194), (3, 26)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.29842610647999634] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29842610647999634, 0.2680348777023704] ***
*** finished computation of 3 references, err: [Inf, 0.29842610647999634, 0.2680348777023704] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [157, 53, 0]]
** centroid: 1, normalized-entropy: 0.8150300811526227, [(1, 157), (2, 53)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [120, 50, 0]]
** centroid: 2, normalized-entropy: 0.8739810481273581, [(1, 120), (2, 50)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [117, 145, 25]]
** centroid: 3, normalized-entropy: 0.8404608497654938, [(1, 117), (2, 145), (3, 25)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3714731306014261] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3714731306014261, 0.24219754288277437] ***
*** finished computation of 3 references, err: [Inf, 0.3714731306014261, 0.24219754288277437] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [254, 1, 0]]
** centroid: 1, normalized-entropy: 0.036996925328935865, [(1, 254), (2, 1)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [33, 147, 25]]
** centroid: 2, normalized-entropy: 0.7182755917885603, [(1, 33), (2, 147), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [114, 93, 0]]
** centroid: 3, normalized-entropy: 0.992563136012236, [(1, 114), (2, 93)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2829937837953615] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2829937837953615, 0.20832059797187624] ***
*** starting iteration: 2; err: [Inf, 0.2829937837953615, 0.20832059797187624] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2829937837953615, 0.20832059797187624, 0.19902653608180293] ***
*** starting iteration: 3; err: [Inf, 0.2829937837953615, 0.20832059797187624, 0.19902653608180293] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2829937837953615, 0.20832059797187624, 0.19902653608180293, 0.19617341982211928] ***
*** finished computation of 7 references, err: [Inf, 0.2829937837953615, 0.20832059797187624, 0.19902653608180293, 0.19617341982211928] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 42, 23]]
** centroid: 1, normalized-entropy: 0.937456170782005, [(2, 42), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [60, 27, 0]]
** centroid: 2, normalized-entropy: 0.8935711016541908, [(1, 60), (2, 27)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [26, 62, 0]]
** centroid: 3, normalized-entropy: 0.8756633923230399, [(1, 26), (2, 62)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [74, 53, 0]]
** centroid: 4, normalized-entropy: 0.9801860005643562, [(1, 74), (2, 53)]
*** center 5: selecting labels [1] (freq >= 1) [from [154, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 63, 3]]
** centroid: 7, normalized-entropy: 0.2667649878030262, [(2, 63), (3, 3)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.29495085674202604] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29495085674202604, 0.20754596307270531] ***
*** starting iteration: 2; err: [Inf, 0.29495085674202604, 0.20754596307270531] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29495085674202604, 0.20754596307270531, 0.19300717315420152] ***
*** starting iteration: 3; err: [Inf, 0.29495085674202604, 0.20754596307270531, 0.19300717315420152] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29495085674202604, 0.20754596307270531, 0.19300717315420152, 0.18840027943454582] ***
*** finished computation of 7 references, err: [Inf, 0.29495085674202604, 0.20754596307270531, 0.19300717315420152, 0.18840027943454582] ***
*** center 1: selecting labels [1] (freq >= 1) [from [100, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [85, 7, 0]]
** centroid: 2, normalized-entropy: 0.3882389775123619, [(1, 85), (2, 7)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [21, 86, 0]]
** centroid: 3, normalized-entropy: 0.7143881566559658, [(1, 21), (2, 86)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [1, 111, 0]]
** centroid: 4, normalized-entropy: 0.07360348308562395, [(1, 1), (2, 111)]
*** center 5: selecting labels [1] (freq >= 1) [from [117, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 40, 25]]
** centroid: 6, normalized-entropy: 0.961236604722876, [(2, 40), (3, 25)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [70, 4, 0]]
** centroid: 7, normalized-entropy: 0.30337483608641397, [(1, 70), (2, 4)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2935017993955732] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2935017993955732, 0.20961902468399643] ***
*** starting iteration: 2; err: [Inf, 0.2935017993955732, 0.20961902468399643] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2935017993955732, 0.20961902468399643, 0.19371713566729265] ***
*** starting iteration: 3; err: [Inf, 0.2935017993955732, 0.20961902468399643, 0.19371713566729265] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2935017993955732, 0.20961902468399643, 0.19371713566729265, 0.19045146067614208] ***
*** finished computation of 7 references, err: [Inf, 0.2935017993955732, 0.20961902468399643, 0.19371713566729265, 0.19045146067614208] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 101, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 44, 25]]
** centroid: 2, normalized-entropy: 0.9445911819316588, [(2, 44), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [92, 18, 0]]
** centroid: 3, normalized-entropy: 0.6429383500409613, [(1, 92), (2, 18)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [47, 25, 0]]
** centroid: 4, normalized-entropy: 0.9315627684809641, [(1, 47), (2, 25)]
*** center 5: selecting labels [1] (freq >= 1) [from [144, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [39, 53, 0]]
** centroid: 6, normalized-entropy: 0.9832307535844343, [(1, 39), (2, 53)]
*** center 7: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1894383416622989] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1894383416622989, 0.1601349843026897] ***
*** starting iteration: 2; err: [Inf, 0.1894383416622989, 0.1601349843026897] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1894383416622989, 0.1601349843026897, 0.15018558115684413] ***
*** starting iteration: 3; err: [Inf, 0.1894383416622989, 0.1601349843026897, 0.15018558115684413] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1894383416622989, 0.1601349843026897, 0.15018558115684413, 0.14470282565926793] ***
*** starting iteration: 4; err: [Inf, 0.1894383416622989, 0.1601349843026897, 0.15018558115684413, 0.14470282565926793] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1894383416622989, 0.1601349843026897, 0.15018558115684413, 0.14470282565926793, 0.14363579224101505] ***
*** starting iteration: 5; err: [Inf, 0.1894383416622989, 0.1601349843026897, 0.15018558115684413, 0.14470282565926793, 0.14363579224101505] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1894383416622989, 0.1601349843026897, 0.15018558115684413, 0.14470282565926793, 0.14363579224101505, 0.14301531597854453] ***
*** finished computation of 7 references, err: [Inf, 0.1894383416622989, 0.1601349843026897, 0.15018558115684413, 0.14470282565926793, 0.14363579224101505, 0.14301531597854453] ***
*** center 1: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [88, 3, 0]]
** centroid: 2, normalized-entropy: 0.20905980566852464, [(1, 88), (2, 3)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [74, 26, 0]]
** centroid: 3, normalized-entropy: 0.8267463724926181, [(1, 74), (2, 26)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [3, 109, 0]]
** centroid: 4, normalized-entropy: 0.17800689613931453, [(1, 3), (2, 109)]
*** center 5: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 53, 26]]
** centroid: 6, normalized-entropy: 0.9140185106642174, [(2, 53), (3, 26)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [58, 56, 0]]
** centroid: 7, normalized-entropy: 0.9997779672118906, [(1, 58), (2, 56)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.249938174321231] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.249938174321231, 0.16259924360764572] ***
*** starting iteration: 2; err: [Inf, 0.249938174321231, 0.16259924360764572] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.249938174321231, 0.16259924360764572, 0.1512082393121985] ***
*** starting iteration: 3; err: [Inf, 0.249938174321231, 0.16259924360764572, 0.1512082393121985] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.249938174321231, 0.16259924360764572, 0.1512082393121985, 0.14875172336643067] ***
*** starting iteration: 4; err: [Inf, 0.249938174321231, 0.16259924360764572, 0.1512082393121985, 0.14875172336643067] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.249938174321231, 0.16259924360764572, 0.1512082393121985, 0.14875172336643067, 0.14794393705771022] ***
*** finished computation of 7 references, err: [Inf, 0.249938174321231, 0.16259924360764572, 0.1512082393121985, 0.14875172336643067, 0.14794393705771022] ***
*** center 1: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [21, 75, 0]]
** centroid: 4, normalized-entropy: 0.7578784625383954, [(1, 21), (2, 75)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [92, 37, 0]]
** centroid: 5, normalized-entropy: 0.8645801663882439, [(1, 92), (2, 37)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 84, 25]]
** centroid: 6, normalized-entropy: 0.7768901205770734, [(2, 84), (3, 25)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [30, 52, 0]]
** centroid: 7, normalized-entropy: 0.9474351361840305, [(1, 30), (2, 52)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2615361304536903] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2615361304536903, 0.19476609412864174] ***
*** starting iteration: 2; err: [Inf, 0.2615361304536903, 0.19476609412864174] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2615361304536903, 0.19476609412864174, 0.1647397042636102] ***
*** starting iteration: 3; err: [Inf, 0.2615361304536903, 0.19476609412864174, 0.1647397042636102] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2615361304536903, 0.19476609412864174, 0.1647397042636102, 0.15245526676894217] ***
*** starting iteration: 4; err: [Inf, 0.2615361304536903, 0.19476609412864174, 0.1647397042636102, 0.15245526676894217] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2615361304536903, 0.19476609412864174, 0.1647397042636102, 0.15245526676894217, 0.14975870488633192] ***
*** starting iteration: 5; err: [Inf, 0.2615361304536903, 0.19476609412864174, 0.1647397042636102, 0.15245526676894217, 0.14975870488633192] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2615361304536903, 0.19476609412864174, 0.1647397042636102, 0.15245526676894217, 0.14975870488633192, 0.14852428267468354] ***
*** starting iteration: 6; err: [Inf, 0.2615361304536903, 0.19476609412864174, 0.1647397042636102, 0.15245526676894217, 0.14975870488633192, 0.14852428267468354] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2615361304536903, 0.19476609412864174, 0.1647397042636102, 0.15245526676894217, 0.14975870488633192, 0.14852428267468354, 0.1481448239681759] ***
*** finished computation of 7 references, err: [Inf, 0.2615361304536903, 0.19476609412864174, 0.1647397042636102, 0.15245526676894217, 0.14975870488633192, 0.14852428267468354, 0.1481448239681759] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [23, 61, 0]]
** centroid: 1, normalized-entropy: 0.8468781063424823, [(1, 23), (2, 61)]
*** center 2: selecting labels [1] (freq >= 2) [from [131, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [90, 27, 0]]
** centroid: 4, normalized-entropy: 0.7793498372920851, [(1, 90), (2, 27)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 75, 1]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [67, 23, 0]]
** centroid: 6, normalized-entropy: 0.8199653102187632, [(1, 67), (2, 23)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 55, 24]]
** centroid: 7, normalized-entropy: 0.8858834790484443, [(2, 55), (3, 24)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 12)
[0.9489998981016945, 0.9480078881276487, 0.9379978781176385, 0.9350008691326056, 0.9279848710986435, 0.9049828271385157, 0.8839348330366295, 0.8779917642193092, 0.8650926375477274, 0.8589307870744998, 0.806908705112298, 0.790997584410758]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9489998981016945
finished with 13
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.3838637516045154] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3838637516045154, 0.2291307650903637] ***
*** starting iteration: 2; err: [Inf, 0.3838637516045154, 0.2291307650903637] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3838637516045154, 0.2291307650903637, 0.22907206817256012] ***
*** finished computation of 3 references, err: [Inf, 0.3838637516045154, 0.2291307650903637, 0.22907206817256012] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [105, 135, 13]]
** centroid: 1, normalized-entropy: 0.7761328076293966, [(1, 105), (2, 135), (3, 13)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [90, 112, 13]]
** centroid: 2, normalized-entropy: 0.7954563264003364, [(1, 90), (2, 112), (3, 13)]
*** center 3: selecting labels [1] (freq >= 2) [from [198, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.33965170423945656] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33965170423945656, 0.2362730809343585] ***
*** starting iteration: 2; err: [Inf, 0.33965170423945656, 0.2362730809343585] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33965170423945656, 0.2362730809343585, 0.2333191408771558] ***
*** starting iteration: 3; err: [Inf, 0.33965170423945656, 0.2362730809343585, 0.2333191408771558] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33965170423945656, 0.2362730809343585, 0.2333191408771558, 0.2323175872253] ***
*** starting iteration: 4; err: [Inf, 0.33965170423945656, 0.2362730809343585, 0.2333191408771558, 0.2323175872253] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33965170423945656, 0.2362730809343585, 0.2333191408771558, 0.2323175872253, 0.2320134970495642] ***
*** finished computation of 3 references, err: [Inf, 0.33965170423945656, 0.2362730809343585, 0.2333191408771558, 0.2323175872253, 0.2320134970495642] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [231, 11, 0]]
** centroid: 1, normalized-entropy: 0.2667649878030262, [(1, 231), (2, 11)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [163, 52, 0]]
** centroid: 2, normalized-entropy: 0.7981205031568909, [(1, 163), (2, 52)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 185, 25]]
** centroid: 3, normalized-entropy: 0.5266170655714281, [(2, 185), (3, 25)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3835840700836531] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3835840700836531, 0.23664394224193813] ***
*** starting iteration: 2; err: [Inf, 0.3835840700836531, 0.23664394224193813] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3835840700836531, 0.23664394224193813, 0.23580711253540315] ***
*** finished computation of 3 references, err: [Inf, 0.3835840700836531, 0.23664394224193813, 0.23580711253540315] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [270, 3, 0]]
** centroid: 1, normalized-entropy: 0.08728058888363333, [(1, 270), (2, 3)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [5, 164, 25]]
** centroid: 2, normalized-entropy: 0.4554353983444589, [(1, 5), (2, 164), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [126, 74, 0]]
** centroid: 3, normalized-entropy: 0.950672092687066, [(1, 126), (2, 74)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 13)
[0.9489998981016945, 0.9480078881276487, 0.9379978781176385, 0.9350008691326056, 0.9279848710986435, 0.9219908531285776, 0.9049828271385157, 0.8839348330366295, 0.8779917642193092, 0.8650926375477274, 0.8589307870744998, 0.806908705112298, 0.790997584410758]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9489998981016945
finished with 14
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.35246214612636034] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35246214612636034, 0.26511079374723157] ***
*** starting iteration: 2; err: [Inf, 0.35246214612636034, 0.26511079374723157] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35246214612636034, 0.26511079374723157, 0.23915344152275148] ***
*** starting iteration: 3; err: [Inf, 0.35246214612636034, 0.26511079374723157, 0.23915344152275148] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35246214612636034, 0.26511079374723157, 0.23915344152275148, 0.23122725540397315] ***
*** finished computation of 3 references, err: [Inf, 0.35246214612636034, 0.26511079374723157, 0.23915344152275148, 0.23122725540397315] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [81, 144, 23]]
** centroid: 1, normalized-entropy: 0.8207218431658801, [(1, 81), (2, 144), (3, 23)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [103, 103, 3]]
** centroid: 2, normalized-entropy: 0.6902916775390664, [(1, 103), (2, 103), (3, 3)]
*** center 3: selecting labels [1] (freq >= 2) [from [209, 0, 0]]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.32158383538016583] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32158383538016583, 0.2576729537963845] ***
*** starting iteration: 2; err: [Inf, 0.32158383538016583, 0.2576729537963845] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32158383538016583, 0.2576729537963845, 0.2349773166223668] ***
*** starting iteration: 3; err: [Inf, 0.32158383538016583, 0.2576729537963845, 0.2349773166223668] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32158383538016583, 0.2576729537963845, 0.2349773166223668, 0.23039112284827024] ***
*** finished computation of 3 references, err: [Inf, 0.32158383538016583, 0.2576729537963845, 0.2349773166223668, 0.23039112284827024] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [123, 100, 0]]
** centroid: 1, normalized-entropy: 0.9923128903499058, [(1, 123), (2, 100)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [89, 148, 25]]
** centroid: 2, normalized-entropy: 0.8315775718974957, [(1, 89), (2, 148), (3, 25)]
*** center 3: selecting labels [1] (freq >= 2) [from [182, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.38283259748876364] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38283259748876364, 0.24374139557538116] ***
*** starting iteration: 2; err: [Inf, 0.38283259748876364, 0.24374139557538116] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38283259748876364, 0.24374139557538116, 0.2381655367795026] ***
*** starting iteration: 3; err: [Inf, 0.38283259748876364, 0.24374139557538116, 0.2381655367795026] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38283259748876364, 0.24374139557538116, 0.2381655367795026, 0.23728740204201043] ***
*** finished computation of 3 references, err: [Inf, 0.38283259748876364, 0.24374139557538116, 0.2381655367795026, 0.23728740204201043] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 174, 25]]
** centroid: 1, normalized-entropy: 0.5453252586238155, [(2, 174), (3, 25)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [237, 24, 0]]
** centroid: 2, normalized-entropy: 0.4429586785384856, [(1, 237), (2, 24)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [164, 43, 0]]
** centroid: 3, normalized-entropy: 0.7371202270183788, [(1, 164), (2, 43)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 14)
[0.9489998981016945, 0.9480078881276487, 0.9379978781176385, 0.9350008691326056, 0.9279848710986435, 0.9219908531285776, 0.9049828271385157, 0.8839348330366295, 0.8779917642193092, 0.8650926375477274, 0.8589307870744998, 0.806908705112298, 0.790997584410758, 0.764138389886893]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9489998981016945
finished with 15
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.19492578075767997] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19492578075767997, 0.1557139228853221] ***
*** starting iteration: 2; err: [Inf, 0.19492578075767997, 0.1557139228853221] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19492578075767997, 0.1557139228853221, 0.15211726228693254] ***
*** starting iteration: 3; err: [Inf, 0.19492578075767997, 0.1557139228853221, 0.15211726228693254] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19492578075767997, 0.1557139228853221, 0.15211726228693254, 0.15134725710181324] ***
*** finished computation of 7 references, err: [Inf, 0.19492578075767997, 0.1557139228853221, 0.15211726228693254, 0.15134725710181324] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [64, 24, 0]]
** centroid: 1, normalized-entropy: 0.8453509366224364, [(1, 64), (2, 24)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [90, 60, 0]]
** centroid: 2, normalized-entropy: 0.9709505944546688, [(1, 90), (2, 60)]
*** center 3: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 49, 24]]
** centroid: 4, normalized-entropy: 0.9136617865655933, [(2, 49), (3, 24)]
*** center 5: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 97, 2]]
** centroid: 6, normalized-entropy: 0.14257333025989857, [(2, 97), (3, 2)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [76, 17, 0]]
** centroid: 7, normalized-entropy: 0.6861549474202007, [(1, 76), (2, 17)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24756085453380453] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24756085453380453, 0.17948670123705174] ***
*** starting iteration: 2; err: [Inf, 0.24756085453380453, 0.17948670123705174] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24756085453380453, 0.17948670123705174, 0.15826978132050523] ***
*** starting iteration: 3; err: [Inf, 0.24756085453380453, 0.17948670123705174, 0.15826978132050523] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24756085453380453, 0.17948670123705174, 0.15826978132050523, 0.15221695291336396] ***
*** finished computation of 7 references, err: [Inf, 0.24756085453380453, 0.17948670123705174, 0.15826978132050523, 0.15221695291336396] ***
*** center 1: selecting labels [1] (freq >= 1) [from [134, 0, 0]]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 69, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [127, 30, 0]]
** centroid: 3, normalized-entropy: 0.7037311113864002, [(1, 127), (2, 30)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 21, 25]]
** centroid: 4, normalized-entropy: 0.9945386816500111, [(2, 21), (3, 25)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [2, 118, 0]]
** centroid: 5, normalized-entropy: 0.12229159706937456, [(1, 2), (2, 118)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [37, 5, 0]]
** centroid: 6, normalized-entropy: 0.5266170655714281, [(1, 37), (2, 5)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [94, 5, 0]]
** centroid: 7, normalized-entropy: 0.2885385136944103, [(1, 94), (2, 5)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19410036699259947] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19410036699259947, 0.15774542356232485] ***
*** starting iteration: 2; err: [Inf, 0.19410036699259947, 0.15774542356232485] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19410036699259947, 0.15774542356232485, 0.15123142888406474] ***
*** starting iteration: 3; err: [Inf, 0.19410036699259947, 0.15774542356232485, 0.15123142888406474] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19410036699259947, 0.15774542356232485, 0.15123142888406474, 0.1485648219727784] ***
*** finished computation of 7 references, err: [Inf, 0.19410036699259947, 0.15774542356232485, 0.15123142888406474, 0.1485648219727784] ***
*** center 1: selecting labels [1] (freq >= 1) [from [120, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [66, 15, 0]]
** centroid: 2, normalized-entropy: 0.6912898694057888, [(1, 66), (2, 15)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [105, 18, 0]]
** centroid: 3, normalized-entropy: 0.6006085754131871, [(1, 105), (2, 18)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [30, 56, 0]]
** centroid: 4, normalized-entropy: 0.9330252953592912, [(1, 30), (2, 56)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 65, 5]]
** centroid: 5, normalized-entropy: 0.3712323266408756, [(2, 65), (3, 5)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 87, 20]]
** centroid: 6, normalized-entropy: 0.6949749673676271, [(2, 87), (3, 20)]
*** center 7: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 15)
[0.9489998981016945, 0.9480078881276487, 0.9389988791186396, 0.9379978781176385, 0.9350008691326056, 0.9279848710986435, 0.9219908531285776, 0.9049828271385157, 0.8839348330366295, 0.8779917642193092, 0.8650926375477274, 0.8589307870744998, 0.806908705112298, 0.790997584410758, 0.764138389886893]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9489998981016945
finished with 16
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.27445005851464943] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27445005851464943, 0.20643570628534588] ***
*** starting iteration: 2; err: [Inf, 0.27445005851464943, 0.20643570628534588] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27445005851464943, 0.20643570628534588, 0.19568878744432405] ***
*** starting iteration: 3; err: [Inf, 0.27445005851464943, 0.20643570628534588, 0.19568878744432405] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27445005851464943, 0.20643570628534588, 0.19568878744432405, 0.19402205367857875] ***
*** starting iteration: 4; err: [Inf, 0.27445005851464943, 0.20643570628534588, 0.19568878744432405, 0.19402205367857875] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27445005851464943, 0.20643570628534588, 0.19568878744432405, 0.19402205367857875, 0.19336869110082006] ***
*** finished computation of 7 references, err: [Inf, 0.27445005851464943, 0.20643570628534588, 0.19568878744432405, 0.19402205367857875, 0.19336869110082006] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [42, 52, 0]]
** centroid: 1, normalized-entropy: 0.9918207974218425, [(1, 42), (2, 52)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 60, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [76, 34, 0]]
** centroid: 3, normalized-entropy: 0.8921212805771683, [(1, 76), (2, 34)]
*** center 4: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 75, 26]]
** centroid: 5, normalized-entropy: 0.8228368841492258, [(2, 75), (3, 26)]
*** center 6: selecting labels [1] (freq >= 2) [from [131, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [74, 26, 0]]
** centroid: 7, normalized-entropy: 0.8267463724926181, [(1, 74), (2, 26)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2770220005446333] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2770220005446333, 0.20897649301738216] ***
*** starting iteration: 2; err: [Inf, 0.2770220005446333, 0.20897649301738216] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2770220005446333, 0.20897649301738216, 0.1948444478540518] ***
*** starting iteration: 3; err: [Inf, 0.2770220005446333, 0.20897649301738216, 0.1948444478540518] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2770220005446333, 0.20897649301738216, 0.1948444478540518, 0.1912530075985243] ***
*** starting iteration: 4; err: [Inf, 0.2770220005446333, 0.20897649301738216, 0.1948444478540518, 0.1912530075985243] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2770220005446333, 0.20897649301738216, 0.1948444478540518, 0.1912530075985243, 0.18908154675695135] ***
*** starting iteration: 5; err: [Inf, 0.2770220005446333, 0.20897649301738216, 0.1948444478540518, 0.1912530075985243, 0.18908154675695135] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2770220005446333, 0.20897649301738216, 0.1948444478540518, 0.1912530075985243, 0.18908154675695135, 0.18803004820229322] ***
*** starting iteration: 6; err: [Inf, 0.2770220005446333, 0.20897649301738216, 0.1948444478540518, 0.1912530075985243, 0.18908154675695135, 0.18803004820229322] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2770220005446333, 0.20897649301738216, 0.1948444478540518, 0.1912530075985243, 0.18908154675695135, 0.18803004820229322, 0.18727548606833372] ***
*** finished computation of 7 references, err: [Inf, 0.2770220005446333, 0.20897649301738216, 0.1948444478540518, 0.1912530075985243, 0.18908154675695135, 0.18803004820229322, 0.18727548606833372] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [28, 72, 0]]
** centroid: 1, normalized-entropy: 0.8554508105601307, [(1, 28), (2, 72)]
*** center 2: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [103, 1, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [111, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 73, 25]]
** centroid: 5, normalized-entropy: 0.8192649712314392, [(2, 73), (3, 25)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [3, 73, 0]]
** centroid: 6, normalized-entropy: 0.23987382528036535, [(1, 3), (2, 73)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [53, 29, 0]]
** centroid: 7, normalized-entropy: 0.9372930661967526, [(1, 53), (2, 29)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.256314304405949] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.256314304405949, 0.19970296268146123] ***
*** starting iteration: 2; err: [Inf, 0.256314304405949, 0.19970296268146123] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.256314304405949, 0.19970296268146123, 0.19477177970809512] ***
*** starting iteration: 3; err: [Inf, 0.256314304405949, 0.19970296268146123, 0.19477177970809512] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.256314304405949, 0.19970296268146123, 0.19477177970809512, 0.19359001489439936] ***
*** starting iteration: 4; err: [Inf, 0.256314304405949, 0.19970296268146123, 0.19477177970809512, 0.19359001489439936] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.256314304405949, 0.19970296268146123, 0.19477177970809512, 0.19359001489439936, 0.1924207781677482] ***
*** starting iteration: 5; err: [Inf, 0.256314304405949, 0.19970296268146123, 0.19477177970809512, 0.19359001489439936, 0.1924207781677482] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.256314304405949, 0.19970296268146123, 0.19477177970809512, 0.19359001489439936, 0.1924207781677482, 0.19090661236449427] ***
*** starting iteration: 6; err: [Inf, 0.256314304405949, 0.19970296268146123, 0.19477177970809512, 0.19359001489439936, 0.1924207781677482, 0.19090661236449427] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.256314304405949, 0.19970296268146123, 0.19477177970809512, 0.19359001489439936, 0.1924207781677482, 0.19090661236449427, 0.18850646338340404] ***
*** starting iteration: 7; err: [Inf, 0.256314304405949, 0.19970296268146123, 0.19477177970809512, 0.19359001489439936, 0.1924207781677482, 0.19090661236449427, 0.18850646338340404] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.256314304405949, 0.19970296268146123, 0.19477177970809512, 0.19359001489439936, 0.1924207781677482, 0.19090661236449427, 0.18850646338340404, 0.18830961926464646] ***
*** finished computation of 7 references, err: [Inf, 0.256314304405949, 0.19970296268146123, 0.19477177970809512, 0.19359001489439936, 0.1924207781677482, 0.19090661236449427, 0.18850646338340404, 0.18830961926464646] ***
*** center 1: selecting labels [1] (freq >= 2) [from [150, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [5, 68, 0]]
** centroid: 2, normalized-entropy: 0.3602750564216625, [(1, 5), (2, 68)]
*** center 3: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [41, 48, 0]]
** centroid: 4, normalized-entropy: 0.995533068899466, [(1, 41), (2, 48)]
*** center 5: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 62, 25]]
** centroid: 6, normalized-entropy: 0.8652817028791377, [(2, 62), (3, 25)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [14, 63, 0]]
** centroid: 7, normalized-entropy: 0.6840384356390419, [(1, 14), (2, 63)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 16)
[0.9489998981016945, 0.9480078881276487, 0.9389988791186396, 0.9379978781176385, 0.9350008691326056, 0.9279848710986435, 0.9219908531285776, 0.9049828271385157, 0.885064705423987, 0.8839348330366295, 0.8779917642193092, 0.8650926375477274, 0.8589307870744998, 0.806908705112298, 0.790997584410758, 0.764138389886893]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9489998981016945
finished with 16
iteration 6 finished
generating 4 configurations using top 12 configurations, starting with 16)
[0.9489998981016945, 0.9480078881276487, 0.9389988791186396, 0.9379978781176385, 0.9350008691326056, 0.9279848710986435, 0.9219908531285776, 0.9049828271385157, 0.885064705423987, 0.8839348330366295, 0.8779917642193092, 0.8650926375477274, 0.8589307870744998, 0.806908705112298, 0.790997584410758, 0.764138389886893]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9489998981016945
finished with 16
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 16)
[0.9489998981016945, 0.9480078881276487, 0.9389988791186396, 0.9379978781176385, 0.9350008691326056, 0.9279848710986435, 0.9219908531285776, 0.9049828271385157, 0.885064705423987, 0.8839348330366295, 0.8779917642193092, 0.8650926375477274, 0.8589307870744998, 0.806908705112298, 0.790997584410758, 0.764138389886893]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9489998981016945
finished with 18
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.5054990919306874] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5054990919306874, 0.2939305620340703] ***
*** starting iteration: 2; err: [Inf, 0.5054990919306874, 0.2939305620340703] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5054990919306874, 0.2939305620340703, 0.2920569167255673] ***
*** starting iteration: 3; err: [Inf, 0.5054990919306874, 0.2939305620340703, 0.2920569167255673] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5054990919306874, 0.2939305620340703, 0.2920569167255673, 0.29136406320116454] ***
*** finished computation of 3 references, err: [Inf, 0.5054990919306874, 0.2939305620340703, 0.2920569167255673, 0.29136406320116454] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [59, 158, 26]]
** centroid: 1, normalized-entropy: 0.7852731062657223, [(1, 59), (2, 158), (3, 26)]
*** center 2: selecting labels [1] (freq >= 2) [from [213, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [121, 89, 0]]
** centroid: 3, normalized-entropy: 0.9831849125888115, [(1, 121), (2, 89)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4556706750847824] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4556706750847824, 0.29517096652463637] ***
*** starting iteration: 2; err: [Inf, 0.4556706750847824, 0.29517096652463637] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4556706750847824, 0.29517096652463637, 0.2942230155401077] ***
*** finished computation of 3 references, err: [Inf, 0.4556706750847824, 0.29517096652463637, 0.2942230155401077] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [98, 129, 25]]
** centroid: 1, normalized-entropy: 0.8549805585990252, [(1, 98), (2, 129), (3, 25)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [109, 119, 0]]
** centroid: 2, normalized-entropy: 0.9986119210317141, [(1, 109), (2, 119)]
*** center 3: selecting labels [1] (freq >= 2) [from [187, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.39590671943637473] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39590671943637473, 0.29761476496114453] ***
*** starting iteration: 2; err: [Inf, 0.39590671943637473, 0.29761476496114453] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39590671943637473, 0.29761476496114453, 0.2935205475166105] ***
*** starting iteration: 3; err: [Inf, 0.39590671943637473, 0.29761476496114453, 0.2935205475166105] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39590671943637473, 0.29761476496114453, 0.2935205475166105, 0.2926369434672183] ***
*** finished computation of 3 references, err: [Inf, 0.39590671943637473, 0.29761476496114453, 0.2935205475166105, 0.2926369434672183] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [82, 130, 25]]
** centroid: 1, normalized-entropy: 0.8500478372585974, [(1, 82), (2, 130), (3, 25)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [110, 111, 0]]
** centroid: 2, normalized-entropy: 0.9999852306467515, [(1, 110), (2, 111)]
*** center 3: selecting labels [1] (freq >= 2) [from [209, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3060508788096251] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3060508788096251, 0.2517742433839732] ***
*** starting iteration: 2; err: [Inf, 0.3060508788096251, 0.2517742433839732] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3060508788096251, 0.2517742433839732, 0.24023669376527448] ***
*** starting iteration: 3; err: [Inf, 0.3060508788096251, 0.2517742433839732, 0.24023669376527448] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3060508788096251, 0.2517742433839732, 0.24023669376527448, 0.23710202957523074] ***
*** finished computation of 3 references, err: [Inf, 0.3060508788096251, 0.2517742433839732, 0.24023669376527448, 0.23710202957523074] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [263, 9, 0]]
** centroid: 1, normalized-entropy: 0.20965027067366165, [(1, 263), (2, 9)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [3, 172, 26]]
** centroid: 2, normalized-entropy: 0.4192937279221198, [(1, 3), (2, 172), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [127, 66, 0]]
** centroid: 3, normalized-entropy: 0.9266903683679613, [(1, 127), (2, 66)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.38840588000274895] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38840588000274895, 0.23834436291736597] ***
*** starting iteration: 2; err: [Inf, 0.38840588000274895, 0.23834436291736597] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38840588000274895, 0.23834436291736597, 0.23645437316692572] ***
*** starting iteration: 3; err: [Inf, 0.38840588000274895, 0.23834436291736597, 0.23645437316692572] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38840588000274895, 0.23834436291736597, 0.23645437316692572, 0.2358949691925695] ***
*** finished computation of 3 references, err: [Inf, 0.38840588000274895, 0.23834436291736597, 0.23645437316692572, 0.2358949691925695] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [243, 9, 0]]
** centroid: 1, normalized-entropy: 0.2222848306856879, [(1, 243), (2, 9)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 171, 25]]
** centroid: 2, normalized-entropy: 0.5506833911057354, [(2, 171), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [151, 68, 0]]
** centroid: 3, normalized-entropy: 0.8937524073495298, [(1, 151), (2, 68)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.34811573487607345] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34811573487607345, 0.2402728834040072] ***
*** starting iteration: 2; err: [Inf, 0.34811573487607345, 0.2402728834040072] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34811573487607345, 0.2402728834040072, 0.2369119049939348] ***
*** starting iteration: 3; err: [Inf, 0.34811573487607345, 0.2402728834040072, 0.2369119049939348] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34811573487607345, 0.2402728834040072, 0.2369119049939348, 0.23637297701068233] ***
*** finished computation of 3 references, err: [Inf, 0.34811573487607345, 0.2402728834040072, 0.2369119049939348, 0.23637297701068233] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [255, 17, 0]]
** centroid: 1, normalized-entropy: 0.3372900666170139, [(1, 255), (2, 17)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [146, 66, 0]]
** centroid: 2, normalized-entropy: 0.8946921645908384, [(1, 146), (2, 66)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 158, 25]]
** centroid: 3, normalized-entropy: 0.5752967620198328, [(2, 158), (3, 25)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 18)
[0.9489998981016945, 0.9480078881276487, 0.9389988791186396, 0.9379978781176385, 0.9350008691326056, 0.9279848710986435, 0.9219908531285776, 0.9049828271385157, 0.885064705423987, 0.8839348330366295, 0.8779917642193092, 0.866962771154388, 0.8650926375477274, 0.8589307870744998, 0.8319876762990536, 0.806908705112298, 0.790997584410758, 0.764138389886893]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9489998981016945
finished with 19
iteration 9 finished
*** starting iteration: 1; err: [Inf, 0.22585830151441846] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22585830151441846, 0.18879058407256016] ***
*** starting iteration: 2; err: [Inf, 0.22585830151441846, 0.18879058407256016] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22585830151441846, 0.18879058407256016, 0.18631393047099984] ***
*** starting iteration: 3; err: [Inf, 0.22585830151441846, 0.18879058407256016, 0.18631393047099984] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22585830151441846, 0.18879058407256016, 0.18631393047099984, 0.1862822557930966] ***
*** finished computation of 7 references, err: [Inf, 0.22585830151441846, 0.18879058407256016, 0.18631393047099984, 0.1862822557930966] ***
*** center 1: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [67, 23, 0]]
** centroid: 2, normalized-entropy: 0.8199653102187632, [(1, 67), (2, 23)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 71, 26]]
** centroid: 3, normalized-entropy: 0.8386398715015523, [(2, 71), (3, 26)]
*** center 4: selecting labels [1] (freq >= 2) [from [123, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [37, 68, 0]]
** centroid: 5, normalized-entropy: 0.9361764916347493, [(1, 37), (2, 68)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [21, 80, 0]]
** centroid: 6, normalized-entropy: 0.7374895672137457, [(1, 21), (2, 80)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [63, 5, 0]]
** centroid: 7, normalized-entropy: 0.378958787501346, [(1, 63), (2, 5)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2388188858646369] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2388188858646369, 0.18972379031047962] ***
*** starting iteration: 2; err: [Inf, 0.2388188858646369, 0.18972379031047962] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2388188858646369, 0.18972379031047962, 0.18658352589075533] ***
*** starting iteration: 3; err: [Inf, 0.2388188858646369, 0.18972379031047962, 0.18658352589075533] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2388188858646369, 0.18972379031047962, 0.18658352589075533, 0.1854840528326056] ***
*** finished computation of 7 references, err: [Inf, 0.2388188858646369, 0.18972379031047962, 0.18658352589075533, 0.1854840528326056] ***
*** center 1: selecting labels [1] (freq >= 2) [from [107, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [86, 11, 0]]
** centroid: 2, normalized-entropy: 0.5100930822965021, [(1, 86), (2, 11)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 47, 25]]
** centroid: 3, normalized-entropy: 0.9315627684809641, [(2, 47), (3, 25)]
*** center 4: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [8, 119, 0]]
** centroid: 5, normalized-entropy: 0.3392097746962188, [(1, 8), (2, 119)]
*** center 6: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [21, 71, 0]]
** centroid: 7, normalized-entropy: 0.7749672673267259, [(1, 21), (2, 71)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24377892129374543] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24377892129374543, 0.18940382335625444] ***
*** starting iteration: 2; err: [Inf, 0.24377892129374543, 0.18940382335625444] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24377892129374543, 0.18940382335625444, 0.1868781597979054] ***
*** starting iteration: 3; err: [Inf, 0.24377892129374543, 0.18940382335625444, 0.1868781597979054] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24377892129374543, 0.18940382335625444, 0.1868781597979054, 0.18654462464315735] ***
*** finished computation of 7 references, err: [Inf, 0.24377892129374543, 0.18940382335625444, 0.1868781597979054, 0.18654462464315735] ***
*** center 1: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [90, 13, 0]]
** centroid: 2, normalized-entropy: 0.5469617407220055, [(1, 90), (2, 13)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 71, 24]]
** centroid: 3, normalized-entropy: 0.8154224977821039, [(2, 71), (3, 24)]
*** center 4: selecting labels [1] (freq >= 2) [from [114, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [56, 44, 0]]
** centroid: 5, normalized-entropy: 0.9895875212220558, [(1, 56), (2, 44)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 63, 1]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [56, 50, 0]]
** centroid: 7, normalized-entropy: 0.9976875760352552, [(1, 56), (2, 50)]
finished with 10 centroids; started with 7
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.2059782800162211] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2059782800162211, 0.15420218523708173] ***
*** starting iteration: 2; err: [Inf, 0.2059782800162211, 0.15420218523708173] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2059782800162211, 0.15420218523708173, 0.15027548233093693] ***
*** starting iteration: 3; err: [Inf, 0.2059782800162211, 0.15420218523708173, 0.15027548233093693] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2059782800162211, 0.15420218523708173, 0.15027548233093693, 0.14976585920341312] ***
*** finished computation of 7 references, err: [Inf, 0.2059782800162211, 0.15420218523708173, 0.15027548233093693, 0.14976585920341312] ***
*** center 1: selecting labels [1] (freq >= 2) [from [158, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 111, 38]]
** centroid: 2, normalized-entropy: 0.8191590796855307, [(2, 111), (3, 38)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [102, 16, 0]]
** centroid: 3, normalized-entropy: 0.572580465623769, [(1, 102), (2, 16)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [148, 55, 0]]
** centroid: 4, normalized-entropy: 0.8428044770032017, [(1, 148), (2, 55)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [57, 81, 0]]
** centroid: 5, normalized-entropy: 0.978070970973496, [(1, 57), (2, 81)]
*** center 6: selecting labels [1] (freq >= 2) [from [126, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 105, 0]]
** centroid: 7, normalized-entropy: 0.18312206830137262, [(1, 3), (2, 105)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19331976653821767] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19331976653821767, 0.1529964527543634] ***
*** starting iteration: 2; err: [Inf, 0.19331976653821767, 0.1529964527543634] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19331976653821767, 0.1529964527543634, 0.14858160492032765] ***
*** starting iteration: 3; err: [Inf, 0.19331976653821767, 0.1529964527543634, 0.14858160492032765] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19331976653821767, 0.1529964527543634, 0.14858160492032765, 0.14825969157740473] ***
*** finished computation of 7 references, err: [Inf, 0.19331976653821767, 0.1529964527543634, 0.14858160492032765, 0.14825969157740473] ***
*** center 1: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 34, 21]]
** centroid: 2, normalized-entropy: 0.9593160320543779, [(2, 34), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [53, 13, 0]]
** centroid: 3, normalized-entropy: 0.7158259310602146, [(1, 53), (2, 13)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [9, 75, 0]]
** centroid: 4, normalized-entropy: 0.4912373418243334, [(1, 9), (2, 75)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [19, 51, 0]]
** centroid: 5, normalized-entropy: 0.8435070855739035, [(1, 19), (2, 51)]
*** center 6: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [78, 2, 0]]
** centroid: 7, normalized-entropy: 0.1686609314966701, [(1, 78), (2, 2)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18884644070453943] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18884644070453943, 0.1492258871635422] ***
*** starting iteration: 2; err: [Inf, 0.18884644070453943, 0.1492258871635422] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18884644070453943, 0.1492258871635422, 0.14484785337746142] ***
*** starting iteration: 3; err: [Inf, 0.18884644070453943, 0.1492258871635422, 0.14484785337746142] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18884644070453943, 0.1492258871635422, 0.14484785337746142, 0.1443289875118062] ***
*** finished computation of 7 references, err: [Inf, 0.18884644070453943, 0.1492258871635422, 0.14484785337746142, 0.1443289875118062] ***
*** center 1: selecting labels [1] (freq >= 2) [from [58, 1, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 41, 18]]
** centroid: 2, normalized-entropy: 0.8874179270685693, [(2, 41), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [45, 9, 0]]
** centroid: 3, normalized-entropy: 0.6500224216483541, [(1, 45), (2, 9)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [55, 41, 0]]
** centroid: 4, normalized-entropy: 0.98460399620868, [(1, 55), (2, 41)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [9, 93, 0]]
** centroid: 5, normalized-entropy: 0.43055186701043935, [(1, 9), (2, 93)]
*** center 6: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2029903858434409] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2029903858434409, 0.14797075270302593] ***
*** starting iteration: 2; err: [Inf, 0.2029903858434409, 0.14797075270302593] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2029903858434409, 0.14797075270302593, 0.14368168500065803] ***
*** starting iteration: 3; err: [Inf, 0.2029903858434409, 0.14797075270302593, 0.14368168500065803] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2029903858434409, 0.14797075270302593, 0.14368168500065803, 0.14323940660059453] ***
*** finished computation of 7 references, err: [Inf, 0.2029903858434409, 0.14797075270302593, 0.14368168500065803, 0.14323940660059453] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 53, 16]]
** centroid: 1, normalized-entropy: 0.7812812090702043, [(2, 53), (3, 16)]
*** center 2: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [59, 4, 0]]
** centroid: 3, normalized-entropy: 0.3411538931451763, [(1, 59), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [71, 35, 0]]
** centroid: 4, normalized-entropy: 0.9151190292999326, [(1, 71), (2, 35)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [28, 21, 0]]
** centroid: 5, normalized-entropy: 0.9852281360342514, [(1, 28), (2, 21)]
*** center 6: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [4, 70, 0]]
** centroid: 7, normalized-entropy: 0.30337483608641397, [(1, 4), (2, 70)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1859426263794303] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1859426263794303, 0.15324847777746617] ***
*** starting iteration: 2; err: [Inf, 0.1859426263794303, 0.15324847777746617] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1859426263794303, 0.15324847777746617, 0.14998431322257966] ***
*** starting iteration: 3; err: [Inf, 0.1859426263794303, 0.15324847777746617, 0.14998431322257966] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1859426263794303, 0.15324847777746617, 0.14998431322257966, 0.14904328729957342] ***
*** finished computation of 7 references, err: [Inf, 0.1859426263794303, 0.15324847777746617, 0.14998431322257966, 0.14904328729957342] ***
*** center 1: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 41, 20]]
** centroid: 2, normalized-entropy: 0.9127341558073343, [(2, 41), (3, 20)]
*** center 3: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [36, 44, 0]]
** centroid: 4, normalized-entropy: 0.9927744539878083, [(1, 36), (2, 44)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [18, 44, 0]]
** centroid: 5, normalized-entropy: 0.8691375806126381, [(1, 18), (2, 44)]
*** center 6: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 57, 0]]
** centroid: 7, normalized-entropy: 0.2863969571159561, [(1, 3), (2, 57)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19133479595184327] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19133479595184327, 0.14997108331881465] ***
*** starting iteration: 2; err: [Inf, 0.19133479595184327, 0.14997108331881465] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19133479595184327, 0.14997108331881465, 0.1465483208457008] ***
*** starting iteration: 3; err: [Inf, 0.19133479595184327, 0.14997108331881465, 0.1465483208457008] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19133479595184327, 0.14997108331881465, 0.1465483208457008, 0.145493424102664] ***
*** finished computation of 7 references, err: [Inf, 0.19133479595184327, 0.14997108331881465, 0.1465483208457008, 0.145493424102664] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [2, 89, 0]]
** centroid: 1, normalized-entropy: 0.15240699892386778, [(1, 2), (2, 89)]
*** center 2: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [54, 26, 0]]
** centroid: 3, normalized-entropy: 0.9097361225311661, [(1, 54), (2, 26)]
*** center 4: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 42, 21]]
** centroid: 5, normalized-entropy: 0.9182958340544894, [(2, 42), (3, 21)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [63, 16, 0]]
** centroid: 6, normalized-entropy: 0.7269625813353975, [(1, 63), (2, 16)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [48, 2, 0]]
** centroid: 7, normalized-entropy: 0.24229218908241482, [(1, 48), (2, 2)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18643622970767318] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18643622970767318, 0.1519471604730934] ***
*** starting iteration: 2; err: [Inf, 0.18643622970767318, 0.1519471604730934] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18643622970767318, 0.1519471604730934, 0.14621647313982247] ***
*** starting iteration: 3; err: [Inf, 0.18643622970767318, 0.1519471604730934, 0.14621647313982247] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18643622970767318, 0.1519471604730934, 0.14621647313982247, 0.14450059100054205] ***
*** finished computation of 7 references, err: [Inf, 0.18643622970767318, 0.1519471604730934, 0.14621647313982247, 0.14450059100054205] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [48, 43, 0]]
** centroid: 1, normalized-entropy: 0.9978211842997324, [(1, 48), (2, 43)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [54, 7, 0]]
** centroid: 2, normalized-entropy: 0.5140912790181233, [(1, 54), (2, 7)]
*** center 3: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 51, 21]]
** centroid: 4, normalized-entropy: 0.8708644692353648, [(2, 51), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [9, 74, 0]]
** centroid: 5, normalized-entropy: 0.4951734787020683, [(1, 9), (2, 74)]
*** center 6: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18842897265963257] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18842897265963257, 0.15421265779994428] ***
*** starting iteration: 2; err: [Inf, 0.18842897265963257, 0.15421265779994428] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18842897265963257, 0.15421265779994428, 0.1506590633839369] ***
*** starting iteration: 3; err: [Inf, 0.18842897265963257, 0.15421265779994428, 0.1506590633839369] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18842897265963257, 0.15421265779994428, 0.1506590633839369, 0.1491095267063938] ***
*** finished computation of 7 references, err: [Inf, 0.18842897265963257, 0.15421265779994428, 0.1506590633839369, 0.1491095267063938] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [48, 20, 0]]
** centroid: 1, normalized-entropy: 0.8739810481273581, [(1, 48), (2, 20)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [51, 12, 0]]
** centroid: 2, normalized-entropy: 0.7024665512903904, [(1, 51), (2, 12)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 50, 18]]
** centroid: 3, normalized-entropy: 0.8337649072106652, [(2, 50), (3, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [49, 19, 0]]
** centroid: 5, normalized-entropy: 0.8546480601169081, [(1, 49), (2, 19)]
*** center 6: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 85, 0]]
** centroid: 7, normalized-entropy: 0.21450983370697788, [(1, 3), (2, 85)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18341435964405536] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18341435964405536, 0.14753871162235738] ***
*** starting iteration: 2; err: [Inf, 0.18341435964405536, 0.14753871162235738] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18341435964405536, 0.14753871162235738, 0.1423459408786148] ***
*** starting iteration: 3; err: [Inf, 0.18341435964405536, 0.14753871162235738, 0.1423459408786148] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18341435964405536, 0.14753871162235738, 0.1423459408786148, 0.14190765979955905] ***
*** finished computation of 7 references, err: [Inf, 0.18341435964405536, 0.14753871162235738, 0.1423459408786148, 0.14190765979955905] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [5, 95, 0]]
** centroid: 1, normalized-entropy: 0.2863969571159561, [(1, 5), (2, 95)]
*** center 2: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [42, 33, 0]]
** centroid: 3, normalized-entropy: 0.9895875212220558, [(1, 42), (2, 33)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [42, 8, 0]]
** centroid: 4, normalized-entropy: 0.634309554640566, [(1, 42), (2, 8)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 46, 19]]
** centroid: 5, normalized-entropy: 0.871683617119982, [(2, 46), (3, 19)]
*** center 6: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [61, 10, 0]]
** centroid: 7, normalized-entropy: 0.5864477034453907, [(1, 61), (2, 10)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1863800981529057] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1863800981529057, 0.15068451223662124] ***
*** starting iteration: 2; err: [Inf, 0.1863800981529057, 0.15068451223662124] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1863800981529057, 0.15068451223662124, 0.14645499917585403] ***
*** starting iteration: 3; err: [Inf, 0.1863800981529057, 0.15068451223662124, 0.14645499917585403] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1863800981529057, 0.15068451223662124, 0.14645499917585403, 0.1455446327831596] ***
*** finished computation of 7 references, err: [Inf, 0.1863800981529057, 0.15068451223662124, 0.14645499917585403, 0.1455446327831596] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [35, 44, 0]]
** centroid: 1, normalized-entropy: 0.9906174973781801, [(1, 35), (2, 44)]
*** center 2: selecting labels [1] (freq >= 2) [from [59, 1, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 51, 15]]
** centroid: 4, normalized-entropy: 0.7732266742876346, [(2, 51), (3, 15)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [63, 10, 0]]
** centroid: 5, normalized-entropy: 0.576291461217437, [(1, 63), (2, 10)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 82, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [67, 1, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18486922032758593] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18486922032758593, 0.1503634205646813] ***
*** starting iteration: 2; err: [Inf, 0.18486922032758593, 0.1503634205646813] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18486922032758593, 0.1503634205646813, 0.14830807877704502] ***
*** starting iteration: 3; err: [Inf, 0.18486922032758593, 0.1503634205646813, 0.14830807877704502] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18486922032758593, 0.1503634205646813, 0.14830807877704502, 0.1481787639525719] ***
*** finished computation of 7 references, err: [Inf, 0.18486922032758593, 0.1503634205646813, 0.14830807877704502, 0.1481787639525719] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 75, 1]]
*** center 2: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [48, 24, 0]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(1, 48), (2, 24)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [73, 2, 0]]
** centroid: 4, normalized-entropy: 0.1773894531859976, [(1, 73), (2, 2)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 59, 13]]
** centroid: 5, normalized-entropy: 0.6812908868842175, [(2, 59), (3, 13)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [54, 19, 0]]
** centroid: 6, normalized-entropy: 0.8271595195340525, [(1, 54), (2, 19)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [46, 11, 0]]
** centroid: 7, normalized-entropy: 0.7076690004167966, [(1, 46), (2, 11)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20906246207095683] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20906246207095683, 0.15375089770089834] ***
*** starting iteration: 2; err: [Inf, 0.20906246207095683, 0.15375089770089834] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20906246207095683, 0.15375089770089834, 0.14864368574135006] ***
*** starting iteration: 3; err: [Inf, 0.20906246207095683, 0.15375089770089834, 0.14864368574135006] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20906246207095683, 0.15375089770089834, 0.14864368574135006, 0.14802308746427298] ***
*** finished computation of 7 references, err: [Inf, 0.20906246207095683, 0.15375089770089834, 0.14864368574135006, 0.14802308746427298] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [79, 5, 0]]
** centroid: 1, normalized-entropy: 0.3255517134879513, [(1, 79), (2, 5)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [46, 34, 0]]
** centroid: 2, normalized-entropy: 0.9837082626231858, [(1, 46), (2, 34)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 45, 17]]
** centroid: 3, normalized-entropy: 0.8474179614176633, [(2, 45), (3, 17)]
*** center 4: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [21, 44, 0]]
** centroid: 5, normalized-entropy: 0.9076961653608385, [(1, 21), (2, 44)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 50, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1914327931366861] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1914327931366861, 0.14912954836152495] ***
*** starting iteration: 2; err: [Inf, 0.1914327931366861, 0.14912954836152495] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1914327931366861, 0.14912954836152495, 0.14605482381395996] ***
*** starting iteration: 3; err: [Inf, 0.1914327931366861, 0.14912954836152495, 0.14605482381395996] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1914327931366861, 0.14912954836152495, 0.14605482381395996, 0.14523615182843058] ***
*** finished computation of 7 references, err: [Inf, 0.1914327931366861, 0.14912954836152495, 0.14605482381395996, 0.14523615182843058] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [11, 66, 0]]
** centroid: 1, normalized-entropy: 0.5916727785823274, [(1, 11), (2, 66)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [54, 30, 0]]
** centroid: 2, normalized-entropy: 0.940285958670631, [(1, 54), (2, 30)]
*** center 3: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 53, 21]]
** centroid: 4, normalized-entropy: 0.8605553930586318, [(2, 53), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [47, 19, 0]]
** centroid: 5, normalized-entropy: 0.8659653498997099, [(1, 47), (2, 19)]
*** center 6: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19390389457438142] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19390389457438142, 0.15381837798841297] ***
*** starting iteration: 2; err: [Inf, 0.19390389457438142, 0.15381837798841297] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19390389457438142, 0.15381837798841297, 0.14900471210293473] ***
*** starting iteration: 3; err: [Inf, 0.19390389457438142, 0.15381837798841297, 0.14900471210293473] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19390389457438142, 0.15381837798841297, 0.14900471210293473, 0.1460692126918584] ***
*** finished computation of 7 references, err: [Inf, 0.19390389457438142, 0.15381837798841297, 0.14900471210293473, 0.1460692126918584] ***
*** center 1: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 53, 17]]
** centroid: 2, normalized-entropy: 0.7997594113291759, [(2, 53), (3, 17)]
*** center 3: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [60, 34, 0]]
** centroid: 4, normalized-entropy: 0.9440870182837795, [(1, 60), (2, 34)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [25, 44, 0]]
** centroid: 5, normalized-entropy: 0.9445911819316588, [(1, 25), (2, 44)]
*** center 6: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 54, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20210523776710032] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20210523776710032, 0.15402409899700434] ***
*** starting iteration: 2; err: [Inf, 0.20210523776710032, 0.15402409899700434] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20210523776710032, 0.15402409899700434, 0.1474399742372334] ***
*** starting iteration: 3; err: [Inf, 0.20210523776710032, 0.15402409899700434, 0.1474399742372334] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20210523776710032, 0.15402409899700434, 0.1474399742372334, 0.1450447052596137] ***
*** finished computation of 7 references, err: [Inf, 0.20210523776710032, 0.15402409899700434, 0.1474399742372334, 0.1450447052596137] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [12, 78, 0]]
** centroid: 1, normalized-entropy: 0.5665095065529052, [(1, 12), (2, 78)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [49, 17, 0]]
** centroid: 2, normalized-entropy: 0.8230660790114689, [(1, 49), (2, 17)]
*** center 3: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 36, 19]]
** centroid: 4, normalized-entropy: 0.9299429352091801, [(2, 36), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [80, 2, 0]]
** centroid: 5, normalized-entropy: 0.16542703399626665, [(1, 80), (2, 2)]
*** center 6: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 59, 0]]
** centroid: 7, normalized-entropy: 0.2795055456366802, [(1, 3), (2, 59)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18596453777700664] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18596453777700664, 0.1488511170442216] ***
*** starting iteration: 2; err: [Inf, 0.18596453777700664, 0.1488511170442216] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18596453777700664, 0.1488511170442216, 0.14412722888588905] ***
*** starting iteration: 3; err: [Inf, 0.18596453777700664, 0.1488511170442216, 0.14412722888588905] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18596453777700664, 0.1488511170442216, 0.14412722888588905, 0.1430909827426076] ***
*** finished computation of 7 references, err: [Inf, 0.18596453777700664, 0.1488511170442216, 0.14412722888588905, 0.1430909827426076] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [6, 91, 0]]
** centroid: 1, normalized-entropy: 0.3347676126777638, [(1, 6), (2, 91)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [43, 40, 0]]
** centroid: 2, normalized-entropy: 0.9990574042663861, [(1, 43), (2, 40)]
*** center 3: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 49, 20]]
** centroid: 4, normalized-entropy: 0.868533960265235, [(2, 49), (3, 20)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [67, 6, 0]]
** centroid: 5, normalized-entropy: 0.4098553703184051, [(1, 67), (2, 6)]
*** center 6: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [47, 10, 0]]
** centroid: 7, normalized-entropy: 0.6699960320994334, [(1, 47), (2, 10)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18894987524859608] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18894987524859608, 0.14648388236016036] ***
*** starting iteration: 2; err: [Inf, 0.18894987524859608, 0.14648388236016036] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18894987524859608, 0.14648388236016036, 0.1429770821109414] ***
*** starting iteration: 3; err: [Inf, 0.18894987524859608, 0.14648388236016036, 0.1429770821109414] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18894987524859608, 0.14648388236016036, 0.1429770821109414, 0.14235275378078222] ***
*** finished computation of 7 references, err: [Inf, 0.18894987524859608, 0.14648388236016036, 0.1429770821109414, 0.14235275378078222] ***
*** center 1: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 40, 15]]
** centroid: 2, normalized-entropy: 0.8453509366224364, [(2, 40), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [52, 9, 0]]
** centroid: 3, normalized-entropy: 0.603652249754401, [(1, 52), (2, 9)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [44, 46, 0]]
** centroid: 4, normalized-entropy: 0.9996437496778561, [(1, 44), (2, 46)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [10, 90, 0]]
** centroid: 5, normalized-entropy: 0.46899559358928133, [(1, 10), (2, 90)]
*** center 6: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20579375134315342] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20579375134315342, 0.1533336407393217] ***
*** starting iteration: 2; err: [Inf, 0.20579375134315342, 0.1533336407393217] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20579375134315342, 0.1533336407393217, 0.14886029192619027] ***
*** starting iteration: 3; err: [Inf, 0.20579375134315342, 0.1533336407393217, 0.14886029192619027] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20579375134315342, 0.1533336407393217, 0.14886029192619027, 0.14790149603504688] ***
*** finished computation of 7 references, err: [Inf, 0.20579375134315342, 0.1533336407393217, 0.14886029192619027, 0.14790149603504688] ***
*** center 1: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [84, 4, 0]]
** centroid: 2, normalized-entropy: 0.2667649878030262, [(1, 84), (2, 4)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 37, 18]]
** centroid: 3, normalized-entropy: 0.9121156307204275, [(2, 37), (3, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [42, 22, 0]]
** centroid: 5, normalized-entropy: 0.9283620723948678, [(1, 42), (2, 22)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [10, 52, 0]]
** centroid: 6, normalized-entropy: 0.6373874992221911, [(1, 10), (2, 52)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 67, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1869267040435225] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1869267040435225, 0.1514830375444144] ***
*** starting iteration: 2; err: [Inf, 0.1869267040435225, 0.1514830375444144] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1869267040435225, 0.1514830375444144, 0.14729225805029272] ***
*** starting iteration: 3; err: [Inf, 0.1869267040435225, 0.1514830375444144, 0.14729225805029272] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1869267040435225, 0.1514830375444144, 0.14729225805029272, 0.14678189083188772] ***
*** finished computation of 7 references, err: [Inf, 0.1869267040435225, 0.1514830375444144, 0.14729225805029272, 0.14678189083188772] ***
*** center 1: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [62, 11, 0]]
** centroid: 2, normalized-entropy: 0.6115516951951333, [(1, 62), (2, 11)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 38, 19]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(2, 38), (3, 19)]
*** center 4: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [23, 45, 0]]
** centroid: 5, normalized-entropy: 0.9231199835423002, [(1, 23), (2, 45)]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 84, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [52, 6, 0]]
** centroid: 7, normalized-entropy: 0.47983202361612853, [(1, 52), (2, 6)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18955438157916069] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18955438157916069, 0.1506714247725904] ***
*** starting iteration: 2; err: [Inf, 0.18955438157916069, 0.1506714247725904] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18955438157916069, 0.1506714247725904, 0.14711935182847083] ***
*** starting iteration: 3; err: [Inf, 0.18955438157916069, 0.1506714247725904, 0.14711935182847083] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18955438157916069, 0.1506714247725904, 0.14711935182847083, 0.14679016881994902] ***
*** finished computation of 7 references, err: [Inf, 0.18955438157916069, 0.1506714247725904, 0.14711935182847083, 0.14679016881994902] ***
*** center 1: selecting labels [1] (freq >= 2) [from [70, 1, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [61, 6, 0]]
** centroid: 2, normalized-entropy: 0.43497348007474274, [(1, 61), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 37, 20]]
** centroid: 3, normalized-entropy: 0.9348490242345946, [(2, 37), (3, 20)]
*** center 4: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [29, 71, 0]]
** centroid: 5, normalized-entropy: 0.8687212463394044, [(1, 29), (2, 71)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 62, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [49, 7, 0]]
** centroid: 7, normalized-entropy: 0.5435644431995963, [(1, 49), (2, 7)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18766096857003867] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18766096857003867, 0.15283904455695302] ***
*** starting iteration: 2; err: [Inf, 0.18766096857003867, 0.15283904455695302] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18766096857003867, 0.15283904455695302, 0.1492135494351387] ***
*** starting iteration: 3; err: [Inf, 0.18766096857003867, 0.15283904455695302, 0.1492135494351387] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18766096857003867, 0.15283904455695302, 0.1492135494351387, 0.14790620347857475] ***
*** finished computation of 7 references, err: [Inf, 0.18766096857003867, 0.15283904455695302, 0.1492135494351387, 0.14790620347857475] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [44, 65, 0]]
** centroid: 1, normalized-entropy: 0.973056810401783, [(1, 44), (2, 65)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [48, 15, 0]]
** centroid: 2, normalized-entropy: 0.7918583525674836, [(1, 48), (2, 15)]
*** center 3: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 40, 22]]
** centroid: 4, normalized-entropy: 0.9383153522334071, [(2, 40), (3, 22)]
*** center 5: selecting labels [1] (freq >= 2) [from [57, 1, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 65, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18879411791358144] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18879411791358144, 0.15421200257074089] ***
*** starting iteration: 2; err: [Inf, 0.18879411791358144, 0.15421200257074089] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18879411791358144, 0.15421200257074089, 0.1503179905153811] ***
*** starting iteration: 3; err: [Inf, 0.18879411791358144, 0.15421200257074089, 0.1503179905153811] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18879411791358144, 0.15421200257074089, 0.1503179905153811, 0.1491196800628677] ***
*** finished computation of 7 references, err: [Inf, 0.18879411791358144, 0.15421200257074089, 0.1503179905153811, 0.1491196800628677] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [102, 5, 0]]
** centroid: 1, normalized-entropy: 0.2723359083120876, [(1, 102), (2, 5)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [42, 17, 0]]
** centroid: 2, normalized-entropy: 0.8663006754980497, [(1, 42), (2, 17)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 31, 14]]
** centroid: 3, normalized-entropy: 0.8944518845341284, [(2, 31), (3, 14)]
*** center 4: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [14, 50, 0]]
** centroid: 5, normalized-entropy: 0.7578784625383954, [(1, 14), (2, 50)]
*** center 6: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 69, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17510337853245436] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17510337853245436, 0.15254717712849378] ***
*** starting iteration: 2; err: [Inf, 0.17510337853245436, 0.15254717712849378] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17510337853245436, 0.15254717712849378, 0.14923088769614695] ***
*** starting iteration: 3; err: [Inf, 0.17510337853245436, 0.15254717712849378, 0.14923088769614695] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17510337853245436, 0.15254717712849378, 0.14923088769614695, 0.1485996309388429] ***
*** finished computation of 7 references, err: [Inf, 0.17510337853245436, 0.15254717712849378, 0.14923088769614695, 0.1485996309388429] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [99, 2, 0]]
** centroid: 1, normalized-entropy: 0.1403272709905931, [(1, 99), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [43, 15, 0]]
** centroid: 2, normalized-entropy: 0.8246578332945033, [(1, 43), (2, 15)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 20, 14]]
** centroid: 3, normalized-entropy: 0.9774178175281716, [(2, 20), (3, 14)]
*** center 4: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [69, 1, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 77, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 78, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18210537045262754] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18210537045262754, 0.15221176154911517] ***
*** starting iteration: 2; err: [Inf, 0.18210537045262754, 0.15221176154911517] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18210537045262754, 0.15221176154911517, 0.148183045739308] ***
*** starting iteration: 3; err: [Inf, 0.18210537045262754, 0.15221176154911517, 0.148183045739308] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18210537045262754, 0.15221176154911517, 0.148183045739308, 0.14644668174535036] ***
*** finished computation of 7 references, err: [Inf, 0.18210537045262754, 0.15221176154911517, 0.148183045739308, 0.14644668174535036] ***
*** center 1: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [60, 8, 0]]
** centroid: 2, normalized-entropy: 0.5225593745369407, [(1, 60), (2, 8)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 36, 15]]
** centroid: 3, normalized-entropy: 0.8739810481273581, [(2, 36), (3, 15)]
*** center 4: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [4, 84, 0]]
** centroid: 5, normalized-entropy: 0.2667649878030262, [(1, 4), (2, 84)]
*** center 6: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [5, 52, 0]]
** centroid: 7, normalized-entropy: 0.4288109647301171, [(1, 5), (2, 52)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19557515228167177] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19557515228167177, 0.15344429398328066] ***
*** starting iteration: 2; err: [Inf, 0.19557515228167177, 0.15344429398328066] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19557515228167177, 0.15344429398328066, 0.1474947173409164] ***
*** starting iteration: 3; err: [Inf, 0.19557515228167177, 0.15344429398328066, 0.1474947173409164] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19557515228167177, 0.15344429398328066, 0.1474947173409164, 0.14648623375967146] ***
*** finished computation of 7 references, err: [Inf, 0.19557515228167177, 0.15344429398328066, 0.1474947173409164, 0.14648623375967146] ***
*** center 1: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 37, 24]]
** centroid: 2, normalized-entropy: 0.9669852958320848, [(2, 37), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [58, 14, 0]]
** centroid: 3, normalized-entropy: 0.710676853856123, [(1, 58), (2, 14)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [59, 6, 0]]
** centroid: 4, normalized-entropy: 0.4441260450795996, [(1, 59), (2, 6)]
*** center 5: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [20, 53, 0]]
** centroid: 6, normalized-entropy: 0.847107490529376, [(1, 20), (2, 53)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 74, 0]]
** centroid: 7, normalized-entropy: 0.23750814382859295, [(1, 3), (2, 74)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21100003461539746] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21100003461539746, 0.14912542325165123] ***
*** starting iteration: 2; err: [Inf, 0.21100003461539746, 0.14912542325165123] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21100003461539746, 0.14912542325165123, 0.14544690525345505] ***
*** starting iteration: 3; err: [Inf, 0.21100003461539746, 0.14912542325165123, 0.14544690525345505] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21100003461539746, 0.14912542325165123, 0.14544690525345505, 0.14499025159887968] ***
*** finished computation of 7 references, err: [Inf, 0.21100003461539746, 0.14912542325165123, 0.14544690525345505, 0.14499025159887968] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [42, 39, 0]]
** centroid: 1, normalized-entropy: 0.9990102708804813, [(1, 42), (2, 39)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [56, 28, 0]]
** centroid: 2, normalized-entropy: 0.9182958340544894, [(1, 56), (2, 28)]
*** center 3: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 52, 16]]
** centroid: 4, normalized-entropy: 0.787126586201269, [(2, 52), (3, 16)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [12, 62, 0]]
** centroid: 5, normalized-entropy: 0.6394571324851642, [(1, 12), (2, 62)]
*** center 6: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2014570216294378] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2014570216294378, 0.15108728221431375] ***
*** starting iteration: 2; err: [Inf, 0.2014570216294378, 0.15108728221431375] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2014570216294378, 0.15108728221431375, 0.14661301633995028] ***
*** starting iteration: 3; err: [Inf, 0.2014570216294378, 0.15108728221431375, 0.14661301633995028] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2014570216294378, 0.15108728221431375, 0.14661301633995028, 0.14573146018199623] ***
*** finished computation of 7 references, err: [Inf, 0.2014570216294378, 0.15108728221431375, 0.14661301633995028, 0.14573146018199623] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [16, 56, 0]]
** centroid: 1, normalized-entropy: 0.7642045065086204, [(1, 16), (2, 56)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [45, 30, 0]]
** centroid: 2, normalized-entropy: 0.9709505944546688, [(1, 45), (2, 30)]
*** center 3: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 57, 19]]
** centroid: 4, normalized-entropy: 0.8112781244591328, [(2, 57), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [30, 40, 0]]
** centroid: 5, normalized-entropy: 0.9852281360342514, [(1, 30), (2, 40)]
*** center 6: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.189160766588524] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.189160766588524, 0.15202456137957052] ***
*** starting iteration: 2; err: [Inf, 0.189160766588524, 0.15202456137957052] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.189160766588524, 0.15202456137957052, 0.14883050412870943] ***
*** starting iteration: 3; err: [Inf, 0.189160766588524, 0.15202456137957052, 0.14883050412870943] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.189160766588524, 0.15202456137957052, 0.14883050412870943, 0.14775480568408966] ***
*** finished computation of 7 references, err: [Inf, 0.189160766588524, 0.15202456137957052, 0.14883050412870943, 0.14775480568408966] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [8, 80, 0]]
** centroid: 1, normalized-entropy: 0.43949698692151346, [(1, 8), (2, 80)]
*** center 2: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [48, 11, 0]]
** centroid: 3, normalized-entropy: 0.693965967334286, [(1, 48), (2, 11)]
*** center 4: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [70, 3, 0]]
** centroid: 5, normalized-entropy: 0.24729443986205674, [(1, 70), (2, 3)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 58, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 31, 19]]
** centroid: 7, normalized-entropy: 0.9580420222262997, [(2, 31), (3, 19)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1887751172669232] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1887751172669232, 0.15759957603469957] ***
*** starting iteration: 2; err: [Inf, 0.1887751172669232, 0.15759957603469957] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1887751172669232, 0.15759957603469957, 0.15271387435402722] ***
*** starting iteration: 3; err: [Inf, 0.1887751172669232, 0.15759957603469957, 0.15271387435402722] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1887751172669232, 0.15759957603469957, 0.15271387435402722, 0.15108923233672977] ***
*** finished computation of 7 references, err: [Inf, 0.1887751172669232, 0.15759957603469957, 0.15271387435402722, 0.15108923233672977] ***
*** center 1: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 30, 20]]
** centroid: 2, normalized-entropy: 0.9709505944546688, [(2, 30), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [71, 3, 0]]
** centroid: 3, normalized-entropy: 0.2447650820208971, [(1, 71), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [47, 8, 0]]
** centroid: 4, normalized-entropy: 0.5983474220910422, [(1, 47), (2, 8)]
*** center 5: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [7, 79, 0]]
** centroid: 6, normalized-entropy: 0.40707680632541937, [(1, 7), (2, 79)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [6, 64, 0]]
** centroid: 7, normalized-entropy: 0.4220005168831531, [(1, 6), (2, 64)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20152495300583542] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20152495300583542, 0.1444859528131783] ***
*** starting iteration: 2; err: [Inf, 0.20152495300583542, 0.1444859528131783] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20152495300583542, 0.1444859528131783, 0.14231640724092723] ***
*** starting iteration: 3; err: [Inf, 0.20152495300583542, 0.1444859528131783, 0.14231640724092723] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20152495300583542, 0.1444859528131783, 0.14231640724092723, 0.1422392414882779] ***
*** finished computation of 7 references, err: [Inf, 0.20152495300583542, 0.1444859528131783, 0.14231640724092723, 0.1422392414882779] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [79, 6, 0]]
** centroid: 1, normalized-entropy: 0.3681150054280774, [(1, 79), (2, 6)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [57, 35, 0]]
** centroid: 2, normalized-entropy: 0.9583485169215336, [(1, 57), (2, 35)]
*** center 3: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 35, 22]]
** centroid: 4, normalized-entropy: 0.9621461334087003, [(2, 35), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [41, 29, 0]]
** centroid: 5, normalized-entropy: 0.9786961448300948, [(1, 41), (2, 29)]
*** center 6: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 77, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17611099221557378] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17611099221557378, 0.15085531063005328] ***
*** starting iteration: 2; err: [Inf, 0.17611099221557378, 0.15085531063005328] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17611099221557378, 0.15085531063005328, 0.14809588882140814] ***
*** starting iteration: 3; err: [Inf, 0.17611099221557378, 0.15085531063005328, 0.14809588882140814] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17611099221557378, 0.15085531063005328, 0.14809588882140814, 0.14715179920382798] ***
*** finished computation of 7 references, err: [Inf, 0.17611099221557378, 0.15085531063005328, 0.14809588882140814, 0.14715179920382798] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [65, 53, 0]]
** centroid: 1, normalized-entropy: 0.9925270159830354, [(1, 65), (2, 53)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [46, 14, 0]]
** centroid: 2, normalized-entropy: 0.7837769474847011, [(1, 46), (2, 14)]
*** center 3: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 44, 19]]
** centroid: 4, normalized-entropy: 0.8832225588099292, [(2, 44), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [3, 73, 0]]
** centroid: 5, normalized-entropy: 0.23987382528036535, [(1, 3), (2, 73)]
*** center 6: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
finished with 10 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 368,3 => 38,1 => 594), Dict(2 => 374,3 => 43,1 => 583))
[ Info: ===== scores for single classifier: {"micro_f1":0.943,"precision":0.943,"recall":0.943,"macro_recall":0.9568661083644434,"macro_f1":0.8920054007495768,"accuracy":0.943,"class_f1":{"2":0.9228687415426251,"3":0.7818181818181819,"1":0.9713292788879235},"class_precision":{"2":0.9342465753424658,"3":0.6417910447761194,"1":0.9841549295774648},"class_recall":{"2":0.9117647058823529,"3":1.0,"1":0.9588336192109777}}
[ Info: ===== scores for 1: {"micro_f1":0.963,"precision":0.963,"recall":0.963,"macro_recall":0.9671917273032312,"macro_f1":0.9590322931141954,"accuracy":0.963,"class_f1":{"2":0.9511228533685601,"3":0.9545454545454545,"1":0.9714285714285713},"class_precision":{"2":0.9399477806788512,"3":0.9333333333333333,"1":0.9807692307692307},"class_recall":{"2":0.9625668449197861,"3":0.9767441860465116,"1":0.9622641509433962}}
[ Info: ===== scores for 5: {"micro_f1":0.955,"precision":0.955,"recall":0.955,"macro_recall":0.9710759089227458,"macro_f1":0.9443355782944131,"accuracy":0.955,"class_f1":{"2":0.9417852522639069,"3":0.924731182795699,"1":0.9664902998236332},"class_precision":{"2":0.9122807017543859,"3":0.86,"1":0.9945553539019963},"class_recall":{"2":0.9732620320855615,"3":1.0,"1":0.9399656946826758}}
[ Info: ===== scores for 7: {"micro_f1":0.956,"precision":0.956,"recall":0.956,"macro_recall":0.9710086435946591,"macro_f1":0.9449849601612431,"accuracy":0.956,"class_f1":{"2":0.9427083333333333,"3":0.924731182795699,"1":0.9675153643546971},"class_precision":{"2":0.9187817258883249,"3":0.86,"1":0.9910071942446043},"class_recall":{"2":0.9679144385026738,"3":1.0,"1":0.9451114922813036}}
[ Info: ===== scores for 9: {"micro_f1":0.952,"precision":0.952,"recall":0.952,"macro_recall":0.9674435812060674,"macro_f1":0.9360851297936165,"accuracy":0.952,"class_f1":{"2":0.9371727748691099,"3":0.9052631578947368,"1":0.9658194566170026},"class_precision":{"2":0.9179487179487179,"3":0.8269230769230769,"1":0.9874551971326165},"class_recall":{"2":0.9572192513368984,"3":1.0,"1":0.9451114922813036}}
[ Info: ===== scores for 11: {"micro_f1":0.952,"precision":0.952,"recall":0.952,"macro_recall":0.9677630915144789,"macro_f1":0.9332594107710891,"accuracy":0.952,"class_f1":{"2":0.9373368146214099,"3":0.8958333333333334,"1":0.9666080843585237},"class_precision":{"2":0.9158163265306123,"3":0.8113207547169812,"1":0.990990990990991},"class_recall":{"2":0.9598930481283422,"3":1.0,"1":0.9433962264150944}}
(score = 0.965, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.965, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.963, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.963, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.957, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.957, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.957, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.957, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.958, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.958, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.955, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.955, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.958, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.958, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.956, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.956, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.965,"k":1,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.965,"precision":0.965,"recall":0.965,"macro_recall":0.9686547481891158,"macro_f1":0.9638668139247467,"accuracy":0.965,"class_f1":{"2":0.9537648612945839,"3":0.9655172413793104,"1":0.972318339100346},"class_precision":{"2":0.9425587467362925,"3":0.9545454545454546,"1":0.9808027923211169},"class_recall":{"2":0.9652406417112299,"3":0.9767441860465116,"1":0.9639794168096055}}
Test Summary: | Pass  Total
AKNC          |    8      8
[681, 1, 2, 1, 1, 2, 2, 1, 2, 8, 1, 2, 8, 1, 1, 4, 2, 13, 2, 8, 12, 25, 3, 8, 2, 4, 2, 11, 4, 14, 5, 2, 2, 3, 25, 14, 4, 8, 19, 1, 5, 8, 3, 5, 10, 2, 5, 16, 6, 5, 2, 8, 41, 31, 3, 5, 3, 12, 9, 12, 3, 57, 1, 23, 11, 15, 12, 102, 8, 9, 44, 26, 15, 40, 38, 11, 3, 48, 95, 3, 63, 14, 20, 10, 33, 1, 33, 23, 9, 4, 1, 4, 4, 5, 1, 11, 26, 7, 22, 3, 2, 45, 35, 11, 29, 14, 8, 5, 13, 11, 7, 194, 51, 38, 14, 16, 43, 3, 19, 3, 20, 12, 24, 15, 32, 227, 97, 8, 6, 36, 12, 8, 4, 45, 4, 69, 24, 9, 1, 3, 14, 23, 7, 26, 29, 12, 81, 14, 15, 9, 21, 41, 29, 14, 8, 126, 11, 1, 8, 135, 20, 15, 10, 4, 202, 188, 14, 3, 52, 8, 5, 10, 11, 26, 57, 137, 60, 2, 16, 7, 46, 6, 39, 21, 22, 2, 3, 8, 22, 25, 26, 45, 13, 36, 124, 3, 21, 2, 51, 8, 16, 138, 9, 39, 2, 4, 4, 7, 27, 7, 62, 57, 53, 48, 23, 57, 54, 24, 32, 148, 98, 76, 46, 10, 24, 10, 28, 309, 30, 3, 7, 56, 12, 45, 50, 7, 49, 46, 5, 446, 21, 62, 10, 48, 3, 14, 8, 114, 38, 5, 15, 22, 22, 6, 6, 5, 60, 22, 4, 196, 20, 31, 23, 45, 21, 21, 3, 34, 25, 85, 5, 26, 39, 5, 26, 62, 35, 44, 4, 330, 10, 16, 19, 5, 23, 14, 25, 2, 55, 29, 15, 36, 3, 5, 10, 16, 13, 60, 7, 733]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.634, speedup = 0.3285491309563839, eval_ratio = 0.073709)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.3611421130952381,"recall":0.34461805555555547,"f1":null,"seconds":0.00016253069043159485,"exhaustive_search_seconds":0.00035807862877845764,"evaluations":478.5703125,"distances_sum":1755.2894349284763}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5241815476190474,"recall":0.5234374999999998,"f1":null,"seconds":0.0002753492444753647,"exhaustive_search_seconds":0.00035807862877845764,"evaluations":625.015625,"distances_sum":1682.9800814737966}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6397569444444443,"recall":0.6397569444444443,"f1":0.6397569444444443,"seconds":0.0003894828259944916,"exhaustive_search_seconds":0.00035807862877845764,"evaluations":786.25,"distances_sum":1626.5954816486037}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7326388888888886,"recall":0.7326388888888886,"f1":0.7326388888888886,"seconds":0.0004761107265949249,"exhaustive_search_seconds":0.00035807862877845764,"evaluations":918.53125,"distances_sum":1593.604901946547}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7986111111111105,"recall":0.7986111111111105,"f1":0.7986111111111105,"seconds":0.0007034335285425186,"exhaustive_search_seconds":0.00035807862877845764,"evaluations":1028.53125,"distances_sum":1575.099507418656}
KCenters.DeloneInvIndex> reached performance {"precision":0.8463541666666661,"recall":0.8463541666666661,"f1":0.8463541666666661,"seconds":0.0006402265280485153,"exhaustive_search_seconds":0.00035807862877845764,"evaluations":1127.328125,"distances_sum":1560.4943656188034}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8100000000000003, speedup = 0.6230854920546199, eval_ratio = 0.10911300000000002)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
