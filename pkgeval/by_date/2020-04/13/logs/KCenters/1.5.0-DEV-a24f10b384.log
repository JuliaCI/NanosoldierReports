Julia Version 1.5.0-DEV.621
Commit a24f10b384 (2020-04-13 14:41 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed Reexport ──────────────────── v0.2.0
  Installed PooledArrays ──────────────── v0.5.3
  Installed InvertedIndices ───────────── v1.0.0
  Installed LearnBase ─────────────────── v0.2.2
  Installed Compat ────────────────────── v3.8.0
  Installed KCenters ──────────────────── v0.2.2
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed DataFrames ────────────────── v0.20.2
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed JSON ──────────────────────── v0.21.0
  Installed MappedArrays ──────────────── v0.2.2
  Installed DataAPI ───────────────────── v1.1.0
  Installed DataValueInterfaces ───────── v1.0.0
  Installed Missings ──────────────────── v0.4.3
  Installed Tables ────────────────────── v1.0.3
  Installed SimilaritySearch ──────────── v0.3.19
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed TableTraits ───────────────── v1.0.0
  Installed OrderedCollections ────────── v1.1.0
  Installed Parsers ───────────────────── v1.0.1
  Installed DataStructures ────────────── v0.17.12
  Installed CategoricalArrays ─────────── v0.7.7
  Installed MLDataPattern ─────────────── v0.5.1
  Installed StatsBase ─────────────────── v0.32.2
  Installed MLDataUtils ───────────────── v0.5.1
Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.8.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.12
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.1
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v1.0.1
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.3
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_J37Kam/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_J37Kam/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.8.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.12
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.1
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v1.0.1
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.3
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.9367083616058032
[ Info: 0.8302954188982645
[ Info: 0.5547140726943811
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.3223144766439994
mean(cdnet.distances) = 0.3880334708094597
mean(crand.distances) = 0.34604440157612165
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7412109375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7412109375,"f1":0.8389298201798211,"seconds":6.327405571937561e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.2109375,"distances_sum":2171.4968323771072}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.755859375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.755859375,"f1":0.8523299617049624,"seconds":3.8929283618927e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.34375,"distances_sum":2215.2491315516277}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5322265625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5322265625,"f1":0.6775006243756249,"seconds":2.9765069484710693e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":6.796875,"distances_sum":1523.6743376636007}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.693359375, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.693359375,"f1":0.8102808649683658,"seconds":3.458932042121887e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":7.828125,"distances_sum":1989.3994233790118}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.755859375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.755859375,"f1":0.8523299617049624,"seconds":3.8929283618927e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.34375,"distances_sum":2215.2491315516277}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8095703125, conf: {"ssize":9,"bsize":6}, perf: {"precision":1.0,"recall":0.8095703125,"f1":0.8870457667332675,"seconds":4.958361387252808e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.75,"distances_sum":2422.775461520992}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9492044413919419,"seconds":4.377216100692749e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.7578125,"distances_sum":2988.038865237011}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9130859375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9492044413919419,"seconds":4.377216100692749e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.7578125,"distances_sum":2988.038865237011}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9648179945054949,"seconds":4.278495907783508e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.8359375,"distances_sum":3112.431413454637}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.960645604395605,"seconds":4.056841135025024e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.828125,"distances_sum":3073.989719857605}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9384765625,"state":{"ssize":9,"bsize":9},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9648179945054949,"seconds":4.278495907783508e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.8359375,"distances_sum":3112.431413454637}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9384765625,"state":{"ssize":9,"bsize":9},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9648179945054949,"seconds":4.278495907783508e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.8359375,"distances_sum":3112.431413454637}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4921875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.4921875,"f1":0.6428391053391057,"seconds":4.595145583152771e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":6.5546875,"distances_sum":1406.4892575897752}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.619140625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.619140625,"f1":0.7508687493062499,"seconds":5.168840289115906e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":7.484375,"distances_sum":1747.1567775583128}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.619140625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.619140625,"f1":0.7508687493062499,"seconds":5.168840289115906e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":7.484375,"distances_sum":1747.1567775583128}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.833984375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.833984375,"f1":0.9010307400932407,"seconds":5.822628736495972e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.640625,"distances_sum":2486.606326998684}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.65234375, conf: {"ssize":8,"bsize":4}, perf: {"precision":1.0,"recall":0.65234375,"f1":0.7751609501609509,"seconds":4.995614290237427e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":7.625,"distances_sum":1882.81880376123}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.833984375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.833984375,"f1":0.9010307400932407,"seconds":5.822628736495972e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.640625,"distances_sum":2486.606326998684}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.950560897435898,"seconds":6.055459380149841e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.6640625,"distances_sum":2915.924763378209}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8349609375, conf: {"ssize":10,"bsize":6}, perf: {"precision":1.0,"recall":0.8349609375,"f1":0.9013392857142865,"seconds":5.714595317840576e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.5859375,"distances_sum":2531.966577711027}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8701171875, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.8701171875,"f1":0.9237070221445226,"seconds":5.695968866348267e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.5234375,"distances_sum":2725.3041421963726}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9349619130869139,"seconds":5.496665835380554e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.6796875,"distances_sum":2778.8229326939318}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.912109375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.912109375,"f1":0.950560897435898,"seconds":6.055459380149841e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.6640625,"distances_sum":2915.924763378209}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.912109375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.912109375,"f1":0.950560897435898,"seconds":6.055459380149841e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.6640625,"distances_sum":2915.924763378209}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.24609375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.24609375,"f1":null,"seconds":3.7532299757003784e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":6.2890625,"distances_sum":622.7632168523278}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.24609375,"state":{"ssize":5,"bsize":1},"perf":{"precision":null,"recall":0.24609375,"f1":null,"seconds":3.7532299757003784e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":6.2890625,"distances_sum":622.7632168523278}}, beam: 2, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.24609375,"state":{"ssize":5,"bsize":1},"perf":{"precision":null,"recall":0.24609375,"f1":null,"seconds":3.7532299757003784e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":6.2890625,"distances_sum":622.7632168523278}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.646484375, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.646484375,"f1":0.7760068056943065,"seconds":4.76837158203125e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.1015625,"distances_sum":1300.2866355344515}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6650390625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6650390625,"f1":0.7903393481518489,"seconds":4.926696419715881e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.0390625,"distances_sum":1361.3425565578682}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6650390625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6650390625,"f1":0.7903393481518489,"seconds":4.926696419715881e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.0390625,"distances_sum":1361.3425565578682}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8154296875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8154296875,"f1":0.8903507950382958,"seconds":5.461275577545166e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.3125,"distances_sum":1738.634038725963}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7548828125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7548828125,"f1":0.8516207750582759,"seconds":5.375593900680542e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.328125,"distances_sum":1587.3949159490428}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9504693223443229,"seconds":5.748122930526733e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.796875,"distances_sum":2097.5341628578376}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9400068681318688,"seconds":5.559995770454407e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.796875,"distances_sum":2006.4579448768802}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.755859375, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.755859375,"f1":0.853417936230437,"seconds":5.073845386505127e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.375,"distances_sum":1567.0019961930416}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9130859375,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9504693223443229,"seconds":5.748122930526733e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.796875,"distances_sum":2097.5341628578376}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9666494963369969,"seconds":5.589798092842102e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.921875,"distances_sum":2164.51674635439}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":7,"bsize":12}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9754120879120882,"seconds":5.794689059257507e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.9375,"distances_sum":2229.758257208039}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9694253663003666,"seconds":5.653128027915955e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.8671875,"distances_sum":2218.31997348241}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9545074716949722,"seconds":3.634020686149597e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.75,"distances_sum":2150.8302699174114}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9539835164835171,"seconds":4.159286618232727e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.828125,"distances_sum":2105.0296167266247}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9513824716949719,"seconds":6.085261702537537e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.828125,"distances_sum":2102.3283230764146}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.955078125,"state":{"ssize":7,"bsize":12},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9754120879120882,"seconds":5.794689059257507e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.9375,"distances_sum":2229.758257208039}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.955078125,"state":{"ssize":7,"bsize":12},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9754120879120882,"seconds":5.794689059257507e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.9375,"distances_sum":2229.758257208039}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.75,"f1":0.8491050616050625,"seconds":3.417953848838806e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.4921875,"distances_sum":1772.8948443404763}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.26171875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.26171875,"f1":null,"seconds":3.5818666219711304e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":6.2265625,"distances_sum":609.8795275808211}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.39453125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.39453125,"f1":null,"seconds":2.693384885787964e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":6.5078125,"distances_sum":881.1039762797147}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.75,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.75,"f1":0.8491050616050625,"seconds":3.417953848838806e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.4921875,"distances_sum":1772.8948443404763}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.954395604395605,"seconds":3.844499588012695e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8515625,"distances_sum":2443.2961015903343}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9388824716949724,"seconds":3.986060619354248e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.75,"distances_sum":2322.633337118835}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8359375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8359375,"f1":0.9029543373293379,"seconds":3.604218363761902e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.6875,"distances_sum":2091.27311979515}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7900390625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7900390625,"f1":0.8749032217782226,"seconds":3.5818666219711304e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.5,"distances_sum":1940.7084057802533}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76171875, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.76171875,"f1":0.8566168206793217,"seconds":4.725530743598938e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.4453125,"distances_sum":1834.3837649047366}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9189453125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9189453125,"f1":0.954395604395605,"seconds":3.844499588012695e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8515625,"distances_sum":2443.2961015903343}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.957818223443224,"seconds":4.481524229049683e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8203125,"distances_sum":2438.6854365909744}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9638793498168502,"seconds":3.919005393981934e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.90625,"distances_sum":2506.9475350773096}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9709478021978026,"seconds":5.086883902549744e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.90625,"distances_sum":2553.438153760243}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9731227106227109,"seconds":4.062429070472717e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8984375,"distances_sum":2561.1553556634112}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9712454212454216,"seconds":4.187226295471191e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8984375,"distances_sum":2534.3778404356694}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9521484375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9731227106227109,"seconds":4.062429070472717e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8984375,"distances_sum":2561.1553556634112}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9521484375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9731227106227109,"seconds":4.062429070472717e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8984375,"distances_sum":2561.1553556634112}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7509765625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7509765625,"f1":0.846611201298702,"seconds":5.329027771949768e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":7.7734375,"distances_sum":1897.6773764118832}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7509765625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7509765625,"f1":0.846611201298702,"seconds":5.329027771949768e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":7.7734375,"distances_sum":1897.6773764118832}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9464743589743593,"seconds":6.159767508506775e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.671875,"distances_sum":2484.071449794329}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9473131035631042,"seconds":5.7443976402282715e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.671875,"distances_sum":2491.658908697256}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.908203125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.908203125,"f1":0.9473131035631042,"seconds":5.7443976402282715e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.671875,"distances_sum":2491.658908697256}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9661515567765571,"seconds":6.0480087995529175e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.8046875,"distances_sum":2617.7904640305524}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9641769688644692,"seconds":3.915280103683472e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.796875,"distances_sum":2586.115847478321}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9659626831501834,"seconds":4.798173904418945e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.8046875,"distances_sum":2585.291345538938}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9708333333333337,"seconds":4.056841135025024e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.84375,"distances_sum":2620.5654063430147}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9708333333333337,"seconds":4.056841135025024e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.84375,"distances_sum":2620.5654063430147}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9708333333333337,"seconds":4.056841135025024e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.84375,"distances_sum":2620.5654063430147}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.390625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.390625,"f1":null,"seconds":3.1832605600357056e-6,"exhaustive_search_seconds":1.1082738637924194e-6,"evaluations":6.40625,"distances_sum":924.5903152550687}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.390625,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.390625,"f1":null,"seconds":3.1832605600357056e-6,"exhaustive_search_seconds":1.1082738637924194e-6,"evaluations":6.40625,"distances_sum":924.5903152550687}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7568359375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7568359375,"f1":0.8515718656343666,"seconds":3.840774297714233e-6,"exhaustive_search_seconds":1.1082738637924194e-6,"evaluations":8.5,"distances_sum":1872.7752834026282}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.66015625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.66015625,"f1":0.7831052627927635,"seconds":3.56137752532959e-6,"exhaustive_search_seconds":1.1082738637924194e-6,"evaluations":8.1015625,"distances_sum":1585.0315416808699}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7568359375,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7568359375,"f1":0.8515718656343666,"seconds":3.840774297714233e-6,"exhaustive_search_seconds":1.1082738637924194e-6,"evaluations":8.5,"distances_sum":1872.7752834026282}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8095703125, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.8095703125,"f1":0.88709987928738,"seconds":4.371628165245056e-6,"exhaustive_search_seconds":1.1082738637924194e-6,"evaluations":8.5,"distances_sum":2079.1760613063634}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.933007617382618,"seconds":6.023794412612915e-6,"exhaustive_search_seconds":1.1082738637924194e-6,"evaluations":8.6796875,"distances_sum":2403.154666381699}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9458936896436901,"seconds":6.096437573432922e-6,"exhaustive_search_seconds":1.1082738637924194e-6,"evaluations":8.7734375,"distances_sum":2511.857102190194}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.90625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.90625,"f1":0.9458936896436901,"seconds":6.096437573432922e-6,"exhaustive_search_seconds":1.1082738637924194e-6,"evaluations":8.7734375,"distances_sum":2511.857102190194}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.90625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.90625,"f1":0.9458936896436901,"seconds":6.096437573432922e-6,"exhaustive_search_seconds":1.1082738637924194e-6,"evaluations":8.7734375,"distances_sum":2511.857102190194}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7275390625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7275390625,"f1":0.8309763153513161,"seconds":5.479902029037476e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.0,"distances_sum":1788.471349790578}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.65625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.65625,"f1":0.7790740509490518,"seconds":7.720664143562317e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":7.6875,"distances_sum":1503.3118042803171}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2333984375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2333984375,"f1":null,"seconds":3.602355718612671e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":5.65625,"distances_sum":522.3638118473202}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7275390625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7275390625,"f1":0.8309763153513161,"seconds":5.479902029037476e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.0,"distances_sum":1788.471349790578}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9592834249084254,"seconds":6.373971700668335e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.84375,"distances_sum":2484.635069566872}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9528934607059609,"seconds":5.865469574928284e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.7734375,"distances_sum":2473.6476026936034}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8564453125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8564453125,"f1":0.9148986430236439,"seconds":6.018206477165222e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.453125,"distances_sum":2243.8554724691426}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7490234375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7490234375,"f1":0.8488443847818857,"seconds":5.183741450309753e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.2578125,"distances_sum":1800.5407918221165}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9267578125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9592834249084254,"seconds":6.373971700668335e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.84375,"distances_sum":2484.635069566872}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9699061355311358,"seconds":8.536502718925476e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.8671875,"distances_sum":2572.707166268739}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9641426282051287,"seconds":8.678622543811798e-5,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.8359375,"distances_sum":2550.749297255166}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9709077380952382,"seconds":5.755573511123657e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.890625,"distances_sum":2572.199498919717}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9709077380952382,"seconds":5.755573511123657e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.890625,"distances_sum":2572.199498919717}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9709077380952382,"seconds":5.755573511123657e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.890625,"distances_sum":2572.199498919717}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7802734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7802734375,"f1":0.8683327089577099,"seconds":5.0906091928482056e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":7.9765625,"distances_sum":1875.2766604496326}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6845703125, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6845703125,"f1":0.8011982808857817,"seconds":4.757195711135864e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":7.7421875,"distances_sum":1597.2825933096678}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7802734375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7802734375,"f1":0.8683327089577099,"seconds":5.0906091928482056e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":7.9765625,"distances_sum":1875.2766604496326}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9353880494505501,"seconds":6.020069122314453e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.7421875,"distances_sum":2321.997641835903}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9561584249084256,"seconds":6.016343832015991e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.828125,"distances_sum":2469.088569570832}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.921875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.921875,"f1":0.9561584249084256,"seconds":6.016343832015991e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.828125,"distances_sum":2469.088569570832}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.966796875, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.966796875,"f1":0.9819196428571433,"seconds":6.0480087995529175e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.9453125,"distances_sum":2653.0356369463366}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":2,"bsize":12}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9718750000000003,"seconds":5.796551704406738e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.9296875,"distances_sum":2575.328140791643}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9683264652014655,"seconds":5.8747828006744385e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.90625,"distances_sum":2552.0287273558215}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.966796875,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.966796875,"f1":0.9819196428571433,"seconds":6.0480087995529175e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.9453125,"distances_sum":2653.0356369463366}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.966796875,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.966796875,"f1":0.9819196428571433,"seconds":6.0480087995529175e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.9453125,"distances_sum":2653.0356369463366}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.42578125, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.42578125,"f1":null,"seconds":4.341825842857361e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":6.3203125,"distances_sum":916.7477627841014}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3984375, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.3984375,"f1":null,"seconds":3.468245267868042e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":6.0234375,"distances_sum":898.1877023648099}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6708984375, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6708984375,"f1":0.7933072136197145,"seconds":4.351139068603516e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":7.796875,"distances_sum":1624.4595595512358}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6708984375,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.6708984375,"f1":0.7933072136197145,"seconds":4.351139068603516e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":7.796875,"distances_sum":1624.4595595512358}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8173828125, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8173828125,"f1":0.8923024891774901,"seconds":5.023553967475891e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.1875,"distances_sum":2089.373948457263}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.833984375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.833984375,"f1":0.9051797161172171,"seconds":5.036592483520508e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.265625,"distances_sum":2137.084725184337}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.671875, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.671875,"f1":0.7916187978687987,"seconds":4.548579454421997e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":7.765625,"distances_sum":1595.2917302765622}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.833984375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.833984375,"f1":0.9051797161172171,"seconds":5.036592483520508e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.265625,"distances_sum":2137.084725184337}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9426968864468871,"seconds":5.694106221199036e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.703125,"distances_sum":2475.5975086428316}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8857421875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8857421875,"f1":0.9340659340659351,"seconds":5.384907126426697e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.6875,"distances_sum":2389.033747464578}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9492247335997341,"seconds":3.6507844924926758e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.7734375,"distances_sum":2530.6454550387484}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9574290293040298,"seconds":3.682449460029602e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.8671875,"distances_sum":2554.28370347971}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9605540293040297,"seconds":3.682449460029602e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.8359375,"distances_sum":2577.02406563461}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9296875,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9296875,"f1":0.9605540293040297,"seconds":3.682449460029602e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.8359375,"distances_sum":2577.02406563461}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9296875,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9296875,"f1":0.9605540293040297,"seconds":3.682449460029602e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.8359375,"distances_sum":2577.02406563461}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7890625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7890625,"f1":0.8721049783549792,"seconds":3.1981617212295532e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.34375,"distances_sum":1938.0821301650378}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7724609375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7724609375,"f1":0.860571026196027,"seconds":3.4347176551818848e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.2734375,"distances_sum":1851.154630795313}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7890625,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7890625,"f1":0.8721049783549792,"seconds":3.1981617212295532e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.34375,"distances_sum":1938.0821301650378}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.956181318681319,"seconds":3.647059202194214e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.828125,"distances_sum":2520.336593162168}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.859375, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.859375,"f1":0.9201579670329678,"seconds":3.6247074604034424e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.578125,"distances_sum":2195.3399965101803}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8193359375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.8193359375,"f1":0.8948119588744595,"seconds":3.384426236152649e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.484375,"distances_sum":2019.569161572967}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9331075174825181,"seconds":3.6116689443588257e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.765625,"distances_sum":2299.107677257127}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9497252747252751,"seconds":3.7401914596557617e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.828125,"distances_sum":2441.2676282043153}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7958984375, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7958984375,"f1":0.8799851190476199,"seconds":3.417953848838806e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.3203125,"distances_sum":1943.1640291251883}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.921875,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.921875,"f1":0.956181318681319,"seconds":3.647059202194214e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.828125,"distances_sum":2520.336593162168}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9609375, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.9609375,"f1":0.9780734890109892,"seconds":4.163011908531189e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.9609375,"distances_sum":2632.310226939733}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9625972985347991,"seconds":4.3995678424835205e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.890625,"distances_sum":2545.362856899527}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9747023809523813,"seconds":3.6694109439849854e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.9375,"distances_sum":2615.1582788354963}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9566277472527479,"seconds":3.645196557044983e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.875,"distances_sum":2486.5255131682825}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9714858058608062,"seconds":5.953013896942139e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.953125,"distances_sum":2602.0663985122737}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9734603937728941,"seconds":6.230548024177551e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.921875,"distances_sum":2621.498594463694}, best_list's length: 15, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9609375,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9780734890109892,"seconds":4.163011908531189e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.9609375,"distances_sum":2632.310226939733}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9609375,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9780734890109892,"seconds":4.163011908531189e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.9609375,"distances_sum":2632.310226939733}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1767578125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.1767578125,"f1":null,"seconds":2.7138739824295044e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":4.609375,"distances_sum":439.0016784281038}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1787109375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.1787109375,"f1":null,"seconds":2.8461217880249023e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":4.734375,"distances_sum":437.49631891090064}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.1787109375,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.1787109375,"f1":null,"seconds":2.8461217880249023e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":4.734375,"distances_sum":437.49631891090064}}, beam: 3, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.1787109375,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.1787109375,"f1":null,"seconds":2.8461217880249023e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":4.734375,"distances_sum":437.49631891090064}}, n: 9
mean(cfft.distances) = 0.49673792617958507
mean(cdnet.distances) = 0.41755743651791155
mean(crand.distances) = 0.6488238658110042
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8555555555555555
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8955555555555555
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8844444444444445
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8622222222222221
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.9022222222222221
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9244444444444445
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.8866666666666667
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.94
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8977777777777778
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.9222222222222222
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.9133333333333334
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.888888888888889
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9377777777777778
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8911111111111111
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9177777777777778
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9288888888888889
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9355555555555556
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.9177777777777778
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8844444444444445
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.9177777777777778
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.9355555555555556
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9111111111111111
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9244444444444445
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8933333333333334
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9066666666666666
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9044444444444445
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8977777777777778
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.9088888888888889
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9199999999999999
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8533333333333334
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.86
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.8577777777777778
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 5: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 4, 15]]
** centroid: 8, normalized-entropy: 0.7424875695421234, [(2, 4), (3, 15)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 1]]
*** center 11: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2]
acc = 0.9666666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 5: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 4, 15]]
** centroid: 8, normalized-entropy: 0.7424875695421234, [(2, 4), (3, 15)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 1]]
*** center 11: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2]
acc = 0.9666666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 5: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 4, 15]]
** centroid: 8, normalized-entropy: 0.7424875695421234, [(2, 4), (3, 15)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 1]]
*** center 11: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2]
acc = 0.9666666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 5: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 4, 15]]
** centroid: 8, normalized-entropy: 0.7424875695421234, [(2, 4), (3, 15)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 1]]
*** center 11: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2]
acc = 0.9666666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 5: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 4, 15]]
** centroid: 8, normalized-entropy: 0.7424875695421234, [(2, 4), (3, 15)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 1]]
*** center 11: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 5: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 4, 15]]
** centroid: 8, normalized-entropy: 0.7424875695421234, [(2, 4), (3, 15)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 1]]
*** center 11: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2]
acc = 0.9133333333333333
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 5: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 4, 15]]
** centroid: 8, normalized-entropy: 0.7424875695421234, [(2, 4), (3, 15)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 1]]
*** center 11: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2]
acc = 0.96
*** finished computation of 12 references, err: [Inf, 0.6071500116586686] ***
*** center 1: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 2]]
** centroid: 3, normalized-entropy: 0.9709505944546688, [(2, 3), (3, 2)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 15, 2]]
** centroid: 4, normalized-entropy: 0.5225593745369407, [(2, 15), (3, 2)]
*** center 5: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 14]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 4, 17]]
** centroid: 9, normalized-entropy: 0.7024665512903904, [(2, 4), (3, 17)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [35, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
finished with 15 centroids; started with 12
acc = 0.9466666666666667
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.1965769200163471] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1965769200163471, 0.15972529670402585] ***
*** starting iteration: 2; err: [Inf, 0.1965769200163471, 0.15972529670402585] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1965769200163471, 0.15972529670402585, 0.15339734481211315] ***
*** starting iteration: 3; err: [Inf, 0.1965769200163471, 0.15972529670402585, 0.15339734481211315] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1965769200163471, 0.15972529670402585, 0.15339734481211315, 0.15006966753471251] ***
*** finished computation of 7 references, err: [Inf, 0.1965769200163471, 0.15972529670402585, 0.15339734481211315, 0.15006966753471251] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [63, 12, 0]]
** centroid: 1, normalized-entropy: 0.634309554640566, [(1, 63), (2, 12)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [62, 49, 0]]
** centroid: 2, normalized-entropy: 0.9900829509840566, [(1, 62), (2, 49)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [82, 40, 0]]
** centroid: 3, normalized-entropy: 0.9127341558073343, [(1, 82), (2, 40)]
*** center 4: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 127, 18]]
** centroid: 5, normalized-entropy: 0.5411393986630263, [(2, 127), (3, 18)]
*** center 6: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2374554777087213] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2374554777087213, 0.18953305807708576] ***
*** starting iteration: 2; err: [Inf, 0.2374554777087213, 0.18953305807708576] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2374554777087213, 0.18953305807708576, 0.18847615137352264] ***
*** starting iteration: 3; err: [Inf, 0.2374554777087213, 0.18953305807708576, 0.18847615137352264] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2374554777087213, 0.18953305807708576, 0.18847615137352264, 0.18860876138459096] ***
*** finished computation of 7 references, err: [Inf, 0.2374554777087213, 0.18953305807708576, 0.18847615137352264, 0.18860876138459096] ***
*** center 1: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [103, 11, 0]]
** centroid: 2, normalized-entropy: 0.4577733290341998, [(1, 103), (2, 11)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 47, 18]]
** centroid: 3, normalized-entropy: 0.8512243352621381, [(2, 47), (3, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [115, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [77, 31, 0]]
** centroid: 5, normalized-entropy: 0.864862972019945, [(1, 77), (2, 31)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [27, 65, 0]]
** centroid: 6, normalized-entropy: 0.8731720603476306, [(1, 27), (2, 65)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 74, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19903862144678658] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19903862144678658, 0.15837815275898892] ***
*** starting iteration: 2; err: [Inf, 0.19903862144678658, 0.15837815275898892] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19903862144678658, 0.15837815275898892, 0.15030062819567175] ***
*** starting iteration: 3; err: [Inf, 0.19903862144678658, 0.15837815275898892, 0.15030062819567175] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19903862144678658, 0.15837815275898892, 0.15030062819567175, 0.14759302759512344] ***
*** finished computation of 7 references, err: [Inf, 0.19903862144678658, 0.15837815275898892, 0.15030062819567175, 0.14759302759512344] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 61, 17]]
** centroid: 1, normalized-entropy: 0.7564041945982506, [(2, 61), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [76, 32, 0]]
** centroid: 2, normalized-entropy: 0.876716288999464, [(1, 76), (2, 32)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [96, 13, 0]]
** centroid: 3, normalized-entropy: 0.527247477024035, [(1, 96), (2, 13)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [79, 24, 0]]
** centroid: 4, normalized-entropy: 0.7832211182191516, [(1, 79), (2, 24)]
*** center 5: selecting labels [1] (freq >= 2) [from [121, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 64, 2]]
** centroid: 6, normalized-entropy: 0.19590927087360496, [(2, 64), (3, 2)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [39, 43, 0]]
** centroid: 7, normalized-entropy: 0.9982828462300607, [(1, 39), (2, 43)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19159532183811984] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19159532183811984, 0.1528877515692789] ***
*** starting iteration: 2; err: [Inf, 0.19159532183811984, 0.1528877515692789] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19159532183811984, 0.1528877515692789, 0.14703484146204404] ***
*** starting iteration: 3; err: [Inf, 0.19159532183811984, 0.1528877515692789, 0.14703484146204404] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19159532183811984, 0.1528877515692789, 0.14703484146204404, 0.14528318625250677] ***
*** finished computation of 7 references, err: [Inf, 0.19159532183811984, 0.1528877515692789, 0.14703484146204404, 0.14528318625250677] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [88, 3, 0]]
** centroid: 1, normalized-entropy: 0.20905980566852464, [(1, 88), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [77, 31, 0]]
** centroid: 2, normalized-entropy: 0.864862972019945, [(1, 77), (2, 31)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [99, 38, 0]]
** centroid: 3, normalized-entropy: 0.8518455800500334, [(1, 99), (2, 38)]
*** center 4: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 86, 19]]
** centroid: 5, normalized-entropy: 0.6821560732869936, [(2, 86), (3, 19)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [2, 77, 0]]
** centroid: 6, normalized-entropy: 0.17033057560105982, [(1, 2), (2, 77)]
*** center 7: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.28785849032313887] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28785849032313887, 0.24906469431814846] ***
*** finished computation of 3 references, err: [Inf, 0.28785849032313887, 0.24906469431814846] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [285, 12, 0]]
** centroid: 1, normalized-entropy: 0.24414164238829597, [(1, 285), (2, 12)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [82, 105, 3]]
** centroid: 2, normalized-entropy: 0.6880542475156151, [(1, 82), (2, 105), (3, 3)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [53, 111, 15]]
** centroid: 3, normalized-entropy: 0.7868635837361253, [(1, 53), (2, 111), (3, 15)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.33238754025765177] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33238754025765177, 0.24248078301817044] ***
*** finished computation of 3 references, err: [Inf, 0.33238754025765177, 0.24248078301817044] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [142, 20, 0]]
** centroid: 1, normalized-entropy: 0.5392163432092415, [(1, 142), (2, 20)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [269, 73, 0]]
** centroid: 2, normalized-entropy: 0.7480262917105379, [(1, 269), (2, 73)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 144, 19]]
** centroid: 3, normalized-entropy: 0.5194040869726659, [(2, 144), (3, 19)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.41941521883100225] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41941521883100225, 0.25407262878405906] ***
*** finished computation of 3 references, err: [Inf, 0.41941521883100225, 0.25407262878405906] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [157, 180, 19]]
** centroid: 1, normalized-entropy: 0.7848721185172852, [(1, 157), (2, 180), (3, 19)]
*** center 2: selecting labels [1] (freq >= 2) [from [173, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [83, 55, 0]]
** centroid: 3, normalized-entropy: 0.9700965071720022, [(1, 83), (2, 55)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3930338606931963] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3930338606931963, 0.23381325394312316] ***
*** starting iteration: 2; err: [Inf, 0.3930338606931963, 0.23381325394312316] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3930338606931963, 0.23381325394312316, 0.22761914560112645] ***
*** starting iteration: 3; err: [Inf, 0.3930338606931963, 0.23381325394312316, 0.22761914560112645] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3930338606931963, 0.23381325394312316, 0.22761914560112645, 0.2265872715338897] ***
*** starting iteration: 4; err: [Inf, 0.3930338606931963, 0.23381325394312316, 0.22761914560112645, 0.2265872715338897] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3930338606931963, 0.23381325394312316, 0.22761914560112645, 0.2265872715338897, 0.22660949641654082] ***
*** finished computation of 3 references, err: [Inf, 0.3930338606931963, 0.23381325394312316, 0.22761914560112645, 0.2265872715338897, 0.22660949641654082] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [129, 96, 2]]
** centroid: 1, normalized-entropy: 0.6615640074251183, [(1, 129), (2, 96), (3, 2)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [93, 132, 16]]
** centroid: 2, normalized-entropy: 0.798491440948411, [(1, 93), (2, 132), (3, 16)]
*** center 3: selecting labels [1] (freq >= 1) [from [198, 0, 0]]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.28409066250634335] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28409066250634335, 0.24113886915091454] ***
*** starting iteration: 2; err: [Inf, 0.28409066250634335, 0.24113886915091454] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28409066250634335, 0.24113886915091454, 0.23310705087241204] ***
*** starting iteration: 3; err: [Inf, 0.28409066250634335, 0.24113886915091454, 0.23310705087241204] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28409066250634335, 0.24113886915091454, 0.23310705087241204, 0.23168081322871986] ***
*** starting iteration: 4; err: [Inf, 0.28409066250634335, 0.24113886915091454, 0.23310705087241204, 0.23168081322871986] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28409066250634335, 0.24113886915091454, 0.23310705087241204, 0.23168081322871986, 0.2314459625142871] ***
*** finished computation of 3 references, err: [Inf, 0.28409066250634335, 0.24113886915091454, 0.23310705087241204, 0.23168081322871986, 0.2314459625142871] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [128, 88, 0]]
** centroid: 1, normalized-entropy: 0.975119064940866, [(1, 128), (2, 88)]
*** center 2: selecting labels [1] (freq >= 1) [from [213, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [70, 149, 19]]
** centroid: 3, normalized-entropy: 0.7781911019772364, [(1, 70), (2, 149), (3, 19)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.29033258660225897] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29033258660225897, 0.27936446975296675] ***
*** starting iteration: 2; err: [Inf, 0.29033258660225897, 0.27936446975296675] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29033258660225897, 0.27936446975296675, 0.2688037539634021] ***
*** starting iteration: 3; err: [Inf, 0.29033258660225897, 0.27936446975296675, 0.2688037539634021] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29033258660225897, 0.27936446975296675, 0.2688037539634021, 0.24350334400788642] ***
*** starting iteration: 4; err: [Inf, 0.29033258660225897, 0.27936446975296675, 0.2688037539634021, 0.24350334400788642] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29033258660225897, 0.27936446975296675, 0.2688037539634021, 0.24350334400788642, 0.23885804546488704] ***
*** starting iteration: 5; err: [Inf, 0.29033258660225897, 0.27936446975296675, 0.2688037539634021, 0.24350334400788642, 0.23885804546488704] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29033258660225897, 0.27936446975296675, 0.2688037539634021, 0.24350334400788642, 0.23885804546488704, 0.23846444665877403] ***
*** finished computation of 3 references, err: [Inf, 0.29033258660225897, 0.27936446975296675, 0.2688037539634021, 0.24350334400788642, 0.23885804546488704, 0.23846444665877403] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [1, 168, 19]]
** centroid: 1, normalized-entropy: 0.32768999430555235, [(1, 1), (2, 168), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [176, 57, 0]]
** centroid: 2, normalized-entropy: 0.8026638455660633, [(1, 176), (2, 57)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [236, 10, 0]]
** centroid: 3, normalized-entropy: 0.2452663728259548, [(1, 236), (2, 10)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24868540323371566] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24868540323371566, 0.1677437374345936] ***
*** finished computation of 7 references, err: [Inf, 0.24868540323371566, 0.1677437374345936] ***
*** center 1: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [44, 19, 0]]
** centroid: 2, normalized-entropy: 0.8832225588099292, [(1, 44), (2, 19)]
*** center 3: selecting labels [1] (freq >= 2) [from [108, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [62, 2, 0]]
** centroid: 4, normalized-entropy: 0.2006223243127146, [(1, 62), (2, 2)]
*** center 5: selecting labels [1, 2, 3] (freq >= 2) [from [3, 130, 18]]
** centroid: 5, normalized-entropy: 0.4189948604635087, [(1, 3), (2, 130), (3, 18)]
*** center 6: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [42, 77, 0]]
** centroid: 7, normalized-entropy: 0.9366673818775627, [(1, 42), (2, 77)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.21120002853608727] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21120002853608727, 0.15960984196509703] ***
*** finished computation of 7 references, err: [Inf, 0.21120002853608727, 0.15960984196509703] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [5, 64, 0]]
** centroid: 1, normalized-entropy: 0.3750514064240124, [(1, 5), (2, 64)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 32, 19]]
** centroid: 2, normalized-entropy: 0.9526092095121206, [(2, 32), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [132, 13, 0]]
** centroid: 3, normalized-entropy: 0.4353177790414857, [(1, 132), (2, 13)]
*** center 4: selecting labels [1] (freq >= 2) [from [178, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [92, 32, 0]]
** centroid: 5, normalized-entropy: 0.8238116333123173, [(1, 92), (2, 32)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [4, 53, 0]]
** centroid: 6, normalized-entropy: 0.36657801255334593, [(1, 4), (2, 53)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 43, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19625674246711242] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19625674246711242, 0.1692255476470115] ***
*** finished computation of 7 references, err: [Inf, 0.19625674246711242, 0.1692255476470115] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 15, 19]]
** centroid: 1, normalized-entropy: 0.9899927915575186, [(2, 15), (3, 19)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 56, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 56, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [107, 74, 0]]
** centroid: 4, normalized-entropy: 0.9758872318264928, [(1, 107), (2, 74)]
*** center 5: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [129, 34, 0]]
** centroid: 7, normalized-entropy: 0.7387769115800878, [(1, 129), (2, 34)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19496763228000402] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19496763228000402, 0.15749303781981203] ***
*** starting iteration: 2; err: [Inf, 0.19496763228000402, 0.15749303781981203] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19496763228000402, 0.15749303781981203, 0.15251855077655488] ***
*** starting iteration: 3; err: [Inf, 0.19496763228000402, 0.15749303781981203, 0.15251855077655488] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19496763228000402, 0.15749303781981203, 0.15251855077655488, 0.15031761914776923] ***
*** starting iteration: 4; err: [Inf, 0.19496763228000402, 0.15749303781981203, 0.15251855077655488, 0.15031761914776923] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19496763228000402, 0.15749303781981203, 0.15251855077655488, 0.15031761914776923, 0.14853996574996156] ***
*** starting iteration: 5; err: [Inf, 0.19496763228000402, 0.15749303781981203, 0.15251855077655488, 0.15031761914776923, 0.14853996574996156] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19496763228000402, 0.15749303781981203, 0.15251855077655488, 0.15031761914776923, 0.14853996574996156, 0.1479013668720725] ***
*** finished computation of 7 references, err: [Inf, 0.19496763228000402, 0.15749303781981203, 0.15251855077655488, 0.15031761914776923, 0.14853996574996156, 0.1479013668720725] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [93, 1, 0]]
** centroid: 1, normalized-entropy: 0.0849955598367127, [(1, 93), (2, 1)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [122, 25, 0]]
** centroid: 2, normalized-entropy: 0.6578603725435735, [(1, 122), (2, 25)]
*** center 3: selecting labels [1] (freq >= 1) [from [116, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 52, 18]]
** centroid: 4, normalized-entropy: 0.8224042259549892, [(2, 52), (3, 18)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 73, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [13, 63, 0]]
** centroid: 6, normalized-entropy: 0.6601070987550468, [(1, 13), (2, 63)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [76, 14, 0]]
** centroid: 7, normalized-entropy: 0.6235702082127973, [(1, 76), (2, 14)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22835684488241237] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22835684488241237, 0.18174093044705053] ***
*** starting iteration: 2; err: [Inf, 0.22835684488241237, 0.18174093044705053] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22835684488241237, 0.18174093044705053, 0.17261711719712575] ***
*** starting iteration: 3; err: [Inf, 0.22835684488241237, 0.18174093044705053, 0.17261711719712575] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22835684488241237, 0.18174093044705053, 0.17261711719712575, 0.16121640150900232] ***
*** starting iteration: 4; err: [Inf, 0.22835684488241237, 0.18174093044705053, 0.17261711719712575, 0.16121640150900232] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22835684488241237, 0.18174093044705053, 0.17261711719712575, 0.16121640150900232, 0.15222261113853292] ***
*** starting iteration: 5; err: [Inf, 0.22835684488241237, 0.18174093044705053, 0.17261711719712575, 0.16121640150900232, 0.15222261113853292] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22835684488241237, 0.18174093044705053, 0.17261711719712575, 0.16121640150900232, 0.15222261113853292, 0.1486617904135502] ***
*** starting iteration: 6; err: [Inf, 0.22835684488241237, 0.18174093044705053, 0.17261711719712575, 0.16121640150900232, 0.15222261113853292, 0.1486617904135502] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22835684488241237, 0.18174093044705053, 0.17261711719712575, 0.16121640150900232, 0.15222261113853292, 0.1486617904135502, 0.14671672534929223] ***
*** starting iteration: 7; err: [Inf, 0.22835684488241237, 0.18174093044705053, 0.17261711719712575, 0.16121640150900232, 0.15222261113853292, 0.1486617904135502, 0.14671672534929223] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22835684488241237, 0.18174093044705053, 0.17261711719712575, 0.16121640150900232, 0.15222261113853292, 0.1486617904135502, 0.14671672534929223, 0.14517427970078597] ***
*** starting iteration: 8; err: [Inf, 0.22835684488241237, 0.18174093044705053, 0.17261711719712575, 0.16121640150900232, 0.15222261113853292, 0.1486617904135502, 0.14671672534929223, 0.14517427970078597] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22835684488241237, 0.18174093044705053, 0.17261711719712575, 0.16121640150900232, 0.15222261113853292, 0.1486617904135502, 0.14671672534929223, 0.14517427970078597, 0.1442727056402445] ***
*** finished computation of 7 references, err: [Inf, 0.22835684488241237, 0.18174093044705053, 0.17261711719712575, 0.16121640150900232, 0.15222261113853292, 0.1486617904135502, 0.14671672534929223, 0.14517427970078597, 0.1442727056402445] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [91, 26, 0]]
** centroid: 1, normalized-entropy: 0.7642045065086204, [(1, 91), (2, 26)]
*** center 2: selecting labels [1] (freq >= 1) [from [105, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [76, 11, 0]]
** centroid: 3, normalized-entropy: 0.5475844288749033, [(1, 76), (2, 11)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [58, 39, 0]]
** centroid: 4, normalized-entropy: 0.9721439323621084, [(1, 58), (2, 39)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 68, 15]]
** centroid: 5, normalized-entropy: 0.6816559115981193, [(2, 68), (3, 15)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 77, 4]]
** centroid: 6, normalized-entropy: 0.2837689703721877, [(2, 77), (3, 4)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [81, 16, 0]]
** centroid: 7, normalized-entropy: 0.6460174789535751, [(1, 81), (2, 16)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18565930300315414] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18565930300315414, 0.15084575949344264] ***
*** starting iteration: 2; err: [Inf, 0.18565930300315414, 0.15084575949344264] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18565930300315414, 0.15084575949344264, 0.1471518555145035] ***
*** starting iteration: 3; err: [Inf, 0.18565930300315414, 0.15084575949344264, 0.1471518555145035] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18565930300315414, 0.15084575949344264, 0.1471518555145035, 0.14622210492582424] ***
*** finished computation of 7 references, err: [Inf, 0.18565930300315414, 0.15084575949344264, 0.1471518555145035, 0.14622210492582424] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [52, 68, 0]]
** centroid: 1, normalized-entropy: 0.9871377743721862, [(1, 52), (2, 68)]
*** center 2: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 97, 19]]
** centroid: 3, normalized-entropy: 0.6433071292001625, [(2, 97), (3, 19)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [81, 30, 0]]
** centroid: 4, normalized-entropy: 0.8418521897563208, [(1, 81), (2, 30)]
*** center 5: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [55, 40, 0]]
** centroid: 6, normalized-entropy: 0.9819407868640977, [(1, 55), (2, 40)]
*** center 7: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18029536089759218] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18029536089759218, 0.1565456534141546] ***
*** starting iteration: 2; err: [Inf, 0.18029536089759218, 0.1565456534141546] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18029536089759218, 0.1565456534141546, 0.15186328831892293] ***
*** starting iteration: 3; err: [Inf, 0.18029536089759218, 0.1565456534141546, 0.15186328831892293] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18029536089759218, 0.1565456534141546, 0.15186328831892293, 0.14997825084545008] ***
*** starting iteration: 4; err: [Inf, 0.18029536089759218, 0.1565456534141546, 0.15186328831892293, 0.14997825084545008] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18029536089759218, 0.1565456534141546, 0.15186328831892293, 0.14997825084545008, 0.14905810823479482] ***
*** finished computation of 7 references, err: [Inf, 0.18029536089759218, 0.1565456534141546, 0.15186328831892293, 0.14997825084545008, 0.14905810823479482] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [31, 54, 0]]
** centroid: 1, normalized-entropy: 0.9465202215633438, [(1, 31), (2, 54)]
*** center 2: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [96, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 91, 18]]
** centroid: 4, normalized-entropy: 0.6464599001526788, [(2, 91), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [51, 34, 0]]
** centroid: 5, normalized-entropy: 0.9709505944546688, [(1, 51), (2, 34)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [91, 10, 0]]
** centroid: 6, normalized-entropy: 0.46584917377204255, [(1, 91), (2, 10)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [73, 39, 0]]
** centroid: 7, normalized-entropy: 0.9324631422909171, [(1, 73), (2, 39)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19553734758862532] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19553734758862532, 0.15225626188616592] ***
*** starting iteration: 2; err: [Inf, 0.19553734758862532, 0.15225626188616592] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19553734758862532, 0.15225626188616592, 0.1476379317850031] ***
*** starting iteration: 3; err: [Inf, 0.19553734758862532, 0.15225626188616592, 0.1476379317850031] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19553734758862532, 0.15225626188616592, 0.1476379317850031, 0.146467556602376] ***
*** starting iteration: 4; err: [Inf, 0.19553734758862532, 0.15225626188616592, 0.1476379317850031, 0.146467556602376] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19553734758862532, 0.15225626188616592, 0.1476379317850031, 0.146467556602376, 0.1461494314345368] ***
*** finished computation of 7 references, err: [Inf, 0.19553734758862532, 0.15225626188616592, 0.1476379317850031, 0.146467556602376, 0.1461494314345368] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 95, 19]]
** centroid: 1, normalized-entropy: 0.6500224216483541, [(2, 95), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [11, 70, 0]]
** centroid: 2, normalized-entropy: 0.5731393980555147, [(1, 11), (2, 70)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [43, 2, 0]]
** centroid: 3, normalized-entropy: 0.2623112196143368, [(1, 43), (2, 2)]
*** center 4: selecting labels [1] (freq >= 1) [from [109, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [62, 44, 0]]
** centroid: 5, normalized-entropy: 0.9790981671667148, [(1, 62), (2, 44)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [105, 26, 0]]
** centroid: 6, normalized-entropy: 0.7188641311053031, [(1, 105), (2, 26)]
*** center 7: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18577165006641774] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18577165006641774, 0.14711660378915573] ***
*** starting iteration: 2; err: [Inf, 0.18577165006641774, 0.14711660378915573] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18577165006641774, 0.14711660378915573, 0.14412867051173656] ***
*** starting iteration: 3; err: [Inf, 0.18577165006641774, 0.14711660378915573, 0.14412867051173656] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18577165006641774, 0.14711660378915573, 0.14412867051173656, 0.14362365407157113] ***
*** finished computation of 7 references, err: [Inf, 0.18577165006641774, 0.14711660378915573, 0.14412867051173656, 0.14362365407157113] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [73, 10, 0]]
** centroid: 1, normalized-entropy: 0.530744566923854, [(1, 73), (2, 10)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [81, 25, 0]]
** centroid: 2, normalized-entropy: 0.7880689925063812, [(1, 81), (2, 25)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [96, 2, 0]]
** centroid: 3, normalized-entropy: 0.14372616993938164, [(1, 96), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [78, 18, 0]]
** centroid: 4, normalized-entropy: 0.6962122601251459, [(1, 78), (2, 18)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 87, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 93, 19]]
** centroid: 7, normalized-entropy: 0.6568871346605055, [(2, 93), (3, 19)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7174459667967258] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7174459667967258, 0.39872597368132023] ***
*** starting iteration: 2; err: [Inf, 0.7174459667967258, 0.39872597368132023] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7174459667967258, 0.39872597368132023, 0.3187476459096323] ***
*** starting iteration: 3; err: [Inf, 0.7174459667967258, 0.39872597368132023, 0.3187476459096323] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7174459667967258, 0.39872597368132023, 0.3187476459096323, 0.2980764716326653] ***
*** finished computation of 3 references, err: [Inf, 0.7174459667967258, 0.39872597368132023, 0.3187476459096323, 0.2980764716326653] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [128, 152, 18]]
** centroid: 1, normalized-entropy: 0.7972762611293319, [(1, 128), (2, 152), (3, 18)]
*** center 2: selecting labels [1] (freq >= 1) [from [191, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [101, 76, 0]]
** centroid: 3, normalized-entropy: 0.9855611953957444, [(1, 101), (2, 76)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4208185382542023] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4208185382542023, 0.30027337512769353] ***
*** starting iteration: 2; err: [Inf, 0.4208185382542023, 0.30027337512769353] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4208185382542023, 0.30027337512769353, 0.2951447076291248] ***
*** starting iteration: 3; err: [Inf, 0.4208185382542023, 0.30027337512769353, 0.2951447076291248] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4208185382542023, 0.30027337512769353, 0.2951447076291248, 0.2948108293867294] ***
*** finished computation of 3 references, err: [Inf, 0.4208185382542023, 0.30027337512769353, 0.2951447076291248, 0.2948108293867294] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [90, 149, 19]]
** centroid: 1, normalized-entropy: 0.7978647693209899, [(1, 90), (2, 149), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [126, 88, 0]]
** centroid: 2, normalized-entropy: 0.9771340293867935, [(1, 126), (2, 88)]
*** center 3: selecting labels [1] (freq >= 1) [from [195, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.6488700564140859] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6488700564140859, 0.33726784481067973] ***
*** starting iteration: 2; err: [Inf, 0.6488700564140859, 0.33726784481067973] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6488700564140859, 0.33726784481067973, 0.3038022029402106] ***
*** starting iteration: 3; err: [Inf, 0.6488700564140859, 0.33726784481067973, 0.3038022029402106] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6488700564140859, 0.33726784481067973, 0.3038022029402106, 0.2985239001465724] ***
*** finished computation of 3 references, err: [Inf, 0.6488700564140859, 0.33726784481067973, 0.3038022029402106, 0.2985239001465724] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [164, 80, 0]]
** centroid: 1, normalized-entropy: 0.9127341558073343, [(1, 164), (2, 80)]
*** center 2: selecting labels [1] (freq >= 1) [from [218, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [31, 155, 19]]
** centroid: 3, normalized-entropy: 0.6530997916804941, [(1, 31), (2, 155), (3, 19)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2878749936388375] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2878749936388375, 0.18542826721478287] ***
*** starting iteration: 2; err: [Inf, 0.2878749936388375, 0.18542826721478287] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2878749936388375, 0.18542826721478287, 0.16419807776973747] ***
*** starting iteration: 3; err: [Inf, 0.2878749936388375, 0.18542826721478287, 0.16419807776973747] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2878749936388375, 0.18542826721478287, 0.16419807776973747, 0.15667595222659475] ***
*** finished computation of 7 references, err: [Inf, 0.2878749936388375, 0.18542826721478287, 0.16419807776973747, 0.15667595222659475] ***
*** center 1: selecting labels [1] (freq >= 2) [from [165, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [107, 37, 0]]
** centroid: 2, normalized-entropy: 0.8221004037117993, [(1, 107), (2, 37)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [42, 45, 0]]
** centroid: 3, normalized-entropy: 0.999142103991909, [(1, 42), (2, 45)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 60, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 62, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [106, 16, 0]]
** centroid: 6, normalized-entropy: 0.5605769426145328, [(1, 106), (2, 16)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 8, 18]]
** centroid: 7, normalized-entropy: 0.8904916402194913, [(2, 8), (3, 18)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2515889980199829] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2515889980199829, 0.1717745259147964] ***
*** starting iteration: 2; err: [Inf, 0.2515889980199829, 0.1717745259147964] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2515889980199829, 0.1717745259147964, 0.16205222052284635] ***
*** starting iteration: 3; err: [Inf, 0.2515889980199829, 0.1717745259147964, 0.16205222052284635] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2515889980199829, 0.1717745259147964, 0.16205222052284635, 0.15707928494995702] ***
*** finished computation of 7 references, err: [Inf, 0.2515889980199829, 0.1717745259147964, 0.16205222052284635, 0.15707928494995702] ***
*** center 1: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [91, 21, 0]]
** centroid: 2, normalized-entropy: 0.6962122601251459, [(1, 91), (2, 21)]
*** center 3: selecting labels [1] (freq >= 2) [from [144, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [101, 43, 0]]
** centroid: 4, normalized-entropy: 0.8795864999831354, [(1, 101), (2, 43)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 65, 2]]
** centroid: 5, normalized-entropy: 0.19364280468389852, [(2, 65), (3, 2)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 82, 17]]
** centroid: 6, normalized-entropy: 0.6616179061408356, [(2, 82), (3, 17)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [25, 26, 0]]
** centroid: 7, normalized-entropy: 0.9997226475394071, [(1, 25), (2, 26)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23909182291382972] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23909182291382972, 0.165122772502745] ***
*** starting iteration: 2; err: [Inf, 0.23909182291382972, 0.165122772502745] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23909182291382972, 0.165122772502745, 0.15663397041215063] ***
*** starting iteration: 3; err: [Inf, 0.23909182291382972, 0.165122772502745, 0.15663397041215063] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23909182291382972, 0.165122772502745, 0.15663397041215063, 0.15324556629900923] ***
*** finished computation of 7 references, err: [Inf, 0.23909182291382972, 0.165122772502745, 0.15663397041215063, 0.15324556629900923] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [71, 37, 0]]
** centroid: 1, normalized-entropy: 0.9272780575976948, [(1, 71), (2, 37)]
*** center 2: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 94, 19]]
** centroid: 3, normalized-entropy: 0.6534358224760193, [(2, 94), (3, 19)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [35, 83, 0]]
** centroid: 4, normalized-entropy: 0.8771076392358363, [(1, 35), (2, 83)]
*** center 5: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [97, 16, 0]]
** centroid: 6, normalized-entropy: 0.5883953722191577, [(1, 97), (2, 16)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [57, 5, 0]]
** centroid: 7, normalized-entropy: 0.4044483864864384, [(1, 57), (2, 5)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4027707972563803] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4027707972563803, 0.3019051251198129] ***
*** finished computation of 3 references, err: [Inf, 0.4027707972563803, 0.3019051251198129] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [141, 47, 0]]
** centroid: 1, normalized-entropy: 0.8112781244591328, [(1, 141), (2, 47)]
*** center 2: selecting labels [1] (freq >= 1) [from [264, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [15, 181, 18]]
** centroid: 3, normalized-entropy: 0.48805606634130677, [(1, 15), (2, 181), (3, 18)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.41408030778962723] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41408030778962723, 0.31889013819587786] ***
*** finished computation of 3 references, err: [Inf, 0.41408030778962723, 0.31889013819587786] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [289, 56, 0]]
** centroid: 1, normalized-entropy: 0.6398282099903952, [(1, 289), (2, 56)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 161, 19]]
** centroid: 2, normalized-entropy: 0.4863628733747775, [(2, 161), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [122, 20, 0]]
** centroid: 3, normalized-entropy: 0.5864477034453907, [(1, 122), (2, 20)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.39993948691889] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39993948691889, 0.3368580868716227] ***
*** finished computation of 3 references, err: [Inf, 0.39993948691889, 0.3368580868716227] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [127, 118, 0]]
** centroid: 1, normalized-entropy: 0.9990263673912957, [(1, 127), (2, 118)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [73, 115, 19]]
** centroid: 2, normalized-entropy: 0.8313417819734169, [(1, 73), (2, 115), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [213, 2, 0]]
** centroid: 3, normalized-entropy: 0.07613169094711808, [(1, 213), (2, 2)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.45105624308406905] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45105624308406905, 0.30230718497578446] ***
*** starting iteration: 2; err: [Inf, 0.45105624308406905, 0.30230718497578446] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45105624308406905, 0.30230718497578446, 0.30056763946305254] ***
*** starting iteration: 3; err: [Inf, 0.45105624308406905, 0.30230718497578446, 0.30056763946305254] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45105624308406905, 0.30230718497578446, 0.30056763946305254, 0.3002792950565773] ***
*** finished computation of 3 references, err: [Inf, 0.45105624308406905, 0.30230718497578446, 0.30056763946305254, 0.3002792950565773] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [275, 17, 0]]
** centroid: 1, normalized-entropy: 0.3203347793780932, [(1, 275), (2, 17)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [1, 159, 18]]
** centroid: 2, normalized-entropy: 0.4743454375622396, [(2, 159), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [144, 52, 0]]
** centroid: 3, normalized-entropy: 0.834648285181383, [(1, 144), (2, 52)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4678383611220827] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4678383611220827, 0.2929063368284296] ***
*** starting iteration: 2; err: [Inf, 0.4678383611220827, 0.2929063368284296] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4678383611220827, 0.2929063368284296, 0.28993104159764976] ***
*** starting iteration: 3; err: [Inf, 0.4678383611220827, 0.2929063368284296, 0.28993104159764976] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4678383611220827, 0.2929063368284296, 0.28993104159764976, 0.28878130025134] ***
*** starting iteration: 4; err: [Inf, 0.4678383611220827, 0.2929063368284296, 0.28993104159764976, 0.28878130025134] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4678383611220827, 0.2929063368284296, 0.28993104159764976, 0.28878130025134, 0.287816794360171] ***
*** finished computation of 3 references, err: [Inf, 0.4678383611220827, 0.2929063368284296, 0.28993104159764976, 0.28878130025134, 0.287816794360171] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [176, 43, 0]]
** centroid: 1, normalized-entropy: 0.7145617201840294, [(1, 176), (2, 43)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [235, 26, 0]]
** centroid: 2, normalized-entropy: 0.46777988502029316, [(1, 235), (2, 26)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 168, 19]]
** centroid: 3, normalized-entropy: 0.47406050383277126, [(2, 168), (3, 19)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.5084157729059922] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5084157729059922, 0.2992298621488833] ***
*** starting iteration: 2; err: [Inf, 0.5084157729059922, 0.2992298621488833] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5084157729059922, 0.2992298621488833, 0.2962536793202162] ***
*** starting iteration: 3; err: [Inf, 0.5084157729059922, 0.2992298621488833, 0.2962536793202162] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5084157729059922, 0.2992298621488833, 0.2962536793202162, 0.2954082752353159] ***
*** finished computation of 3 references, err: [Inf, 0.5084157729059922, 0.2992298621488833, 0.2962536793202162, 0.2954082752353159] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [161, 44, 0]]
** centroid: 1, normalized-entropy: 0.7502478624493758, [(1, 161), (2, 44)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [252, 27, 0]]
** centroid: 2, normalized-entropy: 0.45868581620054033, [(1, 252), (2, 27)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 164, 19]]
** centroid: 3, normalized-entropy: 0.4810050212742402, [(2, 164), (3, 19)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2289665248831441] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2289665248831441, 0.18965543442960087] ***
*** starting iteration: 2; err: [Inf, 0.2289665248831441, 0.18965543442960087] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2289665248831441, 0.18965543442960087, 0.18505561150780794] ***
*** starting iteration: 3; err: [Inf, 0.2289665248831441, 0.18965543442960087, 0.18505561150780794] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2289665248831441, 0.18965543442960087, 0.18505561150780794, 0.18428990272232618] ***
*** finished computation of 7 references, err: [Inf, 0.2289665248831441, 0.18965543442960087, 0.18505561150780794, 0.18428990272232618] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [85, 14, 0]]
** centroid: 1, normalized-entropy: 0.5879303728017198, [(1, 85), (2, 14)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [87, 8, 0]]
** centroid: 2, normalized-entropy: 0.4168441963431652, [(1, 87), (2, 8)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 63, 19]]
** centroid: 3, normalized-entropy: 0.7809756883263416, [(2, 63), (3, 19)]
*** center 4: selecting labels [1] (freq >= 2) [from [110, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [58, 55, 0]]
** centroid: 5, normalized-entropy: 0.9994915114306262, [(1, 58), (2, 55)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [71, 14, 0]]
** centroid: 6, normalized-entropy: 0.6454495903301855, [(1, 71), (2, 14)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 83, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23985703213690504] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23985703213690504, 0.1901613410382156] ***
*** starting iteration: 2; err: [Inf, 0.23985703213690504, 0.1901613410382156] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23985703213690504, 0.1901613410382156, 0.1866502545975048] ***
*** starting iteration: 3; err: [Inf, 0.23985703213690504, 0.1901613410382156, 0.1866502545975048] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23985703213690504, 0.1901613410382156, 0.1866502545975048, 0.1854119473116017] ***
*** finished computation of 7 references, err: [Inf, 0.23985703213690504, 0.1901613410382156, 0.1866502545975048, 0.1854119473116017] ***
*** center 1: selecting labels [1] (freq >= 2) [from [117, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 53, 19]]
** centroid: 2, normalized-entropy: 0.8325582396745668, [(2, 53), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [59, 36, 0]]
** centroid: 3, normalized-entropy: 0.9572951876544017, [(1, 59), (2, 36)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [99, 5, 0]]
** centroid: 4, normalized-entropy: 0.2781710079264946, [(1, 99), (2, 5)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [39, 63, 0]]
** centroid: 5, normalized-entropy: 0.9596868937742168, [(1, 39), (2, 63)]
*** center 6: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 78, 0]]
** centroid: 7, normalized-entropy: 0.22853814395352806, [(1, 3), (2, 78)]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 13)
[0.9350248452044859, 0.9299808790826756, 0.9239868611126095, 0.9230068391745038, 0.9220088351824879, 0.9139858421295547, 0.8990187792583003, 0.873981766197335, 0.8690067312821804, 0.8670167173161185, 0.8339806872741006, 0.7940035844227461, 0.7761474048899198]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9350248452044859
finished with 14
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.39443623902018854] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39443623902018854, 0.32838744497871974] ***
*** finished computation of 3 references, err: [Inf, 0.39443623902018854, 0.32838744497871974] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [256, 53, 0]]
** centroid: 1, normalized-entropy: 0.6611724645003306, [(1, 256), (2, 53)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [37, 99, 18]]
** centroid: 2, normalized-entropy: 0.7987832775190177, [(1, 37), (2, 99), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [127, 76, 0]]
** centroid: 3, normalized-entropy: 0.9539790391468632, [(1, 127), (2, 76)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.39801189447494817] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39801189447494817, 0.2962462610102257] ***
*** finished computation of 3 references, err: [Inf, 0.39801189447494817, 0.2962462610102257] ***
*** center 1: selecting labels [1] (freq >= 2) [from [238, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [151, 66, 0]]
** centroid: 2, normalized-entropy: 0.8863017968880514, [(1, 151), (2, 66)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [22, 171, 19]]
** centroid: 3, normalized-entropy: 0.5685755551609958, [(1, 22), (2, 171), (3, 19)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4033051437029484] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4033051437029484, 0.3263277781476592] ***
*** finished computation of 3 references, err: [Inf, 0.4033051437029484, 0.3263277781476592] ***
*** center 1: selecting labels [1] (freq >= 2) [from [141, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [119, 158, 19]]
** centroid: 2, normalized-entropy: 0.7989081957872579, [(1, 119), (2, 158), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [153, 77, 0]]
** centroid: 3, normalized-entropy: 0.9197382963118399, [(1, 153), (2, 77)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 14)
[0.9350248452044859, 0.9299808790826756, 0.9239868611126095, 0.9230068391745038, 0.9220088351824879, 0.9139858421295547, 0.8990187792583003, 0.873981766197335, 0.8690067312821804, 0.8670167173161185, 0.8390486294677911, 0.8339806872741006, 0.7940035844227461, 0.7761474048899198]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9350248452044859
finished with 15
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.23547540711380216] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23547540711380216, 0.19358542051960578] ***
*** finished computation of 7 references, err: [Inf, 0.23547540711380216, 0.19358542051960578] ***
*** center 1: selecting labels [1] (freq >= 2) [from [120, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [85, 22, 0]]
** centroid: 3, normalized-entropy: 0.7330022650766125, [(1, 85), (2, 22)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [20, 92, 0]]
** centroid: 4, normalized-entropy: 0.6769418697808861, [(1, 20), (2, 92)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 62, 18]]
** centroid: 5, normalized-entropy: 0.7691928290130138, [(2, 62), (3, 18)]
*** center 6: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [49, 52, 0]]
** centroid: 7, normalized-entropy: 0.999363485672765, [(1, 49), (2, 52)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24856308562125357] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24856308562125357, 0.2033633026762166] ***
*** finished computation of 7 references, err: [Inf, 0.24856308562125357, 0.2033633026762166] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [8, 49, 0]]
** centroid: 1, normalized-entropy: 0.5851569902762294, [(1, 8), (2, 49)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 93, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [108, 29, 0]]
** centroid: 3, normalized-entropy: 0.7446795348411532, [(1, 108), (2, 29)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 61, 19]]
** centroid: 4, normalized-entropy: 0.79085809055281, [(2, 61), (3, 19)]
*** center 5: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [103, 5, 0]]
** centroid: 7, normalized-entropy: 0.2704505135124657, [(1, 103), (2, 5)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24143775397069708] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24143775397069708, 0.20057243861068136] ***
*** finished computation of 7 references, err: [Inf, 0.24143775397069708, 0.20057243861068136] ***
*** center 1: selecting labels [1] (freq >= 2) [from [120, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [37, 41, 0]]
** centroid: 2, normalized-entropy: 0.9981021327390103, [(1, 37), (2, 41)]
*** center 3: selecting labels [1] (freq >= 2) [from [106, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [23, 58, 0]]
** centroid: 4, normalized-entropy: 0.8607781176165941, [(1, 23), (2, 58)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [65, 62, 0]]
** centroid: 5, normalized-entropy: 0.9995974498364509, [(1, 65), (2, 62)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 73, 19]]
** centroid: 6, normalized-entropy: 0.7347813522127804, [(2, 73), (3, 19)]
*** center 7: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 15)
[0.9350248452044859, 0.9299808790826756, 0.9239868611126095, 0.9230068391745038, 0.9220088351824879, 0.9160058261854669, 0.9139858421295547, 0.8990187792583003, 0.873981766197335, 0.8690067312821804, 0.8670167173161185, 0.8390486294677911, 0.8339806872741006, 0.7940035844227461, 0.7761474048899198]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9350248452044859
finished with 15
iteration 4 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9350248452044859, 0.9299808790826756, 0.9239868611126095, 0.9230068391745038, 0.9220088351824879, 0.9160058261854669, 0.9139858421295547, 0.8990187792583003, 0.873981766197335, 0.8690067312821804, 0.8670167173161185, 0.8390486294677911, 0.8339806872741006, 0.7940035844227461, 0.7761474048899198]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9350248452044859
finished with 15
iteration 5 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9350248452044859, 0.9299808790826756, 0.9239868611126095, 0.9230068391745038, 0.9220088351824879, 0.9160058261854669, 0.9139858421295547, 0.8990187792583003, 0.873981766197335, 0.8690067312821804, 0.8670167173161185, 0.8390486294677911, 0.8339806872741006, 0.7940035844227461, 0.7761474048899198]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9350248452044859
finished with 16
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.24725769959423724] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24725769959423724, 0.20476172196569745] ***
*** starting iteration: 2; err: [Inf, 0.24725769959423724, 0.20476172196569745] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24725769959423724, 0.20476172196569745, 0.19606415082507575] ***
*** starting iteration: 3; err: [Inf, 0.24725769959423724, 0.20476172196569745, 0.19606415082507575] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24725769959423724, 0.20476172196569745, 0.19606415082507575, 0.19366485511187698] ***
*** starting iteration: 4; err: [Inf, 0.24725769959423724, 0.20476172196569745, 0.19606415082507575, 0.19366485511187698] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24725769959423724, 0.20476172196569745, 0.19606415082507575, 0.19366485511187698, 0.1928751431908962] ***
*** finished computation of 7 references, err: [Inf, 0.24725769959423724, 0.20476172196569745, 0.19606415082507575, 0.19366485511187698, 0.1928751431908962] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [21, 72, 0]]
** centroid: 1, normalized-entropy: 0.7706290693639406, [(1, 21), (2, 72)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [27, 78, 0]]
** centroid: 2, normalized-entropy: 0.8224042259549892, [(1, 27), (2, 78)]
*** center 3: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [101, 15, 0]]
** centroid: 4, normalized-entropy: 0.5555437650236148, [(1, 101), (2, 15)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [79, 1, 0]]
** centroid: 5, normalized-entropy: 0.09694460606247329, [(1, 79), (2, 1)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 62, 18]]
** centroid: 6, normalized-entropy: 0.7691928290130138, [(2, 62), (3, 18)]
*** center 7: selecting labels [1] (freq >= 1) [from [115, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2914904939147575] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2914904939147575, 0.2426275136144734] ***
*** starting iteration: 2; err: [Inf, 0.2914904939147575, 0.2426275136144734] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2914904939147575, 0.2426275136144734, 0.21480097159648362] ***
*** starting iteration: 3; err: [Inf, 0.2914904939147575, 0.2426275136144734, 0.21480097159648362] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2914904939147575, 0.2426275136144734, 0.21480097159648362, 0.19294096205545508] ***
*** starting iteration: 4; err: [Inf, 0.2914904939147575, 0.2426275136144734, 0.21480097159648362, 0.19294096205545508] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2914904939147575, 0.2426275136144734, 0.21480097159648362, 0.19294096205545508, 0.18707466433927797] ***
*** starting iteration: 5; err: [Inf, 0.2914904939147575, 0.2426275136144734, 0.21480097159648362, 0.19294096205545508, 0.18707466433927797] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2914904939147575, 0.2426275136144734, 0.21480097159648362, 0.19294096205545508, 0.18707466433927797, 0.18663185810693994] ***
*** finished computation of 7 references, err: [Inf, 0.2914904939147575, 0.2426275136144734, 0.21480097159648362, 0.19294096205545508, 0.18707466433927797, 0.18663185810693994] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [114, 22, 0]]
** centroid: 1, normalized-entropy: 0.6385146263620961, [(1, 114), (2, 22)]
*** center 2: selecting labels [1] (freq >= 1) [from [111, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [67, 39, 0]]
** centroid: 3, normalized-entropy: 0.9490651498811383, [(1, 67), (2, 39)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 81, 15]]
** centroid: 4, normalized-entropy: 0.625262405223423, [(2, 81), (3, 15)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 71, 4]]
** centroid: 5, normalized-entropy: 0.3003914173647818, [(2, 71), (3, 4)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [48, 24, 0]]
** centroid: 6, normalized-entropy: 0.9182958340544894, [(1, 48), (2, 24)]
*** center 7: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3384726781159293] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3384726781159293, 0.2217313862451795] ***
*** starting iteration: 2; err: [Inf, 0.3384726781159293, 0.2217313862451795] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3384726781159293, 0.2217313862451795, 0.21007143396177683] ***
*** starting iteration: 3; err: [Inf, 0.3384726781159293, 0.2217313862451795, 0.21007143396177683] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3384726781159293, 0.2217313862451795, 0.21007143396177683, 0.20401847538729567] ***
*** starting iteration: 4; err: [Inf, 0.3384726781159293, 0.2217313862451795, 0.21007143396177683, 0.20401847538729567] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3384726781159293, 0.2217313862451795, 0.21007143396177683, 0.20401847538729567, 0.19683238191703248] ***
*** starting iteration: 5; err: [Inf, 0.3384726781159293, 0.2217313862451795, 0.21007143396177683, 0.20401847538729567, 0.19683238191703248] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3384726781159293, 0.2217313862451795, 0.21007143396177683, 0.20401847538729567, 0.19683238191703248, 0.1917328070863143] ***
*** starting iteration: 6; err: [Inf, 0.3384726781159293, 0.2217313862451795, 0.21007143396177683, 0.20401847538729567, 0.19683238191703248, 0.1917328070863143] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3384726781159293, 0.2217313862451795, 0.21007143396177683, 0.20401847538729567, 0.19683238191703248, 0.1917328070863143, 0.18849993898705028] ***
*** starting iteration: 7; err: [Inf, 0.3384726781159293, 0.2217313862451795, 0.21007143396177683, 0.20401847538729567, 0.19683238191703248, 0.1917328070863143, 0.18849993898705028] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3384726781159293, 0.2217313862451795, 0.21007143396177683, 0.20401847538729567, 0.19683238191703248, 0.1917328070863143, 0.18849993898705028, 0.18685804869605416] ***
*** starting iteration: 8; err: [Inf, 0.3384726781159293, 0.2217313862451795, 0.21007143396177683, 0.20401847538729567, 0.19683238191703248, 0.1917328070863143, 0.18849993898705028, 0.18685804869605416] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3384726781159293, 0.2217313862451795, 0.21007143396177683, 0.20401847538729567, 0.19683238191703248, 0.1917328070863143, 0.18849993898705028, 0.18685804869605416, 0.1861086622930538] ***
*** finished computation of 7 references, err: [Inf, 0.3384726781159293, 0.2217313862451795, 0.21007143396177683, 0.20401847538729567, 0.19683238191703248, 0.1917328070863143, 0.18849993898705028, 0.18685804869605416, 0.1861086622930538] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 104, 19]]
** centroid: 1, normalized-entropy: 0.6209181358912585, [(2, 104), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [80, 30, 0]]
** centroid: 2, normalized-entropy: 0.8453509366224364, [(1, 80), (2, 30)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [99, 4, 0]]
** centroid: 3, normalized-entropy: 0.23692474671835093, [(1, 99), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [56, 53, 0]]
** centroid: 4, normalized-entropy: 0.9994535015927487, [(1, 56), (2, 53)]
*** center 5: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [46, 44, 0]]
** centroid: 6, normalized-entropy: 0.9996437496778561, [(1, 46), (2, 44)]
*** center 7: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 16)
[0.9350248452044859, 0.9299808790826756, 0.9239868611126095, 0.9230158302014589, 0.9230068391745038, 0.9220088351824879, 0.9160058261854669, 0.9139858421295547, 0.8990187792583003, 0.873981766197335, 0.8690067312821804, 0.8670167173161185, 0.8390486294677911, 0.8339806872741006, 0.7940035844227461, 0.7761474048899198]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9350248452044859
finished with 16
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 16)
[0.9350248452044859, 0.9299808790826756, 0.9239868611126095, 0.9230158302014589, 0.9230068391745038, 0.9220088351824879, 0.9160058261854669, 0.9139858421295547, 0.8990187792583003, 0.873981766197335, 0.8690067312821804, 0.8670167173161185, 0.8390486294677911, 0.8339806872741006, 0.7940035844227461, 0.7761474048899198]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9350248452044859
finished with 18
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.2611833668450962] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2611833668450962, 0.23336970159789552] ***
*** starting iteration: 2; err: [Inf, 0.2611833668450962, 0.23336970159789552] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2611833668450962, 0.23336970159789552, 0.23066560107957315] ***
*** starting iteration: 3; err: [Inf, 0.2611833668450962, 0.23336970159789552, 0.23066560107957315] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2611833668450962, 0.23336970159789552, 0.23066560107957315, 0.2299001188193624] ***
*** finished computation of 3 references, err: [Inf, 0.2611833668450962, 0.23336970159789552, 0.23066560107957315, 0.2299001188193624] ***
*** center 1: selecting labels [1] (freq >= 1) [from [214, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [151, 58, 0]]
** centroid: 2, normalized-entropy: 0.852038494016356, [(1, 151), (2, 58)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [55, 170, 18]]
** centroid: 3, normalized-entropy: 0.7090807761480189, [(1, 55), (2, 170), (3, 18)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24145153903847802] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.24145153903847802, 0.233679565460026] ***
*** starting iteration: 2; err: [Inf, 0.24145153903847802, 0.233679565460026] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.24145153903847802, 0.233679565460026, 0.23270846212162696] ***
*** finished computation of 3 references, err: [Inf, 0.24145153903847802, 0.233679565460026, 0.23270846212162696] ***
*** center 1: selecting labels [1] (freq >= 1) [from [211, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [142, 101, 0]]
** centroid: 2, normalized-entropy: 0.9793662043152619, [(1, 142), (2, 101)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [58, 136, 19]]
** centroid: 3, normalized-entropy: 0.7794046521827814, [(1, 58), (2, 136), (3, 19)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4751368867627148] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4751368867627148, 0.24899849905513752] ***
*** starting iteration: 2; err: [Inf, 0.4751368867627148, 0.24899849905513752] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4751368867627148, 0.24899849905513752, 0.2354628533966884] ***
*** starting iteration: 3; err: [Inf, 0.4751368867627148, 0.24899849905513752, 0.2354628533966884] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4751368867627148, 0.24899849905513752, 0.2354628533966884, 0.23384333413507583] ***
*** finished computation of 3 references, err: [Inf, 0.4751368867627148, 0.24899849905513752, 0.2354628533966884, 0.23384333413507583] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [268, 13, 0]]
** centroid: 1, normalized-entropy: 0.27030667830449473, [(1, 268), (2, 13)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [145, 56, 0]]
** centroid: 2, normalized-entropy: 0.8535457524356883, [(1, 145), (2, 56)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 166, 19]]
** centroid: 3, normalized-entropy: 0.4775048747918926, [(2, 166), (3, 19)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4290870002711432] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4290870002711432, 0.30740123115166706] ***
*** starting iteration: 2; err: [Inf, 0.4290870002711432, 0.30740123115166706] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4290870002711432, 0.30740123115166706, 0.2967827561082089] ***
*** starting iteration: 3; err: [Inf, 0.4290870002711432, 0.30740123115166706, 0.2967827561082089] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4290870002711432, 0.30740123115166706, 0.2967827561082089, 0.2947683552029758] ***
*** finished computation of 3 references, err: [Inf, 0.4290870002711432, 0.30740123115166706, 0.2967827561082089, 0.2947683552029758] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [256, 14, 0]]
** centroid: 1, normalized-entropy: 0.29421200849969587, [(1, 256), (2, 14)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [164, 41, 0]]
** centroid: 2, normalized-entropy: 0.7219280948873623, [(1, 164), (2, 41)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 173, 18]]
** centroid: 3, normalized-entropy: 0.4504689672655132, [(2, 173), (3, 18)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.36117495892700674] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36117495892700674, 0.2988526540036234] ***
*** starting iteration: 2; err: [Inf, 0.36117495892700674, 0.2988526540036234] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36117495892700674, 0.2988526540036234, 0.2963723356778296] ***
*** starting iteration: 3; err: [Inf, 0.36117495892700674, 0.2988526540036234, 0.2963723356778296] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36117495892700674, 0.2988526540036234, 0.2963723356778296, 0.2952281026800779] ***
*** finished computation of 3 references, err: [Inf, 0.36117495892700674, 0.2988526540036234, 0.2963723356778296, 0.2952281026800779] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [252, 2, 0]]
** centroid: 1, normalized-entropy: 0.06634397526831168, [(1, 252), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [151, 56, 0]]
** centroid: 2, normalized-entropy: 0.8422261300920172, [(1, 151), (2, 56)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [8, 179, 19]]
** centroid: 3, normalized-entropy: 0.42604744990129123, [(1, 8), (2, 179), (3, 19)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.347231393975989] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.347231393975989, 0.2937630988556942] ***
*** starting iteration: 2; err: [Inf, 0.347231393975989, 0.2937630988556942] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.347231393975989, 0.2937630988556942, 0.2900098793465516] ***
*** starting iteration: 3; err: [Inf, 0.347231393975989, 0.2937630988556942, 0.2900098793465516] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.347231393975989, 0.2937630988556942, 0.2900098793465516, 0.28910506386281937] ***
*** finished computation of 3 references, err: [Inf, 0.347231393975989, 0.2937630988556942, 0.2900098793465516, 0.28910506386281937] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [101, 143, 19]]
** centroid: 1, normalized-entropy: 0.8088953906959945, [(1, 101), (2, 143), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [117, 92, 0]]
** centroid: 2, normalized-entropy: 0.9896540021837369, [(1, 117), (2, 92)]
*** center 3: selecting labels [1] (freq >= 1) [from [195, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 18)
[0.9350248452044859, 0.9299808790826756, 0.9239868611126095, 0.9230158302014589, 0.9230068391745038, 0.9220088351824879, 0.9160058261854669, 0.9139858421295547, 0.8990187792583003, 0.873981766197335, 0.8690067312821804, 0.8670167173161185, 0.8469697242152332, 0.8390486294677911, 0.8380326434218649, 0.8339806872741006, 0.7940035844227461, 0.7761474048899198]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9350248452044859
finished with 19
iteration 9 finished
*** starting iteration: 1; err: [Inf, 0.2984274295312506] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2984274295312506, 0.23374355548304748] ***
*** starting iteration: 2; err: [Inf, 0.2984274295312506, 0.23374355548304748] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2984274295312506, 0.23374355548304748, 0.2280232870703781] ***
*** starting iteration: 3; err: [Inf, 0.2984274295312506, 0.23374355548304748, 0.2280232870703781] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2984274295312506, 0.23374355548304748, 0.2280232870703781, 0.2268778448462956] ***
*** starting iteration: 4; err: [Inf, 0.2984274295312506, 0.23374355548304748, 0.2280232870703781, 0.2268778448462956] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2984274295312506, 0.23374355548304748, 0.2280232870703781, 0.2268778448462956, 0.22665537397276508] ***
*** finished computation of 3 references, err: [Inf, 0.2984274295312506, 0.23374355548304748, 0.2280232870703781, 0.2268778448462956, 0.22665537397276508] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [96, 137, 16]]
** centroid: 1, normalized-entropy: 0.7942460106156664, [(1, 96), (2, 137), (3, 16)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [127, 91, 2]]
** centroid: 2, normalized-entropy: 0.6599722230094954, [(1, 127), (2, 91), (3, 2)]
*** center 3: selecting labels [1] (freq >= 2) [from [197, 0, 0]]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3861002568155527] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3861002568155527, 0.22823261631222658] ***
*** starting iteration: 2; err: [Inf, 0.3861002568155527, 0.22823261631222658] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3861002568155527, 0.22823261631222658, 0.2278348193887895] ***
*** finished computation of 3 references, err: [Inf, 0.3861002568155527, 0.22823261631222658, 0.2278348193887895] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [250, 2, 0]]
** centroid: 1, normalized-entropy: 0.06677964109705235, [(1, 250), (2, 2)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [9, 192, 19]]
** centroid: 2, normalized-entropy: 0.4197013235958887, [(1, 9), (2, 192), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [152, 43, 0]]
** centroid: 3, normalized-entropy: 0.7611027932592763, [(1, 152), (2, 43)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3647850205510229] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3647850205510229, 0.23935413498548733] ***
*** starting iteration: 2; err: [Inf, 0.3647850205510229, 0.23935413498548733] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3647850205510229, 0.23935413498548733, 0.2383423954090648] ***
*** starting iteration: 3; err: [Inf, 0.3647850205510229, 0.23935413498548733, 0.2383423954090648] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3647850205510229, 0.23935413498548733, 0.2383423954090648, 0.23814204462553965] ***
*** finished computation of 3 references, err: [Inf, 0.3647850205510229, 0.23935413498548733, 0.2383423954090648, 0.23814204462553965] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [226, 24, 0]]
** centroid: 1, normalized-entropy: 0.45618610256952635, [(1, 226), (2, 24)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [187, 51, 0]]
** centroid: 2, normalized-entropy: 0.7495952572594798, [(1, 187), (2, 51)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 160, 19]]
** centroid: 3, normalized-entropy: 0.4881782468876859, [(2, 160), (3, 19)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.23437471190479117] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23437471190479117, 0.18915923792868852] ***
*** starting iteration: 2; err: [Inf, 0.23437471190479117, 0.18915923792868852] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23437471190479117, 0.18915923792868852, 0.18601249189674854] ***
*** starting iteration: 3; err: [Inf, 0.23437471190479117, 0.18915923792868852, 0.18601249189674854] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23437471190479117, 0.18915923792868852, 0.18601249189674854, 0.18512190422043204] ***
*** finished computation of 7 references, err: [Inf, 0.23437471190479117, 0.18915923792868852, 0.18601249189674854, 0.18512190422043204] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [17, 115, 0]]
** centroid: 1, normalized-entropy: 0.5541045423898253, [(1, 17), (2, 115)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [129, 40, 0]]
** centroid: 2, normalized-entropy: 0.7894863016958277, [(1, 129), (2, 40)]
*** center 3: selecting labels [1] (freq >= 2) [from [140, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [84, 74, 0]]
** centroid: 4, normalized-entropy: 0.9971085167216716, [(1, 84), (2, 74)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 121, 28]]
** centroid: 5, normalized-entropy: 0.6970987920874041, [(2, 121), (3, 28)]
*** center 6: selecting labels [1] (freq >= 2) [from [101, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [151, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21749382381886243] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21749382381886243, 0.1917537296153605] ***
*** starting iteration: 2; err: [Inf, 0.21749382381886243, 0.1917537296153605] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21749382381886243, 0.1917537296153605, 0.1905724552422762] ***
*** starting iteration: 3; err: [Inf, 0.21749382381886243, 0.1917537296153605, 0.1905724552422762] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21749382381886243, 0.1917537296153605, 0.1905724552422762, 0.19008451566193252] ***
*** finished computation of 7 references, err: [Inf, 0.21749382381886243, 0.1917537296153605, 0.1905724552422762, 0.19008451566193252] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [64, 10, 0]]
** centroid: 1, normalized-entropy: 0.5713549744279549, [(1, 64), (2, 10)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [52, 28, 0]]
** centroid: 2, normalized-entropy: 0.9340680553754911, [(1, 52), (2, 28)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 65, 15]]
** centroid: 3, normalized-entropy: 0.6962122601251459, [(2, 65), (3, 15)]
*** center 4: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [45, 44, 0]]
** centroid: 5, normalized-entropy: 0.9999089303498087, [(1, 45), (2, 44)]
*** center 6: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [26, 38, 0]]
** centroid: 7, normalized-entropy: 0.9744894033980525, [(1, 26), (2, 38)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2549752944521606] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2549752944521606, 0.1939624020960182] ***
*** starting iteration: 2; err: [Inf, 0.2549752944521606, 0.1939624020960182] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2549752944521606, 0.1939624020960182, 0.18803618167620154] ***
*** starting iteration: 3; err: [Inf, 0.2549752944521606, 0.1939624020960182, 0.18803618167620154] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2549752944521606, 0.1939624020960182, 0.18803618167620154, 0.1866474062211346] ***
*** finished computation of 7 references, err: [Inf, 0.2549752944521606, 0.1939624020960182, 0.18803618167620154, 0.1866474062211346] ***
*** center 1: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 40, 13]]
** centroid: 2, normalized-entropy: 0.8037159237834126, [(2, 40), (3, 13)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [76, 3, 0]]
** centroid: 3, normalized-entropy: 0.23292785546981223, [(1, 76), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [65, 8, 0]]
** centroid: 4, normalized-entropy: 0.4986751363204345, [(1, 65), (2, 8)]
*** center 5: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [10, 58, 0]]
** centroid: 6, normalized-entropy: 0.6024308020404452, [(1, 10), (2, 58)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 63, 0]]
** centroid: 7, normalized-entropy: 0.2667649878030262, [(1, 3), (2, 63)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22834089204855262] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22834089204855262, 0.1916893259547651] ***
*** starting iteration: 2; err: [Inf, 0.22834089204855262, 0.1916893259547651] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22834089204855262, 0.1916893259547651, 0.18530396400019528] ***
*** starting iteration: 3; err: [Inf, 0.22834089204855262, 0.1916893259547651, 0.18530396400019528] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22834089204855262, 0.1916893259547651, 0.18530396400019528, 0.18381590657308697] ***
*** finished computation of 7 references, err: [Inf, 0.22834089204855262, 0.1916893259547651, 0.18530396400019528, 0.18381590657308697] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 53, 13]]
** centroid: 1, normalized-entropy: 0.7158259310602146, [(2, 53), (3, 13)]
*** center 2: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [64, 10, 0]]
** centroid: 3, normalized-entropy: 0.5713549744279549, [(1, 64), (2, 10)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [66, 32, 0]]
** centroid: 4, normalized-entropy: 0.9113423759758414, [(1, 66), (2, 32)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [42, 32, 0]]
** centroid: 5, normalized-entropy: 0.9867867202680318, [(1, 42), (2, 32)]
*** center 6: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 54, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22959259067103266] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22959259067103266, 0.1855767129762098] ***
*** starting iteration: 2; err: [Inf, 0.22959259067103266, 0.1855767129762098] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22959259067103266, 0.1855767129762098, 0.18102364398352802] ***
*** starting iteration: 3; err: [Inf, 0.22959259067103266, 0.1855767129762098, 0.18102364398352802] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22959259067103266, 0.1855767129762098, 0.18102364398352802, 0.18047329198755324] ***
*** finished computation of 7 references, err: [Inf, 0.22959259067103266, 0.1855767129762098, 0.18102364398352802, 0.18047329198755324] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [67, 19, 0]]
** centroid: 1, normalized-entropy: 0.7618624463753669, [(1, 67), (2, 19)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [57, 13, 0]]
** centroid: 2, normalized-entropy: 0.6924194863274741, [(1, 57), (2, 13)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 51, 12]]
** centroid: 3, normalized-entropy: 0.7024665512903904, [(2, 51), (3, 12)]
*** center 4: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [48, 27, 0]]
** centroid: 5, normalized-entropy: 0.9426831892554921, [(1, 48), (2, 27)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [67, 10, 0]]
** centroid: 6, normalized-entropy: 0.557081908103416, [(1, 67), (2, 10)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 53, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21587538248673083] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21587538248673083, 0.19166270305588842] ***
*** starting iteration: 2; err: [Inf, 0.21587538248673083, 0.19166270305588842] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21587538248673083, 0.19166270305588842, 0.18958753154426813] ***
*** starting iteration: 3; err: [Inf, 0.21587538248673083, 0.19166270305588842, 0.18958753154426813] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21587538248673083, 0.19166270305588842, 0.18958753154426813, 0.1891242681443691] ***
*** finished computation of 7 references, err: [Inf, 0.21587538248673083, 0.19166270305588842, 0.18958753154426813, 0.1891242681443691] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [96, 9, 0]]
** centroid: 1, normalized-entropy: 0.4220005168831531, [(1, 96), (2, 9)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [52, 12, 0]]
** centroid: 2, normalized-entropy: 0.6962122601251459, [(1, 52), (2, 12)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 36, 12]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 36), (3, 12)]
*** center 4: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [15, 40, 0]]
** centroid: 5, normalized-entropy: 0.8453509366224364, [(1, 15), (2, 40)]
*** center 6: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 79, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23017718206718565] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23017718206718565, 0.18962133039534093] ***
*** starting iteration: 2; err: [Inf, 0.23017718206718565, 0.18962133039534093] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23017718206718565, 0.18962133039534093, 0.18559030308388175] ***
*** starting iteration: 3; err: [Inf, 0.23017718206718565, 0.18962133039534093, 0.18559030308388175] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23017718206718565, 0.18962133039534093, 0.18559030308388175, 0.18520735602080823] ***
*** finished computation of 7 references, err: [Inf, 0.23017718206718565, 0.18962133039534093, 0.18559030308388175, 0.18520735602080823] ***
*** center 1: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 40, 13]]
** centroid: 2, normalized-entropy: 0.8037159237834126, [(2, 40), (3, 13)]
*** center 3: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [64, 23, 0]]
** centroid: 4, normalized-entropy: 0.8332661971210122, [(1, 64), (2, 23)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [22, 61, 0]]
** centroid: 5, normalized-entropy: 0.8342867421739538, [(1, 22), (2, 61)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [11, 56, 0]]
** centroid: 6, normalized-entropy: 0.6442142137378306, [(1, 11), (2, 56)]
*** center 7: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23983099051937462] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23983099051937462, 0.18953951351344586] ***
*** starting iteration: 2; err: [Inf, 0.23983099051937462, 0.18953951351344586] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23983099051937462, 0.18953951351344586, 0.18683175405859948] ***
*** starting iteration: 3; err: [Inf, 0.23983099051937462, 0.18953951351344586, 0.18683175405859948] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23983099051937462, 0.18953951351344586, 0.18683175405859948, 0.1867740717176348] ***
*** finished computation of 7 references, err: [Inf, 0.23983099051937462, 0.18953951351344586, 0.18683175405859948, 0.1867740717176348] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 50, 12]]
** centroid: 1, normalized-entropy: 0.708835673332196, [(2, 50), (3, 12)]
*** center 2: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [45, 24, 0]]
** centroid: 3, normalized-entropy: 0.9321115676166747, [(1, 45), (2, 24)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [87, 15, 0]]
** centroid: 4, normalized-entropy: 0.6024308020404452, [(1, 87), (2, 15)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [46, 33, 0]]
** centroid: 5, normalized-entropy: 0.980377508715691, [(1, 46), (2, 33)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 52, 3]]
** centroid: 6, normalized-entropy: 0.30540057087920036, [(2, 52), (3, 3)]
*** center 7: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23917303824052213] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23917303824052213, 0.18435688833147287] ***
*** starting iteration: 2; err: [Inf, 0.23917303824052213, 0.18435688833147287] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23917303824052213, 0.18435688833147287, 0.1815603128504008] ***
*** starting iteration: 3; err: [Inf, 0.23917303824052213, 0.18435688833147287, 0.1815603128504008] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23917303824052213, 0.18435688833147287, 0.1815603128504008, 0.18101153134554623] ***
*** finished computation of 7 references, err: [Inf, 0.23917303824052213, 0.18435688833147287, 0.1815603128504008, 0.18101153134554623] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [17, 56, 0]]
** centroid: 1, normalized-entropy: 0.7829924501610913, [(1, 17), (2, 56)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [63, 16, 0]]
** centroid: 2, normalized-entropy: 0.7269625813353975, [(1, 63), (2, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 68, 16]]
** centroid: 4, normalized-entropy: 0.7024665512903904, [(2, 68), (3, 16)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [41, 34, 0]]
** centroid: 5, normalized-entropy: 0.9937071066045081, [(1, 41), (2, 34)]
*** center 6: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23061710150539874] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23061710150539874, 0.1918601459832862] ***
*** starting iteration: 2; err: [Inf, 0.23061710150539874, 0.1918601459832862] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23061710150539874, 0.1918601459832862, 0.18892726330645382] ***
*** starting iteration: 3; err: [Inf, 0.23061710150539874, 0.1918601459832862, 0.18892726330645382] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23061710150539874, 0.1918601459832862, 0.18892726330645382, 0.18704397550970317] ***
*** finished computation of 7 references, err: [Inf, 0.23061710150539874, 0.1918601459832862, 0.18892726330645382, 0.18704397550970317] ***
*** center 1: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 36, 13]]
** centroid: 2, normalized-entropy: 0.834648285181383, [(2, 36), (3, 13)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [78, 6, 0]]
** centroid: 3, normalized-entropy: 0.3712323266408756, [(1, 78), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [44, 41, 0]]
** centroid: 4, normalized-entropy: 0.999101248968496, [(1, 44), (2, 41)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [37, 24, 0]]
** centroid: 5, normalized-entropy: 0.9669852958320848, [(1, 37), (2, 24)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [8, 63, 0]]
** centroid: 6, normalized-entropy: 0.5079353563991225, [(1, 8), (2, 63)]
*** center 7: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22842575786821545] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22842575786821545, 0.18725213651172817] ***
*** starting iteration: 2; err: [Inf, 0.22842575786821545, 0.18725213651172817] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22842575786821545, 0.18725213651172817, 0.18443668023869395] ***
*** starting iteration: 3; err: [Inf, 0.22842575786821545, 0.18725213651172817, 0.18443668023869395] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22842575786821545, 0.18725213651172817, 0.18443668023869395, 0.18366513953916727] ***
*** finished computation of 7 references, err: [Inf, 0.22842575786821545, 0.18725213651172817, 0.18443668023869395, 0.18366513953916727] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [76, 2, 0]]
** centroid: 1, normalized-entropy: 0.17203694935311387, [(1, 76), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [80, 12, 0]]
** centroid: 2, normalized-entropy: 0.5586293734521991, [(1, 80), (2, 12)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 40, 13]]
** centroid: 3, normalized-entropy: 0.8037159237834126, [(2, 40), (3, 13)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [45, 29, 0]]
** centroid: 4, normalized-entropy: 0.966009606256856, [(1, 45), (2, 29)]
*** center 5: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 39, 2]]
** centroid: 6, normalized-entropy: 0.2811937964320427, [(2, 39), (3, 2)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [45, 45, 0]]
** centroid: 7, normalized-entropy: 1.0, [(1, 45), (2, 45)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21955522299185395] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21955522299185395, 0.18556154598947613] ***
*** starting iteration: 2; err: [Inf, 0.21955522299185395, 0.18556154598947613] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21955522299185395, 0.18556154598947613, 0.1829344329237938] ***
*** starting iteration: 3; err: [Inf, 0.21955522299185395, 0.18556154598947613, 0.1829344329237938] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21955522299185395, 0.18556154598947613, 0.1829344329237938, 0.18244500748813153] ***
*** finished computation of 7 references, err: [Inf, 0.21955522299185395, 0.18556154598947613, 0.1829344329237938, 0.18244500748813153] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [82, 2, 0]]
** centroid: 1, normalized-entropy: 0.1623261801753929, [(1, 82), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [70, 16, 0]]
** centroid: 2, normalized-entropy: 0.6931274153282881, [(1, 70), (2, 16)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 45, 12]]
** centroid: 3, normalized-entropy: 0.7424875695421234, [(2, 45), (3, 12)]
*** center 4: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [19, 55, 0]]
** centroid: 5, normalized-entropy: 0.8218127305034848, [(1, 19), (2, 55)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [25, 45, 0]]
** centroid: 6, normalized-entropy: 0.940285958670631, [(1, 25), (2, 45)]
*** center 7: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22546611444652082] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22546611444652082, 0.19188836058415473] ***
*** starting iteration: 2; err: [Inf, 0.22546611444652082, 0.19188836058415473] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22546611444652082, 0.19188836058415473, 0.18801334689557553] ***
*** starting iteration: 3; err: [Inf, 0.22546611444652082, 0.19188836058415473, 0.18801334689557553] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22546611444652082, 0.19188836058415473, 0.18801334689557553, 0.18716928900592028] ***
*** finished computation of 7 references, err: [Inf, 0.22546611444652082, 0.19188836058415473, 0.18801334689557553, 0.18716928900592028] ***
*** center 1: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 47, 16]]
** centroid: 2, normalized-entropy: 0.8175072881213616, [(2, 47), (3, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [47, 38, 0]]
** centroid: 4, normalized-entropy: 0.9918977415529348, [(1, 47), (2, 38)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [32, 49, 0]]
** centroid: 5, normalized-entropy: 0.9679884922470298, [(1, 32), (2, 49)]
*** center 6: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [12, 35, 0]]
** centroid: 7, normalized-entropy: 0.8196004346196011, [(1, 12), (2, 35)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22793930920539424] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22793930920539424, 0.1886301379390061] ***
*** starting iteration: 2; err: [Inf, 0.22793930920539424, 0.1886301379390061] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22793930920539424, 0.1886301379390061, 0.18359692899510263] ***
*** starting iteration: 3; err: [Inf, 0.22793930920539424, 0.1886301379390061, 0.18359692899510263] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22793930920539424, 0.1886301379390061, 0.18359692899510263, 0.18219223502464593] ***
*** finished computation of 7 references, err: [Inf, 0.22793930920539424, 0.1886301379390061, 0.18359692899510263, 0.18219223502464593] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [56, 30, 0]]
** centroid: 1, normalized-entropy: 0.9330252953592912, [(1, 56), (2, 30)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [52, 25, 0]]
** centroid: 2, normalized-entropy: 0.9093934226727598, [(1, 52), (2, 25)]
*** center 3: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 35, 12]]
** centroid: 4, normalized-entropy: 0.8196004346196011, [(2, 35), (3, 12)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [78, 4, 0]]
** centroid: 5, normalized-entropy: 0.2811937964320427, [(1, 78), (2, 4)]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 69, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22043391315545888] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22043391315545888, 0.19518108677864074] ***
*** starting iteration: 2; err: [Inf, 0.22043391315545888, 0.19518108677864074] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22043391315545888, 0.19518108677864074, 0.19030767177417873] ***
*** starting iteration: 3; err: [Inf, 0.22043391315545888, 0.19518108677864074, 0.19030767177417873] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22043391315545888, 0.19518108677864074, 0.19030767177417873, 0.1883418688485399] ***
*** finished computation of 7 references, err: [Inf, 0.22043391315545888, 0.19518108677864074, 0.19030767177417873, 0.1883418688485399] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [68, 32, 0]]
** centroid: 1, normalized-entropy: 0.9043814577244941, [(1, 68), (2, 32)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [48, 20, 0]]
** centroid: 2, normalized-entropy: 0.8739810481273581, [(1, 48), (2, 20)]
*** center 3: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 52, 16]]
** centroid: 4, normalized-entropy: 0.787126586201269, [(2, 52), (3, 16)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [7, 69, 0]]
** centroid: 5, normalized-entropy: 0.4434581453896789, [(1, 7), (2, 69)]
*** center 6: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [61, 1, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22776892252545805] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22776892252545805, 0.18658103974815457] ***
*** starting iteration: 2; err: [Inf, 0.22776892252545805, 0.18658103974815457] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22776892252545805, 0.18658103974815457, 0.18281266106292604] ***
*** starting iteration: 3; err: [Inf, 0.22776892252545805, 0.18658103974815457, 0.18281266106292604] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22776892252545805, 0.18658103974815457, 0.18281266106292604, 0.1814813493527472] ***
*** finished computation of 7 references, err: [Inf, 0.22776892252545805, 0.18658103974815457, 0.18281266106292604, 0.1814813493527472] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [79, 10, 0]]
** centroid: 1, normalized-entropy: 0.5069923067544342, [(1, 79), (2, 10)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [64, 12, 0]]
** centroid: 2, normalized-entropy: 0.6292492238560344, [(1, 64), (2, 12)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 56, 14]]
** centroid: 3, normalized-entropy: 0.7219280948873623, [(2, 56), (3, 14)]
*** center 4: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [48, 25, 0]]
** centroid: 5, normalized-entropy: 0.9271587399898307, [(1, 48), (2, 25)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [59, 3, 0]]
** centroid: 6, normalized-entropy: 0.2795055456366802, [(1, 59), (2, 3)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 62, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2274833037722856] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2274833037722856, 0.19000024090521037] ***
*** starting iteration: 2; err: [Inf, 0.2274833037722856, 0.19000024090521037] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2274833037722856, 0.19000024090521037, 0.18704759088810533] ***
*** starting iteration: 3; err: [Inf, 0.2274833037722856, 0.19000024090521037, 0.18704759088810533] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2274833037722856, 0.19000024090521037, 0.18704759088810533, 0.18705896679498255] ***
*** finished computation of 7 references, err: [Inf, 0.2274833037722856, 0.19000024090521037, 0.18704759088810533, 0.18705896679498255] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [57, 22, 0]]
** centroid: 1, normalized-entropy: 0.8533728188427888, [(1, 57), (2, 22)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [32, 21, 0]]
** centroid: 2, normalized-entropy: 0.9687003436508602, [(1, 32), (2, 21)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 58, 15]]
** centroid: 3, normalized-entropy: 0.7327525499549903, [(2, 58), (3, 15)]
*** center 4: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [95, 2, 0]]
** centroid: 5, normalized-entropy: 0.14489961753310668, [(1, 95), (2, 2)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [60, 22, 0]]
** centroid: 6, normalized-entropy: 0.8390040613676978, [(1, 60), (2, 22)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 52, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23254042549803852] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23254042549803852, 0.18738777955807745] ***
*** starting iteration: 2; err: [Inf, 0.23254042549803852, 0.18738777955807745] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23254042549803852, 0.18738777955807745, 0.18397694976441561] ***
*** starting iteration: 3; err: [Inf, 0.23254042549803852, 0.18738777955807745, 0.18397694976441561] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23254042549803852, 0.18738777955807745, 0.18397694976441561, 0.18376468151807784] ***
*** finished computation of 7 references, err: [Inf, 0.23254042549803852, 0.18738777955807745, 0.18397694976441561, 0.18376468151807784] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [3, 75, 0]]
** centroid: 1, normalized-entropy: 0.23519338181924157, [(1, 3), (2, 75)]
*** center 2: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [41, 49, 0]]
** centroid: 3, normalized-entropy: 0.9942929346520455, [(1, 41), (2, 49)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [62, 12, 0]]
** centroid: 4, normalized-entropy: 0.6394571324851642, [(1, 62), (2, 12)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 30, 18]]
** centroid: 5, normalized-entropy: 0.954434002924965, [(2, 30), (3, 18)]
*** center 6: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [81, 1, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22395609090849758] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22395609090849758, 0.18954486054740846] ***
*** starting iteration: 2; err: [Inf, 0.22395609090849758, 0.18954486054740846] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22395609090849758, 0.18954486054740846, 0.18889502600207925] ***
*** finished computation of 7 references, err: [Inf, 0.22395609090849758, 0.18954486054740846, 0.18889502600207925] ***
*** center 1: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 45, 12]]
** centroid: 2, normalized-entropy: 0.7424875695421234, [(2, 45), (3, 12)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [39, 3, 0]]
** centroid: 3, normalized-entropy: 0.3712323266408756, [(1, 39), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [79, 8, 0]]
** centroid: 4, normalized-entropy: 0.4429586785384856, [(1, 79), (2, 8)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [26, 65, 0]]
** centroid: 5, normalized-entropy: 0.8631205685666311, [(1, 26), (2, 65)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [12, 46, 0]]
** centroid: 6, normalized-entropy: 0.7355085815538399, [(1, 12), (2, 46)]
*** center 7: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23203794625494628] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23203794625494628, 0.1868432755060494] ***
*** starting iteration: 2; err: [Inf, 0.23203794625494628, 0.1868432755060494] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23203794625494628, 0.1868432755060494, 0.18496925025060773] ***
*** starting iteration: 3; err: [Inf, 0.23203794625494628, 0.1868432755060494, 0.18496925025060773] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23203794625494628, 0.1868432755060494, 0.18496925025060773, 0.18482777011021972] ***
*** finished computation of 7 references, err: [Inf, 0.23203794625494628, 0.1868432755060494, 0.18496925025060773, 0.18482777011021972] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [17, 50, 0]]
** centroid: 1, normalized-entropy: 0.8171387756817725, [(1, 17), (2, 50)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [78, 12, 0]]
** centroid: 2, normalized-entropy: 0.5665095065529052, [(1, 78), (2, 12)]
*** center 3: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 75, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [64, 8, 0]]
** centroid: 5, normalized-entropy: 0.5032583347756457, [(1, 64), (2, 8)]
*** center 6: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 34, 15]]
** centroid: 7, normalized-entropy: 0.8886466698980794, [(2, 34), (3, 15)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21700084456056357] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21700084456056357, 0.18432819051668048] ***
*** starting iteration: 2; err: [Inf, 0.21700084456056357, 0.18432819051668048] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21700084456056357, 0.18432819051668048, 0.1831771820904687] ***
*** starting iteration: 3; err: [Inf, 0.21700084456056357, 0.18432819051668048, 0.1831771820904687] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21700084456056357, 0.18432819051668048, 0.1831771820904687, 0.18320286417286843] ***
*** finished computation of 7 references, err: [Inf, 0.21700084456056357, 0.18432819051668048, 0.1831771820904687, 0.18320286417286843] ***
*** center 1: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [78, 9, 0]]
** centroid: 2, normalized-entropy: 0.47983202361612853, [(1, 78), (2, 9)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 34, 20]]
** centroid: 3, normalized-entropy: 0.9509560484549724, [(2, 34), (3, 20)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [66, 18, 0]]
** centroid: 4, normalized-entropy: 0.7495952572594798, [(1, 66), (2, 18)]
*** center 5: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 71, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [18, 41, 0]]
** centroid: 7, normalized-entropy: 0.8874179270685693, [(1, 18), (2, 41)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2248691502921283] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2248691502921283, 0.19317130307294428] ***
*** starting iteration: 2; err: [Inf, 0.2248691502921283, 0.19317130307294428] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2248691502921283, 0.19317130307294428, 0.19045306320302188] ***
*** starting iteration: 3; err: [Inf, 0.2248691502921283, 0.19317130307294428, 0.19045306320302188] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2248691502921283, 0.19317130307294428, 0.19045306320302188, 0.18933841138379648] ***
*** finished computation of 7 references, err: [Inf, 0.2248691502921283, 0.19317130307294428, 0.19045306320302188, 0.18933841138379648] ***
*** center 1: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 50, 14]]
** centroid: 2, normalized-entropy: 0.7578784625383954, [(2, 50), (3, 14)]
*** center 3: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [42, 25, 0]]
** centroid: 4, normalized-entropy: 0.9530483471581301, [(1, 42), (2, 25)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [13, 47, 0]]
** centroid: 5, normalized-entropy: 0.7540340561971327, [(1, 13), (2, 47)]
*** center 6: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [28, 36, 0]]
** centroid: 7, normalized-entropy: 0.9886994082884974, [(1, 28), (2, 36)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2406772526036948] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2406772526036948, 0.18579934524046257] ***
*** starting iteration: 2; err: [Inf, 0.2406772526036948, 0.18579934524046257] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2406772526036948, 0.18579934524046257, 0.18280760841816665] ***
*** starting iteration: 3; err: [Inf, 0.2406772526036948, 0.18579934524046257, 0.18280760841816665] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2406772526036948, 0.18579934524046257, 0.18280760841816665, 0.18289390203356742] ***
*** finished computation of 7 references, err: [Inf, 0.2406772526036948, 0.18579934524046257, 0.18280760841816665, 0.18289390203356742] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [43, 44, 0]]
** centroid: 1, normalized-entropy: 0.9999046950184836, [(1, 43), (2, 44)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [60, 15, 0]]
** centroid: 2, normalized-entropy: 0.7219280948873623, [(1, 60), (2, 15)]
*** center 3: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [14, 59, 0]]
** centroid: 4, normalized-entropy: 0.7051819722888517, [(1, 14), (2, 59)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 55, 12]]
** centroid: 5, normalized-entropy: 0.678114052360606, [(2, 55), (3, 12)]
*** center 6: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23601510515995325] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23601510515995325, 0.18583604035526513] ***
*** starting iteration: 2; err: [Inf, 0.23601510515995325, 0.18583604035526513] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23601510515995325, 0.18583604035526513, 0.18445139623992146] ***
*** starting iteration: 3; err: [Inf, 0.23601510515995325, 0.18583604035526513, 0.18445139623992146] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23601510515995325, 0.18583604035526513, 0.18445139623992146, 0.1838593905400485] ***
*** finished computation of 7 references, err: [Inf, 0.23601510515995325, 0.18583604035526513, 0.18445139623992146, 0.1838593905400485] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 54, 1]]
*** center 2: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [36, 30, 0]]
** centroid: 3, normalized-entropy: 0.9940302114769566, [(1, 36), (2, 30)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [76, 9, 0]]
** centroid: 4, normalized-entropy: 0.48736957102366285, [(1, 76), (2, 9)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [70, 21, 0]]
** centroid: 5, normalized-entropy: 0.7793498372920851, [(1, 70), (2, 21)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 50, 13]]
** centroid: 6, normalized-entropy: 0.7344461802527668, [(2, 50), (3, 13)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [66, 2, 0]]
** centroid: 7, normalized-entropy: 0.1914332548141934, [(1, 66), (2, 2)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24166801203787328] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24166801203787328, 0.18557837092503907] ***
*** starting iteration: 2; err: [Inf, 0.24166801203787328, 0.18557837092503907] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24166801203787328, 0.18557837092503907, 0.18270273230411113] ***
*** starting iteration: 3; err: [Inf, 0.24166801203787328, 0.18557837092503907, 0.18270273230411113] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24166801203787328, 0.18557837092503907, 0.18270273230411113, 0.18275928163155913] ***
*** finished computation of 7 references, err: [Inf, 0.24166801203787328, 0.18557837092503907, 0.18270273230411113, 0.18275928163155913] ***
*** center 1: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [89, 7, 0]]
** centroid: 2, normalized-entropy: 0.3767150026960246, [(1, 89), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 20, 12]]
** centroid: 3, normalized-entropy: 0.954434002924965, [(2, 20), (3, 12)]
*** center 4: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [64, 14, 0]]
** centroid: 5, normalized-entropy: 0.6789538995185759, [(1, 64), (2, 14)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [6, 68, 0]]
** centroid: 6, normalized-entropy: 0.40597703847557104, [(1, 6), (2, 68)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 62, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23295804026722908] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23295804026722908, 0.19356710228975862] ***
*** starting iteration: 2; err: [Inf, 0.23295804026722908, 0.19356710228975862] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23295804026722908, 0.19356710228975862, 0.19129717933014034] ***
*** starting iteration: 3; err: [Inf, 0.23295804026722908, 0.19356710228975862, 0.19129717933014034] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23295804026722908, 0.19356710228975862, 0.19129717933014034, 0.19001097623817623] ***
*** finished computation of 7 references, err: [Inf, 0.23295804026722908, 0.19356710228975862, 0.19129717933014034, 0.19001097623817623] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [7, 63, 0]]
** centroid: 1, normalized-entropy: 0.46899559358928133, [(1, 7), (2, 63)]
*** center 2: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [70, 2, 0]]
** centroid: 3, normalized-entropy: 0.18312206830137262, [(1, 70), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [58, 21, 0]]
** centroid: 4, normalized-entropy: 0.8354065254460503, [(1, 58), (2, 21)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 45, 20]]
** centroid: 5, normalized-entropy: 0.8904916402194913, [(2, 45), (3, 20)]
*** center 6: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [32, 39, 0]]
** centroid: 7, normalized-entropy: 0.9929768866085175, [(1, 32), (2, 39)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2344382143188268] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2344382143188268, 0.18703282410278915] ***
*** starting iteration: 2; err: [Inf, 0.2344382143188268, 0.18703282410278915] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2344382143188268, 0.18703282410278915, 0.18356480037234724] ***
*** starting iteration: 3; err: [Inf, 0.2344382143188268, 0.18703282410278915, 0.18356480037234724] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2344382143188268, 0.18703282410278915, 0.18356480037234724, 0.18301927964016795] ***
*** finished computation of 7 references, err: [Inf, 0.2344382143188268, 0.18703282410278915, 0.18356480037234724, 0.18301927964016795] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [8, 76, 0]]
** centroid: 1, normalized-entropy: 0.45371633918694493, [(1, 8), (2, 76)]
*** center 2: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [65, 24, 0]]
** centroid: 3, normalized-entropy: 0.8409805336163159, [(1, 65), (2, 24)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [50, 23, 0]]
** centroid: 4, normalized-entropy: 0.8989377852081333, [(1, 50), (2, 23)]
*** center 5: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 47, 12]]
** centroid: 6, normalized-entropy: 0.7286561673702678, [(2, 47), (3, 12)]
*** center 7: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25203351650759576] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25203351650759576, 0.18748260116577148] ***
*** starting iteration: 2; err: [Inf, 0.25203351650759576, 0.18748260116577148] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25203351650759576, 0.18748260116577148, 0.18390198266645894] ***
*** starting iteration: 3; err: [Inf, 0.25203351650759576, 0.18748260116577148, 0.18390198266645894] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25203351650759576, 0.18748260116577148, 0.18390198266645894, 0.18360805991105736] ***
*** finished computation of 7 references, err: [Inf, 0.25203351650759576, 0.18748260116577148, 0.18390198266645894, 0.18360805991105736] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [66, 10, 0]]
** centroid: 1, normalized-entropy: 0.5617526078313283, [(1, 66), (2, 10)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 46, 15]]
** centroid: 2, normalized-entropy: 0.8047175193210769, [(2, 46), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [47, 32, 0]]
** centroid: 3, normalized-entropy: 0.9738354819891416, [(1, 47), (2, 32)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [62, 17, 0]]
** centroid: 4, normalized-entropy: 0.751286576718343, [(1, 62), (2, 17)]
*** center 5: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 72, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21741156056523323] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21741156056523323, 0.1914488604478538] ***
*** starting iteration: 2; err: [Inf, 0.21741156056523323, 0.1914488604478538] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21741156056523323, 0.1914488604478538, 0.1897784308725968] ***
*** starting iteration: 3; err: [Inf, 0.21741156056523323, 0.1914488604478538, 0.1897784308725968] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21741156056523323, 0.1914488604478538, 0.1897784308725968, 0.188956187158823] ***
*** finished computation of 7 references, err: [Inf, 0.21741156056523323, 0.1914488604478538, 0.1897784308725968, 0.188956187158823] ***
*** center 1: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [54, 10, 0]]
** centroid: 2, normalized-entropy: 0.625262405223423, [(1, 54), (2, 10)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 35, 18]]
** centroid: 3, normalized-entropy: 0.9244571409964927, [(2, 35), (3, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [60, 29, 0]]
** centroid: 5, normalized-entropy: 0.9106223680988619, [(1, 60), (2, 29)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 47, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [17, 51, 0]]
** centroid: 7, normalized-entropy: 0.8112781244591328, [(1, 17), (2, 51)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23258424120023846] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23258424120023846, 0.1900019285865128] ***
*** starting iteration: 2; err: [Inf, 0.23258424120023846, 0.1900019285865128] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23258424120023846, 0.1900019285865128, 0.18704283043369652] ***
*** starting iteration: 3; err: [Inf, 0.23258424120023846, 0.1900019285865128, 0.18704283043369652] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23258424120023846, 0.1900019285865128, 0.18704283043369652, 0.18522702329419552] ***
*** finished computation of 7 references, err: [Inf, 0.23258424120023846, 0.1900019285865128, 0.18704283043369652, 0.18522702329419552] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [56, 11, 0]]
** centroid: 1, normalized-entropy: 0.6442142137378306, [(1, 56), (2, 11)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 56, 14]]
** centroid: 2, normalized-entropy: 0.7219280948873623, [(2, 56), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [42, 28, 0]]
** centroid: 3, normalized-entropy: 0.9709505944546688, [(1, 42), (2, 28)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [57, 18, 0]]
** centroid: 4, normalized-entropy: 0.7950402793845225, [(1, 57), (2, 18)]
*** center 5: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [5, 71, 0]]
** centroid: 6, normalized-entropy: 0.35001059292688486, [(1, 5), (2, 71)]
*** center 7: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2304292035959661] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2304292035959661, 0.1901879290752113] ***
*** starting iteration: 2; err: [Inf, 0.2304292035959661, 0.1901879290752113] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2304292035959661, 0.1901879290752113, 0.1857164093218744] ***
*** starting iteration: 3; err: [Inf, 0.2304292035959661, 0.1901879290752113, 0.1857164093218744] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2304292035959661, 0.1901879290752113, 0.1857164093218744, 0.1843254653774202] ***
*** finished computation of 7 references, err: [Inf, 0.2304292035959661, 0.1901879290752113, 0.1857164093218744, 0.1843254653774202] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 62, 13]]
** centroid: 1, normalized-entropy: 0.6652735227649414, [(2, 62), (3, 13)]
*** center 2: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [62, 14, 0]]
** centroid: 3, normalized-entropy: 0.6892019851173655, [(1, 62), (2, 14)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [75, 9, 0]]
** centroid: 4, normalized-entropy: 0.4912373418243334, [(1, 75), (2, 9)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [54, 29, 0]]
** centroid: 5, normalized-entropy: 0.9335289015212996, [(1, 54), (2, 29)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 65, 2]]
** centroid: 6, normalized-entropy: 0.19364280468389852, [(2, 65), (3, 2)]
*** center 7: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
finished with 10 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 350,3 => 28,1 => 622), Dict(2 => 377,3 => 29,1 => 594))
[ Info: ===== scores for single classifier: {"micro_f1":0.922,"precision":0.922,"recall":0.922,"macro_recall":0.9426627012833909,"macro_f1":0.8217621718919297,"accuracy":0.922,"class_f1":{"2":0.8957219251336898,"3":0.6041666666666666,"1":0.9653979238754326},"class_precision":{"2":0.9029649595687331,"3":0.43283582089552236,"1":0.9928825622775801},"class_recall":{"2":0.8885941644562334,"3":1.0,"1":0.9393939393939394}}
[ Info: ===== scores for 1: {"micro_f1":0.969,"precision":0.969,"recall":0.969,"macro_recall":0.9635955785381073,"macro_f1":0.9378908071693846,"accuracy":0.969,"class_f1":{"2":0.9578231292517008,"3":0.8750000000000001,"1":0.980849292256453},"class_precision":{"2":0.9832402234636871,"3":0.8,"1":0.9703459637561779},"class_recall":{"2":0.9336870026525199,"3":0.9655172413793104,"1":0.9915824915824916}}
[ Info: ===== scores for 5: {"micro_f1":0.97,"precision":0.97,"recall":0.97,"macro_recall":0.9664177882568686,"macro_f1":0.9387915098699412,"accuracy":0.97,"class_f1":{"2":0.9598930481283422,"3":0.8750000000000001,"1":0.9814814814814815},"class_precision":{"2":0.967654986522911,"3":0.8,"1":0.9814814814814815},"class_recall":{"2":0.9522546419098143,"3":0.9655172413793104,"1":0.9814814814814815}}
[ Info: ===== scores for 7: {"micro_f1":0.967,"precision":0.967,"recall":0.967,"macro_recall":0.9650572926434995,"macro_f1":0.9324697306051078,"accuracy":0.967,"class_f1":{"2":0.9561752988047808,"3":0.8615384615384615,"1":0.9796954314720812},"class_precision":{"2":0.9574468085106383,"3":0.7777777777777778,"1":0.9846938775510204},"class_recall":{"2":0.9549071618037135,"3":0.9655172413793104,"1":0.9747474747474747}}
[ Info: ===== scores for 9: {"micro_f1":0.963,"precision":0.963,"recall":0.963,"macro_recall":0.963458635872429,"macro_f1":0.9296893799429018,"accuracy":0.963,"class_f1":{"2":0.9513797634691196,"3":0.8615384615384615,"1":0.9761499148211243},"class_precision":{"2":0.9427083333333334,"3":0.7777777777777778,"1":0.9879310344827587},"class_recall":{"2":0.9602122015915119,"3":0.9655172413793104,"1":0.9646464646464646}}
[ Info: ===== scores for 11: {"micro_f1":0.969,"precision":0.969,"recall":0.969,"macro_recall":0.9677946574498298,"macro_f1":0.9340210783492396,"accuracy":0.969,"class_f1":{"2":0.9592641261498029,"3":0.8615384615384615,"1":0.9812606473594548},"class_precision":{"2":0.9505208333333334,"3":0.7777777777777778,"1":0.993103448275862},"class_recall":{"2":0.9681697612732095,"3":0.9655172413793104,"1":0.9696969696969697}}
(score = 0.969, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.969, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.965, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.965, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.969, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.969, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.967, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.967, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.97, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.97, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.965, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.965, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.967, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.967, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.968, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.968, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.97,"k":5,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.97,"precision":0.97,"recall":0.97,"macro_recall":0.9664177882568686,"macro_f1":0.9387915098699412,"accuracy":0.97,"class_f1":{"2":0.9598930481283422,"3":0.8750000000000001,"1":0.9814814814814815},"class_precision":{"2":0.967654986522911,"3":0.8,"1":0.9814814814814815},"class_recall":{"2":0.9522546419098143,"3":0.9655172413793104,"1":0.9814814814814815}}
Test Summary: | Pass  Total
AKNC          |    8      8
[208, 3, 1, 7, 13, 5, 3, 4, 11, 6, 2, 1, 4, 13, 3, 6, 2, 9, 2, 6, 1, 3, 6, 6, 7, 6, 1, 22, 13, 3, 9, 1, 11, 25, 13, 10, 11, 6, 29, 40, 68, 5, 6, 13, 4, 98, 10, 23, 6, 5, 5, 8, 35, 15, 16, 142, 11, 1, 48, 5, 15, 5, 4, 6, 2, 17, 16, 2, 68, 10, 10, 34, 5, 7, 34, 17, 3, 1, 14, 5, 1, 11, 29, 4, 28, 22, 2, 1, 17, 55, 18, 19, 34, 5, 141, 7, 4, 14, 6, 39, 49, 12, 12, 14, 87, 1, 3, 4, 44, 110, 13, 13, 4, 14, 80, 10, 26, 12, 132, 12, 44, 5, 29, 26, 25, 20, 79, 1, 4, 73, 22, 34, 20, 10, 2, 8, 4, 3, 5, 19, 12, 43, 113, 42, 8, 3, 9, 7, 7, 8, 4, 28, 207, 3, 22, 71, 19, 14, 7, 14, 12, 59, 2, 32, 10, 1012, 13, 23, 9, 6, 6, 3, 4, 43, 16, 38, 10, 11, 11, 9, 11, 5, 1, 26, 86, 118, 78, 15, 26, 1, 16, 7, 31, 93, 45, 13, 8, 121, 22, 46, 43, 15, 19, 8, 11, 5, 131, 108, 23, 23, 44, 20, 46, 17, 19, 37, 3, 12, 2, 9, 22, 105, 19, 36, 102, 46, 29, 7, 12, 24, 34, 13, 5, 41, 20, 18, 25, 9, 41, 33, 13, 68, 94, 5, 7, 10, 8, 8, 8, 33, 20, 67, 161, 208, 12, 17, 7, 27, 13, 4, 77, 66, 1, 23, 7, 266, 9, 4, 9, 72, 8, 26, 32, 51, 25, 51, 12, 21, 108, 10, 2, 20, 62, 171, 7, 25, 28, 608, 25, 18, 12, 4, 11, 16, 15, 34, 52, 350, 5, 19]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6829999999999997, speedup = 0.26133086845645337, eval_ratio = 0.093541)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.39476376488095233,"recall":0.39149305555555547,"f1":null,"seconds":0.00018168985843658447,"exhaustive_search_seconds":0.00032855384051799774,"evaluations":509.203125,"distances_sum":1723.991339181259}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5633680555555554,"recall":0.5633680555555554,"f1":null,"seconds":0.000348750501871109,"exhaustive_search_seconds":0.00032855384051799774,"evaluations":699.296875,"distances_sum":1635.0198107226765}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6788194444444442,"recall":0.6788194444444442,"f1":0.6788194444444442,"seconds":0.0005631726235151291,"exhaustive_search_seconds":0.00032855384051799774,"evaluations":836.078125,"distances_sum":1570.2614710017917}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7499999999999994,"recall":0.7499999999999994,"f1":0.7499999999999994,"seconds":0.0006260890513658524,"exhaustive_search_seconds":0.00032855384051799774,"evaluations":999.1953125,"distances_sum":1542.8497253343742}
KCenters.DeloneInvIndex> reached performance {"precision":0.8038194444444438,"recall":0.8038194444444438,"f1":0.8038194444444438,"seconds":0.0006908569484949112,"exhaustive_search_seconds":0.00032855384051799774,"evaluations":1129.7578125,"distances_sum":1526.5348153546167}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8050000000000003, speedup = 0.535069517198494, eval_ratio = 0.116719)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
