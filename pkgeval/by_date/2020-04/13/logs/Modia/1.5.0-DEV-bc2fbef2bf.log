Julia Version 1.5.0-DEV.616
Commit bc2fbef2bf (2020-04-12 16:10 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed CEnum ──────────────────────── v0.2.0
  Installed ProgressMeter ──────────────── v1.2.0
  Installed Unitful ────────────────────── v0.18.0
  Installed Tables ─────────────────────── v1.0.3
  Installed AbstractTrees ──────────────── v0.3.2
  Installed JSON ───────────────────────── v0.21.0
  Installed DataFrames ─────────────────── v0.20.2
  Installed Modia ──────────────────────── v0.3.0
  Installed Parsers ────────────────────── v1.0.1
  Installed ChainRulesCore ─────────────── v0.7.1
  Installed RecipesBase ────────────────── v1.0.0
  Installed Requires ───────────────────── v1.0.1
  Installed ZygoteRules ────────────────── v0.2.0
  Installed LabelledArrays ─────────────── v1.1.0
  Installed StaticArrays ───────────────── v0.12.1
  Installed DataStructures ─────────────── v0.17.12
  Installed OrderedCollections ─────────── v1.1.0
  Installed METIS_jll ──────────────────── v5.1.0+3
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed MuladdMacro ────────────────── v0.2.2
  Installed ConsoleProgressMonitor ─────── v0.1.2
  Installed SortingAlgorithms ──────────── v0.3.1
  Installed Reexport ───────────────────── v0.2.0
  Installed IteratorInterfaceExtensions ── v1.0.0
  Installed Compat ─────────────────────── v3.8.0
  Installed ArrayInterface ─────────────── v2.8.4
  Installed MacroTools ─────────────────── v0.5.5
  Installed PooledArrays ───────────────── v0.5.3
  Installed Sundials_jll ───────────────── v5.2.0+0
  Installed DataAPI ────────────────────── v1.1.0
  Installed RecursiveArrayTools ────────── v2.3.1
  Installed TableTraits ────────────────── v1.0.0
  Installed ProgressLogging ────────────── v0.1.2
  Installed Sundials ───────────────────── v4.1.0
  Installed IterativeSolvers ───────────── v0.8.4
  Installed DataValueInterfaces ────────── v1.0.0
  Installed FunctionWrappers ───────────── v1.1.1
  Installed LeftChildRightSiblingTrees ─── v0.1.2
  Installed TreeViews ──────────────────── v0.3.0
  Installed ConstructionBase ───────────── v1.0.0
  Installed CategoricalArrays ──────────── v0.7.7
  Installed Roots ──────────────────────── v1.0.1
  Installed Missings ───────────────────── v0.4.3
  Installed LoggingExtras ──────────────── v0.4.0
  Installed RecursiveFactorization ─────── v0.1.0
  Installed Parameters ─────────────────── v0.12.0
  Installed SuiteSparse_jll ────────────── v5.4.0+8
  Installed DiffEqBase ─────────────────── v6.28.0
  Installed DocStringExtensions ────────── v0.8.1
  Installed ModiaMath ──────────────────── v0.5.2
  Installed InvertedIndices ────────────── v1.0.0
  Installed OpenBLAS_jll ───────────────── v0.3.9+2
  Installed TerminalLoggers ────────────── v0.1.1
Updating `~/.julia/environments/v1.5/Project.toml`
  [cb905087] + Modia v0.3.0
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [1520ce14] + AbstractTrees v0.3.2
  [4fba245c] + ArrayInterface v2.8.4
  [fa961155] + CEnum v0.2.0
  [324d7699] + CategoricalArrays v0.7.7
  [d360d2e6] + ChainRulesCore v0.7.1
  [34da2185] + Compat v3.8.0
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [88cd18e8] + ConsoleProgressMonitor v0.1.2
  [187b0558] + ConstructionBase v1.0.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.12
  [e2d170a0] + DataValueInterfaces v1.0.0
  [2b5f629d] + DiffEqBase v6.28.0
  [ffbed154] + DocStringExtensions v0.8.1
  [069b7b12] + FunctionWrappers v1.1.1
  [41ab1584] + InvertedIndices v1.0.0
  [42fd0dbc] + IterativeSolvers v0.8.4
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [2ee39098] + LabelledArrays v1.1.0
  [1d6d02ad] + LeftChildRightSiblingTrees v0.1.2
  [e6f89c97] + LoggingExtras v0.4.0
  [d00139f3] + METIS_jll v5.1.0+3
  [1914dd2f] + MacroTools v0.5.5
  [e1d29d7a] + Missings v0.4.3
  [cb905087] + Modia v0.3.0
  [67ccffd1] + ModiaMath v0.5.2
  [46d2c3a1] + MuladdMacro v0.2.2
  [4536629a] + OpenBLAS_jll v0.3.9+2
  [bac558e1] + OrderedCollections v1.1.0
  [d96e819e] + Parameters v0.12.0
  [69de0a69] + Parsers v1.0.1
  [2dfb63ee] + PooledArrays v0.5.3
  [33c8b6b6] + ProgressLogging v0.1.2
  [92933f4c] + ProgressMeter v1.2.0
  [3cdcf5f2] + RecipesBase v1.0.0
  [731186ca] + RecursiveArrayTools v2.3.1
  [f2c3362d] + RecursiveFactorization v0.1.0
  [189a3867] + Reexport v0.2.0
  [ae029012] + Requires v1.0.1
  [f2b01f46] + Roots v1.0.1
  [a2af1166] + SortingAlgorithms v0.3.1
  [90137ffa] + StaticArrays v0.12.1
  [bea87d4a] + SuiteSparse_jll v5.4.0+8
  [c3572dad] + Sundials v4.1.0
  [fb77eaff] + Sundials_jll v5.2.0+0
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.3
  [5d786b92] + TerminalLoggers v0.1.1
  [a2a6695c] + TreeViews v0.3.0
  [1986cc42] + Unitful v0.18.0
  [700de1a5] + ZygoteRules v0.2.0
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [4607b0f0] + SuiteSparse
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing Modia
Status `/tmp/jl_uxprpC/Project.toml`
  [864edb3b] DataStructures v0.17.12
  [682c06a0] JSON v0.21.0
  [cb905087] Modia v0.3.0
  [67ccffd1] ModiaMath v0.5.2
  [90137ffa] StaticArrays v0.12.1
  [1986cc42] Unitful v0.18.0
  [ade2ca70] Dates
  [37e2e46d] LinearAlgebra
  [d6f4376e] Markdown
  [de0858da] Printf
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_uxprpC/Manifest.toml`
  [1520ce14] AbstractTrees v0.3.2
  [4fba245c] ArrayInterface v2.8.4
  [fa961155] CEnum v0.2.0
  [324d7699] CategoricalArrays v0.7.7
  [d360d2e6] ChainRulesCore v0.7.1
  [34da2185] Compat v3.8.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [88cd18e8] ConsoleProgressMonitor v0.1.2
  [187b0558] ConstructionBase v1.0.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.12
  [e2d170a0] DataValueInterfaces v1.0.0
  [2b5f629d] DiffEqBase v6.28.0
  [ffbed154] DocStringExtensions v0.8.1
  [069b7b12] FunctionWrappers v1.1.1
  [41ab1584] InvertedIndices v1.0.0
  [42fd0dbc] IterativeSolvers v0.8.4
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [2ee39098] LabelledArrays v1.1.0
  [1d6d02ad] LeftChildRightSiblingTrees v0.1.2
  [e6f89c97] LoggingExtras v0.4.0
  [d00139f3] METIS_jll v5.1.0+3
  [1914dd2f] MacroTools v0.5.5
  [e1d29d7a] Missings v0.4.3
  [cb905087] Modia v0.3.0
  [67ccffd1] ModiaMath v0.5.2
  [46d2c3a1] MuladdMacro v0.2.2
  [4536629a] OpenBLAS_jll v0.3.9+2
  [bac558e1] OrderedCollections v1.1.0
  [d96e819e] Parameters v0.12.0
  [69de0a69] Parsers v1.0.1
  [2dfb63ee] PooledArrays v0.5.3
  [33c8b6b6] ProgressLogging v0.1.2
  [92933f4c] ProgressMeter v1.2.0
  [3cdcf5f2] RecipesBase v1.0.0
  [731186ca] RecursiveArrayTools v2.3.1
  [f2c3362d] RecursiveFactorization v0.1.0
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v1.0.1
  [f2b01f46] Roots v1.0.1
  [a2af1166] SortingAlgorithms v0.3.1
  [90137ffa] StaticArrays v0.12.1
  [bea87d4a] SuiteSparse_jll v5.4.0+8
  [c3572dad] Sundials v4.1.0
  [fb77eaff] Sundials_jll v5.2.0+0
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.3
  [5d786b92] TerminalLoggers v0.1.1
  [a2a6695c] TreeViews v0.3.0
  [1986cc42] Unitful v0.18.0
  [700de1a5] ZygoteRules v0.2.0
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [4607b0f0] SuiteSparse
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
 

Welcome to Modia - Dynamic Modeling and Simulation with Julia
Version 0.3.0 (2019-04-07)
Type "?Modia" for help.


 
Importing ModiaMath Version 0.5.2 (2019-07-10)
WARNING: Method definition combine_axes(Any, Any) in module Broadcast at broadcast.jl:474 overwritten in module DiffEqBase at /home/pkgeval/.julia/packages/DiffEqBase/T10lH/src/diffeqfastbc.jl:18.
  ** incremental compilation may be fatally broken for this module **

WARNING: Method definition combine_axes(Any, Any) in module Broadcast at broadcast.jl:474 overwritten in module DiffEqBase at /home/pkgeval/.julia/packages/DiffEqBase/T10lH/src/diffeqfastbc.jl:18.
  ** incremental compilation may be fatally broken for this module **

WARNING: Method definition combine_axes(Any, Any) in module Broadcast at broadcast.jl:474 overwritten in module DiffEqBase at /home/pkgeval/.julia/packages/DiffEqBase/T10lH/src/diffeqfastbc.jl:18.
  ** incremental compilation may be fatally broken for this module **

WARNING: Method definition combine_axes(Any, Any) in module Broadcast at broadcast.jl:474 overwritten in module DiffEqBase at /home/pkgeval/.julia/packages/DiffEqBase/T10lH/src/diffeqfastbc.jl:18.
  ** incremental compilation may be fatally broken for this module **

    PyPlot not available (plot commands will be ignored).
    Try to install PyPlot. See hints here:
    https://github.com/ModiaSim/ModiaMath.jl/wiki/Installing-PyPlot-in-a-robust-way.

Test match
assign = [8, 1, 2, 7, 4, 5, 3, 0]

Singular system
assign = [0, 3, 1, 0]
(invAssign, unAssignedVariables) = ([3, 0, 2], [1, 4])
(ass, unAssignedEquations) = ([0, 3, 1, 0], [2])

Test Tarjans strong connect
components = Any[Any[6], Any[7, 5, 4, 3], Any[8, 2, 1]]

Fixed-length pendulum
assign = [5, 4, 1, 2, 0, 0, 3, 0, 0]

Assigned original equations:

Test diagnostics for too many equations
Gbig = Any[[3, 5], [4, 6], [1, 7, 9], [2, 8, 9], [1, 2], [1, 10], [2, 10]]
EGbig = Any[[3, 5, 11], [4, 6, 11], [1, 7, 9, 11], [2, 8, 9, 11], [1, 2, 11], [1, 10, 11], [2, 10, 11], [1, 5, 11], [2, 6, 11], [3, 7, 11], [4, 8, 11]]
componentsBig = Any[Any[5, 10, 3, 4, 11, 2, 9, 7, 6, 8, 1]]

Test diagnostics for too many variables
Gbig = Any[[3, 5], [4, 6], [1, 7, 9], [10, 8, 9], [1, 10]]
EGbig = Any[[3, 5], [4, 6], [1, 7, 9], [10, 8, 9], [1, 10], [1, 5], [2, 6], [3, 7], [4, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]
componentsBig = Any[Any[5, 4, 9, 2, 7, 10, 6, 3, 8, 1]]

Test diagnostics for too few equations
Gbig = Any[[3, 5], [4, 6], [1, 7, 9], [2, 8, 9]]
EGbig = Any[[3, 5], [4, 6], [1, 7, 9], [2, 8, 9], [1, 5], [2, 6], [3, 7], [4, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9]]
componentsBig = Any[Any[6, 2, 8, 4, 9, 7, 3, 5, 1]]

Check consistency of equations by matching extended equation set
EG = Any[[3, 5], [4, 6], [1, 7, 9], [2, 8, 9], [1, 2], [1, 5], [2, 6], [3, 7], [4, 8]]
assign = [5, 7, 1, 9, 6, 2, 8, 4, 3]

Perform index reduction
G = Any[[3, 5], [4, 6], [1, 7, 9], [2, 8, 9], [1, 2], [1, 2, 5, 6], [3, 5, 7, 10], [4, 6, 8, 11], [1, 2, 5, 6, 10, 11]]
assign = [0, 0, 0, 0, 1, 2, 7, 4, 3, 9, 8]
A = [5, 6, 7, 8, 10, 11, 0, 0, 0, 0, 0]
B = [7, 8, 0, 0, 6, 9, 0, 0, 0]
------------------------------------------------------

vActive = Bool[0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1]
assign = [0, 5, 0, 2, 1, 6, 7, 4, 3, 9, 8]
components = Any[Any[1], Any[5], Any[6], Any[2], Any[4, 8, 9, 7, 3]]
------------------------------------------------------


All unknowns:

All equations:

Assigned equations:

Sorted equations:

Build augmented system.
AG = Any[[3, 5], [4, 6], [1, 7, 9], [2, 8, 9], [1, 2], [1, 2, 5, 6], [3, 5, 7, 10], [4, 6, 8, 11], [1, 2, 5, 6, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]]
assignAG = [5, 4, 1, 2, 6, 8, 3, 10, 11, 7, 9]
componentsAG = Any[Any[11, 3, 7, 9, 8, 2, 10, 4, 5, 6, 1]]

Assigned augmented equations:

Sorted augmented equations:

Set initial conditions on x and y. Should fail.
IG1 = Any[[3, 5], [4, 6], [1, 7, 9], [2, 8, 9], [1, 2], [1, 2, 5, 6], [3, 5, 7, 10], [4, 6, 8, 11], [1, 2, 5, 6, 10, 11], [1], [2]]
assignIG1 = [10, 5, 1, 2, 6, 8, 3, 4, 0, 7, 9]
componentsIG1 = Any[Any[10], Any[5], Any[4], Any[3], Any[7, 9, 2, 8, 6, 1], Any[11]]

Set initial conditions on x and w.
IG2 = Any[[3, 5], [4, 6], [1, 7, 9], [2, 8, 9], [1, 2], [1, 2, 5, 6], [3, 5, 7, 10], [4, 6, 8, 11], [1, 2, 5, 6, 10, 11], [1], [3]]
assignIG2 = [10, 5, 11, 2, 1, 6, 3, 8, 4, 7, 9]
componentsIG2 = Any[Any[11], Any[1], Any[10], Any[5], Any[6], Any[2], Any[7, 9, 8, 4, 3]]

Sorted IG2 equations:

Set initial conditions on w and z.
IG3 = Any[[3, 5], [4, 6], [1, 7, 9], [2, 8, 9], [1, 2], [1, 2, 5, 6], [3, 5, 7, 10], [4, 6, 8, 11], [1, 2, 5, 6, 10, 11], [3], [4]]
assignIG3 = [6, 5, 10, 11, 1, 2, 3, 8, 4, 7, 9]
componentsIG3 = Any[Any[10], Any[1], Any[11], Any[2], Any[5, 6], Any[7, 9, 8, 4, 3]]

Sorted IG3 equations:

Fixed-length pendulum

Perform index reduction

Set initial conditions on x and w.
IG = Any[[3, 5], [4, 6], [1, 7, 9], [2, 8, 9], [1, 2], [1, 2, 5, 6], [3, 5, 7, 10], [4, 6, 8, 11], [1, 2, 5, 6, 10, 11], [1], [3]]
assignIG = [10, 5, 11, 2, 1, 6, 3, 8, 4, 7, 9]
componentsIG = Any[Any[11], Any[1], Any[10], Any[5], Any[6], Any[2], Any[7, 9, 8, 4, 3]]

Exothermic Reactor Model
assign = [0, 0, 1, 7, 3, 2, 8, 6]
A = [3, 4, 7, 0, 8, 0, 0, 0]
B = [6, 0, 7, 5, 8, 0, 0, 0]
components = Any[Any[3], Any[1], Any[8], Any[6], Any[7], Any[2], Any[4], Any[5]]


----------------------


----------------------


Big tests, n = 5000

Big test: diagonal
  0.242155 seconds (76.44 k allocations: 51.765 MiB, 4.98% gc time)

Big test: band
  0.206434 seconds (108.39 k allocations: 52.149 MiB, 3.62% gc time)

Big test: full, n=1000
  0.998130 seconds (4.80 M allocations: 105.997 MiB, 1.32% gc time)

Test solve

Solve: x from: y = x
x = y

Solve: x from: y = x + z
x = y - z

Solve: x from: y = x + z + v + w
x = y - (z + v + w)

Solve: z from: y = x + z + v + w
z = (y - x) - (v + w)

Solve: v from: y = x + z + v + w
v = ((y - x) - z) - w

Solve: w from: y = x + z + v + w
w = ((y - x) - z) - v

Solve: x from: y = x - z
x = y + z

Solve: x from: y = (x - z) - w
x = (y + w) + z

Solve: x from: y = -(x, z, v, w)
x = y + (z + v + w)

Solve: v from: y = -(x, z, v, w)
v = ((x - y) - z) - w

Solve: x from: y = z - x
x = z - y

Solve: x from: y = x * z
x = y / z

Solve: x from: y = x * z * z * z
x = y / (z * z * z)

Solve: x from: y = /(x, z, w)
x = y * (z * w)

Solve: z from: y = /(x, z, w)
z = (x / y) / w

Solve: x from: y = x / z
x = y * z

Solve: z from: y = x / z
z = x / y

Solve: x from: y = x \ z
NOT SOLVED
x \ z = y


----------------------


Test differentiate

Equation: x + 5 + z = w
Differentiated: der(x) + der(z) = der(w)

Equation: der(x) + der(z) = der(w)
Differentiated: der(der(x)) + der(der(z)) = der(der(w))

Equation: +x = w
Differentiated: der(x) = der(w)

Equation: 2 + 3 = w
Differentiated: 0.0 = der(w)

Equation: -x = w
Differentiated: -(der(x)) = der(w)

Equation: (x - 5) - z = w
Differentiated: der(x) - der(z) = der(w)

Equation: 5x = w
Differentiated: 5 * der(x) = der(w)

Equation: x * 5 * z = w
Differentiated: der(x) * 5 * z + x * 5 * der(z) = der(w)

Equation: 4 * 5 * 6 = w
Differentiated: 0.0 = der(w)

Equation: y = x / y
Differentiated: der(y) = der(x) / y + (x / y ^ 2) * der(y)

Equation: y = x / 5
Differentiated: der(y) = der(x) / 5

Equation: y = 5 / y
Differentiated: der(y) = (5 / y ^ 2) * der(y)

Equation: y = [1, x]
Differentiated: der(y) = [0.0, der(x)]

Equation: y = [2x 3x; 4x 5x]
Differentiated: der(y) = [2 * der(x) 3 * der(x); 4 * der(x) 5 * der(x)]

Equation: y = [2x 3x; 4x 5x] * [1, x]
Differentiated: der(y) = [2 * der(x) 3 * der(x); 4 * der(x) 5 * der(x)] * [1, x] + [2x 3x; 4x 5x] * [0.0, der(x)]

Equation: y = transpose(B) + B´
Differentiated: der(y) = transpose(der(B)) + der(B´)

Equation: y = x[5, 6]
Differentiated: der(y) = (der(x))[5, 6]

Equation: y = x[5:7]
Differentiated: der(y) = (der(x))[5:7]

Equation: y = sin(x)
Differentiated: der(y) = cos(x) * der(x)

Equation: y = cos(x)
Differentiated: der(y) = -(sin(x)) * der(x)

Equation: y = tan(x)
Differentiated: der(y) = (1 / cos(x) ^ 2) * der(x)

Equation: y = exp(x)
Differentiated: der(y) = exp(x) * der(x)

Equation: y = x ^ y
Differentiated: der(y) = y * x ^ (y - 1) * der(x) + x ^ y * log(x) * der(y)

Equation: y = log(x)
Differentiated: der(y) = (1 / x) * der(x)

Equation: y = asin(x)
Differentiated: der(y) = (1 / sqrt(1 - x ^ 2)) * der(x)

Equation: y = acos(x)
Differentiated: der(y) = (-1 / sqrt(1 - x ^ 2)) * der(x)

Equation: y = atan(x)
Differentiated: der(y) = (1 / (1 + x ^ 2)) * der(x)

Equation: y = f(x, 5, z)
Derivative function f_der_1 not found.
Derivative function f_der_3 not found.
Differentiated: der(y) = f_der_1(x, 5, z) * der(x) + f_der_3(x, 5, z) * der(z)

Equation: y = f(x, 5, g(z))
Derivative function f_der_1 not found.
Derivative function g_der_1 not found.
Derivative function f_der_3 not found.
Differentiated: der(y) = f_der_1(x, 5, g(z)) * der(x) + f_der_3(x, 5, g(z)) * (g_der_1(z) * der(z))

Equation: y = if true
        x
    else
        y
    end
Differentiated: der(y) = if true
        der(x)
    else
        der(y)
    end

Equation: y = time
Differentiated: der(y) = 1.0

Equation: y = a * x
Differentiated: der(y) = a * der(x)


----------------------



... Test two coupled inertias (all unknowns can be solved for)

  Variables of _x vector (length=2):
     _x[1]: J1_phi
     _x[2]: der(J1_phi)      # = der(_x[1])

  Variables of _der_x vector (length=2):
     _der_x[1]: ---      # = _x[2] = der(J1_phi)
     _der_x[2]: der2(J1_phi)

  Sorted equations (length(_r) = 2, nc = 0):
     _r[1]   = _der_x[1] - _x[2]
     J2_phi   = < solved from eq.5 >
     der(J2_phi)   = < solved from eq.7 = der(eq.5) >
     J1_w   = < solved from eq.1 >
     J2_w   = < solved from eq.3 >
     der2(J2_phi)   = < solved from eq.10 = der2(eq.5) >
     der(J1_w)   = < solved from eq.8 = der(eq.1) >
     der(J2_w)   = < solved from eq.9 = der(eq.3) >
     J2_tau   = < solved from eq.4 >
     J1_tau   = < solved from eq.6 >
     _r[2]   = < residue of eq.2 >


... Test two coupled inertias (only a subset of unknowns can be solved for)

  Variables of _x vector (length=2):
     _x[1]: J2_phi
     _x[2]: der(J2_phi)      # = der(_x[1])

  Variables of _der_x vector (length=2):
     _der_x[1]: ---      # = _x[2] = der(J2_phi)
     _der_x[2]: der2(J2_phi)

  Sorted equations (length(_r) = 2, nc = 0):
     _r[1]   = _der_x[1] - _x[2]
     J1_phi   = < solved from eq.5 >
     der(J1_phi)   = < solved from eq.7 = der(eq.5) >
     J1_w   = < solved from eq.1 >
     J2_w   = < solved from eq.3 >
     der2(J1_phi)   = < solved from eq.10 = der2(eq.5) >
     der(J1_w)   = < solved from eq.8 = der(eq.1) >
     der(J2_w)   = < solved from eq.9 = der(eq.3) >
     J2_tau   = < solved from eq.4 >
     J1_tau   = < solved from eq.6 >
     _r[2]   = < residue of eq.2 >


... Test two coupled inertias (no unknowns can be solved for)

  Variables of _x vector (length=9):
     _x[1]: J1_phi
     _x[2]: J2_phi
     _x[3]: der(J1_phi)      # = der(_x[1])
     _x[4]: der(J2_phi)      # = der(_x[2])
     _x[5]: J2_w
     _x[6]: J1_w
     _x[7]: ---      # integral of lambda variable
     _x[8]: ---      # integral of lambda variable
     _x[9]: ---      # integral of mue variable

  Variables of _der_x vector (length=9):
     _der_x[1]: ---      # = _x[3] = der(J1_phi)
     _der_x[2]: ---      # = _x[4] = der(J2_phi)
     _der_x[3]: der2(J1_phi)
     _der_x[4]: der2(J2_phi)
     _der_x[5]: der(J2_w)
     _der_x[6]: der(J1_w)
     _der_x[7]: J2_tau     # lambda variable
     _der_x[8]: J1_tau     # lambda variable
     _der_x[9]: ---      # mue variable associated with equation eq.7 = der(eq.5)

  Sorted equations (length(_r) = 9, nc = 4):
     _r[1]   = _der_x[1] - _x[3]
     _r[2]   = _der_x[2] - _x[4]
     _r[6]   = < residue of eq.5 >
     _r[7]   = < residue of eq.1 >
     _r[9]   = < residue of eq.7 = der(eq.5) >
     _r[8]   = < residue of eq.3 >
     _r[3]   = < residue of eq.4 >
     _r[4]   = < residue of eq.6 >
     _r[5]   = < residue of eq.2 >


... Test simple sliding mass model with Tearing

  Variables of _x vector (length=3):
     _x[1]: s
     _x[2]: der(s)      # = der(_x[1])
     _x[3]: sf

  Variables of _der_x vector (length=3):
     _der_x[1]: ---      # = _x[2] = der(s)
     _der_x[2]: der2(s)
     _der_x[3]: der(sf)

  Sorted equations (length(_r) = 3, nc = 0):
     _r[1]   = _der_x[1] - _x[2]
     r   = < solved from eq.1 >
     der(r)   = < solved from eq.6 = der(eq.1) >
     v   = < solved from eq.2 >
     der2(r)   = < solved from eq.7 = der2(eq.1) >
     der(v)   = < solved from eq.8 = der(eq.2) >
     u   = < solved from eq.5 >
     _r[2]   = < residue of eq.9 >
     f   = < solved from eq.3 >
     _r[3]   = < residue of eq.4 >


... Test Multi-Index DAE without tearing

  Variables of _x vector (length=21):
     _x[1]: x7
     _x[2]: x6
     _x[3]: der(x7)      # = der(_x[1])
     _x[4]: der(x6)      # = der(_x[2])
     _x[5]: der2(x7)      # = der(_x[3])
     _x[6]: der2(x6)      # = der(_x[4])
     _x[7]: x1
     _x[8]: x2
     _x[9]: x3
     _x[10]: der(x1)      # = der(_x[7])
     _x[11]: der(x2)      # = der(_x[8])
     _x[12]: der(x3)      # = der(_x[9])
     _x[13]: x4
     _x[14]: x8      # algebraic variable
     _x[15]: ---      # integral of lambda variable
     _x[16]: ---      # integral of mue variable
     _x[17]: ---      # integral of mue variable
     _x[18]: ---      # integral of mue variable
     _x[19]: ---      # integral of mue variable
     _x[20]: ---      # integral of mue variable
     _x[21]: ---      # integral of mue variable

  Variables of _der_x vector (length=21):
     _der_x[1]: ---      # = _x[3] = der(x7)
     _der_x[2]: ---      # = _x[4] = der(x6)
     _der_x[3]: ---      # = _x[5] = der2(x7)
     _der_x[4]: ---      # = _x[6] = der2(x6)
     _der_x[5]: der3(x7)
     _der_x[6]: der3(x6)
     _der_x[7]: ---      # = _x[10] = der(x1)
     _der_x[8]: ---      # = _x[11] = der(x2)
     _der_x[9]: ---      # = _x[12] = der(x3)
     _der_x[10]: der2(x1)
     _der_x[11]: der2(x2)
     _der_x[12]: der2(x3)
     _der_x[13]: der(x4)
     _der_x[14]: ---      # derivative of algebraic variable
     _der_x[15]: x5     # lambda variable
     _der_x[16]: ---      # mue variable associated with equation eq.14 = der(eq.6)
     _der_x[17]: ---      # mue variable associated with equation eq.15 = der(eq.7)
     _der_x[18]: ---      # mue variable associated with equation eq.16 = der2(eq.6)
     _der_x[19]: ---      # mue variable associated with equation eq.17 = der2(eq.7)
     _der_x[20]: ---      # mue variable associated with equation eq.9 = der(eq.1)
     _der_x[21]: ---      # mue variable associated with equation eq.11 = der(eq.2)

  Sorted equations (length(_r) = 21, nc = 12):
     _r[1]   = _der_x[1] - _x[3]
     _r[2]   = _der_x[2] - _x[4]
     _r[3]   = _der_x[3] - _x[5]
     _r[4]   = _der_x[4] - _x[6]
     _r[5]   = _der_x[7] - _x[10]
     _r[6]   = _der_x[8] - _x[11]
     _r[7]   = _der_x[9] - _x[12]
     _r[11]   = < residue of eq.6 >
     _r[12]   = < residue of eq.7 >
     _r[16]   = < residue of eq.14 = der(eq.6) >
     _r[17]   = < residue of eq.15 = der(eq.7) >
     _r[18]   = < residue of eq.16 = der2(eq.6) >
     _r[19]   = < residue of eq.17 = der2(eq.7) >
     _r[13]   = < residue of eq.1 >
     _r[14]   = < residue of eq.2 >
     _r[20]   = < residue of eq.9 = der(eq.1) >
     _r[21]   = < residue of eq.11 = der(eq.2) >
     _r[15]   = < residue of eq.3 >
     _r[10]   = < residue of eq.8 >
     _r[8]   = < residue of eq.4 >
     _r[9]   = < residue of eq.5 >


... Test Multi-Index DAE WITH tearing

  Variables of _x vector (length=8):
     _x[1]: x7
     _x[2]: der(x7)      # = der(_x[1])
     _x[3]: der2(x7)      # = der(_x[2])
     _x[4]: x2
     _x[5]: der(x2)      # = der(_x[4])
     _x[6]: x8      # algebraic variable
     _x[7]: ---      # integral of mue variable
     _x[8]: ---      # integral of mue variable

  Variables of _der_x vector (length=8):
     _der_x[1]: ---      # = _x[2] = der(x7)
     _der_x[2]: ---      # = _x[3] = der2(x7)
     _der_x[3]: der3(x7)
     _der_x[4]: ---      # = _x[5] = der(x2)
     _der_x[5]: der2(x2)
     _der_x[6]: ---      # derivative of algebraic variable
     _der_x[7]: ---      # mue variable associated with equation eq.15 = der(eq.7)
     _der_x[8]: ---      # mue variable associated with equation eq.17 = der2(eq.7)

  Sorted equations (length(_r) = 8, nc = 4):
     _r[1]   = _der_x[1] - _x[2]
     _r[2]   = _der_x[2] - _x[3]
     _r[3]   = _der_x[4] - _x[5]
     x6   = < solved from eq.6 >
     _r[6]   = < residue of eq.7 >
     der(x6)   = < solved from eq.14 = der(eq.6) >
     _r[7]   = < residue of eq.15 = der(eq.7) >
     der2(x6)   = < solved from eq.16 = der2(eq.6) >
     _r[8]   = < residue of eq.17 = der2(eq.7) >
     x1   = < solved from eq.1 >
     x3   = < solved from eq.2 >
     der(x1)   = < solved from eq.9 = der(eq.1) >
     der(x3)   = < solved from eq.11 = der(eq.2) >
     x4   = < solved from eq.3 >
     der3(x6)   = < solved from eq.18 = der3(eq.6) >
     der2(x1)   = < solved from eq.10 = der2(eq.1) >
     der2(x3)   = < solved from eq.12 = der2(eq.2) >
     der(x4)   = < solved from eq.13 = der(eq.3) >
     x5   = < solved from eq.5 >
     _r[5]   = < residue of eq.8 >
     _r[4]   = < residue of eq.4 >

TestVariableTypes: Demonstrating the handling of various variable types

Simulating model: TestVariableTypes1
Number of equations: 9
Number of variables: 11
Number of continuous states: 2


----------------------


Simulation FAILED:
UndefVarError(:__N_VDestroy_Serial)


----------------------


Stack trace: ------------------------------------------------
simulate!(::ModiaMath.ModiaToModiaMath.ModiaSimulationModel; tolerance::Float64, startTime::Float64, stopTime::Float64, interval::Float64, maxStepSize::Float64, maxNumberOfSteps::Missing, log::Bool, KLUorderingChoice::Int64) at simulate.jl:427
simulate! at simulate.jl:113 [inlined]
#simulate#11 at ModiaToModiaMath.jl:180 [inlined]
simulate at ModiaToModiaMath.jl:176 [inlined]
simulate_ida(::Modia.Instantiation.Instance, ::Array{Float64,1}, ::Nothing; log::Bool, relTol::Float64, hev::Float64, maxSparsity::Float64, store_eliminated::Bool) at Execution.jl:664
(::Modia.Execution.var"#simulate_ida##kw")(::NamedTuple{(:log, :relTol, :hev),Tuple{Bool,Float64,Float64}}, ::typeof(Modia.Execution.simulate_ida), ::Modia.Instantiation.Instance, ::Array{Float64,1}, ::Nothing) at Execution.jl:595
#simulate_ida#11 at Execution.jl:587 [inlined]
simulate_ida at Execution.jl:587 [inlined]
simulateModelWithOptions(::Modia.Instantiation.Model, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}; options::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at ModelElaboration.jl:395
simulateModelWithOptions at ModelElaboration.jl:272 [inlined]
checkSimulation(::Modia.Instantiation.Model, ::Int64, ::String, ::Int64; startTime::Int64, options::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at ModelElaboration.jl:459
checkSimulation(::Modia.Instantiation.Model, ::Int64, ::String, ::Int64) at ModelElaboration.jl:450
top-level scope at TestVariableTypes.jl:87
top-level scope at Test.jl:1114
top-level scope at TestVariableTypes.jl:48
include(::String) at client.jl:442
top-level scope at runsimulationtests.jl:18
top-level scope at Test.jl:1114
top-level scope at runsimulationtests.jl:16
include(::String) at client.jl:442
top-level scope at runtests.jl:18
top-level scope at Test.jl:1114
top-level scope at runtests.jl:16
include(::String) at client.jl:442
top-level scope at none:6
eval(::Module, ::Any) at boot.jl:331
exec_options(::Base.JLOptions) at client.jl:265
_start() at client.jl:491
End stack trace: --------------- ----------------------------
VariableTypes: Test Failed at /home/pkgeval/.julia/packages/Modia/D0Mdu/src/symbolic/ModelElaboration.jl:485
  Expression: false
Stacktrace:
 [1] checkSimulation(::Modia.Instantiation.Model, ::Int64, ::String, ::Int64; startTime::Int64, options::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/Modia/D0Mdu/src/symbolic/ModelElaboration.jl:485
 [2] checkSimulation(::Modia.Instantiation.Model, ::Int64, ::String, ::Int64) at /home/pkgeval/.julia/packages/Modia/D0Mdu/src/symbolic/ModelElaboration.jl:450
 [3] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/test/models/TestVariableTypes.jl:87
 [4] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
 [5] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/test/models/TestVariableTypes.jl:48
VariableTypes: Error During Test at /home/pkgeval/.julia/packages/Modia/D0Mdu/test/models/TestVariableTypes.jl:43
  Got exception outside of a @test
  KeyError: key "f" not found
  Stacktrace:
   [1] getindex(::Dict{Symbol,AbstractArray{T,1} where T}, ::String) at ./dict.jl:467
   [2] top-level scope at show.jl:613
   [3] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/test/models/TestVariableTypes.jl:88
   [4] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [5] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/test/models/TestVariableTypes.jl:48
   [6] include(::String) at ./client.jl:442
   [7] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/test/runsimulationtests.jl:18
   [8] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [9] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/test/runsimulationtests.jl:16
   [10] include(::String) at ./client.jl:442
   [11] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/test/runtests.jl:18
   [12] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [13] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/test/runtests.jl:16
   [14] include(::String) at ./client.jl:442
   [15] top-level scope at none:6
   [16] eval(::Module, ::Any) at ./boot.jl:331
   [17] exec_options(::Base.JLOptions) at ./client.jl:265
   [18] _start() at ./client.jl:491
  
logTranslation = true
removeSingularities = false
storeEliminated = false
Log file: /home/pkgeval/ModiaResults/Test.txt

Simulating model: Test
Number of equations: 9
Number of variables: 10
Number of continuous states: 1
 Time=0.0:  size of u: (10, 10)
 Time=0.0:  size of u: (10, 10)
 Time=0.0:  size of u: (10, 10)
 Time=0.0:  size of u: (10, 10)
 Time=0.0:  size of u: (10, 10)
 Time=0.0:  size of u: (10, 10)
RunSimulations: Error During Test at /home/pkgeval/.julia/packages/Modia/D0Mdu/test/runsimulationtests.jl:14
  Got exception outside of a @test
  LoadError: UndefVarError: __N_VDestroy_Serial not defined
  Stacktrace:
   [1] simulate!(::ModiaMath.ModiaToModiaMath.ModiaSimulationModel; tolerance::Float64, startTime::Float64, stopTime::Float64, interval::Float64, maxStepSize::Float64, maxNumberOfSteps::Missing, log::Bool, KLUorderingChoice::Int64) at /home/pkgeval/.julia/packages/ModiaMath/xaGiR/src/SimulationEngine/simulate.jl:427
   [2] #simulate#11 at /home/pkgeval/.julia/packages/ModiaMath/xaGiR/src/ModiaToModiaMath.jl:180 [inlined]
   [3] simulate_ida(::Modia.Instantiation.Instance, ::Array{Float64,1}, ::Nothing; log::Bool, relTol::Float64, hev::Float64, maxSparsity::Float64, store_eliminated::Bool) at /home/pkgeval/.julia/packages/Modia/D0Mdu/src/language/Execution.jl:664
   [4] #simulate_ida#11 at /home/pkgeval/.julia/packages/Modia/D0Mdu/src/language/Execution.jl:587 [inlined]
   [5] simulateModelWithOptions(::Modia.Instantiation.Model, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}; options::Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol,Symbol,Symbol},NamedTuple{(:storeEliminated, :logTranslation, :removeSingularities),Tuple{Bool,Bool,Bool}}}) at /home/pkgeval/.julia/packages/Modia/D0Mdu/src/symbolic/ModelElaboration.jl:395
   [6] #simulate#9 at /home/pkgeval/.julia/packages/Modia/D0Mdu/src/symbolic/ModelElaboration.jl:432 [inlined]
   [7] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/test/models/TestEquations.jl:49
   [8] include(::String) at ./client.jl:442
   [9] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/test/runsimulationtests.jl:19
   [10] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [11] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/test/runsimulationtests.jl:16
   [12] include(::String) at ./client.jl:442
   [13] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/test/runtests.jl:18
   [14] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [15] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/test/runtests.jl:16
   [16] include(::String) at ./client.jl:442
   [17] top-level scope at none:6
   [18] eval(::Module, ::Any) at ./boot.jl:331
   [19] exec_options(::Base.JLOptions) at ./client.jl:265
   [20] _start() at ./client.jl:491
  in expression starting at /home/pkgeval/.julia/packages/Modia/D0Mdu/test/models/TestEquations.jl:49
  caused by [exception 1]
  UndefVarError: __IDASolve not defined
  Stacktrace:
   [1] simulate!(::ModiaMath.ModiaToModiaMath.ModiaSimulationModel; tolerance::Float64, startTime::Float64, stopTime::Float64, interval::Float64, maxStepSize::Float64, maxNumberOfSteps::Missing, log::Bool, KLUorderingChoice::Int64) at /home/pkgeval/.julia/packages/ModiaMath/xaGiR/src/SimulationEngine/simulate.jl:338
   [2] #simulate#11 at /home/pkgeval/.julia/packages/ModiaMath/xaGiR/src/ModiaToModiaMath.jl:180 [inlined]
   [3] simulate_ida(::Modia.Instantiation.Instance, ::Array{Float64,1}, ::Nothing; log::Bool, relTol::Float64, hev::Float64, maxSparsity::Float64, store_eliminated::Bool) at /home/pkgeval/.julia/packages/Modia/D0Mdu/src/language/Execution.jl:664
   [4] #simulate_ida#11 at /home/pkgeval/.julia/packages/Modia/D0Mdu/src/language/Execution.jl:587 [inlined]
   [5] simulateModelWithOptions(::Modia.Instantiation.Model, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}; options::Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol,Symbol,Symbol},NamedTuple{(:storeEliminated, :logTranslation, :removeSingularities),Tuple{Bool,Bool,Bool}}}) at /home/pkgeval/.julia/packages/Modia/D0Mdu/src/symbolic/ModelElaboration.jl:395
   [6] #simulate#9 at /home/pkgeval/.julia/packages/Modia/D0Mdu/src/symbolic/ModelElaboration.jl:432 [inlined]
   [7] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/test/models/TestEquations.jl:49
   [8] include(::String) at ./client.jl:442
   [9] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/test/runsimulationtests.jl:19
   [10] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [11] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/test/runsimulationtests.jl:16
   [12] include(::String) at ./client.jl:442
   [13] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/test/runtests.jl:18
   [14] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [15] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/test/runtests.jl:16
   [16] include(::String) at ./client.jl:442
   [17] top-level scope at none:6
   [18] eval(::Module, ::Any) at ./boot.jl:331
   [19] exec_options(::Base.JLOptions) at ./client.jl:265
   [20] _start() at ./client.jl:491
  

CurrentController: Demonstrating the ability to simulate mixed domain models
removeSingularities = false
tearing = true

Simulating model: CurrentController
Number of equations: 83
Number of variables: 91
Number of continuous states: 8
Number of non states: 2


----------------------


Simulation FAILED:
UndefVarError(:__N_VDestroy_Serial)


----------------------


Stack trace: ------------------------------------------------
simulate!(::ModiaMath.ModiaToModiaMath.ModiaSimulationModel; tolerance::Float64, startTime::Float64, stopTime::Float64, interval::Float64, maxStepSize::Float64, maxNumberOfSteps::Missing, log::Bool, KLUorderingChoice::Int64) at simulate.jl:427
simulate! at simulate.jl:113 [inlined]
#simulate#11 at ModiaToModiaMath.jl:180 [inlined]
simulate at ModiaToModiaMath.jl:176 [inlined]
simulate_ida(::Modia.Instantiation.Instance, ::Array{Float64,1}, ::Nothing; log::Bool, relTol::Float64, hev::Float64, maxSparsity::Float64, store_eliminated::Bool) at Execution.jl:664
(::Modia.Execution.var"#simulate_ida##kw")(::NamedTuple{(:log, :relTol, :hev),Tuple{Bool,Float64,Float64}}, ::typeof(Modia.Execution.simulate_ida), ::Modia.Instantiation.Instance, ::Array{Float64,1}, ::Nothing) at Execution.jl:595
#simulate_ida#11 at Execution.jl:587 [inlined]
(::Modia.Execution.var"#simulate_ida##kw")(::NamedTuple{(:log, :relTol, :hev),Tuple{Bool,Float64,Float64}}, ::typeof(Modia.Execution.simulate_ida), ::Modia.Instantiation.Instance, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Nothing) at Execution.jl:587
simulateModelWithOptions(::Modia.Instantiation.Model, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}; options::Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol,Symbol},NamedTuple{(:removeSingularities, :tearing),Tuple{Bool,Bool}}}) at ModelElaboration.jl:395
simulateModelWithOptions at ModelElaboration.jl:272 [inlined]
checkSimulation(::Modia.Instantiation.Model, ::Float64, ::String, ::Float64; startTime::Int64, options::Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol,Symbol},NamedTuple{(:removeSingularities, :tearing),Tuple{Bool,Bool}}}) at ModelElaboration.jl:459
(::Modia.ModelElaboration.var"#checkSimulation##kw")(::NamedTuple{(:removeSingularities, :tearing),Tuple{Bool,Bool}}, ::typeof(checkSimulation), ::Modia.Instantiation.Model, ::Float64, ::String, ::Float64) at ModelElaboration.jl:450
top-level scope at CurrentController.jl:54
include(::String) at client.jl:442
top-level scope at runexamples.jl:15
top-level scope at Test.jl:1114
top-level scope at runexamples.jl:12
include(::String) at client.jl:442
top-level scope at runtests.jl:19
top-level scope at Test.jl:1114
top-level scope at runtests.jl:16
include(::String) at client.jl:442
top-level scope at none:6
eval(::Module, ::Any) at boot.jl:331
exec_options(::Base.JLOptions) at client.jl:265
_start() at client.jl:491
End stack trace: --------------- ----------------------------
RunExamples: Test Failed at /home/pkgeval/.julia/packages/Modia/D0Mdu/src/symbolic/ModelElaboration.jl:485
  Expression: false
Stacktrace:
 [1] checkSimulation(::Modia.Instantiation.Model, ::Float64, ::String, ::Float64; startTime::Int64, options::Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol,Symbol},NamedTuple{(:removeSingularities, :tearing),Tuple{Bool,Bool}}}) at /home/pkgeval/.julia/packages/Modia/D0Mdu/src/symbolic/ModelElaboration.jl:485
 [2] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/examples/CurrentController.jl:54
 [3] include(::String) at ./client.jl:442
 [4] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/examples/runexamples.jl:15
 [5] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
 [6] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/examples/runexamples.jl:12

Simulating model: CurrentController
Number of equations: 81
Number of variables: 89
Number of continuous states: 8
Number of non states: 3


----------------------


Simulation FAILED:
UndefVarError(:__N_VDestroy_Serial)


----------------------


Stack trace: ------------------------------------------------
simulate!(::ModiaMath.ModiaToModiaMath.ModiaSimulationModel; tolerance::Float64, startTime::Float64, stopTime::Float64, interval::Float64, maxStepSize::Float64, maxNumberOfSteps::Missing, log::Bool, KLUorderingChoice::Int64) at simulate.jl:427
simulate! at simulate.jl:113 [inlined]
#simulate#11 at ModiaToModiaMath.jl:180 [inlined]
simulate at ModiaToModiaMath.jl:176 [inlined]
simulate_ida(::Modia.Instantiation.Instance, ::Array{Float64,1}, ::Nothing; log::Bool, relTol::Float64, hev::Float64, maxSparsity::Float64, store_eliminated::Bool) at Execution.jl:664
(::Modia.Execution.var"#simulate_ida##kw")(::NamedTuple{(:log, :relTol, :hev),Tuple{Bool,Float64,Float64}}, ::typeof(Modia.Execution.simulate_ida), ::Modia.Instantiation.Instance, ::Array{Float64,1}, ::Nothing) at Execution.jl:595
#simulate_ida#11 at Execution.jl:587 [inlined]
simulate_ida at Execution.jl:587 [inlined]
simulateModelWithOptions(::Modia.Instantiation.Model, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}; options::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at ModelElaboration.jl:395
simulateModelWithOptions at ModelElaboration.jl:272 [inlined]
checkSimulation(::Modia.Instantiation.Model, ::Float64, ::String, ::Float64; startTime::Int64, options::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at ModelElaboration.jl:459
checkSimulation(::Modia.Instantiation.Model, ::Float64, ::String, ::Float64) at ModelElaboration.jl:450
top-level scope at CurrentController.jl:56
include(::String) at client.jl:442
top-level scope at runexamples.jl:15
top-level scope at Test.jl:1114
top-level scope at runexamples.jl:12
include(::String) at client.jl:442
top-level scope at runtests.jl:19
top-level scope at Test.jl:1114
top-level scope at runtests.jl:16
include(::String) at client.jl:442
top-level scope at none:6
eval(::Module, ::Any) at boot.jl:331
exec_options(::Base.JLOptions) at client.jl:265
_start() at client.jl:491
End stack trace: --------------- ----------------------------
RunExamples: Test Failed at /home/pkgeval/.julia/packages/Modia/D0Mdu/src/symbolic/ModelElaboration.jl:485
  Expression: false
Stacktrace:
 [1] checkSimulation(::Modia.Instantiation.Model, ::Float64, ::String, ::Float64; startTime::Int64, options::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/Modia/D0Mdu/src/symbolic/ModelElaboration.jl:485
 [2] checkSimulation(::Modia.Instantiation.Model, ::Float64, ::String, ::Float64) at /home/pkgeval/.julia/packages/Modia/D0Mdu/src/symbolic/ModelElaboration.jl:450
 [3] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/examples/CurrentController.jl:56
 [4] include(::String) at ./client.jl:442
 [5] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/examples/runexamples.jl:15
 [6] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
 [7] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/examples/runexamples.jl:12
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.

Rectifier: Demonstrating the ability to simulate models with state events
logTranslation = true
Log file: /home/pkgeval/ModiaResults/Rectifier.txt

Simulating model: Rectifier
Number of equations: 33
Number of variables: 35
Number of continuous states: 2


----------------------


Simulation FAILED:
UndefVarError(:__N_VDestroy_Serial)


----------------------


Stack trace: ------------------------------------------------
simulate!(::ModiaMath.ModiaToModiaMath.ModiaSimulationModel; tolerance::Float64, startTime::Float64, stopTime::Float64, interval::Float64, maxStepSize::Float64, maxNumberOfSteps::Missing, log::Bool, KLUorderingChoice::Int64) at simulate.jl:427
simulate! at simulate.jl:113 [inlined]
#simulate#11 at ModiaToModiaMath.jl:180 [inlined]
simulate at ModiaToModiaMath.jl:176 [inlined]
simulate_ida(::Modia.Instantiation.Instance, ::Array{Float64,1}, ::Nothing; log::Bool, relTol::Float64, hev::Float64, maxSparsity::Float64, store_eliminated::Bool) at Execution.jl:664
(::Modia.Execution.var"#simulate_ida##kw")(::NamedTuple{(:log, :relTol, :hev),Tuple{Bool,Float64,Float64}}, ::typeof(Modia.Execution.simulate_ida), ::Modia.Instantiation.Instance, ::Array{Float64,1}, ::Nothing) at Execution.jl:595
#simulate_ida#11 at Execution.jl:587 [inlined]
(::Modia.Execution.var"#simulate_ida##kw")(::NamedTuple{(:log, :relTol, :hev),Tuple{Bool,Float64,Float64}}, ::typeof(Modia.Execution.simulate_ida), ::Modia.Instantiation.Instance, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Nothing) at Execution.jl:587
simulateModelWithOptions(::Modia.Instantiation.Model, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}; options::Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:logTranslation,),Tuple{Bool}}}) at ModelElaboration.jl:395
simulateModelWithOptions at ModelElaboration.jl:272 [inlined]
checkSimulation(::Modia.Instantiation.Model, ::Int64, ::String, ::Float64; startTime::Int64, options::Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:logTranslation,),Tuple{Bool}}}) at ModelElaboration.jl:459
(::Modia.ModelElaboration.var"#checkSimulation##kw")(::NamedTuple{(:logTranslation,),Tuple{Bool}}, ::typeof(checkSimulation), ::Modia.Instantiation.Model, ::Int64, ::String, ::Float64) at ModelElaboration.jl:450
top-level scope at Rectifier.jl:31
include(::String) at client.jl:442
top-level scope at runexamples.jl:16
top-level scope at Test.jl:1114
top-level scope at runexamples.jl:12
include(::String) at client.jl:442
top-level scope at runtests.jl:19
top-level scope at Test.jl:1114
top-level scope at runtests.jl:16
include(::String) at client.jl:442
top-level scope at none:6
eval(::Module, ::Any) at boot.jl:331
exec_options(::Base.JLOptions) at client.jl:265
_start() at client.jl:491
End stack trace: --------------- ----------------------------
RunExamples: Test Failed at /home/pkgeval/.julia/packages/Modia/D0Mdu/src/symbolic/ModelElaboration.jl:485
  Expression: false
Stacktrace:
 [1] checkSimulation(::Modia.Instantiation.Model, ::Int64, ::String, ::Float64; startTime::Int64, options::Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:logTranslation,),Tuple{Bool}}}) at /home/pkgeval/.julia/packages/Modia/D0Mdu/src/symbolic/ModelElaboration.jl:485
 [2] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/examples/Rectifier.jl:31
 [3] include(::String) at ./client.jl:442
 [4] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/examples/runexamples.jl:16
 [5] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
 [6] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/examples/runexamples.jl:12
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.

TestCauerLowPassFilter: Demonstrating the ability to simulate an electrical model translated from Modelica Standar Library
logTranslation = false
removeSingularities = false
logTiming = true

Simulating model: CauerLowPassOPV
Instantiate:            15.926621 seconds (15.03 M allocations: 710.524 MiB, 2.90% gc time)
Flatten:                 0.043135 seconds (9.83 k allocations: 536.641 KiB)
Consistency check:       0.000485 seconds (436 allocations: 131.125 KiB)
Pantelides:              0.001436 seconds (2.00 k allocations: 244.141 KiB)
Matching:                0.000484 seconds (469 allocations: 155.547 KiB)
Number of equations: 234
Number of variables: 240
Number of continuous states: 6
Number of non states: 4
BLT:                     0.000144 seconds (1.13 k allocations: 69.391 KiB)
Symbolic processing:     0.221916 seconds (165.37 k allocations: 9.738 MiB, 42.29% gc time)
Code generation and simulation:         
  ModiaMath:           

----------------------


Simulation FAILED:
UndefVarError(:__N_VDestroy_Serial)


----------------------


Stack trace: ------------------------------------------------
simulate!(::ModiaMath.ModiaToModiaMath.ModiaSimulationModel; tolerance::Float64, startTime::Float64, stopTime::Float64, interval::Float64, maxStepSize::Float64, maxNumberOfSteps::Missing, log::Bool, KLUorderingChoice::Int64) at simulate.jl:427
simulate! at simulate.jl:113 [inlined]
#simulate#11 at ModiaToModiaMath.jl:180 [inlined]
simulate at ModiaToModiaMath.jl:176 [inlined]
macro expansion at timing.jl:174 [inlined]
simulate_ida(::Modia.Instantiation.Instance, ::Array{Float64,1}, ::Nothing; log::Bool, relTol::Float64, hev::Float64, maxSparsity::Float64, store_eliminated::Bool) at Execution.jl:656
(::Modia.Execution.var"#simulate_ida##kw")(::NamedTuple{(:log, :relTol, :hev),Tuple{Bool,Float64,Float64}}, ::typeof(Modia.Execution.simulate_ida), ::Modia.Instantiation.Instance, ::Array{Float64,1}, ::Nothing) at Execution.jl:595
#simulate_ida#11 at Execution.jl:587 [inlined]
(::Modia.Execution.var"#simulate_ida##kw")(::NamedTuple{(:log, :relTol, :hev),Tuple{Bool,Float64,Float64}}, ::typeof(Modia.Execution.simulate_ida), ::Modia.Instantiation.Instance, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Nothing) at Execution.jl:587
macro expansion at timing.jl:174 [inlined]
simulateModelWithOptions(::Modia.Instantiation.Model, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}; options::Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol,Symbol,Symbol},NamedTuple{(:logTranslation, :removeSingularities, :logTiming),Tuple{Bool,Bool,Bool}}}) at ModelElaboration.jl:393
simulateModelWithOptions at ModelElaboration.jl:272 [inlined]
checkSimulation(::Modia.Instantiation.Model, ::Int64, ::String, ::Float64; startTime::Int64, options::Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol,Symbol,Symbol},NamedTuple{(:logTranslation, :removeSingularities, :logTiming),Tuple{Bool,Bool,Bool}}}) at ModelElaboration.jl:459
(::Modia.ModelElaboration.var"#checkSimulation##kw")(::NamedTuple{(:logTranslation, :removeSingularities, :logTiming),Tuple{Bool,Bool,Bool}}, ::typeof(checkSimulation), ::Modia.Instantiation.Model, ::Int64, ::String, ::Float64) at ModelElaboration.jl:450
top-level scope at CauerLowPassFilter.jl:149
include(::String) at client.jl:442
top-level scope at runexamples.jl:17
top-level scope at Test.jl:1114
top-level scope at runexamples.jl:12
include(::String) at client.jl:442
top-level scope at runtests.jl:19
top-level scope at Test.jl:1114
top-level scope at runtests.jl:16
include(::String) at client.jl:442
top-level scope at none:6
eval(::Module, ::Any) at boot.jl:331
exec_options(::Base.JLOptions) at client.jl:265
_start() at client.jl:491
End stack trace: --------------- ----------------------------
RunExamples: Test Failed at /home/pkgeval/.julia/packages/Modia/D0Mdu/src/symbolic/ModelElaboration.jl:485
  Expression: false
Stacktrace:
 [1] checkSimulation(::Modia.Instantiation.Model, ::Int64, ::String, ::Float64; startTime::Int64, options::Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol,Symbol,Symbol},NamedTuple{(:logTranslation, :removeSingularities, :logTiming),Tuple{Bool,Bool,Bool}}}) at /home/pkgeval/.julia/packages/Modia/D0Mdu/src/symbolic/ModelElaboration.jl:485
 [2] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/examples/CauerLowPassFilter.jl:149
 [3] include(::String) at ./client.jl:442
 [4] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/examples/runexamples.jl:17
 [5] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
 [6] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/examples/runexamples.jl:12

LinearSystems: Demonstrates type and size deduction.
logTranslation = true
Log file: /home/pkgeval/ModiaResults/MySISOABCD.txt

Simulating model: MySISOABCD
Number of equations: 2
Number of variables: 3
Number of continuous states: 1


----------------------


Simulation FAILED:
UndefVarError(:__N_VDestroy_Serial)


----------------------


Stack trace: ------------------------------------------------
simulate!(::ModiaMath.ModiaToModiaMath.ModiaSimulationModel; tolerance::Float64, startTime::Float64, stopTime::Float64, interval::Float64, maxStepSize::Float64, maxNumberOfSteps::Missing, log::Bool, KLUorderingChoice::Int64) at simulate.jl:427
simulate! at simulate.jl:113 [inlined]
#simulate#11 at ModiaToModiaMath.jl:180 [inlined]
simulate at ModiaToModiaMath.jl:176 [inlined]
simulate_ida(::Modia.Instantiation.Instance, ::Array{Float64,1}, ::Nothing; log::Bool, relTol::Float64, hev::Float64, maxSparsity::Float64, store_eliminated::Bool) at Execution.jl:664
(::Modia.Execution.var"#simulate_ida##kw")(::NamedTuple{(:log, :relTol, :hev),Tuple{Bool,Float64,Float64}}, ::typeof(Modia.Execution.simulate_ida), ::Modia.Instantiation.Instance, ::Array{Float64,1}, ::Nothing) at Execution.jl:595
#simulate_ida#11 at Execution.jl:587 [inlined]
(::Modia.Execution.var"#simulate_ida##kw")(::NamedTuple{(:log, :relTol, :hev),Tuple{Bool,Float64,Float64}}, ::typeof(Modia.Execution.simulate_ida), ::Modia.Instantiation.Instance, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Nothing) at Execution.jl:587
simulateModelWithOptions(::Modia.Instantiation.Model, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}; options::Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:logTranslation,),Tuple{Bool}}}) at ModelElaboration.jl:395
simulateModelWithOptions at ModelElaboration.jl:272 [inlined]
checkSimulation(::Modia.Instantiation.Model, ::Int64, ::String, ::Float64; startTime::Int64, options::Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:logTranslation,),Tuple{Bool}}}) at ModelElaboration.jl:459
(::Modia.ModelElaboration.var"#checkSimulation##kw")(::NamedTuple{(:logTranslation,),Tuple{Bool}}, ::typeof(checkSimulation), ::Modia.Instantiation.Model, ::Int64, ::String, ::Float64) at ModelElaboration.jl:450
top-level scope at LinearSystems.jl:24
include(::String) at client.jl:442
top-level scope at runexamples.jl:18
top-level scope at Test.jl:1114
top-level scope at runexamples.jl:12
include(::String) at client.jl:442
top-level scope at runtests.jl:19
top-level scope at Test.jl:1114
top-level scope at runtests.jl:16
include(::String) at client.jl:442
top-level scope at none:6
eval(::Module, ::Any) at boot.jl:331
exec_options(::Base.JLOptions) at client.jl:265
_start() at client.jl:491
End stack trace: --------------- ----------------------------
RunExamples: Test Failed at /home/pkgeval/.julia/packages/Modia/D0Mdu/src/symbolic/ModelElaboration.jl:485
  Expression: false
Stacktrace:
 [1] checkSimulation(::Modia.Instantiation.Model, ::Int64, ::String, ::Float64; startTime::Int64, options::Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:logTranslation,),Tuple{Bool}}}) at /home/pkgeval/.julia/packages/Modia/D0Mdu/src/symbolic/ModelElaboration.jl:485
 [2] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/examples/LinearSystems.jl:24
 [3] include(::String) at ./client.jl:442
 [4] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/examples/runexamples.jl:18
 [5] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
 [6] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/examples/runexamples.jl:12
storeEliminated = false

Simulating model: MyMIMOABCD
Number of equations: 5
Number of variables: 6
Number of continuous states: 1


----------------------


Simulation FAILED:
UndefVarError(:__N_VDestroy_Serial)


----------------------


Stack trace: ------------------------------------------------
simulate!(::ModiaMath.ModiaToModiaMath.ModiaSimulationModel; tolerance::Float64, startTime::Float64, stopTime::Float64, interval::Float64, maxStepSize::Float64, maxNumberOfSteps::Missing, log::Bool, KLUorderingChoice::Int64) at simulate.jl:427
simulate! at simulate.jl:113 [inlined]
#simulate#11 at ModiaToModiaMath.jl:180 [inlined]
simulate at ModiaToModiaMath.jl:176 [inlined]
simulate_ida(::Modia.Instantiation.Instance, ::Array{Float64,1}, ::Nothing; log::Bool, relTol::Float64, hev::Float64, maxSparsity::Float64, store_eliminated::Bool) at Execution.jl:664
(::Modia.Execution.var"#simulate_ida##kw")(::NamedTuple{(:log, :relTol, :hev),Tuple{Bool,Float64,Float64}}, ::typeof(Modia.Execution.simulate_ida), ::Modia.Instantiation.Instance, ::Array{Float64,1}, ::Nothing) at Execution.jl:595
#simulate_ida#11 at Execution.jl:587 [inlined]
(::Modia.Execution.var"#simulate_ida##kw")(::NamedTuple{(:log, :relTol, :hev),Tuple{Bool,Float64,Float64}}, ::typeof(Modia.Execution.simulate_ida), ::Modia.Instantiation.Instance, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Nothing) at Execution.jl:587
simulateModelWithOptions(::Modia.Instantiation.Model, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}; options::Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:storeEliminated,),Tuple{Bool}}}) at ModelElaboration.jl:395
simulateModelWithOptions at ModelElaboration.jl:272 [inlined]
checkSimulation(::Modia.Instantiation.Model, ::Int64, ::String, ::Float64; startTime::Int64, options::Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:storeEliminated,),Tuple{Bool}}}) at ModelElaboration.jl:459
(::Modia.ModelElaboration.var"#checkSimulation##kw")(::NamedTuple{(:storeEliminated,),Tuple{Bool}}, ::typeof(checkSimulation), ::Modia.Instantiation.Model, ::Int64, ::String, ::Float64) at ModelElaboration.jl:450
top-level scope at LinearSystems.jl:39
include(::String) at client.jl:442
top-level scope at runexamples.jl:18
top-level scope at Test.jl:1114
top-level scope at runexamples.jl:12
include(::String) at client.jl:442
top-level scope at runtests.jl:19
top-level scope at Test.jl:1114
top-level scope at runtests.jl:16
include(::String) at client.jl:442
top-level scope at none:6
eval(::Module, ::Any) at boot.jl:331
exec_options(::Base.JLOptions) at client.jl:265
_start() at client.jl:491
End stack trace: --------------- ----------------------------
RunExamples: Test Failed at /home/pkgeval/.julia/packages/Modia/D0Mdu/src/symbolic/ModelElaboration.jl:485
  Expression: false
Stacktrace:
 [1] checkSimulation(::Modia.Instantiation.Model, ::Int64, ::String, ::Float64; startTime::Int64, options::Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:storeEliminated,),Tuple{Bool}}}) at /home/pkgeval/.julia/packages/Modia/D0Mdu/src/symbolic/ModelElaboration.jl:485
 [2] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/examples/LinearSystems.jl:39
 [3] include(::String) at ./client.jl:442
 [4] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/examples/runexamples.jl:18
 [5] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
 [6] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/examples/runexamples.jl:12
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.

SynchronousExamples: Demonstrating the ability to simulate models with synchronous semantics
storeEliminated = false
logSimulation = true

Simulating model: SpeedControl
Number of equations: 6
Number of variables: 9
Number of continuous states: 3
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: SpeedControl
      Initialization at time = 0.0 s
        initial values:
          │ x │ name   │ start   │ fixed │ nominal │
          ├───┼────────┼─────────┼───────┼─────────┤
          │ 1 │ x      │ 0.0     │ 1     │ 1.0     │
          │ 2 │ v      │ 0.0     │ 1     │ 1.0     │
          │ 3 │ fobs   │ 0.0     │ 1     │ 1.0     │

        in Clock, nr = 1 (isInitial)
        nextEventTime = 0 s, integrateToEvent = true
        in sample, nr = 1 (initialize sample store)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
      Simulation started

      Time event at time = 0.0 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 0.1 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
            fobs = 0.0 changed to 4.9504950495049505
        restart = Restart
Synchronous: Error During Test at /home/pkgeval/.julia/packages/Modia/D0Mdu/examples/SynchronousExamples.jl:21
  Got exception outside of a @test
  UndefVarError: __N_VDestroy_Serial not defined
  Stacktrace:
   [1] simulate!(::ModiaMath.ModiaToModiaMath.ModiaSimulationModel; tolerance::Float64, startTime::Float64, stopTime::Float64, interval::Float64, maxStepSize::Float64, maxNumberOfSteps::Missing, log::Bool, KLUorderingChoice::Int64) at /home/pkgeval/.julia/packages/ModiaMath/xaGiR/src/SimulationEngine/simulate.jl:427
   [2] #simulate#11 at /home/pkgeval/.julia/packages/ModiaMath/xaGiR/src/ModiaToModiaMath.jl:180 [inlined]
   [3] simulate_ida(::Modia.Instantiation.Instance, ::Array{Float64,1}, ::Nothing; log::Bool, relTol::Float64, hev::Float64, maxSparsity::Float64, store_eliminated::Bool) at /home/pkgeval/.julia/packages/Modia/D0Mdu/src/language/Execution.jl:664
   [4] #simulate_ida#11 at /home/pkgeval/.julia/packages/Modia/D0Mdu/src/language/Execution.jl:587 [inlined]
   [5] simulateModelWithOptions(::Modia.Instantiation.Model, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}; options::Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol,Symbol},NamedTuple{(:storeEliminated, :logSimulation),Tuple{Bool,Bool}}}) at /home/pkgeval/.julia/packages/Modia/D0Mdu/src/symbolic/ModelElaboration.jl:395
   [6] #simulate#9 at /home/pkgeval/.julia/packages/Modia/D0Mdu/src/symbolic/ModelElaboration.jl:432 [inlined]
   [7] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/examples/SynchronousExamples.jl:76
   [8] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [9] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/examples/SynchronousExamples.jl:23
   [10] include(::String) at ./client.jl:442
   [11] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/examples/runexamples.jl:19
   [12] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [13] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/examples/runexamples.jl:12
   [14] include(::String) at ./client.jl:442
   [15] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/test/runtests.jl:19
   [16] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [17] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/test/runtests.jl:16
   [18] include(::String) at ./client.jl:442
   [19] top-level scope at none:6
   [20] eval(::Module, ::Any) at ./boot.jl:331
   [21] exec_options(::Base.JLOptions) at ./client.jl:265
   [22] _start() at ./client.jl:491
  caused by [exception 1]
  UndefVarError: __IDAReInit not defined
  Stacktrace:
   [1] simulate!(::ModiaMath.ModiaToModiaMath.ModiaSimulationModel; tolerance::Float64, startTime::Float64, stopTime::Float64, interval::Float64, maxStepSize::Float64, maxNumberOfSteps::Missing, log::Bool, KLUorderingChoice::Int64) at /home/pkgeval/.julia/packages/ModiaMath/xaGiR/src/SimulationEngine/simulate.jl:305
   [2] #simulate#11 at /home/pkgeval/.julia/packages/ModiaMath/xaGiR/src/ModiaToModiaMath.jl:180 [inlined]
   [3] simulate_ida(::Modia.Instantiation.Instance, ::Array{Float64,1}, ::Nothing; log::Bool, relTol::Float64, hev::Float64, maxSparsity::Float64, store_eliminated::Bool) at /home/pkgeval/.julia/packages/Modia/D0Mdu/src/language/Execution.jl:664
   [4] #simulate_ida#11 at /home/pkgeval/.julia/packages/Modia/D0Mdu/src/language/Execution.jl:587 [inlined]
   [5] simulateModelWithOptions(::Modia.Instantiation.Model, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}; options::Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol,Symbol},NamedTuple{(:storeEliminated, :logSimulation),Tuple{Bool,Bool}}}) at /home/pkgeval/.julia/packages/Modia/D0Mdu/src/symbolic/ModelElaboration.jl:395
   [6] #simulate#9 at /home/pkgeval/.julia/packages/Modia/D0Mdu/src/symbolic/ModelElaboration.jl:432 [inlined]
   [7] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/examples/SynchronousExamples.jl:76
   [8] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [9] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/examples/SynchronousExamples.jl:23
   [10] include(::String) at ./client.jl:442
   [11] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/examples/runexamples.jl:19
   [12] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [13] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/examples/runexamples.jl:12
   [14] include(::String) at ./client.jl:442
   [15] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/test/runtests.jl:19
   [16] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [17] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/test/runtests.jl:16
   [18] include(::String) at ./client.jl:442
   [19] top-level scope at none:6
   [20] eval(::Module, ::Any) at ./boot.jl:331
   [21] exec_options(::Base.JLOptions) at ./client.jl:265
   [22] _start() at ./client.jl:491
  
ElectricalVehicleAndCharger: Demonstrates the ability to change models from Julia.

Simulating model: Charger
Number of equations: 17
Number of variables: 17
Number of continuous states: 0

Simulating model: ElectricVehicle
Number of equations: 17
Number of variables: 18
Number of continuous states: 1
RunExamples: Error During Test at /home/pkgeval/.julia/packages/Modia/D0Mdu/examples/runexamples.jl:10
  Got exception outside of a @test
  LoadError: UndefVarError: __N_VDestroy_Serial not defined
  Stacktrace:
   [1] simulate!(::ModiaMath.ModiaToModiaMath.ModiaSimulationModel; tolerance::Float64, startTime::Float64, stopTime::Float64, interval::Float64, maxStepSize::Float64, maxNumberOfSteps::Missing, log::Bool, KLUorderingChoice::Int64) at /home/pkgeval/.julia/packages/ModiaMath/xaGiR/src/SimulationEngine/simulate.jl:427
   [2] #simulate#11 at /home/pkgeval/.julia/packages/ModiaMath/xaGiR/src/ModiaToModiaMath.jl:180 [inlined]
   [3] simulate_ida(::Modia.Instantiation.Instance, ::Array{Float64,1}, ::Nothing; log::Bool, relTol::Float64, hev::Float64, maxSparsity::Float64, store_eliminated::Bool) at /home/pkgeval/.julia/packages/Modia/D0Mdu/src/language/Execution.jl:664
   [4] #simulate_ida#11 at /home/pkgeval/.julia/packages/Modia/D0Mdu/src/language/Execution.jl:587 [inlined]
   [5] simulateModelWithOptions(::Modia.Instantiation.Model, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}; options::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/Modia/D0Mdu/src/symbolic/ModelElaboration.jl:395
   [6] #simulate#9 at /home/pkgeval/.julia/packages/Modia/D0Mdu/src/symbolic/ModelElaboration.jl:432 [inlined]
   [7] simulate(::Modia.Instantiation.Model, ::Int64) at /home/pkgeval/.julia/packages/Modia/D0Mdu/src/symbolic/ModelElaboration.jl:425
   [8] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/examples/ElectricalVehicleAndCharger.jl:74
   [9] include(::String) at ./client.jl:442
   [10] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/examples/runexamples.jl:20
   [11] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [12] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/examples/runexamples.jl:12
   [13] include(::String) at ./client.jl:442
   [14] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/test/runtests.jl:19
   [15] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [16] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/test/runtests.jl:16
   [17] include(::String) at ./client.jl:442
   [18] top-level scope at none:6
   [19] eval(::Module, ::Any) at ./boot.jl:331
   [20] exec_options(::Base.JLOptions) at ./client.jl:265
   [21] _start() at ./client.jl:491
  in expression starting at /home/pkgeval/.julia/packages/Modia/D0Mdu/examples/ElectricalVehicleAndCharger.jl:74
  caused by [exception 1]
  UndefVarError: __IDASolve not defined
  Stacktrace:
   [1] simulate!(::ModiaMath.ModiaToModiaMath.ModiaSimulationModel; tolerance::Float64, startTime::Float64, stopTime::Float64, interval::Float64, maxStepSize::Float64, maxNumberOfSteps::Missing, log::Bool, KLUorderingChoice::Int64) at /home/pkgeval/.julia/packages/ModiaMath/xaGiR/src/SimulationEngine/simulate.jl:338
   [2] #simulate#11 at /home/pkgeval/.julia/packages/ModiaMath/xaGiR/src/ModiaToModiaMath.jl:180 [inlined]
   [3] simulate_ida(::Modia.Instantiation.Instance, ::Array{Float64,1}, ::Nothing; log::Bool, relTol::Float64, hev::Float64, maxSparsity::Float64, store_eliminated::Bool) at /home/pkgeval/.julia/packages/Modia/D0Mdu/src/language/Execution.jl:664
   [4] #simulate_ida#11 at /home/pkgeval/.julia/packages/Modia/D0Mdu/src/language/Execution.jl:587 [inlined]
   [5] simulateModelWithOptions(::Modia.Instantiation.Model, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}; options::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/Modia/D0Mdu/src/symbolic/ModelElaboration.jl:395
   [6] #simulate#9 at /home/pkgeval/.julia/packages/Modia/D0Mdu/src/symbolic/ModelElaboration.jl:432 [inlined]
   [7] simulate(::Modia.Instantiation.Model, ::Int64) at /home/pkgeval/.julia/packages/Modia/D0Mdu/src/symbolic/ModelElaboration.jl:425
   [8] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/examples/ElectricalVehicleAndCharger.jl:74
   [9] include(::String) at ./client.jl:442
   [10] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/examples/runexamples.jl:20
   [11] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [12] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/examples/runexamples.jl:12
   [13] include(::String) at ./client.jl:442
   [14] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/test/runtests.jl:19
   [15] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [16] top-level scope at /home/pkgeval/.julia/packages/Modia/D0Mdu/test/runtests.jl:16
   [17] include(::String) at ./client.jl:442
   [18] top-level scope at none:6
   [19] eval(::Module, ::Any) at ./boot.jl:331
   [20] exec_options(::Base.JLOptions) at ./client.jl:265
   [21] _start() at ./client.jl:491
  
Test Summary:     | Pass  Fail  Error  Total
RunTests          |  211     7      4    222
  SymbolicTests   |  210                 210
  RunSimulations  |          1      2      3
    VariableTypes |          1      1      2
  RunExamples     |    1     6      2      9
    Synchronous   |                 1      1
ERROR: LoadError: Some tests did not pass: 211 passed, 7 failed, 4 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/Modia/D0Mdu/test/runtests.jl:14
ERROR: Package Modia errored during testing
Stacktrace:
 [1] pkgerror(::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Types.jl:52
 [2] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Operations.jl:1516
 [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:316
 [4] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:303
 [5] #test#68 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:297 [inlined]
 [6] test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:297 [inlined]
 [7] #test#67 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:296 [inlined]
 [8] test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:296 [inlined]
 [9] test(::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:295
 [10] test(::String) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:295
 [11] top-level scope at none:16
