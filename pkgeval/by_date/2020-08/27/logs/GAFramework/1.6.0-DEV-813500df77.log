Julia Version 1.6.0-DEV.740
Commit 813500df77 (2020-08-27 17:25 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.2
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.2
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_eClUo9/Project.toml`
  [5789e2e9] FileIO v1.4.2
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_eClUo9/Manifest.toml`
  [5789e2e9] FileIO v1.4.2
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21723207499327
curgen: 20 fitness: 0.21723207499327
curgen: 30 fitness: 0.21723207499327
curgen: 40 fitness: 0.21723207499327
curgen: 50 fitness: 0.21723207499327
CoordinateCreature{Vector{Float64}}([0.2223609729059457], -0.21723207499327) 0.2223609729059457 -0.21723207499327
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.2582020803077563
curgen: 100 fitness: 3.25824515278501
curgen: 150 fitness: 3.258353422940017
curgen: 200 fitness: 3.258356574166304
curgen: 250 fitness: 3.2583849150752138
curgen: 300 fitness: 3.258402340460211
curgen: 350 fitness: 3.2584066018789413
curgen: 400 fitness: 3.258409635715932
curgen: 450 fitness: 3.258409815158414
curgen: 500 fitness: 3.258428401358465
CoordinateCreature{Vector{Float64}}([0.22240325501151068, -0.22214485999349887, 0.22290560991300712, 0.22254496127610612, 0.22257655462248566, -0.2225452580467043, 0.22226027232614276, -0.22268147821949677, -0.2231433634263317, 0.2225448874291566, 0.22336140363627816, 0.22206039019373308, -0.22254340942221348, -0.22240576761054004, 0.22273160955286656], -3.258428401358465) [0.22240325501151068, -0.22214485999349887, 0.22290560991300712, 0.22254496127610612, 0.22257655462248566, -0.2225452580467043, 0.22226027232614276, -0.22268147821949677, -0.2231433634263317, 0.2225448874291566, 0.22336140363627816, 0.22206039019373308, -0.22254340942221348, -0.22240576761054004, 0.22273160955286656] -3.258428401358465
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.002864413039816327
curgen: 100 fitness: -0.0018026189406725734
curgen: 150 fitness: -0.001589661006192955
curgen: 200 fitness: -0.001589661006192955
curgen: 250 fitness: -0.0015845573510944178
curgen: 300 fitness: -0.0015362912916145888
curgen: 350 fitness: -0.0015096205710563027
curgen: 400 fitness: -0.0014751366113614495
curgen: 450 fitness: -0.0010234903167543052
curgen: 500 fitness: -0.0010234903167543052
CoordinateCreature{Vector{Float64}}([-0.00040239387672010864, 0.00039219243715630576, -0.001722375193794647, 7.658921281553956e-5, -0.0001662471979749631, -5.105150725832739e-5, 0.00014900492767979496, -0.00021686986808307424, 0.00015249198774477108, -0.00036220937546364504, -0.0008793945418573651, 0.0007869964095262264, 2.4529934276553618e-5, -2.093298736085828e-5, 0.00047235018520715524], 0.0010234903167543052) [-0.00040239387672010864, 0.00039219243715630576, -0.001722375193794647, 7.658921281553956e-5, -0.0001662471979749631, -5.105150725832739e-5, 0.00014900492767979496, -0.00021686986808307424, 0.00015249198774477108, -0.00036220937546364504, -0.0008793945418573651, 0.0007869964095262264, 2.4529934276553618e-5, -2.093298736085828e-5, 0.00047235018520715524] 0.0010234903167543052
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
