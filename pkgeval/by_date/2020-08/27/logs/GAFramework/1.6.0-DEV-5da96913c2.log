Julia Version 1.6.0-DEV.733
Commit 5da96913c2 (2020-08-26 17:46 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.2
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.2
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_psfwq8/Project.toml`
  [5789e2e9] FileIO v1.4.2
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_psfwq8/Manifest.toml`
  [5789e2e9] FileIO v1.4.2
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.2171657457990859
curgen: 20 fitness: 0.21723350480453665
curgen: 30 fitness: 0.21723350480453665
curgen: 40 fitness: 0.21723350480453665
curgen: 50 fitness: 0.21723350480453665
CoordinateCreature{Vector{Float64}}([0.22260095888376968], -0.21723350480453665) 0.22260095888376968 -0.21723350480453665
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.2580949664564325
curgen: 100 fitness: 3.258241090284039
curgen: 150 fitness: 3.258289053175488
curgen: 200 fitness: 3.2582908452992188
curgen: 250 fitness: 3.258307667970821
curgen: 300 fitness: 3.2584098642514228
curgen: 350 fitness: 3.258416721096153
curgen: 400 fitness: 3.2584471010239002
curgen: 450 fitness: 3.2584644312920346
curgen: 500 fitness: 3.2584688046936976
CoordinateCreature{Vector{Float64}}([0.22247303741064137, -0.22241426104212392, 0.22289181857593296, 0.22262981311732424, 0.22241860246128323, 0.22275102939805633, -0.2225446875691249, 0.2227034581498418, -0.22241862198142578, 0.22208067514573326, -0.22245927182250852, 0.22267085682870083, -0.22256573543557698, -0.22213073876553033, -0.22217387523794657], -3.2584688046936976) [0.22247303741064137, -0.22241426104212392, 0.22289181857593296, 0.22262981311732424, 0.22241860246128323, 0.22275102939805633, -0.2225446875691249, 0.2227034581498418, -0.22241862198142578, 0.22208067514573326, -0.22245927182250852, 0.22267085682870083, -0.22256573543557698, -0.22213073876553033, -0.22217387523794657] -3.2584688046936976
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.0018933104673521939
curgen: 100 fitness: -0.0016006584547483271
curgen: 150 fitness: -0.0016006584547483271
curgen: 200 fitness: -0.0014634401292710209
curgen: 250 fitness: -0.0013966076209612766
curgen: 300 fitness: -0.0013966076209612766
curgen: 350 fitness: -0.0012209627210495455
curgen: 400 fitness: -0.001192588756623536
curgen: 450 fitness: -0.0011018256960255712
curgen: 500 fitness: -0.0011018256960255712
CoordinateCreature{Vector{Float64}}([-0.00012146415027340998, -0.0004902826260494608, -0.00031393615816671053, -0.0002634216056614821, -0.0008638704378060998, 0.00014490421084813735, 0.0005953566451019703, 0.001054976447657614, 0.0010583930669959796, -0.0003590203093281054, -0.0003299189571148567, -0.0002817480473005472, 0.0005564498180606393, -0.001071608539039788, -2.685022807171573e-5], 0.0011018256960255712) [-0.00012146415027340998, -0.0004902826260494608, -0.00031393615816671053, -0.0002634216056614821, -0.0008638704378060998, 0.00014490421084813735, 0.0005953566451019703, 0.001054976447657614, 0.0010583930669959796, -0.0003590203093281054, -0.0003299189571148567, -0.0002817480473005472, 0.0005564498180606393, -0.001071608539039788, -2.685022807171573e-5] 0.0011018256960255712
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
