Julia Version 1.6.0-DEV.636
Commit 8554a216e7 (2020-08-14 06:59 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed UnPack ────────────── v1.0.2
  Installed CpuId ─────────────── v0.2.2
  Installed SIMDPirates ───────── v0.8.24
  Installed VectorizationBase ─── v0.12.31
  Installed OffsetArrays ──────── v1.1.2
  Installed SLEEFPirates ──────── v0.5.5
  Installed DocStringExtensions ─ v0.8.2
  Installed LoopVectorization ─── v0.8.23
Updating `~/.julia/environments/v1.6/Project.toml`
  [bdcacae8] + LoopVectorization v0.8.23
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [adafc99b] + CpuId v0.2.2
  [ffbed154] + DocStringExtensions v0.8.2
  [bdcacae8] + LoopVectorization v0.8.23
  [6fe1bfb0] + OffsetArrays v1.1.2
  [21efa798] + SIMDPirates v0.8.24
  [476501e8] + SLEEFPirates v0.5.5
  [3a884ed6] + UnPack v1.0.2
  [3d5dd08c] + VectorizationBase v0.12.31
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
   Building SLEEFPirates → `~/.julia/packages/SLEEFPirates/jGsib/deps/build.log`
    Testing LoopVectorization
Status `/tmp/jl_ZL1Ce8/Project.toml`
  [ffbed154] DocStringExtensions v0.8.2
  [bdcacae8] LoopVectorization v0.8.23
  [6fe1bfb0] OffsetArrays v1.1.2
  [21efa798] SIMDPirates v0.8.24
  [476501e8] SLEEFPirates v0.5.5
  [3a884ed6] UnPack v1.0.2
  [3d5dd08c] VectorizationBase v0.12.31
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [8dfed614] Test
Status `/tmp/jl_ZL1Ce8/Manifest.toml`
  [adafc99b] CpuId v0.2.2
  [ffbed154] DocStringExtensions v0.8.2
  [bdcacae8] LoopVectorization v0.8.23
  [6fe1bfb0] OffsetArrays v1.1.2
  [21efa798] SIMDPirates v0.8.24
  [476501e8] SLEEFPirates v0.5.5
  [3a884ed6] UnPack v1.0.2
  [3d5dd08c] VectorizationBase v0.12.31
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
LoopVectorization.REGISTER_COUNT = 32
#= /home/pkgeval/.julia/packages/LoopVectorization/ekkeV/test/printmethods.jl:2 =# @__LINE__() = 2
  6.328011 seconds (2.75 M allocations: 154.959 MiB, 1.11% gc time)
(Float64, #= /home/pkgeval/.julia/packages/LoopVectorization/ekkeV/test/fallback.jl:4 =# @__LINE__()) = (Float64, 4)
 28.247736 seconds (11.97 M allocations: 677.128 MiB, 2.44% gc time)
  0.146772 seconds (75.43 k allocations: 4.582 MiB, 10.25% gc time)
  8.356992 seconds (7.36 M allocations: 417.799 MiB, 1.80% gc time)
  1.909758 seconds (2.17 M allocations: 121.571 MiB, 2.76% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ekkeV/test/offsetarrays.jl:204 =# @__LINE__()) = (Float32, 204)
r = -1:1
r = -2:2
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ekkeV/test/offsetarrays.jl:204 =# @__LINE__()) = (Float64, 204)
r = -1:1
r = -2:2
674.125708 seconds (299.11 M allocations: 24.141 GiB, 4.48% gc time)
(Float64, #= /home/pkgeval/.julia/packages/LoopVectorization/ekkeV/test/tensors.jl:51 =# @__LINE__()) = (Float64, 51)
 18.779080 seconds (12.83 M allocations: 757.484 MiB, 2.73% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ekkeV/test/map.jl:4 =# @__LINE__()) = (Float32, 4)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ekkeV/test/map.jl:4 =# @__LINE__()) = (Float64, 4)
  7.454211 seconds (7.06 M allocations: 398.857 MiB, 6.82% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ekkeV/test/filter.jl:4 =# @__LINE__()) = (Float32, 4)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ekkeV/test/filter.jl:4 =# @__LINE__()) = (Float64, 4)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ekkeV/test/filter.jl:4 =# @__LINE__()) = (Int32, 4)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ekkeV/test/filter.jl:4 =# @__LINE__()) = (Int64, 4)
  1.084114 seconds (792.81 k allocations: 46.543 MiB, 1.62% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ekkeV/test/mapreduce.jl:19 =# @__LINE__()) = (Int32, 19)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ekkeV/test/mapreduce.jl:19 =# @__LINE__()) = (Int64, 19)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ekkeV/test/mapreduce.jl:19 =# @__LINE__()) = (Float32, 19)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ekkeV/test/mapreduce.jl:19 =# @__LINE__()) = (Float64, 19)
197.210815 seconds (442.36 M allocations: 29.242 GiB, 7.30% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ekkeV/test/ifelsemasks.jl:321 =# @__LINE__()) = (Float32, 321)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ekkeV/test/ifelsemasks.jl:321 =# @__LINE__()) = (Float64, 321)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ekkeV/test/ifelsemasks.jl:321 =# @__LINE__()) = (Int32, 321)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ekkeV/test/ifelsemasks.jl:321 =# @__LINE__()) = (Int64, 321)
 75.744656 seconds (50.26 M allocations: 2.748 GiB, 5.98% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ekkeV/test/dot.jl:234 =# @__LINE__()) = (Float32, 234)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ekkeV/test/dot.jl:234 =# @__LINE__()) = (Float64, 234)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ekkeV/test/dot.jl:234 =# @__LINE__()) = (Int32, 234)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ekkeV/test/dot.jl:234 =# @__LINE__()) = (Int64, 234)
 45.141856 seconds (38.96 M allocations: 2.189 GiB, 2.79% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ekkeV/test/special.jl:339 =# @__LINE__()) = (Float32, 339)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ekkeV/test/special.jl:339 =# @__LINE__()) = (Float64, 339)
 15.500433 seconds (12.82 M allocations: 691.535 MiB, 2.06% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ekkeV/test/gemv.jl:211 =# @__LINE__()) = (Float32, 211)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ekkeV/test/gemv.jl:211 =# @__LINE__()) = (Float64, 211)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ekkeV/test/gemv.jl:211 =# @__LINE__()) = (Int32, 211)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ekkeV/test/gemv.jl:211 =# @__LINE__()) = (Int64, 211)
 66.899185 seconds (51.40 M allocations: 2.575 GiB, 2.60% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ekkeV/test/miscellaneous.jl:757 =# @__LINE__()) = (Float32, 757)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ekkeV/test/miscellaneous.jl:757 =# @__LINE__()) = (Float64, 757)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ekkeV/test/miscellaneous.jl:1030 =# @__LINE__()) = (Float32, 1030)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ekkeV/test/miscellaneous.jl:1030 =# @__LINE__()) = (Float64, 1030)
118.539407 seconds (126.38 M allocations: 7.042 GiB, 6.08% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ekkeV/test/copy.jl:129 =# @__LINE__()) = (Float32, 129)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ekkeV/test/copy.jl:129 =# @__LINE__()) = (Float64, 129)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ekkeV/test/copy.jl:129 =# @__LINE__()) = (Int32, 129)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ekkeV/test/copy.jl:129 =# @__LINE__()) = (Int64, 129)
 10.925125 seconds (8.54 M allocations: 463.100 MiB, 3.07% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ekkeV/test/broadcast.jl:5 =# @__LINE__()) = (Float32, 5)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ekkeV/test/broadcast.jl:5 =# @__LINE__()) = (Float64, 5)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ekkeV/test/broadcast.jl:5 =# @__LINE__()) = (Int32, 5)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ekkeV/test/broadcast.jl:5 =# @__LINE__()) = (Int64, 5)
346.170228 seconds (130.38 M allocations: 8.012 GiB, 3.66% gc time)
OPS = Tuple{:numericconstant,Symbol("##zero#13942"),LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x01, 0x02),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000032, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x03),:LoopVectorization,:vfmadd_fast,LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000020301, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:identity,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000004, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x04),:LoopVectorization,:vadd,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000605, LoopVectorization.compute, 0x00, 0x04),:LoopVectorization,:setindex!,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000007, LoopVectorization.memstore, 0x03, 0x05)}
ARF = Tuple{LoopVectorization.ArrayRefStruct{:A,Symbol("##vptr##_A")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:B,Symbol("##vptr##_B")}(0x0000000000000101, 0x0000000000000302, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:C,Symbol("##vptr##_C")}(0x0000000000000101, 0x0000000000000102, 0x0000000000000000)}
AM = Tuple{0,Tuple{},Tuple{},Tuple{},Tuple{},Tuple{(1, LoopVectorization.IntOrFloat)},Tuple{}}
LPSYM = Tuple{:m,:n,:k}
LB = Tuple{VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1}}
vargs = (VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007f6d93f92510, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007f6d93f92740, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007f6d93f927b0, (16,)))
OPS = Tuple{:numericconstant,Symbol("##zero#13942"),LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x01, 0x02),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000032, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x03),:LoopVectorization,:vfmadd_fast,LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000020301, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:identity,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000004, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x04),:LoopVectorization,:vadd,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000605, LoopVectorization.compute, 0x00, 0x04),:LoopVectorization,:setindex!,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000007, LoopVectorization.memstore, 0x03, 0x05)}
ARF = Tuple{LoopVectorization.ArrayRefStruct{:A,Symbol("##vptr##_A")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:B,Symbol("##vptr##_B")}(0x0000000000000101, 0x0000000000000302, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:C,Symbol("##vptr##_C")}(0x0000000000000101, 0x0000000000000102, 0x0000000000000000)}
AM = Tuple{0,Tuple{},Tuple{},Tuple{},Tuple{},Tuple{(1, LoopVectorization.IntOrFloat)},Tuple{}}
LPSYM = Tuple{:m,:n,:k}
LB = Tuple{VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1}}
vargs = (VectorizationBase.RowMajorStridedPointer{Float64,1}(Ptr{Float64} @0x00007f6d866db4d0, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007f6d866db540, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007f6d86664750, (16,)))
OPS = Tuple{:numericconstant,Symbol("##zero#13942"),LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x01, 0x02),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000032, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x03),:LoopVectorization,:vfmadd_fast,LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000020301, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:identity,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000004, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x04),:LoopVectorization,:vadd,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000605, LoopVectorization.compute, 0x00, 0x04),:LoopVectorization,:setindex!,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000007, LoopVectorization.memstore, 0x03, 0x05)}
ARF = Tuple{LoopVectorization.ArrayRefStruct{:A,Symbol("##vptr##_A")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:B,Symbol("##vptr##_B")}(0x0000000000000101, 0x0000000000000302, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:C,Symbol("##vptr##_C")}(0x0000000000000101, 0x0000000000000102, 0x0000000000000000)}
AM = Tuple{0,Tuple{},Tuple{},Tuple{},Tuple{},Tuple{(1, LoopVectorization.IntOrFloat)},Tuple{}}
LPSYM = Tuple{:m,:n,:k}
LB = Tuple{VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1}}
vargs = (VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007f6d84148c20, (16,)), VectorizationBase.RowMajorStridedPointer{Float64,1}(Ptr{Float64} @0x00007f6d84148c90, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007f6d84148d00, (16,)))
OPS = Tuple{:numericconstant,Symbol("##zero#13942"),LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x01, 0x02),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000032, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x03),:LoopVectorization,:vfmadd_fast,LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000020301, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:identity,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000004, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x04),:LoopVectorization,:vadd,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000605, LoopVectorization.compute, 0x00, 0x04),:LoopVectorization,:setindex!,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000007, LoopVectorization.memstore, 0x03, 0x05)}
ARF = Tuple{LoopVectorization.ArrayRefStruct{:A,Symbol("##vptr##_A")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:B,Symbol("##vptr##_B")}(0x0000000000000101, 0x0000000000000302, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:C,Symbol("##vptr##_C")}(0x0000000000000101, 0x0000000000000102, 0x0000000000000000)}
AM = Tuple{0,Tuple{},Tuple{},Tuple{},Tuple{},Tuple{(1, LoopVectorization.IntOrFloat)},Tuple{}}
LPSYM = Tuple{:m,:n,:k}
LB = Tuple{VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1}}
vargs = (VectorizationBase.RowMajorStridedPointer{Float64,1}(Ptr{Float64} @0x00007f6d87cecb40, (16,)), VectorizationBase.RowMajorStridedPointer{Float64,1}(Ptr{Float64} @0x00007f6d87cecbb0, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007f6d87cecc20, (16,)))
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ekkeV/test/gemm.jl:650 =# @__LINE__()) = (Float32, 650)
 88.097065 seconds (45.36 M allocations: 3.332 GiB, 5.92% gc time)
 12.353067 seconds (8.48 M allocations: 453.187 MiB, 6.83% gc time)
 18.173387 seconds (11.44 M allocations: 683.942 MiB, 3.06% gc time)
 10.913979 seconds (8.21 M allocations: 469.624 MiB, 4.55% gc time)
 24.802189 seconds (12.90 M allocations: 856.891 MiB, 8.41% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ekkeV/test/gemm.jl:650 =# @__LINE__()) = (Float64, 650)
 94.277176 seconds (44.88 M allocations: 3.305 GiB, 5.56% gc time)
 11.704061 seconds (8.41 M allocations: 450.311 MiB)
 16.732024 seconds (11.27 M allocations: 675.420 MiB)
  9.676825 seconds (8.17 M allocations: 467.429 MiB)
 20.399105 seconds (12.77 M allocations: 849.191 MiB, 6.99% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ekkeV/test/gemm.jl:650 =# @__LINE__()) = (Int32, 650)
124.211360 seconds (49.89 M allocations: 3.530 GiB, 4.75% gc time)
 13.789886 seconds (8.95 M allocations: 470.201 MiB)
 19.210519 seconds (10.47 M allocations: 616.717 MiB)
 14.016670 seconds (8.68 M allocations: 486.269 MiB, 10.34% gc time)
 24.033458 seconds (13.23 M allocations: 863.947 MiB, 2.77% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ekkeV/test/gemm.jl:650 =# @__LINE__()) = (Int64, 650)
120.337536 seconds (49.81 M allocations: 3.527 GiB, 4.05% gc time)
 14.263334 seconds (8.92 M allocations: 469.345 MiB)
 19.520082 seconds (10.34 M allocations: 610.705 MiB)
 13.561169 seconds (8.65 M allocations: 485.060 MiB, 8.09% gc time)
 24.178553 seconds (13.22 M allocations: 863.830 MiB, 4.32% gc time)
703.225835 seconds (356.80 M allocations: 23.403 GiB, 4.43% gc time)
Test Summary:        | Pass  Total
LoopVectorization.jl | 1705   1705
2327.049059 seconds (1.56 G allocations: 103.070 GiB, 4.55% gc time)
    Testing LoopVectorization tests passed 
