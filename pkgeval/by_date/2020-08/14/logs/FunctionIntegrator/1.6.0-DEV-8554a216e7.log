Julia Version 1.6.0-DEV.636
Commit 8554a216e7 (2020-08-14 06:59 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed FastGaussQuadrature ────────── v0.4.2
  Installed FunctionIntegrator ─────────── v0.5.1
  Installed SpecialFunctions ───────────── v0.10.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [7685536e] + FunctionIntegrator v0.5.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [442a2c76] + FastGaussQuadrature v0.4.2
  [7685536e] + FunctionIntegrator v0.5.1
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [276daf66] + SpecialFunctions v0.10.3
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing FunctionIntegrator
Status `/tmp/jl_BMxxAZ/Project.toml`
  [442a2c76] FastGaussQuadrature v0.4.2
  [7685536e] FunctionIntegrator v0.5.1
  [276daf66] SpecialFunctions v0.10.3
  [8dfed614] Test
Status `/tmp/jl_BMxxAZ/Manifest.toml`
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [442a2c76] FastGaussQuadrature v0.4.2
  [7685536e] FunctionIntegrator v0.5.1
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [276daf66] SpecialFunctions v0.10.3
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Performing the Airy Ai(x) test, where Ai(x) is integrated on the semi-infinite domain, or an approximation of it, namely [0,100] and the result is compared to the analytical result 1/3.
Running: adaptive_simpsons_rule
  0.953086 seconds (1.34 M allocations: 70.801 MiB, 7.86% gc time)
Running: chebyshev_quadrature with k=1
  1.655128 seconds (2.24 M allocations: 128.561 MiB, 2.94% gc time)
Running: chebyshev_quadrature with k=2
  0.321988 seconds (425.06 k allocations: 24.391 MiB)
Running: chebyshev_quadrature with k=3
  0.391774 seconds (544.92 k allocations: 29.872 MiB, 5.22% gc time)
Running: chebyshev_quadrature with k=4
  0.335143 seconds (487.80 k allocations: 26.409 MiB)
Running: jacobi_quadrature with α=β=1
 46.727573 seconds (39.37 M allocations: 3.137 GiB, 9.91% gc time)
Running: laguerre_quadrature with k=1
  3.248323 seconds (3.33 M allocations: 185.708 MiB, 3.03% gc time)
Running: legendre_quadrature
  0.274234 seconds (215.06 k allocations: 12.320 MiB, 11.68% gc time)
Running: lobatto_quadrature
  0.348088 seconds (343.28 k allocations: 20.556 MiB)
Running: radau_quadrature
  0.328318 seconds (325.61 k allocations: 19.557 MiB, 9.66% gc time)
Running: rectangle_rule_left. Only a rough approximation can be practically achieved using this function.
 84.086834 seconds (100.02 M allocations: 1.491 GiB, 0.27% gc time)
Running: rectangle_rule_midpoint.
  0.175719 seconds (173.73 k allocations: 3.887 MiB)
Running: rectangle_rule_right. Only a rough approximation can be practically achieved using this function.
 81.579573 seconds (100.02 M allocations: 1.491 GiB, 0.25% gc time)
Running: rombergs_method
  0.683130 seconds (752.70 k allocations: 43.312 MiB, 4.81% gc time)
Running: simpsons_rule
  0.054624 seconds (47.35 k allocations: 2.120 MiB)
Running: simpsons38_rule
  0.103563 seconds (113.20 k allocations: 5.979 MiB)
Running: trapezoidal_rule
  0.338771 seconds (1.52 M allocations: 25.802 MiB)
Test Summary: | Pass  Total
Airy Ai(x)    |   17     17
Performing the besselj test, where BesselJ_1(2) is approximated and the result is compared to the value obtained from SpecialFunctions' besselj function.
Running: adaptive_simpsons_rule with ε=1e-7
  0.092401 seconds (32.63 k allocations: 1.943 MiB)
Running: chebyshev_quadrature with k=1
  0.451698 seconds (275.41 k allocations: 13.963 MiB)
Running: chebyshev_quadrature with k=2
  0.184869 seconds (115.72 k allocations: 3.793 MiB, 14.17% gc time)
Running: chebyshev_quadrature with k=3
  0.161513 seconds (105.07 k allocations: 3.639 MiB)
Running: chebyshev_quadrature with k=4
  0.215133 seconds (87.68 k allocations: 3.285 MiB)
Running: jacobi_quadrature with α=β=1
  1.344649 seconds (536.16 k allocations: 163.495 MiB, 2.89% gc time)
Running: legendre_quadrature
  0.154578 seconds (62.24 k allocations: 3.471 MiB)
Running: lobatto_quadrature
  0.021344 seconds (16.72 k allocations: 1.030 MiB)
Running: radau_quadrature
  0.035485 seconds (16.71 k allocations: 1.030 MiB, 39.13% gc time)
Running: rectangle_rule_left
 30.475216 seconds (471.41 M allocations: 7.025 GiB, 2.49% gc time)
Running: rectangle_rule_midpoint
  0.000024 seconds (45 allocations: 1.047 KiB)
Running: rectangle_rule_right
 29.627401 seconds (476.96 M allocations: 7.107 GiB, 2.62% gc time)
Running: rombergs_method
  0.393270 seconds (360.22 k allocations: 20.310 MiB, 1.78% gc time)
Running: simpsons_rule
  0.000036 seconds (85 allocations: 1.672 KiB)
Running: simpsons38_rule
  0.068531 seconds (19.90 k allocations: 1.194 MiB)
Running: trapezoidal_rule
  0.059294 seconds (18.35 k allocations: 1.099 MiB)
Test Summary: | Pass  Total
besselj       |   16     16
Integrating cos^2(x)/(1+cot(x)) from 0 to pi/2 and comparing the results to the analytical result 0.25.
Running: adaptive_simpsons_rule with ε=1e-7
  0.030519 seconds (1.99 k allocations: 53.594 KiB)
Running: chebyshev_quadrature with k=1
  0.098672 seconds (2.40 k allocations: 113.453 KiB)
Running: chebyshev_quadrature with k=2
  0.101079 seconds (2.65 k allocations: 121.469 KiB)
Running: chebyshev_quadrature with k=3
  0.108192 seconds (3.08 k allocations: 133.688 KiB)
Running: chebyshev_quadrature with k=4
  0.112919 seconds (3.08 k allocations: 133.750 KiB)
Running: jacobi_quadrature with α=β=1
  0.399370 seconds (379.00 k allocations: 19.794 MiB, 9.76% gc time)
Running: legendre_quadrature
  0.083347 seconds (1.24 k allocations: 63.609 KiB)
Running: lobatto_quadrature
  0.000089 seconds (67 allocations: 2.844 KiB)
Running: radau_quadrature
  0.000033 seconds (71 allocations: 3.078 KiB)
Running: rectangle_rule_left
  0.000512 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_midpoint
  0.000348 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right
  0.000493 seconds (9 allocations: 496 bytes)
Running: rombergs_method
  0.110027 seconds (1.01 k allocations: 54.109 KiB)
Running: simpsons_rule
  0.000054 seconds (323 allocations: 5.391 KiB)
Running: simpsons38_rule
  0.033448 seconds (923 allocations: 39.281 KiB)
Running: trapezoidal_rule
  0.026892 seconds (44.33 k allocations: 704.859 KiB)
Test Summary: | Pass  Total
coscotint     |   16     16
Integrating cosine from 0 to pi/2 and comparing the result to the analytical result of 1.
Running: adaptive_simpsons_rule
  0.063756 seconds (75.84 k allocations: 4.401 MiB)
Running: chebyshev_quadrature with k=1
  0.186616 seconds (240.25 k allocations: 13.487 MiB)
Running: chebyshev_quadrature with k=2
  0.225747 seconds (295.45 k allocations: 16.574 MiB)
Running: chebyshev_quadrature with k=3
  0.217397 seconds (275.41 k allocations: 14.982 MiB)
Running: chebyshev_quadrature with k=4
  0.223835 seconds (275.44 k allocations: 14.879 MiB)
Running: jacobi_quadrature with α=β=1
  2.540312 seconds (465.76 k allocations: 164.227 MiB, 5.89% gc time)
Running: legendre_quadrature
  0.165213 seconds (193.00 k allocations: 11.129 MiB)
Running: lobatto_quadrature
  0.174497 seconds (204.21 k allocations: 11.810 MiB)
Running: radau_quadrature
  0.240525 seconds (204.20 k allocations: 11.829 MiB, 11.68% gc time)
Running: rectangle_rule_left
  1.257894 seconds (19.76 k allocations: 1.194 MiB)
Running: rectangle_rule_midpoint
  0.027199 seconds (25.93 k allocations: 1.615 MiB)
Running: rectangle_rule_right
  1.123720 seconds (18.27 k allocations: 1.105 MiB)
Running: rombergs_method
  0.172119 seconds (139.91 k allocations: 8.067 MiB)
Running: simpsons_rule
  0.033090 seconds (29.02 k allocations: 1.803 MiB)
Running: simpsons38_rule
  0.038549 seconds (44.65 k allocations: 2.787 MiB)
Running: trapezoidal_rule
  0.031316 seconds (45.20 k allocations: 1.824 MiB)
Test Summary: | Pass  Total
Cosine        |   16     16
Integrating e^(-x^2)/(1+x^2) on the infinite domain [-inf, inf], or failing that on [-100,100], and comparing it to the analytical result exp(1)*pi*erfc(1)
Running: adaptive_simpsons_rule with ε=1e-7
  0.042113 seconds (101.41 k allocations: 3.075 MiB)
Running: chebyshev_quadrature with k=1
  0.194942 seconds (247.35 k allocations: 13.587 MiB)
Running: chebyshev_quadrature with k=2
  0.238571 seconds (303.08 k allocations: 16.587 MiB, 8.72% gc time)
Running: chebyshev_quadrature with k=3
  0.213554 seconds (282.82 k allocations: 15.002 MiB)
Running: chebyshev_quadrature with k=4
  0.217179 seconds (282.85 k allocations: 15.010 MiB)
Running: hermite_quadrature with k=2
 15.006123 seconds (22.12 M allocations: 1.147 GiB, 7.32% gc time)
Running: jacobi_quadrature with α=β=1
  0.553413 seconds (475.79 k allocations: 50.444 MiB, 9.76% gc time)
Running: laguerre_quadrature with k=1 and multiplying the result by 2 (as Laguerre is only on the semi-infinite domain)
  0.241531 seconds (288.35 k allocations: 15.898 MiB)
Running: legendre_quadrature
  0.214463 seconds (200.06 k allocations: 11.455 MiB, 19.18% gc time)
Running: lobatto_quadrature
  0.235309 seconds (225.72 k allocations: 37.626 MiB)
Running: radau_quadrature
  0.247431 seconds (222.31 k allocations: 30.290 MiB, 9.63% gc time)
Running: rectangle_rule_left
  0.029765 seconds (22.91 k allocations: 1.353 MiB)
Running: rectangle_rule_midpoint
  0.029334 seconds (27.88 k allocations: 1.711 MiB)
Running: rectangle_rule_right
  0.026886 seconds (19.48 k allocations: 1.166 MiB)
Running: rombergs_method
  0.127737 seconds (142.73 k allocations: 8.122 MiB)
Running: simpsons_rule
  0.041290 seconds (41.25 k allocations: 2.157 MiB)
Running: simpsons38_rule
  0.047192 seconds (60.02 k allocations: 3.196 MiB)
Running: trapezoidal_rule
  0.034467 seconds (31.57 k allocations: 1.770 MiB)
Test Summary: | Pass  Total
expnx2datan   |   18     18
Integrate exp(-x^2) from minus infinity to positive infinity and comparing the result to the analytical solution, sqrt(pi)
Running: adaptive_simpsons_rule with ε=1e-7
  0.042579 seconds (61.51 k allocations: 2.360 MiB)
Running: chebyshev_quadrature with k=1
  0.245286 seconds (242.48 k allocations: 13.352 MiB, 11.45% gc time)
Running: chebyshev_quadrature with k=2
  0.241726 seconds (297.80 k allocations: 16.314 MiB)
Running: chebyshev_quadrature with k=3
  0.230121 seconds (277.68 k allocations: 14.770 MiB)
Running: chebyshev_quadrature with k=4
  0.270916 seconds (277.71 k allocations: 14.784 MiB, 10.72% gc time)
Running: hermite_quadrature with k=2
  0.162338 seconds (177.71 k allocations: 10.219 MiB)
Running: jacobi_quadrature with α=β=1
 11.045524 seconds (468.36 k allocations: 1.176 GiB, 17.79% gc time)
Running: laguerre_quadrature (results multiplied by 2, as laguerre only integrates over the semi-infinite domain)
  0.237368 seconds (283.21 k allocations: 15.693 MiB)
Running: legendre_quadrature
  0.213481 seconds (195.23 k allocations: 11.220 MiB)
Running: lobatto_quadrature
  0.237782 seconds (216.08 k allocations: 23.332 MiB)
Running: radau_quadrature
  0.390168 seconds (215.23 k allocations: 21.263 MiB, 45.60% gc time)
Running: rectangle_rule_left
  0.028561 seconds (20.47 k allocations: 1.235 MiB)
Running: rectangle_rule_midpoint
  0.028884 seconds (26.65 k allocations: 1.653 MiB)
Running: rectangle_rule_right
  0.025814 seconds (18.24 k allocations: 1.106 MiB)
Running: rombergs_method
  0.132351 seconds (138.20 k allocations: 7.940 MiB)
Running: simpsons_rule
  0.036965 seconds (33.49 k allocations: 1.931 MiB)
Running: simpsons38_rule
  0.042891 seconds (50.55 k allocations: 2.939 MiB)
Running: trapezoidal_rule
  0.031276 seconds (26.25 k allocations: 1.593 MiB)
Test Summary: | Pass  Total
Gaussian      |   18     18
Integrating 1/x from 1 to e and comparing the result to the analytical solution, 1.
Running: adaptive_simpsons_rule with ε=1e-7
  0.035629 seconds (32.48 k allocations: 1.957 MiB)
Running: chebyshev_quadrature with k=1
  0.272344 seconds (240.81 k allocations: 13.568 MiB)
Running: chebyshev_quadrature with k=2
  0.291331 seconds (296.03 k allocations: 16.652 MiB, 12.27% gc time)
Running: chebyshev_quadrature with k=3
  0.279505 seconds (276.01 k allocations: 14.982 MiB)
Running: chebyshev_quadrature with k=4
  0.238895 seconds (276.04 k allocations: 14.813 MiB)
Running: jacobi_quadrature with α=β=1
  3.134315 seconds (466.40 k allocations: 195.253 MiB, 5.64% gc time)
Running: legendre_quadrature
  0.183747 seconds (193.56 k allocations: 11.138 MiB)
Running: lobatto_quadrature
  0.187611 seconds (204.77 k allocations: 11.853 MiB)
Running: radau_quadrature
  0.203042 seconds (204.77 k allocations: 11.846 MiB, 9.04% gc time)
Running: rectangle_rule_left
  0.314133 seconds (20.33 k allocations: 1.222 MiB)
Running: rectangle_rule_midpoint
  0.027927 seconds (26.30 k allocations: 1.635 MiB)
Running: rectangle_rule_right
  0.177130 seconds (18.64 k allocations: 1.125 MiB)
Running: rombergs_method
  0.161989 seconds (151.28 k allocations: 8.811 MiB)
Running: simpsons_rule
  0.033822 seconds (29.77 k allocations: 1.835 MiB)
Running: simpsons38_rule
  0.037042 seconds (45.42 k allocations: 2.821 MiB)
Running: trapezoidal_rule
  0.027658 seconds (46.19 k allocations: 1.861 MiB)
Test Summary: | Pass  Total
1/x           |   16     16
Integrating log(x)/x from 1 to e and comparing the result to the analytical solution of 0.5.
Running: adaptive_simpsons_rule with ε=1e-7
  0.037253 seconds (33.24 k allocations: 1.906 MiB)
Running: chebyshev_quadrature with k=1
  0.229614 seconds (241.38 k allocations: 13.511 MiB)
Running: chebyshev_quadrature with k=2
  0.292196 seconds (296.63 k allocations: 16.566 MiB, 14.67% gc time)
Running: chebyshev_quadrature with k=3
  0.211299 seconds (276.54 k allocations: 14.902 MiB)
Running: chebyshev_quadrature with k=4
  0.237099 seconds (276.58 k allocations: 14.981 MiB)
Running: jacobi_quadrature with α=β=1
  1.840566 seconds (467.06 k allocations: 149.919 MiB, 5.44% gc time)
Running: legendre_quadrature
  0.270671 seconds (194.13 k allocations: 11.150 MiB)
Running: lobatto_quadrature
  0.176652 seconds (205.35 k allocations: 11.921 MiB)
Running: radau_quadrature
  0.209051 seconds (205.34 k allocations: 11.858 MiB, 10.36% gc time)
Running: rectangle_rule_left
  1.424944 seconds (20.60 k allocations: 1.236 MiB)
Running: rectangle_rule_midpoint
  0.035582 seconds (26.29 k allocations: 1.635 MiB)
Running: rectangle_rule_right
  1.338488 seconds (18.61 k allocations: 1.124 MiB)
Running: rombergs_method
  0.139590 seconds (141.21 k allocations: 8.136 MiB)
Running: simpsons_rule
  0.037883 seconds (30.52 k allocations: 1.863 MiB)
Running: simpsons38_rule
  0.037102 seconds (46.17 k allocations: 2.850 MiB)
Running: trapezoidal_rule
  0.030906 seconds (58.45 k allocations: 2.062 MiB)
Test Summary: | Pass  Total
log(x)/x      |   16     16
Approximating the modified bessel function I_1(1) and comparing it to the result obtained by SpecialFunctions.
Running: adaptive_simpsons_rule with ε=1e-7
  0.174733 seconds (152.84 k allocations: 9.083 MiB)
Running: chebyshev_quadrature with k=1
  0.152054 seconds (91.24 k allocations: 3.295 MiB)
Running: chebyshev_quadrature with k=2
  0.206732 seconds (127.01 k allocations: 3.988 MiB)
Running: chebyshev_quadrature with k=3
  0.165803 seconds (115.58 k allocations: 3.818 MiB)
Running: chebyshev_quadrature with k=4
  0.202329 seconds (95.11 k allocations: 3.411 MiB, 14.14% gc time)
Running: jacobi_quadrature with α=β=1
  2.232296 seconds (509.88 k allocations: 169.311 MiB, 4.88% gc time)
Running: legendre_quadrature
  0.124938 seconds (38.34 k allocations: 2.107 MiB)
Running: lobatto_quadrature
  0.000113 seconds (150 allocations: 4.328 KiB)
Running: radau_quadrature
  0.000055 seconds (148 allocations: 4.375 KiB)
Running: rectangle_rule_left
 48.686787 seconds (590.00 M allocations: 8.792 GiB, 3.14% gc time)
Running: rectangle_rule_midpoint
  0.000045 seconds (40 allocations: 992 bytes)
Running: rectangle_rule_right
 47.626403 seconds (592.75 M allocations: 8.833 GiB, 2.90% gc time)
Running: rombergs_method
  0.146147 seconds (41.88 k allocations: 2.257 MiB)
Running: simpsons_rule
  0.000063 seconds (93 allocations: 1.797 KiB)
Running: simpsons38_rule
  0.030988 seconds (463 allocations: 22.578 KiB)
Running: trapezoidal_rule
  0.024479 seconds (179 allocations: 8.766 KiB)
Test Summary: | Pass  Total
modbessel0    |   16     16
Integrating 1/sqrt(-19.6 sin(x)) from -pi to 0 and comparing the result to the analytical solution of ellipk(1/2)/sqrt(2.45) The integrand has singularities at x = -pi and x=0, so for some of these functions the integration domain has to be itself approximated.
Running: adaptive_simpsons_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 32.564957 seconds (629.34 M allocations: 9.388 GiB, 4.76% gc time)
Running: chebyshev_quadrature with k=1
  0.579963 seconds (439.14 k allocations: 24.258 MiB)
Running: chebyshev_quadrature with k=2
 13.742616 seconds (496.50 k allocations: 4.042 GiB, 3.98% gc time)
Running: chebyshev_quadrature with k=3
  5.893322 seconds (290.50 k allocations: 1.643 GiB, 5.74% gc time)
Running: chebyshev_quadrature with k=4
  8.053512 seconds (290.53 k allocations: 2.262 GiB, 2.50% gc time)
Running: jacobi_quadrature with α=β=1. The N value required to get an accurate result is too high to be practical, so only a rough approximation can be arrived at.
 54.952602 seconds (505.20 k allocations: 13.255 GiB, 2.69% gc time)
Running: legendre_quadrature.
  5.862170 seconds (232.83 k allocations: 1.976 GiB, 1.78% gc time)
The following integration functions have to use an approximated domain due to the endpoint singularities.
Running: lobatto_quadrature on [-pi+1e-6, -1e-6]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 51.219335 seconds (8.24 M allocations: 13.384 GiB, 3.40% gc time)
Running: radau_quadrature on [-pi+1e-6, -1e-6]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 53.684723 seconds (7.24 M allocations: 13.369 GiB, 3.38% gc time)
Running: rectangle_rule_left on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  3.053745 seconds (23.35 k allocations: 1.402 MiB)
Running: rectangle_rule_midpoint on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  3.460826 seconds (31.97 k allocations: 1.959 MiB)
Running: rectangle_rule_right on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  3.130071 seconds (23.57 k allocations: 1.413 MiB)
Running: rombergs_method on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  1.161110 seconds (456.60 k allocations: 153.696 MiB)
Running: simpsons_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 40.576275 seconds (600.04 M allocations: 8.943 GiB, 8.09% gc time)
Running: simpsons38_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 41.198553 seconds (600.05 M allocations: 8.944 GiB, 8.02% gc time)
Running: trapezoidal_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 40.157509 seconds (600.04 M allocations: 8.943 GiB, 8.24% gc time)
Test Summary: | Pass  Total
Simppen       |   16     16
Integrating sin(x^2)e^(-x)/x from 0 to infinity, with the approximated domain of integration of 0 to 100. The removable singularity at x=0 in the integrand has been removed.
Running: adaptive_simpsons_rule with ε=1e-8
  0.069939 seconds (182.51 k allocations: 4.517 MiB)
Running: chebyshev_quadrature with k=1
  0.259550 seconds (257.97 k allocations: 14.018 MiB)
Running: chebyshev_quadrature with k=2
  0.272488 seconds (284.13 k allocations: 15.183 MiB)
Running: chebyshev_quadrature with k=3
  0.244163 seconds (260.62 k allocations: 13.472 MiB)
Running: chebyshev_quadrature with k=4
  0.266187 seconds (260.65 k allocations: 13.452 MiB)
Running: jacobi_quadrature with α=β=1
  0.453890 seconds (405.37 k allocations: 35.866 MiB)
Running: laguerre_quadrature with k=2
  0.228251 seconds (187.97 k allocations: 10.871 MiB)
Running: legendre_quadrature
  0.164625 seconds (151.74 k allocations: 8.407 MiB)
Running: lobatto_quadrature
  0.054088 seconds (10.88 k allocations: 15.109 MiB)
Running: radau_quadrature
  0.042472 seconds (9.66 k allocations: 13.183 MiB)
Running: rectangle_rule_left
  0.064083 seconds (19.81 k allocations: 1.170 MiB)
Running: rectangle_rule_midpoint
  0.053654 seconds (26.77 k allocations: 1.640 MiB)
Running: rectangle_rule_right
  0.058268 seconds (18.36 k allocations: 1.094 MiB)
Running: rombergs_method
  0.283373 seconds (170.81 k allocations: 9.738 MiB)
Running: simpsons_rule
  0.001983 seconds (24.72 k allocations: 386.656 KiB)
Running: simpsons38_rule
  0.060593 seconds (81.45 k allocations: 3.520 MiB)
Running: trapezoidal_rule
  0.217155 seconds (2.39 M allocations: 37.757 MiB)
Test Summary: | Pass  Total
sinexpox      |   17     17
Integrating sin(x)/x from 0 to 100 and comparing it to the exact result.
Running: adaptive_simpsons_rule with ε=1e-8
  0.002111 seconds (30.71 k allocations: 480.250 KiB)
Running: chebyshev_quadrature with k=1
  0.126024 seconds (2.58 k allocations: 1.696 MiB)
Running: chebyshev_quadrature with k=2
  0.122912 seconds (2.84 k allocations: 2.359 MiB)
Running: chebyshev_quadrature with k=3
  0.144274 seconds (3.26 k allocations: 2.060 MiB)
Running: chebyshev_quadrature with k=4
  0.145840 seconds (3.26 k allocations: 1.501 MiB)
Running: jacobi_quadrature with α=β=1
  7.380845 seconds (402.17 k allocations: 906.632 MiB, 5.05% gc time)
Running: legendre_quadrature
  0.075600 seconds (1.33 k allocations: 72.281 KiB)
Running: lobatto_quadrature
  0.000194 seconds (253 allocations: 9.188 KiB)
Running: radau_quadrature
  0.000161 seconds (221 allocations: 8.812 KiB)
Running: rectangle_rule_left; only a rough approximation can be practically achieved using this function
  3.401143 seconds (11 allocations: 528 bytes)
Running: rectangle_rule_midpoint
  0.000428 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right; only a rough approximation can be practically achieved using this function
  3.521487 seconds (11 allocations: 528 bytes)
Running: rombergs_method
  0.072426 seconds (1.16 k allocations: 66.734 KiB)
Running: simpsons_rule
  0.000077 seconds (9 allocations: 496 bytes)
Running: simpsons38_rule
  0.000068 seconds (9 allocations: 496 bytes)
Running: trapezoidal_rule
  0.000826 seconds (9 allocations: 496 bytes)
Test Summary: | Pass  Total
sinxx         |   16     16
Integrating (x^3+1)/(x^4 (x+1)(x^2+1)) from 1 to e and comparing the result to the analytical solution of log(sqrt(2)*exp(1)/(sqrt(exp(2)+1)))+1/2*(exp(-2)-1)+1/3*(1-exp(-3))
Running: adaptive_simpsons_rule with ε=1e-8
  0.000751 seconds (6.34 k allocations: 99.453 KiB)
Running: chebyshev_quadrature with k=1
  0.110998 seconds (2.48 k allocations: 576.609 KiB)
Running: chebyshev_quadrature with k=2
  0.121697 seconds (2.73 k allocations: 777.391 KiB)
Running: chebyshev_quadrature with k=3
  0.125181 seconds (3.15 k allocations: 685.641 KiB)
Running: chebyshev_quadrature with k=4
  0.125781 seconds (3.16 k allocations: 516.203 KiB)
Running: jacobi_quadrature with α=β=1
  2.660801 seconds (388.44 k allocations: 253.808 MiB)
Running: legendre_quadrature
  0.066792 seconds (1.28 k allocations: 65.438 KiB)
Running: lobatto_quadrature
  0.000110 seconds (91 allocations: 3.656 KiB)
Running: radau_quadrature
  0.000061 seconds (81 allocations: 3.453 KiB)
Running: rectangle_rule_left; only a rough approximation can be practically achieved using this function.
 11.020884 seconds (11 allocations: 528 bytes)
Running: rectangle_rule_midpoint
  0.001109 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right; only a rough approximation can be practically achieved using this function.
 11.051780 seconds (11 allocations: 528 bytes)
Running: rombergs_method
  0.081981 seconds (1.18 k allocations: 62.562 KiB)
Running: simpsons_rule
  0.000088 seconds (9 allocations: 496 bytes)
Running: simpsons38_rule
  0.000072 seconds (9 allocations: 496 bytes)
Running: trapezoidal_rule
  0.001705 seconds (9 allocations: 496 bytes)
Test Summary: | Pass  Total
partfrac      |   16     16
    Testing FunctionIntegrator tests passed 
