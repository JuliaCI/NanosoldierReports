Julia Version 1.6.0-DEV.636
Commit 8554a216e7 (2020-08-14 06:59 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.1
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.1
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_ndcJJX/Project.toml`
  [5789e2e9] FileIO v1.4.1
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_ndcJJX/Manifest.toml`
  [5789e2e9] FileIO v1.4.1
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.2172331685205284
curgen: 20 fitness: 0.2172331685205284
curgen: 30 fitness: 0.2172331685205284
curgen: 40 fitness: 0.2172331685205284
curgen: 50 fitness: 0.2172331685205284
CoordinateCreature{Vector{Float64}}([0.22265007975017492], -0.2172331685205284) 0.22265007975017492 -0.2172331685205284
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.2581095717731645
curgen: 100 fitness: 3.258261706071193
curgen: 150 fitness: 3.258407751067344
curgen: 200 fitness: 3.258407980581671
curgen: 250 fitness: 3.258443965434106
curgen: 300 fitness: 3.2584548887255362
curgen: 350 fitness: 3.2584572286291684
curgen: 400 fitness: 3.258469352884091
curgen: 450 fitness: 3.258475014526641
curgen: 500 fitness: 3.2584782607449005
CoordinateCreature{Vector{Float64}}([-0.22221424402864556, -0.2225793991702072, 0.22233819859534565, -0.22230854680668866, -0.22272801355817962, -0.22270041060541504, 0.22261019184655423, -0.22257335509023002, 0.22240774097700663, 0.22258759515238907, -0.22239737781990027, 0.22222931013764916, 0.22261166970812118, -0.22267090104791057, 0.22215928619436276], -3.2584782607449005) [-0.22221424402864556, -0.2225793991702072, 0.22233819859534565, -0.22230854680668866, -0.22272801355817962, -0.22270041060541504, 0.22261019184655423, -0.22257335509023002, 0.22240774097700663, 0.22258759515238907, -0.22239737781990027, 0.22222931013764916, 0.22261166970812118, -0.22267090104791057, 0.22215928619436276] -3.2584782607449005
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.003595957233670788
curgen: 100 fitness: -0.003004549842671622
curgen: 150 fitness: -0.002960592164129139
curgen: 200 fitness: -0.0011706397781097166
curgen: 250 fitness: -0.0010367243467044318
curgen: 300 fitness: -0.0008236926408073941
curgen: 350 fitness: -0.0008236926408073941
curgen: 400 fitness: -0.0007714214081033788
curgen: 450 fitness: -0.0007714214081033788
curgen: 500 fitness: -0.0007714214081033788
CoordinateCreature{Vector{Float64}}([3.923106958400854e-5, 0.0007902869947328936, -0.0004891001971490385, -0.001028083389493942, -9.683744443009538e-6, 3.1337009614492255e-5, 0.00024738661405980305, 0.00029875888580653255, 0.0007222624412930427, -0.00012135788082136615, 0.0010932558115967963, 0.00016671664238398912, -1.1983262765463167e-5, 0.0002330285614798986, -2.7190019060199236e-5], 0.0007714214081033788) [3.923106958400854e-5, 0.0007902869947328936, -0.0004891001971490385, -0.001028083389493942, -9.683744443009538e-6, 3.1337009614492255e-5, 0.00024738661405980305, 0.00029875888580653255, 0.0007222624412930427, -0.00012135788082136615, 0.0010932558115967963, 0.00016671664238398912, -1.1983262765463167e-5, 0.0002330285614798986, -2.7190019060199236e-5] 0.0007714214081033788
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
