Julia Version 1.6.0-DEV.604
Commit dffc8895b8 (2020-08-07 15:04 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed FastGaussQuadrature ────────── v0.4.2
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed FunctionIntegrator ─────────── v0.5.1
  Installed SpecialFunctions ───────────── v0.10.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [7685536e] + FunctionIntegrator v0.5.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [442a2c76] + FastGaussQuadrature v0.4.2
  [7685536e] + FunctionIntegrator v0.5.1
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [276daf66] + SpecialFunctions v0.10.3
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing FunctionIntegrator
Status `/tmp/jl_ZKvuR8/Project.toml`
  [442a2c76] FastGaussQuadrature v0.4.2
  [7685536e] FunctionIntegrator v0.5.1
  [276daf66] SpecialFunctions v0.10.3
  [8dfed614] Test
Status `/tmp/jl_ZKvuR8/Manifest.toml`
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [442a2c76] FastGaussQuadrature v0.4.2
  [7685536e] FunctionIntegrator v0.5.1
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [276daf66] SpecialFunctions v0.10.3
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Performing the Airy Ai(x) test, where Ai(x) is integrated on the semi-infinite domain, or an approximation of it, namely [0,100] and the result is compared to the analytical result 1/3.
Running: adaptive_simpsons_rule
  0.900423 seconds (1.35 M allocations: 71.205 MiB, 8.26% gc time)
Running: chebyshev_quadrature with k=1
  2.385293 seconds (2.25 M allocations: 128.913 MiB, 2.88% gc time)
Running: chebyshev_quadrature with k=2
  0.332613 seconds (425.41 k allocations: 24.418 MiB)
Running: chebyshev_quadrature with k=3
  0.431894 seconds (545.34 k allocations: 29.897 MiB, 4.60% gc time)
Running: chebyshev_quadrature with k=4
  0.357834 seconds (488.16 k allocations: 26.423 MiB)
Running: jacobi_quadrature with α=β=1
 48.110273 seconds (39.41 M allocations: 3.139 GiB, 8.55% gc time)
Running: laguerre_quadrature with k=1
  3.357828 seconds (3.34 M allocations: 185.920 MiB, 2.75% gc time)
Running: legendre_quadrature
  0.227948 seconds (215.24 k allocations: 12.330 MiB)
Running: lobatto_quadrature
  0.367768 seconds (344.63 k allocations: 20.716 MiB, 7.39% gc time)
Running: radau_quadrature
  0.359577 seconds (326.93 k allocations: 19.658 MiB)
Running: rectangle_rule_left. Only a rough approximation can be practically achieved using this function.
 85.353279 seconds (100.02 M allocations: 1.491 GiB, 0.36% gc time)
Running: rectangle_rule_midpoint.
  0.157369 seconds (173.78 k allocations: 3.889 MiB)
Running: rectangle_rule_right. Only a rough approximation can be practically achieved using this function.
 87.928597 seconds (100.02 M allocations: 1.491 GiB, 0.36% gc time)
Running: rombergs_method
  0.770532 seconds (753.66 k allocations: 43.358 MiB)
Running: simpsons_rule
  0.099198 seconds (47.41 k allocations: 2.123 MiB, 42.08% gc time)
Running: simpsons38_rule
  0.129846 seconds (113.25 k allocations: 5.984 MiB)
Running: trapezoidal_rule
  0.326171 seconds (1.52 M allocations: 25.803 MiB)
Test Summary: | Pass  Total
Airy Ai(x)    |   17     17
Performing the besselj test, where BesselJ_1(2) is approximated and the result is compared to the value obtained from SpecialFunctions' besselj function.
Running: adaptive_simpsons_rule with ε=1e-7
  0.085277 seconds (32.68 k allocations: 1.945 MiB)
Running: chebyshev_quadrature with k=1
  0.456654 seconds (274.91 k allocations: 13.934 MiB)
Running: chebyshev_quadrature with k=2
  0.158955 seconds (115.76 k allocations: 3.795 MiB)
Running: chebyshev_quadrature with k=3
  0.160960 seconds (105.11 k allocations: 3.641 MiB)
Running: chebyshev_quadrature with k=4
  0.189608 seconds (87.72 k allocations: 3.287 MiB, 12.89% gc time)
Running: jacobi_quadrature with α=β=1
  2.539672 seconds (536.40 k allocations: 163.508 MiB, 3.80% gc time)
Running: legendre_quadrature
  0.174956 seconds (62.25 k allocations: 3.472 MiB)
Running: lobatto_quadrature
  0.041082 seconds (16.68 k allocations: 1.030 MiB, 38.25% gc time)
Running: radau_quadrature
  0.022883 seconds (16.67 k allocations: 1.029 MiB)
Running: rectangle_rule_left
 34.925545 seconds (471.41 M allocations: 7.025 GiB, 3.64% gc time)
Running: rectangle_rule_midpoint
  0.000019 seconds (45 allocations: 1.047 KiB)
Running: rectangle_rule_right
 33.610073 seconds (476.96 M allocations: 7.107 GiB, 3.69% gc time)
Running: rombergs_method
  0.634011 seconds (360.65 k allocations: 20.331 MiB)
Running: simpsons_rule
  0.000065 seconds (85 allocations: 1.672 KiB)
Running: simpsons38_rule
  0.097446 seconds (19.93 k allocations: 1.196 MiB, 33.56% gc time)
Running: trapezoidal_rule
  0.057647 seconds (18.38 k allocations: 1.101 MiB)
Test Summary: | Pass  Total
besselj       |   16     16
Integrating cos^2(x)/(1+cot(x)) from 0 to pi/2 and comparing the results to the analytical result 0.25.
Running: adaptive_simpsons_rule with ε=1e-7
  0.030289 seconds (1.99 k allocations: 53.594 KiB)
Running: chebyshev_quadrature with k=1
  0.108283 seconds (2.40 k allocations: 113.453 KiB)
Running: chebyshev_quadrature with k=2
  0.125167 seconds (2.65 k allocations: 121.469 KiB)
Running: chebyshev_quadrature with k=3
  0.108190 seconds (3.08 k allocations: 133.688 KiB)
Running: chebyshev_quadrature with k=4
  0.103835 seconds (3.08 k allocations: 133.750 KiB)
Running: jacobi_quadrature with α=β=1
  0.612474 seconds (379.29 k allocations: 19.806 MiB, 4.33% gc time)
Running: legendre_quadrature
  0.110011 seconds (1.24 k allocations: 63.609 KiB)
Running: lobatto_quadrature
  0.000100 seconds (67 allocations: 2.844 KiB)
Running: radau_quadrature
  0.000041 seconds (71 allocations: 3.078 KiB)
Running: rectangle_rule_left
  0.000572 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_midpoint
  0.000399 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right
  0.000569 seconds (9 allocations: 496 bytes)
Running: rombergs_method
  0.131884 seconds (1.01 k allocations: 54.109 KiB)
Running: simpsons_rule
  0.000039 seconds (323 allocations: 5.391 KiB)
Running: simpsons38_rule
  0.039306 seconds (923 allocations: 39.281 KiB)
Running: trapezoidal_rule
  0.053745 seconds (44.33 k allocations: 704.859 KiB)
Test Summary: | Pass  Total
coscotint     |   16     16
Integrating cosine from 0 to pi/2 and comparing the result to the analytical result of 1.
Running: adaptive_simpsons_rule
  0.100047 seconds (75.98 k allocations: 4.409 MiB)
Running: chebyshev_quadrature with k=1
  0.373055 seconds (240.48 k allocations: 13.514 MiB)
Running: chebyshev_quadrature with k=2
  0.347275 seconds (295.72 k allocations: 16.587 MiB)
Running: chebyshev_quadrature with k=3
  0.203794 seconds (275.63 k allocations: 14.992 MiB)
Running: chebyshev_quadrature with k=4
  0.295735 seconds (275.67 k allocations: 14.889 MiB, 7.32% gc time)
Running: jacobi_quadrature with α=β=1
  3.336102 seconds (466.15 k allocations: 164.245 MiB, 3.60% gc time)
Running: legendre_quadrature
  0.144905 seconds (193.22 k allocations: 11.117 MiB)
Running: lobatto_quadrature
  0.165058 seconds (204.45 k allocations: 11.822 MiB)
Running: radau_quadrature
  0.164743 seconds (204.45 k allocations: 11.842 MiB)
Running: rectangle_rule_left
  1.077919 seconds (19.80 k allocations: 1.195 MiB)
Running: rectangle_rule_midpoint
  0.053472 seconds (25.98 k allocations: 1.617 MiB)
Running: rectangle_rule_right
  1.390345 seconds (18.30 k allocations: 1.107 MiB)
Running: rombergs_method
  0.130893 seconds (140.08 k allocations: 8.071 MiB)
Running: simpsons_rule
  0.035583 seconds (29.08 k allocations: 1.804 MiB)
Running: simpsons38_rule
  0.054345 seconds (44.73 k allocations: 2.791 MiB, 36.58% gc time)
Running: trapezoidal_rule
  0.028558 seconds (45.24 k allocations: 1.826 MiB)
Test Summary: | Pass  Total
Cosine        |   16     16
Integrating e^(-x^2)/(1+x^2) on the infinite domain [-inf, inf], or failing that on [-100,100], and comparing it to the analytical result exp(1)*pi*erfc(1)
Running: adaptive_simpsons_rule with ε=1e-7
  0.074579 seconds (101.48 k allocations: 3.079 MiB)
Running: chebyshev_quadrature with k=1
  0.186292 seconds (247.58 k allocations: 13.597 MiB)
Running: chebyshev_quadrature with k=2
  0.243929 seconds (303.35 k allocations: 16.596 MiB)
Running: chebyshev_quadrature with k=3
  0.237890 seconds (283.05 k allocations: 15.012 MiB)
Running: chebyshev_quadrature with k=4
  0.330625 seconds (283.09 k allocations: 15.088 MiB, 6.75% gc time)
Running: hermite_quadrature with k=2
 18.545522 seconds (22.14 M allocations: 1.148 GiB, 10.67% gc time)
Running: jacobi_quadrature with α=β=1
  0.630466 seconds (476.19 k allocations: 50.463 MiB, 15.58% gc time)
Running: laguerre_quadrature with k=1 and multiplying the result by 2 (as Laguerre is only on the semi-infinite domain)
  0.232461 seconds (288.63 k allocations: 15.911 MiB)
Running: legendre_quadrature
  0.184383 seconds (200.29 k allocations: 11.466 MiB)
Running: lobatto_quadrature
  0.297834 seconds (225.97 k allocations: 37.638 MiB)
Running: radau_quadrature
  0.289582 seconds (222.56 k allocations: 30.302 MiB, 21.99% gc time)
Running: rectangle_rule_left
  0.029377 seconds (22.96 k allocations: 1.356 MiB)
Running: rectangle_rule_midpoint
  0.027926 seconds (27.93 k allocations: 1.714 MiB)
Running: rectangle_rule_right
  0.039545 seconds (19.52 k allocations: 1.168 MiB)
Running: rombergs_method
  0.131023 seconds (142.90 k allocations: 8.131 MiB)
Running: simpsons_rule
  0.041400 seconds (41.33 k allocations: 2.160 MiB)
Running: simpsons38_rule
  0.041090 seconds (60.12 k allocations: 3.201 MiB)
Running: trapezoidal_rule
  0.031829 seconds (31.62 k allocations: 1.772 MiB)
Test Summary: | Pass  Total
expnx2datan   |   18     18
Integrate exp(-x^2) from minus infinity to positive infinity and comparing the result to the analytical solution, sqrt(pi)
Running: adaptive_simpsons_rule with ε=1e-7
  0.039844 seconds (61.58 k allocations: 2.363 MiB)
Running: chebyshev_quadrature with k=1
  0.244562 seconds (242.71 k allocations: 13.362 MiB, 12.22% gc time)
Running: chebyshev_quadrature with k=2
  0.223000 seconds (298.07 k allocations: 16.326 MiB)
Running: chebyshev_quadrature with k=3
  0.198829 seconds (277.91 k allocations: 14.780 MiB)
Running: chebyshev_quadrature with k=4
  0.226743 seconds (277.94 k allocations: 14.795 MiB, 11.96% gc time)
Running: hermite_quadrature with k=2
  0.156789 seconds (177.91 k allocations: 10.166 MiB)
Running: jacobi_quadrature with α=β=1
  8.831533 seconds (468.75 k allocations: 1.176 GiB, 18.41% gc time)
Running: laguerre_quadrature (results multiplied by 2, as laguerre only integrates over the semi-infinite domain)
  0.269334 seconds (283.49 k allocations: 15.706 MiB)
Running: legendre_quadrature
  0.196841 seconds (195.46 k allocations: 11.231 MiB, 8.68% gc time)
Running: lobatto_quadrature
  0.299207 seconds (216.33 k allocations: 23.344 MiB)
Running: radau_quadrature
  0.253351 seconds (215.48 k allocations: 21.274 MiB, 6.37% gc time)
Running: rectangle_rule_left
  0.032369 seconds (20.51 k allocations: 1.237 MiB)
Running: rectangle_rule_midpoint
  0.029498 seconds (26.71 k allocations: 1.655 MiB)
Running: rectangle_rule_right
  0.038318 seconds (18.28 k allocations: 1.107 MiB)
Running: rombergs_method
  0.212535 seconds (138.37 k allocations: 7.933 MiB)
Running: simpsons_rule
  0.036168 seconds (33.56 k allocations: 1.934 MiB)
Running: simpsons38_rule
  0.039997 seconds (50.64 k allocations: 2.943 MiB)
Running: trapezoidal_rule
  0.029180 seconds (26.29 k allocations: 1.595 MiB)
Test Summary: | Pass  Total
Gaussian      |   18     18
Integrating 1/x from 1 to e and comparing the result to the analytical solution, 1.
Running: adaptive_simpsons_rule with ε=1e-7
  0.036306 seconds (32.54 k allocations: 1.960 MiB)
Running: chebyshev_quadrature with k=1
  0.328502 seconds (241.04 k allocations: 13.578 MiB)
Running: chebyshev_quadrature with k=2
  0.251092 seconds (296.30 k allocations: 16.727 MiB, 8.05% gc time)
Running: chebyshev_quadrature with k=3
  0.339835 seconds (276.24 k allocations: 15.008 MiB)
Running: chebyshev_quadrature with k=4
  0.223374 seconds (276.27 k allocations: 14.824 MiB)
Running: jacobi_quadrature with α=β=1
  3.043261 seconds (466.80 k allocations: 195.331 MiB, 12.35% gc time)
Running: legendre_quadrature
  0.220700 seconds (193.79 k allocations: 11.207 MiB)
Running: lobatto_quadrature
  0.259790 seconds (205.02 k allocations: 11.865 MiB, 15.35% gc time)
Running: radau_quadrature
  0.240866 seconds (205.02 k allocations: 11.858 MiB)
Running: rectangle_rule_left
  0.435070 seconds (20.37 k allocations: 1.224 MiB)
Running: rectangle_rule_midpoint
  0.073141 seconds (26.35 k allocations: 1.637 MiB)
Running: rectangle_rule_right
  0.155155 seconds (18.68 k allocations: 1.127 MiB)
Running: rombergs_method
  0.132209 seconds (151.46 k allocations: 8.820 MiB)
Running: simpsons_rule
  0.030431 seconds (29.83 k allocations: 1.838 MiB)
Running: simpsons38_rule
  0.035498 seconds (45.51 k allocations: 2.825 MiB)
Running: trapezoidal_rule
  0.025567 seconds (46.24 k allocations: 1.863 MiB)
Test Summary: | Pass  Total
1/x           |   16     16
Integrating log(x)/x from 1 to e and comparing the result to the analytical solution of 0.5.
Running: adaptive_simpsons_rule with ε=1e-7
  0.037414 seconds (33.30 k allocations: 1.908 MiB)
Running: chebyshev_quadrature with k=1
  0.278553 seconds (241.60 k allocations: 13.523 MiB, 14.99% gc time)
Running: chebyshev_quadrature with k=2
  0.259656 seconds (296.90 k allocations: 16.578 MiB)
Running: chebyshev_quadrature with k=3
  0.238938 seconds (276.77 k allocations: 14.912 MiB)
Running: chebyshev_quadrature with k=4
  0.261902 seconds (276.81 k allocations: 14.992 MiB, 7.76% gc time)
Running: jacobi_quadrature with α=β=1
  2.878588 seconds (467.46 k allocations: 149.941 MiB, 6.96% gc time)
Running: legendre_quadrature
  0.252021 seconds (194.36 k allocations: 11.161 MiB)
Running: lobatto_quadrature
  0.256050 seconds (205.60 k allocations: 11.870 MiB, 13.85% gc time)
Running: radau_quadrature
  0.191865 seconds (205.59 k allocations: 11.869 MiB)
Running: rectangle_rule_left
  1.627755 seconds (20.64 k allocations: 1.238 MiB)
Running: rectangle_rule_midpoint
  0.041709 seconds (26.34 k allocations: 1.637 MiB)
Running: rectangle_rule_right
  1.752476 seconds (18.65 k allocations: 1.125 MiB)
Running: rombergs_method
  0.205647 seconds (141.39 k allocations: 8.144 MiB)
Running: simpsons_rule
  0.043454 seconds (30.58 k allocations: 1.866 MiB)
Running: simpsons38_rule
  0.046909 seconds (46.26 k allocations: 2.854 MiB)
Running: trapezoidal_rule
  0.033518 seconds (58.50 k allocations: 2.064 MiB)
Test Summary: | Pass  Total
log(x)/x      |   16     16
Approximating the modified bessel function I_1(1) and comparing it to the result obtained by SpecialFunctions.
Running: adaptive_simpsons_rule with ε=1e-7
  0.177865 seconds (153.20 k allocations: 9.102 MiB)
Running: chebyshev_quadrature with k=1
  0.135554 seconds (91.28 k allocations: 3.297 MiB)
Running: chebyshev_quadrature with k=2
  0.275832 seconds (127.05 k allocations: 3.990 MiB, 25.04% gc time)
Running: chebyshev_quadrature with k=3
  0.203980 seconds (115.62 k allocations: 3.819 MiB)
Running: chebyshev_quadrature with k=4
  0.185968 seconds (95.16 k allocations: 3.413 MiB)
Running: jacobi_quadrature with α=β=1
  2.893551 seconds (510.13 k allocations: 169.323 MiB, 7.85% gc time)
Running: legendre_quadrature
  0.219523 seconds (38.38 k allocations: 2.107 MiB, 6.50% gc time)
Running: lobatto_quadrature
  0.000120 seconds (150 allocations: 4.328 KiB)
Running: radau_quadrature
  0.000055 seconds (148 allocations: 4.375 KiB)
Running: rectangle_rule_left
 63.912231 seconds (590.00 M allocations: 8.792 GiB, 3.01% gc time)
Running: rectangle_rule_midpoint
  0.000073 seconds (40 allocations: 992 bytes)
Running: rectangle_rule_right
 63.669121 seconds (592.75 M allocations: 8.833 GiB, 2.75% gc time)
Running: rombergs_method
  0.119420 seconds (41.93 k allocations: 2.260 MiB)
Running: simpsons_rule
  0.000036 seconds (93 allocations: 1.797 KiB)
Running: simpsons38_rule
  0.031350 seconds (463 allocations: 22.578 KiB)
Running: trapezoidal_rule
  0.019672 seconds (179 allocations: 8.766 KiB)
Test Summary: | Pass  Total
modbessel0    |   16     16
Integrating 1/sqrt(-19.6 sin(x)) from -pi to 0 and comparing the result to the analytical solution of ellipk(1/2)/sqrt(2.45) The integrand has singularities at x = -pi and x=0, so for some of these functions the integration domain has to be itself approximated.
Running: adaptive_simpsons_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 42.022002 seconds (629.34 M allocations: 9.388 GiB, 4.15% gc time)
Running: chebyshev_quadrature with k=1
  0.643440 seconds (439.56 k allocations: 24.283 MiB)
Running: chebyshev_quadrature with k=2
 19.461689 seconds (496.97 k allocations: 4.042 GiB, 4.34% gc time)
Running: chebyshev_quadrature with k=3
  8.817392 seconds (290.74 k allocations: 1.643 GiB, 7.91% gc time)
Running: chebyshev_quadrature with k=4
  9.719013 seconds (290.77 k allocations: 2.262 GiB, 4.50% gc time)
Running: jacobi_quadrature with α=β=1. The N value required to get an accurate result is too high to be practical, so only a rough approximation can be arrived at.
 72.705861 seconds (505.56 k allocations: 13.255 GiB, 4.19% gc time)
Running: legendre_quadrature.
  7.846335 seconds (233.03 k allocations: 1.976 GiB, 2.38% gc time)
The following integration functions have to use an approximated domain due to the endpoint singularities.
Running: lobatto_quadrature on [-pi+1e-6, -1e-6]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 66.819457 seconds (8.24 M allocations: 13.384 GiB, 5.05% gc time)
Running: radau_quadrature on [-pi+1e-6, -1e-6]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 62.930846 seconds (7.24 M allocations: 13.369 GiB, 3.41% gc time)
Running: rectangle_rule_left on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  3.822239 seconds (23.40 k allocations: 1.405 MiB)
Running: rectangle_rule_midpoint on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  3.446876 seconds (32.03 k allocations: 1.962 MiB)
Running: rectangle_rule_right on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  3.294326 seconds (23.62 k allocations: 1.416 MiB)
Running: rombergs_method on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  1.155646 seconds (457.15 k allocations: 153.723 MiB)
Running: simpsons_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 44.048953 seconds (600.04 M allocations: 8.943 GiB, 8.61% gc time)
Running: simpsons38_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 42.852746 seconds (600.05 M allocations: 8.944 GiB, 8.02% gc time)
Running: trapezoidal_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 43.199814 seconds (600.04 M allocations: 8.943 GiB, 8.25% gc time)
Test Summary: | Pass  Total
Simppen       |   16     16
Integrating sin(x^2)e^(-x)/x from 0 to infinity, with the approximated domain of integration of 0 to 100. The removable singularity at x=0 in the integrand has been removed.
Running: adaptive_simpsons_rule with ε=1e-8
  0.083909 seconds (182.59 k allocations: 4.521 MiB)
Running: chebyshev_quadrature with k=1
  0.240987 seconds (258.20 k allocations: 14.029 MiB)
Running: chebyshev_quadrature with k=2
  0.283270 seconds (284.36 k allocations: 15.193 MiB)
Running: chebyshev_quadrature with k=3
  0.224678 seconds (260.81 k allocations: 13.465 MiB)
Running: chebyshev_quadrature with k=4
  0.222713 seconds (260.84 k allocations: 13.461 MiB)
Running: jacobi_quadrature with α=β=1
  0.414667 seconds (405.67 k allocations: 35.876 MiB)
Running: laguerre_quadrature with k=2
  0.213715 seconds (188.19 k allocations: 10.881 MiB)
Running: legendre_quadrature
  0.145107 seconds (151.90 k allocations: 8.430 MiB)
Running: lobatto_quadrature
  0.058310 seconds (10.88 k allocations: 15.109 MiB)
Running: radau_quadrature
  0.047620 seconds (9.66 k allocations: 13.183 MiB)
Running: rectangle_rule_left
  0.057308 seconds (19.85 k allocations: 1.172 MiB)
Running: rectangle_rule_midpoint
  0.046149 seconds (26.82 k allocations: 1.642 MiB)
Running: rectangle_rule_right
  0.051058 seconds (18.40 k allocations: 1.096 MiB)
Running: rombergs_method
  0.233571 seconds (170.24 k allocations: 9.689 MiB)
Running: simpsons_rule
  0.002028 seconds (24.72 k allocations: 386.656 KiB)
Running: simpsons38_rule
  0.058837 seconds (81.54 k allocations: 3.524 MiB)
Running: trapezoidal_rule
  0.213842 seconds (2.39 M allocations: 37.759 MiB)
Test Summary: | Pass  Total
sinexpox      |   17     17
Integrating sin(x)/x from 0 to 100 and comparing it to the exact result.
Running: adaptive_simpsons_rule with ε=1e-8
  0.002428 seconds (30.71 k allocations: 480.250 KiB)
Running: chebyshev_quadrature with k=1
  0.112943 seconds (2.58 k allocations: 1.696 MiB)
Running: chebyshev_quadrature with k=2
  0.127412 seconds (2.84 k allocations: 2.359 MiB)
Running: chebyshev_quadrature with k=3
  0.138205 seconds (3.26 k allocations: 2.060 MiB)
Running: chebyshev_quadrature with k=4
  0.148693 seconds (3.26 k allocations: 1.501 MiB)
Running: jacobi_quadrature with α=β=1
  7.825422 seconds (402.46 k allocations: 906.578 MiB, 4.25% gc time)
Running: legendre_quadrature
  0.126328 seconds (1.33 k allocations: 72.281 KiB)
Running: lobatto_quadrature
  0.000269 seconds (253 allocations: 9.188 KiB)
Running: radau_quadrature
  0.000161 seconds (221 allocations: 8.812 KiB)
Running: rectangle_rule_left; only a rough approximation can be practically achieved using this function
  3.709866 seconds (11 allocations: 528 bytes)
Running: rectangle_rule_midpoint
  0.000430 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right; only a rough approximation can be practically achieved using this function
  3.430310 seconds (11 allocations: 528 bytes)
Running: rombergs_method
  0.083102 seconds (1.16 k allocations: 66.734 KiB)
Running: simpsons_rule
  0.000044 seconds (9 allocations: 496 bytes)
Running: simpsons38_rule
  0.000050 seconds (9 allocations: 496 bytes)
Running: trapezoidal_rule
  0.000783 seconds (9 allocations: 496 bytes)
Test Summary: | Pass  Total
sinxx         |   16     16
Integrating (x^3+1)/(x^4 (x+1)(x^2+1)) from 1 to e and comparing the result to the analytical solution of log(sqrt(2)*exp(1)/(sqrt(exp(2)+1)))+1/2*(exp(-2)-1)+1/3*(1-exp(-3))
Running: adaptive_simpsons_rule with ε=1e-8
  0.001143 seconds (6.34 k allocations: 99.453 KiB)
Running: chebyshev_quadrature with k=1
  0.111111 seconds (2.48 k allocations: 576.609 KiB)
Running: chebyshev_quadrature with k=2
  0.104505 seconds (2.73 k allocations: 777.391 KiB)
Running: chebyshev_quadrature with k=3
  0.173652 seconds (3.15 k allocations: 685.641 KiB)
Running: chebyshev_quadrature with k=4
  0.118040 seconds (3.16 k allocations: 516.203 KiB)
Running: jacobi_quadrature with α=β=1
  3.714460 seconds (388.73 k allocations: 253.822 MiB)
Running: legendre_quadrature
  0.070754 seconds (1.28 k allocations: 65.438 KiB)
Running: lobatto_quadrature
  0.000120 seconds (91 allocations: 3.656 KiB)
Running: radau_quadrature
  0.000047 seconds (81 allocations: 3.453 KiB)
Running: rectangle_rule_left; only a rough approximation can be practically achieved using this function.
 11.106048 seconds (11 allocations: 528 bytes)
Running: rectangle_rule_midpoint
  0.001095 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right; only a rough approximation can be practically achieved using this function.
 11.325065 seconds (11 allocations: 528 bytes)
Running: rombergs_method
  0.094896 seconds (1.18 k allocations: 62.562 KiB)
Running: simpsons_rule
  0.000095 seconds (9 allocations: 496 bytes)
Running: simpsons38_rule
  0.000082 seconds (9 allocations: 496 bytes)
Running: trapezoidal_rule
  0.001739 seconds (9 allocations: 496 bytes)
Test Summary: | Pass  Total
partfrac      |   16     16
    Testing FunctionIntegrator tests passed 
