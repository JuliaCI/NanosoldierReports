Julia Version 1.6.0-DEV.604
Commit dffc8895b8 (2020-08-07 15:04 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.0
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.0
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_vITkCb/Project.toml`
  [5789e2e9] FileIO v1.4.0
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_vITkCb/Manifest.toml`
  [5789e2e9] FileIO v1.4.0
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21723047588734085
curgen: 20 fitness: 0.2172333922319294
curgen: 30 fitness: 0.2172333922319294
curgen: 40 fitness: 0.2172333922319294
curgen: 50 fitness: 0.2172333922319294
CoordinateCreature{Vector{Float64}}([-0.22262117669950496], -0.2172333922319294) -0.22262117669950496 -0.2172333922319294
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.2576949855618653
curgen: 100 fitness: 3.257975465071563
curgen: 150 fitness: 3.2580467156135344
curgen: 200 fitness: 3.258389460585214
curgen: 250 fitness: 3.2584090001724744
curgen: 300 fitness: 3.258411417094015
curgen: 350 fitness: 3.2584134269989975
curgen: 400 fitness: 3.2584134269989975
curgen: 450 fitness: 3.258421782976047
curgen: 500 fitness: 3.258454498359316
CoordinateCreature{Vector{Float64}}([-0.22258546874233445, 0.22246877744829904, -0.22350183325601697, -0.22238803938986726, 0.2224087438147556, 0.22284764446152683, 0.2227057350398747, -0.22274075361785448, 0.22254918522226352, -0.22260613297533313, 0.22253007214583256, -0.22260823174915106, -0.22250470014989046, 0.22261097465303933, -0.22262478765326263], -3.258454498359316) [-0.22258546874233445, 0.22246877744829904, -0.22350183325601697, -0.22238803938986726, 0.2224087438147556, 0.22284764446152683, 0.2227057350398747, -0.22274075361785448, 0.22254918522226352, -0.22260613297533313, 0.22253007214583256, -0.22260823174915106, -0.22250470014989046, 0.22261097465303933, -0.22262478765326263] -3.258454498359316
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.004681084806264835
curgen: 100 fitness: -0.0034439705548550137
curgen: 150 fitness: -0.002747864648938503
curgen: 200 fitness: -0.0018778849950535914
curgen: 250 fitness: -0.0017702110808670568
curgen: 300 fitness: -0.0017702110808670568
curgen: 350 fitness: -0.0009420547627883025
curgen: 400 fitness: -0.0007462445846613264
curgen: 450 fitness: -0.0007462445846613264
curgen: 500 fitness: -0.0007462445846613264
CoordinateCreature{Vector{Float64}}([1.2669509842238754e-5, 0.0004703868748178945, -0.0005044595340984449, -0.0005189037320425527, -0.0008718753124266581, -6.63601777759552e-5, -0.0003771224900904471, -0.0011392998990218024, -0.000302063618117615, 8.362008928645406e-6, -0.0004800113238772946, 1.8747020671842932e-5, 5.5037904530888526e-5, 0.000369770201188837, -0.0005913354651167413], 0.0007462445846613264) [1.2669509842238754e-5, 0.0004703868748178945, -0.0005044595340984449, -0.0005189037320425527, -0.0008718753124266581, -6.63601777759552e-5, -0.0003771224900904471, -0.0011392998990218024, -0.000302063618117615, 8.362008928645406e-6, -0.0004800113238772946, 1.8747020671842932e-5, 5.5037904530888526e-5, 0.000369770201188837, -0.0005913354651167413] 0.0007462445846613264
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
