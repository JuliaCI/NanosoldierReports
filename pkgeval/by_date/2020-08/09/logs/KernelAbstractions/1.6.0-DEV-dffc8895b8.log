Julia Version 1.6.0-DEV.604
Commit dffc8895b8 (2020-08-07 15:04 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed Requires ───────────────────── v1.0.1
  Installed Reexport ───────────────────── v0.2.0
  Installed AbstractFFTs ───────────────── v0.5.0
  Installed SpecialFunctions ───────────── v0.10.3
  Installed NNlib ──────────────────────── v0.7.4
  Installed StaticArrays ───────────────── v0.12.4
  Installed KernelAbstractions ─────────── v0.3.0
  Installed LLVM ───────────────────────── v1.7.0
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed OrderedCollections ─────────── v1.3.0
  Installed CEnum ──────────────────────── v0.4.1
  Installed TimerOutputs ───────────────── v0.5.6
  Installed ExprTools ──────────────────── v0.1.1
  Installed GPUArrays ──────────────────── v5.0.0
  Installed Cassette ───────────────────── v0.3.3
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed Adapt ──────────────────────── v2.0.2
  Installed MacroTools ─────────────────── v0.5.5
  Installed GPUCompiler ────────────────── v0.4.1
  Installed BinaryProvider ─────────────── v0.5.10
  Installed DataStructures ─────────────── v0.17.20
  Installed CUDA ───────────────────────── v1.2.1
Updating `~/.julia/environments/v1.6/Project.toml`
  [63c18a36] + KernelAbstractions v0.3.0
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [621f4979] + AbstractFFTs v0.5.0
  [79e6a3ab] + Adapt v2.0.2
  [b99e7846] + BinaryProvider v0.5.10
  [fa961155] + CEnum v0.4.1
  [052768ef] + CUDA v1.2.1
  [7057c7e9] + Cassette v0.3.3
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [864edb3b] + DataStructures v0.17.20
  [e2ba6199] + ExprTools v0.1.1
  [0c68f7d7] + GPUArrays v5.0.0
  [61eb1bfa] + GPUCompiler v0.4.1
  [63c18a36] + KernelAbstractions v0.3.0
  [929cbde3] + LLVM v1.7.0
  [1914dd2f] + MacroTools v0.5.5
  [872c559c] + NNlib v0.7.4
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [bac558e1] + OrderedCollections v1.3.0
  [189a3867] + Reexport v0.2.0
  [ae029012] + Requires v1.0.1
  [276daf66] + SpecialFunctions v0.10.3
  [90137ffa] + StaticArrays v0.12.4
  [a759f4b9] + TimerOutputs v0.5.6
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KernelAbstractions
Status `/tmp/jl_SRDQ2j/Project.toml`
  [052768ef] CUDA v1.2.1
  [63c18a36] KernelAbstractions v0.3.0
  [da04e1cc] MPI v0.15.1
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.4
  [b77e0a4c] InteractiveUtils
  [8dfed614] Test
Status `/tmp/jl_SRDQ2j/Manifest.toml`
  [621f4979] AbstractFFTs v0.5.0
  [79e6a3ab] Adapt v2.0.2
  [b99e7846] BinaryProvider v0.5.10
  [fa961155] CEnum v0.4.1
  [052768ef] CUDA v1.2.1
  [7057c7e9] Cassette v0.3.3
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [864edb3b] DataStructures v0.17.20
  [ffbed154] DocStringExtensions v0.8.2
  [e2ba6199] ExprTools v0.1.1
  [0c68f7d7] GPUArrays v5.0.0
  [61eb1bfa] GPUCompiler v0.4.1
  [63c18a36] KernelAbstractions v0.3.0
  [929cbde3] LLVM v1.7.0
  [da04e1cc] MPI v0.15.1
  [7cb0a576] MPICH_jll v3.3.2+10
  [1914dd2f] MacroTools v0.5.5
  [9237b28f] MicrosoftMPI_jll v10.1.2+3
  [872c559c] NNlib v0.7.4
  [fe0851c0] OpenMPI_jll v4.0.2+2
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [bac558e1] OrderedCollections v1.3.0
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v1.0.1
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.4
  [a759f4b9] TimerOutputs v0.5.6
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
indextest: Error During Test at /home/pkgeval/.julia/packages/KernelAbstractions/yw9SF/test/test.jl:109
  Got exception outside of a @test
  TaskFailedException:
  TaskFailedException:
  MethodError: no method matching CartesianIndex(::Tuple{Base.OneTo{Int64}})
  Closest candidates are:
    CartesianIndex(!Matched::Tuple{Vararg{Integer,N}}) where N at multidimensional.jl:68
    CartesianIndex(!Matched::Integer...) at multidimensional.jl:69
    CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:76
    ...
  Stacktrace:
    [1] call(#unused#::Cassette.Context{nametype(CPUCtx),KernelAbstractions.CompilerMetadata{DynamicSize,NoDynamicCheck,CartesianIndex{1},CartesianIndices{1,Tuple{Base.OneTo{Int64}}},NDRange{1,DynamicSize,StaticSize{(8,)},CartesianIndices{1,Tuple{Base.OneTo{Int64}}},Nothing}},Nothing,KernelAbstractions.var"##PassType#256",Nothing,Cassette.DisableHooks}, f::Type, args::Tuple{Base.OneTo{Int64}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/context.jl:456
    [2] fallback(::Cassette.Context{nametype(CPUCtx),KernelAbstractions.CompilerMetadata{DynamicSize,NoDynamicCheck,CartesianIndex{1},CartesianIndices{1,Tuple{Base.OneTo{Int64}}},NDRange{1,DynamicSize,StaticSize{(8,)},CartesianIndices{1,Tuple{Base.OneTo{Int64}}},Nothing}},Nothing,KernelAbstractions.var"##PassType#256",Nothing,Cassette.DisableHooks}, ::Type, ::Vararg{Any,N} where N)
      @ Cassette ~/.julia/packages/Cassette/158rp/src/context.jl:454
    [3] overdub(::Cassette.Context{nametype(CPUCtx),KernelAbstractions.CompilerMetadata{DynamicSize,NoDynamicCheck,CartesianIndex{1},CartesianIndices{1,Tuple{Base.OneTo{Int64}}},NDRange{1,DynamicSize,StaticSize{(8,)},CartesianIndices{1,Tuple{Base.OneTo{Int64}}},Nothing}},Nothing,KernelAbstractions.var"##PassType#256",Nothing,Cassette.DisableHooks}, ::Type{CartesianIndex}, ::Tuple{Base.OneTo{Int64}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:536
    [4] first
      @ ./multidimensional.jl:388 [inlined]
    [5] overdub(::Cassette.Context{nametype(CPUCtx),KernelAbstractions.CompilerMetadata{DynamicSize,NoDynamicCheck,CartesianIndex{1},CartesianIndices{1,Tuple{Base.OneTo{Int64}}},NDRange{1,DynamicSize,StaticSize{(8,)},CartesianIndices{1,Tuple{Base.OneTo{Int64}}},Nothing}},Nothing,KernelAbstractions.var"##PassType#256",Nothing,Cassette.DisableHooks}, ::typeof(first), ::CartesianIndices{1,Tuple{Base.OneTo{Int64}}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
    [6] iterate
      @ ./multidimensional.jl:347 [inlined]
    [7] overdub(::Cassette.Context{nametype(CPUCtx),KernelAbstractions.CompilerMetadata{DynamicSize,NoDynamicCheck,CartesianIndex{1},CartesianIndices{1,Tuple{Base.OneTo{Int64}}},NDRange{1,DynamicSize,StaticSize{(8,)},CartesianIndices{1,Tuple{Base.OneTo{Int64}}},Nothing}},Nothing,KernelAbstractions.var"##PassType#256",Nothing,Cassette.DisableHooks}, ::typeof(iterate), ::CartesianIndices{1,Tuple{Base.OneTo{Int64}}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
    [8] cpu_index_linear_global
      @ ./none:0 [inlined]
    [9] overdub(::Cassette.Context{nametype(CPUCtx),KernelAbstractions.CompilerMetadata{DynamicSize,NoDynamicCheck,CartesianIndex{1},CartesianIndices{1,Tuple{Base.OneTo{Int64}}},NDRange{1,DynamicSize,StaticSize{(8,)},CartesianIndices{1,Tuple{Base.OneTo{Int64}}},Nothing}},Nothing,KernelAbstractions.var"##PassType#256",Nothing,Cassette.DisableHooks}, ::typeof(cpu_index_linear_global), ::Matrix{Int64})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [10] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{CPU,StaticSize{(8,)},DynamicSize,typeof(cpu_index_linear_global)}, ndrange::Tuple{Int64}, iterspace::NDRange{1,DynamicSize,StaticSize{(8,)},CartesianIndices{1,Tuple{Base.OneTo{Int64}}},Nothing}, args::Tuple{Matrix{Int64}}, dynamic::NoDynamicCheck)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/yw9SF/src/backends/cpu.jl:150
   [11] (::KernelAbstractions.var"#38#39"{KernelAbstractions.Kernel{CPU,StaticSize{(8,)},DynamicSize,typeof(cpu_index_linear_global)},Tuple{Int64},NDRange{1,DynamicSize,StaticSize{(8,)},CartesianIndices{1,Tuple{Base.OneTo{Int64}}},Nothing},Tuple{Matrix{Int64}},NoDynamicCheck,Int64})()
      @ KernelAbstractions ./threadingconstructs.jl:169
  
  ...and 1 more exception(s).
  
  Stacktrace:
   [1] sync_end(c::Channel{Any})
     @ Base ./task.jl:316
   [2] macro expansion
     @ ./task.jl:335 [inlined]
   [3] __run(obj::KernelAbstractions.Kernel{CPU,StaticSize{(8,)},DynamicSize,typeof(cpu_index_linear_global)}, ndrange::Tuple{Int64}, iterspace::NDRange{1,DynamicSize,StaticSize{(8,)},CartesianIndices{1,Tuple{Base.OneTo{Int64}}},Nothing}, args::Tuple{Matrix{Int64}}, dynamic::NoDynamicCheck)
     @ KernelAbstractions ~/.julia/packages/KernelAbstractions/yw9SF/src/backends/cpu.jl:125
   [4] (::KernelAbstractions.var"#30#31"{Nothing,Nothing,typeof(KernelAbstractions.__run),Tuple{KernelAbstractions.Kernel{CPU,StaticSize{(8,)},DynamicSize,typeof(cpu_index_linear_global)},Tuple{Int64},NDRange{1,DynamicSize,StaticSize{(8,)},CartesianIndices{1,Tuple{Base.OneTo{Int64}}},Nothing},Tuple{Matrix{Int64}},NoDynamicCheck}})()
     @ KernelAbstractions ~/.julia/packages/KernelAbstractions/yw9SF/src/backends/cpu.jl:22
  Stacktrace:
    [1] wait
      @ ./task.jl:269 [inlined]
    [2] wait
      @ ~/.julia/packages/KernelAbstractions/yw9SF/src/backends/cpu.jl:65 [inlined]
    [3] wait
      @ ~/.julia/packages/KernelAbstractions/yw9SF/src/backends/cpu.jl:29 [inlined]
    [4] indextest(backend::CPU, ArrayT::Type)
      @ Main ~/.julia/packages/KernelAbstractions/yw9SF/test/test.jl:74
    [5] top-level scope
      @ ~/.julia/packages/KernelAbstractions/yw9SF/test/test.jl:110
    [6] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
    [7] top-level scope
      @ ~/.julia/packages/KernelAbstractions/yw9SF/test/test.jl:110
    [8] include(fname::String)
      @ Base.MainInclude ./client.jl:443
    [9] top-level scope
      @ ~/.julia/packages/KernelAbstractions/yw9SF/test/runtests.jl:5
   [10] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
   [11] top-level scope
      @ ~/.julia/packages/KernelAbstractions/yw9SF/test/runtests.jl:5
   [12] include(fname::String)
      @ Base.MainInclude ./client.jl:443
   [13] top-level scope
      @ none:6
   [14] eval(m::Module, e::Any)
      @ Core ./boot.jl:344
   [15] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:260
   [16] _start()
      @ Base ./client.jl:484
  
Const: Test Failed at /home/pkgeval/.julia/packages/KernelAbstractions/yw9SF/test/test.jl:132
  Expression: occursin("!alias.scope", IR)
   Evaluated: occursin("!alias.scope", "\n;  @ /home/pkgeval/.julia/packages/Cassette/158rp/src/overdub.jl:586 within `overdub'\n; Function Attrs: noreturn\ndefine nonnull {} addrspace(10)* @julia_overdub_1740({ { i64 } } addrspace(11)* nocapture nonnull readonly align 8 dereferenceable(8), {} addrspace(10)* nonnull align 16 dereferenceable(40), {} addrspace(10)* nonnull align 16 dereferenceable(40)) #0 !dbg !5 {\ntop:\n  %3 = call {}*** @julia.ptls_states()\n  %4 = bitcast {}*** %3 to {} addrspace(10)**\n  %5 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)** %4, i64 4\n  %6 = bitcast {} addrspace(10)** %5 to i64**\n  %7 = load i64*, i64** %6, !tbaa !7, !invariant.load !4\n  %\"##overdub_arguments#257\" = alloca { {} addrspace(10)*, {} addrspace(10)* }\n  %8 = insertvalue { {} addrspace(10)*, {} addrspace(10)* } zeroinitializer, {} addrspace(10)* %1, 0\n  %9 = insertvalue { {} addrspace(10)*, {} addrspace(10)* } %8, {} addrspace(10)* %2, 1\n  store { {} addrspace(10)*, {} addrspace(10)* } %9, { {} addrspace(10)*, {} addrspace(10)* }* %\"##overdub_arguments#257\", !tbaa !11\n; └\n;  @ /home/pkgeval/.julia/packages/Cassette/158rp/src/overdub.jl within `overdub'\n; ┌ @ none within `cpu_constarg'\n   %10 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* }* %\"##overdub_arguments#257\", i32 0, i32 1, !dbg !13\n   %11 = load atomic {} addrspace(10)*, {} addrspace(10)** %10 unordered, align 8, !dbg !13, !tbaa !11, !nonnull !4, !dereferenceable !17, !align !18\n   %12 = bitcast {}*** %3 to i8*, !dbg !13\n   %13 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj(i8* %12, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 140013717142448 to {}*) to {} addrspace(10)*)) #2, !dbg !13\n   %14 = bitcast {} addrspace(10)* %13 to i8 addrspace(10)*, !dbg !13\n   %15 = bitcast { { i64 } } addrspace(11)* %0 to i8 addrspace(11)*, !dbg !13\n   call void @llvm.memcpy.p10i8.p11i8.i64(i8 addrspace(10)* align 8 %14, i8 addrspace(11)* %15, i64 8, i1 false), !dbg !13, !tbaa !19\n   %16 = call cc37 nonnull {} addrspace(10)* bitcast ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_apply_generic to {} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*)*)({} addrspace(10)* addrspacecast ({}* inttoptr (i64 140014476329848 to {}*) to {} addrspace(10)*), {} addrspace(10)* %13, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 140013870931744 to {}*) to {} addrspace(10)*), {} addrspace(10)* %11), !dbg !13\n   %17 = bitcast {}*** %3 to i8*, !dbg !13\n   %18 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj(i8* %17, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 140013717142448 to {}*) to {} addrspace(10)*)) #2, !dbg !13\n   %19 = bitcast {} addrspace(10)* %18 to i8 addrspace(10)*, !dbg !13\n   %20 = bitcast { { i64 } } addrspace(11)* %0 to i8 addrspace(11)*, !dbg !13\n   call void @llvm.memcpy.p10i8.p11i8.i64(i8 addrspace(10)* align 8 %19, i8 addrspace(11)* %20, i64 8, i1 false), !dbg !13, !tbaa !19\n   %21 = call cc37 nonnull {} addrspace(10)* bitcast ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_apply_generic to {} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*)*)({} addrspace(10)* addrspacecast ({}* inttoptr (i64 140014476329848 to {}*) to {} addrspace(10)*), {} addrspace(10)* %18, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 140013870931752 to {}*) to {} addrspace(10)*)), !dbg !13\n   %22 = bitcast {}*** %3 to i8*, !dbg !13\n   %23 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj(i8* %22, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 140013717142448 to {}*) to {} addrspace(10)*)) #2, !dbg !13\n   %24 = bitcast {} addrspace(10)* %23 to i8 addrspace(10)*, !dbg !13\n   %25 = bitcast { { i64 } } addrspace(11)* %0 to i8 addrspace(11)*, !dbg !13\n   call void @llvm.memcpy.p10i8.p11i8.i64(i8 addrspace(10)* align 8 %24, i8 addrspace(11)* %25, i64 8, i1 false), !dbg !13, !tbaa !19\n   %26 = call cc37 nonnull {} addrspace(10)* bitcast ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_apply_generic to {} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*)*)({} addrspace(10)* addrspacecast ({}* inttoptr (i64 140014476329848 to {}*) to {} addrspace(10)*), {} addrspace(10)* %23, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 140014608441152 to {}*) to {} addrspace(10)*), {} addrspace(10)* %21), !dbg !13\n   call void @llvm.trap(), !dbg !13\n   unreachable, !dbg !13\n\nafter_noret:                                      ; No predecessors!\n   unreachable, !dbg !13\n; └\n}\n")
Stacktrace:
 [1] top-level scope
   @ ~/.julia/packages/KernelAbstractions/yw9SF/test/test.jl:132
 [2] top-level scope
   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
 [3] top-level scope
   @ ~/.julia/packages/KernelAbstractions/yw9SF/test/test.jl:122
Const: Test Failed at /home/pkgeval/.julia/packages/KernelAbstractions/yw9SF/test/test.jl:133
  Expression: occursin("!noalias", IR)
   Evaluated: occursin("!noalias", "\n;  @ /home/pkgeval/.julia/packages/Cassette/158rp/src/overdub.jl:586 within `overdub'\n; Function Attrs: noreturn\ndefine nonnull {} addrspace(10)* @julia_overdub_1740({ { i64 } } addrspace(11)* nocapture nonnull readonly align 8 dereferenceable(8), {} addrspace(10)* nonnull align 16 dereferenceable(40), {} addrspace(10)* nonnull align 16 dereferenceable(40)) #0 !dbg !5 {\ntop:\n  %3 = call {}*** @julia.ptls_states()\n  %4 = bitcast {}*** %3 to {} addrspace(10)**\n  %5 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)** %4, i64 4\n  %6 = bitcast {} addrspace(10)** %5 to i64**\n  %7 = load i64*, i64** %6, !tbaa !7, !invariant.load !4\n  %\"##overdub_arguments#257\" = alloca { {} addrspace(10)*, {} addrspace(10)* }\n  %8 = insertvalue { {} addrspace(10)*, {} addrspace(10)* } zeroinitializer, {} addrspace(10)* %1, 0\n  %9 = insertvalue { {} addrspace(10)*, {} addrspace(10)* } %8, {} addrspace(10)* %2, 1\n  store { {} addrspace(10)*, {} addrspace(10)* } %9, { {} addrspace(10)*, {} addrspace(10)* }* %\"##overdub_arguments#257\", !tbaa !11\n; └\n;  @ /home/pkgeval/.julia/packages/Cassette/158rp/src/overdub.jl within `overdub'\n; ┌ @ none within `cpu_constarg'\n   %10 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* }* %\"##overdub_arguments#257\", i32 0, i32 1, !dbg !13\n   %11 = load atomic {} addrspace(10)*, {} addrspace(10)** %10 unordered, align 8, !dbg !13, !tbaa !11, !nonnull !4, !dereferenceable !17, !align !18\n   %12 = bitcast {}*** %3 to i8*, !dbg !13\n   %13 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj(i8* %12, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 140013717142448 to {}*) to {} addrspace(10)*)) #2, !dbg !13\n   %14 = bitcast {} addrspace(10)* %13 to i8 addrspace(10)*, !dbg !13\n   %15 = bitcast { { i64 } } addrspace(11)* %0 to i8 addrspace(11)*, !dbg !13\n   call void @llvm.memcpy.p10i8.p11i8.i64(i8 addrspace(10)* align 8 %14, i8 addrspace(11)* %15, i64 8, i1 false), !dbg !13, !tbaa !19\n   %16 = call cc37 nonnull {} addrspace(10)* bitcast ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_apply_generic to {} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*)*)({} addrspace(10)* addrspacecast ({}* inttoptr (i64 140014476329848 to {}*) to {} addrspace(10)*), {} addrspace(10)* %13, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 140013870931744 to {}*) to {} addrspace(10)*), {} addrspace(10)* %11), !dbg !13\n   %17 = bitcast {}*** %3 to i8*, !dbg !13\n   %18 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj(i8* %17, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 140013717142448 to {}*) to {} addrspace(10)*)) #2, !dbg !13\n   %19 = bitcast {} addrspace(10)* %18 to i8 addrspace(10)*, !dbg !13\n   %20 = bitcast { { i64 } } addrspace(11)* %0 to i8 addrspace(11)*, !dbg !13\n   call void @llvm.memcpy.p10i8.p11i8.i64(i8 addrspace(10)* align 8 %19, i8 addrspace(11)* %20, i64 8, i1 false), !dbg !13, !tbaa !19\n   %21 = call cc37 nonnull {} addrspace(10)* bitcast ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_apply_generic to {} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*)*)({} addrspace(10)* addrspacecast ({}* inttoptr (i64 140014476329848 to {}*) to {} addrspace(10)*), {} addrspace(10)* %18, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 140013870931752 to {}*) to {} addrspace(10)*)), !dbg !13\n   %22 = bitcast {}*** %3 to i8*, !dbg !13\n   %23 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj(i8* %22, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 140013717142448 to {}*) to {} addrspace(10)*)) #2, !dbg !13\n   %24 = bitcast {} addrspace(10)* %23 to i8 addrspace(10)*, !dbg !13\n   %25 = bitcast { { i64 } } addrspace(11)* %0 to i8 addrspace(11)*, !dbg !13\n   call void @llvm.memcpy.p10i8.p11i8.i64(i8 addrspace(10)* align 8 %24, i8 addrspace(11)* %25, i64 8, i1 false), !dbg !13, !tbaa !19\n   %26 = call cc37 nonnull {} addrspace(10)* bitcast ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_apply_generic to {} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*)*)({} addrspace(10)* addrspacecast ({}* inttoptr (i64 140014476329848 to {}*) to {} addrspace(10)*), {} addrspace(10)* %23, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 140014608441152 to {}*) to {} addrspace(10)*), {} addrspace(10)* %21), !dbg !13\n   call void @llvm.trap(), !dbg !13\n   unreachable, !dbg !13\n\nafter_noret:                                      ; No predecessors!\n   unreachable, !dbg !13\n; └\n}\n")
Stacktrace:
 [1] top-level scope
   @ ~/.julia/packages/KernelAbstractions/yw9SF/test/test.jl:133
 [2] top-level scope
   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
 [3] top-level scope
   @ ~/.julia/packages/KernelAbstractions/yw9SF/test/test.jl:122
Const: Error During Test at /home/pkgeval/.julia/packages/KernelAbstractions/yw9SF/test/test.jl:121
  Got exception outside of a @test
  GPU compilation of kernel overdub(Cassette.Context{nametype(CUDACtx),KernelAbstractions.CompilerMetadata{StaticSize{(1024,)},DynamicCheck,Nothing,Nothing,NDRange{1,StaticSize{(128,)},StaticSize{(8,)},Nothing,Nothing}},Nothing,KernelAbstractions.var"##PassType#256",Nothing,Cassette.DisableHooks}, typeof(gpu_constarg), CuDeviceMatrix{Float32,CUDA.AS.Global}, CuDeviceMatrix{Float32,CUDA.AS.Global}) failed
  KernelError: kernel returns a value of type `Union{}`
  
  Make sure your kernel function ends in `return`, `return nothing` or `nothing`.
  If the returned value is of type `Union{}`, your Julia code probably throws an exception.
  Inspect the code with `@device_code_warntype` for more details.
  
  Stacktrace:
    [1] check_method(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget,CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/validation.jl:18
    [2] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [3] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget,CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:63
    [4] code_llvm(io::IOBuffer, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget,CUDA.CUDACompilerParams}; optimize::Bool, raw::Bool, debuginfo::Symbol, dump_module::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/reflection.jl:57
    [5] code_llvm(io::IOBuffer, func::Any, types::Any; kernel::Bool, minthreads::Nothing, maxthreads::Nothing, blocks_per_sm::Nothing, maxregs::Nothing, kwargs::Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:optimize,),Tuple{Bool}}})
      @ CUDA ~/.julia/packages/CUDA/7vLVC/src/compiler/reflection.jl:122
    [6] (::var"#2#4"{DataType,Cassette.Context{nametype(CUDACtx),KernelAbstractions.CompilerMetadata{StaticSize{(1024,)},DynamicCheck,Nothing,Nothing,NDRange{1,StaticSize{(128,)},StaticSize{(8,)},Nothing,Nothing}},Nothing,KernelAbstractions.var"##PassType#256",Nothing,Cassette.DisableHooks},KernelAbstractions.Kernel{CUDADevice,StaticSize{(8,)},StaticSize{(1024,)},typeof(gpu_constarg)}})(io::IOBuffer)
      @ Main ~/.julia/packages/KernelAbstractions/yw9SF/test/test.jl:143
    [7] sprint(::Function; context::Nothing, sizehint::Int64)
      @ Base ./strings/io.jl:105
    [8] sprint(::Function)
      @ Base ./strings/io.jl:101
    [9] top-level scope
      @ ~/.julia/packages/KernelAbstractions/yw9SF/test/test.jl:142
   [10] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
   [11] top-level scope
      @ ~/.julia/packages/KernelAbstractions/yw9SF/test/test.jl:122
   [12] include(fname::String)
      @ Base.MainInclude ./client.jl:443
   [13] top-level scope
      @ ~/.julia/packages/KernelAbstractions/yw9SF/test/runtests.jl:5
   [14] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
   [15] top-level scope
      @ ~/.julia/packages/KernelAbstractions/yw9SF/test/runtests.jl:5
   [16] include(fname::String)
      @ Base.MainInclude ./client.jl:443
   [17] top-level scope
      @ none:6
   [18] eval(m::Module, e::Any)
      @ Core ./boot.jl:344
   [19] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:260
   [20] _start()
      @ Base ./client.jl:484
  
Unittests: Error During Test at /home/pkgeval/.julia/packages/KernelAbstractions/yw9SF/test/runtests.jl:4
  Got exception outside of a @test
  LoadError: TaskFailedException:
  MethodError: no method matching CartesianIndex(::Tuple{Base.OneTo{Int64}})
  Closest candidates are:
    CartesianIndex(!Matched::Tuple{Vararg{Integer,N}}) where N at multidimensional.jl:68
    CartesianIndex(!Matched::Integer...) at multidimensional.jl:69
    CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:76
    ...
  Stacktrace:
    [1] call(#unused#::Cassette.Context{nametype(CPUCtx),KernelAbstractions.CompilerMetadata{DynamicSize,NoDynamicCheck,CartesianIndex{1},CartesianIndices{1,Tuple{Base.OneTo{Int64}}},NDRange{1,DynamicSize,DynamicSize,CartesianIndices{1,Tuple{Base.OneTo{Int64}}},CartesianIndices{1,Tuple{Base.OneTo{Int64}}}}},Nothing,KernelAbstractions.var"##PassType#256",Nothing,Cassette.DisableHooks}, f::Type, args::Tuple{Base.OneTo{Int64}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/context.jl:456
    [2] fallback(::Cassette.Context{nametype(CPUCtx),KernelAbstractions.CompilerMetadata{DynamicSize,NoDynamicCheck,CartesianIndex{1},CartesianIndices{1,Tuple{Base.OneTo{Int64}}},NDRange{1,DynamicSize,DynamicSize,CartesianIndices{1,Tuple{Base.OneTo{Int64}}},CartesianIndices{1,Tuple{Base.OneTo{Int64}}}}},Nothing,KernelAbstractions.var"##PassType#256",Nothing,Cassette.DisableHooks}, ::Type, ::Vararg{Any,N} where N)
      @ Cassette ~/.julia/packages/Cassette/158rp/src/context.jl:454
    [3] overdub(::Cassette.Context{nametype(CPUCtx),KernelAbstractions.CompilerMetadata{DynamicSize,NoDynamicCheck,CartesianIndex{1},CartesianIndices{1,Tuple{Base.OneTo{Int64}}},NDRange{1,DynamicSize,DynamicSize,CartesianIndices{1,Tuple{Base.OneTo{Int64}}},CartesianIndices{1,Tuple{Base.OneTo{Int64}}}}},Nothing,KernelAbstractions.var"##PassType#256",Nothing,Cassette.DisableHooks}, ::Type{CartesianIndex}, ::Tuple{Base.OneTo{Int64}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:536
    [4] first
      @ ./multidimensional.jl:388 [inlined]
    [5] overdub(::Cassette.Context{nametype(CPUCtx),KernelAbstractions.CompilerMetadata{DynamicSize,NoDynamicCheck,CartesianIndex{1},CartesianIndices{1,Tuple{Base.OneTo{Int64}}},NDRange{1,DynamicSize,DynamicSize,CartesianIndices{1,Tuple{Base.OneTo{Int64}}},CartesianIndices{1,Tuple{Base.OneTo{Int64}}}}},Nothing,KernelAbstractions.var"##PassType#256",Nothing,Cassette.DisableHooks}, ::typeof(first), ::CartesianIndices{1,Tuple{Base.OneTo{Int64}}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
    [6] iterate
      @ ./multidimensional.jl:347 [inlined]
    [7] overdub(::Cassette.Context{nametype(CPUCtx),KernelAbstractions.CompilerMetadata{DynamicSize,NoDynamicCheck,CartesianIndex{1},CartesianIndices{1,Tuple{Base.OneTo{Int64}}},NDRange{1,DynamicSize,DynamicSize,CartesianIndices{1,Tuple{Base.OneTo{Int64}}},CartesianIndices{1,Tuple{Base.OneTo{Int64}}}}},Nothing,KernelAbstractions.var"##PassType#256",Nothing,Cassette.DisableHooks}, ::typeof(iterate), ::CartesianIndices{1,Tuple{Base.OneTo{Int64}}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
    [8] cpu_kernel_val!
      @ ./none:0 [inlined]
    [9] overdub(::Cassette.Context{nametype(CPUCtx),KernelAbstractions.CompilerMetadata{DynamicSize,NoDynamicCheck,CartesianIndex{1},CartesianIndices{1,Tuple{Base.OneTo{Int64}}},NDRange{1,DynamicSize,DynamicSize,CartesianIndices{1,Tuple{Base.OneTo{Int64}}},CartesianIndices{1,Tuple{Base.OneTo{Int64}}}}},Nothing,KernelAbstractions.var"##PassType#256",Nothing,Cassette.DisableHooks}, ::typeof(cpu_kernel_val!), ::Vector{Int64}, ::Val{3})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [10] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{CPU,DynamicSize,DynamicSize,typeof(cpu_kernel_val!)}, ndrange::Tuple{Int64}, iterspace::NDRange{1,DynamicSize,DynamicSize,CartesianIndices{1,Tuple{Base.OneTo{Int64}}},CartesianIndices{1,Tuple{Base.OneTo{Int64}}}}, args::Tuple{Vector{Int64},Val{3}}, dynamic::NoDynamicCheck)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/yw9SF/src/backends/cpu.jl:150
   [11] __run(obj::KernelAbstractions.Kernel{CPU,DynamicSize,DynamicSize,typeof(cpu_kernel_val!)}, ndrange::Tuple{Int64}, iterspace::NDRange{1,DynamicSize,DynamicSize,CartesianIndices{1,Tuple{Base.OneTo{Int64}}},CartesianIndices{1,Tuple{Base.OneTo{Int64}}}}, args::Tuple{Vector{Int64},Val{3}}, dynamic::NoDynamicCheck)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/yw9SF/src/backends/cpu.jl:123
   [12] (::KernelAbstractions.var"#30#31"{Nothing,Nothing,typeof(KernelAbstractions.__run),Tuple{KernelAbstractions.Kernel{CPU,DynamicSize,DynamicSize,typeof(cpu_kernel_val!)},Tuple{Int64},NDRange{1,DynamicSize,DynamicSize,CartesianIndices{1,Tuple{Base.OneTo{Int64}}},CartesianIndices{1,Tuple{Base.OneTo{Int64}}}},Tuple{Vector{Int64},Val{3}},NoDynamicCheck}})()
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/yw9SF/src/backends/cpu.jl:22
  Stacktrace:
    [1] wait
      @ ./task.jl:269 [inlined]
    [2] wait
      @ ~/.julia/packages/KernelAbstractions/yw9SF/src/backends/cpu.jl:65 [inlined]
    [3] wait
      @ ~/.julia/packages/KernelAbstractions/yw9SF/src/backends/cpu.jl:29 [inlined]
    [4] top-level scope
      @ ~/.julia/packages/KernelAbstractions/yw9SF/test/test.jl:158
    [5] include(fname::String)
      @ Base.MainInclude ./client.jl:443
    [6] top-level scope
      @ ~/.julia/packages/KernelAbstractions/yw9SF/test/runtests.jl:5
    [7] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
    [8] top-level scope
      @ ~/.julia/packages/KernelAbstractions/yw9SF/test/runtests.jl:5
    [9] include(fname::String)
      @ Base.MainInclude ./client.jl:443
   [10] top-level scope
      @ none:6
   [11] eval(m::Module, e::Any)
      @ Core ./boot.jl:344
   [12] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:260
   [13] _start()
      @ Base ./client.jl:484
  in expression starting at /home/pkgeval/.julia/packages/KernelAbstractions/yw9SF/test/test.jl:158
  
Test Summary: | Pass  Fail  Error  Total
Unittests     |   12     2      3     17
  partition   |   12                  12
  indextest   |                 1      1
  Const       |          2      1      3
ERROR: LoadError: Some tests did not pass: 12 passed, 2 failed, 3 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/KernelAbstractions/yw9SF/test/runtests.jl:4
ERROR: Package KernelAbstractions errored during testing
Stacktrace:
  [1] pkgerror(::String, ::Vararg{String,N} where N)
    @ Pkg.Types /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
  [2] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing)
    @ Pkg.Operations /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1567
  [3] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:328
  [4] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec})
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:315
  [5] #test#62
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [6] test
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [7] #test#61
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [8] test
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [9] test(pkg::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [10] test(pkg::String)
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [11] top-level scope
    @ none:16
