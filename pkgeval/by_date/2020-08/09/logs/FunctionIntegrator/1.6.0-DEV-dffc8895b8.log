Julia Version 1.6.0-DEV.604
Commit dffc8895b8 (2020-08-07 15:04 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed FastGaussQuadrature ────────── v0.4.2
  Installed FunctionIntegrator ─────────── v0.5.1
  Installed SpecialFunctions ───────────── v0.10.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [7685536e] + FunctionIntegrator v0.5.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [442a2c76] + FastGaussQuadrature v0.4.2
  [7685536e] + FunctionIntegrator v0.5.1
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [276daf66] + SpecialFunctions v0.10.3
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing FunctionIntegrator
Status `/tmp/jl_K2jZsj/Project.toml`
  [442a2c76] FastGaussQuadrature v0.4.2
  [7685536e] FunctionIntegrator v0.5.1
  [276daf66] SpecialFunctions v0.10.3
  [8dfed614] Test
Status `/tmp/jl_K2jZsj/Manifest.toml`
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [442a2c76] FastGaussQuadrature v0.4.2
  [7685536e] FunctionIntegrator v0.5.1
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [276daf66] SpecialFunctions v0.10.3
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Performing the Airy Ai(x) test, where Ai(x) is integrated on the semi-infinite domain, or an approximation of it, namely [0,100] and the result is compared to the analytical result 1/3.
Running: adaptive_simpsons_rule
  1.032792 seconds (1.35 M allocations: 71.205 MiB, 11.68% gc time)
Running: chebyshev_quadrature with k=1
  1.571596 seconds (2.25 M allocations: 128.913 MiB, 3.17% gc time)
Running: chebyshev_quadrature with k=2
  0.225931 seconds (425.41 k allocations: 24.418 MiB)
Running: chebyshev_quadrature with k=3
  0.282985 seconds (545.34 k allocations: 29.897 MiB, 4.86% gc time)
Running: chebyshev_quadrature with k=4
  0.348795 seconds (488.16 k allocations: 26.423 MiB)
Running: jacobi_quadrature with α=β=1
 39.189665 seconds (39.41 M allocations: 3.139 GiB, 9.37% gc time)
Running: laguerre_quadrature with k=1
  3.157686 seconds (3.34 M allocations: 185.918 MiB, 2.82% gc time)
Running: legendre_quadrature
  0.201045 seconds (215.24 k allocations: 12.330 MiB)
Running: lobatto_quadrature
  0.373498 seconds (344.63 k allocations: 20.716 MiB, 6.20% gc time)
Running: radau_quadrature
  0.222960 seconds (326.93 k allocations: 19.658 MiB)
Running: rectangle_rule_left. Only a rough approximation can be practically achieved using this function.
 79.115562 seconds (100.02 M allocations: 1.491 GiB, 0.25% gc time)
Running: rectangle_rule_midpoint.
  0.147150 seconds (173.78 k allocations: 3.889 MiB)
Running: rectangle_rule_right. Only a rough approximation can be practically achieved using this function.
 81.251854 seconds (100.02 M allocations: 1.491 GiB, 0.25% gc time)
Running: rombergs_method
  0.619543 seconds (753.66 k allocations: 43.358 MiB)
Running: simpsons_rule
  0.041525 seconds (47.41 k allocations: 2.123 MiB)
Running: simpsons38_rule
  0.095864 seconds (113.25 k allocations: 5.984 MiB)
Running: trapezoidal_rule
  0.387394 seconds (1.52 M allocations: 25.803 MiB, 8.13% gc time)
Test Summary: | Pass  Total
Airy Ai(x)    |   17     17
Performing the besselj test, where BesselJ_1(2) is approximated and the result is compared to the value obtained from SpecialFunctions' besselj function.
Running: adaptive_simpsons_rule with ε=1e-7
  0.093011 seconds (32.68 k allocations: 1.945 MiB)
Running: chebyshev_quadrature with k=1
  0.497220 seconds (274.91 k allocations: 13.934 MiB)
Running: chebyshev_quadrature with k=2
  0.218027 seconds (115.76 k allocations: 3.795 MiB)
Running: chebyshev_quadrature with k=3
  0.165756 seconds (105.11 k allocations: 3.641 MiB)
Running: chebyshev_quadrature with k=4
  0.162595 seconds (87.72 k allocations: 3.287 MiB)
Running: jacobi_quadrature with α=β=1
  2.514419 seconds (536.40 k allocations: 163.508 MiB, 23.41% gc time)
Running: legendre_quadrature
  0.160490 seconds (62.25 k allocations: 3.472 MiB)
Running: lobatto_quadrature
  0.022176 seconds (16.68 k allocations: 1.030 MiB)
Running: radau_quadrature
  0.020528 seconds (16.67 k allocations: 1.029 MiB)
Running: rectangle_rule_left
 30.430813 seconds (471.41 M allocations: 7.025 GiB, 2.38% gc time)
Running: rectangle_rule_midpoint
  0.000025 seconds (45 allocations: 1.047 KiB)
Running: rectangle_rule_right
 31.001895 seconds (476.96 M allocations: 7.107 GiB, 1.94% gc time)
Running: rombergs_method
  0.360593 seconds (360.65 k allocations: 20.331 MiB)
Running: simpsons_rule
  0.000030 seconds (85 allocations: 1.672 KiB)
Running: simpsons38_rule
  0.068215 seconds (19.93 k allocations: 1.196 MiB)
Running: trapezoidal_rule
  0.050856 seconds (18.38 k allocations: 1.101 MiB)
Test Summary: | Pass  Total
besselj       |   16     16
Integrating cos^2(x)/(1+cot(x)) from 0 to pi/2 and comparing the results to the analytical result 0.25.
Running: adaptive_simpsons_rule with ε=1e-7
  0.030987 seconds (1.99 k allocations: 53.594 KiB)
Running: chebyshev_quadrature with k=1
  0.093360 seconds (2.40 k allocations: 113.453 KiB)
Running: chebyshev_quadrature with k=2
  0.095936 seconds (2.65 k allocations: 121.469 KiB)
Running: chebyshev_quadrature with k=3
  0.110850 seconds (3.08 k allocations: 133.688 KiB)
Running: chebyshev_quadrature with k=4
  0.128026 seconds (3.08 k allocations: 133.750 KiB)
Running: jacobi_quadrature with α=β=1
  0.330277 seconds (379.29 k allocations: 19.806 MiB)
Running: legendre_quadrature
  0.060523 seconds (1.24 k allocations: 63.609 KiB)
Running: lobatto_quadrature
  0.000096 seconds (67 allocations: 2.844 KiB)
Running: radau_quadrature
  0.000045 seconds (71 allocations: 3.078 KiB)
Running: rectangle_rule_left
  0.000634 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_midpoint
  0.000400 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right
  0.000557 seconds (9 allocations: 496 bytes)
Running: rombergs_method
  0.077205 seconds (1.01 k allocations: 54.109 KiB)
Running: simpsons_rule
  0.000041 seconds (323 allocations: 5.391 KiB)
Running: simpsons38_rule
  0.030344 seconds (923 allocations: 39.281 KiB)
Running: trapezoidal_rule
  0.023884 seconds (44.33 k allocations: 704.859 KiB)
Test Summary: | Pass  Total
coscotint     |   16     16
Integrating cosine from 0 to pi/2 and comparing the result to the analytical result of 1.
Running: adaptive_simpsons_rule
  0.108101 seconds (75.98 k allocations: 4.409 MiB)
Running: chebyshev_quadrature with k=1
  0.253593 seconds (240.48 k allocations: 13.514 MiB, 13.20% gc time)
Running: chebyshev_quadrature with k=2
  0.289218 seconds (295.72 k allocations: 16.587 MiB)
Running: chebyshev_quadrature with k=3
  0.273352 seconds (275.63 k allocations: 14.992 MiB, 9.23% gc time)
Running: chebyshev_quadrature with k=4
  0.236228 seconds (275.67 k allocations: 14.889 MiB)
Running: jacobi_quadrature with α=β=1
  2.436932 seconds (466.15 k allocations: 164.245 MiB, 6.05% gc time)
Running: legendre_quadrature
  0.188119 seconds (193.22 k allocations: 11.117 MiB)
Running: lobatto_quadrature
  0.179943 seconds (204.45 k allocations: 11.822 MiB)
Running: radau_quadrature
  0.193949 seconds (204.45 k allocations: 11.842 MiB)
Running: rectangle_rule_left
  1.361831 seconds (19.80 k allocations: 1.195 MiB)
Running: rectangle_rule_midpoint
  0.027314 seconds (25.98 k allocations: 1.617 MiB)
Running: rectangle_rule_right
  1.224954 seconds (18.30 k allocations: 1.107 MiB)
Running: rombergs_method
  0.173648 seconds (140.08 k allocations: 8.071 MiB, 13.89% gc time)
Running: simpsons_rule
  0.032940 seconds (29.08 k allocations: 1.804 MiB)
Running: simpsons38_rule
  0.038098 seconds (44.73 k allocations: 2.791 MiB)
Running: trapezoidal_rule
  0.029550 seconds (45.24 k allocations: 1.826 MiB)
Test Summary: | Pass  Total
Cosine        |   16     16
Integrating e^(-x^2)/(1+x^2) on the infinite domain [-inf, inf], or failing that on [-100,100], and comparing it to the analytical result exp(1)*pi*erfc(1)
Running: adaptive_simpsons_rule with ε=1e-7
  0.045829 seconds (101.48 k allocations: 3.079 MiB)
Running: chebyshev_quadrature with k=1
  0.214524 seconds (247.58 k allocations: 13.597 MiB)
Running: chebyshev_quadrature with k=2
  0.272934 seconds (303.35 k allocations: 16.596 MiB, 8.13% gc time)
Running: chebyshev_quadrature with k=3
  0.295322 seconds (283.05 k allocations: 15.012 MiB)
Running: chebyshev_quadrature with k=4
  0.243205 seconds (283.09 k allocations: 15.088 MiB)
Running: hermite_quadrature with k=2
 16.286040 seconds (22.14 M allocations: 1.148 GiB, 9.86% gc time)
Running: jacobi_quadrature with α=β=1
  0.454957 seconds (476.19 k allocations: 50.463 MiB, 8.72% gc time)
Running: laguerre_quadrature with k=1 and multiplying the result by 2 (as Laguerre is only on the semi-infinite domain)
  0.224609 seconds (288.63 k allocations: 15.911 MiB)
Running: legendre_quadrature
  0.194441 seconds (200.29 k allocations: 11.466 MiB, 15.79% gc time)
Running: lobatto_quadrature
  0.232354 seconds (225.97 k allocations: 37.654 MiB)
Running: radau_quadrature
  0.341354 seconds (222.56 k allocations: 30.302 MiB, 8.35% gc time)
Running: rectangle_rule_left
  0.038847 seconds (22.96 k allocations: 1.356 MiB)
Running: rectangle_rule_midpoint
  0.035930 seconds (27.93 k allocations: 1.714 MiB)
Running: rectangle_rule_right
  0.036153 seconds (19.52 k allocations: 1.168 MiB)
Running: rombergs_method
  0.199275 seconds (142.90 k allocations: 8.131 MiB)
Running: simpsons_rule
  0.046283 seconds (41.33 k allocations: 2.160 MiB)
Running: simpsons38_rule
  0.053297 seconds (60.12 k allocations: 3.201 MiB)
Running: trapezoidal_rule
  0.036267 seconds (31.62 k allocations: 1.772 MiB)
Test Summary: | Pass  Total
expnx2datan   |   18     18
Integrate exp(-x^2) from minus infinity to positive infinity and comparing the result to the analytical solution, sqrt(pi)
Running: adaptive_simpsons_rule with ε=1e-7
  0.050681 seconds (61.58 k allocations: 2.363 MiB)
Running: chebyshev_quadrature with k=1
  0.313489 seconds (242.71 k allocations: 13.362 MiB, 8.26% gc time)
Running: chebyshev_quadrature with k=2
  0.253726 seconds (298.07 k allocations: 16.326 MiB)
Running: chebyshev_quadrature with k=3
  0.250483 seconds (277.91 k allocations: 14.780 MiB)
Running: chebyshev_quadrature with k=4
  0.279640 seconds (277.94 k allocations: 14.795 MiB, 13.35% gc time)
Running: hermite_quadrature with k=2
  0.178796 seconds (177.91 k allocations: 10.166 MiB)
Running: jacobi_quadrature with α=β=1
 10.593453 seconds (468.75 k allocations: 1.176 GiB, 11.81% gc time)
Running: laguerre_quadrature (results multiplied by 2, as laguerre only integrates over the semi-infinite domain)
  0.255967 seconds (283.49 k allocations: 15.706 MiB)
Running: legendre_quadrature
  0.227447 seconds (195.46 k allocations: 11.231 MiB, 20.68% gc time)
Running: lobatto_quadrature
  0.209862 seconds (216.33 k allocations: 23.344 MiB)
Running: radau_quadrature
  0.244829 seconds (215.48 k allocations: 21.274 MiB, 6.17% gc time)
Running: rectangle_rule_left
  0.029058 seconds (20.51 k allocations: 1.237 MiB)
Running: rectangle_rule_midpoint
  0.030842 seconds (26.71 k allocations: 1.655 MiB)
Running: rectangle_rule_right
  0.029513 seconds (18.28 k allocations: 1.107 MiB)
Running: rombergs_method
  0.125433 seconds (138.37 k allocations: 7.933 MiB)
Running: simpsons_rule
  0.056438 seconds (33.56 k allocations: 1.934 MiB)
Running: simpsons38_rule
  0.044438 seconds (50.64 k allocations: 2.943 MiB)
Running: trapezoidal_rule
  0.034641 seconds (26.29 k allocations: 1.595 MiB)
Test Summary: | Pass  Total
Gaussian      |   18     18
Integrating 1/x from 1 to e and comparing the result to the analytical solution, 1.
Running: adaptive_simpsons_rule with ε=1e-7
  0.049087 seconds (32.54 k allocations: 1.960 MiB)
Running: chebyshev_quadrature with k=1
  0.297251 seconds (241.04 k allocations: 13.578 MiB)
Running: chebyshev_quadrature with k=2
  0.247265 seconds (296.30 k allocations: 16.727 MiB, 7.22% gc time)
Running: chebyshev_quadrature with k=3
  0.264657 seconds (276.23 k allocations: 14.992 MiB)
Running: chebyshev_quadrature with k=4
  0.218002 seconds (276.27 k allocations: 14.824 MiB)
Running: jacobi_quadrature with α=β=1
  3.168025 seconds (466.80 k allocations: 195.331 MiB, 7.96% gc time)
Running: legendre_quadrature
  0.201961 seconds (193.79 k allocations: 11.207 MiB)
Running: lobatto_quadrature
  0.275894 seconds (205.02 k allocations: 11.865 MiB, 14.40% gc time)
Running: radau_quadrature
  0.179436 seconds (205.02 k allocations: 11.858 MiB)
Running: rectangle_rule_left
  0.356135 seconds (20.37 k allocations: 1.224 MiB)
Running: rectangle_rule_midpoint
  0.032349 seconds (26.35 k allocations: 1.637 MiB)
Running: rectangle_rule_right
  0.129293 seconds (18.68 k allocations: 1.127 MiB)
Running: rombergs_method
  0.158001 seconds (151.46 k allocations: 8.820 MiB)
Running: simpsons_rule
  0.035153 seconds (29.83 k allocations: 1.838 MiB)
Running: simpsons38_rule
  0.040070 seconds (45.51 k allocations: 2.825 MiB)
Running: trapezoidal_rule
  0.028854 seconds (46.24 k allocations: 1.863 MiB)
Test Summary: | Pass  Total
1/x           |   16     16
Integrating log(x)/x from 1 to e and comparing the result to the analytical solution of 0.5.
Running: adaptive_simpsons_rule with ε=1e-7
  0.040023 seconds (33.30 k allocations: 1.908 MiB)
Running: chebyshev_quadrature with k=1
  0.236985 seconds (241.60 k allocations: 13.523 MiB, 8.43% gc time)
Running: chebyshev_quadrature with k=2
  0.240569 seconds (296.90 k allocations: 16.578 MiB)
Running: chebyshev_quadrature with k=3
  0.242035 seconds (276.77 k allocations: 14.912 MiB)
Running: chebyshev_quadrature with k=4
  0.296759 seconds (276.81 k allocations: 14.992 MiB, 8.53% gc time)
Running: jacobi_quadrature with α=β=1
  2.446910 seconds (467.46 k allocations: 149.941 MiB, 6.97% gc time)
Running: legendre_quadrature
  0.194748 seconds (194.36 k allocations: 11.161 MiB)
Running: lobatto_quadrature
  0.204872 seconds (205.60 k allocations: 11.870 MiB, 8.63% gc time)
Running: radau_quadrature
  0.189917 seconds (205.59 k allocations: 11.869 MiB)
Running: rectangle_rule_left
  1.261092 seconds (20.64 k allocations: 1.238 MiB)
Running: rectangle_rule_midpoint
  0.028958 seconds (26.34 k allocations: 1.637 MiB)
Running: rectangle_rule_right
  1.152622 seconds (18.65 k allocations: 1.125 MiB)
Running: rombergs_method
  0.137317 seconds (141.39 k allocations: 8.144 MiB)
Running: simpsons_rule
  0.036419 seconds (30.58 k allocations: 1.866 MiB)
Running: simpsons38_rule
  0.074651 seconds (46.26 k allocations: 2.854 MiB)
Running: trapezoidal_rule
  0.031755 seconds (58.50 k allocations: 2.064 MiB)
Test Summary: | Pass  Total
log(x)/x      |   16     16
Approximating the modified bessel function I_1(1) and comparing it to the result obtained by SpecialFunctions.
Running: adaptive_simpsons_rule with ε=1e-7
  0.190010 seconds (153.20 k allocations: 9.102 MiB)
Running: chebyshev_quadrature with k=1
  0.145738 seconds (91.28 k allocations: 3.297 MiB)
Running: chebyshev_quadrature with k=2
  0.203654 seconds (127.05 k allocations: 3.990 MiB, 23.12% gc time)
Running: chebyshev_quadrature with k=3
  0.173163 seconds (115.62 k allocations: 3.819 MiB)
Running: chebyshev_quadrature with k=4
  0.160206 seconds (95.16 k allocations: 3.413 MiB)
Running: jacobi_quadrature with α=β=1
  2.129071 seconds (510.13 k allocations: 169.323 MiB, 9.26% gc time)
Running: legendre_quadrature
  0.132543 seconds (38.38 k allocations: 2.107 MiB, 11.55% gc time)
Running: lobatto_quadrature
  0.000163 seconds (150 allocations: 4.328 KiB)
Running: radau_quadrature
  0.000094 seconds (148 allocations: 4.375 KiB)
Running: rectangle_rule_left
 49.143423 seconds (590.00 M allocations: 8.792 GiB, 2.82% gc time)
Running: rectangle_rule_midpoint
  0.000090 seconds (40 allocations: 992 bytes)
Running: rectangle_rule_right
 49.943872 seconds (592.75 M allocations: 8.833 GiB, 2.78% gc time)
Running: rombergs_method
  0.129641 seconds (41.93 k allocations: 2.260 MiB)
Running: simpsons_rule
  0.000086 seconds (93 allocations: 1.797 KiB)
Running: simpsons38_rule
  0.044816 seconds (463 allocations: 22.578 KiB)
Running: trapezoidal_rule
  0.036782 seconds (179 allocations: 8.766 KiB)
Test Summary: | Pass  Total
modbessel0    |   16     16
Integrating 1/sqrt(-19.6 sin(x)) from -pi to 0 and comparing the result to the analytical solution of ellipk(1/2)/sqrt(2.45) The integrand has singularities at x = -pi and x=0, so for some of these functions the integration domain has to be itself approximated.
Running: adaptive_simpsons_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 35.821170 seconds (629.34 M allocations: 9.388 GiB, 4.18% gc time)
Running: chebyshev_quadrature with k=1
  0.460263 seconds (439.56 k allocations: 24.279 MiB)
Running: chebyshev_quadrature with k=2
 15.654405 seconds (496.97 k allocations: 4.042 GiB, 4.42% gc time)
Running: chebyshev_quadrature with k=3
  6.086722 seconds (290.74 k allocations: 1.643 GiB, 4.94% gc time)
Running: chebyshev_quadrature with k=4
  8.567364 seconds (290.77 k allocations: 2.262 GiB, 2.42% gc time)
Running: jacobi_quadrature with α=β=1. The N value required to get an accurate result is too high to be practical, so only a rough approximation can be arrived at.
 54.623344 seconds (505.56 k allocations: 13.255 GiB, 3.98% gc time)
Running: legendre_quadrature.
  6.090168 seconds (233.03 k allocations: 1.976 GiB, 1.67% gc time)
The following integration functions have to use an approximated domain due to the endpoint singularities.
Running: lobatto_quadrature on [-pi+1e-6, -1e-6]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 58.034910 seconds (8.24 M allocations: 13.384 GiB, 4.89% gc time)
Running: radau_quadrature on [-pi+1e-6, -1e-6]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 60.379618 seconds (7.24 M allocations: 13.369 GiB, 3.18% gc time)
Running: rectangle_rule_left on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  3.060445 seconds (23.40 k allocations: 1.405 MiB)
Running: rectangle_rule_midpoint on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  3.061345 seconds (32.03 k allocations: 1.962 MiB)
Running: rectangle_rule_right on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  2.986148 seconds (23.62 k allocations: 1.416 MiB)
Running: rombergs_method on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  1.214673 seconds (457.15 k allocations: 153.723 MiB)
Running: simpsons_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 42.357735 seconds (600.04 M allocations: 8.943 GiB, 8.48% gc time)
Running: simpsons38_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 43.474956 seconds (600.05 M allocations: 8.944 GiB, 7.73% gc time)
Running: trapezoidal_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 41.050403 seconds (600.04 M allocations: 8.943 GiB, 8.05% gc time)
Test Summary: | Pass  Total
Simppen       |   16     16
Integrating sin(x^2)e^(-x)/x from 0 to infinity, with the approximated domain of integration of 0 to 100. The removable singularity at x=0 in the integrand has been removed.
Running: adaptive_simpsons_rule with ε=1e-8
  0.066016 seconds (182.59 k allocations: 4.522 MiB)
Running: chebyshev_quadrature with k=1
  0.257002 seconds (258.20 k allocations: 14.029 MiB)
Running: chebyshev_quadrature with k=2
  0.284275 seconds (284.36 k allocations: 15.193 MiB)
Running: chebyshev_quadrature with k=3
  0.253898 seconds (260.81 k allocations: 13.465 MiB)
Running: chebyshev_quadrature with k=4
  0.274258 seconds (260.84 k allocations: 13.461 MiB)
Running: jacobi_quadrature with α=β=1
  0.375916 seconds (405.67 k allocations: 35.876 MiB)
Running: laguerre_quadrature with k=2
  0.188376 seconds (188.19 k allocations: 10.881 MiB)
Running: legendre_quadrature
  0.125687 seconds (151.90 k allocations: 8.430 MiB)
Running: lobatto_quadrature
  0.035237 seconds (10.88 k allocations: 15.109 MiB)
Running: radau_quadrature
  0.031555 seconds (9.66 k allocations: 13.183 MiB)
Running: rectangle_rule_left
  0.056395 seconds (19.85 k allocations: 1.172 MiB)
Running: rectangle_rule_midpoint
  0.048043 seconds (26.82 k allocations: 1.642 MiB)
Running: rectangle_rule_right
  0.056331 seconds (18.40 k allocations: 1.096 MiB)
Running: rombergs_method
  0.229438 seconds (170.24 k allocations: 9.689 MiB)
Running: simpsons_rule
  0.001986 seconds (24.72 k allocations: 386.656 KiB)
Running: simpsons38_rule
  0.058011 seconds (81.54 k allocations: 3.524 MiB)
Running: trapezoidal_rule
  0.211055 seconds (2.39 M allocations: 37.759 MiB)
Test Summary: | Pass  Total
sinexpox      |   17     17
Integrating sin(x)/x from 0 to 100 and comparing it to the exact result.
Running: adaptive_simpsons_rule with ε=1e-8
  0.002053 seconds (30.71 k allocations: 480.250 KiB)
Running: chebyshev_quadrature with k=1
  0.099898 seconds (2.58 k allocations: 1.696 MiB)
Running: chebyshev_quadrature with k=2
  0.103581 seconds (2.84 k allocations: 2.359 MiB)
Running: chebyshev_quadrature with k=3
  0.122285 seconds (3.26 k allocations: 2.060 MiB)
Running: chebyshev_quadrature with k=4
  0.112393 seconds (3.26 k allocations: 1.501 MiB)
Running: jacobi_quadrature with α=β=1
  8.736971 seconds (402.46 k allocations: 906.578 MiB, 4.59% gc time)
Running: legendre_quadrature
  0.068874 seconds (1.33 k allocations: 72.281 KiB)
Running: lobatto_quadrature
  0.000219 seconds (253 allocations: 9.188 KiB)
Running: radau_quadrature
  0.000151 seconds (221 allocations: 8.812 KiB)
Running: rectangle_rule_left; only a rough approximation can be practically achieved using this function
  3.665396 seconds (11 allocations: 528 bytes)
Running: rectangle_rule_midpoint
  0.000426 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right; only a rough approximation can be practically achieved using this function
  3.471532 seconds (11 allocations: 528 bytes)
Running: rombergs_method
  0.089578 seconds (1.16 k allocations: 66.734 KiB)
Running: simpsons_rule
  0.000044 seconds (9 allocations: 496 bytes)
Running: simpsons38_rule
  0.000051 seconds (9 allocations: 496 bytes)
Running: trapezoidal_rule
  0.000859 seconds (9 allocations: 496 bytes)
Test Summary: | Pass  Total
sinxx         |   16     16
Integrating (x^3+1)/(x^4 (x+1)(x^2+1)) from 1 to e and comparing the result to the analytical solution of log(sqrt(2)*exp(1)/(sqrt(exp(2)+1)))+1/2*(exp(-2)-1)+1/3*(1-exp(-3))
Running: adaptive_simpsons_rule with ε=1e-8
  0.000811 seconds (6.34 k allocations: 99.453 KiB)
Running: chebyshev_quadrature with k=1
  0.110913 seconds (2.48 k allocations: 576.609 KiB)
Running: chebyshev_quadrature with k=2
  0.127341 seconds (2.73 k allocations: 777.391 KiB)
Running: chebyshev_quadrature with k=3
  0.120381 seconds (3.15 k allocations: 685.641 KiB)
Running: chebyshev_quadrature with k=4
  0.118038 seconds (3.16 k allocations: 516.203 KiB)
Running: jacobi_quadrature with α=β=1
  3.580988 seconds (388.73 k allocations: 253.822 MiB)
Running: legendre_quadrature
  0.066237 seconds (1.28 k allocations: 65.438 KiB)
Running: lobatto_quadrature
  0.000162 seconds (91 allocations: 3.656 KiB)
Running: radau_quadrature
  0.000048 seconds (81 allocations: 3.453 KiB)
Running: rectangle_rule_left; only a rough approximation can be practically achieved using this function.
 12.289545 seconds (11 allocations: 528 bytes)
Running: rectangle_rule_midpoint
  0.001097 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right; only a rough approximation can be practically achieved using this function.
 10.657796 seconds (11 allocations: 528 bytes)
Running: rombergs_method
  0.086600 seconds (1.18 k allocations: 62.562 KiB)
Running: simpsons_rule
  0.000061 seconds (9 allocations: 496 bytes)
Running: simpsons38_rule
  0.000048 seconds (9 allocations: 496 bytes)
Running: trapezoidal_rule
  0.001654 seconds (9 allocations: 496 bytes)
Test Summary: | Pass  Total
partfrac      |   16     16
    Testing FunctionIntegrator tests passed 
