Julia Version 1.6.0-DEV.599
Commit dec8f72aa2 (2020-08-06 16:56 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.0
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.0
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_PVVk6T/Project.toml`
  [5789e2e9] FileIO v1.4.0
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_PVVk6T/Manifest.toml`
  [5789e2e9] FileIO v1.4.0
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.2172335751545958
curgen: 20 fitness: 0.2172335751545958
curgen: 30 fitness: 0.2172335751545958
curgen: 40 fitness: 0.2172335751545958
curgen: 50 fitness: 0.2172335751545958
CoordinateCreature{Vector{Float64}}([0.2225827774311522], -0.2172335751545958) 0.2225827774311522 -0.2172335751545958
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.2582788524579063
curgen: 100 fitness: 3.2582858514383015
curgen: 150 fitness: 3.2583504037584494
curgen: 200 fitness: 3.258357866856445
curgen: 250 fitness: 3.2583690516771284
curgen: 300 fitness: 3.2583700093646084
curgen: 350 fitness: 3.2584345557201515
curgen: 400 fitness: 3.258462296574976
curgen: 450 fitness: 3.2584635210476316
curgen: 500 fitness: 3.2584635210476316
CoordinateCreature{Vector{Float64}}([-0.22264748949404878, -0.22247370010363293, 0.22220802401471326, 0.22257789816300347, 0.22261799375704353, -0.22244536836059858, -0.22226228115029656, -0.22265586415541283, 0.22266609105105323, 0.22226025547618947, -0.22241694384396943, -0.22234453674598323, 0.22286425035460874, 0.22225030879504823, 0.22313084164881108], -3.2584635210476316) [-0.22264748949404878, -0.22247370010363293, 0.22220802401471326, 0.22257789816300347, 0.22261799375704353, -0.22244536836059858, -0.22226228115029656, -0.22265586415541283, 0.22266609105105323, 0.22226025547618947, -0.22241694384396943, -0.22234453674598323, 0.22286425035460874, 0.22225030879504823, 0.22313084164881108] -3.2584635210476316
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.002431402207321298
curgen: 100 fitness: -0.0016443655341902286
curgen: 150 fitness: -0.0011243888827436876
curgen: 200 fitness: -0.0011243888827436876
curgen: 250 fitness: -0.0011243888827436876
curgen: 300 fitness: -0.0011243888827436876
curgen: 350 fitness: -0.0011243888827436876
curgen: 400 fitness: -0.0010544220087069789
curgen: 450 fitness: -0.0010470991645661343
curgen: 500 fitness: -0.0010464206491747063
CoordinateCreature{Vector{Float64}}([0.001097997713419353, 0.0002319389437108832, 0.00023428106612898014, 0.0004237217116439685, 0.0014293049543696538, 2.91286587915821e-5, 0.0004601459414943547, -4.8620844656837615e-5, 0.0006975616390869719, 0.0005856295899150958, -0.00025265213782540725, 7.745833868098568e-5, 0.0006346861333558957, -0.0003233700550864827, 0.0003406829091400209], 0.0010464206491747063) [0.001097997713419353, 0.0002319389437108832, 0.00023428106612898014, 0.0004237217116439685, 0.0014293049543696538, 2.91286587915821e-5, 0.0004601459414943547, -4.8620844656837615e-5, 0.0006975616390869719, 0.0005856295899150958, -0.00025265213782540725, 7.745833868098568e-5, 0.0006346861333558957, -0.0003233700550864827, 0.0003406829091400209] 0.0010464206491747063
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
