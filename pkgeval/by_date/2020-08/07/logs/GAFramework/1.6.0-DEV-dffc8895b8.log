Julia Version 1.6.0-DEV.604
Commit dffc8895b8 (2020-08-07 15:04 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.0
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.0
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_ULmqYO/Project.toml`
  [5789e2e9] FileIO v1.4.0
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_ULmqYO/Manifest.toml`
  [5789e2e9] FileIO v1.4.0
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.2172326939207172
curgen: 20 fitness: 0.2172326939207172
curgen: 30 fitness: 0.2172326939207172
curgen: 40 fitness: 0.2172328248641545
curgen: 50 fitness: 0.2172328248641545
CoordinateCreature{Vector{Float64}}([0.22241351785941746], -0.2172328248641545) 0.22241351785941746 -0.2172328248641545
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.2581751924724114
curgen: 100 fitness: 3.2583157633203803
curgen: 150 fitness: 3.258390792893544
curgen: 200 fitness: 3.2584128802931107
curgen: 250 fitness: 3.2584261149785383
curgen: 300 fitness: 3.258464385962816
curgen: 350 fitness: 3.2584701590698404
curgen: 400 fitness: 3.2584701590698404
curgen: 450 fitness: 3.2584915426107757
curgen: 500 fitness: 3.2584915426107757
CoordinateCreature{Vector{Float64}}([0.22232079598431476, -0.22266384841924722, 0.22255802017568604, 0.2225200049791237, -0.22267912238670987, -0.22239038764322577, -0.22249206017153622, -0.22287778757777096, -0.2227047424897758, -0.22247152703120293, -0.22259119559775933, 0.22254605646462897, -0.22257109152484428, 0.22273643596659226, -0.2226034945852983], -3.2584915426107757) [0.22232079598431476, -0.22266384841924722, 0.22255802017568604, 0.2225200049791237, -0.22267912238670987, -0.22239038764322577, -0.22249206017153622, -0.22287778757777096, -0.2227047424897758, -0.22247152703120293, -0.22259119559775933, 0.22254605646462897, -0.22257109152484428, 0.22273643596659226, -0.2226034945852983] -3.2584915426107757
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.0020113862433106533
curgen: 100 fitness: -0.0020113862433106533
curgen: 150 fitness: -0.0020113862433106533
curgen: 200 fitness: -0.001320507564315676
curgen: 250 fitness: -0.001320507564315676
curgen: 300 fitness: -0.0012322017468591184
curgen: 350 fitness: -0.0012322017468591184
curgen: 400 fitness: -0.001129897133665736
curgen: 450 fitness: -0.001129897133665736
curgen: 500 fitness: -0.0010697598654019203
CoordinateCreature{Vector{Float64}}([-4.016333897320819e-5, 0.0006103009737270099, 0.0008189121379384062, -0.00030673522758381663, 0.0009108290323552085, 0.00016183733777419172, 0.0004407075561895426, 0.00018712186579461813, 0.0008118497598215323, -0.0004724267849203674, -0.00020645622541461226, -0.0005339644715218065, 8.715528898446158e-6, -0.0012536975782526632, 0.0006216744697483687], 0.0010697598654019203) [-4.016333897320819e-5, 0.0006103009737270099, 0.0008189121379384062, -0.00030673522758381663, 0.0009108290323552085, 0.00016183733777419172, 0.0004407075561895426, 0.00018712186579461813, 0.0008118497598215323, -0.0004724267849203674, -0.00020645622541461226, -0.0005339644715218065, 8.715528898446158e-6, -0.0012536975782526632, 0.0006216744697483687] 0.0010697598654019203
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
