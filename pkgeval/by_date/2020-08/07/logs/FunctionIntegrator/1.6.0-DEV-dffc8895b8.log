Julia Version 1.6.0-DEV.604
Commit dffc8895b8 (2020-08-07 15:04 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed FastGaussQuadrature ────────── v0.4.2
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed FunctionIntegrator ─────────── v0.5.1
  Installed SpecialFunctions ───────────── v0.10.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [7685536e] + FunctionIntegrator v0.5.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [442a2c76] + FastGaussQuadrature v0.4.2
  [7685536e] + FunctionIntegrator v0.5.1
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [276daf66] + SpecialFunctions v0.10.3
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing FunctionIntegrator
Status `/tmp/jl_Mh5uXM/Project.toml`
  [442a2c76] FastGaussQuadrature v0.4.2
  [7685536e] FunctionIntegrator v0.5.1
  [276daf66] SpecialFunctions v0.10.3
  [8dfed614] Test
Status `/tmp/jl_Mh5uXM/Manifest.toml`
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [442a2c76] FastGaussQuadrature v0.4.2
  [7685536e] FunctionIntegrator v0.5.1
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [276daf66] SpecialFunctions v0.10.3
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Performing the Airy Ai(x) test, where Ai(x) is integrated on the semi-infinite domain, or an approximation of it, namely [0,100] and the result is compared to the analytical result 1/3.
Running: adaptive_simpsons_rule
  0.854982 seconds (1.35 M allocations: 71.205 MiB, 3.71% gc time)
Running: chebyshev_quadrature with k=1
  1.661350 seconds (2.25 M allocations: 128.913 MiB, 3.95% gc time)
Running: chebyshev_quadrature with k=2
  0.250153 seconds (425.41 k allocations: 24.418 MiB)
Running: chebyshev_quadrature with k=3
  0.338920 seconds (545.34 k allocations: 29.897 MiB, 4.06% gc time)
Running: chebyshev_quadrature with k=4
  0.301647 seconds (488.16 k allocations: 26.423 MiB)
Running: jacobi_quadrature with α=β=1
 38.792276 seconds (39.41 M allocations: 3.139 GiB, 8.83% gc time)
Running: laguerre_quadrature with k=1
  2.859475 seconds (3.34 M allocations: 185.920 MiB, 2.25% gc time)
Running: legendre_quadrature
  0.201500 seconds (215.24 k allocations: 12.330 MiB)
Running: lobatto_quadrature
  0.375549 seconds (344.63 k allocations: 20.716 MiB, 9.34% gc time)
Running: radau_quadrature
  0.271521 seconds (326.93 k allocations: 19.658 MiB)
Running: rectangle_rule_left. Only a rough approximation can be practically achieved using this function.
 79.884417 seconds (100.02 M allocations: 1.491 GiB, 0.60% gc time)
Running: rectangle_rule_midpoint.
  0.143864 seconds (173.78 k allocations: 3.889 MiB)
Running: rectangle_rule_right. Only a rough approximation can be practically achieved using this function.
 79.797261 seconds (100.02 M allocations: 1.491 GiB, 0.56% gc time)
Running: rombergs_method
  0.525382 seconds (753.66 k allocations: 43.358 MiB, 5.60% gc time)
Running: simpsons_rule
  0.034761 seconds (47.41 k allocations: 2.123 MiB)
Running: simpsons38_rule
  0.084000 seconds (113.25 k allocations: 5.984 MiB)
Running: trapezoidal_rule
  0.277730 seconds (1.52 M allocations: 25.803 MiB)
Test Summary: | Pass  Total
Airy Ai(x)    |   17     17
Performing the besselj test, where BesselJ_1(2) is approximated and the result is compared to the value obtained from SpecialFunctions' besselj function.
Running: adaptive_simpsons_rule with ε=1e-7
  0.073435 seconds (32.68 k allocations: 1.945 MiB)
Running: chebyshev_quadrature with k=1
  0.416796 seconds (274.91 k allocations: 13.934 MiB)
Running: chebyshev_quadrature with k=2
  0.142210 seconds (115.76 k allocations: 3.795 MiB)
Running: chebyshev_quadrature with k=3
  0.161502 seconds (105.11 k allocations: 3.641 MiB)
Running: chebyshev_quadrature with k=4
  0.145027 seconds (87.72 k allocations: 3.287 MiB)
Running: jacobi_quadrature with α=β=1
  2.528724 seconds (536.40 k allocations: 163.508 MiB, 7.20% gc time)
Running: legendre_quadrature
  0.170390 seconds (62.25 k allocations: 3.472 MiB)
Running: lobatto_quadrature
  0.023162 seconds (16.68 k allocations: 1.030 MiB)
Running: radau_quadrature
  0.025416 seconds (16.67 k allocations: 1.029 MiB)
Running: rectangle_rule_left
 31.326027 seconds (471.41 M allocations: 7.025 GiB, 2.85% gc time)
Running: rectangle_rule_midpoint
  0.000029 seconds (45 allocations: 1.047 KiB)
Running: rectangle_rule_right
 29.439671 seconds (476.96 M allocations: 7.107 GiB, 1.92% gc time)
Running: rombergs_method
  0.351002 seconds (360.65 k allocations: 20.331 MiB)
Running: simpsons_rule
  0.000027 seconds (85 allocations: 1.672 KiB)
Running: simpsons38_rule
  0.054736 seconds (19.93 k allocations: 1.196 MiB)
Running: trapezoidal_rule
  0.053763 seconds (18.38 k allocations: 1.101 MiB)
Test Summary: | Pass  Total
besselj       |   16     16
Integrating cos^2(x)/(1+cot(x)) from 0 to pi/2 and comparing the results to the analytical result 0.25.
Running: adaptive_simpsons_rule with ε=1e-7
  0.028993 seconds (1.99 k allocations: 53.594 KiB)
Running: chebyshev_quadrature with k=1
  0.093826 seconds (2.40 k allocations: 113.453 KiB)
Running: chebyshev_quadrature with k=2
  0.103741 seconds (2.65 k allocations: 121.469 KiB)
Running: chebyshev_quadrature with k=3
  0.110426 seconds (3.08 k allocations: 133.688 KiB)
Running: chebyshev_quadrature with k=4
  0.118340 seconds (3.08 k allocations: 133.750 KiB)
Running: jacobi_quadrature with α=β=1
  0.361342 seconds (379.29 k allocations: 19.806 MiB)
Running: legendre_quadrature
  0.077908 seconds (1.24 k allocations: 63.609 KiB)
Running: lobatto_quadrature
  0.000090 seconds (67 allocations: 2.844 KiB)
Running: radau_quadrature
  0.000058 seconds (71 allocations: 3.078 KiB)
Running: rectangle_rule_left
  0.000651 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_midpoint
  0.000516 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right
  0.000631 seconds (9 allocations: 496 bytes)
Running: rombergs_method
  0.077040 seconds (1.01 k allocations: 54.109 KiB)
Running: simpsons_rule
  0.000040 seconds (323 allocations: 5.391 KiB)
Running: simpsons38_rule
  0.027586 seconds (923 allocations: 39.281 KiB)
Running: trapezoidal_rule
  0.024287 seconds (44.33 k allocations: 704.859 KiB)
Test Summary: | Pass  Total
coscotint     |   16     16
Integrating cosine from 0 to pi/2 and comparing the result to the analytical result of 1.
Running: adaptive_simpsons_rule
  0.072764 seconds (75.98 k allocations: 4.408 MiB)
Running: chebyshev_quadrature with k=1
  0.215332 seconds (240.48 k allocations: 13.514 MiB, 12.39% gc time)
Running: chebyshev_quadrature with k=2
  0.219558 seconds (295.72 k allocations: 16.587 MiB)
Running: chebyshev_quadrature with k=3
  0.214936 seconds (275.63 k allocations: 14.992 MiB)
Running: chebyshev_quadrature with k=4
  0.247312 seconds (275.67 k allocations: 14.889 MiB, 16.98% gc time)
Running: jacobi_quadrature with α=β=1
  2.129981 seconds (466.15 k allocations: 164.245 MiB, 1.50% gc time)
Running: legendre_quadrature
  0.162964 seconds (193.22 k allocations: 11.117 MiB, 8.31% gc time)
Running: lobatto_quadrature
  0.176174 seconds (204.45 k allocations: 11.822 MiB)
Running: radau_quadrature
  0.158205 seconds (204.45 k allocations: 11.842 MiB)
Running: rectangle_rule_left
  1.120506 seconds (19.80 k allocations: 1.195 MiB)
Running: rectangle_rule_midpoint
  0.026595 seconds (25.98 k allocations: 1.617 MiB)
Running: rectangle_rule_right
  1.142164 seconds (18.30 k allocations: 1.107 MiB)
Running: rombergs_method
  0.134193 seconds (140.08 k allocations: 8.071 MiB)
Running: simpsons_rule
  0.061870 seconds (29.08 k allocations: 1.805 MiB, 39.93% gc time)
Running: simpsons38_rule
  0.039642 seconds (44.73 k allocations: 2.791 MiB)
Running: trapezoidal_rule
  0.025389 seconds (45.24 k allocations: 1.826 MiB)
Test Summary: | Pass  Total
Cosine        |   16     16
Integrating e^(-x^2)/(1+x^2) on the infinite domain [-inf, inf], or failing that on [-100,100], and comparing it to the analytical result exp(1)*pi*erfc(1)
Running: adaptive_simpsons_rule with ε=1e-7
  0.034548 seconds (101.48 k allocations: 3.079 MiB)
Running: chebyshev_quadrature with k=1
  0.185570 seconds (247.58 k allocations: 13.597 MiB)
Running: chebyshev_quadrature with k=2
  0.222417 seconds (303.35 k allocations: 16.596 MiB)
Running: chebyshev_quadrature with k=3
  0.224696 seconds (283.05 k allocations: 15.012 MiB, 8.27% gc time)
Running: chebyshev_quadrature with k=4
  0.201162 seconds (283.09 k allocations: 15.088 MiB)
Running: hermite_quadrature with k=2
 15.429025 seconds (22.14 M allocations: 1.148 GiB, 9.40% gc time)
Running: jacobi_quadrature with α=β=1
  0.497006 seconds (476.19 k allocations: 50.462 MiB, 12.53% gc time)
Running: laguerre_quadrature with k=1 and multiplying the result by 2 (as Laguerre is only on the semi-infinite domain)
  0.206493 seconds (288.63 k allocations: 15.911 MiB)
Running: legendre_quadrature
  0.199040 seconds (200.29 k allocations: 11.466 MiB, 19.06% gc time)
Running: lobatto_quadrature
  0.215524 seconds (225.97 k allocations: 37.638 MiB)
Running: radau_quadrature
  0.222186 seconds (222.56 k allocations: 30.302 MiB, 10.24% gc time)
Running: rectangle_rule_left
  0.031503 seconds (22.96 k allocations: 1.356 MiB)
Running: rectangle_rule_midpoint
  0.029438 seconds (27.93 k allocations: 1.714 MiB)
Running: rectangle_rule_right
  0.024790 seconds (19.52 k allocations: 1.168 MiB)
Running: rombergs_method
  0.122035 seconds (142.90 k allocations: 8.131 MiB)
Running: simpsons_rule
  0.035545 seconds (41.33 k allocations: 2.160 MiB)
Running: simpsons38_rule
  0.030954 seconds (60.12 k allocations: 3.201 MiB)
Running: trapezoidal_rule
  0.030032 seconds (31.62 k allocations: 1.772 MiB)
Test Summary: | Pass  Total
expnx2datan   |   18     18
Integrate exp(-x^2) from minus infinity to positive infinity and comparing the result to the analytical solution, sqrt(pi)
Running: adaptive_simpsons_rule with ε=1e-7
  0.039642 seconds (61.58 k allocations: 2.363 MiB)
Running: chebyshev_quadrature with k=1
  0.215584 seconds (242.71 k allocations: 13.362 MiB, 11.95% gc time)
Running: chebyshev_quadrature with k=2
  0.238915 seconds (298.07 k allocations: 16.326 MiB)
Running: chebyshev_quadrature with k=3
  0.220480 seconds (277.91 k allocations: 14.780 MiB)
Running: chebyshev_quadrature with k=4
  0.221990 seconds (277.94 k allocations: 14.795 MiB, 11.66% gc time)
Running: hermite_quadrature with k=2
  0.130565 seconds (177.91 k allocations: 10.166 MiB)
Running: jacobi_quadrature with α=β=1
  9.112670 seconds (468.75 k allocations: 1.176 GiB, 12.63% gc time)
Running: laguerre_quadrature (results multiplied by 2, as laguerre only integrates over the semi-infinite domain)
  0.210079 seconds (283.49 k allocations: 15.706 MiB)
Running: legendre_quadrature
  0.165895 seconds (195.46 k allocations: 11.231 MiB, 9.01% gc time)
Running: lobatto_quadrature
  0.191392 seconds (216.33 k allocations: 23.344 MiB)
Running: radau_quadrature
  0.205949 seconds (215.48 k allocations: 21.274 MiB, 6.98% gc time)
Running: rectangle_rule_left
  0.029551 seconds (20.51 k allocations: 1.237 MiB)
Running: rectangle_rule_midpoint
  0.027444 seconds (26.71 k allocations: 1.655 MiB)
Running: rectangle_rule_right
  0.022787 seconds (18.28 k allocations: 1.107 MiB)
Running: rombergs_method
  0.112114 seconds (138.37 k allocations: 7.931 MiB)
Running: simpsons_rule
  0.034858 seconds (33.56 k allocations: 1.936 MiB)
Running: simpsons38_rule
  0.048318 seconds (50.64 k allocations: 2.943 MiB)
Running: trapezoidal_rule
  0.031644 seconds (26.29 k allocations: 1.595 MiB)
Test Summary: | Pass  Total
Gaussian      |   18     18
Integrating 1/x from 1 to e and comparing the result to the analytical solution, 1.
Running: adaptive_simpsons_rule with ε=1e-7
  0.037478 seconds (32.54 k allocations: 1.960 MiB)
Running: chebyshev_quadrature with k=1
  0.257254 seconds (241.04 k allocations: 13.578 MiB)
Running: chebyshev_quadrature with k=2
  0.246650 seconds (296.30 k allocations: 16.727 MiB, 7.95% gc time)
Running: chebyshev_quadrature with k=3
  0.226832 seconds (276.24 k allocations: 15.008 MiB)
Running: chebyshev_quadrature with k=4
  0.202930 seconds (276.27 k allocations: 14.824 MiB)
Running: jacobi_quadrature with α=β=1
  2.281458 seconds (466.80 k allocations: 195.331 MiB, 11.33% gc time)
Running: legendre_quadrature
  0.148285 seconds (193.79 k allocations: 11.207 MiB)
Running: lobatto_quadrature
  0.197225 seconds (205.02 k allocations: 11.865 MiB, 9.48% gc time)
Running: radau_quadrature
  0.179717 seconds (205.02 k allocations: 11.858 MiB)
Running: rectangle_rule_left
  0.296613 seconds (20.37 k allocations: 1.224 MiB)
Running: rectangle_rule_midpoint
  0.026734 seconds (26.35 k allocations: 1.637 MiB)
Running: rectangle_rule_right
  0.100514 seconds (18.68 k allocations: 1.127 MiB)
Running: rombergs_method
  0.129590 seconds (151.46 k allocations: 8.820 MiB)
Running: simpsons_rule
  0.034473 seconds (29.83 k allocations: 1.838 MiB)
Running: simpsons38_rule
  0.037622 seconds (45.51 k allocations: 2.825 MiB)
Running: trapezoidal_rule
  0.028115 seconds (46.24 k allocations: 1.863 MiB)
Test Summary: | Pass  Total
1/x           |   16     16
Integrating log(x)/x from 1 to e and comparing the result to the analytical solution of 0.5.
Running: adaptive_simpsons_rule with ε=1e-7
  0.036816 seconds (33.30 k allocations: 1.908 MiB)
Running: chebyshev_quadrature with k=1
  0.248330 seconds (241.60 k allocations: 13.523 MiB, 9.64% gc time)
Running: chebyshev_quadrature with k=2
  0.358709 seconds (296.90 k allocations: 16.578 MiB)
Running: chebyshev_quadrature with k=3
  0.263490 seconds (276.77 k allocations: 14.912 MiB)
Running: chebyshev_quadrature with k=4
  0.244638 seconds (276.81 k allocations: 14.992 MiB, 9.93% gc time)
Running: jacobi_quadrature with α=β=1
  1.919882 seconds (467.46 k allocations: 149.941 MiB, 6.09% gc time)
Running: legendre_quadrature
  0.185402 seconds (194.36 k allocations: 11.161 MiB)
Running: lobatto_quadrature
  0.247211 seconds (205.60 k allocations: 11.870 MiB, 15.16% gc time)
Running: radau_quadrature
  0.214835 seconds (205.59 k allocations: 11.869 MiB)
Running: rectangle_rule_left
  1.191079 seconds (20.64 k allocations: 1.238 MiB)
Running: rectangle_rule_midpoint
  0.026393 seconds (26.34 k allocations: 1.637 MiB)
Running: rectangle_rule_right
  1.152214 seconds (18.65 k allocations: 1.125 MiB)
Running: rombergs_method
  0.137826 seconds (141.39 k allocations: 8.144 MiB)
Running: simpsons_rule
  0.034548 seconds (30.58 k allocations: 1.866 MiB)
Running: simpsons38_rule
  0.033696 seconds (46.26 k allocations: 2.854 MiB)
Running: trapezoidal_rule
  0.029625 seconds (58.50 k allocations: 2.064 MiB)
Test Summary: | Pass  Total
log(x)/x      |   16     16
Approximating the modified bessel function I_1(1) and comparing it to the result obtained by SpecialFunctions.
Running: adaptive_simpsons_rule with ε=1e-7
  0.173284 seconds (153.20 k allocations: 9.102 MiB)
Running: chebyshev_quadrature with k=1
  0.179172 seconds (91.28 k allocations: 3.297 MiB)
Running: chebyshev_quadrature with k=2
  0.202602 seconds (127.05 k allocations: 3.990 MiB, 14.33% gc time)
Running: chebyshev_quadrature with k=3
  0.176232 seconds (115.62 k allocations: 3.819 MiB)
Running: chebyshev_quadrature with k=4
  0.176849 seconds (95.16 k allocations: 3.413 MiB)
Running: jacobi_quadrature with α=β=1
  3.291179 seconds (510.13 k allocations: 169.323 MiB, 4.04% gc time)
Running: legendre_quadrature
  0.113009 seconds (38.38 k allocations: 2.107 MiB, 12.68% gc time)
Running: lobatto_quadrature
  0.000105 seconds (150 allocations: 4.328 KiB)
Running: radau_quadrature
  0.000040 seconds (148 allocations: 4.375 KiB)
Running: rectangle_rule_left
 46.451316 seconds (590.00 M allocations: 8.792 GiB, 2.91% gc time)
Running: rectangle_rule_midpoint
  0.000027 seconds (40 allocations: 992 bytes)
Running: rectangle_rule_right
 47.035556 seconds (592.75 M allocations: 8.833 GiB, 2.80% gc time)
Running: rombergs_method
  0.125382 seconds (41.93 k allocations: 2.260 MiB)
Running: simpsons_rule
  0.000056 seconds (93 allocations: 1.797 KiB)
Running: simpsons38_rule
  0.029973 seconds (463 allocations: 22.578 KiB)
Running: trapezoidal_rule
  0.024014 seconds (179 allocations: 8.766 KiB)
Test Summary: | Pass  Total
modbessel0    |   16     16
Integrating 1/sqrt(-19.6 sin(x)) from -pi to 0 and comparing the result to the analytical solution of ellipk(1/2)/sqrt(2.45) The integrand has singularities at x = -pi and x=0, so for some of these functions the integration domain has to be itself approximated.
Running: adaptive_simpsons_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 35.117640 seconds (629.34 M allocations: 9.388 GiB, 4.11% gc time)
Running: chebyshev_quadrature with k=1
  0.482968 seconds (439.56 k allocations: 24.279 MiB)
Running: chebyshev_quadrature with k=2
 13.397826 seconds (496.97 k allocations: 4.042 GiB, 3.86% gc time)
Running: chebyshev_quadrature with k=3
  5.781630 seconds (290.74 k allocations: 1.643 GiB, 5.22% gc time)
Running: chebyshev_quadrature with k=4
  8.736358 seconds (290.77 k allocations: 2.262 GiB, 2.39% gc time)
Running: jacobi_quadrature with α=β=1. The N value required to get an accurate result is too high to be practical, so only a rough approximation can be arrived at.
 58.782548 seconds (505.56 k allocations: 13.255 GiB, 3.76% gc time)
Running: legendre_quadrature.
  6.859843 seconds (233.03 k allocations: 1.976 GiB, 2.83% gc time)
The following integration functions have to use an approximated domain due to the endpoint singularities.
Running: lobatto_quadrature on [-pi+1e-6, -1e-6]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 53.311059 seconds (8.24 M allocations: 13.384 GiB, 4.22% gc time)
Running: radau_quadrature on [-pi+1e-6, -1e-6]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 49.793846 seconds (7.24 M allocations: 13.369 GiB, 3.01% gc time)
Running: rectangle_rule_left on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  3.149191 seconds (23.40 k allocations: 1.405 MiB)
Running: rectangle_rule_midpoint on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  3.125082 seconds (32.03 k allocations: 1.962 MiB)
Running: rectangle_rule_right on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  3.111686 seconds (23.62 k allocations: 1.416 MiB)
Running: rombergs_method on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  1.325012 seconds (457.15 k allocations: 153.723 MiB)
Running: simpsons_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 36.464319 seconds (600.04 M allocations: 8.943 GiB, 8.80% gc time)
Running: simpsons38_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 39.063110 seconds (600.05 M allocations: 8.944 GiB, 8.05% gc time)
Running: trapezoidal_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 38.386488 seconds (600.04 M allocations: 8.943 GiB, 8.50% gc time)
Test Summary: | Pass  Total
Simppen       |   16     16
Integrating sin(x^2)e^(-x)/x from 0 to infinity, with the approximated domain of integration of 0 to 100. The removable singularity at x=0 in the integrand has been removed.
Running: adaptive_simpsons_rule with ε=1e-8
  0.062845 seconds (182.59 k allocations: 4.521 MiB)
Running: chebyshev_quadrature with k=1
  0.353874 seconds (258.20 k allocations: 14.029 MiB)
Running: chebyshev_quadrature with k=2
  0.213662 seconds (284.36 k allocations: 15.193 MiB)
Running: chebyshev_quadrature with k=3
  0.195135 seconds (260.81 k allocations: 13.465 MiB)
Running: chebyshev_quadrature with k=4
  0.208012 seconds (260.84 k allocations: 13.461 MiB)
Running: jacobi_quadrature with α=β=1
  0.377395 seconds (405.67 k allocations: 35.876 MiB)
Running: laguerre_quadrature with k=2
  0.180955 seconds (188.19 k allocations: 10.881 MiB)
Running: legendre_quadrature
  0.123691 seconds (151.90 k allocations: 8.430 MiB)
Running: lobatto_quadrature
  0.036651 seconds (10.88 k allocations: 15.109 MiB)
Running: radau_quadrature
  0.032703 seconds (9.66 k allocations: 13.183 MiB)
Running: rectangle_rule_left
  0.076327 seconds (19.85 k allocations: 1.172 MiB)
Running: rectangle_rule_midpoint
  0.090102 seconds (26.82 k allocations: 1.642 MiB)
Running: rectangle_rule_right
  0.065899 seconds (18.40 k allocations: 1.096 MiB)
Running: rombergs_method
  0.226219 seconds (170.24 k allocations: 9.689 MiB)
Running: simpsons_rule
  0.002065 seconds (24.72 k allocations: 386.656 KiB)
Running: simpsons38_rule
  0.045189 seconds (81.54 k allocations: 3.524 MiB)
Running: trapezoidal_rule
  0.172523 seconds (2.39 M allocations: 37.759 MiB)
Test Summary: | Pass  Total
sinexpox      |   17     17
Integrating sin(x)/x from 0 to 100 and comparing it to the exact result.
Running: adaptive_simpsons_rule with ε=1e-8
  0.002410 seconds (30.71 k allocations: 480.250 KiB)
Running: chebyshev_quadrature with k=1
  0.102162 seconds (2.58 k allocations: 1.696 MiB)
Running: chebyshev_quadrature with k=2
  0.120892 seconds (2.84 k allocations: 2.359 MiB)
Running: chebyshev_quadrature with k=3
  0.099443 seconds (3.26 k allocations: 2.060 MiB)
Running: chebyshev_quadrature with k=4
  0.111766 seconds (3.26 k allocations: 1.501 MiB)
Running: jacobi_quadrature with α=β=1
  7.706162 seconds (402.46 k allocations: 906.578 MiB, 6.57% gc time)
Running: legendre_quadrature
  0.063409 seconds (1.33 k allocations: 72.281 KiB)
Running: lobatto_quadrature
  0.000174 seconds (253 allocations: 9.188 KiB)
Running: radau_quadrature
  0.000145 seconds (221 allocations: 8.812 KiB)
Running: rectangle_rule_left; only a rough approximation can be practically achieved using this function
  3.532719 seconds (11 allocations: 528 bytes)
Running: rectangle_rule_midpoint
  0.000420 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right; only a rough approximation can be practically achieved using this function
  3.315583 seconds (11 allocations: 528 bytes)
Running: rombergs_method
  0.058070 seconds (1.16 k allocations: 66.734 KiB)
Running: simpsons_rule
  0.000040 seconds (9 allocations: 496 bytes)
Running: simpsons38_rule
  0.000047 seconds (9 allocations: 496 bytes)
Running: trapezoidal_rule
  0.000832 seconds (9 allocations: 496 bytes)
Test Summary: | Pass  Total
sinxx         |   16     16
Integrating (x^3+1)/(x^4 (x+1)(x^2+1)) from 1 to e and comparing the result to the analytical solution of log(sqrt(2)*exp(1)/(sqrt(exp(2)+1)))+1/2*(exp(-2)-1)+1/3*(1-exp(-3))
Running: adaptive_simpsons_rule with ε=1e-8
  0.000762 seconds (6.34 k allocations: 99.453 KiB)
Running: chebyshev_quadrature with k=1
  0.096952 seconds (2.48 k allocations: 576.609 KiB)
Running: chebyshev_quadrature with k=2
  0.099676 seconds (2.73 k allocations: 777.391 KiB)
Running: chebyshev_quadrature with k=3
  0.105319 seconds (3.15 k allocations: 685.641 KiB)
Running: chebyshev_quadrature with k=4
  0.105393 seconds (3.16 k allocations: 516.203 KiB)
Running: jacobi_quadrature with α=β=1
  2.617339 seconds (388.73 k allocations: 253.822 MiB)
Running: legendre_quadrature
  0.071727 seconds (1.28 k allocations: 65.438 KiB)
Running: lobatto_quadrature
  0.000098 seconds (91 allocations: 3.656 KiB)
Running: radau_quadrature
  0.000068 seconds (81 allocations: 3.453 KiB)
Running: rectangle_rule_left; only a rough approximation can be practically achieved using this function.
 11.150006 seconds (11 allocations: 528 bytes)
Running: rectangle_rule_midpoint
  0.000832 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right; only a rough approximation can be practically achieved using this function.
 10.457245 seconds (11 allocations: 528 bytes)
Running: rombergs_method
  0.068828 seconds (1.18 k allocations: 62.562 KiB)
Running: simpsons_rule
  0.000059 seconds (9 allocations: 496 bytes)
Running: simpsons38_rule
  0.000046 seconds (9 allocations: 496 bytes)
Running: trapezoidal_rule
  0.001690 seconds (9 allocations: 496 bytes)
Test Summary: | Pass  Total
partfrac      |   16     16
    Testing FunctionIntegrator tests passed 
