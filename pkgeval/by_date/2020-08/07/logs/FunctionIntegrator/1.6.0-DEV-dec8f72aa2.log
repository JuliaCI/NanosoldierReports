Julia Version 1.6.0-DEV.599
Commit dec8f72aa2 (2020-08-06 16:56 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed FastGaussQuadrature ────────── v0.4.2
  Installed FunctionIntegrator ─────────── v0.5.1
  Installed SpecialFunctions ───────────── v0.10.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [7685536e] + FunctionIntegrator v0.5.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [442a2c76] + FastGaussQuadrature v0.4.2
  [7685536e] + FunctionIntegrator v0.5.1
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [276daf66] + SpecialFunctions v0.10.3
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing FunctionIntegrator
Status `/tmp/jl_savRYv/Project.toml`
  [442a2c76] FastGaussQuadrature v0.4.2
  [7685536e] FunctionIntegrator v0.5.1
  [276daf66] SpecialFunctions v0.10.3
  [8dfed614] Test
Status `/tmp/jl_savRYv/Manifest.toml`
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [442a2c76] FastGaussQuadrature v0.4.2
  [7685536e] FunctionIntegrator v0.5.1
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [276daf66] SpecialFunctions v0.10.3
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Performing the Airy Ai(x) test, where Ai(x) is integrated on the semi-infinite domain, or an approximation of it, namely [0,100] and the result is compared to the analytical result 1/3.
Running: adaptive_simpsons_rule
  0.841108 seconds (1.34 M allocations: 70.842 MiB, 3.72% gc time)
Running: chebyshev_quadrature with k=1
  1.557423 seconds (2.24 M allocations: 128.788 MiB, 3.94% gc time)
Running: chebyshev_quadrature with k=2
  0.286906 seconds (425.40 k allocations: 24.397 MiB)
Running: chebyshev_quadrature with k=3
  0.333633 seconds (545.35 k allocations: 29.893 MiB, 4.14% gc time)
Running: chebyshev_quadrature with k=4
  0.323522 seconds (488.16 k allocations: 26.427 MiB)
Running: jacobi_quadrature with α=β=1
 37.464883 seconds (39.40 M allocations: 3.139 GiB, 9.96% gc time)
Running: laguerre_quadrature with k=1
  2.666603 seconds (3.34 M allocations: 185.912 MiB, 3.30% gc time)
Running: legendre_quadrature
  0.228930 seconds (215.35 k allocations: 12.336 MiB)
Running: lobatto_quadrature
  0.359509 seconds (344.19 k allocations: 20.610 MiB, 12.58% gc time)
Running: radau_quadrature
  0.239636 seconds (326.50 k allocations: 19.611 MiB)
Running: rectangle_rule_left. Only a rough approximation can be practically achieved using this function.
 76.680275 seconds (100.02 M allocations: 1.491 GiB, 0.20% gc time)
Running: rectangle_rule_midpoint.
  0.150231 seconds (173.78 k allocations: 3.889 MiB)
Running: rectangle_rule_right. Only a rough approximation can be practically achieved using this function.
 77.257962 seconds (100.02 M allocations: 1.491 GiB, 0.20% gc time)
Running: rombergs_method
  0.573630 seconds (753.77 k allocations: 43.365 MiB, 5.80% gc time)
Running: simpsons_rule
  0.039725 seconds (47.41 k allocations: 2.123 MiB)
Running: simpsons38_rule
  0.098592 seconds (113.22 k allocations: 5.979 MiB)
Running: trapezoidal_rule
  0.318772 seconds (1.52 M allocations: 25.798 MiB, 4.69% gc time)
Test Summary: | Pass  Total
Airy Ai(x)    |   17     17
Performing the besselj test, where BesselJ_1(2) is approximated and the result is compared to the value obtained from SpecialFunctions' besselj function.
Running: adaptive_simpsons_rule with ε=1e-7
  0.077684 seconds (32.69 k allocations: 1.946 MiB)
Running: chebyshev_quadrature with k=1
  0.409312 seconds (276.17 k allocations: 14.005 MiB)
Running: chebyshev_quadrature with k=2
  0.147317 seconds (115.76 k allocations: 3.795 MiB)
Running: chebyshev_quadrature with k=3
  0.146534 seconds (105.11 k allocations: 3.641 MiB)
Running: chebyshev_quadrature with k=4
  0.143281 seconds (87.72 k allocations: 3.287 MiB)
Running: jacobi_quadrature with α=β=1
  1.970804 seconds (536.46 k allocations: 163.513 MiB, 22.52% gc time)
Running: legendre_quadrature
  0.143397 seconds (62.36 k allocations: 3.478 MiB)
Running: lobatto_quadrature
  0.019404 seconds (16.79 k allocations: 1.036 MiB)
Running: radau_quadrature
  0.019342 seconds (16.77 k allocations: 1.036 MiB)
Running: rectangle_rule_left
 29.190131 seconds (471.41 M allocations: 7.025 GiB, 2.26% gc time)
Running: rectangle_rule_midpoint
  0.000034 seconds (45 allocations: 1.047 KiB)
Running: rectangle_rule_right
 27.804597 seconds (476.96 M allocations: 7.107 GiB, 1.76% gc time)
Running: rombergs_method
  0.384691 seconds (360.76 k allocations: 20.338 MiB)
Running: simpsons_rule
  0.000037 seconds (85 allocations: 1.672 KiB)
Running: simpsons38_rule
  0.061375 seconds (19.94 k allocations: 1.196 MiB)
Running: trapezoidal_rule
  0.053676 seconds (18.39 k allocations: 1.101 MiB)
Test Summary: | Pass  Total
besselj       |   16     16
Integrating cos^2(x)/(1+cot(x)) from 0 to pi/2 and comparing the results to the analytical result 0.25.
Running: adaptive_simpsons_rule with ε=1e-7
  0.028316 seconds (1.99 k allocations: 53.594 KiB)
Running: chebyshev_quadrature with k=1
  0.104479 seconds (2.40 k allocations: 113.453 KiB)
Running: chebyshev_quadrature with k=2
  0.094143 seconds (2.65 k allocations: 121.469 KiB)
Running: chebyshev_quadrature with k=3
  0.109756 seconds (3.08 k allocations: 133.688 KiB)
Running: chebyshev_quadrature with k=4
  0.108628 seconds (3.08 k allocations: 133.750 KiB)
Running: jacobi_quadrature with α=β=1
  0.328264 seconds (379.27 k allocations: 19.821 MiB)
Running: legendre_quadrature
  0.064289 seconds (1.24 k allocations: 63.609 KiB)
Running: lobatto_quadrature
  0.000115 seconds (67 allocations: 2.844 KiB)
Running: radau_quadrature
  0.000049 seconds (71 allocations: 3.078 KiB)
Running: rectangle_rule_left
  0.000505 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_midpoint
  0.000365 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right
  0.000488 seconds (9 allocations: 496 bytes)
Running: rombergs_method
  0.068094 seconds (1.01 k allocations: 54.109 KiB)
Running: simpsons_rule
  0.000042 seconds (323 allocations: 5.391 KiB)
Running: simpsons38_rule
  0.020938 seconds (923 allocations: 39.281 KiB)
Running: trapezoidal_rule
  0.014112 seconds (44.33 k allocations: 704.859 KiB)
Test Summary: | Pass  Total
coscotint     |   16     16
Integrating cosine from 0 to pi/2 and comparing the result to the analytical result of 1.
Running: adaptive_simpsons_rule
  0.055055 seconds (75.98 k allocations: 4.409 MiB)
Running: chebyshev_quadrature with k=1
  0.201860 seconds (240.48 k allocations: 13.497 MiB, 12.55% gc time)
Running: chebyshev_quadrature with k=2
  0.204601 seconds (295.72 k allocations: 16.587 MiB)
Running: chebyshev_quadrature with k=3
  0.209864 seconds (275.63 k allocations: 14.993 MiB, 10.48% gc time)
Running: chebyshev_quadrature with k=4
  0.186264 seconds (275.67 k allocations: 14.889 MiB)
Running: jacobi_quadrature with α=β=1
  1.426420 seconds (466.13 k allocations: 164.248 MiB, 10.34% gc time)
Running: legendre_quadrature
  0.155158 seconds (193.22 k allocations: 11.137 MiB)
Running: lobatto_quadrature
  0.177077 seconds (204.45 k allocations: 11.821 MiB)
Running: radau_quadrature
  0.178110 seconds (204.44 k allocations: 11.825 MiB)
Running: rectangle_rule_left
  1.054443 seconds (19.80 k allocations: 1.195 MiB)
Running: rectangle_rule_midpoint
  0.030979 seconds (25.98 k allocations: 1.617 MiB)
Running: rectangle_rule_right
  1.063308 seconds (18.30 k allocations: 1.107 MiB)
Running: rombergs_method
  0.230841 seconds (140.09 k allocations: 8.089 MiB, 31.72% gc time)
Running: simpsons_rule
  0.032370 seconds (29.08 k allocations: 1.804 MiB)
Running: simpsons38_rule
  0.039264 seconds (44.73 k allocations: 2.791 MiB)
Running: trapezoidal_rule
  0.028649 seconds (45.24 k allocations: 1.826 MiB)
Test Summary: | Pass  Total
Cosine        |   16     16
Integrating e^(-x^2)/(1+x^2) on the infinite domain [-inf, inf], or failing that on [-100,100], and comparing it to the analytical result exp(1)*pi*erfc(1)
Running: adaptive_simpsons_rule with ε=1e-7
  0.045218 seconds (101.48 k allocations: 3.079 MiB)
Running: chebyshev_quadrature with k=1
  0.185599 seconds (247.58 k allocations: 13.607 MiB)
Running: chebyshev_quadrature with k=2
  0.244330 seconds (303.35 k allocations: 16.586 MiB, 15.16% gc time)
Running: chebyshev_quadrature with k=3
  0.203209 seconds (283.05 k allocations: 15.012 MiB)
Running: chebyshev_quadrature with k=4
  0.215105 seconds (283.09 k allocations: 15.037 MiB)
Running: hermite_quadrature with k=2
 15.805103 seconds (22.14 M allocations: 1.148 GiB, 10.27% gc time)
Running: jacobi_quadrature with α=β=1
  0.434840 seconds (476.17 k allocations: 50.462 MiB, 8.88% gc time)
Running: laguerre_quadrature with k=1 and multiplying the result by 2 (as Laguerre is only on the semi-infinite domain)
  0.213916 seconds (288.63 k allocations: 15.911 MiB)
Running: legendre_quadrature
  0.183576 seconds (200.29 k allocations: 11.466 MiB, 16.05% gc time)
Running: lobatto_quadrature
  0.230755 seconds (225.96 k allocations: 37.638 MiB)
Running: radau_quadrature
  0.231003 seconds (222.56 k allocations: 30.301 MiB, 8.85% gc time)
Running: rectangle_rule_left
  0.032725 seconds (22.96 k allocations: 1.356 MiB)
Running: rectangle_rule_midpoint
  0.030586 seconds (27.93 k allocations: 1.714 MiB)
Running: rectangle_rule_right
  0.024276 seconds (19.52 k allocations: 1.168 MiB)
Running: rombergs_method
  0.117525 seconds (142.91 k allocations: 8.131 MiB)
Running: simpsons_rule
  0.040506 seconds (41.33 k allocations: 2.160 MiB)
Running: simpsons38_rule
  0.044383 seconds (60.12 k allocations: 3.201 MiB)
Running: trapezoidal_rule
  0.031193 seconds (31.62 k allocations: 1.772 MiB)
Test Summary: | Pass  Total
expnx2datan   |   18     18
Integrate exp(-x^2) from minus infinity to positive infinity and comparing the result to the analytical solution, sqrt(pi)
Running: adaptive_simpsons_rule with ε=1e-7
  0.034181 seconds (61.58 k allocations: 2.363 MiB)
Running: chebyshev_quadrature with k=1
  0.186093 seconds (242.71 k allocations: 13.362 MiB, 13.64% gc time)
Running: chebyshev_quadrature with k=2
  0.215824 seconds (298.07 k allocations: 16.389 MiB)
Running: chebyshev_quadrature with k=3
  0.214385 seconds (277.91 k allocations: 14.780 MiB)
Running: chebyshev_quadrature with k=4
  0.236785 seconds (277.94 k allocations: 14.795 MiB, 11.61% gc time)
Running: hermite_quadrature with k=2
  0.148366 seconds (177.91 k allocations: 10.166 MiB)
Running: jacobi_quadrature with α=β=1
  8.880585 seconds (468.74 k allocations: 1.176 GiB, 14.44% gc time)
Running: laguerre_quadrature (results multiplied by 2, as laguerre only integrates over the semi-infinite domain)
  0.214640 seconds (283.49 k allocations: 15.706 MiB)
Running: legendre_quadrature
  0.167230 seconds (195.46 k allocations: 11.235 MiB, 9.25% gc time)
Running: lobatto_quadrature
  0.205574 seconds (216.32 k allocations: 23.343 MiB)
Running: radau_quadrature
  0.211175 seconds (215.47 k allocations: 21.275 MiB, 6.85% gc time)
Running: rectangle_rule_left
  0.027689 seconds (20.51 k allocations: 1.237 MiB)
Running: rectangle_rule_midpoint
  0.028166 seconds (26.71 k allocations: 1.655 MiB)
Running: rectangle_rule_right
  0.024543 seconds (18.28 k allocations: 1.107 MiB)
Running: rombergs_method
  0.125076 seconds (138.37 k allocations: 7.931 MiB)
Running: simpsons_rule
  0.034648 seconds (33.56 k allocations: 1.936 MiB)
Running: simpsons38_rule
  0.037240 seconds (50.64 k allocations: 2.943 MiB)
Running: trapezoidal_rule
  0.026793 seconds (26.29 k allocations: 1.595 MiB)
Test Summary: | Pass  Total
Gaussian      |   18     18
Integrating 1/x from 1 to e and comparing the result to the analytical solution, 1.
Running: adaptive_simpsons_rule with ε=1e-7
  0.038073 seconds (32.54 k allocations: 1.960 MiB)
Running: chebyshev_quadrature with k=1
  0.235017 seconds (241.04 k allocations: 13.578 MiB)
Running: chebyshev_quadrature with k=2
  0.263062 seconds (296.30 k allocations: 16.664 MiB, 6.36% gc time)
Running: chebyshev_quadrature with k=3
  0.209564 seconds (276.23 k allocations: 14.992 MiB)
Running: chebyshev_quadrature with k=4
  0.236500 seconds (276.27 k allocations: 14.827 MiB, 7.61% gc time)
Running: jacobi_quadrature with α=β=1
  0.996310 seconds (466.78 k allocations: 195.282 MiB, 4.14% gc time)
Running: legendre_quadrature
  0.175069 seconds (193.79 k allocations: 11.146 MiB)
Running: lobatto_quadrature
  0.209186 seconds (205.01 k allocations: 11.864 MiB, 8.79% gc time)
Running: radau_quadrature
  0.239844 seconds (205.01 k allocations: 11.920 MiB)
Running: rectangle_rule_left
  0.322221 seconds (20.37 k allocations: 1.224 MiB)
Running: rectangle_rule_midpoint
  0.027605 seconds (26.35 k allocations: 1.637 MiB)
Running: rectangle_rule_right
  0.105745 seconds (18.68 k allocations: 1.127 MiB)
Running: rombergs_method
  0.143210 seconds (151.47 k allocations: 8.820 MiB)
Running: simpsons_rule
  0.033772 seconds (29.83 k allocations: 1.838 MiB)
Running: simpsons38_rule
  0.037832 seconds (45.51 k allocations: 2.825 MiB)
Running: trapezoidal_rule
  0.026609 seconds (46.24 k allocations: 1.863 MiB)
Test Summary: | Pass  Total
1/x           |   16     16
Integrating log(x)/x from 1 to e and comparing the result to the analytical solution of 0.5.
Running: adaptive_simpsons_rule with ε=1e-7
  0.032732 seconds (33.30 k allocations: 1.908 MiB)
Running: chebyshev_quadrature with k=1
  0.212900 seconds (241.60 k allocations: 13.522 MiB, 8.74% gc time)
Running: chebyshev_quadrature with k=2
  0.230311 seconds (296.91 k allocations: 16.583 MiB)
Running: chebyshev_quadrature with k=3
  0.218140 seconds (276.77 k allocations: 14.912 MiB)
Running: chebyshev_quadrature with k=4
  0.229930 seconds (276.81 k allocations: 14.996 MiB, 8.36% gc time)
Running: jacobi_quadrature with α=β=1
  1.281438 seconds (467.44 k allocations: 149.941 MiB, 3.61% gc time)
Running: legendre_quadrature
  0.156161 seconds (194.36 k allocations: 11.161 MiB)
Running: lobatto_quadrature
  0.186099 seconds (205.59 k allocations: 11.870 MiB, 9.02% gc time)
Running: radau_quadrature
  0.177335 seconds (205.58 k allocations: 11.869 MiB)
Running: rectangle_rule_left
  1.152597 seconds (20.64 k allocations: 1.238 MiB)
Running: rectangle_rule_midpoint
  0.028160 seconds (26.34 k allocations: 1.637 MiB)
Running: rectangle_rule_right
  1.158939 seconds (18.65 k allocations: 1.125 MiB)
Running: rombergs_method
  0.135883 seconds (141.39 k allocations: 8.144 MiB)
Running: simpsons_rule
  0.035504 seconds (30.58 k allocations: 1.866 MiB)
Running: simpsons38_rule
  0.025529 seconds (46.26 k allocations: 2.854 MiB)
Running: trapezoidal_rule
  0.029933 seconds (58.50 k allocations: 2.064 MiB)
Test Summary: | Pass  Total
log(x)/x      |   16     16
Approximating the modified bessel function I_1(1) and comparing it to the result obtained by SpecialFunctions.
Running: adaptive_simpsons_rule with ε=1e-7
  0.161112 seconds (153.20 k allocations: 9.102 MiB)
Running: chebyshev_quadrature with k=1
  0.154782 seconds (91.28 k allocations: 3.297 MiB)
Running: chebyshev_quadrature with k=2
  0.221101 seconds (127.05 k allocations: 3.990 MiB, 28.66% gc time)
Running: chebyshev_quadrature with k=3
  0.165066 seconds (115.62 k allocations: 3.819 MiB)
Running: chebyshev_quadrature with k=4
  0.150106 seconds (95.16 k allocations: 3.413 MiB)
Running: jacobi_quadrature with α=β=1
  2.094009 seconds (510.08 k allocations: 169.322 MiB, 12.88% gc time)
Running: legendre_quadrature
  0.124597 seconds (38.38 k allocations: 2.107 MiB)
Running: lobatto_quadrature
  0.000230 seconds (150 allocations: 4.328 KiB)
Running: radau_quadrature
  0.000077 seconds (148 allocations: 4.375 KiB)
Running: rectangle_rule_left
 43.294462 seconds (590.00 M allocations: 8.792 GiB, 3.12% gc time)
Running: rectangle_rule_midpoint
  0.000040 seconds (40 allocations: 992 bytes)
Running: rectangle_rule_right
 43.931749 seconds (592.75 M allocations: 8.833 GiB, 2.85% gc time)
Running: rombergs_method
  0.128414 seconds (41.93 k allocations: 2.260 MiB)
Running: simpsons_rule
  0.000062 seconds (93 allocations: 1.797 KiB)
Running: simpsons38_rule
  0.026425 seconds (463 allocations: 22.578 KiB)
Running: trapezoidal_rule
  0.021585 seconds (179 allocations: 8.766 KiB)
Test Summary: | Pass  Total
modbessel0    |   16     16
Integrating 1/sqrt(-19.6 sin(x)) from -pi to 0 and comparing the result to the analytical solution of ellipk(1/2)/sqrt(2.45) The integrand has singularities at x = -pi and x=0, so for some of these functions the integration domain has to be itself approximated.
Running: adaptive_simpsons_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 32.149591 seconds (629.34 M allocations: 9.388 GiB, 4.04% gc time)
Running: chebyshev_quadrature with k=1
  0.485708 seconds (439.67 k allocations: 24.348 MiB)
Running: chebyshev_quadrature with k=2
 12.688641 seconds (497.08 k allocations: 4.042 GiB, 4.21% gc time)
Running: chebyshev_quadrature with k=3
  5.611928 seconds (290.74 k allocations: 1.643 GiB, 4.83% gc time)
Running: chebyshev_quadrature with k=4
  7.789489 seconds (290.77 k allocations: 2.262 GiB, 2.38% gc time)
Running: jacobi_quadrature with α=β=1. The N value required to get an accurate result is too high to be practical, so only a rough approximation can be arrived at.
 47.475711 seconds (505.65 k allocations: 13.255 GiB, 3.92% gc time)
Running: legendre_quadrature.
  6.578330 seconds (233.14 k allocations: 1.976 GiB, 1.61% gc time)
The following integration functions have to use an approximated domain due to the endpoint singularities.
Running: lobatto_quadrature on [-pi+1e-6, -1e-6]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 45.138761 seconds (8.24 M allocations: 13.384 GiB, 4.91% gc time)
Running: radau_quadrature on [-pi+1e-6, -1e-6]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 43.222440 seconds (7.24 M allocations: 13.369 GiB, 2.97% gc time)
Running: rectangle_rule_left on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  3.172783 seconds (23.40 k allocations: 1.405 MiB)
Running: rectangle_rule_midpoint on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  3.014257 seconds (32.03 k allocations: 1.962 MiB)
Running: rectangle_rule_right on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  2.872591 seconds (23.62 k allocations: 1.416 MiB)
Running: rombergs_method on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  1.236185 seconds (457.27 k allocations: 153.730 MiB)
Running: simpsons_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 40.246761 seconds (600.04 M allocations: 8.943 GiB, 8.28% gc time)
Running: simpsons38_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 40.378498 seconds (600.05 M allocations: 8.944 GiB, 8.43% gc time)
Running: trapezoidal_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 41.858393 seconds (600.04 M allocations: 8.943 GiB, 9.12% gc time)
Test Summary: | Pass  Total
Simppen       |   16     16
Integrating sin(x^2)e^(-x)/x from 0 to infinity, with the approximated domain of integration of 0 to 100. The removable singularity at x=0 in the integrand has been removed.
Running: adaptive_simpsons_rule with ε=1e-8
  0.068359 seconds (182.59 k allocations: 4.521 MiB)
Running: chebyshev_quadrature with k=1
  0.219429 seconds (258.20 k allocations: 14.033 MiB)
Running: chebyshev_quadrature with k=2
  0.205068 seconds (284.36 k allocations: 15.189 MiB)
Running: chebyshev_quadrature with k=3
  0.199283 seconds (260.81 k allocations: 13.465 MiB)
Running: chebyshev_quadrature with k=4
  0.211566 seconds (260.84 k allocations: 13.461 MiB)
Running: jacobi_quadrature with α=β=1
  0.417975 seconds (405.65 k allocations: 35.875 MiB)
Running: laguerre_quadrature with k=2
  0.192134 seconds (188.19 k allocations: 10.881 MiB)
Running: legendre_quadrature
  0.124281 seconds (151.89 k allocations: 8.414 MiB)
Running: lobatto_quadrature
  0.035782 seconds (10.88 k allocations: 15.109 MiB)
Running: radau_quadrature
  0.032608 seconds (9.66 k allocations: 13.183 MiB)
Running: rectangle_rule_left
  0.058379 seconds (19.85 k allocations: 1.172 MiB)
Running: rectangle_rule_midpoint
  0.050427 seconds (26.82 k allocations: 1.642 MiB)
Running: rectangle_rule_right
  0.055710 seconds (18.40 k allocations: 1.096 MiB)
Running: rombergs_method
  0.225850 seconds (171.40 k allocations: 9.754 MiB)
Running: simpsons_rule
  0.002957 seconds (24.72 k allocations: 386.656 KiB)
Running: simpsons38_rule
  0.048889 seconds (81.54 k allocations: 3.524 MiB)
Running: trapezoidal_rule
  0.193847 seconds (2.39 M allocations: 37.759 MiB)
Test Summary: | Pass  Total
sinexpox      |   17     17
Integrating sin(x)/x from 0 to 100 and comparing it to the exact result.
Running: adaptive_simpsons_rule with ε=1e-8
  0.002092 seconds (30.71 k allocations: 480.250 KiB)
Running: chebyshev_quadrature with k=1
  0.099779 seconds (2.58 k allocations: 1.696 MiB)
Running: chebyshev_quadrature with k=2
  0.101877 seconds (2.84 k allocations: 2.359 MiB)
Running: chebyshev_quadrature with k=3
  0.109699 seconds (3.26 k allocations: 2.060 MiB)
Running: chebyshev_quadrature with k=4
  0.108741 seconds (3.26 k allocations: 1.501 MiB)
Running: jacobi_quadrature with α=β=1
  5.923885 seconds (402.44 k allocations: 906.580 MiB, 5.79% gc time)
Running: legendre_quadrature
  0.074357 seconds (1.33 k allocations: 72.281 KiB)
Running: lobatto_quadrature
  0.000282 seconds (253 allocations: 9.188 KiB)
Running: radau_quadrature
  0.000159 seconds (221 allocations: 8.812 KiB)
Running: rectangle_rule_left; only a rough approximation can be practically achieved using this function
  3.554133 seconds (11 allocations: 528 bytes)
Running: rectangle_rule_midpoint
  0.000432 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right; only a rough approximation can be practically achieved using this function
  3.476564 seconds (11 allocations: 528 bytes)
Running: rombergs_method
  0.072834 seconds (1.16 k allocations: 66.734 KiB)
Running: simpsons_rule
  0.000049 seconds (9 allocations: 496 bytes)
Running: simpsons38_rule
  0.000059 seconds (9 allocations: 496 bytes)
Running: trapezoidal_rule
  0.000822 seconds (9 allocations: 496 bytes)
Test Summary: | Pass  Total
sinxx         |   16     16
Integrating (x^3+1)/(x^4 (x+1)(x^2+1)) from 1 to e and comparing the result to the analytical solution of log(sqrt(2)*exp(1)/(sqrt(exp(2)+1)))+1/2*(exp(-2)-1)+1/3*(1-exp(-3))
Running: adaptive_simpsons_rule with ε=1e-8
  0.000931 seconds (6.34 k allocations: 99.453 KiB)
Running: chebyshev_quadrature with k=1
  0.141847 seconds (2.48 k allocations: 576.609 KiB)
Running: chebyshev_quadrature with k=2
  0.157208 seconds (2.73 k allocations: 777.391 KiB)
Running: chebyshev_quadrature with k=3
  0.167689 seconds (3.15 k allocations: 685.641 KiB)
Running: chebyshev_quadrature with k=4
  0.132460 seconds (3.16 k allocations: 516.203 KiB)
Running: jacobi_quadrature with α=β=1
  3.115720 seconds (388.71 k allocations: 253.821 MiB)
Running: legendre_quadrature
  0.119676 seconds (1.28 k allocations: 65.438 KiB)
Running: lobatto_quadrature
  0.000119 seconds (91 allocations: 3.656 KiB)
Running: radau_quadrature
  0.000053 seconds (81 allocations: 3.453 KiB)
Running: rectangle_rule_left; only a rough approximation can be practically achieved using this function.
 12.599858 seconds (11 allocations: 528 bytes)
Running: rectangle_rule_midpoint
  0.000803 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right; only a rough approximation can be practically achieved using this function.
 11.034101 seconds (11 allocations: 528 bytes)
Running: rombergs_method
  0.086463 seconds (1.18 k allocations: 62.562 KiB)
Running: simpsons_rule
  0.000054 seconds (9 allocations: 496 bytes)
Running: simpsons38_rule
  0.000047 seconds (9 allocations: 496 bytes)
Running: trapezoidal_rule
  0.001691 seconds (9 allocations: 496 bytes)
Test Summary: | Pass  Total
partfrac      |   16     16
    Testing FunctionIntegrator tests passed 
