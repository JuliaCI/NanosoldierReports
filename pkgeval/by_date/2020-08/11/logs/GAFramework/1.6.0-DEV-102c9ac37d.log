Julia Version 1.6.0-DEV.620
Commit 102c9ac37d (2020-08-11 16:30 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.0
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.0
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_XQM7zZ/Project.toml`
  [5789e2e9] FileIO v1.4.0
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_XQM7zZ/Manifest.toml`
  [5789e2e9] FileIO v1.4.0
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21720249074062944
curgen: 20 fitness: 0.21723344838590855
curgen: 30 fitness: 0.21723344838590855
curgen: 40 fitness: 0.21723344838590855
curgen: 50 fitness: 0.21723344838590855
CoordinateCreature{Vector{Float64}}([0.2224844433973526], -0.21723344838590855) 0.2224844433973526 -0.21723344838590855
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.258026558150535
curgen: 100 fitness: 3.2583200412845454
curgen: 150 fitness: 3.2583200412845454
curgen: 200 fitness: 3.2583623620493816
curgen: 250 fitness: 3.258368585257901
curgen: 300 fitness: 3.258408870026678
curgen: 350 fitness: 3.258408870026678
curgen: 400 fitness: 3.258416538139503
curgen: 450 fitness: 3.258416538139503
curgen: 500 fitness: 3.2584214228929738
CoordinateCreature{Vector{Float64}}([0.22312758599201524, 0.22240244296486286, -0.22237982336637224, -0.22276029573329334, 0.22223123928508864, -0.22253338138284104, -0.22265173230678853, -0.22251257030132215, -0.22232135354477542, 0.22213913875403862, 0.2221265087673058, 0.22259533210414598, 0.2225787022120252, -0.22269610335370152, -0.22159691415986818], -3.2584214228929738) [0.22312758599201524, 0.22240244296486286, -0.22237982336637224, -0.22276029573329334, 0.22223123928508864, -0.22253338138284104, -0.22265173230678853, -0.22251257030132215, -0.22232135354477542, 0.22213913875403862, 0.2221265087673058, 0.22259533210414598, 0.2225787022120252, -0.22269610335370152, -0.22159691415986818] -3.2584214228929738
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.002643957759460136
curgen: 100 fitness: -0.002643957759460136
curgen: 150 fitness: -0.0016017997610049406
curgen: 200 fitness: -0.001284953276581291
curgen: 250 fitness: -0.0010475740041613335
curgen: 300 fitness: -0.0010475740041613335
curgen: 350 fitness: -0.0010462190213331723
curgen: 400 fitness: -0.001005356986922834
curgen: 450 fitness: -0.001005356986922834
curgen: 500 fitness: -0.0009929952984748525
CoordinateCreature{Vector{Float64}}([9.499770966554444e-5, 0.0001283567170106772, -4.204789676589746e-5, -0.0007961787829684927, -9.085483616036796e-6, -3.107470683981505e-5, 0.00028667821559538395, -0.00042560679954860205, -0.0013357812782201304, 3.5165813413816696e-5, -0.0008286464067209919, -0.00014736610411539915, 0.000622917614569094, -0.0007062662478237117, -0.0008360214491217096], 0.0009929952984748525) [9.499770966554444e-5, 0.0001283567170106772, -4.204789676589746e-5, -0.0007961787829684927, -9.085483616036796e-6, -3.107470683981505e-5, 0.00028667821559538395, -0.00042560679954860205, -0.0013357812782201304, 3.5165813413816696e-5, -0.0008286464067209919, -0.00014736610411539915, 0.000622917614569094, -0.0007062662478237117, -0.0008360214491217096] 0.0009929952984748525
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
