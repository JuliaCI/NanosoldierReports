Julia Version 1.6.0-DEV.680
Commit bcbb00004d (2020-08-20 17:48 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.1
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.1
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_KmnTK3/Project.toml`
  [5789e2e9] FileIO v1.4.1
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_KmnTK3/Manifest.toml`
  [5789e2e9] FileIO v1.4.1
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.2172054313814587
curgen: 20 fitness: 0.2172054313814587
curgen: 30 fitness: 0.2172054313814587
curgen: 40 fitness: 0.2172054313814587
curgen: 50 fitness: 0.21722663853800342
CoordinateCreature{Vector{Float64}}([-0.22294594128732778], -0.21722663853800342) -0.22294594128732778 -0.21722663853800342
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.2583363075693277
curgen: 100 fitness: 3.2583375618241703
curgen: 150 fitness: 3.2583436553227516
curgen: 200 fitness: 3.258378748133154
curgen: 250 fitness: 3.2583804470845443
curgen: 300 fitness: 3.2583804470845443
curgen: 350 fitness: 3.2583992273666955
curgen: 400 fitness: 3.258412363137832
curgen: 450 fitness: 3.2584563356455827
curgen: 500 fitness: 3.2584579281421298
CoordinateCreature{Vector{Float64}}([-0.2224723361518154, -0.22267300716615332, -0.222587170659073, -0.22241804977269097, -0.22210343983895198, -0.22260522664001758, 0.2226123892452835, 0.22290825266046085, 0.22236558456519398, 0.2231438188825685, -0.22223467267856195, 0.22248351937118002, 0.22284559422647407, -0.22260156516813212, -0.2222410888350309], -3.2584579281421298) [-0.2224723361518154, -0.22267300716615332, -0.222587170659073, -0.22241804977269097, -0.22210343983895198, -0.22260522664001758, 0.2226123892452835, 0.22290825266046085, 0.22236558456519398, 0.2231438188825685, -0.22223467267856195, 0.22248351937118002, 0.22284559422647407, -0.22260156516813212, -0.2222410888350309] -3.2584579281421298
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.0024598633111168056
curgen: 100 fitness: -0.0023032954997006527
curgen: 150 fitness: -0.0021649546395678954
curgen: 200 fitness: -0.0019536763843177596
curgen: 250 fitness: -0.0019536763843177596
curgen: 300 fitness: -0.0019536763843177596
curgen: 350 fitness: -0.0019536763843177596
curgen: 400 fitness: -0.0019536763843177596
curgen: 450 fitness: -0.0006690435407676887
curgen: 500 fitness: -0.0006690435407676887
CoordinateCreature{Vector{Float64}}([-3.937763986509911e-5, -0.0003124059646453192, 0.00011314455357265984, -8.077107070921933e-6, -0.0008850073309035095, -3.2493849120975446e-5, 0.00038380812542593377, 0.0005554332144863261, 8.909902514955869e-6, -0.0005257057003307643, 0.0003482408734074077, -2.56656368722494e-5, -0.0006648240236861265, 0.0010836421847935057, -7.460819595709288e-5], 0.0006690435407676887) [-3.937763986509911e-5, -0.0003124059646453192, 0.00011314455357265984, -8.077107070921933e-6, -0.0008850073309035095, -3.2493849120975446e-5, 0.00038380812542593377, 0.0005554332144863261, 8.909902514955869e-6, -0.0005257057003307643, 0.0003482408734074077, -2.56656368722494e-5, -0.0006648240236861265, 0.0010836421847935057, -7.460819595709288e-5] 0.0006690435407676887
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
