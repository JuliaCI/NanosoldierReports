Julia Version 1.6.0-DEV.675
Commit 04e47cf5ff (2020-08-19 16:56 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.1
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.1
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_v20rpr/Project.toml`
  [5789e2e9] FileIO v1.4.1
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_v20rpr/Manifest.toml`
  [5789e2e9] FileIO v1.4.1
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21703613404067346
curgen: 20 fitness: 0.21721514437097617
curgen: 30 fitness: 0.21722015133303718
curgen: 40 fitness: 0.21723356102942545
curgen: 50 fitness: 0.21723356102942545
CoordinateCreature{Vector{Float64}}([0.2225871145905454], -0.21723356102942545) 0.2225871145905454 -0.21723356102942545
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.257909200915224
curgen: 100 fitness: 3.258098684479269
curgen: 150 fitness: 3.258211568201213
curgen: 200 fitness: 3.2582616024024533
curgen: 250 fitness: 3.258340651193975
curgen: 300 fitness: 3.2583836656566714
curgen: 350 fitness: 3.2584032888065937
curgen: 400 fitness: 3.258404894007594
curgen: 450 fitness: 3.2584274264424757
curgen: 500 fitness: 3.25843485752939
CoordinateCreature{Vector{Float64}}([0.22256080502852502, -0.222561159436229, 0.2218627532903756, 0.22252866147427505, 0.2230140388373698, -0.222494003475667, -0.22251249221639477, -0.22249903336243168, 0.222492938817989, 0.2223456063248393, -0.22230571371051577, -0.22252436646285115, 0.22260083601694217, -0.22280172664801656, 0.22171058171769367], -3.25843485752939) [0.22256080502852502, -0.222561159436229, 0.2218627532903756, 0.22252866147427505, 0.2230140388373698, -0.222494003475667, -0.22251249221639477, -0.22249903336243168, 0.222492938817989, 0.2223456063248393, -0.22230571371051577, -0.22252436646285115, 0.22260083601694217, -0.22280172664801656, 0.22171058171769367] -3.25843485752939
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.007303031899709822
curgen: 100 fitness: -0.006743414315224072
curgen: 150 fitness: -0.006743414315224072
curgen: 200 fitness: -0.0034620803244251874
curgen: 250 fitness: -0.002680099872605979
curgen: 300 fitness: -0.0026719678287463466
curgen: 350 fitness: -0.002232459082591731
curgen: 400 fitness: -0.0020644125969226934
curgen: 450 fitness: -0.002029436341786095
curgen: 500 fitness: -0.0016701851776019794
CoordinateCreature{Vector{Float64}}([0.000124768641563576, -2.603161358027202e-6, -0.0003939956638549354, 0.0008882973849380672, -0.0005721822905118555, -0.00010345667341885081, 0.00017394133430322363, 4.401388755130933e-5, 0.0013108936236091665, 0.0021110394292474205, 0.0008720258637665121, 5.887115402578624e-5, -9.351259922562953e-5, 3.828471627473251e-5, 0.0003734763689820903], 0.0016701851776019794) [0.000124768641563576, -2.603161358027202e-6, -0.0003939956638549354, 0.0008882973849380672, -0.0005721822905118555, -0.00010345667341885081, 0.00017394133430322363, 4.401388755130933e-5, 0.0013108936236091665, 0.0021110394292474205, 0.0008720258637665121, 5.887115402578624e-5, -9.351259922562953e-5, 3.828471627473251e-5, 0.0003734763689820903] 0.0016701851776019794
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
