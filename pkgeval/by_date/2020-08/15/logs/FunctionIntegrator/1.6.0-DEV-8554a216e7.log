Julia Version 1.6.0-DEV.636
Commit 8554a216e7 (2020-08-14 06:59 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed FastGaussQuadrature ────────── v0.4.2
  Installed FunctionIntegrator ─────────── v0.5.1
  Installed SpecialFunctions ───────────── v0.10.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [7685536e] + FunctionIntegrator v0.5.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [442a2c76] + FastGaussQuadrature v0.4.2
  [7685536e] + FunctionIntegrator v0.5.1
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [276daf66] + SpecialFunctions v0.10.3
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing FunctionIntegrator
Status `/tmp/jl_yUuLrh/Project.toml`
  [442a2c76] FastGaussQuadrature v0.4.2
  [7685536e] FunctionIntegrator v0.5.1
  [276daf66] SpecialFunctions v0.10.3
  [8dfed614] Test
Status `/tmp/jl_yUuLrh/Manifest.toml`
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [442a2c76] FastGaussQuadrature v0.4.2
  [7685536e] FunctionIntegrator v0.5.1
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [276daf66] SpecialFunctions v0.10.3
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Performing the Airy Ai(x) test, where Ai(x) is integrated on the semi-infinite domain, or an approximation of it, namely [0,100] and the result is compared to the analytical result 1/3.
Running: adaptive_simpsons_rule
  1.089972 seconds (1.34 M allocations: 70.801 MiB, 9.83% gc time)
Running: chebyshev_quadrature with k=1
  1.706071 seconds (2.24 M allocations: 128.545 MiB, 3.37% gc time)
Running: chebyshev_quadrature with k=2
  0.281250 seconds (425.06 k allocations: 24.391 MiB)
Running: chebyshev_quadrature with k=3
  0.361967 seconds (544.92 k allocations: 29.872 MiB, 4.19% gc time)
Running: chebyshev_quadrature with k=4
  0.303074 seconds (487.80 k allocations: 26.409 MiB)
Running: jacobi_quadrature with α=β=1
 43.004582 seconds (39.37 M allocations: 3.137 GiB, 9.05% gc time)
Running: laguerre_quadrature with k=1
  3.494820 seconds (3.33 M allocations: 185.707 MiB, 2.79% gc time)
Running: legendre_quadrature
  0.278736 seconds (215.06 k allocations: 12.320 MiB, 15.86% gc time)
Running: lobatto_quadrature
  0.401401 seconds (343.27 k allocations: 20.555 MiB)
Running: radau_quadrature
  0.339146 seconds (325.61 k allocations: 19.557 MiB, 11.25% gc time)
Running: rectangle_rule_left. Only a rough approximation can be practically achieved using this function.
 82.154505 seconds (100.02 M allocations: 1.491 GiB, 0.42% gc time)
Running: rectangle_rule_midpoint.
  0.148276 seconds (173.73 k allocations: 3.887 MiB)
Running: rectangle_rule_right. Only a rough approximation can be practically achieved using this function.
 79.329990 seconds (100.02 M allocations: 1.491 GiB, 0.30% gc time)
Running: rombergs_method
  0.553707 seconds (752.70 k allocations: 43.312 MiB, 5.42% gc time)
Running: simpsons_rule
  0.040565 seconds (47.35 k allocations: 2.120 MiB)
Running: simpsons38_rule
  0.100092 seconds (113.20 k allocations: 5.979 MiB)
Running: trapezoidal_rule
  0.289723 seconds (1.52 M allocations: 25.802 MiB)
Test Summary: | Pass  Total
Airy Ai(x)    |   17     17
Performing the besselj test, where BesselJ_1(2) is approximated and the result is compared to the value obtained from SpecialFunctions' besselj function.
Running: adaptive_simpsons_rule with ε=1e-7
  0.093804 seconds (32.63 k allocations: 1.943 MiB)
Running: chebyshev_quadrature with k=1
  0.490701 seconds (275.41 k allocations: 13.963 MiB)
Running: chebyshev_quadrature with k=2
  0.223025 seconds (115.72 k allocations: 3.793 MiB, 19.17% gc time)
Running: chebyshev_quadrature with k=3
  0.183102 seconds (105.07 k allocations: 3.639 MiB)
Running: chebyshev_quadrature with k=4
  0.193813 seconds (87.68 k allocations: 3.285 MiB)
Running: jacobi_quadrature with α=β=1
  1.462396 seconds (536.16 k allocations: 163.495 MiB, 9.82% gc time)
Running: legendre_quadrature
  0.166642 seconds (62.24 k allocations: 3.471 MiB)
Running: lobatto_quadrature
  0.022291 seconds (16.72 k allocations: 1.030 MiB)
Running: radau_quadrature
  0.035796 seconds (16.71 k allocations: 1.030 MiB, 37.97% gc time)
Running: rectangle_rule_left
 30.930294 seconds (471.41 M allocations: 7.025 GiB, 3.01% gc time)
Running: rectangle_rule_midpoint
  0.000029 seconds (45 allocations: 1.047 KiB)
Running: rectangle_rule_right
 31.075116 seconds (476.96 M allocations: 7.107 GiB, 3.07% gc time)
Running: rombergs_method
  0.405222 seconds (360.22 k allocations: 20.310 MiB, 1.76% gc time)
Running: simpsons_rule
  0.000032 seconds (85 allocations: 1.672 KiB)
Running: simpsons38_rule
  0.069275 seconds (19.90 k allocations: 1.194 MiB)
Running: trapezoidal_rule
  0.058969 seconds (18.35 k allocations: 1.099 MiB)
Test Summary: | Pass  Total
besselj       |   16     16
Integrating cos^2(x)/(1+cot(x)) from 0 to pi/2 and comparing the results to the analytical result 0.25.
Running: adaptive_simpsons_rule with ε=1e-7
  0.031363 seconds (1.99 k allocations: 53.594 KiB)
Running: chebyshev_quadrature with k=1
  0.103853 seconds (2.40 k allocations: 113.453 KiB)
Running: chebyshev_quadrature with k=2
  0.106440 seconds (2.65 k allocations: 121.469 KiB)
Running: chebyshev_quadrature with k=3
  0.119491 seconds (3.08 k allocations: 133.688 KiB)
Running: chebyshev_quadrature with k=4
  0.121115 seconds (3.08 k allocations: 133.750 KiB)
Running: jacobi_quadrature with α=β=1
  0.353125 seconds (379.00 k allocations: 19.794 MiB, 9.04% gc time)
Running: legendre_quadrature
  0.064226 seconds (1.24 k allocations: 63.609 KiB)
Running: lobatto_quadrature
  0.000093 seconds (67 allocations: 2.844 KiB)
Running: radau_quadrature
  0.000038 seconds (71 allocations: 3.078 KiB)
Running: rectangle_rule_left
  0.000711 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_midpoint
  0.000356 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right
  0.000503 seconds (9 allocations: 496 bytes)
Running: rombergs_method
  0.073088 seconds (1.01 k allocations: 54.109 KiB)
Running: simpsons_rule
  0.000033 seconds (323 allocations: 5.391 KiB)
Running: simpsons38_rule
  0.025083 seconds (923 allocations: 39.281 KiB)
Running: trapezoidal_rule
  0.023101 seconds (44.33 k allocations: 704.859 KiB)
Test Summary: | Pass  Total
coscotint     |   16     16
Integrating cosine from 0 to pi/2 and comparing the result to the analytical result of 1.
Running: adaptive_simpsons_rule
  0.066933 seconds (75.84 k allocations: 4.402 MiB)
Running: chebyshev_quadrature with k=1
  0.196202 seconds (240.25 k allocations: 13.487 MiB)
Running: chebyshev_quadrature with k=2
  0.242353 seconds (295.45 k allocations: 16.574 MiB)
Running: chebyshev_quadrature with k=3
  0.223784 seconds (275.41 k allocations: 14.982 MiB)
Running: chebyshev_quadrature with k=4
  0.215422 seconds (275.44 k allocations: 14.879 MiB)
Running: jacobi_quadrature with α=β=1
  2.173365 seconds (465.76 k allocations: 164.227 MiB, 8.94% gc time)
Running: legendre_quadrature
  0.151032 seconds (193.00 k allocations: 11.129 MiB)
Running: lobatto_quadrature
  0.198791 seconds (204.21 k allocations: 11.810 MiB)
Running: radau_quadrature
  0.192994 seconds (204.20 k allocations: 11.829 MiB, 10.58% gc time)
Running: rectangle_rule_left
  1.084197 seconds (19.76 k allocations: 1.194 MiB)
Running: rectangle_rule_midpoint
  0.026801 seconds (25.93 k allocations: 1.615 MiB)
Running: rectangle_rule_right
  1.150743 seconds (18.27 k allocations: 1.105 MiB)
Running: rombergs_method
  0.141560 seconds (139.91 k allocations: 8.067 MiB)
Running: simpsons_rule
  0.031080 seconds (29.02 k allocations: 1.802 MiB)
Running: simpsons38_rule
  0.034223 seconds (44.65 k allocations: 2.787 MiB)
Running: trapezoidal_rule
  0.029181 seconds (45.20 k allocations: 1.824 MiB)
Test Summary: | Pass  Total
Cosine        |   16     16
Integrating e^(-x^2)/(1+x^2) on the infinite domain [-inf, inf], or failing that on [-100,100], and comparing it to the analytical result exp(1)*pi*erfc(1)
Running: adaptive_simpsons_rule with ε=1e-7
  0.043368 seconds (101.41 k allocations: 3.075 MiB)
Running: chebyshev_quadrature with k=1
  0.197826 seconds (247.35 k allocations: 13.587 MiB)
Running: chebyshev_quadrature with k=2
  0.240200 seconds (303.08 k allocations: 16.587 MiB, 8.73% gc time)
Running: chebyshev_quadrature with k=3
  0.214330 seconds (282.82 k allocations: 15.002 MiB)
Running: chebyshev_quadrature with k=4
  0.271825 seconds (282.85 k allocations: 15.010 MiB)
Running: hermite_quadrature with k=2
 15.856761 seconds (22.12 M allocations: 1.147 GiB, 7.39% gc time)
Running: jacobi_quadrature with α=β=1
  0.525042 seconds (475.79 k allocations: 50.444 MiB, 13.22% gc time)
Running: laguerre_quadrature with k=1 and multiplying the result by 2 (as Laguerre is only on the semi-infinite domain)
  0.246702 seconds (288.35 k allocations: 15.898 MiB)
Running: legendre_quadrature
  0.178299 seconds (200.06 k allocations: 11.455 MiB)
Running: lobatto_quadrature
  0.256595 seconds (225.72 k allocations: 37.626 MiB, 9.40% gc time)
Running: radau_quadrature
  0.225639 seconds (222.31 k allocations: 30.290 MiB)
Running: rectangle_rule_left
  0.031705 seconds (22.91 k allocations: 1.353 MiB)
Running: rectangle_rule_midpoint
  0.033314 seconds (27.88 k allocations: 1.711 MiB)
Running: rectangle_rule_right
  0.050396 seconds (19.48 k allocations: 1.166 MiB, 43.99% gc time)
Running: rombergs_method
  0.117674 seconds (142.73 k allocations: 8.122 MiB)
Running: simpsons_rule
  0.042113 seconds (41.25 k allocations: 2.157 MiB)
Running: simpsons38_rule
  0.046378 seconds (60.02 k allocations: 3.196 MiB)
Running: trapezoidal_rule
  0.033027 seconds (31.57 k allocations: 1.770 MiB)
Test Summary: | Pass  Total
expnx2datan   |   18     18
Integrate exp(-x^2) from minus infinity to positive infinity and comparing the result to the analytical solution, sqrt(pi)
Running: adaptive_simpsons_rule with ε=1e-7
  0.054037 seconds (61.51 k allocations: 2.360 MiB)
Running: chebyshev_quadrature with k=1
  0.224270 seconds (242.48 k allocations: 13.352 MiB)
Running: chebyshev_quadrature with k=2
  0.255748 seconds (297.80 k allocations: 16.314 MiB)
Running: chebyshev_quadrature with k=3
  0.276660 seconds (277.68 k allocations: 14.769 MiB, 9.20% gc time)
Running: chebyshev_quadrature with k=4
  0.240313 seconds (277.71 k allocations: 14.784 MiB)
Running: hermite_quadrature with k=2
  0.160511 seconds (177.71 k allocations: 10.219 MiB)
Running: jacobi_quadrature with α=β=1
  7.909917 seconds (468.36 k allocations: 1.176 GiB, 14.17% gc time)
Running: laguerre_quadrature (results multiplied by 2, as laguerre only integrates over the semi-infinite domain)
  0.238459 seconds (283.21 k allocations: 15.693 MiB)
Running: legendre_quadrature
  0.185091 seconds (195.23 k allocations: 11.220 MiB, 9.68% gc time)
Running: lobatto_quadrature
  0.204029 seconds (216.08 k allocations: 23.332 MiB)
Running: radau_quadrature
  0.241540 seconds (215.23 k allocations: 21.264 MiB, 10.19% gc time)
Running: rectangle_rule_left
  0.029983 seconds (20.47 k allocations: 1.235 MiB)
Running: rectangle_rule_midpoint
  0.028009 seconds (26.65 k allocations: 1.653 MiB)
Running: rectangle_rule_right
  0.026653 seconds (18.24 k allocations: 1.106 MiB)
Running: rombergs_method
  0.117824 seconds (138.20 k allocations: 7.923 MiB)
Running: simpsons_rule
  0.033239 seconds (33.49 k allocations: 1.933 MiB)
Running: simpsons38_rule
  0.040519 seconds (50.55 k allocations: 2.939 MiB)
Running: trapezoidal_rule
  0.029561 seconds (26.25 k allocations: 1.593 MiB)
Test Summary: | Pass  Total
Gaussian      |   18     18
Integrating 1/x from 1 to e and comparing the result to the analytical solution, 1.
Running: adaptive_simpsons_rule with ε=1e-7
  0.038389 seconds (32.48 k allocations: 1.957 MiB)
Running: chebyshev_quadrature with k=1
  0.265593 seconds (240.81 k allocations: 13.568 MiB)
Running: chebyshev_quadrature with k=2
  0.269112 seconds (296.03 k allocations: 16.652 MiB, 10.06% gc time)
Running: chebyshev_quadrature with k=3
  0.226501 seconds (276.01 k allocations: 14.982 MiB)
Running: chebyshev_quadrature with k=4
  0.212421 seconds (276.04 k allocations: 14.813 MiB)
Running: jacobi_quadrature with α=β=1
  1.621335 seconds (466.40 k allocations: 195.253 MiB, 5.06% gc time)
Running: legendre_quadrature
  0.197441 seconds (193.56 k allocations: 11.138 MiB)
Running: lobatto_quadrature
  0.212124 seconds (204.77 k allocations: 11.853 MiB)
Running: radau_quadrature
  0.221360 seconds (204.77 k allocations: 11.846 MiB, 8.06% gc time)
Running: rectangle_rule_left
  0.342013 seconds (20.33 k allocations: 1.222 MiB)
Running: rectangle_rule_midpoint
  0.034327 seconds (26.30 k allocations: 1.635 MiB)
Running: rectangle_rule_right
  0.127268 seconds (18.64 k allocations: 1.125 MiB)
Running: rombergs_method
  0.154508 seconds (151.28 k allocations: 8.874 MiB)
Running: simpsons_rule
  0.034787 seconds (29.77 k allocations: 1.835 MiB)
Running: simpsons38_rule
  0.038807 seconds (45.42 k allocations: 2.821 MiB)
Running: trapezoidal_rule
  0.027759 seconds (46.19 k allocations: 1.861 MiB)
Test Summary: | Pass  Total
1/x           |   16     16
Integrating log(x)/x from 1 to e and comparing the result to the analytical solution of 0.5.
Running: adaptive_simpsons_rule with ε=1e-7
  0.026448 seconds (33.23 k allocations: 1.905 MiB)
Running: chebyshev_quadrature with k=1
  0.180171 seconds (241.38 k allocations: 13.511 MiB)
Running: chebyshev_quadrature with k=2
  0.256459 seconds (296.63 k allocations: 16.566 MiB, 7.36% gc time)
Running: chebyshev_quadrature with k=3
  0.219923 seconds (276.54 k allocations: 14.902 MiB)
Running: chebyshev_quadrature with k=4
  0.219410 seconds (276.58 k allocations: 14.981 MiB)
Running: jacobi_quadrature with α=β=1
  2.065291 seconds (467.06 k allocations: 149.919 MiB, 4.62% gc time)
Running: legendre_quadrature
  0.158279 seconds (194.13 k allocations: 11.150 MiB)
Running: lobatto_quadrature
  0.181047 seconds (205.35 k allocations: 11.921 MiB)
Running: radau_quadrature
  0.195895 seconds (205.34 k allocations: 11.858 MiB, 8.80% gc time)
Running: rectangle_rule_left
  1.211874 seconds (20.60 k allocations: 1.236 MiB)
Running: rectangle_rule_midpoint
  0.026883 seconds (26.29 k allocations: 1.635 MiB)
Running: rectangle_rule_right
  1.153749 seconds (18.61 k allocations: 1.124 MiB)
Running: rombergs_method
  0.141631 seconds (141.21 k allocations: 8.136 MiB)
Running: simpsons_rule
  0.034158 seconds (30.52 k allocations: 1.863 MiB)
Running: simpsons38_rule
  0.039614 seconds (46.17 k allocations: 2.850 MiB)
Running: trapezoidal_rule
  0.028211 seconds (58.45 k allocations: 2.062 MiB)
Test Summary: | Pass  Total
log(x)/x      |   16     16
Approximating the modified bessel function I_1(1) and comparing it to the result obtained by SpecialFunctions.
Running: adaptive_simpsons_rule with ε=1e-7
  0.180639 seconds (152.84 k allocations: 9.083 MiB)
Running: chebyshev_quadrature with k=1
  0.151350 seconds (91.24 k allocations: 3.295 MiB)
Running: chebyshev_quadrature with k=2
  0.163950 seconds (127.01 k allocations: 3.988 MiB)
Running: chebyshev_quadrature with k=3
  0.174672 seconds (115.58 k allocations: 3.818 MiB)
Running: chebyshev_quadrature with k=4
  0.413276 seconds (95.11 k allocations: 3.411 MiB, 59.71% gc time)
Running: jacobi_quadrature with α=β=1
  2.541895 seconds (509.88 k allocations: 169.311 MiB, 5.67% gc time)
Running: legendre_quadrature
  0.107737 seconds (38.34 k allocations: 2.107 MiB)
Running: lobatto_quadrature
  0.000154 seconds (150 allocations: 4.328 KiB)
Running: radau_quadrature
  0.000122 seconds (148 allocations: 4.375 KiB)
Running: rectangle_rule_left
 43.125567 seconds (590.00 M allocations: 8.792 GiB, 2.53% gc time)
Running: rectangle_rule_midpoint
  0.000053 seconds (40 allocations: 992 bytes)
Running: rectangle_rule_right
 43.357546 seconds (592.75 M allocations: 8.833 GiB, 2.34% gc time)
Running: rombergs_method
  0.143328 seconds (41.88 k allocations: 2.257 MiB)
Running: simpsons_rule
  0.000070 seconds (93 allocations: 1.797 KiB)
Running: simpsons38_rule
  0.033977 seconds (463 allocations: 22.578 KiB)
Running: trapezoidal_rule
  0.021441 seconds (179 allocations: 8.766 KiB)
Test Summary: | Pass  Total
modbessel0    |   16     16
Integrating 1/sqrt(-19.6 sin(x)) from -pi to 0 and comparing the result to the analytical solution of ellipk(1/2)/sqrt(2.45) The integrand has singularities at x = -pi and x=0, so for some of these functions the integration domain has to be itself approximated.
Running: adaptive_simpsons_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 30.391963 seconds (629.34 M allocations: 9.388 GiB, 3.62% gc time)
Running: chebyshev_quadrature with k=1
  0.431360 seconds (439.14 k allocations: 24.258 MiB)
Running: chebyshev_quadrature with k=2
 12.782316 seconds (496.50 k allocations: 4.042 GiB, 4.08% gc time)
Running: chebyshev_quadrature with k=3
  5.958377 seconds (290.50 k allocations: 1.643 GiB, 4.53% gc time)
Running: chebyshev_quadrature with k=4
  7.863867 seconds (290.53 k allocations: 2.262 GiB, 2.47% gc time)
Running: jacobi_quadrature with α=β=1. The N value required to get an accurate result is too high to be practical, so only a rough approximation can be arrived at.
 46.573182 seconds (505.20 k allocations: 13.255 GiB, 3.42% gc time)
Running: legendre_quadrature.
  4.778513 seconds (232.83 k allocations: 1.976 GiB, 1.29% gc time)
The following integration functions have to use an approximated domain due to the endpoint singularities.
Running: lobatto_quadrature on [-pi+1e-6, -1e-6]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 41.784934 seconds (8.24 M allocations: 13.384 GiB, 3.97% gc time)
Running: radau_quadrature on [-pi+1e-6, -1e-6]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 39.803072 seconds (7.24 M allocations: 13.369 GiB, 2.93% gc time)
Running: rectangle_rule_left on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  2.944339 seconds (23.35 k allocations: 1.402 MiB)
Running: rectangle_rule_midpoint on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  2.726839 seconds (31.97 k allocations: 1.959 MiB)
Running: rectangle_rule_right on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  2.993788 seconds (23.57 k allocations: 1.413 MiB)
Running: rombergs_method on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  1.074483 seconds (456.60 k allocations: 153.696 MiB)
Running: simpsons_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 39.776459 seconds (600.04 M allocations: 8.943 GiB, 8.47% gc time)
Running: simpsons38_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 38.838113 seconds (600.05 M allocations: 8.944 GiB, 8.00% gc time)
Running: trapezoidal_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 39.959554 seconds (600.04 M allocations: 8.943 GiB, 8.43% gc time)
Test Summary: | Pass  Total
Simppen       |   16     16
Integrating sin(x^2)e^(-x)/x from 0 to infinity, with the approximated domain of integration of 0 to 100. The removable singularity at x=0 in the integrand has been removed.
Running: adaptive_simpsons_rule with ε=1e-8
  0.066664 seconds (182.51 k allocations: 4.517 MiB)
Running: chebyshev_quadrature with k=1
  0.258010 seconds (257.97 k allocations: 14.018 MiB)
Running: chebyshev_quadrature with k=2
  0.271738 seconds (284.13 k allocations: 15.183 MiB)
Running: chebyshev_quadrature with k=3
  0.227883 seconds (260.62 k allocations: 13.456 MiB)
Running: chebyshev_quadrature with k=4
  0.220042 seconds (260.65 k allocations: 13.452 MiB)
Running: jacobi_quadrature with α=β=1
  0.389140 seconds (405.37 k allocations: 35.866 MiB)
Running: laguerre_quadrature with k=2
  0.185963 seconds (187.97 k allocations: 10.871 MiB)
Running: legendre_quadrature
  0.130057 seconds (151.74 k allocations: 8.407 MiB)
Running: lobatto_quadrature
  0.036530 seconds (10.88 k allocations: 15.109 MiB)
Running: radau_quadrature
  0.032517 seconds (9.66 k allocations: 13.183 MiB)
Running: rectangle_rule_left
  0.056717 seconds (19.81 k allocations: 1.170 MiB)
Running: rectangle_rule_midpoint
  0.048102 seconds (26.77 k allocations: 1.640 MiB)
Running: rectangle_rule_right
  0.050505 seconds (18.36 k allocations: 1.094 MiB)
Running: rombergs_method
  0.250673 seconds (170.81 k allocations: 9.738 MiB)
Running: simpsons_rule
  0.002027 seconds (24.72 k allocations: 386.656 KiB)
Running: simpsons38_rule
  0.054254 seconds (81.45 k allocations: 3.520 MiB)
Running: trapezoidal_rule
  0.185991 seconds (2.39 M allocations: 37.757 MiB)
Test Summary: | Pass  Total
sinexpox      |   17     17
Integrating sin(x)/x from 0 to 100 and comparing it to the exact result.
Running: adaptive_simpsons_rule with ε=1e-8
  0.001851 seconds (30.71 k allocations: 480.250 KiB)
Running: chebyshev_quadrature with k=1
  0.090138 seconds (2.58 k allocations: 1.696 MiB)
Running: chebyshev_quadrature with k=2
  0.090977 seconds (2.84 k allocations: 2.359 MiB)
Running: chebyshev_quadrature with k=3
  0.098192 seconds (3.26 k allocations: 2.060 MiB)
Running: chebyshev_quadrature with k=4
  0.095903 seconds (3.26 k allocations: 1.501 MiB)
Running: jacobi_quadrature with α=β=1
  5.898523 seconds (402.17 k allocations: 906.632 MiB, 6.15% gc time)
Running: legendre_quadrature
  0.074304 seconds (1.33 k allocations: 72.281 KiB)
Running: lobatto_quadrature
  0.000185 seconds (253 allocations: 9.188 KiB)
Running: radau_quadrature
  0.000122 seconds (221 allocations: 8.812 KiB)
Running: rectangle_rule_left; only a rough approximation can be practically achieved using this function
  3.336518 seconds (11 allocations: 528 bytes)
Running: rectangle_rule_midpoint
  0.000436 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right; only a rough approximation can be practically achieved using this function
  3.331671 seconds (11 allocations: 528 bytes)
Running: rombergs_method
  0.066675 seconds (1.16 k allocations: 66.734 KiB)
Running: simpsons_rule
  0.000103 seconds (9 allocations: 496 bytes)
Running: simpsons38_rule
  0.000069 seconds (9 allocations: 496 bytes)
Running: trapezoidal_rule
  0.000807 seconds (9 allocations: 496 bytes)
Test Summary: | Pass  Total
sinxx         |   16     16
Integrating (x^3+1)/(x^4 (x+1)(x^2+1)) from 1 to e and comparing the result to the analytical solution of log(sqrt(2)*exp(1)/(sqrt(exp(2)+1)))+1/2*(exp(-2)-1)+1/3*(1-exp(-3))
Running: adaptive_simpsons_rule with ε=1e-8
  0.000834 seconds (6.34 k allocations: 99.453 KiB)
Running: chebyshev_quadrature with k=1
  0.115286 seconds (2.48 k allocations: 576.609 KiB)
Running: chebyshev_quadrature with k=2
  0.145033 seconds (2.73 k allocations: 777.391 KiB)
Running: chebyshev_quadrature with k=3
  0.137757 seconds (3.15 k allocations: 685.641 KiB)
Running: chebyshev_quadrature with k=4
  0.125568 seconds (3.16 k allocations: 516.203 KiB)
Running: jacobi_quadrature with α=β=1
  3.373436 seconds (388.44 k allocations: 253.808 MiB)
Running: legendre_quadrature
  0.066302 seconds (1.28 k allocations: 65.438 KiB)
Running: lobatto_quadrature
  0.000124 seconds (91 allocations: 3.656 KiB)
Running: radau_quadrature
  0.000042 seconds (81 allocations: 3.453 KiB)
Running: rectangle_rule_left; only a rough approximation can be practically achieved using this function.
 10.689961 seconds (11 allocations: 528 bytes)
Running: rectangle_rule_midpoint
  0.001074 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right; only a rough approximation can be practically achieved using this function.
 10.555941 seconds (11 allocations: 528 bytes)
Running: rombergs_method
  0.091005 seconds (1.18 k allocations: 62.562 KiB)
Running: simpsons_rule
  0.000054 seconds (9 allocations: 496 bytes)
Running: simpsons38_rule
  0.000043 seconds (9 allocations: 496 bytes)
Running: trapezoidal_rule
  0.001731 seconds (9 allocations: 496 bytes)
Test Summary: | Pass  Total
partfrac      |   16     16
    Testing FunctionIntegrator tests passed 
