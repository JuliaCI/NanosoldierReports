Julia Version 1.6.0-DEV.646
Commit d47f7d0827 (2020-08-15 10:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.1
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.1
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_smNjic/Project.toml`
  [5789e2e9] FileIO v1.4.1
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_smNjic/Manifest.toml`
  [5789e2e9] FileIO v1.4.1
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.2172233772307226
curgen: 20 fitness: 0.21723198575121858
curgen: 30 fitness: 0.21723198575121858
curgen: 40 fitness: 0.21723198575121858
curgen: 50 fitness: 0.21723317089805913
CoordinateCreature{Vector{Float64}}([-0.2226498157583941], -0.21723317089805913) -0.2226498157583941 -0.21723317089805913
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.257632844309377
curgen: 100 fitness: 3.258021782325794
curgen: 150 fitness: 3.2583611312365313
curgen: 200 fitness: 3.2583636216591496
curgen: 250 fitness: 3.2583840244438327
curgen: 300 fitness: 3.258389060233715
curgen: 350 fitness: 3.258414588523201
curgen: 400 fitness: 3.258434000791421
curgen: 450 fitness: 3.2584641569276833
curgen: 500 fitness: 3.258472002116281
CoordinateCreature{Vector{Float64}}([0.22269298230900336, 0.22266508882900526, 0.22291338790306112, 0.22290514354543453, 0.22262562254157597, 0.2228846742681964, -0.22234438508091173, 0.22245948493214704, 0.22257101367113113, -0.22277157231844102, 0.22257173704903527, -0.22264582126343987, -0.22298843842108568, -0.22266719039265395, 0.22251810504648983], -3.258472002116281) [0.22269298230900336, 0.22266508882900526, 0.22291338790306112, 0.22290514354543453, 0.22262562254157597, 0.2228846742681964, -0.22234438508091173, 0.22245948493214704, 0.22257101367113113, -0.22277157231844102, 0.22257173704903527, -0.22264582126343987, -0.22298843842108568, -0.22266719039265395, 0.22251810504648983] -3.258472002116281
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.002126044266901772
curgen: 100 fitness: -0.0018178523670826507
curgen: 150 fitness: -0.0014902158638108176
curgen: 200 fitness: -0.0014902158638108176
curgen: 250 fitness: -0.0014266921348848882
curgen: 300 fitness: -0.0014266921348848882
curgen: 350 fitness: -0.0014266921348848882
curgen: 400 fitness: -0.0014266921348848882
curgen: 450 fitness: -0.001157653131627967
curgen: 500 fitness: -0.001157653131627967
CoordinateCreature{Vector{Float64}}([-0.00018534672898323779, -4.0622292212243394e-5, -0.0005069249633216089, 0.001165683310744698, -0.0004357581997403055, -0.0003476169462330995, 0.0005820379096167887, 0.0007590428455553209, 6.128828136375722e-5, -0.0010526947700977944, 6.655842175381263e-5, 0.0005836876133316301, -0.0006929010759704355, 0.00100977877993688, -3.089496455632463e-5], 0.001157653131627967) [-0.00018534672898323779, -4.0622292212243394e-5, -0.0005069249633216089, 0.001165683310744698, -0.0004357581997403055, -0.0003476169462330995, 0.0005820379096167887, 0.0007590428455553209, 6.128828136375722e-5, -0.0010526947700977944, 6.655842175381263e-5, 0.0005836876133316301, -0.0006929010759704355, 0.00100977877993688, -3.089496455632463e-5] 0.001157653131627967
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
