Julia Version 1.6.0-DEV.636
Commit 8554a216e7 (2020-08-14 06:59 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.1
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.1
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_klIZw0/Project.toml`
  [5789e2e9] FileIO v1.4.1
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_klIZw0/Manifest.toml`
  [5789e2e9] FileIO v1.4.1
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21723266026545948
curgen: 20 fitness: 0.21723266026545948
curgen: 30 fitness: 0.21723266026545948
curgen: 40 fitness: 0.21723266026545948
curgen: 50 fitness: 0.21723266026545948
CoordinateCreature{Vector{Float64}}([-0.22269607524942625], -0.21723266026545948) -0.22269607524942625 -0.21723266026545948
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.2575808571347014
curgen: 100 fitness: 3.2578492930303
curgen: 150 fitness: 3.258118159400556
curgen: 200 fitness: 3.2583587519104027
curgen: 250 fitness: 3.258359690658135
curgen: 300 fitness: 3.258407602264503
curgen: 350 fitness: 3.258408183207833
curgen: 400 fitness: 3.258412128462815
curgen: 450 fitness: 3.258412128462815
curgen: 500 fitness: 3.258472270361956
CoordinateCreature{Vector{Float64}}([-0.22258454709705816, -0.22333221235630726, -0.2224544839434524, 0.2225028764396872, 0.2225154054914167, -0.2224162491277564, -0.2225862548910314, 0.22258534426231913, 0.2223946514824743, 0.22251809801985672, -0.22249814606861157, 0.22254668069797218, -0.2223598728952983, -0.22256911986072522, 0.22241448374909092], -3.258472270361956) [-0.22258454709705816, -0.22333221235630726, -0.2224544839434524, 0.2225028764396872, 0.2225154054914167, -0.2224162491277564, -0.2225862548910314, 0.22258534426231913, 0.2223946514824743, 0.22251809801985672, -0.22249814606861157, 0.22254668069797218, -0.2223598728952983, -0.22256911986072522, 0.22241448374909092] -3.258472270361956
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.0013622415273175648
curgen: 100 fitness: -0.0012263012995958888
curgen: 150 fitness: -0.0012263012995958888
curgen: 200 fitness: -0.0012263012995958888
curgen: 250 fitness: -0.001086125828095419
curgen: 300 fitness: -0.001086125828095419
curgen: 350 fitness: -0.001086125828095419
curgen: 400 fitness: -0.0009790387717032445
curgen: 450 fitness: -0.0009790387717032445
curgen: 500 fitness: -0.000900927352574854
CoordinateCreature{Vector{Float64}}([-0.00041755362507961706, 0.0014640938343441247, -1.1202879290851353e-5, 0.0002618162726906771, 0.0011567481276908965, 3.376567839406819e-6, -0.00014264040094841531, 0.00011894886031849289, -0.0002975071922369718, 0.0002213577986599117, 4.472526898862113e-6, -0.0005909275538097958, -2.94833666887118e-7, -0.00037357592024165313, 0.0003946075683589848], 0.000900927352574854) [-0.00041755362507961706, 0.0014640938343441247, -1.1202879290851353e-5, 0.0002618162726906771, 0.0011567481276908965, 3.376567839406819e-6, -0.00014264040094841531, 0.00011894886031849289, -0.0002975071922369718, 0.0002213577986599117, 4.472526898862113e-6, -0.0005909275538097958, -2.94833666887118e-7, -0.00037357592024165313, 0.0003946075683589848] 0.000900927352574854
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
