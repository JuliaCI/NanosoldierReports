Julia Version 1.6.0-DEV.636
Commit 8554a216e7 (2020-08-14 06:59 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed InvertedIndices ───────────── v1.0.0
  Installed DataValueInterfaces ───────── v1.0.0
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed Missings ──────────────────── v0.4.3
  Installed TableTraits ───────────────── v1.0.0
  Installed DataStructures ────────────── v0.17.20
  Installed Reexport ──────────────────── v0.2.0
  Installed Tables ────────────────────── v1.0.5
  Installed PooledArrays ──────────────── v0.5.3
  Installed DataAPI ───────────────────── v1.3.0
  Installed Parsers ───────────────────── v1.0.10
  Installed SentinelArrays ────────────── v1.2.11
  Installed Compat ────────────────────── v3.13.0
  Installed OrderedCollections ────────── v1.3.0
  Installed CategoricalArrays ─────────── v0.8.1
  Installed JSON ──────────────────────── v0.21.0
  Installed CSV ───────────────────────── v0.7.7
  Installed DataFrames ────────────────── v0.21.6
Updating `~/.julia/environments/v1.6/Project.toml`
  [336ed68f] + CSV v0.7.7
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [336ed68f] + CSV v0.7.7
  [324d7699] + CategoricalArrays v0.8.1
  [34da2185] + Compat v3.13.0
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.21.6
  [864edb3b] + DataStructures v0.17.20
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.3.0
  [69de0a69] + Parsers v1.0.10
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [91c51154] + SentinelArrays v1.2.11
  [a2af1166] + SortingAlgorithms v0.3.1
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.5
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing CSV
Status `/tmp/jl_bCNReq/Project.toml`
  [336ed68f] CSV v0.7.7
  [324d7699] CategoricalArrays v0.8.1
  [944b1d66] CodecZlib v0.7.0
  [a93c6f00] DataFrames v0.21.6
  [48062228] FilePathsBase v0.9.4
  [69de0a69] Parsers v1.0.10
  [2dfb63ee] PooledArrays v0.5.3
  [91c51154] SentinelArrays v1.2.11
  [bd369af6] Tables v1.0.5
  [ea10d353] WeakRefStrings v0.6.2
  [ade2ca70] Dates
  [a63ad114] Mmap
  [9a3f8284] Random
  [8dfed614] Test
  [4ec0a83e] Unicode
Status `/tmp/jl_bCNReq/Manifest.toml`
  [336ed68f] CSV v0.7.7
  [324d7699] CategoricalArrays v0.8.1
  [944b1d66] CodecZlib v0.7.0
  [34da2185] Compat v3.13.0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.21.6
  [864edb3b] DataStructures v0.17.20
  [e2d170a0] DataValueInterfaces v1.0.0
  [48062228] FilePathsBase v0.9.4
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.3.0
  [69de0a69] Parsers v1.0.10
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [91c51154] SentinelArrays v1.2.11
  [a2af1166] SortingAlgorithms v0.3.1
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.5
  [3bb67fe8] TranscodingStreams v0.9.5
  [ea10d353] WeakRefStrings v0.6.2
  [83775a58] Zlib_jll v1.2.11+15
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
thread = 1 warning: only found 7 / 8 columns around data row: 2. Filling remaining columns with `missing`
thread = 1 warning: error parsing Int64 around row = 2, col = 1: "abc
", error=INVALID: SENTINEL | NEWLINE | EOF | INVALID_DELIMITER 
CSV.File("<IOBuffer>"):
Size: 3 x 1
Tables.Schema:
 :col1  Stringthread = 1 warning: only found 1 / 2 columns around data row: 11. Filling remaining columns with `missing`
testing test_utf8_with_BOM.csv
testing test_utf8.csv
testing test_windows.csv
testing test_single_column.csv
testing test_empty_file.csv
testing test_empty_file_newlines.csv
testing test_simple_quoted.csv
testing test_quoted_delim_and_newline.csv
testing test_quoted_numbers.csv
testing test_crlf_line_endings.csv
testing test_newline_line_endings.csv
testing test_mac_line_endings.csv
testing test_no_header.csv
testing test_2_footer_rows.csv
testing test_footer_missing.csv
testing test_footer_missing.csv
testing test_dates.csv
testing test_excel_date_formats.csv
testing test_datetimes.csv
testing test_missing_value_NULL.csv
testing test_missing_value_NULL.csv
testing test_missing_value.csv
testing test_header_range.csv
testing test_header_int_list.csv
testing test_basic.csv
testing test_basic_pipe.csv
testing test_tab_null_empty.txt
testing test_tab_null_string.txt
testing IOBuffer(data=UInt8[...], readable=true, writable=false, seekable=true, append=false, size=5, maxsize=Inf, ptr=1, mark=-1)
testing IOBuffer(data=UInt8[...], readable=true, writable=false, seekable=true, append=false, size=0, maxsize=Inf, ptr=1, mark=-1)
testing dash_as_null.csv
testing plus_as_null.csv
testing comma_decimal.csv
testing double_quote_quotechar_and_escapechar.csv
testing census.txt
testing bools.csv
testing boolext.csv
testing attenu.csv
testing test_null_only_column.csv
testing IOBuffer(data=UInt8[...], readable=true, writable=false, seekable=true, append=false, size=20, maxsize=Inf, ptr=1, mark=-1)
testing categorical.csv
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 1)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
testing categorical.csv
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 1)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
testing categorical.csv
testing categorical.csv
testing baseball.csv
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 4)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 5)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 6)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 15)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
testing FL_insurance_sample.csv
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 2)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 3)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 16)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 17)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
testing FL_insurance_sample.csv
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 2)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 3)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 16)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 17)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
testing SacramentocrimeJanuary2006.csv
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 1)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 2)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 4)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 6)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
testing Sacramentorealestatetransactions.csv
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 1)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 2)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 4)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 8)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 9)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
testing SalesJan2009.csv
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 1)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 2)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 4)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 5)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 6)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 7)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 8)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 9)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 10)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
testing stocks.csv
testing TechCrunchcontinentalUSA.csv
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 1)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 2)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 4)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 5)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 6)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 7)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 9)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 10)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
testing Fielding.csv
testing latest (1).csv
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 1)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 2)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 5)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 7)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 12)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
testing IOBuffer(data=UInt8[...], readable=true, writable=false, seekable=true, append=false, size=16, maxsize=Inf, ptr=1, mark=-1)
testing issue_198.csv
testing issue_198_part2.csv
thread = 1 warning: parsed expected 3 columns, but didn't reach end of line around data row: 3. Ignoring any extra columns on this row
thread = 1 warning: parsed expected 3 columns, but didn't reach end of line around data row: 4. Ignoring any extra columns on this row
thread = 1 warning: parsed expected 3 columns, but didn't reach end of line around data row: 3. Ignoring any extra columns on this row
thread = 1 warning: parsed expected 3 columns, but didn't reach end of line around data row: 4. Ignoring any extra columns on this row
thread = 1 warning: parsed expected 3 columns, but didn't reach end of line around data row: 3. Ignoring any extra columns on this row
thread = 1 warning: parsed expected 3 columns, but didn't reach end of line around data row: 4. Ignoring any extra columns on this row
testing issue_207.csv
thread = 1 warning: only found 5 / 6 columns around data row: 3. Filling remaining columns with `missing`
thread = 1 warning: only found 5 / 6 columns around data row: 3. Filling remaining columns with `missing`
thread = 1 warning: only found 5 / 6 columns around data row: 3. Filling remaining columns with `missing`
thread = 1 warning: only found 5 / 6 columns around data row: 3. Filling remaining columns with `missing`
testing issue_120.csv
testing pandas_zeros.csv
testing transposed.csv
testing transposed_1row.csv
testing transposed_emtpy.csv
testing transposed_extra_newline.csv
testing transposed_noheader.csv
testing transposed_noheader.csv
testing test_utf8.csv
testing test_utf8.csv
testing test_multiple_missing.csv
testing test_openclosequotes.csv
testing test_truestrings.csv
testing test_truestrings.csv
testing test_string_delimiters.csv
testing IOBuffer(data=UInt8[...], readable=true, writable=false, seekable=true, append=false, size=20, maxsize=Inf, ptr=1, mark=-1)
testing test_basic.csv
testing test_basic.csv
testing test_truestrings.csv
testing test_repeated_delimiters.csv
testing test_comments1.csv
testing test_comments_multiple.csv
testing test_comments_multichar.csv
testing test_not_enough_columns.csv
thread = 1 warning: only found 3 / 5 columns around data row: 2. Filling remaining columns with `missing`
thread = 1 warning: only found 3 / 5 columns around data row: 3. Filling remaining columns with `missing`
thread = 1 warning: only found 3 / 5 columns around data row: 2. Filling remaining columns with `missing`
thread = 1 warning: only found 3 / 5 columns around data row: 3. Filling remaining columns with `missing`
thread = 1 warning: only found 3 / 5 columns around data row: 2. Filling remaining columns with `missing`
thread = 1 warning: only found 3 / 5 columns around data row: 3. Filling remaining columns with `missing`
testing test_not_enough_columns2.csv
thread = 1 warning: only found 3 / 5 columns around data row: 3. Filling remaining columns with `missing`
thread = 1 warning: only found 3 / 5 columns around data row: 3. Filling remaining columns with `missing`
thread = 1 warning: only found 3 / 5 columns around data row: 3. Filling remaining columns with `missing`
testing test_correct_trailing_missings.csv
thread = 1 warning: only found 4 / 5 columns around data row: 3. Filling remaining columns with `missing`
thread = 1 warning: only found 4 / 5 columns around data row: 3. Filling remaining columns with `missing`
thread = 1 warning: only found 4 / 5 columns around data row: 3. Filling remaining columns with `missing`
testing norwegian_data.csv
testing test_duplicate_columnnames.csv
testing test_bad_datetime.csv
testing test_types.csv
thread = 1 warning: only found 7 / 8 columns around data row: 2. Filling remaining columns with `missing`
thread = 1 warning: only found 7 / 8 columns around data row: 2. Filling remaining columns with `missing`
thread = 1 warning: only found 7 / 8 columns around data row: 2. Filling remaining columns with `missing`
testing test_issue_326.wsv
testing test_missing_last_field.csv
thread = 1 warning: only found 2 / 3 columns around data row: 3. Filling remaining columns with `missing`
thread = 1 warning: only found 2 / 3 columns around data row: 3. Filling remaining columns with `missing`
thread = 1 warning: only found 2 / 3 columns around data row: 3. Filling remaining columns with `missing`
testing test_delim.tsv
testing test_delim.wsv
testing test_comment_first_row.csv
testing test_comment_first_row.csv
testing test_repeated_delim_371.csv
testing test_file_issue_154.csv
testing IOBuffer(data=UInt8[...], readable=true, writable=false, seekable=true, append=false, size=16, maxsize=Inf, ptr=1, mark=-1)
thread = 1 warning: only found 2 / 3 columns around data row: 3. Filling remaining columns with `missing`
thread = 1 warning: only found 2 / 3 columns around data row: 3. Filling remaining columns with `missing`
thread = 1 warning: only found 2 / 3 columns around data row: 3. Filling remaining columns with `missing`
testing IOBuffer(data=UInt8[...], readable=true, writable=false, seekable=true, append=false, size=19, maxsize=Inf, ptr=1, mark=-1)
thread = 1 warning: only found 1 / 3 columns around data row: 2. Filling remaining columns with `missing`
thread = 1 warning: only found 1 / 3 columns around data row: 3. Filling remaining columns with `missing`
thread = 1 warning: only found 1 / 3 columns around data row: 2. Filling remaining columns with `missing`
thread = 1 warning: only found 1 / 3 columns around data row: 3. Filling remaining columns with `missing`
thread = 1 warning: only found 1 / 3 columns around data row: 2. Filling remaining columns with `missing`
thread = 1 warning: only found 1 / 3 columns around data row: 3. Filling remaining columns with `missing`
testing IOBuffer(data=UInt8[...], readable=true, writable=false, seekable=true, append=false, size=19, maxsize=Inf, ptr=1, mark=-1)
thread = 1 warning: only found 1 / 3 columns around data row: 2. Filling remaining columns with `missing`
thread = 1 warning: only found 1 / 3 columns around data row: 3. Filling remaining columns with `missing`
thread = 1 warning: only found 1 / 3 columns around data row: 2. Filling remaining columns with `missing`
thread = 1 warning: only found 1 / 3 columns around data row: 3. Filling remaining columns with `missing`
thread = 1 warning: only found 1 / 3 columns around data row: 2. Filling remaining columns with `missing`
thread = 1 warning: only found 1 / 3 columns around data row: 3. Filling remaining columns with `missing`
testing IOBuffer(data=UInt8[...], readable=true, writable=false, seekable=true, append=false, size=43, maxsize=Inf, ptr=1, mark=-1)
thread = 1 warning: parsed expected 5 columns, but didn't reach end of line around data row: 2. Ignoring any extra columns on this row
thread = 1 warning: parsed expected 5 columns, but didn't reach end of line around data row: 3. Ignoring any extra columns on this row
thread = 1 warning: parsed expected 5 columns, but didn't reach end of line around data row: 4. Ignoring any extra columns on this row
thread = 1 warning: parsed expected 5 columns, but didn't reach end of line around data row: 2. Ignoring any extra columns on this row
thread = 1 warning: parsed expected 5 columns, but didn't reach end of line around data row: 3. Ignoring any extra columns on this row
thread = 1 warning: parsed expected 5 columns, but didn't reach end of line around data row: 4. Ignoring any extra columns on this row
thread = 1 warning: parsed expected 5 columns, but didn't reach end of line around data row: 2. Ignoring any extra columns on this row
thread = 1 warning: parsed expected 5 columns, but didn't reach end of line around data row: 3. Ignoring any extra columns on this row
thread = 1 warning: parsed expected 5 columns, but didn't reach end of line around data row: 4. Ignoring any extra columns on this row
testing IOBuffer(data=UInt8[...], readable=true, writable=false, seekable=true, append=false, size=17, maxsize=Inf, ptr=1, mark=-1)
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 1)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
testing heat_flux.dat
testing log001_vehicle_status_flags_0.txt
testing fecal_samples.csv
header is: 1, datarow computed as: 2
headerpos = 4, datapos = 481
estimated rows: 756
detected delimiter: ","
column names detected: [:SampleID, :Mother_Child, :SubjectID, :MaternalID, :TimePoint, :Fecal_EtOH, :CollectionRep, :DOC, :RAInitials_DOC, :DOF, :RAInitials_DOF, :Date_Brought_In, :RAInitials_Brought, :Date_Shipped, :RAInitials_Shipped, :Date_Aliquoted, :Number_Replicates, :RAInitials_Aliquot, :StorageBox, :DOE, :Extract_number, :AliquotRep, :DNABox, :KitUsed, :RAInitials_Extract, :DNAConc, :DOM, :Mgx_processed, :Mgx_batch, :DO16S, :_16S_processed, :_16S_batch, :_16S_plate, :Notes, :Discrepancies, :Batch_1_Mapping, :Mgx_batch_Mapping, :_16S_batch_Mapping, :Mother_Child_Dyads]
byte position of data computed at: 481
column options generated as: 
computed types are: Type[Union{Missing, String}, Union{Missing, String}, Union{Missing, String}, Union{Missing, String}, Union{Missing, String}, Union{Missing, String}, Union{Missing, String}, Union{Missing, String}, Union{Missing, String}, Union{Missing, String}, Union{Missing, String}, Union{Missing, String}, Union{Missing, String}, Union{Missing, String}, Union{Missing, String}, Union{Missing, String}, Union{Missing, String}, Union{Missing, String}, Union{Missing, String}, Union{Missing, String}, Union{Missing, String}, Union{Missing, String}, Union{Missing, String}, Union{Missing, String}, Union{Missing, String}, Union{Missing, String}, Union{Missing, String}, Union{Missing, String}, Union{Missing, String}, Union{Missing, String}, Union{Missing, String}, Union{Missing, String}, Union{Missing, String}, Union{Missing, String}, Union{Missing, String}, Union{Missing, String}, Union{Missing, String}, Union{Missing, String}, Union{Missing, String}]
thread = 1 warning: only found 38 / 39 columns around data row: 1080. Filling remaining columns with `missing`
header is: 1, datarow computed as: 2
headerpos = 4, datapos = 481
estimated rows: 756
detected delimiter: ","
column names detected: [:SampleID, :Mother_Child, :SubjectID, :MaternalID, :TimePoint, :Fecal_EtOH, :CollectionRep, :DOC, :RAInitials_DOC, :DOF, :RAInitials_DOF, :Date_Brought_In, :RAInitials_Brought, :Date_Shipped, :RAInitials_Shipped, :Date_Aliquoted, :Number_Replicates, :RAInitials_Aliquot, :StorageBox, :DOE, :Extract_number, :AliquotRep, :DNABox, :KitUsed, :RAInitials_Extract, :DNAConc, :DOM, :Mgx_processed, :Mgx_batch, :DO16S, :_16S_processed, :_16S_batch, :_16S_plate, :Notes, :Discrepancies, :Batch_1_Mapping, :Mgx_batch_Mapping, :_16S_batch_Mapping, :Mother_Child_Dyads]
byte position of data computed at: 481
column options generated as: 
computed types are: Type[Union{}, Union{}, Union{}, Union{}, Union{}, Union{}, Union{}, Union{}, Union{}, Union{}, Union{}, Union{}, Union{}, Union{}, Union{}, Union{}, Union{}, Union{}, Union{}, Union{}, Union{}, Union{}, Union{}, Union{}, Union{}, Union{}, Union{}, Union{}, Union{}, Union{}, Union{}, Union{}, Union{}, Union{}, Union{}, Union{}, Union{}, Union{}, Union{}]
initial byte positions before adjusting for start of rows: [481, 101091, 201701]
single-threaded estimated rows = 756, multi-threaded estimated rows = 754
multi-threaded column types sampled as: Type[Union{}, Union{}, Int64, Union{}, Int64, Union{}, Int64, Date, Union{}, Date, Union{}, Union{}, Union{}, Date, Union{}, Date, Union{}, Union{}, Union{}, Date, Union{}, Union{}, Union{}, Union{}, Union{}, Union{}, Date, Union{}, Union{}, Date, Union{}, Union{}, Union{}, Union{}, Union{}, Union{}, Union{}, Union{}, Int64]
parsing using 2 tasks: 377 rows chunked at positions: [481, 101105, 201701]
promoting col = 1 to string from Vector{UInt32} on chunk = 2
promoting col = 4 to string from Vector{UInt32} on chunk = 2
promoting col = 21 to string from Vector{UInt32} on chunk = 2
promoting col = 34 to string from Vector{UInt32} on chunk = 2
thread = 2 warning: didn't pre-allocate enough column while parsing around row 755, re-allocating from 377 to 628...
promoting col = 1 to string from Vector{UInt32} on chunk = 1
promoting col = 4 to string from Vector{UInt32} on chunk = 1
promoting col = 21 to string from Vector{UInt32} on chunk = 1
promoting col = 36 to string from Vector{UInt32} on chunk = 1
thread = 1 warning: didn't pre-allocate enough column while parsing around row 378, re-allocating from 377 to 467...
thread = 2 warning: only found 38 / 39 columns around data row: 1001. Filling remaining columns with `missing`
promoting col = 1 from Union{} to String, task chunk (1) was type = String
promoting col = 2 from Union{} to PooledString, task chunk (1) was type = PooledString
promoting col = 4 from Union{} to String, task chunk (1) was type = String
promoting col = 6 from Union{} to PooledString, task chunk (1) was type = PooledString
promoting col = 9 from Union{} to Union{Missing, PooledString}, task chunk (1) was type = Union{Missing, PooledString}
promoting col = 10 from Date to Union{Missing, Date}, task chunk (1) was type = Union{Missing, Date}
promoting col = 11 from Union{} to Union{Missing, PooledString}, task chunk (1) was type = Union{Missing, PooledString}
promoting col = 12 from Union{} to Union{Missing, Date}, task chunk (1) was type = Union{Missing, Date}
promoting col = 15 from Union{} to PooledString, task chunk (1) was type = PooledString
promoting col = 13 from Union{} to Union{Missing, PooledString}, task chunk (2) was type = Union{Missing, PooledString}
promoting col = 16 from Date to Union{Missing, Date}, task chunk (1) was type = Union{Missing, Date}
promoting col = 17 from Union{} to Union{Missing, PooledString}, task chunk (1) was type = Union{Missing, PooledString}
promoting col = 14 from Date to Union{Missing, Date}, task chunk (2) was type = Union{Missing, Date}
promoting col = 18 from Union{} to Union{Missing, PooledString}, task chunk (1) was type = Union{Missing, PooledString}
promoting col = 15 from PooledString to Union{Missing, PooledString}, task chunk (2) was type = Union{Missing, PooledString}
promoting col = 19 from Union{} to Union{Missing, PooledString}, task chunk (1) was type = Union{Missing, PooledString}
promoting col = 20 from Date to Union{Missing, Date}, task chunk (1) was type = Union{Missing, Date}
promoting col = 21 from Union{} to Union{Missing, String}, task chunk (1) was type = Union{Missing, String}
promoting col = 22 from Union{} to Union{Missing, PooledString}, task chunk (1) was type = Union{Missing, PooledString}
promoting col = 23 from Union{} to Union{Missing, PooledString}, task chunk (1) was type = Union{Missing, PooledString}
promoting col = 24 from Union{} to Union{Missing, PooledString}, task chunk (1) was type = Union{Missing, PooledString}
promoting col = 25 from Union{} to Union{Missing, PooledString}, task chunk (1) was type = Union{Missing, PooledString}
promoting col = 26 from Union{} to Union{Missing, Float64}, task chunk (1) was type = Union{Missing, Float64}
promoting col = 27 from Date to Union{Missing, Date}, task chunk (1) was type = Union{Missing, Date}
promoting col = 28 from Union{} to Union{Missing, PooledString}, task chunk (1) was type = Union{Missing, PooledString}
promoting col = 29 from Union{} to Union{Missing, PooledString}, task chunk (1) was type = Union{Missing, PooledString}
promoting col = 30 from Date to Union{Missing, Date}, task chunk (1) was type = Union{Missing, Date}
promoting col = 31 from Union{} to Union{Missing, PooledString}, task chunk (1) was type = Union{Missing, PooledString}
promoting col = 32 from Union{} to Union{Missing, PooledString}, task chunk (1) was type = Union{Missing, PooledString}
promoting col = 33 from Union{} to Union{Missing, PooledString}, task chunk (1) was type = Union{Missing, PooledString}
promoting col = 34 from Union{} to Union{Missing, PooledString}, task chunk (1) was type = Union{Missing, PooledString}
promoting col = 35 from Union{} to Union{Missing, PooledString}, task chunk (1) was type = Union{Missing, PooledString}
promoting col = 36 from Union{} to Union{Missing, String}, task chunk (1) was type = Union{Missing, String}
promoting col = 34 from Union{Missing, PooledString} to Union{Missing, String}, task chunk (2) was type = Union{Missing, String}
promoting col = 37 from Union{} to Union{Missing, PooledString}, task chunk (1) was type = Union{Missing, PooledString}
promoting col = 38 from Union{} to Union{Missing, PooledString}, task chunk (1) was type = Union{Missing, PooledString}
promoting col = 39 from Int64 to Union{Missing, Int64}, task chunk (1) was type = Union{Missing, Int64}
finished parsing 456 rows on task = 1: time for parsing: 0.9359297752380371
finished parsing 623 rows on task = 2: time for parsing: 0.9413840770721436
multithreaded promoting column 36 to string from MissingVector
multithreaded promoting column 35 from missing on task 2
multithreaded promoting column 13 from missing on task 1
thread = 1 warning: only found 38 / 39 columns around data row: 623. Filling remaining columns with `missing`
multithreaded promoting column 34 to string from Vector{UInt32}
multithreaded promoting column 26 from missing on task 2
types after parsing: Type[String, PooledString, Int64, String, Int64, PooledString, Int64, Date, Union{Missing, PooledString}, Union{Missing, Date}, Union{Missing, PooledString}, Union{Missing, Date}, Union{Missing, PooledString}, Union{Missing, Date}, Union{Missing, PooledString}, Union{Missing, Date}, Union{Missing, PooledString}, Union{Missing, PooledString}, Union{Missing, PooledString}, Union{Missing, Date}, Union{Missing, String}, Union{Missing, PooledString}, Union{Missing, PooledString}, Union{Missing, PooledString}, Union{Missing, PooledString}, Union{Missing, Float64}, Union{Missing, Date}, Union{Missing, PooledString}, Union{Missing, PooledString}, Union{Missing, Date}, Union{Missing, PooledString}, Union{Missing, PooledString}, Union{Missing, PooledString}, Union{Missing, String}, Union{Missing, PooledString}, Union{Missing, String}, Union{Missing, PooledString}, Union{Missing, PooledString}, Union{Missing, Int64}], pool = 0.1
header is: 1, datarow computed as: 2
headerpos = 4, datapos = 481
estimated rows: 756
detected delimiter: ","
column names detected: [:SampleID, :Mother_Child, :SubjectID, :MaternalID, :TimePoint, :Fecal_EtOH, :CollectionRep, :DOC, :RAInitials_DOC, :DOF, :RAInitials_DOF, :Date_Brought_In, :RAInitials_Brought, :Date_Shipped, :RAInitials_Shipped, :Date_Aliquoted, :Number_Replicates, :RAInitials_Aliquot, :StorageBox, :DOE, :Extract_number, :AliquotRep, :DNABox, :KitUsed, :RAInitials_Extract, :DNAConc, :DOM, :Mgx_processed, :Mgx_batch, :DO16S, :_16S_processed, :_16S_batch, :_16S_plate, :Notes, :Discrepancies, :Batch_1_Mapping, :Mgx_batch_Mapping, :_16S_batch_Mapping, :Mother_Child_Dyads]
byte position of data computed at: 481
column options generated as: 
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 2)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 6)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 9)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 11)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 13)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 15)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 17)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 18)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 19)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 22)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 23)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 24)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 25)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 28)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 29)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 31)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 32)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 33)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 35)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 37)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 38)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
computed types are: Type[String, String, Int64, String, Int64, String, Int64, Date, Union{Missing, String}, Union{Missing, Date}, Union{Missing, String}, Union{Missing, Date}, Union{Missing, String}, Union{Missing, Date}, Union{Missing, String}, Union{Missing, Date}, Union{Missing, String}, Union{Missing, String}, Union{Missing, String}, Union{Missing, Date}, Union{Missing, String}, Union{Missing, String}, Union{Missing, String}, Union{Missing, String}, Union{Missing, String}, Union{Missing, Float64}, Union{Missing, Date}, Union{Missing, String}, Union{Missing, String}, Union{Missing, Date}, Union{Missing, String}, Union{Missing, String}, Union{Missing, String}, Union{Missing, String}, Union{Missing, String}, Union{Missing, String}, Union{Missing, String}, Union{Missing, String}, Union{Missing, Int64}]
thread = 1 warning: only found 38 / 39 columns around data row: 1080. Filling remaining columns with `missing`
testing time.csv
testing escaped_pooled.csv
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 1)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 1)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
testing error_comment.txt
testing test_508.csv
testing bug555.txt
testing csv_segfault.txt
thread = 1 warning: only found 4 / 9 columns around data row: 5. Filling remaining columns with `missing`
thread = 1 warning: only found 4 / 9 columns around data row: 467. Filling remaining columns with `missing`
thread = 1 warning: only found 1 / 9 columns around data row: 468. Filling remaining columns with `missing`
thread = 1 warning: only found 4 / 9 columns around data row: 469. Filling remaining columns with `missing`
thread = 1 warning: only found 4 / 9 columns around data row: 5. Filling remaining columns with `missing`
thread = 1 warning: only found 4 / 9 columns around data row: 467. Filling remaining columns with `missing`
thread = 1 warning: only found 1 / 9 columns around data row: 468. Filling remaining columns with `missing`
thread = 1 warning: only found 4 / 9 columns around data row: 469. Filling remaining columns with `missing`
thread = 1 warning: only found 4 / 9 columns around data row: 5. Filling remaining columns with `missing`
thread = 1 warning: only found 4 / 9 columns around data row: 467. Filling remaining columns with `missing`
thread = 1 warning: only found 1 / 9 columns around data row: 468. Filling remaining columns with `missing`
thread = 1 warning: only found 4 / 9 columns around data row: 469. Filling remaining columns with `missing`
testing types_override.csv
testing select.csv
thread = 1 warning: only found 16 / 17 columns around data row: 1486. Filling remaining columns with `missing`
thread = 1 warning: only found 16 / 17 columns around data row: 1541. Filling remaining columns with `missing`
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 10)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
thread = 1 warning: only found 16 / 17 columns around data row: 1486. Filling remaining columns with `missing`
testing ampm.csv
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 2)
└ @ CSV ~/.julia/packages/CSV/MKemC/src/header.jl:226
testing test_basic.csv
thread = 1 warning: only found 3 / 5 columns around data row: 2. Filling remaining columns with `missing`
thread = 1 warning: only found 3 / 5 columns around data row: 3. Filling remaining columns with `missing`
thread = 1 warning: only found 4 / 5 columns around data row: 3. Filling remaining columns with `missing`
CSV.write: Test Failed at /home/pkgeval/.julia/packages/CSV/MKemC/test/write.jl:321
  Expression: CSV.write("out.test.csv", [(a = s,)])
    Expected: ArgumentError
      Thrown: SystemError
Stacktrace:
 [1] top-level scope
   @ ~/.julia/packages/CSV/MKemC/test/write.jl:321
 [2] top-level scope
   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
 [3] top-level scope
   @ ~/.julia/packages/CSV/MKemC/test/write.jl:24
CSV.Rows("<IOBuffer>"):
Size: 1
Tables.Schema:
 :X  Union{Missing, String}thread = 1 warning: only found 1 / 3 columns around data row: 2. Filling remaining columns with `missing`
thread = 1 warning: only found 2 / 3 columns around data row: 3. Filling remaining columns with `missing`
thread = 1 warning: parsed expected 3 columns, but didn't reach end of line around data row: 3. Ignoring any extra columns on this row
Test Summary:                                  | Pass  Fail  Total
CSV                                            | 1817     1   1818
  CSV.File                                     | 1610         1610
  CSV.write                                    |   88     1     89
  CategoricalArray levels (including ordering) |    9            9
  PooledArrays                                 |   14           14
  LazyStringVector                             |    7            7
  CSV.Rows                                     |   37           37
  CSV.detect                                   |    8            8
  CSV.findrowstarts!                           |    4            4
  CSV.promote_typecode                         |    2            2
  CSV.File with select/drop                    |   38           38
ERROR: LoadError: Some tests did not pass: 1817 passed, 1 failed, 0 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/CSV/MKemC/test/runtests.jl:13
ERROR: Package CSV errored during testing
Stacktrace:
  [1] pkgerror(::String, ::Vararg{String,N} where N)
    @ Pkg.Types /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
  [2] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing)
    @ Pkg.Operations /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1567
  [3] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:328
  [4] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec})
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:315
  [5] #test#62
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [6] test
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [7] #test#61
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [8] test
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [9] test(pkg::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [10] test(pkg::String)
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [11] top-level scope
    @ none:16
