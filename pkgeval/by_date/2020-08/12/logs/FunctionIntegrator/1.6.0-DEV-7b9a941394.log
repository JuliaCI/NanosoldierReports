Julia Version 1.6.0-DEV.629
Commit 7b9a941394 (2020-08-12 17:08 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed FastGaussQuadrature ────────── v0.4.2
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed FunctionIntegrator ─────────── v0.5.1
  Installed SpecialFunctions ───────────── v0.10.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [7685536e] + FunctionIntegrator v0.5.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [442a2c76] + FastGaussQuadrature v0.4.2
  [7685536e] + FunctionIntegrator v0.5.1
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [276daf66] + SpecialFunctions v0.10.3
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing FunctionIntegrator
Status `/tmp/jl_auGDb2/Project.toml`
  [442a2c76] FastGaussQuadrature v0.4.2
  [7685536e] FunctionIntegrator v0.5.1
  [276daf66] SpecialFunctions v0.10.3
  [8dfed614] Test
Status `/tmp/jl_auGDb2/Manifest.toml`
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [442a2c76] FastGaussQuadrature v0.4.2
  [7685536e] FunctionIntegrator v0.5.1
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [276daf66] SpecialFunctions v0.10.3
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Performing the Airy Ai(x) test, where Ai(x) is integrated on the semi-infinite domain, or an approximation of it, namely [0,100] and the result is compared to the analytical result 1/3.
Running: adaptive_simpsons_rule
  0.986573 seconds (1.34 M allocations: 70.833 MiB, 14.63% gc time)
Running: chebyshev_quadrature with k=1
  1.725421 seconds (2.24 M allocations: 128.682 MiB, 2.90% gc time)
Running: chebyshev_quadrature with k=2
  0.255794 seconds (425.05 k allocations: 24.380 MiB)
Running: chebyshev_quadrature with k=3
  0.267385 seconds (544.93 k allocations: 29.877 MiB, 4.26% gc time)
Running: chebyshev_quadrature with k=4
  0.239933 seconds (487.80 k allocations: 26.422 MiB)
Running: jacobi_quadrature with α=β=1
 38.513916 seconds (39.38 M allocations: 3.138 GiB, 10.38% gc time)
Running: laguerre_quadrature with k=1
  2.887476 seconds (3.33 M allocations: 185.643 MiB, 7.80% gc time)
Running: legendre_quadrature
  0.139565 seconds (215.20 k allocations: 12.393 MiB)
Running: lobatto_quadrature
  0.239754 seconds (343.80 k allocations: 20.593 MiB)
Running: radau_quadrature
  0.220786 seconds (326.13 k allocations: 19.597 MiB, 10.45% gc time)
Running: rectangle_rule_left. Only a rough approximation can be practically achieved using this function.
 72.108100 seconds (100.02 M allocations: 1.491 GiB, 0.31% gc time)
Running: rectangle_rule_midpoint.
  0.089775 seconds (173.73 k allocations: 3.887 MiB)
Running: rectangle_rule_right. Only a rough approximation can be practically achieved using this function.
 71.170402 seconds (100.02 M allocations: 1.491 GiB, 0.28% gc time)
Running: rombergs_method
  0.427288 seconds (752.85 k allocations: 43.324 MiB, 7.45% gc time)
Running: simpsons_rule
  0.038060 seconds (47.35 k allocations: 2.120 MiB)
Running: simpsons38_rule
  0.099081 seconds (113.25 k allocations: 5.983 MiB)
Running: trapezoidal_rule
  0.292007 seconds (1.52 M allocations: 25.806 MiB)
Test Summary: | Pass  Total
Airy Ai(x)    |   17     17
Performing the besselj test, where BesselJ_1(2) is approximated and the result is compared to the value obtained from SpecialFunctions' besselj function.
Running: adaptive_simpsons_rule with ε=1e-7
  0.085654 seconds (32.63 k allocations: 1.943 MiB)
Running: chebyshev_quadrature with k=1
  0.406474 seconds (275.96 k allocations: 13.996 MiB, 6.50% gc time)
Running: chebyshev_quadrature with k=2
  0.133887 seconds (115.72 k allocations: 3.793 MiB)
Running: chebyshev_quadrature with k=3
  0.131607 seconds (105.07 k allocations: 3.639 MiB)
Running: chebyshev_quadrature with k=4
  0.138047 seconds (87.68 k allocations: 3.285 MiB)
Running: jacobi_quadrature with α=β=1
  1.690262 seconds (536.27 k allocations: 163.510 MiB, 13.62% gc time)
Running: legendre_quadrature
  0.151699 seconds (62.39 k allocations: 3.481 MiB)
Running: lobatto_quadrature
  0.020752 seconds (16.87 k allocations: 1.041 MiB)
Running: radau_quadrature
  0.020749 seconds (16.85 k allocations: 1.041 MiB)
Running: rectangle_rule_left
 25.267348 seconds (471.41 M allocations: 7.025 GiB, 3.05% gc time)
Running: rectangle_rule_midpoint
  0.000033 seconds (45 allocations: 1.047 KiB)
Running: rectangle_rule_right
 25.615782 seconds (476.96 M allocations: 7.107 GiB, 2.08% gc time)
Running: rombergs_method
  0.367285 seconds (360.37 k allocations: 20.321 MiB, 1.06% gc time)
Running: simpsons_rule
  0.000028 seconds (85 allocations: 1.672 KiB)
Running: simpsons38_rule
  0.057693 seconds (19.90 k allocations: 1.194 MiB)
Running: trapezoidal_rule
  0.054993 seconds (18.35 k allocations: 1.099 MiB)
Test Summary: | Pass  Total
besselj       |   16     16
Integrating cos^2(x)/(1+cot(x)) from 0 to pi/2 and comparing the results to the analytical result 0.25.
Running: adaptive_simpsons_rule with ε=1e-7
  0.028097 seconds (1.99 k allocations: 53.594 KiB)
Running: chebyshev_quadrature with k=1
  0.099014 seconds (2.40 k allocations: 113.453 KiB)
Running: chebyshev_quadrature with k=2
  0.103916 seconds (2.65 k allocations: 121.469 KiB)
Running: chebyshev_quadrature with k=3
  0.111784 seconds (3.08 k allocations: 133.688 KiB)
Running: chebyshev_quadrature with k=4
  0.103561 seconds (3.08 k allocations: 133.750 KiB)
Running: jacobi_quadrature with α=β=1
  0.278001 seconds (379.01 k allocations: 19.794 MiB, 10.41% gc time)
Running: legendre_quadrature
  0.047998 seconds (1.24 k allocations: 63.609 KiB)
Running: lobatto_quadrature
  0.000103 seconds (67 allocations: 2.844 KiB)
Running: radau_quadrature
  0.000040 seconds (71 allocations: 3.078 KiB)
Running: rectangle_rule_left
  0.000509 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_midpoint
  0.000358 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right
  0.000507 seconds (9 allocations: 496 bytes)
Running: rombergs_method
  0.067016 seconds (1.01 k allocations: 54.109 KiB)
Running: simpsons_rule
  0.000037 seconds (323 allocations: 5.391 KiB)
Running: simpsons38_rule
  0.019434 seconds (923 allocations: 39.281 KiB)
Running: trapezoidal_rule
  0.014004 seconds (44.33 k allocations: 704.859 KiB)
Test Summary: | Pass  Total
coscotint     |   16     16
Integrating cosine from 0 to pi/2 and comparing the result to the analytical result of 1.
Running: adaptive_simpsons_rule
  0.060142 seconds (75.84 k allocations: 4.401 MiB)
Running: chebyshev_quadrature with k=1
  0.148439 seconds (240.25 k allocations: 13.487 MiB)
Running: chebyshev_quadrature with k=2
  0.224708 seconds (295.45 k allocations: 16.594 MiB, 11.65% gc time)
Running: chebyshev_quadrature with k=3
  0.153820 seconds (275.41 k allocations: 14.982 MiB)
Running: chebyshev_quadrature with k=4
  0.206263 seconds (275.44 k allocations: 14.879 MiB)
Running: jacobi_quadrature with α=β=1
  2.065380 seconds (465.77 k allocations: 164.243 MiB, 9.17% gc time)
Running: legendre_quadrature
  0.162730 seconds (193.00 k allocations: 11.107 MiB)
Running: lobatto_quadrature
  0.200327 seconds (204.21 k allocations: 11.826 MiB, 16.80% gc time)
Running: radau_quadrature
  0.165270 seconds (204.21 k allocations: 11.815 MiB)
Running: rectangle_rule_left
  1.042914 seconds (19.76 k allocations: 1.194 MiB)
Running: rectangle_rule_midpoint
  0.027230 seconds (25.93 k allocations: 1.615 MiB)
Running: rectangle_rule_right
  1.125481 seconds (18.27 k allocations: 1.105 MiB)
Running: rombergs_method
  0.121689 seconds (139.91 k allocations: 8.059 MiB)
Running: simpsons_rule
  0.031392 seconds (29.02 k allocations: 1.803 MiB)
Running: simpsons38_rule
  0.037383 seconds (44.65 k allocations: 2.787 MiB)
Running: trapezoidal_rule
  0.028338 seconds (45.20 k allocations: 1.824 MiB)
Test Summary: | Pass  Total
Cosine        |   16     16
Integrating e^(-x^2)/(1+x^2) on the infinite domain [-inf, inf], or failing that on [-100,100], and comparing it to the analytical result exp(1)*pi*erfc(1)
Running: adaptive_simpsons_rule with ε=1e-7
  0.042967 seconds (101.41 k allocations: 3.075 MiB)
Running: chebyshev_quadrature with k=1
  0.211222 seconds (247.35 k allocations: 13.596 MiB, 9.06% gc time)
Running: chebyshev_quadrature with k=2
  0.211896 seconds (303.07 k allocations: 16.573 MiB)
Running: chebyshev_quadrature with k=3
  0.171440 seconds (282.82 k allocations: 15.068 MiB)
Running: chebyshev_quadrature with k=4
  0.298628 seconds (282.85 k allocations: 15.010 MiB, 4.89% gc time)
Running: hermite_quadrature with k=2
 14.137811 seconds (22.12 M allocations: 1.147 GiB, 9.50% gc time)
Running: jacobi_quadrature with α=β=1
  0.561833 seconds (475.81 k allocations: 50.449 MiB, 26.40% gc time)
Running: laguerre_quadrature with k=1 and multiplying the result by 2 (as Laguerre is only on the semi-infinite domain)
  0.214240 seconds (288.35 k allocations: 15.898 MiB)
Running: legendre_quadrature
  0.162128 seconds (200.06 k allocations: 11.455 MiB)
Running: lobatto_quadrature
  0.274164 seconds (225.72 k allocations: 37.628 MiB, 8.59% gc time)
Running: radau_quadrature
  0.228618 seconds (222.31 k allocations: 30.290 MiB, 7.14% gc time)
Running: rectangle_rule_left
  0.029644 seconds (22.91 k allocations: 1.353 MiB)
Running: rectangle_rule_midpoint
  0.027732 seconds (27.88 k allocations: 1.711 MiB)
Running: rectangle_rule_right
  0.025750 seconds (19.48 k allocations: 1.166 MiB)
Running: rombergs_method
  0.116917 seconds (142.73 k allocations: 8.122 MiB)
Running: simpsons_rule
  0.038669 seconds (41.25 k allocations: 2.157 MiB)
Running: simpsons38_rule
  0.040767 seconds (60.02 k allocations: 3.196 MiB)
Running: trapezoidal_rule
  0.031238 seconds (31.57 k allocations: 1.770 MiB)
Test Summary: | Pass  Total
expnx2datan   |   18     18
Integrate exp(-x^2) from minus infinity to positive infinity and comparing the result to the analytical solution, sqrt(pi)
Running: adaptive_simpsons_rule with ε=1e-7
  0.041800 seconds (61.51 k allocations: 2.360 MiB)
Running: chebyshev_quadrature with k=1
  0.209410 seconds (242.48 k allocations: 13.352 MiB, 8.15% gc time)
Running: chebyshev_quadrature with k=2
  0.225324 seconds (297.80 k allocations: 16.314 MiB)
Running: chebyshev_quadrature with k=3
  0.214707 seconds (277.68 k allocations: 14.777 MiB)
Running: chebyshev_quadrature with k=4
  0.223008 seconds (277.71 k allocations: 14.784 MiB, 8.04% gc time)
Running: hermite_quadrature with k=2
  0.142721 seconds (177.71 k allocations: 10.161 MiB)
Running: jacobi_quadrature with α=β=1
  8.817840 seconds (468.37 k allocations: 1.176 GiB, 11.67% gc time)
Running: laguerre_quadrature (results multiplied by 2, as laguerre only integrates over the semi-infinite domain)
  0.147055 seconds (283.21 k allocations: 15.693 MiB)
Running: legendre_quadrature
  0.098426 seconds (195.23 k allocations: 11.220 MiB)
Running: lobatto_quadrature
  0.144362 seconds (216.08 k allocations: 23.332 MiB, 8.00% gc time)
Running: radau_quadrature
  0.144082 seconds (215.23 k allocations: 21.262 MiB)
Running: rectangle_rule_left
  0.018636 seconds (20.47 k allocations: 1.235 MiB)
Running: rectangle_rule_midpoint
  0.021012 seconds (26.65 k allocations: 1.653 MiB)
Running: rectangle_rule_right
  0.018285 seconds (18.24 k allocations: 1.106 MiB)
Running: rombergs_method
  0.080130 seconds (138.20 k allocations: 7.925 MiB)
Running: simpsons_rule
  0.034747 seconds (33.49 k allocations: 1.931 MiB, 36.40% gc time)
Running: simpsons38_rule
  0.029251 seconds (50.55 k allocations: 2.939 MiB)
Running: trapezoidal_rule
  0.027561 seconds (26.25 k allocations: 1.593 MiB)
Test Summary: | Pass  Total
Gaussian      |   18     18
Integrating 1/x from 1 to e and comparing the result to the analytical solution, 1.
Running: adaptive_simpsons_rule with ε=1e-7
  0.033923 seconds (32.48 k allocations: 1.957 MiB)
Running: chebyshev_quadrature with k=1
  0.224022 seconds (240.81 k allocations: 13.568 MiB)
Running: chebyshev_quadrature with k=2
  0.238034 seconds (296.03 k allocations: 16.652 MiB)
Running: chebyshev_quadrature with k=3
  0.211415 seconds (276.01 k allocations: 14.981 MiB, 8.45% gc time)
Running: chebyshev_quadrature with k=4
  0.191453 seconds (276.04 k allocations: 14.813 MiB)
Running: jacobi_quadrature with α=β=1
  2.992937 seconds (466.42 k allocations: 195.253 MiB, 3.19% gc time)
Running: legendre_quadrature
  0.150700 seconds (193.56 k allocations: 11.134 MiB)
Running: lobatto_quadrature
  0.182028 seconds (204.78 k allocations: 11.932 MiB)
Running: radau_quadrature
  0.180951 seconds (204.78 k allocations: 11.846 MiB)
Running: rectangle_rule_left
  0.331520 seconds (20.33 k allocations: 1.222 MiB)
Running: rectangle_rule_midpoint
  0.026368 seconds (26.30 k allocations: 1.635 MiB)
Running: rectangle_rule_right
  0.112811 seconds (18.64 k allocations: 1.125 MiB)
Running: rombergs_method
  0.155695 seconds (151.28 k allocations: 8.811 MiB, 14.07% gc time)
Running: simpsons_rule
  0.033839 seconds (29.77 k allocations: 1.835 MiB)
Running: simpsons38_rule
  0.036823 seconds (45.42 k allocations: 2.821 MiB)
Running: trapezoidal_rule
  0.026256 seconds (46.19 k allocations: 1.861 MiB)
Test Summary: | Pass  Total
1/x           |   16     16
Integrating log(x)/x from 1 to e and comparing the result to the analytical solution of 0.5.
Running: adaptive_simpsons_rule with ε=1e-7
  0.033840 seconds (33.23 k allocations: 1.905 MiB)
Running: chebyshev_quadrature with k=1
  0.154324 seconds (241.38 k allocations: 13.511 MiB)
Running: chebyshev_quadrature with k=2
  0.229197 seconds (296.64 k allocations: 16.628 MiB, 9.25% gc time)
Running: chebyshev_quadrature with k=3
  0.218419 seconds (276.54 k allocations: 14.902 MiB)
Running: chebyshev_quadrature with k=4
  0.203265 seconds (276.58 k allocations: 14.982 MiB)
Running: jacobi_quadrature with α=β=1
  1.659030 seconds (467.08 k allocations: 149.920 MiB, 6.96% gc time)
Running: legendre_quadrature
  0.154874 seconds (194.13 k allocations: 11.150 MiB)
Running: lobatto_quadrature
  0.180608 seconds (205.36 k allocations: 11.860 MiB)
Running: radau_quadrature
  0.135717 seconds (205.35 k allocations: 11.920 MiB)
Running: rectangle_rule_left
  1.039590 seconds (20.60 k allocations: 1.236 MiB)
Running: rectangle_rule_midpoint
  0.026679 seconds (26.29 k allocations: 1.635 MiB)
Running: rectangle_rule_right
  1.110308 seconds (18.61 k allocations: 1.124 MiB, 1.77% gc time)
Running: rombergs_method
  0.133435 seconds (141.21 k allocations: 8.136 MiB)
Running: simpsons_rule
  0.034667 seconds (30.52 k allocations: 1.863 MiB)
Running: simpsons38_rule
  0.038722 seconds (46.17 k allocations: 2.850 MiB)
Running: trapezoidal_rule
  0.029792 seconds (58.45 k allocations: 2.062 MiB)
Test Summary: | Pass  Total
log(x)/x      |   16     16
Approximating the modified bessel function I_1(1) and comparing it to the result obtained by SpecialFunctions.
Running: adaptive_simpsons_rule with ε=1e-7
  0.152084 seconds (152.85 k allocations: 9.083 MiB)
Running: chebyshev_quadrature with k=1
  0.139119 seconds (91.24 k allocations: 3.295 MiB)
Running: chebyshev_quadrature with k=2
  0.151196 seconds (127.01 k allocations: 3.988 MiB)
Running: chebyshev_quadrature with k=3
  0.153110 seconds (115.58 k allocations: 3.818 MiB)
Running: chebyshev_quadrature with k=4
  0.162557 seconds (95.11 k allocations: 3.411 MiB)
Running: jacobi_quadrature with α=β=1
  3.830025 seconds (509.83 k allocations: 169.309 MiB, 12.83% gc time)
Running: legendre_quadrature
  0.095391 seconds (38.34 k allocations: 2.105 MiB)
Running: lobatto_quadrature
  0.000124 seconds (150 allocations: 4.328 KiB)
Running: radau_quadrature
  0.000050 seconds (148 allocations: 4.375 KiB)
Running: rectangle_rule_left
 40.380764 seconds (590.00 M allocations: 8.792 GiB, 2.47% gc time)
Running: rectangle_rule_midpoint
  0.000015 seconds (40 allocations: 992 bytes)
Running: rectangle_rule_right
 40.222516 seconds (592.75 M allocations: 8.833 GiB, 2.47% gc time)
Running: rombergs_method
  0.105173 seconds (41.89 k allocations: 2.258 MiB)
Running: simpsons_rule
  0.000042 seconds (93 allocations: 1.797 KiB)
Running: simpsons38_rule
  0.019118 seconds (463 allocations: 22.578 KiB)
Running: trapezoidal_rule
  0.014495 seconds (179 allocations: 8.766 KiB)
Test Summary: | Pass  Total
modbessel0    |   16     16
Integrating 1/sqrt(-19.6 sin(x)) from -pi to 0 and comparing the result to the analytical solution of ellipk(1/2)/sqrt(2.45) The integrand has singularities at x = -pi and x=0, so for some of these functions the integration domain has to be itself approximated.
Running: adaptive_simpsons_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 30.025379 seconds (629.34 M allocations: 9.388 GiB, 3.60% gc time)
Running: chebyshev_quadrature with k=1
  0.487066 seconds (439.28 k allocations: 24.335 MiB, 2.28% gc time)
Running: chebyshev_quadrature with k=2
 12.116905 seconds (496.65 k allocations: 4.042 GiB, 4.16% gc time)
Running: chebyshev_quadrature with k=3
  5.670987 seconds (290.50 k allocations: 1.643 GiB, 4.66% gc time)
Running: chebyshev_quadrature with k=4
  7.259669 seconds (290.53 k allocations: 2.262 GiB, 2.97% gc time)
Running: jacobi_quadrature with α=β=1. The N value required to get an accurate result is too high to be practical, so only a rough approximation can be arrived at.
 48.959103 seconds (505.37 k allocations: 13.255 GiB, 4.03% gc time)
Running: legendre_quadrature.
  5.102959 seconds (232.97 k allocations: 1.976 GiB, 2.26% gc time)
The following integration functions have to use an approximated domain due to the endpoint singularities.
Running: lobatto_quadrature on [-pi+1e-6, -1e-6]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 44.700352 seconds (8.24 M allocations: 13.384 GiB, 5.38% gc time)
Running: radau_quadrature on [-pi+1e-6, -1e-6]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 47.658838 seconds (7.24 M allocations: 13.369 GiB, 3.96% gc time)
Running: rectangle_rule_left on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  2.808730 seconds (23.35 k allocations: 1.402 MiB)
Running: rectangle_rule_midpoint on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  2.909512 seconds (31.97 k allocations: 1.959 MiB)
Running: rectangle_rule_right on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  2.944979 seconds (23.57 k allocations: 1.413 MiB)
Running: rombergs_method on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  1.161062 seconds (456.74 k allocations: 153.707 MiB)
Running: simpsons_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 36.070541 seconds (600.04 M allocations: 8.943 GiB, 8.88% gc time)
Running: simpsons38_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 37.890215 seconds (600.05 M allocations: 8.944 GiB, 8.22% gc time)
Running: trapezoidal_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 35.104472 seconds (600.04 M allocations: 8.943 GiB, 9.05% gc time)
Test Summary: | Pass  Total
Simppen       |   16     16
Integrating sin(x^2)e^(-x)/x from 0 to infinity, with the approximated domain of integration of 0 to 100. The removable singularity at x=0 in the integrand has been removed.
Running: adaptive_simpsons_rule with ε=1e-8
  0.063916 seconds (182.51 k allocations: 4.517 MiB)
Running: chebyshev_quadrature with k=1
  0.212396 seconds (257.97 k allocations: 14.018 MiB)
Running: chebyshev_quadrature with k=2
  0.211738 seconds (284.13 k allocations: 15.178 MiB)
Running: chebyshev_quadrature with k=3
  0.205568 seconds (260.62 k allocations: 13.456 MiB)
Running: chebyshev_quadrature with k=4
  0.210469 seconds (260.65 k allocations: 13.452 MiB)
Running: jacobi_quadrature with α=β=1
  0.373748 seconds (405.38 k allocations: 35.879 MiB)
Running: laguerre_quadrature with k=2
  0.205644 seconds (187.97 k allocations: 10.871 MiB)
Running: legendre_quadrature
  0.123949 seconds (151.74 k allocations: 8.407 MiB)
Running: lobatto_quadrature
  0.037015 seconds (10.88 k allocations: 15.109 MiB)
Running: radau_quadrature
  0.033513 seconds (9.66 k allocations: 13.183 MiB)
Running: rectangle_rule_left
  0.061757 seconds (19.81 k allocations: 1.170 MiB)
Running: rectangle_rule_midpoint
  0.052132 seconds (26.77 k allocations: 1.640 MiB)
Running: rectangle_rule_right
  0.056274 seconds (18.36 k allocations: 1.094 MiB)
Running: rombergs_method
  0.262906 seconds (171.22 k allocations: 9.745 MiB)
Running: simpsons_rule
  0.002041 seconds (24.72 k allocations: 386.656 KiB)
Running: simpsons38_rule
  0.049851 seconds (81.45 k allocations: 3.520 MiB)
Running: trapezoidal_rule
  0.181968 seconds (2.39 M allocations: 37.757 MiB)
Test Summary: | Pass  Total
sinexpox      |   17     17
Integrating sin(x)/x from 0 to 100 and comparing it to the exact result.
Running: adaptive_simpsons_rule with ε=1e-8
  0.002040 seconds (30.71 k allocations: 480.250 KiB)
Running: chebyshev_quadrature with k=1
  0.100662 seconds (2.58 k allocations: 1.696 MiB)
Running: chebyshev_quadrature with k=2
  0.106901 seconds (2.84 k allocations: 2.359 MiB)
Running: chebyshev_quadrature with k=3
  0.125596 seconds (3.26 k allocations: 2.060 MiB)
Running: chebyshev_quadrature with k=4
  0.136255 seconds (3.26 k allocations: 1.501 MiB)
Running: jacobi_quadrature with α=β=1
  5.431736 seconds (402.18 k allocations: 906.570 MiB, 4.40% gc time)
Running: legendre_quadrature
  0.064503 seconds (1.33 k allocations: 72.281 KiB)
Running: lobatto_quadrature
  0.000174 seconds (253 allocations: 9.188 KiB)
Running: radau_quadrature
  0.000122 seconds (221 allocations: 8.812 KiB)
Running: rectangle_rule_left; only a rough approximation can be practically achieved using this function
  3.372298 seconds (11 allocations: 528 bytes)
Running: rectangle_rule_midpoint
  0.000419 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right; only a rough approximation can be practically achieved using this function
  3.248609 seconds (11 allocations: 528 bytes)
Running: rombergs_method
  0.069790 seconds (1.16 k allocations: 66.734 KiB)
Running: simpsons_rule
  0.000047 seconds (9 allocations: 496 bytes)
Running: simpsons38_rule
  0.000051 seconds (9 allocations: 496 bytes)
Running: trapezoidal_rule
  0.000876 seconds (9 allocations: 496 bytes)
Test Summary: | Pass  Total
sinxx         |   16     16
Integrating (x^3+1)/(x^4 (x+1)(x^2+1)) from 1 to e and comparing the result to the analytical solution of log(sqrt(2)*exp(1)/(sqrt(exp(2)+1)))+1/2*(exp(-2)-1)+1/3*(1-exp(-3))
Running: adaptive_simpsons_rule with ε=1e-8
  0.000704 seconds (6.34 k allocations: 99.453 KiB)
Running: chebyshev_quadrature with k=1
  0.101148 seconds (2.48 k allocations: 576.609 KiB)
Running: chebyshev_quadrature with k=2
  0.091720 seconds (2.73 k allocations: 777.391 KiB)
Running: chebyshev_quadrature with k=3
  0.108623 seconds (3.15 k allocations: 685.641 KiB)
Running: chebyshev_quadrature with k=4
  0.105294 seconds (3.16 k allocations: 516.203 KiB)
Running: jacobi_quadrature with α=β=1
  2.685610 seconds (388.46 k allocations: 253.809 MiB)
Running: legendre_quadrature
  0.063340 seconds (1.28 k allocations: 65.438 KiB)
Running: lobatto_quadrature
  0.000087 seconds (91 allocations: 3.656 KiB)
Running: radau_quadrature
  0.000049 seconds (81 allocations: 3.453 KiB)
Running: rectangle_rule_left; only a rough approximation can be practically achieved using this function.
 10.822908 seconds (11 allocations: 528 bytes)
Running: rectangle_rule_midpoint
  0.001365 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right; only a rough approximation can be practically achieved using this function.
 10.518274 seconds (11 allocations: 528 bytes)
Running: rombergs_method
  0.074050 seconds (1.18 k allocations: 62.562 KiB)
Running: simpsons_rule
  0.000056 seconds (9 allocations: 496 bytes)
Running: simpsons38_rule
  0.000045 seconds (9 allocations: 496 bytes)
Running: trapezoidal_rule
  0.001662 seconds (9 allocations: 496 bytes)
Test Summary: | Pass  Total
partfrac      |   16     16
    Testing FunctionIntegrator tests passed 
