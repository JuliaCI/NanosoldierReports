Julia Version 1.6.0-DEV.572
Commit 1888e3161c (2020-08-02 15:45 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed CpuId ─────────────── v0.2.2
  Installed UnPack ────────────── v1.0.1
  Installed SIMDPirates ───────── v0.8.21
  Installed VectorizationBase ─── v0.12.30
  Installed OffsetArrays ──────── v1.1.2
  Installed SLEEFPirates ──────── v0.5.5
  Installed DocStringExtensions ─ v0.8.2
  Installed LoopVectorization ─── v0.8.22
Updating `~/.julia/environments/v1.6/Project.toml`
  [bdcacae8] + LoopVectorization v0.8.22
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [adafc99b] + CpuId v0.2.2
  [ffbed154] + DocStringExtensions v0.8.2
  [bdcacae8] + LoopVectorization v0.8.22
  [6fe1bfb0] + OffsetArrays v1.1.2
  [21efa798] + SIMDPirates v0.8.21
  [476501e8] + SLEEFPirates v0.5.5
  [3a884ed6] + UnPack v1.0.1
  [3d5dd08c] + VectorizationBase v0.12.30
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
   Building SLEEFPirates → `~/.julia/packages/SLEEFPirates/jGsib/deps/build.log`
    Testing LoopVectorization
Status `/tmp/jl_VJD0lZ/Project.toml`
  [ffbed154] DocStringExtensions v0.8.2
  [bdcacae8] LoopVectorization v0.8.22
  [6fe1bfb0] OffsetArrays v1.1.2
  [21efa798] SIMDPirates v0.8.21
  [476501e8] SLEEFPirates v0.5.5
  [3a884ed6] UnPack v1.0.1
  [3d5dd08c] VectorizationBase v0.12.30
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [8dfed614] Test
Status `/tmp/jl_VJD0lZ/Manifest.toml`
  [adafc99b] CpuId v0.2.2
  [ffbed154] DocStringExtensions v0.8.2
  [bdcacae8] LoopVectorization v0.8.22
  [6fe1bfb0] OffsetArrays v1.1.2
  [21efa798] SIMDPirates v0.8.21
  [476501e8] SLEEFPirates v0.5.5
  [3a884ed6] UnPack v1.0.1
  [3d5dd08c] VectorizationBase v0.12.30
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
LoopVectorization.REGISTER_COUNT = 32
#= /home/pkgeval/.julia/packages/LoopVectorization/GTVfd/test/printmethods.jl:2 =# @__LINE__() = 2
  5.497600 seconds (2.78 M allocations: 156.094 MiB, 1.33% gc time)
(Float64, #= /home/pkgeval/.julia/packages/LoopVectorization/GTVfd/test/fallback.jl:4 =# @__LINE__()) = (Float64, 4)
 21.962682 seconds (11.78 M allocations: 666.659 MiB, 2.91% gc time)
  0.127310 seconds (75.33 k allocations: 4.583 MiB)
  8.345524 seconds (7.22 M allocations: 409.437 MiB, 2.20% gc time)
  1.783073 seconds (2.17 M allocations: 121.749 MiB, 3.75% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/GTVfd/test/offsetarrays.jl:203 =# @__LINE__()) = (Float32, 203)
r = -1:1
r = -2:2
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/GTVfd/test/offsetarrays.jl:203 =# @__LINE__()) = (Float64, 203)
r = -1:1
r = -2:2
692.377771 seconds (298.92 M allocations: 24.128 GiB, 4.43% gc time)
(Float64, #= /home/pkgeval/.julia/packages/LoopVectorization/GTVfd/test/tensors.jl:51 =# @__LINE__()) = (Float64, 51)
 22.230413 seconds (14.05 M allocations: 818.656 MiB, 2.25% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/GTVfd/test/map.jl:4 =# @__LINE__()) = (Float32, 4)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/GTVfd/test/map.jl:4 =# @__LINE__()) = (Float64, 4)
  7.090713 seconds (7.06 M allocations: 398.842 MiB, 2.69% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/GTVfd/test/filter.jl:4 =# @__LINE__()) = (Float32, 4)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/GTVfd/test/filter.jl:4 =# @__LINE__()) = (Float64, 4)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/GTVfd/test/filter.jl:4 =# @__LINE__()) = (Int32, 4)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/GTVfd/test/filter.jl:4 =# @__LINE__()) = (Int64, 4)
  1.190822 seconds (794.22 k allocations: 46.696 MiB)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/GTVfd/test/mapreduce.jl:19 =# @__LINE__()) = (Int32, 19)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/GTVfd/test/mapreduce.jl:19 =# @__LINE__()) = (Int64, 19)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/GTVfd/test/mapreduce.jl:19 =# @__LINE__()) = (Float32, 19)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/GTVfd/test/mapreduce.jl:19 =# @__LINE__()) = (Float64, 19)
198.897455 seconds (442.06 M allocations: 29.213 GiB, 7.17% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/GTVfd/test/ifelsemasks.jl:321 =# @__LINE__()) = (Float32, 321)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/GTVfd/test/ifelsemasks.jl:321 =# @__LINE__()) = (Float64, 321)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/GTVfd/test/ifelsemasks.jl:321 =# @__LINE__()) = (Int32, 321)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/GTVfd/test/ifelsemasks.jl:321 =# @__LINE__()) = (Int64, 321)
 76.697158 seconds (50.30 M allocations: 2.750 GiB, 4.90% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/GTVfd/test/dot.jl:234 =# @__LINE__()) = (Float32, 234)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/GTVfd/test/dot.jl:234 =# @__LINE__()) = (Float64, 234)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/GTVfd/test/dot.jl:234 =# @__LINE__()) = (Int32, 234)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/GTVfd/test/dot.jl:234 =# @__LINE__()) = (Int64, 234)
 49.886736 seconds (38.99 M allocations: 2.191 GiB, 5.33% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/GTVfd/test/special.jl:339 =# @__LINE__()) = (Float32, 339)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/GTVfd/test/special.jl:339 =# @__LINE__()) = (Float64, 339)
 16.080575 seconds (12.76 M allocations: 687.446 MiB, 3.36% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/GTVfd/test/gemv.jl:211 =# @__LINE__()) = (Float32, 211)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/GTVfd/test/gemv.jl:211 =# @__LINE__()) = (Float64, 211)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/GTVfd/test/gemv.jl:211 =# @__LINE__()) = (Int32, 211)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/GTVfd/test/gemv.jl:211 =# @__LINE__()) = (Int64, 211)
100.601509 seconds (75.91 M allocations: 3.720 GiB, 3.33% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/GTVfd/test/miscellaneous.jl:757 =# @__LINE__()) = (Float32, 757)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/GTVfd/test/miscellaneous.jl:757 =# @__LINE__()) = (Float64, 757)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/GTVfd/test/miscellaneous.jl:1030 =# @__LINE__()) = (Float32, 1030)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/GTVfd/test/miscellaneous.jl:1030 =# @__LINE__()) = (Float64, 1030)
158.172812 seconds (161.43 M allocations: 8.579 GiB, 6.74% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/GTVfd/test/copy.jl:129 =# @__LINE__()) = (Float32, 129)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/GTVfd/test/copy.jl:129 =# @__LINE__()) = (Float64, 129)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/GTVfd/test/copy.jl:129 =# @__LINE__()) = (Int32, 129)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/GTVfd/test/copy.jl:129 =# @__LINE__()) = (Int64, 129)
 10.983881 seconds (8.55 M allocations: 463.853 MiB, 3.17% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/GTVfd/test/broadcast.jl:5 =# @__LINE__()) = (Float32, 5)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/GTVfd/test/broadcast.jl:5 =# @__LINE__()) = (Float64, 5)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/GTVfd/test/broadcast.jl:5 =# @__LINE__()) = (Int32, 5)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/GTVfd/test/broadcast.jl:5 =# @__LINE__()) = (Int64, 5)
350.585028 seconds (132.53 M allocations: 8.107 GiB, 3.54% gc time)
OPS = Tuple{:numericconstant,Symbol("##zero#13768"),LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x01, 0x02),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000032, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x03),:LoopVectorization,:vfmadd_fast,LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000020301, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:identity,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000004, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x04),:LoopVectorization,:vadd,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000605, LoopVectorization.compute, 0x00, 0x04),:LoopVectorization,:setindex!,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000007, LoopVectorization.memstore, 0x03, 0x05)}
ARF = Tuple{LoopVectorization.ArrayRefStruct{:A,Symbol("##vptr##_A")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:B,Symbol("##vptr##_B")}(0x0000000000000101, 0x0000000000000302, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:C,Symbol("##vptr##_C")}(0x0000000000000101, 0x0000000000000102, 0x0000000000000000)}
AM = Tuple{0,Tuple{},Tuple{},Tuple{},Tuple{},Tuple{(1, LoopVectorization.IntOrFloat)},Tuple{}}
LPSYM = Tuple{:m,:n,:k}
LB = Tuple{VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1}}
vargs = (VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007fbc77e96820, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007fbc77e96a50, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007fbc77e96ac0, (16,)))
OPS = Tuple{:numericconstant,Symbol("##zero#13768"),LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x01, 0x02),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000032, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x03),:LoopVectorization,:vfmadd_fast,LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000020301, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:identity,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000004, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x04),:LoopVectorization,:vadd,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000605, LoopVectorization.compute, 0x00, 0x04),:LoopVectorization,:setindex!,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000007, LoopVectorization.memstore, 0x03, 0x05)}
ARF = Tuple{LoopVectorization.ArrayRefStruct{:A,Symbol("##vptr##_A")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:B,Symbol("##vptr##_B")}(0x0000000000000101, 0x0000000000000302, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:C,Symbol("##vptr##_C")}(0x0000000000000101, 0x0000000000000102, 0x0000000000000000)}
AM = Tuple{0,Tuple{},Tuple{},Tuple{},Tuple{},Tuple{(1, LoopVectorization.IntOrFloat)},Tuple{}}
LPSYM = Tuple{:m,:n,:k}
LB = Tuple{VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1}}
vargs = (VectorizationBase.RowMajorStridedPointer{Float64,1}(Ptr{Float64} @0x00007fbc29e17460, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007fbc29e174d0, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007fbc29eb8a60, (16,)))
OPS = Tuple{:numericconstant,Symbol("##zero#13768"),LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x01, 0x02),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000032, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x03),:LoopVectorization,:vfmadd_fast,LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000020301, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:identity,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000004, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x04),:LoopVectorization,:vadd,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000605, LoopVectorization.compute, 0x00, 0x04),:LoopVectorization,:setindex!,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000007, LoopVectorization.memstore, 0x03, 0x05)}
ARF = Tuple{LoopVectorization.ArrayRefStruct{:A,Symbol("##vptr##_A")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:B,Symbol("##vptr##_B")}(0x0000000000000101, 0x0000000000000302, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:C,Symbol("##vptr##_C")}(0x0000000000000101, 0x0000000000000102, 0x0000000000000000)}
AM = Tuple{0,Tuple{},Tuple{},Tuple{},Tuple{},Tuple{(1, LoopVectorization.IntOrFloat)},Tuple{}}
LPSYM = Tuple{:m,:n,:k}
LB = Tuple{VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1}}
vargs = (VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007fbc45d55fd0, (16,)), VectorizationBase.RowMajorStridedPointer{Float64,1}(Ptr{Float64} @0x00007fbc45d56040, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007fbc45d560b0, (16,)))
OPS = Tuple{:numericconstant,Symbol("##zero#13768"),LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x01, 0x02),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000032, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x03),:LoopVectorization,:vfmadd_fast,LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000020301, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:identity,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000004, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x04),:LoopVectorization,:vadd,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000605, LoopVectorization.compute, 0x00, 0x04),:LoopVectorization,:setindex!,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000007, LoopVectorization.memstore, 0x03, 0x05)}
ARF = Tuple{LoopVectorization.ArrayRefStruct{:A,Symbol("##vptr##_A")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:B,Symbol("##vptr##_B")}(0x0000000000000101, 0x0000000000000302, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:C,Symbol("##vptr##_C")}(0x0000000000000101, 0x0000000000000102, 0x0000000000000000)}
AM = Tuple{0,Tuple{},Tuple{},Tuple{},Tuple{},Tuple{(1, LoopVectorization.IntOrFloat)},Tuple{}}
LPSYM = Tuple{:m,:n,:k}
LB = Tuple{VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1}}
vargs = (VectorizationBase.RowMajorStridedPointer{Float64,1}(Ptr{Float64} @0x00007fbc2945bee0, (16,)), VectorizationBase.RowMajorStridedPointer{Float64,1}(Ptr{Float64} @0x00007fbc2945bf50, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007fbc2945bfc0, (16,)))
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/GTVfd/test/gemm.jl:650 =# @__LINE__()) = (Float32, 650)
 88.689712 seconds (44.86 M allocations: 3.317 GiB, 6.02% gc time)
 12.434518 seconds (8.48 M allocations: 453.401 MiB)
 17.429367 seconds (11.17 M allocations: 668.541 MiB)
 12.256443 seconds (8.23 M allocations: 470.922 MiB, 10.48% gc time)
 21.199239 seconds (12.90 M allocations: 856.900 MiB, 4.21% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/GTVfd/test/gemm.jl:650 =# @__LINE__()) = (Float64, 650)
 91.262959 seconds (44.38 M allocations: 3.291 GiB, 6.07% gc time)
 10.783194 seconds (8.41 M allocations: 450.458 MiB)
 17.993421 seconds (11.00 M allocations: 660.041 MiB, 8.27% gc time)
 11.110143 seconds (8.19 M allocations: 468.734 MiB, 5.81% gc time)
 21.059593 seconds (12.77 M allocations: 849.226 MiB, 5.00% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/GTVfd/test/gemm.jl:650 =# @__LINE__()) = (Int32, 650)
130.462052 seconds (49.44 M allocations: 3.518 GiB, 4.99% gc time)
 15.487833 seconds (8.95 M allocations: 470.323 MiB, 7.07% gc time)
 19.514298 seconds (10.19 M allocations: 601.098 MiB, 4.49% gc time)
 13.565413 seconds (8.69 M allocations: 487.514 MiB, 4.75% gc time)
 26.357500 seconds (13.23 M allocations: 863.968 MiB, 8.35% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/GTVfd/test/gemm.jl:650 =# @__LINE__()) = (Int64, 650)
122.305379 seconds (49.36 M allocations: 3.515 GiB, 7.30% gc time)
 13.425892 seconds (8.92 M allocations: 469.467 MiB)
 18.637073 seconds (10.07 M allocations: 595.071 MiB)
 14.268408 seconds (8.67 M allocations: 486.284 MiB, 10.71% gc time)
 25.040943 seconds (13.22 M allocations: 863.873 MiB, 4.61% gc time)
711.712052 seconds (353.92 M allocations: 23.295 GiB, 5.53% gc time)
Test Summary:        | Pass  Total
LoopVectorization.jl | 1705   1705
2435.351393 seconds (1.62 G allocations: 105.742 GiB, 4.91% gc time)
    Testing LoopVectorization tests passed 
