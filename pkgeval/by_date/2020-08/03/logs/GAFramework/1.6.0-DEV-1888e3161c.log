Julia Version 1.6.0-DEV.572
Commit 1888e3161c (2020-08-02 15:45 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.0
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.0
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_UeEdFJ/Project.toml`
  [5789e2e9] FileIO v1.4.0
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_UeEdFJ/Manifest.toml`
  [5789e2e9] FileIO v1.4.0
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21723131756535835
curgen: 20 fitness: 0.21723131756535835
curgen: 30 fitness: 0.21723131756535835
curgen: 40 fitness: 0.21723131756535835
curgen: 50 fitness: 0.21723131756535835
CoordinateCreature{Vector{Float64}}([0.22277675189214596], -0.21723131756535835) 0.22277675189214596 -0.21723131756535835
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.2582501435958577
curgen: 100 fitness: 3.258278692102795
curgen: 150 fitness: 3.2583548114617233
curgen: 200 fitness: 3.258370732232257
curgen: 250 fitness: 3.2584203148955986
curgen: 300 fitness: 3.258459807753493
curgen: 350 fitness: 3.258467462645482
curgen: 400 fitness: 3.258467462645482
curgen: 450 fitness: 3.2584681179298025
curgen: 500 fitness: 3.258478571333677
CoordinateCreature{Vector{Float64}}([-0.22248240170730635, 0.22232652956916635, -0.22270756825582017, 0.2224190454747031, 0.2226157871777374, -0.2228011032746751, 0.22261988435154909, -0.222272104740812, -0.22251661115961455, 0.22287579785362607, 0.2225249219964256, -0.22236620611962665, 0.22226159655486308, 0.2225657800322306, -0.22274763375867898], -3.2584818567587517) [-0.22248240170730635, 0.22232652956916635, -0.22270756825582017, 0.2224190454747031, 0.2226157871777374, -0.2228011032746751, 0.22261988435154909, -0.222272104740812, -0.22251661115961455, 0.22287579785362607, 0.2225249219964256, -0.22236620611962665, 0.22226159655486308, 0.2225657800322306, -0.22274763375867898] -3.2584818567587517
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.0016855460290798874
curgen: 100 fitness: -0.0013962785441492542
curgen: 150 fitness: -0.0013962785441492542
curgen: 200 fitness: -0.0012264449668180077
curgen: 250 fitness: -0.0010746886317178905
curgen: 300 fitness: -0.0010746886317178905
curgen: 350 fitness: -0.0009023597955888363
curgen: 400 fitness: -0.0007594682668923269
curgen: 450 fitness: -0.0007594682668923269
curgen: 500 fitness: -0.0005204191645020728
CoordinateCreature{Vector{Float64}}([0.00030389101026710583, -0.00012522683959962722, -0.0010879473647315823, 1.4115756753647684e-5, 0.00032319305656783667, 0.00019640073200789332, -0.000249219919549504, 0.00019975500585981852, 0.00030364541646442714, -0.00023079866986249967, 0.0009051676872224083, -6.45299845991828e-5, 0.0003219894123153639, -5.506640795045723e-5, 0.00010306037979615382], 0.0005204191645020728) [0.00030389101026710583, -0.00012522683959962722, -0.0010879473647315823, 1.4115756753647684e-5, 0.00032319305656783667, 0.00019640073200789332, -0.000249219919549504, 0.00019975500585981852, 0.00030364541646442714, -0.00023079866986249967, 0.0009051676872224083, -6.45299845991828e-5, 0.0003219894123153639, -5.506640795045723e-5, 0.00010306037979615382] 0.0005204191645020728
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
