Julia Version 1.6.0-DEV.568
Commit f2319b594e (2020-08-01 04:30 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.0
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.0
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_oo353q/Project.toml`
  [5789e2e9] FileIO v1.4.0
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_oo353q/Manifest.toml`
  [5789e2e9] FileIO v1.4.0
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21722751038153687
curgen: 20 fitness: 0.21723362788237072
curgen: 30 fitness: 0.21723362788237072
curgen: 40 fitness: 0.21723362788237072
curgen: 50 fitness: 0.21723362788237072
CoordinateCreature{Vector{Float64}}([0.2225454332639014], -0.21723362788237072) 0.2225454332639014 -0.21723362788237072
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.257837412058411
curgen: 100 fitness: 3.258216387221443
curgen: 150 fitness: 3.258317403071292
curgen: 200 fitness: 3.258452520435219
curgen: 250 fitness: 3.258453673014017
curgen: 300 fitness: 3.258456684437536
curgen: 350 fitness: 3.258456684437536
curgen: 400 fitness: 3.2584741477859835
curgen: 450 fitness: 3.258480030333456
curgen: 500 fitness: 3.25848864486339
CoordinateCreature{Vector{Float64}}([-0.22256374953387198, 0.22228992823814633, -0.22227154483687586, 0.22249956219375097, -0.22245590755513334, 0.22262873803182343, 0.22269963051352967, -0.2226745889507097, -0.22247048876750689, 0.2226110961187516, 0.22262862576805076, -0.22252559784748857, -0.22292171154779566, -0.2225362772308024, -0.2225407227935347], -3.25848864486339) [-0.22256374953387198, 0.22228992823814633, -0.22227154483687586, 0.22249956219375097, -0.22245590755513334, 0.22262873803182343, 0.22269963051352967, -0.2226745889507097, -0.22247048876750689, 0.2226110961187516, 0.22262862576805076, -0.22252559784748857, -0.22292171154779566, -0.2225362772308024, -0.2225407227935347] -3.25848864486339
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.0014110487153118356
curgen: 100 fitness: -0.001376249854189382
curgen: 150 fitness: -0.001376249854189382
curgen: 200 fitness: -0.0010170109178773146
curgen: 250 fitness: -0.0010170109178773146
curgen: 300 fitness: -0.0010109170952716795
curgen: 350 fitness: -0.001002768732007553
curgen: 400 fitness: -0.001002768732007553
curgen: 450 fitness: -0.0007740605068704554
curgen: 500 fitness: -0.0007740605068704554
CoordinateCreature{Vector{Float64}}([0.0003777672861049046, -0.0006934967822744816, -3.218837670528984e-5, -0.0005120642781473645, -1.0598116035638111e-5, 0.0007308333998225429, -0.00022108557944923966, 1.0604642660395815e-5, -0.0009757112650971048, 0.0005836686001132295, 0.0007473962021548044, -0.00021851311659021365, 0.0005492192015237986, 4.3321613738192836e-5, 0.00047855524103580273], 0.0007740605068704554) [0.0003777672861049046, -0.0006934967822744816, -3.218837670528984e-5, -0.0005120642781473645, -1.0598116035638111e-5, 0.0007308333998225429, -0.00022108557944923966, 1.0604642660395815e-5, -0.0009757112650971048, 0.0005836686001132295, 0.0007473962021548044, -0.00021851311659021365, 0.0005492192015237986, 4.3321613738192836e-5, 0.00047855524103580273] 0.0007740605068704554
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
