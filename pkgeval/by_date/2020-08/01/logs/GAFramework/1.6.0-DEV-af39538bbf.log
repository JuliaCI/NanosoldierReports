Julia Version 1.6.0-DEV.564
Commit af39538bbf (2020-07-31 15:09 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.0
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.0
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_IAN9Fu/Project.toml`
  [5789e2e9] FileIO v1.4.0
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_IAN9Fu/Manifest.toml`
  [5789e2e9] FileIO v1.4.0
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.2172336229940489
curgen: 20 fitness: 0.2172336229940489
curgen: 30 fitness: 0.2172336229940489
curgen: 40 fitness: 0.2172336229940489
curgen: 50 fitness: 0.2172336229940489
CoordinateCreature{Vector{Float64}}([-0.22255901348021953], -0.2172336229940489) -0.22255901348021953 -0.2172336229940489
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.258162743969799
curgen: 100 fitness: 3.258162743969799
curgen: 150 fitness: 3.2583660072854754
curgen: 200 fitness: 3.258396667162438
curgen: 250 fitness: 3.258456193610583
curgen: 300 fitness: 3.258461446212393
curgen: 350 fitness: 3.258461446212393
curgen: 400 fitness: 3.258461446212393
curgen: 450 fitness: 3.258462158434844
curgen: 500 fitness: 3.258477808152
CoordinateCreature{Vector{Float64}}([0.222186767086846, 0.2224041321975126, 0.22254062351794823, 0.22272974195394873, 0.22256910810953381, 0.22248933817231378, -0.22268615624603438, -0.22263748501240924, 0.22217820885982115, -0.22245004199805143, 0.22277814805298332, 0.22279931743827633, 0.22257120867608002, -0.2224437884367943, 0.22221459183201742], -3.258477808152) [0.222186767086846, 0.2224041321975126, 0.22254062351794823, 0.22272974195394873, 0.22256910810953381, 0.22248933817231378, -0.22268615624603438, -0.22263748501240924, 0.22217820885982115, -0.22245004199805143, 0.22277814805298332, 0.22279931743827633, 0.22257120867608002, -0.2224437884367943, 0.22221459183201742] -3.258477808152
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.002748467710091518
curgen: 100 fitness: -0.002654131471189203
curgen: 150 fitness: -0.0017648956308846664
curgen: 200 fitness: -0.0017648956308846664
curgen: 250 fitness: -0.0017648956308846664
curgen: 300 fitness: -0.0017648956308846664
curgen: 350 fitness: -0.0016355838389756627
curgen: 400 fitness: -0.0015407916512799602
curgen: 450 fitness: -0.0015407916512799602
curgen: 500 fitness: -0.0015373957270128358
CoordinateCreature{Vector{Float64}}([-0.00019362674689025507, 0.0018028549884639867, 3.889523885281334e-5, 5.5150470723392135e-5, 8.44029491882288e-5, 0.00018933612161776817, -0.00017524131955638103, 0.00035091337196560253, -0.0005358526449897196, 0.0003227903212504387, 0.000711124888372459, -0.0010478312756752386, 0.0007020835101960193, 6.215944646762199e-5, -0.0013298161238229785], 0.0015373957270128358) [-0.00019362674689025507, 0.0018028549884639867, 3.889523885281334e-5, 5.5150470723392135e-5, 8.44029491882288e-5, 0.00018933612161776817, -0.00017524131955638103, 0.00035091337196560253, -0.0005358526449897196, 0.0003227903212504387, 0.000711124888372459, -0.0010478312756752386, 0.0007020835101960193, 6.215944646762199e-5, -0.0013298161238229785] 0.0015373957270128358
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
