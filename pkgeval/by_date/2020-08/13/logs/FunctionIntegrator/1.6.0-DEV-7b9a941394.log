Julia Version 1.6.0-DEV.629
Commit 7b9a941394 (2020-08-12 17:08 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed FastGaussQuadrature ────────── v0.4.2
  Installed FunctionIntegrator ─────────── v0.5.1
  Installed SpecialFunctions ───────────── v0.10.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [7685536e] + FunctionIntegrator v0.5.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [442a2c76] + FastGaussQuadrature v0.4.2
  [7685536e] + FunctionIntegrator v0.5.1
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [276daf66] + SpecialFunctions v0.10.3
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing FunctionIntegrator
Status `/tmp/jl_ApMHXP/Project.toml`
  [442a2c76] FastGaussQuadrature v0.4.2
  [7685536e] FunctionIntegrator v0.5.1
  [276daf66] SpecialFunctions v0.10.3
  [8dfed614] Test
Status `/tmp/jl_ApMHXP/Manifest.toml`
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [442a2c76] FastGaussQuadrature v0.4.2
  [7685536e] FunctionIntegrator v0.5.1
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [276daf66] SpecialFunctions v0.10.3
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Performing the Airy Ai(x) test, where Ai(x) is integrated on the semi-infinite domain, or an approximation of it, namely [0,100] and the result is compared to the analytical result 1/3.
Running: adaptive_simpsons_rule
  0.961479 seconds (1.34 M allocations: 70.833 MiB, 9.68% gc time)
Running: chebyshev_quadrature with k=1
  1.653703 seconds (2.24 M allocations: 128.682 MiB, 3.19% gc time)
Running: chebyshev_quadrature with k=2
  0.258175 seconds (425.05 k allocations: 24.380 MiB)
Running: chebyshev_quadrature with k=3
  0.334174 seconds (544.93 k allocations: 29.877 MiB, 4.06% gc time)
Running: chebyshev_quadrature with k=4
  0.310692 seconds (487.80 k allocations: 26.422 MiB)
Running: jacobi_quadrature with α=β=1
 41.145741 seconds (39.38 M allocations: 3.138 GiB, 10.57% gc time)
Running: laguerre_quadrature with k=1
  3.206796 seconds (3.33 M allocations: 185.643 MiB, 4.14% gc time)
Running: legendre_quadrature
  0.193208 seconds (215.20 k allocations: 12.393 MiB)
Running: lobatto_quadrature
  0.446391 seconds (343.80 k allocations: 20.593 MiB, 16.69% gc time)
Running: radau_quadrature
  0.250717 seconds (326.13 k allocations: 19.597 MiB)
Running: rectangle_rule_left. Only a rough approximation can be practically achieved using this function.
 80.752676 seconds (100.02 M allocations: 1.491 GiB, 0.39% gc time)
Running: rectangle_rule_midpoint.
  0.142891 seconds (173.73 k allocations: 3.887 MiB)
Running: rectangle_rule_right. Only a rough approximation can be practically achieved using this function.
 79.137640 seconds (100.02 M allocations: 1.491 GiB, 0.23% gc time)
Running: rombergs_method
  0.550053 seconds (752.85 k allocations: 43.324 MiB, 6.11% gc time)
Running: simpsons_rule
  0.037619 seconds (47.35 k allocations: 2.120 MiB)
Running: simpsons38_rule
  0.093153 seconds (113.25 k allocations: 5.983 MiB)
Running: trapezoidal_rule
  0.316616 seconds (1.52 M allocations: 25.806 MiB, 4.93% gc time)
Test Summary: | Pass  Total
Airy Ai(x)    |   17     17
Performing the besselj test, where BesselJ_1(2) is approximated and the result is compared to the value obtained from SpecialFunctions' besselj function.
Running: adaptive_simpsons_rule with ε=1e-7
  0.070014 seconds (32.63 k allocations: 1.943 MiB)
Running: chebyshev_quadrature with k=1
  0.358375 seconds (275.96 k allocations: 13.996 MiB)
Running: chebyshev_quadrature with k=2
  0.146453 seconds (115.72 k allocations: 3.793 MiB)
Running: chebyshev_quadrature with k=3
  0.151675 seconds (105.07 k allocations: 3.639 MiB)
Running: chebyshev_quadrature with k=4
  0.158458 seconds (87.68 k allocations: 3.285 MiB)
Running: jacobi_quadrature with α=β=1
  1.962801 seconds (536.27 k allocations: 163.510 MiB, 8.24% gc time)
Running: legendre_quadrature
  0.166068 seconds (62.39 k allocations: 3.481 MiB)
Running: lobatto_quadrature
  0.022467 seconds (16.87 k allocations: 1.041 MiB)
Running: radau_quadrature
  0.023198 seconds (16.85 k allocations: 1.041 MiB)
Running: rectangle_rule_left
 27.509459 seconds (471.41 M allocations: 7.025 GiB, 2.50% gc time)
Running: rectangle_rule_midpoint
  0.000024 seconds (45 allocations: 1.047 KiB)
Running: rectangle_rule_right
 27.261191 seconds (476.96 M allocations: 7.107 GiB, 2.44% gc time)
Running: rombergs_method
  0.386587 seconds (360.37 k allocations: 20.321 MiB)
Running: simpsons_rule
  0.000031 seconds (85 allocations: 1.672 KiB)
Running: simpsons38_rule
  0.074473 seconds (19.90 k allocations: 1.194 MiB)
Running: trapezoidal_rule
  0.044288 seconds (18.35 k allocations: 1.099 MiB)
Test Summary: | Pass  Total
besselj       |   16     16
Integrating cos^2(x)/(1+cot(x)) from 0 to pi/2 and comparing the results to the analytical result 0.25.
Running: adaptive_simpsons_rule with ε=1e-7
  0.026748 seconds (1.99 k allocations: 53.594 KiB)
Running: chebyshev_quadrature with k=1
  0.084718 seconds (2.40 k allocations: 113.453 KiB)
Running: chebyshev_quadrature with k=2
  0.103421 seconds (2.65 k allocations: 121.469 KiB)
Running: chebyshev_quadrature with k=3
  0.113590 seconds (3.08 k allocations: 133.688 KiB)
Running: chebyshev_quadrature with k=4
  0.111962 seconds (3.08 k allocations: 133.750 KiB)
Running: jacobi_quadrature with α=β=1
  0.321744 seconds (379.01 k allocations: 19.794 MiB)
Running: legendre_quadrature
  0.057287 seconds (1.24 k allocations: 63.609 KiB)
Running: lobatto_quadrature
  0.000121 seconds (67 allocations: 2.844 KiB)
Running: radau_quadrature
  0.000045 seconds (71 allocations: 3.078 KiB)
Running: rectangle_rule_left
  0.000628 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_midpoint
  0.000437 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right
  0.000620 seconds (9 allocations: 496 bytes)
Running: rombergs_method
  0.078830 seconds (1.01 k allocations: 54.109 KiB)
Running: simpsons_rule
  0.000052 seconds (323 allocations: 5.391 KiB)
Running: simpsons38_rule
  0.020385 seconds (923 allocations: 39.281 KiB)
Running: trapezoidal_rule
  0.022584 seconds (44.33 k allocations: 704.859 KiB)
Test Summary: | Pass  Total
coscotint     |   16     16
Integrating cosine from 0 to pi/2 and comparing the result to the analytical result of 1.
Running: adaptive_simpsons_rule
  0.063174 seconds (75.84 k allocations: 4.401 MiB)
Running: chebyshev_quadrature with k=1
  0.220100 seconds (240.25 k allocations: 13.487 MiB, 13.59% gc time)
Running: chebyshev_quadrature with k=2
  0.222684 seconds (295.45 k allocations: 16.594 MiB)
Running: chebyshev_quadrature with k=3
  0.231810 seconds (275.41 k allocations: 14.982 MiB)
Running: chebyshev_quadrature with k=4
  0.280891 seconds (275.44 k allocations: 14.879 MiB, 26.02% gc time)
Running: jacobi_quadrature with α=β=1
  2.688260 seconds (465.77 k allocations: 164.243 MiB, 24.27% gc time)
Running: legendre_quadrature
  0.172644 seconds (193.00 k allocations: 11.107 MiB)
Running: lobatto_quadrature
  0.170287 seconds (204.21 k allocations: 11.826 MiB)
Running: radau_quadrature
  0.160629 seconds (204.21 k allocations: 11.815 MiB)
Running: rectangle_rule_left
  1.181591 seconds (19.76 k allocations: 1.194 MiB)
Running: rectangle_rule_midpoint
  0.034210 seconds (25.93 k allocations: 1.615 MiB)
Running: rectangle_rule_right
  1.254847 seconds (18.27 k allocations: 1.105 MiB)
Running: rombergs_method
  0.162622 seconds (139.91 k allocations: 8.059 MiB, 13.97% gc time)
Running: simpsons_rule
  0.031335 seconds (29.02 k allocations: 1.803 MiB)
Running: simpsons38_rule
  0.032953 seconds (44.65 k allocations: 2.787 MiB)
Running: trapezoidal_rule
  0.023202 seconds (45.20 k allocations: 1.824 MiB)
Test Summary: | Pass  Total
Cosine        |   16     16
Integrating e^(-x^2)/(1+x^2) on the infinite domain [-inf, inf], or failing that on [-100,100], and comparing it to the analytical result exp(1)*pi*erfc(1)
Running: adaptive_simpsons_rule with ε=1e-7
  0.038243 seconds (101.41 k allocations: 3.075 MiB)
Running: chebyshev_quadrature with k=1
  0.186507 seconds (247.35 k allocations: 13.596 MiB)
Running: chebyshev_quadrature with k=2
  0.216190 seconds (303.07 k allocations: 16.573 MiB)
Running: chebyshev_quadrature with k=3
  0.204749 seconds (282.82 k allocations: 15.068 MiB)
Running: chebyshev_quadrature with k=4
  0.228918 seconds (282.85 k allocations: 15.010 MiB)
Running: hermite_quadrature with k=2
 14.906245 seconds (22.12 M allocations: 1.147 GiB, 9.06% gc time)
Running: jacobi_quadrature with α=β=1
  0.472818 seconds (475.81 k allocations: 50.464 MiB, 7.99% gc time)
Running: laguerre_quadrature with k=1 and multiplying the result by 2 (as Laguerre is only on the semi-infinite domain)
  0.186577 seconds (288.35 k allocations: 15.898 MiB)
Running: legendre_quadrature
  0.199769 seconds (200.06 k allocations: 11.455 MiB, 18.25% gc time)
Running: lobatto_quadrature
  0.256852 seconds (225.72 k allocations: 37.628 MiB)
Running: radau_quadrature
  0.228821 seconds (222.31 k allocations: 30.290 MiB, 10.39% gc time)
Running: rectangle_rule_left
  0.028418 seconds (22.91 k allocations: 1.353 MiB)
Running: rectangle_rule_midpoint
  0.027725 seconds (27.88 k allocations: 1.711 MiB)
Running: rectangle_rule_right
  0.026875 seconds (19.48 k allocations: 1.166 MiB)
Running: rombergs_method
  0.144887 seconds (142.73 k allocations: 8.122 MiB)
Running: simpsons_rule
  0.052133 seconds (41.25 k allocations: 2.157 MiB)
Running: simpsons38_rule
  0.062232 seconds (60.02 k allocations: 3.196 MiB)
Running: trapezoidal_rule
  0.037672 seconds (31.57 k allocations: 1.770 MiB)
Test Summary: | Pass  Total
expnx2datan   |   18     18
Integrate exp(-x^2) from minus infinity to positive infinity and comparing the result to the analytical solution, sqrt(pi)
Running: adaptive_simpsons_rule with ε=1e-7
  0.039201 seconds (61.51 k allocations: 2.360 MiB)
Running: chebyshev_quadrature with k=1
  0.236029 seconds (242.48 k allocations: 13.352 MiB, 11.82% gc time)
Running: chebyshev_quadrature with k=2
  0.264057 seconds (297.80 k allocations: 16.314 MiB)
Running: chebyshev_quadrature with k=3
  0.190225 seconds (277.68 k allocations: 14.777 MiB)
Running: chebyshev_quadrature with k=4
  0.259584 seconds (277.72 k allocations: 14.785 MiB, 23.45% gc time)
Running: hermite_quadrature with k=2
  0.139660 seconds (177.71 k allocations: 10.161 MiB)
Running: jacobi_quadrature with α=β=1
 10.108879 seconds (468.37 k allocations: 1.176 GiB, 23.67% gc time)
Running: laguerre_quadrature (results multiplied by 2, as laguerre only integrates over the semi-infinite domain)
  0.228925 seconds (283.21 k allocations: 15.693 MiB)
Running: legendre_quadrature
  0.178208 seconds (195.23 k allocations: 11.220 MiB, 11.67% gc time)
Running: lobatto_quadrature
  0.199444 seconds (216.08 k allocations: 23.332 MiB)
Running: radau_quadrature
  0.218930 seconds (215.23 k allocations: 21.262 MiB, 7.00% gc time)
Running: rectangle_rule_left
  0.026914 seconds (20.47 k allocations: 1.235 MiB)
Running: rectangle_rule_midpoint
  0.027757 seconds (26.65 k allocations: 1.653 MiB)
Running: rectangle_rule_right
  0.024546 seconds (18.24 k allocations: 1.106 MiB)
Running: rombergs_method
  0.115216 seconds (138.20 k allocations: 7.923 MiB)
Running: simpsons_rule
  0.032484 seconds (33.49 k allocations: 1.933 MiB)
Running: simpsons38_rule
  0.036436 seconds (50.55 k allocations: 2.939 MiB)
Running: trapezoidal_rule
  0.026984 seconds (26.25 k allocations: 1.593 MiB)
Test Summary: | Pass  Total
Gaussian      |   18     18
Integrating 1/x from 1 to e and comparing the result to the analytical solution, 1.
Running: adaptive_simpsons_rule with ε=1e-7
  0.040910 seconds (32.48 k allocations: 1.957 MiB)
Running: chebyshev_quadrature with k=1
  0.251972 seconds (240.81 k allocations: 13.567 MiB)
Running: chebyshev_quadrature with k=2
  0.256200 seconds (296.03 k allocations: 16.652 MiB, 13.26% gc time)
Running: chebyshev_quadrature with k=3
  0.226051 seconds (276.01 k allocations: 14.981 MiB)
Running: chebyshev_quadrature with k=4
  0.224968 seconds (276.04 k allocations: 14.813 MiB, 8.86% gc time)
Running: jacobi_quadrature with α=β=1
  1.803272 seconds (466.42 k allocations: 195.253 MiB, 4.79% gc time)
Running: legendre_quadrature
  0.163186 seconds (193.56 k allocations: 11.134 MiB)
Running: lobatto_quadrature
  0.198084 seconds (204.78 k allocations: 11.932 MiB, 9.02% gc time)
Running: radau_quadrature
  0.170005 seconds (204.78 k allocations: 11.846 MiB)
Running: rectangle_rule_left
  0.378450 seconds (20.33 k allocations: 1.222 MiB)
Running: rectangle_rule_midpoint
  0.041355 seconds (26.30 k allocations: 1.635 MiB)
Running: rectangle_rule_right
  0.123591 seconds (18.64 k allocations: 1.125 MiB)
Running: rombergs_method
  0.147411 seconds (151.28 k allocations: 8.811 MiB)
Running: simpsons_rule
  0.032558 seconds (29.77 k allocations: 1.835 MiB)
Running: simpsons38_rule
  0.028807 seconds (45.42 k allocations: 2.821 MiB)
Running: trapezoidal_rule
  0.025897 seconds (46.19 k allocations: 1.861 MiB)
Test Summary: | Pass  Total
1/x           |   16     16
Integrating log(x)/x from 1 to e and comparing the result to the analytical solution of 0.5.
Running: adaptive_simpsons_rule with ε=1e-7
  0.034850 seconds (33.24 k allocations: 1.906 MiB)
Running: chebyshev_quadrature with k=1
  0.240726 seconds (241.38 k allocations: 13.511 MiB, 19.45% gc time)
Running: chebyshev_quadrature with k=2
  0.218431 seconds (296.64 k allocations: 16.628 MiB)
Running: chebyshev_quadrature with k=3
  0.222639 seconds (276.54 k allocations: 14.902 MiB)
Running: chebyshev_quadrature with k=4
  0.263206 seconds (276.58 k allocations: 14.982 MiB, 11.30% gc time)
Running: jacobi_quadrature with α=β=1
  1.481991 seconds (467.08 k allocations: 149.920 MiB, 8.96% gc time)
Running: legendre_quadrature
  0.172888 seconds (194.13 k allocations: 11.150 MiB)
Running: lobatto_quadrature
  0.224413 seconds (205.36 k allocations: 11.860 MiB, 14.95% gc time)
Running: radau_quadrature
  0.171624 seconds (205.35 k allocations: 11.920 MiB)
Running: rectangle_rule_left
  1.253643 seconds (20.60 k allocations: 1.236 MiB)
Running: rectangle_rule_midpoint
  0.034747 seconds (26.29 k allocations: 1.635 MiB)
Running: rectangle_rule_right
  1.135249 seconds (18.61 k allocations: 1.124 MiB)
Running: rombergs_method
  0.174015 seconds (141.21 k allocations: 8.136 MiB)
Running: simpsons_rule
  0.036732 seconds (30.52 k allocations: 1.863 MiB)
Running: simpsons38_rule
  0.039791 seconds (46.17 k allocations: 2.850 MiB)
Running: trapezoidal_rule
  0.029493 seconds (58.45 k allocations: 2.062 MiB)
Test Summary: | Pass  Total
log(x)/x      |   16     16
Approximating the modified bessel function I_1(1) and comparing it to the result obtained by SpecialFunctions.
Running: adaptive_simpsons_rule with ε=1e-7
  0.141636 seconds (152.85 k allocations: 9.083 MiB)
Running: chebyshev_quadrature with k=1
  0.130717 seconds (91.24 k allocations: 3.295 MiB)
Running: chebyshev_quadrature with k=2
  0.188201 seconds (127.01 k allocations: 3.988 MiB, 18.08% gc time)
Running: chebyshev_quadrature with k=3
  0.175176 seconds (115.58 k allocations: 3.818 MiB)
Running: chebyshev_quadrature with k=4
  0.173176 seconds (95.11 k allocations: 3.411 MiB)
Running: jacobi_quadrature with α=β=1
  1.820583 seconds (509.83 k allocations: 169.309 MiB, 8.27% gc time)
Running: legendre_quadrature
  0.157322 seconds (38.34 k allocations: 2.105 MiB, 21.61% gc time)
Running: lobatto_quadrature
  0.000104 seconds (150 allocations: 4.328 KiB)
Running: radau_quadrature
  0.000057 seconds (148 allocations: 4.375 KiB)
Running: rectangle_rule_left
 43.419903 seconds (590.00 M allocations: 8.792 GiB, 3.11% gc time)
Running: rectangle_rule_midpoint
  0.000051 seconds (40 allocations: 992 bytes)
Running: rectangle_rule_right
 44.865177 seconds (592.75 M allocations: 8.833 GiB, 3.01% gc time)
Running: rombergs_method
  0.129824 seconds (41.89 k allocations: 2.258 MiB)
Running: simpsons_rule
  0.000043 seconds (93 allocations: 1.797 KiB)
Running: simpsons38_rule
  0.027680 seconds (463 allocations: 22.578 KiB)
Running: trapezoidal_rule
  0.021468 seconds (179 allocations: 8.766 KiB)
Test Summary: | Pass  Total
modbessel0    |   16     16
Integrating 1/sqrt(-19.6 sin(x)) from -pi to 0 and comparing the result to the analytical solution of ellipk(1/2)/sqrt(2.45) The integrand has singularities at x = -pi and x=0, so for some of these functions the integration domain has to be itself approximated.
Running: adaptive_simpsons_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 31.550239 seconds (629.34 M allocations: 9.388 GiB, 4.48% gc time)
Running: chebyshev_quadrature with k=1
  0.565162 seconds (439.28 k allocations: 24.335 MiB)
Running: chebyshev_quadrature with k=2
 14.277981 seconds (496.65 k allocations: 4.042 GiB, 4.73% gc time)
Running: chebyshev_quadrature with k=3
  6.567840 seconds (290.50 k allocations: 1.643 GiB, 4.60% gc time)
Running: chebyshev_quadrature with k=4
  8.328112 seconds (290.53 k allocations: 2.262 GiB, 2.45% gc time)
Running: jacobi_quadrature with α=β=1. The N value required to get an accurate result is too high to be practical, so only a rough approximation can be arrived at.
 54.637963 seconds (505.37 k allocations: 13.255 GiB, 4.25% gc time)
Running: legendre_quadrature.
  6.847988 seconds (232.97 k allocations: 1.976 GiB, 2.91% gc time)
The following integration functions have to use an approximated domain due to the endpoint singularities.
Running: lobatto_quadrature on [-pi+1e-6, -1e-6]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 51.948850 seconds (8.24 M allocations: 13.384 GiB, 5.23% gc time)
Running: radau_quadrature on [-pi+1e-6, -1e-6]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 55.472496 seconds (7.24 M allocations: 13.369 GiB, 3.45% gc time)
Running: rectangle_rule_left on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  3.001905 seconds (23.35 k allocations: 1.402 MiB)
Running: rectangle_rule_midpoint on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  3.264058 seconds (31.97 k allocations: 1.959 MiB)
Running: rectangle_rule_right on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  3.199803 seconds (23.57 k allocations: 1.413 MiB)
Running: rombergs_method on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  1.163215 seconds (456.74 k allocations: 153.707 MiB)
Running: simpsons_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 40.781851 seconds (600.04 M allocations: 8.943 GiB, 8.58% gc time)
Running: simpsons38_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 40.298212 seconds (600.05 M allocations: 8.944 GiB, 8.06% gc time)
Running: trapezoidal_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 42.001986 seconds (600.04 M allocations: 8.943 GiB, 8.71% gc time)
Test Summary: | Pass  Total
Simppen       |   16     16
Integrating sin(x^2)e^(-x)/x from 0 to infinity, with the approximated domain of integration of 0 to 100. The removable singularity at x=0 in the integrand has been removed.
Running: adaptive_simpsons_rule with ε=1e-8
  0.061654 seconds (182.51 k allocations: 4.517 MiB)
Running: chebyshev_quadrature with k=1
  0.242177 seconds (257.97 k allocations: 14.018 MiB)
Running: chebyshev_quadrature with k=2
  0.221633 seconds (284.13 k allocations: 15.178 MiB)
Running: chebyshev_quadrature with k=3
  0.281484 seconds (260.62 k allocations: 13.456 MiB)
Running: chebyshev_quadrature with k=4
  0.324885 seconds (260.65 k allocations: 13.452 MiB)
Running: jacobi_quadrature with α=β=1
  0.477586 seconds (405.38 k allocations: 35.879 MiB)
Running: laguerre_quadrature with k=2
  0.188547 seconds (187.97 k allocations: 10.871 MiB)
Running: legendre_quadrature
  0.127180 seconds (151.74 k allocations: 8.407 MiB)
Running: lobatto_quadrature
  0.036415 seconds (10.88 k allocations: 15.109 MiB)
Running: radau_quadrature
  0.032189 seconds (9.66 k allocations: 13.183 MiB)
Running: rectangle_rule_left
  0.058790 seconds (19.81 k allocations: 1.170 MiB)
Running: rectangle_rule_midpoint
  0.049069 seconds (26.77 k allocations: 1.640 MiB)
Running: rectangle_rule_right
  0.052269 seconds (18.36 k allocations: 1.094 MiB)
Running: rombergs_method
  0.236418 seconds (171.22 k allocations: 9.745 MiB)
Running: simpsons_rule
  0.001908 seconds (24.72 k allocations: 386.656 KiB)
Running: simpsons38_rule
  0.054573 seconds (81.45 k allocations: 3.520 MiB)
Running: trapezoidal_rule
  0.192970 seconds (2.39 M allocations: 37.757 MiB)
Test Summary: | Pass  Total
sinexpox      |   17     17
Integrating sin(x)/x from 0 to 100 and comparing it to the exact result.
Running: adaptive_simpsons_rule with ε=1e-8
  0.002208 seconds (30.71 k allocations: 480.250 KiB)
Running: chebyshev_quadrature with k=1
  0.137375 seconds (2.58 k allocations: 1.696 MiB)
Running: chebyshev_quadrature with k=2
  0.140973 seconds (2.84 k allocations: 2.359 MiB)
Running: chebyshev_quadrature with k=3
  0.124402 seconds (3.26 k allocations: 2.060 MiB)
Running: chebyshev_quadrature with k=4
  0.119004 seconds (3.26 k allocations: 1.501 MiB)
Running: jacobi_quadrature with α=β=1
  8.413536 seconds (402.18 k allocations: 906.570 MiB, 6.02% gc time)
Running: legendre_quadrature
  0.124886 seconds (1.33 k allocations: 72.281 KiB)
Running: lobatto_quadrature
  0.000381 seconds (253 allocations: 9.188 KiB)
Running: radau_quadrature
  0.000417 seconds (221 allocations: 8.812 KiB)
Running: rectangle_rule_left; only a rough approximation can be practically achieved using this function
  3.797180 seconds (11 allocations: 528 bytes)
Running: rectangle_rule_midpoint
  0.000430 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right; only a rough approximation can be practically achieved using this function
  3.408582 seconds (11 allocations: 528 bytes)
Running: rombergs_method
  0.074225 seconds (1.16 k allocations: 66.734 KiB)
Running: simpsons_rule
  0.000072 seconds (9 allocations: 496 bytes)
Running: simpsons38_rule
  0.000071 seconds (9 allocations: 496 bytes)
Running: trapezoidal_rule
  0.000946 seconds (9 allocations: 496 bytes)
Test Summary: | Pass  Total
sinxx         |   16     16
Integrating (x^3+1)/(x^4 (x+1)(x^2+1)) from 1 to e and comparing the result to the analytical solution of log(sqrt(2)*exp(1)/(sqrt(exp(2)+1)))+1/2*(exp(-2)-1)+1/3*(1-exp(-3))
Running: adaptive_simpsons_rule with ε=1e-8
  0.000741 seconds (6.34 k allocations: 99.453 KiB)
Running: chebyshev_quadrature with k=1
  0.094223 seconds (2.48 k allocations: 576.609 KiB)
Running: chebyshev_quadrature with k=2
  0.101036 seconds (2.73 k allocations: 777.391 KiB)
Running: chebyshev_quadrature with k=3
  0.111731 seconds (3.15 k allocations: 685.641 KiB)
Running: chebyshev_quadrature with k=4
  0.114709 seconds (3.16 k allocations: 516.203 KiB)
Running: jacobi_quadrature with α=β=1
  3.356318 seconds (388.46 k allocations: 253.809 MiB)
Running: legendre_quadrature
  0.060522 seconds (1.28 k allocations: 65.438 KiB)
Running: lobatto_quadrature
  0.000116 seconds (91 allocations: 3.656 KiB)
Running: radau_quadrature
  0.000056 seconds (81 allocations: 3.453 KiB)
Running: rectangle_rule_left; only a rough approximation can be practically achieved using this function.
 11.112932 seconds (11 allocations: 528 bytes)
Running: rectangle_rule_midpoint
  0.001126 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right; only a rough approximation can be practically achieved using this function.
 11.028699 seconds (11 allocations: 528 bytes)
Running: rombergs_method
  0.080563 seconds (1.18 k allocations: 62.562 KiB)
Running: simpsons_rule
  0.000063 seconds (9 allocations: 496 bytes)
Running: simpsons38_rule
  0.000052 seconds (9 allocations: 496 bytes)
Running: trapezoidal_rule
  0.001638 seconds (9 allocations: 496 bytes)
Test Summary: | Pass  Total
partfrac      |   16     16
    Testing FunctionIntegrator tests passed 
