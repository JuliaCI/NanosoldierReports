Julia Version 1.6.0-DEV.633
Commit 03e1a89ff1 (2020-08-13 14:37 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed DataValueInterfaces ───────── v1.0.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed TableTraits ───────────────── v1.0.0
  Installed Parsers ───────────────────── v1.0.10
  Installed Tables ────────────────────── v1.0.5
  Installed JSON ──────────────────────── v0.21.0
  Installed DocStringExtensions ───────── v0.8.2
  Installed Weave ─────────────────────── v0.10.2
  Installed DataAPI ───────────────────── v1.3.0
  Installed Mustache ──────────────────── v1.0.4
  Installed Highlights ────────────────── v0.4.5
  Installed YAML ──────────────────────── v0.4.0
  Installed Requires ──────────────────── v1.0.1
Updating `~/.julia/environments/v1.6/Project.toml`
  [44d3d7a6] + Weave v0.10.2
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [9a962f9c] + DataAPI v1.3.0
  [e2d170a0] + DataValueInterfaces v1.0.0
  [ffbed154] + DocStringExtensions v0.8.2
  [eafb193a] + Highlights v0.4.5
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [ffc61752] + Mustache v1.0.4
  [69de0a69] + Parsers v1.0.10
  [ae029012] + Requires v1.0.1
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.5
  [44d3d7a6] + Weave v0.10.2
  [ddb6d928] + YAML v0.4.0
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing Weave
Status `/tmp/jl_wcsCPf/Project.toml`
  [159f3aea] Cairo v1.0.5
  [8f4d0f93] Conda v1.4.1
  [a93c6f00] DataFrames v0.21.6
  [c91e804a] Gadfly v1.3.0
  [eafb193a] Highlights v0.4.5
  [7073ff75] IJulia v1.21.2
  [682c06a0] JSON v0.21.0
  [ffc61752] Mustache v1.0.4
  [91a5bcdd] Plots v1.5.8
  [ae029012] Requires v1.0.1
  [44d3d7a6] Weave v0.10.2
  [ddb6d928] YAML v0.4.0
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9e88b42a] Serialization
  [8dfed614] Test
Status `/tmp/jl_wcsCPf/Manifest.toml`
  [621f4979] AbstractFFTs v0.5.0
  [79e6a3ab] Adapt v2.0.2
  [4fba245c] ArrayInterface v2.11.0
  [13072b0f] AxisAlgorithms v1.0.0
  [6e34b625] Bzip2_jll v1.0.6+3
  [159f3aea] Cairo v1.0.5
  [83423d85] Cairo_jll v1.16.0+4
  [324d7699] CategoricalArrays v0.8.1
  [35d6a980] ColorSchemes v3.9.0
  [3da002f7] ColorTypes v0.10.8
  [5ae59095] Colors v0.12.3
  [bbf7d656] CommonSubexpressions v0.3.0
  [34da2185] Compat v3.13.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [a81c6b42] Compose v0.8.2
  [8f4d0f93] Conda v1.4.1
  [d38c429a] Contour v0.5.4
  [7ad07ef1] CoupledFields v0.2.0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.21.6
  [864edb3b] DataStructures v0.17.20
  [e2d170a0] DataValueInterfaces v1.0.0
  [163ba53b] DiffResults v1.0.2
  [b552c78f] DiffRules v1.0.1
  [b4f34e82] Distances v0.9.0
  [31c24e10] Distributions v0.23.8
  [ffbed154] DocStringExtensions v0.8.2
  [2e619515] Expat_jll v2.2.7+3
  [c87230d0] FFMPEG v0.3.0
  [b22a6f82] FFMPEG_jll v4.3.1+1
  [7a1cc6ca] FFTW v1.2.2
  [f5851436] FFTW_jll v3.3.9+5
  [1a297f60] FillArrays v0.8.14
  [6a86dc24] FiniteDiff v2.5.2
  [53c48c17] FixedPointNumbers v0.8.4
  [a3f928ae] Fontconfig_jll v2.13.1+12
  [f6369f11] ForwardDiff v0.10.12
  [d7e528f0] FreeType2_jll v2.10.1+3
  [559328eb] FriBidi_jll v1.0.5+4
  [28b8d3ca] GR v0.51.0
  [c91e804a] Gadfly v1.3.0
  [5c1252a2] GeometryBasics v0.2.15
  [4d00f742] GeometryTypes v0.8.3
  [78b55507] Gettext_jll v0.20.1+4
  [7746bdde] Glib_jll v2.59.0+2
  [a2bd30eb] Graphics v1.0.2
  [3b182d85] Graphite2_jll v1.3.13+1
  [cd3eb016] HTTP v0.8.17
  [2e76f6c2] HarfBuzz_jll v2.6.1+5
  [a1b4810d] Hexagons v0.2.0
  [eafb193a] Highlights v0.4.5
  [7073ff75] IJulia v1.21.2
  [9b13fd28] IndirectArrays v0.5.1
  [83e8ac13] IniFile v0.5.0
  [1d5cc7b8] IntelOpenMP_jll v2018.0.3+0
  [a98d9a8b] Interpolations v0.12.10
  [41ab1584] InvertedIndices v1.0.0
  [c8e1da08] IterTools v1.3.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [e5e0dc1b] Juno v0.8.3
  [5ab0869b] KernelDensity v0.5.1
  [c1c5ebd0] LAME_jll v3.100.0+2
  [dd4b983a] LZO_jll v2.10.0+1
  [dd192d2f] LibVPX_jll v1.9.0+0
  [e9f186c6] Libffi_jll v3.2.1+1
  [d4300ac3] Libgcrypt_jll v1.8.5+1
  [7add5ba3] Libgpg_error_jll v1.36.0+1
  [94ce4f54] Libiconv_jll v1.16.0+5
  [4b2f31a3] Libmount_jll v2.34.0+1
  [38a345b3] Libuuid_jll v2.34.0+4
  [d3d80556] LineSearches v7.0.1
  [4345ca2d] Loess v0.5.0
  [856f044c] MKL_jll v2020.1.216+0
  [1914dd2f] MacroTools v0.5.5
  [739be429] MbedTLS v1.0.2
  [c8ffd9c3] MbedTLS_jll v2.16.6+1
  [442fdcdd] Measures v0.3.1
  [e89f7d12] Media v0.5.0
  [e1d29d7a] Missings v0.4.3
  [ffc61752] Mustache v1.0.4
  [d41bc354] NLSolversBase v7.6.3
  [77ba4419] NaNMath v0.3.4
  [6fe1bfb0] OffsetArrays v1.1.2
  [e7412a2a] Ogg_jll v1.3.4+1
  [458c3c95] OpenSSL_jll v1.1.1+5
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [429524aa] Optim v0.22.0
  [91d4177d] Opus_jll v1.3.1+2
  [bac558e1] OrderedCollections v1.3.0
  [2f80f16e] PCRE_jll v8.42.0+2
  [90014a1f] PDMats v0.10.0
  [36c8627f] Pango_jll v1.42.4+8
  [d96e819e] Parameters v0.12.1
  [69de0a69] Parsers v1.0.10
  [30392449] Pixman_jll v0.38.4+2
  [ccf2f8ad] PlotThemes v2.0.0
  [995b91a9] PlotUtils v1.0.5
  [91a5bcdd] Plots v1.5.8
  [2dfb63ee] PooledArrays v0.5.3
  [85a6dd25] PositiveFactorizations v0.2.3
  [1fd47b50] QuadGK v2.4.0
  [c84ed2f1] Ratios v0.4.0
  [3cdcf5f2] RecipesBase v1.0.2
  [01d81517] RecipesPipeline v0.1.11
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v1.0.1
  [79098fc4] Rmath v0.6.1
  [f50d1b31] Rmath_jll v0.2.2+1
  [992d4aef] Showoff v0.3.1
  [b85f4697] SoftGlobalScope v1.1.0
  [a2af1166] SortingAlgorithms v0.3.1
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.4
  [2913bbd2] StatsBase v0.33.0
  [4c63d2b9] StatsFuns v0.9.5
  [09ab397b] StructArrays v0.4.4
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.5
  [3a884ed6] UnPack v1.0.1
  [81def892] VersionParsing v1.2.0
  [44d3d7a6] Weave v0.10.2
  [efce3f68] WoodburyMatrices v0.5.2
  [02c8fc9c] XML2_jll v2.9.10+1
  [aed1982a] XSLT_jll v1.1.33+2
  [4f6342f7] Xorg_libX11_jll v1.6.9+2
  [0c0b7dd1] Xorg_libXau_jll v1.0.9+2
  [a3789734] Xorg_libXdmcp_jll v1.1.3+2
  [1082639a] Xorg_libXext_jll v1.3.4+2
  [ea2f1a96] Xorg_libXrender_jll v0.9.10+2
  [14d82f49] Xorg_libpthread_stubs_jll v0.1.0+1
  [c7cfdc94] Xorg_libxcb_jll v1.13.0+2
  [c5fb5394] Xorg_xtrans_jll v1.4.0+1
  [ddb6d928] YAML v0.4.0
  [c2297ded] ZMQ v1.2.1
  [8f1865be] ZeroMQ_jll v4.3.2+4
  [83775a58] Zlib_jll v1.2.11+15
  [0ac62f75] libass_jll v0.14.0+3
  [f638f0a6] libfdk_aac_jll v0.1.6+3
  [b53b4c65] libpng_jll v1.6.37+3
  [f27f6e37] libvorbis_jll v1.3.6+5
  [1270edf5] x264_jll v2020.7.14+1
  [dfaa095f] x265_jll v3.0.0+2
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [7b1f6079] FileWatching
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [9abbd945] Profile
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [4607b0f0] SuiteSparse
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
┌ Info: Weaving chunk 1 from line 2
└   progress = 0.0
┌ Info: Weaving chunk 2 from line 6
└   progress = 0.09090909090909091
┌ Info: Weaving chunk 3 from line 12
└   progress = 0.18181818181818182
┌ Info: Weaving chunk 4 from line 19
└   progress = 0.2727272727272727
┌ Info: Weaving chunk 5 from line 25
└   progress = 0.36363636363636365
┌ Info: Weaving chunk 6 from line 31
└   progress = 0.45454545454545453
┌ Info: Weaving chunk 7 from line 36
└   progress = 0.5454545454545454
┌ Info: Weaving chunk 8 from line 41
└   progress = 0.6363636363636364
┌ Info: Weaving chunk 9 from line 47
└   progress = 0.7272727272727273
┌ Info: Weaving chunk 10 from line 51
└   progress = 0.8181818181818182
┌ Info: Weaving chunk 11 from line 55
└   progress = 0.9090909090909091
┌ Info: Weaved all chunks
└   progress = 1
[ Info: Report weaved to /home/pkgeval/.julia/packages/Weave/AL87K/test/documents/chunk_options.md
Chunk options: Test Failed at /home/pkgeval/.julia/packages/Weave/AL87K/test/chunk_options.jl:13
  Expression: result == ref
   Evaluated: "~~~~{.julia}\njulia> y= [2, 5, 12]\n3-element Vector{Int64}:\n  2\n  5\n 12\n\n~~~~~~~~~~~~~\n\n\n\n~~~~{.julia}\njulia> x = 1:10\n1:10\n\njulia> d = Dict(\"Weave\" => \"testing\")\nDict{String,String} with 1 entry:\n  \"Weave\" => \"testing\"\n\njulia> y = [2, 4 ,8]\n3-element Vector{Int64}:\n 2\n 4\n 8\n\n~~~~~~~~~~~~~\n\n\n\n~~~~{.julia}\nx = [12, 10]\nprintln(y)\n~~~~~~~~~~~~~\n\n\n~~~~\n[2, 4, 8]\n~~~~\n\n\n\n~~~~{.julia}\nprintln(x)\n~~~~~~~~~~~~~\n\n\n~~~~\n[12, 10]\n~~~~\n\n\n\n~~~~\nResults without code\n~~~~\n\n\n\n~~~~\n[12, 10]\n~~~~\n\n\n\n~~~~{.julia}\n\ny = randn(5)\nprintln(\"Don't eval, but show code\")\n~~~~~~~~~~~~~\n\n\n~~~~{.julia}\ny = 1:5\nprintln(y)\n~~~~~~~~~~~~~\n\n\n~~~~\n1:5\n~~~~\n\n\n\n~~~~{.julia}\na = \"Don't print me\"\nprintln(a)\n~~~~~~~~~~~~~\n\n\n\n~~~~{.julia}\nprintln(\"No markup for results.\")\n~~~~~~~~~~~~~\n\n\nNo markup for results.\n\n\n\n\nTest wrapping:\n\n~~~~{.julia}\nprintln(collect(0:10:1000))\n~~~~~~~~~~~~~\n\n\n~~~~\n[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, \n170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, \n320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, \n470, 480, 490, 500, 510, 520, 530, 540, 550, 560, 570, 580, 590, 600, 610, \n620, 630, 640, 650, 660, 670, 680, 690, 700, 710, 720, 730, 740, 750, 760, \n770, 780, 790, 800, 810, 820, 830, 840, 850, 860, 870, 880, 890, 900, 910, \n920, 930, 940, 950, 960, 970, 980, 990, 1000]\n~~~~\n\n\n\n~~~~{.julia}\nprintln(collect(0:10:1000))\n~~~~~~~~~~~~~\n\n\n~~~~\n[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500, 510, 520, 530, 540, 550, 560, 570, 580, 590, 600, 610, 620, 630, 640, 650, 660, 670, 680, 690, 700, 710, 720, 730, 740, 750, 760, 770, 780, 790, 800, 810, 820, 830, 840, 850, 860, 870, 880, 890, 900, 910, 920, 930, 940, 950, 960, 970, 980, 990, 1000]\n~~~~\n\n\n\n~~~~{.julia}\nprintln(collect(0:10:1000))\n~~~~~~~~~~~~~\n\n\n~~~~\n[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, \n140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, \n260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, \n380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, \n500, 510, 520, 530, 540, 550, 560, 570, 580, 590, 600, 610, \n620, 630, 640, 650, 660, 670, 680, 690, 700, 710, 720, 730, \n740, 750, 760, 770, 780, 790, 800, 810, 820, 830, 840, 850, \n860, 870, 880, 890, 900, 910, 920, 930, 940, 950, 960, 970, \n980, 990, 1000]\n~~~~\n\n\n" == "~~~~{.julia}\njulia> y= [2, 5, 12]\n3-element Array{Int64,1}:\n  2\n  5\n 12\n\n~~~~~~~~~~~~~\n\n\n\n~~~~{.julia}\njulia> x = 1:10\n1:10\n\njulia> d = Dict(\"Weave\" => \"testing\")\nDict{String,String} with 1 entry:\n  \"Weave\" => \"testing\"\n\njulia> y = [2, 4 ,8]\n3-element Array{Int64,1}:\n 2\n 4\n 8\n\n~~~~~~~~~~~~~\n\n\n\n~~~~{.julia}\nx = [12, 10]\nprintln(y)\n~~~~~~~~~~~~~\n\n\n~~~~\n[2, 4, 8]\n~~~~\n\n\n\n~~~~{.julia}\nprintln(x)\n~~~~~~~~~~~~~\n\n\n~~~~\n[12, 10]\n~~~~\n\n\n\n~~~~\nResults without code\n~~~~\n\n\n\n~~~~\n[12, 10]\n~~~~\n\n\n\n~~~~{.julia}\n\ny = randn(5)\nprintln(\"Don't eval, but show code\")\n~~~~~~~~~~~~~\n\n\n~~~~{.julia}\ny = 1:5\nprintln(y)\n~~~~~~~~~~~~~\n\n\n~~~~\n1:5\n~~~~\n\n\n\n~~~~{.julia}\na = \"Don't print me\"\nprintln(a)\n~~~~~~~~~~~~~\n\n\n\n~~~~{.julia}\nprintln(\"No markup for results.\")\n~~~~~~~~~~~~~\n\n\nNo markup for results.\n\n\n\n\nTest wrapping:\n\n~~~~{.julia}\nprintln(collect(0:10:1000))\n~~~~~~~~~~~~~\n\n\n~~~~\n[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, \n170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, \n320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, \n470, 480, 490, 500, 510, 520, 530, 540, 550, 560, 570, 580, 590, 600, 610, \n620, 630, 640, 650, 660, 670, 680, 690, 700, 710, 720, 730, 740, 750, 760, \n770, 780, 790, 800, 810, 820, 830, 840, 850, 860, 870, 880, 890, 900, 910, \n920, 930, 940, 950, 960, 970, 980, 990, 1000]\n~~~~\n\n\n\n~~~~{.julia}\nprintln(collect(0:10:1000))\n~~~~~~~~~~~~~\n\n\n~~~~\n[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500, 510, 520, 530, 540, 550, 560, 570, 580, 590, 600, 610, 620, 630, 640, 650, 660, 670, 680, 690, 700, 710, 720, 730, 740, 750, 760, 770, 780, 790, 800, 810, 820, 830, 840, 850, 860, 870, 880, 890, 900, 910, 920, 930, 940, 950, 960, 970, 980, 990, 1000]\n~~~~\n\n\n\n~~~~{.julia}\nprintln(collect(0:10:1000))\n~~~~~~~~~~~~~\n\n\n~~~~\n[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, \n140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, \n260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, \n380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, \n500, 510, 520, 530, 540, 550, 560, 570, 580, 590, 600, 610, \n620, 630, 640, 650, 660, 670, 680, 690, 700, 710, 720, 730, \n740, 750, 760, 770, 780, 790, 800, 810, 820, 830, 840, 850, \n860, 870, 880, 890, 900, 910, 920, 930, 940, 950, 960, 970, \n980, 990, 1000]\n~~~~\n\n\n"
Stacktrace:
 [1] top-level scope
   @ ~/.julia/packages/Weave/AL87K/test/chunk_options.jl:13
 [2] include(fname::String)
   @ Base.MainInclude ./client.jl:443
 [3] top-level scope
   @ ~/.julia/packages/Weave/AL87K/test/runtests.jl:20
 [4] top-level scope
   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
 [5] top-level scope
   @ ~/.julia/packages/Weave/AL87K/test/runtests.jl:20
 [6] top-level scope
   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
 [7] top-level scope
   @ ~/.julia/packages/Weave/AL87K/test/runtests.jl:19
[ Info: Writing to file documents/tangle/chunk_options.jl
┌ Info: Weaving chunk 1 from line 1
└   progress = 0.0
┌ Info: Weaved all chunks
└   progress = 1
┌ Info: Weaving chunk 1 from line 1
└   progress = 0.0
┌ Info: Weaved all chunks
└   progress = 1
┌ Info: Weaved all chunks
└   progress = 1
┌ Info: Weaved all chunks
└   progress = 1
┌ Info: Weaved all chunks
└   progress = 1
┌ Info: Weaved all chunks
└   progress = 1
┌ Info: Weaving chunk 1 from line 1
└   progress = 0.0
┌ Warning: ERROR: ArgumentError occurred, including output in Weaved document
└ @ Weave ~/.julia/packages/Weave/AL87K/src/run.jl:248
┌ Info: Weaving chunk 2 from line 5
└   progress = 0.3333333333333333
┌ Warning: ERROR: ErrorException occurred, including output in Weaved document
└ @ Weave ~/.julia/packages/Weave/AL87K/src/run.jl:248
┌ Info: Weaving chunk 3 from line 9
└   progress = 0.6666666666666666
┌ Warning: ERROR: UndefVarError occurred, including output in Weaved document
└ @ Weave ~/.julia/packages/Weave/AL87K/src/run.jl:248
┌ Warning: ERROR: ErrorException occurred, including output in Weaved document
└ @ Weave ~/.julia/packages/Weave/AL87K/src/run.jl:248
┌ Info: Weaved all chunks
└   progress = 1
┌ Info: Weaving chunk 1 from line 1
└   progress = 0.0
┌ Info: Weaved all chunks
└   progress = 1
┌ Info: Weaving chunk 1 from line 1
└   progress = 0.0
┌ Info: Weaved all chunks
└   progress = 1
┌ Info: Weaving chunk 1 from line 1
└   progress = 0.0
┌ Warning: ERROR: UndefVarError occurred, including output in Weaved document
└ @ Weave ~/.julia/packages/Weave/AL87K/src/run.jl:248
┌ Info: Weaved all chunks
└   progress = 1
┌ Info: Weaving chunk 1 from line 2
└   progress = 0.0
┌ Info: Weaving chunk 2 from line 6
└   progress = 0.09090909090909091
┌ Info: Weaving chunk 3 from line 12
└   progress = 0.18181818181818182
┌ Info: Weaving chunk 4 from line 19
└   progress = 0.2727272727272727
┌ Info: Weaving chunk 5 from line 25
└   progress = 0.36363636363636365
┌ Info: Weaving chunk 6 from line 31
└   progress = 0.45454545454545453
┌ Info: Weaving chunk 7 from line 36
└   progress = 0.5454545454545454
┌ Info: Weaving chunk 8 from line 41
└   progress = 0.6363636363636364
┌ Info: Weaving chunk 9 from line 47
└   progress = 0.7272727272727273
┌ Info: Weaving chunk 10 from line 51
└   progress = 0.8181818181818182
┌ Info: Weaving chunk 11 from line 55
└   progress = 0.9090909090909091
┌ Info: Weaved all chunks
└   progress = 1
┌ Info: Weaving chunk 1 from line 2
└   progress = 0.0
┌ Info: Weaving chunk 2 from line 6
└   progress = 0.09090909090909091
┌ Info: Weaving chunk 3 from line 12
└   progress = 0.18181818181818182
┌ Info: Weaving chunk 4 from line 19
└   progress = 0.2727272727272727
┌ Info: Weaving chunk 5 from line 25
└   progress = 0.36363636363636365
┌ Info: Weaving chunk 6 from line 31
└   progress = 0.45454545454545453
┌ Info: Weaving chunk 7 from line 36
└   progress = 0.5454545454545454
┌ Info: Weaving chunk 8 from line 41
└   progress = 0.6363636363636364
┌ Info: Weaving chunk 9 from line 47
└   progress = 0.7272727272727273
┌ Info: Weaving chunk 10 from line 51
└   progress = 0.8181818181818182
┌ Info: Weaving chunk 11 from line 55
└   progress = 0.9090909090909091
┌ Info: Weaved all chunks
└   progress = 1
┌ Info: Weaving chunk 1 from line 3
└   progress = 0.0
┌ Info: Weaving chunk 2 from line 15
└   progress = 0.5
┌ Info: Weaved all chunks
└   progress = 1
┌ Info: Weaving chunk 1 from line 3
└   progress = 0.0
┌ Info: Weaving chunk 2 from line 15
└   progress = 0.5
┌ Info: Weaved all chunks
└   progress = 1
┌ Info: Weaving chunk 1 from line 3
└   progress = 0.0
┌ Info: Weaving chunk 2 from line 15
└   progress = 0.5
┌ Info: Weaved all chunks
└   progress = 1
┌ Info: Weaving chunk 1 from line 1
└   progress = 0.0
┌ Info: Weaved all chunks
└   progress = 1
┌ Info: Weaving chunk 1 from line 1
└   progress = 0.0
┌ Info: Weaved all chunks
└   progress = 1
┌ Info: Weaving chunk 1 from line 3
└   progress = 0.0
┌ Info: Weaving chunk 2 from line 43
└   progress = 0.25
┌ Info: Weaving chunk 3 from line 48
└   progress = 0.5
┌ Info: Weaving chunk 4 from line 54
└   progress = 0.75
┌ Info: Weaved all chunks
└   progress = 1
[ Info: Report weaved to documents/multimedia/rich_output.html
Rich output: Test Failed at /home/pkgeval/.julia/packages/Weave/AL87K/test/rich_output.jl:11
  Expression: result == ref
   Evaluated: "\n\n<pre class='hljl'>\n<span class='hljl-k'>import</span><span class='hljl-t'> </span><span class='hljl-n'>Base</span><span class='hljl-t'>\n</span><span class='hljl-k'>function</span><span class='hljl-t'> </span><span class='hljl-n'>Base</span><span class='hljl-oB'>.</span><span class='hljl-nf'>show</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-oB'>::</span><span class='hljl-n'>IO</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>m</span><span class='hljl-oB'>::</span><span class='hljl-so'>MIME&quot;text/html&quot;</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>x</span><span class='hljl-oB'>::</span><span class='hljl-n'>Array</span><span class='hljl-p'>)</span><span class='hljl-t'>\n    </span><span class='hljl-nf'>print</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;&lt;table&gt;&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n    </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>i</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-nf'>size</span><span class='hljl-p'>(</span><span class='hljl-n'>x</span><span class='hljl-p'>,</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-t'>\n        </span><span class='hljl-nf'>print</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;&lt;tr&gt;&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n        </span><span class='hljl-p'>[</span><span class='hljl-nf'>print</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;&lt;td&gt;</span><span class='hljl-si'>\$r</span><span class='hljl-s'>&lt;/td&gt;&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>r</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-n'>x</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-p'>,</span><span class='hljl-oB'>:</span><span class='hljl-p'>]]</span><span class='hljl-t'>\n        </span><span class='hljl-nf'>print</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;&lt;/tr&gt;&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n    </span><span class='hljl-k'>end</span><span class='hljl-t'>\n    </span><span class='hljl-nf'>print</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;&lt;/table&gt;&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n</span><span class='hljl-k'>end</span><span class='hljl-t'>\n\n</span><span class='hljl-cs'>#This isn&#39;t valid latex, doesn&#39;t matter for the test</span><span class='hljl-t'>\n</span><span class='hljl-k'>function</span><span class='hljl-t'> </span><span class='hljl-n'>Base</span><span class='hljl-oB'>.</span><span class='hljl-nf'>show</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-oB'>::</span><span class='hljl-n'>IO</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>m</span><span class='hljl-oB'>::</span><span class='hljl-so'>MIME&quot;text/latex&quot;</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>x</span><span class='hljl-oB'>::</span><span class='hljl-n'>Array</span><span class='hljl-p'>)</span><span class='hljl-t'>\n    </span><span class='hljl-nf'>println</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;</span><span class='hljl-se'>\\\\</span><span class='hljl-s'>begin{tabular}&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n    </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>i</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-nf'>size</span><span class='hljl-p'>(</span><span class='hljl-n'>x</span><span class='hljl-p'>,</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-t'>\n        </span><span class='hljl-p'>[</span><span class='hljl-nf'>print</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;</span><span class='hljl-si'>\$r</span><span class='hljl-s'> &amp; &quot;</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>r</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-n'>x</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-p'>,</span><span class='hljl-oB'>:</span><span class='hljl-p'>]]</span><span class='hljl-t'>\n        </span><span class='hljl-nf'>print</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;</span><span class='hljl-se'>\\\\\\\\</span><span class='hljl-s'>&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n        </span><span class='hljl-nf'>println</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot; </span><span class='hljl-se'>\\\\</span><span class='hljl-s'>hline&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n    </span><span class='hljl-k'>end</span><span class='hljl-t'>\n    </span><span class='hljl-nf'>print</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;</span><span class='hljl-se'>\\\\</span><span class='hljl-s'>end{tabular&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n</span><span class='hljl-k'>end</span><span class='hljl-t'>\n\n</span><span class='hljl-cs'>#This isn&#39;t valid markdown, doesn&#39;t matter for the test</span><span class='hljl-t'>\n</span><span class='hljl-k'>function</span><span class='hljl-t'> </span><span class='hljl-n'>Base</span><span class='hljl-oB'>.</span><span class='hljl-nf'>show</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-oB'>::</span><span class='hljl-n'>IO</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>m</span><span class='hljl-oB'>::</span><span class='hljl-so'>MIME&quot;text/markdown&quot;</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>x</span><span class='hljl-oB'>::</span><span class='hljl-n'>Array</span><span class='hljl-p'>)</span><span class='hljl-t'>\n    </span><span class='hljl-nf'>println</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;-----&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n    </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>i</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-nf'>size</span><span class='hljl-p'>(</span><span class='hljl-n'>x</span><span class='hljl-p'>,</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-t'>\n        </span><span class='hljl-nf'>print</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;| &quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n        </span><span class='hljl-p'>[</span><span class='hljl-nf'>print</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;</span><span class='hljl-si'>\$r</span><span class='hljl-s'> | &quot;</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>r</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-n'>x</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-p'>,</span><span class='hljl-oB'>:</span><span class='hljl-p'>]]</span><span class='hljl-t'>\n        </span><span class='hljl-nf'>println</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n    </span><span class='hljl-k'>end</span><span class='hljl-t'>\n    </span><span class='hljl-nf'>print</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;-----&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n</span><span class='hljl-k'>end</span><span class='hljl-t'>\n\n\n</span><span class='hljl-n'>x</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-p'>[</span><span class='hljl-nf'>collect</span><span class='hljl-p'>(</span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-ni'>3</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-nf'>collect</span><span class='hljl-p'>(</span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-ni'>3</span><span class='hljl-p'>)]</span><span class='hljl-t'>\n</span><span class='hljl-n'>ca</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>collect</span><span class='hljl-p'>(</span><span class='hljl-sc'>&#39;a&#39;</span><span class='hljl-oB'>:</span><span class='hljl-sc'>&#39;d&#39;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n</span><span class='hljl-n'>ca</span>\n</pre>\n\n\n\n<table><tr><td>a</td></tr><tr><td>b</td></tr><tr><td>c</td></tr><tr><td>d</td></tr></table>\n\n\n<pre class='hljl'>\n<span class='hljl-nf'>display</span><span class='hljl-p'>(</span><span class='hljl-n'>ca</span><span class='hljl-p'>)</span><span class='hljl-t'>\n</span><span class='hljl-nf'>display</span><span class='hljl-p'>(</span><span class='hljl-n'>x</span><span class='hljl-p'>)</span>\n</pre>\n\n\n\n<table><tr><td>a</td></tr><tr><td>b</td></tr><tr><td>c</td></tr><tr><td>d</td></tr></table>\n<table><tr><td>1</td><td>1</td></tr><tr><td>2</td><td>2</td></tr><tr><td>3</td><td>3</td></tr></table>\n\n<pre class='hljl'>\n<span class='hljl-nB'>julia&gt; </span><span class='hljl-n'>x</span><span class='hljl-t'>\n3×2 Matrix{Int64}:\n 1  1\n 2  2\n 3  3\n\n</span><span class='hljl-nB'>julia&gt; </span><span class='hljl-n'>ca</span><span class='hljl-t'>\n4-element Vector{Char}:\n &#39;a&#39;: ASCII/Unicode U+0061 (category Ll: Letter, lowercase)\n &#39;b&#39;: ASCII/Unicode U+0062 (category Ll: Letter, lowercase)\n &#39;c&#39;: ASCII/Unicode U+0063 (category Ll: Letter, lowercase)\n &#39;d&#39;: ASCII/Unicode U+0064 (category Ll: Letter, lowercase)</span>\n</pre>\n\n\n<pre class='hljl'>\n<span class='hljl-k'>using</span><span class='hljl-t'> </span><span class='hljl-n'>Markdown</span><span class='hljl-t'>\n</span><span class='hljl-n'>m</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>Markdown</span><span class='hljl-oB'>.</span><span class='hljl-nf'>parse</span><span class='hljl-p'>(</span><span class='hljl-s'>&quot;**Some Markdown**&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n</span><span class='hljl-n'>m</span>\n</pre>\n\n\n\n<div class=\"markdown\"><p><strong>Some Markdown</strong></p>\n</div>\n\n" == "\n\n<pre class='hljl'>\n<span class='hljl-k'>import</span><span class='hljl-t'> </span><span class='hljl-n'>Base</span><span class='hljl-t'>\n</span><span class='hljl-k'>function</span><span class='hljl-t'> </span><span class='hljl-n'>Base</span><span class='hljl-oB'>.</span><span class='hljl-nf'>show</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-oB'>::</span><span class='hljl-n'>IO</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>m</span><span class='hljl-oB'>::</span><span class='hljl-so'>MIME&quot;text/html&quot;</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>x</span><span class='hljl-oB'>::</span><span class='hljl-n'>Array</span><span class='hljl-p'>)</span><span class='hljl-t'>\n    </span><span class='hljl-nf'>print</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;&lt;table&gt;&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n    </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>i</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-nf'>size</span><span class='hljl-p'>(</span><span class='hljl-n'>x</span><span class='hljl-p'>,</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-t'>\n        </span><span class='hljl-nf'>print</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;&lt;tr&gt;&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n        </span><span class='hljl-p'>[</span><span class='hljl-nf'>print</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;&lt;td&gt;</span><span class='hljl-si'>\$r</span><span class='hljl-s'>&lt;/td&gt;&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>r</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-n'>x</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-p'>,</span><span class='hljl-oB'>:</span><span class='hljl-p'>]]</span><span class='hljl-t'>\n        </span><span class='hljl-nf'>print</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;&lt;/tr&gt;&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n    </span><span class='hljl-k'>end</span><span class='hljl-t'>\n    </span><span class='hljl-nf'>print</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;&lt;/table&gt;&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n</span><span class='hljl-k'>end</span><span class='hljl-t'>\n\n</span><span class='hljl-cs'>#This isn&#39;t valid latex, doesn&#39;t matter for the test</span><span class='hljl-t'>\n</span><span class='hljl-k'>function</span><span class='hljl-t'> </span><span class='hljl-n'>Base</span><span class='hljl-oB'>.</span><span class='hljl-nf'>show</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-oB'>::</span><span class='hljl-n'>IO</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>m</span><span class='hljl-oB'>::</span><span class='hljl-so'>MIME&quot;text/latex&quot;</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>x</span><span class='hljl-oB'>::</span><span class='hljl-n'>Array</span><span class='hljl-p'>)</span><span class='hljl-t'>\n    </span><span class='hljl-nf'>println</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;</span><span class='hljl-se'>\\\\</span><span class='hljl-s'>begin{tabular}&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n    </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>i</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-nf'>size</span><span class='hljl-p'>(</span><span class='hljl-n'>x</span><span class='hljl-p'>,</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-t'>\n        </span><span class='hljl-p'>[</span><span class='hljl-nf'>print</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;</span><span class='hljl-si'>\$r</span><span class='hljl-s'> &amp; &quot;</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>r</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-n'>x</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-p'>,</span><span class='hljl-oB'>:</span><span class='hljl-p'>]]</span><span class='hljl-t'>\n        </span><span class='hljl-nf'>print</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;</span><span class='hljl-se'>\\\\\\\\</span><span class='hljl-s'>&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n        </span><span class='hljl-nf'>println</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot; </span><span class='hljl-se'>\\\\</span><span class='hljl-s'>hline&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n    </span><span class='hljl-k'>end</span><span class='hljl-t'>\n    </span><span class='hljl-nf'>print</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;</span><span class='hljl-se'>\\\\</span><span class='hljl-s'>end{tabular&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n</span><span class='hljl-k'>end</span><span class='hljl-t'>\n\n</span><span class='hljl-cs'>#This isn&#39;t valid markdown, doesn&#39;t matter for the test</span><span class='hljl-t'>\n</span><span class='hljl-k'>function</span><span class='hljl-t'> </span><span class='hljl-n'>Base</span><span class='hljl-oB'>.</span><span class='hljl-nf'>show</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-oB'>::</span><span class='hljl-n'>IO</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>m</span><span class='hljl-oB'>::</span><span class='hljl-so'>MIME&quot;text/markdown&quot;</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>x</span><span class='hljl-oB'>::</span><span class='hljl-n'>Array</span><span class='hljl-p'>)</span><span class='hljl-t'>\n    </span><span class='hljl-nf'>println</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;-----&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n    </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>i</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-nf'>size</span><span class='hljl-p'>(</span><span class='hljl-n'>x</span><span class='hljl-p'>,</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-t'>\n        </span><span class='hljl-nf'>print</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;| &quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n        </span><span class='hljl-p'>[</span><span class='hljl-nf'>print</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;</span><span class='hljl-si'>\$r</span><span class='hljl-s'> | &quot;</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>r</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-n'>x</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-p'>,</span><span class='hljl-oB'>:</span><span class='hljl-p'>]]</span><span class='hljl-t'>\n        </span><span class='hljl-nf'>println</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n    </span><span class='hljl-k'>end</span><span class='hljl-t'>\n    </span><span class='hljl-nf'>print</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;-----&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n</span><span class='hljl-k'>end</span><span class='hljl-t'>\n\n\n</span><span class='hljl-n'>x</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-p'>[</span><span class='hljl-nf'>collect</span><span class='hljl-p'>(</span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-ni'>3</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-nf'>collect</span><span class='hljl-p'>(</span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-ni'>3</span><span class='hljl-p'>)]</span><span class='hljl-t'>\n</span><span class='hljl-n'>ca</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>collect</span><span class='hljl-p'>(</span><span class='hljl-sc'>&#39;a&#39;</span><span class='hljl-oB'>:</span><span class='hljl-sc'>&#39;d&#39;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n</span><span class='hljl-n'>ca</span>\n</pre>\n\n\n\n<table><tr><td>a</td></tr><tr><td>b</td></tr><tr><td>c</td></tr><tr><td>d</td></tr></table>\n\n\n<pre class='hljl'>\n<span class='hljl-nf'>display</span><span class='hljl-p'>(</span><span class='hljl-n'>ca</span><span class='hljl-p'>)</span><span class='hljl-t'>\n</span><span class='hljl-nf'>display</span><span class='hljl-p'>(</span><span class='hljl-n'>x</span><span class='hljl-p'>)</span>\n</pre>\n\n\n\n<table><tr><td>a</td></tr><tr><td>b</td></tr><tr><td>c</td></tr><tr><td>d</td></tr></table>\n<table><tr><td>1</td><td>1</td></tr><tr><td>2</td><td>2</td></tr><tr><td>3</td><td>3</td></tr></table>\n\n<pre class='hljl'>\n<span class='hljl-nB'>julia&gt; </span><span class='hljl-n'>x</span><span class='hljl-t'>\n3×2 Array{Int64,2}:\n 1  1\n 2  2\n 3  3\n\n</span><span class='hljl-nB'>julia&gt; </span><span class='hljl-n'>ca</span><span class='hljl-t'>\n4-element Array{Char,1}:\n &#39;a&#39;\n &#39;b&#39;\n &#39;c&#39;\n &#39;d&#39;</span>\n</pre>\n\n\n<pre class='hljl'>\n<span class='hljl-k'>using</span><span class='hljl-t'> </span><span class='hljl-n'>Markdown</span><span class='hljl-t'>\n</span><span class='hljl-n'>m</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>Markdown</span><span class='hljl-oB'>.</span><span class='hljl-nf'>parse</span><span class='hljl-p'>(</span><span class='hljl-s'>&quot;**Some Markdown**&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n</span><span class='hljl-n'>m</span>\n</pre>\n\n\n\n<div class=\"markdown\"><p><strong>Some Markdown</strong></p>\n</div>\n\n"
Stacktrace:
 [1] mmtest(source::String, resfile::String, doctype::String)
   @ Main ~/.julia/packages/Weave/AL87K/test/rich_output.jl:11
 [2] top-level scope
   @ ~/.julia/packages/Weave/AL87K/test/rich_output.jl:15
 [3] include(fname::String)
   @ Base.MainInclude ./client.jl:443
 [4] top-level scope
   @ ~/.julia/packages/Weave/AL87K/test/runtests.jl:50
 [5] top-level scope
   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
 [6] top-level scope
   @ ~/.julia/packages/Weave/AL87K/test/runtests.jl:50
 [7] top-level scope
   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
 [8] top-level scope
   @ ~/.julia/packages/Weave/AL87K/test/runtests.jl:19
┌ Info: Weaving chunk 1 from line 3
└   progress = 0.0
┌ Info: Weaving chunk 2 from line 43
└   progress = 0.25
┌ Info: Weaving chunk 3 from line 48
└   progress = 0.5
┌ Info: Weaving chunk 4 from line 54
└   progress = 0.75
┌ Info: Weaved all chunks
└   progress = 1
[ Info: Report weaved to documents/multimedia/rich_output.md
Rich output: Test Failed at /home/pkgeval/.julia/packages/Weave/AL87K/test/rich_output.jl:11
  Expression: result == ref
   Evaluated: "~~~~{.julia}\nimport Base\nfunction Base.show(io::IO, m::MIME\"text/html\", x::Array)\n    print(io, \"<table>\")\n    for i in 1:size(x,1)\n        print(io, \"<tr>\")\n        [print(io, \"<td>\$r</td>\") for r in x[i,:]]\n        print(io, \"</tr>\")\n    end\n    print(io, \"</table>\")\nend\n\n#This isn't valid latex, doesn't matter for the test\nfunction Base.show(io::IO, m::MIME\"text/latex\", x::Array)\n    println(io, \"\\\\begin{tabular}\")\n    for i in 1:size(x,1)\n        [print(io, \"\$r & \") for r in x[i,:]]\n        print(io, \"\\\\\\\\\")\n        println(io, \" \\\\hline\")\n    end\n    print(io, \"\\\\end{tabular\")\nend\n\n#This isn't valid markdown, doesn't matter for the test\nfunction Base.show(io::IO, m::MIME\"text/markdown\", x::Array)\n    println(io, \"-----\")\n    for i in 1:size(x,1)\n        print(io, \"| \")\n        [print(io, \"\$r | \") for r in x[i,:]]\n        println(io, \"\")\n    end\n    print(io, \"-----\")\nend\n\n\nx = [collect(1:3) collect(1:3)]\nca = collect('a':'d')\nca\n~~~~~~~~~~~~~\n\n\n\n-----\n| a | \n| b | \n| c | \n| d | \n-----\n\n~~~~{.julia}\ndisplay(ca)\ndisplay(x)\n~~~~~~~~~~~~~\n\n\n\n-----\n| a | \n| b | \n| c | \n| d | \n-----\n-----\n| 1 | 1 | \n| 2 | 2 | \n| 3 | 3 | \n-----\n\n~~~~{.julia}\njulia> x\n3×2 Matrix{Int64}:\n 1  1\n 2  2\n 3  3\n\njulia> ca\n4-element Vector{Char}:\n 'a': ASCII/Unicode U+0061 (category Ll: Letter, lowercase)\n 'b': ASCII/Unicode U+0062 (category Ll: Letter, lowercase)\n 'c': ASCII/Unicode U+0063 (category Ll: Letter, lowercase)\n 'd': ASCII/Unicode U+0064 (category Ll: Letter, lowercase)\n\n~~~~~~~~~~~~~\n\n\n\n~~~~{.julia}\nusing Markdown\nm = Markdown.parse(\"**Some Markdown**\")\nm\n~~~~~~~~~~~~~\n\n\n\n**Some Markdown**\n\n" == "~~~~{.julia}\nimport Base\nfunction Base.show(io::IO, m::MIME\"text/html\", x::Array)\n    print(io, \"<table>\")\n    for i in 1:size(x,1)\n        print(io, \"<tr>\")\n        [print(io, \"<td>\$r</td>\") for r in x[i,:]]\n        print(io, \"</tr>\")\n    end\n    print(io, \"</table>\")\nend\n\n#This isn't valid latex, doesn't matter for the test\nfunction Base.show(io::IO, m::MIME\"text/latex\", x::Array)\n    println(io, \"\\\\begin{tabular}\")\n    for i in 1:size(x,1)\n        [print(io, \"\$r & \") for r in x[i,:]]\n        print(io, \"\\\\\\\\\")\n        println(io, \" \\\\hline\")\n    end\n    print(io, \"\\\\end{tabular\")\nend\n\n#This isn't valid markdown, doesn't matter for the test\nfunction Base.show(io::IO, m::MIME\"text/markdown\", x::Array)\n    println(io, \"-----\")\n    for i in 1:size(x,1)\n        print(io, \"| \")\n        [print(io, \"\$r | \") for r in x[i,:]]\n        println(io, \"\")\n    end\n    print(io, \"-----\")\nend\n\n\nx = [collect(1:3) collect(1:3)]\nca = collect('a':'d')\nca\n~~~~~~~~~~~~~\n\n\n\n-----\n| a | \n| b | \n| c | \n| d | \n-----\n\n~~~~{.julia}\ndisplay(ca)\ndisplay(x)\n~~~~~~~~~~~~~\n\n\n\n-----\n| a | \n| b | \n| c | \n| d | \n-----\n-----\n| 1 | 1 | \n| 2 | 2 | \n| 3 | 3 | \n-----\n\n~~~~{.julia}\njulia> x\n3×2 Array{Int64,2}:\n 1  1\n 2  2\n 3  3\n\njulia> ca\n4-element Array{Char,1}:\n 'a'\n 'b'\n 'c'\n 'd'\n\n~~~~~~~~~~~~~\n\n\n\n~~~~{.julia}\nusing Markdown\nm = Markdown.parse(\"**Some Markdown**\")\nm\n~~~~~~~~~~~~~\n\n\n\n**Some Markdown**\n\n"
Stacktrace:
 [1] mmtest(source::String, resfile::String, doctype::String)
   @ Main ~/.julia/packages/Weave/AL87K/test/rich_output.jl:11
 [2] top-level scope
   @ ~/.julia/packages/Weave/AL87K/test/rich_output.jl:16
 [3] include(fname::String)
   @ Base.MainInclude ./client.jl:443
 [4] top-level scope
   @ ~/.julia/packages/Weave/AL87K/test/runtests.jl:50
 [5] top-level scope
   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
 [6] top-level scope
   @ ~/.julia/packages/Weave/AL87K/test/runtests.jl:50
 [7] top-level scope
   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
 [8] top-level scope
   @ ~/.julia/packages/Weave/AL87K/test/runtests.jl:19
┌ Info: Weaving chunk 1 from line 3
└   progress = 0.0
┌ Info: Weaving chunk 2 from line 43
└   progress = 0.25
┌ Info: Weaving chunk 3 from line 48
└   progress = 0.5
┌ Info: Weaving chunk 4 from line 54
└   progress = 0.75
┌ Info: Weaved all chunks
└   progress = 1
[ Info: Report weaved to documents/multimedia/rich_output.tex
Rich output: Test Failed at /home/pkgeval/.julia/packages/Weave/AL87K/test/rich_output.jl:11
  Expression: result == ref
   Evaluated: "\\begin{juliacode}\nimport Base\nfunction Base.show(io::IO, m::MIME\"text/html\", x::Array)\n    print(io, \"<table>\")\n    for i in 1:size(x,1)\n        print(io, \"<tr>\")\n        [print(io, \"<td>\$r</td>\") for r in x[i,:]]\n        print(io, \"</tr>\")\n    end\n    print(io, \"</table>\")\nend\n\n#This isn't valid latex, doesn't matter for the test\nfunction Base.show(io::IO, m::MIME\"text/latex\", x::Array)\n    println(io, \"\\\\begin{tabular}\")\n    for i in 1:size(x,1)\n        [print(io, \"\$r & \") for r in x[i,:]]\n        print(io, \"\\\\\\\\\")\n        println(io, \" \\\\hline\")\n    end\n    print(io, \"\\\\end{tabular\")\nend\n\n#This isn't valid markdown, doesn't matter for the test\nfunction Base.show(io::IO, m::MIME\"text/markdown\", x::Array)\n    println(io, \"-----\")\n    for i in 1:size(x,1)\n        print(io, \"| \")\n        [print(io, \"\$r | \") for r in x[i,:]]\n        println(io, \"\")\n    end\n    print(io, \"-----\")\nend\n\n\nx = [collect(1:3) collect(1:3)]\nca = collect('a':'d')\nca\n\\end{juliacode}\n\n\\begin{tabular}\na & \\\\ \\hline\nb & \\\\ \\hline\nc & \\\\ \\hline\nd & \\\\ \\hline\n\\end{tabular\n\n\\begin{juliacode}\ndisplay(ca)\ndisplay(x)\n\\end{juliacode}\n\n\\begin{tabular}\na & \\\\ \\hline\nb & \\\\ \\hline\nc & \\\\ \\hline\nd & \\\\ \\hline\n\\end{tabular\n\\begin{tabular}\n1 & 1 & \\\\ \\hline\n2 & 2 & \\\\ \\hline\n3 & 3 & \\\\ \\hline\n\\end{tabular\n\n\\begin{juliaterm}\njulia> x\n3×2 Matrix{Int64}:\n 1  1\n 2  2\n 3  3\n\njulia> ca\n4-element Vector{Char}:\n 'a': ASCII/Unicode U+0061 (category Ll: Letter, lowercase)\n 'b': ASCII/Unicode U+0062 (category Ll: Letter, lowercase)\n 'c': ASCII/Unicode U+0063 (category Ll: Letter, lowercase)\n 'd': ASCII/Unicode U+0064 (category Ll: Letter, lowercase)\n\n\\end{juliaterm}\n\n\\begin{juliacode}\nusing Markdown\nm = Markdown.parse(\"**Some Markdown**\")\nm\n\\end{juliacode}\n\n\\textbf{Some Markdown}\n\n\n" == "\\begin{juliacode}\nimport Base\nfunction Base.show(io::IO, m::MIME\"text/html\", x::Array)\n    print(io, \"<table>\")\n    for i in 1:size(x,1)\n        print(io, \"<tr>\")\n        [print(io, \"<td>\$r</td>\") for r in x[i,:]]\n        print(io, \"</tr>\")\n    end\n    print(io, \"</table>\")\nend\n\n#This isn't valid latex, doesn't matter for the test\nfunction Base.show(io::IO, m::MIME\"text/latex\", x::Array)\n    println(io, \"\\\\begin{tabular}\")\n    for i in 1:size(x,1)\n        [print(io, \"\$r & \") for r in x[i,:]]\n        print(io, \"\\\\\\\\\")\n        println(io, \" \\\\hline\")\n    end\n    print(io, \"\\\\end{tabular\")\nend\n\n#This isn't valid markdown, doesn't matter for the test\nfunction Base.show(io::IO, m::MIME\"text/markdown\", x::Array)\n    println(io, \"-----\")\n    for i in 1:size(x,1)\n        print(io, \"| \")\n        [print(io, \"\$r | \") for r in x[i,:]]\n        println(io, \"\")\n    end\n    print(io, \"-----\")\nend\n\n\nx = [collect(1:3) collect(1:3)]\nca = collect('a':'d')\nca\n\\end{juliacode}\n\n\\begin{tabular}\na & \\\\ \\hline\nb & \\\\ \\hline\nc & \\\\ \\hline\nd & \\\\ \\hline\n\\end{tabular\n\n\\begin{juliacode}\ndisplay(ca)\ndisplay(x)\n\\end{juliacode}\n\n\\begin{tabular}\na & \\\\ \\hline\nb & \\\\ \\hline\nc & \\\\ \\hline\nd & \\\\ \\hline\n\\end{tabular\n\\begin{tabular}\n1 & 1 & \\\\ \\hline\n2 & 2 & \\\\ \\hline\n3 & 3 & \\\\ \\hline\n\\end{tabular\n\n\\begin{juliaterm}\njulia> x\n3×2 Array{Int64,2}:\n 1  1\n 2  2\n 3  3\n\njulia> ca\n4-element Array{Char,1}:\n 'a'\n 'b'\n 'c'\n 'd'\n\n\\end{juliaterm}\n\n\\begin{juliacode}\nusing Markdown\nm = Markdown.parse(\"**Some Markdown**\")\nm\n\\end{juliacode}\n\n\\textbf{Some Markdown}\n\n\n"
Stacktrace:
 [1] mmtest(source::String, resfile::String, doctype::String)
   @ Main ~/.julia/packages/Weave/AL87K/test/rich_output.jl:11
 [2] top-level scope
   @ ~/.julia/packages/Weave/AL87K/test/rich_output.jl:17
 [3] include(fname::String)
   @ Base.MainInclude ./client.jl:443
 [4] top-level scope
   @ ~/.julia/packages/Weave/AL87K/test/runtests.jl:50
 [5] top-level scope
   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
 [6] top-level scope
   @ ~/.julia/packages/Weave/AL87K/test/runtests.jl:50
 [7] top-level scope
   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
 [8] top-level scope
   @ ~/.julia/packages/Weave/AL87K/test/runtests.jl:19
┌ Info: Weaving chunk 1 from line 3
└   progress = 0.0
┌ Info: Weaving chunk 2 from line 43
└   progress = 0.25
┌ Info: Weaving chunk 3 from line 48
└   progress = 0.5
┌ Info: Weaving chunk 4 from line 54
└   progress = 0.75
┌ Info: Weaved all chunks
└   progress = 1
[ Info: Report weaved to documents/multimedia/rich_output.github
Rich output: Test Failed at /home/pkgeval/.julia/packages/Weave/AL87K/test/rich_output.jl:11
  Expression: result == ref
   Evaluated: "````julia\nimport Base\nfunction Base.show(io::IO, m::MIME\"text/html\", x::Array)\n    print(io, \"<table>\")\n    for i in 1:size(x,1)\n        print(io, \"<tr>\")\n        [print(io, \"<td>\$r</td>\") for r in x[i,:]]\n        print(io, \"</tr>\")\n    end\n    print(io, \"</table>\")\nend\n\n#This isn't valid latex, doesn't matter for the test\nfunction Base.show(io::IO, m::MIME\"text/latex\", x::Array)\n    println(io, \"\\\\begin{tabular}\")\n    for i in 1:size(x,1)\n        [print(io, \"\$r & \") for r in x[i,:]]\n        print(io, \"\\\\\\\\\")\n        println(io, \" \\\\hline\")\n    end\n    print(io, \"\\\\end{tabular\")\nend\n\n#This isn't valid markdown, doesn't matter for the test\nfunction Base.show(io::IO, m::MIME\"text/markdown\", x::Array)\n    println(io, \"-----\")\n    for i in 1:size(x,1)\n        print(io, \"| \")\n        [print(io, \"\$r | \") for r in x[i,:]]\n        println(io, \"\")\n    end\n    print(io, \"-----\")\nend\n\n\nx = [collect(1:3) collect(1:3)]\nca = collect('a':'d')\nca\n````\n\n\n\n-----\n| a | \n| b | \n| c | \n| d | \n-----\n\n````julia\ndisplay(ca)\ndisplay(x)\n````\n\n\n\n-----\n| a | \n| b | \n| c | \n| d | \n-----\n-----\n| 1 | 1 | \n| 2 | 2 | \n| 3 | 3 | \n-----\n\n````julia\njulia> x\n3×2 Matrix{Int64}:\n 1  1\n 2  2\n 3  3\n\njulia> ca\n4-element Vector{Char}:\n 'a': ASCII/Unicode U+0061 (category Ll: Letter, lowercase)\n 'b': ASCII/Unicode U+0062 (category Ll: Letter, lowercase)\n 'c': ASCII/Unicode U+0063 (category Ll: Letter, lowercase)\n 'd': ASCII/Unicode U+0064 (category Ll: Letter, lowercase)\n\n````\n\n\n\n````julia\nusing Markdown\nm = Markdown.parse(\"**Some Markdown**\")\nm\n````\n\n\n\n**Some Markdown**\n\n" == "````julia\nimport Base\nfunction Base.show(io::IO, m::MIME\"text/html\", x::Array)\n    print(io, \"<table>\")\n    for i in 1:size(x,1)\n        print(io, \"<tr>\")\n        [print(io, \"<td>\$r</td>\") for r in x[i,:]]\n        print(io, \"</tr>\")\n    end\n    print(io, \"</table>\")\nend\n\n#This isn't valid latex, doesn't matter for the test\nfunction Base.show(io::IO, m::MIME\"text/latex\", x::Array)\n    println(io, \"\\\\begin{tabular}\")\n    for i in 1:size(x,1)\n        [print(io, \"\$r & \") for r in x[i,:]]\n        print(io, \"\\\\\\\\\")\n        println(io, \" \\\\hline\")\n    end\n    print(io, \"\\\\end{tabular\")\nend\n\n#This isn't valid markdown, doesn't matter for the test\nfunction Base.show(io::IO, m::MIME\"text/markdown\", x::Array)\n    println(io, \"-----\")\n    for i in 1:size(x,1)\n        print(io, \"| \")\n        [print(io, \"\$r | \") for r in x[i,:]]\n        println(io, \"\")\n    end\n    print(io, \"-----\")\nend\n\n\nx = [collect(1:3) collect(1:3)]\nca = collect('a':'d')\nca\n````\n\n\n\n-----\n| a | \n| b | \n| c | \n| d | \n-----\n\n````julia\ndisplay(ca)\ndisplay(x)\n````\n\n\n\n-----\n| a | \n| b | \n| c | \n| d | \n-----\n-----\n| 1 | 1 | \n| 2 | 2 | \n| 3 | 3 | \n-----\n\n````julia\njulia> x\n3×2 Array{Int64,2}:\n 1  1\n 2  2\n 3  3\n\njulia> ca\n4-element Array{Char,1}:\n 'a'\n 'b'\n 'c'\n 'd'\n\n````\n\n\n\n````julia\nusing Markdown\nm = Markdown.parse(\"**Some Markdown**\")\nm\n````\n\n\n\n**Some Markdown**\n\n"
Stacktrace:
 [1] mmtest(source::String, resfile::String, doctype::String)
   @ Main ~/.julia/packages/Weave/AL87K/test/rich_output.jl:11
 [2] top-level scope
   @ ~/.julia/packages/Weave/AL87K/test/rich_output.jl:18
 [3] include(fname::String)
   @ Base.MainInclude ./client.jl:443
 [4] top-level scope
   @ ~/.julia/packages/Weave/AL87K/test/runtests.jl:50
 [5] top-level scope
   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
 [6] top-level scope
   @ ~/.julia/packages/Weave/AL87K/test/runtests.jl:50
 [7] top-level scope
   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
 [8] top-level scope
   @ ~/.julia/packages/Weave/AL87K/test/runtests.jl:19
┌ Info: Weaving chunk 1 from line 3
└   progress = 0.0
QStandardPaths: XDG_RUNTIME_DIR not set, defaulting to '/tmp/runtime-pkgeval'
┌ Info: Weaving chunk 2 from line 13
└   progress = 0.25
QStandardPaths: XDG_RUNTIME_DIR not set, defaulting to '/tmp/runtime-pkgeval'
┌ Info: Weaving chunk 3 from line 17
└   progress = 0.5
QStandardPaths: XDG_RUNTIME_DIR not set, defaulting to '/tmp/runtime-pkgeval'
┌ Info: Weaving chunk 4 from line 23
└   progress = 0.75
QStandardPaths: XDG_RUNTIME_DIR not set, defaulting to '/tmp/runtime-pkgeval'
┌ Info: Weaved all chunks
└   progress = 1
[ Info: Report weaved to documents/plotsjl/plotsjl_test_gr.md
┌ Info: Weaving chunk 1 from line 3
└   progress = 0.0
QStandardPaths: XDG_RUNTIME_DIR not set, defaulting to '/tmp/runtime-pkgeval'
┌ Info: Weaving chunk 2 from line 13
└   progress = 0.25
QStandardPaths: XDG_RUNTIME_DIR not set, defaulting to '/tmp/runtime-pkgeval'
┌ Info: Weaving chunk 3 from line 17
└   progress = 0.5
QStandardPaths: XDG_RUNTIME_DIR not set, defaulting to '/tmp/runtime-pkgeval'
┌ Info: Weaving chunk 4 from line 23
└   progress = 0.75
QStandardPaths: XDG_RUNTIME_DIR not set, defaulting to '/tmp/runtime-pkgeval'
┌ Info: Weaved all chunks
└   progress = 1
[ Info: Report weaved to documents/plotsjl/plotsjl_test_gr.tex
[ Info: No cached results found, running code
┌ Info: Weaving chunk 1 from line 3
└   progress = 0.0
QStandardPaths: XDG_RUNTIME_DIR not set, defaulting to '/tmp/runtime-pkgeval'
┌ Info: Weaving chunk 2 from line 13
└   progress = 0.25
QStandardPaths: XDG_RUNTIME_DIR not set, defaulting to '/tmp/runtime-pkgeval'
┌ Info: Weaving chunk 3 from line 17
└   progress = 0.5
QStandardPaths: XDG_RUNTIME_DIR not set, defaulting to '/tmp/runtime-pkgeval'
┌ Info: Weaving chunk 4 from line 23
└   progress = 0.75
QStandardPaths: XDG_RUNTIME_DIR not set, defaulting to '/tmp/runtime-pkgeval'
┌ Info: Weaved all chunks
└   progress = 1
[ Info: Report weaved to /home/pkgeval/.julia/packages/Weave/AL87K/test/documents/plotsjl_test_gr.html
┌ Info: Weaving chunk 1 from line 3
└   progress = 0.0
┌ Info: Weaving chunk 2 from line 13
└   progress = 0.25
┌ Info: Weaving chunk 3 from line 17
└   progress = 0.5
┌ Info: Weaving chunk 4 from line 23
└   progress = 0.75
┌ Info: Weaved all chunks
└   progress = 1
[ Info: Report weaved to /home/pkgeval/.julia/packages/Weave/AL87K/test/documents/plotsjl_test_gr.html
[ Info: No cached results found, running code
┌ Info: Weaving chunk 1 from line 2
└   progress = 0.0
┌ Info: Weaving chunk 2 from line 6
└   progress = 0.09090909090909091
┌ Info: Weaving chunk 3 from line 12
└   progress = 0.18181818181818182
┌ Info: Weaving chunk 4 from line 19
└   progress = 0.2727272727272727
┌ Info: Weaving chunk 5 from line 25
└   progress = 0.36363636363636365
┌ Info: Weaving chunk 6 from line 31
└   progress = 0.45454545454545453
┌ Info: Weaving chunk 7 from line 36
└   progress = 0.5454545454545454
┌ Info: Weaving chunk 8 from line 41
└   progress = 0.6363636363636364
┌ Info: Weaving chunk 9 from line 47
└   progress = 0.7272727272727273
┌ Info: Weaving chunk 10 from line 51
└   progress = 0.8181818181818182
┌ Info: Weaving chunk 11 from line 55
└   progress = 0.9090909090909091
┌ Info: Weaved all chunks
└   progress = 1
[ Info: Report weaved to /home/pkgeval/.julia/packages/Weave/AL87K/test/documents/chunk_options.md
┌ Info: Weaving chunk 1 from line 2
└   progress = 0.0
┌ Info: Weaving chunk 2 from line 6
└   progress = 0.09090909090909091
┌ Info: Weaving chunk 3 from line 12
└   progress = 0.18181818181818182
┌ Info: Weaving chunk 4 from line 19
└   progress = 0.2727272727272727
┌ Info: Weaving chunk 5 from line 25
└   progress = 0.36363636363636365
┌ Info: Weaving chunk 6 from line 31
└   progress = 0.45454545454545453
┌ Info: Weaving chunk 7 from line 36
└   progress = 0.5454545454545454
┌ Info: Weaving chunk 8 from line 41
└   progress = 0.6363636363636364
┌ Info: Weaving chunk 9 from line 47
└   progress = 0.7272727272727273
┌ Info: Weaving chunk 10 from line 51
└   progress = 0.8181818181818182
┌ Info: Weaving chunk 11 from line 55
└   progress = 0.9090909090909091
┌ Info: Weaved all chunks
└   progress = 1
[ Info: Report weaved to /home/pkgeval/.julia/packages/Weave/AL87K/test/documents/chunk_options.md
[ Info: No cached results found, running code
┌ Info: Weaving chunk 1 from line 2
└   progress = 0.0
┌ Info: Weaving chunk 2 from line 8
└   progress = 0.16666666666666666
┌ Info: Weaving chunk 3 from line 13
└   progress = 0.3333333333333333
┌ Info: Weaving chunk 4 from line 19
└   progress = 0.5
┌ Info: Weaving chunk 5 from line 25
└   progress = 0.6666666666666666
┌ Info: Weaving chunk 6 from line 32
└   progress = 0.8333333333333334
┌ Info: Weaved all chunks
└   progress = 1
[ Info: Report weaved to /home/pkgeval/.julia/packages/Weave/AL87K/test/documents/chunk_cache.md
┌ Info: Weaving chunk 1 from line 2
└   progress = 0.0
┌ Info: Weaving chunk 2 from line 8
└   progress = 0.16666666666666666
┌ Info: Weaving chunk 3 from line 13
└   progress = 0.3333333333333333
┌ Info: Weaving chunk 4 from line 19
└   progress = 0.5
┌ Info: Weaving chunk 5 from line 25
└   progress = 0.6666666666666666
┌ Info: Weaving chunk 6 from line 32
└   progress = 0.8333333333333334
┌ Info: Weaved all chunks
└   progress = 1
[ Info: Report weaved to /home/pkgeval/.julia/packages/Weave/AL87K/test/documents/chunk_cache.md
[ Info: No cached results found, running code
┌ Info: Weaving chunk 1 from line 2
└   progress = 0.0
┌ Info: Weaving chunk 2 from line 8
└   progress = 0.16666666666666666
┌ Info: Weaving chunk 3 from line 13
└   progress = 0.3333333333333333
┌ Info: Weaving chunk 4 from line 19
└   progress = 0.5
┌ Info: Weaving chunk 5 from line 25
└   progress = 0.6666666666666666
┌ Info: Weaving chunk 6 from line 32
└   progress = 0.8333333333333334
┌ Info: Weaved all chunks
└   progress = 1
[ Info: Report weaved to /home/pkgeval/.julia/packages/Weave/AL87K/test/documents/chunk_cache.md
┌ Info: Weaving chunk 1 from line 2
└   progress = 0.0
┌ Info: Weaving chunk 2 from line 8
└   progress = 0.16666666666666666
┌ Info: Weaving chunk 3 from line 13
└   progress = 0.3333333333333333
┌ Info: Weaving chunk 4 from line 19
└   progress = 0.5
┌ Info: Weaving chunk 5 from line 25
└   progress = 0.6666666666666666
┌ Info: Weaving chunk 6 from line 32
└   progress = 0.8333333333333334
┌ Info: Weaved all chunks
└   progress = 1
[ Info: Report weaved to /home/pkgeval/.julia/packages/Weave/AL87K/test/documents/chunk_cache.md
┌ Info: Weaving chunk 1 from line 6
└   progress = 0.0
┌ Info: Weaving chunk 2 from line 13
└   progress = 0.3333333333333333
┌ Info: Weaving chunk 3 from line 17
└   progress = 0.6666666666666666
┌ Info: Weaved all chunks
└   progress = 1
[ Info: Report weaved to /home/pkgeval/.julia/packages/Weave/AL87K/test/documents/gadfly/gadfly_formats_test.md
┌ Info: Weaving chunk 1 from line 6
└   progress = 0.0
┌ Info: Weaving chunk 2 from line 13
└   progress = 0.3333333333333333
┌ Info: Weaving chunk 3 from line 17
└   progress = 0.6666666666666666
┌ Info: Weaved all chunks
└   progress = 1
[ Info: Report weaved to /home/pkgeval/.julia/packages/Weave/AL87K/test/documents/gadfly/gadfly_formats_test.md
┌ Info: Weaving chunk 1 from line 6
└   progress = 0.0
┌ Info: Weaving chunk 2 from line 13
└   progress = 0.3333333333333333
┌ Info: Weaving chunk 3 from line 17
└   progress = 0.6666666666666666
┌ Info: Weaved all chunks
└   progress = 1
[ Info: Report weaved to /home/pkgeval/.julia/packages/Weave/AL87K/test/documents/gadfly/gadfly_formats_test.md
┌ Info: Weaving chunk 1 from line 6
└   progress = 0.0
┌ Info: Weaving chunk 2 from line 13
└   progress = 0.3333333333333333
┌ Info: Weaving chunk 3 from line 17
└   progress = 0.6666666666666666
┌ Info: Weaved all chunks
└   progress = 1
[ Info: Report weaved to /home/pkgeval/.julia/packages/Weave/AL87K/test/documents/gadfly/gadfly_formats_test.md
┌ Info: Weaving chunk 1 from line 6
└   progress = 0.0
┌ Info: Weaving chunk 2 from line 13
└   progress = 0.3333333333333333
┌ Info: Weaving chunk 3 from line 17
└   progress = 0.6666666666666666
┌ Info: Weaved all chunks
└   progress = 1
[ Info: Report weaved to /home/pkgeval/.julia/packages/Weave/AL87K/test/documents/gadfly/gadfly_formats_test.md
┌ Info: Weaving chunk 1 from line 6
└   progress = 0.0
┌ Info: Weaving chunk 2 from line 13
└   progress = 0.3333333333333333
┌ Info: Weaving chunk 3 from line 17
└   progress = 0.6666666666666666
┌ Info: Weaved all chunks
└   progress = 1
[ Info: Report weaved to /home/pkgeval/.julia/packages/Weave/AL87K/test/documents/gadfly/gadfly_formats_test.tex
┌ Info: Weaving chunk 1 from line 6
└   progress = 0.0
┌ Info: Weaving chunk 2 from line 13
└   progress = 0.3333333333333333
┌ Info: Weaving chunk 3 from line 17
└   progress = 0.6666666666666666
┌ Info: Weaved all chunks
└   progress = 1
[ Info: Report weaved to /home/pkgeval/.julia/packages/Weave/AL87K/test/documents/gadfly/gadfly_formats_test.tex
┌ Info: Weaving chunk 1 from line 6
└   progress = 0.0
┌ Info: Weaving chunk 2 from line 13
└   progress = 0.3333333333333333
┌ Info: Weaving chunk 3 from line 17
└   progress = 0.6666666666666666
┌ Info: Weaved all chunks
└   progress = 1
[ Info: Report weaved to /home/pkgeval/.julia/packages/Weave/AL87K/test/documents/gadfly/gadfly_formats_test.tex
┌ Info: Weaving chunk 1 from line 6
└   progress = 0.0
┌ Info: Weaving chunk 2 from line 13
└   progress = 0.3333333333333333
┌ Info: Weaving chunk 3 from line 17
└   progress = 0.6666666666666666
┌ Info: Weaved all chunks
└   progress = 1
[ Info: Report weaved to /home/pkgeval/.julia/packages/Weave/AL87K/test/documents/gadfly/gadfly_formats_test.tex
┌ Info: Weaving chunk 1 from line 8
└   progress = 0.0
┌ Info: Weaving chunk 2 from line 28
└   progress = 0.5
┌ Info: Weaved all chunks
└   progress = 1
[ Info: Report weaved to /home/pkgeval/.julia/packages/Weave/AL87K/test/documents/inline/markdown_beamer.html
┌ Info: Weaving chunk 1 from line 8
└   progress = 0.0
┌ Info: Weaving chunk 2 from line 28
└   progress = 0.5
┌ Info: Weaved all chunks
└   progress = 1
[ Info: Report weaved to /home/pkgeval/.julia/packages/Weave/AL87K/test/documents/inline/markdown_beamer.tex
Test Summary:       | Pass  Fail  Broken  Total
Weave               |  116     5       1    122
  Chunk options     |    1     1              2
  module evaluation |    4             1      5
  header            |   13                   13
  error rendering   |    5                    5
  conversions       |    6                    6
  display           |    4                    4
  Formatters        |   56                   56
  Rich output       |          4              4
  Plots             |    3                    3
  Cache             |    3                    3
  Gadfly            |   11                   11
  Inline code       |   10                   10
ERROR: LoadError: Some tests did not pass: 116 passed, 5 failed, 0 errored, 1 broken.
in expression starting at /home/pkgeval/.julia/packages/Weave/AL87K/test/runtests.jl:18
ERROR: Package Weave errored during testing
Stacktrace:
  [1] pkgerror(::String, ::Vararg{String,N} where N)
    @ Pkg.Types /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
  [2] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing)
    @ Pkg.Operations /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1567
  [3] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:328
  [4] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec})
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:315
  [5] #test#62
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [6] test
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [7] #test#61
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [8] test
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [9] test(pkg::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [10] test(pkg::String)
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [11] top-level scope
    @ none:16
