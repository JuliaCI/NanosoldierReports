Julia Version 1.6.0-DEV.629
Commit 7b9a941394 (2020-08-12 17:08 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.1
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.1
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_AEwZXT/Project.toml`
  [5789e2e9] FileIO v1.4.1
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_AEwZXT/Manifest.toml`
  [5789e2e9] FileIO v1.4.1
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.2170732071065355
curgen: 20 fitness: 0.2171857071791825
curgen: 30 fitness: 0.21723222011012075
curgen: 40 fitness: 0.21723222011012075
curgen: 50 fitness: 0.21723222011012075
CoordinateCreature{Vector{Float64}}([0.22236992686848958], -0.21723222011012075) 0.22236992686848958 -0.21723222011012075
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.257527675611443
curgen: 100 fitness: 3.2578840568191803
curgen: 150 fitness: 3.2579582856243676
curgen: 200 fitness: 3.258224055514697
curgen: 250 fitness: 3.2583099733064333
curgen: 300 fitness: 3.2583640299803354
curgen: 350 fitness: 3.2583945791638445
curgen: 400 fitness: 3.2584251606661625
curgen: 450 fitness: 3.2584251606661625
curgen: 500 fitness: 3.2584251606661625
CoordinateCreature{Vector{Float64}}([0.2225430654688149, 0.2224840347991573, -0.22267193147280512, 0.22254840043656474, -0.2223979707204182, 0.222331134448435, -0.22243798950389698, 0.2225314766203121, -0.22194549715493017, -0.22238700708780962, -0.22296427536765073, 0.22170532442493115, 0.22294681797046373, -0.22211841685773182, -0.22280828497983635], -3.2584251606661625) [0.2225430654688149, 0.2224840347991573, -0.22267193147280512, 0.22254840043656474, -0.2223979707204182, 0.222331134448435, -0.22243798950389698, 0.2225314766203121, -0.22194549715493017, -0.22238700708780962, -0.22296427536765073, 0.22170532442493115, 0.22294681797046373, -0.22211841685773182, -0.22280828497983635] -3.2584251606661625
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.001428033814988794
curgen: 100 fitness: -0.0011355102633672232
curgen: 150 fitness: -0.0009550603793968548
curgen: 200 fitness: -0.0008728433957401194
curgen: 250 fitness: -0.0008728433957401194
curgen: 300 fitness: -0.0007800692973773948
curgen: 350 fitness: -0.0007800692973773948
curgen: 400 fitness: -0.0007800692973773948
curgen: 450 fitness: -0.0007800692973773948
curgen: 500 fitness: -0.0007800692973773948
CoordinateCreature{Vector{Float64}}([-0.0006470546061860865, -4.8747465422458846e-5, -0.00010995134429890303, 0.0004171551307774377, 0.000704131708080927, 0.0001608325142135221, -1.0823635194265975e-5, 0.00025117298944041656, 0.00022336153524265043, 0.0002448734581690246, 0.0010806318150015347, 0.00023136944076196424, 0.00023991308433875301, -0.000835419330713117, 0.0008082668824711903], 0.0007800692973773948) [-0.0006470546061860865, -4.8747465422458846e-5, -0.00010995134429890303, 0.0004171551307774377, 0.000704131708080927, 0.0001608325142135221, -1.0823635194265975e-5, 0.00025117298944041656, 0.00022336153524265043, 0.0002448734581690246, 0.0010806318150015347, 0.00023136944076196424, 0.00023991308433875301, -0.000835419330713117, 0.0008082668824711903] 0.0007800692973773948
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
