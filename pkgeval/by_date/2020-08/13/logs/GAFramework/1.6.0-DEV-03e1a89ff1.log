Julia Version 1.6.0-DEV.633
Commit 03e1a89ff1 (2020-08-13 14:37 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.1
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.1
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_usM1DK/Project.toml`
  [5789e2e9] FileIO v1.4.1
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_usM1DK/Manifest.toml`
  [5789e2e9] FileIO v1.4.1
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21723361377124809
curgen: 20 fitness: 0.21723361377124809
curgen: 30 fitness: 0.21723361377124809
curgen: 40 fitness: 0.21723361377124809
curgen: 50 fitness: 0.21723361377124809
CoordinateCreature{Vector{Float64}}([-0.2225662179645017], -0.21723361377124809) -0.2225662179645017 -0.21723361377124809
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.258103748599119
curgen: 100 fitness: 3.258122273038147
curgen: 150 fitness: 3.2582637881728194
curgen: 200 fitness: 3.2583026718618604
curgen: 250 fitness: 3.2583038993906723
curgen: 300 fitness: 3.2583186048082156
curgen: 350 fitness: 3.258332857265549
curgen: 400 fitness: 3.258384320237315
curgen: 450 fitness: 3.258443106081912
curgen: 500 fitness: 3.258443106081912
CoordinateCreature{Vector{Float64}}([0.22260754929305113, 0.22257414817396554, 0.2222844969710984, 0.2224856548958662, -0.2221745591641977, 0.2231387718011835, -0.2224359453147742, -0.22297309798775758, -0.22287592899520184, -0.22285607325557838, 0.2224444472214069, -0.2226639723014765, -0.2230412389065711, 0.22292400757997205, 0.222416038423814], -3.258443106081912) [0.22260754929305113, 0.22257414817396554, 0.2222844969710984, 0.2224856548958662, -0.2221745591641977, 0.2231387718011835, -0.2224359453147742, -0.22297309798775758, -0.22287592899520184, -0.22285607325557838, 0.2224444472214069, -0.2226639723014765, -0.2230412389065711, 0.22292400757997205, 0.222416038423814] -3.258443106081912
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.005971111794281114
curgen: 100 fitness: -0.0058594611395506035
curgen: 150 fitness: -0.0029781495737495334
curgen: 200 fitness: -0.0024507878970894126
curgen: 250 fitness: -0.0017930575168065843
curgen: 300 fitness: -0.0017593487822296083
curgen: 350 fitness: -0.0005245109649365531
curgen: 400 fitness: -0.0005245109649365531
curgen: 450 fitness: -0.0005245109649365531
curgen: 500 fitness: -0.0005245109649365531
CoordinateCreature{Vector{Float64}}([0.0002132606499733586, 6.936727510149465e-5, 0.0009067252847308651, -0.0004504634698596966, 0.00011643356993502592, -5.495259429002478e-5, 2.753437677575389e-5, -0.0009191456959535401, 2.122942917642443e-5, -0.0003179185458913519, -0.00023866069092769968, -0.00045950185074407216, 0.00010408817229198342, -0.0005352210326474861, 0.0001984234364763185], 0.0005245109649365531) [0.0002132606499733586, 6.936727510149465e-5, 0.0009067252847308651, -0.0004504634698596966, 0.00011643356993502592, -5.495259429002478e-5, 2.753437677575389e-5, -0.0009191456959535401, 2.122942917642443e-5, -0.0003179185458913519, -0.00023866069092769968, -0.00045950185074407216, 0.00010408817229198342, -0.0005352210326474861, 0.0001984234364763185] 0.0005245109649365531
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
