Julia Version 1.6.0-DEV.680
Commit bcbb00004d (2020-08-20 17:48 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed VersionParsing ─────────────── v1.2.0
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed Wynn ───────────────────────── v0.0.3
  Installed MacroTools ─────────────────── v0.5.5
  Installed Parsers ────────────────────── v1.0.10
  Installed SpecialFunctions ───────────── v0.10.3
  Installed SymPy ──────────────────────── v1.0.27
  Installed RecipesBase ────────────────── v1.0.2
  Installed Conda ──────────────────────── v1.4.1
  Installed JSON ───────────────────────── v0.21.0
  Installed PyCall ─────────────────────── v1.91.4
Updating `~/.julia/environments/v1.6/Project.toml`
  [fbb19de7] + Wynn v0.0.3
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [8f4d0f93] + Conda v1.4.1
  [682c06a0] + JSON v0.21.0
  [1914dd2f] + MacroTools v0.5.5
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [69de0a69] + Parsers v1.0.10
  [438e738f] + PyCall v1.91.4
  [3cdcf5f2] + RecipesBase v1.0.2
  [276daf66] + SpecialFunctions v0.10.3
  [24249f21] + SymPy v1.0.27
  [81def892] + VersionParsing v1.2.0
  [fbb19de7] + Wynn v0.0.3
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
   Building Conda ─→ `~/.julia/packages/Conda/3rPhK/deps/build.log`
   Building PyCall → `~/.julia/packages/PyCall/zqDXB/deps/build.log`
    Testing Wynn
Status `/tmp/jl_ONVp6S/Project.toml`
  [24249f21] SymPy v1.0.27
  [fbb19de7] Wynn v0.0.3
  [8dfed614] Test
Status `/tmp/jl_ONVp6S/Manifest.toml`
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [8f4d0f93] Conda v1.4.1
  [682c06a0] JSON v0.21.0
  [1914dd2f] MacroTools v0.5.5
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [69de0a69] Parsers v1.0.10
  [438e738f] PyCall v1.91.4
  [3cdcf5f2] RecipesBase v1.0.2
  [276daf66] SpecialFunctions v0.10.3
  [24249f21] SymPy v1.0.27
  [81def892] VersionParsing v1.2.0
  [fbb19de7] Wynn v0.0.3
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
ERROR: LoadError: InitError: PyError (PyImport_ImportModule

The Python package sympy could not be found by pyimport. Usually this means
that you did not install sympy in the Python version being used by PyCall.

PyCall is currently configured to use the Python version at:

/usr/bin/python3

and you should use whatever mechanism you usually use (apt-get, pip, conda,
etcetera) to install the Python package containing the sympy module.

One alternative is to re-configure PyCall to use a different Python
version on your system: set ENV["PYTHON"] to the path/name of the python
executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.

Another alternative is to configure PyCall to use a Julia-specific Python
distribution via the Conda.jl package (which installs a private Anaconda
Python distribution), which has the advantage that packages can be installed
and kept up-to-date via Julia.  As explained in the PyCall documentation,
set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
To install the sympy module, you can use `pyimport_conda("sympy", PKG)`,
where PKG is the Anaconda package the contains the module sympy,
or alternatively you can use the Conda package directly (via
`using Conda` followed by `Conda.add` etcetera).

) <class 'ModuleNotFoundError'>
ModuleNotFoundError("No module named 'sympy'",)

Stacktrace:
  [1] pyimport(name::String)
    @ PyCall ~/.julia/packages/PyCall/zqDXB/src/PyCall.jl:536
  [2] pyimport_conda(modulename::String, condapkg::String, channel::String)
    @ PyCall ~/.julia/packages/PyCall/zqDXB/src/PyCall.jl:694
  [3] pyimport_conda
    @ ~/.julia/packages/PyCall/zqDXB/src/PyCall.jl:693 [inlined]
  [4] __init__()
    @ SymPy ~/.julia/packages/SymPy/u5t7C/src/SymPy.jl:118
  [5] _include_from_serialized(path::String, depmods::Vector{Any})
    @ Base ./loading.jl:698
  [6] _require_from_serialized(path::String)
    @ Base ./loading.jl:750
  [7] _require(pkg::Base.PkgId)
    @ Base ./loading.jl:1041
  [8] require(uuidkey::Base.PkgId)
    @ Base ./loading.jl:929
  [9] require(into::Module, mod::Symbol)
    @ Base ./loading.jl:924
 [10] include
    @ ./Base.jl:375 [inlined]
 [11] include_package_for_output(input::String, depot_path::Vector{String}, dl_load_path::Vector{String}, load_path::Vector{String}, concrete_deps::Vector{Pair{Base.PkgId,UInt64}}, uuid_tuple::Tuple{UInt64,UInt64}, source::String)
    @ Base ./loading.jl:1220
 [12] top-level scope
    @ none:1
 [13] eval
    @ ./boot.jl:344 [inlined]
 [14] eval(x::Expr)
    @ Base.MainInclude ./client.jl:445
 [15] top-level scope
    @ none:1
during initialization of module SymPy
in expression starting at /home/pkgeval/.julia/packages/Wynn/33KHp/src/Wynn.jl:1
ERROR: LoadError: Failed to precompile Wynn [fbb19de7-1342-5f93-8193-71ff412e753d] to /home/pkgeval/.julia/compiled/v1.6/Wynn/iwi39_sk3Nq.ji.
Stacktrace:
 [1] error(s::String)
   @ Base ./error.jl:33
 [2] compilecache(pkg::Base.PkgId, path::String)
   @ Base ./loading.jl:1351
 [3] _require(pkg::Base.PkgId)
   @ Base ./loading.jl:1031
 [4] require(uuidkey::Base.PkgId)
   @ Base ./loading.jl:929
 [5] require(into::Module, mod::Symbol)
   @ Base ./loading.jl:924
 [6] include(fname::String)
   @ Base.MainInclude ./client.jl:443
 [7] top-level scope
   @ none:6
in expression starting at /home/pkgeval/.julia/packages/Wynn/33KHp/test/runtests.jl:1
ERROR: Package Wynn errored during testing
Stacktrace:
  [1] pkgerror(::String, ::Vararg{String,N} where N)
    @ Pkg.Types /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
  [2] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing)
    @ Pkg.Operations /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1580
  [3] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:328
  [4] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:315
  [5] #test#62
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [6] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [7] #test#61
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [8] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [9] test(pkg::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [10] test(pkg::String)
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [11] top-level scope
    @ none:16
