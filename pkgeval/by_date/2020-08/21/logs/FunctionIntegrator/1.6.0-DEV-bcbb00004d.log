Julia Version 1.6.0-DEV.680
Commit bcbb00004d (2020-08-20 17:48 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed FastGaussQuadrature ────────── v0.4.2
  Installed FunctionIntegrator ─────────── v0.5.1
  Installed SpecialFunctions ───────────── v0.10.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [7685536e] + FunctionIntegrator v0.5.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [442a2c76] + FastGaussQuadrature v0.4.2
  [7685536e] + FunctionIntegrator v0.5.1
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [276daf66] + SpecialFunctions v0.10.3
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing FunctionIntegrator
Status `/tmp/jl_qYbimf/Project.toml`
  [442a2c76] FastGaussQuadrature v0.4.2
  [7685536e] FunctionIntegrator v0.5.1
  [276daf66] SpecialFunctions v0.10.3
  [8dfed614] Test
Status `/tmp/jl_qYbimf/Manifest.toml`
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [442a2c76] FastGaussQuadrature v0.4.2
  [7685536e] FunctionIntegrator v0.5.1
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [276daf66] SpecialFunctions v0.10.3
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Performing the Airy Ai(x) test, where Ai(x) is integrated on the semi-infinite domain, or an approximation of it, namely [0,100] and the result is compared to the analytical result 1/3.
Running: adaptive_simpsons_rule
  0.838046 seconds (1.35 M allocations: 71.065 MiB, 1.45% gc time)
Running: chebyshev_quadrature with k=1
  1.743625 seconds (2.24 M allocations: 128.417 MiB, 1.95% gc time)
Running: chebyshev_quadrature with k=2
  0.292099 seconds (424.54 k allocations: 24.371 MiB, 4.09% gc time)
Running: chebyshev_quadrature with k=3
  0.393973 seconds (544.37 k allocations: 29.861 MiB, 3.65% gc time)
Running: chebyshev_quadrature with k=4
  0.385401 seconds (487.28 k allocations: 26.385 MiB)
Running: jacobi_quadrature with α=β=1
 41.559801 seconds (39.35 M allocations: 3.137 GiB, 8.11% gc time)
Running: laguerre_quadrature with k=1
  2.929783 seconds (3.33 M allocations: 185.519 MiB, 2.97% gc time)
Running: legendre_quadrature
  0.199935 seconds (214.66 k allocations: 12.293 MiB)
Running: lobatto_quadrature
  0.335754 seconds (343.00 k allocations: 20.560 MiB, 6.66% gc time)
Running: radau_quadrature
  0.257281 seconds (325.34 k allocations: 19.568 MiB)
Running: rectangle_rule_left. Only a rough approximation can be practically achieved using this function.
 81.902094 seconds (100.02 M allocations: 1.491 GiB, 0.20% gc time)
Running: rectangle_rule_midpoint.
  0.164033 seconds (173.71 k allocations: 3.886 MiB)
Running: rectangle_rule_right. Only a rough approximation can be practically achieved using this function.
 80.646963 seconds (100.02 M allocations: 1.491 GiB, 0.20% gc time)
Running: rombergs_method
  0.558744 seconds (751.51 k allocations: 43.258 MiB, 5.89% gc time)
Running: simpsons_rule
  0.038678 seconds (47.32 k allocations: 2.119 MiB)
Running: simpsons38_rule
  0.087565 seconds (112.96 k allocations: 5.967 MiB)
Running: trapezoidal_rule
  0.304617 seconds (1.52 M allocations: 25.791 MiB, 4.43% gc time)
Test Summary: | Pass  Total
Airy Ai(x)    |   17     17
Performing the besselj test, where BesselJ_1(2) is approximated and the result is compared to the value obtained from SpecialFunctions' besselj function.
Running: adaptive_simpsons_rule with ε=1e-7
  0.091839 seconds (32.60 k allocations: 1.941 MiB)
Running: chebyshev_quadrature with k=1
  0.431260 seconds (258.66 k allocations: 13.040 MiB)
Running: chebyshev_quadrature with k=2
  0.149700 seconds (94.43 k allocations: 2.702 MiB)
Running: chebyshev_quadrature with k=3
  0.164798 seconds (82.69 k allocations: 2.504 MiB)
Running: chebyshev_quadrature with k=4
  0.160742 seconds (65.31 k allocations: 2.151 MiB)
Running: jacobi_quadrature with α=β=1
  2.502413 seconds (513.68 k allocations: 162.411 MiB, 6.82% gc time)
Running: legendre_quadrature
  0.181710 seconds (43.18 k allocations: 2.480 MiB)
Running: lobatto_quadrature
  0.021972 seconds (16.75 k allocations: 1.034 MiB)
Running: radau_quadrature
  0.021463 seconds (16.73 k allocations: 1.034 MiB)
Running: rectangle_rule_left
 31.011512 seconds (471.41 M allocations: 7.025 GiB, 1.93% gc time)
Running: rectangle_rule_midpoint
  0.000016 seconds (45 allocations: 1.047 KiB)
Running: rectangle_rule_right
 32.087471 seconds (476.96 M allocations: 7.107 GiB, 1.89% gc time)
Running: rombergs_method
  0.456941 seconds (338.93 k allocations: 19.216 MiB)
Running: simpsons_rule
  0.000023 seconds (85 allocations: 1.672 KiB)
Running: simpsons38_rule
  0.075440 seconds (19.88 k allocations: 1.194 MiB)
Running: trapezoidal_rule
  0.079830 seconds (18.33 k allocations: 1.099 MiB, 16.32% gc time)
Test Summary: | Pass  Total
besselj       |   16     16
Integrating cos^2(x)/(1+cot(x)) from 0 to pi/2 and comparing the results to the analytical result 0.25.
Running: adaptive_simpsons_rule with ε=1e-7
  0.033302 seconds (1.99 k allocations: 53.594 KiB)
Running: chebyshev_quadrature with k=1
  0.110173 seconds (2.40 k allocations: 113.453 KiB)
Running: chebyshev_quadrature with k=2
  0.110934 seconds (2.65 k allocations: 121.469 KiB)
Running: chebyshev_quadrature with k=3
  0.111468 seconds (3.08 k allocations: 133.688 KiB)
Running: chebyshev_quadrature with k=4
  0.183888 seconds (3.08 k allocations: 133.750 KiB)
Running: jacobi_quadrature with α=β=1
  0.439657 seconds (378.58 k allocations: 19.787 MiB)
Running: legendre_quadrature
  0.084852 seconds (1.24 k allocations: 63.609 KiB)
Running: lobatto_quadrature
  0.000113 seconds (67 allocations: 2.844 KiB)
Running: radau_quadrature
  0.000054 seconds (71 allocations: 3.078 KiB)
Running: rectangle_rule_left
  0.000989 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_midpoint
  0.000675 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right
  0.000973 seconds (9 allocations: 496 bytes)
Running: rombergs_method
  0.085197 seconds (1.01 k allocations: 54.109 KiB)
Running: simpsons_rule
  0.000126 seconds (323 allocations: 5.391 KiB)
Running: simpsons38_rule
  0.038045 seconds (923 allocations: 39.281 KiB)
Running: trapezoidal_rule
  0.025357 seconds (44.33 k allocations: 704.859 KiB)
Test Summary: | Pass  Total
coscotint     |   16     16
Integrating cosine from 0 to pi/2 and comparing the result to the analytical result of 1.
Running: adaptive_simpsons_rule
  0.108789 seconds (75.83 k allocations: 4.401 MiB, 40.58% gc time)
Running: chebyshev_quadrature with k=1
  0.224510 seconds (239.83 k allocations: 13.467 MiB)
Running: chebyshev_quadrature with k=2
  0.312162 seconds (295.00 k allocations: 16.525 MiB)
Running: chebyshev_quadrature with k=3
  0.426817 seconds (274.98 k allocations: 14.942 MiB, 7.41% gc time)
Running: chebyshev_quadrature with k=4
  0.232601 seconds (275.01 k allocations: 14.857 MiB)
Running: jacobi_quadrature with α=β=1
  2.443088 seconds (465.20 k allocations: 164.204 MiB, 7.37% gc time)
Running: legendre_quadrature
  0.208522 seconds (192.58 k allocations: 11.082 MiB)
Running: lobatto_quadrature
  0.193144 seconds (203.78 k allocations: 11.803 MiB)
Running: radau_quadrature
  0.209044 seconds (203.78 k allocations: 11.791 MiB)
Running: rectangle_rule_left
  1.431717 seconds (19.75 k allocations: 1.193 MiB)
Running: rectangle_rule_midpoint
  0.041792 seconds (25.91 k allocations: 1.614 MiB)
Running: rectangle_rule_right
  1.288721 seconds (18.25 k allocations: 1.104 MiB)
Running: rombergs_method
  0.173473 seconds (139.53 k allocations: 8.040 MiB, 12.87% gc time)
Running: simpsons_rule
  0.034690 seconds (28.99 k allocations: 1.800 MiB)
Running: simpsons38_rule
  0.039621 seconds (44.60 k allocations: 2.786 MiB)
Running: trapezoidal_rule
  0.030978 seconds (45.18 k allocations: 1.823 MiB)
Test Summary: | Pass  Total
Cosine        |   16     16
Integrating e^(-x^2)/(1+x^2) on the infinite domain [-inf, inf], or failing that on [-100,100], and comparing it to the analytical result exp(1)*pi*erfc(1)
Running: adaptive_simpsons_rule with ε=1e-7
  0.038968 seconds (101.38 k allocations: 3.074 MiB)
Running: chebyshev_quadrature with k=1
  0.184470 seconds (246.92 k allocations: 13.562 MiB)
Running: chebyshev_quadrature with k=2
  0.216731 seconds (302.62 k allocations: 16.615 MiB)
Running: chebyshev_quadrature with k=3
  0.242203 seconds (282.39 k allocations: 14.975 MiB, 13.48% gc time)
Running: chebyshev_quadrature with k=4
  0.197105 seconds (282.43 k allocations: 14.978 MiB)
Running: hermite_quadrature with k=2
 15.366483 seconds (22.11 M allocations: 1.147 GiB, 7.48% gc time)
Running: jacobi_quadrature with α=β=1
  0.556045 seconds (475.20 k allocations: 50.419 MiB, 26.46% gc time)
Running: laguerre_quadrature with k=1 and multiplying the result by 2 (as Laguerre is only on the semi-infinite domain)
  0.213695 seconds (287.89 k allocations: 15.889 MiB)
Running: legendre_quadrature
  0.154666 seconds (199.64 k allocations: 11.432 MiB)
Running: lobatto_quadrature
  0.215701 seconds (225.19 k allocations: 37.597 MiB)
Running: radau_quadrature
  0.228778 seconds (221.78 k allocations: 30.262 MiB, 9.57% gc time)
Running: rectangle_rule_left
  0.027347 seconds (22.89 k allocations: 1.353 MiB)
Running: rectangle_rule_midpoint
  0.026425 seconds (27.85 k allocations: 1.710 MiB)
Running: rectangle_rule_right
  0.024283 seconds (19.46 k allocations: 1.165 MiB)
Running: rombergs_method
  0.113202 seconds (142.35 k allocations: 8.102 MiB)
Running: simpsons_rule
  0.035897 seconds (41.23 k allocations: 2.156 MiB)
Running: simpsons38_rule
  0.039325 seconds (59.97 k allocations: 3.194 MiB)
Running: trapezoidal_rule
  0.028930 seconds (31.54 k allocations: 1.768 MiB)
Test Summary: | Pass  Total
expnx2datan   |   18     18
Integrate exp(-x^2) from minus infinity to positive infinity and comparing the result to the analytical solution, sqrt(pi)
Running: adaptive_simpsons_rule with ε=1e-7
  0.038293 seconds (61.48 k allocations: 2.359 MiB)
Running: chebyshev_quadrature with k=1
  0.219876 seconds (242.05 k allocations: 13.329 MiB, 8.01% gc time)
Running: chebyshev_quadrature with k=2
  0.251303 seconds (297.34 k allocations: 16.289 MiB)
Running: chebyshev_quadrature with k=3
  0.252606 seconds (277.25 k allocations: 14.746 MiB, 7.61% gc time)
Running: chebyshev_quadrature with k=4
  0.221224 seconds (277.29 k allocations: 14.751 MiB)
Running: hermite_quadrature with k=2
  0.157273 seconds (177.31 k allocations: 10.134 MiB)
Running: jacobi_quadrature with α=β=1
  9.160248 seconds (467.80 k allocations: 1.176 GiB, 11.58% gc time)
Running: laguerre_quadrature (results multiplied by 2, as laguerre only integrates over the semi-infinite domain)
  0.211896 seconds (282.75 k allocations: 15.668 MiB)
Running: legendre_quadrature
  0.170815 seconds (194.81 k allocations: 11.207 MiB)
Running: lobatto_quadrature
  0.203731 seconds (215.55 k allocations: 23.308 MiB)
Running: radau_quadrature
  0.230571 seconds (214.70 k allocations: 21.244 MiB, 7.62% gc time)
Running: rectangle_rule_left
  0.025433 seconds (20.45 k allocations: 1.235 MiB)
Running: rectangle_rule_midpoint
  0.026765 seconds (26.63 k allocations: 1.652 MiB)
Running: rectangle_rule_right
  0.024557 seconds (18.23 k allocations: 1.105 MiB)
Running: rombergs_method
  0.107828 seconds (137.82 k allocations: 7.902 MiB)
Running: simpsons_rule
  0.028796 seconds (33.47 k allocations: 1.930 MiB)
Running: simpsons38_rule
  0.039052 seconds (50.51 k allocations: 2.938 MiB)
Running: trapezoidal_rule
  0.027363 seconds (26.22 k allocations: 1.592 MiB)
Test Summary: | Pass  Total
Gaussian      |   18     18
Integrating 1/x from 1 to e and comparing the result to the analytical solution, 1.
Running: adaptive_simpsons_rule with ε=1e-7
  0.054017 seconds (32.45 k allocations: 1.955 MiB)
Running: chebyshev_quadrature with k=1
  0.370694 seconds (240.38 k allocations: 13.544 MiB)
Running: chebyshev_quadrature with k=2
  0.328277 seconds (295.58 k allocations: 16.646 MiB, 6.30% gc time)
Running: chebyshev_quadrature with k=3
  0.277697 seconds (275.58 k allocations: 14.962 MiB)
Running: chebyshev_quadrature with k=4
  0.267638 seconds (275.61 k allocations: 14.785 MiB)
Running: jacobi_quadrature with α=β=1
  2.500158 seconds (465.84 k allocations: 195.217 MiB, 6.68% gc time)
Running: legendre_quadrature
  0.219373 seconds (193.14 k allocations: 11.131 MiB, 7.91% gc time)
Running: lobatto_quadrature
  0.181494 seconds (204.35 k allocations: 11.882 MiB)
Running: radau_quadrature
  0.178898 seconds (204.35 k allocations: 11.818 MiB)
Running: rectangle_rule_left
  0.298500 seconds (20.31 k allocations: 1.221 MiB)
Running: rectangle_rule_midpoint
  0.025656 seconds (26.27 k allocations: 1.634 MiB)
Running: rectangle_rule_right
  0.106854 seconds (18.62 k allocations: 1.125 MiB)
Running: rombergs_method
  0.135861 seconds (150.88 k allocations: 8.789 MiB)
Running: simpsons_rule
  0.035097 seconds (29.74 k allocations: 1.834 MiB)
Running: simpsons38_rule
  0.039216 seconds (45.38 k allocations: 2.819 MiB)
Running: trapezoidal_rule
  0.029245 seconds (46.17 k allocations: 1.860 MiB)
Test Summary: | Pass  Total
1/x           |   16     16
Integrating log(x)/x from 1 to e and comparing the result to the analytical solution of 0.5.
Running: adaptive_simpsons_rule with ε=1e-7
  0.036666 seconds (33.21 k allocations: 1.904 MiB)
Running: chebyshev_quadrature with k=1
  0.248610 seconds (240.95 k allocations: 13.495 MiB, 8.49% gc time)
Running: chebyshev_quadrature with k=2
  0.253825 seconds (296.18 k allocations: 16.545 MiB)
Running: chebyshev_quadrature with k=3
  0.226087 seconds (276.12 k allocations: 14.911 MiB)
Running: chebyshev_quadrature with k=4
  0.229723 seconds (276.15 k allocations: 14.966 MiB)
Running: jacobi_quadrature with α=β=1
  2.124554 seconds (466.51 k allocations: 149.899 MiB, 7.66% gc time)
Running: legendre_quadrature
  0.172785 seconds (193.71 k allocations: 11.127 MiB)
Running: lobatto_quadrature
  0.182033 seconds (204.93 k allocations: 11.833 MiB)
Running: radau_quadrature
  0.175442 seconds (204.92 k allocations: 11.841 MiB)
Running: rectangle_rule_left
  1.295983 seconds (20.59 k allocations: 1.235 MiB)
Running: rectangle_rule_midpoint
  0.027139 seconds (26.26 k allocations: 1.633 MiB)
Running: rectangle_rule_right
  1.319371 seconds (18.60 k allocations: 1.123 MiB, 1.53% gc time)
Running: rombergs_method
  0.143534 seconds (140.83 k allocations: 8.105 MiB)
Running: simpsons_rule
  0.034549 seconds (30.49 k allocations: 1.862 MiB)
Running: simpsons38_rule
  0.034775 seconds (46.12 k allocations: 2.848 MiB)
Running: trapezoidal_rule
  0.028615 seconds (58.43 k allocations: 2.061 MiB)
Test Summary: | Pass  Total
log(x)/x      |   16     16
Approximating the modified bessel function I_1(1) and comparing it to the result obtained by SpecialFunctions.
Running: adaptive_simpsons_rule with ε=1e-7
  0.182236 seconds (152.72 k allocations: 9.077 MiB)
Running: chebyshev_quadrature with k=1
  0.151661 seconds (70.50 k allocations: 2.228 MiB)
Running: chebyshev_quadrature with k=2
  0.154598 seconds (105.72 k allocations: 2.897 MiB)
Running: chebyshev_quadrature with k=3
  0.156780 seconds (93.21 k allocations: 2.682 MiB)
Running: chebyshev_quadrature with k=4
  0.160160 seconds (72.74 k allocations: 2.276 MiB)
Running: jacobi_quadrature with α=β=1
  2.254155 seconds (487.41 k allocations: 168.208 MiB, 8.91% gc time)
Running: legendre_quadrature
  0.113384 seconds (19.25 k allocations: 1.111 MiB)
Running: lobatto_quadrature
  0.000109 seconds (150 allocations: 4.328 KiB)
Running: radau_quadrature
  0.000074 seconds (148 allocations: 4.375 KiB)
Running: rectangle_rule_left
 50.644015 seconds (590.00 M allocations: 8.792 GiB, 3.77% gc time)
Running: rectangle_rule_midpoint
  0.000031 seconds (40 allocations: 992 bytes)
Running: rectangle_rule_right
 48.039098 seconds (592.75 M allocations: 8.833 GiB, 3.84% gc time)
Running: rombergs_method
  0.137020 seconds (21.09 k allocations: 1.189 MiB)
Running: simpsons_rule
  0.000037 seconds (93 allocations: 1.797 KiB)
Running: simpsons38_rule
  0.028880 seconds (463 allocations: 22.578 KiB)
Running: trapezoidal_rule
  0.022926 seconds (179 allocations: 8.766 KiB)
Test Summary: | Pass  Total
modbessel0    |   16     16
Integrating 1/sqrt(-19.6 sin(x)) from -pi to 0 and comparing the result to the analytical solution of ellipk(1/2)/sqrt(2.45) The integrand has singularities at x = -pi and x=0, so for some of these functions the integration domain has to be itself approximated.
Running: adaptive_simpsons_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 35.075634 seconds (629.34 M allocations: 9.388 GiB, 5.75% gc time)
Running: chebyshev_quadrature with k=1
  0.555645 seconds (438.64 k allocations: 24.248 MiB, 3.27% gc time)
Running: chebyshev_quadrature with k=2
 13.093657 seconds (495.98 k allocations: 4.042 GiB, 3.61% gc time)
Running: chebyshev_quadrature with k=3
  5.704061 seconds (290.07 k allocations: 1.643 GiB, 4.97% gc time)
Running: chebyshev_quadrature with k=4
  7.510708 seconds (290.10 k allocations: 2.262 GiB, 2.55% gc time)
Running: jacobi_quadrature with α=β=1. The N value required to get an accurate result is too high to be practical, so only a rough approximation can be arrived at.
 48.223567 seconds (504.65 k allocations: 13.255 GiB, 3.06% gc time)
Running: legendre_quadrature.
  5.364766 seconds (232.43 k allocations: 1.976 GiB, 1.25% gc time)
The following integration functions have to use an approximated domain due to the endpoint singularities.
Running: lobatto_quadrature on [-pi+1e-6, -1e-6]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 52.085909 seconds (8.24 M allocations: 13.384 GiB, 3.74% gc time)
Running: radau_quadrature on [-pi+1e-6, -1e-6]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 52.563332 seconds (7.24 M allocations: 13.369 GiB, 2.40% gc time)
Running: rectangle_rule_left on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  2.978722 seconds (23.33 k allocations: 1.402 MiB)
Running: rectangle_rule_midpoint on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  3.017353 seconds (31.94 k allocations: 1.958 MiB)
Running: rectangle_rule_right on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  3.199742 seconds (23.55 k allocations: 1.412 MiB)
Running: rombergs_method on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  1.121587 seconds (455.76 k allocations: 153.652 MiB)
Running: simpsons_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 38.928267 seconds (600.04 M allocations: 8.943 GiB, 8.06% gc time)
Running: simpsons38_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 39.543453 seconds (600.05 M allocations: 8.944 GiB, 7.92% gc time)
Running: trapezoidal_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 39.752870 seconds (600.04 M allocations: 8.943 GiB, 8.93% gc time)
Test Summary: | Pass  Total
Simppen       |   16     16
Integrating sin(x^2)e^(-x)/x from 0 to infinity, with the approximated domain of integration of 0 to 100. The removable singularity at x=0 in the integrand has been removed.
Running: adaptive_simpsons_rule with ε=1e-8
  0.080594 seconds (182.49 k allocations: 4.517 MiB)
Running: chebyshev_quadrature with k=1
  0.220995 seconds (257.55 k allocations: 14.011 MiB)
Running: chebyshev_quadrature with k=2
  0.219862 seconds (283.70 k allocations: 15.185 MiB)
Running: chebyshev_quadrature with k=3
  0.218253 seconds (260.23 k allocations: 13.437 MiB)
Running: chebyshev_quadrature with k=4
  0.210070 seconds (260.26 k allocations: 13.430 MiB)
Running: jacobi_quadrature with α=β=1
  0.410404 seconds (404.84 k allocations: 35.836 MiB)
Running: laguerre_quadrature with k=2
  0.197533 seconds (187.56 k allocations: 10.852 MiB)
Running: legendre_quadrature
  0.131463 seconds (151.36 k allocations: 8.368 MiB)
Running: lobatto_quadrature
  0.037598 seconds (10.78 k allocations: 15.108 MiB)
Running: radau_quadrature
  0.034782 seconds (9.55 k allocations: 13.182 MiB)
Running: rectangle_rule_left
  0.059705 seconds (19.80 k allocations: 1.170 MiB)
Running: rectangle_rule_midpoint
  0.045241 seconds (26.75 k allocations: 1.639 MiB)
Running: rectangle_rule_right
  0.049435 seconds (18.35 k allocations: 1.093 MiB)
Running: rombergs_method
  0.239830 seconds (178.35 k allocations: 10.180 MiB)
Running: simpsons_rule
  0.001525 seconds (24.72 k allocations: 386.656 KiB)
Running: simpsons38_rule
  0.046449 seconds (81.40 k allocations: 3.518 MiB)
Running: trapezoidal_rule
  0.203191 seconds (2.39 M allocations: 37.756 MiB)
Test Summary: | Pass  Total
sinexpox      |   17     17
Integrating sin(x)/x from 0 to 100 and comparing it to the exact result.
Running: adaptive_simpsons_rule with ε=1e-8
  0.002491 seconds (30.71 k allocations: 480.250 KiB)
Running: chebyshev_quadrature with k=1
  0.141594 seconds (2.58 k allocations: 1.696 MiB)
Running: chebyshev_quadrature with k=2
  0.119131 seconds (2.84 k allocations: 2.359 MiB)
Running: chebyshev_quadrature with k=3
  0.128168 seconds (3.26 k allocations: 2.060 MiB)
Running: chebyshev_quadrature with k=4
  0.148417 seconds (3.26 k allocations: 1.501 MiB)
Running: jacobi_quadrature with α=β=1
  6.993393 seconds (401.68 k allocations: 906.516 MiB, 4.75% gc time)
Running: legendre_quadrature
  0.072135 seconds (1.33 k allocations: 72.281 KiB)
Running: lobatto_quadrature
  0.000222 seconds (253 allocations: 9.188 KiB)
Running: radau_quadrature
  0.000203 seconds (221 allocations: 8.812 KiB)
Running: rectangle_rule_left; only a rough approximation can be practically achieved using this function
  3.637871 seconds (11 allocations: 528 bytes)
Running: rectangle_rule_midpoint
  0.000505 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right; only a rough approximation can be practically achieved using this function
  3.283701 seconds (11 allocations: 528 bytes)
Running: rombergs_method
  0.066800 seconds (1.16 k allocations: 66.734 KiB)
Running: simpsons_rule
  0.000054 seconds (9 allocations: 496 bytes)
Running: simpsons38_rule
  0.000065 seconds (9 allocations: 496 bytes)
Running: trapezoidal_rule
  0.000893 seconds (9 allocations: 496 bytes)
Test Summary: | Pass  Total
sinxx         |   16     16
Integrating (x^3+1)/(x^4 (x+1)(x^2+1)) from 1 to e and comparing the result to the analytical solution of log(sqrt(2)*exp(1)/(sqrt(exp(2)+1)))+1/2*(exp(-2)-1)+1/3*(1-exp(-3))
Running: adaptive_simpsons_rule with ε=1e-8
  0.000758 seconds (6.34 k allocations: 99.453 KiB)
Running: chebyshev_quadrature with k=1
  0.112701 seconds (2.48 k allocations: 576.609 KiB)
Running: chebyshev_quadrature with k=2
  0.109308 seconds (2.73 k allocations: 777.391 KiB)
Running: chebyshev_quadrature with k=3
  0.117053 seconds (3.15 k allocations: 685.641 KiB)
Running: chebyshev_quadrature with k=4
  0.132803 seconds (3.16 k allocations: 516.203 KiB)
Running: jacobi_quadrature with α=β=1
  2.992506 seconds (387.96 k allocations: 253.739 MiB)
Running: legendre_quadrature
  0.062463 seconds (1.28 k allocations: 65.438 KiB)
Running: lobatto_quadrature
  0.000151 seconds (91 allocations: 3.656 KiB)
Running: radau_quadrature
  0.001037 seconds (81 allocations: 3.453 KiB)
Running: rectangle_rule_left; only a rough approximation can be practically achieved using this function.
 11.127706 seconds (11 allocations: 528 bytes)
Running: rectangle_rule_midpoint
  0.001046 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right; only a rough approximation can be practically achieved using this function.
 10.498400 seconds (11 allocations: 528 bytes)
Running: rombergs_method
  0.118010 seconds (1.18 k allocations: 62.562 KiB)
Running: simpsons_rule
  0.000050 seconds (9 allocations: 496 bytes)
Running: simpsons38_rule
  0.000060 seconds (9 allocations: 496 bytes)
Running: trapezoidal_rule
  0.001665 seconds (9 allocations: 496 bytes)
Test Summary: | Pass  Total
partfrac      |   16     16
    Testing FunctionIntegrator tests passed 
