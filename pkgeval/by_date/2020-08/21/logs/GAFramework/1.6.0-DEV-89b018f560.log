Julia Version 1.6.0-DEV.689
Commit 89b018f560 (2020-08-21 13:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.1
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.1
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_0Es01c/Project.toml`
  [5789e2e9] FileIO v1.4.1
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_0Es01c/Manifest.toml`
  [5789e2e9] FileIO v1.4.1
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.2172192076369213
curgen: 20 fitness: 0.2172192076369213
curgen: 30 fitness: 0.2172192076369213
curgen: 40 fitness: 0.2172318929464364
curgen: 50 fitness: 0.2172318929464364
CoordinateCreature{Vector{Float64}}([0.22274623825471576], -0.2172318929464364) 0.22274623825471576 -0.2172318929464364
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.257399375472173
curgen: 100 fitness: 3.257927325909352
curgen: 150 fitness: 3.2583021015739337
curgen: 200 fitness: 3.2584218045378184
curgen: 250 fitness: 3.258424034183549
curgen: 300 fitness: 3.2584458373249734
curgen: 350 fitness: 3.2584462321731404
curgen: 400 fitness: 3.258466964998775
curgen: 450 fitness: 3.258468139802587
curgen: 500 fitness: 3.2584896888890493
CoordinateCreature{Vector{Float64}}([-0.22272580423928226, -0.22253141876453147, -0.22247101036766456, 0.22254574601117622, -0.22270257217104314, -0.22256859763219142, 0.2221993643539417, -0.22227220199107267, -0.22242651551444428, -0.22250392727962257, -0.22242297004735692, -0.2225494186195432, -0.22263587648732805, -0.22249572559937478, 0.22237598837263045], -3.2584896888890493) [-0.22272580423928226, -0.22253141876453147, -0.22247101036766456, 0.22254574601117622, -0.22270257217104314, -0.22256859763219142, 0.2221993643539417, -0.22227220199107267, -0.22242651551444428, -0.22250392727962257, -0.22242297004735692, -0.2225494186195432, -0.22263587648732805, -0.22249572559937478, 0.22237598837263045] -3.2584896888890493
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.0022943884469839304
curgen: 100 fitness: -0.0019403289486490394
curgen: 150 fitness: -0.0019403289486490394
curgen: 200 fitness: -0.0019294382245504949
curgen: 250 fitness: -0.001927462985264583
curgen: 300 fitness: -0.001927462985264583
curgen: 350 fitness: -0.001927462985264583
curgen: 400 fitness: -0.001927462985264583
curgen: 450 fitness: -0.001927462985264583
curgen: 500 fitness: -0.001857646433023774
CoordinateCreature{Vector{Float64}}([0.00034423352239976385, -0.0002153238591218994, 0.001420965350797881, 0.0005147508272730379, -1.3539185612721936e-5, -0.002008231764734617, 0.0001737128922381704, 0.0005126602376992885, -1.721856816754651e-5, 0.00020447666337188654, 0.0006688900843232543, -0.0008442345614996402, -0.0008702945370036, 0.0003826338169672361, -0.0006945225792198378], 0.001857646433023774) [0.00034423352239976385, -0.0002153238591218994, 0.001420965350797881, 0.0005147508272730379, -1.3539185612721936e-5, -0.002008231764734617, 0.0001737128922381704, 0.0005126602376992885, -1.721856816754651e-5, 0.00020447666337188654, 0.0006688900843232543, -0.0008442345614996402, -0.0008702945370036, 0.0003826338169672361, -0.0006945225792198378] 0.001857646433023774
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
