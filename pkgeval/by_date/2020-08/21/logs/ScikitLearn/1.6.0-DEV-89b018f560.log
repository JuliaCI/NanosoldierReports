Julia Version 1.6.0-DEV.689
Commit 89b018f560 (2020-08-21 13:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed VersionParsing ────────────── v1.2.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed OrderedCollections ────────── v1.3.0
  Installed Parameters ────────────────── v0.12.1
  Installed CategoricalArrays ─────────── v0.8.1
  Installed DataStructures ────────────── v0.17.20
  Installed ScikitLearn ───────────────── v0.6.2
  Installed DataFrames ────────────────── v0.21.6
  Installed InvertedIndices ───────────── v1.0.0
  Installed Tables ────────────────────── v1.0.5
  Installed DataAPI ───────────────────── v1.3.0
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed MacroTools ────────────────── v0.5.5
  Installed IterTools ─────────────────── v1.3.0
  Installed DataValueInterfaces ───────── v1.0.0
  Installed ScikitLearnBase ───────────── v0.5.0
  Installed Missings ──────────────────── v0.4.3
  Installed Conda ─────────────────────── v1.4.1
  Installed TableTraits ───────────────── v1.0.0
  Installed StatsBase ─────────────────── v0.33.0
  Installed Compat ────────────────────── v3.14.0
  Installed Parsers ───────────────────── v1.0.10
  Installed JSON ──────────────────────── v0.21.0
  Installed Reexport ──────────────────── v0.2.0
  Installed PyCall ────────────────────── v1.91.4
  Installed PooledArrays ──────────────── v0.5.3
  Installed UnPack ────────────────────── v1.0.2
Updating `~/.julia/environments/v1.6/Project.toml`
  [3646fa90] + ScikitLearn v0.6.2
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [324d7699] + CategoricalArrays v0.8.1
  [34da2185] + Compat v3.14.0
  [8f4d0f93] + Conda v1.4.1
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.21.6
  [864edb3b] + DataStructures v0.17.20
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [c8e1da08] + IterTools v1.3.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [1914dd2f] + MacroTools v0.5.5
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.3.0
  [d96e819e] + Parameters v0.12.1
  [69de0a69] + Parsers v1.0.10
  [2dfb63ee] + PooledArrays v0.5.3
  [438e738f] + PyCall v1.91.4
  [189a3867] + Reexport v0.2.0
  [3646fa90] + ScikitLearn v0.6.2
  [6e75b9c4] + ScikitLearnBase v0.5.0
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.33.0
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.5
  [3a884ed6] + UnPack v1.0.2
  [81def892] + VersionParsing v1.2.0
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
   Building Conda ─→ `~/.julia/packages/Conda/3rPhK/deps/build.log`
   Building PyCall → `~/.julia/packages/PyCall/zqDXB/deps/build.log`
    Testing ScikitLearn
Status `/tmp/jl_mx9zVj/Project.toml`
  [34da2185] Compat v3.14.0
  [8f4d0f93] Conda v1.4.1
  [a93c6f00] DataFrames v0.21.6
  [7806a523] DecisionTree v0.10.9
  [cc18c42c] GaussianMixtures v0.3.1
  [891a1506] GaussianProcesses v0.12.1
  [c8e1da08] IterTools v1.3.0
  [1914dd2f] MacroTools v0.5.5
  [0db19996] NBInclude v2.2.0
  [d96e819e] Parameters v0.12.1
  [438e738f] PyCall v1.91.4
  [d330b81b] PyPlot v2.9.0
  [df47a6cb] RData v0.7.2
  [ce6b1742] RDatasets v0.6.10
  [3646fa90] ScikitLearn v0.6.2
  [6e75b9c4] ScikitLearnBase v0.5.0
  [2913bbd2] StatsBase v0.33.0
  [81def892] VersionParsing v1.2.0
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [de0858da] Printf
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
Status `/tmp/jl_mx9zVj/Manifest.toml`
  [621f4979] AbstractFFTs v0.5.0
  [79e6a3ab] Adapt v2.0.2
  [7d9fca2a] Arpack v0.4.0
  [68821587] Arpack_jll v3.5.0+3
  [4fba245c] ArrayInterface v2.11.0
  [4c555306] ArrayLayouts v0.2.6
  [b99e7846] BinaryProvider v0.5.10
  [336ed68f] CSV v0.7.7
  [324d7699] CategoricalArrays v0.8.1
  [aaaa29a8] Clustering v0.14.1
  [944b1d66] CodecZlib v0.7.0
  [3da002f7] ColorTypes v0.10.8
  [5ae59095] Colors v0.12.4
  [bbf7d656] CommonSubexpressions v0.3.0
  [34da2185] Compat v3.14.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [8f4d0f93] Conda v1.4.1
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.21.6
  [864edb3b] DataStructures v0.17.20
  [e2d170a0] DataValueInterfaces v1.0.0
  [7806a523] DecisionTree v0.10.9
  [163ba53b] DiffResults v1.0.2
  [b552c78f] DiffRules v1.0.1
  [b4f34e82] Distances v0.9.0
  [31c24e10] Distributions v0.23.8
  [ffbed154] DocStringExtensions v0.8.2
  [e30172f5] Documenter v0.24.11
  [fdbdab4c] ElasticArrays v1.2.4
  [2904ab23] ElasticPDMats v0.2.2
  [e2ba6199] ExprTools v0.1.1
  [8f5d6c58] EzXML v1.1.0
  [442a2c76] FastGaussQuadrature v0.4.2
  [5789e2e9] FileIO v1.4.1
  [1a297f60] FillArrays v0.8.14
  [6a86dc24] FiniteDiff v2.6.0
  [53c48c17] FixedPointNumbers v0.8.4
  [f6369f11] ForwardDiff v0.10.12
  [cc18c42c] GaussianMixtures v0.3.1
  [891a1506] GaussianProcesses v0.12.1
  [7869d1d1] IRTools v0.3.3
  [41ab1584] InvertedIndices v1.0.0
  [c8e1da08] IterTools v1.3.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [033835bb] JLD2 v0.1.14
  [682c06a0] JSON v0.21.0
  [b964fa9f] LaTeXStrings v1.1.0
  [94ce4f54] Libiconv_jll v1.16.0+5
  [d3d80556] LineSearches v7.1.0
  [1914dd2f] MacroTools v0.5.5
  [e1d29d7a] Missings v0.4.3
  [78c3b35d] Mocking v0.7.1
  [0db19996] NBInclude v2.2.0
  [d41bc354] NLSolversBase v7.7.0
  [872c559c] NNlib v0.6.6
  [77ba4419] NaNMath v0.3.4
  [b8a86587] NearestNeighbors v0.4.6
  [4536629a] OpenBLAS_jll v0.3.10+0
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [429524aa] Optim v0.21.0
  [bac558e1] OrderedCollections v1.3.0
  [90014a1f] PDMats v0.10.0
  [d96e819e] Parameters v0.12.1
  [69de0a69] Parsers v1.0.10
  [2dfb63ee] PooledArrays v0.5.3
  [85a6dd25] PositiveFactorizations v0.2.3
  [92933f4c] ProgressMeter v1.3.2
  [438e738f] PyCall v1.91.4
  [d330b81b] PyPlot v2.9.0
  [1fd47b50] QuadGK v2.4.0
  [df47a6cb] RData v0.7.2
  [ce6b1742] RDatasets v0.6.10
  [3cdcf5f2] RecipesBase v1.0.2
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v1.0.1
  [79098fc4] Rmath v0.6.1
  [f50d1b31] Rmath_jll v0.2.2+1
  [3646fa90] ScikitLearn v0.6.2
  [6e75b9c4] ScikitLearnBase v0.5.0
  [91c51154] SentinelArrays v1.2.13
  [b85f4697] SoftGlobalScope v1.1.0
  [a2af1166] SortingAlgorithms v0.3.1
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.4
  [2913bbd2] StatsBase v0.33.0
  [4c63d2b9] StatsFuns v0.9.5
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.5
  [f269a46b] TimeZones v1.3.2
  [3bb67fe8] TranscodingStreams v0.9.5
  [3a884ed6] UnPack v1.0.2
  [81def892] VersionParsing v1.2.0
  [02c8fc9c] XML2_jll v2.9.10+1
  [83775a58] Zlib_jll v1.2.11+15
  [e88e6eb3] Zygote v0.4.20
  [700de1a5] ZygoteRules v0.2.0
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [4607b0f0] SuiteSparse
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
base: Error During Test at /home/pkgeval/.julia/packages/ScikitLearn/Kn82b/test/runtests.jl:16
  Got exception outside of a @test
  LoadError: PyError (PyImport_ImportModule
  
  The Python package sklearn could not be found by pyimport. Usually this means
  that you did not install sklearn in the Python version being used by PyCall.
  
  PyCall is currently configured to use the Python version at:
  
  /usr/bin/python3
  
  and you should use whatever mechanism you usually use (apt-get, pip, conda,
  etcetera) to install the Python package containing the sklearn module.
  
  One alternative is to re-configure PyCall to use a different Python
  version on your system: set ENV["PYTHON"] to the path/name of the python
  executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.
  
  Another alternative is to configure PyCall to use a Julia-specific Python
  distribution via the Conda.jl package (which installs a private Anaconda
  Python distribution), which has the advantage that packages can be installed
  and kept up-to-date via Julia.  As explained in the PyCall documentation,
  set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
  To install the sklearn module, you can use `pyimport_conda("sklearn", PKG)`,
  where PKG is the Anaconda package the contains the module sklearn,
  or alternatively you can use the Conda package directly (via
  `using Conda` followed by `Conda.add` etcetera).
  
  ) <class 'ModuleNotFoundError'>
  ModuleNotFoundError("No module named 'sklearn'",)
  
  Stacktrace:
    [1] pyimport(name::String)
      @ PyCall ~/.julia/packages/PyCall/zqDXB/src/PyCall.jl:536
    [2] pyimport_conda(modulename::String, condapkg::String, channel::String)
      @ PyCall ~/.julia/packages/PyCall/zqDXB/src/PyCall.jl:694
    [3] pyimport_conda
      @ ~/.julia/packages/PyCall/zqDXB/src/PyCall.jl:693 [inlined]
    [4] import_sklearn()
      @ ScikitLearn.Skcore ~/.julia/packages/ScikitLearn/Kn82b/src/Skcore.jl:146
    [5] top-level scope
      @ ~/.julia/packages/ScikitLearn/Kn82b/src/Skcore.jl:182
    [6] include(fname::String)
      @ Base.MainInclude ./client.jl:443
    [7] top-level scope
      @ ~/.julia/packages/ScikitLearn/Kn82b/test/runtests.jl:17
    [8] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
    [9] top-level scope
      @ ~/.julia/packages/ScikitLearn/Kn82b/test/runtests.jl:17
   [10] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
   [11] top-level scope
      @ ~/.julia/packages/ScikitLearn/Kn82b/test/runtests.jl:12
   [12] include(fname::String)
      @ Base.MainInclude ./client.jl:443
   [13] top-level scope
      @ none:6
   [14] eval(m::Module, e::Any)
      @ Core ./boot.jl:344
   [15] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:260
   [16] _start()
      @ Base ./client.jl:484
  in expression starting at /home/pkgeval/.julia/packages/ScikitLearn/Kn82b/test/test_base.jl:12
  
pipeline: Error During Test at /home/pkgeval/.julia/packages/ScikitLearn/Kn82b/test/runtests.jl:21
  Got exception outside of a @test
  LoadError: PyError (PyImport_ImportModule
  
  The Python package sklearn could not be found by pyimport. Usually this means
  that you did not install sklearn in the Python version being used by PyCall.
  
  PyCall is currently configured to use the Python version at:
  
  /usr/bin/python3
  
  and you should use whatever mechanism you usually use (apt-get, pip, conda,
  etcetera) to install the Python package containing the sklearn module.
  
  One alternative is to re-configure PyCall to use a different Python
  version on your system: set ENV["PYTHON"] to the path/name of the python
  executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.
  
  Another alternative is to configure PyCall to use a Julia-specific Python
  distribution via the Conda.jl package (which installs a private Anaconda
  Python distribution), which has the advantage that packages can be installed
  and kept up-to-date via Julia.  As explained in the PyCall documentation,
  set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
  To install the sklearn module, you can use `pyimport_conda("sklearn", PKG)`,
  where PKG is the Anaconda package the contains the module sklearn,
  or alternatively you can use the Conda package directly (via
  `using Conda` followed by `Conda.add` etcetera).
  
  ) <class 'ModuleNotFoundError'>
  ModuleNotFoundError("No module named 'sklearn'",)
  
  Stacktrace:
    [1] pyimport(name::String)
      @ PyCall ~/.julia/packages/PyCall/zqDXB/src/PyCall.jl:536
    [2] pyimport_conda(modulename::String, condapkg::String, channel::String)
      @ PyCall ~/.julia/packages/PyCall/zqDXB/src/PyCall.jl:694
    [3] pyimport_conda
      @ ~/.julia/packages/PyCall/zqDXB/src/PyCall.jl:693 [inlined]
    [4] import_sklearn()
      @ ScikitLearn.Skcore ~/.julia/packages/ScikitLearn/Kn82b/src/Skcore.jl:146
    [5] top-level scope
      @ ~/.julia/packages/ScikitLearn/Kn82b/src/Skcore.jl:182
    [6] include(fname::String)
      @ Base.MainInclude ./client.jl:443
    [7] top-level scope
      @ ~/.julia/packages/ScikitLearn/Kn82b/test/runtests.jl:22
    [8] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
    [9] top-level scope
      @ ~/.julia/packages/ScikitLearn/Kn82b/test/runtests.jl:22
   [10] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
   [11] top-level scope
      @ ~/.julia/packages/ScikitLearn/Kn82b/test/runtests.jl:12
   [12] include(fname::String)
      @ Base.MainInclude ./client.jl:443
   [13] top-level scope
      @ none:6
   [14] eval(m::Module, e::Any)
      @ Core ./boot.jl:344
   [15] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:260
   [16] _start()
      @ Base ./client.jl:484
  in expression starting at /home/pkgeval/.julia/packages/ScikitLearn/Kn82b/test/test_pipeline.jl:17
  
┌ Warning: The least populated class in y has only 2 members, which is too few. The minimum number of labels for any class cannot be less than n_folds=3.
└ @ ScikitLearn.Skcore ~/.julia/packages/ScikitLearn/Kn82b/src/cross_validation.jl:144
┌ Warning: The least populated class in y has only 2 members, which is too few. The minimum number of labels for any class cannot be less than n_folds=3.
└ @ ScikitLearn.Skcore ~/.julia/packages/ScikitLearn/Kn82b/src/cross_validation.jl:144
┌ Warning: The least populated class in y has only 2 members, which is too few. The minimum number of labels for any class cannot be less than n_folds=3.
└ @ ScikitLearn.Skcore ~/.julia/packages/ScikitLearn/Kn82b/src/cross_validation.jl:144
┌ Warning: The least populated class in y has only 2 members, which is too few. The minimum number of labels for any class cannot be less than n_folds=3.
└ @ ScikitLearn.Skcore ~/.julia/packages/ScikitLearn/Kn82b/src/cross_validation.jl:144
┌ Warning: The least populated class in y has only 2 members, which is too few. The minimum number of labels for any class cannot be less than n_folds=3.
└ @ ScikitLearn.Skcore ~/.julia/packages/ScikitLearn/Kn82b/src/cross_validation.jl:144
┌ Warning: The least populated class in y has only 2 members, which is too few. The minimum number of labels for any class cannot be less than n_folds=3.
└ @ ScikitLearn.Skcore ~/.julia/packages/ScikitLearn/Kn82b/src/cross_validation.jl:144
┌ Warning: The least populated class in y has only 2 members, which is too few. The minimum number of labels for any class cannot be less than n_folds=3.
└ @ ScikitLearn.Skcore ~/.julia/packages/ScikitLearn/Kn82b/src/cross_validation.jl:144
┌ Warning: The least populated class in y has only 2 members, which is too few. The minimum number of labels for any class cannot be less than n_folds=3.
└ @ ScikitLearn.Skcore ~/.julia/packages/ScikitLearn/Kn82b/src/cross_validation.jl:144
┌ Warning: The least populated class in y has only 2 members, which is too few. The minimum number of labels for any class cannot be less than n_folds=3.
└ @ ScikitLearn.Skcore ~/.julia/packages/ScikitLearn/Kn82b/src/cross_validation.jl:144
┌ Warning: The least populated class in y has only 2 members, which is too few. The minimum number of labels for any class cannot be less than n_folds=3.
└ @ ScikitLearn.Skcore ~/.julia/packages/ScikitLearn/Kn82b/src/cross_validation.jl:144
┌ Warning: The least populated class in y has only 2 members, which is too few. The minimum number of labels for any class cannot be less than n_folds=3.
└ @ ScikitLearn.Skcore ~/.julia/packages/ScikitLearn/Kn82b/src/cross_validation.jl:144
┌ Warning: The least populated class in y has only 2 members, which is too few. The minimum number of labels for any class cannot be less than n_folds=3.
└ @ ScikitLearn.Skcore ~/.julia/packages/ScikitLearn/Kn82b/src/cross_validation.jl:144
┌ Warning: The least populated class in y has only 2 members, which is too few. The minimum number of labels for any class cannot be less than n_folds=3.
└ @ ScikitLearn.Skcore ~/.julia/packages/ScikitLearn/Kn82b/src/cross_validation.jl:144
┌ Warning: The least populated class in y has only 2 members, which is too few. The minimum number of labels for any class cannot be less than n_folds=3.
└ @ ScikitLearn.Skcore ~/.julia/packages/ScikitLearn/Kn82b/src/cross_validation.jl:144
┌ Warning: The least populated class in y has only 2 members, which is too few. The minimum number of labels for any class cannot be less than n_folds=3.
└ @ ScikitLearn.Skcore ~/.julia/packages/ScikitLearn/Kn82b/src/cross_validation.jl:144
┌ Warning: The least populated class in y has only 2 members, which is too few. The minimum number of labels for any class cannot be less than n_folds=3.
└ @ ScikitLearn.Skcore ~/.julia/packages/ScikitLearn/Kn82b/src/cross_validation.jl:144
┌ Warning: The least populated class in y has only 2 members, which is too few. The minimum number of labels for any class cannot be less than n_folds=3.
└ @ ScikitLearn.Skcore ~/.julia/packages/ScikitLearn/Kn82b/src/cross_validation.jl:144
┌ Warning: The least populated class in y has only 2 members, which is too few. The minimum number of labels for any class cannot be less than n_folds=3.
└ @ ScikitLearn.Skcore ~/.julia/packages/ScikitLearn/Kn82b/src/cross_validation.jl:144
┌ Warning: The least populated class in y has only 2 members, which is too few. The minimum number of labels for any class cannot be less than n_folds=3.
└ @ ScikitLearn.Skcore ~/.julia/packages/ScikitLearn/Kn82b/src/cross_validation.jl:144
┌ Warning: The least populated class in y has only 2 members, which is too few. The minimum number of labels for any class cannot be less than n_folds=3.
└ @ ScikitLearn.Skcore ~/.julia/packages/ScikitLearn/Kn82b/src/cross_validation.jl:144
┌ Warning: The least populated class in y has only 2 members, which is too few. The minimum number of labels for any class cannot be less than n_folds=3.
└ @ ScikitLearn.Skcore ~/.julia/packages/ScikitLearn/Kn82b/src/cross_validation.jl:144
quickstart: Error During Test at /home/pkgeval/.julia/packages/ScikitLearn/Kn82b/test/runtests.jl:34
  Got exception outside of a @test
  LoadError: PyError (PyImport_ImportModule
  
  The Python package sklearn could not be found by pyimport. Usually this means
  that you did not install sklearn in the Python version being used by PyCall.
  
  PyCall is currently configured to use the Python version at:
  
  /usr/bin/python3
  
  and you should use whatever mechanism you usually use (apt-get, pip, conda,
  etcetera) to install the Python package containing the sklearn module.
  
  One alternative is to re-configure PyCall to use a different Python
  version on your system: set ENV["PYTHON"] to the path/name of the python
  executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.
  
  Another alternative is to configure PyCall to use a Julia-specific Python
  distribution via the Conda.jl package (which installs a private Anaconda
  Python distribution), which has the advantage that packages can be installed
  and kept up-to-date via Julia.  As explained in the PyCall documentation,
  set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
  To install the sklearn module, you can use `pyimport_conda("sklearn", PKG)`,
  where PKG is the Anaconda package the contains the module sklearn,
  or alternatively you can use the Conda package directly (via
  `using Conda` followed by `Conda.add` etcetera).
  
  ) <class 'ModuleNotFoundError'>
  ModuleNotFoundError("No module named 'sklearn'",)
  
  Stacktrace:
    [1] pyimport(name::String)
      @ PyCall ~/.julia/packages/PyCall/zqDXB/src/PyCall.jl:536
    [2] pyimport_conda(modulename::String, condapkg::String, channel::String)
      @ PyCall ~/.julia/packages/PyCall/zqDXB/src/PyCall.jl:694
    [3] pyimport_conda
      @ ~/.julia/packages/PyCall/zqDXB/src/PyCall.jl:693 [inlined]
    [4] import_sklearn()
      @ ScikitLearn.Skcore ~/.julia/packages/ScikitLearn/Kn82b/src/Skcore.jl:146
    [5] top-level scope
      @ ~/.julia/packages/ScikitLearn/Kn82b/src/Skcore.jl:182
    [6] include(fname::String)
      @ Base.MainInclude ./client.jl:443
    [7] top-level scope
      @ ~/.julia/packages/ScikitLearn/Kn82b/test/runtests.jl:35
    [8] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
    [9] top-level scope
      @ ~/.julia/packages/ScikitLearn/Kn82b/test/runtests.jl:35
   [10] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
   [11] top-level scope
      @ ~/.julia/packages/ScikitLearn/Kn82b/test/runtests.jl:12
   [12] include(fname::String)
      @ Base.MainInclude ./client.jl:443
   [13] top-level scope
      @ none:6
   [14] eval(m::Module, e::Any)
      @ Core ./boot.jl:344
   [15] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:260
   [16] _start()
      @ Base ./client.jl:484
  in expression starting at /home/pkgeval/.julia/packages/ScikitLearn/Kn82b/test/test_quickstart.jl:13
  
DataFrames: Error During Test at /home/pkgeval/.julia/packages/ScikitLearn/Kn82b/test/runtests.jl:37
  Got exception outside of a @test
  LoadError: PyError (PyImport_ImportModule
  
  The Python package sklearn could not be found by pyimport. Usually this means
  that you did not install sklearn in the Python version being used by PyCall.
  
  PyCall is currently configured to use the Python version at:
  
  /usr/bin/python3
  
  and you should use whatever mechanism you usually use (apt-get, pip, conda,
  etcetera) to install the Python package containing the sklearn module.
  
  One alternative is to re-configure PyCall to use a different Python
  version on your system: set ENV["PYTHON"] to the path/name of the python
  executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.
  
  Another alternative is to configure PyCall to use a Julia-specific Python
  distribution via the Conda.jl package (which installs a private Anaconda
  Python distribution), which has the advantage that packages can be installed
  and kept up-to-date via Julia.  As explained in the PyCall documentation,
  set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
  To install the sklearn module, you can use `pyimport_conda("sklearn", PKG)`,
  where PKG is the Anaconda package the contains the module sklearn,
  or alternatively you can use the Conda package directly (via
  `using Conda` followed by `Conda.add` etcetera).
  
  ) <class 'ModuleNotFoundError'>
  ModuleNotFoundError("No module named 'sklearn'",)
  
  Stacktrace:
    [1] pyimport(name::String)
      @ PyCall ~/.julia/packages/PyCall/zqDXB/src/PyCall.jl:536
    [2] pyimport_conda(modulename::String, condapkg::String, channel::String)
      @ PyCall ~/.julia/packages/PyCall/zqDXB/src/PyCall.jl:694
    [3] pyimport_conda
      @ ~/.julia/packages/PyCall/zqDXB/src/PyCall.jl:693 [inlined]
    [4] import_sklearn()
      @ ScikitLearn.Skcore ~/.julia/packages/ScikitLearn/Kn82b/src/Skcore.jl:146
    [5] top-level scope
      @ ~/.julia/packages/ScikitLearn/Kn82b/src/Skcore.jl:182
    [6] include(fname::String)
      @ Base.MainInclude ./client.jl:443
    [7] top-level scope
      @ ~/.julia/packages/ScikitLearn/Kn82b/test/runtests.jl:38
    [8] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
    [9] top-level scope
      @ ~/.julia/packages/ScikitLearn/Kn82b/test/runtests.jl:38
   [10] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
   [11] top-level scope
      @ ~/.julia/packages/ScikitLearn/Kn82b/test/runtests.jl:12
   [12] include(fname::String)
      @ Base.MainInclude ./client.jl:443
   [13] top-level scope
      @ none:6
   [14] eval(m::Module, e::Any)
      @ Core ./boot.jl:344
   [15] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:260
   [16] _start()
      @ Base ./client.jl:484
  in expression starting at /home/pkgeval/.julia/packages/ScikitLearn/Kn82b/test/test_dataframes.jl:3
  
Testing ../examples/Classifier_Comparison.ipynb
┌ Warning: `@pyimport foo` is deprecated in favor of `foo = pyimport("foo")`.
│   caller = _pywrap_pyimport(o::PyCall.PyObject) at PyCall.jl:399
└ @ PyCall ~/.julia/packages/PyCall/zqDXB/src/PyCall.jl:399
Notebook examples: Error During Test at /home/pkgeval/.julia/packages/ScikitLearn/Kn82b/test/runtests.jl:63
  Got exception outside of a @test
  LoadError: PyError (PyImport_ImportModule
  
  The Python package sklearn could not be found by pyimport. Usually this means
  that you did not install sklearn in the Python version being used by PyCall.
  
  PyCall is currently configured to use the Python version at:
  
  /usr/bin/python3
  
  and you should use whatever mechanism you usually use (apt-get, pip, conda,
  etcetera) to install the Python package containing the sklearn module.
  
  One alternative is to re-configure PyCall to use a different Python
  version on your system: set ENV["PYTHON"] to the path/name of the python
  executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.
  
  Another alternative is to configure PyCall to use a Julia-specific Python
  distribution via the Conda.jl package (which installs a private Anaconda
  Python distribution), which has the advantage that packages can be installed
  and kept up-to-date via Julia.  As explained in the PyCall documentation,
  set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
  To install the sklearn module, you can use `pyimport_conda("sklearn", PKG)`,
  where PKG is the Anaconda package the contains the module sklearn,
  or alternatively you can use the Conda package directly (via
  `using Conda` followed by `Conda.add` etcetera).
  
  ) <class 'ModuleNotFoundError'>
  ModuleNotFoundError("No module named 'sklearn'",)
  
  Stacktrace:
    [1] pyimport(name::String)
      @ PyCall ~/.julia/packages/PyCall/zqDXB/src/PyCall.jl:536
    [2] pyimport_conda(modulename::String, condapkg::String, channel::String)
      @ PyCall ~/.julia/packages/PyCall/zqDXB/src/PyCall.jl:694
    [3] pyimport_conda
      @ ~/.julia/packages/PyCall/zqDXB/src/PyCall.jl:693 [inlined]
    [4] import_sklearn()
      @ ScikitLearn.Skcore ~/.julia/packages/ScikitLearn/Kn82b/src/Skcore.jl:146
    [5] top-level scope
      @ ~/.julia/packages/ScikitLearn/Kn82b/src/Skcore.jl:182
    [6] eval
      @ ./boot.jl:344 [inlined]
    [7] include_string(mapexpr::typeof(identity), mod::Module, code::String, filename::String)
      @ Base ./loading.jl:1104
    [8] include_string
      @ ./loading.jl:1114 [inlined]
    [9] my_include_string(m::Module, s::String, path::String, prev::String, softscope::Bool)
      @ NBInclude ~/.julia/packages/NBInclude/mNhzW/src/NBInclude.jl:29
   [10] nbinclude(m::Module, path::String; renumber::Bool, counters::UnitRange{Int64}, regex::Regex, anshook::typeof(identity), softscope::Bool)
      @ NBInclude ~/.julia/packages/NBInclude/mNhzW/src/NBInclude.jl:82
   [11] nbinclude(m::Module, path::String)
      @ NBInclude ~/.julia/packages/NBInclude/mNhzW/src/NBInclude.jl:53
   [12] top-level scope
      @ ~/.julia/packages/ScikitLearn/Kn82b/test/runtests.jl:56
   [13] eval
      @ ./boot.jl:344 [inlined]
   [14] (::var"#run_examples#1"{Vector{String}})()
      @ Main ~/.julia/packages/ScikitLearn/Kn82b/test/runtests.jl:54
   [15] top-level scope
      @ ~/.julia/packages/ScikitLearn/Kn82b/test/runtests.jl:64
   [16] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
   [17] top-level scope
      @ ~/.julia/packages/ScikitLearn/Kn82b/test/runtests.jl:64
   [18] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
   [19] top-level scope
      @ ~/.julia/packages/ScikitLearn/Kn82b/test/runtests.jl:12
   [20] include(fname::String)
      @ Base.MainInclude ./client.jl:443
   [21] top-level scope
      @ none:6
   [22] eval(m::Module, e::Any)
      @ Core ./boot.jl:344
   [23] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:260
   [24] _start()
      @ Base ./client.jl:484
  in expression starting at /home/pkgeval/.julia/packages/ScikitLearn/Kn82b/examples/Classifier_Comparison.ipynb:In[1]:12
  
Test Summary:       | Pass  Error  Total
ScikitLearnTests    |   57      5     62
  models            |    9             9
  base              |           1      1
  pipeline          |           1      1
  crossvalidation   |   38            38
  utils             |   10            10
  quickstart        |           1      1
  DataFrames        |           1      1
  Notebook examples |           1      1
ERROR: LoadError: Some tests did not pass: 57 passed, 0 failed, 5 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/ScikitLearn/Kn82b/test/runtests.jl:10
ERROR: Package ScikitLearn errored during testing
Stacktrace:
  [1] pkgerror(::String, ::Vararg{String,N} where N)
    @ Pkg.Types /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
  [2] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing)
    @ Pkg.Operations /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1580
  [3] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:328
  [4] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec})
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:315
  [5] #test#62
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [6] test
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [7] #test#61
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [8] test
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [9] test(pkg::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [10] test(pkg::String)
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [11] top-level scope
    @ none:16
