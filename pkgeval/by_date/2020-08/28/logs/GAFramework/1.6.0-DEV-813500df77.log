Julia Version 1.6.0-DEV.740
Commit 813500df77 (2020-08-27 17:25 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.2
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.2
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_HaKKr9/Project.toml`
  [5789e2e9] FileIO v1.4.2
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_HaKKr9/Manifest.toml`
  [5789e2e9] FileIO v1.4.2
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21720306411610482
curgen: 20 fitness: 0.2172219453941212
curgen: 30 fitness: 0.21723229869665553
curgen: 40 fitness: 0.21723229869665553
curgen: 50 fitness: 0.21723229869665553
CoordinateCreature{Vector{Float64}}([-0.22237496923453715], -0.21723229869665553) -0.22237496923453715 -0.21723229869665553
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.2580743122474187
curgen: 100 fitness: 3.258337068450539
curgen: 150 fitness: 3.2583809852327112
curgen: 200 fitness: 3.258425753174666
curgen: 250 fitness: 3.2584283073877547
curgen: 300 fitness: 3.2584456813919025
curgen: 350 fitness: 3.2584512624266257
curgen: 400 fitness: 3.258451450340002
curgen: 450 fitness: 3.2584518441008834
curgen: 500 fitness: 3.2584546009394906
CoordinateCreature{Vector{Float64}}([-0.2225794556400871, 0.22245596534941217, 0.22246674058339028, 0.22280757709150692, -0.22277927757477045, -0.22263476931629822, -0.2224080421457679, 0.2231007420203399, 0.2228232598414285, -0.22243774963696936, 0.22287699068459882, -0.2223595876348282, 0.22256641844882358, 0.22276786405415377, 0.22193508996018288], -3.2584546009394906) [-0.2225794556400871, 0.22245596534941217, 0.22246674058339028, 0.22280757709150692, -0.22277927757477045, -0.22263476931629822, -0.2224080421457679, 0.2231007420203399, 0.2228232598414285, -0.22243774963696936, 0.22287699068459882, -0.2223595876348282, 0.22256641844882358, 0.22276786405415377, 0.22193508996018288] -3.2584546009394906
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.003772049435298186
curgen: 100 fitness: -0.0032720429155972397
curgen: 150 fitness: -0.0014033918859013284
curgen: 200 fitness: -0.001328112951824778
curgen: 250 fitness: -0.001328112951824778
curgen: 300 fitness: -0.0005499986990855632
curgen: 350 fitness: -0.0004568865848284531
curgen: 400 fitness: -0.0004568865848284531
curgen: 450 fitness: -0.0004568865848284531
curgen: 500 fitness: -0.0004568865848284531
CoordinateCreature{Vector{Float64}}([0.00011086566391840845, -6.931884954766536e-6, 0.0005485669241734787, 0.00020232625559355442, 0.00013879573357625588, -0.0002872718563992592, 0.00011390122505023078, -0.00062889182990832, -0.00032085373238702647, 9.753625702023719e-5, -0.00034794783659516026, 0.0003635411442458412, 0.0005403752560780589, -4.464928518896523e-5, -0.0008824924635749011], 0.0004568865848284531) [0.00011086566391840845, -6.931884954766536e-6, 0.0005485669241734787, 0.00020232625559355442, 0.00013879573357625588, -0.0002872718563992592, 0.00011390122505023078, -0.00062889182990832, -0.00032085373238702647, 9.753625702023719e-5, -0.00034794783659516026, 0.0003635411442458412, 0.0005403752560780589, -4.464928518896523e-5, -0.0008824924635749011] 0.0004568865848284531
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
