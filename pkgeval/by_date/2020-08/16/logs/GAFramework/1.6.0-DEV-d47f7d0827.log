Julia Version 1.6.0-DEV.646
Commit d47f7d0827 (2020-08-15 10:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.1
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.1
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_G3IWg1/Project.toml`
  [5789e2e9] FileIO v1.4.1
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_G3IWg1/Manifest.toml`
  [5789e2e9] FileIO v1.4.1
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21722860867594257
curgen: 20 fitness: 0.21722860867594257
curgen: 30 fitness: 0.21722860867594257
curgen: 40 fitness: 0.217233618282753
curgen: 50 fitness: 0.217233618282753
CoordinateCreature{Vector{Float64}}([0.22256313321345667], -0.217233618282753) 0.22256313321345667 -0.217233618282753
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.2579751898413827
curgen: 100 fitness: 3.2583482170489724
curgen: 150 fitness: 3.2583588357328366
curgen: 200 fitness: 3.2583739614177496
curgen: 250 fitness: 3.2583878202567913
curgen: 300 fitness: 3.258419388405465
curgen: 350 fitness: 3.2584360535745445
curgen: 400 fitness: 3.2584360535745445
curgen: 450 fitness: 3.2584474002352475
curgen: 500 fitness: 3.2584789223876536
CoordinateCreature{Vector{Float64}}([0.22271319749241666, 0.22261153956569296, 0.22259504967694774, 0.2223498321850979, 0.22259677700285346, 0.22299321720234855, -0.2226067679758823, 0.22277435075164098, -0.2226887146540356, -0.22243055779491186, 0.2227231558288323, 0.22261059878901432, -0.22253292793846155, -0.2228504714178478, -0.22284698029000272], -3.2584789223876536) [0.22271319749241666, 0.22261153956569296, 0.22259504967694774, 0.2223498321850979, 0.22259677700285346, 0.22299321720234855, -0.2226067679758823, 0.22277435075164098, -0.2226887146540356, -0.22243055779491186, 0.2227231558288323, 0.22261059878901432, -0.22253292793846155, -0.2228504714178478, -0.22284698029000272] -3.2584789223876536
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.006057471641071288
curgen: 100 fitness: -0.003997856883387385
curgen: 150 fitness: -0.003997856883387385
curgen: 200 fitness: -0.0038546625651463273
curgen: 250 fitness: -0.0036899851817793206
curgen: 300 fitness: -0.0010219641895901077
curgen: 350 fitness: -0.0010219641895901077
curgen: 400 fitness: -0.0010097765711805096
curgen: 450 fitness: -0.0010097765711805096
curgen: 500 fitness: -0.0008801742552577707
CoordinateCreature{Vector{Float64}}([-0.0003531473917992705, 0.00010822522133063046, 0.0001784266657506705, -0.0006744245426612745, 0.00040586445098281254, -0.0010024683061746113, 0.0004009711142581009, -0.0001675625989323165, 0.000678947179843919, 2.595576048228807e-5, 0.00048469922117600926, -4.661017086008941e-5, -0.0007663070450264799, 0.0010482764257954483, 0.0002646818495991509], 0.0008801742552577707) [-0.0003531473917992705, 0.00010822522133063046, 0.0001784266657506705, -0.0006744245426612745, 0.00040586445098281254, -0.0010024683061746113, 0.0004009711142581009, -0.0001675625989323165, 0.000678947179843919, 2.595576048228807e-5, 0.00048469922117600926, -4.661017086008941e-5, -0.0007663070450264799, 0.0010482764257954483, 0.0002646818495991509] 0.0008801742552577707
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
