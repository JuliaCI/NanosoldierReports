Julia Version 1.6.0-DEV.646
Commit d47f7d0827 (2020-08-15 10:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed DiffResults ────────────────── v1.0.2
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed FunctionWrappers ───────────── v1.1.1
  Installed CommonSubexpressions ───────── v0.3.0
  Installed MacroTools ─────────────────── v0.5.5
  Installed StaticArrays ───────────────── v0.12.4
  Installed ForwardDiff ────────────────── v0.10.12
  Installed ReverseDiff ────────────────── v1.4.2
  Installed NaNMath ────────────────────── v0.3.4
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed DiffRules ──────────────────── v1.0.1
  Installed SpecialFunctions ───────────── v0.10.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [37e2e3b7] + ReverseDiff v1.4.2
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [bbf7d656] + CommonSubexpressions v0.3.0
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [163ba53b] + DiffResults v1.0.2
  [b552c78f] + DiffRules v1.0.1
  [f6369f11] + ForwardDiff v0.10.12
  [069b7b12] + FunctionWrappers v1.1.1
  [1914dd2f] + MacroTools v0.5.5
  [77ba4419] + NaNMath v0.3.4
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [37e2e3b7] + ReverseDiff v1.4.2
  [276daf66] + SpecialFunctions v0.10.3
  [90137ffa] + StaticArrays v0.12.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing ReverseDiff
Status `/tmp/jl_xXDM9d/Project.toml`
  [163ba53b] DiffResults v1.0.2
  [b552c78f] DiffRules v1.0.1
  [de460e47] DiffTests v0.1.0
  [f6369f11] ForwardDiff v0.10.12
  [069b7b12] FunctionWrappers v1.1.1
  [1914dd2f] MacroTools v0.5.5
  [77ba4419] NaNMath v0.3.4
  [37e2e3b7] ReverseDiff v1.4.2
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.4
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [10745b16] Statistics
  [8dfed614] Test
Status `/tmp/jl_xXDM9d/Manifest.toml`
  [bbf7d656] CommonSubexpressions v0.3.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [163ba53b] DiffResults v1.0.2
  [b552c78f] DiffRules v1.0.1
  [de460e47] DiffTests v0.1.0
  [f6369f11] ForwardDiff v0.10.12
  [069b7b12] FunctionWrappers v1.1.1
  [1914dd2f] MacroTools v0.5.5
  [77ba4419] NaNMath v0.3.4
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [37e2e3b7] ReverseDiff v1.4.2
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
running TapeTests...
done (took 96.797161005 seconds).
running TrackedTests...
done (took 11.582445537 seconds).
running MacrosTests...
  testing @forward named functions: `ReverseDiff.ForwardOptimize{typeof(Main.MacrosTests.f0)}(Main.MacrosTests.f0)`...
  testing @forward named functions: `ReverseDiff.ForwardOptimize{Main.MacrosTests.var"##hidden_f1"}(Main.MacrosTests.#hidden_f1)`...
  testing @forward named functions: `ReverseDiff.ForwardOptimize{Main.MacrosTests.var"##hidden_f2"}(Main.MacrosTests.#hidden_f2)`...
  testing @forward named functions: `ReverseDiff.ForwardOptimize{Main.MacrosTests.var"##hidden_f3"}(Main.MacrosTests.#hidden_f3)`...
  testing @forward named functions: `ReverseDiff.ForwardOptimize{Main.MacrosTests.var"##hidden_f4"}(Main.MacrosTests.#hidden_f4)`...
  testing @forward named functions: `ReverseDiff.ForwardOptimize{typeof(-)}(-)`...
  testing @forward anonymous functions: `ReverseDiff.ForwardOptimize{Main.MacrosTests.var"#1#2"}(Main.MacrosTests.var"#1#2"())`...
  testing @forward anonymous functions: `ReverseDiff.ForwardOptimize{Main.MacrosTests.var"#3#4"}(Main.MacrosTests.var"#3#4"())`...
  testing @skip named functions: `ReverseDiff.SkipOptimize{typeof(Main.MacrosTests.f0)}(Main.MacrosTests.f0)`...
  testing @skip named functions: `ReverseDiff.SkipOptimize{Main.MacrosTests.var"##hidden_g1"}(Main.MacrosTests.#hidden_g1)`...
  testing @skip named functions: `ReverseDiff.SkipOptimize{Main.MacrosTests.var"##hidden_g2"}(Main.MacrosTests.#hidden_g2)`...
  testing @skip named functions: `ReverseDiff.SkipOptimize{Main.MacrosTests.var"##hidden_g3"}(Main.MacrosTests.#hidden_g3)`...
  testing @skip named functions: `ReverseDiff.SkipOptimize{Main.MacrosTests.var"##hidden_g4"}(Main.MacrosTests.#hidden_g4)`...
  testing @skip anonymous functions: `ReverseDiff.SkipOptimize{Main.MacrosTests.var"#5#6"}(Main.MacrosTests.var"#5#6"())`...
  testing @skip anonymous functions: `ReverseDiff.SkipOptimize{Main.MacrosTests.var"#7#8"}(Main.MacrosTests.var"#7#8"())`...
Test Summary: | Pass  Total
@grad macro   |   23     23
done (took 25.703108496 seconds).
running ScalarTests...
  testing forward-mode unary scalar functions: `Base.asind`...
  testing forward-mode unary scalar functions: `Base.log1p`...
  testing forward-mode unary scalar functions: `Base.acsch`...
  testing forward-mode unary scalar functions: `SpecialFunctions.erfc`...
  testing forward-mode unary scalar functions: `SpecialFunctions.digamma`...
  testing forward-mode unary scalar functions: `NaNMath.acos`...
  testing forward-mode unary scalar functions: `Base.asec`...
  testing forward-mode unary scalar functions: `Base.acosh`...
  testing forward-mode binary scalar functions: `\`...
  testing forward-mode unary scalar functions: `NaNMath.log10`...
  testing forward-mode unary scalar functions: `Base.mod2pi`...
  testing forward-mode unary scalar functions: `Base.acsc`...
  testing forward-mode unary scalar functions: `SpecialFunctions.airybiprime`...
  testing forward-mode unary scalar functions: `Base.cscd`...
  testing forward-mode binary scalar functions: `logbeta`...
  testing forward-mode binary scalar functions: `hypot`...
  testing forward-mode unary scalar functions: `NaNMath.log`...
  testing forward-mode unary scalar functions: `Base.tand`...
  testing forward-mode unary scalar functions: `NaNMath.atanh`...
  testing forward-mode unary scalar functions: `Base.deg2rad`...
  testing forward-mode unary scalar functions: `Base.log10`...
  testing forward-mode unary scalar functions: `Base.csch`...
  testing forward-mode unary scalar functions: `Base.asinh`...
  testing forward-mode unary scalar functions: `SpecialFunctions.airyai`...
  testing forward-mode unary scalar functions: `Base.abs2`...
  testing forward-mode unary scalar functions: `SpecialFunctions.gamma`...
  testing forward-mode unary scalar functions: `SpecialFunctions.erfcx`...
  testing forward-mode unary scalar functions: `NaNMath.log1p`...
  testing forward-mode binary scalar functions: `/`...
  testing forward-mode unary scalar functions: `SpecialFunctions.bessely0`...
  testing forward-mode unary scalar functions: `Base.cosh`...
  testing forward-mode unary scalar functions: `NaNMath.sin`...
  testing forward-mode unary scalar functions: `Base.cos`...
  testing forward-mode binary scalar functions: `atan`...
  testing forward-mode unary scalar functions: `Base.cospi`...
  testing forward-mode unary scalar functions: `Base.cbrt`...
  testing forward-mode unary scalar functions: `Base.acosd`...
  testing forward-mode unary scalar functions: `SpecialFunctions.bessely1`...
  testing forward-mode unary scalar functions: `Base.acoth`...
  testing forward-mode unary scalar functions: `NaNMath.cos`...
  testing forward-mode binary scalar functions: `max`...
  testing forward-mode unary scalar functions: `SpecialFunctions.erfcinv`...
  testing forward-mode unary scalar functions: `SpecialFunctions.erf`...
  testing forward-mode unary scalar functions: `Base.sin`...
  testing forward-mode binary scalar functions: `+`...
  testing forward-mode unary scalar functions: `SpecialFunctions.dawson`...
  testing forward-mode unary scalar functions: `Base.inv`...
  testing forward-mode unary scalar functions: `Base.acotd`...
  testing forward-mode unary scalar functions: `SpecialFunctions.airyaiprime`...
  testing forward-mode binary scalar functions: `min`...
  testing forward-mode unary scalar functions: `Base.+`...
  testing forward-mode unary scalar functions: `SpecialFunctions.erfinv`...
  testing forward-mode unary scalar functions: `SpecialFunctions.trigamma`...
  testing forward-mode unary scalar functions: `Base.asecd`...
  testing forward-mode unary scalar functions: `Base.log`...
  testing forward-mode unary scalar functions: `NaNMath.acosh`...
  testing forward-mode unary scalar functions: `Base.rad2deg`...
  testing forward-mode binary scalar functions: `mod`...
  testing forward-mode unary scalar functions: `SpecialFunctions.besselj1`...
  testing forward-mode unary scalar functions: `Base.exp`...
  testing forward-mode unary scalar functions: `Base.acot`...
  testing forward-mode unary scalar functions: `NaNMath.sqrt`...
  testing forward-mode binary scalar functions: `*`...
  testing forward-mode unary scalar functions: `Base.sind`...
  testing forward-mode unary scalar functions: `Base.sinpi`...
  testing forward-mode binary scalar functions: `max`...
  testing forward-mode unary scalar functions: `Base.asech`...
  testing forward-mode unary scalar functions: `NaNMath.log2`...
  testing forward-mode unary scalar functions: `NaNMath.tan`...
  testing forward-mode unary scalar functions: `NaNMath.lgamma`...
  testing forward-mode unary scalar functions: `Base.sqrt`...
  testing forward-mode binary scalar functions: `^`...
  testing forward-mode unary scalar functions: `SpecialFunctions.invdigamma`...
  testing forward-mode unary scalar functions: `SpecialFunctions.airybi`...
  testing forward-mode unary scalar functions: `Base.exp10`...
  testing forward-mode binary scalar functions: `rem`...
  testing forward-mode unary scalar functions: `Base.sech`...
  testing forward-mode unary scalar functions: `SpecialFunctions.erfi`...
  testing forward-mode unary scalar functions: `Base.coth`...
  testing forward-mode unary scalar functions: `Base.asin`...
  testing forward-mode unary scalar functions: `Base.cotd`...
  testing forward-mode unary scalar functions: `Base.cosd`...
  testing forward-mode unary scalar functions: `Base.sinh`...
  testing forward-mode unary scalar functions: `Base.abs`...
  testing forward-mode unary scalar functions: `SpecialFunctions.loggamma`...
  testing forward-mode unary scalar functions: `SpecialFunctions.besselj0`...
  testing forward-mode unary scalar functions: `Base.transpose`...
  testing forward-mode binary scalar functions: `min`...
  testing forward-mode unary scalar functions: `Base.csc`...
  testing forward-mode unary scalar functions: `Base.tanh`...
  testing forward-mode unary scalar functions: `Base.log2`...
  testing forward-mode unary scalar functions: `Base.atan`...
  testing forward-mode unary scalar functions: `Base.secd`...
  testing forward-mode unary scalar functions: `Base.atand`...
  testing forward-mode unary scalar functions: `NaNMath.asin`...
  testing forward-mode unary scalar functions: `Base.sec`...
  testing forward-mode unary scalar functions: `Base.acscd`...
  testing forward-mode unary scalar functions: `Base.tan`...
  testing forward-mode unary scalar functions: `Base.-`...
  testing forward-mode unary scalar functions: `Base.cot`...
  testing forward-mode binary scalar functions: `-`...
  testing forward-mode unary scalar functions: `Base.exp2`...
  testing forward-mode unary scalar functions: `Base.expm1`...
  testing forward-mode unary scalar functions: `Base.acos`...
  testing forward-mode unary scalar functions: `Base.atanh`...
  testing forward-mode binary scalar functions: `beta`...
  testing SKIPPED_UNARY_SCALAR_FUNCS: `isinf`...
  testing SKIPPED_UNARY_SCALAR_FUNCS: `isnan`...
  testing SKIPPED_UNARY_SCALAR_FUNCS: `isfinite`...
  testing SKIPPED_UNARY_SCALAR_FUNCS: `iseven`...
  testing SKIPPED_UNARY_SCALAR_FUNCS: `isodd`...
  testing SKIPPED_UNARY_SCALAR_FUNCS: `isreal`...
  testing SKIPPED_UNARY_SCALAR_FUNCS: `isinteger`...
  testing SKIPPED_BINARY_SCALAR_FUNCS: `isequal`...
  testing SKIPPED_BINARY_SCALAR_FUNCS: `isless`...
  testing SKIPPED_BINARY_SCALAR_FUNCS: `<`...
  testing SKIPPED_BINARY_SCALAR_FUNCS: `>`...
  testing SKIPPED_BINARY_SCALAR_FUNCS: `==`...
  testing SKIPPED_BINARY_SCALAR_FUNCS: `!=`...
  testing SKIPPED_BINARY_SCALAR_FUNCS: `<=`...
  testing SKIPPED_BINARY_SCALAR_FUNCS: `>=`...
done (took 41.365599797 seconds).
running LinAlgTests...
  testing Array -> Number functions: `sum`...
  testing Array -> Number functions: `det`...
  testing Array -> Number functions: `mean`...
  testing Array -> Number functions: `#18`...
  testing Array -> Number functions: `#20`...
ERROR: LoadError: LoadError: MethodError: *(::LinearAlgebra.Adjoint{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, ::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}) is ambiguous. Candidates:
  *(A::LinearAlgebra.Adjoint{var"#s81",var"#s80"} where var"#s80"<:(ReverseDiff.TrackedArray{T,D,1,VA,DA} where DA where VA) where var"#s81", B::ReverseDiff.TrackedArray{T,D,1,VA,DA} where DA where VA) where {T<:Real, D} in ReverseDiff at /home/pkgeval/.julia/packages/ReverseDiff/Thhqg/src/derivatives/linalg/arithmetic.jl:254
  *(A::LinearAlgebra.Adjoint{var"#s81",var"#s80"} where var"#s80"<:(ReverseDiff.TrackedArray{var"#s79",D,1,VA,DA} where DA where VA where var"#s79"<:Real) where var"#s81", B::ReverseDiff.TrackedArray{var"#s78",D,1,VA,DA} where DA where VA where var"#s78"<:Real) where D in ReverseDiff at /home/pkgeval/.julia/packages/ReverseDiff/Thhqg/src/derivatives/linalg/arithmetic.jl:255
  *(x::LinearAlgebra.Adjoint{var"#s69",var"#s68"} where var"#s68"<:(ReverseDiff.TrackedArray{X,D,1,VA,DA} where DA where VA) where var"#s69", y::ReverseDiff.TrackedArray{Y,D,1,VA,DA} where DA where VA) where {X, Y, D} in ReverseDiff at /home/pkgeval/.julia/packages/ReverseDiff/Thhqg/src/derivatives/linalg/arithmetic.jl:196
  *(x::LinearAlgebra.Adjoint{var"#s77",var"#s76"} where var"#s76"<:AbstractArray where var"#s77", y::ReverseDiff.TrackedArray{V,D,1,VA,DA} where DA where VA) where {V, D} in ReverseDiff at /home/pkgeval/.julia/packages/ReverseDiff/Thhqg/src/derivatives/linalg/arithmetic.jl:218
  *(x::LinearAlgebra.Adjoint{var"#s69",var"#s68"} where var"#s68"<:(ReverseDiff.TrackedArray{X,D,1,VA,DA} where DA where VA) where var"#s69", y::ReverseDiff.TrackedArray{Y,D,N,VA,DA} where DA where VA where N) where {X, Y, D} in ReverseDiff at /home/pkgeval/.julia/packages/ReverseDiff/Thhqg/src/derivatives/linalg/arithmetic.jl:196
  *(x::LinearAlgebra.Adjoint{var"#s69",var"#s68"} where var"#s68"<:(ReverseDiff.TrackedArray{X,D,N,VA,DA} where DA where VA where N) where var"#s69", y::ReverseDiff.TrackedArray{Y,D,1,VA,DA} where DA where VA) where {X, Y, D} in ReverseDiff at /home/pkgeval/.julia/packages/ReverseDiff/Thhqg/src/derivatives/linalg/arithmetic.jl:196
  *(x::LinearAlgebra.Adjoint{var"#s11",var"#s8"} where var"#s8"<:(ReverseDiff.TrackedArray{X,D,N,VA,DA} where DA where VA where N) where var"#s11", y::ReverseDiff.TrackedArray{Y,D,N,VA,DA} where DA where VA where N) where {X, Y, D} in ReverseDiff at /home/pkgeval/.julia/packages/ReverseDiff/Thhqg/src/derivatives/linalg/arithmetic.jl:196
  *(A::LinearAlgebra.Adjoint{var"#s69",var"#s68"} where var"#s68"<:(AbstractVector{var"#s67"} where var"#s67"<:Real) where var"#s69", B::ReverseDiff.TrackedArray{var"#s66",D,1,VA,DA} where DA where VA where D where var"#s66"<:Real) in ReverseDiff at /home/pkgeval/.julia/packages/ReverseDiff/Thhqg/src/derivatives/linalg/arithmetic.jl:249
  *(x::LinearAlgebra.Adjoint{var"#s77",var"#s76"} where var"#s76"<:(AbstractVector{T} where T) where var"#s77", y::ReverseDiff.TrackedArray{V,D,1,VA,DA} where DA where VA) where {V, D} in ReverseDiff at /home/pkgeval/.julia/packages/ReverseDiff/Thhqg/src/derivatives/linalg/arithmetic.jl:218
  *(x::LinearAlgebra.Adjoint{var"#s77",var"#s76"} where var"#s76"<:(AbstractVector{T} where T) where var"#s77", y::ReverseDiff.TrackedArray{V,D,N,VA,DA} where DA where VA where N) where {V, D} in ReverseDiff at /home/pkgeval/.julia/packages/ReverseDiff/Thhqg/src/derivatives/linalg/arithmetic.jl:218
  *(x::LinearAlgebra.Adjoint{var"#s77",var"#s76"} where var"#s76"<:AbstractArray where var"#s77", y::ReverseDiff.TrackedArray{V,D,N,VA,DA} where DA where VA where N) where {V, D} in ReverseDiff at /home/pkgeval/.julia/packages/ReverseDiff/Thhqg/src/derivatives/linalg/arithmetic.jl:218
  *(x::LinearAlgebra.Adjoint{var"#s69",var"#s68"} where var"#s68"<:(ReverseDiff.TrackedArray{V,D,1,VA,DA} where DA where VA) where var"#s69", y::AbstractVector{T} where T) where {V, D} in ReverseDiff at /home/pkgeval/.julia/packages/ReverseDiff/Thhqg/src/derivatives/linalg/arithmetic.jl:223
  *(x::LinearAlgebra.Adjoint{var"#s69",var"#s68"} where var"#s68"<:(ReverseDiff.TrackedArray{V,D,1,VA,DA} where DA where VA) where var"#s69", y::AbstractArray) where {V, D} in ReverseDiff at /home/pkgeval/.julia/packages/ReverseDiff/Thhqg/src/derivatives/linalg/arithmetic.jl:223
  *(x::LinearAlgebra.Adjoint{var"#s69",var"#s68"} where var"#s68"<:(ReverseDiff.TrackedArray{V,D,N,VA,DA} where DA where VA where N) where var"#s69", y::AbstractVector{T} where T) where {V, D} in ReverseDiff at /home/pkgeval/.julia/packages/ReverseDiff/Thhqg/src/derivatives/linalg/arithmetic.jl:223
  *(u::LinearAlgebra.Adjoint{var"#s844",var"#s8441"} where var"#s8441"<:(AbstractVector{T} where T) where var"#s844"<:Number, v::AbstractVector{var"#s843"} where var"#s843"<:Number) in LinearAlgebra at /opt/julia/share/julia/stdlib/v1.6/LinearAlgebra/src/adjtrans.jl:283
  *(A::LinearAlgebra.Adjoint{var"#s73",var"#s72"} where var"#s72"<:(ReverseDiff.TrackedArray{var"#s71",D,1,VA,DA} where DA where VA where D where var"#s71"<:Real) where var"#s73", B::AbstractVector{var"#s70"} where var"#s70"<:Real) in ReverseDiff at /home/pkgeval/.julia/packages/ReverseDiff/Thhqg/src/derivatives/linalg/arithmetic.jl:248
  *(x::LinearAlgebra.Adjoint{var"#s69",var"#s68"} where var"#s68"<:(ReverseDiff.TrackedArray{V,D,N,VA,DA} where DA where VA where N) where var"#s69", y::AbstractArray) where {V, D} in ReverseDiff at /home/pkgeval/.julia/packages/ReverseDiff/Thhqg/src/derivatives/linalg/arithmetic.jl:223
  *(x::AbstractMatrix{T} where T, y::ReverseDiff.TrackedArray{V,D,1,VA,DA} where DA where VA) where {V, D} in ReverseDiff at /home/pkgeval/.julia/packages/ReverseDiff/Thhqg/src/derivatives/linalg/arithmetic.jl:214
  *(x::AbstractMatrix{T} where T, y::ReverseDiff.TrackedArray{V,D,N,VA,DA} where DA where VA where N) where {V, D} in ReverseDiff at /home/pkgeval/.julia/packages/ReverseDiff/Thhqg/src/derivatives/linalg/arithmetic.jl:214
  *(x::AbstractArray, y::ReverseDiff.TrackedArray{V,D,1,VA,DA} where DA where VA) where {V, D} in ReverseDiff at /home/pkgeval/.julia/packages/ReverseDiff/Thhqg/src/derivatives/linalg/arithmetic.jl:214
  *(x::AbstractArray, y::ReverseDiff.TrackedArray{V,D,N,VA,DA} where DA where VA where N) where {V, D} in ReverseDiff at /home/pkgeval/.julia/packages/ReverseDiff/Thhqg/src/derivatives/linalg/arithmetic.jl:214
  *(u::Union{LinearAlgebra.Adjoint{T,var"#s844"}, LinearAlgebra.Transpose{T,var"#s844"}} where var"#s844"<:(AbstractVector{T} where T) where T, v::AbstractVector{T} where T) in LinearAlgebra at /opt/julia/share/julia/stdlib/v1.6/LinearAlgebra/src/adjtrans.jl:285
  *(A::AbstractMatrix{T}, x::AbstractVector{S}) where {T, S} in LinearAlgebra at /opt/julia/share/julia/stdlib/v1.6/LinearAlgebra/src/matmul.jl:49
Possible fix, define
  *(::LinearAlgebra.Adjoint{var"#s844",var"#s8441"} where var"#s8441"<:(ReverseDiff.TrackedArray{T,D,1,VA,DA} where DA where VA) where var"#s844"<:Number, ::ReverseDiff.TrackedArray{T,D,1,VA,DA} where DA where VA) where {T<:Real, D}
Stacktrace:
 [1] (::Main.LinAlgTests.var"#20#26")(y::ReverseDiff.TrackedArray{Float64,Float64,2,Matrix{Float64},Matrix{Float64}})
   @ Main.LinAlgTests ~/.julia/packages/ReverseDiff/Thhqg/test/derivatives/LinAlgTests.jl:215
 [2] test_arr2num(f::Main.LinAlgTests.var"#20#26", x::Matrix{Float64}, tp::Vector{ReverseDiff.AbstractInstruction}; ignore_tape_length::Bool)
   @ Main.LinAlgTests ~/.julia/packages/ReverseDiff/Thhqg/test/derivatives/LinAlgTests.jl:15
 [3] top-level scope
   @ ~/.julia/packages/ReverseDiff/Thhqg/test/derivatives/LinAlgTests.jl:223
 [4] include(fname::String)
   @ Base.MainInclude ./client.jl:443
 [5] top-level scope
   @ ./timing.jl:233
 [6] include(fname::String)
   @ Base.MainInclude ./client.jl:443
 [7] top-level scope
   @ none:6
in expression starting at /home/pkgeval/.julia/packages/ReverseDiff/Thhqg/test/derivatives/LinAlgTests.jl:1
in expression starting at /home/pkgeval/.julia/packages/ReverseDiff/Thhqg/test/runtests.jl:22
ERROR: Package ReverseDiff errored during testing
Stacktrace:
  [1] pkgerror(::String, ::Vararg{String,N} where N)
    @ Pkg.Types /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
  [2] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing)
    @ Pkg.Operations /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1567
  [3] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:328
  [4] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec})
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:315
  [5] #test#62
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [6] test
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [7] #test#61
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [8] test
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [9] test(pkg::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [10] test(pkg::String)
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [11] top-level scope
    @ none:16
