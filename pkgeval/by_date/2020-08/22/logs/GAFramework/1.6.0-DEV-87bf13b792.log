Julia Version 1.6.0-DEV.699
Commit 87bf13b792 (2020-08-22 14:55 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.1
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.1
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_7Ztiqh/Project.toml`
  [5789e2e9] FileIO v1.4.1
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_7Ztiqh/Manifest.toml`
  [5789e2e9] FileIO v1.4.1
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21721982940400691
curgen: 20 fitness: 0.21721982940400691
curgen: 30 fitness: 0.21722632813735843
curgen: 40 fitness: 0.21722632813735843
curgen: 50 fitness: 0.21723247303204782
CoordinateCreature{Vector{Float64}}([0.22270975589171063], -0.21723247303204782) 0.22270975589171063 -0.21723247303204782
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.257874466450251
curgen: 100 fitness: 3.258054196971605
curgen: 150 fitness: 3.2581119308432767
curgen: 200 fitness: 3.2584030725572917
curgen: 250 fitness: 3.25841948204489
curgen: 300 fitness: 3.258423648050609
curgen: 350 fitness: 3.258454026180807
curgen: 400 fitness: 3.258457969615607
curgen: 450 fitness: 3.258457969615607
curgen: 500 fitness: 3.258470952542933
CoordinateCreature{Vector{Float64}}([0.22261508452535603, 0.22266095040484418, -0.2223239405166965, 0.2224084575893454, 0.22243017655171168, 0.22259010335415558, -0.2223189035387584, 0.22221451326966232, -0.22245295076539023, 0.22266402863288423, 0.22268390306572045, 0.2223890256982769, -0.2219373411281876, -0.22235108599310577, -0.22245133189358984], -3.258470952542933) [0.22261508452535603, 0.22266095040484418, -0.2223239405166965, 0.2224084575893454, 0.22243017655171168, 0.22259010335415558, -0.2223189035387584, 0.22221451326966232, -0.22245295076539023, 0.22266402863288423, 0.22268390306572045, 0.2223890256982769, -0.2219373411281876, -0.22235108599310577, -0.22245133189358984] -3.258470952542933
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.0023526154024580137
curgen: 100 fitness: -0.0023099513484794443
curgen: 150 fitness: -0.002214198900503561
curgen: 200 fitness: -0.002214198900503561
curgen: 250 fitness: -0.002206218934759363
curgen: 300 fitness: -0.0008159569192116578
curgen: 350 fitness: -0.0007018152977593672
curgen: 400 fitness: -0.0006734458109463048
curgen: 450 fitness: -0.0006734458109463048
curgen: 500 fitness: -0.0006734458109463048
CoordinateCreature{Vector{Float64}}([-0.0003671528343436124, 0.00018296139341349637, 0.00045544248634234977, 0.001004629739191022, -0.00023141330316891182, 0.0006420301425688232, 1.0514526952346004e-5, 0.0010440369067949112, 0.00023460308317310892, 9.452050042274266e-5, 0.0003694334269097464, -0.00017495385830479317, -0.00039966911343536295, -0.00021125403848745955, 0.00013504836216168115], 0.0006734458109463048) [-0.0003671528343436124, 0.00018296139341349637, 0.00045544248634234977, 0.001004629739191022, -0.00023141330316891182, 0.0006420301425688232, 1.0514526952346004e-5, 0.0010440369067949112, 0.00023460308317310892, 9.452050042274266e-5, 0.0003694334269097464, -0.00017495385830479317, -0.00039966911343536295, -0.00021125403848745955, 0.00013504836216168115] 0.0006734458109463048
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
