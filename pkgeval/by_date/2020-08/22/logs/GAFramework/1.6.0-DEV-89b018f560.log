Julia Version 1.6.0-DEV.689
Commit 89b018f560 (2020-08-21 13:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.1
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.1
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_1n5hwX/Project.toml`
  [5789e2e9] FileIO v1.4.1
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_1n5hwX/Manifest.toml`
  [5789e2e9] FileIO v1.4.1
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21722594953372548
curgen: 20 fitness: 0.21723217052523297
curgen: 30 fitness: 0.21723217052523297
curgen: 40 fitness: 0.21723217052523297
curgen: 50 fitness: 0.21723338432669415
CoordinateCreature{Vector{Float64}}([-0.2226223899393101], -0.21723338432669415) -0.2226223899393101 -0.21723338432669415
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.2577869535851174
curgen: 100 fitness: 3.2579854162993955
curgen: 150 fitness: 3.2582457674226415
curgen: 200 fitness: 3.258285814497902
curgen: 250 fitness: 3.2583356814126287
curgen: 300 fitness: 3.2583356814126287
curgen: 350 fitness: 3.2583665257678205
curgen: 400 fitness: 3.258371936613855
curgen: 450 fitness: 3.2583738804916043
curgen: 500 fitness: 3.2583911162113357
CoordinateCreature{Vector{Float64}}([-0.2226609070494219, 0.2226402678421934, -0.2229367919910878, -0.22281396222003397, -0.22185371047992583, 0.2224436544957432, 0.22292147864105755, 0.2220012076590934, -0.2223443279011978, -0.22291230714287247, 0.22224535028674147, -0.22158081095875318, -0.2223003458136287, 0.22283679291580852, 0.2223736103991465], -3.2583911162113357) [-0.2226609070494219, 0.2226402678421934, -0.2229367919910878, -0.22281396222003397, -0.22185371047992583, 0.2224436544957432, 0.22292147864105755, 0.2220012076590934, -0.2223443279011978, -0.22291230714287247, 0.22224535028674147, -0.22158081095875318, -0.2223003458136287, 0.22283679291580852, 0.2223736103991465] -3.2583911162113357
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.0015524600614185147
curgen: 100 fitness: -0.0015106426296824793
curgen: 150 fitness: -0.0015106426296824793
curgen: 200 fitness: -0.0008818482827166463
curgen: 250 fitness: -0.0008818482827166463
curgen: 300 fitness: -0.0008818482827166463
curgen: 350 fitness: -0.0008818482827166463
curgen: 400 fitness: -0.0006985438487276951
curgen: 450 fitness: -0.0006119970114184525
curgen: 500 fitness: -0.0006019738785596473
CoordinateCreature{Vector{Float64}}([0.00033031152105870423, -0.0011827802235141486, -0.00020686445768533512, 0.00016056553000517743, 0.000229257424201431, -0.000234630102204106, -0.0004893188832253426, -2.6759015987993687e-5, 0.0002447278318714334, 0.00033860026469088086, 0.0004583301340889617, 0.0003599217442618425, -0.000516359832545784, -4.08385433049302e-5, -0.0005722023494165391], 0.0006019738785596473) [0.00033031152105870423, -0.0011827802235141486, -0.00020686445768533512, 0.00016056553000517743, 0.000229257424201431, -0.000234630102204106, -0.0004893188832253426, -2.6759015987993687e-5, 0.0002447278318714334, 0.00033860026469088086, 0.0004583301340889617, 0.0003599217442618425, -0.000516359832545784, -4.08385433049302e-5, -0.0005722023494165391] 0.0006019738785596473
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
