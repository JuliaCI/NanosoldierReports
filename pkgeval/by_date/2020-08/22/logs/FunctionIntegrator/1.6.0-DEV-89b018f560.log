Julia Version 1.6.0-DEV.689
Commit 89b018f560 (2020-08-21 13:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed FastGaussQuadrature ────────── v0.4.2
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed FunctionIntegrator ─────────── v0.5.1
  Installed SpecialFunctions ───────────── v0.10.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [7685536e] + FunctionIntegrator v0.5.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [442a2c76] + FastGaussQuadrature v0.4.2
  [7685536e] + FunctionIntegrator v0.5.1
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [276daf66] + SpecialFunctions v0.10.3
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing FunctionIntegrator
Status `/tmp/jl_ixHDyy/Project.toml`
  [442a2c76] FastGaussQuadrature v0.4.2
  [7685536e] FunctionIntegrator v0.5.1
  [276daf66] SpecialFunctions v0.10.3
  [8dfed614] Test
Status `/tmp/jl_ixHDyy/Manifest.toml`
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [442a2c76] FastGaussQuadrature v0.4.2
  [7685536e] FunctionIntegrator v0.5.1
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [276daf66] SpecialFunctions v0.10.3
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Performing the Airy Ai(x) test, where Ai(x) is integrated on the semi-infinite domain, or an approximation of it, namely [0,100] and the result is compared to the analytical result 1/3.
Running: adaptive_simpsons_rule
  0.728141 seconds (1.35 M allocations: 71.145 MiB, 1.91% gc time)
Running: chebyshev_quadrature with k=1
  1.760894 seconds (2.24 M allocations: 128.324 MiB, 5.89% gc time)
Running: chebyshev_quadrature with k=2
  0.286302 seconds (424.54 k allocations: 24.359 MiB, 4.16% gc time)
Running: chebyshev_quadrature with k=3
  0.398681 seconds (544.36 k allocations: 29.857 MiB, 3.74% gc time)
Running: chebyshev_quadrature with k=4
  0.349655 seconds (487.28 k allocations: 26.381 MiB)
Running: jacobi_quadrature with α=β=1
 44.649572 seconds (39.35 M allocations: 3.137 GiB, 9.41% gc time)
Running: laguerre_quadrature with k=1
  3.180147 seconds (3.33 M allocations: 185.493 MiB, 2.87% gc time)
Running: legendre_quadrature
  0.214859 seconds (214.75 k allocations: 12.296 MiB)
Running: lobatto_quadrature
  0.376513 seconds (343.09 k allocations: 20.571 MiB, 6.35% gc time)
Running: radau_quadrature
  0.280828 seconds (325.44 k allocations: 19.576 MiB)
Running: rectangle_rule_left. Only a rough approximation can be practically achieved using this function.
 79.891527 seconds (100.02 M allocations: 1.491 GiB, 0.23% gc time)
Running: rectangle_rule_midpoint.
  0.148273 seconds (173.71 k allocations: 3.886 MiB)
Running: rectangle_rule_right. Only a rough approximation can be practically achieved using this function.
 82.084994 seconds (100.02 M allocations: 1.491 GiB, 0.23% gc time)
Running: rombergs_method
  0.603521 seconds (751.60 k allocations: 43.264 MiB, 5.52% gc time)
Running: simpsons_rule
  0.042712 seconds (47.32 k allocations: 2.119 MiB)
Running: simpsons38_rule
  0.103539 seconds (113.14 k allocations: 5.977 MiB)
Running: trapezoidal_rule
  0.336956 seconds (1.52 M allocations: 25.801 MiB, 4.64% gc time)
Test Summary: | Pass  Total
Airy Ai(x)    |   17     17
Performing the besselj test, where BesselJ_1(2) is approximated and the result is compared to the value obtained from SpecialFunctions' besselj function.
Running: adaptive_simpsons_rule with ε=1e-7
  0.095841 seconds (32.60 k allocations: 1.941 MiB)
Running: chebyshev_quadrature with k=1
  0.550525 seconds (258.75 k allocations: 13.045 MiB)
Running: chebyshev_quadrature with k=2
  0.174828 seconds (94.43 k allocations: 2.702 MiB)
Running: chebyshev_quadrature with k=3
  0.172102 seconds (82.69 k allocations: 2.504 MiB)
Running: chebyshev_quadrature with k=4
  0.237960 seconds (65.31 k allocations: 2.151 MiB)
Running: jacobi_quadrature with α=β=1
  2.635060 seconds (513.65 k allocations: 162.394 MiB, 6.86% gc time)
Running: legendre_quadrature
  0.207283 seconds (43.27 k allocations: 2.485 MiB)
Running: lobatto_quadrature
  0.022141 seconds (16.84 k allocations: 1.040 MiB)
Running: radau_quadrature
  0.021327 seconds (16.82 k allocations: 1.039 MiB)
Running: rectangle_rule_left
 31.335562 seconds (471.41 M allocations: 7.025 GiB, 2.78% gc time)
Running: rectangle_rule_midpoint
  0.000036 seconds (45 allocations: 1.047 KiB)
Running: rectangle_rule_right
 30.890625 seconds (476.96 M allocations: 7.107 GiB, 2.40% gc time)
Running: rombergs_method
  0.394892 seconds (339.02 k allocations: 19.221 MiB)
Running: simpsons_rule
  0.000025 seconds (85 allocations: 1.672 KiB)
Running: simpsons38_rule
  0.064149 seconds (19.88 k allocations: 1.194 MiB)
Running: trapezoidal_rule
  0.058353 seconds (18.34 k allocations: 1.099 MiB)
Test Summary: | Pass  Total
besselj       |   16     16
Integrating cos^2(x)/(1+cot(x)) from 0 to pi/2 and comparing the results to the analytical result 0.25.
Running: adaptive_simpsons_rule with ε=1e-7
  0.028114 seconds (1.99 k allocations: 53.594 KiB)
Running: chebyshev_quadrature with k=1
  0.127396 seconds (2.40 k allocations: 113.453 KiB)
Running: chebyshev_quadrature with k=2
  0.104805 seconds (2.65 k allocations: 121.469 KiB)
Running: chebyshev_quadrature with k=3
  0.113497 seconds (3.08 k allocations: 133.688 KiB)
Running: chebyshev_quadrature with k=4
  0.124258 seconds (3.08 k allocations: 133.750 KiB)
Running: jacobi_quadrature with α=β=1
  0.365983 seconds (378.59 k allocations: 19.803 MiB)
Running: legendre_quadrature
  0.064895 seconds (1.24 k allocations: 63.609 KiB)
Running: lobatto_quadrature
  0.000111 seconds (67 allocations: 2.844 KiB)
Running: radau_quadrature
  0.000035 seconds (71 allocations: 3.078 KiB)
Running: rectangle_rule_left
  0.000496 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_midpoint
  0.000353 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right
  0.000502 seconds (9 allocations: 496 bytes)
Running: rombergs_method
  0.073830 seconds (1.01 k allocations: 54.109 KiB)
Running: simpsons_rule
  0.000036 seconds (323 allocations: 5.391 KiB)
Running: simpsons38_rule
  0.024189 seconds (923 allocations: 39.281 KiB)
Running: trapezoidal_rule
  0.022687 seconds (44.33 k allocations: 704.859 KiB)
Test Summary: | Pass  Total
coscotint     |   16     16
Integrating cosine from 0 to pi/2 and comparing the result to the analytical result of 1.
Running: adaptive_simpsons_rule
  0.066233 seconds (75.83 k allocations: 4.401 MiB)
Running: chebyshev_quadrature with k=1
  0.222523 seconds (239.83 k allocations: 13.471 MiB, 13.56% gc time)
Running: chebyshev_quadrature with k=2
  0.343566 seconds (295.00 k allocations: 16.591 MiB)
Running: chebyshev_quadrature with k=3
  0.208845 seconds (274.98 k allocations: 14.942 MiB)
Running: chebyshev_quadrature with k=4
  0.261365 seconds (275.01 k allocations: 14.857 MiB, 26.84% gc time)
Running: jacobi_quadrature with α=β=1
  3.362781 seconds (465.20 k allocations: 164.173 MiB, 17.38% gc time)
Running: legendre_quadrature
  0.204906 seconds (192.58 k allocations: 11.082 MiB, 6.95% gc time)
Running: lobatto_quadrature
  0.175728 seconds (203.78 k allocations: 11.787 MiB)
Running: radau_quadrature
  0.221676 seconds (203.78 k allocations: 11.795 MiB)
Running: rectangle_rule_left
  1.088184 seconds (19.75 k allocations: 1.193 MiB)
Running: rectangle_rule_midpoint
  0.028815 seconds (25.91 k allocations: 1.614 MiB)
Running: rectangle_rule_right
  1.140218 seconds (18.25 k allocations: 1.104 MiB)
Running: rombergs_method
  0.143608 seconds (139.53 k allocations: 8.040 MiB)
Running: simpsons_rule
  0.032299 seconds (28.99 k allocations: 1.800 MiB)
Running: simpsons38_rule
  0.039301 seconds (44.60 k allocations: 2.786 MiB)
Running: trapezoidal_rule
  0.034326 seconds (45.18 k allocations: 1.823 MiB)
Test Summary: | Pass  Total
Cosine        |   16     16
Integrating e^(-x^2)/(1+x^2) on the infinite domain [-inf, inf], or failing that on [-100,100], and comparing it to the analytical result exp(1)*pi*erfc(1)
Running: adaptive_simpsons_rule with ε=1e-7
  0.048446 seconds (101.38 k allocations: 3.074 MiB)
Running: chebyshev_quadrature with k=1
  0.211515 seconds (246.92 k allocations: 13.562 MiB)
Running: chebyshev_quadrature with k=2
  0.235245 seconds (302.62 k allocations: 16.552 MiB)
Running: chebyshev_quadrature with k=3
  0.251785 seconds (282.39 k allocations: 14.975 MiB, 13.98% gc time)
Running: chebyshev_quadrature with k=4
  0.202819 seconds (282.43 k allocations: 14.977 MiB)
Running: hermite_quadrature with k=2
 15.478955 seconds (22.11 M allocations: 1.147 GiB, 7.97% gc time)
Running: jacobi_quadrature with α=β=1
  0.455366 seconds (475.20 k allocations: 50.419 MiB, 9.86% gc time)
Running: laguerre_quadrature with k=1 and multiplying the result by 2 (as Laguerre is only on the semi-infinite domain)
  0.219006 seconds (287.89 k allocations: 15.877 MiB)
Running: legendre_quadrature
  0.163125 seconds (199.64 k allocations: 11.432 MiB)
Running: lobatto_quadrature
  0.264816 seconds (225.19 k allocations: 37.597 MiB, 14.02% gc time)
Running: radau_quadrature
  0.252372 seconds (221.78 k allocations: 30.270 MiB, 8.36% gc time)
Running: rectangle_rule_left
  0.032809 seconds (22.89 k allocations: 1.353 MiB)
Running: rectangle_rule_midpoint
  0.028756 seconds (27.85 k allocations: 1.710 MiB)
Running: rectangle_rule_right
  0.028133 seconds (19.46 k allocations: 1.165 MiB)
Running: rombergs_method
  0.122159 seconds (142.35 k allocations: 8.101 MiB)
Running: simpsons_rule
  0.044425 seconds (41.23 k allocations: 2.156 MiB)
Running: simpsons38_rule
  0.044523 seconds (59.97 k allocations: 3.194 MiB)
Running: trapezoidal_rule
  0.033686 seconds (31.54 k allocations: 1.768 MiB)
Test Summary: | Pass  Total
expnx2datan   |   18     18
Integrate exp(-x^2) from minus infinity to positive infinity and comparing the result to the analytical solution, sqrt(pi)
Running: adaptive_simpsons_rule with ε=1e-7
  0.032252 seconds (61.48 k allocations: 2.359 MiB)
Running: chebyshev_quadrature with k=1
  0.181827 seconds (242.05 k allocations: 13.329 MiB, 12.33% gc time)
Running: chebyshev_quadrature with k=2
  0.182150 seconds (297.34 k allocations: 16.289 MiB)
Running: chebyshev_quadrature with k=3
  0.203166 seconds (277.25 k allocations: 14.746 MiB)
Running: chebyshev_quadrature with k=4
  0.254124 seconds (277.29 k allocations: 14.748 MiB, 12.69% gc time)
Running: hermite_quadrature with k=2
  0.176247 seconds (177.31 k allocations: 10.134 MiB)
Running: jacobi_quadrature with α=β=1
 12.308329 seconds (467.80 k allocations: 1.176 GiB, 14.95% gc time)
Running: laguerre_quadrature (results multiplied by 2, as laguerre only integrates over the semi-infinite domain)
  0.224046 seconds (282.75 k allocations: 15.668 MiB)
Running: legendre_quadrature
  0.175249 seconds (194.81 k allocations: 11.207 MiB, 9.62% gc time)
Running: lobatto_quadrature
  0.200400 seconds (215.55 k allocations: 23.308 MiB)
Running: radau_quadrature
  0.259204 seconds (214.70 k allocations: 21.244 MiB, 7.17% gc time)
Running: rectangle_rule_left
  0.033268 seconds (20.45 k allocations: 1.235 MiB)
Running: rectangle_rule_midpoint
  0.061462 seconds (26.63 k allocations: 1.652 MiB)
Running: rectangle_rule_right
  0.023296 seconds (18.23 k allocations: 1.105 MiB)
Running: rombergs_method
  0.148975 seconds (137.82 k allocations: 7.902 MiB)
Running: simpsons_rule
  0.055299 seconds (33.47 k allocations: 1.930 MiB)
Running: simpsons38_rule
  0.054621 seconds (50.51 k allocations: 2.938 MiB)
Running: trapezoidal_rule
  0.044767 seconds (26.22 k allocations: 1.592 MiB)
Test Summary: | Pass  Total
Gaussian      |   18     18
Integrating 1/x from 1 to e and comparing the result to the analytical solution, 1.
Running: adaptive_simpsons_rule with ε=1e-7
  0.040010 seconds (32.45 k allocations: 1.955 MiB)
Running: chebyshev_quadrature with k=1
  0.284624 seconds (240.38 k allocations: 13.544 MiB)
Running: chebyshev_quadrature with k=2
  0.280010 seconds (295.58 k allocations: 16.630 MiB, 7.67% gc time)
Running: chebyshev_quadrature with k=3
  0.228112 seconds (275.58 k allocations: 14.971 MiB)
Running: chebyshev_quadrature with k=4
  0.298817 seconds (275.62 k allocations: 14.789 MiB, 12.13% gc time)
Running: jacobi_quadrature with α=β=1
  2.776561 seconds (465.84 k allocations: 195.219 MiB, 6.95% gc time)
Running: legendre_quadrature
  0.183434 seconds (193.14 k allocations: 11.131 MiB)
Running: lobatto_quadrature
  0.196782 seconds (204.35 k allocations: 11.816 MiB, 8.82% gc time)
Running: radau_quadrature
  0.189065 seconds (204.35 k allocations: 11.818 MiB)
Running: rectangle_rule_left
  0.330110 seconds (20.31 k allocations: 1.221 MiB)
Running: rectangle_rule_midpoint
  0.038277 seconds (26.27 k allocations: 1.634 MiB)
Running: rectangle_rule_right
  0.128795 seconds (18.62 k allocations: 1.125 MiB)
Running: rombergs_method
  0.178888 seconds (150.88 k allocations: 8.790 MiB)
Running: simpsons_rule
  0.036820 seconds (29.74 k allocations: 1.834 MiB)
Running: simpsons38_rule
  0.046559 seconds (45.38 k allocations: 2.819 MiB)
Running: trapezoidal_rule
  0.036209 seconds (46.17 k allocations: 1.860 MiB)
Test Summary: | Pass  Total
1/x           |   16     16
Integrating log(x)/x from 1 to e and comparing the result to the analytical solution of 0.5.
Running: adaptive_simpsons_rule with ε=1e-7
  0.038510 seconds (33.21 k allocations: 1.904 MiB)
Running: chebyshev_quadrature with k=1
  0.248091 seconds (240.95 k allocations: 13.495 MiB, 9.52% gc time)
Running: chebyshev_quadrature with k=2
  0.241883 seconds (296.18 k allocations: 16.596 MiB)
Running: chebyshev_quadrature with k=3
  0.217785 seconds (276.12 k allocations: 14.923 MiB)
Running: chebyshev_quadrature with k=4
  0.236494 seconds (276.15 k allocations: 14.970 MiB, 8.43% gc time)
Running: jacobi_quadrature with α=β=1
  0.974366 seconds (466.51 k allocations: 150.028 MiB, 3.27% gc time)
Running: legendre_quadrature
  0.160138 seconds (193.71 k allocations: 11.147 MiB)
Running: lobatto_quadrature
  0.211254 seconds (204.93 k allocations: 11.833 MiB, 14.64% gc time)
Running: radau_quadrature
  0.232051 seconds (204.92 k allocations: 11.841 MiB)
Running: rectangle_rule_left
  1.288069 seconds (20.59 k allocations: 1.235 MiB)
Running: rectangle_rule_midpoint
  0.028615 seconds (26.26 k allocations: 1.633 MiB)
Running: rectangle_rule_right
  1.434756 seconds (18.60 k allocations: 1.123 MiB)
Running: rombergs_method
  0.157596 seconds (140.83 k allocations: 8.101 MiB)
Running: simpsons_rule
  0.039712 seconds (30.49 k allocations: 1.862 MiB)
Running: simpsons38_rule
  0.042975 seconds (46.12 k allocations: 2.848 MiB)
Running: trapezoidal_rule
  0.037708 seconds (58.43 k allocations: 2.061 MiB)
Test Summary: | Pass  Total
log(x)/x      |   16     16
Approximating the modified bessel function I_1(1) and comparing it to the result obtained by SpecialFunctions.
Running: adaptive_simpsons_rule with ε=1e-7
  0.167468 seconds (152.73 k allocations: 9.078 MiB)
Running: chebyshev_quadrature with k=1
  0.147592 seconds (70.50 k allocations: 2.228 MiB)
Running: chebyshev_quadrature with k=2
  0.185190 seconds (105.72 k allocations: 2.897 MiB, 16.06% gc time)
Running: chebyshev_quadrature with k=3
  0.166938 seconds (93.21 k allocations: 2.682 MiB)
Running: chebyshev_quadrature with k=4
  0.155549 seconds (72.74 k allocations: 2.276 MiB)
Running: jacobi_quadrature with α=β=1
  2.557932 seconds (487.28 k allocations: 168.200 MiB, 6.00% gc time)
Running: legendre_quadrature
  0.121298 seconds (19.25 k allocations: 1.113 MiB)
Running: lobatto_quadrature
  0.000104 seconds (150 allocations: 4.328 KiB)
Running: radau_quadrature
  0.000052 seconds (148 allocations: 4.375 KiB)
Running: rectangle_rule_left
 48.760302 seconds (590.00 M allocations: 8.792 GiB, 2.77% gc time)
Running: rectangle_rule_midpoint
  0.000036 seconds (40 allocations: 992 bytes)
Running: rectangle_rule_right
 49.489136 seconds (592.75 M allocations: 8.833 GiB, 2.74% gc time)
Running: rombergs_method
  0.153295 seconds (21.09 k allocations: 1.189 MiB)
Running: simpsons_rule
  0.000084 seconds (93 allocations: 1.797 KiB)
Running: simpsons38_rule
  0.034888 seconds (463 allocations: 22.578 KiB)
Running: trapezoidal_rule
  0.027038 seconds (179 allocations: 8.766 KiB)
Test Summary: | Pass  Total
modbessel0    |   16     16
Integrating 1/sqrt(-19.6 sin(x)) from -pi to 0 and comparing the result to the analytical solution of ellipk(1/2)/sqrt(2.45) The integrand has singularities at x = -pi and x=0, so for some of these functions the integration domain has to be itself approximated.
Running: adaptive_simpsons_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 36.330220 seconds (629.34 M allocations: 9.388 GiB, 4.27% gc time)
Running: chebyshev_quadrature with k=1
  0.540257 seconds (438.73 k allocations: 24.253 MiB)
Running: chebyshev_quadrature with k=2
 14.777146 seconds (496.07 k allocations: 4.042 GiB, 3.63% gc time)
Running: chebyshev_quadrature with k=3
  6.300371 seconds (290.07 k allocations: 1.643 GiB, 5.57% gc time)
Running: chebyshev_quadrature with k=4
  7.915582 seconds (290.10 k allocations: 2.262 GiB, 2.61% gc time)
Running: jacobi_quadrature with α=β=1. The N value required to get an accurate result is too high to be practical, so only a rough approximation can be arrived at.
 62.428894 seconds (504.75 k allocations: 13.255 GiB, 2.54% gc time)
Running: legendre_quadrature.
  5.598443 seconds (232.52 k allocations: 1.976 GiB, 2.42% gc time)
The following integration functions have to use an approximated domain due to the endpoint singularities.
Running: lobatto_quadrature on [-pi+1e-6, -1e-6]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 59.970696 seconds (8.24 M allocations: 13.384 GiB, 4.24% gc time)
Running: radau_quadrature on [-pi+1e-6, -1e-6]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 58.699819 seconds (7.24 M allocations: 13.369 GiB, 2.94% gc time)
Running: rectangle_rule_left on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  3.189714 seconds (23.33 k allocations: 1.402 MiB)
Running: rectangle_rule_midpoint on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  3.263795 seconds (31.94 k allocations: 1.958 MiB)
Running: rectangle_rule_right on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  3.223615 seconds (23.55 k allocations: 1.412 MiB)
Running: rombergs_method on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  1.119059 seconds (455.85 k allocations: 153.658 MiB)
Running: simpsons_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 43.011019 seconds (600.04 M allocations: 8.943 GiB, 8.35% gc time)
Running: simpsons38_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 42.344493 seconds (600.05 M allocations: 8.944 GiB, 7.75% gc time)
Running: trapezoidal_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 41.183560 seconds (600.04 M allocations: 8.943 GiB, 8.32% gc time)
Test Summary: | Pass  Total
Simppen       |   16     16
Integrating sin(x^2)e^(-x)/x from 0 to infinity, with the approximated domain of integration of 0 to 100. The removable singularity at x=0 in the integrand has been removed.
Running: adaptive_simpsons_rule with ε=1e-8
  0.070669 seconds (182.49 k allocations: 4.517 MiB)
Running: chebyshev_quadrature with k=1
  0.233512 seconds (257.55 k allocations: 14.057 MiB)
Running: chebyshev_quadrature with k=2
  0.261494 seconds (283.70 k allocations: 15.185 MiB)
Running: chebyshev_quadrature with k=3
  0.202204 seconds (260.23 k allocations: 13.437 MiB)
Running: chebyshev_quadrature with k=4
  0.278740 seconds (260.26 k allocations: 13.434 MiB)
Running: jacobi_quadrature with α=β=1
  0.451682 seconds (404.84 k allocations: 35.832 MiB)
Running: laguerre_quadrature with k=2
  0.232598 seconds (187.56 k allocations: 10.852 MiB)
Running: legendre_quadrature
  0.164223 seconds (151.36 k allocations: 8.368 MiB)
Running: lobatto_quadrature
  0.037192 seconds (10.78 k allocations: 15.108 MiB)
Running: radau_quadrature
  0.029498 seconds (9.55 k allocations: 13.182 MiB)
Running: rectangle_rule_left
  0.060467 seconds (19.80 k allocations: 1.170 MiB)
Running: rectangle_rule_midpoint
  0.054175 seconds (26.75 k allocations: 1.639 MiB)
Running: rectangle_rule_right
  0.056307 seconds (18.35 k allocations: 1.093 MiB)
Running: rombergs_method
  0.274400 seconds (178.36 k allocations: 10.180 MiB)
Running: simpsons_rule
  0.001948 seconds (24.72 k allocations: 386.656 KiB)
Running: simpsons38_rule
  0.085393 seconds (81.40 k allocations: 3.518 MiB)
Running: trapezoidal_rule
  0.302705 seconds (2.39 M allocations: 37.756 MiB)
Test Summary: | Pass  Total
sinexpox      |   17     17
Integrating sin(x)/x from 0 to 100 and comparing it to the exact result.
Running: adaptive_simpsons_rule with ε=1e-8
  0.002510 seconds (30.71 k allocations: 480.250 KiB)
Running: chebyshev_quadrature with k=1
  0.182966 seconds (2.58 k allocations: 1.696 MiB)
Running: chebyshev_quadrature with k=2
  0.236742 seconds (2.84 k allocations: 2.359 MiB)
Running: chebyshev_quadrature with k=3
  0.135948 seconds (3.26 k allocations: 2.060 MiB)
Running: chebyshev_quadrature with k=4
  0.162428 seconds (3.26 k allocations: 1.501 MiB)
Running: jacobi_quadrature with α=β=1
  8.039714 seconds (401.68 k allocations: 906.516 MiB, 11.41% gc time)
Running: legendre_quadrature
  0.110599 seconds (1.33 k allocations: 72.281 KiB)
Running: lobatto_quadrature
  0.000191 seconds (253 allocations: 9.188 KiB)
Running: radau_quadrature
  0.000143 seconds (221 allocations: 8.812 KiB)
Running: rectangle_rule_left; only a rough approximation can be practically achieved using this function
  3.614439 seconds (11 allocations: 528 bytes)
Running: rectangle_rule_midpoint
  0.000452 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right; only a rough approximation can be practically achieved using this function
  3.584076 seconds (11 allocations: 528 bytes)
Running: rombergs_method
  0.071145 seconds (1.16 k allocations: 66.734 KiB)
Running: simpsons_rule
  0.000046 seconds (9 allocations: 496 bytes)
Running: simpsons38_rule
  0.000050 seconds (9 allocations: 496 bytes)
Running: trapezoidal_rule
  0.000837 seconds (9 allocations: 496 bytes)
Test Summary: | Pass  Total
sinxx         |   16     16
Integrating (x^3+1)/(x^4 (x+1)(x^2+1)) from 1 to e and comparing the result to the analytical solution of log(sqrt(2)*exp(1)/(sqrt(exp(2)+1)))+1/2*(exp(-2)-1)+1/3*(1-exp(-3))
Running: adaptive_simpsons_rule with ε=1e-8
  0.000785 seconds (6.34 k allocations: 99.453 KiB)
Running: chebyshev_quadrature with k=1
  0.125808 seconds (2.48 k allocations: 576.609 KiB)
Running: chebyshev_quadrature with k=2
  0.146705 seconds (2.73 k allocations: 777.391 KiB)
Running: chebyshev_quadrature with k=3
  0.164286 seconds (3.15 k allocations: 685.641 KiB)
Running: chebyshev_quadrature with k=4
  0.184303 seconds (3.16 k allocations: 516.203 KiB)
Running: jacobi_quadrature with α=β=1
  3.605872 seconds (387.96 k allocations: 253.739 MiB)
Running: legendre_quadrature
  0.061177 seconds (1.28 k allocations: 65.438 KiB)
Running: lobatto_quadrature
  0.000102 seconds (91 allocations: 3.656 KiB)
Running: radau_quadrature
  0.000038 seconds (81 allocations: 3.453 KiB)
Running: rectangle_rule_left; only a rough approximation can be practically achieved using this function.
 12.257094 seconds (11 allocations: 528 bytes)
Running: rectangle_rule_midpoint
  0.001093 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right; only a rough approximation can be practically achieved using this function.
 12.185364 seconds (11 allocations: 528 bytes)
Running: rombergs_method
  0.101313 seconds (1.18 k allocations: 62.562 KiB)
Running: simpsons_rule
  0.000053 seconds (9 allocations: 496 bytes)
Running: simpsons38_rule
  0.000053 seconds (9 allocations: 496 bytes)
Running: trapezoidal_rule
  0.001935 seconds (9 allocations: 496 bytes)
Test Summary: | Pass  Total
partfrac      |   16     16
    Testing FunctionIntegrator tests passed 
