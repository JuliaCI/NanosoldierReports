Julia Version 1.6.0-DEV.646
Commit d47f7d0827 (2020-08-15 10:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed CpuId ─────────────── v0.2.2
  Installed UnPack ────────────── v1.0.2
  Installed SIMDPirates ───────── v0.8.24
  Installed SLEEFPirates ──────── v0.5.5
  Installed VectorizationBase ─── v0.12.32
  Installed OffsetArrays ──────── v1.1.2
  Installed DocStringExtensions ─ v0.8.2
  Installed LoopVectorization ─── v0.8.24
Updating `~/.julia/environments/v1.6/Project.toml`
  [bdcacae8] + LoopVectorization v0.8.24
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [adafc99b] + CpuId v0.2.2
  [ffbed154] + DocStringExtensions v0.8.2
  [bdcacae8] + LoopVectorization v0.8.24
  [6fe1bfb0] + OffsetArrays v1.1.2
  [21efa798] + SIMDPirates v0.8.24
  [476501e8] + SLEEFPirates v0.5.5
  [3a884ed6] + UnPack v1.0.2
  [3d5dd08c] + VectorizationBase v0.12.32
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
   Building SLEEFPirates → `~/.julia/packages/SLEEFPirates/jGsib/deps/build.log`
    Testing LoopVectorization
Status `/tmp/jl_T1FLvK/Project.toml`
  [ffbed154] DocStringExtensions v0.8.2
  [bdcacae8] LoopVectorization v0.8.24
  [6fe1bfb0] OffsetArrays v1.1.2
  [21efa798] SIMDPirates v0.8.24
  [476501e8] SLEEFPirates v0.5.5
  [3a884ed6] UnPack v1.0.2
  [3d5dd08c] VectorizationBase v0.12.32
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [8dfed614] Test
Status `/tmp/jl_T1FLvK/Manifest.toml`
  [adafc99b] CpuId v0.2.2
  [ffbed154] DocStringExtensions v0.8.2
  [bdcacae8] LoopVectorization v0.8.24
  [6fe1bfb0] OffsetArrays v1.1.2
  [21efa798] SIMDPirates v0.8.24
  [476501e8] SLEEFPirates v0.5.5
  [3a884ed6] UnPack v1.0.2
  [3d5dd08c] VectorizationBase v0.12.32
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
LoopVectorization.REGISTER_COUNT = 32
#= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/printmethods.jl:2 =# @__LINE__() = 2
  5.915825 seconds (2.75 M allocations: 154.863 MiB, 1.38% gc time)
(Float64, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/fallback.jl:4 =# @__LINE__()) = (Float64, 4)
 24.398459 seconds (11.97 M allocations: 677.152 MiB, 2.75% gc time)
  0.155433 seconds (75.44 k allocations: 4.582 MiB, 9.98% gc time)
  8.578424 seconds (7.36 M allocations: 418.021 MiB, 1.87% gc time)
  1.827202 seconds (2.17 M allocations: 121.451 MiB, 3.94% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/offsetarrays.jl:204 =# @__LINE__()) = (Float32, 204)
r = -1:1
r = -2:2
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/offsetarrays.jl:204 =# @__LINE__()) = (Float64, 204)
r = -1:1
r = -2:2
694.761579 seconds (299.15 M allocations: 24.143 GiB, 3.13% gc time)
(Float64, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/tensors.jl:51 =# @__LINE__()) = (Float64, 51)
 19.258253 seconds (12.83 M allocations: 757.527 MiB)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/map.jl:4 =# @__LINE__()) = (Float32, 4)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/map.jl:4 =# @__LINE__()) = (Float64, 4)
  8.006280 seconds (7.06 M allocations: 398.717 MiB, 15.60% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/filter.jl:4 =# @__LINE__()) = (Float32, 4)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/filter.jl:4 =# @__LINE__()) = (Float64, 4)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/filter.jl:4 =# @__LINE__()) = (Int32, 4)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/filter.jl:4 =# @__LINE__()) = (Int64, 4)
  1.571420 seconds (789.42 k allocations: 46.272 MiB, 6.45% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/mapreduce.jl:19 =# @__LINE__()) = (Int32, 19)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/mapreduce.jl:19 =# @__LINE__()) = (Int64, 19)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/mapreduce.jl:19 =# @__LINE__()) = (Float32, 19)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/mapreduce.jl:19 =# @__LINE__()) = (Float64, 19)
189.822695 seconds (441.97 M allocations: 29.208 GiB, 8.09% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/ifelsemasks.jl:352 =# @__LINE__()) = (Float32, 352)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/ifelsemasks.jl:352 =# @__LINE__()) = (Float64, 352)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/ifelsemasks.jl:352 =# @__LINE__()) = (Int32, 352)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/ifelsemasks.jl:352 =# @__LINE__()) = (Int64, 352)
 86.695969 seconds (51.49 M allocations: 2.814 GiB, 6.86% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/dot.jl:234 =# @__LINE__()) = (Float32, 234)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/dot.jl:234 =# @__LINE__()) = (Float64, 234)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/dot.jl:234 =# @__LINE__()) = (Int32, 234)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/dot.jl:234 =# @__LINE__()) = (Int64, 234)
 45.976232 seconds (38.96 M allocations: 2.189 GiB, 3.97% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/special.jl:339 =# @__LINE__()) = (Float32, 339)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/special.jl:339 =# @__LINE__()) = (Float64, 339)
 15.604778 seconds (12.77 M allocations: 687.591 MiB, 2.38% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/gemv.jl:211 =# @__LINE__()) = (Float32, 211)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/gemv.jl:211 =# @__LINE__()) = (Float64, 211)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/gemv.jl:211 =# @__LINE__()) = (Int32, 211)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/gemv.jl:211 =# @__LINE__()) = (Int64, 211)
 71.103245 seconds (51.38 M allocations: 2.574 GiB, 2.81% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/miscellaneous.jl:789 =# @__LINE__()) = (Float32, 789)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/miscellaneous.jl:789 =# @__LINE__()) = (Float64, 789)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/miscellaneous.jl:1066 =# @__LINE__()) = (Float32, 1066)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/miscellaneous.jl:1066 =# @__LINE__()) = (Float64, 1066)
136.677026 seconds (126.91 M allocations: 7.069 GiB, 7.63% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/copy.jl:129 =# @__LINE__()) = (Float32, 129)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/copy.jl:129 =# @__LINE__()) = (Float64, 129)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/copy.jl:129 =# @__LINE__()) = (Int32, 129)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/copy.jl:129 =# @__LINE__()) = (Int64, 129)
 13.054338 seconds (8.54 M allocations: 462.744 MiB, 3.09% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/broadcast.jl:5 =# @__LINE__()) = (Float32, 5)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/broadcast.jl:5 =# @__LINE__()) = (Float64, 5)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/broadcast.jl:5 =# @__LINE__()) = (Int32, 5)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/broadcast.jl:5 =# @__LINE__()) = (Int64, 5)
403.095778 seconds (130.31 M allocations: 8.008 GiB, 3.59% gc time)
OPS = Tuple{:numericconstant,Symbol("##zero#14134"),LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x01, 0x02),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000032, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x03),:LoopVectorization,:vfmadd_fast,LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000020301, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:identity,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000004, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x04),:LoopVectorization,:vadd,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000605, LoopVectorization.compute, 0x00, 0x04),:LoopVectorization,:setindex!,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000007, LoopVectorization.memstore, 0x03, 0x05)}
ARF = Tuple{LoopVectorization.ArrayRefStruct{:A,Symbol("##vptr##_A")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:B,Symbol("##vptr##_B")}(0x0000000000000101, 0x0000000000000302, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:C,Symbol("##vptr##_C")}(0x0000000000000101, 0x0000000000000102, 0x0000000000000000)}
AM = Tuple{0,Tuple{},Tuple{},Tuple{},Tuple{},Tuple{(1, LoopVectorization.IntOrFloat)},Tuple{}}
LPSYM = Tuple{:m,:n,:k}
LB = Tuple{VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1}}
vargs = (VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007f67904809f0, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007f6790480c20, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007f6790480c90, (16,)))
OPS = Tuple{:numericconstant,Symbol("##zero#14134"),LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x01, 0x02),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000032, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x03),:LoopVectorization,:vfmadd_fast,LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000020301, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:identity,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000004, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x04),:LoopVectorization,:vadd,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000605, LoopVectorization.compute, 0x00, 0x04),:LoopVectorization,:setindex!,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000007, LoopVectorization.memstore, 0x03, 0x05)}
ARF = Tuple{LoopVectorization.ArrayRefStruct{:A,Symbol("##vptr##_A")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:B,Symbol("##vptr##_B")}(0x0000000000000101, 0x0000000000000302, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:C,Symbol("##vptr##_C")}(0x0000000000000101, 0x0000000000000102, 0x0000000000000000)}
AM = Tuple{0,Tuple{},Tuple{},Tuple{},Tuple{},Tuple{(1, LoopVectorization.IntOrFloat)},Tuple{}}
LPSYM = Tuple{:m,:n,:k}
LB = Tuple{VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1}}
vargs = (VectorizationBase.RowMajorStridedPointer{Float64,1}(Ptr{Float64} @0x00007f66d5095e80, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007f66d5095ef0, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007f66d507b0e0, (16,)))
OPS = Tuple{:numericconstant,Symbol("##zero#14134"),LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x01, 0x02),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000032, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x03),:LoopVectorization,:vfmadd_fast,LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000020301, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:identity,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000004, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x04),:LoopVectorization,:vadd,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000605, LoopVectorization.compute, 0x00, 0x04),:LoopVectorization,:setindex!,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000007, LoopVectorization.memstore, 0x03, 0x05)}
ARF = Tuple{LoopVectorization.ArrayRefStruct{:A,Symbol("##vptr##_A")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:B,Symbol("##vptr##_B")}(0x0000000000000101, 0x0000000000000302, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:C,Symbol("##vptr##_C")}(0x0000000000000101, 0x0000000000000102, 0x0000000000000000)}
AM = Tuple{0,Tuple{},Tuple{},Tuple{},Tuple{},Tuple{(1, LoopVectorization.IntOrFloat)},Tuple{}}
LPSYM = Tuple{:m,:n,:k}
LB = Tuple{VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1}}
vargs = (VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007f66d34586e0, (16,)), VectorizationBase.RowMajorStridedPointer{Float64,1}(Ptr{Float64} @0x00007f66d3458750, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007f66d34587c0, (16,)))
OPS = Tuple{:numericconstant,Symbol("##zero#14134"),LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x01, 0x02),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000032, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x03),:LoopVectorization,:vfmadd_fast,LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000020301, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:identity,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000004, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x04),:LoopVectorization,:vadd,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000605, LoopVectorization.compute, 0x00, 0x04),:LoopVectorization,:setindex!,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000007, LoopVectorization.memstore, 0x03, 0x05)}
ARF = Tuple{LoopVectorization.ArrayRefStruct{:A,Symbol("##vptr##_A")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:B,Symbol("##vptr##_B")}(0x0000000000000101, 0x0000000000000302, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:C,Symbol("##vptr##_C")}(0x0000000000000101, 0x0000000000000102, 0x0000000000000000)}
AM = Tuple{0,Tuple{},Tuple{},Tuple{},Tuple{},Tuple{(1, LoopVectorization.IntOrFloat)},Tuple{}}
LPSYM = Tuple{:m,:n,:k}
LB = Tuple{VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1}}
vargs = (VectorizationBase.RowMajorStridedPointer{Float64,1}(Ptr{Float64} @0x00007f66d4f52b30, (16,)), VectorizationBase.RowMajorStridedPointer{Float64,1}(Ptr{Float64} @0x00007f66d4f52c10, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007f66d4f52c80, (16,)))
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/gemm.jl:650 =# @__LINE__()) = (Float32, 650)
105.963130 seconds (45.34 M allocations: 3.331 GiB, 7.15% gc time)
 12.581206 seconds (8.48 M allocations: 453.198 MiB)
 18.528355 seconds (11.37 M allocations: 680.663 MiB)
 12.080996 seconds (8.21 M allocations: 469.633 MiB, 9.76% gc time)
 21.833231 seconds (12.91 M allocations: 857.398 MiB, 3.65% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/gemm.jl:650 =# @__LINE__()) = (Float64, 650)
101.751255 seconds (44.86 M allocations: 3.304 GiB, 5.23% gc time)
 12.603745 seconds (8.41 M allocations: 450.315 MiB)
 19.140006 seconds (11.29 M allocations: 676.465 MiB)
 11.643630 seconds (8.17 M allocations: 467.423 MiB, 11.36% gc time)
 21.730943 seconds (12.78 M allocations: 849.719 MiB)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/gemm.jl:650 =# @__LINE__()) = (Int32, 650)
130.453786 seconds (49.88 M allocations: 3.530 GiB, 6.09% gc time)
 15.451930 seconds (8.95 M allocations: 470.193 MiB, 6.18% gc time)
 20.763729 seconds (10.40 M allocations: 613.266 MiB, 3.55% gc time)
 13.151891 seconds (8.68 M allocations: 486.264 MiB, 5.69% gc time)
 24.287598 seconds (13.24 M allocations: 864.473 MiB, 5.91% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/gemm.jl:650 =# @__LINE__()) = (Int64, 650)
130.038330 seconds (49.80 M allocations: 3.526 GiB, 5.66% gc time)
 14.500920 seconds (8.92 M allocations: 469.352 MiB, 6.18% gc time)
 18.871153 seconds (10.36 M allocations: 611.725 MiB, 4.02% gc time)
 12.323052 seconds (8.65 M allocations: 485.048 MiB, 3.66% gc time)
 23.124199 seconds (13.23 M allocations: 864.374 MiB, 3.86% gc time)
751.294452 seconds (356.67 M allocations: 23.397 GiB, 5.14% gc time)
Test Summary:        | Pass  Total
LoopVectorization.jl | 1723   1723
2479.144776 seconds (1.56 G allocations: 103.116 GiB, 4.58% gc time)
    Testing LoopVectorization tests passed 
