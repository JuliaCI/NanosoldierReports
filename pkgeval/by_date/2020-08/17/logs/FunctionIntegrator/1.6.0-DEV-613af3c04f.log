Julia Version 1.6.0-DEV.649
Commit 613af3c04f (2020-08-17 14:01 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed FastGaussQuadrature ────────── v0.4.2
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed FunctionIntegrator ─────────── v0.5.1
  Installed SpecialFunctions ───────────── v0.10.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [7685536e] + FunctionIntegrator v0.5.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [442a2c76] + FastGaussQuadrature v0.4.2
  [7685536e] + FunctionIntegrator v0.5.1
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [276daf66] + SpecialFunctions v0.10.3
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing FunctionIntegrator
Status `/tmp/jl_D06s21/Project.toml`
  [442a2c76] FastGaussQuadrature v0.4.2
  [7685536e] FunctionIntegrator v0.5.1
  [276daf66] SpecialFunctions v0.10.3
  [8dfed614] Test
Status `/tmp/jl_D06s21/Manifest.toml`
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [442a2c76] FastGaussQuadrature v0.4.2
  [7685536e] FunctionIntegrator v0.5.1
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [276daf66] SpecialFunctions v0.10.3
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Performing the Airy Ai(x) test, where Ai(x) is integrated on the semi-infinite domain, or an approximation of it, namely [0,100] and the result is compared to the analytical result 1/3.
Running: adaptive_simpsons_rule
  0.918652 seconds (1.34 M allocations: 70.761 MiB, 8.56% gc time)
Running: chebyshev_quadrature with k=1
  1.852141 seconds (2.24 M allocations: 128.754 MiB, 2.51% gc time)
Running: chebyshev_quadrature with k=2
  0.300615 seconds (425.05 k allocations: 24.382 MiB)
Running: chebyshev_quadrature with k=3
  0.340977 seconds (544.93 k allocations: 29.885 MiB, 3.74% gc time)
Running: chebyshev_quadrature with k=4
  0.306262 seconds (487.80 k allocations: 26.429 MiB)
Running: jacobi_quadrature with α=β=1
 39.396216 seconds (39.42 M allocations: 3.140 GiB, 8.60% gc time)
Running: laguerre_quadrature with k=1
  3.008889 seconds (3.33 M allocations: 185.675 MiB, 2.83% gc time)
Running: legendre_quadrature
  0.205507 seconds (215.12 k allocations: 12.328 MiB)
Running: lobatto_quadrature
  0.376551 seconds (343.65 k allocations: 20.590 MiB, 7.29% gc time)
Running: radau_quadrature
  0.268703 seconds (326.07 k allocations: 19.593 MiB)
Running: rectangle_rule_left. Only a rough approximation can be practically achieved using this function.
 81.623080 seconds (100.02 M allocations: 1.491 GiB, 0.32% gc time)
Running: rectangle_rule_midpoint.
  0.156196 seconds (173.73 k allocations: 3.887 MiB)
Running: rectangle_rule_right. Only a rough approximation can be practically achieved using this function.
 78.514275 seconds (100.02 M allocations: 1.491 GiB, 0.31% gc time)
Running: rombergs_method
  0.603696 seconds (752.78 k allocations: 43.340 MiB, 5.30% gc time)
Running: simpsons_rule
  0.040866 seconds (47.35 k allocations: 2.120 MiB)
Running: simpsons38_rule
  0.103745 seconds (113.09 k allocations: 5.978 MiB)
Running: trapezoidal_rule
  0.313288 seconds (1.52 M allocations: 25.800 MiB)
Test Summary: | Pass  Total
Airy Ai(x)    |   17     17
Performing the besselj test, where BesselJ_1(2) is approximated and the result is compared to the value obtained from SpecialFunctions' besselj function.
Running: adaptive_simpsons_rule with ε=1e-7
  0.085096 seconds (32.64 k allocations: 1.943 MiB)
Running: chebyshev_quadrature with k=1
  0.496052 seconds (275.90 k allocations: 13.995 MiB)
Running: chebyshev_quadrature with k=2
  0.180659 seconds (115.72 k allocations: 3.793 MiB)
Running: chebyshev_quadrature with k=3
  0.177550 seconds (105.07 k allocations: 3.639 MiB)
Running: chebyshev_quadrature with k=4
  0.161318 seconds (87.68 k allocations: 3.285 MiB)
Running: jacobi_quadrature with α=β=1
  2.871382 seconds (536.03 k allocations: 163.496 MiB, 6.05% gc time)
Running: legendre_quadrature
  0.184029 seconds (62.31 k allocations: 3.479 MiB)
Running: lobatto_quadrature
  0.022008 seconds (16.79 k allocations: 1.039 MiB)
Running: radau_quadrature
  0.042124 seconds (16.77 k allocations: 1.038 MiB)
Running: rectangle_rule_left
 29.174900 seconds (471.41 M allocations: 7.025 GiB, 2.55% gc time)
Running: rectangle_rule_midpoint
  0.000019 seconds (45 allocations: 1.047 KiB)
Running: rectangle_rule_right
 30.333145 seconds (476.96 M allocations: 7.107 GiB, 1.83% gc time)
Running: rombergs_method
  0.384159 seconds (360.30 k allocations: 20.318 MiB, 0.98% gc time)
Running: simpsons_rule
  0.000029 seconds (85 allocations: 1.672 KiB)
Running: simpsons38_rule
  0.065850 seconds (19.90 k allocations: 1.195 MiB)
Running: trapezoidal_rule
  0.057741 seconds (18.35 k allocations: 1.099 MiB)
Test Summary: | Pass  Total
besselj       |   16     16
Integrating cos^2(x)/(1+cot(x)) from 0 to pi/2 and comparing the results to the analytical result 0.25.
Running: adaptive_simpsons_rule with ε=1e-7
  0.040008 seconds (1.99 k allocations: 53.594 KiB)
Running: chebyshev_quadrature with k=1
  0.127131 seconds (2.40 k allocations: 113.453 KiB)
Running: chebyshev_quadrature with k=2
  0.131321 seconds (2.65 k allocations: 121.469 KiB)
Running: chebyshev_quadrature with k=3
  0.130268 seconds (3.08 k allocations: 133.688 KiB)
Running: chebyshev_quadrature with k=4
  0.139706 seconds (3.08 k allocations: 133.750 KiB)
Running: jacobi_quadrature with α=β=1
  0.385213 seconds (379.01 k allocations: 19.794 MiB, 7.27% gc time)
Running: legendre_quadrature
  0.076496 seconds (1.24 k allocations: 63.609 KiB)
Running: lobatto_quadrature
  0.000130 seconds (67 allocations: 2.844 KiB)
Running: radau_quadrature
  0.000081 seconds (71 allocations: 3.078 KiB)
Running: rectangle_rule_left
  0.000535 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_midpoint
  0.000374 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right
  0.000531 seconds (9 allocations: 496 bytes)
Running: rombergs_method
  0.085503 seconds (1.01 k allocations: 54.109 KiB)
Running: simpsons_rule
  0.000042 seconds (323 allocations: 5.391 KiB)
Running: simpsons38_rule
  0.030146 seconds (923 allocations: 39.281 KiB)
Running: trapezoidal_rule
  0.026797 seconds (44.33 k allocations: 704.859 KiB)
Test Summary: | Pass  Total
coscotint     |   16     16
Integrating cosine from 0 to pi/2 and comparing the result to the analytical result of 1.
Running: adaptive_simpsons_rule
  0.069015 seconds (75.84 k allocations: 4.401 MiB)
Running: chebyshev_quadrature with k=1
  0.206408 seconds (240.26 k allocations: 13.501 MiB)
Running: chebyshev_quadrature with k=2
  0.303825 seconds (295.45 k allocations: 16.566 MiB, 7.99% gc time)
Running: chebyshev_quadrature with k=3
  0.252286 seconds (275.41 k allocations: 14.983 MiB)
Running: chebyshev_quadrature with k=4
  0.252701 seconds (275.44 k allocations: 14.879 MiB)
Running: jacobi_quadrature with α=β=1
  2.126362 seconds (465.70 k allocations: 164.242 MiB, 3.94% gc time)
Running: legendre_quadrature
  0.153103 seconds (193.00 k allocations: 11.107 MiB)
Running: lobatto_quadrature
  0.186064 seconds (204.21 k allocations: 11.811 MiB, 8.13% gc time)
Running: radau_quadrature
  0.186990 seconds (204.21 k allocations: 11.824 MiB)
Running: rectangle_rule_left
  1.195355 seconds (19.76 k allocations: 1.194 MiB)
Running: rectangle_rule_midpoint
  0.024840 seconds (25.93 k allocations: 1.615 MiB)
Running: rectangle_rule_right
  1.169890 seconds (18.27 k allocations: 1.105 MiB)
Running: rombergs_method
  0.136055 seconds (139.91 k allocations: 8.059 MiB)
Running: simpsons_rule
  0.029931 seconds (29.02 k allocations: 1.803 MiB)
Running: simpsons38_rule
  0.038634 seconds (44.65 k allocations: 2.787 MiB)
Running: trapezoidal_rule
  0.027556 seconds (45.20 k allocations: 1.824 MiB)
Test Summary: | Pass  Total
Cosine        |   16     16
Integrating e^(-x^2)/(1+x^2) on the infinite domain [-inf, inf], or failing that on [-100,100], and comparing it to the analytical result exp(1)*pi*erfc(1)
Running: adaptive_simpsons_rule with ε=1e-7
  0.038064 seconds (101.41 k allocations: 3.075 MiB)
Running: chebyshev_quadrature with k=1
  0.214241 seconds (247.35 k allocations: 13.606 MiB, 8.26% gc time)
Running: chebyshev_quadrature with k=2
  0.213516 seconds (303.07 k allocations: 16.574 MiB)
Running: chebyshev_quadrature with k=3
  0.224911 seconds (282.82 k allocations: 15.002 MiB)
Running: chebyshev_quadrature with k=4
  0.261205 seconds (282.85 k allocations: 15.010 MiB, 13.03% gc time)
Running: hermite_quadrature with k=2
 16.660899 seconds (22.12 M allocations: 1.147 GiB, 8.80% gc time)
Running: jacobi_quadrature with α=β=1
  0.502897 seconds (475.70 k allocations: 50.437 MiB)
Running: laguerre_quadrature with k=1 and multiplying the result by 2 (as Laguerre is only on the semi-infinite domain)
  0.255278 seconds (288.35 k allocations: 15.898 MiB)
Running: legendre_quadrature
  0.191151 seconds (200.06 k allocations: 11.455 MiB)
Running: lobatto_quadrature
  0.271674 seconds (225.61 k allocations: 37.625 MiB, 12.83% gc time)
Running: radau_quadrature
  0.255398 seconds (222.21 k allocations: 30.289 MiB, 10.09% gc time)
Running: rectangle_rule_left
  0.030213 seconds (22.91 k allocations: 1.353 MiB)
Running: rectangle_rule_midpoint
  0.029001 seconds (27.88 k allocations: 1.711 MiB)
Running: rectangle_rule_right
  0.026716 seconds (19.48 k allocations: 1.166 MiB)
Running: rombergs_method
  0.124259 seconds (142.73 k allocations: 8.122 MiB)
Running: simpsons_rule
  0.039792 seconds (41.25 k allocations: 2.157 MiB)
Running: simpsons38_rule
  0.043489 seconds (60.02 k allocations: 3.196 MiB)
Running: trapezoidal_rule
  0.031763 seconds (31.57 k allocations: 1.770 MiB)
Test Summary: | Pass  Total
expnx2datan   |   18     18
Integrate exp(-x^2) from minus infinity to positive infinity and comparing the result to the analytical solution, sqrt(pi)
Running: adaptive_simpsons_rule with ε=1e-7
  0.042233 seconds (61.51 k allocations: 2.360 MiB)
Running: chebyshev_quadrature with k=1
  0.208484 seconds (242.48 k allocations: 13.356 MiB)
Running: chebyshev_quadrature with k=2
  0.272977 seconds (297.80 k allocations: 16.314 MiB, 9.95% gc time)
Running: chebyshev_quadrature with k=3
  0.230957 seconds (277.68 k allocations: 14.774 MiB)
Running: chebyshev_quadrature with k=4
  0.231542 seconds (277.71 k allocations: 14.784 MiB)
Running: hermite_quadrature with k=2
  0.167648 seconds (177.71 k allocations: 10.157 MiB)
Running: jacobi_quadrature with α=β=1
 10.160247 seconds (468.30 k allocations: 1.176 GiB, 13.64% gc time)
Running: laguerre_quadrature (results multiplied by 2, as laguerre only integrates over the semi-infinite domain)
  0.235384 seconds (283.21 k allocations: 15.693 MiB, 6.24% gc time)
Running: legendre_quadrature
  0.177674 seconds (195.23 k allocations: 11.236 MiB)
Running: lobatto_quadrature
  0.203272 seconds (215.97 k allocations: 23.331 MiB)
Running: radau_quadrature
  0.224210 seconds (215.13 k allocations: 21.262 MiB, 6.57% gc time)
Running: rectangle_rule_left
  0.028821 seconds (20.47 k allocations: 1.235 MiB)
Running: rectangle_rule_midpoint
  0.029742 seconds (26.65 k allocations: 1.653 MiB)
Running: rectangle_rule_right
  0.021643 seconds (18.24 k allocations: 1.106 MiB)
Running: rombergs_method
  0.111205 seconds (138.20 k allocations: 7.925 MiB)
Running: simpsons_rule
  0.034689 seconds (33.49 k allocations: 1.931 MiB)
Running: simpsons38_rule
  0.037782 seconds (50.55 k allocations: 2.939 MiB)
Running: trapezoidal_rule
  0.029789 seconds (26.25 k allocations: 1.593 MiB)
Test Summary: | Pass  Total
Gaussian      |   18     18
Integrating 1/x from 1 to e and comparing the result to the analytical solution, 1.
Running: adaptive_simpsons_rule with ε=1e-7
  0.038650 seconds (32.48 k allocations: 1.957 MiB)
Running: chebyshev_quadrature with k=1
  0.342206 seconds (240.81 k allocations: 13.573 MiB, 5.62% gc time)
Running: chebyshev_quadrature with k=2
  0.242036 seconds (296.03 k allocations: 16.655 MiB)
Running: chebyshev_quadrature with k=3
  0.216870 seconds (276.01 k allocations: 14.978 MiB)
Running: chebyshev_quadrature with k=4
  0.260064 seconds (276.04 k allocations: 14.813 MiB, 6.36% gc time)
Running: jacobi_quadrature with α=β=1
  2.547141 seconds (466.34 k allocations: 195.248 MiB, 6.96% gc time)
Running: legendre_quadrature
  0.160045 seconds (193.56 k allocations: 11.135 MiB)
Running: lobatto_quadrature
  0.186627 seconds (204.78 k allocations: 11.916 MiB, 7.95% gc time)
Running: radau_quadrature
  0.176416 seconds (204.78 k allocations: 11.846 MiB)
Running: rectangle_rule_left
  0.304670 seconds (20.33 k allocations: 1.222 MiB)
Running: rectangle_rule_midpoint
  0.027625 seconds (26.30 k allocations: 1.635 MiB)
Running: rectangle_rule_right
  0.102584 seconds (18.64 k allocations: 1.125 MiB)
Running: rombergs_method
  0.143534 seconds (151.28 k allocations: 8.812 MiB)
Running: simpsons_rule
  0.033867 seconds (29.77 k allocations: 1.835 MiB)
Running: simpsons38_rule
  0.037615 seconds (45.42 k allocations: 2.821 MiB)
Running: trapezoidal_rule
  0.027864 seconds (46.19 k allocations: 1.861 MiB)
Test Summary: | Pass  Total
1/x           |   16     16
Integrating log(x)/x from 1 to e and comparing the result to the analytical solution of 0.5.
Running: adaptive_simpsons_rule with ε=1e-7
  0.054339 seconds (33.23 k allocations: 1.905 MiB, 31.63% gc time)
Running: chebyshev_quadrature with k=1
  0.245032 seconds (241.38 k allocations: 13.511 MiB)
Running: chebyshev_quadrature with k=2
  0.281232 seconds (296.63 k allocations: 16.566 MiB)
Running: chebyshev_quadrature with k=3
  0.303055 seconds (276.54 k allocations: 14.902 MiB, 6.88% gc time)
Running: chebyshev_quadrature with k=4
  0.208410 seconds (276.58 k allocations: 14.982 MiB)
Running: jacobi_quadrature with α=β=1
  1.053278 seconds (467.01 k allocations: 149.919 MiB, 3.35% gc time)
Running: legendre_quadrature
  0.225621 seconds (194.13 k allocations: 11.150 MiB, 15.78% gc time)
Running: lobatto_quadrature
  0.179019 seconds (205.35 k allocations: 11.859 MiB)
Running: radau_quadrature
  0.171871 seconds (205.35 k allocations: 11.920 MiB)
Running: rectangle_rule_left
  1.162490 seconds (20.60 k allocations: 1.236 MiB)
Running: rectangle_rule_midpoint
  0.026861 seconds (26.29 k allocations: 1.635 MiB)
Running: rectangle_rule_right
  1.149358 seconds (18.61 k allocations: 1.124 MiB)
Running: rombergs_method
  0.139272 seconds (141.22 k allocations: 8.214 MiB)
Running: simpsons_rule
  0.047091 seconds (30.52 k allocations: 1.864 MiB)
Running: simpsons38_rule
  0.047132 seconds (46.17 k allocations: 2.850 MiB)
Running: trapezoidal_rule
  0.047906 seconds (58.45 k allocations: 2.062 MiB, 36.91% gc time)
Test Summary: | Pass  Total
log(x)/x      |   16     16
Approximating the modified bessel function I_1(1) and comparing it to the result obtained by SpecialFunctions.
Running: adaptive_simpsons_rule with ε=1e-7
  0.201353 seconds (152.87 k allocations: 9.084 MiB, 10.85% gc time)
Running: chebyshev_quadrature with k=1
  0.177822 seconds (91.24 k allocations: 3.295 MiB)
Running: chebyshev_quadrature with k=2
  0.162493 seconds (127.01 k allocations: 3.988 MiB)
Running: chebyshev_quadrature with k=3
  0.203165 seconds (115.58 k allocations: 3.818 MiB)
Running: chebyshev_quadrature with k=4
  0.206359 seconds (95.11 k allocations: 3.411 MiB)
Running: jacobi_quadrature with α=β=1
  2.182057 seconds (509.69 k allocations: 169.305 MiB, 6.61% gc time)
Running: legendre_quadrature
  0.119368 seconds (38.34 k allocations: 2.105 MiB)
Running: lobatto_quadrature
  0.000110 seconds (150 allocations: 4.328 KiB)
Running: radau_quadrature
  0.000046 seconds (148 allocations: 4.375 KiB)
Running: rectangle_rule_left
 45.444334 seconds (590.00 M allocations: 8.792 GiB, 2.60% gc time)
Running: rectangle_rule_midpoint
  0.000031 seconds (40 allocations: 992 bytes)
Running: rectangle_rule_right
 45.574099 seconds (592.75 M allocations: 8.833 GiB, 2.54% gc time)
Running: rombergs_method
  0.131888 seconds (41.88 k allocations: 2.257 MiB)
Running: simpsons_rule
  0.000048 seconds (93 allocations: 1.797 KiB)
Running: simpsons38_rule
  0.030324 seconds (463 allocations: 22.578 KiB)
Running: trapezoidal_rule
  0.024221 seconds (179 allocations: 8.766 KiB)
Test Summary: | Pass  Total
modbessel0    |   16     16
Integrating 1/sqrt(-19.6 sin(x)) from -pi to 0 and comparing the result to the analytical solution of ellipk(1/2)/sqrt(2.45) The integrand has singularities at x = -pi and x=0, so for some of these functions the integration domain has to be itself approximated.
Running: adaptive_simpsons_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 32.936169 seconds (629.34 M allocations: 9.388 GiB, 4.01% gc time)
Running: chebyshev_quadrature with k=1
  0.501655 seconds (439.21 k allocations: 24.266 MiB, 3.21% gc time)
Running: chebyshev_quadrature with k=2
 13.329283 seconds (496.57 k allocations: 4.042 GiB, 3.84% gc time)
Running: chebyshev_quadrature with k=3
  6.336193 seconds (290.50 k allocations: 1.643 GiB, 5.17% gc time)
Running: chebyshev_quadrature with k=4
  8.131236 seconds (290.54 k allocations: 2.262 GiB, 2.56% gc time)
Running: jacobi_quadrature with α=β=1. The N value required to get an accurate result is too high to be practical, so only a rough approximation can be arrived at.
 61.956787 seconds (505.20 k allocations: 13.255 GiB, 2.88% gc time)
Running: legendre_quadrature.
  5.453533 seconds (232.90 k allocations: 1.976 GiB, 1.17% gc time)
The following integration functions have to use an approximated domain due to the endpoint singularities.
Running: lobatto_quadrature on [-pi+1e-6, -1e-6]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 58.746482 seconds (8.24 M allocations: 13.384 GiB, 3.61% gc time)
Running: radau_quadrature on [-pi+1e-6, -1e-6]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 52.968374 seconds (7.24 M allocations: 13.369 GiB, 2.13% gc time)
Running: rectangle_rule_left on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  3.454798 seconds (23.35 k allocations: 1.402 MiB)
Running: rectangle_rule_midpoint on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  2.911106 seconds (31.97 k allocations: 1.959 MiB)
Running: rectangle_rule_right on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  2.986968 seconds (23.57 k allocations: 1.413 MiB)
Running: rombergs_method on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  1.035270 seconds (456.67 k allocations: 153.704 MiB)
Running: simpsons_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 44.157202 seconds (600.04 M allocations: 8.943 GiB, 8.42% gc time)
Running: simpsons38_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 40.668588 seconds (600.05 M allocations: 8.944 GiB, 7.94% gc time)
Running: trapezoidal_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 39.230804 seconds (600.04 M allocations: 8.943 GiB, 8.70% gc time)
Test Summary: | Pass  Total
Simppen       |   16     16
Integrating sin(x^2)e^(-x)/x from 0 to infinity, with the approximated domain of integration of 0 to 100. The removable singularity at x=0 in the integrand has been removed.
Running: adaptive_simpsons_rule with ε=1e-8
  0.059484 seconds (182.51 k allocations: 4.517 MiB)
Running: chebyshev_quadrature with k=1
  0.290058 seconds (257.97 k allocations: 14.018 MiB)
Running: chebyshev_quadrature with k=2
  0.230346 seconds (284.13 k allocations: 15.179 MiB)
Running: chebyshev_quadrature with k=3
  0.213551 seconds (260.62 k allocations: 13.456 MiB)
Running: chebyshev_quadrature with k=4
  0.213447 seconds (260.65 k allocations: 13.452 MiB)
Running: jacobi_quadrature with α=β=1
  0.380832 seconds (405.27 k allocations: 35.862 MiB)
Running: laguerre_quadrature with k=2
  0.191594 seconds (187.97 k allocations: 10.871 MiB)
Running: legendre_quadrature
  0.128741 seconds (151.74 k allocations: 8.407 MiB)
Running: lobatto_quadrature
  0.036503 seconds (10.78 k allocations: 15.108 MiB)
Running: radau_quadrature
  0.032724 seconds (9.55 k allocations: 13.182 MiB)
Running: rectangle_rule_left
  0.053558 seconds (19.81 k allocations: 1.170 MiB)
Running: rectangle_rule_midpoint
  0.052692 seconds (26.77 k allocations: 1.640 MiB)
Running: rectangle_rule_right
  0.050822 seconds (18.36 k allocations: 1.094 MiB)
Running: rombergs_method
  0.240829 seconds (171.23 k allocations: 9.746 MiB)
Running: simpsons_rule
  0.001836 seconds (24.72 k allocations: 386.656 KiB)
Running: simpsons38_rule
  0.050648 seconds (81.45 k allocations: 3.520 MiB)
Running: trapezoidal_rule
  0.196944 seconds (2.39 M allocations: 37.757 MiB)
Test Summary: | Pass  Total
sinexpox      |   17     17
Integrating sin(x)/x from 0 to 100 and comparing it to the exact result.
Running: adaptive_simpsons_rule with ε=1e-8
  0.001903 seconds (30.71 k allocations: 480.250 KiB)
Running: chebyshev_quadrature with k=1
  0.120256 seconds (2.58 k allocations: 1.696 MiB)
Running: chebyshev_quadrature with k=2
  0.118272 seconds (2.84 k allocations: 2.359 MiB)
Running: chebyshev_quadrature with k=3
  0.125214 seconds (3.26 k allocations: 2.060 MiB)
Running: chebyshev_quadrature with k=4
  0.126352 seconds (3.26 k allocations: 1.501 MiB)
Running: jacobi_quadrature with α=β=1
 10.205995 seconds (402.11 k allocations: 906.565 MiB, 4.01% gc time)
Running: legendre_quadrature
  0.075233 seconds (1.33 k allocations: 72.281 KiB)
Running: lobatto_quadrature
  0.000174 seconds (253 allocations: 9.188 KiB)
Running: radau_quadrature
  0.000123 seconds (221 allocations: 8.812 KiB)
Running: rectangle_rule_left; only a rough approximation can be practically achieved using this function
  3.713368 seconds (11 allocations: 528 bytes)
Running: rectangle_rule_midpoint
  0.000413 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right; only a rough approximation can be practically achieved using this function
  3.267983 seconds (11 allocations: 528 bytes)
Running: rombergs_method
  0.087360 seconds (1.16 k allocations: 66.734 KiB)
Running: simpsons_rule
  0.000041 seconds (9 allocations: 496 bytes)
Running: simpsons38_rule
  0.000046 seconds (9 allocations: 496 bytes)
Running: trapezoidal_rule
  0.001262 seconds (9 allocations: 496 bytes)
Test Summary: | Pass  Total
sinxx         |   16     16
Integrating (x^3+1)/(x^4 (x+1)(x^2+1)) from 1 to e and comparing the result to the analytical solution of log(sqrt(2)*exp(1)/(sqrt(exp(2)+1)))+1/2*(exp(-2)-1)+1/3*(1-exp(-3))
Running: adaptive_simpsons_rule with ε=1e-8
  0.000755 seconds (6.34 k allocations: 99.453 KiB)
Running: chebyshev_quadrature with k=1
  0.110242 seconds (2.48 k allocations: 576.609 KiB)
Running: chebyshev_quadrature with k=2
  0.111788 seconds (2.73 k allocations: 777.391 KiB)
Running: chebyshev_quadrature with k=3
  0.117495 seconds (3.15 k allocations: 685.641 KiB)
Running: chebyshev_quadrature with k=4
  0.139261 seconds (3.16 k allocations: 516.203 KiB)
Running: jacobi_quadrature with α=β=1
  3.086502 seconds (388.38 k allocations: 253.808 MiB)
Running: legendre_quadrature
  0.076708 seconds (1.28 k allocations: 65.438 KiB)
Running: lobatto_quadrature
  0.000106 seconds (91 allocations: 3.656 KiB)
Running: radau_quadrature
  0.000049 seconds (81 allocations: 3.453 KiB)
Running: rectangle_rule_left; only a rough approximation can be practically achieved using this function.
 11.174240 seconds (11 allocations: 528 bytes)
Running: rectangle_rule_midpoint
  0.001467 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right; only a rough approximation can be practically achieved using this function.
 11.469552 seconds (11 allocations: 528 bytes)
Running: rombergs_method
  0.086237 seconds (1.18 k allocations: 62.562 KiB)
Running: simpsons_rule
  0.000072 seconds (9 allocations: 496 bytes)
Running: simpsons38_rule
  0.000056 seconds (9 allocations: 496 bytes)
Running: trapezoidal_rule
  0.001863 seconds (9 allocations: 496 bytes)
Test Summary: | Pass  Total
partfrac      |   16     16
    Testing FunctionIntegrator tests passed 
