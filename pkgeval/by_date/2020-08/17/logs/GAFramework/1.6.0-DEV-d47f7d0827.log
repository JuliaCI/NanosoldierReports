Julia Version 1.6.0-DEV.646
Commit d47f7d0827 (2020-08-15 10:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.1
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.1
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_7fVbMr/Project.toml`
  [5789e2e9] FileIO v1.4.1
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_7fVbMr/Manifest.toml`
  [5789e2e9] FileIO v1.4.1
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.2171993569009378
curgen: 20 fitness: 0.21723201039714046
curgen: 30 fitness: 0.21723201039714046
curgen: 40 fitness: 0.21723201039714046
curgen: 50 fitness: 0.21723201039714046
CoordinateCreature{Vector{Float64}}([0.22235712236598915], -0.21723201039714046) 0.22235712236598915 -0.21723201039714046
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.2580517967207787
curgen: 100 fitness: 3.258289433188955
curgen: 150 fitness: 3.258406019175313
curgen: 200 fitness: 3.2584376915916087
curgen: 250 fitness: 3.2584376915916087
curgen: 300 fitness: 3.258457333318169
curgen: 350 fitness: 3.258464019950089
curgen: 400 fitness: 3.2584646964592627
curgen: 450 fitness: 3.25846512093837
curgen: 500 fitness: 3.2584794039925633
CoordinateCreature{Vector{Float64}}([0.22248168103881394, 0.2227098228914163, -0.22235632502415426, -0.222849421719039, -0.22233015776719692, -0.22252813468789556, -0.22248447365402313, -0.22274115693345353, 0.22256350261119687, 0.22254069971503443, -0.22301923672766144, 0.22260340766378536, 0.2224712881624796, 0.22266187516261315, -0.22282104625068483], -3.2584794039925633) [0.22248168103881394, 0.2227098228914163, -0.22235632502415426, -0.222849421719039, -0.22233015776719692, -0.22252813468789556, -0.22248447365402313, -0.22274115693345353, 0.22256350261119687, 0.22254069971503443, -0.22301923672766144, 0.22260340766378536, 0.2224712881624796, 0.22266187516261315, -0.22282104625068483] -3.2584794039925633
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.001675571235324469
curgen: 100 fitness: -0.001638809580981615
curgen: 150 fitness: -0.0016349709331677786
curgen: 200 fitness: -0.0014549569530686313
curgen: 250 fitness: -0.0007674548348575172
curgen: 300 fitness: -0.0007674548348575172
curgen: 350 fitness: -0.0007445549144620145
curgen: 400 fitness: -0.0007445549144620145
curgen: 450 fitness: -0.0006855180067759647
curgen: 500 fitness: -0.0006855180067759647
CoordinateCreature{Vector{Float64}}([0.00016311904632444448, 0.0006377656820922267, 2.804722028193138e-5, -0.0006777785315730072, -0.0003004385908002473, -0.000266167411138268, -0.00019475511750845155, 0.00048321884576394965, -8.121524965293628e-5, 0.000453931637975649, -0.000976783234809093, 0.0001182745274984204, 0.0009719769739187489, 5.718255147544823e-5, 2.3710453847633745e-5], 0.0006855180067759647) [0.00016311904632444448, 0.0006377656820922267, 2.804722028193138e-5, -0.0006777785315730072, -0.0003004385908002473, -0.000266167411138268, -0.00019475511750845155, 0.00048321884576394965, -8.121524965293628e-5, 0.000453931637975649, -0.000976783234809093, 0.0001182745274984204, 0.0009719769739187489, 5.718255147544823e-5, 2.3710453847633745e-5] 0.0006855180067759647
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
