Julia Version 1.6.0-DEV.609
Commit 00f2133d83 (2020-08-10 13:38 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.0
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.0
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_oGjHr4/Project.toml`
  [5789e2e9] FileIO v1.4.0
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_oGjHr4/Manifest.toml`
  [5789e2e9] FileIO v1.4.0
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.2172217105737901
curgen: 20 fitness: 0.2172217105737901
curgen: 30 fitness: 0.21723208025307758
curgen: 40 fitness: 0.21723208025307758
curgen: 50 fitness: 0.21723362689214568
CoordinateCreature{Vector{Float64}}([-0.22254270052414518], -0.21723362689214568) -0.22254270052414518 -0.21723362689214568
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.257893897908284
curgen: 100 fitness: 3.258114229720265
curgen: 150 fitness: 3.2583279298807755
curgen: 200 fitness: 3.2584171791119227
curgen: 250 fitness: 3.258441179378865
curgen: 300 fitness: 3.2584444880468673
curgen: 350 fitness: 3.2584595275584487
curgen: 400 fitness: 3.2584625741452777
curgen: 450 fitness: 3.25847195168436
curgen: 500 fitness: 3.2584722392326024
CoordinateCreature{Vector{Float64}}([-0.22242905638564242, 0.22298287116532503, -0.2223952467502984, 0.22268248119687017, 0.22244163514450557, 0.22242620621229386, 0.22257429260505568, 0.22272865417968732, -0.22262757702897149, 0.22255496724334264, -0.22288777653063357, -0.2221313159960327, 0.2226211238712792, 0.22222939007786993, 0.22269135607793783], -3.2584722392326024) [-0.22242905638564242, 0.22298287116532503, -0.2223952467502984, 0.22268248119687017, 0.22244163514450557, 0.22242620621229386, 0.22257429260505568, 0.22272865417968732, -0.22262757702897149, 0.22255496724334264, -0.22288777653063357, -0.2221313159960327, 0.2226211238712792, 0.22222939007786993, 0.22269135607793783] -3.2584722392326024
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.005229371800083982
curgen: 100 fitness: -0.004192153247288388
curgen: 150 fitness: -0.002113535251965004
curgen: 200 fitness: -0.002113535251965004
curgen: 250 fitness: -0.0019079529225223268
curgen: 300 fitness: -0.0015582468768116087
curgen: 350 fitness: -0.0015582468768116087
curgen: 400 fitness: -0.0015582468768116087
curgen: 450 fitness: -0.001040583904284631
curgen: 500 fitness: -0.001040583904284631
CoordinateCreature{Vector{Float64}}([0.0005149533366137317, 0.00022328425508154597, -0.00014081508416165234, -0.0010461638258442037, -7.388338596636133e-5, 0.0012171994249459445, -5.808326605828695e-5, -0.0004954114780996023, 0.00012800246642485628, -4.807649016728744e-5, -0.0009475532912956664, -0.0002006129867691971, 0.0008060553359052259, 0.0006745573959617732, -0.00013561881138299866], 0.001040583904284631) [0.0005149533366137317, 0.00022328425508154597, -0.00014081508416165234, -0.0010461638258442037, -7.388338596636133e-5, 0.0012171994249459445, -5.808326605828695e-5, -0.0004954114780996023, 0.00012800246642485628, -4.807649016728744e-5, -0.0009475532912956664, -0.0002006129867691971, 0.0008060553359052259, 0.0006745573959617732, -0.00013561881138299866] 0.001040583904284631
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
