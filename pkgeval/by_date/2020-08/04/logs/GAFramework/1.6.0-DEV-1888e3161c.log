Julia Version 1.6.0-DEV.572
Commit 1888e3161c (2020-08-02 15:45 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.0
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.0
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_Kcewsk/Project.toml`
  [5789e2e9] FileIO v1.4.0
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_Kcewsk/Manifest.toml`
  [5789e2e9] FileIO v1.4.0
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21723179471762483
curgen: 20 fitness: 0.217233416166418
curgen: 30 fitness: 0.217233416166418
curgen: 40 fitness: 0.217233416166418
curgen: 50 fitness: 0.217233416166418
CoordinateCreature{Vector{Float64}}([0.22261737394613898], -0.217233416166418) 0.22261737394613898 -0.217233416166418
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.2579892544676805
curgen: 100 fitness: 3.258181115491198
curgen: 150 fitness: 3.2581825073591206
curgen: 200 fitness: 3.2581845388863626
curgen: 250 fitness: 3.258259319640321
curgen: 300 fitness: 3.258264664222705
curgen: 350 fitness: 3.258281872654253
curgen: 400 fitness: 3.258283287682184
curgen: 450 fitness: 3.2583013469744753
curgen: 500 fitness: 3.2583190112231506
CoordinateCreature{Vector{Float64}}([0.2229000928288428, -0.2221864275910629, -0.222721734941457, 0.22247980107549858, 0.22235578155984503, 0.22297495068021672, -0.22075078368582896, -0.22269388850169977, 0.22255046753241706, -0.22245916085101378, 0.22283265560607768, 0.22301678622096027, -0.2228041524753249, -0.2224662876656349, -0.22266074749163092], -3.2583190112231506) [0.2229000928288428, -0.2221864275910629, -0.222721734941457, 0.22247980107549858, 0.22235578155984503, 0.22297495068021672, -0.22075078368582896, -0.22269388850169977, 0.22255046753241706, -0.22245916085101378, 0.22283265560607768, 0.22301678622096027, -0.2228041524753249, -0.2224662876656349, -0.22266074749163092] -3.2583190112231506
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.0010780051729000206
curgen: 100 fitness: -0.0010357414147961208
curgen: 150 fitness: -0.0010357414147961208
curgen: 200 fitness: -0.001011886163780673
curgen: 250 fitness: -0.0009908137769798486
curgen: 300 fitness: -0.0009142591508464193
curgen: 350 fitness: -0.0007762731848970361
curgen: 400 fitness: -0.0007762731848970361
curgen: 450 fitness: -0.0007762141434000114
curgen: 500 fitness: -0.0007762141434000114
CoordinateCreature{Vector{Float64}}([-2.1100863469042352e-5, -0.0007992237613527195, -0.0008592438832072358, -1.5150398884527746e-5, 6.337481792449001e-5, -0.00013201468922374756, 0.000894001168424753, 0.0004004311994337626, 0.0007311813022319676, -0.0006990127747766757, 0.0005773853681808022, 0.00041600716919467143, -0.000135580610974715, 6.634471757381577e-5, -3.616264439688555e-5], 0.0007762141434000114) [-2.1100863469042352e-5, -0.0007992237613527195, -0.0008592438832072358, -1.5150398884527746e-5, 6.337481792449001e-5, -0.00013201468922374756, 0.000894001168424753, 0.0004004311994337626, 0.0007311813022319676, -0.0006990127747766757, 0.0005773853681808022, 0.00041600716919467143, -0.000135580610974715, 6.634471757381577e-5, -3.616264439688555e-5] 0.0007762141434000114
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
