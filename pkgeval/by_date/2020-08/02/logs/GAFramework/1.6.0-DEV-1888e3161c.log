Julia Version 1.6.0-DEV.572
Commit 1888e3161c (2020-08-02 15:45 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.0
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.0
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_7aOZQu/Project.toml`
  [5789e2e9] FileIO v1.4.0
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_7aOZQu/Manifest.toml`
  [5789e2e9] FileIO v1.4.0
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21723357504912394
curgen: 20 fitness: 0.21723357504912394
curgen: 30 fitness: 0.21723357504912394
curgen: 40 fitness: 0.21723357504912394
curgen: 50 fitness: 0.21723357504912394
CoordinateCreature{Vector{Float64}}([0.22258281182737608], -0.21723357504912394) 0.22258281182737608 -0.21723357504912394
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.25775797764268
curgen: 100 fitness: 3.2581020698981757
curgen: 150 fitness: 3.258134763630457
curgen: 200 fitness: 3.258139803431568
curgen: 250 fitness: 3.2583232612585493
curgen: 300 fitness: 3.25832594525549
curgen: 350 fitness: 3.258383655512571
curgen: 400 fitness: 3.258385865064758
curgen: 450 fitness: 3.258397657568085
curgen: 500 fitness: 3.2584253495032764
CoordinateCreature{Vector{Float64}}([0.222103502444184, -0.2226081400992919, -0.222613663983648, -0.22301675078074754, 0.22236981690817728, -0.22255003873814405, -0.22299292791176314, -0.22230661659460232, 0.22288891436753303, 0.2224952206106666, 0.2216680222261582, 0.22260151559696081, 0.22274035360551758, -0.22223170741797538, 0.2227370948435954], -3.2584253495032764) [0.222103502444184, -0.2226081400992919, -0.222613663983648, -0.22301675078074754, 0.22236981690817728, -0.22255003873814405, -0.22299292791176314, -0.22230661659460232, 0.22288891436753303, 0.2224952206106666, 0.2216680222261582, 0.22260151559696081, 0.22274035360551758, -0.22223170741797538, 0.2227370948435954] -3.2584253495032764
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.0033435914873223282
curgen: 100 fitness: -0.00324908043867822
curgen: 150 fitness: -0.0024386215944502965
curgen: 200 fitness: -0.0020958739225420686
curgen: 250 fitness: -0.0013132432474662892
curgen: 300 fitness: -0.0007729377500425016
curgen: 350 fitness: -0.0007729377500425016
curgen: 400 fitness: -0.0007729377500425016
curgen: 450 fitness: -0.0007729377500425016
curgen: 500 fitness: -0.0006718209867244695
CoordinateCreature{Vector{Float64}}([-0.0005904914187405035, 0.00014531561191975415, -3.012394988128773e-5, -0.00034580346245329354, -8.734275742026e-5, -0.00022761087657090608, -9.111151182943891e-5, 0.0003640163009072879, 0.0002555870485827925, -5.48002233854908e-5, -0.00039124286172910125, -0.0008661951669830007, -0.0012196441278864482, -0.00036784201394225556, -0.0003182421225029141], 0.0006718209867244695) [-0.0005904914187405035, 0.00014531561191975415, -3.012394988128773e-5, -0.00034580346245329354, -8.734275742026e-5, -0.00022761087657090608, -9.111151182943891e-5, 0.0003640163009072879, 0.0002555870485827925, -5.48002233854908e-5, -0.00039124286172910125, -0.0008661951669830007, -0.0012196441278864482, -0.00036784201394225556, -0.0003182421225029141] 0.0006718209867244695
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
