Julia Version 1.6.0-DEV.572
Commit 1888e3161c (2020-08-02 15:45 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed Requires ───────────────────── v1.0.1
  Installed MPICH_jll ──────────────────── v3.3.2+10
  Installed CodecBzip2 ─────────────────── v0.7.2
  Installed TranscodingStreams ─────────── v0.9.5
  Installed DualDecomposition ──────────── v0.1.0
  Installed SpecialFunctions ───────────── v0.10.3
  Installed IniFile ────────────────────── v0.5.0
  Installed DiffResults ────────────────── v1.0.2
  Installed NaNMath ────────────────────── v0.3.4
  Installed OrderedCollections ─────────── v1.3.0
  Installed MbedTLS ────────────────────── v1.0.2
  Installed DocStringExtensions ────────── v0.8.2
  Installed DataStructures ─────────────── v0.17.19
  Installed StaticArrays ───────────────── v0.12.4
  Installed Bzip2_jll ──────────────────── v1.0.6+2
  Installed CodecZlib ──────────────────── v0.7.0
  Installed Zlib_jll ───────────────────── v1.2.11+14
  Installed BundleMethod ───────────────── v0.1.3
  Installed MacroTools ─────────────────── v0.5.5
  Installed MPI ────────────────────────── v0.15.1
  Installed Parsers ────────────────────── v1.0.7
  Installed BenchmarkTools ─────────────── v0.5.0
  Installed HTTP ───────────────────────── v0.8.17
  Installed MicrosoftMPI_jll ───────────── v10.1.2+3
  Installed Calculus ───────────────────── v0.5.1
  Installed JSONSchema ─────────────────── v0.3.1
  Installed DiffRules ──────────────────── v1.0.1
  Installed MbedTLS_jll ────────────────── v2.16.6+1
  Installed JSON ───────────────────────── v0.21.0
  Installed ZipFile ────────────────────── v0.9.2
  Installed OpenMPI_jll ────────────────── v4.0.2+2
  Installed CommonSubexpressions ───────── v0.3.0
  Installed MutableArithmetics ─────────── v0.2.10
  Installed ForwardDiff ────────────────── v0.10.12
  Installed MathOptInterface ───────────── v0.9.14
  Installed JuMP ───────────────────────── v0.21.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [d0e446f1] + DualDecomposition v0.1.0
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [6e4b80f9] + BenchmarkTools v0.5.0
  [e8a6717a] + BundleMethod v0.1.3
  [6e34b625] + Bzip2_jll v1.0.6+2
  [49dc2e85] + Calculus v0.5.1
  [523fee87] + CodecBzip2 v0.7.2
  [944b1d66] + CodecZlib v0.7.0
  [bbf7d656] + CommonSubexpressions v0.3.0
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [864edb3b] + DataStructures v0.17.19
  [163ba53b] + DiffResults v1.0.2
  [b552c78f] + DiffRules v1.0.1
  [ffbed154] + DocStringExtensions v0.8.2
  [d0e446f1] + DualDecomposition v0.1.0
  [f6369f11] + ForwardDiff v0.10.12
  [cd3eb016] + HTTP v0.8.17
  [83e8ac13] + IniFile v0.5.0
  [682c06a0] + JSON v0.21.0
  [7d188eb4] + JSONSchema v0.3.1
  [4076af6c] + JuMP v0.21.3
  [da04e1cc] + MPI v0.15.1
  [7cb0a576] + MPICH_jll v3.3.2+10
  [1914dd2f] + MacroTools v0.5.5
  [b8f27783] + MathOptInterface v0.9.14
  [739be429] + MbedTLS v1.0.2
  [c8ffd9c3] + MbedTLS_jll v2.16.6+1
  [9237b28f] + MicrosoftMPI_jll v10.1.2+3
  [d8a4904e] + MutableArithmetics v0.2.10
  [77ba4419] + NaNMath v0.3.4
  [fe0851c0] + OpenMPI_jll v4.0.2+2
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [bac558e1] + OrderedCollections v1.3.0
  [69de0a69] + Parsers v1.0.7
  [ae029012] + Requires v1.0.1
  [276daf66] + SpecialFunctions v0.10.3
  [90137ffa] + StaticArrays v0.12.4
  [3bb67fe8] + TranscodingStreams v0.9.5
  [a5390f91] + ZipFile v0.9.2
  [83775a58] + Zlib_jll v1.2.11+14
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
   Building MPI → `~/.julia/packages/MPI/z1lDn/deps/build.log`
    Testing DualDecomposition
Status `/tmp/jl_BLsLoK/Project.toml`
  [e8a6717a] BundleMethod v0.1.3
  [d0e446f1] DualDecomposition v0.1.0
  [60bf3e95] GLPK v0.13.0
  [b6b21f68] Ipopt v0.6.3
  [4076af6c] JuMP v0.21.3
  [da04e1cc] MPI v0.15.1
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_BLsLoK/Manifest.toml`
  [ae81ac8f] ASL_jll v0.1.1+3
  [6e4b80f9] BenchmarkTools v0.5.0
  [b99e7846] BinaryProvider v0.5.10
  [e8a6717a] BundleMethod v0.1.3
  [6e34b625] Bzip2_jll v1.0.6+2
  [49dc2e85] Calculus v0.5.1
  [523fee87] CodecBzip2 v0.7.2
  [944b1d66] CodecZlib v0.7.0
  [bbf7d656] CommonSubexpressions v0.3.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [864edb3b] DataStructures v0.17.19
  [163ba53b] DiffResults v1.0.2
  [b552c78f] DiffRules v1.0.1
  [ffbed154] DocStringExtensions v0.8.2
  [d0e446f1] DualDecomposition v0.1.0
  [f6369f11] ForwardDiff v0.10.12
  [60bf3e95] GLPK v0.13.0
  [e8aa6df9] GLPK_jll v4.64.0+0
  [781609d7] GMP_jll v6.2.0+1
  [cd3eb016] HTTP v0.8.17
  [83e8ac13] IniFile v0.5.0
  [b6b21f68] Ipopt v0.6.3
  [9cc047cb] Ipopt_jll v3.13.2+0
  [682c06a0] JSON v0.21.0
  [7d188eb4] JSONSchema v0.3.1
  [4076af6c] JuMP v0.21.3
  [d00139f3] METIS_jll v5.1.0+4
  [da04e1cc] MPI v0.15.1
  [7cb0a576] MPICH_jll v3.3.2+10
  [d7ed1dd3] MUMPS_seq_jll v5.2.1+3
  [1914dd2f] MacroTools v0.5.5
  [b8f27783] MathOptInterface v0.9.14
  [fdba3010] MathProgBase v0.7.8
  [739be429] MbedTLS v1.0.2
  [c8ffd9c3] MbedTLS_jll v2.16.6+1
  [9237b28f] MicrosoftMPI_jll v10.1.2+3
  [d8a4904e] MutableArithmetics v0.2.10
  [77ba4419] NaNMath v0.3.4
  [656ef2d0] OpenBLAS32_jll v0.3.9+4
  [fe0851c0] OpenMPI_jll v4.0.2+2
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [bac558e1] OrderedCollections v1.3.0
  [69de0a69] Parsers v1.0.7
  [ae029012] Requires v1.0.1
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.4
  [3bb67fe8] TranscodingStreams v0.9.5
  [a5390f91] ZipFile v0.9.2
  [83775a58] Zlib_jll v1.2.11+14
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode

******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit http://projects.coin-or.org/Ipopt
******************************************************************************

Iter 0: ncols 12, nrows 6, fx0 1.154000e+05, fx1 0.000000e+00, fy 1.154000e+05, v -1.332200e+05, u 1.000000e-01, i 0
Iter 1: ncols 12, nrows 9, fx0 1.154000e+05, fx1 1.154000e+05, fy 5.735333e+05, v -1.315373e+04, u 1.200000e-01, i -1
Iter 2: ncols 12, nrows 11, fx0 1.154000e+05, fx1 1.154000e+05, fy 1.524635e+05, v -8.707668e+03, u 1.440000e-01, i -1
Iter 3: ncols 12, nrows 13, fx0 1.102523e+05, fx1 1.102523e+05, fy 1.102523e+05, v -2.551334e+03, u 1.728000e-01, i -1
Iter 4: ncols 12, nrows 15, fx0 1.102523e+05, fx1 1.102523e+05, fy 1.138567e+05, v -1.867371e+03, u 2.073600e-01, i -1
Iter 5: ncols 12, nrows 16, fx0 1.084299e+05, fx1 1.084299e+05, fy 1.084299e+05, v -4.494681e+01, u 2.488320e-01, i -1
Iter 6: ncols 12, nrows 19, fx0 1.084299e+05, fx1 1.084299e+05, fy 1.084299e+05, v -3.990977e+01, u 2.985984e-01, i -1
Iter 7: ncols 12, nrows 22, fx0 1.083900e+05, fx1 1.083900e+05, fy 1.083900e+05, v -9.584044e-04, u 3.583181e-01, i -1
TERMINATION: Optimal: v = -0.0009584043637005379
DD.dual_objective_value(algo) = -108389.99987454197
DD.dual_solution(algo) = [40.11111070986341, 23.444444210029587, -63.555554919893076, -16.77777760986265, -28.11111083003394, 44.88888843989639, -23.333333100000758, 4.66666662000435, 18.666666479996685]
Iter 0: ncols 12, nrows 24, Δ 1.000000e+01, fx0 1.154000e+05, m 1.127700e+05, fy 1.154000e+05
Iter 1: ncols 12, nrows 24, Δ 1.500000e+01, fx0 1.132200e+05, m 1.088250e+05, fy 1.132200e+05
Iter 2: ncols 12, nrows 27, Δ 7.500000e+00, fx0 1.132200e+05, m 1.108083e+05, fy 1.148917e+05
Iter 3: ncols 12, nrows 30, Δ 3.750000e+00, fx0 1.132200e+05, m 1.126083e+05, fy 1.123833e+05
Iter 4: ncols 12, nrows 30, Δ 1.187500e+01, fx0 1.126083e+05, m 1.111833e+05, fy 1.126083e+05
Iter 5: ncols 12, nrows 30, Δ 1.593750e+01, fx0 1.111833e+05, m 1.095896e+05, fy 1.111833e+05
Iter 6: ncols 12, nrows 30, Δ 1.796875e+01, fx0 1.095896e+05, m 1.077927e+05, fy 1.095896e+05
Iter 7: ncols 12, nrows 33, Δ 8.984375e+00, fx0 1.095896e+05, m 1.086911e+05, fy 1.124115e+05
Iter 8: ncols 12, nrows 33, Δ 1.449219e+01, fx0 1.086911e+05, m 1.083900e+05, fy 1.086911e+05
Iter 9: ncols 12, nrows 33, Δ 1.724609e+01, fx0 1.083900e+05, m 1.083900e+05, fy 1.083900e+05
TERMINATION: Optimal
DD.dual_objective_value(algo) = -108390.00000000003
DD.dual_solution(algo) = [38.62760416666661, 21.960937500000117, -65.03906250000007, -18.869791666666693, -30.203125000000117, 42.79687499999997, -19.757812499999915, 8.2421875, 22.2421875000001]
objval = 96480.08276953863
Iter 0: ncols 12, nrows 6, fx0 -9.643955e+04, fx1 0.000000e+00, fy -9.643955e+04, v -6.182148e+00, u 1.000000e-01, i 0
Iter 1: ncols 12, nrows 9, fx0 -9.644548e+04, fx1 -9.644548e+04, fy -9.644548e+04, v -4.352687e+00, u 1.200000e-01, i -1
Iter 2: ncols 12, nrows 11, fx0 -9.644969e+04, fx1 -9.644969e+04, fy -9.644969e+04, v -3.463396e+00, u 1.440000e-01, i -1
Iter 3: ncols 12, nrows 13, fx0 -9.645287e+04, fx1 -9.645287e+04, fy -9.645287e+04, v -2.914920e+00, u 1.728000e-01, i -1
Iter 4: ncols 12, nrows 15, fx0 -9.645530e+04, fx1 -9.645530e+04, fy -9.645530e+04, v -2.579865e+00, u 2.073600e-01, i -1
Iter 5: ncols 12, nrows 17, fx0 -9.645720e+04, fx1 -9.645720e+04, fy -9.645720e+04, v -2.379253e+00, u 2.488320e-01, i -1
Iter 6: ncols 12, nrows 19, fx0 -9.645869e+04, fx1 -9.645869e+04, fy -9.645869e+04, v -2.263398e+00, u 2.985984e-01, i -1
Iter 7: ncols 12, nrows 21, fx0 -9.645987e+04, fx1 -9.645987e+04, fy -9.645987e+04, v -2.200725e+00, u 3.583181e-01, i -1
Iter 8: ncols 12, nrows 23, fx0 -9.646081e+04, fx1 -9.646081e+04, fy -9.646081e+04, v -2.171054e+00, u 4.299817e-01, i -1
Iter 9: ncols 12, nrows 25, fx0 -9.646157e+04, fx1 -9.646157e+04, fy -9.646157e+04, v -2.161458e+00, u 5.159780e-01, i -1
Iter 10: ncols 12, nrows 27, fx0 -9.646219e+04, fx1 -9.646219e+04, fy -9.646219e+04, v -2.163669e+00, u 6.191736e-01, i -1
Iter 11: ncols 12, nrows 29, fx0 -9.646269e+04, fx1 -9.646269e+04, fy -9.646269e+04, v -2.172433e+00, u 7.430084e-01, i -1
Iter 12: ncols 12, nrows 32, fx0 -9.646310e+04, fx1 -9.646310e+04, fy -9.646310e+04, v -2.743598e-01, u 8.916100e-01, i -1
Iter 13: ncols 12, nrows 33, fx0 -9.646337e+04, fx1 -9.646337e+04, fy -9.646337e+04, v -2.273735e-01, u 1.069932e+00, i -1
Iter 14: ncols 12, nrows 34, fx0 -9.646359e+04, fx1 -9.646359e+04, fy -9.646359e+04, v -1.897052e-01, u 1.283918e+00, i -1
Iter 15: ncols 12, nrows 35, fx0 -9.646378e+04, fx1 -9.646378e+04, fy -9.646378e+04, v -1.593354e-01, u 1.540702e+00, i -1
Iter 16: ncols 12, nrows 36, fx0 -9.646393e+04, fx1 -9.646393e+04, fy -9.646393e+04, v -1.347288e-01, u 1.848843e+00, i -1
Iter 17: ncols 12, nrows 37, fx0 -9.646406e+04, fx1 -9.646406e+04, fy -9.646406e+04, v -1.147045e-01, u 2.218611e+00, i -1
Iter 18: ncols 12, nrows 38, fx0 -9.646416e+04, fx1 -9.646416e+04, fy -9.646416e+04, v -9.835334e-02, u 2.662333e+00, i -1
Iter 19: ncols 12, nrows 39, fx0 -9.646425e+04, fx1 -9.646425e+04, fy -9.646425e+04, v -8.495774e-02, u 3.194800e+00, i -1
TERMINATION: Optimal: v = -0.08495773745380575
DD.dual_objective_value(algo) = 96464.24834260828
DD.dual_solution(algo) = [18.67625609933159, 13.864330323209106, 14.239644102211328, 0.8134823955022574, 0.40791317556711976, 0.373313528915692, -19.489738494833848, -14.272243498776225, -14.61295763112702]
Iter 0: ncols 12, nrows 24, Δ 1.000000e+01, fx0 -9.643955e+04, m -9.645850e+04, fy -9.643955e+04
Iter 1: ncols 12, nrows 24, Δ 1.500000e+01, fx0 -9.645627e+04, m -9.648693e+04, fy -9.645627e+04
Iter 2: ncols 12, nrows 24, Δ 1.750000e+01, fx0 -9.647299e+04, m -9.652009e+04, fy -9.647299e+04
Iter 3: ncols 12, nrows 27, Δ 8.750000e+00, fx0 -9.647299e+04, m -9.648092e+04, fy -9.647983e+04
Iter 4: ncols 12, nrows 30, Δ 4.375000e+00, fx0 -9.647299e+04, m -9.647868e+04, fy -9.646963e+04
Iter 5: ncols 12, nrows 30, Δ 1.218750e+01, fx0 -9.647598e+04, m -9.648095e+04, fy -9.647598e+04
Iter 6: ncols 12, nrows 33, Δ 6.093750e+00, fx0 -9.647598e+04, m -9.648004e+04, fy -9.647663e+04
Iter 7: ncols 12, nrows 36, Δ 3.046875e+00, fx0 -9.647598e+04, m -9.647793e+04, fy -9.647692e+04
Iter 8: ncols 12, nrows 36, Δ 1.152344e+01, fx0 -9.647756e+04, m -9.648054e+04, fy -9.647756e+04
Iter 9: ncols 12, nrows 36, Δ 1.576172e+01, fx0 -9.647926e+04, m -9.648159e+04, fy -9.647926e+04
Iter 10: ncols 12, nrows 39, Δ 7.880859e+00, fx0 -9.647926e+04, m -9.648097e+04, fy -9.647796e+04
Iter 11: ncols 12, nrows 42, Δ 3.940430e+00, fx0 -9.647926e+04, m -9.648056e+04, fy -9.647944e+04
Iter 12: ncols 12, nrows 45, Δ 1.970215e+00, fx0 -9.647926e+04, m -9.647993e+04, fy -9.647949e+04
Iter 13: ncols 12, nrows 45, Δ 1.098511e+01, fx0 -9.647969e+04, m -9.648076e+04, fy -9.647969e+04
Iter 14: ncols 12, nrows 48, Δ 5.492554e+00, fx0 -9.647969e+04, m -9.648051e+04, fy -9.647954e+04
Iter 15: ncols 12, nrows 48, Δ 1.274628e+01, fx0 -9.648005e+04, m -9.648051e+04, fy -9.648005e+04
Iter 16: ncols 12, nrows 51, Δ 6.373138e+00, fx0 -9.648005e+04, m -9.648023e+04, fy -9.648005e+04
Iter 17: ncols 12, nrows 54, Δ 3.186569e+00, fx0 -9.648005e+04, m -9.648019e+04, fy -9.647966e+04
Iter 18: ncols 12, nrows 57, Δ 1.593285e+00, fx0 -9.648005e+04, m -9.648013e+04, fy -9.648001e+04
TERMINATION: Optimal
DD.dual_objective_value(algo) = 96480.04965574063
DD.dual_solution(algo) = [38.4308148554463, 41.22571441254453, 49.5539103340924, 5.31876480329002e-9, 1.7304124804286927e-8, 8.878615227037662e-9, -38.43081486076507, -41.22571442984865, -49.553910342971015]
Test Summary: | Pass  Total
farmer        |    5      5
Test Summary:             | Pass  Total
combine_dict with 1 procs |    9      9
Test Summary:             |
Test Summary:             | combine_dict with 2 procs | No tests
Pass  Total
combine_dict with 2 procs |   18     18
Test Summary:             |Test Summary:             |

combine_dict with 3 procs | No tests
combine_dict with 3 procs | No tests
Test Summary:             | Pass  Total
combine_dict with 3 procs |   27     27
  0.012894 seconds (43 allocations: 2.672 KiB)
  0.047194 seconds (19.36 k allocations: 1.074 MiB)
  3.770603 seconds (3.24 M allocations: 184.797 MiB, 5.24% gc time)

******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit http://projects.coin-or.org/Ipopt
******************************************************************************

Iter 0: ncols 12, nrows 6, fx0 1.154000e+05, fx1 0.000000e+00, fy 1.154000e+05, v -1.332200e+05, u 1.000000e-01, i 0
Iter 1: ncols 12, nrows 9, fx0 1.154000e+05, fx1 1.154000e+05, fy 5.735333e+05, v -1.315373e+04, u 1.200000e-01, i -1
Iter 2: ncols 12, nrows 11, fx0 1.154000e+05, fx1 1.154000e+05, fy 1.524635e+05, v -8.707668e+03, u 1.440000e-01, i -1
Iter 3: ncols 12, nrows 13, fx0 1.102523e+05, fx1 1.102523e+05, fy 1.102523e+05, v -2.551334e+03, u 1.728000e-01, i -1
Iter 4: ncols 12, nrows 15, fx0 1.102523e+05, fx1 1.102523e+05, fy 1.138567e+05, v -1.867371e+03, u 2.073600e-01, i -1
Iter 5: ncols 12, nrows 16, fx0 1.084299e+05, fx1 1.084299e+05, fy 1.084299e+05, v -4.494681e+01, u 2.488320e-01, i -1
Iter 6: ncols 12, nrows 19, fx0 1.084299e+05, fx1 1.084299e+05, fy 1.084299e+05, v -3.990977e+01, u 2.985984e-01, i -1
Iter 7: ncols 12, nrows 22, fx0 1.083900e+05, fx1 1.083900e+05, fy 1.083900e+05, v -9.584044e-04, u 3.583181e-01, i -1
TERMINATION: Optimal: v = -0.0009584043637005379
    0.015909 seconds0.015929 seconds ( (45 allocations: 2.797 KiB)
45 allocations: 2.797 KiB)
  0.072854 seconds (19.36 k allocations: 1.074 MiB)
  0.062164 seconds (19.36 k allocations: 1.074 MiB)
  4.712885 seconds (3.86 M allocations: 217.748 MiB, 2.19% gc time)
  6.165998 seconds (3.86 M allocations: 217.748 MiB, 2.60% gc time)

******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit http://projects.coin-or.org/Ipopt
******************************************************************************

Iter 0: ncols 12, nrows 6, fx0 1.154000e+05, fx1 0.000000e+00, fy 1.154000e+05, v -1.332200e+05, u 1.000000e-01, i 0
Iter 1: ncols 12, nrows 9, fx0 1.154000e+05, fx1 1.154000e+05, fy 5.735333e+05, v -1.315373e+04, u 1.200000e-01, i -1
Iter 2: ncols 12, nrows 11, fx0 1.154000e+05, fx1 1.154000e+05, fy 1.524635e+05, v -8.707668e+03, u 1.440000e-01, i -1
Iter 3: ncols 12, nrows 13, fx0 1.102523e+05, fx1 1.102523e+05, fy 1.102523e+05, v -2.551334e+03, u 1.728000e-01, i -1
Iter 4: ncols 12, nrows 15, fx0 1.102523e+05, fx1 1.102523e+05, fy 1.138567e+05, v -1.867371e+03, u 2.073600e-01, i -1
Iter 5: ncols 12, nrows 16, fx0 1.084299e+05, fx1 1.084299e+05, fy 1.084299e+05, v -4.494681e+01, u 2.488320e-01, i -1
Iter 6: ncols 12, nrows 19, fx0 1.084299e+05, fx1 1.084299e+05, fy 1.084299e+05, v -3.990977e+01, u 2.985984e-01, i -1
Iter 7: ncols 12, nrows 22, fx0 1.083900e+05, fx1 1.083900e+05, fy 1.083900e+05, v -9.584043e-04, u 3.583181e-01, i -1
TERMINATION: Optimal: v = -0.0009584043473296333
    0.016647 seconds0.024540 seconds (47 allocations: 2.938 KiB  )
0.022538 seconds ( (47 allocations: 2.938 KiB)
47 allocations: 2.938 KiB)
  0.066181 seconds (19.36 k allocations: 1.074 MiB)
  0.071683 seconds (19.36 k allocations: 1.074 MiB)
  0.064633 seconds (19.36 k allocations: 1.074 MiB)
  7.285331 seconds (3.86 M allocations: 217.749 MiB, 1.97% gc time)
  7.822179 seconds (3.86 M allocations: 217.749 MiB, 1.78% gc time)
 11.861303 seconds (3.86 M allocations: 217.749 MiB, 1.50% gc time)

******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit http://projects.coin-or.org/Ipopt
******************************************************************************

Iter 0: ncols 12, nrows 6, fx0 1.154000e+05, fx1 0.000000e+00, fy 1.154000e+05, v -1.332200e+05, u 1.000000e-01, i 0
Iter 1: ncols 12, nrows 9, fx0 1.154000e+05, fx1 1.154000e+05, fy 5.735333e+05, v -1.315373e+04, u 1.200000e-01, i -1
Iter 2: ncols 12, nrows 11, fx0 1.154000e+05, fx1 1.154000e+05, fy 1.524635e+05, v -8.707668e+03, u 1.440000e-01, i -1
Iter 3: ncols 12, nrows 13, fx0 1.102523e+05, fx1 1.102523e+05, fy 1.102523e+05, v -2.551334e+03, u 1.728000e-01, i -1
Iter 4: ncols 12, nrows 15, fx0 1.102523e+05, fx1 1.102523e+05, fy 1.138567e+05, v -1.867371e+03, u 2.073600e-01, i -1
Iter 5: ncols 12, nrows 16, fx0 1.084299e+05, fx1 1.084299e+05, fy 1.084299e+05, v -4.494681e+01, u 2.488320e-01, i -1
Iter 6: ncols 12, nrows 19, fx0 1.084299e+05, fx1 1.084299e+05, fy 1.084299e+05, v -3.990977e+01, u 2.985984e-01, i -1
Iter 7: ncols 12, nrows 22, fx0 1.083900e+05, fx1 1.083900e+05, fy 1.083900e+05, v -9.584044e-04, u 3.583181e-01, i -1
TERMINATION: Optimal: v = -0.0009584043637005379
Test Summary: |
MPI tests     | No tests
    Testing DualDecomposition tests passed 
