Julia Version 1.6.0-DEV.654
Commit bf8a8e8f9c (2020-08-18 16:25 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed CpuId ─────────────── v0.2.2
  Installed SIMDPirates ───────── v0.8.24
  Installed UnPack ────────────── v1.0.2
  Installed VectorizationBase ─── v0.12.32
  Installed SLEEFPirates ──────── v0.5.5
  Installed OffsetArrays ──────── v1.1.2
  Installed DocStringExtensions ─ v0.8.2
  Installed LoopVectorization ─── v0.8.24
Updating `~/.julia/environments/v1.6/Project.toml`
  [bdcacae8] + LoopVectorization v0.8.24
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [adafc99b] + CpuId v0.2.2
  [ffbed154] + DocStringExtensions v0.8.2
  [bdcacae8] + LoopVectorization v0.8.24
  [6fe1bfb0] + OffsetArrays v1.1.2
  [21efa798] + SIMDPirates v0.8.24
  [476501e8] + SLEEFPirates v0.5.5
  [3a884ed6] + UnPack v1.0.2
  [3d5dd08c] + VectorizationBase v0.12.32
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
   Building SLEEFPirates → `~/.julia/packages/SLEEFPirates/jGsib/deps/build.log`
    Testing LoopVectorization
Status `/tmp/jl_tDAWUu/Project.toml`
  [ffbed154] DocStringExtensions v0.8.2
  [bdcacae8] LoopVectorization v0.8.24
  [6fe1bfb0] OffsetArrays v1.1.2
  [21efa798] SIMDPirates v0.8.24
  [476501e8] SLEEFPirates v0.5.5
  [3a884ed6] UnPack v1.0.2
  [3d5dd08c] VectorizationBase v0.12.32
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [8dfed614] Test
Status `/tmp/jl_tDAWUu/Manifest.toml`
  [adafc99b] CpuId v0.2.2
  [ffbed154] DocStringExtensions v0.8.2
  [bdcacae8] LoopVectorization v0.8.24
  [6fe1bfb0] OffsetArrays v1.1.2
  [21efa798] SIMDPirates v0.8.24
  [476501e8] SLEEFPirates v0.5.5
  [3a884ed6] UnPack v1.0.2
  [3d5dd08c] VectorizationBase v0.12.32
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
LoopVectorization.REGISTER_COUNT = 32
#= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/printmethods.jl:2 =# @__LINE__() = 2
  5.897291 seconds (2.76 M allocations: 155.358 MiB, 1.27% gc time)
(Float64, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/fallback.jl:4 =# @__LINE__()) = (Float64, 4)
 24.735001 seconds (11.97 M allocations: 676.919 MiB, 2.81% gc time)
  0.152131 seconds (75.37 k allocations: 4.579 MiB, 10.03% gc time)
  8.258598 seconds (7.37 M allocations: 418.399 MiB, 2.05% gc time)
  1.767282 seconds (2.17 M allocations: 121.707 MiB, 3.00% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/offsetarrays.jl:204 =# @__LINE__()) = (Float32, 204)
r = -1:1
r = -2:2
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/offsetarrays.jl:204 =# @__LINE__()) = (Float64, 204)
r = -1:1
r = -2:2
642.735775 seconds (299.15 M allocations: 24.143 GiB, 4.41% gc time)
(Float64, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/tensors.jl:51 =# @__LINE__()) = (Float64, 51)
 19.798893 seconds (12.83 M allocations: 757.558 MiB, 5.60% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/map.jl:4 =# @__LINE__()) = (Float32, 4)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/map.jl:4 =# @__LINE__()) = (Float64, 4)
  6.497380 seconds (7.06 M allocations: 398.872 MiB, 2.63% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/filter.jl:4 =# @__LINE__()) = (Float32, 4)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/filter.jl:4 =# @__LINE__()) = (Float64, 4)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/filter.jl:4 =# @__LINE__()) = (Int32, 4)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/filter.jl:4 =# @__LINE__()) = (Int64, 4)
  1.122633 seconds (790.07 k allocations: 46.324 MiB, 1.74% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/mapreduce.jl:19 =# @__LINE__()) = (Int32, 19)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/mapreduce.jl:19 =# @__LINE__()) = (Int64, 19)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/mapreduce.jl:19 =# @__LINE__()) = (Float32, 19)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/mapreduce.jl:19 =# @__LINE__()) = (Float64, 19)
169.171857 seconds (441.98 M allocations: 29.208 GiB, 7.08% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/ifelsemasks.jl:352 =# @__LINE__()) = (Float32, 352)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/ifelsemasks.jl:352 =# @__LINE__()) = (Float64, 352)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/ifelsemasks.jl:352 =# @__LINE__()) = (Int32, 352)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/ifelsemasks.jl:352 =# @__LINE__()) = (Int64, 352)
 70.614291 seconds (51.50 M allocations: 2.815 GiB, 6.50% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/dot.jl:234 =# @__LINE__()) = (Float32, 234)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/dot.jl:234 =# @__LINE__()) = (Float64, 234)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/dot.jl:234 =# @__LINE__()) = (Int32, 234)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/dot.jl:234 =# @__LINE__()) = (Int64, 234)
 41.030554 seconds (38.96 M allocations: 2.189 GiB, 3.85% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/special.jl:339 =# @__LINE__()) = (Float32, 339)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/special.jl:339 =# @__LINE__()) = (Float64, 339)
 13.659982 seconds (12.78 M allocations: 688.390 MiB, 2.22% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/gemv.jl:211 =# @__LINE__()) = (Float32, 211)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/gemv.jl:211 =# @__LINE__()) = (Float64, 211)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/gemv.jl:211 =# @__LINE__()) = (Int32, 211)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/gemv.jl:211 =# @__LINE__()) = (Int64, 211)
 60.027913 seconds (51.39 M allocations: 2.575 GiB, 2.21% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/miscellaneous.jl:789 =# @__LINE__()) = (Float32, 789)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/miscellaneous.jl:789 =# @__LINE__()) = (Float64, 789)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/miscellaneous.jl:1066 =# @__LINE__()) = (Float32, 1066)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/miscellaneous.jl:1066 =# @__LINE__()) = (Float64, 1066)
113.736991 seconds (126.92 M allocations: 7.070 GiB, 7.11% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/copy.jl:129 =# @__LINE__()) = (Float32, 129)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/copy.jl:129 =# @__LINE__()) = (Float64, 129)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/copy.jl:129 =# @__LINE__()) = (Int32, 129)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/copy.jl:129 =# @__LINE__()) = (Int64, 129)
 10.978980 seconds (8.54 M allocations: 463.072 MiB, 3.63% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/broadcast.jl:5 =# @__LINE__()) = (Float32, 5)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/broadcast.jl:5 =# @__LINE__()) = (Float64, 5)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/broadcast.jl:5 =# @__LINE__()) = (Int32, 5)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/broadcast.jl:5 =# @__LINE__()) = (Int64, 5)
318.737776 seconds (130.39 M allocations: 8.012 GiB, 4.43% gc time)
OPS = Tuple{:numericconstant,Symbol("##zero#14134"),LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x01, 0x02),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000032, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x03),:LoopVectorization,:vfmadd_fast,LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000020301, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:identity,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000004, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x04),:LoopVectorization,:vadd,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000605, LoopVectorization.compute, 0x00, 0x04),:LoopVectorization,:setindex!,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000007, LoopVectorization.memstore, 0x03, 0x05)}
ARF = Tuple{LoopVectorization.ArrayRefStruct{:A,Symbol("##vptr##_A")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:B,Symbol("##vptr##_B")}(0x0000000000000101, 0x0000000000000302, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:C,Symbol("##vptr##_C")}(0x0000000000000101, 0x0000000000000102, 0x0000000000000000)}
AM = Tuple{0,Tuple{},Tuple{},Tuple{},Tuple{},Tuple{(1, LoopVectorization.IntOrFloat)},Tuple{}}
LPSYM = Tuple{:m,:n,:k}
LB = Tuple{VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1}}
vargs = (VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007f5cec435e80, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007f5cec4360b0, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007f5cec436190, (16,)))
OPS = Tuple{:numericconstant,Symbol("##zero#14134"),LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x01, 0x02),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000032, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x03),:LoopVectorization,:vfmadd_fast,LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000020301, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:identity,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000004, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x04),:LoopVectorization,:vadd,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000605, LoopVectorization.compute, 0x00, 0x04),:LoopVectorization,:setindex!,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000007, LoopVectorization.memstore, 0x03, 0x05)}
ARF = Tuple{LoopVectorization.ArrayRefStruct{:A,Symbol("##vptr##_A")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:B,Symbol("##vptr##_B")}(0x0000000000000101, 0x0000000000000302, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:C,Symbol("##vptr##_C")}(0x0000000000000101, 0x0000000000000102, 0x0000000000000000)}
AM = Tuple{0,Tuple{},Tuple{},Tuple{},Tuple{},Tuple{(1, LoopVectorization.IntOrFloat)},Tuple{}}
LPSYM = Tuple{:m,:n,:k}
LB = Tuple{VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1}}
vargs = (VectorizationBase.RowMajorStridedPointer{Float64,1}(Ptr{Float64} @0x00007f5c28923000, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007f5c28923070, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007f5c28938280, (16,)))
OPS = Tuple{:numericconstant,Symbol("##zero#14134"),LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x01, 0x02),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000032, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x03),:LoopVectorization,:vfmadd_fast,LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000020301, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:identity,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000004, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x04),:LoopVectorization,:vadd,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000605, LoopVectorization.compute, 0x00, 0x04),:LoopVectorization,:setindex!,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000007, LoopVectorization.memstore, 0x03, 0x05)}
ARF = Tuple{LoopVectorization.ArrayRefStruct{:A,Symbol("##vptr##_A")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:B,Symbol("##vptr##_B")}(0x0000000000000101, 0x0000000000000302, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:C,Symbol("##vptr##_C")}(0x0000000000000101, 0x0000000000000102, 0x0000000000000000)}
AM = Tuple{0,Tuple{},Tuple{},Tuple{},Tuple{},Tuple{(1, LoopVectorization.IntOrFloat)},Tuple{}}
LPSYM = Tuple{:m,:n,:k}
LB = Tuple{VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1}}
vargs = (VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007f5c2778f5b0, (16,)), VectorizationBase.RowMajorStridedPointer{Float64,1}(Ptr{Float64} @0x00007f5c2778f620, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007f5c2778f690, (16,)))
OPS = Tuple{:numericconstant,Symbol("##zero#14134"),LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x01, 0x02),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000032, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x03),:LoopVectorization,:vfmadd_fast,LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000020301, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:identity,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000004, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x04),:LoopVectorization,:vadd,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000605, LoopVectorization.compute, 0x00, 0x04),:LoopVectorization,:setindex!,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000007, LoopVectorization.memstore, 0x03, 0x05)}
ARF = Tuple{LoopVectorization.ArrayRefStruct{:A,Symbol("##vptr##_A")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:B,Symbol("##vptr##_B")}(0x0000000000000101, 0x0000000000000302, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:C,Symbol("##vptr##_C")}(0x0000000000000101, 0x0000000000000102, 0x0000000000000000)}
AM = Tuple{0,Tuple{},Tuple{},Tuple{},Tuple{},Tuple{(1, LoopVectorization.IntOrFloat)},Tuple{}}
LPSYM = Tuple{:m,:n,:k}
LB = Tuple{VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1}}
vargs = (VectorizationBase.RowMajorStridedPointer{Float64,1}(Ptr{Float64} @0x00007f5c2946c050, (16,)), VectorizationBase.RowMajorStridedPointer{Float64,1}(Ptr{Float64} @0x00007f5c2946c0c0, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007f5c2946c130, (16,)))
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/gemm.jl:650 =# @__LINE__()) = (Float32, 650)
 78.628597 seconds (45.35 M allocations: 3.331 GiB, 5.24% gc time)
  9.026575 seconds (8.48 M allocations: 453.185 MiB)
 16.395447 seconds (11.37 M allocations: 680.640 MiB, 4.70% gc time)
  8.711999 seconds (8.21 M allocations: 469.635 MiB, 5.89% gc time)
 17.570771 seconds (12.91 M allocations: 857.390 MiB, 4.91% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/gemm.jl:650 =# @__LINE__()) = (Float64, 650)
 78.622771 seconds (44.86 M allocations: 3.305 GiB, 6.27% gc time)
 11.860261 seconds (8.41 M allocations: 450.307 MiB, 7.86% gc time)
 16.596292 seconds (11.29 M allocations: 676.402 MiB, 4.44% gc time)
  8.463912 seconds (8.17 M allocations: 467.421 MiB, 2.53% gc time)
 18.316907 seconds (12.78 M allocations: 849.719 MiB, 5.00% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/gemm.jl:650 =# @__LINE__()) = (Int32, 650)
107.418943 seconds (49.88 M allocations: 3.530 GiB, 3.92% gc time)
 13.542934 seconds (8.95 M allocations: 469.940 MiB, 7.13% gc time)
 18.048183 seconds (10.40 M allocations: 613.180 MiB, 2.27% gc time)
 13.234141 seconds (8.68 M allocations: 486.263 MiB, 3.24% gc time)
 22.542909 seconds (13.24 M allocations: 864.473 MiB, 4.08% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/gemm.jl:650 =# @__LINE__()) = (Int64, 650)
111.760542 seconds (49.80 M allocations: 3.527 GiB, 3.85% gc time)
 12.200346 seconds (8.92 M allocations: 469.094 MiB, 5.73% gc time)
 17.831549 seconds (10.36 M allocations: 611.644 MiB, 2.93% gc time)
 12.475771 seconds (8.65 M allocations: 485.043 MiB, 4.27% gc time)
 23.023074 seconds (13.23 M allocations: 864.359 MiB, 4.04% gc time)
624.118924 seconds (356.69 M allocations: 23.399 GiB, 4.48% gc time)
Test Summary:        | Pass  Total
LoopVectorization.jl | 1723   1723
2134.031616 seconds (1.56 G allocations: 103.127 GiB, 4.73% gc time)
    Testing LoopVectorization tests passed 
