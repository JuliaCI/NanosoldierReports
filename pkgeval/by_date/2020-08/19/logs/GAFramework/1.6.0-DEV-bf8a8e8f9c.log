Julia Version 1.6.0-DEV.654
Commit bf8a8e8f9c (2020-08-18 16:25 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.1
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.1
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_Qd1wqD/Project.toml`
  [5789e2e9] FileIO v1.4.1
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_Qd1wqD/Manifest.toml`
  [5789e2e9] FileIO v1.4.1
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21723063654709063
curgen: 20 fitness: 0.21723063654709063
curgen: 30 fitness: 0.21723063654709063
curgen: 40 fitness: 0.21723063654709063
curgen: 50 fitness: 0.21723063654709063
CoordinateCreature{Vector{Float64}}([-0.2228082909311141], -0.21723063654709063) -0.2228082909311141 -0.21723063654709063
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.257929986593747
curgen: 100 fitness: 3.2580549307514293
curgen: 150 fitness: 3.2581572020487473
curgen: 200 fitness: 3.2581835537528527
curgen: 250 fitness: 3.2582574327061726
curgen: 300 fitness: 3.2583979530511744
curgen: 350 fitness: 3.258431890392893
curgen: 400 fitness: 3.258438275184501
curgen: 450 fitness: 3.2584389797255597
curgen: 500 fitness: 3.258444889165613
CoordinateCreature{Vector{Float64}}([0.22176739145125182, 0.2222973579484675, 0.22246671434844145, -0.22227377570775125, -0.2227208572174728, -0.222518024687874, 0.2222904567332328, -0.22247911862857608, -0.22288661068543017, 0.22263347918951443, -0.22303007607033198, -0.22248724261967914, 0.22276528676515442, -0.2225070272110327, -0.2228301440294583], -3.258444889165613) [0.22176739145125182, 0.2222973579484675, 0.22246671434844145, -0.22227377570775125, -0.2227208572174728, -0.222518024687874, 0.2222904567332328, -0.22247911862857608, -0.22288661068543017, 0.22263347918951443, -0.22303007607033198, -0.22248724261967914, 0.22276528676515442, -0.2225070272110327, -0.2228301440294583] -3.258444889165613
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.002812882100187153
curgen: 100 fitness: -0.0027891316150316925
curgen: 150 fitness: -0.0026332924905432264
curgen: 200 fitness: -0.0018272569732005195
curgen: 250 fitness: -0.0013846303233151502
curgen: 300 fitness: -0.0013846303233151502
curgen: 350 fitness: -0.0013846303233151502
curgen: 400 fitness: -0.0013846303233151502
curgen: 450 fitness: -0.0013771868444507618
curgen: 500 fitness: -0.0013771868444507618
CoordinateCreature{Vector{Float64}}([0.00034969619421522065, -0.0006407791144863138, -0.0012745545688344249, -0.00047032547120123835, -0.000310203890956106, -0.0006195856811218575, -0.001902802532326676, 2.593934655669691e-5, 0.0004203413175254741, -3.256801922825632e-5, -8.237253855423833e-6, -9.803012088916086e-5, 0.00011629052058682583, -0.00046350485463088776, -0.00021444456988035064], 0.0013771868444507618) [0.00034969619421522065, -0.0006407791144863138, -0.0012745545688344249, -0.00047032547120123835, -0.000310203890956106, -0.0006195856811218575, -0.001902802532326676, 2.593934655669691e-5, 0.0004203413175254741, -3.256801922825632e-5, -8.237253855423833e-6, -9.803012088916086e-5, 0.00011629052058682583, -0.00046350485463088776, -0.00021444456988035064] 0.0013771868444507618
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
