Julia Version 1.6.0-DEV.675
Commit 04e47cf5ff (2020-08-19 16:56 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.1
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.1
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_i5R5l7/Project.toml`
  [5789e2e9] FileIO v1.4.1
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_i5R5l7/Manifest.toml`
  [5789e2e9] FileIO v1.4.1
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.2172228433840943
curgen: 20 fitness: 0.2172336138846248
curgen: 30 fitness: 0.2172336138846248
curgen: 40 fitness: 0.2172336138846248
curgen: 50 fitness: 0.2172336138846248
CoordinateCreature{Vector{Float64}}([0.22256614692300908], -0.2172336138846248) 0.22256614692300908 -0.2172336138846248
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.2583241967388883
curgen: 100 fitness: 3.2583803504437134
curgen: 150 fitness: 3.2584153622836975
curgen: 200 fitness: 3.258440648022853
curgen: 250 fitness: 3.2584448613550148
curgen: 300 fitness: 3.258468291620117
curgen: 350 fitness: 3.258468291620117
curgen: 400 fitness: 3.2584788497611803
curgen: 450 fitness: 3.2584788497611803
curgen: 500 fitness: 3.2584789277131594
CoordinateCreature{Vector{Float64}}([0.22245542745045424, -0.22237200543861144, 0.2224030074888813, -0.22215462249815732, -0.22252762294413064, -0.22246611350131576, -0.22250106875838513, -0.22246624966308232, -0.2221128342934133, -0.22256455747025503, 0.22287519801892022, -0.22247643995109062, 0.2224989335160041, 0.2227442453213318, -0.22257500671469632], -3.2584789277131594) [0.22245542745045424, -0.22237200543861144, 0.2224030074888813, -0.22215462249815732, -0.22252762294413064, -0.22246611350131576, -0.22250106875838513, -0.22246624966308232, -0.2221128342934133, -0.22256455747025503, 0.22287519801892022, -0.22247643995109062, 0.2224989335160041, 0.2227442453213318, -0.22257500671469632] -3.2584789277131594
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.0016234650046271781
curgen: 100 fitness: -0.0014777583117790982
curgen: 150 fitness: -0.0014238152452321629
curgen: 200 fitness: -0.0014238152452321629
curgen: 250 fitness: -0.0014136798923232163
curgen: 300 fitness: -0.0008464949254403109
curgen: 350 fitness: -0.0007239760446395849
curgen: 400 fitness: -0.0007239760446395849
curgen: 450 fitness: -0.0006516739114488246
curgen: 500 fitness: -0.0006513150343607776
CoordinateCreature{Vector{Float64}}([-0.0005799596467333296, -0.0002882506220736271, -1.197899524139174e-5, 0.0005862269776183378, 0.00016099438288746563, -0.0004486685438743906, 0.0006380747654725332, 0.00029360924663512976, 8.854962078156081e-6, 0.000624288671935058, -0.0003522228823621342, 0.0002048152772513213, 0.0006510300871888919, -0.0008944133955027739, 0.00013970460623556532], 0.0006513150343607776) [-0.0005799596467333296, -0.0002882506220736271, -1.197899524139174e-5, 0.0005862269776183378, 0.00016099438288746563, -0.0004486685438743906, 0.0006380747654725332, 0.00029360924663512976, 8.854962078156081e-6, 0.000624288671935058, -0.0003522228823621342, 0.0002048152772513213, 0.0006510300871888919, -0.0008944133955027739, 0.00013970460623556532] 0.0006513150343607776
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
