Julia Version 1.6.0-DEV.587
Commit a6de8b6186 (2020-08-05 14:09 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.0
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.0
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_yHk75w/Project.toml`
  [5789e2e9] FileIO v1.4.0
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_yHk75w/Manifest.toml`
  [5789e2e9] FileIO v1.4.0
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.2172061090346305
curgen: 20 fitness: 0.2172061090346305
curgen: 30 fitness: 0.2172061090346305
curgen: 40 fitness: 0.2172334833000489
curgen: 50 fitness: 0.2172334833000489
CoordinateCreature{Vector{Float64}}([0.22260537541708286], -0.2172334833000489) 0.22260537541708286 -0.2172334833000489
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.2579331959827718
curgen: 100 fitness: 3.2580844370877755
curgen: 150 fitness: 3.2582520722170623
curgen: 200 fitness: 3.2583946634566527
curgen: 250 fitness: 3.2584020642051272
curgen: 300 fitness: 3.258409687165089
curgen: 350 fitness: 3.2584239328729554
curgen: 400 fitness: 3.2584239328729554
curgen: 450 fitness: 3.2584239328729554
curgen: 500 fitness: 3.2584371508764756
CoordinateCreature{Vector{Float64}}([-0.2226703556424019, -0.22307584243769818, 0.22175804561440535, -0.22284937890735676, 0.22203300503296497, -0.22238679211323775, -0.22243809331472564, 0.22259506609070764, 0.22237309294043292, 0.22222086995212664, 0.22233124532449122, 0.22246140236308692, 0.22260741513223434, 0.2225822814230382, -0.22247702059960298], -3.2584371508764756) [-0.2226703556424019, -0.22307584243769818, 0.22175804561440535, -0.22284937890735676, 0.22203300503296497, -0.22238679211323775, -0.22243809331472564, 0.22259506609070764, 0.22237309294043292, 0.22222086995212664, 0.22233124532449122, 0.22246140236308692, 0.22260741513223434, 0.2225822814230382, -0.22247702059960298] -3.2584371508764756
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.0053181358071867635
curgen: 100 fitness: -0.0035571417230642055
curgen: 150 fitness: -0.003487583511031289
curgen: 200 fitness: -0.003487118623695551
curgen: 250 fitness: -0.003446727866702304
curgen: 300 fitness: -0.002523043910599654
curgen: 350 fitness: -0.0024256129018453976
curgen: 400 fitness: -0.0022843648520449733
curgen: 450 fitness: -0.002251545181820802
curgen: 500 fitness: -0.002115800175147342
CoordinateCreature{Vector{Float64}}([0.0003438280916924349, 0.0007411050982529258, -0.00033097841145660566, 0.00014970421478151502, 5.657832351224027e-5, 0.0019484454247771787, 0.0015584846701334255, 7.572736356067325e-5, 0.0007466590578777453, -0.00035933056604523406, -0.00013000465215701863, -0.0007135095645065895, 0.0014613795335596323, 0.0005055990124658428, 0.00016518821431363138], 0.002115800175147342) [0.0003438280916924349, 0.0007411050982529258, -0.00033097841145660566, 0.00014970421478151502, 5.657832351224027e-5, 0.0019484454247771787, 0.0015584846701334255, 7.572736356067325e-5, 0.0007466590578777453, -0.00035933056604523406, -0.00013000465215701863, -0.0007135095645065895, 0.0014613795335596323, 0.0005055990124658428, 0.00016518821431363138] 0.002115800175147342
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
