Julia Version 1.6.0-DEV.580
Commit 8a6656016b (2020-08-04 16:02 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.0
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.0
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_Z6RxaL/Project.toml`
  [5789e2e9] FileIO v1.4.0
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_Z6RxaL/Manifest.toml`
  [5789e2e9] FileIO v1.4.0
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21716240297388248
curgen: 20 fitness: 0.21716240297388248
curgen: 30 fitness: 0.21716240297388248
curgen: 40 fitness: 0.21723230593180062
curgen: 50 fitness: 0.21723230593180062
CoordinateCreature{Vector{Float64}}([-0.2223754408767199], -0.21723230593180062) -0.2223754408767199 -0.21723230593180062
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.2578743710046663
curgen: 100 fitness: 3.258120114464243
curgen: 150 fitness: 3.258396918779497
curgen: 200 fitness: 3.258422883147943
curgen: 250 fitness: 3.2584248086337473
curgen: 300 fitness: 3.2584580884967576
curgen: 350 fitness: 3.258466058691433
curgen: 400 fitness: 3.2584706284599236
curgen: 450 fitness: 3.2584780540328766
curgen: 500 fitness: 3.258484895533593
CoordinateCreature{Vector{Float64}}([-0.22237475739077722, 0.22239044340652347, -0.22279391255523057, -0.22203866753870766, -0.22253887504085954, -0.22256012174192738, 0.22245079727469672, 0.22254469967435883, -0.22260938222031446, -0.22271581799212198, 0.22248046552547132, 0.22250271030517932, 0.22251641098764993, -0.22258421157573527, -0.22242645873075007], -3.258484895533593) [-0.22237475739077722, 0.22239044340652347, -0.22279391255523057, -0.22203866753870766, -0.22253887504085954, -0.22256012174192738, 0.22245079727469672, 0.22254469967435883, -0.22260938222031446, -0.22271581799212198, 0.22248046552547132, 0.22250271030517932, 0.22251641098764993, -0.22258421157573527, -0.22242645873075007] -3.258484895533593
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.001834729123146417
curgen: 100 fitness: -0.0017802900443371072
curgen: 150 fitness: -0.0017802900443371072
curgen: 200 fitness: -0.001744299889423928
curgen: 250 fitness: -0.001744299889423928
curgen: 300 fitness: -0.0014789704224256184
curgen: 350 fitness: -0.0014789704224256184
curgen: 400 fitness: -0.0014789704224256184
curgen: 450 fitness: -0.0010434797432026244
curgen: 500 fitness: -0.0009231817890622551
CoordinateCreature{Vector{Float64}}([-0.0004940533309020904, 0.0001369239473205065, 0.0008316399092800388, -0.00033507764139118303, 0.0007222705824220452, 0.0005117720000022465, 0.00021705739471933585, -0.00045964783322424317, -0.0007078356339921359, -0.0012681501933114528, -0.00024101842146888926, -0.00039631535335355405, 0.00018029965388073239, -1.090018193748959e-5, -0.00043312723090049393], 0.0009231817890622551) [-0.0004940533309020904, 0.0001369239473205065, 0.0008316399092800388, -0.00033507764139118303, 0.0007222705824220452, 0.0005117720000022465, 0.00021705739471933585, -0.00045964783322424317, -0.0007078356339921359, -0.0012681501933114528, -0.00024101842146888926, -0.00039631535335355405, 0.00018029965388073239, -1.090018193748959e-5, -0.00043312723090049393] 0.0009231817890622551
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
