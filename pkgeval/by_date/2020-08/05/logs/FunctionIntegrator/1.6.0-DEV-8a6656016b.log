Julia Version 1.6.0-DEV.580
Commit 8a6656016b (2020-08-04 16:02 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed FastGaussQuadrature ────────── v0.4.2
  Installed FunctionIntegrator ─────────── v0.5.1
  Installed SpecialFunctions ───────────── v0.10.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [7685536e] + FunctionIntegrator v0.5.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [442a2c76] + FastGaussQuadrature v0.4.2
  [7685536e] + FunctionIntegrator v0.5.1
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [276daf66] + SpecialFunctions v0.10.3
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing FunctionIntegrator
Status `/tmp/jl_SRnkRi/Project.toml`
  [442a2c76] FastGaussQuadrature v0.4.2
  [7685536e] FunctionIntegrator v0.5.1
  [276daf66] SpecialFunctions v0.10.3
  [8dfed614] Test
Status `/tmp/jl_SRnkRi/Manifest.toml`
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [442a2c76] FastGaussQuadrature v0.4.2
  [7685536e] FunctionIntegrator v0.5.1
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [276daf66] SpecialFunctions v0.10.3
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Performing the Airy Ai(x) test, where Ai(x) is integrated on the semi-infinite domain, or an approximation of it, namely [0,100] and the result is compared to the analytical result 1/3.
Running: adaptive_simpsons_rule
  1.301009 seconds (1.37 M allocations: 72.569 MiB, 7.98% gc time)
Running: chebyshev_quadrature with k=1
  2.007873 seconds (2.25 M allocations: 128.879 MiB, 2.35% gc time)
Running: chebyshev_quadrature with k=2
  0.300512 seconds (425.40 k allocations: 24.402 MiB)
Running: chebyshev_quadrature with k=3
  0.366548 seconds (545.34 k allocations: 29.890 MiB, 3.88% gc time)
Running: chebyshev_quadrature with k=4
  0.320179 seconds (488.16 k allocations: 26.434 MiB)
Running: jacobi_quadrature with α=β=1
 46.853893 seconds (39.41 M allocations: 3.139 GiB, 10.45% gc time)
Running: laguerre_quadrature with k=1
  3.293818 seconds (3.33 M allocations: 185.781 MiB, 3.03% gc time)
Running: legendre_quadrature
  0.239687 seconds (215.37 k allocations: 12.390 MiB)
Running: lobatto_quadrature
  0.357552 seconds (344.15 k allocations: 20.618 MiB)
Running: radau_quadrature
  0.460400 seconds (326.45 k allocations: 19.606 MiB, 9.01% gc time)
Running: rectangle_rule_left. Only a rough approximation can be practically achieved using this function.
 82.849407 seconds (100.02 M allocations: 1.491 GiB, 0.25% gc time)
Running: rectangle_rule_midpoint.
  0.145943 seconds (173.78 k allocations: 3.889 MiB)
Running: rectangle_rule_right. Only a rough approximation can be practically achieved using this function.
 82.294344 seconds (100.02 M allocations: 1.491 GiB, 0.27% gc time)
Running: rombergs_method
  0.408145 seconds (753.61 k allocations: 43.371 MiB)
Running: simpsons_rule
  0.031373 seconds (47.41 k allocations: 2.123 MiB)
Running: simpsons38_rule
  0.072902 seconds (113.27 k allocations: 5.982 MiB)
Running: trapezoidal_rule
  0.258953 seconds (1.52 M allocations: 25.802 MiB, 12.20% gc time)
Test Summary: | Pass  Total
Airy Ai(x)    |   17     17
Performing the besselj test, where BesselJ_1(2) is approximated and the result is compared to the value obtained from SpecialFunctions' besselj function.
Running: adaptive_simpsons_rule with ε=1e-7
  0.078853 seconds (32.68 k allocations: 1.945 MiB)
Running: chebyshev_quadrature with k=1
  0.405497 seconds (275.12 k allocations: 13.947 MiB)
Running: chebyshev_quadrature with k=2
  0.149603 seconds (115.76 k allocations: 3.795 MiB)
Running: chebyshev_quadrature with k=3
  0.151527 seconds (105.11 k allocations: 3.641 MiB)
Running: chebyshev_quadrature with k=4
  0.150308 seconds (87.72 k allocations: 3.287 MiB)
Running: jacobi_quadrature with α=β=1
  3.390643 seconds (536.21 k allocations: 163.510 MiB, 6.46% gc time)
Running: legendre_quadrature
  0.151551 seconds (62.38 k allocations: 3.480 MiB)
Running: lobatto_quadrature
  0.021420 seconds (16.82 k allocations: 1.038 MiB)
Running: radau_quadrature
  0.020868 seconds (16.80 k allocations: 1.037 MiB)
Running: rectangle_rule_left
 30.050355 seconds (471.41 M allocations: 7.025 GiB, 3.33% gc time)
Running: rectangle_rule_midpoint
  0.000020 seconds (45 allocations: 1.047 KiB)
Running: rectangle_rule_right
 30.537911 seconds (476.96 M allocations: 7.107 GiB, 3.12% gc time)
Running: rombergs_method
  0.366166 seconds (360.69 k allocations: 20.333 MiB)
Running: simpsons_rule
  0.000077 seconds (85 allocations: 1.672 KiB)
Running: simpsons38_rule
  0.073545 seconds (19.93 k allocations: 1.196 MiB)
Running: trapezoidal_rule
  0.055774 seconds (18.38 k allocations: 1.101 MiB)
Test Summary: | Pass  Total
besselj       |   16     16
Integrating cos^2(x)/(1+cot(x)) from 0 to pi/2 and comparing the results to the analytical result 0.25.
Running: adaptive_simpsons_rule with ε=1e-7
  0.028672 seconds (1.99 k allocations: 53.594 KiB)
Running: chebyshev_quadrature with k=1
  0.093887 seconds (2.40 k allocations: 113.453 KiB)
Running: chebyshev_quadrature with k=2
  0.095826 seconds (2.65 k allocations: 121.469 KiB)
Running: chebyshev_quadrature with k=3
  0.106042 seconds (3.08 k allocations: 133.688 KiB)
Running: chebyshev_quadrature with k=4
  0.111805 seconds (3.08 k allocations: 133.750 KiB)
Running: jacobi_quadrature with α=β=1
  0.316588 seconds (379.01 k allocations: 19.809 MiB)
Running: legendre_quadrature
  0.068924 seconds (1.24 k allocations: 63.609 KiB)
Running: lobatto_quadrature
  0.000134 seconds (67 allocations: 2.844 KiB)
Running: radau_quadrature
  0.000045 seconds (71 allocations: 3.078 KiB)
Running: rectangle_rule_left
  0.000581 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_midpoint
  0.000420 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right
  0.000690 seconds (9 allocations: 496 bytes)
Running: rombergs_method
  0.090587 seconds (1.01 k allocations: 54.109 KiB)
Running: simpsons_rule
  0.000073 seconds (323 allocations: 5.391 KiB)
Running: simpsons38_rule
  0.026911 seconds (923 allocations: 39.281 KiB)
Running: trapezoidal_rule
  0.024286 seconds (44.33 k allocations: 704.859 KiB)
Test Summary: | Pass  Total
coscotint     |   16     16
Integrating cosine from 0 to pi/2 and comparing the result to the analytical result of 1.
Running: adaptive_simpsons_rule
  0.072405 seconds (75.98 k allocations: 4.409 MiB)
Running: chebyshev_quadrature with k=1
  0.353721 seconds (240.48 k allocations: 13.497 MiB, 42.93% gc time)
Running: chebyshev_quadrature with k=2
  0.238107 seconds (295.72 k allocations: 16.586 MiB)
Running: chebyshev_quadrature with k=3
  0.233826 seconds (275.63 k allocations: 14.980 MiB)
Running: chebyshev_quadrature with k=4
  0.204730 seconds (275.67 k allocations: 14.916 MiB)
Running: jacobi_quadrature with α=β=1
  2.574950 seconds (465.88 k allocations: 164.215 MiB, 5.40% gc time)
Running: legendre_quadrature
  0.165782 seconds (193.22 k allocations: 11.115 MiB)
Running: lobatto_quadrature
  0.186846 seconds (204.36 k allocations: 11.818 MiB, 8.01% gc time)
Running: radau_quadrature
  0.199384 seconds (204.36 k allocations: 11.817 MiB)
Running: rectangle_rule_left
  1.251016 seconds (19.80 k allocations: 1.195 MiB)
Running: rectangle_rule_midpoint
  0.026535 seconds (25.98 k allocations: 1.617 MiB)
Running: rectangle_rule_right
  1.180877 seconds (18.30 k allocations: 1.107 MiB)
Running: rombergs_method
  0.131519 seconds (140.08 k allocations: 8.067 MiB)
Running: simpsons_rule
  0.030847 seconds (29.08 k allocations: 1.804 MiB)
Running: simpsons38_rule
  0.036156 seconds (44.73 k allocations: 2.791 MiB)
Running: trapezoidal_rule
  0.026760 seconds (45.24 k allocations: 1.826 MiB)
Test Summary: | Pass  Total
Cosine        |   16     16
Integrating e^(-x^2)/(1+x^2) on the infinite domain [-inf, inf], or failing that on [-100,100], and comparing it to the analytical result exp(1)*pi*erfc(1)
Running: adaptive_simpsons_rule with ε=1e-7
  0.038585 seconds (101.48 k allocations: 3.079 MiB)
Running: chebyshev_quadrature with k=1
  0.247244 seconds (247.58 k allocations: 13.598 MiB, 7.92% gc time)
Running: chebyshev_quadrature with k=2
  0.225139 seconds (303.35 k allocations: 16.617 MiB)
Running: chebyshev_quadrature with k=3
  0.247269 seconds (283.05 k allocations: 15.009 MiB)
Running: chebyshev_quadrature with k=4
  0.242102 seconds (283.09 k allocations: 15.027 MiB, 6.99% gc time)
Running: hermite_quadrature with k=2
 16.027836 seconds (22.14 M allocations: 1.148 GiB, 9.28% gc time)
Running: jacobi_quadrature with α=β=1
  0.529729 seconds (475.91 k allocations: 50.440 MiB, 22.19% gc time)
Running: laguerre_quadrature with k=1 and multiplying the result by 2 (as Laguerre is only on the semi-infinite domain)
  0.245315 seconds (288.63 k allocations: 15.911 MiB)
Running: legendre_quadrature
  0.168579 seconds (200.29 k allocations: 11.466 MiB)
Running: lobatto_quadrature
  0.257701 seconds (225.88 k allocations: 37.636 MiB, 9.39% gc time)
Running: radau_quadrature
  0.218032 seconds (222.47 k allocations: 30.302 MiB)
Running: rectangle_rule_left
  0.029453 seconds (22.96 k allocations: 1.356 MiB)
Running: rectangle_rule_midpoint
  0.029063 seconds (27.93 k allocations: 1.714 MiB)
Running: rectangle_rule_right
  0.047775 seconds (19.52 k allocations: 1.168 MiB, 49.35% gc time)
Running: rombergs_method
  0.147629 seconds (142.90 k allocations: 8.131 MiB)
Running: simpsons_rule
  0.052119 seconds (41.33 k allocations: 2.160 MiB)
Running: simpsons38_rule
  0.053422 seconds (60.12 k allocations: 3.201 MiB)
Running: trapezoidal_rule
  0.039953 seconds (31.62 k allocations: 1.772 MiB)
Test Summary: | Pass  Total
expnx2datan   |   18     18
Integrate exp(-x^2) from minus infinity to positive infinity and comparing the result to the analytical solution, sqrt(pi)
Running: adaptive_simpsons_rule with ε=1e-7
  0.064416 seconds (61.58 k allocations: 2.363 MiB)
Running: chebyshev_quadrature with k=1
  0.281551 seconds (242.71 k allocations: 13.362 MiB)
Running: chebyshev_quadrature with k=2
  0.280982 seconds (298.07 k allocations: 16.326 MiB)
Running: chebyshev_quadrature with k=3
  0.265700 seconds (277.91 k allocations: 14.780 MiB, 16.00% gc time)
Running: chebyshev_quadrature with k=4
  0.296806 seconds (277.94 k allocations: 14.781 MiB)
Running: hermite_quadrature with k=2
  0.172752 seconds (177.91 k allocations: 10.170 MiB)
Running: jacobi_quadrature with α=β=1
 10.266104 seconds (468.48 k allocations: 1.176 GiB, 13.39% gc time)
Running: laguerre_quadrature (results multiplied by 2, as laguerre only integrates over the semi-infinite domain)
  0.229888 seconds (283.49 k allocations: 15.708 MiB)
Running: legendre_quadrature
  0.177607 seconds (195.46 k allocations: 11.231 MiB)
Running: lobatto_quadrature
  0.203003 seconds (216.24 k allocations: 23.339 MiB)
Running: radau_quadrature
  0.203840 seconds (215.38 k allocations: 21.268 MiB)
Running: rectangle_rule_left
  0.028485 seconds (20.51 k allocations: 1.237 MiB)
Running: rectangle_rule_midpoint
  0.046717 seconds (26.71 k allocations: 1.655 MiB, 42.23% gc time)
Running: rectangle_rule_right
  0.024917 seconds (18.28 k allocations: 1.107 MiB)
Running: rombergs_method
  0.114190 seconds (138.37 k allocations: 7.933 MiB)
Running: simpsons_rule
  0.031078 seconds (33.56 k allocations: 1.934 MiB)
Running: simpsons38_rule
  0.039640 seconds (50.64 k allocations: 2.943 MiB)
Running: trapezoidal_rule
  0.028477 seconds (26.29 k allocations: 1.595 MiB)
Test Summary: | Pass  Total
Gaussian      |   18     18
Integrating 1/x from 1 to e and comparing the result to the analytical solution, 1.
Running: adaptive_simpsons_rule with ε=1e-7
  0.034143 seconds (32.54 k allocations: 1.960 MiB)
Running: chebyshev_quadrature with k=1
  0.234932 seconds (241.04 k allocations: 13.656 MiB)
Running: chebyshev_quadrature with k=2
  0.352523 seconds (296.30 k allocations: 16.668 MiB, 6.95% gc time)
Running: chebyshev_quadrature with k=3
  0.319675 seconds (276.23 k allocations: 14.989 MiB)
Running: chebyshev_quadrature with k=4
  0.321541 seconds (276.27 k allocations: 14.901 MiB)
Running: jacobi_quadrature with α=β=1
  2.989350 seconds (466.52 k allocations: 195.255 MiB, 2.67% gc time)
Running: legendre_quadrature
  0.163538 seconds (193.79 k allocations: 11.162 MiB)
Running: lobatto_quadrature
  0.202408 seconds (204.93 k allocations: 11.845 MiB)
Running: radau_quadrature
  0.231849 seconds (204.93 k allocations: 11.928 MiB, 8.96% gc time)
Running: rectangle_rule_left
  0.388337 seconds (20.37 k allocations: 1.224 MiB)
Running: rectangle_rule_midpoint
  0.034125 seconds (26.35 k allocations: 1.637 MiB)
Running: rectangle_rule_right
  0.111361 seconds (18.68 k allocations: 1.127 MiB)
Running: rombergs_method
  0.153766 seconds (151.46 k allocations: 8.820 MiB)
Running: simpsons_rule
  0.032767 seconds (29.83 k allocations: 1.838 MiB)
Running: simpsons38_rule
  0.033633 seconds (45.51 k allocations: 2.825 MiB)
Running: trapezoidal_rule
  0.041873 seconds (46.24 k allocations: 1.863 MiB)
Test Summary: | Pass  Total
1/x           |   16     16
Integrating log(x)/x from 1 to e and comparing the result to the analytical solution of 0.5.
Running: adaptive_simpsons_rule with ε=1e-7
  0.029989 seconds (33.30 k allocations: 1.908 MiB)
Running: chebyshev_quadrature with k=1
  0.185474 seconds (241.61 k allocations: 13.523 MiB)
Running: chebyshev_quadrature with k=2
  0.353895 seconds (296.90 k allocations: 16.578 MiB, 5.96% gc time)
Running: chebyshev_quadrature with k=3
  0.319046 seconds (276.77 k allocations: 14.913 MiB)
Running: chebyshev_quadrature with k=4
  0.318868 seconds (276.81 k allocations: 14.996 MiB)
Running: jacobi_quadrature with α=β=1
  3.214453 seconds (467.18 k allocations: 149.920 MiB, 9.63% gc time)
Running: legendre_quadrature
  0.209921 seconds (194.36 k allocations: 11.223 MiB)
Running: lobatto_quadrature
  0.195213 seconds (205.51 k allocations: 11.882 MiB)
Running: radau_quadrature
  0.201074 seconds (205.50 k allocations: 11.866 MiB)
Running: rectangle_rule_left
  1.369653 seconds (20.64 k allocations: 1.238 MiB)
Running: rectangle_rule_midpoint
  0.025072 seconds (26.34 k allocations: 1.637 MiB)
Running: rectangle_rule_right
  1.191842 seconds (18.65 k allocations: 1.125 MiB)
Running: rombergs_method
  0.141843 seconds (141.38 k allocations: 8.128 MiB)
Running: simpsons_rule
  0.033598 seconds (30.58 k allocations: 1.866 MiB)
Running: simpsons38_rule
  0.040947 seconds (46.26 k allocations: 2.854 MiB)
Running: trapezoidal_rule
  0.031733 seconds (58.50 k allocations: 2.064 MiB)
Test Summary: | Pass  Total
log(x)/x      |   16     16
Approximating the modified bessel function I_1(1) and comparing it to the result obtained by SpecialFunctions.
Running: adaptive_simpsons_rule with ε=1e-7
  0.155617 seconds (153.20 k allocations: 9.100 MiB)
Running: chebyshev_quadrature with k=1
  0.173540 seconds (91.28 k allocations: 3.297 MiB)
Running: chebyshev_quadrature with k=2
  0.144573 seconds (127.05 k allocations: 3.990 MiB)
Running: chebyshev_quadrature with k=3
  0.147336 seconds (115.62 k allocations: 3.819 MiB)
Running: chebyshev_quadrature with k=4
  0.192399 seconds (95.16 k allocations: 3.413 MiB)
Running: jacobi_quadrature with α=β=1
  2.739267 seconds (509.81 k allocations: 169.301 MiB, 4.14% gc time)
Running: legendre_quadrature
  0.121515 seconds (38.38 k allocations: 2.107 MiB)
Running: lobatto_quadrature
  0.000119 seconds (150 allocations: 4.328 KiB)
Running: radau_quadrature
  0.000044 seconds (148 allocations: 4.375 KiB)
Running: rectangle_rule_left
 52.865526 seconds (590.00 M allocations: 8.792 GiB, 3.99% gc time)
Running: rectangle_rule_midpoint
  0.000046 seconds (40 allocations: 992 bytes)
Running: rectangle_rule_right
 51.008493 seconds (592.75 M allocations: 8.833 GiB, 3.98% gc time)
Running: rombergs_method
  0.160832 seconds (41.93 k allocations: 2.260 MiB)
Running: simpsons_rule
  0.000101 seconds (93 allocations: 1.797 KiB)
Running: simpsons38_rule
  0.026506 seconds (463 allocations: 22.578 KiB)
Running: trapezoidal_rule
  0.020798 seconds (179 allocations: 8.766 KiB)
Test Summary: | Pass  Total
modbessel0    |   16     16
Integrating 1/sqrt(-19.6 sin(x)) from -pi to 0 and comparing the result to the analytical solution of ellipk(1/2)/sqrt(2.45) The integrand has singularities at x = -pi and x=0, so for some of these functions the integration domain has to be itself approximated.
Running: adaptive_simpsons_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 35.878568 seconds (629.34 M allocations: 9.388 GiB, 6.00% gc time)
Running: chebyshev_quadrature with k=1
  0.492073 seconds (439.69 k allocations: 24.287 MiB)
Running: chebyshev_quadrature with k=2
 12.892668 seconds (497.10 k allocations: 4.042 GiB, 4.09% gc time)
Running: chebyshev_quadrature with k=3
  6.546804 seconds (290.74 k allocations: 1.644 GiB, 4.42% gc time)
Running: chebyshev_quadrature with k=4
  8.393167 seconds (290.77 k allocations: 2.262 GiB, 2.79% gc time)
Running: jacobi_quadrature with α=β=1. The N value required to get an accurate result is too high to be practical, so only a rough approximation can be arrived at.
 61.211312 seconds (505.41 k allocations: 13.255 GiB, 2.80% gc time)
Running: legendre_quadrature.
  5.217568 seconds (233.16 k allocations: 1.976 GiB, 2.18% gc time)
The following integration functions have to use an approximated domain due to the endpoint singularities.
Running: lobatto_quadrature on [-pi+1e-6, -1e-6]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 65.143423 seconds (8.24 M allocations: 13.384 GiB, 4.26% gc time)
Running: radau_quadrature on [-pi+1e-6, -1e-6]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 61.559098 seconds (7.24 M allocations: 13.369 GiB, 2.74% gc time)
Running: rectangle_rule_left on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  3.349914 seconds (23.40 k allocations: 1.405 MiB)
Running: rectangle_rule_midpoint on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  3.659318 seconds (32.03 k allocations: 1.962 MiB)
Running: rectangle_rule_right on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  3.333415 seconds (23.62 k allocations: 1.416 MiB)
Running: rombergs_method on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  1.460604 seconds (457.29 k allocations: 153.748 MiB)
Running: simpsons_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 43.993222 seconds (600.04 M allocations: 8.943 GiB, 8.86% gc time)
Running: simpsons38_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 42.579446 seconds (600.05 M allocations: 8.944 GiB, 8.13% gc time)
Running: trapezoidal_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 43.224432 seconds (600.04 M allocations: 8.943 GiB, 8.70% gc time)
Test Summary: | Pass  Total
Simppen       |   16     16
Integrating sin(x^2)e^(-x)/x from 0 to infinity, with the approximated domain of integration of 0 to 100. The removable singularity at x=0 in the integrand has been removed.
Running: adaptive_simpsons_rule with ε=1e-8
  0.064406 seconds (182.59 k allocations: 4.522 MiB)
Running: chebyshev_quadrature with k=1
  0.213826 seconds (258.20 k allocations: 14.029 MiB)
Running: chebyshev_quadrature with k=2
  0.224591 seconds (284.36 k allocations: 15.187 MiB)
Running: chebyshev_quadrature with k=3
  0.206700 seconds (260.81 k allocations: 13.467 MiB)
Running: chebyshev_quadrature with k=4
  0.252195 seconds (260.84 k allocations: 13.464 MiB)
Running: jacobi_quadrature with α=β=1
  0.489161 seconds (405.39 k allocations: 35.844 MiB)
Running: laguerre_quadrature with k=2
  0.218143 seconds (188.19 k allocations: 10.885 MiB)
Running: legendre_quadrature
  0.132951 seconds (151.89 k allocations: 8.396 MiB)
Running: lobatto_quadrature
  0.039547 seconds (10.88 k allocations: 15.109 MiB)
Running: radau_quadrature
  0.035483 seconds (9.66 k allocations: 13.183 MiB)
Running: rectangle_rule_left
  0.059482 seconds (19.85 k allocations: 1.172 MiB)
Running: rectangle_rule_midpoint
  0.046570 seconds (26.82 k allocations: 1.642 MiB)
Running: rectangle_rule_right
  0.050069 seconds (18.40 k allocations: 1.096 MiB)
Running: rombergs_method
  0.242020 seconds (170.33 k allocations: 9.713 MiB)
Running: simpsons_rule
  0.001927 seconds (24.72 k allocations: 386.656 KiB)
Running: simpsons38_rule
  0.052631 seconds (81.54 k allocations: 3.524 MiB)
Running: trapezoidal_rule
  0.202493 seconds (2.39 M allocations: 37.759 MiB)
Test Summary: | Pass  Total
sinexpox      |   17     17
Integrating sin(x)/x from 0 to 100 and comparing it to the exact result.
Running: adaptive_simpsons_rule with ε=1e-8
  0.002999 seconds (30.71 k allocations: 480.250 KiB)
Running: chebyshev_quadrature with k=1
  0.135977 seconds (2.58 k allocations: 1.696 MiB)
Running: chebyshev_quadrature with k=2
  0.173414 seconds (2.84 k allocations: 2.359 MiB)
Running: chebyshev_quadrature with k=3
  0.156525 seconds (3.26 k allocations: 2.060 MiB)
Running: chebyshev_quadrature with k=4
  0.152432 seconds (3.26 k allocations: 1.501 MiB)
Running: jacobi_quadrature with α=β=1
  9.299032 seconds (402.18 k allocations: 906.497 MiB, 3.03% gc time)
Running: legendre_quadrature
  0.087488 seconds (1.33 k allocations: 72.281 KiB)
Running: lobatto_quadrature
  0.000194 seconds (253 allocations: 9.188 KiB)
Running: radau_quadrature
  0.001274 seconds (221 allocations: 8.812 KiB)
Running: rectangle_rule_left; only a rough approximation can be practically achieved using this function
  3.927374 seconds (11 allocations: 528 bytes)
Running: rectangle_rule_midpoint
  0.000433 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right; only a rough approximation can be practically achieved using this function
  3.651325 seconds (11 allocations: 528 bytes)
Running: rombergs_method
  0.081643 seconds (1.16 k allocations: 66.734 KiB)
Running: simpsons_rule
  0.000061 seconds (9 allocations: 496 bytes)
Running: simpsons38_rule
  0.000074 seconds (9 allocations: 496 bytes)
Running: trapezoidal_rule
  0.001128 seconds (9 allocations: 496 bytes)
Test Summary: | Pass  Total
sinxx         |   16     16
Integrating (x^3+1)/(x^4 (x+1)(x^2+1)) from 1 to e and comparing the result to the analytical solution of log(sqrt(2)*exp(1)/(sqrt(exp(2)+1)))+1/2*(exp(-2)-1)+1/3*(1-exp(-3))
Running: adaptive_simpsons_rule with ε=1e-8
  0.000755 seconds (6.34 k allocations: 99.453 KiB)
Running: chebyshev_quadrature with k=1
  0.124385 seconds (2.48 k allocations: 576.609 KiB)
Running: chebyshev_quadrature with k=2
  0.130377 seconds (2.73 k allocations: 777.391 KiB)
Running: chebyshev_quadrature with k=3
  0.136455 seconds (3.15 k allocations: 685.641 KiB)
Running: chebyshev_quadrature with k=4
  0.132637 seconds (3.16 k allocations: 516.203 KiB)
Running: jacobi_quadrature with α=β=1
  3.202510 seconds (388.46 k allocations: 253.760 MiB)
Running: legendre_quadrature
  0.102681 seconds (1.28 k allocations: 65.438 KiB)
Running: lobatto_quadrature
  0.000220 seconds (91 allocations: 3.656 KiB)
Running: radau_quadrature
  0.000073 seconds (81 allocations: 3.453 KiB)
Running: rectangle_rule_left; only a rough approximation can be practically achieved using this function.
 12.570980 seconds (11 allocations: 528 bytes)
Running: rectangle_rule_midpoint
  0.001251 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right; only a rough approximation can be practically achieved using this function.
 11.794877 seconds (11 allocations: 528 bytes)
Running: rombergs_method
  0.095346 seconds (1.18 k allocations: 62.562 KiB)
Running: simpsons_rule
  0.000061 seconds (9 allocations: 496 bytes)
Running: simpsons38_rule
  0.000040 seconds (9 allocations: 496 bytes)
Running: trapezoidal_rule
  0.002082 seconds (9 allocations: 496 bytes)
Test Summary: | Pass  Total
partfrac      |   16     16
    Testing FunctionIntegrator tests passed 
