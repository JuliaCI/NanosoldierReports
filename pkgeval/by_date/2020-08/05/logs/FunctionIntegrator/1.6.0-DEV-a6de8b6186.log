Julia Version 1.6.0-DEV.587
Commit a6de8b6186 (2020-08-05 14:09 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed FastGaussQuadrature ────────── v0.4.2
  Installed FunctionIntegrator ─────────── v0.5.1
  Installed SpecialFunctions ───────────── v0.10.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [7685536e] + FunctionIntegrator v0.5.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [442a2c76] + FastGaussQuadrature v0.4.2
  [7685536e] + FunctionIntegrator v0.5.1
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [276daf66] + SpecialFunctions v0.10.3
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing FunctionIntegrator
Status `/tmp/jl_vlGr3q/Project.toml`
  [442a2c76] FastGaussQuadrature v0.4.2
  [7685536e] FunctionIntegrator v0.5.1
  [276daf66] SpecialFunctions v0.10.3
  [8dfed614] Test
Status `/tmp/jl_vlGr3q/Manifest.toml`
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [442a2c76] FastGaussQuadrature v0.4.2
  [7685536e] FunctionIntegrator v0.5.1
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [276daf66] SpecialFunctions v0.10.3
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Performing the Airy Ai(x) test, where Ai(x) is integrated on the semi-infinite domain, or an approximation of it, namely [0,100] and the result is compared to the analytical result 1/3.
Running: adaptive_simpsons_rule
  1.164309 seconds (1.34 M allocations: 71.042 MiB, 10.46% gc time)
Running: chebyshev_quadrature with k=1
  1.815688 seconds (2.25 M allocations: 128.855 MiB, 3.25% gc time)
Running: chebyshev_quadrature with k=2
  0.342551 seconds (425.40 k allocations: 24.418 MiB)
Running: chebyshev_quadrature with k=3
  0.395354 seconds (545.35 k allocations: 29.892 MiB, 6.50% gc time)
Running: chebyshev_quadrature with k=4
  0.268794 seconds (488.16 k allocations: 26.425 MiB)
Running: jacobi_quadrature with α=β=1
 39.613586 seconds (39.41 M allocations: 3.139 GiB, 10.47% gc time)
Running: laguerre_quadrature with k=1
  3.252655 seconds (3.34 M allocations: 185.917 MiB, 2.82% gc time)
Running: legendre_quadrature
  0.246903 seconds (215.43 k allocations: 12.341 MiB)
Running: lobatto_quadrature
  0.361179 seconds (344.24 k allocations: 20.611 MiB)
Running: radau_quadrature
  0.304020 seconds (326.55 k allocations: 19.612 MiB, 13.94% gc time)
Running: rectangle_rule_left. Only a rough approximation can be practically achieved using this function.
 77.566126 seconds (100.02 M allocations: 1.491 GiB, 0.43% gc time)
Running: rectangle_rule_midpoint.
  0.177413 seconds (173.78 k allocations: 3.889 MiB, 16.88% gc time)
Running: rectangle_rule_right. Only a rough approximation can be practically achieved using this function.
 78.128240 seconds (100.02 M allocations: 1.491 GiB, 0.24% gc time)
Running: rombergs_method
  0.509372 seconds (753.85 k allocations: 43.388 MiB, 6.52% gc time)
Running: simpsons_rule
  0.059609 seconds (47.41 k allocations: 2.123 MiB)
Running: simpsons38_rule
  0.100996 seconds (113.38 k allocations: 5.989 MiB)
Running: trapezoidal_rule
  0.308459 seconds (1.52 M allocations: 25.808 MiB, 6.70% gc time)
Test Summary: | Pass  Total
Airy Ai(x)    |   17     17
Performing the besselj test, where BesselJ_1(2) is approximated and the result is compared to the value obtained from SpecialFunctions' besselj function.
Running: adaptive_simpsons_rule with ε=1e-7
  0.100543 seconds (32.69 k allocations: 1.945 MiB)
Running: chebyshev_quadrature with k=1
  0.495293 seconds (275.04 k allocations: 13.943 MiB)
Running: chebyshev_quadrature with k=2
  0.192891 seconds (115.76 k allocations: 3.795 MiB)
Running: chebyshev_quadrature with k=3
  0.183600 seconds (105.11 k allocations: 3.641 MiB)
Running: chebyshev_quadrature with k=4
  0.152953 seconds (87.72 k allocations: 3.287 MiB)
Running: jacobi_quadrature with α=β=1
  1.991397 seconds (536.51 k allocations: 163.516 MiB, 7.44% gc time)
Running: legendre_quadrature
  0.183549 seconds (62.44 k allocations: 3.484 MiB)
Running: lobatto_quadrature
  0.051938 seconds (16.87 k allocations: 1.041 MiB)
Running: radau_quadrature
  0.026246 seconds (16.86 k allocations: 1.041 MiB)
Running: rectangle_rule_left
 28.623599 seconds (471.41 M allocations: 7.025 GiB, 3.41% gc time)
Running: rectangle_rule_midpoint
  0.000056 seconds (45 allocations: 1.047 KiB)
Running: rectangle_rule_right
 27.929268 seconds (476.96 M allocations: 7.107 GiB, 3.66% gc time)
Running: rombergs_method
  0.368942 seconds (360.83 k allocations: 20.342 MiB)
Running: simpsons_rule
  0.000024 seconds (85 allocations: 1.672 KiB)
Running: simpsons38_rule
  0.070616 seconds (19.94 k allocations: 1.196 MiB)
Running: trapezoidal_rule
  0.079564 seconds (18.38 k allocations: 1.101 MiB)
Test Summary: | Pass  Total
besselj       |   16     16
Integrating cos^2(x)/(1+cot(x)) from 0 to pi/2 and comparing the results to the analytical result 0.25.
Running: adaptive_simpsons_rule with ε=1e-7
  0.026431 seconds (1.99 k allocations: 53.594 KiB)
Running: chebyshev_quadrature with k=1
  0.089940 seconds (2.40 k allocations: 113.453 KiB)
Running: chebyshev_quadrature with k=2
  0.096489 seconds (2.65 k allocations: 121.469 KiB)
Running: chebyshev_quadrature with k=3
  0.101870 seconds (3.08 k allocations: 133.688 KiB)
Running: chebyshev_quadrature with k=4
  0.110187 seconds (3.08 k allocations: 133.750 KiB)
Running: jacobi_quadrature with α=β=1
  0.296166 seconds (379.27 k allocations: 19.810 MiB)
Running: legendre_quadrature
  0.058639 seconds (1.24 k allocations: 63.609 KiB)
Running: lobatto_quadrature
  0.000097 seconds (67 allocations: 2.844 KiB)
Running: radau_quadrature
  0.000036 seconds (71 allocations: 3.078 KiB)
Running: rectangle_rule_left
  0.000514 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_midpoint
  0.000369 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right
  0.000506 seconds (9 allocations: 496 bytes)
Running: rombergs_method
  0.066621 seconds (1.01 k allocations: 54.109 KiB)
Running: simpsons_rule
  0.000045 seconds (323 allocations: 5.391 KiB)
Running: simpsons38_rule
  0.023567 seconds (923 allocations: 39.281 KiB)
Running: trapezoidal_rule
  0.020560 seconds (44.33 k allocations: 704.859 KiB)
Test Summary: | Pass  Total
coscotint     |   16     16
Integrating cosine from 0 to pi/2 and comparing the result to the analytical result of 1.
Running: adaptive_simpsons_rule
  0.062096 seconds (75.98 k allocations: 4.408 MiB)
Running: chebyshev_quadrature with k=1
  0.194050 seconds (240.48 k allocations: 13.497 MiB)
Running: chebyshev_quadrature with k=2
  0.366138 seconds (295.72 k allocations: 16.587 MiB, 37.55% gc time)
Running: chebyshev_quadrature with k=3
  0.200641 seconds (275.63 k allocations: 14.992 MiB)
Running: chebyshev_quadrature with k=4
  0.210918 seconds (275.67 k allocations: 14.889 MiB)
Running: jacobi_quadrature with α=β=1
  2.014513 seconds (466.13 k allocations: 164.244 MiB, 9.24% gc time)
Running: legendre_quadrature
  0.163608 seconds (193.22 k allocations: 11.117 MiB)
Running: lobatto_quadrature
  0.183753 seconds (204.45 k allocations: 11.823 MiB)
Running: radau_quadrature
  0.195634 seconds (204.44 k allocations: 11.825 MiB)
Running: rectangle_rule_left
  1.086371 seconds (19.80 k allocations: 1.195 MiB)
Running: rectangle_rule_midpoint
  0.027799 seconds (25.98 k allocations: 1.617 MiB)
Running: rectangle_rule_right
  1.027972 seconds (18.30 k allocations: 1.107 MiB)
Running: rombergs_method
  0.157241 seconds (140.08 k allocations: 8.067 MiB, 17.29% gc time)
Running: simpsons_rule
  0.032413 seconds (29.08 k allocations: 1.805 MiB)
Running: simpsons38_rule
  0.036756 seconds (44.73 k allocations: 2.791 MiB)
Running: trapezoidal_rule
  0.028377 seconds (45.24 k allocations: 1.826 MiB)
Test Summary: | Pass  Total
Cosine        |   16     16
Integrating e^(-x^2)/(1+x^2) on the infinite domain [-inf, inf], or failing that on [-100,100], and comparing it to the analytical result exp(1)*pi*erfc(1)
Running: adaptive_simpsons_rule with ε=1e-7
  0.041649 seconds (101.48 k allocations: 3.079 MiB)
Running: chebyshev_quadrature with k=1
  0.192118 seconds (247.58 k allocations: 13.597 MiB)
Running: chebyshev_quadrature with k=2
  0.229419 seconds (303.35 k allocations: 16.600 MiB, 7.79% gc time)
Running: chebyshev_quadrature with k=3
  0.202287 seconds (283.05 k allocations: 15.016 MiB)
Running: chebyshev_quadrature with k=4
  0.220045 seconds (283.09 k allocations: 15.022 MiB)
Running: hermite_quadrature with k=2
 14.352547 seconds (22.14 M allocations: 1.148 GiB, 8.09% gc time)
Running: jacobi_quadrature with α=β=1
  0.441645 seconds (476.18 k allocations: 50.544 MiB, 9.22% gc time)
Running: laguerre_quadrature with k=1 and multiplying the result by 2 (as Laguerre is only on the semi-infinite domain)
  0.219785 seconds (288.63 k allocations: 15.911 MiB)
Running: legendre_quadrature
  0.182421 seconds (200.29 k allocations: 11.466 MiB, 18.93% gc time)
Running: lobatto_quadrature
  0.205695 seconds (225.96 k allocations: 37.638 MiB)
Running: radau_quadrature
  0.233902 seconds (222.56 k allocations: 30.305 MiB, 10.25% gc time)
Running: rectangle_rule_left
  0.031468 seconds (22.96 k allocations: 1.356 MiB)
Running: rectangle_rule_midpoint
  0.028688 seconds (27.93 k allocations: 1.714 MiB)
Running: rectangle_rule_right
  0.025367 seconds (19.52 k allocations: 1.168 MiB)
Running: rombergs_method
  0.125859 seconds (142.91 k allocations: 8.131 MiB)
Running: simpsons_rule
  0.043086 seconds (41.33 k allocations: 2.160 MiB)
Running: simpsons38_rule
  0.062753 seconds (60.12 k allocations: 3.201 MiB)
Running: trapezoidal_rule
  0.031047 seconds (31.62 k allocations: 1.772 MiB)
Test Summary: | Pass  Total
expnx2datan   |   18     18
Integrate exp(-x^2) from minus infinity to positive infinity and comparing the result to the analytical solution, sqrt(pi)
Running: adaptive_simpsons_rule with ε=1e-7
  0.069453 seconds (61.58 k allocations: 2.363 MiB, 33.63% gc time)
Running: chebyshev_quadrature with k=1
  0.214747 seconds (242.71 k allocations: 13.613 MiB)
Running: chebyshev_quadrature with k=2
  0.235681 seconds (298.07 k allocations: 16.326 MiB)
Running: chebyshev_quadrature with k=3
  0.249989 seconds (277.91 k allocations: 14.796 MiB)
Running: chebyshev_quadrature with k=4
  0.290314 seconds (277.94 k allocations: 14.796 MiB, 16.48% gc time)
Running: hermite_quadrature with k=2
  0.164961 seconds (177.91 k allocations: 10.166 MiB)
Running: jacobi_quadrature with α=β=1
  7.850441 seconds (468.74 k allocations: 1.176 GiB, 15.01% gc time)
Running: laguerre_quadrature (results multiplied by 2, as laguerre only integrates over the semi-infinite domain)
  0.208061 seconds (283.49 k allocations: 15.706 MiB)
Running: legendre_quadrature
  0.172857 seconds (195.46 k allocations: 11.231 MiB)
Running: lobatto_quadrature
  0.201253 seconds (216.32 k allocations: 23.344 MiB)
Running: radau_quadrature
  0.227473 seconds (215.47 k allocations: 21.273 MiB, 9.87% gc time)
Running: rectangle_rule_left
  0.027438 seconds (20.51 k allocations: 1.237 MiB)
Running: rectangle_rule_midpoint
  0.028257 seconds (26.71 k allocations: 1.655 MiB)
Running: rectangle_rule_right
  0.025611 seconds (18.28 k allocations: 1.107 MiB)
Running: rombergs_method
  0.124221 seconds (138.37 k allocations: 7.933 MiB)
Running: simpsons_rule
  0.033872 seconds (33.56 k allocations: 1.934 MiB)
Running: simpsons38_rule
  0.040718 seconds (50.64 k allocations: 2.943 MiB)
Running: trapezoidal_rule
  0.029387 seconds (26.29 k allocations: 1.595 MiB)
Test Summary: | Pass  Total
Gaussian      |   18     18
Integrating 1/x from 1 to e and comparing the result to the analytical solution, 1.
Running: adaptive_simpsons_rule with ε=1e-7
  0.035427 seconds (32.54 k allocations: 1.960 MiB)
Running: chebyshev_quadrature with k=1
  0.267636 seconds (241.04 k allocations: 13.578 MiB, 7.11% gc time)
Running: chebyshev_quadrature with k=2
  0.223908 seconds (296.30 k allocations: 16.664 MiB)
Running: chebyshev_quadrature with k=3
  0.217095 seconds (276.23 k allocations: 14.992 MiB)
Running: chebyshev_quadrature with k=4
  0.238004 seconds (276.27 k allocations: 14.823 MiB, 7.48% gc time)
Running: jacobi_quadrature with α=β=1
  2.926892 seconds (466.78 k allocations: 195.265 MiB, 6.18% gc time)
Running: legendre_quadrature
  0.173751 seconds (193.79 k allocations: 11.144 MiB, 9.81% gc time)
Running: lobatto_quadrature
  0.192513 seconds (205.01 k allocations: 11.866 MiB)
Running: radau_quadrature
  0.196983 seconds (205.01 k allocations: 11.857 MiB)
Running: rectangle_rule_left
  0.301378 seconds (20.37 k allocations: 1.224 MiB)
Running: rectangle_rule_midpoint
  0.028237 seconds (26.35 k allocations: 1.637 MiB)
Running: rectangle_rule_right
  0.115015 seconds (18.68 k allocations: 1.127 MiB)
Running: rombergs_method
  0.154240 seconds (151.46 k allocations: 8.820 MiB)
Running: simpsons_rule
  0.037649 seconds (29.83 k allocations: 1.838 MiB)
Running: simpsons38_rule
  0.051833 seconds (45.51 k allocations: 2.825 MiB)
Running: trapezoidal_rule
  0.051475 seconds (46.24 k allocations: 1.863 MiB, 36.17% gc time)
Test Summary: | Pass  Total
1/x           |   16     16
Integrating log(x)/x from 1 to e and comparing the result to the analytical solution of 0.5.
Running: adaptive_simpsons_rule with ε=1e-7
  0.037538 seconds (33.30 k allocations: 1.909 MiB)
Running: chebyshev_quadrature with k=1
  0.209222 seconds (241.61 k allocations: 13.585 MiB)
Running: chebyshev_quadrature with k=2
  0.249972 seconds (296.91 k allocations: 16.615 MiB)
Running: chebyshev_quadrature with k=3
  0.245320 seconds (276.77 k allocations: 14.912 MiB, 8.33% gc time)
Running: chebyshev_quadrature with k=4
  0.208759 seconds (276.81 k allocations: 14.992 MiB)
Running: jacobi_quadrature with α=β=1
  2.252448 seconds (467.44 k allocations: 149.937 MiB, 4.33% gc time)
Running: legendre_quadrature
  0.166513 seconds (194.36 k allocations: 11.161 MiB, 9.20% gc time)
Running: lobatto_quadrature
  0.171615 seconds (205.59 k allocations: 11.870 MiB)
Running: radau_quadrature
  0.180526 seconds (205.58 k allocations: 11.873 MiB)
Running: rectangle_rule_left
  1.147239 seconds (20.64 k allocations: 1.238 MiB)
Running: rectangle_rule_midpoint
  0.033047 seconds (26.34 k allocations: 1.637 MiB)
Running: rectangle_rule_right
  1.130285 seconds (18.65 k allocations: 1.125 MiB)
Running: rombergs_method
  0.162224 seconds (141.39 k allocations: 8.160 MiB)
Running: simpsons_rule
  0.037705 seconds (30.58 k allocations: 1.866 MiB)
Running: simpsons38_rule
  0.091144 seconds (46.26 k allocations: 2.854 MiB, 55.52% gc time)
Running: trapezoidal_rule
  0.030730 seconds (58.50 k allocations: 2.064 MiB)
Test Summary: | Pass  Total
log(x)/x      |   16     16
Approximating the modified bessel function I_1(1) and comparing it to the result obtained by SpecialFunctions.
Running: adaptive_simpsons_rule with ε=1e-7
  0.190382 seconds (153.18 k allocations: 9.099 MiB, 17.52% gc time)
Running: chebyshev_quadrature with k=1
  0.139151 seconds (91.28 k allocations: 3.297 MiB)
Running: chebyshev_quadrature with k=2
  0.150547 seconds (127.05 k allocations: 3.990 MiB)
Running: chebyshev_quadrature with k=3
  0.170900 seconds (115.62 k allocations: 3.819 MiB)
Running: chebyshev_quadrature with k=4
  0.172917 seconds (95.16 k allocations: 3.413 MiB)
Running: jacobi_quadrature with α=β=1
  1.311442 seconds (510.05 k allocations: 169.323 MiB, 7.35% gc time)
Running: legendre_quadrature
  0.151873 seconds (38.38 k allocations: 2.107 MiB)
Running: lobatto_quadrature
  0.000124 seconds (150 allocations: 4.328 KiB)
Running: radau_quadrature
  0.000050 seconds (148 allocations: 4.375 KiB)
Running: rectangle_rule_left
 46.511939 seconds (590.00 M allocations: 8.792 GiB, 3.49% gc time)
Running: rectangle_rule_midpoint
  0.000089 seconds (40 allocations: 992 bytes)
Running: rectangle_rule_right
 46.846392 seconds (592.75 M allocations: 8.833 GiB, 3.29% gc time)
Running: rombergs_method
  0.128140 seconds (41.93 k allocations: 2.260 MiB)
Running: simpsons_rule
  0.000098 seconds (93 allocations: 1.797 KiB)
Running: simpsons38_rule
  0.031435 seconds (463 allocations: 22.578 KiB)
Running: trapezoidal_rule
  0.024531 seconds (179 allocations: 8.766 KiB)
Test Summary: | Pass  Total
modbessel0    |   16     16
Integrating 1/sqrt(-19.6 sin(x)) from -pi to 0 and comparing the result to the analytical solution of ellipk(1/2)/sqrt(2.45) The integrand has singularities at x = -pi and x=0, so for some of these functions the integration domain has to be itself approximated.
Running: adaptive_simpsons_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 33.189889 seconds (629.34 M allocations: 9.388 GiB, 4.98% gc time)
Running: chebyshev_quadrature with k=1
  0.511277 seconds (439.75 k allocations: 24.290 MiB, 5.73% gc time)
Running: chebyshev_quadrature with k=2
 13.584470 seconds (497.16 k allocations: 4.042 GiB, 4.45% gc time)
Running: chebyshev_quadrature with k=3
  6.489463 seconds (290.74 k allocations: 1.643 GiB, 4.61% gc time)
Running: chebyshev_quadrature with k=4
  7.814478 seconds (290.77 k allocations: 2.262 GiB, 2.59% gc time)
Running: jacobi_quadrature with α=β=1. The N value required to get an accurate result is too high to be practical, so only a rough approximation can be arrived at.
 50.460454 seconds (505.73 k allocations: 13.255 GiB, 3.61% gc time)
Running: legendre_quadrature.
  6.303529 seconds (233.22 k allocations: 1.976 GiB, 2.71% gc time)
The following integration functions have to use an approximated domain due to the endpoint singularities.
Running: lobatto_quadrature on [-pi+1e-6, -1e-6]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 46.678306 seconds (8.24 M allocations: 13.384 GiB, 5.43% gc time)
Running: radau_quadrature on [-pi+1e-6, -1e-6]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 42.334285 seconds (7.24 M allocations: 13.369 GiB, 3.47% gc time)
Running: rectangle_rule_left on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  2.979034 seconds (23.40 k allocations: 1.405 MiB)
Running: rectangle_rule_midpoint on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  2.927089 seconds (32.03 k allocations: 1.962 MiB)
Running: rectangle_rule_right on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  2.479097 seconds (23.62 k allocations: 1.416 MiB)
Running: rombergs_method on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  1.010598 seconds (457.34 k allocations: 153.735 MiB)
Running: simpsons_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 39.175859 seconds (600.04 M allocations: 8.943 GiB, 8.67% gc time)
Running: simpsons38_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 39.346010 seconds (600.05 M allocations: 8.944 GiB, 8.11% gc time)
Running: trapezoidal_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 41.340968 seconds (600.04 M allocations: 8.943 GiB, 8.53% gc time)
Test Summary: | Pass  Total
Simppen       |   16     16
Integrating sin(x^2)e^(-x)/x from 0 to infinity, with the approximated domain of integration of 0 to 100. The removable singularity at x=0 in the integrand has been removed.
Running: adaptive_simpsons_rule with ε=1e-8
  0.068039 seconds (182.59 k allocations: 4.521 MiB)
Running: chebyshev_quadrature with k=1
  0.230355 seconds (258.20 k allocations: 14.029 MiB)
Running: chebyshev_quadrature with k=2
  0.269178 seconds (284.36 k allocations: 15.189 MiB)
Running: chebyshev_quadrature with k=3
  0.294783 seconds (260.81 k allocations: 13.465 MiB)
Running: chebyshev_quadrature with k=4
  0.293483 seconds (260.84 k allocations: 13.461 MiB)
Running: jacobi_quadrature with α=β=1
  0.543768 seconds (405.65 k allocations: 35.875 MiB)
Running: laguerre_quadrature with k=2
  0.226013 seconds (188.19 k allocations: 10.881 MiB)
Running: legendre_quadrature
  0.134424 seconds (151.89 k allocations: 8.414 MiB)
Running: lobatto_quadrature
  0.034791 seconds (10.88 k allocations: 15.109 MiB)
Running: radau_quadrature
  0.033885 seconds (9.66 k allocations: 13.183 MiB)
Running: rectangle_rule_left
  0.058110 seconds (19.85 k allocations: 1.172 MiB)
Running: rectangle_rule_midpoint
  0.051807 seconds (26.82 k allocations: 1.642 MiB)
Running: rectangle_rule_right
  0.053003 seconds (18.40 k allocations: 1.096 MiB)
Running: rombergs_method
  0.254589 seconds (170.19 k allocations: 9.687 MiB)
Running: simpsons_rule
  0.002004 seconds (24.72 k allocations: 386.656 KiB)
Running: simpsons38_rule
  0.057448 seconds (81.54 k allocations: 3.524 MiB)
Running: trapezoidal_rule
  0.183917 seconds (2.39 M allocations: 37.759 MiB)
Test Summary: | Pass  Total
sinexpox      |   17     17
Integrating sin(x)/x from 0 to 100 and comparing it to the exact result.
Running: adaptive_simpsons_rule with ε=1e-8
  0.002182 seconds (30.71 k allocations: 480.250 KiB)
Running: chebyshev_quadrature with k=1
  0.109061 seconds (2.58 k allocations: 1.696 MiB)
Running: chebyshev_quadrature with k=2
  0.110196 seconds (2.84 k allocations: 2.359 MiB)
Running: chebyshev_quadrature with k=3
  0.117864 seconds (3.26 k allocations: 2.060 MiB)
Running: chebyshev_quadrature with k=4
  0.115933 seconds (3.26 k allocations: 1.501 MiB)
Running: jacobi_quadrature with α=β=1
  5.926714 seconds (402.44 k allocations: 906.578 MiB, 4.76% gc time)
Running: legendre_quadrature
  0.076122 seconds (1.33 k allocations: 72.281 KiB)
Running: lobatto_quadrature
  0.000203 seconds (253 allocations: 9.188 KiB)
Running: radau_quadrature
  0.000139 seconds (221 allocations: 8.812 KiB)
Running: rectangle_rule_left; only a rough approximation can be practically achieved using this function
  3.365874 seconds (11 allocations: 528 bytes)
Running: rectangle_rule_midpoint
  0.000430 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right; only a rough approximation can be practically achieved using this function
  3.396083 seconds (11 allocations: 528 bytes)
Running: rombergs_method
  0.065666 seconds (1.16 k allocations: 66.734 KiB)
Running: simpsons_rule
  0.000045 seconds (9 allocations: 496 bytes)
Running: simpsons38_rule
  0.000046 seconds (9 allocations: 496 bytes)
Running: trapezoidal_rule
  0.000826 seconds (9 allocations: 496 bytes)
Test Summary: | Pass  Total
sinxx         |   16     16
Integrating (x^3+1)/(x^4 (x+1)(x^2+1)) from 1 to e and comparing the result to the analytical solution of log(sqrt(2)*exp(1)/(sqrt(exp(2)+1)))+1/2*(exp(-2)-1)+1/3*(1-exp(-3))
Running: adaptive_simpsons_rule with ε=1e-8
  0.001061 seconds (6.34 k allocations: 99.453 KiB)
Running: chebyshev_quadrature with k=1
  0.115460 seconds (2.48 k allocations: 576.609 KiB)
Running: chebyshev_quadrature with k=2
  0.103054 seconds (2.73 k allocations: 777.391 KiB)
Running: chebyshev_quadrature with k=3
  0.112195 seconds (3.15 k allocations: 685.641 KiB)
Running: chebyshev_quadrature with k=4
  0.116956 seconds (3.16 k allocations: 516.203 KiB)
Running: jacobi_quadrature with α=β=1
  1.511316 seconds (388.71 k allocations: 253.821 MiB)
Running: legendre_quadrature
  0.092330 seconds (1.28 k allocations: 65.438 KiB)
Running: lobatto_quadrature
  0.000120 seconds (91 allocations: 3.656 KiB)
Running: radau_quadrature
  0.000035 seconds (81 allocations: 3.453 KiB)
Running: rectangle_rule_left; only a rough approximation can be practically achieved using this function.
 11.633851 seconds (11 allocations: 528 bytes)
Running: rectangle_rule_midpoint
  0.001012 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right; only a rough approximation can be practically achieved using this function.
 10.572276 seconds (11 allocations: 528 bytes)
Running: rombergs_method
  0.073373 seconds (1.18 k allocations: 62.562 KiB)
Running: simpsons_rule
  0.000049 seconds (9 allocations: 496 bytes)
Running: simpsons38_rule
  0.000042 seconds (9 allocations: 496 bytes)
Running: trapezoidal_rule
  0.001689 seconds (9 allocations: 496 bytes)
Test Summary: | Pass  Total
partfrac      |   16     16
    Testing FunctionIntegrator tests passed 
