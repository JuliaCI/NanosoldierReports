Julia Version 1.6.0-DEV.770
Commit 2fc3dcdaec (2020-08-29 22:59 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.3
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_WOGWle/Project.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_WOGWle/Manifest.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.2170951542200924
curgen: 20 fitness: 0.21718982082075786
curgen: 30 fitness: 0.21718982082075786
curgen: 40 fitness: 0.2172334090819001
curgen: 50 fitness: 0.2172334090819001
CoordinateCreature{Vector{Float64}}([0.22261852094965867], -0.2172334090819001) 0.22261852094965867 -0.2172334090819001
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.257704328954595
curgen: 100 fitness: 3.257935186547085
curgen: 150 fitness: 3.2581053489897047
curgen: 200 fitness: 3.2582231429611928
curgen: 250 fitness: 3.258285901170344
curgen: 300 fitness: 3.2583215917484467
curgen: 350 fitness: 3.258382444599328
curgen: 400 fitness: 3.2584460980960808
curgen: 450 fitness: 3.2584460980960808
curgen: 500 fitness: 3.2584461628116888
CoordinateCreature{Vector{Float64}}([0.22281709345088802, 0.22247173147904864, -0.22258034705901433, -0.22200376646676898, 0.2227489146355671, 0.22274303939729345, 0.22240430541203518, 0.22308501348308898, 0.22321549713646333, 0.22239875062047293, 0.22263068747747408, -0.22251943402985722, 0.2227772071046429, -0.22240288652302181, -0.22247012810428676], -3.2584461628116888) [0.22281709345088802, 0.22247173147904864, -0.22258034705901433, -0.22200376646676898, 0.2227489146355671, 0.22274303939729345, 0.22240430541203518, 0.22308501348308898, 0.22321549713646333, 0.22239875062047293, 0.22263068747747408, -0.22251943402985722, 0.2227772071046429, -0.22240288652302181, -0.22247012810428676] -3.2584461628116888
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.003752701671885461
curgen: 100 fitness: -0.0026055164161959965
curgen: 150 fitness: -0.0026055164161959965
curgen: 200 fitness: -0.0015388143689563094
curgen: 250 fitness: -0.0015388143689563094
curgen: 300 fitness: -0.0015388143689563094
curgen: 350 fitness: -0.0009890080687284808
curgen: 400 fitness: -0.0009804490692317813
curgen: 450 fitness: -0.0007904632485917773
curgen: 500 fitness: -0.0007904632485917773
CoordinateCreature{Vector{Float64}}([0.00022800052634354146, -0.00019127819643742424, 0.00016665362595618777, 0.00018701107721648077, 0.00026299513682903554, -6.856823153008934e-6, -4.236552052094936e-5, -0.00024942274121578126, -0.0001686020272631581, 0.001326115324003392, -0.00130349102562125, 0.0002931537102917048, -0.0003220447771114191, 1.4476844386544113e-5, -0.00015450343016087898], 0.0007904632485917773) [0.00022800052634354146, -0.00019127819643742424, 0.00016665362595618777, 0.00018701107721648077, 0.00026299513682903554, -6.856823153008934e-6, -4.236552052094936e-5, -0.00024942274121578126, -0.0001686020272631581, 0.001326115324003392, -0.00130349102562125, 0.0002931537102917048, -0.0003220447771114191, 1.4476844386544113e-5, -0.00015450343016087898] 0.0007904632485917773
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
