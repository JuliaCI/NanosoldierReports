Julia Version 1.6.0-DEV.769
Commit b630cd65bf (2020-08-29 22:59 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed MbedTLS_jll ────────────────── v2.16.6+1
  Installed IniFile ────────────────────── v0.5.0
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed JSONSchema ─────────────────── v0.3.2
  Installed Parsers ────────────────────── v1.0.10
  Installed BenchmarkTools ─────────────── v0.5.0
  Installed DataStructures ─────────────── v0.17.20
  Installed StochasticPrograms ─────────── v0.4.1
  Installed NaNMath ────────────────────── v0.3.4
  Installed FillArrays ─────────────────── v0.9.5
  Installed Reexport ───────────────────── v0.2.0
  Installed Bzip2_jll ──────────────────── v1.0.6+4
  Installed MacroTools ─────────────────── v0.5.5
  Installed HTTP ───────────────────────── v0.8.17
  Installed ForwardDiff ────────────────── v0.10.12
  Installed Clustering ─────────────────── v0.13.4
  Installed Missings ───────────────────── v0.4.4
  Installed MbedTLS ────────────────────── v1.0.2
  Installed CommonSubexpressions ───────── v0.3.0
  Installed StatsFuns ──────────────────── v0.9.5
  Installed DataAPI ────────────────────── v1.3.0
  Installed TranscodingStreams ─────────── v0.9.5
  Installed UnPack ─────────────────────── v1.0.2
  Installed MutableArithmetics ─────────── v0.2.10
  Installed SpecialFunctions ───────────── v0.10.3
  Installed JSON ───────────────────────── v0.21.0
  Installed DiffRules ──────────────────── v1.0.1
  Installed PDMats ─────────────────────── v0.10.0
  Installed DiffResults ────────────────── v1.0.2
  Installed NearestNeighbors ───────────── v0.4.6
  Installed Distances ──────────────────── v0.9.0
  Installed CodecZlib ──────────────────── v0.7.0
  Installed Rmath ──────────────────────── v0.6.1
  Installed Parameters ─────────────────── v0.12.1
  Installed Calculus ───────────────────── v0.5.1
  Installed ZipFile ────────────────────── v0.9.2
  Installed QuadGK ─────────────────────── v2.4.1
  Installed OrderedCollections ─────────── v1.3.0
  Installed CodecBzip2 ─────────────────── v0.7.2
  Installed Compat ─────────────────────── v3.15.0
  Installed Distributions ──────────────── v0.23.10
  Installed SortingAlgorithms ──────────── v0.3.1
  Installed Rmath_jll ──────────────────── v0.2.2+1
  Installed ProgressMeter ──────────────── v1.3.2
  Installed Zlib_jll ───────────────────── v1.2.11+16
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed StatsBase ──────────────────── v0.33.1
  Installed StaticArrays ───────────────── v0.12.4
  Installed JuMP ───────────────────────── v0.21.3
  Installed MathOptInterface ───────────── v0.9.14
Updating `~/.julia/environments/v1.6/Project.toml`
  [8b8459f2] + StochasticPrograms v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [6e4b80f9] + BenchmarkTools v0.5.0
  [6e34b625] + Bzip2_jll v1.0.6+4
  [49dc2e85] + Calculus v0.5.1
  [aaaa29a8] + Clustering v0.13.4
  [523fee87] + CodecBzip2 v0.7.2
  [944b1d66] + CodecZlib v0.7.0
  [bbf7d656] + CommonSubexpressions v0.3.0
  [34da2185] + Compat v3.15.0
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [9a962f9c] + DataAPI v1.3.0
  [864edb3b] + DataStructures v0.17.20
  [163ba53b] + DiffResults v1.0.2
  [b552c78f] + DiffRules v1.0.1
  [b4f34e82] + Distances v0.9.0
  [31c24e10] + Distributions v0.23.10
  [1a297f60] + FillArrays v0.9.5
  [f6369f11] + ForwardDiff v0.10.12
  [cd3eb016] + HTTP v0.8.17
  [83e8ac13] + IniFile v0.5.0
  [682c06a0] + JSON v0.21.0
  [7d188eb4] + JSONSchema v0.3.2
  [4076af6c] + JuMP v0.21.3
  [1914dd2f] + MacroTools v0.5.5
  [b8f27783] + MathOptInterface v0.9.14
  [739be429] + MbedTLS v1.0.2
  [c8ffd9c3] + MbedTLS_jll v2.16.6+1
  [e1d29d7a] + Missings v0.4.4
  [d8a4904e] + MutableArithmetics v0.2.10
  [77ba4419] + NaNMath v0.3.4
  [b8a86587] + NearestNeighbors v0.4.6
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [bac558e1] + OrderedCollections v1.3.0
  [90014a1f] + PDMats v0.10.0
  [d96e819e] + Parameters v0.12.1
  [69de0a69] + Parsers v1.0.10
  [92933f4c] + ProgressMeter v1.3.2
  [1fd47b50] + QuadGK v2.4.1
  [189a3867] + Reexport v0.2.0
  [79098fc4] + Rmath v0.6.1
  [f50d1b31] + Rmath_jll v0.2.2+1
  [a2af1166] + SortingAlgorithms v0.3.1
  [276daf66] + SpecialFunctions v0.10.3
  [90137ffa] + StaticArrays v0.12.4
  [2913bbd2] + StatsBase v0.33.1
  [4c63d2b9] + StatsFuns v0.9.5
  [8b8459f2] + StochasticPrograms v0.4.1
  [3bb67fe8] + TranscodingStreams v0.9.5
  [3a884ed6] + UnPack v1.0.2
  [a5390f91] + ZipFile v0.9.2
  [83775a58] + Zlib_jll v1.2.11+16
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [4607b0f0] + SuiteSparse
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing StochasticPrograms
Status `/tmp/jl_Mm8tta/Project.toml`
  [aaaa29a8] Clustering v0.13.4
  [34da2185] Compat v3.15.0
  [31c24e10] Distributions v0.23.10
  [60bf3e95] GLPK v0.13.0
  [4076af6c] JuMP v0.21.3
  [1914dd2f] MacroTools v0.5.5
  [b8f27783] MathOptInterface v0.9.14
  [d8a4904e] MutableArithmetics v0.2.10
  [bac558e1] OrderedCollections v1.3.0
  [d96e819e] Parameters v0.12.1
  [92933f4c] ProgressMeter v1.3.2
  [189a3867] Reexport v0.2.0
  [8b8459f2] StochasticPrograms v0.4.1
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [de0858da] Printf
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_Mm8tta/Manifest.toml`
  [6e4b80f9] BenchmarkTools v0.5.0
  [b99e7846] BinaryProvider v0.5.10
  [6e34b625] Bzip2_jll v1.0.6+4
  [49dc2e85] Calculus v0.5.1
  [aaaa29a8] Clustering v0.13.4
  [523fee87] CodecBzip2 v0.7.2
  [944b1d66] CodecZlib v0.7.0
  [bbf7d656] CommonSubexpressions v0.3.0
  [34da2185] Compat v3.15.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [9a962f9c] DataAPI v1.3.0
  [864edb3b] DataStructures v0.17.20
  [163ba53b] DiffResults v1.0.2
  [b552c78f] DiffRules v1.0.1
  [b4f34e82] Distances v0.9.0
  [31c24e10] Distributions v0.23.10
  [1a297f60] FillArrays v0.9.5
  [f6369f11] ForwardDiff v0.10.12
  [60bf3e95] GLPK v0.13.0
  [e8aa6df9] GLPK_jll v4.64.0+0
  [781609d7] GMP_jll v6.2.0+1
  [cd3eb016] HTTP v0.8.17
  [83e8ac13] IniFile v0.5.0
  [682c06a0] JSON v0.21.0
  [7d188eb4] JSONSchema v0.3.2
  [4076af6c] JuMP v0.21.3
  [1914dd2f] MacroTools v0.5.5
  [b8f27783] MathOptInterface v0.9.14
  [739be429] MbedTLS v1.0.2
  [c8ffd9c3] MbedTLS_jll v2.16.6+1
  [e1d29d7a] Missings v0.4.4
  [d8a4904e] MutableArithmetics v0.2.10
  [77ba4419] NaNMath v0.3.4
  [b8a86587] NearestNeighbors v0.4.6
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [bac558e1] OrderedCollections v1.3.0
  [90014a1f] PDMats v0.10.0
  [d96e819e] Parameters v0.12.1
  [69de0a69] Parsers v1.0.10
  [92933f4c] ProgressMeter v1.3.2
  [1fd47b50] QuadGK v2.4.1
  [189a3867] Reexport v0.2.0
  [79098fc4] Rmath v0.6.1
  [f50d1b31] Rmath_jll v0.2.2+1
  [a2af1166] SortingAlgorithms v0.3.1
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.4
  [2913bbd2] StatsBase v0.33.1
  [4c63d2b9] StatsFuns v0.9.5
  [8b8459f2] StochasticPrograms v0.4.1
  [3bb67fe8] TranscodingStreams v0.9.5
  [3a884ed6] UnPack v1.0.2
  [a5390f91] ZipFile v0.9.2
  [83775a58] Zlib_jll v1.2.11+16
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [4607b0f0] SuiteSparse
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
[ Info: Loading test problems...
[ Info: Loading simple...
[ Info: Loading instant simple...
[ Info: Loading infeasible...
[ Info: Loading farmer...
[ Info: Loading sampler...
[ Info: Test problems loaded. Starting test sequence.
[ Info: Running functionality tests...
WARNING: both Distributions and JuMP export "mode"; uses of it in module StochasticPrograms must be qualified
WARNING: both Distributions and JuMP export "shape"; uses of it in module StochasticPrograms must be qualified
Test Summary:                      | Pass  Total
Stochastic Programs: Functionality |   84     84
[ Info: Running L-shaped tests...
[ Info: Running progressive-hedging tests...
Test Summary:      | Pass  Total
Structured Solvers |  344    344
[ Info: Starting distributed tests...
[36m[1m[ [22m[39m[36m[1mInfo: [22m[39mLoading test problems...
[36m[1m[ [22m[39m[36m[1mInfo: [22m[39mLoading simple...
[36m[1m[ [22m[39m[36m[1mInfo: [22m[39mLoading instant simple...
[36m[1m[ [22m[39m[36m[1mInfo: [22m[39mLoading infeasible...
[36m[1m[ [22m[39m[36m[1mInfo: [22m[39mLoading farmer...
[36m[1m[ [22m[39m[36m[1mInfo: [22m[39mLoading sampler...
[36m[1m[ [22m[39m[36m[1mInfo: [22m[39mTest problems loaded. Starting test sequence.
[36m[1m[ [22m[39m[36m[1mInfo: [22m[39mRunning functionality tests...
WARNING: both Distributions and JuMP export "mode"; uses of it in module StochasticPrograms must be qualified
WARNING: both Distributions and JuMP export "shape"; uses of it in module StochasticPrograms must be qualified
[37m[1mTest Summary:                   | [22m[39m[32m[1mPass  [22m[39m[36m[1mTotal[22m[39m
Distributed Stochastic Programs | [32m 102  [39m[36m  102[39m
[36m[1m[ [22m[39m[36m[1mInfo: [22m[39mRunning L-shaped tests...
[37mAsynchronous L-shaped using level sets with dynamic aggregation ruled by uniform selection: Farmer: [39m[91m[1mTest Failed[22m[39m at [39m[1m/home/pkgeval/.julia/packages/StochasticPrograms/g8Qnj/test/distributed/dsolver_tests.jl:49[22m
  Expression: isapprox(objective_value(sp), res.VRP, rtol = tol)
   Evaluated: isapprox(-108095.00000000001, -108390.0; rtol = 1.0e-5)
Stacktrace:
 [1] top-level scope
[90m   @ [39m[90m~/.julia/packages/StochasticPrograms/g8Qnj/test/distributed/[39m[90;4mdsolver_tests.jl:49[0m
 [2] top-level scope
[90m   @ [39m[90m/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/[39m[90;4mTest.jl:1114[0m
 [3] top-level scope
[90m   @ [39m[90m~/.julia/packages/StochasticPrograms/g8Qnj/test/distributed/[39m[90;4mdsolver_tests.jl:37[0m
 [4] top-level scope
[90m   @ [39m[90m/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/[39m[90;4mTest.jl:1114[0m
 [5] top-level scope
[90m   @ [39m[90m~/.julia/packages/StochasticPrograms/g8Qnj/test/distributed/[39m[90;4mdsolver_tests.jl:24[0m
 [6] top-level scope
[90m   @ [39m[90m/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/[39m[90;4mTest.jl:1114[0m
 [7] top-level scope
[90m   @ [39m[90m~/.julia/packages/StochasticPrograms/g8Qnj/test/distributed/[39m[90;4mdsolver_tests.jl:23[0m
 [8] top-level scope
[90m   @ [39m[90m/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/[39m[90;4mTest.jl:1114[0m
 [9] top-level scope
[90m   @ [39m[90m~/.julia/packages/StochasticPrograms/g8Qnj/test/distributed/[39m[90;4mdsolver_tests.jl:21[0m
[37mAsynchronous L-shaped using level sets with dynamic aggregation ruled by uniform selection: Farmer: [39m[91m[1mTest Failed[22m[39m at [39m[1m/home/pkgeval/.julia/packages/StochasticPrograms/g8Qnj/test/distributed/dsolver_tests.jl:50[22m
  Expression: isapprox(optimal_decision(sp), res.x̄, rtol = sqrt(tol))
   Evaluated: isapprox([157.1739130434786, 80.0, 262.82608695652146], [170.0, 80.0, 250.0]; rtol = 0.0031622776601683794)
Stacktrace:
 [1] top-level scope
[90m   @ [39m[90m~/.julia/packages/StochasticPrograms/g8Qnj/test/distributed/[39m[90;4mdsolver_tests.jl:50[0m
 [2] top-level scope
[90m   @ [39m[90m/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/[39m[90;4mTest.jl:1114[0m
 [3] top-level scope
[90m   @ [39m[90m~/.julia/packages/StochasticPrograms/g8Qnj/test/distributed/[39m[90;4mdsolver_tests.jl:37[0m
 [4] top-level scope
[90m   @ [39m[90m/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/[39m[90;4mTest.jl:1114[0m
 [5] top-level scope
[90m   @ [39m[90m~/.julia/packages/StochasticPrograms/g8Qnj/test/distributed/[39m[90;4mdsolver_tests.jl:24[0m
 [6] top-level scope
[90m   @ [39m[90m/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/[39m[90;4mTest.jl:1114[0m
 [7] top-level scope
[90m   @ [39m[90m~/.julia/packages/StochasticPrograms/g8Qnj/test/distributed/[39m[90;4mdsolver_tests.jl:23[0m
 [8] top-level scope
[90m   @ [39m[90m/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/[39m[90;4mTest.jl:1114[0m
 [9] top-level scope
[90m   @ [39m[90m~/.julia/packages/StochasticPrograms/g8Qnj/test/distributed/[39m[90;4mdsolver_tests.jl:21[0m
[36m[1m[ [22m[39m[36m[1mInfo: [22m[39mRunning progressive-hedging tests...
[37m[1mTest Summary:                                                                                                               | [22m[39m[32m[1mPass  [22m[39m[91m[1mFail  [22m[39m[36m[1mTotal[22m[39m
Structured Solvers                                                                                                          | [32m 680  [39m[91m   2  [39m[36m  682[39m
  L-shaped: simple problems                                                                                                 | [32m 641  [39m[91m   2  [39m[36m  643[39m
    L-shaped: simple problems                                                                                               | [32m 641  [39m[91m   2  [39m[36m  643[39m
      Synchronous L-shaped with disaggregate cuts: Simple                                                                   | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped with disaggregate cuts: Simple                                                                   | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped with partial cut aggregation of size 2: Simple                                                   | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped with partial cut aggregation of size 2: Simple                                                   | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped with full cut aggregation: Simple                                                                | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped with full cut aggregation: Simple                                                                | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped with dynamic aggregation ruled by uniform selection: Simple                                      | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped with dynamic aggregation ruled by uniform selection: Simple                                      | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped using regularized decomposition with disaggregate cuts: Simple                                   | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped using regularized decomposition with disaggregate cuts: Simple                                   | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped using regularized decomposition with partial cut aggregation of size 2: Simple                   | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped using regularized decomposition with partial cut aggregation of size 2: Simple                   | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped using regularized decomposition with full cut aggregation: Simple                                | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped using regularized decomposition with full cut aggregation: Simple                                | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped using regularized decomposition with dynamic aggregation ruled by uniform selection: Simple      | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped using regularized decomposition with dynamic aggregation ruled by uniform selection: Simple      | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped using trust-region with disaggregate cuts: Simple                                                | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped using trust-region with disaggregate cuts: Simple                                                | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped using trust-region with partial cut aggregation of size 2: Simple                                | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped using trust-region with partial cut aggregation of size 2: Simple                                | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped using trust-region with full cut aggregation: Simple                                             | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped using trust-region with full cut aggregation: Simple                                             | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped using trust-region with dynamic aggregation ruled by uniform selection: Simple                   | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped using trust-region with dynamic aggregation ruled by uniform selection: Simple                   | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped using level sets with disaggregate cuts: Simple                                                  | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped using level sets with disaggregate cuts: Simple                                                  | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped using level sets with partial cut aggregation of size 2: Simple                                  | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped using level sets with partial cut aggregation of size 2: Simple                                  | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped using level sets with full cut aggregation: Simple                                               | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped using level sets with full cut aggregation: Simple                                               | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped using level sets with dynamic aggregation ruled by uniform selection: Simple                     | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped using level sets with dynamic aggregation ruled by uniform selection: Simple                     | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped with disaggregate cuts: Simple                                                                  | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped with disaggregate cuts: Simple                                                                  | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped with partial cut aggregation of size 2: Simple                                                  | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped with partial cut aggregation of size 2: Simple                                                  | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped with full cut aggregation: Simple                                                               | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped with full cut aggregation: Simple                                                               | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped with dynamic aggregation ruled by uniform selection: Simple                                     | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped with dynamic aggregation ruled by uniform selection: Simple                                     | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped using regularized decomposition with disaggregate cuts: Simple                                  | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped using regularized decomposition with disaggregate cuts: Simple                                  | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped using regularized decomposition with partial cut aggregation of size 2: Simple                  | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped using regularized decomposition with partial cut aggregation of size 2: Simple                  | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped using regularized decomposition with full cut aggregation: Simple                               | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped using regularized decomposition with full cut aggregation: Simple                               | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped using regularized decomposition with dynamic aggregation ruled by uniform selection: Simple     | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped using regularized decomposition with dynamic aggregation ruled by uniform selection: Simple     | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped using trust-region with disaggregate cuts: Simple                                               | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped using trust-region with disaggregate cuts: Simple                                               | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped using trust-region with partial cut aggregation of size 2: Simple                               | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped using trust-region with partial cut aggregation of size 2: Simple                               | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped using trust-region with full cut aggregation: Simple                                            | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped using trust-region with full cut aggregation: Simple                                            | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped using trust-region with dynamic aggregation ruled by uniform selection: Simple                  | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped using trust-region with dynamic aggregation ruled by uniform selection: Simple                  | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped using level sets with disaggregate cuts: Simple                                                 | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped using level sets with disaggregate cuts: Simple                                                 | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped using level sets with partial cut aggregation of size 2: Simple                                 | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped using level sets with partial cut aggregation of size 2: Simple                                 | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped using level sets with full cut aggregation: Simple                                              | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped using level sets with full cut aggregation: Simple                                              | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped using level sets with dynamic aggregation ruled by uniform selection: Simple                    | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped using level sets with dynamic aggregation ruled by uniform selection: Simple                    | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped with disaggregate cuts: Infeasible                                                               | [32m   4  [39m      [36m    4[39m
      Synchronous L-shaped with disaggregate cuts: Infeasible                                                               | [32m   4  [39m      [36m    4[39m
      Synchronous L-shaped with partial cut aggregation of size 2: Infeasible                                               | [32m   4  [39m      [36m    4[39m
      Synchronous L-shaped with partial cut aggregation of size 2: Infeasible                                               | [32m   4  [39m      [36m    4[39m
      Synchronous L-shaped with full cut aggregation: Infeasible                                                            | [32m   4  [39m      [36m    4[39m
      Synchronous L-shaped with full cut aggregation: Infeasible                                                            | [32m   4  [39m      [36m    4[39m
      Synchronous L-shaped with dynamic aggregation ruled by uniform selection: Infeasible                                  | [32m   4  [39m      [36m    4[39m
      Synchronous L-shaped with dynamic aggregation ruled by uniform selection: Infeasible                                  | [32m   4  [39m      [36m    4[39m
      Synchronous L-shaped using regularized decomposition with disaggregate cuts: Infeasible                               | [32m   4  [39m      [36m    4[39m
      Synchronous L-shaped using regularized decomposition with disaggregate cuts: Infeasible                               | [32m   4  [39m      [36m    4[39m
      Synchronous L-shaped using regularized decomposition with partial cut aggregation of size 2: Infeasible               | [32m   4  [39m      [36m    4[39m
      Synchronous L-shaped using regularized decomposition with partial cut aggregation of size 2: Infeasible               | [32m   4  [39m      [36m    4[39m
      Synchronous L-shaped using regularized decomposition with full cut aggregation: Infeasible                            | [32m   4  [39m      [36m    4[39m
      Synchronous L-shaped using regularized decomposition with full cut aggregation: Infeasible                            | [32m   4  [39m      [36m    4[39m
      Synchronous L-shaped using regularized decomposition with dynamic aggregation ruled by uniform selection: Infeasible  | [32m   4  [39m      [36m    4[39m
      Synchronous L-shaped using regularized decomposition with dynamic aggregation ruled by uniform selection: Infeasible  | [32m   4  [39m      [36m    4[39m
      Synchronous L-shaped using trust-region with disaggregate cuts: Infeasible                                            | [32m   4  [39m      [36m    4[39m
      Synchronous L-shaped using trust-region with disaggregate cuts: Infeasible                                            | [32m   4  [39m      [36m    4[39m
      Synchronous L-shaped using trust-region with partial cut aggregation of size 2: Infeasible                            | [32m   4  [39m      [36m    4[39m
      Synchronous L-shaped using trust-region with partial cut aggregation of size 2: Infeasible                            | [32m   4  [39m      [36m    4[39m
      Synchronous L-shaped using trust-region with full cut aggregation: Infeasible                                         | [32m   4  [39m      [36m    4[39m
      Synchronous L-shaped using trust-region with full cut aggregation: Infeasible                                         | [32m   4  [39m      [36m    4[39m
      Synchronous L-shaped using trust-region with dynamic aggregation ruled by uniform selection: Infeasible               | [32m   4  [39m      [36m    4[39m
      Synchronous L-shaped using trust-region with dynamic aggregation ruled by uniform selection: Infeasible               | [32m   4  [39m      [36m    4[39m
      Synchronous L-shaped using level sets with disaggregate cuts: Infeasible                                              | [32m   4  [39m      [36m    4[39m
      Synchronous L-shaped using level sets with disaggregate cuts: Infeasible                                              | [32m   4  [39m      [36m    4[39m
      Synchronous L-shaped using level sets with partial cut aggregation of size 2: Infeasible                              | [32m   4  [39m      [36m    4[39m
      Synchronous L-shaped using level sets with partial cut aggregation of size 2: Infeasible                              | [32m   4  [39m      [36m    4[39m
      Synchronous L-shaped using level sets with full cut aggregation: Infeasible                                           | [32m   4  [39m      [36m    4[39m
      Synchronous L-shaped using level sets with full cut aggregation: Infeasible                                           | [32m   4  [39m      [36m    4[39m
      Synchronous L-shaped using level sets with dynamic aggregation ruled by uniform selection: Infeasible                 | [32m   4  [39m      [36m    4[39m
      Synchronous L-shaped using level sets with dynamic aggregation ruled by uniform selection: Infeasible                 | [32m   4  [39m      [36m    4[39m
      Asynchronous L-shaped with disaggregate cuts: Infeasible                                                              | [32m   4  [39m      [36m    4[39m
      Asynchronous L-shaped with disaggregate cuts: Infeasible                                                              | [32m   4  [39m      [36m    4[39m
      Asynchronous L-shaped with partial cut aggregation of size 2: Infeasible                                              | [32m   4  [39m      [36m    4[39m
      Asynchronous L-shaped with partial cut aggregation of size 2: Infeasible                                              | [32m   4  [39m      [36m    4[39m
      Asynchronous L-shaped with full cut aggregation: Infeasible                                                           | [32m   4  [39m      [36m    4[39m
      Asynchronous L-shaped with full cut aggregation: Infeasible                                                           | [32m   4  [39m      [36m    4[39m
      Asynchronous L-shaped with dynamic aggregation ruled by uniform selection: Infeasible                                 | [32m   4  [39m      [36m    4[39m
      Asynchronous L-shaped with dynamic aggregation ruled by uniform selection: Infeasible                                 | [32m   4  [39m      [36m    4[39m
      Asynchronous L-shaped using regularized decomposition with disaggregate cuts: Infeasible                              | [32m   4  [39m      [36m    4[39m
      Asynchronous L-shaped using regularized decomposition with disaggregate cuts: Infeasible                              | [32m   4  [39m      [36m    4[39m
      Asynchronous L-shaped using regularized decomposition with partial cut aggregation of size 2: Infeasible              | [32m   4  [39m      [36m    4[39m
      Asynchronous L-shaped using regularized decomposition with partial cut aggregation of size 2: Infeasible              | [32m   4  [39m      [36m    4[39m
      Asynchronous L-shaped using regularized decomposition with full cut aggregation: Infeasible                           | [32m   4  [39m      [36m    4[39m
      Asynchronous L-shaped using regularized decomposition with full cut aggregation: Infeasible                           | [32m   4  [39m      [36m    4[39m
      Asynchronous L-shaped using regularized decomposition with dynamic aggregation ruled by uniform selection: Infeasible | [32m   4  [39m      [36m    4[39m
      Asynchronous L-shaped using regularized decomposition with dynamic aggregation ruled by uniform selection: Infeasible | [32m   4  [39m      [36m    4[39m
      Asynchronous L-shaped using trust-region with disaggregate cuts: Infeasible                                           | [32m   4  [39m      [36m    4[39m
      Asynchronous L-shaped using trust-region with disaggregate cuts: Infeasible                                           | [32m   4  [39m      [36m    4[39m
      Asynchronous L-shaped using trust-region with partial cut aggregation of size 2: Infeasible                           | [32m   4  [39m      [36m    4[39m
      Asynchronous L-shaped using trust-region with partial cut aggregation of size 2: Infeasible                           | [32m   4  [39m      [36m    4[39m
      Asynchronous L-shaped using trust-region with full cut aggregation: Infeasible                                        | [32m   4  [39m      [36m    4[39m
      Asynchronous L-shaped using trust-region with full cut aggregation: Infeasible                                        | [32m   4  [39m      [36m    4[39m
      Asynchronous L-shaped using trust-region with dynamic aggregation ruled by uniform selection: Infeasible              | [32m   4  [39m      [36m    4[39m
      Asynchronous L-shaped using trust-region with dynamic aggregation ruled by uniform selection: Infeasible              | [32m   4  [39m      [36m    4[39m
      Asynchronous L-shaped using level sets with disaggregate cuts: Infeasible                                             | [32m   4  [39m      [36m    4[39m
      Asynchronous L-shaped using level sets with disaggregate cuts: Infeasible                                             | [32m   4  [39m      [36m    4[39m
      Asynchronous L-shaped using level sets with partial cut aggregation of size 2: Infeasible                             | [32m   4  [39m      [36m    4[39m
      Asynchronous L-shaped using level sets with partial cut aggregation of size 2: Infeasible                             | [32m   4  [39m      [36m    4[39m
      Asynchronous L-shaped using level sets with full cut aggregation: Infeasible                                          | [32m   4  [39m      [36m    4[39m
      Asynchronous L-shaped using level sets with full cut aggregation: Infeasible                                          | [32m   4  [39m      [36m    4[39m
      Asynchronous L-shaped using level sets with dynamic aggregation ruled by uniform selection: Infeasible                | [32m   4  [39m      [36m    4[39m
      Asynchronous L-shaped using level sets with dynamic aggregation ruled by uniform selection: Infeasible                | [32m   4  [39m      [36m    4[39m
      Synchronous L-shaped with disaggregate cuts: Farmer                                                                   | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped with disaggregate cuts: Farmer                                                                   | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped with partial cut aggregation of size 2: Farmer                                                   | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped with partial cut aggregation of size 2: Farmer                                                   | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped with full cut aggregation: Farmer                                                                | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped with full cut aggregation: Farmer                                                                | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped with dynamic aggregation ruled by uniform selection: Farmer                                      | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped with dynamic aggregation ruled by uniform selection: Farmer                                      | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped using regularized decomposition with disaggregate cuts: Farmer                                   | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped using regularized decomposition with disaggregate cuts: Farmer                                   | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped using regularized decomposition with partial cut aggregation of size 2: Farmer                   | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped using regularized decomposition with partial cut aggregation of size 2: Farmer                   | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped using regularized decomposition with full cut aggregation: Farmer                                | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped using regularized decomposition with full cut aggregation: Farmer                                | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped using regularized decomposition with dynamic aggregation ruled by uniform selection: Farmer      | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped using regularized decomposition with dynamic aggregation ruled by uniform selection: Farmer      | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped using trust-region with disaggregate cuts: Farmer                                                | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped using trust-region with disaggregate cuts: Farmer                                                | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped using trust-region with partial cut aggregation of size 2: Farmer                                | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped using trust-region with partial cut aggregation of size 2: Farmer                                | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped using trust-region with full cut aggregation: Farmer                                             | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped using trust-region with full cut aggregation: Farmer                                             | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped using trust-region with dynamic aggregation ruled by uniform selection: Farmer                   | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped using trust-region with dynamic aggregation ruled by uniform selection: Farmer                   | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped using level sets with disaggregate cuts: Farmer                                                  | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped using level sets with disaggregate cuts: Farmer                                                  | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped using level sets with partial cut aggregation of size 2: Farmer                                  | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped using level sets with partial cut aggregation of size 2: Farmer                                  | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped using level sets with full cut aggregation: Farmer                                               | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped using level sets with full cut aggregation: Farmer                                               | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped using level sets with dynamic aggregation ruled by uniform selection: Farmer                     | [32m   3  [39m      [36m    3[39m
      Synchronous L-shaped using level sets with dynamic aggregation ruled by uniform selection: Farmer                     | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped with disaggregate cuts: Farmer                                                                  | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped with disaggregate cuts: Farmer                                                                  | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped with partial cut aggregation of size 2: Farmer                                                  | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped with partial cut aggregation of size 2: Farmer                                                  | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped with full cut aggregation: Farmer                                                               | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped with full cut aggregation: Farmer                                                               | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped with dynamic aggregation ruled by uniform selection: Farmer                                     | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped with dynamic aggregation ruled by uniform selection: Farmer                                     | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped using regularized decomposition with disaggregate cuts: Farmer                                  | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped using regularized decomposition with disaggregate cuts: Farmer                                  | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped using regularized decomposition with partial cut aggregation of size 2: Farmer                  | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped using regularized decomposition with partial cut aggregation of size 2: Farmer                  | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped using regularized decomposition with full cut aggregation: Farmer                               | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped using regularized decomposition with full cut aggregation: Farmer                               | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped using regularized decomposition with dynamic aggregation ruled by uniform selection: Farmer     | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped using regularized decomposition with dynamic aggregation ruled by uniform selection: Farmer     | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped using trust-region with disaggregate cuts: Farmer                                               | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped using trust-region with disaggregate cuts: Farmer                                               | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped using trust-region with partial cut aggregation of size 2: Farmer                               | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped using trust-region with partial cut aggregation of size 2: Farmer                               | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped using trust-region with full cut aggregation: Farmer                                            | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped using trust-region with full cut aggregation: Farmer                                            | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped using trust-region with dynamic aggregation ruled by uniform selection: Farmer                  | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped using trust-region with dynamic aggregation ruled by uniform selection: Farmer                  | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped using level sets with disaggregate cuts: Farmer                                                 | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped using level sets with disaggregate cuts: Farmer                                                 | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped using level sets with partial cut aggregation of size 2: Farmer                                 | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped using level sets with partial cut aggregation of size 2: Farmer                                 | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped using level sets with full cut aggregation: Farmer                                              | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped using level sets with full cut aggregation: Farmer                                              | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped using level sets with dynamic aggregation ruled by uniform selection: Farmer                    | [32m   3  [39m      [36m    3[39m
      Asynchronous L-shaped using level sets with dynamic aggregation ruled by uniform selection: Farmer                    | [32m   1  [39m[91m   2  [39m[36m    3[39m
  Progressive-hedging: simple problems                                                                                      | [32m  39  [39m      [36m   39[39m
[91m[1mERROR: [22m[39mLoadError: LoadError: [91mSome tests did not pass: 680 passed, 2 failed, 0 errored, 0 broken.[39m
in expression starting at /home/pkgeval/.julia/packages/StochasticPrograms/g8Qnj/test/distributed/dsolver_tests.jl:20
in expression starting at /home/pkgeval/.julia/packages/StochasticPrograms/g8Qnj/test/distributed/run_dtests.jl:24
┌ Error: Distributed test failed, cmd : `/opt/julia/bin/julia -Cnative -J/opt/julia/lib/julia/sys.so -g1 --startup-file=no --check-bounds=yes --startup-file=no --depwarn=error --color=yes /home/pkgeval/.julia/packages/StochasticPrograms/g8Qnj/test/distributed/run_dtests.jl`
└ @ Main ~/.julia/packages/StochasticPrograms/g8Qnj/test/distributed/distributed_tests.jl:9
    Testing StochasticPrograms tests passed 
