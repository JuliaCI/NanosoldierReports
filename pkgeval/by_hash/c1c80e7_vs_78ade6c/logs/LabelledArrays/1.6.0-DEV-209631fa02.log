################################################################################
# PkgEval set-up: 2020-10-30T00:56:30.687
#

Julia Version 1.6.0-DEV.1398
Commit 209631fa02 (2020-10-29 23:03 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: AMD EPYC 7502 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-11.0.0 (ORCJIT, znver2)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_MAX_NUM_PRECOMPILE_FILES = 9223372036854775807



################################################################################
# Installation: 2020-10-30T00:56:31.586
#

   Resolving package versions...
   Installed LabelledArrays ─ v1.3.0
   Installed ArrayInterface ─ v2.13.7
   Installed MacroTools ───── v0.5.6
   Installed Requires ─────── v1.1.0
   Installed StaticArrays ─── v0.12.5
Updating `~/.julia/environments/v1.6/Project.toml`
  [2ee39098] + LabelledArrays v1.3.0
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [4fba245c] + ArrayInterface v2.13.7
  [2ee39098] + LabelledArrays v1.3.0
  [1914dd2f] + MacroTools v0.5.6
  [ae029012] + Requires v1.1.0
  [90137ffa] + StaticArrays v0.12.5
  [2a0f44e3] + Base64
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [d6f4376e] + Markdown
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [cf7118a7] + UUIDs


################################################################################
# Testing: 2020-10-30T00:56:34.162
#


     Testing LabelledArrays
Status `/tmp/jl_GuzbDe/Project.toml`
  [4fba245c] ArrayInterface v2.13.7
  [2ee39098] LabelledArrays v1.3.0
  [1914dd2f] MacroTools v0.5.6
  [1dea7af3] OrdinaryDiffEq v5.43.0
  [90137ffa] StaticArrays v0.12.5
  [b77e0a4c] InteractiveUtils
  [37e2e46d] LinearAlgebra
  [8dfed614] Test
Status `/tmp/jl_GuzbDe/Manifest.toml`
  [79e6a3ab] Adapt v2.3.0
  [ec485272] ArnoldiMethod v0.0.4
  [4fba245c] ArrayInterface v2.13.7
  [d360d2e6] ChainRulesCore v0.9.17
  [bbf7d656] CommonSubexpressions v0.3.0
  [34da2185] Compat v3.23.0
  [adafc99b] CpuId v0.2.2
  [9a962f9c] DataAPI v1.3.0
  [864edb3b] DataStructures v0.18.8
  [e2d170a0] DataValueInterfaces v1.0.0
  [2b5f629d] DiffEqBase v6.48.2
  [163ba53b] DiffResults v1.0.2
  [b552c78f] DiffRules v1.0.1
  [b4f34e82] Distances v0.9.2
  [ffbed154] DocStringExtensions v0.8.3
  [d4d017d3] ExponentialUtilities v1.8.0
  [9aa1b823] FastClosures v0.3.2
  [6a86dc24] FiniteDiff v2.7.0
  [f6369f11] ForwardDiff v0.10.12
  [069b7b12] FunctionWrappers v1.1.1
  [01680d73] GenericSVD v0.3.0
  [d25df0c9] Inflate v0.1.2
  [42fd0dbc] IterativeSolvers v0.8.4
  [82899510] IteratorInterfaceExtensions v1.0.0
  [692b3bcd] JLLWrappers v1.1.3
  [2ee39098] LabelledArrays v1.3.0
  [093fc24a] LightGraphs v1.3.0
  [d3d80556] LineSearches v7.1.0
  [bdcacae8] LoopVectorization v0.8.26
  [1914dd2f] MacroTools v0.5.6
  [46d2c3a1] MuladdMacro v0.2.2
  [d41bc354] NLSolversBase v7.7.1
  [2774e3e8] NLsolve v4.4.1
  [77ba4419] NaNMath v0.3.4
  [6fe1bfb0] OffsetArrays v1.3.1
  [bac558e1] OrderedCollections v1.3.1
  [1dea7af3] OrdinaryDiffEq v5.43.0
  [d96e819e] Parameters v0.12.1
  [3cdcf5f2] RecipesBase v1.1.0
  [731186ca] RecursiveArrayTools v2.7.2
  [f2c3362d] RecursiveFactorization v0.1.4
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v1.1.0
  [f2b01f46] Roots v1.0.5
  [21efa798] SIMDPirates v0.8.25
  [476501e8] SLEEFPirates v0.5.5
  [699a6c99] SimpleTraits v0.9.3
  [47a9eef4] SparseDiffTools v1.10.0
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.5
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.1.0
  [a2a6695c] TreeViews v0.3.0
  [3a884ed6] UnPack v1.0.2
  [3d5dd08c] VectorizationBase v0.12.33
  [19fa3120] VertexSafeGraphs v0.1.2
  [700de1a5] ZygoteRules v0.2.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.4+0
  [efe28fd5] OpenSpecFun_jll v0.5.3+4
  [0dad84c5] ArgTools
  [56f22d72] Artifacts
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [f43a241f] Downloads
  [b77e0a4c] InteractiveUtils
  [b27032c2] LibCURL
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [4607b0f0] SuiteSparse
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
  [deac9b47] LibCURL_jll
  [14a3606d] MozillaCACerts_jll
     Testing Running tests...
WARNING: Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead).WARNING: Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead).WARNING: Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead).3-element SLArray{Tuple{3}, Int64, 1, 3, (:a, :b, :c)} with indices SOneTo(3):
 :a => 1
 :b => 2
 :c => 33-element SLArray{Tuple{3}, Float64, 1, 3, (a = 1:2, b = 3)} with indices SOneTo(3):
 :a => 1.0
 :a => 2.0
 :b => 3.03-element SLArray{Tuple{3}, Float64, 1, 3, (a = 1:2, b = 2:3)} with indices SOneTo(3):
 :a => 1.0
 :a => 2.0
 :b => 3.02-element SLArray{Tuple{2}, Int64, 1, 2, (a = 1, b = 2)} with indices SOneTo(2):
 :a => 1
 :b => 22×2 SLArray{Tuple{2, 2}, Int64, 2, 4, (a = (2, Colon()), b = 3)} with indices SOneTo(2)×SOneTo(2):
 nothing => 1  :b => 3
      :a => 2  :a => 4Test Summary: | Pass  Total
SLArrays      |   40     40
  8.842049 seconds (16.10 M allocations: 936.294 MiB, 4.01% gc time, 98.61% compilation time)
3-element LArray{Float64, 1, Vector{Float64}, (:a, :b, :c)}:
 :a => 1.0
 :b => 2.0
 :c => 3.0(i, s) = (1, :a)
(i, s) = (2, :b)
(i, s) = (3, :c)
  0.004029 seconds (898 allocations: 59.039 KiB, 99.73% compilation time)
  0.000006 seconds (7 allocations: 208 bytes)
  0.004758 seconds (3.65 k allocations: 253.384 KiB, 99.62% compilation time)
  0.000002 seconds (7 allocations: 208 bytes)
Variables
  #self#::Core.Const(var"#g#27"())
  x::LArray{Float64, 1, Vector{Float64}, (:a, :b, :c)}

Body::Float64
1 ─ %1 = Base.getproperty(x, :a)::Float64
└──      return %1
Variables
  #unused#::Core.Const(Core.var"#Type##kw"())
  @_2::NamedTuple{(:a, :b, :c, :d), NTuple{4, Int64}}
  @_3::Type{LArray}
  size::Tuple{Int64, Int64}
  kwargs...::Base.Iterators.Pairs{Symbol, Int64, NTuple{4, Symbol}, NamedTuple{(:a, :b, :c, :d), NTuple{4, Int64}}}

Body::LArray{Int64, 2, Matrix{Int64}, (:a, :b, :c, :d)}
1 ─      (kwargs... = Base.pairs(@_2))
│   %2 = LabelledArrays.:(var"#LArray#7")(kwargs...::Core.PartialStruct(Base.Iterators.Pairs{Symbol, Int64, NTuple{4, Symbol}, NamedTuple{(:a, :b, :c, :d), NTuple{4, Int64}}}, Any[NamedTuple{(:a, :b, :c, :d), NTuple{4, Int64}}, Core.Const((:a, :b, :c, :d))]), @_3, size)::LArray{Int64, 2, Matrix{Int64}, (:a, :b, :c, :d)}
└──      return %2
Variables
  #self#::Core.Const(convert)
  #unused#::Type{NamedTuple}
  x::LArray{Int64, 2, Matrix{Int64}, (:a, :b, :c, :d)}
  tup::NTuple{4, Int64}

Body::NamedTuple{(:a, :b, :c, :d), NTuple{4, Int64}}
1 ─ %1 = LabelledArrays.length($(Expr(:static_parameter, 4)))::Core.Const(4)
│   %2 = Core.apply_type(LabelledArrays.NTuple, %1, $(Expr(:static_parameter, 1)))::Core.Const(NTuple{4, Int64})
│        (tup = (%2)(x))
│   %4 = $(Expr(:static_parameter, 4))::Core.Const((:a, :b, :c, :d))
│   %5 = LabelledArrays.typeof(tup)::Core.Const(NTuple{4, Int64})
│   %6 = Core.apply_type(LabelledArrays.NamedTuple, %4, %5)::Core.Const(NamedTuple{(:a, :b, :c, :d), NTuple{4, Int64}})
│   %7 = (%6)(tup)::NamedTuple{(:a, :b, :c, :d), NTuple{4, Int64}}
└──      return %7
Variables
  #self#::Core.Const(collect)
  itr::Base.Generator{UnitRange{Int64}, LabelledArrays.var"#9#10"{(:a, :b, :c, :d), LArray{Int64, 2, Matrix{Int64}, (:a, :b, :c, :d)}}}
  @_3::Int64
  st::Int64
  v1::Pair{Symbol, Int64}
  y::UNION{NOTHING, TUPLE{PAIR{SYMBOL, INT64}, INT64}}
  et::Type{Pair{Symbol, Int64}}
  isz::Base.HasShape{1}
  @_9::Type{Pair{Symbol, Int64}}

Body::Vector{Pair{Symbol, Int64}}
1 ─       Core.NewvarNode(:(@_3))
│         Core.NewvarNode(:(st))
│         Core.NewvarNode(:(v1))
│         Core.NewvarNode(:(y))
│         Core.NewvarNode(:(et))
│   %6  = Base.getproperty(itr, :iter)::UnitRange{Int64}
│         (isz = Base.IteratorSize(%6))
│   %8  = (itr isa Base.Generator)::Core.Const(true)
└──       goto #4 if not %8
2 ─ %10 = Base.getproperty(itr, :f)::LabelledArrays.var"#9#10"{(:a, :b, :c, :d), LArray{Int64, 2, Matrix{Int64}, (:a, :b, :c, :d)}}
│   %11 = (%10 isa Base.Type)::Core.Const(false)
└──       goto #4 if not %11
3 ─       Core.Const(:(@_9 = Base.getproperty(itr, :f)))
└──       Core.Const(:(goto %20))
4 ┄ %15 = Core.Compiler::Core.Const(Core.Compiler)
│   %16 = Base.getproperty(%15, :return_type)::Core.Const(Core.Compiler.return_type)
│   %17 = Base.typeof(itr)::Core.Const(Base.Generator{UnitRange{Int64}, LabelledArrays.var"#9#10"{(:a, :b, :c, :d), LArray{Int64, 2, Matrix{Int64}, (:a, :b, :c, :d)}}})
│   %18 = Core.apply_type(Base.Tuple, %17)::Core.Const(Tuple{Base.Generator{UnitRange{Int64}, LabelledArrays.var"#9#10"{(:a, :b, :c, :d), LArray{Int64, 2, Matrix{Int64}, (:a, :b, :c, :d)}}}})
│         (@_9 = (%16)(Base.first, %18))
│         (et = @_9::Core.Const(Pair{Symbol, Int64}))
│   %21 = (isz isa Base.SizeUnknown)::Core.Const(false)
└──       goto #6 if not %21
5 ─       Core.Const(:(Core.apply_type(Base.Vector, et)))
│         Core.Const(:((%23)()))
│         Core.Const(:(Base.grow_to!(%24, itr)))
└──       Core.Const(:(return %25))
6 ┄       (y = Base.iterate(itr))
│   %28 = (y === Base.nothing)::Bool
└──       goto #8 if not %28
7 ─ %30 = et::Core.Const(Pair{Symbol, Int64})::Core.Const(Pair{Symbol, Int64})
│   %31 = Base.getproperty(itr, :iter)::UnitRange{Int64}
│   %32 = Base._array_for(%30, %31, isz)::Vector{Pair{Symbol, Int64}}
└──       return %32
8 ─ %34 = Base.indexed_iterate(y::Tuple{Pair{Symbol, Int64}, Int64}, 1)::Core.PartialStruct(Tuple{Pair{Symbol, Int64}, Int64}, Any[Pair{Symbol, Int64}, Core.Const(2)])
│         (v1 = Core.getfield(%34, 1))
│         (@_3 = Core.getfield(%34, 2))
│   %37 = Base.indexed_iterate(y::Tuple{Pair{Symbol, Int64}, Int64}, 2, @_3::Core.Const(2))::Core.PartialStruct(Tuple{Int64, Int64}, Any[Int64, Core.Const(3)])
│         (st = Core.getfield(%37, 1))
│   %39 = Base.typeof(v1)::Core.Const(Pair{Symbol, Int64})
│   %40 = Base.getproperty(itr, :iter)::UnitRange{Int64}
│   %41 = Base._array_for(%39, %40, isz)::Vector{Pair{Symbol, Int64}}
│   %42 = v1::Pair{Symbol, Int64}
│   %43 = Base.collect_to_with_first!(%41, %42, itr, st)::Vector{Pair{Symbol, Int64}}
└──       return %43
2×2 LArray{Float64, 2, Matrix{Float64}, (:a, :b, :c, :d)}:
 :a => 2.1219957915e-314  :c => 6.92619426171065e-310
 :b => 2.1219957915e-314  :d => 6.92635783174813e-3103-element LArray{Float64, 1, Vector{Float64}, (a = 1:2, b = 3)}:
 :a => 1.0
 :a => 2.0
 :b => 3.02-element LArray{Float64, 1, Vector{Float64}, (a = 1, b = 2)}:
 :a => 1.0
 :b => 2.02×2 LArray{Int64, 2, Matrix{Int64}, (a = (2, Colon()), b = 2:3)}:
 nothing => 1  :b => 2
      :a => 3  :a => 4Test Summary: | Pass  Total
LArrays       |   51     51
  7.515250 seconds (17.54 M allocations: 978.728 MiB, 2.51% gc time, 92.49% compilation time)
WARNING: Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead).WARNING: Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead).WARNING: Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead).WARNING: Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead).WARNING: Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead).WARNING: Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead).WARNING: Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead).WARNING: Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead).WARNING: Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead).WARNING: Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead).WARNING: Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead).WARNING: Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead).WARNING: Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead).WARNING: Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead).WARNING: Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead).WARNING: Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead).WARNING: Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead).WARNING: Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead).WARNING: Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead).WARNING: Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead).WARNING: Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead).WARNING: Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead).WARNING: Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead).WARNING: Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead).DiffEq: Error During Test at /home/pkgeval/.julia/packages/LabelledArrays/74Tbn/test/runtests.jl:9
  Got exception outside of a @test
  LoadError: TypeError: in typeassert, expected DataType, got Vararg{Bool}
  Stacktrace:
    [1] typejoin_union_tuple(T::Type)
      @ Base.Broadcast ./broadcast.jl:728
    [2] promote_typejoin_union(#unused#::Type{Tuple{Vararg{Bool}}})
      @ Base.Broadcast ./broadcast.jl:700
    [3] combine_eltypes(f::Type, args::Tuple{Vector{SubArray{Bool, 1, BitMatrix, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}})
      @ Base.Broadcast ./broadcast.jl:738
    [4] copy(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{Tuple}, Tuple{Vector{SubArray{Bool, 1, BitMatrix, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}})
      @ Base.Broadcast ./broadcast.jl:903
    [5] materialize
      @ ./broadcast.jl:881 [inlined]
    [6] (::SparseDiffTools.var"#15#16"{3})(i::Int64)
      @ SparseDiffTools ~/.julia/packages/SparseDiffTools/Z3AsD/src/differentiation/compute_jacobian_ad.jl:59
    [7] iterate
      @ ./generator.jl:47 [inlined]
    [8] _collect(c::UnitRange{Int64}, itr::Base.Generator{UnitRange{Int64}, SparseDiffTools.var"#15#16"{3}}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})
      @ Base ./array.jl:677
    [9] collect_similar
      @ ./array.jl:606 [inlined]
   [10] map
      @ ./abstractarray.jl:2268 [inlined]
   [11] generate_chunked_partials(x::LArray{Float64, 1, Vector{Float64}, (:x, :y, :z)}, colorvec::UnitRange{Int64}, #unused#::Val{3})
      @ SparseDiffTools ~/.julia/packages/SparseDiffTools/Z3AsD/src/differentiation/compute_jacobian_ad.jl:59
   [12] SparseDiffTools.ForwardColorJacCache(f::Function, x::LArray{Float64, 1, Vector{Float64}, (:x, :y, :z)}, _chunksize::Nothing; dx::Nothing, colorvec::UnitRange{Int64}, sparsity::Nothing)
      @ SparseDiffTools ~/.julia/packages/SparseDiffTools/Z3AsD/src/differentiation/compute_jacobian_ad.jl:34
   [13] build_jac_config
      @ ~/.julia/packages/OrdinaryDiffEq/HO8vN/src/derivative_wrappers.jl:122 [inlined]
   [14] alg_cache(alg::Rosenbrock23{0, true, DefaultLinSolve, DataType}, u::LArray{Float64, 1, Vector{Float64}, (:x, :y, :z)}, rate_prototype::LArray{Float64, 1, Vector{Float64}, (:x, :y, :z)}, uEltypeNoUnits::Type, uBottomEltypeNoUnits::Type, tTypeNoUnits::Type, uprev::LArray{Float64, 1, Vector{Float64}, (:x, :y, :z)}, uprev2::LArray{Float64, 1, Vector{Float64}, (:x, :y, :z)}, f::ODEFunction{true, typeof(iip_f), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, t::Float64, dt::Float64, reltol::Float64, p::SLArray{Tuple{3}, Float64, 1, 3, (:σ, :ρ, :β)}, calck::Bool, #unused#::Val{true})
      @ OrdinaryDiffEq ~/.julia/packages/OrdinaryDiffEq/HO8vN/src/caches/rosenbrock_caches.jl:77
   [15] __init(prob::ODEProblem{LArray{Float64, 1, Vector{Float64}, (:x, :y, :z)}, Tuple{Float64, Float64}, true, SLArray{Tuple{3}, Float64, 1, 3, (:σ, :ρ, :β)}, ODEFunction{true, typeof(iip_f), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, alg::Rosenbrock23{0, true, DefaultLinSolve, DataType}, timeseries_init::Tuple{}, ts_init::Tuple{}, ks_init::Tuple{}, recompile::Type{Val{true}}; saveat::Tuple{}, tstops::Tuple{}, d_discontinuities::Tuple{}, save_idxs::Nothing, save_everystep::Bool, save_on::Bool, save_start::Bool, save_end::Bool, callback::Nothing, dense::Bool, calck::Bool, dt::Float64, dtmin::Nothing, dtmax::Float64, force_dtmin::Bool, adaptive::Bool, gamma::Rational{Int64}, abstol::Nothing, reltol::Nothing, qmin::Rational{Int64}, qmax::Int64, qsteady_min::Int64, qsteady_max::Rational{Int64}, qoldinit::Rational{Int64}, fullnormalize::Bool, failfactor::Int64, beta1::Nothing, beta2::Nothing, maxiters::Int64, internalnorm::typeof(DiffEqBase.ODE_DEFAULT_NORM), internalopnorm::typeof(LinearAlgebra.opnorm), isoutofdomain::typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), unstable_check::typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), verbose::Bool, timeseries_errors::Bool, dense_errors::Bool, advance_to_tstop::Bool, stop_at_next_tstop::Bool, initialize_save::Bool, progress::Bool, progress_steps::Int64, progress_name::String, progress_message::typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), userdata::Nothing, allow_extrapolation::Bool, initialize_integrator::Bool, alias_u0::Bool, alias_du0::Bool, initializealg::OrdinaryDiffEq.DefaultInit, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ OrdinaryDiffEq ~/.julia/packages/OrdinaryDiffEq/HO8vN/src/solve.jl:296
   [16] __init(prob::ODEProblem{LArray{Float64, 1, Vector{Float64}, (:x, :y, :z)}, Tuple{Float64, Float64}, true, SLArray{Tuple{3}, Float64, 1, 3, (:σ, :ρ, :β)}, ODEFunction{true, typeof(iip_f), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, alg::Rosenbrock23{0, true, DefaultLinSolve, DataType}, timeseries_init::Tuple{}, ts_init::Tuple{}, ks_init::Tuple{}, recompile::Type{Val{true}})
      @ OrdinaryDiffEq ~/.julia/packages/OrdinaryDiffEq/HO8vN/src/solve.jl:66
   [17] __solve(::ODEProblem{LArray{Float64, 1, Vector{Float64}, (:x, :y, :z)}, Tuple{Float64, Float64}, true, SLArray{Tuple{3}, Float64, 1, 3, (:σ, :ρ, :β)}, ODEFunction{true, typeof(iip_f), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, ::Rosenbrock23{0, true, DefaultLinSolve, DataType}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ OrdinaryDiffEq ~/.julia/packages/OrdinaryDiffEq/HO8vN/src/solve.jl:4
   [18] __solve
      @ ~/.julia/packages/OrdinaryDiffEq/HO8vN/src/solve.jl:4 [inlined]
   [19] #solve_call#456
      @ ~/.julia/packages/DiffEqBase/3iigH/src/solve.jl:65 [inlined]
   [20] solve_call
      @ ~/.julia/packages/DiffEqBase/3iigH/src/solve.jl:52 [inlined]
   [21] #solve_up#458
      @ ~/.julia/packages/DiffEqBase/3iigH/src/solve.jl:86 [inlined]
   [22] solve_up
      @ ~/.julia/packages/DiffEqBase/3iigH/src/solve.jl:79 [inlined]
   [23] #solve#457
      @ ~/.julia/packages/DiffEqBase/3iigH/src/solve.jl:74 [inlined]
   [24] solve(prob::ODEProblem{LArray{Float64, 1, Vector{Float64}, (:x, :y, :z)}, Tuple{Float64, Float64}, true, SLArray{Tuple{3}, Float64, 1, 3, (:σ, :ρ, :β)}, ODEFunction{true, typeof(iip_f), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, args::Rosenbrock23{0, true, DefaultLinSolve, DataType})
      @ DiffEqBase ~/.julia/packages/DiffEqBase/3iigH/src/solve.jl:72
   [25] top-level scope
      @ ~/.julia/packages/LabelledArrays/74Tbn/test/diffeq.jl:40
   [26] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [27] macro expansion
      @ ~/.julia/packages/LabelledArrays/74Tbn/test/runtests.jl:9 [inlined]
   [28] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [29] macro expansion
      @ ~/.julia/packages/LabelledArrays/74Tbn/test/runtests.jl:9 [inlined]
   [30] macro expansion
      @ ./timing.jl:202 [inlined]
   [31] macro expansion
      @ ~/.julia/packages/LabelledArrays/74Tbn/test/runtests.jl:9 [inlined]
   [32] top-level scope
      @ ./timing.jl:202
   [33] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [34] top-level scope
      @ none:6
   [35] eval(m::Module, e::Any)
      @ Core ./boot.jl:369
   [36] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [37] _start()
      @ Base ./client.jl:485
  in expression starting at /home/pkgeval/.julia/packages/LabelledArrays/74Tbn/test/diffeq.jl:40
Test Summary: | Pass  Error  Total
DiffEq        |    6      1      7
ERROR: LoadError: Some tests did not pass: 6 passed, 0 failed, 1 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/LabelledArrays/74Tbn/test/runtests.jl:6

PkgEval failed: Package LabelledArrays errored during testing
Stacktrace:
  [1] pkgerror(msg::String)
    @ Pkg.Types /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
  [2] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing)
    @ Pkg.Operations /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1651
  [3] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:334
  [4] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:321
  [5] #test#62
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:71 [inlined]
  [6] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:70 [inlined]
  [7] #test#61
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:68 [inlined]
  [8] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:68 [inlined]
  [9] test(pkg::String; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67
 [10] test(pkg::String)
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67
 [11] top-level scope
    @ none:44
 [12] eval
    @ ./boot.jl:369 [inlined]
 [13] eval(x::Expr)
    @ Base.MainInclude ./client.jl:446
 [14] top-level scope
    @ none:1
 [15] eval(m::Module, e::Any)
    @ Core ./boot.jl:369
 [16] exec_options(opts::Base.JLOptions)
    @ Base ./client.jl:261
 [17] _start()
    @ Base ./client.jl:485


################################################################################
# PkgEval teardown: 2020-10-30T00:59:01.197
CPU usage: 146.87s (139.26s user, 7.65s kernel)

Network usage:
- eth0: 9.924 MiB received, 186.604 KiB sent

Raw statistics: {"blkio_stats":{"io_queue_recursive":[],"io_serviced_recursive":[{"major":259,"value":0,"op":"Read","minor":0},{"major":259,"value":9,"op":"Write","minor":0},{"major":259,"value":0,"op":"Sync","minor":0},{"major":259,"value":9,"op":"Async","minor":0},{"major":259,"value":9,"op":"Total","minor":0},{"major":253,"value":0,"op":"Read","minor":2},{"major":253,"value":9,"op":"Write","minor":2},{"major":253,"value":0,"op":"Sync","minor":2},{"major":253,"value":9,"op":"Async","minor":2},{"major":253,"value":9,"op":"Total","minor":2}],"io_time_recursive":[],"sectors_recursive":[],"io_service_bytes_recursive":[{"major":259,"value":0,"op":"Read","minor":0},{"major":259,"value":49152,"op":"Write","minor":0},{"major":259,"value":0,"op":"Sync","minor":0},{"major":259,"value":49152,"op":"Async","minor":0},{"major":259,"value":49152,"op":"Total","minor":0},{"major":253,"value":0,"op":"Read","minor":2},{"major":253,"value":49152,"op":"Write","minor":2},{"major":253,"value":0,"op":"Sync","minor":2},{"major":253,"value":49152,"op":"Async","minor":2},{"major":253,"value":49152,"op":"Total","minor":2}],"io_wait_time_recursive":[],"io_merged_recursive":[],"io_service_time_recursive":[]},"memory_stats":{"usage":264634368,"max_usage":1442897920,"stats":{"hierarchical_memory_limit":9223372036854771712,"pgmajfault":0,"total_rss":201216000,"inactive_file":8192,"inactive_anon":15265792,"total_pgfault":4314372,"total_cache":54968320,"total_rss_huge":0,"total_active_anon":240717824,"total_pgmajfault":0,"pgpgin":2956521,"rss_huge":0,"mapped_file":0,"total_inactive_file":8192,"dirty":0,"total_unevictable":0,"total_dirty":0,"writeback":0,"pgpgout":2893976,"hierarchical_memsw_limit":0,"cache":54968320,"active_file":147456,"pgfault":4314372,"total_mapped_file":0,"total_pgpgout":2893976,"total_writeback":0,"rss":201216000,"unevictable":0,"total_inactive_anon":15265792,"total_pgpgin":2956521,"active_anon":240717824,"total_active_file":147456},"limit":540972998656},"name":"/LabelledArrays-Pg7ClGf8","networks":{"eth0":{"rx_bytes":10406452,"rx_packets":1952,"tx_packets":1547,"tx_bytes":191083,"tx_dropped":0,"rx_dropped":5,"tx_errors":0,"rx_errors":0}},"id":"5a0a2cf4889aad61fb5c9a81bb52433a7aa36109ec97839d1ba5e0e027ce17cc","preread":"0001-01-01T00:00:00Z","storage_stats":{},"precpu_stats":{"throttling_data":{"throttled_periods":0,"throttled_time":0,"periods":0},"cpu_usage":{"usage_in_usermode":0,"usage_in_kernelmode":0,"total_usage":0}},"pids_stats":{"current":38},"num_procs":0,"cpu_stats":{"throttling_data":{"throttled_periods":0,"throttled_time":0,"periods":0},"system_cpu_usage":111252184570000000,"online_cpus":128,"cpu_usage":{"usage_in_usermode":139260000000,"usage_in_kernelmode":7650000000,"total_usage":146869467821,"percpu_usage":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,146869467821,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},"read":"2020-10-30T00:59:01.3449265Z"}