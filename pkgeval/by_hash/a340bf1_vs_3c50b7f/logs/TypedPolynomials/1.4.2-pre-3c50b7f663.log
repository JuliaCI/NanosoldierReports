Julia Version 1.4.2-pre.14
Commit 3c50b7f663 (2020-05-15 08:12 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-8.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed TypedPolynomials ──────── v0.2.7
  Installed OrderedCollections ────── v1.2.0
  Installed MacroTools ────────────── v0.5.5
  Installed MutableArithmetics ────── v0.2.9
  Installed MultivariatePolynomials ─ v0.3.8
  Installed DataStructures ────────── v0.17.16
   Updating `~/.julia/environments/v1.4/Project.toml`
  [afbbf031] + TypedPolynomials v0.2.7
   Updating `~/.julia/environments/v1.4/Manifest.toml`
  [864edb3b] + DataStructures v0.17.16
  [1914dd2f] + MacroTools v0.5.5
  [102ac46a] + MultivariatePolynomials v0.3.8
  [d8a4904e] + MutableArithmetics v0.2.9
  [bac558e1] + OrderedCollections v1.2.0
  [afbbf031] + TypedPolynomials v0.2.7
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8ba89e20] + Distributed 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
    Testing TypedPolynomials
Status `/tmp/jl_YG1AI0/Manifest.toml`
  [6e4b80f9] BenchmarkTools v0.5.0
  [864edb3b] DataStructures v0.17.16
  [682c06a0] JSON v0.21.0
  [1914dd2f] MacroTools v0.5.5
  [102ac46a] MultivariatePolynomials v0.3.8
  [d8a4904e] MutableArithmetics v0.2.9
  [0db19996] NBInclude v2.2.0
  [bac558e1] OrderedCollections v1.2.0
  [69de0a69] Parsers v1.0.4
  [b85f4697] SoftGlobalScope v1.0.10
  [afbbf031] TypedPolynomials v0.2.7
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8ba89e20] Distributed 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
Test Summary:    | Pass  Total
TypedPolynomials |  387    387
Test Summary:                     | Pass  Broken  Total
MutableArithmetics with variables | 6406      14   6420
Test Summary:                     | Pass  Broken  Total
MutableArithmetics with monomials | 6438      14   6452
Sparse: Error During Test at /home/pkgeval/.julia/packages/MultivariatePolynomials/H6NUw/test/mutable_arithmetics.jl:40
  Got exception outside of a @test
  MethodError: convert(::Type{Term{Int64,M} where M<:Monomial}, ::Term{Int64,Monomial{(x,),1}}) is ambiguous. Candidates:
    convert(TT::Type{#s15} where #s15<:AbstractTerm{T}, t::AbstractTerm) where T in MultivariatePolynomials at /home/pkgeval/.julia/packages/MultivariatePolynomials/H6NUw/src/conversion.jl:43
    convert(::Type{T}, t::T) where T<:AbstractTerm in MultivariatePolynomials at /home/pkgeval/.julia/packages/MultivariatePolynomials/H6NUw/src/conversion.jl:46
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] setindex!(::Array{Term{Int64,M} where M<:Monomial,1}, ::Term{Int64,Monomial{(x,),1}}, ::Int64) at ./array.jl:826
   [2] getindex(::Tuple{Term{Int64,Monomial{(x,),1}},Term{Int64,Monomial{(y,),1}},Term{Int64,Monomial{(x,),1}},Term{Int64,Monomial{(y,),1}},Term{Int64,Monomial{(x,),1}},Term{Int64,Monomial{(x,),1}},Term{Int64,Monomial{(x,),1}},Term{Int64,Monomial{(y,),1}},Term{Int64,Monomial{(x,),1}}}, ::UnitRange{Int64}) at ./range.jl:296
   [3] typed_hvcat(::Type{Term{Int64,Monomial{(x, y),2}}}, ::Tuple{Int64,Int64,Int64}, ::Term{Int64,Monomial{(x,),1}}, ::Vararg{Any,N} where N) at ./abstractarray.jl:1737
   [4] hvcat at ./abstractarray.jl:1715 [inlined]
   [5] macro expansion at /home/pkgeval/.julia/packages/MultivariatePolynomials/H6NUw/test/mutable_arithmetics.jl:41 [inlined]
   [6] macro expansion at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113 [inlined]
   [7] all_tests(::Term{Int64,Monomial{(x,),1}}, ::Term{Int64,Monomial{(y,),1}}, ::Term{Int64,Monomial{(x,),1}}, ::Term{Int64,Monomial{(x, y),2}}, ::Term{Int64,Monomial{(x,),1}}, ::Term{Int64,Monomial{(x,),1}}, ::Term{Int64,Monomial{(x,),1}}) at /home/pkgeval/.julia/packages/MultivariatePolynomials/H6NUw/test/mutable_arithmetics.jl:41
   [8] macro expansion at /home/pkgeval/.julia/packages/MultivariatePolynomials/H6NUw/test/mutable_arithmetics.jl:104 [inlined]
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1186 [inlined]
   [10] top-level scope at /home/pkgeval/.julia/packages/MultivariatePolynomials/H6NUw/test/mutable_arithmetics.jl:0
   [11] include(::String) at ./client.jl:439
   [12] top-level scope at /home/pkgeval/.julia/packages/MultivariatePolynomials/H6NUw/test/commutativetests.jl:1
   [13] include(::String) at ./client.jl:439
   [14] top-level scope at /home/pkgeval/.julia/packages/TypedPolynomials/MgblR/test/runtests.jl:63
   [15] include(::String) at ./client.jl:439
   [16] top-level scope at none:6
   [17] eval(::Module, ::Any) at ./boot.jl:331
   [18] exec_options(::Base.JLOptions) at ./client.jl:264
   [19] _start() at ./client.jl:484
  
Matrix: Error During Test at /home/pkgeval/.julia/packages/MultivariatePolynomials/H6NUw/test/mutable_arithmetics.jl:60
  Got exception outside of a @test
  MethodError: convert(::Type{Term{Int64,M} where M<:Monomial}, ::Term{Int64,Monomial{(x,),1}}) is ambiguous. Candidates:
    convert(TT::Type{#s15} where #s15<:AbstractTerm{T}, t::AbstractTerm) where T in MultivariatePolynomials at /home/pkgeval/.julia/packages/MultivariatePolynomials/H6NUw/src/conversion.jl:43
    convert(::Type{T}, t::T) where T<:AbstractTerm in MultivariatePolynomials at /home/pkgeval/.julia/packages/MultivariatePolynomials/H6NUw/src/conversion.jl:46
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] setindex!(::Array{Term{Int64,M} where M<:Monomial,1}, ::Term{Int64,Monomial{(x,),1}}, ::Int64) at ./array.jl:826
   [2] getindex(::Tuple{Term{Int64,Monomial{(x,),1}},Term{Int64,Monomial{(y,),1}},Term{Int64,Monomial{(x,),1}},Term{Int64,Monomial{(x, y),2}}}, ::UnitRange{Int64}) at ./range.jl:296
   [3] typed_hvcat(::Type{Term{Int64,Monomial{(x, y),2}}}, ::Tuple{Int64,Int64}, ::Term{Int64,Monomial{(x,),1}}, ::Vararg{Any,N} where N) at ./abstractarray.jl:1737
   [4] hvcat at ./abstractarray.jl:1715 [inlined]
   [5] macro expansion at /home/pkgeval/.julia/packages/MultivariatePolynomials/H6NUw/test/mutable_arithmetics.jl:61 [inlined]
   [6] macro expansion at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113 [inlined]
   [7] all_tests(::Term{Int64,Monomial{(x,),1}}, ::Term{Int64,Monomial{(y,),1}}, ::Term{Int64,Monomial{(x,),1}}, ::Term{Int64,Monomial{(x, y),2}}, ::Term{Int64,Monomial{(x,),1}}, ::Term{Int64,Monomial{(x,),1}}, ::Term{Int64,Monomial{(x,),1}}) at /home/pkgeval/.julia/packages/MultivariatePolynomials/H6NUw/test/mutable_arithmetics.jl:61
   [8] macro expansion at /home/pkgeval/.julia/packages/MultivariatePolynomials/H6NUw/test/mutable_arithmetics.jl:104 [inlined]
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1186 [inlined]
   [10] top-level scope at /home/pkgeval/.julia/packages/MultivariatePolynomials/H6NUw/test/mutable_arithmetics.jl:0
   [11] include(::String) at ./client.jl:439
   [12] top-level scope at /home/pkgeval/.julia/packages/MultivariatePolynomials/H6NUw/test/commutativetests.jl:1
   [13] include(::String) at ./client.jl:439
   [14] top-level scope at /home/pkgeval/.julia/packages/TypedPolynomials/MgblR/test/runtests.jl:63
   [15] include(::String) at ./client.jl:439
   [16] top-level scope at none:6
   [17] eval(::Module, ::Any) at ./boot.jl:331
   [18] exec_options(::Base.JLOptions) at ./client.jl:264
   [19] _start() at ./client.jl:484
  
Test Summary:                          | Pass  Error  Broken  Total
MutableArithmetics with terms in Int64 | 5232      2      14   5248
  Scalar                               |  546             14    560
  Quadratic                            | 2856                  2856
  Sparse                               |           1              1
  Vector                               | 1805                  1805
  Matrix                               |           1              1
Test Summary:                          | Pass  Error  Broken  Total
MutableArithmetics with terms in Int64 | 5232      2      14   5248
  Scalar                               |  546             14    560
  Quadratic                            | 2856                  2856
  Sparse                               |           1              1
  Vector                               | 1805                  1805
  Matrix                               |           1              1
ERROR: LoadError: LoadError: LoadError: Some tests did not pass: 5232 passed, 0 failed, 2 errored, 14 broken.
in expression starting at /home/pkgeval/.julia/packages/MultivariatePolynomials/H6NUw/test/mutable_arithmetics.jl:91
in expression starting at /home/pkgeval/.julia/packages/MultivariatePolynomials/H6NUw/test/commutativetests.jl:1
in expression starting at /home/pkgeval/.julia/packages/TypedPolynomials/MgblR/test/runtests.jl:63
caused by [exception 1]
Some tests did not pass: 5232 passed, 0 failed, 2 errored, 14 broken.
ERROR: Package TypedPolynomials errored during testing
Stacktrace:
 [1] pkgerror(::String, ::Vararg{String,N} where N) at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/Types.jl:53
 [2] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/Operations.jl:1510
 [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:316
 [4] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:303
 [5] #test#68 at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:297 [inlined]
 [6] test at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:297 [inlined]
 [7] #test#67 at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:296 [inlined]
 [8] test at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:296 [inlined]
 [9] test(::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:295
 [10] test(::String) at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:295
 [11] top-level scope at none:16
