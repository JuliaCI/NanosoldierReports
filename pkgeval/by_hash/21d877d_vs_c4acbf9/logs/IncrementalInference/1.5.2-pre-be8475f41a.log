Julia Version 1.5.2-pre.25
Commit be8475f41a (2020-09-09 06:41 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed JSON2 ──────────────────────── v0.3.2
  Installed Unmarshal ──────────────────── v0.4.0
  Installed Requires ───────────────────── v1.0.2
  Installed HTTP ───────────────────────── v0.8.17
  Installed LazyJSON ───────────────────── v0.2.1
  Installed IncrementalInference ───────── v0.15.2
  Installed DataFrames ─────────────────── v0.21.7
  Installed DistributedFactorGraphs ────── v0.10.2
  Installed FunctionalStateMachine ─────── v0.2.7
  Installed DocStringExtensions ────────── v0.8.3
  Installed DataValueInterfaces ────────── v1.0.0
  Installed UnPack ─────────────────────── v1.0.2
  Installed VectorizationBase ──────────── v0.12.33
  Installed FileIO ─────────────────────── v1.4.3
  Installed ArnoldiMethod ──────────────── v0.0.4
  Installed LineSearches ───────────────── v7.1.0
  Installed DataAPI ────────────────────── v1.3.0
  Installed Zlib_jll ───────────────────── v1.2.11+16
  Installed PooledArrays ───────────────── v0.5.3
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed SortingAlgorithms ──────────── v0.3.1
  Installed MetaGraphs ─────────────────── v0.6.5
  Installed SimpleTraits ───────────────── v0.9.3
  Installed Parameters ─────────────────── v0.12.1
  Installed StatsBase ──────────────────── v0.33.1
  Installed Colors ─────────────────────── v0.11.2
  Installed NLsolve ────────────────────── v4.4.1
  Installed Rmath ──────────────────────── v0.6.1
  Installed MbedTLS ────────────────────── v1.0.2
  Installed Rmath_jll ──────────────────── v0.2.2+1
  Installed CpuId ──────────────────────── v0.2.2
  Installed Parsers ────────────────────── v1.0.10
  Installed FillArrays ─────────────────── v0.8.14
  Installed TranscodingStreams ─────────── v0.9.5
  Installed TimeZones ──────────────────── v1.3.2
  Installed Mocking ────────────────────── v0.7.1
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed DiffResults ────────────────── v1.0.2
  Installed CodecZlib ──────────────────── v0.7.0
  Installed TableTraits ────────────────── v1.0.0
  Installed KernelDensityEstimate ──────── v0.5.2
  Installed CoordinateTransformations ──── v0.6.0
  Installed NLSolversBase ──────────────── v7.7.0
  Installed Graphs ─────────────────────── v0.10.3
  Installed Optim ──────────────────────── v0.22.0
  Installed LightGraphs ────────────────── v1.3.3
  Installed NaNMath ────────────────────── v0.3.4
  Installed Libiconv_jll ───────────────── v1.16.0+6
  Installed Combinatorics ──────────────── v1.0.2
  Installed ArrayInterface ─────────────── v2.12.0
  Installed SpecialFunctions ───────────── v0.10.3
  Installed IteratorInterfaceExtensions ── v1.0.0
  Installed OrderedCollections ─────────── v1.3.0
  Installed Compat ─────────────────────── v3.15.0
  Installed EzXML ──────────────────────── v1.1.0
  Installed DiffRules ──────────────────── v1.0.1
  Installed SLEEFPirates ───────────────── v0.5.5
  Installed Neo4j ──────────────────────── v2.0.0
  Installed InvertedIndices ────────────── v1.0.0
  Installed FixedPointNumbers ──────────── v0.7.1
  Installed MacroTools ─────────────────── v0.5.5
  Installed PDMats ─────────────────────── v0.10.0
  Installed JSON ───────────────────────── v0.21.1
  Installed Nullables ──────────────────── v1.0.0
  Installed JLD2 ───────────────────────── v0.1.14
  Installed QuadGK ─────────────────────── v2.4.1
  Installed Missings ───────────────────── v0.4.4
  Installed PositiveFactorizations ─────── v0.2.3
  Installed ColorTypes ─────────────────── v0.9.1
  Installed Tables ─────────────────────── v1.0.5
  Installed TransformUtils ─────────────── v0.2.6
  Installed StatsFuns ──────────────────── v0.9.5
  Installed ApproxManifoldProducts ─────── v0.1.4
  Installed ForwardDiff ────────────────── v0.10.12
  Installed CategoricalArrays ──────────── v0.8.2
  Installed StaticArrays ───────────────── v0.12.4
  Installed StructTypes ────────────────── v1.1.0
  Installed ExprTools ──────────────────── v0.1.2
  Installed SIMDPirates ────────────────── v0.8.25
  Installed ProgressMeter ──────────────── v1.3.2
  Installed Inflate ────────────────────── v0.1.2
  Installed RecipesBase ────────────────── v1.0.2
  Installed CommonSubexpressions ───────── v0.3.0
  Installed DataStructures ─────────────── v0.17.20
  Installed Reexport ───────────────────── v0.2.0
  Installed XML2_jll ───────────────────── v2.9.10+2
  Installed MbedTLS_jll ────────────────── v2.16.8+0
  Installed IniFile ────────────────────── v0.5.0
  Installed FiniteDiff ─────────────────── v2.6.0
  Installed Distances ──────────────────── v0.9.0
  Installed Distributions ──────────────── v0.23.8
Updating `~/.julia/environments/v1.5/Project.toml`
  [904591bb] + IncrementalInference v0.15.2
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [9bbbb610] + ApproxManifoldProducts v0.1.4
  [ec485272] + ArnoldiMethod v0.0.4
  [4fba245c] + ArrayInterface v2.12.0
  [324d7699] + CategoricalArrays v0.8.2
  [944b1d66] + CodecZlib v0.7.0
  [3da002f7] + ColorTypes v0.9.1
  [5ae59095] + Colors v0.11.2
  [861a8166] + Combinatorics v1.0.2
  [bbf7d656] + CommonSubexpressions v0.3.0
  [34da2185] + Compat v3.15.0
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [150eb455] + CoordinateTransformations v0.6.0
  [adafc99b] + CpuId v0.2.2
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.21.7
  [864edb3b] + DataStructures v0.17.20
  [e2d170a0] + DataValueInterfaces v1.0.0
  [163ba53b] + DiffResults v1.0.2
  [b552c78f] + DiffRules v1.0.1
  [b4f34e82] + Distances v0.9.0
  [b5cc3c7e] + DistributedFactorGraphs v0.10.2
  [31c24e10] + Distributions v0.23.8
  [ffbed154] + DocStringExtensions v0.8.3
  [e2ba6199] + ExprTools v0.1.2
  [8f5d6c58] + EzXML v1.1.0
  [5789e2e9] + FileIO v1.4.3
  [1a297f60] + FillArrays v0.8.14
  [6a86dc24] + FiniteDiff v2.6.0
  [53c48c17] + FixedPointNumbers v0.7.1
  [f6369f11] + ForwardDiff v0.10.12
  [3e9e306e] + FunctionalStateMachine v0.2.7
  [86223c79] + Graphs v0.10.3
  [cd3eb016] + HTTP v0.8.17
  [904591bb] + IncrementalInference v0.15.2
  [d25df0c9] + Inflate v0.1.2
  [83e8ac13] + IniFile v0.5.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [033835bb] + JLD2 v0.1.14
  [682c06a0] + JSON v0.21.1
  [2535ab7d] + JSON2 v0.3.2
  [2472808a] + KernelDensityEstimate v0.5.2
  [fc18253b] + LazyJSON v0.2.1
  [94ce4f54] + Libiconv_jll v1.16.0+6
  [093fc24a] + LightGraphs v1.3.3
  [d3d80556] + LineSearches v7.1.0
  [1914dd2f] + MacroTools v0.5.5
  [739be429] + MbedTLS v1.0.2
  [c8ffd9c3] + MbedTLS_jll v2.16.8+0
  [626554b9] + MetaGraphs v0.6.5
  [e1d29d7a] + Missings v0.4.4
  [78c3b35d] + Mocking v0.7.1
  [d41bc354] + NLSolversBase v7.7.0
  [2774e3e8] + NLsolve v4.4.1
  [77ba4419] + NaNMath v0.3.4
  [d2adbeaf] + Neo4j v2.0.0
  [4d1e1d77] + Nullables v1.0.0
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [429524aa] + Optim v0.22.0
  [bac558e1] + OrderedCollections v1.3.0
  [90014a1f] + PDMats v0.10.0
  [d96e819e] + Parameters v0.12.1
  [69de0a69] + Parsers v1.0.10
  [2dfb63ee] + PooledArrays v0.5.3
  [85a6dd25] + PositiveFactorizations v0.2.3
  [92933f4c] + ProgressMeter v1.3.2
  [1fd47b50] + QuadGK v2.4.1
  [3cdcf5f2] + RecipesBase v1.0.2
  [189a3867] + Reexport v0.2.0
  [ae029012] + Requires v1.0.2
  [79098fc4] + Rmath v0.6.1
  [f50d1b31] + Rmath_jll v0.2.2+1
  [21efa798] + SIMDPirates v0.8.25
  [476501e8] + SLEEFPirates v0.5.5
  [699a6c99] + SimpleTraits v0.9.3
  [a2af1166] + SortingAlgorithms v0.3.1
  [276daf66] + SpecialFunctions v0.10.3
  [90137ffa] + StaticArrays v0.12.4
  [2913bbd2] + StatsBase v0.33.1
  [4c63d2b9] + StatsFuns v0.9.5
  [856f2bd8] + StructTypes v1.1.0
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.5
  [f269a46b] + TimeZones v1.3.2
  [3bb67fe8] + TranscodingStreams v0.9.5
  [9b8138ad] + TransformUtils v0.2.6
  [3a884ed6] + UnPack v1.0.2
  [cbff2730] + Unmarshal v0.4.0
  [3d5dd08c] + VectorizationBase v0.12.33
  [02c8fc9c] + XML2_jll v2.9.10+2
  [83775a58] + Zlib_jll v1.2.11+16
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [4607b0f0] + SuiteSparse
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
   Building TimeZones ───→ `~/.julia/packages/TimeZones/v0mfN/deps/build.log`
   Building SLEEFPirates → `~/.julia/packages/SLEEFPirates/jGsib/deps/build.log`
    Testing IncrementalInference
Status `/tmp/jl_Uo6dDU/Project.toml`
  [9bbbb610] ApproxManifoldProducts v0.1.4
  [861a8166] Combinatorics v1.0.2
  [b5cc3c7e] DistributedFactorGraphs v0.10.2
  [31c24e10] Distributions v0.23.8
  [ffbed154] DocStringExtensions v0.8.3
  [5789e2e9] FileIO v1.4.3
  [3e9e306e] FunctionalStateMachine v0.2.7
  [86223c79] Graphs v0.10.3
  [904591bb] IncrementalInference v0.15.2
  [033835bb] JLD2 v0.1.14
  [2535ab7d] JSON2 v0.3.2
  [2472808a] KernelDensityEstimate v0.5.2
  [626554b9] MetaGraphs v0.6.5
  [d41bc354] NLSolversBase v7.7.0
  [2774e3e8] NLsolve v4.4.1
  [429524aa] Optim v0.22.0
  [92933f4c] ProgressMeter v1.3.2
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v1.0.2
  [2913bbd2] StatsBase v0.33.1
  [f269a46b] TimeZones v1.3.2
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [4607b0f0] SuiteSparse
  [8dfed614] Test
Status `/tmp/jl_Uo6dDU/Manifest.toml`
  [9bbbb610] ApproxManifoldProducts v0.1.4
  [ec485272] ArnoldiMethod v0.0.4
  [4fba245c] ArrayInterface v2.12.0
  [324d7699] CategoricalArrays v0.8.2
  [944b1d66] CodecZlib v0.7.0
  [3da002f7] ColorTypes v0.9.1
  [5ae59095] Colors v0.11.2
  [861a8166] Combinatorics v1.0.2
  [bbf7d656] CommonSubexpressions v0.3.0
  [34da2185] Compat v3.15.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [150eb455] CoordinateTransformations v0.6.0
  [adafc99b] CpuId v0.2.2
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.21.7
  [864edb3b] DataStructures v0.17.20
  [e2d170a0] DataValueInterfaces v1.0.0
  [163ba53b] DiffResults v1.0.2
  [b552c78f] DiffRules v1.0.1
  [b4f34e82] Distances v0.9.0
  [b5cc3c7e] DistributedFactorGraphs v0.10.2
  [31c24e10] Distributions v0.23.8
  [ffbed154] DocStringExtensions v0.8.3
  [e2ba6199] ExprTools v0.1.2
  [8f5d6c58] EzXML v1.1.0
  [5789e2e9] FileIO v1.4.3
  [1a297f60] FillArrays v0.8.14
  [6a86dc24] FiniteDiff v2.6.0
  [53c48c17] FixedPointNumbers v0.7.1
  [f6369f11] ForwardDiff v0.10.12
  [3e9e306e] FunctionalStateMachine v0.2.7
  [86223c79] Graphs v0.10.3
  [cd3eb016] HTTP v0.8.17
  [904591bb] IncrementalInference v0.15.2
  [d25df0c9] Inflate v0.1.2
  [83e8ac13] IniFile v0.5.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [033835bb] JLD2 v0.1.14
  [682c06a0] JSON v0.21.1
  [2535ab7d] JSON2 v0.3.2
  [2472808a] KernelDensityEstimate v0.5.2
  [fc18253b] LazyJSON v0.2.1
  [94ce4f54] Libiconv_jll v1.16.0+6
  [093fc24a] LightGraphs v1.3.3
  [d3d80556] LineSearches v7.1.0
  [1914dd2f] MacroTools v0.5.5
  [739be429] MbedTLS v1.0.2
  [c8ffd9c3] MbedTLS_jll v2.16.8+0
  [626554b9] MetaGraphs v0.6.5
  [e1d29d7a] Missings v0.4.4
  [78c3b35d] Mocking v0.7.1
  [d41bc354] NLSolversBase v7.7.0
  [2774e3e8] NLsolve v4.4.1
  [77ba4419] NaNMath v0.3.4
  [d2adbeaf] Neo4j v2.0.0
  [4d1e1d77] Nullables v1.0.0
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [429524aa] Optim v0.22.0
  [bac558e1] OrderedCollections v1.3.0
  [90014a1f] PDMats v0.10.0
  [d96e819e] Parameters v0.12.1
  [69de0a69] Parsers v1.0.10
  [2dfb63ee] PooledArrays v0.5.3
  [85a6dd25] PositiveFactorizations v0.2.3
  [92933f4c] ProgressMeter v1.3.2
  [1fd47b50] QuadGK v2.4.1
  [3cdcf5f2] RecipesBase v1.0.2
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v1.0.2
  [79098fc4] Rmath v0.6.1
  [f50d1b31] Rmath_jll v0.2.2+1
  [21efa798] SIMDPirates v0.8.25
  [476501e8] SLEEFPirates v0.5.5
  [699a6c99] SimpleTraits v0.9.3
  [a2af1166] SortingAlgorithms v0.3.1
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.4
  [2913bbd2] StatsBase v0.33.1
  [4c63d2b9] StatsFuns v0.9.5
  [856f2bd8] StructTypes v1.1.0
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.5
  [f269a46b] TimeZones v1.3.2
  [3bb67fe8] TranscodingStreams v0.9.5
  [9b8138ad] TransformUtils v0.2.6
  [3a884ed6] UnPack v1.0.2
  [cbff2730] Unmarshal v0.4.0
  [3d5dd08c] VectorizationBase v0.12.33
  [02c8fc9c] XML2_jll v2.9.10+2
  [83775a58] Zlib_jll v1.2.11+16
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [4607b0f0] SuiteSparse
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
[ Info: Multithreaded  convolutions possible, Threads.nthreads()=2.  See `addFactor!(.;threadmodel=MultiThreaded)`.
[ Info: KernelDensityEstimate.FORCE_EVAL_DIRECT = true
[ Info: KernelDensityEstimate.FORCE_EVAL_DIRECT = true
[ Info: FunctionalStateMachine.jl is adding Graphs.jl related tools (Visualization).
[ Info: Including InteractiveUtils related functions in IncrementalInference.
evalPotential sees SecondType(1)
evalPotential also sees SecondAgain(3)
evalPotential sees SecondType(1)
evalPotential sees SecondType(1)
evalPotential also sees SecondAgain(3)
Check the speed is reasonable
Test Summary:                  | Pass  Total
out of module evalPotential... |    3      3
FSM , iter=1 -- foo!
do foo!
FSM , iter=2 -- bar!
do bar!
FSM , iter=3 -- exitStateMachine
do foo!
do bar!
do foo!
do foo!
FSM , iter=1 -- bar!
do bar!
FSM , iter=2 -- exitStateMachine
Test Summary:                       | Pass  Total
Test IIF's generic state machine... |    5      5
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
┌ Warning: updateVariableSolverData with solveKey parameter might change in the future, see DFG #565. Future warnings are suppressed
└ @ DistributedFactorGraphs ~/.julia/packages/DistributedFactorGraphs/pmAdz/src/services/DFGVariable.jl:522
[ Info: try doautoinit! of x1
[ Info: x0
[ Info: x1
[ Info: x0
[ Info: x1
┌ Warning: compareFactorGraphs will skip comparisons on: [:g, :bn, :IDs, :fIDs, :id, :nodeIDs, :factorIDs, :fifo, :solverParams, :factorOperationalMemoryType]
└ @ DistributedFactorGraphs ~/.julia/packages/DistributedFactorGraphs/pmAdz/src/services/CompareUtils.jl:388
[ Info: x0
[ Info: x1
┌ Warning: compareFactorGraphs will skip comparisons on: [:g, :bn, :IDs, :fIDs, :id, :nodeIDs, :factorIDs, :fifo, :solverParams, :factorOperationalMemoryType]
└ @ DistributedFactorGraphs ~/.julia/packages/DistributedFactorGraphs/pmAdz/src/services/CompareUtils.jl:388
[ Info: x0
[ Info: x1
[ Info: ensure all initialized (using graphinit)
[ Info: x1 is not initialized, and will do so now...
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x0x1f1]
[ Info: do init of x1
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
[ Info: Do tree based init-inference on tree
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
┌ Warning: `putCliqueMsgDown!(cdata::BayesTreeNodeData, msg::LikelihoodMessage; from::Symbol = :nothing)` is deprecated, use `putMsgDwnThis!(cdata, msg, from = from)` instead.
│   caller = ip:0x0
└ @ Core :-1
[ Info: transferUpdateSubGraph! -- syms=[:x0, :x1]
[ Info: Finished tree based init-inference
[ Info: x0
[ Info: x1
┌ Warning: compareFactorGraphs will skip comparisons on: [:g, :bn, :IDs, :fIDs, :id, :nodeIDs, :factorIDs, :fifo, :solverParams, :factorOperationalMemoryType]
└ @ DistributedFactorGraphs ~/.julia/packages/DistributedFactorGraphs/pmAdz/src/services/CompareUtils.jl:388
[ Info: x0
[ Info: x1
┌ Warning: compareFactorGraphs will skip comparisons on: [:g, :bn, :IDs, :fIDs, :id, :nodeIDs, :factorIDs, :fifo, :solverParams, :factorOperationalMemoryType]
└ @ DistributedFactorGraphs ~/.julia/packages/DistributedFactorGraphs/pmAdz/src/services/CompareUtils.jl:388
[ Info: x0
[ Info: x1
[ Info: x1 is not initialized, and will do so now...
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x0x1f1]
[ Info: do init of x1
[ Info: x0
[ Info: x1
[ Info: x0
[ Info: x1

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
┌ Error: Suppressing one specific factor graph compare test post DFG v0.6.0 due to unknown (likely false) compare failure
└ @ Main ~/.julia/packages/IncrementalInference/BWQe4/test/testCompareVariablesFactors.jl:69
Test Summary:                                          | Pass  Total
testing compare functions for variables and factors... |   20     20
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: try doautoinit! of x1
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x0x1f1]
[ Info: do init of x1
[ Info: try doautoinit! of x2
[ Info: try doautoinit! of l1
┌ Warning: Factor x1l1f1 will be an orphan in the destination graph, and therefore not added.
└ @ DistributedFactorGraphs ~/.julia/packages/DistributedFactorGraphs/pmAdz/src/services/AbstractDFG.jl:960
┌ Warning: Factor x1x2f1 will be an orphan in the destination graph, and therefore not added.
└ @ DistributedFactorGraphs ~/.julia/packages/DistributedFactorGraphs/pmAdz/src/services/AbstractDFG.jl:960
┌ Warning: compareFactorGraphs will skip comparisons on: [:g, :bn, :IDs, :fIDs, :id, :nodeIDs, :factorIDs, :fifo, :solverParams, :factorOperationalMemoryType, :labelDict, :addHistory, :logpath, :sessionId]
└ @ DistributedFactorGraphs ~/.julia/packages/DistributedFactorGraphs/pmAdz/src/services/CompareUtils.jl:388
[ Info: x0
[ Info: x1
Test Summary:              | Pass  Total
test subgraph functions... |    2      2
Test Summary:                               | Pass  Total
Ensure memory return is working properly... |    1      1
Test Summary:   | Pass  Total
test the basics |    2      2
[ Info: try doautoinit! of x0
[ Info: ensure all initialized (using graphinit)
[ Info: x0 is not initialized, and will do so now...
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
[ Info: Do tree based init-inference on tree
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
[ Info: transferUpdateSubGraph! -- syms=[:x0]
[ Info: Finished tree based init-inference
Test Summary:      | Pass  Total
test mixture prior |    3      3
[ Info: try doautoinit! of x0
┌ Warning: Softtype ContinuousMultivariate{Tuple{Symbol,Symbol}}, field dims is deprecated, extend and use `getDimension` instead
│   caller = getDimension at FGOSUtils.jl:44 [inlined]
└ @ Core ~/.julia/packages/IncrementalInference/BWQe4/src/FGOSUtils.jl:44
[ Info: try doautoinit! of x1
Test Summary:                             | Pass  Total
testing basic partial factor functions... |    2      2
[ Info: try doautoinit! of x1
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x1f1]
[ Info: do init of x1
[ Info: try doautoinit! of x2
[ Info: try doautoinit! of x2
[ Info: init with useinitfct [:x1x2f1]
[ Info: do init of x2
[ Info: try doautoinit! of x3
[ Info: try doautoinit! of l1
[ Info: try doautoinit! of l1
[ Info: init with useinitfct [:x1l1f1, :x2l1f1]
[ Info: do init of l1
[ Info: [2x0p,d1,N100],
[ Info: try doautoinit! of x3
[ Info: init with useinitfct [:x2x3f1]
[ Info: do init of x3
[ Info: try doautoinit! of l2
Test Summary:                 |
basic Bayes tree construction | No tests

Building Bayes net...
Find potential functions for each clique
Test Summary:             | Pass  Total
test building tree native |    1      1
┌ Warning: add test tree verification
└ @ Main ~/.julia/packages/IncrementalInference/BWQe4/test/testBayesTreeiSAM2Example.jl:75

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
Test Summary:            |
build tree from ordering | No tests
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: try doautoinit! of x1
[ Info: ensure all initialized (using graphinit)
[ Info: x1 is not initialized, and will do so now...
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x0x1f1]
[ Info: do init of x1
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
[ Info: Do tree based init-inference on tree
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
[ Info: transferUpdateSubGraph! -- syms=[:x0, :x1]
[ Info: Finished tree based init-inference
Test Summary:                        | Pass  Total
test specialSampler functionality... |    6      6
[ Info: try doautoinit! of x2
[ Info: init with useinitfct Symbol[]
[ Info: try doautoinit! of x3
[ Info: init with useinitfct Symbol[]
[ Info: try doautoinit! of x4
[ Info: Folder '/tmp/dfg_test' doesn't exist, creating...
sfolder = split(dstname, '.') = SubString{String}["/tmp/dfg_test", "tar", "gz"]
[ Info: loadDFG! detected a gzip /tmp/dfg_test.tar.gz -- unpacking via /tmp/caesar/random/7df41f44 now...
[ Info: Loaded 6 variables - [:l1, :l2, :x1, :x2, :x3, :x4]
[ Info: Inserting variables into graph...
[ Info: Loaded 6 factors - [:x1f1, :x1l1f1, :x1x2f1, :x2l1f1, :x2x3f1, :x2x3x4f1, :x3l2f1]
[ Info: Inserting factors into graph...
[ Info: Rebuilding CCW's for the factors...
[ Info: DFG.loadDFG! is deleting a temp folder created during unzip, /tmp/caesar/random/7df41f44
(getFactor(fg, :x2x3x4f1)).solverData.multihypo = [0.0, 0.6, 0.4]
(getFactor(retDFG, :x2x3x4f1)).solverData.multihypo = [0.0, 0.6, 0.4]
Test Summary:                      | Pass  Total
saving to and loading from FileDFG |    4      4
[ Info: try doautoinit! of x2
[ Info: init with useinitfct Symbol[]
[ Info: try doautoinit! of x3
[ Info: init with useinitfct Symbol[]
[ Info: try doautoinit! of x4
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x1f1, :x1f2]
[ Info: do init of x1
[ Info: [2x0p,d1,N100],
[ Info: ensure all initialized (using graphinit)
[ Info: x2 is not initialized, and will do so now...
[ Info: try doautoinit! of x2
[ Info: init with useinitfct [:x1x2f1]
[ Info: do init of x2
[ Info: x3 is not initialized, and will do so now...
[ Info: try doautoinit! of x3
[ Info: allowing init from incomplete set of previously initialized hypotheses, fct=x2x3x4f1
[ Info: init with useinitfct [:x2x3f1, :x2x3x4f1]
[ Info: do init of x3
[ Info: not all hypotheses initialized, but at least one available -- see #427
[ Info: [2x0p,d1,N100],
[ Info: l1 is not initialized, and will do so now...
[ Info: try doautoinit! of l1
[ Info: init with useinitfct [:x1l1f1, :x2l1f1]
[ Info: do init of l1
[ Info: [2x0p,d1,N100],
[ Info: l2 is not initialized, and will do so now...
[ Info: try doautoinit! of l2
[ Info: init with useinitfct [:x3l2f1]
[ Info: do init of l2
[ Info: x4 is not initialized, and will do so now...
[ Info: try doautoinit! of x4
[ Info: init with useinitfct [:x2x3x4f1]
[ Info: do init of x4
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
[ Info: Do tree based init-inference on tree
[ Info: prepCliqInitMsgsUp, seps=[:x3]
[ Info: prepCliqInitMsgsUp, seps=[:x2]
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
[ Info: transferUpdateSubGraph! -- syms=[:x2, :x1, :l1]
[ Info: Finished tree based init-inference
[ Info: Folder '/tmp/dfg_test' doesn't exist, creating...
sfolder = split(dstname, '.') = SubString{String}["/tmp/dfg_test", "tar", "gz"]
[ Info: loadDFG! detected a gzip /tmp/dfg_test.tar.gz -- unpacking via /tmp/caesar/random/8df27128 now...
[ Info: Loaded 6 variables - [:l1, :l2, :x1, :x2, :x3, :x4]
[ Info: Inserting variables into graph...
[ Info: Loaded 6 factors - [:x1f1, :x1f2, :x1l1f1, :x1x2f1, :x2l1f1, :x2x3f1, :x2x3x4f1, :x3l2f1]
[ Info: Inserting factors into graph...
[ Info: Rebuilding CCW's for the factors...
[ Info: DFG.loadDFG! is deleting a temp folder created during unzip, /tmp/caesar/random/8df27128
(getFactor(fg, :x2x3x4f1)).solverData.multihypo = [0.0, 0.6, 0.4]
(getFactor(retDFG, :x2x3x4f1)).solverData.multihypo = [0.0, 0.6, 0.4]
Test Summary:                                                                 | Pass  Total
saving to and loading from FileDFG with nullhypo, eliminated, solveInProgress |    6      6

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
Test Summary:                              | Pass  Total
Variable ordering Bayes tree member check. |    2      2

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
Test Summary:                                  | Pass  Total
Test Caesar Ring 1D symbolic tree construction |   20     20

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
┌ Warning: TODO, complete further testing on tree formation
└ @ Main ~/.julia/packages/IncrementalInference/BWQe4/test/testJunctionTreeConstruction.jl:80

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
Test Summary:                           | Pass  Total
Test tree formation and consistent APIs |    1      1

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
Test Summary:                                    | Pass  Total
Test loading and saving of Bayes (Junction) tree |   11     11

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
Test Summary:                                    | Pass  Total
Test loading and saving of Bayes (Junction) tree |   11     11
Test Summary:                                                  | Pass  Total
Ensure converter types can be run from extending namespaces... |    1      1
Test Summary:                           | Pass  Total
hard-coded test of PackedPrior to Prior |    2      2
[ Info: try doautoinit! of x1
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x1f1]
[ Info: do init of x1
[ Info: try doautoinit! of x2
Test Summary:                                                      | Pass  Total
Testing conversion to packed function node data structure and back |    2      2
Test Summary:                                                      | Pass  Total
Testing conversion to packed variable node data structure and back |    4      4
Test Summary:                     | Pass  Total
Ensure lambda's work with NLsolve |    1      1
Test Summary:                                       |
minimalistic pattern on how NLsolve is used in IIF. | No tests
Test Summary:                                             | Pass  Total
test CommonConvWrapper{T}, solve of residual functions... |    1      1
Test Summary: | Pass  Total
FunctorWorks  |    1      1
a1 = [-1.0 0.8233886870344811 0.534816763447094; 0.17915920008957498 0.714519022020335 0.3971484196578994]
Test Summary: | Pass  Total
FunctorArray  |    1      1
  0.169947 seconds (183.54 k allocations: 9.517 MiB)
Test Summary:          | Pass  Total
CommonConvWrapper test |    2      2
  0.108954 seconds (57.62 k allocations: 2.887 MiB)
  0.004616 seconds (24.24 k allocations: 1.630 MiB)
Test Summary:                   | Pass  Total
Test in factor graph setting... |  102    102
zDim = size(measurement[1], 1) = 1
ccw.varidx = solvefor = 2
  1.204769 seconds (931.91 k allocations: 45.533 MiB, 9.27% gc time)
and in the reverse direction, achieved by simply changing CommonConvWrapper.varidx to 1...
ccw.varidx = solvefor = 1
  0.003432 seconds (9.35 k allocations: 660.250 KiB)
Test Summary:                                               | Pass  Total
Test with CommonConvWrapper for un-permuted root finding... |    4      4
┌ Warning: test not implemented yet
└ @ Main ~/.julia/packages/IncrementalInference/BWQe4/test/testCommonConvWrapper.jl:260
Test Summary:                                                   |
Test with FastRootGenericWrapParam for permuted root finding... | No tests
[ Info: try doautoinit! of x1
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x1f1]
[ Info: do init of x1
[ Info: try doautoinit! of x2

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
[ Info: ensure all initialized (using graphinit)
[ Info: x2 is not initialized, and will do so now...
[ Info: try doautoinit! of x2
[ Info: init with useinitfct [:x1x2f1]
[ Info: do init of x2
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
[ Info: Do tree based init-inference on tree
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
[ Info: transferUpdateSubGraph! -- syms=[:x1, :x2]
[ Info: Finished tree based init-inference
Test Summary:                                          | Pass  Total
Generic convolution testing in factor graph context... |    4      4
[ Info: try doautoinit! of x1
[ Info: try doautoinit! of x1
Test Summary:                    | Pass  Total
Test basic convolution result... |    2      2
[ Info: try doautoinit! of x1
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x1f1]
[ Info: do init of x1
[ Info: try doautoinit! of x2
Test Summary:                            | Pass  Total
test default userdata::FactorMetadata... |    2      2
┌ Warning: labels is deprecated, use tags instead
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/BWQe4/src/FactorGraph.jl:431
┌ Warning: labels is deprecated, use tags instead
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/BWQe4/src/FactorGraph.jl:431
┌ Warning: labels is deprecated, use tags instead
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/BWQe4/src/FactorGraph.jl:431
[ Info: try doautoinit! of a
[ Info: try doautoinit! of b
[ Info: try doautoinit! of b
[ Info: init with useinitfct Symbol[]
[ Info: try doautoinit! of c
[ Info: try doautoinit! of a
[ Info: init with useinitfct [:af1]
[ Info: do init of a
[ Info: b is not initialized, and will do so now...
[ Info: try doautoinit! of b
[ Info: init with useinitfct [:abf1]
[ Info: do init of b
[ Info: c is not initialized, and will do so now...
[ Info: try doautoinit! of c
[ Info: init with useinitfct [:bcf1]
[ Info: do init of c
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
[ Info: Do tree based init-inference on tree
[ Info: prepCliqInitMsgsUp, seps=[:b]
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
[ Info: transferUpdateSubGraph! -- syms=[:a, :b]
[ Info: Finished tree based init-inference
Test Summary:                              | Pass  Total
test basic three variable graph with prior |    1      1

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
Test Summary:                       | Pass  Total
Test clique factors, #458 Example 1 |   14     14
┌ Warning: Test for Example 2 from 458 must still be coded.
└ @ Main ~/.julia/packages/IncrementalInference/BWQe4/test/testCliqueFactors.jl:104

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
Test Summary:                       | Pass  Total
Test clique factors, #458 Example 2 |   10     10
[ Info: try doautoinit! of x0

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
Test Summary:                                        | Pass  Total
Test cliqueSubgraph frontals, seperators, potentials |   10     10
┌ Warning: Ccolamd is experimental in IIF at this point in time.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/BWQe4/src/FactorGraph.jl:1146
┌ Warning: Ccolamd is experimental in IIF at this point in time.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/BWQe4/src/FactorGraph.jl:1146
┌ Warning: Ccolamd is experimental in IIF at this point in time.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/BWQe4/src/FactorGraph.jl:1146
Test Summary:                                  | Pass  Total
Test ccolamd for constrained variable ordering |    4      4
[ Info: try doautoinit! of x0
[ Info: ensure all initialized (using graphinit)
[ Info: x0 is not initialized, and will do so now...
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
[ Info: Do tree based init-inference on tree
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
[ Info: transferUpdateSubGraph! -- syms=[:x0]
[ Info: Finished tree based init-inference
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
[ Info: Do tree based init-inference on tree
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
[ Info: transferUpdateSubGraph! -- syms=[:x0]
[ Info: Finished tree based init-inference
┌ Warning: solveTree! dissallows solvable variables without any connected solvable factors -- forcing solvable=0 on [:x1]
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/BWQe4/src/FactorGraph.jl:957
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.
[ Info: storeOld=true, previous :default deepcopied into default_0 for solvable==1 variables.

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
[ Info: Do tree based init-inference on tree
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
[ Info: transferUpdateSubGraph! -- syms=[:x0]
[ Info: Finished tree based init-inference
Test Summary:                                      | Pass  Total
Test basic single variable graph with one prior... |    9      9
[ Info: try doautoinit! of x0
[ Info: ensure all initialized (using graphinit)
[ Info: x0 is not initialized, and will do so now...
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
[ Info: Do tree based init-inference on tree
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
[ Info: transferUpdateSubGraph! -- syms=[:x0]
[ Info: Finished tree based init-inference
Test Summary:                                                     | Pass  Total
Test basic single variable graph with one prior offset by 1000... |    2      2
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1, :x0f2]
[ Info: do init of x0
[ Info: [2x0p,d1,N100],
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
[ Info: Do tree based init-inference on tree
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
[ Info: transferUpdateSubGraph! -- syms=[:x0]
[ Info: Finished tree based init-inference
Test Summary:                                                 | Pass  Total
Test basic single variable graph with two identical priors... |    2      2
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1, :x0f2]
[ Info: do init of x0
[ Info: [2x0p,d1,N100],
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
[ Info: Do tree based init-inference on tree
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
[ Info: transferUpdateSubGraph! -- syms=[:x0]
[ Info: Finished tree based init-inference
Test Summary:                                                   | Pass  Total
Test basic single variable graph with three identical priors... |    2      2
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1, :x0f2]
[ Info: do init of x0
[ Info: [2x0p,d1,N100],
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
[ Info: Do tree based init-inference on tree
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
[ Info: transferUpdateSubGraph! -- syms=[:x0]
[ Info: Finished tree based init-inference
Test Summary:                                                    | Pass  Total
Test basic single variable graph with two priors at + and - 1... |    2      2
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1, :x0f2]
[ Info: do init of x0
[ Info: [2x0p,d1,N100],
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
[ Info: Do tree based init-inference on tree
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
[ Info: transferUpdateSubGraph! -- syms=[:x0]
[ Info: Finished tree based init-inference
Test Summary:                                                                     | Pass  Total
Test basic single variable graph with two priors at + and - 1, offset by -1000... |    2      2
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x1
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x1f1, :x0x1f1]
[ Info: do init of x1
[ Info: [2x0p,d1,N100],
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
[ Info: Do tree based init-inference on tree
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
[ Info: transferUpdateSubGraph! -- syms=[:x0, :x1]
[ Info: Finished tree based init-inference
Test Summary:                                                                  | Pass  Total
Test basic two variable graph with two identical priors and weak connection... |    4      4
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x1
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x1f1, :x0x1f1]
[ Info: do init of x1
[ Info: [2x0p,d1,N100],
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
[ Info: Do tree based init-inference on tree
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
[ Info: transferUpdateSubGraph! -- syms=[:x0, :x1]
[ Info: Finished tree based init-inference
Test Summary:                                                                  | Pass  Total
Test basic two variable graph with two separated priors and weak connection... |    4      4
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x2
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: try doautoinit! of x1
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x0x1f1]
[ Info: do init of x1
[ Info: try doautoinit! of x2
[ Info: init with useinitfct [:x2f1, :x1x2f1]
[ Info: do init of x2
[ Info: [2x0p,d1,N100],
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
[ Info: Do tree based init-inference on tree
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
[ Info: transferUpdateSubGraph! -- syms=[:x0, :x2, :x1]
[ Info: Finished tree based init-inference
Test Summary:                                                                    | Pass  Total
Test basic two variable graph with two separated priors and strong connection... |    6      6
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x4
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: try doautoinit! of x1
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x0x1f1]
[ Info: do init of x1
[ Info: try doautoinit! of x2
[ Info: try doautoinit! of x2
[ Info: init with useinitfct [:x1x2f1]
[ Info: do init of x2
[ Info: try doautoinit! of x3
[ Info: try doautoinit! of x3
[ Info: init with useinitfct [:x2x3f1]
[ Info: do init of x3
[ Info: try doautoinit! of x4
[ Info: init with useinitfct [:x4f1, :x3x4f1]
[ Info: do init of x4
[ Info: [2x0p,d1,N100],
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.
[ Info: storeOld=true, previous :default deepcopied into default_0 for solvable==1 variables.

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
[ Info: Do tree based init-inference on tree
[ Info: prepCliqInitMsgsUp, seps=[:x2]
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
[ Info: transferUpdateSubGraph! -- syms=[:x0, :x2, :x1]
[ Info: Finished tree based init-inference
[ Info: [2x0p,d1,N100],
[ Info: [2x0p,d1,N100],
Test Summary:                                                                      | Pass  Total
Test basic five variable graph with two separated priors and nominal connection... |    9      9
[ Info: try doautoinit! of x0
[ Info: x0 is not initialized, and will do so now...
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
[ Info: Do tree based init-inference on tree
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
[ Info: transferUpdateSubGraph! -- syms=[:x0]
[ Info: Finished tree based init-inference
Test Summary:               | Pass  Total
Test graph reset to init... |    2      2
[ Info: ensure all initialized (using graphinit)
[ Info: x0 is not initialized, and will do so now...
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: x1 is not initialized, and will do so now...
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x0x1f1]
[ Info: do init of x1
[ Info: x2 is not initialized, and will do so now...
[ Info: try doautoinit! of x2
[ Info: init with useinitfct [:x1x2f1]
[ Info: do init of x2
[ Info: x3 is not initialized, and will do so now...
[ Info: try doautoinit! of x3
[ Info: init with useinitfct [:x2x3f1]
[ Info: do init of x3
[ Info: x4 is not initialized, and will do so now...
[ Info: try doautoinit! of x4
[ Info: init with useinitfct [:x3x4f1]
[ Info: do init of x4
[ Info: x5 is not initialized, and will do so now...
[ Info: try doautoinit! of x5
[ Info: init with useinitfct [:x4x5f1]
[ Info: do init of x5
[ Info: x6 is not initialized, and will do so now...
[ Info: try doautoinit! of x6
[ Info: init with useinitfct [:x5x6f1]
[ Info: do init of x6
[ Info: l1 is not initialized, and will do so now...
[ Info: try doautoinit! of l1
[ Info: init with useinitfct [:x0l1f1, :x6l1f1]
[ Info: do init of l1
[ Info: [2x0p,d1,N100],
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
[ Info: Do tree based init-inference on tree
[ Info: prepCliqInitMsgsUp, seps=[:x0, :x6]
[ Info: prepCliqInitMsgsUp, seps=[:x0, :x2]
[ Info: prepCliqInitMsgsUp, seps=[:x4, :x6]
[ Info: prepCliqInitMsgsUp, seps=[:x2, :x4]
[ Info: prepCliqInitMsgsUp, seps=[:x2, :x6]
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
[ Info: transferUpdateSubGraph! -- syms=[:x0, :x6, :x2]
[ Info: Finished tree based init-inference
Test Summary:                       | Pass  Total
Testing default deconvolution tools |    3      3
[ Info: try doautoinit! of x1
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x1f1]
[ Info: do init of x1
[ Info: try doautoinit! of x2
Statistics.mean(pts, dims = 2) = [50.371256519172974]
[ Info: ensure all initialized (using graphinit)
[ Info: x2 is not initialized, and will do so now...
[ Info: try doautoinit! of x2
[ Info: init with useinitfct [:x1x2f1]
[ Info: do init of x2
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
[ Info: Do tree based init-inference on tree
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
[ Info: transferUpdateSubGraph! -- syms=[:x1, :x2]
[ Info: Finished tree based init-inference
Test Summary:                           | Pass  Total
test evaluation of pose pose constraint |    2      2
[ Info: try doautoinit! of x0
[ Info: ensure all initialized (using graphinit)
[ Info: x0 is not initialized, and will do so now...
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: lm0 is not initialized, and will do so now...
[ Info: try doautoinit! of lm0
[ Info: init with useinitfct [:x0lm0f1]
[ Info: do init of lm0
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
[ Info: Do tree based init-inference on tree
[ Info: writing logs/cliq1/csm.txt
[ Info: Finished tree based init-inference
Test Summary:                      | Pass  Total
basic per clique stopping criteria |    2      2
getLogPath(fg) = "/tmp/caesar/2020-09-09T15:54:13.514"
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
[ Info: Do tree based init-inference on tree
FSM cliq1, iter=1 -- testCliqCanRecycled_StateMachine
FSM cliq1, iter=2 -- testCliqCanIncremtUpdate_StateMachine!
FSM cliq1, iter=3 -- isCliqUpSolved_StateMachine
FSM cliq1, iter=4 -- buildCliqSubgraph_StateMachine
FSM cliq1, iter=5 -- isCliqNull_StateMachine
FSM cliq1, iter=6 -- doesCliqNeeddownmsg_StateMachine
FSM cliq1, iter=7 -- determineCliqNeedDownMsg_StateMachine
FSM cliq1, iter=8 -- slowCliqIfChildrenNotUpsolved_StateMachine
FSM cliq2, iter=1 -- testCliqCanRecycled_StateMachine
FSM cliq2, iter=2 -- testCliqCanIncremtUpdate_StateMachine!
FSM cliq2, iter=3 -- isCliqUpSolved_StateMachine
FSM cliq2, iter=4 -- buildCliqSubgraph_StateMachine
FSM cliq2, iter=5 -- isCliqNull_StateMachine
FSM cliq2, iter=6 -- doesCliqNeeddownmsg_StateMachine
FSM cliq2, iter=7 -- checkIfCliqNullBlock_StateMachine
FSM cliq2, iter=8 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM cliq2, iter=9 -- determineCliqNeedDownMsg_StateMachine
FSM cliq2, iter=10 -- slowCliqIfChildrenNotUpsolved_StateMachine
FSM cliq3, iter=1 -- testCliqCanRecycled_StateMachine
FSM cliq3, iter=2 -- testCliqCanIncremtUpdate_StateMachine!
FSM cliq3, iter=3 -- isCliqUpSolved_StateMachine
FSM cliq3, iter=4 -- buildCliqSubgraph_StateMachine
FSM cliq3, iter=5 -- isCliqNull_StateMachine
FSM cliq3, iter=6 -- doesCliqNeeddownmsg_StateMachine
FSM cliq3, iter=7 -- checkIfCliqNullBlock_StateMachine
FSM cliq3, iter=8 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM cliq3, iter=9 -- determineCliqNeedDownMsg_StateMachine
FSM cliq3, iter=10 -- getBetterName7b_StateMachine
FSM cliq4, iter=1 -- testCliqCanRecycled_StateMachine
FSM cliq4, iter=2 -- testCliqCanIncremtUpdate_StateMachine!
FSM cliq4, iter=3 -- isCliqUpSolved_StateMachine
FSM cliq4, iter=4 -- buildCliqSubgraph_StateMachine
FSM cliq4, iter=5 -- isCliqNull_StateMachine
FSM cliq4, iter=6 -- doesCliqNeeddownmsg_StateMachine
FSM cliq4, iter=7 -- checkIfCliqNullBlock_StateMachine
FSM cliq4, iter=8 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM cliq4, iter=9 -- determineCliqNeedDownMsg_StateMachine
FSM cliq4, iter=10 -- getBetterName7b_StateMachine
FSM cliq5, iter=1 -- testCliqCanRecycled_StateMachine
FSM cliq5, iter=2 -- testCliqCanIncremtUpdate_StateMachine!
FSM cliq5, iter=3 -- isCliqUpSolved_StateMachine
FSM cliq5, iter=4 -- buildCliqSubgraph_StateMachine
FSM cliq5, iter=5 -- isCliqNull_StateMachine
FSM cliq5, iter=6 -- doesCliqNeeddownmsg_StateMachine
FSM cliq5, iter=7 -- checkIfCliqNullBlock_StateMachine
FSM cliq5, iter=8 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM cliq5, iter=9 -- determineCliqNeedDownMsg_StateMachine
FSM cliq5, iter=10 -- getBetterName7b_StateMachine
FSM cliq6, iter=1 -- testCliqCanRecycled_StateMachine
FSM cliq6, iter=2 -- testCliqCanIncremtUpdate_StateMachine!
FSM cliq6, iter=3 -- isCliqUpSolved_StateMachine
FSM cliq6, iter=4 -- buildCliqSubgraph_StateMachine
FSM cliq6, iter=5 -- isCliqNull_StateMachine
FSM cliq6, iter=6 -- doesCliqNeeddownmsg_StateMachine
FSM cliq6, iter=7 -- checkIfCliqNullBlock_StateMachine
FSM cliq6, iter=8 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM cliq6, iter=9 -- determineCliqNeedDownMsg_StateMachine
FSM cliq6, iter=10 -- getBetterName7b_StateMachine
FSM cliq3, iter=11 -- attemptCliqInitUp_StateMachine
FSM cliq3, iter=12 -- mustInitUpCliq_StateMachine
[ Info: prepCliqInitMsgsUp, seps=[:x0, :x6]
FSM cliq4, iter=11 -- attemptCliqInitUp_StateMachine
FSM cliq4, iter=12 -- mustInitUpCliq_StateMachine
[ Info: prepCliqInitMsgsUp, seps=[:x0, :x2]
FSM cliq5, iter=11 -- attemptCliqInitUp_StateMachine
FSM cliq5, iter=12 -- mustInitUpCliq_StateMachine
[ Info: prepCliqInitMsgsUp, seps=[:x4, :x6]
FSM cliq6, iter=11 -- attemptCliqInitUp_StateMachine
FSM cliq6, iter=12 -- mustInitUpCliq_StateMachine
[ Info: prepCliqInitMsgsUp, seps=[:x2, :x4]
FSM cliq3, iter=13 -- rmUpLikeliSaveSubFg_StateMachine
FSM cliq3, iter=14 -- finishCliqSolveCheck_StateMachine
FSM cliq3, iter=15 -- isCliqNull_StateMachine
FSM cliq3, iter=16 -- doesCliqNeeddownmsg_StateMachine
FSM cliq3, iter=17 -- untilDownMsgChildren_StateMachine
FSM cliq3, iter=18 -- blockUntilSiblingsStatus_StateMachine
FSM cliq3, iter=19 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM cliq3, iter=20 -- determineCliqNeedDownMsg_StateMachine
FSM cliq3, iter=21 -- getBetterName7b_StateMachine
FSM cliq4, iter=13 -- rmUpLikeliSaveSubFg_StateMachine
FSM cliq4, iter=14 -- finishCliqSolveCheck_StateMachine
FSM cliq4, iter=15 -- isCliqNull_StateMachine
FSM cliq4, iter=16 -- doesCliqNeeddownmsg_StateMachine
FSM cliq4, iter=17 -- untilDownMsgChildren_StateMachine
FSM cliq4, iter=18 -- blockUntilSiblingsStatus_StateMachine
FSM cliq4, iter=19 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM cliq4, iter=20 -- determineCliqNeedDownMsg_StateMachine
FSM cliq4, iter=21 -- getBetterName7b_StateMachine
FSM cliq5, iter=13 -- rmUpLikeliSaveSubFg_StateMachine
FSM cliq5, iter=14 -- finishCliqSolveCheck_StateMachine
FSM cliq5, iter=15 -- isCliqNull_StateMachine
FSM cliq5, iter=16 -- doesCliqNeeddownmsg_StateMachine
FSM cliq5, iter=17 -- untilDownMsgChildren_StateMachine
FSM cliq5, iter=18 -- blockUntilSiblingsStatus_StateMachine
FSM cliq5, iter=19 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM cliq5, iter=20 -- determineCliqNeedDownMsg_StateMachine
FSM cliq5, iter=21 -- getBetterName7b_StateMachine
FSM cliq2, iter=11 -- isCliqNull_StateMachine
FSM cliq2, iter=12 -- doesCliqNeeddownmsg_StateMachine
FSM cliq2, iter=13 -- checkIfCliqNullBlock_StateMachine
[ Info: prepCliqInitMsgsUp, seps=[:x2, :x6]
FSM cliq6, iter=13 -- rmUpLikeliSaveSubFg_StateMachine
FSM cliq6, iter=14 -- finishCliqSolveCheck_StateMachine
FSM cliq6, iter=15 -- isCliqNull_StateMachine
FSM cliq6, iter=16 -- doesCliqNeeddownmsg_StateMachine
FSM cliq6, iter=17 -- untilDownMsgChildren_StateMachine
FSM cliq6, iter=18 -- blockUntilSiblingsStatus_StateMachine
FSM cliq6, iter=19 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM cliq2, iter=14 -- blockUntilSiblingsStatus_StateMachine
FSM cliq2, iter=15 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM cliq2, iter=16 -- determineCliqNeedDownMsg_StateMachine
FSM cliq2, iter=17 -- slowCliqIfChildrenNotUpsolved_StateMachine
FSM cliq2, iter=18 -- isCliqNull_StateMachine
FSM cliq2, iter=19 -- doesCliqNeeddownmsg_StateMachine
FSM cliq2, iter=20 -- untilDownMsgChildren_StateMachine
FSM cliq2, iter=21 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM cliq2, iter=22 -- determineCliqNeedDownMsg_StateMachine
FSM cliq2, iter=23 -- getBetterName7b_StateMachine
FSM cliq1, iter=9 -- isCliqNull_StateMachine
FSM cliq1, iter=10 -- doesCliqNeeddownmsg_StateMachine
FSM cliq1, iter=11 -- determineCliqNeedDownMsg_StateMachine
FSM cliq1, iter=12 -- slowCliqIfChildrenNotUpsolved_StateMachine
FSM cliq3, iter=22 -- attemptCliqInitDown_StateMachine
FSM cliq4, iter=22 -- attemptCliqInitDown_StateMachine
FSM cliq5, iter=22 -- attemptCliqInitUp_StateMachine
FSM cliq5, iter=23 -- mustInitUpCliq_StateMachine
[ Info: prepCliqInitMsgsUp, seps=[:x4, :x6]
FSM cliq2, iter=24 -- attemptCliqInitDown_StateMachine
FSM cliq5, iter=24 -- rmUpLikeliSaveSubFg_StateMachine
FSM cliq5, iter=25 -- finishCliqSolveCheck_StateMachine
FSM cliq5, iter=26 -- isCliqNull_StateMachine
FSM cliq5, iter=27 -- doesCliqNeeddownmsg_StateMachine
FSM cliq5, iter=28 -- untilDownMsgChildren_StateMachine
FSM cliq5, iter=29 -- blockUntilSiblingsStatus_StateMachine
FSM cliq5, iter=30 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
┌ Warning: Tuple{KDE,Floa64} specific version of addMsgFactors! is deprecated, use LikelihoodMessage version instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/BWQe4/src/Deprecated.jl:272
FSM cliq3, iter=23 -- dwnInitSiblingWaitOrder_StateMachine┌ Warning: Tuple{KDE,Floa64} specific version of addMsgFactors! is deprecated, use LikelihoodMessage version instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/BWQe4/src/Deprecated.jl:272

┌ Warning: Tuple{KDE,Floa64} specific version of addMsgFactors! is deprecated, use LikelihoodMessage version instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/BWQe4/src/Deprecated.jl:272
FSM cliq4, iter=23 -- dwnInitSiblingWaitOrder_StateMachine
FSM cliq2, iter=25 -- dwnInitSiblingWaitOrder_StateMachine
FSM cliq2, iter=26 -- waitChangeOnParentCondition_StateMachine
FSM cliq3, iter=24 -- attemptDownSolve_StateMachine
[ Info: cycleInitByVarOrder! -- varorder=[:x0, :x6, :l1]
FSM cliq4, iter=24 -- waitChangeOnParentCondition_StateMachine[ Info: var.label=x0 is initialized=false

[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
FSM cliq2, iter=27 -- isCliqNull_StateMachine[ Info: do init of x0

[ Info: var.label=x6 is initialized=false
FSM cliq2, iter=28 -- doesCliqNeeddownmsg_StateMachine[ Info: try doautoinit! of x6

[ Info: init with useinitfct Symbol[]
FSM cliq2, iter=29 -- untilDownMsgChildren_StateMachine[ Info: var.label=l1 is initialized=false

[ Info: try doautoinit! of l1
FSM cliq2, iter=30 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine[ Info: init with useinitfct [:x0l1f1]

[ Info: do init of l1
FSM cliq2, iter=31 -- determineCliqNeedDownMsg_StateMachine[ Info: var.label=x0 is initialized=true

[ Info: var.label=x6 is initialized=false
FSM cliq2, iter=32 -- getBetterName7b_StateMachine[ Info: try doautoinit! of x6

[ Info: init with useinitfct [:x6l1f1]
[ Info: do init of x6
[ Info: var.label=l1 is initialized=true
[ Info: var.label=x0 is initialized=true
[ Info: var.label=x6 is initialized=true
[ Info: var.label=l1 is initialized=true
[ Info: cycleInitByVarOrder!, retval=true
FSM cliq3, iter=25 -- downInitRequirement_StateMachine!
FSM cliq3, iter=26 -- attemptCliqInitUp_StateMachine
FSM cliq3, iter=27 -- mustInitUpCliq_StateMachine
┌ Warning: stale LIKELIHOODMESSAGE tags present in mustInitUpCliq_StateMachine
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/BWQe4/src/CliqStateMachine.jl:296
FSM cliq2, iter=33 -- attemptCliqInitDown_StateMachine
FSM cliq3, iter=28 -- doCliqUpSolveInitialized_StateMachine
[ Info: prepCliqInitMsgsUp, seps=[:x0, :x6]
┌ Warning: Tuple{KDE,Floa64} specific version of addMsgFactors! is deprecated, use LikelihoodMessage version instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/BWQe4/src/Deprecated.jl:272
FSM cliq3, iter=29 -- rmUpLikeliSaveSubFg_StateMachine
FSM cliq3, iter=30 -- finishCliqSolveCheck_StateMachine
FSM cliq2, iter=34 -- dwnInitSiblingWaitOrder_StateMachine
FSM cliq2, iter=35 -- waitChangeOnParentCondition_StateMachine
FSM cliq4, iter=25 -- isCliqNull_StateMachine
FSM cliq4, iter=26 -- doesCliqNeeddownmsg_StateMachine
FSM cliq4, iter=27 -- untilDownMsgChildren_StateMachine
FSM cliq4, iter=28 -- blockUntilSiblingsStatus_StateMachine
FSM cliq4, iter=29 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM cliq4, iter=30 -- determineCliqNeedDownMsg_StateMachine
FSM cliq4, iter=31 -- getBetterName7b_StateMachine
FSM cliq3, iter=31 -- determineCliqIfDownSolve_StateMachine
FSM cliq4, iter=32 -- attemptCliqInitDown_StateMachine
┌ Warning: Tuple{KDE,Floa64} specific version of addMsgFactors! is deprecated, use LikelihoodMessage version instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/BWQe4/src/Deprecated.jl:272
FSM cliq4, iter=33 -- dwnInitSiblingWaitOrder_StateMachine
FSM cliq4, iter=34 -- attemptDownSolve_StateMachine
[ Info: cycleInitByVarOrder! -- varorder=[:x0, :x2, :x1]
[ Info: var.label=x0 is initialized=false
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1, :x0f2]
[ Info: do init of x0
[ Info: [2x0p,d1,N100],
[ Info: var.label=x2 is initialized=false
FSM cliq2, iter=36 -- isCliqNull_StateMachine[ Info: try doautoinit! of x2

[ Info: init with useinitfct Symbol[]
FSM cliq2, iter=37 -- doesCliqNeeddownmsg_StateMachine[ Info: var.label=x1 is initialized=false

[ Info: try doautoinit! of x1
FSM cliq2, iter=38 -- untilDownMsgChildren_StateMachine[ Info: init with useinitfct [:x0x1f1]

[ Info: do init of x1
FSM cliq2, iter=39 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine[ Info: var.label=x0 is initialized=true

[ Info: var.label=x2 is initialized=false
FSM cliq2, iter=40 -- determineCliqNeedDownMsg_StateMachine[ Info: try doautoinit! of x2

[ Info: init with useinitfct [:x1x2f1]
FSM cliq2, iter=41 -- getBetterName7b_StateMachine[ Info: do init of x2

[ Info: var.label=x1 is initialized=true
[ Info: var.label=x0 is initialized=true
[ Info: var.label=x2 is initialized=true
[ Info: var.label=x1 is initialized=true
[ Info: cycleInitByVarOrder!, retval=true
FSM cliq4, iter=35 -- downInitRequirement_StateMachine!
FSM cliq4, iter=36 -- attemptCliqInitUp_StateMachine
FSM cliq4, iter=37 -- mustInitUpCliq_StateMachine
┌ Warning: stale LIKELIHOODMESSAGE tags present in mustInitUpCliq_StateMachine
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/BWQe4/src/CliqStateMachine.jl:296
FSM cliq4, iter=38 -- doCliqUpSolveInitialized_StateMachine
[ Info: prepCliqInitMsgsUp, seps=[:x0, :x2]
FSM cliq2, iter=42 -- attemptCliqInitDown_StateMachine
FSM cliq4, iter=39 -- rmUpLikeliSaveSubFg_StateMachine
FSM cliq4, iter=40 -- finishCliqSolveCheck_StateMachine
┌ Warning: Tuple{KDE,Floa64} specific version of addMsgFactors! is deprecated, use LikelihoodMessage version instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/BWQe4/src/Deprecated.jl:272
FSM cliq4, iter=41 -- determineCliqIfDownSolve_StateMachine
FSM cliq2, iter=43 -- dwnInitSiblingWaitOrder_StateMachine
FSM cliq2, iter=44 -- attemptDownSolve_StateMachine
[ Info: cycleInitByVarOrder! -- varorder=[:x2, :x6, :x4]
[ Info: var.label=x2 is initialized=false
[ Info: try doautoinit! of x2
[ Info: init with useinitfct [:x2f1]
[ Info: do init of x2
[ Info: var.label=x6 is initialized=false
[ Info: try doautoinit! of x6
[ Info: init with useinitfct [:x6f1]
[ Info: do init of x6
[ Info: var.label=x4 is initialized=false
[ Info: try doautoinit! of x4
[ Info: init with useinitfct Symbol[]
[ Info: var.label=x2 is initialized=true
[ Info: var.label=x6 is initialized=true
[ Info: var.label=x4 is initialized=false
[ Info: try doautoinit! of x4
[ Info: init with useinitfct Symbol[]
[ Info: cycleInitByVarOrder!, retval=true
FSM cliq2, iter=45 -- downInitRequirement_StateMachine!
[ Info: prepCliqInitMsgsUp, seps=[:x2, :x6]
FSM cliq1, iter=13 -- isCliqNull_StateMachine
FSM cliq1, iter=14 -- doesCliqNeeddownmsg_StateMachine
FSM cliq1, iter=15 -- determineCliqNeedDownMsg_StateMachine
FSM cliq1, iter=16 -- getBetterName7b_StateMachine
FSM cliq6, iter=20 -- determineCliqNeedDownMsg_StateMachine
FSM cliq6, iter=21 -- getBetterName7b_StateMachine
FSM cliq5, iter=31 -- determineCliqNeedDownMsg_StateMachine
FSM cliq5, iter=32 -- getBetterName7b_StateMachine
FSM cliq2, iter=46 -- attemptCliqInitUp_StateMachine
FSM cliq2, iter=47 -- finishCliqSolveCheck_StateMachine
FSM cliq2, iter=48 -- determineCliqNeedDownMsg_StateMachine
FSM cliq2, iter=49 -- slowCliqIfChildrenNotUpsolved_StateMachine
FSM cliq1, iter=17 -- attemptCliqInitUp_StateMachine
FSM cliq1, iter=18 -- mustInitUpCliq_StateMachine
FSM cliq1, iter=19 -- doCliqUpSolveInitialized_StateMachine
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
FSM cliq6, iter=22 -- attemptCliqInitDown_StateMachine
FSM cliq5, iter=33 -- attemptCliqInitDown_StateMachine
FSM cliq1, iter=20 -- rmUpLikeliSaveSubFg_StateMachine
FSM cliq1, iter=21 -- finishCliqSolveCheck_StateMachine
┌ Warning: Tuple{KDE,Floa64} specific version of addMsgFactors! is deprecated, use LikelihoodMessage version instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/BWQe4/src/Deprecated.jl:272
FSM cliq1, iter=22 -- determineCliqIfDownSolve_StateMachine
┌ Warning: Tuple{KDE,Floa64} specific version of addMsgFactors! is deprecated, use LikelihoodMessage version instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/BWQe4/src/Deprecated.jl:272
[ Info: transferUpdateSubGraph! -- syms=[:x0, :x6, :x2]
FSM cliq5, iter=34 -- dwnInitSiblingWaitOrder_StateMachine
FSM cliq6, iter=23 -- dwnInitSiblingWaitOrder_StateMachine
FSM cliq6, iter=24 -- waitChangeOnParentCondition_StateMachine
FSM cliq3, iter=32 -- doCliqDownSolve_StateMachine
FSM cliq4, iter=42 -- doCliqDownSolve_StateMachine
FSM cliq5, iter=35 -- attemptDownSolve_StateMachine
[ Info: cycleInitByVarOrder! -- varorder=[:x6, :x4, :x5]
FSM cliq1, iter=23 -- exitStateMachine[ Info: var.label=x6 is initialized=false

[ Info: try doautoinit! of x6
[ Info: init with useinitfct [:x6f1]
[ Info: do init of x6
[ Info: var.label=x4 is initialized=false
FSM cliq3, iter=33 -- exitStateMachine[ Info: try doautoinit! of x4

[ Info: init with useinitfct Symbol[]
[ Info: var.label=x5 is initialized=false
[ Info: try doautoinit! of x5
[ Info: init with useinitfct [:x5x6f1]
[ Info: do init of x5
[ Info: var.label=x6 is initialized=true
FSM cliq4, iter=43 -- exitStateMachine[ Info: var.label=x4 is initialized=false

[ Info: try doautoinit! of x4
[ Info: init with useinitfct [:x4x5f1]
[ Info: do init of x4
[ Info: var.label=x5 is initialized=true
[ Info: var.label=x6 is initialized=true
[ Info: var.label=x4 is initialized=true
[ Info: var.label=x5 is initialized=true
[ Info: cycleInitByVarOrder!, retval=true
FSM cliq5, iter=36 -- downInitRequirement_StateMachine!
FSM cliq5, iter=37 -- attemptCliqInitUp_StateMachine
FSM cliq5, iter=38 -- mustInitUpCliq_StateMachine
┌ Warning: stale LIKELIHOODMESSAGE tags present in mustInitUpCliq_StateMachine
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/BWQe4/src/CliqStateMachine.jl:296
FSM cliq5, iter=39 -- doCliqUpSolveInitialized_StateMachine
[ Info: prepCliqInitMsgsUp, seps=[:x4, :x6]
FSM cliq5, iter=40 -- rmUpLikeliSaveSubFg_StateMachine
FSM cliq5, iter=41 -- finishCliqSolveCheck_StateMachine
FSM cliq2, iter=50 -- isCliqNull_StateMachine
FSM cliq2, iter=51 -- doesCliqNeeddownmsg_StateMachine
FSM cliq2, iter=52 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM cliq2, iter=53 -- determineCliqNeedDownMsg_StateMachine
FSM cliq2, iter=54 -- slowCliqIfChildrenNotUpsolved_StateMachine
FSM cliq5, iter=42 -- determineCliqIfDownSolve_StateMachine
FSM cliq6, iter=25 -- isCliqNull_StateMachine
FSM cliq6, iter=26 -- doesCliqNeeddownmsg_StateMachine
FSM cliq6, iter=27 -- untilDownMsgChildren_StateMachine
FSM cliq6, iter=28 -- blockUntilSiblingsStatus_StateMachine
FSM cliq6, iter=29 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM cliq6, iter=30 -- determineCliqNeedDownMsg_StateMachine
FSM cliq6, iter=31 -- getBetterName7b_StateMachine
FSM cliq6, iter=32 -- attemptCliqInitDown_StateMachine
┌ Warning: Tuple{KDE,Floa64} specific version of addMsgFactors! is deprecated, use LikelihoodMessage version instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/BWQe4/src/Deprecated.jl:272
FSM cliq6, iter=33 -- dwnInitSiblingWaitOrder_StateMachine
FSM cliq6, iter=34 -- attemptDownSolve_StateMachine
[ Info: cycleInitByVarOrder! -- varorder=[:x2, :x4, :x3]
[ Info: var.label=x2 is initialized=false
[ Info: try doautoinit! of x2
[ Info: init with useinitfct [:x2f1, :x2f2]
[ Info: do init of x2
[ Info: [2x0p,d1,N100],
[ Info: var.label=x4 is initialized=false
[ Info: try doautoinit! of x4
[ Info: init with useinitfct [:x4f1]
[ Info: do init of x4
[ Info: var.label=x3 is initialized=false
[ Info: try doautoinit! of x3
[ Info: init with useinitfct [:x2x3f1, :x3x4f1]
[ Info: do init of x3
[ Info: [2x0p,d1,N100],
[ Info: var.label=x2 is initialized=true
[ Info: var.label=x4 is initialized=true
[ Info: var.label=x3 is initialized=true
[ Info: cycleInitByVarOrder!, retval=true
FSM cliq6, iter=35 -- downInitRequirement_StateMachine!
FSM cliq6, iter=36 -- attemptCliqInitUp_StateMachine
FSM cliq6, iter=37 -- mustInitUpCliq_StateMachine
┌ Warning: stale LIKELIHOODMESSAGE tags present in mustInitUpCliq_StateMachine
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/BWQe4/src/CliqStateMachine.jl:296
FSM cliq6, iter=38 -- doCliqUpSolveInitialized_StateMachine
[ Info: prepCliqInitMsgsUp, seps=[:x2, :x4]
FSM cliq6, iter=39 -- rmUpLikeliSaveSubFg_StateMachine
FSM cliq6, iter=40 -- finishCliqSolveCheck_StateMachine
FSM cliq2, iter=55 -- isCliqNull_StateMachine
FSM cliq2, iter=56 -- doesCliqNeeddownmsg_StateMachine
FSM cliq2, iter=57 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM cliq2, iter=58 -- determineCliqNeedDownMsg_StateMachine
FSM cliq2, iter=59 -- getBetterName7b_StateMachine
FSM cliq6, iter=41 -- determineCliqIfDownSolve_StateMachine
FSM cliq2, iter=60 -- attemptCliqInitUp_StateMachine
FSM cliq2, iter=61 -- mustInitUpCliq_StateMachine
┌ Warning: stale LIKELIHOODMESSAGE tags present in mustInitUpCliq_StateMachine
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/BWQe4/src/CliqStateMachine.jl:296
FSM cliq2, iter=62 -- doCliqUpSolveInitialized_StateMachine
[ Info: prepCliqInitMsgsUp, seps=[:x2, :x6]
FSM cliq2, iter=63 -- rmUpLikeliSaveSubFg_StateMachine
FSM cliq2, iter=64 -- finishCliqSolveCheck_StateMachine
FSM cliq2, iter=65 -- determineCliqIfDownSolve_StateMachine
FSM cliq2, iter=66 -- doCliqDownSolve_StateMachine
FSM cliq5, iter=43 -- doCliqDownSolve_StateMachine
FSM cliq6, iter=42 -- doCliqDownSolve_StateMachine
FSM cliq2, iter=67 -- exitStateMachine
FSM cliq5, iter=44 -- exitStateMachine
FSM cliq6, iter=43 -- exitStateMachine
[ Info: Finished tree based init-inference
Test Summary:                                    |
basic test for tree initialization functionality | No tests
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: try doautoinit! of x1
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x0x1f1]
[ Info: do init of x1
[ Info: try doautoinit! of x2
[ Info: try doautoinit! of x10
[ Info: try doautoinit! of x10
[ Info: init with useinitfct [:x10f1]
[ Info: do init of x10
[ Info: try doautoinit! of x11
[ Info: try doautoinit! of x11
[ Info: init with useinitfct [:x10x11f1]
[ Info: do init of x11
[ Info: try doautoinit! of x12
[ Info: ensure all initialized (using graphinit)
[ Info: x2 is not initialized, and will do so now...
[ Info: try doautoinit! of x2
[ Info: init with useinitfct [:x1x2f1]
[ Info: do init of x2
[ Info: x12 is not initialized, and will do so now...
[ Info: try doautoinit! of x12
[ Info: init with useinitfct [:x11x12f1]
[ Info: do init of x12
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
[ Info: Do tree based init-inference on tree
[ Info: prepCliqInitMsgsUp, seps=[:x1]
[ Info: prepCliqInitMsgsUp, seps=[:x11]
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
[ Info: transferUpdateSubGraph! -- syms=[:x1, :x0]
[ Info: transferUpdateSubGraph! -- syms=[:x10, :x11]
[ Info: Finished tree based init-inference
Test Summary:                  | Pass  Total
Test forest of orphaned graphs |   13     13
[ Info: try doautoinit! of x1
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x1f1]
[ Info: do init of x1
[ Info: try doautoinit! of x2
[ Info: try doautoinit! of x2
[ Info: init with useinitfct [:x1x2f1]
[ Info: do init of x2
[ Info: try doautoinit! of x3
[ Info: try doautoinit! of l1
[ Info: try doautoinit! of l1
[ Info: init with useinitfct [:x1l1f1, :x2l1f1]
[ Info: do init of l1
[ Info: [2x0p,d1,N100],
[ Info: try doautoinit! of x3
[ Info: init with useinitfct [:x2x3f1]
[ Info: do init of x3
[ Info: try doautoinit! of l2
[ Info: l2 is not initialized, and will do so now...
[ Info: try doautoinit! of l2
[ Info: init with useinitfct [:x3l2f1]
[ Info: do init of l2
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
[ Info: Do tree based init-inference on tree
[ Info: prepCliqInitMsgsUp, seps=[:x3]
[ Info: prepCliqInitMsgsUp, seps=[:x2]
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
[ Info: transferUpdateSubGraph! -- syms=[:x2, :x1, :l1]
[ Info: Finished tree based init-inference
Test Summary:                | Pass  Total
test PPE update during solve |   10     10
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: try doautoinit! of x1
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x0x1f1]
[ Info: do init of x1
[ Info: try doautoinit! of x2
[ Info: try doautoinit! of x2
[ Info: init with useinitfct [:x1x2f1]
[ Info: do init of x2
[ Info: try doautoinit! of x3
[ Info: try doautoinit! of x3
[ Info: init with useinitfct [:x2x3f1]
[ Info: do init of x3
[ Info: try doautoinit! of x4
[ Info: try doautoinit! of x4
[ Info: init with useinitfct [:x3x4f1]
[ Info: do init of x4
[ Info: try doautoinit! of x5
[ Info: try doautoinit! of x5
[ Info: init with useinitfct [:x4x5f1]
[ Info: do init of x5
[ Info: try doautoinit! of x6
[ Info: try doautoinit! of l1
[ Info: try doautoinit! of x6
[ Info: init with useinitfct [:x5x6f1]
[ Info: do init of x6
[ Info: try doautoinit! of l1
[ Info: init with useinitfct [:x0l1f1, :x6l1f1]
[ Info: do init of l1
[ Info: [2x0p,d1,N100],
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
[ Info: Do tree based init-inference on tree
[ Info: prepCliqInitMsgsUp, seps=[:x0, :x6]
[ Info: prepCliqInitMsgsUp, seps=[:x0, :x2]
[ Info: prepCliqInitMsgsUp, seps=[:x4, :x6]
[ Info: prepCliqInitMsgsUp, seps=[:x2, :x4]
[ Info: prepCliqInitMsgsUp, seps=[:x2, :x6]
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
[ Info: transferUpdateSubGraph! -- syms=[:x0, :x6, :x2]
[ Info: Finished tree based init-inference
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
[ Info: Do tree based init-inference on tree
[ Info: prepCliqInitMsgsUp, seps=[:x0, :x6]
[ Info: prepCliqInitMsgsUp, seps=[:x0, :x2]
[ Info: prepCliqInitMsgsUp, seps=[:x4, :x6]
[ Info: prepCliqInitMsgsUp, seps=[:x2, :x4]
[ Info: prepCliqInitMsgsUp, seps=[:x2, :x6]
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
[ Info: transferUpdateSubGraph! -- syms=[:x0, :x6, :x2]
[ Info: Finished tree based init-inference
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
[ Info: Do tree based init-inference on tree
[ Info: prepCliqInitMsgsUp, seps=[:x0, :x6]
[ Info: prepCliqInitMsgsUp, seps=[:x0, :x2]
[ Info: prepCliqInitMsgsUp, seps=[:x4, :x6]
[ Info: prepCliqInitMsgsUp, seps=[:x2, :x4]
[ Info: prepCliqInitMsgsUp, seps=[:x2, :x6]
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
[ Info: transferUpdateSubGraph! -- syms=[:x0, :x6, :x2]
[ Info: Finished tree based init-inference
Test Summary:                          | Pass  Total
Test for variations in N while solving |    3      3
Test Summary:                                                                     | Pass  Total
test IncrementalInference.assembleHypothesesElements! with only nullhypothesis... |   32     32
Test Summary:                                                                    | Pass  Total
test IncrementalInference.assembleHypothesesElements! without multihypothesis... |   22     22
Test Summary:                                                   | Pass  Total
assembleHypothesesElements! with bi-modality (certain variable) |   16     16
Test Summary:                                                          | Pass  Total
assembleHypothesesElements! with bi-modality (fractional variable 1/2) |   20     20
Test Summary:                                                          | Pass  Total
assembleHypothesesElements! with bi-modality (fractional variable 2/2) |   20     20
Test Summary:                                                    | Pass  Total
assembleHypothesesElements! with tri-modality (certain variable) |   21     21
Test Summary:                                                           | Pass  Total
assembleHypothesesElements! with tri-modality (fractional variable 1/3) |   25     25
Test Summary:                                                           | Pass  Total
assembleHypothesesElements! with tri-modality (fractional variable 2/3) |   25     25
┌ Warning: only partially testing tri-modality
└ @ Main ~/.julia/packages/IncrementalInference/BWQe4/test/testExplicitMultihypo.jl:434
Test Summary:                                                           | Pass  Total
assembleHypothesesElements! with tri-modality (fractional variable 3/3) |   25     25
[ Info: try doautoinit! of l1
[ Info: try doautoinit! of l2
[ Info: try doautoinit! of x1
[ Info: try doautoinit! of l1
[ Info: init with useinitfct [:l1f1]
[ Info: do init of l1
[ Info: try doautoinit! of l1_0
[ Info: try doautoinit! of x1
[ Info: allowing init from incomplete set of previously initialized hypotheses, fct=x1l1l1_0f1
[ Info: init with useinitfct [:x1l1l1_0f1]
[ Info: do init of x1
[ Info: not all hypotheses initialized, but at least one available -- see #427
[ Info: try doautoinit! of x2
[ Info: try doautoinit! of x2
[ Info: init with useinitfct [:x1x2f1]
[ Info: do init of x2
[ Info: try doautoinit! of l2
[ Info: allowing init from incomplete set of previously initialized hypotheses, fct=x2l2l2_0f1
[ Info: init with useinitfct [:l2f1, :x2l2l2_0f1]
[ Info: do init of l2
[ Info: not all hypotheses initialized, but at least one available -- see #427
[ Info: [2x0p,d1,N100],
[ Info: try doautoinit! of l2_0
[ Info: ensure all initialized (using graphinit)
[ Info: l1_0 is not initialized, and will do so now...
[ Info: try doautoinit! of l1_0
[ Info: init with useinitfct [:x1l1l1_0f1]
[ Info: do init of l1_0
[ Info: l2_0 is not initialized, and will do so now...
[ Info: try doautoinit! of l2_0
[ Info: init with useinitfct [:x2l2l2_0f1]
[ Info: do init of l2_0
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
[ Info: Do tree based init-inference on tree
[ Info: prepCliqInitMsgsUp, seps=[:x2]
[ Info: prepCliqInitMsgsUp, seps=[:x1, :l1]
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
[ Info: transferUpdateSubGraph! -- syms=[:l1, :x2, :x1]
[ Info: Finished tree based init-inference
Test Summary:                            |
test CSM runaway on upsolve, (issue 427) | No tests
[ Info: try doautoinit! of l0
[ Info: try doautoinit! of l1
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of l0
[ Info: init with useinitfct [:l0f1]
[ Info: do init of l0
[ Info: try doautoinit! of l1
[ Info: init with useinitfct [:l1f1]
[ Info: do init of l1
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0l0l1f1]
[ Info: do init of x0
[ Info: try doautoinit! of x1
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x0x1f1, :x1l0l1f1]
[ Info: do init of x1
[ Info: [2x0p,d1,N200],
[ Info: try doautoinit! of x2
[ Info: ensure all initialized (using graphinit)
[ Info: x2 is not initialized, and will do so now...
[ Info: try doautoinit! of x2
[ Info: init with useinitfct [:x1x2f1]
[ Info: do init of x2
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
[ Info: Do tree based init-inference on tree
[ Info: prepCliqInitMsgsUp, seps=[:x1]
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
[ Info: transferUpdateSubGraph! -- syms=[:l0, :x1, :l1, :x0]
[ Info: Finished tree based init-inference
Test Summary:                               | Pass  Total
2door basic binary multihypothesis tests... |    5      5
[ Info: try doautoinit! of l0
[ Info: try doautoinit! of l1
[ Info: try doautoinit! of l2
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of l0
[ Info: init with useinitfct [:l0f1]
[ Info: do init of l0
[ Info: try doautoinit! of l1
[ Info: init with useinitfct [:l1f1]
[ Info: do init of l1
[ Info: try doautoinit! of l2
[ Info: init with useinitfct [:l2f1]
[ Info: do init of l2
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0l0l1l2f1]
[ Info: do init of x0
[ Info: try doautoinit! of x1
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x0x1f1, :x1l0l1l2f1]
[ Info: do init of x1
[ Info: [2x0p,d1,N200],
[ Info: try doautoinit! of x2
[ Info: try doautoinit! of x2
[ Info: init with useinitfct [:x1x2f1]
[ Info: do init of x2
[ Info: try doautoinit! of x3
[ Info: try doautoinit! of x3
[ Info: init with useinitfct [:x2x3f1, :x3l0l1l2f1]
[ Info: do init of x3
[ Info: [2x0p,d1,N200],
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
[ Info: Do tree based init-inference on tree
[ Info: prepCliqInitMsgsUp, seps=[:x1, :x3]
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
[ Info: transferUpdateSubGraph! -- syms=[:l0, :x1, :l2, :x3, :x0, :l1]
[ Info: Finished tree based init-inference
Test Summary:                         | Pass  Total
3door basic trinary multihypo test... |    6      6
[ Info: lp1 is not initialized, and will do so now...
[ Info: try doautoinit! of lp1
[ Info: init with useinitfct [:lp1f1]
[ Info: do init of lp1
[ Info: lp2 is not initialized, and will do so now...
[ Info: try doautoinit! of lp2
[ Info: init with useinitfct [:lp2f1]
[ Info: do init of lp2
[ Info: x1 is not initialized, and will do so now...
[ Info: try doautoinit! of x1
[ Info: allowing init from incomplete set of previously initialized hypotheses, fct=x1lm2lp2f1
[ Info: allowing init from incomplete set of previously initialized hypotheses, fct=x1lm1lp1f1
[ Info: init with useinitfct [:x1lm2lp2f1, :x1lm1lp1f1]
[ Info: do init of x1
[ Info: not all hypotheses initialized, but at least one available -- see #427
[ Info: not all hypotheses initialized, but at least one available -- see #427
[ Info: [2x0p,d1,N100],
[ Info: lm2 is not initialized, and will do so now...
[ Info: try doautoinit! of lm2
[ Info: init with useinitfct [:x1lm2lp2f1]
[ Info: do init of lm2
[ Info: lm1 is not initialized, and will do so now...
[ Info: try doautoinit! of lm1
[ Info: init with useinitfct [:x1lm1lp1f1]
[ Info: do init of lm1
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
[ Info: Do tree based init-inference on tree
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
[ Info: transferUpdateSubGraph! -- syms=[:lp2, :lp1, :lm2, :lm1, :x1]
[ Info: Finished tree based init-inference
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
[ Info: Do tree based init-inference on tree
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
[ Info: transferUpdateSubGraph! -- syms=[:lp2, :lp1, :lm2, :lm1, :x1]
[ Info: Finished tree based init-inference
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
[ Info: Do tree based init-inference on tree
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
[ Info: transferUpdateSubGraph! -- syms=[:lp2, :lp1, :lm2, :lm1, :x1]
[ Info: Finished tree based init-inference
Test Summary:        | Pass  Total
test multihypo 1D... |    5      5
[ Info: try doautoinit! of l1
[ Info: try doautoinit! of l2
[ Info: try doautoinit! of x1
[ Info: try doautoinit! of l1
[ Info: init with useinitfct [:l1f1]
[ Info: do init of l1
[ Info: try doautoinit! of l1_0
[ Info: try doautoinit! of x2
[ Info: try doautoinit! of l2
[ Info: init with useinitfct [:l2f1]
[ Info: do init of l2
[ Info: try doautoinit! of l2_0
[ Info: try doautoinit! of x1
[ Info: allowing init from incomplete set of previously initialized hypotheses, fct=x1l1l1_0f1
[ Info: init with useinitfct [:x1l1l1_0f1]
[ Info: do init of x1
[ Info: not all hypotheses initialized, but at least one available -- see #427
[ Info: try doautoinit! of x2
[ Info: allowing init from incomplete set of previously initialized hypotheses, fct=x2l2l2_0f1
[ Info: init with useinitfct [:x2l2l2_0f1, :x1x2f1]
[ Info: do init of x2
[ Info: not all hypotheses initialized, but at least one available -- see #427
[ Info: [2x0p,d1,N100],
[ Info: ensure all initialized (using graphinit)
[ Info: l1_0 is not initialized, and will do so now...
[ Info: try doautoinit! of l1_0
[ Info: init with useinitfct [:x1l1l1_0f1]
[ Info: do init of l1_0
[ Info: l2_0 is not initialized, and will do so now...
[ Info: try doautoinit! of l2_0
[ Info: init with useinitfct [:x2l2l2_0f1]
[ Info: do init of l2_0
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
[ Info: Do tree based init-inference on tree
[ Info: prepCliqInitMsgsUp, seps=[:x2]
[ Info: prepCliqInitMsgsUp, seps=[:x1, :l1]
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
[ Info: transferUpdateSubGraph! -- syms=[:l1, :x2, :x1]
[ Info: Finished tree based init-inference
Test Summary:                              | Pass  Total
test multihypo chain example (see #462)... |    6      6
Threads.nthreads() = 2
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: try doautoinit! of x1
Test Summary:                                                               | Pass  Total
Basic ContinuousScalar example to ensure multithreaded convolutions work... |    1      1
[ Info: try doautoinit! of x1
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x1f1, :x1f2]
[ Info: do init of x1
[ Info: [1x1p,d2,N100],
Test Summary:                            | Pass  Total
test evaluation of full constraint prior |    3      3
Test Summary:                               | Pass  Total
test evaluation of partial constraint prior |    6      6
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
[ Info: Do tree based init-inference on tree
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
[ Info: transferUpdateSubGraph! -- syms=[:x1]
[ Info: Finished tree based init-inference
Test Summary:                | Pass  Total
test solving of factor graph |    2      2
[ Info: try doautoinit! of x2
[ Info: try doautoinit! of x2
[ Info: init with useinitfct [:x1x2f1, :x2f1]
[ Info: do init of x2
[ Info: [0x2p,d2,N100],
Test Summary:                                                | Pass  Total
test evaluation of multiple simultaneous partial constraints |    6      6
┌ Warning: restore findRelatedFromPotential as testset!
└ @ Main ~/.julia/packages/IncrementalInference/BWQe4/test/testpartialconstraint.jl:128
X2lpts[2, 95:100] = [9.81363721946887, 9.680654465835051, 9.352458927104623, 8.858346320922346, 8.994336800773116, 9.390975728221884]
lpts[2, 95:100] = [9.124820097584056, 9.00249237644553, 8.9601809745829, 8.601735942098735, 9.367303303092914, 11.037529923103452]
getPoints(keepaside) = [-21.317224620158527 -21.5458513113884 -20.31411648130045 -20.302201765995342 -20.268453109466588 -19.52075080382495 -22.144751697257604 -20.06156582303497 -19.70739218642707 -20.07466216362797 -20.254384976204822 -20.574099840034688 -19.399948054231626 -21.120335527686933 -20.471905605331752 -18.747275041558773 -19.022719885608453 -19.99542176682838 -20.312107489920326 -21.214908951038822 -18.643436797882618 -20.73631321176035 -20.81270059665621 -20.62569935566778 -20.816145978716744 -18.887074995638844 -21.109811011767025 -19.80095397982122 -20.722516468108395 -19.15835415843704 -20.46314338139507 -19.867570475523085 -19.97786279261258 -19.336389753660168 -20.04338248052486 -18.536246781971506 -19.818560668662425 -18.50752970372176 -19.837776413443745 -20.031891917353136 -20.632643101781238 -19.113467306988312 -21.286234566933718 -21.09782305751983 -20.887752159095587 -18.489353788141177 -19.60897730334479 -22.30102207780746 -20.89629535403945 -20.300402471219225 -19.306169105764237 -20.336261353154804 -18.60576549256557 -17.818398823172057 -18.772698612797672 -19.70966226480577 -19.188335925993233 -19.382015957825814 -20.769548497416256 -19.98943809660405 -21.939167672352234 -20.674260832224324 -20.275953656653343 -20.07004828867962 -19.300908001519982 -21.630498706297747 -19.601920136885827 -20.155199311234483 -19.754913344032136 -19.18700141726633 -20.419331155926002 -21.40122230353982 -19.458924725534384 -19.29463963767069 -19.70786616310376 -18.46731637333034 -20.846472327984923 -20.51480914371896 -18.984149033890258 -18.956210178039793 -20.952527232547645 -19.9162137801565 -21.746015400162165 -19.25506154188446 -19.971816996487703 -21.807308433569315 -19.155166205616005 -19.69010264730844 -21.515531871125088 -19.540673630324818 -19.88202387978063 -18.974042715145323 -20.956796849396497 -21.46789349760255 -19.345430041035197 -19.682320871076016 -20.828739046623653 -20.307915955764898 -20.89953277942375 -20.030464091049136; 11.321904549440283 11.836631446411095 9.280081173728007 9.153295602833571 7.93816042692176 10.606146585761797 9.717447213895193 9.64118924144053 10.89017024447941 9.645708306147778 11.705033516665557 8.38390650677031 9.156549686178415 8.703472548877281 8.805870332224336 12.343684161898903 11.334775655047858 10.347242161770389 10.127088202259301 8.868384810909516 9.216191420423568 9.822060446202961 10.053909815642099 8.585845475497353 11.587430961230929 10.607905839348115 9.441969731820471 10.289481166247848 10.951117863610607 10.87623552541409 10.841885036020729 7.571729429659294 10.070042545254177 11.210077595515978 9.221264685406046 10.080908430457878 10.624891597140538 9.442217439436524 10.017531640288741 8.61282995991769 10.680872820517868 11.05445964443676 12.104194766163314 8.105817663273156 9.071853659578835 9.92030109941018 9.921061160166449 10.755883801203485 10.715767825464614 10.73917811351366 10.770376908697989 9.691862126236575 9.757310289459475 9.175890137269995 11.654425195829415 11.083468478535048 9.963007508503654 10.88408267601699 11.571433931803313 8.897130418824704 7.857897916146429 10.06491560393632 13.162669983068486 9.651302470932169 11.57939044086081 9.648048532012945 10.10439944141037 12.238642428959249 9.692064397868783 10.770869079851758 11.301889624707291 10.12077201715377 11.131021563966124 9.51446964676349 11.225712735926935 8.88700915211232 9.867045998028464 11.360236275585553 9.530590973647296 11.149405164105941 11.745065338750432 9.658801305903227 10.446427358224009 9.249963305658008 9.436063872947084 9.646035501409049 10.790483658284359 10.71394784206064 11.166362252716153 9.65960701957762 10.343222320125115 9.141376478204013 7.231202878756708 10.344462554749759 9.124820097584056 9.00249237644553 8.9601809745829 8.601735942098735 9.367303303092914 11.037529923103452]
[ Info: [0x1p,d2,N100],
[ Info: [0x1p,d2,N100],
[ Info: [0x2p,d2,N100],
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
[ Info: Do tree based init-inference on tree
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
[ Info: transferUpdateSubGraph! -- syms=[:x1, :x2]
[ Info: Finished tree based init-inference
Test Summary:                           | Pass  Total
test belief prediction with partials... |   16     16
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: try doautoinit! of x1
[ Info: ensure all initialized (using graphinit)
[ Info: x1 is not initialized, and will do so now...
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x0x1f1]
[ Info: do init of x1
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
[ Info: Do tree based init-inference on tree
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
[ Info: transferUpdateSubGraph! -- syms=[:x0, :x1]
[ Info: Finished tree based init-inference
Test Summary:             | Pass  Total
Post 237 without nullhypo |    1      1
[ Info: try doautoinit! of x0
[ Info: ensure all initialized (using graphinit)
[ Info: x0 is not initialized, and will do so now...
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
[ Info: Do tree based init-inference on tree
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
[ Info: transferUpdateSubGraph! -- syms=[:x0]
[ Info: Finished tree based init-inference
Test Summary:              | Pass  Total
Post 237 nullhypo on prior |    2      2
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: try doautoinit! of x1
[ Info: ensure all initialized (using graphinit)
[ Info: x1 is not initialized, and will do so now...
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x0x1f1]
[ Info: do init of x1
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
[ Info: Do tree based init-inference on tree
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
[ Info: transferUpdateSubGraph! -- syms=[:x0, :x1]
[ Info: Finished tree based init-inference
Test Summary:               | Pass  Total
Post 237 with nullhypo test |    4      4
[ Info: try doautoinit! of x1
[ Info: x1 is not initialized, and will do so now...
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x1f1]
[ Info: do init of x1
[ Info: try doautoinit! of x2
[ Info: x2 is not initialized, and will do so now...
[ Info: try doautoinit! of x2
[ Info: init with useinitfct [:x1x2f1]
[ Info: do init of x2
[ Info: try doautoinit! of x3
[ Info: try doautoinit! of x4
Test Summary:                                                | Pass  Total
test populate factor graph with a multi-hypothesis factor... |    5      5
Test Summary:                                        | Pass  Total
Test multi-hypothesis factor convolution exploration |    3      3
Packing converters
Test Summary:                                 | Pass  Total
test packing and unpacking the data structure |    4      4
[ Info: try doautoinit! of x1
[ Info: x1 is not initialized, and will do so now...
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x1f1]
[ Info: do init of x1
[ Info: try doautoinit! of x2
[ Info: x2 is not initialized, and will do so now...
[ Info: try doautoinit! of x2
[ Info: init with useinitfct [:x1x2f1]
[ Info: do init of x2
[ Info: try doautoinit! of x3
[ Info: try doautoinit! of x4
[ Info: try doautoinit! of x5
Test Summary:            | Pass  Total
test tri-modal factor... |   20     20
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: try doautoinit! of x2
[ Info: try doautoinit! of x2
[ Info: init with useinitfct [:x0x2f1]
[ Info: do init of x2
[ Info: try doautoinit! of x3
[ Info: try doautoinit! of x3
[ Info: init with useinitfct [:x2x3f1, :x3f1]
[ Info: do init of x3
[ Info: [2x0p,d1,N100],
[ Info: try doautoinit! of x4
[ Info: try doautoinit! of l1
[ Info: try doautoinit! of x4
[ Info: init with useinitfct [:x3x4f1]
[ Info: do init of x4
[ Info: try doautoinit! of l1
[ Info: init with useinitfct [:x3l1f1, :x4l1f1]
[ Info: do init of l1
[ Info: [2x0p,d1,N100],
[ Info: try doautoinit! of x5
[ Info: try doautoinit! of x5
[ Info: init with useinitfct [:x4x5f1]
[ Info: do init of x5
[ Info: try doautoinit! of x6
[ Info: try doautoinit! of x6
[ Info: init with useinitfct [:x5x6f1]
[ Info: do init of x6
[ Info: try doautoinit! of x7
[ Info: try doautoinit! of x7
[ Info: init with useinitfct [:x6x7f1, :x7f1]
[ Info: do init of x7
[ Info: [2x0p,d1,N100],
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
[ Info: Do tree based init-inference on tree
[ Info: prepCliqInitMsgsUp, seps=[:x3]
[ Info: prepCliqInitMsgsUp, seps=[:x6]
[ Info: prepCliqInitMsgsUp, seps=[:x4]
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
[ Info: transferUpdateSubGraph! -- syms=[:x3, :x4, :l1]
[ Info: Finished tree based init-inference
Test Summary:               |
test fourdoor early example | No tests
Test Summary:                                | Pass  Total
Number of non-zero calculation for frontals. |  100    100

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
Test Summary:                                    | Pass  Total
Number of non-zero calculation for full cliques. |    3      3

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
Test Summary:                                  | Pass  Total
Number of non-zero calculation for full trees. |    1      1

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
┌ Warning: Base.IOError("could not spawn `dot /tmp/caesar/random/bt.dot -T pdf -o /tmp/caesar/random/bt.pdf`: no such file or directory (ENOENT)", -2)
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/BWQe4/src/JunctionTree.jl:389
stacktrace() = Base.StackTraces.StackFrame[macro expansion at show.jl:641 [inlined], drawTree(::BayesTree; show::Bool, filepath::String, dpi::Int64, viewerapp::String, imgs::Bool) at JunctionTree.jl:390, (::IncrementalInference.var"#drawTree##kw")(::NamedTuple{(:show,),Tuple{Bool}}, ::typeof(drawTree), ::BayesTree) at JunctionTree.jl:362, top-level scope at testAnalysisTools.jl:37, top-level scope at Test.jl:1115, top-level scope at testAnalysisTools.jl:33, include(::String) at client.jl:457, top-level scope at runtests.jl:87, include(::String) at client.jl:457, top-level scope at none:6, eval(::Module, ::Any) at boot.jl:331, exec_options(::Base.JLOptions) at client.jl:272, _start() at client.jl:506]
Test Summary: |
Test drawTree | No tests
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x1
[ Info: try doautoinit! of x2
[ Info: try doautoinit! of x3
[ Info: try doautoinit! of x4
[ Info: try doautoinit! of x5
[ Info: try doautoinit! of x6
[ Info: try doautoinit! of x7
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: try doautoinit! of x1
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x0x1f1]
[ Info: do init of x1
[ Info: try doautoinit! of x2
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x5
[ Info: try doautoinit! of x10

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
┌ Error: Under development, do not use, see #539
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/BWQe4/src/SolverAPI.jl:202
[ Info: Solving over the Bayes (Junction) tree.
[ Info: Do tree based init-inference
[ Info: length mgsfcts=0
[ Info: length mgsfcts=0
[ Info: length mgsfcts=0
[ Info: length mgsfcts=0
[ Info: 1: take! on edge 1
[ Info: 1: take! on edge 2
[ Info: 1: take! on edge 7
[ Info: 2: take! on edge 3
[ Info: 2: take! on edge 6
[ Info: 3: take! on edge 4
[ Info: 4: take! on edge 5
[ Info: 5 vars [:lm0, :x0, :x2, :x1]
[ Info: 6 vars [:x9, :x8, :x10, :lm9]
[ Info: 7 vars [:x6, :x5, :x7, :lm6]
[ Info: 8 vars [:lm3, :x2, :x3, :x4]
[ Info: 5: subfg optim converged updating variables
[ Info: 6: subfg optim converged updating variables
[ Info: 7: subfg optim converged updating variables
[ Info: 8: subfg optim converged updating variables
[ Info: 5 up: updating lm0 : (val = [1.0242627330060011e-15, 7.932582135649138e-16], cov = [0.01666666666666668 -8.832658165770132e-18; 2.960558957983308e-18 0.016666666666666653])
[ Info: 6 up: updating x9 : (val = [9.0, 8.999999999999998], cov = [0.01666666666666668 1.8483002926249785e-17; -2.362013629127822e-17 0.01666666666666666])
[ Info: 7 up: updating x6 : (val = [5.999999999999998, 5.999999999999997], cov = [0.0018750000000000004 -4.963542624191899e-20; -5.425261581109445e-20 0.0018749999999999997])
[ Info: 8 up: updating lm3 : (val = [2.9999999999999996, 2.9999999999999996], cov = [0.006874999999999999 -6.733996299382362e-19; 1.3277043009227365e-18 0.006875])
[ Info: 5 up: updating x0 : (val = [1.5324265971840625e-16, -2.896005646662453e-18], cov = [0.010000000000000007 -1.421095595350851e-19; 2.196339016648213e-18 0.009999999999999997])
[ Info: 6 up: updating x8 : (val = [7.999999999999997, 7.999999999999996], cov = [0.02666666666666669 2.885133261176515e-17; -3.5357416192396446e-17 0.026666666666666665])
[ Info: 7 up: updating x5 : (val = [5.000000000000001, 5.000000000000001], cov = [0.006875000000000001 3.170624206427722e-18; -2.7396662932901016e-18 0.006874999999999999])
[ Info: 8 up: updating x2 : (val = [2.0000000000000004, 2.0000000000000004], cov = [0.006875000000000001 3.170624206427722e-18; -2.7396662932901016e-18 0.006874999999999999])
[ Info: 5 up: updating x2 : (val = [2.0000000000000004, 2.0000000000000004], cov = [0.026666666666666693 -5.6628866941944535e-18; 8.070744127850465e-18 0.026666666666666655])
[ Info: 6 up: updating x10 : (val = [10.0, 10.0], cov = [0.010000000000000012 1.645043234918295e-17; -1.289011131272652e-17 0.010000000000000002])
[ Info: 7 up: updating x7 : (val = [6.999999999999998, 6.999999999999997], cov = [0.006875000000000002 1.3078655134936729e-18; 1.3280995330297493e-19 0.006875000000000002])
[ Info: 8 up: updating x3 : (val = [3.0000000000000018, 3.0000000000000013], cov = [0.0018750000000000004 -4.963542624191899e-20; -5.425261581109445e-20 0.0018749999999999997])
[ Info: 5 up: updating x1 : (val = [1.0000000000000009, 1.0000000000000007], cov = [0.01666666666666667 -3.0113014626872327e-18; -2.442180641980399e-18 0.016666666666666656])
[ Info: 6 up: updating lm9 : (val = [9.0, 8.999999999999998], cov = [0.016666666666666684 1.168286624848114e-17; -2.4448567515538866e-17 0.016666666666666656])
[ Info: 7 up: updating lm6 : (val = [5.999999999999997, 5.999999999999997], cov = [0.006874999999999999 -6.733996299382362e-19; 1.3277043009227365e-18 0.006875])
[ Info: 8 up: updating x4 : (val = [3.9999999999999996, 3.999999999999999], cov = [0.006875000000000002 1.3078655134936729e-18; 1.3280995330297493e-19 0.006875000000000002])
[ Info: 5: put! on edge 4
[ Info: 6: put! on edge 5
[ Info: 7: put! on edge 6
[ Info: 8: put! on edge 7
[ Info: 3: Belief message received with status UPSOLVED
[ Info: 5: take! on edge 4
[ Info: 4: Belief message received with status UPSOLVED
[ Info: 6: take! on edge 5
[ Info: 2: Belief message received with status UPSOLVED
[ Info: 7: take! on edge 6
[ Info: 1: Belief message received with status UPSOLVED
[ Info: 8: take! on edge 7
[ Info: length mgsfcts=2
[ Info: length mgsfcts=2
[ Info: 3 vars [:lm3, :x2, :x1]
[ Info: 4 vars [:x7, :x8, :lm6, :lm9]
[ Info: 3: subfg optim converged updating variables
[ Info: 4: subfg optim converged updating variables
[ Info: 3 up: updating lm3 : (val = [2.9999999999999996, 2.9999999999999996], cov = [0.021458333333333354 9.108702150842377e-18; -3.0204757828161546e-18 0.02145833333333332])
[ Info: 4 up: updating x7 : (val = [6.999999999999998, 6.999999999999997], cov = [0.023333333333333355 -2.6842417551935217e-17; 2.107864687831802e-17 0.02333333333333333])
[ Info: 3 up: updating x2 : (val = [2.0000000000000004, 2.0000000000000004], cov = [0.013333333333333352 -6.078142685440832e-18; -5.210436574203791e-18 0.013333333333333327])
[ Info: 4 up: updating x8 : (val = [7.999999999999997, 7.999999999999996], cov = [0.013333333333333346 -1.969345502140377e-17; 2.3085573217702778e-17 0.013333333333333338])
[ Info: 3 up: updating x1 : (val = [1.0000000000000009, 1.0000000000000007], cov = [0.01145833333333335 -1.6910734425245503e-18; -3.967475381395687e-18 0.011458333333333317])
[ Info: 4 up: updating lm6 : (val = [5.999999999999997, 5.999999999999997], cov = [0.023333333333333362 -3.630987926839472e-17; 2.854710792188357e-17 0.02333333333333334])
[ Info: 3: put! on edge 2
[ Info: 4 up: updating lm9 : (val = [9.0, 8.999999999999998], cov = [0.011458333333333345 -1.7339018326541786e-18; 1.1124406219649813e-17 0.011458333333333343])
[ Info: 4: put! on edge 3
[ Info: 1: Belief message received with status UPSOLVED
[ Info: 3: take! on edge 2
[ Info: 2: Belief message received with status UPSOLVED
[ Info: 4: take! on edge 3
[ Info: length mgsfcts=6
[ Info: 2 vars [:x5, :x7, :lm6, :lm9]
[ Info: 2: subfg optim converged updating variables
[ Info: 2 up: updating x5 : (val = [5.000000000000001, 5.000000000000001], cov = [0.006875000000000002 -9.380766899626906e-19; 2.4626822820745072e-18 0.006874999999999998])
[ Info: 2 up: updating x7 : (val = [6.999999999999998, 6.999999999999997], cov = [0.003330791435690401 -5.064087490043539e-18; -5.778831577083762e-19 0.0033307914356904018])
[ Info: 2 up: updating lm6 : (val = [5.999999999999997, 5.999999999999997], cov = [0.0038691717884548394 -4.58529151257498e-18; -1.4926290483590316e-18 0.003869171788454841])
[ Info: 2 up: updating lm9 : (val = [9.0, 8.999999999999998], cov = [0.006289531915634231 1.2786673665695554e-17; -6.183899022267651e-19 0.0062895319156342265])
[ Info: 2: put! on edge 1
[ Info: 1: Belief message received with status UPSOLVED
[ Info: 2: take! on edge 1
[ Info: length mgsfcts=7
[ Info: 1 vars [:lm3, :x2, :x5, :lm6, :x4]
[ Info: 1: subfg optim converged updating variables
[ Info: 1 up: updating lm3 : (val = [2.9999999999999996, 2.9999999999999996], cov = [0.0024794296278349034 5.101429515652503e-19; -1.3396370710094567e-19 0.0024794296278348995])
[ Info: 1 up: updating x2 : (val = [2.0000000000000004, 2.0000000000000004], cov = [0.0033620127639197458 1.4757450493577378e-20; 1.3403842031068335e-19 0.003362012763919739])
[ Info: 1 up: updating x5 : (val = [5.000000000000001, 5.000000000000001], cov = [0.002218755413022146 1.244228791305239e-19; -8.217574196709877e-20 0.002218755413022145])
[ Info: 1 up: updating lm6 : (val = [5.999999999999997, 5.999999999999997], cov = [0.002494023494938922 -2.369264510232076e-18; -2.0581823989000055e-18 0.0024940234949389194])
[ Info: 1 up: updating x4 : (val = [3.9999999999999996, 3.999999999999999], cov = [0.0027707627880679555 4.415472730915626e-19; -1.1669100691138436e-20 0.002770762788067953])
[ Info: 1: down message lm3 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:lm3 => TreeBelief{ContinuousEuclid{2}}([2.9999999999999996; 2.9999999999999996], [0.0024794296278349034 5.101429515652503e-19; -1.3396370710094567e-19 0.0024794296278348995], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid))), Symbol[], nothing, IncrementalInference.ParametricMessage())
[ Info: 1: down message lm6 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:lm3 => TreeBelief{ContinuousEuclid{2}}([2.9999999999999996; 2.9999999999999996], [0.0024794296278349034 5.101429515652503e-19; -1.3396370710094567e-19 0.0024794296278348995], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid)),:lm6 => TreeBelief{ContinuousEuclid{2}}([5.999999999999997; 5.999999999999997], [0.002494023494938922 -2.369264510232076e-18; -2.0581823989000055e-18 0.0024940234949389194], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid))), Symbol[], nothing, IncrementalInference.ParametricMessage())
[ Info: 1: down message x5 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:lm3 => TreeBelief{ContinuousEuclid{2}}([2.9999999999999996; 2.9999999999999996], [0.0024794296278349034 5.101429515652503e-19; -1.3396370710094567e-19 0.0024794296278348995], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid)),:x5 => TreeBelief{ContinuousEuclid{2}}([5.000000000000001; 5.000000000000001], [0.002218755413022146 1.244228791305239e-19; -8.217574196709877e-20 0.002218755413022145], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid)),:lm6 => TreeBelief{ContinuousEuclid{2}}([5.999999999999997; 5.999999999999997], [0.002494023494938922 -2.369264510232076e-18; -2.0581823989000055e-18 0.0024940234949389194], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid))), Symbol[], nothing, IncrementalInference.ParametricMessage())
[ Info: 1: down message x2 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:lm3 => TreeBelief{ContinuousEuclid{2}}([2.9999999999999996; 2.9999999999999996], [0.0024794296278349034 5.101429515652503e-19; -1.3396370710094567e-19 0.0024794296278348995], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid)),:x2 => TreeBelief{ContinuousEuclid{2}}([2.0000000000000004; 2.0000000000000004], [0.0033620127639197458 1.4757450493577378e-20; 1.3403842031068335e-19 0.003362012763919739], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid)),:x5 => TreeBelief{ContinuousEuclid{2}}([5.000000000000001; 5.000000000000001], [0.002218755413022146 1.244228791305239e-19; -8.217574196709877e-20 0.002218755413022145], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid)),:lm6 => TreeBelief{ContinuousEuclid{2}}([5.999999999999997; 5.999999999999997], [0.002494023494938922 -2.369264510232076e-18; -2.0581823989000055e-18 0.0024940234949389194], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid))), Symbol[], nothing, IncrementalInference.ParametricMessage())
[ Info: 1: down message x4 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:lm3 => TreeBelief{ContinuousEuclid{2}}([2.9999999999999996; 2.9999999999999996], [0.0024794296278349034 5.101429515652503e-19; -1.3396370710094567e-19 0.0024794296278348995], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid)),:x2 => TreeBelief{ContinuousEuclid{2}}([2.0000000000000004; 2.0000000000000004], [0.0033620127639197458 1.4757450493577378e-20; 1.3403842031068335e-19 0.003362012763919739], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid)),:x5 => TreeBelief{ContinuousEuclid{2}}([5.000000000000001; 5.000000000000001], [0.002218755413022146 1.244228791305239e-19; -8.217574196709877e-20 0.002218755413022145], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid)),:lm6 => TreeBelief{ContinuousEuclid{2}}([5.999999999999997; 5.999999999999997], [0.002494023494938922 -2.369264510232076e-18; -2.0581823989000055e-18 0.0024940234949389194], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid)),:x4 => TreeBelief{ContinuousEuclid{2}}([3.9999999999999996; 3.999999999999999], [0.0027707627880679555 4.415472730915626e-19; -1.1669100691138436e-20 0.002770762788067953], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid))), Symbol[], nothing, IncrementalInference.ParametricMessage())
[ Info: 1: put! on edge 1
[ Info: 1: put! on edge 2
[ Info: 2: Belief message received with status DOWNSOLVED
[ Info: 1: put! on edge 7
[ Info: 2: Updating separator x5 from message [5.000000000000001; 5.000000000000001]
[ Info: 3: Belief message received with status DOWNSOLVED
[ Info: 2: Updating separator lm6 from message [5.999999999999997; 5.999999999999997]
[ Info: 3: Updating separator lm3 from message [2.9999999999999996; 2.9999999999999996]
[ Info: 8: Belief message received with status DOWNSOLVED
[ Info: 2: subfg optim converged updating variables
[ Info: 3: Updating separator x2 from message [2.0000000000000004; 2.0000000000000004]
[ Info: 8: Updating separator lm3 from message [2.9999999999999996; 2.9999999999999996]
[ Info: 1: Solve completed
[ Info: 2 down: updating x7 : (val = [6.999999999999998, 6.999999999999997], cov = [0.0022222222222222222 -2.4204655626825176e-19; -2.3400479881104373e-19 0.0022222222222222222])
[ Info: 3: subfg optim converged updating variables
[ Info: 8: Updating separator x2 from message [2.0000000000000004; 2.0000000000000004]
[ Info: transferUpdateSubGraph! -- syms=[:lm3, :lm6, :x5, :x2, :x4]
[ Info: 2 down: updating lm9 : (val = [9.0, 8.999999999999998], cov = [0.005555555555555556 5.911521861847698e-19; 9.293834749344324e-19 0.0055555555555555575])
[ Info: 3 down: updating x1 : (val = [1.0000000000000009, 1.0000000000000007], cov = [0.0022222222222222227 1.1917327907423124e-34; 1.8230561444365108e-19 0.0022222222222222222])
[ Info: 8: Updating separator x4 from message [3.9999999999999996; 3.999999999999999]

 [ Info: 2: down message lm9 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:lm9 => TreeBelief{ContinuousEuclid{2}}([9.0; 8.999999999999998], [0.005555555555555556 5.911521861847698e-19; 9.293834749344324e-19 0.0055555555555555575], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid))), Symbol[], nothing, IncrementalInference.ParametricMessage())
[ Info: 3: down message x1 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:x1 => TreeBelief{ContinuousEuclid{2}}([1.0000000000000009; 1.0000000000000007], [0.0022222222222222227 1.1917327907423124e-34; 1.8230561444365108e-19 0.0022222222222222222], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid))), Symbol[], nothing, IncrementalInference.ParametricMessage())
[ Info: 8: subfg optim converged updating variables
lm3[ Info: 2: down message x7 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:x7 => TreeBelief{ContinuousEuclid{2}}([6.999999999999998; 6.999999999999997], [0.0022222222222222222 -2.4204655626825176e-19; -2.3400479881104373e-19 0.0022222222222222222], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid)),:lm9 => TreeBelief{ContinuousEuclid{2}}([9.0; 8.999999999999998], [0.005555555555555556 5.911521861847698e-19; 9.293834749344324e-19 0.0055555555555555575], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid))), Symbol[], nothing, IncrementalInference.ParametricMessage())
[ Info: 3: put! on edge 4
[ Info: 8 down: updating x3 : (val = [3.0000000000000018, 3.0000000000000013], cov = [0.0018750000000000006 -6.578054250450097e-22; -3.051040677859475e-20 0.0018750000000000006])
: [ Info: 2: put! on edge 3
[ Info: 8: down message x3 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:x3 => TreeBelief{ContinuousEuclid{2}}([3.0000000000000018; 3.0000000000000013], [0.0018750000000000006 -6.578054250450097e-22; -3.051040677859475e-20 0.0018750000000000006], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid))), Symbol[], nothing, IncrementalInference.ParametricMessage())
2.9999999999999996[ Info: 2: put! on edge 6
[ Info: 8: Solve completed

[ Info: 5: Belief message received with status DOWNSOLVED
[ Info: transferUpdateSubGraph! -- syms=[:x3]
[ Info: 4: Belief message received with status DOWNSOLVED

 [ Info: 5: Updating separator x1 from message [1.0000000000000009; 1.0000000000000007]
[ Info: 3: Solve completed
[ Info: 4: Updating separator x7 from message [6.999999999999998; 6.999999999999997]
lm6[ Info: 5: subfg optim converged updating variables
[ Info: 7: Belief message received with status DOWNSOLVED
[ Info: transferUpdateSubGraph! -- syms=[:x1]
[ Info: 4: Updating separator lm9 from message [9.0; 8.999999999999998]
: [ Info: 5 down: updating x0 : (val = [1.5324265971840625e-16, -2.896005646662453e-18], cov = [0.009999999999999995 7.55275598996202e-18; -9.10098085517889e-18 0.01])
[ Info: 7: Updating separator x7 from message [6.999999999999998; 6.999999999999997]
[ Info: 2: Solve completed
[ Info: 4: subfg optim converged updating variables
5.999999999999997[ Info: 5 down: updating lm0 : (val = [1.0242627330060011e-15, 7.932582135649138e-16], cov = [0.016666666666666653 1.619389956320726e-17; -1.6706131818498424e-17 0.016666666666666653])
[ Info: 7: subfg optim converged updating variables
[ Info: transferUpdateSubGraph! -- syms=[:lm9, :x7]
[ Info: 4 down: updating x8 : (val = [7.999999999999997, 7.999999999999996], cov = [0.0018750000000000006 -6.578054250450097e-22; -3.051040677859475e-20 0.0018750000000000006])

[ Info: 5: down message x0 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:x0 => TreeBelief{ContinuousEuclid{2}}([1.5324265971840625e-16; -2.896005646662453e-18], [0.009999999999999995 7.55275598996202e-18; -9.10098085517889e-18 0.01], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid))), Symbol[], nothing, IncrementalInference.ParametricMessage())
[ Info: 7 down: updating x6 : (val = [5.999999999999998, 5.999999999999997], cov = [0.0018750000000000006 -6.578054250450097e-22; -3.051040677859475e-20 0.0018750000000000006])
[ Info: 4: down message x8 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:x8 => TreeBelief{ContinuousEuclid{2}}([7.999999999999997; 7.999999999999996], [0.0018750000000000006 -6.578054250450097e-22; -3.051040677859475e-20 0.0018750000000000006], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid))), Symbol[], nothing, IncrementalInference.ParametricMessage())

 [ Info: 5: down message lm0 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:x0 => TreeBelief{ContinuousEuclid{2}}([1.5324265971840625e-16; -2.896005646662453e-18], [0.009999999999999995 7.55275598996202e-18; -9.10098085517889e-18 0.01], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid)),:lm0 => TreeBelief{ContinuousEuclid{2}}([1.0242627330060011e-15; 7.932582135649138e-16], [0.016666666666666653 1.619389956320726e-17; -1.6706131818498424e-17 0.016666666666666653], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid))), Symbol[], nothing, IncrementalInference.ParametricMessage())
[ Info: 7: down message x6 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:x6 => TreeBelief{ContinuousEuclid{2}}([5.999999999999998; 5.999999999999997], [0.0018750000000000006 -6.578054250450097e-22; -3.051040677859475e-20 0.0018750000000000006], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid))), Symbol[], nothing, IncrementalInference.ParametricMessage())
[ Info: 4: put! on edge 5
x5[ Info: 5: Solve completed
[ Info: 7: Solve completed
: [ Info: transferUpdateSubGraph! -- syms=[:x0, :lm0]
[ Info: transferUpdateSubGraph! -- syms=[:x6]
5.000000000000001[ Info: 6: Belief message received with status DOWNSOLVED

[ Info: 6: Updating separator x8 from message [7.999999999999997; 7.999999999999996]
[ Info: 4: Solve completed

 [ Info: 6: subfg optim converged updating variables
[ Info: transferUpdateSubGraph! -- syms=[:x8]
x2[ Info: 6 down: updating x9 : (val = [9.0, 8.999999999999998], cov = [0.016666666666666653 1.619389956320726e-17; -1.6706131818498424e-17 0.016666666666666653])
: [ Info: 6 down: updating x10 : (val = [10.0, 10.0], cov = [0.009999999999999995 7.55275598996202e-18; -9.10098085517889e-18 0.01])
2.0000000000000004[ Info: 6: down message x10 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:x10 => TreeBelief{ContinuousEuclid{2}}([10.0; 10.0], [0.009999999999999995 7.55275598996202e-18; -9.10098085517889e-18 0.01], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid))), Symbol[], nothing, IncrementalInference.ParametricMessage())

[ Info: 6: down message x9 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:x9 => TreeBelief{ContinuousEuclid{2}}([9.0; 8.999999999999998], [0.016666666666666653 1.619389956320726e-17; -1.6706131818498424e-17 0.016666666666666653], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid)),:x10 => TreeBelief{ContinuousEuclid{2}}([10.0; 10.0], [0.009999999999999995 7.55275598996202e-18; -9.10098085517889e-18 0.01], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid))), Symbol[], nothing, IncrementalInference.ParametricMessage())

 [ Info: 6: Solve completed
x4[ Info: transferUpdateSubGraph! -- syms=[:x10, :x9]
: 3.9999999999999996
[ Info: 1: Finished

 lm3: 2.9999999999999996

 x2: 2.0000000000000004

 x3: 3.0000000000000018

 x4: 3.9999999999999996
[ Info: 8: Finished

 lm3: 2.9999999999999996

 x2: 2.0000000000000004

 x1: 1.0000000000000009
[ Info: 3: Finished

 x7: 6.999999999999998

 lm6: 5.999999999999997

 x5: 5.000000000000001

 lm9: 9.0
[ Info: 2: Finished

 x0: 1.5324265971840625e-16

 lm0: 1.0242627330060011e-15

 x2: 2.0000000000000004

 x1: 1.0000000000000009
[ Info: 5: Finished

 x7: 6.999999999999998

 lm6: 5.999999999999997

 x6: 5.999999999999998

 x5: 5.000000000000001
[ Info: 7: Finished

 x7: 6.999999999999998

 lm6: 5.999999999999997

 x8: 7.999999999999997

 lm9: 9.0
[ Info: 4: Finished

 x9: 9.0

 x10: 10.0

 x8: 7.999999999999997

 lm9: 9.0
[ Info: 6: Finished
[ Info: Finished tree based Parametric inference
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x2
x0x1f1: Normal{Float64}(μ=0.0, σ=0.1)
x0f1: Normal{Float64}(μ=-1.0, σ=1.0)
x2f1: Normal{Float64}(μ=1.0, σ=1.0)
x1x2f1: Normal{Float64}(μ=0.0, σ=0.1)
:x0 => (val = [-0.009900990099009901], cov = [0.5049504950495047])
:x2 => (val = [0.009900990099009901], cov = [0.5049504950495048])
:x1 => (val = [0.0], cov = [0.505])

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
┌ Error: Under development, do not use, see #539
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/BWQe4/src/SolverAPI.jl:202
[ Info: Solving over the Bayes (Junction) tree.
[ Info: Do tree based init-inference
[ Info: length mgsfcts=0
[ Info: 1: take! on edge 1
[ Info: 2 vars [:x0, :x1]
[ Info: 2: subfg optim converged updating variables
[ Info: 2 up: updating x0 : (val = [-1.0], cov = [0.9999999999999942])
[ Info: 2 up: updating x1 : (val = [-1.0], cov = [1.009999999999994])
[ Info: 2: put! on edge 1
[ Info: 1: Belief message received with status UPSOLVED
[ Info: 2: take! on edge 1
[ Info: length mgsfcts=1
[ Info: 1 vars [:x2, :x1]
[ Info: 1: subfg optim converged updating variables
[ Info: 1 up: updating x2 : (val = [0.009900990099009901], cov = [0.5049504950495058])
[ Info: 1 up: updating x1 : (val = [0.0], cov = [0.5050000000000009])
[ Info: 1: down message x1 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:x1 => TreeBelief{ContinuousScalar}([0.0], [0.5050000000000009], 0.0, ContinuousScalar(), (:Euclid,))), Symbol[], nothing, IncrementalInference.ParametricMessage())
[ Info: 1: down message x2 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:x2 => TreeBelief{ContinuousScalar}([0.009900990099009901], [0.5049504950495058], 0.0, ContinuousScalar(), (:Euclid,)),:x1 => TreeBelief{ContinuousScalar}([0.0], [0.5050000000000009], 0.0, ContinuousScalar(), (:Euclid,))), Symbol[], nothing, IncrementalInference.ParametricMessage())
[ Info: 1: put! on edge 1
[ Info: 2: Belief message received with status DOWNSOLVED
[ Info: 2: Updating separator x1 from message [0.0]
[ Info: 1: Solve completed
[ Info: 2: subfg optim converged updating variables
[ Info: transferUpdateSubGraph! -- syms=[:x1, :x2]
[ Info: 2 down: updating x0 : (val = [-0.009900990112602814], cov = [0.9999999999999942])

 [ Info: 2: down message x0 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:x0 => TreeBelief{ContinuousScalar}([-0.009900990112602814], [0.9999999999999942], 0.0, ContinuousScalar(), (:Euclid,))), Symbol[], nothing, IncrementalInference.ParametricMessage())
x2[ Info: 2: Solve completed
: [ Info: transferUpdateSubGraph! -- syms=[:x0]
0.009900990099009901

 x1: 0.0
[ Info: 1: Finished

 x0: -0.009900990112602814

 x1: 0.0
[ Info: 2: Finished
[ Info: Finished tree based Parametric inference
x0: [-0.009900990099009901]
x2: [0.009900990099009901]
x1: [0.0]
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x10

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
┌ Error: Under development, do not use, see #539
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/BWQe4/src/SolverAPI.jl:202
[ Info: Solving over the Bayes (Junction) tree.
[ Info: Do tree based init-inference
[ Info: length mgsfcts=0
[ Info: length mgsfcts=0
[ Info: length mgsfcts=0
[ Info: 1: take! on edge 2
[ Info: 1: take! on edge 3
[ Info: 2: take! on edge 1
[ Info: 3: take! on edge 4
[ Info: 4 vars [:lm10, :x9, :x10]
[ Info: 5 vars [:lm10, :x6, :x7]
[ Info: 6 vars [:x5, :x4]
[ Info: 4: subfg optim converged updating variables
[ Info: 5: subfg optim converged updating variables
[ Info: 6: subfg optim converged updating variables
[ Info: 4 up: updating lm10 : (val = [10.0], cov = [0.019999999999999987])
[ Info: 5 up: updating lm10 : (val = [10.0], cov = [0.005555555555555551])
[ Info: 6 up: updating x5 : (val = [4.999999999999999], cov = [0.0024999999999999988])
[ Info: 4 up: updating x9 : (val = [8.999999999999998], cov = [0.019999999999999997])
[ Info: 5 up: updating x6 : (val = [6.000000000000001], cov = [0.0022222222222222222])
[ Info: 6 up: updating x4 : (val = [3.9999999999999987], cov = [0.0024999999999999988])
[ Info: 4 up: updating x10 : (val = [9.999999999999998], cov = [0.009999999999999995])
[ Info: 5 up: updating x7 : (val = [7.000000000000001], cov = [0.005555555555555554])
[ Info: 6: put! on edge 4
[ Info: 4: put! on edge 2
[ Info: 5: put! on edge 3
[ Info: 3: Belief message received with status UPSOLVED
[ Info: 6: take! on edge 4
[ Info: 1: Belief message received with status UPSOLVED
[ Info: 4: take! on edge 2
[ Info: 1: Belief message received with status UPSOLVED
[ Info: 5: take! on edge 3
[ Info: length mgsfcts=0
[ Info: length mgsfcts=4
[ Info: 3 vars [:lm0, :x2, :x3, :x4]
[ Info: 1 vars [:lm10, :x9, :x7, :x8]
[ Info: 3: subfg optim converged updating variables
[ Info: 1: subfg optim converged updating variables
[ Info: 3 up: updating lm0 : (val = [-7.28583859910259e-17], cov = [0.0035416666666666674])
[ Info: 1 up: updating lm10 : (val = [10.0], cov = [0.0028959039916514454])
[ Info: 3 up: updating x2 : (val = [2.0], cov = [0.006875000000000003])
[ Info: 1 up: updating x9 : (val = [8.999999999999998], cov = [0.006042264544743019])
[ Info: 3 up: updating x3 : (val = [2.999999999999999], cov = [0.001875])
[ Info: 1 up: updating x7 : (val = [7.000000000000001], cov = [0.0035155230889642565])
[ Info: 3 up: updating x4 : (val = [3.9999999999999987], cov = [0.0035416666666666687])
[ Info: 1 up: updating x8 : (val = [8.0], cov = [0.005746151839290369])
[ Info: 3: put! on edge 1
[ Info: 1: down message lm10 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:lm10 => TreeBelief{ContinuousScalar}([10.0], [0.0028959039916514454], 0.0, ContinuousScalar(), (:Euclid,))), Symbol[], nothing, IncrementalInference.ParametricMessage())
[ Info: 1: down message x7 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:lm10 => TreeBelief{ContinuousScalar}([10.0], [0.0028959039916514454], 0.0, ContinuousScalar(), (:Euclid,)),:x7 => TreeBelief{ContinuousScalar}([7.000000000000001], [0.0035155230889642565], 0.0, ContinuousScalar(), (:Euclid,))), Symbol[], nothing, IncrementalInference.ParametricMessage())
[ Info: 2: Belief message received with status UPSOLVED
[ Info: 3: take! on edge 1
[ Info: 1: down message x9 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:lm10 => TreeBelief{ContinuousScalar}([10.0], [0.0028959039916514454], 0.0, ContinuousScalar(), (:Euclid,)),:x9 => TreeBelief{ContinuousScalar}([8.999999999999998], [0.006042264544743019], 0.0, ContinuousScalar(), (:Euclid,)),:x7 => TreeBelief{ContinuousScalar}([7.000000000000001], [0.0035155230889642565], 0.0, ContinuousScalar(), (:Euclid,))), Symbol[], nothing, IncrementalInference.ParametricMessage())
[ Info: 1: down message x8 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:lm10 => TreeBelief{ContinuousScalar}([10.0], [0.0028959039916514454], 0.0, ContinuousScalar(), (:Euclid,)),:x9 => TreeBelief{ContinuousScalar}([8.999999999999998], [0.006042264544743019], 0.0, ContinuousScalar(), (:Euclid,)),:x7 => TreeBelief{ContinuousScalar}([7.000000000000001], [0.0035155230889642565], 0.0, ContinuousScalar(), (:Euclid,)),:x8 => TreeBelief{ContinuousScalar}([8.0], [0.005746151839290369], 0.0, ContinuousScalar(), (:Euclid,))), Symbol[], nothing, IncrementalInference.ParametricMessage())
[ Info: length mgsfcts=2
[ Info: 1: put! on edge 2
[ Info: 2 vars [:lm0, :x0, :x2, :x1]
[ Info: 1: put! on edge 3
[ Info: 2: subfg optim converged updating variables
[ Info: 4: Belief message received with status DOWNSOLVED
[ Info: 2 up: updating lm0 : (val = [-7.28583859910259e-17], cov = [0.0024432541366143376])
[ Info: 4: Updating separator lm10 from message [10.0]
[ Info: 5: Belief message received with status DOWNSOLVED
[ Info: 2 up: updating x0 : (val = [-6.591949208711867e-17], cov = [0.00456936784047518])
[ Info: 4: Updating separator x9 from message [8.999999999999998]
[ Info: 5: Updating separator lm10 from message [10.0]
[ Info: 1: Solve completed
[ Info: 2 up: updating x2 : (val = [2.0], cov = [0.003826898599915145])
[ Info: 4: subfg optim converged updating variables
[ Info: 5: Updating separator x7 from message [7.000000000000001]
[ Info: transferUpdateSubGraph! -- syms=[:lm10, :x7, :x9, :x8]
[ Info: 2 up: updating x1 : (val = [1.0000000000000002], cov = [0.005345248196860419])
[ Info: 4 down: updating x10 : (val = [9.999999999999998], cov = [0.009999999999999993])
[ Info: 5: subfg optim converged updating variables

 [ Info: 2: down message lm0 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:lm0 => TreeBelief{ContinuousScalar}([-7.28583859910259e-17], [0.0024432541366143376], 0.0, ContinuousScalar(), (:Euclid,))), Symbol[], nothing, IncrementalInference.ParametricMessage())
[ Info: 4: down message x10 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:x10 => TreeBelief{ContinuousScalar}([9.999999999999998], [0.009999999999999993], 0.0, ContinuousScalar(), (:Euclid,))), Symbol[], nothing, IncrementalInference.ParametricMessage())
[ Info: 5 down: updating x6 : (val = [6.000000000000001], cov = [0.0022222222222222222])
lm10[ Info: 2: down message x0 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:lm0 => TreeBelief{ContinuousScalar}([-7.28583859910259e-17], [0.0024432541366143376], 0.0, ContinuousScalar(), (:Euclid,)),:x0 => TreeBelief{ContinuousScalar}([-6.591949208711867e-17], [0.00456936784047518], 0.0, ContinuousScalar(), (:Euclid,))), Symbol[], nothing, IncrementalInference.ParametricMessage())
[ Info: 4: Solve completed
[ Info: 5: down message x6 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:x6 => TreeBelief{ContinuousScalar}([6.000000000000001], [0.0022222222222222222], 0.0, ContinuousScalar(), (:Euclid,))), Symbol[], nothing, IncrementalInference.ParametricMessage())
: [ Info: 2: down message x2 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:lm0 => TreeBelief{ContinuousScalar}([-7.28583859910259e-17], [0.0024432541366143376], 0.0, ContinuousScalar(), (:Euclid,)),:x0 => TreeBelief{ContinuousScalar}([-6.591949208711867e-17], [0.00456936784047518], 0.0, ContinuousScalar(), (:Euclid,)),:x2 => TreeBelief{ContinuousScalar}([2.0], [0.003826898599915145], 0.0, ContinuousScalar(), (:Euclid,))), Symbol[], nothing, IncrementalInference.ParametricMessage())
[ Info: transferUpdateSubGraph! -- syms=[:x10]
[ Info: 5: Solve completed
10.0[ Info: 2: down message x1 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:lm0 => TreeBelief{ContinuousScalar}([-7.28583859910259e-17], [0.0024432541366143376], 0.0, ContinuousScalar(), (:Euclid,)),:x0 => TreeBelief{ContinuousScalar}([-6.591949208711867e-17], [0.00456936784047518], 0.0, ContinuousScalar(), (:Euclid,)),:x2 => TreeBelief{ContinuousScalar}([2.0], [0.003826898599915145], 0.0, ContinuousScalar(), (:Euclid,)),:x1 => TreeBelief{ContinuousScalar}([1.0000000000000002], [0.005345248196860419], 0.0, ContinuousScalar(), (:Euclid,))), Symbol[], nothing, IncrementalInference.ParametricMessage())
[ Info: transferUpdateSubGraph! -- syms=[:x6]

[ Info: 2: put! on edge 1

 x7[ Info: 3: Belief message received with status DOWNSOLVED
: [ Info: 3: Updating separator lm0 from message [-7.28583859910259e-17]
[ Info: 2: Solve completed
7.000000000000001[ Info: 3: Updating separator x2 from message [2.0]
[ Info: transferUpdateSubGraph! -- syms=[:lm0, :x0, :x2, :x1]

[ Info: 3: subfg optim converged updating variables

 [ Info: 3 down: updating x3 : (val = [2.999999999999999], cov = [0.001875])
x9[ Info: 3 down: updating x4 : (val = [3.9999999999999987], cov = [0.003541666666666663])
: [ Info: 3: down message x4 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:x4 => TreeBelief{ContinuousScalar}([3.9999999999999987], [0.003541666666666663], 0.0, ContinuousScalar(), (:Euclid,))), Symbol[], nothing, IncrementalInference.ParametricMessage())
8.999999999999998[ Info: 3: down message x3 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:x3 => TreeBelief{ContinuousScalar}([2.999999999999999], [0.001875], 0.0, ContinuousScalar(), (:Euclid,)),:x4 => TreeBelief{ContinuousScalar}([3.9999999999999987], [0.003541666666666663], 0.0, ContinuousScalar(), (:Euclid,))), Symbol[], nothing, IncrementalInference.ParametricMessage())

[ Info: 3: put! on edge 4

 x8[ Info: 6: Belief message received with status DOWNSOLVED
: [ Info: 6: Updating separator x4 from message [3.9999999999999987]
[ Info: 3: Solve completed
8.0[ Info: 6: subfg optim converged updating variables
[ Info: transferUpdateSubGraph! -- syms=[:x4, :x3]

[ Info: 6 down: updating x5 : (val = [4.999999999999999], cov = [0.0024999999999999988])
[ Info: 1: Finished
[ Info: 6: down message x5 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:x5 => TreeBelief{ContinuousScalar}([4.999999999999999], [0.0024999999999999988], 0.0, ContinuousScalar(), (:Euclid,))), Symbol[], nothing, IncrementalInference.ParametricMessage())

 [ Info: 6: Solve completed
lm10[ Info: transferUpdateSubGraph! -- syms=[:x5]
: 10.0

 x9: 8.999999999999998

 x10: 9.999999999999998
[ Info: 4: Finished

 lm10: 10.0

 x7: 7.000000000000001

 x6: 6.000000000000001
[ Info: 5: Finished

 lm0: -7.28583859910259e-17

 x0: -6.591949208711867e-17

 x2: 2.0

 x1: 1.0000000000000002
[ Info: 2: Finished

 lm0: -7.28583859910259e-17

 x2: 2.0

 x3: 2.999999999999999

 x4: 3.9999999999999987
[ Info: 3: Finished

 x5: 4.999999999999999

 x4: 3.9999999999999987
[ Info: 6: Finished
[ Info: Finished tree based Parametric inference
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x5
[ Info: try doautoinit! of x10

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
┌ Error: Under development, do not use, see #539
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/BWQe4/src/SolverAPI.jl:202
[ Info: Solving over the Bayes (Junction) tree.
[ Info: Do tree based init-inference
[ Info: length mgsfcts=0
[ Info: length mgsfcts=0
[ Info: length mgsfcts=0
[ Info: length mgsfcts=0
[ Info: length mgsfcts=0
[ Info: length mgsfcts=0
[ Info: length mgsfcts=0
[ Info: 1: take! on edge 1
[ Info: 1: take! on edge 2
[ Info: 2: take! on edge 6
[ Info: 2: take! on edge 7
[ Info: 2: take! on edge 10
[ Info: 3: take! on edge 3
[ Info: 3: take! on edge 5
[ Info: 4: take! on edge 4
[ Info: 4: take! on edge 14
[ Info: 5: take! on edge 11
[ Info: 6: take! on edge 8
[ Info: 6: take! on edge 12
[ Info: 7: take! on edge 15
[ Info: 8: take! on edge 9
[ Info: 9: take! on edge 13
[ Info: 10: take! on edge 16
[ Info: 11: take! on edge 17
[ Info: 12 vars [:lm0, :x0, :x2, :x1]
[ Info: 13 vars [:x6, :x5, :x7, :lm6]
[ Info: 14 vars [:x9, :x8, :x10, :lm9]
[ Info: 15 vars [:lm3, :x2, :x3, :x4]
[ Info: 16 vars [:x12, :x13, :x11, :lm12]
[ Info: 17 vars [:x15, :x16, :lm15, :x14]
[ Info: 18 vars [:x20, :x19, :lm18]
[ Info: 12: subfg optim converged updating variables
[ Info: 13: subfg optim converged updating variables
[ Info: 14: subfg optim converged updating variables
[ Info: 15: subfg optim converged updating variables
[ Info: 16: subfg optim converged updating variables
[ Info: 17: subfg optim converged updating variables
[ Info: 18: subfg optim converged updating variables
[ Info: 12 up: updating lm0 : (val = [0.0, -2.220446049250313e-16], cov = [0.01666666666666668 -8.832658165770132e-18; 2.960558957983308e-18 0.016666666666666653])
[ Info: 13 up: updating x6 : (val = [0.0, 0.0], cov = [0.0018750000000000004 -4.963542624191899e-20; -5.425261581109445e-20 0.0018749999999999997])
[ Info: 14 up: updating x9 : (val = [0.0, 0.0], cov = [0.0018750000000000004 -4.963542624191899e-20; -5.425261581109445e-20 0.0018749999999999997])
[ Info: 15 up: updating lm3 : (val = [0.0, 0.0], cov = [0.006874999999999999 -6.733996299382362e-19; 1.3277043009227365e-18 0.006875])
[ Info: 16 up: updating x12 : (val = [0.0, 0.0], cov = [0.0018750000000000004 -4.963542624191899e-20; -5.425261581109445e-20 0.0018749999999999997])
[ Info: 17 up: updating x15 : (val = [0.0, 0.0], cov = [0.0018750000000000004 -4.963542624191899e-20; -5.425261581109445e-20 0.0018749999999999997])
[ Info: 18 up: updating x20 : (val = [1.0, 1.0], cov = [0.0022222222222222222 -1.1065571341165472e-19; 1.446842522173771e-19 0.002222222222222222])
[ Info: 12 up: updating x0 : (val = [-2.7755575615628914e-16, -2.7755575615628914e-16], cov = [0.010000000000000007 -1.421095595350851e-19; 2.196339016648213e-18 0.009999999999999997])
[ Info: 13 up: updating x5 : (val = [-0.9999999999999999, -0.9999999999999999], cov = [0.006875000000000001 3.170624206427722e-18; -2.7396662932901016e-18 0.006874999999999999])
[ Info: 14 up: updating x8 : (val = [-0.9999999999999999, -0.9999999999999999], cov = [0.006875000000000001 3.170624206427722e-18; -2.7396662932901016e-18 0.006874999999999999])
[ Info: 15 up: updating x2 : (val = [-0.9999999999999999, -0.9999999999999999], cov = [0.006875000000000001 3.170624206427722e-18; -2.7396662932901016e-18 0.006874999999999999])
[ Info: 16 up: updating x13 : (val = [0.9999999999999999, 0.9999999999999999], cov = [0.006875000000000002 1.3078655134936729e-18; 1.3280995330297493e-19 0.006875000000000002])
[ Info: 17 up: updating x16 : (val = [0.9999999999999999, 0.9999999999999999], cov = [0.006875000000000002 1.3078655134936729e-18; 1.3280995330297493e-19 0.006875000000000002])
[ Info: 18 up: updating x19 : (val = [0.0, 0.0], cov = [0.005555555555555557 -5.34741358077415e-19; 1.9911252392053202e-19 0.005555555555555554])
[ Info: 12 up: updating x2 : (val = [2.0000000000000004, 2.0000000000000004], cov = [0.026666666666666693 -5.6628866941944535e-18; 8.070744127850465e-18 0.026666666666666655])
[ Info: 13 up: updating x7 : (val = [0.9999999999999999, 0.9999999999999999], cov = [0.006875000000000002 1.3078655134936729e-18; 1.3280995330297493e-19 0.006875000000000002])
[ Info: 14 up: updating x10 : (val = [0.9999999999999999, 0.9999999999999999], cov = [0.006875000000000002 1.3078655134936729e-18; 1.3280995330297493e-19 0.006875000000000002])
[ Info: 15 up: updating x3 : (val = [0.0, 0.0], cov = [0.0018750000000000004 -4.963542624191899e-20; -5.425261581109445e-20 0.0018749999999999997])
[ Info: 16 up: updating x11 : (val = [-0.9999999999999999, -0.9999999999999999], cov = [0.006875000000000001 3.170624206427722e-18; -2.7396662932901016e-18 0.006874999999999999])
[ Info: 17 up: updating lm15 : (val = [0.0, 0.0], cov = [0.006874999999999999 -6.733996299382362e-19; 1.3277043009227365e-18 0.006875])
[ Info: 18 up: updating lm18 : (val = [-1.0, -0.9999999999999998], cov = [0.005555555555555556 5.915671335740229e-19; -4.400004316934507e-19 0.0055555555555555575])
[ Info: 12 up: updating x1 : (val = [0.9999999999999998, 0.9999999999999998], cov = [0.01666666666666667 -3.0113014626872327e-18; -2.442180641980399e-18 0.016666666666666656])
[ Info: 13 up: updating lm6 : (val = [0.0, 0.0], cov = [0.006874999999999999 -6.733996299382362e-19; 1.3277043009227365e-18 0.006875])
[ Info: 14 up: updating lm9 : (val = [0.0, 0.0], cov = [0.006874999999999999 -6.733996299382362e-19; 1.3277043009227365e-18 0.006875])
[ Info: 15 up: updating x4 : (val = [0.9999999999999999, 0.9999999999999999], cov = [0.006875000000000002 1.3078655134936729e-18; 1.3280995330297493e-19 0.006875000000000002])
[ Info: 16 up: updating lm12 : (val = [0.0, 0.0], cov = [0.006874999999999999 -6.733996299382362e-19; 1.3277043009227365e-18 0.006875])
[ Info: 17 up: updating x14 : (val = [-0.9999999999999999, -0.9999999999999999], cov = [0.006875000000000001 3.170624206427722e-18; -2.7396662932901016e-18 0.006874999999999999])
[ Info: 18: put! on edge 17
[ Info: 12: put! on edge 11
[ Info: 13: put! on edge 12
[ Info: 14: put! on edge 13
[ Info: 15: put! on edge 14
[ Info: 16: put! on edge 15
[ Info: 17: put! on edge 16
[ Info: 11: Belief message received with status UPSOLVED
[ Info: 18: take! on edge 17
[ Info: 5: Belief message received with status UPSOLVED
[ Info: 12: take! on edge 11
[ Info: 6: Belief message received with status UPSOLVED
[ Info: 13: take! on edge 12
[ Info: 9: Belief message received with status UPSOLVED
[ Info: 14: take! on edge 13
[ Info: 4: Belief message received with status UPSOLVED
[ Info: 15: take! on edge 14
[ Info: 7: Belief message received with status UPSOLVED
[ Info: 16: take! on edge 15
[ Info: 10: Belief message received with status UPSOLVED
[ Info: 17: take! on edge 16
[ Info: length mgsfcts=2
[ Info: length mgsfcts=2
[ Info: length mgsfcts=3
[ Info: length mgsfcts=3
[ Info: length mgsfcts=3
[ Info: 11 vars [:x17, :x18, :x19, :lm18]
[ Info: 5 vars [:lm3, :x2, :x1]
[ Info: 9 vars [:x7, :x8, :x10, :lm6, :lm9]
[ Info: 7 vars [:x13, :x11, :x10, :lm12, :lm9]
[ Info: 10 vars [:x16, :lm15, :x13, :x14, :lm12]
[ Info: 11: subfg optim converged updating variables
[ Info: 5: subfg optim converged updating variables
[ Info: 9: subfg optim converged updating variables
[ Info: 7: subfg optim converged updating variables
[ Info: 10: subfg optim converged updating variables
[ Info: 11 up: updating x17 : (val = [-1.9999999999999998, -2.0], cov = [0.017777777777777788 -4.636320207420422e-19; -1.1569851251275357e-18 0.017777777777777774])
[ Info: 5 up: updating lm3 : (val = [2.9999999999999982, 3.000000000000002], cov = [0.021458333333333354 9.108702150842377e-18; -3.0204757828161546e-18 0.02145833333333332])
[ Info: 9 up: updating x7 : (val = [-1.9999999999999984, -2.000000000000001], cov = [0.014884868421052626 -7.094946222218099e-18; 6.957474401179511e-18 0.014884868421052636])
[ Info: 7 up: updating x13 : (val = [0.9999999999999998, 0.9999999999999998], cov = [0.006875000000000001 -1.307865513493673e-18; 1.307865513493673e-18 0.006875000000000001])
[ Info: 10 up: updating x16 : (val = [0.9999999999999997, 0.9999999999999997], cov = [0.006875000000000001 -1.307865513493673e-18; 1.307865513493673e-18 0.006875000000000001])
[ Info: 11 up: updating x18 : (val = [-0.9999999999999998, -0.9999999999999999], cov = [0.007777777777777784 5.645896676157156e-18; 1.5668051554621917e-19 0.007777777777777777])
[ Info: 5 up: updating x2 : (val = [1.9999999999999982, 2.000000000000002], cov = [0.013333333333333352 -6.078142685440832e-18; -5.210436574203791e-18 0.013333333333333327])
[ Info: 9 up: updating x8 : (val = [-1.0000000000000047, -0.9999999999999951], cov = [0.0048848684210526265 -7.491107507344259e-19; 2.056150059043119e-18 0.004884868421052631])
[ Info: 7 up: updating x11 : (val = [-1.000000000000001, -0.9999999999999986], cov = [0.0048848684210526265 -7.491107507344259e-19; 2.056150059043119e-18 0.004884868421052631])
[ Info: 10 up: updating lm15 : (val = [1.4190038033490282e-15, -2.007075061705166e-15], cov = [0.0048848684210526265 -1.0437109000235582e-18; -5.601041361481089e-19 0.00488486842105263])
[ Info: 11 up: updating x19 : (val = [9.020562075079397e-17, 1.249000902703301e-16], cov = [0.003819444444444445 1.5226816229262279e-18; -5.052176474774503e-20 0.0038194444444444448])
[ Info: 5 up: updating x1 : (val = [1.0000000000000027, 0.9999999999999982], cov = [0.01145833333333335 -1.6910734425245503e-18; -3.967475381395687e-18 0.011458333333333317])
[ Info: 9 up: updating x10 : (val = [0.9999999999999996, 0.9999999999999996], cov = [0.006875000000000001 -1.307865513493673e-18; 1.307865513493673e-18 0.006875000000000001])
[ Info: 7 up: updating x10 : (val = [-1.9999999999999993, -2.0], cov = [0.014884868421052626 -7.094946222218099e-18; 6.957474401179511e-18 0.014884868421052636])
[ Info: 10 up: updating x13 : (val = [-1.9999999999999987, -2.000000000000001], cov = [0.014884868421052626 -7.094946222218099e-18; 6.957474401179511e-18 0.014884868421052636])
[ Info: 11 up: updating lm18 : (val = [-1.0, -0.9999999999999998], cov = [0.003819444444444448 -5.322443287377442e-18; 1.4897912846136355e-18 0.0038194444444444448])
[ Info: 5: put! on edge 4
[ Info: 9 up: updating lm6 : (val = [-2.9999999999999982, -3.000000000000001], cov = [0.014884868421052624 2.787551866078542e-18; -4.4681315823354304e-18 0.014884868421052633])
[ Info: 7 up: updating lm12 : (val = [2.8275992658421956e-16, -6.192962809237201e-16], cov = [0.0048848684210526265 -1.0437109000235582e-18; -5.601041361481089e-19 0.00488486842105263])
[ Info: 10 up: updating x14 : (val = [-1.0000000000000047, -0.9999999999999953], cov = [0.0048848684210526265 -7.491107507344259e-19; 2.056150059043119e-18 0.004884868421052631])
[ Info: 11: put! on edge 10
[ Info: 9 up: updating lm9 : (val = [1.4346163146328195e-15, -1.987993103469421e-15], cov = [0.0048848684210526265 -1.0437109000235582e-18; -5.601041361481089e-19 0.00488486842105263])
[ Info: 7 up: updating lm9 : (val = [-2.999999999999999, -3.0], cov = [0.014884868421052624 2.787551866078542e-18; -4.4681315823354304e-18 0.014884868421052633])
[ Info: 10 up: updating lm12 : (val = [-2.9999999999999987, -3.000000000000001], cov = [0.014884868421052624 2.787551866078542e-18; -4.4681315823354304e-18 0.014884868421052633])
[ Info: 4: Belief message received with status UPSOLVED
[ Info: 5: take! on edge 4
[ Info: 9: put! on edge 8
[ Info: 7: put! on edge 6
[ Info: 10: put! on edge 9
[ Info: 2: Belief message received with status UPSOLVED
[ Info: 11: take! on edge 10
[ Info: length mgsfcts=5
[ Info: 6: Belief message received with status UPSOLVED
[ Info: 9: take! on edge 8
[ Info: 2: Belief message received with status UPSOLVED
[ Info: 7: take! on edge 6
[ Info: 8: Belief message received with status UPSOLVED
[ Info: 10: take! on edge 9
[ Info: 4 vars [:lm3, :x2, :x5, :lm6, :x4]
[ Info: 4: subfg optim converged updating variables
[ Info: length mgsfcts=7
[ Info: length mgsfcts=4
[ Info: 4 up: updating lm3 : (val = [0.6560824201097265, 0.6560824201097288], cov = [0.003123925440888359 5.19615463953042e-18; 6.562898899306716e-19 0.0031239254408883554])
[ Info: 6 vars [:x5, :x7, :x10, :lm6, :lm9]
[ Info: 8 vars [:x17, :x16, :lm15, :x13, :lm12, :lm18]
[ Info: 4 up: updating x2 : (val = [-0.09313740081682308, -0.09313740081682116], cov = [0.0034247733843146685 -5.494920559465821e-18; 3.0942733527556124e-19 0.003424773384314662])
[ Info: 6: subfg optim converged updating variables
[ Info: 8: subfg optim converged updating variables
[ Info: 4 up: updating x5 : (val = [2.267292837822481, 2.2672928378224824], cov = [0.014592585704180362 3.061921579502168e-20; 2.4535531116834276e-18 0.014592585704180443])
[ Info: 6 up: updating x5 : (val = [-0.9999999999999999, -0.9999999999999999], cov = [0.006875000000000003 3.469640520631904e-18; 1.576085231882914e-19 0.006874999999999995])
[ Info: 8 up: updating x17 : (val = [1.9999999999999993, 2.0], cov = [0.014702853363567652 2.207882093981936e-18; -1.1603514269299631e-18 0.01470285336356765])
[ Info: 4 up: updating lm6 : (val = [3.267292837822481, 3.267292837822482], cov = [0.014592585704180403 -1.3170652432615368e-18; 1.0047034755032702e-17 0.01459258570418032])
[ Info: 6 up: updating x7 : (val = [-0.34420958682460395, -0.34420958682460495], cov = [0.002874941246540302 -1.3712207131414997e-19; 9.582876104413596e-20 0.002874941246540303])
[ Info: 8 up: updating x16 : (val = [1.0000000000000027, 0.9999999999999966], cov = [0.004702853363567648 1.4931252950794306e-18; -5.706825702757507e-19 0.004702853363567649])
[ Info: 4 up: updating x4 : (val = [1.2672928378224821, 1.2672928378224815], cov = [0.0045925857041803735 -6.228908147095114e-19; 2.3759020522326083e-18 0.004592585704180376])
[ Info: 6 up: updating x10 : (val = [0.9999999999999996, 0.9999999999999996], cov = [0.006875000000000001 1.307865513493673e-18; -1.307865513493673e-18 0.006875000000000001])
[ Info: 8 up: updating lm15 : (val = [2.723515857283587e-15, -3.6637359812630166e-15], cov = [0.003788265306122442 -1.6142498724363126e-18; -5.855225095518553e-19 0.0037882653061224493])
[ Info: 4: put! on edge 3
[ Info: 6 up: updating lm6 : (val = [-1.0746266888423004, -1.0746266888423008], cov = [0.003492735387749747 -1.301721575945571e-19; 1.2135874079347802e-19 0.0034927353877497467])
[ Info: 8 up: updating x13 : (val = [-1.999999999999999, -2.0000000000000013], cov = [0.014884868421052619 -1.1573264558804197e-17; -6.382735573466508e-18 0.01488486842105264])
[ Info: 6 up: updating lm9 : (val = [0.5433919919481689, 0.5433919919481666], cov = [0.003591399154379989 7.475191398177202e-19; -5.580110797550804e-19 0.0035913991543799926])
[ Info: 8 up: updating lm12 : (val = [-2.999999999999999, -3.0000000000000018], cov = [0.014884868421052626 -2.787551866078541e-18; 2.787551866078542e-18 0.014884868421052631])
[ Info: 3: Belief message received with status UPSOLVED
[ Info: 4: take! on edge 3
[ Info: 6: put! on edge 5
[ Info: 8 up: updating lm18 : (val = [3.0, 3.0000000000000004], cov = [0.014702853363567657 1.5055287480224594e-18; -6.740807961773796e-19 0.014702853363567652])
[ Info: 8: put! on edge 7
[ Info: 3: Belief message received with status UPSOLVED
[ Info: 6: take! on edge 5
[ Info: 2: Belief message received with status UPSOLVED
[ Info: 8: take! on edge 7
[ Info: length mgsfcts=7
[ Info: 3 vars [:lm3, :x5, :x10, :lm6, :lm9]
[ Info: length mgsfcts=11
[ Info: 3: subfg optim converged updating variables
[ Info: 2 vars [:x17, :lm15, :x13, :x10, :lm12, :lm18, :lm9]
[ Info: 3 up: updating lm3 : (val = [0.33696060382715864, 0.3369606038271607], cov = [0.0025013461749629597 2.854923084410424e-18; 3.2916634180988666e-18 0.0025013461749629584])
[ Info: 2: subfg optim converged updating variables
[ Info: 3 up: updating x5 : (val = [1.3154195257154555, 1.3154195257154544], cov = [0.0021358700011316996 1.3868514252658375e-20; 4.406889339644018e-19 0.002135870001131701])
[ Info: 2 up: updating x17 : (val = [0.44513540470498913, 0.4451354047049874], cov = [0.0035947978771059485 -8.497490632462527e-19; -3.762683083563331e-19 0.003594797877105951])
[ Info: 3 up: updating x10 : (val = [0.9999999999999996, 0.9999999999999996], cov = [0.006875000000000001 -1.307865513493673e-18; 1.307865513493673e-18 0.006875000000000001])
[ Info: 2 up: updating lm15 : (val = [0.006340129171814111, 0.006340129171809767], cov = [0.002469125315024262 -8.036618383452203e-19; -6.543852042061408e-19 0.0024691253150242658])
[ Info: 3 up: updating lm6 : (val = [0.3248816416718519, 0.3248816416718543], cov = [0.002301836093723166 -6.6583287257817696e-18; -1.3911921252734508e-19 0.002301836093723164])
[ Info: 2 up: updating x13 : (val = [-0.4157189131266803, -0.41571891312668185], cov = [0.002738566815647118 -4.840332997224873e-19; -5.822218266561373e-19 0.0027385668156471184])
[ Info: 3 up: updating lm9 : (val = [0.543391991948169, 0.5433919919481667], cov = [0.003591399154379991 2.755976496145977e-18; -1.3064457518928585e-18 0.003591399154379991])
[ Info: 2 up: updating x10 : (val = [-2.4980482785148808, -2.498048278514882], cov = [0.006907427337203418 1.1403003889912994e-18; -1.7857388914074522e-18 0.00690742733720342])
[ Info: 3: put! on edge 2
[ Info: 2 up: updating lm12 : (val = [-0.8326486689425586, -0.8326486689425601], cov = [0.0025879778151810017 -1.3893923572547168e-18; -5.624843520389525e-19 0.0025879778151810012])
[ Info: 2 up: updating lm18 : (val = [0.2017936006555877, 0.20179360065558724], cov = [0.0025210596411970165 -2.178301258400192e-18; -2.5056029974455745e-18 0.0025210596411970143])
[ Info: 1: Belief message received with status UPSOLVED
[ Info: 3: take! on edge 2
[ Info: 2 up: updating lm9 : (val = [-2.9999999999999987, -2.9999999999999996], cov = [0.014884868421052626 -2.787551866078541e-18; 2.787551866078542e-18 0.014884868421052631])
[ Info: 2: put! on edge 1
[ Info: 1: Belief message received with status UPSOLVED
[ Info: 2: take! on edge 1
[ Info: length mgsfcts=8
[ Info: 1 vars [:lm3, :lm15, :x10, :lm6, :lm18, :lm9]
[ Info: 1: subfg optim converged updating variables
[ Info: 1 up: updating lm3 : (val = [0.33696060382715853, 0.3369606038271606], cov = [0.0025013461749629597 -2.854923084410425e-18; 2.854923084410423e-18 0.002501346174962958])
[ Info: 1 up: updating lm15 : (val = [0.006340129171814107, 0.006340129171809763], cov = [0.002469125315024262 -9.705823118992931e-19; -7.452712768609528e-19 0.0024691253150242658])
[ Info: 1 up: updating x10 : (val = [1.8172688656349065, 1.817268865634906], cov = [0.002137730240723191 -1.8941404299646273e-18; 8.773255874651258e-20 0.002137730240723192])
[ Info: 1 up: updating lm6 : (val = [0.3248816416718518, 0.3248816416718542], cov = [0.0023018360937231658 -6.2423436630425036e-18; -6.756875373282667e-18 0.0023018360937231636])
[ Info: 1 up: updating lm18 : (val = [0.20179360065558768, 0.2017936006555872], cov = [0.0025210596411970165 2.1499531036932283e-18; -2.2898714766155663e-18 0.002521059641197014])
[ Info: 1 up: updating lm9 : (val = [0.07065044593419366, 0.07065044593419227], cov = [0.002351687376240023 6.149475645838433e-19; 1.0180365289273507e-18 0.0023516873762400247])
[ Info: 1: down message lm3 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:lm3 => TreeBelief{ContinuousEuclid{2}}([0.33696060382715853; 0.3369606038271606], [0.0025013461749629597 -2.854923084410425e-18; 2.854923084410423e-18 0.002501346174962958], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid))), Symbol[], nothing, IncrementalInference.ParametricMessage())
[ Info: 1: down message lm6 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:lm3 => TreeBelief{ContinuousEuclid{2}}([0.33696060382715853; 0.3369606038271606], [0.0025013461749629597 -2.854923084410425e-18; 2.854923084410423e-18 0.002501346174962958], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid)),:lm6 => TreeBelief{ContinuousEuclid{2}}([0.3248816416718518; 0.3248816416718542], [0.0023018360937231658 -6.2423436630425036e-18; -6.756875373282667e-18 0.0023018360937231636], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid))), Symbol[], nothing, IncrementalInference.ParametricMessage())
[ Info: 1: down message x10 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:lm3 => TreeBelief{ContinuousEuclid{2}}([0.33696060382715853; 0.3369606038271606], [0.0025013461749629597 -2.854923084410425e-18; 2.854923084410423e-18 0.002501346174962958], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid)),:x10 => TreeBelief{ContinuousEuclid{2}}([1.8172688656349065; 1.817268865634906], [0.002137730240723191 -1.8941404299646273e-18; 8.773255874651258e-20 0.002137730240723192], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid)),:lm6 => TreeBelief{ContinuousEuclid{2}}([0.3248816416718518; 0.3248816416718542], [0.0023018360937231658 -6.2423436630425036e-18; -6.756875373282667e-18 0.0023018360937231636], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid))), Symbol[], nothing, IncrementalInference.ParametricMessage())
[ Info: 1: down message lm18 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:lm3 => TreeBelief{ContinuousEuclid{2}}([0.33696060382715853; 0.3369606038271606], [0.0025013461749629597 -2.854923084410425e-18; 2.854923084410423e-18 0.002501346174962958], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid)),:x10 => TreeBelief{ContinuousEuclid{2}}([1.8172688656349065; 1.817268865634906], [0.002137730240723191 -1.8941404299646273e-18; 8.773255874651258e-20 0.002137730240723192], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid)),:lm6 => TreeBelief{ContinuousEuclid{2}}([0.3248816416718518; 0.3248816416718542], [0.0023018360937231658 -6.2423436630425036e-18; -6.756875373282667e-18 0.0023018360937231636], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid)),:lm18 => TreeBelief{ContinuousEuclid{2}}([0.20179360065558768; 0.2017936006555872], [0.0025210596411970165 2.1499531036932283e-18; -2.2898714766155663e-18 0.002521059641197014], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid))), Symbol[], nothing, IncrementalInference.ParametricMessage())
[ Info: 1: down message lm15 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:lm3 => TreeBelief{ContinuousEuclid{2}}([0.33696060382715853; 0.3369606038271606], [0.0025013461749629597 -2.854923084410425e-18; 2.854923084410423e-18 0.002501346174962958], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid)),:lm15 => TreeBelief{ContinuousEuclid{2}}([0.006340129171814107; 0.006340129171809763], [0.002469125315024262 -9.705823118992931e-19; -7.452712768609528e-19 0.0024691253150242658], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid)),:x10 => TreeBelief{ContinuousEuclid{2}}([1.8172688656349065; 1.817268865634906], [0.002137730240723191 -1.8941404299646273e-18; 8.773255874651258e-20 0.002137730240723192], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid)),:lm6 => TreeBelief{ContinuousEuclid{2}}([0.3248816416718518; 0.3248816416718542], [0.0023018360937231658 -6.2423436630425036e-18; -6.756875373282667e-18 0.0023018360937231636], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid)),:lm18 => TreeBelief{ContinuousEuclid{2}}([0.20179360065558768; 0.2017936006555872], [0.0025210596411970165 2.1499531036932283e-18; -2.2898714766155663e-18 0.002521059641197014], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid))), Symbol[], nothing, IncrementalInference.ParametricMessage())
[ Info: 1: down message lm9 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:lm3 => TreeBelief{ContinuousEuclid{2}}([0.33696060382715853; 0.3369606038271606], [0.0025013461749629597 -2.854923084410425e-18; 2.854923084410423e-18 0.002501346174962958], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid)),:lm15 => TreeBelief{ContinuousEuclid{2}}([0.006340129171814107; 0.006340129171809763], [0.002469125315024262 -9.705823118992931e-19; -7.452712768609528e-19 0.0024691253150242658], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid)),:x10 => TreeBelief{ContinuousEuclid{2}}([1.8172688656349065; 1.817268865634906], [0.002137730240723191 -1.8941404299646273e-18; 8.773255874651258e-20 0.002137730240723192], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid)),:lm6 => TreeBelief{ContinuousEuclid{2}}([0.3248816416718518; 0.3248816416718542], [0.0023018360937231658 -6.2423436630425036e-18; -6.756875373282667e-18 0.0023018360937231636], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid)),:lm18 => TreeBelief{ContinuousEuclid{2}}([0.20179360065558768; 0.2017936006555872], [0.0025210596411970165 2.1499531036932283e-18; -2.2898714766155663e-18 0.002521059641197014], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid)),:lm9 => TreeBelief{ContinuousEuclid{2}}([0.07065044593419366; 0.07065044593419227], [0.002351687376240023 6.149475645838433e-19; 1.0180365289273507e-18 0.0023516873762400247], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid))), Symbol[], nothing, IncrementalInference.ParametricMessage())
[ Info: 1: put! on edge 1
[ Info: 1: put! on edge 2
[ Info: 2: Belief message received with status DOWNSOLVED
[ Info: 2: Updating separator lm15 from message [0.006340129171814107; 0.006340129171809763]
[ Info: 3: Belief message received with status DOWNSOLVED
[ Info: 2: Updating separator x10 from message [1.8172688656349065; 1.817268865634906]
[ Info: 3: Updating separator lm3 from message [0.33696060382715853; 0.3369606038271606]
[ Info: 1: Solve completed
[ Info: 2: Updating separator lm18 from message [0.20179360065558768; 0.2017936006555872]
[ Info: 3: Updating separator x10 from message [1.8172688656349065; 1.817268865634906]
[ Info: transferUpdateSubGraph! -- syms=[:lm3, :lm6, :x10, :lm18, :lm15, :lm9]
[ Info: 2: Updating separator lm9 from message [0.07065044593419366; 0.07065044593419227]
[ Info: 3: Updating separator lm6 from message [0.3248816416718518; 0.3248816416718542]

 [ Info: 2: subfg optim converged updating variables
[ Info: 3: Updating separator lm9 from message [0.07065044593419366; 0.07065044593419227]
lm3[ Info: 2 down: updating x17 : (val = [0.6040668649868398, 0.6040668649625528], cov = [0.008611111111111123 -6.080956744792939e-18; 1.8677621259521197e-18 0.008611111111111115])
[ Info: 3: subfg optim converged updating variables
: [ Info: 2 down: updating x13 : (val = [0.2766497080131079, 0.27664970795859417], cov = [0.005277777777777781 3.1944428809840305e-18; -9.985045941000587e-19 0.005277777777777776])
[ Info: 3 down: updating x5 : (val = [2.2206140818167945, 2.2206140818167945], cov = [0.01 0.0; 1.095110498489526e-19 0.010000000000000007])
0.33696060382715853[ Info: 2 down: updating lm12 : (val = [1.5469592867440496, 1.54695928676778], cov = [0.00861111111111112 -1.76420625758179e-18; 5.282416829951534e-18 0.008611111111111115])
[ Info: 3: down message x5 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:x5 => TreeBelief{ContinuousEuclid{2}}([2.2206140818167945; 2.2206140818167945], [0.01 0.0; 1.095110498489526e-19 0.010000000000000007], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid))), Symbol[], nothing, IncrementalInference.ParametricMessage())

[ Info: 2: down message lm12 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:lm12 => TreeBelief{ContinuousEuclid{2}}([1.5469592867440496; 1.54695928676778], [0.00861111111111112 -1.76420625758179e-18; 5.282416829951534e-18 0.008611111111111115], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid))), Symbol[], nothing, IncrementalInference.ParametricMessage())
[ Info: 3: put! on edge 3

 [ Info: 2: down message x17 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:x17 => TreeBelief{ContinuousEuclid{2}}([0.6040668649868398; 0.6040668649625528], [0.008611111111111123 -6.080956744792939e-18; 1.8677621259521197e-18 0.008611111111111115], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid)),:lm12 => TreeBelief{ContinuousEuclid{2}}([1.5469592867440496; 1.54695928676778], [0.00861111111111112 -1.76420625758179e-18; 5.282416829951534e-18 0.008611111111111115], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid))), Symbol[], nothing, IncrementalInference.ParametricMessage())
[ Info: 3: put! on edge 5
lm6[ Info: 2: down message x13 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:x17 => TreeBelief{ContinuousEuclid{2}}([0.6040668649868398; 0.6040668649625528], [0.008611111111111123 -6.080956744792939e-18; 1.8677621259521197e-18 0.008611111111111115], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid)),:x13 => TreeBelief{ContinuousEuclid{2}}([0.2766497080131079; 0.27664970795859417], [0.005277777777777781 3.1944428809840305e-18; -9.985045941000587e-19 0.005277777777777776], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid)),:lm12 => TreeBelief{ContinuousEuclid{2}}([1.5469592867440496; 1.54695928676778], [0.00861111111111112 -1.76420625758179e-18; 5.282416829951534e-18 0.008611111111111115], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid))), Symbol[], nothing, IncrementalInference.ParametricMessage())
: [ Info: 4: Belief message received with status DOWNSOLVED
[ Info: 2: put! on edge 6
0.3248816416718518[ Info: 4: Updating separator x5 from message [2.2206140818167945; 2.2206140818167945]
[ Info: 6: Belief message received with status DOWNSOLVED
[ Info: 2: put! on edge 7

[ Info: 4: subfg optim converged updating variables
[ Info: 6: Updating separator x5 from message [2.2206140818167945; 2.2206140818167945]
[ Info: 3: Solve completed
[ Info: 2: put! on edge 10

 [ Info: 4 down: updating x2 : (val = [-0.34391757988817906, -0.3439175798865157], cov = [0.010799999999999999 -2.105969095051095e-18; -1.3444297686717603e-18 0.010800000000000014])
[ Info: 6: subfg optim converged updating variables
[ Info: 7: Belief message received with status DOWNSOLVED
[ Info: transferUpdateSubGraph! -- syms=[:x5]
x10[ Info: 4 down: updating x4 : (val = [1.3813297799151414, 1.3813297799159352], cov = [0.002799999999999999 -8.07682855520598e-20; 5.074286140836776e-20 0.002799999999999998])
[ Info: 6 down: updating x7 : (val = [-0.7656173484449051, -0.76561734845664], cov = [0.0022222222222222227 1.1917327907423124e-34; 1.8230561444365108e-19 0.0022222222222222222])
[ Info: 7: Updating separator x13 from message [0.2766497080131079; 0.27664970795859417]
[ Info: 8: Belief message received with status DOWNSOLVED
: [ Info: 4: down message x2 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:x2 => TreeBelief{ContinuousEuclid{2}}([-0.34391757988817906; -0.3439175798865157], [0.010799999999999999 -2.105969095051095e-18; -1.3444297686717603e-18 0.010800000000000014], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid))), Symbol[], nothing, IncrementalInference.ParametricMessage())
[ Info: 6: down message x7 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:x7 => TreeBelief{ContinuousEuclid{2}}([-0.7656173484449051; -0.76561734845664], [0.0022222222222222227 1.1917327907423124e-34; 1.8230561444365108e-19 0.0022222222222222222], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid))), Symbol[], nothing, IncrementalInference.ParametricMessage())
[ Info: 7: Updating separator lm12 from message [1.5469592867440496; 1.54695928676778]
[ Info: 8: Updating separator x17 from message [0.6040668649868398; 0.6040668649625528]
[ Info: 11: Belief message received with status DOWNSOLVED
1.8172688656349065[ Info: 4: down message x4 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:x2 => TreeBelief{ContinuousEuclid{2}}([-0.34391757988817906; -0.3439175798865157], [0.010799999999999999 -2.105969095051095e-18; -1.3444297686717603e-18 0.010800000000000014], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid)),:x4 => TreeBelief{ContinuousEuclid{2}}([1.3813297799151414; 1.3813297799159352], [0.002799999999999999 -8.07682855520598e-20; 5.074286140836776e-20 0.002799999999999998], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid))), Symbol[], nothing, IncrementalInference.ParametricMessage())
[ Info: 6: put! on edge 8
[ Info: 7: subfg optim converged updating variables
[ Info: 8: Updating separator x13 from message [0.2766497080131079; 0.27664970795859417]
[ Info: 11: Updating separator x17 from message [0.6040668649868398; 0.6040668649625528]
[ Info: 2: Solve completed

[ Info: 4: put! on edge 4
[ Info: 6: put! on edge 12
[ Info: 7 down: updating x11 : (val = [-0.4843469044219778, -0.4843469043906842], cov = [0.0018750000000000006 -6.578054250450097e-22; -3.051040677859475e-20 0.0018750000000000006])
[ Info: 8: Updating separator lm12 from message [1.5469592867440496; 1.54695928676778]
[ Info: 11: subfg optim converged updating variables
[ Info: transferUpdateSubGraph! -- syms=[:lm12, :x17, :x13]

 [ Info: 4: put! on edge 14
[ Info: 7: down message x11 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:x11 => TreeBelief{ContinuousEuclid{2}}([-0.4843469044219778; -0.4843469043906842], [0.0018750000000000006 -6.578054250450097e-22; -3.051040677859475e-20 0.0018750000000000006], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid))), Symbol[], nothing, IncrementalInference.ParametricMessage())
[ Info: 8: subfg optim converged updating variables
[ Info: 11 down: updating x18 : (val = [0.04162674600297612, 0.041626745998084864], cov = [0.0018750000000000014 1.6959169447255084e-19; 1.5385665832906025e-19 0.0018750000000000004])
lm9[ Info: 9: Belief message received with status DOWNSOLVED
[ Info: 7: put! on edge 15
[ Info: 8 down: updating x16 : (val = [0.5346889549927718, 0.5346889549692966], cov = [0.0018750000000000006 9.10717891213124e-22; 1.4208607050678572e-19 0.0018749999999999993])
[ Info: 11 down: updating x19 : (val = [0.5208133730192825, 0.5208133730052413], cov = [0.0035416666666666665 -3.5068279205661325e-18; -3.977135054602006e-19 0.003541666666666668])
[ Info: 5: Belief message received with status DOWNSOLVED
: [ Info: 9: Updating separator x7 from message [-0.7656173484449051; -0.76561734845664]
[ Info: 13: Belief message received with status DOWNSOLVED
[ Info: 8: down message x16 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:x16 => TreeBelief{ContinuousEuclid{2}}([0.5346889549927718; 0.5346889549692966], [0.0018750000000000006 9.10717891213124e-22; 1.4208607050678572e-19 0.0018749999999999993], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid))), Symbol[], nothing, IncrementalInference.ParametricMessage())
[ Info: 11: down message x19 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:x19 => TreeBelief{ContinuousEuclid{2}}([0.5208133730192825; 0.5208133730052413], [0.0035416666666666665 -3.5068279205661325e-18; -3.977135054602006e-19 0.003541666666666668], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid))), Symbol[], nothing, IncrementalInference.ParametricMessage())
[ Info: 5: Updating separator x2 from message [-0.34391757988817906; -0.3439175798865157]
0.07065044593419366[ Info: 9: subfg optim converged updating variables
[ Info: 15: Belief message received with status DOWNSOLVED
[ Info: 13: Updating separator x7 from message [-0.7656173484449051; -0.76561734845664]
[ Info: 6: Solve completed
[ Info: 8: put! on edge 9
[ Info: 11: down message x18 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:x18 => TreeBelief{ContinuousEuclid{2}}([0.04162674600297612; 0.041626745998084864], [0.0018750000000000014 1.6959169447255084e-19; 1.5385665832906025e-19 0.0018750000000000004], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid)),:x19 => TreeBelief{ContinuousEuclid{2}}([0.5208133730192825; 0.5208133730052413], [0.0035416666666666665 -3.5068279205661325e-18; -3.977135054602006e-19 0.003541666666666668], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid))), Symbol[], nothing, IncrementalInference.ParametricMessage())
[ Info: 5: subfg optim converged updating variables

[ Info: 9 down: updating x8 : (val = [-0.5885391161572473, -0.5885391161650585], cov = [0.0018750000000000006 -6.578054250450097e-22; -3.051040677859475e-20 0.0018750000000000006])
[ Info: 15: Updating separator x2 from message [-0.34391757988817906; -0.3439175798865157]
[ Info: 4: Solve completed
[ Info: 13: subfg optim converged updating variables
[ Info: 16: Belief message received with status DOWNSOLVED
[ Info: transferUpdateSubGraph! -- syms=[:x7]
[ Info: 11: put! on edge 17
[ Info: 5 down: updating x1 : (val = [-0.1719587899301458, -0.17195878993015334], cov = [0.0022222222222222227 1.1917327907423124e-34; 1.8230561444365108e-19 0.0022222222222222222])

 [ Info: 9: down message x8 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:x8 => TreeBelief{ContinuousEuclid{2}}([-0.5885391161572473; -0.5885391161650585], [0.0018750000000000006 -6.578054250450097e-22; -3.051040677859475e-20 0.0018750000000000006], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid))), Symbol[], nothing, IncrementalInference.ParametricMessage())
[ Info: 15: Updating separator x4 from message [1.3813297799151414; 1.3813297799159352]
[ Info: transferUpdateSubGraph! -- syms=[:x2, :x4]
[ Info: 13 down: updating x6 : (val = [-0.5885391161729608, -0.5885391161416703], cov = [0.0018750000000000006 -6.578054250450097e-22; -3.051040677859475e-20 0.0018750000000000006])
[ Info: 16: Updating separator x11 from message [-0.4843469044219778; -0.4843469043906842]
[ Info: 7: Solve completed
[ Info: 5: down message x1 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:x1 => TreeBelief{ContinuousEuclid{2}}([-0.1719587899301458; -0.17195878993015334], [0.0022222222222222227 1.1917327907423124e-34; 1.8230561444365108e-19 0.0022222222222222222], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid))), Symbol[], nothing, IncrementalInference.ParametricMessage())
lm18[ Info: 9: put! on edge 13
[ Info: 15: subfg optim converged updating variables
[ Info: 13: down message x6 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:x6 => TreeBelief{ContinuousEuclid{2}}([-0.5885391161729608; -0.5885391161416703], [0.0018750000000000006 -6.578054250450097e-22; -3.051040677859475e-20 0.0018750000000000006], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid))), Symbol[], nothing, IncrementalInference.ParametricMessage())
[ Info: 16: subfg optim converged updating variables
[ Info: transferUpdateSubGraph! -- syms=[:x11]
[ Info: 10: Belief message received with status DOWNSOLVED
[ Info: 5: put! on edge 11
: [ Info: 15 down: updating x3 : (val = [0.3458040666698663, 0.34580406667182195], cov = [0.0018750000000000006 -6.578054250450097e-22; -3.051040677859475e-20 0.0018750000000000006])
[ Info: 13: Solve completed
[ Info: 16 down: updating x12 : (val = [0.17188436519424435, 0.17188436520500047], cov = [0.0018750000000000006 -6.578054250450097e-22; -3.051040677859475e-20 0.0018750000000000006])
[ Info: 10: Updating separator x16 from message [0.5346889549927718; 0.5346889549692966]
[ Info: 8: Solve completed
[ Info: 18: Belief message received with status DOWNSOLVED
0.20179360065558768[ Info: 15: down message x3 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:x3 => TreeBelief{ContinuousEuclid{2}}([0.3458040666698663; 0.34580406667182195], [0.0018750000000000006 -6.578054250450097e-22; -3.051040677859475e-20 0.0018750000000000006], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid))), Symbol[], nothing, IncrementalInference.ParametricMessage())
[ Info: transferUpdateSubGraph! -- syms=[:x6]
[ Info: 16: down message x12 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:x12 => TreeBelief{ContinuousEuclid{2}}([0.17188436519424435; 0.17188436520500047], [0.0018750000000000006 -6.578054250450097e-22; -3.051040677859475e-20 0.0018750000000000006], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid))), Symbol[], nothing, IncrementalInference.ParametricMessage())
[ Info: 10: subfg optim converged updating variables
[ Info: transferUpdateSubGraph! -- syms=[:x16]
[ Info: 18: Updating separator x19 from message [0.5208133730192825; 0.5208133730052413]
[ Info: 11: Solve completed
[ Info: 14: Belief message received with status DOWNSOLVED

[ Info: 15: Solve completed
[ Info: 16: Solve completed
[ Info: 10 down: updating x14 : (val = [-1.0000000000000047, -0.9999999999999953], cov = [0.0018750000000000006 -6.578054250450097e-22; -3.051040677859475e-20 0.0018750000000000006])
[ Info: 18: subfg optim converged updating variables
[ Info: 12: Belief message received with status DOWNSOLVED
[ Info: transferUpdateSubGraph! -- syms=[:x19, :x18]
[ Info: 14: Updating separator x8 from message [-0.5885391161572473; -0.5885391161650585]
[ Info: 9: Solve completed

 [ Info: transferUpdateSubGraph! -- syms=[:x3]
[ Info: transferUpdateSubGraph! -- syms=[:x12]
[ Info: 10: down message x14 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:x14 => TreeBelief{ContinuousEuclid{2}}([-1.0000000000000047; -0.9999999999999953], [0.0018750000000000006 -6.578054250450097e-22; -3.051040677859475e-20 0.0018750000000000006], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid))), Symbol[], nothing, IncrementalInference.ParametricMessage())
[ Info: 18 down: updating x20 : (val = [1.2604066865116392, 1.2604066865057724], cov = [0.0022222222222222227 1.1917327907423124e-34; 1.8230561444365108e-19 0.0022222222222222222])
[ Info: 12: Updating separator x1 from message [-0.1719587899301458; -0.17195878993015334]
[ Info: 5: Solve completed
[ Info: 14: subfg optim converged updating variables
[ Info: transferUpdateSubGraph! -- syms=[:x8]
lm15[ Info: 10: put! on edge 16
[ Info: 18: down message x20 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:x20 => TreeBelief{ContinuousEuclid{2}}([1.2604066865116392; 1.2604066865057724], [0.0022222222222222227 1.1917327907423124e-34; 1.8230561444365108e-19 0.0022222222222222222], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid))), Symbol[], nothing, IncrementalInference.ParametricMessage())
[ Info: 12: subfg optim converged updating variables
[ Info: transferUpdateSubGraph! -- syms=[:x1]
[ Info: 14 down: updating x9 : (val = [0.137153627948978, 0.13715362794702235], cov = [0.0018750000000000006 -6.578054250450097e-22; -3.051040677859475e-20 0.0018750000000000006])
: [ Info: 18: Solve completed
[ Info: 12 down: updating x0 : (val = [-0.5859793949843952, -0.5859793949843952], cov = [0.009999999999999995 7.55275598996202e-18; -9.10098085517889e-18 0.01])
[ Info: 14: down message x9 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:x9 => TreeBelief{ContinuousEuclid{2}}([0.137153627948978; 0.13715362794702235], [0.0018750000000000006 -6.578054250450097e-22; -3.051040677859475e-20 0.0018750000000000006], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid))), Symbol[], nothing, IncrementalInference.ParametricMessage())
0.006340129171814107[ Info: transferUpdateSubGraph! -- syms=[:x20]
[ Info: 12 down: updating lm0 : (val = [-0.585979394960927, -0.5859793949374593], cov = [0.016666666666666653 1.619389956320726e-17; -1.6706131818498424e-17 0.016666666666666653])
[ Info: 14: Solve completed
[ Info: 17: Belief message received with status DOWNSOLVED

[ Info: 12: down message x0 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:x0 => TreeBelief{ContinuousEuclid{2}}([-0.5859793949843952; -0.5859793949843952], [0.009999999999999995 7.55275598996202e-18; -9.10098085517889e-18 0.01], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid))), Symbol[], nothing, IncrementalInference.ParametricMessage())
[ Info: transferUpdateSubGraph! -- syms=[:x9]
[ Info: 17: Updating separator x14 from message [-1.0000000000000047; -0.9999999999999953]
[ Info: 10: Solve completed
[ Info: 1: Finished
[ Info: 12: down message lm0 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:x0 => TreeBelief{ContinuousEuclid{2}}([-0.5859793949843952; -0.5859793949843952], [0.009999999999999995 7.55275598996202e-18; -9.10098085517889e-18 0.01], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid)),:lm0 => TreeBelief{ContinuousEuclid{2}}([-0.585979394960927; -0.5859793949374593], [0.016666666666666653 1.619389956320726e-17; -1.6706131818498424e-17 0.016666666666666653], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid))), Symbol[], nothing, IncrementalInference.ParametricMessage())

 [ Info: 17: subfg optim converged updating variables
[ Info: transferUpdateSubGraph! -- syms=[:x14]
[ Info: 12: Solve completed
x9[ Info: 17 down: updating x15 : (val = [0.0, 0.0], cov = [0.0018750000000000006 -6.578054250450097e-22; -3.051040677859475e-20 0.0018750000000000006])
[ Info: transferUpdateSubGraph! -- syms=[:x0, :lm0]
: [ Info: 17: down message x15 : LikelihoodMessage{IncrementalInference.ParametricMessage}(:DOWNSOLVED, Dict{Symbol,TreeBelief}(:x15 => TreeBelief{ContinuousEuclid{2}}([0.0; 0.0], [0.0018750000000000006 -6.578054250450097e-22; -3.051040677859475e-20 0.0018750000000000006], 0.0, ContinuousEuclid{2}(), (:Euclid, :Euclid))), Symbol[], nothing, IncrementalInference.ParametricMessage())
0.137153627948978[ Info: 17: Solve completed

[ Info: transferUpdateSubGraph! -- syms=[:x15]

 x10: 0.9999999999999999

 x8: -0.5885391161572473

 lm9: 0.0
[ Info: 14: Finished

 x15: 0.0

 x14: -1.0000000000000047

 x16: 0.9999999999999999

 lm15: 0.0
[ Info: 17: Finished

 x19: 0.5208133730192825

 x17: 0.6040668649868398

 x18: 0.04162674600297612

 lm18: -1.0
[ Info: 11: Finished

 x7: -0.7656173484449051

 lm6: -1.0746266888423004

 x5: 2.2206140818167945

 x10: 0.9999999999999996

 lm9: 0.5433919919481689
[ Info: 6: Finished

 x10: 1.8172688656349065

 x13: 0.2766497080131079

 x17: 0.6040668649868398

 lm9: 0.07065044593419366

 lm12: 1.5469592867440496

 lm18: 0.20179360065558768

 lm15: 0.006340129171814107
[ Info: 2: Finished

 lm3: 0.33696060382715853

 lm6: 0.3248816416718518

 x5: 2.2206140818167945

 x10: 1.8172688656349065

 lm9: 0.07065044593419366
[ Info: 3: Finished

 lm3: 0.6560824201097265

 lm6: 3.267292837822481

 x5: 2.2206140818167945

 x2: -0.34391757988817906

 x4: 1.3813297799151414
[ Info: 4: Finished

 x10: -1.9999999999999993

 x13: 0.2766497080131079

 lm9: -2.999999999999999

 lm12: 1.5469592867440496

 x11: -0.4843469044219778
[ Info: 7: Finished

 x7: -0.7656173484449051

 lm6: 0.0

 x6: -0.5885391161729608

 x5: -0.9999999999999999
[ Info: 13: Finished

 x13: 0.2766497080131079

 x17: 0.6040668649868398

 x16: 0.5346889549927718

 lm18: 3.0

 lm12: 1.5469592867440496

 lm15: 2.723515857283587e-15
[ Info: 8: Finished

 lm3: 0.0

 x2: -0.34391757988817906

 x3: 0.3458040666698663

 x4: 1.3813297799151414
[ Info: 15: Finished

 x13: 0.9999999999999999

 x12: 0.17188436519424435

 lm12: 0.0

 x11: -0.4843469044219778
[ Info: 16: Finished

 x7: -0.7656173484449051

 lm6: -2.9999999999999982

 x10: 0.9999999999999996

 x8: -0.5885391161572473

 lm9: 1.4346163146328195e-15
[ Info: 9: Finished

 lm3: 2.9999999999999982

 x2: -0.34391757988817906

 x1: -0.1719587899301458
[ Info: 5: Finished

 x19: 0.5208133730192825

 x20: 1.2604066865116392

 lm18: -1.0
[ Info: 18: Finished

 x14: -1.0000000000000047

 x13: -1.9999999999999987

 x16: 0.5346889549927718

 lm12: -2.9999999999999987

 lm15: 1.4190038033490282e-15
[ Info: 10: Finished

 x0: -0.5859793949843952

 lm0: -0.585979394960927

 x2: 2.0000000000000004

 x1: -0.1719587899301458
[ Info: 12: Finished
[ Info: Finished tree based Parametric inference
Test Summary:    | Pass  Total
Parametric Tests |   82     82
[ Info: try doautoinit! of x1
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x1f1]
[ Info: do init of x1
[ Info: try doautoinit! of x2
[ Info: try doautoinit! of x2
[ Info: init with useinitfct [:x1x2f1]
[ Info: do init of x2
[ Info: try doautoinit! of x3
[ Info: try doautoinit! of x3
[ Info: init with useinitfct [:x2x3f1]
[ Info: do init of x3
[ Info: try doautoinit! of x4
[ Info: try doautoinit! of l1
[ Info: try doautoinit! of l1
[ Info: init with useinitfct [:x1l1f1, :x2l1f1]
[ Info: do init of l1
[ Info: [2x0p,d1,N100],
[ Info: try doautoinit! of l2
[ Info: try doautoinit! of l2
[ Info: init with useinitfct [:x2l2f1, :x3l2f1]
[ Info: do init of l2
[ Info: [2x0p,d1,N100],
[ Info: try doautoinit! of x4
[ Info: init with useinitfct [:x3x4f1, :x4l2f1]
[ Info: do init of x4
[ Info: [2x0p,d1,N100],

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
┌ Warning: Base.IOError("could not spawn `dot2tex -tmath --preproc /home/pkgeval/.julia/packages/IncrementalInference/BWQe4/test/tmp/bt.dot -o /home/pkgeval/.julia/packages/IncrementalInference/BWQe4/test/tmp/btproc.dot`: no such file or directory (ENOENT)", -2)
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/BWQe4/src/JunctionTree.jl:504
stacktrace() = Base.StackTraces.StackFrame[macro expansion at show.jl:641 [inlined], generateTexTree(::BayesTree; filepath::String) at JunctionTree.jl:505, (::IncrementalInference.var"#generateTexTree##kw")(::NamedTuple{(:filepath,),Tuple{String}}, ::typeof(generateTexTree), ::BayesTree) at JunctionTree.jl:450, top-level scope at testTexTreeIllustration.jl:47, top-level scope at Test.jl:1115, top-level scope at testTexTreeIllustration.jl:14, include(::String) at client.jl:457, top-level scope at runtests.jl:93, include(::String) at client.jl:457, top-level scope at none:6, eval(::Module, ::Any) at boot.jl:331, exec_options(::Base.JLOptions) at client.jl:272, _start() at client.jl:506]
Test Summary:           | Pass  Total
testing generateTexTree |    1      1
[ Info: FunctionalStateMachine.jl is adding Graphs.jl related tools (Visualization).
[ Info: FunctionalStateMachine.jl is adding Graphs.jl related tools (Visualization).
[ Info: Including InteractiveUtils related functions in IncrementalInference.
[ Info: Including InteractiveUtils related functions in IncrementalInference.
[ Info: ensure all initialized (using graphinit)
[ Info: x1 is not initialized, and will do so now...
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x1f1]
[ Info: do init of x1
[ Info: x2 is not initialized, and will do so now...
[ Info: try doautoinit! of x2
[ Info: init with useinitfct [:x1x2f1]
[ Info: do init of x2
[ Info: x3 is not initialized, and will do so now...
[ Info: try doautoinit! of x3
[ Info: init with useinitfct [:x2x3f1]
[ Info: do init of x3
[ Info: l1 is not initialized, and will do so now...
[ Info: try doautoinit! of l1
[ Info: init with useinitfct [:x1l1f1, :x2l1f1]
[ Info: do init of l1
[ Info: [2x0p,d1,N100],
[ Info: l2 is not initialized, and will do so now...
[ Info: try doautoinit! of l2
[ Info: init with useinitfct [:x3l2f1]
[ Info: do init of l2
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
[ Info: Do tree based init-inference on tree
      From worker 2:	[ Info: up w 0 msgs
      From worker 2:	[ Info: ---------- successive fnc approx ------------3| l2,: x3,
      From worker 2:	[ Info: #1	 -- 
      From worker 2:	[ Info: ---------- successive fnc approx ------------3| l2,: x3,
      From worker 2:	[ Info: #1	 -- 
      From worker 2:	[ Info: #2	 -- 
      From worker 2:	[ Info: #3	 -- 
      From worker 2:	[ Info: fmcmc! -- getSolverData(vari=l2).inferdim=1.0
      From worker 2:	[ Info: fmcmc! -- getSolverData(vari=x3).inferdim=1.0
[ Info: prepCliqInitMsgsUp, seps=[:x3]
      From worker 3:	[ Info: up w 1 msgs
      From worker 3:	[ Info: inp.sendmsgs[x3].inferdim=1.0
      From worker 3:	[ Info: ---------- successive fnc approx ------------2| x3,: x2,
      From worker 3:	[ Info: #1	 -- 
      From worker 3:	[ Info: ---------- successive fnc approx ------------2| x3,: x2,
      From worker 3:	[ Info: #1	 -- 
      From worker 3:	[ Info: [2x0p,d1,N100],
      From worker 3:	[ Info: #2	 -- 
      From worker 3:	[ Info: [2x0p,d1,N100],
      From worker 3:	[ Info: #3	 -- 
      From worker 3:	[ Info: [2x0p,d1,N100],
      From worker 3:	[ Info: fmcmc! -- getSolverData(vari=x2).inferdim=1.0
      From worker 3:	[ Info: fmcmc! -- getSolverData(vari=x3).inferdim=2.0
[ Info: prepCliqInitMsgsUp, seps=[:x2]
      From worker 2:	[ Info: up w 1 msgs
      From worker 2:	[ Info: inp.sendmsgs[x2].inferdim=1.0
      From worker 2:	[ Info: ---------- successive fnc approx ------------1| x2,x1,l1,: 
      From worker 2:	[ Info: #1	 -- 
      From worker 2:	[ Info: ---------- successive fnc approx ------------1| x2,x1,l1,: 
      From worker 2:	[ Info: #1	 -- 
      From worker 2:	[ Info: [2x0p,d1,N100],
      From worker 2:	[ Info: [3x0p,d1,N100],
      From worker 2:	[ Info: [3x0p,d1,N100],
      From worker 2:	[ Info: #2	 -- 
      From worker 2:	[ Info: [2x0p,d1,N100],
      From worker 2:	[ Info: [3x0p,d1,N100],
      From worker 2:	[ Info: [3x0p,d1,N100],
      From worker 2:	[ Info: #3	 -- 
      From worker 2:	[ Info: [2x0p,d1,N100],
      From worker 2:	[ Info: [3x0p,d1,N100],
      From worker 2:	[ Info: [3x0p,d1,N100],
      From worker 2:	[ Info: fmcmc! -- getSolverData(vari=l1).inferdim=2.0
      From worker 2:	[ Info: fmcmc! -- getSolverData(vari=x1).inferdim=3.0
      From worker 2:	[ Info: fmcmc! -- getSolverData(vari=x2).inferdim=3.0
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
[ Info: transferUpdateSubGraph! -- syms=[:x2, :x1, :l1]
      From worker 3:	[ Info: [2x0p,d1,N100],
[ Info: Finished tree based init-inference
Test Summary:                |
test multiprocess solveTree! | No tests
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: try doautoinit! of x1
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x0x1f1]
[ Info: do init of x1
[ Info: try doautoinit! of x2
[ Info: try doautoinit! of x2
[ Info: init with useinitfct [:x1x2f1]
[ Info: do init of x2
[ Info: try doautoinit! of x3
[ Info: try doautoinit! of x3
[ Info: init with useinitfct [:x2x3f1]
[ Info: do init of x3
[ Info: try doautoinit! of x4
[ Info: try doautoinit! of x4
[ Info: init with useinitfct [:x3x4f1]
[ Info: do init of x4
[ Info: try doautoinit! of x5
[ Info: try doautoinit! of x5
[ Info: init with useinitfct [:x4x5f1]
[ Info: do init of x5
[ Info: try doautoinit! of x6
[ Info: try doautoinit! of l1
[ Info: try doautoinit! of deadreckon_x0

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: ensure all initialized (using graphinit)
[ Info: x6 is not initialized, and will do so now...
[ Info: try doautoinit! of x6
[ Info: init with useinitfct [:x5x6f1]
[ Info: do init of x6
[ Info: l1 is not initialized, and will do so now...
[ Info: try doautoinit! of l1
[ Info: init with useinitfct [:x0l1f1]
[ Info: do init of l1
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Bayes Tree Complete
[ Info: Do tree based init-inference on tree
      From worker 2:	[ Info: up w 0 msgs
      From worker 2:	[ Info: ---------- successive fnc approx ------------3| x1,: x0,x2,
      From worker 2:	[ Info: #1	 -- 
      From worker 2:	[ Info: ---------- successive fnc approx ------------3| x1,: x0,x2,
      From worker 2:	[ Info: #1	 -- 
      From worker 3:	[ Info: up w 0 msgs
      From worker 3:	[ Info: ---------- successive fnc approx ------------4| x3,: x2,x4,
      From worker 3:	[ Info: #1	 -- 
      From worker 3:	[ Info: ---------- successive fnc approx ------------4| x3,: x2,x4,
      From worker 3:	[ Info: #1	 -- 
      From worker 2:	[ Info: [2x0p,d1,N100],
      From worker 3:	[ Info: [2x0p,d1,N100],
      From worker 3:	[ Info: #2	 -- 
      From worker 2:	[ Info: #2	 -- 
      From worker 3:	[ Info: [2x0p,d1,N100],
      From worker 2:	[ Info: [2x0p,d1,N100],
      From worker 3:	[ Info: #3	 -- 
      From worker 2:	[ Info: #3	 -- 
      From worker 3:	[ Info: [2x0p,d1,N100],
      From worker 3:	[ Info: fmcmc! -- getSolverData(vari=x2).inferdim=1.0
      From worker 3:	[ Info: fmcmc! -- getSolverData(vari=x4).inferdim=1.0
      From worker 3:	[ Info: fmcmc! -- getSolverData(vari=x3).inferdim=2.0
[ Info: prepCliqInitMsgsUp, seps=[:x2, :x4]
      From worker 3:	[ Info: up w 0 msgs
      From worker 3:	[ Info: ---------- successive fnc approx ------------5| l1,: x0,
      From worker 3:	[ Info: #1	 -- 
      From worker 3:	[ Info: ---------- successive fnc approx ------------5| l1,: x0,
      From worker 3:	[ Info: #1	 -- 
      From worker 2:	[ Info: [2x0p,d1,N100],
      From worker 2:	[ Info: fmcmc! -- getSolverData(vari=x0).inferdim=1.0
      From worker 2:	[ Info: fmcmc! -- getSolverData(vari=x2).inferdim=1.0
      From worker 2:	[ Info: fmcmc! -- getSolverData(vari=x1).inferdim=2.0
[ Info: prepCliqInitMsgsUp, seps=[:x0, :x2]
      From worker 2:	[ Info: up w 0 msgs
      From worker 2:	[ Info: ---------- successive fnc approx ------------6| x6,: x5,
      From worker 2:	[ Info: #1	 -- 
      From worker 2:	[ Info: ---------- successive fnc approx ------------6| x6,: x5,
      From worker 2:	[ Info: #1	 -- 
      From worker 3:	[ Info: #2	 -- 
      From worker 3:	[ Info: #3	 -- 
      From worker 2:	[ Info: #2	 -- 
      From worker 3:	[ Info: fmcmc! -- getSolverData(vari=l1).inferdim=1.0
      From worker 3:	[ Info: fmcmc! -- getSolverData(vari=x0).inferdim=1.0
[ Info: prepCliqInitMsgsUp, seps=[:x0]
      From worker 3:	[ Info: up w 1 msgs
      From worker 3:	[ Info: inp.sendmsgs[x2].inferdim=1.0
      From worker 3:	[ Info: inp.sendmsgs[x4].inferdim=1.0
      From worker 3:	[ Info: ---------- successive fnc approx ------------2| x4,: x5,x2,
      From worker 3:	[ Info: #1	 -- 
      From worker 3:	[ Info: ---------- successive fnc approx ------------2| x4,: x5,x2,
      From worker 3:	[ Info: #1	 -- 
      From worker 3:	[ Info: fmcmc! -- getSolverData(vari=x2).inferdim=1.0
      From worker 3:	[ Info: ---------- successive fnc approx ------------2| x4,: x5,x2,
      From worker 3:	[ Info: #1	 -- 
      From worker 2:	[ Info: #3	 -- 
      From worker 3:	[ Info: [2x0p,d1,N100],
      From worker 3:	[ Info: #2	 -- 
      From worker 2:	[ Info: fmcmc! -- getSolverData(vari=x6).inferdim=1.0
      From worker 2:	[ Info: fmcmc! -- getSolverData(vari=x5).inferdim=1.0
[ Info: prepCliqInitMsgsUp, seps=[:x5]
      From worker 3:	[ Info: [2x0p,d1,N100],
      From worker 3:	[ Info: #3	 -- 
      From worker 3:	[ Info: [2x0p,d1,N100],
      From worker 3:	[ Info: fmcmc! -- getSolverData(vari=x5).inferdim=1.0
      From worker 3:	[ Info: fmcmc! -- getSolverData(vari=x4).inferdim=2.0
      From worker 3:	[ Info: ---------- successive fnc approx ------------2| x4,: x5,x2,
      From worker 3:	[ Info: #1	 -- 
[ Info: prepCliqInitMsgsUp, seps=[:x5, :x2]
      From worker 2:	[ Info: up w 4 msgs
      From worker 2:	[ Info: inp.sendmsgs[x2].inferdim=1.0
      From worker 2:	[ Info: inp.sendmsgs[x5].inferdim=1.0
      From worker 2:	[ Info: inp.sendmsgs[x0].inferdim=1.0
      From worker 2:	[ Info: inp.sendmsgs[x2].inferdim=1.0
      From worker 2:	[ Info: inp.sendmsgs[x0].inferdim=1.0
      From worker 2:	[ Info: inp.sendmsgs[x5].inferdim=1.0
      From worker 2:	[ Info: ---------- successive fnc approx ------------1| x0,x5,x2,: 
      From worker 2:	[ Info: #1	 -- 
      From worker 2:	[ Info: ---------- successive fnc approx ------------1| x0,x5,x2,: 
      From worker 2:	[ Info: #1	 -- 
      From worker 2:	[ Info: [3x0p,d1,N100],
      From worker 2:	[ Info: [2x0p,d1,N100],
      From worker 2:	[ Info: [2x0p,d1,N100],
      From worker 2:	[ Info: fmcmc! -- getSolverData(vari=x0).inferdim=3.0
      From worker 2:	[ Info: fmcmc! -- getSolverData(vari=x5).inferdim=2.0
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
      From worker 2:	[ Info: fmcmc! -- getSolverData(vari=x2).inferdim=2.0
[ Info: transferUpdateSubGraph! -- syms=[:x0, :x5, :x2]
      From worker 3:	[ Info: [2x0p,d1,N100],
      From worker 2:	[ Info: [2x0p,d1,N100],
      From worker 3:	[ Info: [2x0p,d1,N100],
[ Info: Finished tree based init-inference
Test Summary:                 | Pass  Total
testing dead reckoning tether |   10     10
    Testing IncrementalInference tests passed 
