Julia Version 1.5.2-pre.25
Commit be8475f41a (2020-09-09 06:41 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed VersionParsing ─ v1.2.0
  Installed ASDF ─────────── v1.1.3
  Installed URIParser ────── v0.4.1
  Installed Parsers ──────── v1.0.10
  Installed Conda ────────── v1.4.1
  Installed MacroTools ───── v0.5.5
  Installed PyCall ───────── v1.91.4
  Installed JSON ─────────── v0.21.1
Updating `~/.julia/environments/v1.5/Project.toml`
  [686f71d1] + ASDF v1.1.3
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [686f71d1] + ASDF v1.1.3
  [8f4d0f93] + Conda v1.4.1
  [682c06a0] + JSON v0.21.1
  [1914dd2f] + MacroTools v0.5.5
  [69de0a69] + Parsers v1.0.10
  [438e738f] + PyCall v1.91.4
  [30578b45] + URIParser v0.4.1
  [81def892] + VersionParsing v1.2.0
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [de0858da] + Printf
  [9a3f8284] + Random
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [8dfed614] + Test
  [4ec0a83e] + Unicode
   Building Conda ─→ `~/.julia/packages/Conda/3rPhK/deps/build.log`
   Building PyCall → `~/.julia/packages/PyCall/zqDXB/deps/build.log`
   Building ASDF ──→ `~/.julia/packages/ASDF/0SzlD/deps/build.log`
┌ Error: Error building `ASDF`: 
│ Collecting package metadata (current_repodata.json): ...working... done
│ Solving environment: ...working... failed with initial frozen solve. Retrying with flexible solve.
│ Solving environment: ...working... failed with repodata from current_repodata.json, will retry with next repodata source.
│ Collecting package metadata (repodata.json): ...working... done
│ Solving environment: ...working... failed with initial frozen solve. Retrying with flexible solve.
│ Solving environment: ...working... Building graph of deps:   0%|          | 0/4 [00:00<?, ?it/s]Examining @/linux-64::__cuda==11.0=0:   0%|          | 0/4 [00:00<?, ?it/s]Examining python=3.8:  25%|██▌       | 1/4 [00:00<00:00, 3170.30it/s]      Examining @/linux-64::__glibc==2.27=0:  50%|█████     | 2/4 [00:00<00:00,  9.22it/s]Examining @/linux-64::__glibc==2.27=0:  75%|███████▌  | 3/4 [00:00<00:00, 13.81it/s]Examining asdf:  75%|███████▌  | 3/4 [00:00<00:00, 13.81it/s]                                                                                    Determining conflicts:   0%|          | 0/4 [00:00<?, ?it/s]Examining conflict for __cuda:   0%|          | 0/4 [00:00<?, ?it/s]Examining conflict for python asdf:  25%|██▌       | 1/4 [00:00<00:00, 4452.55it/s]                                                                                   
│ Found conflicts! Looking for incompatible packages.
│ This can take several minutes.  Press CTRL-C to abort.
│ failed
│ 
│ UnsatisfiableError: The following specifications were found to be incompatible with each other:
│ 
│ Output in format: Requested package -> Available versionsThe following specifications were found to be incompatible with your system:
│ 
│   - feature:/linux-64::__cuda==11.0=0
│ 
│ Your installed version is: 11.0
│ 
│ 
│ [ Info: Installing asdf via the Conda asdf package...
│ [ Info: Running `conda config --add channels astropy --file /home/pkgeval/.julia/conda/3/condarc-julia.yml --force` in root environment
│ [ Info: Running `conda install -q -y asdf` in root environment
│ ERROR: LoadError: failed process: Process(setenv(`/home/pkgeval/.julia/conda/3/bin/conda install -q -y asdf`,["PYTHONIOENCODING=UTF-8", "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin", "PWD=/home/pkgeval", "DISPLAY=:99", "NVIDIA_DRIVER_CAPABILITIES=all", "OPENBLAS_NUM_THREADS=8", "XAUTHORITY=/tmp/xvfb-run.qfi6ht/Xauthority", "CI=true", "CONDARC=/home/pkgeval/.julia/conda/3/condarc-julia.yml", "NVIDIA_VISIBLE_DEVICES=all"  …  "CONDA_PREFIX=/home/pkgeval/.julia/conda/3", "DEBIAN_FRONTEND=noninteractive", "JULIA_LOAD_PATH=@:/tmp/jl_mehdM6", "PKGEVAL=true", "HOME=/home/pkgeval", "JULIA_PKGEVAL=true", "JULIA_DEPOT_PATH=::/usr/local/share/julia", "HOSTNAME=0acdf3d297a0", "JULIA_NUM_THREADS=2", "OPENBLAS_MAIN_FREE=1"]), ProcessExited(1)) [1]
│ 
│ Stacktrace:
│  [1] pipeline_error at ./process.jl:525 [inlined]
│  [2] run(::Cmd; wait::Bool) at ./process.jl:440
│  [3] run at ./process.jl:438 [inlined]
│  [4] runconda(::Cmd, ::String) at /home/pkgeval/.julia/packages/Conda/3rPhK/src/Conda.jl:114
│  [5] add(::String, ::String; channel::String) at /home/pkgeval/.julia/packages/Conda/3rPhK/src/Conda.jl:188
│  [6] add at /home/pkgeval/.julia/packages/Conda/3rPhK/src/Conda.jl:187 [inlined] (repeats 2 times)
│  [7] pyimport_conda(::String, ::String, ::String) at /home/pkgeval/.julia/packages/PyCall/zqDXB/src/PyCall.jl:699
│  [8] top-level scope at /home/pkgeval/.julia/packages/ASDF/0SzlD/deps/build.jl:6
│  [9] include(::String) at ./client.jl:457
│  [10] top-level scope at none:5
│ in expression starting at /home/pkgeval/.julia/packages/ASDF/0SzlD/deps/build.jl:6
│ caused by [exception 1]
│ PyError (PyImport_ImportModule
│ 
│ The Python package asdf could not be found by pyimport. Usually this means
│ that you did not install asdf in the Python version being used by PyCall.
│ 
│ PyCall is currently configured to use the Julia-specific Python distribution
│ installed by the Conda.jl package.  To install the asdf module, you can
│ use `pyimport_conda("asdf", PKG)`, where PKG is the Anaconda
│ package the contains the module asdf, or alternatively you can use the
│ Conda package directly (via `using Conda` followed by `Conda.add` etcetera).
│ 
│ Alternatively, if you want to use a different Python distribution on your
│ system, such as a system-wide Python (as opposed to the Julia-specific Python),
│ you can re-configure PyCall with that Python.   As explained in the PyCall
│ documentation, set ENV["PYTHON"] to the path/name of the python executable
│ you want to use, run Pkg.build("PyCall"), and re-launch Julia.
│ 
│ ) <class 'ModuleNotFoundError'>
│ ModuleNotFoundError("No module named 'asdf'")
│ 
│ Stacktrace:
│  [1] pyimport(::String) at /home/pkgeval/.julia/packages/PyCall/zqDXB/src/PyCall.jl:536
│  [2] pyimport_conda(::String, ::String, ::String) at /home/pkgeval/.julia/packages/PyCall/zqDXB/src/PyCall.jl:694
│  [3] top-level scope at /home/pkgeval/.julia/packages/ASDF/0SzlD/deps/build.jl:6
│  [4] include(::String) at ./client.jl:457
│  [5] top-level scope at none:5
└ @ Pkg.Operations /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/Operations.jl:949
    Testing ASDF
Status `/tmp/jl_m763ju/Project.toml`
  [686f71d1] ASDF v1.1.3
  [8f4d0f93] Conda v1.4.1
  [438e738f] PyCall v1.91.4
  [30578b45] URIParser v0.4.1
  [8dfed614] Test
Status `/tmp/jl_m763ju/Manifest.toml`
  [686f71d1] ASDF v1.1.3
  [8f4d0f93] Conda v1.4.1
  [682c06a0] JSON v0.21.1
  [1914dd2f] MacroTools v0.5.5
  [69de0a69] Parsers v1.0.10
  [438e738f] PyCall v1.91.4
  [30578b45] URIParser v0.4.1
  [81def892] VersionParsing v1.2.0
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [de0858da] Printf
  [9a3f8284] Random
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [8dfed614] Test
  [4ec0a83e] Unicode
ERROR: LoadError: InitError: PyError (PyImport_ImportModule

The Python package asdf could not be found by pyimport. Usually this means
that you did not install asdf in the Python version being used by PyCall.

PyCall is currently configured to use the Julia-specific Python distribution
installed by the Conda.jl package.  To install the asdf module, you can
use `pyimport_conda("asdf", PKG)`, where PKG is the Anaconda
package the contains the module asdf, or alternatively you can use the
Conda package directly (via `using Conda` followed by `Conda.add` etcetera).

Alternatively, if you want to use a different Python distribution on your
system, such as a system-wide Python (as opposed to the Julia-specific Python),
you can re-configure PyCall with that Python.   As explained in the PyCall
documentation, set ENV["PYTHON"] to the path/name of the python executable
you want to use, run Pkg.build("PyCall"), and re-launch Julia.

) <class 'ModuleNotFoundError'>
ModuleNotFoundError("No module named 'asdf'")

Stacktrace:
 [1] pyimport(::String) at /home/pkgeval/.julia/packages/PyCall/zqDXB/src/PyCall.jl:536
 [2] __init__() at /home/pkgeval/.julia/packages/ASDF/0SzlD/src/ASDF.jl:10
 [3] _include_from_serialized(::String, ::Array{Any,1}) at ./loading.jl:697
 [4] _require_from_serialized(::String) at ./loading.jl:749
 [5] _require(::Base.PkgId) at ./loading.jl:1040
 [6] require(::Base.PkgId) at ./loading.jl:928
 [7] require(::Module, ::Symbol) at ./loading.jl:923
 [8] include(::String) at ./client.jl:457
 [9] top-level scope at none:6
during initialization of module ASDF
in expression starting at /home/pkgeval/.julia/packages/ASDF/0SzlD/test/runtests.jl:4
ERROR: Package ASDF errored during testing
Stacktrace:
 [1] pkgerror(::String) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/Types.jl:52
 [2] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/Operations.jl:1578
 [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:328
 [4] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:315
 [5] #test#61 at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:67 [inlined]
 [6] test at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:67 [inlined]
 [7] #test#60 at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:66 [inlined]
 [8] test at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:66 [inlined]
 [9] test(::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:65
 [10] test(::String) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:65
 [11] top-level scope at none:19
