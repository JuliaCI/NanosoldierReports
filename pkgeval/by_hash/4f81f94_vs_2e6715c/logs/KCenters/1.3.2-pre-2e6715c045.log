Julia Version 1.3.2-pre.0
Commit 2e6715c045 (2019-12-31 00:49 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-6.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

 Resolving package versions...
 Installed KCenters ──────────────────── v0.1.10
 Installed Reexport ──────────────────── v0.2.0
 Installed DataAPI ───────────────────── v1.1.0
 Installed DataValueInterfaces ───────── v1.0.0
 Installed SortingAlgorithms ─────────── v0.3.1
 Installed TableTraits ───────────────── v1.0.0
 Installed DataStructures ────────────── v0.17.9
 Installed MLDataUtils ───────────────── v0.5.0
 Installed PooledArrays ──────────────── v0.5.3
 Installed Missings ──────────────────── v0.4.3
 Installed DataFrames ────────────────── v0.20.0
 Installed LearnBase ─────────────────── v0.2.2
 Installed MLLabelUtils ──────────────── v0.5.1
 Installed Tables ────────────────────── v0.2.11
 Installed MappedArrays ──────────────── v0.2.2
 Installed IteratorInterfaceExtensions ─ v1.0.0
 Installed OrderedCollections ────────── v1.1.0
 Installed SimilaritySearch ──────────── v0.3.17
 Installed InvertedIndices ───────────── v1.0.0
 Installed JSON ──────────────────────── v0.21.0
 Installed Parsers ───────────────────── v0.3.11
 Installed Compat ────────────────────── v3.2.0
 Installed StatsBase ─────────────────── v0.32.0
 Installed MLDataPattern ─────────────── v0.5.0
 Installed CategoricalArrays ─────────── v0.7.7
  Updating `~/.julia/environments/v1.3/Project.toml`
  [5d8de97f] + KCenters v0.1.10
  Updating `~/.julia/environments/v1.3/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.2.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.0
  [864edb3b] + DataStructures v0.17.9
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.1.10
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.0
  [cc2ba9b6] + MLDataUtils v0.5.0
  [66a33bbf] + MLLabelUtils v0.5.1
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.11
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.17
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.0
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v0.2.11
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
   Testing KCenters
    Status `/tmp/jl_t5UpC9/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.2.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.0
  [864edb3b] DataStructures v0.17.9
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.1.10
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.0
  [cc2ba9b6] MLDataUtils v0.5.0
  [66a33bbf] MLLabelUtils v0.5.1
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v0.3.11
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.17
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.0
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v0.2.11
  [2a0f44e3] Base64  [`@stdlib/Base64`]
  [ade2ca70] Dates  [`@stdlib/Dates`]
  [8bb1440f] DelimitedFiles  [`@stdlib/DelimitedFiles`]
  [8ba89e20] Distributed  [`@stdlib/Distributed`]
  [9fa8497b] Future  [`@stdlib/Future`]
  [b77e0a4c] InteractiveUtils  [`@stdlib/InteractiveUtils`]
  [76f85450] LibGit2  [`@stdlib/LibGit2`]
  [8f399da3] Libdl  [`@stdlib/Libdl`]
  [37e2e46d] LinearAlgebra  [`@stdlib/LinearAlgebra`]
  [56ddb016] Logging  [`@stdlib/Logging`]
  [d6f4376e] Markdown  [`@stdlib/Markdown`]
  [a63ad114] Mmap  [`@stdlib/Mmap`]
  [44cfe95a] Pkg  [`@stdlib/Pkg`]
  [de0858da] Printf  [`@stdlib/Printf`]
  [3fa0cd96] REPL  [`@stdlib/REPL`]
  [9a3f8284] Random  [`@stdlib/Random`]
  [ea8e919c] SHA  [`@stdlib/SHA`]
  [9e88b42a] Serialization  [`@stdlib/Serialization`]
  [1a1011a3] SharedArrays  [`@stdlib/SharedArrays`]
  [6462fe0b] Sockets  [`@stdlib/Sockets`]
  [2f01184e] SparseArrays  [`@stdlib/SparseArrays`]
  [10745b16] Statistics  [`@stdlib/Statistics`]
  [8dfed614] Test  [`@stdlib/Test`]
  [cf7118a7] UUIDs  [`@stdlib/UUIDs`]
  [4ec0a83e] Unicode  [`@stdlib/Unicode`]
Test Summary: | Pass  Total
Scores        |    9      9
[ Info: 129.03
[ Info: 76.39999999999999
[ Info: 43.43
[ Info: 23.900000000000006
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 267.24999848336876
[ Info: 216.33999826660988
[ Info: 196.63000003532366
[ Info: 76.04000118347305
Test Summary:        |
Clustering with dnet | No tests
inertia(cfft.distances) = 18.476296126232107
inertia(cdnet.distances) = 32.113075401643435
inertia(crand.distances) = 22.653348913505436
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.662109375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.662109375,"f1":0.7870873917748925,"seconds":5.291774868965149e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.3046875,"distances_sum":1889.6176359337069}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.53515625, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.53515625,"f1":null,"seconds":4.606321454048157e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":7.484375,"distances_sum":1469.7877498945102}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3994140625, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.3994140625,"f1":null,"seconds":4.064291715621948e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":6.671875,"distances_sum":1089.4106141958412}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.662109375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.662109375,"f1":0.7870873917748925,"seconds":5.291774868965149e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.3046875,"distances_sum":1889.6176359337069}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6787109375, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6787109375,"f1":0.7974717990342998,"seconds":5.261972546577454e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.2734375,"distances_sum":1911.4724122531754}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.755859375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.755859375,"f1":0.8529054279054287,"seconds":4.887580871582031e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.28125,"distances_sum":2202.745702488397}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6875, conf: {"ssize":9,"bsize":4}, perf: {"precision":1.0,"recall":0.6875,"f1":0.8031697469197475,"seconds":4.895031452178955e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.1796875,"distances_sum":1953.4939082855208}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.701171875, conf: {"ssize":7,"bsize":4}, perf: {"precision":1.0,"recall":0.701171875,"f1":0.8150058275058283,"seconds":4.55416738986969e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.4140625,"distances_sum":2009.4450457625558}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.755859375,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.755859375,"f1":0.8529054279054287,"seconds":4.887580871582031e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.28125,"distances_sum":2202.745702488397}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9653674450549451,"seconds":6.2640756368637085e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.9609375,"distances_sum":3002.277475201257}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":10,"bsize":8}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9630208333333339,"seconds":5.7034194469451904e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.8828125,"distances_sum":3011.5943009061784}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7744140625, conf: {"ssize":10,"bsize":5}, perf: {"precision":1.0,"recall":0.7744140625,"f1":0.86452661921412,"seconds":5.0961971282958984e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.359375,"distances_sum":2265.804191629696}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8310546875, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8310546875,"f1":0.900424055111556,"seconds":5.133450031280518e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.7265625,"distances_sum":2494.793364071993}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9375,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9653674450549451,"seconds":6.2640756368637085e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.9609375,"distances_sum":3002.277475201257}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9375,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9653674450549451,"seconds":6.2640756368637085e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.9609375,"distances_sum":3002.277475201257}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.451171875, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.451171875,"f1":null,"seconds":3.5837292671203613e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":6.3984375,"distances_sum":1081.0542950856814}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5361328125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5361328125,"f1":0.6820703601953606,"seconds":3.894791007041931e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":6.8359375,"distances_sum":1344.210828640615}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5126953125, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5126953125,"f1":0.6597263847263851,"seconds":3.956258296966553e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":6.7109375,"distances_sum":1254.0303547786305}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5361328125,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5361328125,"f1":0.6820703601953606,"seconds":3.894791007041931e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":6.8359375,"distances_sum":1344.210828640615}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.677734375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.677734375,"f1":0.7983526889776899,"seconds":4.522502422332764e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.59375,"distances_sum":1767.2992508325176}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.763671875,"f1":0.8591637529137538,"seconds":5.057081580162048e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.09375,"distances_sum":2052.08578508356}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8232421875, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8232421875,"f1":0.8968984140859146,"seconds":4.913657903671265e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.4296875,"distances_sum":2263.304085979866}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.685546875, conf: {"ssize":7,"bsize":4}, perf: {"precision":1.0,"recall":0.685546875,"f1":0.802452582140083,"seconds":4.6510249376297e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.6328125,"distances_sum":1790.669923004294}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8232421875,"state":{"ssize":2,"bsize":6},"perf":{"precision":1.0,"recall":0.8232421875,"f1":0.8968984140859146,"seconds":4.913657903671265e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.4296875,"distances_sum":2263.304085979866}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8662109375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8662109375,"f1":0.9220810439560447,"seconds":5.519017577171326e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.4609375,"distances_sum":2491.3932276464893}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9564820596070599,"seconds":5.638226866722107e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8515625,"distances_sum":2737.682824161739}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9524782509157518,"seconds":6.4354389905929565e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.828125,"distances_sum":2710.568240840611}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":11,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9485920329670334,"seconds":6.0461461544036865e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.765625,"distances_sum":2689.1787275718684}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9248046875,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.9564820596070599,"seconds":5.638226866722107e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8515625,"distances_sum":2737.682824161739}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9248046875,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.9564820596070599,"seconds":5.638226866722107e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8515625,"distances_sum":2737.682824161739}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6982421875, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6982421875,"f1":0.8091590700965708,"seconds":4.896894097328186e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.21875,"distances_sum":1790.2222158787517}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.51953125, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.51953125,"f1":0.6688032453657459,"seconds":4.408881068229675e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":7.03125,"distances_sum":1324.7428760603436}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.51171875, conf: {"ssize":2,"bsize":3}, perf: {"precision":null,"recall":0.51171875,"f1":null,"seconds":4.297122359275818e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":6.875,"distances_sum":1324.174998213576}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.677734375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.677734375,"f1":0.7898518148518155,"seconds":4.822388291358948e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":7.984375,"distances_sum":1736.0086466411967}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6982421875,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.6982421875,"f1":0.8091590700965708,"seconds":4.896894097328186e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.21875,"distances_sum":1790.2222158787517}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8212890625, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.8212890625,"f1":0.8949295496170503,"seconds":5.379319190979004e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.5546875,"distances_sum":2247.416152205894}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.859375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.859375,"f1":0.9192536630036637,"seconds":5.727633833885193e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.671875,"distances_sum":2430.5566356426048}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8134765625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.8134765625,"f1":0.8891233766233775,"seconds":5.364418029785156e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.640625,"distances_sum":2199.820570495614}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9414892399267398,"seconds":5.7853758335113525e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.6328125,"distances_sum":2631.14975092763}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.701171875, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.701171875,"f1":0.8111789252414261,"seconds":5.014240741729736e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.0625,"distances_sum":1804.50420329383}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8505859375, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8505859375,"f1":0.910345904095905,"seconds":5.362555384635925e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.65625,"distances_sum":2388.1026150559796}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8974609375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.8974609375,"f1":0.9414892399267398,"seconds":5.7853758335113525e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.6328125,"distances_sum":2631.14975092763}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9633756868131873,"seconds":5.431473255157471e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.734375,"distances_sum":2802.552319113576}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9601247710622713,"seconds":5.666166543960571e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.9140625,"distances_sum":2680.7363931883497}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9710393772893777,"seconds":5.638226866722107e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.890625,"distances_sum":2809.916184310321}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":8,"bsize":10}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.957016941391942,"seconds":5.638226866722107e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.84375,"distances_sum":2713.0019548653227}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9529304029304035,"seconds":5.5730342864990234e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.7265625,"distances_sum":2714.3368764258594}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9710393772893777,"seconds":5.638226866722107e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.890625,"distances_sum":2809.916184310321}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9710393772893777,"seconds":5.638226866722107e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.890625,"distances_sum":2809.916184310321}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2353515625,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2353515625,"f1":null,"seconds":3.645196557044983e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":6.6640625,"distances_sum":552.7501240959597}}, beam: 2, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.2353515625,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2353515625,"f1":null,"seconds":3.645196557044983e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":6.6640625,"distances_sum":552.7501240959597}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2587890625, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2587890625,"f1":null,"seconds":3.5371631383895874e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":6.2734375,"distances_sum":461.9515223870234}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.244140625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.244140625,"f1":null,"seconds":3.7122517824172974e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":6.0546875,"distances_sum":406.87470303730584}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7705078125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7705078125,"f1":0.8623860514485523,"seconds":5.537644028663635e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":7.9296875,"distances_sum":1456.2108931635316}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7705078125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7705078125,"f1":0.8623860514485523,"seconds":5.537644028663635e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":7.9296875,"distances_sum":1456.2108931635316}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9569997710622716,"seconds":6.0442835092544556e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.8515625,"distances_sum":2024.8026319378127}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9248046875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.9569997710622716,"seconds":6.0442835092544556e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.8515625,"distances_sum":2024.8026319378127}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9588942307692314,"seconds":5.7891011238098145e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.8984375,"distances_sum":2016.4721698284113}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":5,"bsize":12}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9757268772893775,"seconds":6.077811121940613e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.953125,"distances_sum":2122.8466040811877}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9720810439560443,"seconds":6.118789315223694e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.9296875,"distances_sum":2108.0789862565393}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9619505494505497,"seconds":6.010755896568298e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.84375,"distances_sum":2073.484767262618}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9560546875,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9757268772893775,"seconds":6.077811121940613e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.953125,"distances_sum":2122.8466040811877}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9560546875,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9757268772893775,"seconds":6.077811121940613e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.953125,"distances_sum":2122.8466040811877}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.548828125, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.548828125,"f1":null,"seconds":4.481524229049683e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":7.0625,"distances_sum":1055.5402845949939}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.43359375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.43359375,"f1":null,"seconds":4.453584551811218e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":6.0703125,"distances_sum":788.8234795589598}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.783203125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.783203125,"f1":0.8709800616050624,"seconds":4.906207323074341e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.109375,"distances_sum":1700.6417490811307}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.783203125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.783203125,"f1":0.8709800616050624,"seconds":4.906207323074341e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.109375,"distances_sum":1700.6417490811307}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8505859375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8505859375,"f1":0.9136478105228113,"seconds":5.5730342864990234e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.484375,"distances_sum":1913.9350780429997}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.791015625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.791015625,"f1":0.8746571137196146,"seconds":5.444511771202087e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.078125,"distances_sum":1692.8868906103048}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8505859375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8505859375,"f1":0.9136478105228113,"seconds":5.5730342864990234e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.484375,"distances_sum":1913.9350780429997}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8779296875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8779296875,"f1":0.9299049908424915,"seconds":5.41098415851593e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.65625,"distances_sum":2030.1421670591942}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9598614926739928,"seconds":5.906447768211365e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.8359375,"distances_sum":2232.6790931882033}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87109375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.87109375,"f1":0.9258298992673999,"seconds":5.535781383514404e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.6015625,"distances_sum":1985.6489098816246}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.927734375,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.9598614926739928,"seconds":5.906447768211365e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.8359375,"distances_sum":2232.6790931882033}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.927734375,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.9598614926739928,"seconds":5.906447768211365e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.8359375,"distances_sum":2232.6790931882033}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.65234375, conf: {"ssize":1,"bsize":4}, perf: {"precision":null,"recall":0.65234375,"f1":null,"seconds":4.772096872329712e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":7.3671875,"distances_sum":1318.932586057468}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.572265625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.572265625,"f1":0.7104184010434016,"seconds":4.349276423454285e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":7.0625,"distances_sum":1116.1509774853803}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.296875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.296875,"f1":null,"seconds":3.6265701055526733e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":6.203125,"distances_sum":634.3895243394245}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.65234375,"state":{"ssize":1,"bsize":4},"perf":{"precision":null,"recall":0.65234375,"f1":null,"seconds":4.772096872329712e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":7.3671875,"distances_sum":1318.932586057468}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9510874542124546,"seconds":5.817040801048279e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.84375,"distances_sum":2252.0715412451214}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.68359375, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.68359375,"f1":0.800645188145189,"seconds":4.6603381633758545e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":7.609375,"distances_sum":1446.7534190010579}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9536000457875463,"seconds":5.723908543586731e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.8203125,"distances_sum":2265.450083724701}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8310546875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8310546875,"f1":0.9028216575091581,"seconds":5.431473255157471e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.3515625,"distances_sum":1934.4791136233225}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.783203125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.783203125,"f1":0.8687682109557117,"seconds":4.900619387626648e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":7.921875,"distances_sum":1773.6833139809041}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91796875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9536000457875463,"seconds":5.723908543586731e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.8203125,"distances_sum":2265.450083724701}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9737179487179488,"seconds":5.813315510749817e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.9453125,"distances_sum":2371.2608608397804}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9638671875, conf: {"ssize":6,"bsize":12}, perf: {"precision":1.0,"recall":0.9638671875,"f1":0.9802827380952385,"seconds":5.811452865600586e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.9765625,"distances_sum":2415.501321111379}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":8,"bsize":10}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.9772321428571431,"seconds":5.7034194469451904e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.984375,"distances_sum":2392.9837178633366}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9622455669330676,"seconds":5.392357707023621e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.90625,"distances_sum":2303.9466886438327}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9638671875,"state":{"ssize":6,"bsize":12},"perf":{"precision":1.0,"recall":0.9638671875,"f1":0.9802827380952385,"seconds":5.811452865600586e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.9765625,"distances_sum":2415.501321111379}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9638671875,"state":{"ssize":6,"bsize":12},"perf":{"precision":1.0,"recall":0.9638671875,"f1":0.9802827380952385,"seconds":5.811452865600586e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.9765625,"distances_sum":2415.501321111379}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.19921875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.19921875,"f1":null,"seconds":3.244727849960327e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":5.3046875,"distances_sum":431.66203537713596}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1806640625, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.1806640625,"f1":null,"seconds":3.1907111406326294e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":5.2421875,"distances_sum":399.9705384272473}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.220703125, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.220703125,"f1":null,"seconds":3.2838433980941772e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":5.671875,"distances_sum":536.450759460671}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.220703125,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.220703125,"f1":null,"seconds":3.2838433980941772e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":5.671875,"distances_sum":536.450759460671}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3798828125, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.3798828125,"f1":null,"seconds":3.60049307346344e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":5.8671875,"distances_sum":805.9548840682702}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6728515625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6728515625,"f1":0.7906293359418367,"seconds":4.820525646209717e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":7.9609375,"distances_sum":1436.5716012981184}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8017578125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.8017578125,"f1":0.8850732600732609,"seconds":5.2265822887420654e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.4296875,"distances_sum":1821.0168823036029}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5029296875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5029296875,"f1":0.6582485223110228,"seconds":4.168599843978882e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":6.6328125,"distances_sum":1026.6501794304731}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.517578125, conf: {"ssize":5,"bsize":3}, perf: {"precision":null,"recall":0.517578125,"f1":null,"seconds":3.909692168235779e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":6.4765625,"distances_sum":1062.5907949302075}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3935546875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3935546875,"f1":null,"seconds":3.3192336559295654e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":5.9140625,"distances_sum":820.2934967278079}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8017578125,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.8017578125,"f1":0.8850732600732609,"seconds":5.2265822887420654e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.4296875,"distances_sum":1821.0168823036029}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8125, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8125,"f1":0.8873381826506833,"seconds":5.153939127922058e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.796875,"distances_sum":1861.9608302155877}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9646062271062276,"seconds":5.647540092468262e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.9140625,"distances_sum":2370.1041785607035}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9368704212454219,"seconds":5.554407835006714e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.8359375,"distances_sum":2170.447500125659}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9587454212454217,"seconds":5.412846803665161e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.890625,"distances_sum":2323.2959439516926}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9324519230769237,"seconds":5.548819899559021e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.90625,"distances_sum":2115.0641148361465}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9357429029304037,"seconds":5.532056093215942e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.90625,"distances_sum":2145.3208679139293}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8564453125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8564453125,"f1":0.9186870421245428,"seconds":5.379319190979004e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.9453125,"distances_sum":1999.8918789439554}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9365234375,"state":{"ssize":7,"bsize":9},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9646062271062276,"seconds":5.647540092468262e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.9140625,"distances_sum":2370.1041785607035}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9365234375,"state":{"ssize":7,"bsize":9},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9646062271062276,"seconds":5.647540092468262e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.9140625,"distances_sum":2370.1041785607035}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4287109375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4287109375,"f1":null,"seconds":3.779307007789612e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":6.171875,"distances_sum":830.8295039281887}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6630859375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6630859375,"f1":0.7865915334665342,"seconds":4.621222615242004e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.453125,"distances_sum":1292.533081292768}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5146484375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5146484375,"f1":0.6646613802863807,"seconds":4.144385457038879e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":6.875,"distances_sum":919.5209743950574}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7666015625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7666015625,"f1":0.8589004745254752,"seconds":4.881992936134338e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.75,"distances_sum":1622.9400276198612}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7666015625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7666015625,"f1":0.8589004745254752,"seconds":4.881992936134338e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.75,"distances_sum":1622.9400276198612}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.810546875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.810546875,"f1":0.8876550532800541,"seconds":5.33275306224823e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.15625,"distances_sum":1824.0870025422807}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9564445970695975,"seconds":5.813315510749817e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8671875,"distances_sum":2223.9967644085086}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9663747710622717,"seconds":5.45009970664978e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.890625,"distances_sum":2276.0856950715824}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8701171875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8701171875,"f1":0.9263137903762911,"seconds":5.427747964859009e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8203125,"distances_sum":2021.2169771515828}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.833984375, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.833984375,"f1":0.9050340284715291,"seconds":5.058944225311279e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.375,"distances_sum":1852.6068759439736}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8330078125, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8330078125,"f1":0.9034002455877463,"seconds":5.33275306224823e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.40625,"distances_sum":1855.030616582583}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9663747710622717,"seconds":5.45009970664978e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.890625,"distances_sum":2276.0856950715824}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":2,"bsize":12}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9762305402930406,"seconds":6.074085831642151e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9765625,"distances_sum":2331.634812292064}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.96484375, conf: {"ssize":2,"bsize":13}, perf: {"precision":1.0,"recall":0.96484375,"f1":0.980637591575092,"seconds":6.066635251045227e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9765625,"distances_sum":2363.184247300052}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":8,"bsize":13}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9764709249084252,"seconds":5.980953574180603e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.96875,"distances_sum":2348.6014351239082}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.962890625, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.962890625,"f1":0.9791323260073264,"seconds":6.029382348060608e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.953125,"distances_sum":2373.7186177825024}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9753949175824179,"seconds":5.757436156272888e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9140625,"distances_sum":2344.5563402058033}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.96484375,"state":{"ssize":2,"bsize":13},"perf":{"precision":1.0,"recall":0.96484375,"f1":0.980637591575092,"seconds":6.066635251045227e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9765625,"distances_sum":2363.184247300052}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.96484375,"state":{"ssize":2,"bsize":13},"perf":{"precision":1.0,"recall":0.96484375,"f1":0.980637591575092,"seconds":6.066635251045227e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9765625,"distances_sum":2363.184247300052}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3662109375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3662109375,"f1":null,"seconds":3.4961849451065063e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":5.4375,"distances_sum":575.8666590732832}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3662109375,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.3662109375,"f1":null,"seconds":3.4961849451065063e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":5.4375,"distances_sum":575.8666590732832}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.638671875, conf: {"ssize":2,"bsize":4}, perf: {"precision":0.9709635416666665,"recall":0.638671875,"f1":0.7602941329503835,"seconds":4.293397068977356e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":7.5546875,"distances_sum":1073.205909802491}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.658203125, conf: {"ssize":1,"bsize":4}, perf: {"precision":0.9731770833333332,"recall":0.658203125,"f1":0.774426094738595,"seconds":4.451721906661987e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":7.625,"distances_sum":1108.71151035162}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6162109375, conf: {"ssize":3,"bsize":4}, perf: {"precision":0.9843749999999999,"recall":0.6162109375,"f1":0.745412920412921,"seconds":4.608184099197388e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":7.390625,"distances_sum":989.0120747055505}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5146484375, conf: {"ssize":2,"bsize":3}, perf: {"precision":0.9824218750000001,"recall":0.5146484375,"f1":0.6626705759518264,"seconds":3.870576620101929e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":6.5546875,"distances_sum":839.5567365991309}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.369140625, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.369140625,"f1":null,"seconds":3.295019268989563e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":5.46875,"distances_sum":608.8418175913979}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.658203125,"state":{"ssize":1,"bsize":4},"perf":{"precision":0.9731770833333332,"recall":0.658203125,"f1":0.774426094738595,"seconds":4.451721906661987e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":7.625,"distances_sum":1108.71151035162}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7822265625, conf: {"ssize":3,"bsize":6}, perf: {"precision":0.9869512648809524,"recall":0.7822265625,"f1":0.8650212417790548,"seconds":5.025416612625122e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.2890625,"distances_sum":1331.6007205676285}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8017578125, conf: {"ssize":1,"bsize":6}, perf: {"precision":0.9832124255952378,"recall":0.8017578125,"f1":0.878602192078755,"seconds":5.4407864809036255e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.4453125,"distances_sum":1407.8431126973283}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":3,"bsize":8}, perf: {"precision":0.9845145089285716,"recall":0.890625,"f1":0.9309902987637366,"seconds":5.537644028663635e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.734375,"distances_sum":1682.3313415761809}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.806640625, conf: {"ssize":6,"bsize":6}, perf: {"precision":0.9855096726190476,"recall":0.806640625,"f1":0.8803333385364641,"seconds":4.999339580535889e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.3125,"distances_sum":1423.37238263664}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7060546875, conf: {"ssize":6,"bsize":5}, perf: {"precision":0.9802827380952379,"recall":0.7060546875,"f1":0.8125341672216677,"seconds":4.997476935386658e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":7.8046875,"distances_sum":1199.5941046256237}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.890625,"state":{"ssize":3,"bsize":8},"perf":{"precision":0.9845145089285716,"recall":0.890625,"f1":0.9309902987637366,"seconds":5.537644028663635e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.734375,"distances_sum":1682.3313415761809}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.890625,"state":{"ssize":3,"bsize":8},"perf":{"precision":0.9845145089285716,"recall":0.890625,"f1":0.9309902987637366,"seconds":5.537644028663635e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.734375,"distances_sum":1682.3313415761809}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.755859375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.755859375,"f1":0.8514407467532478,"seconds":5.0496309995651245e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.2109375,"distances_sum":1417.5479392021139}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5439453125, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5439453125,"f1":0.6866159881784887,"seconds":4.284083843231201e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.0078125,"distances_sum":980.6352926597802}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.53125, conf: {"ssize":4,"bsize":3}, perf: {"precision":null,"recall":0.53125,"f1":null,"seconds":4.233792424201965e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":6.9296875,"distances_sum":981.2650494012529}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.755859375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.755859375,"f1":0.8514407467532478,"seconds":5.0496309995651245e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.2109375,"distances_sum":1417.5479392021139}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9430345695970701,"seconds":5.599111318588257e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.6953125,"distances_sum":1859.2517810817149}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9589858058608063,"seconds":5.617737770080566e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.8125,"distances_sum":1927.6869800519491}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8701171875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8701171875,"f1":0.9243163086913092,"seconds":5.552545189857483e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.5234375,"distances_sum":1761.2088667477744}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9410084706959712,"seconds":5.723908543586731e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.703125,"distances_sum":1847.0850865943366}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8359375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8359375,"f1":0.9052483974358982,"seconds":5.558133125305176e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.6015625,"distances_sum":1657.3642257147255}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7568359375, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.7568359375,"f1":0.851783633033634,"seconds":5.191192030906677e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.2265625,"distances_sum":1451.5094263818412}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9296422327672335,"seconds":5.4817646741867065e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.6328125,"distances_sum":1780.3035676821216}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9267578125,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9589858058608063,"seconds":5.617737770080566e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.8125,"distances_sum":1927.6869800519491}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9679887820512827,"seconds":5.62518835067749e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.859375,"distances_sum":1993.4064802821392}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9731055402930405,"seconds":5.541369318962097e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.875,"distances_sum":2016.345639486834}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9615384615384621,"seconds":5.3960829973220825e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.8125,"distances_sum":1946.000299164522}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":8,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9654075091575095,"seconds":5.684792995452881e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.84375,"distances_sum":1980.8394859507964}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":11,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.961423992673993,"seconds":5.459412932395935e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.828125,"distances_sum":1953.7080470150402}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.951171875,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9731055402930405,"seconds":5.541369318962097e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.875,"distances_sum":2016.345639486834}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.951171875,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9731055402930405,"seconds":5.541369318962097e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.875,"distances_sum":2016.345639486834}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.736328125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.736328125,"f1":0.8400536963036971,"seconds":4.811212420463562e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.875,"distances_sum":1502.3115473863531}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.736328125,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.736328125,"f1":0.8400536963036971,"seconds":4.811212420463562e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.875,"distances_sum":1502.3115473863531}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8525390625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8525390625,"f1":0.9138939185814193,"seconds":5.291774868965149e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.3359375,"distances_sum":1803.5164578816004}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.9279564185814192,"seconds":5.288049578666687e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.46875,"distances_sum":1903.696440563414}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9543211996337,"seconds":5.336478352546692e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.71875,"distances_sum":2053.5326677530397}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.957949862637363,"seconds":5.3979456424713135e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.78125,"distances_sum":2036.794455383603}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9248046875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.957949862637363,"seconds":5.3979456424713135e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.78125,"distances_sum":2036.794455383603}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9683836996337,"seconds":5.282461643218994e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8671875,"distances_sum":2102.176764245747}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9679544413919419,"seconds":5.31412661075592e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8671875,"distances_sum":2115.3490896315325}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9609375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9609375,"f1":0.9790178571428575,"seconds":5.558133125305176e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.96875,"distances_sum":2159.760252972897}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9619140625, conf: {"ssize":5,"bsize":13}, perf: {"precision":1.0,"recall":0.9619140625,"f1":0.9792410714285716,"seconds":5.5655837059021e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9375,"distances_sum":2169.6415779327162}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":6,"bsize":11}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9700180028305031,"seconds":5.632638931274414e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.875,"distances_sum":2135.9298080651156}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.959266254578755,"seconds":5.237758159637451e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.78125,"distances_sum":2065.8547738503357}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9619140625,"state":{"ssize":5,"bsize":13},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9792410714285716,"seconds":5.5655837059021e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9375,"distances_sum":2169.6415779327162}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9619140625,"state":{"ssize":5,"bsize":13},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9792410714285716,"seconds":5.5655837059021e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9375,"distances_sum":2169.6415779327162}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5732421875, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.5732421875,"f1":0.7152769105894112,"seconds":4.2244791984558105e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":7.34375,"distances_sum":1028.5245503412198}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5732421875,"state":{"ssize":2,"bsize":3},"perf":{"precision":1.0,"recall":0.5732421875,"f1":0.7152769105894112,"seconds":4.2244791984558105e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":7.34375,"distances_sum":1028.5245503412198}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6572265625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6572265625,"f1":0.7809919247419256,"seconds":4.353001713752747e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":7.765625,"distances_sum":1264.053297067861}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8203125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8203125,"f1":0.8927674755799763,"seconds":5.025416612625122e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.25,"distances_sum":1618.4475869075668}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9333047161172164,"seconds":5.105510354042053e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.5625,"distances_sum":1801.4990903029193}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7724609375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7724609375,"f1":0.8630931568431578,"seconds":4.9211084842681885e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.125,"distances_sum":1478.1381665138329}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8828125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8828125,"f1":0.9333047161172164,"seconds":5.105510354042053e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.5625,"distances_sum":1801.4990903029193}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9639537545787547,"seconds":5.500391125679016e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.7578125,"distances_sum":1988.8621975714773}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9554544413919418,"seconds":5.4370611906051636e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.7734375,"distances_sum":1914.9563634903448}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9452667124542131,"seconds":5.2656978368759155e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.7109375,"distances_sum":1879.4285118628748}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9558493589743593,"seconds":5.435198545455933e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.7890625,"distances_sum":1941.0735332801992}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9569482600732606,"seconds":5.424022674560547e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.75,"distances_sum":1936.4204176087346}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9489812271062278,"seconds":5.623325705528259e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.7421875,"distances_sum":1880.4823624011037}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.935546875,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9639537545787547,"seconds":5.500391125679016e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.7578125,"distances_sum":1988.8621975714773}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.935546875,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9639537545787547,"seconds":5.500391125679016e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.7578125,"distances_sum":1988.8621975714773}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5498046875, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5498046875,"f1":0.694500291375292,"seconds":3.974884748458862e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":6.796875,"distances_sum":1004.0098663686226}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.25390625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.25390625,"f1":null,"seconds":2.855435013771057e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":5.0078125,"distances_sum":532.2000220397836}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7470703125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7470703125,"f1":0.8444352522477531,"seconds":4.719942808151245e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.8984375,"distances_sum":1388.4277497258856}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7470703125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7470703125,"f1":0.8444352522477531,"seconds":4.719942808151245e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.8984375,"distances_sum":1388.4277497258856}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9480139652014659,"seconds":5.476176738739014e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.7109375,"distances_sum":1870.7092607803547}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7568359375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7568359375,"f1":0.854095904095905,"seconds":4.4852495193481445e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.0078125,"distances_sum":1447.7476203030596}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.86328125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.86328125,"f1":0.9206049159174166,"seconds":4.997476935386658e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.4765625,"distances_sum":1720.24984730575}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.908203125,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.908203125,"f1":0.9480139652014659,"seconds":5.476176738739014e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.7109375,"distances_sum":1870.7092607803547}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9632268772893776,"seconds":5.66430389881134e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8125,"distances_sum":1963.2107701484958}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.958413461538462,"seconds":5.31412661075592e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.703125,"distances_sum":1957.2390893093584}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9626316391941397,"seconds":5.559995770454407e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.7890625,"distances_sum":1942.589011686296}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9606456043956049,"seconds":5.515292286872864e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.7890625,"distances_sum":1942.2777761289826}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.93359375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9632268772893776,"seconds":5.66430389881134e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8125,"distances_sum":1963.2107701484958}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.93359375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9632268772893776,"seconds":5.66430389881134e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8125,"distances_sum":1963.2107701484958}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6591796875, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6591796875,"f1":0.7837110805860814,"seconds":4.215165972709656e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.5859375,"distances_sum":1271.8187122046593}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6689453125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6689453125,"f1":0.7877620643245651,"seconds":4.131346940994263e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.6328125,"distances_sum":1276.5309769122348}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6689453125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6689453125,"f1":0.7877620643245651,"seconds":4.131346940994263e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.6328125,"distances_sum":1276.5309769122348}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.939428800366301,"seconds":5.174428224563599e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.5546875,"distances_sum":1908.417553533422}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76171875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.76171875,"f1":0.8565601065601074,"seconds":4.667788743972778e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.03125,"distances_sum":1473.8748599755645}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.89453125,"state":{"ssize":7,"bsize":8},"perf":{"precision":1.0,"recall":0.89453125,"f1":0.939428800366301,"seconds":5.174428224563599e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.5546875,"distances_sum":1908.417553533422}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":6,"bsize":11}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.971394230769231,"seconds":5.690380930900574e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8828125,"distances_sum":2074.389907626304}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.960119047619048,"seconds":5.81890344619751e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8671875,"distances_sum":1989.536900493498}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9608859890109893,"seconds":5.520880222320557e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.71875,"distances_sum":2036.3261586935282}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9405277014652017,"seconds":5.356967449188232e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.65625,"distances_sum":1897.0594987501647}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94921875,"state":{"ssize":6,"bsize":11},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.971394230769231,"seconds":5.690380930900574e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8828125,"distances_sum":2074.389907626304}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94921875,"state":{"ssize":6,"bsize":11},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.971394230769231,"seconds":5.690380930900574e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8828125,"distances_sum":2074.389907626304}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4013671875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4013671875,"f1":null,"seconds":3.341585397720337e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":5.84375,"distances_sum":731.0672732003949}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.65234375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.65234375,"f1":0.7786650849150857,"seconds":4.220753908157349e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.5,"distances_sum":1265.38224102789}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.65234375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.65234375,"f1":0.7786650849150857,"seconds":4.220753908157349e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.5,"distances_sum":1265.38224102789}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8134765625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8134765625,"f1":0.8889027639027647,"seconds":5.675479769706726e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.296875,"distances_sum":1735.6901892460091}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.73046875, conf: {"ssize":2,"bsize":5}, perf: {"precision":null,"recall":0.73046875,"f1":null,"seconds":4.637986421585083e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.90625,"distances_sum":1450.020186098402}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.9361721611721616,"seconds":5.148351192474365e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.6015625,"distances_sum":1965.7703880689469}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.658203125, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.658203125,"f1":0.786265297202798,"seconds":4.55416738986969e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.6328125,"distances_sum":1329.7037296618107}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6669921875, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6669921875,"f1":0.7900833541458548,"seconds":4.2710453271865845e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.6640625,"distances_sum":1360.7193432264064}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6650390625, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6650390625,"f1":0.7892560564435572,"seconds":4.420056939125061e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.5859375,"distances_sum":1332.6162810444437}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8876953125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.8876953125,"f1":0.9361721611721616,"seconds":5.148351192474365e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.6015625,"distances_sum":1965.7703880689469}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.960084706959707,"seconds":5.424022674560547e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8046875,"distances_sum":2108.98965605991}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9287109375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.960084706959707,"seconds":5.424022674560547e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8046875,"distances_sum":2108.98965605991}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9287109375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.960084706959707,"seconds":5.424022674560547e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8046875,"distances_sum":2108.98965605991}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.236328125, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.236328125,"f1":null,"seconds":2.7939677238464355e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":5.1875,"distances_sum":430.84275595881013}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3994140625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3994140625,"f1":null,"seconds":3.296881914138794e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":5.7578125,"distances_sum":652.2446225011445}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2353515625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2353515625,"f1":null,"seconds":2.7623027563095093e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":5.234375,"distances_sum":479.73668614500843}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3876953125, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.3876953125,"f1":null,"seconds":3.069639205932617e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":5.84375,"distances_sum":657.4333498519482}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3994140625,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.3994140625,"f1":null,"seconds":3.296881914138794e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":5.7578125,"distances_sum":652.2446225011445}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8232421875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8232421875,"f1":0.8941485597735604,"seconds":6.57886266708374e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":8.3046875,"distances_sum":1610.0939472012374}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6669921875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6669921875,"f1":0.7923545204795212,"seconds":5.554407835006714e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":7.7578125,"distances_sum":1230.1307187149212}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.833984375, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.833984375,"f1":0.9030308233433241,"seconds":6.571412086486816e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":8.3671875,"distances_sum":1643.6246650873477}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.751953125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.751953125,"f1":0.851645750083251,"seconds":5.902722477912903e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":7.984375,"distances_sum":1392.0543737628916}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5400390625, conf: {"ssize":8,"bsize":3}, perf: {"precision":null,"recall":0.5400390625,"f1":null,"seconds":5.166977643966675e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":6.9921875,"distances_sum":965.6374537291563}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7353515625, conf: {"ssize":9,"bsize":5}, perf: {"precision":1.0,"recall":0.7353515625,"f1":0.8354031385281392,"seconds":5.520880222320557e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":7.8359375,"distances_sum":1370.9279976984171}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6806640625, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6806640625,"f1":0.7987424034299042,"seconds":5.597248673439026e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":7.7265625,"distances_sum":1287.8704604849438}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.833984375,"state":{"ssize":7,"bsize":6},"perf":{"precision":1.0,"recall":0.833984375,"f1":0.9030308233433241,"seconds":6.571412086486816e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":8.3671875,"distances_sum":1643.6246650873477}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8779296875, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8779296875,"f1":0.930053800366301,"seconds":6.787478923797607e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":8.59375,"distances_sum":1755.1061653672725}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9322973901098911,"seconds":6.7856162786483765e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":8.640625,"distances_sum":1776.4790760893336}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":11,"bsize":8}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9427884615384622,"seconds":6.73346221446991e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":8.65625,"distances_sum":1872.0223956061952}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9686412545787549,"seconds":6.90855085849762e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":8.859375,"distances_sum":2000.2231980763383}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9571485805860809,"seconds":6.791204214096069e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":8.8125,"distances_sum":1908.3912067533452}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8662109375, conf: {"ssize":13,"bsize":7}, perf: {"precision":1.0,"recall":0.8662109375,"f1":0.9221986346986355,"seconds":6.649643182754517e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":8.59375,"distances_sum":1731.3779506934964}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.943359375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9686412545787549,"seconds":6.90855085849762e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":8.859375,"distances_sum":2000.2231980763383}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.943359375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9686412545787549,"seconds":6.90855085849762e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":8.859375,"distances_sum":2000.2231980763383}}, n: 9
inertia(cfft.distances) = 20.88322269893531
inertia(cdnet.distances) = 41.14168614219112
inertia(crand.distances) = 20.291194444444443
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.851111111111111
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8466666666666667
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8733333333333334
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.9111111111111111
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8955555555555555
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.8977777777777778
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9422222222222222
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9444444444444445
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8733333333333334
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.88
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8888888888888888
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.9177777777777778
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9333333333333332
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9288888888888889
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9044444444444445
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.931111111111111
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9222222222222222
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8355555555555556
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8755555555555555
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8777777777777778
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8444444444444446
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9288888888888889
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.88
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.9022222222222221
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.8911111111111111
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9066666666666666
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8999999999999999
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8866666666666667
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8488888888888889
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8866666666666667
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9155555555555557
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX===== rocchio like>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX==== clustering>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
nc.class_map = [2, 1, 3, 3, 2, 2, 1, 3, 3, 1, 2, 3, 3, 1, 3, 3, 2, 2, 3, 3, 3]
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 4, 7]]
** centroid: 5, normalized-entropy: 0.9456603046006401, Tuple{Int64,Int64}[(2, 4), (3, 7)]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 9, normalized-entropy: 0.8112781244591328, Tuple{Int64,Int64}[(2, 3), (3, 1)]
*** center 10: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 1, 8]]
** centroid: 11, normalized-entropy: 0.5032583347756457, Tuple{Int64,Int64}[(2, 1), (3, 8)]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
finished with 15 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 2, 3, 3, 2, 3, 2, 3, 1, 2, 3, 2]
acc = 0.94
*** finished computation of 12 references, err: [Inf, 0.5640182656049728] ***
*** center 1: selecting labels [1] (freq >= 1) [from [46, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, Tuple{Int64,Int64}[(2, 3), (3, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 15, 2]]
** centroid: 4, normalized-entropy: 0.5225593745369407, Tuple{Int64,Int64}[(2, 15), (3, 2)]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 7]]
** centroid: 9, normalized-entropy: 0.8812908992306927, Tuple{Int64,Int64}[(2, 3), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 13]]
** centroid: 12, normalized-entropy: 0.3712323266408756, Tuple{Int64,Int64}[(2, 1), (3, 13)]
finished with 15 centroids; started with 12
acc = 0.9333333333333333
Test Summary:   | Pass  Total
NearestCentroid |   10     10
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.559067056030035] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.559067056030035, 0.4543829195946455] ***
*** finished computation of 7 references, err: [Inf, 0.559067056030035, 0.4543829195946455] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 11, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 3, 12]]
** centroid: 2, normalized-entropy: 0.7219280948873623, Tuple{Int64,Int64}[(2, 3), (3, 12)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 10, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [30, 0, 0]]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 6, 1]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 7, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5801474669575691] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5801474669575691, 0.40492415070533755] ***
*** starting iteration: 2; err: [Inf, 0.5801474669575691, 0.40492415070533755] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5801474669575691, 0.40492415070533755, 0.3915985102951527] ***
*** starting iteration: 3; err: [Inf, 0.5801474669575691, 0.40492415070533755, 0.3915985102951527] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5801474669575691, 0.40492415070533755, 0.3915985102951527, 0.3880684994906187] ***
*** finished computation of 7 references, err: [Inf, 0.5801474669575691, 0.40492415070533755, 0.3915985102951527, 0.3880684994906187] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 18, 8]]
** centroid: 1, normalized-entropy: 0.8904916402194913, Tuple{Int64,Int64}[(2, 18), (3, 8)]
*** center 2: selecting labels [1] (freq >= 1) [from [29, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 18, 1]]
** centroid: 4, normalized-entropy: 0.2974722489192896, Tuple{Int64,Int64}[(2, 18), (3, 1)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 1, 19]]
** centroid: 5, normalized-entropy: 0.2863969571159561, Tuple{Int64,Int64}[(2, 1), (3, 19)]
*** center 6: selecting labels [1] (freq >= 1) [from [1, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6342253851890564] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6342253851890564, 0.4359573905169964] ***
*** starting iteration: 2; err: [Inf, 0.6342253851890564, 0.4359573905169964] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6342253851890564, 0.4359573905169964, 0.4169568183273077] ***
*** starting iteration: 3; err: [Inf, 0.6342253851890564, 0.4359573905169964, 0.4169568183273077] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6342253851890564, 0.4359573905169964, 0.4169568183273077, 0.39609006740152836] ***
*** finished computation of 7 references, err: [Inf, 0.6342253851890564, 0.4359573905169964, 0.4169568183273077, 0.39609006740152836] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 1, 18]]
** centroid: 1, normalized-entropy: 0.2974722489192896, Tuple{Int64,Int64}[(2, 1), (3, 18)]
*** center 2: selecting labels [1] (freq >= 1) [from [19, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 5: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 18, 5]]
** centroid: 6, normalized-entropy: 0.7553754125614286, Tuple{Int64,Int64}[(2, 18), (3, 5)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 9, 2]]
** centroid: 7, normalized-entropy: 0.6840384356390419, Tuple{Int64,Int64}[(2, 9), (3, 2)]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.744841357767582] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.744841357767582, 0.5657435541599989] ***
*** starting iteration: 2; err: [Inf, 0.744841357767582, 0.5657435541599989] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.744841357767582, 0.5657435541599989, 0.527575099170208] ***
*** starting iteration: 3; err: [Inf, 0.744841357767582, 0.5657435541599989, 0.527575099170208] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.744841357767582, 0.5657435541599989, 0.527575099170208, 0.5065616948157549] ***
*** starting iteration: 4; err: [Inf, 0.744841357767582, 0.5657435541599989, 0.527575099170208, 0.5065616948157549] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.744841357767582, 0.5657435541599989, 0.527575099170208, 0.5065616948157549, 0.5011759721487761] ***
*** starting iteration: 5; err: [Inf, 0.744841357767582, 0.5657435541599989, 0.527575099170208, 0.5065616948157549, 0.5011759721487761] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.744841357767582, 0.5657435541599989, 0.527575099170208, 0.5065616948157549, 0.5011759721487761, 0.4994231735914946] ***
*** starting iteration: 6; err: [Inf, 0.744841357767582, 0.5657435541599989, 0.527575099170208, 0.5065616948157549, 0.5011759721487761, 0.4994231735914946] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.744841357767582, 0.5657435541599989, 0.527575099170208, 0.5065616948157549, 0.5011759721487761, 0.4994231735914946, 0.4994231735914946] ***
*** finished computation of 3 references, err: [Inf, 0.744841357767582, 0.5657435541599989, 0.527575099170208, 0.5065616948157549, 0.5011759721487761, 0.4994231735914946, 0.4994231735914946] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 35, 8]]
** centroid: 1, normalized-entropy: 0.6931274153282881, Tuple{Int64,Int64}[(2, 35), (3, 8)]
*** center 2: selecting labels [1] (freq >= 2) [from [30, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 2, 25]]
** centroid: 3, normalized-entropy: 0.38094658570539014, Tuple{Int64,Int64}[(2, 2), (3, 25)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9806468883156776] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9806468883156776, 0.5731373985856771] ***
*** starting iteration: 2; err: [Inf, 0.9806468883156776, 0.5731373985856771] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9806468883156776, 0.5731373985856771, 0.5703151942044496] ***
*** starting iteration: 3; err: [Inf, 0.9806468883156776, 0.5731373985856771, 0.5703151942044496] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9806468883156776, 0.5731373985856771, 0.5703151942044496, 0.5690978622436523] ***
*** starting iteration: 4; err: [Inf, 0.9806468883156776, 0.5731373985856771, 0.5703151942044496, 0.5690978622436523] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9806468883156776, 0.5731373985856771, 0.5703151942044496, 0.5690978622436523, 0.5690978622436523] ***
*** finished computation of 3 references, err: [Inf, 0.9806468883156776, 0.5731373985856771, 0.5703151942044496, 0.5690978622436523, 0.5690978622436523] ***
*** center 1: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 24]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 32, 10]]
** centroid: 3, normalized-entropy: 0.7918583525674836, Tuple{Int64,Int64}[(2, 32), (3, 10)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.7263024947047234] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7263024947047234, 0.576078901104629] ***
*** starting iteration: 2; err: [Inf, 0.7263024947047234, 0.576078901104629] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7263024947047234, 0.576078901104629, 0.5598082245513797] ***
*** starting iteration: 3; err: [Inf, 0.7263024947047234, 0.576078901104629, 0.5598082245513797] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7263024947047234, 0.576078901104629, 0.5598082245513797, 0.5503123330697417] ***
*** starting iteration: 4; err: [Inf, 0.7263024947047234, 0.576078901104629, 0.5598082245513797, 0.5503123330697417] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7263024947047234, 0.576078901104629, 0.5598082245513797, 0.5503123330697417, 0.5468523524329066] ***
*** starting iteration: 5; err: [Inf, 0.7263024947047234, 0.576078901104629, 0.5598082245513797, 0.5503123330697417, 0.5468523524329066] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7263024947047234, 0.576078901104629, 0.5598082245513797, 0.5503123330697417, 0.5468523524329066, 0.5456768387183547] ***
*** starting iteration: 6; err: [Inf, 0.7263024947047234, 0.576078901104629, 0.5598082245513797, 0.5503123330697417, 0.5468523524329066, 0.5456768387183547] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7263024947047234, 0.576078901104629, 0.5598082245513797, 0.5503123330697417, 0.5468523524329066, 0.5456768387183547, 0.5456768387183547] ***
*** finished computation of 3 references, err: [Inf, 0.7263024947047234, 0.576078901104629, 0.5598082245513797, 0.5503123330697417, 0.5468523524329066, 0.5456768387183547, 0.5456768387183547] ***
*** center 1: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 2, 25]]
** centroid: 2, normalized-entropy: 0.38094658570539014, Tuple{Int64,Int64}[(2, 2), (3, 25)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 29, 8]]
** centroid: 3, normalized-entropy: 0.7531979910695015, Tuple{Int64,Int64}[(2, 29), (3, 8)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.744841357767582] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.744841357767582, 0.5657435541599989] ***
*** finished computation of 3 references, err: [Inf, 0.744841357767582, 0.5657435541599989] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 37, 18]]
** centroid: 1, normalized-entropy: 0.9121156307204275, Tuple{Int64,Int64}[(2, 37), (3, 18)]
*** center 2: selecting labels [1] (freq >= 1) [from [30, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 15]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.3660836113989354] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.3660836113989354, 0.7123099095374346] ***
*** finished computation of 7 references, err: [Inf, 1.3660836113989354, 0.7123099095374346] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 21, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 1, 6]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [34, 3, 0]]
** centroid: 3, normalized-entropy: 0.40597703847557104, Tuple{Int64,Int64}[(1, 34), (2, 3)]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 3]]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 1, 9]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 11]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 6, 5]]
** centroid: 7, normalized-entropy: 0.9940302114769566, Tuple{Int64,Int64}[(2, 6), (3, 5)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.64411686681211] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.64411686681211, 0.5604512659460306] ***
*** finished computation of 7 references, err: [Inf, 0.64411686681211, 0.5604512659460306] ***
*** center 1: selecting labels [1] (freq >= 2) [from [3, 0, 0]]
*** center 2: ignoring all elements because minimum-frequency restrictions were not met, freq >= 2, freqs: [1, 0, 0]
*** center 3: selecting labels [1] (freq >= 2) [from [12, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [6, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [14, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 3, 27]]
** centroid: 6, normalized-entropy: 0.46899559358928133, Tuple{Int64,Int64}[(2, 3), (3, 27)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 28, 6]]
** centroid: 7, normalized-entropy: 0.6722948170756378, Tuple{Int64,Int64}[(2, 28), (3, 6)]
finished with 6 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.45837929993867876] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.45837929993867876, 0.3679461305588484] ***
*** starting iteration: 2; err: [Inf, 0.45837929993867876, 0.3679461305588484] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.45837929993867876, 0.3679461305588484, 0.3674973615258932] ***
*** finished computation of 7 references, err: [Inf, 0.45837929993867876, 0.3679461305588484, 0.3674973615258932] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 4, 2]]
** centroid: 1, normalized-entropy: 0.9182958340544894, Tuple{Int64,Int64}[(2, 4), (3, 2)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 10, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 19, 1]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 17]]
*** center 5: selecting labels [1] (freq >= 2) [from [30, 0, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 5]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 4, 8]]
** centroid: 7, normalized-entropy: 0.9182958340544894, Tuple{Int64,Int64}[(2, 4), (3, 8)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6524974948167801] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6524974948167801, 0.4876140006631613] ***
*** starting iteration: 2; err: [Inf, 0.6524974948167801, 0.4876140006631613] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6524974948167801, 0.4876140006631613, 0.43602946437895296] ***
*** starting iteration: 3; err: [Inf, 0.6524974948167801, 0.4876140006631613, 0.43602946437895296] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6524974948167801, 0.4876140006631613, 0.43602946437895296, 0.41530421018600466] ***
*** finished computation of 7 references, err: [Inf, 0.6524974948167801, 0.4876140006631613, 0.43602946437895296, 0.41530421018600466] ***
*** center 1: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 13]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 14, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 5, 1]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 11, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 2, 9]]
** centroid: 6, normalized-entropy: 0.6840384356390419, Tuple{Int64,Int64}[(2, 2), (3, 9)]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 11]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5195260962843895] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5195260962843895, 0.4417425508052111] ***
*** starting iteration: 2; err: [Inf, 0.5195260962843895, 0.4417425508052111] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5195260962843895, 0.4417425508052111, 0.4167223073542118] ***
*** starting iteration: 3; err: [Inf, 0.5195260962843895, 0.4417425508052111, 0.4167223073542118] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5195260962843895, 0.4417425508052111, 0.4167223073542118, 0.4056936165690422] ***
*** finished computation of 7 references, err: [Inf, 0.5195260962843895, 0.4417425508052111, 0.4167223073542118, 0.4056936165690422] ***
*** center 1: selecting labels [1] (freq >= 2) [from [16, 0, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 3, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 2, 25]]
** centroid: 3, normalized-entropy: 0.38094658570539014, Tuple{Int64,Int64}[(2, 2), (3, 25)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 11, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 15, 8]]
** centroid: 5, normalized-entropy: 0.9321115676166747, Tuple{Int64,Int64}[(2, 15), (3, 8)]
*** center 6: selecting labels [1] (freq >= 2) [from [10, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [10, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5326541522145272] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5326541522145272, 0.41569532558321953] ***
*** finished computation of 7 references, err: [Inf, 0.5326541522145272, 0.41569532558321953] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 18, 7]]
** centroid: 1, normalized-entropy: 0.8554508105601307, Tuple{Int64,Int64}[(2, 18), (3, 7)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 2, 25]]
** centroid: 2, normalized-entropy: 0.38094658570539014, Tuple{Int64,Int64}[(2, 2), (3, 25)]
*** center 3: selecting labels [1] (freq >= 2) [from [10, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [12, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [5, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 17, 1]]
*** center 7: selecting labels [1] (freq >= 2) [from [3, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 1.2421468175947665] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.2421468175947665, 0.6001441325992346] ***
*** finished computation of 7 references, err: [Inf, 1.2421468175947665, 0.6001441325992346] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 11, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 3, 9]]
** centroid: 2, normalized-entropy: 0.8112781244591328, Tuple{Int64,Int64}[(2, 3), (3, 9)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [34, 2, 0]]
** centroid: 3, normalized-entropy: 0.3095434291503252, Tuple{Int64,Int64}[(1, 34), (2, 2)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 12, 0]]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 10]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 14]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 4, 1]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5579245045781136] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5579245045781136, 0.37586824879050257] ***
*** finished computation of 7 references, err: [Inf, 0.5579245045781136, 0.37586824879050257] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 13, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [6, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 11, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 7, 21]]
** centroid: 4, normalized-entropy: 0.8112781244591328, Tuple{Int64,Int64}[(2, 7), (3, 21)]
*** center 5: selecting labels [1] (freq >= 2) [from [16, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [14, 0, 0]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 12]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.8648545378446579] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8648545378446579, 0.6179194793850183] ***
*** starting iteration: 2; err: [Inf, 0.8648545378446579, 0.6179194793850183] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8648545378446579, 0.6179194793850183, 0.601543839648366] ***
*** starting iteration: 3; err: [Inf, 0.8648545378446579, 0.6179194793850183, 0.601543839648366] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8648545378446579, 0.6179194793850183, 0.601543839648366, 0.5985868758708238] ***
*** starting iteration: 4; err: [Inf, 0.8648545378446579, 0.6179194793850183, 0.601543839648366, 0.5985868758708238] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8648545378446579, 0.6179194793850183, 0.601543839648366, 0.5985868758708238, 0.5974636255949736] ***
*** starting iteration: 5; err: [Inf, 0.8648545378446579, 0.6179194793850183, 0.601543839648366, 0.5985868758708238, 0.5974636255949736] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8648545378446579, 0.6179194793850183, 0.601543839648366, 0.5985868758708238, 0.5974636255949736, 0.5981506735831499] ***
*** finished computation of 3 references, err: [Inf, 0.8648545378446579, 0.6179194793850183, 0.601543839648366, 0.5985868758708238, 0.5974636255949736, 0.5981506735831499] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 32, 3]]
** centroid: 1, normalized-entropy: 0.4220005168831531, Tuple{Int64,Int64}[(2, 32), (3, 3)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 5, 30]]
** centroid: 2, normalized-entropy: 0.5916727785823274, Tuple{Int64,Int64}[(2, 5), (3, 30)]
*** center 3: selecting labels [1] (freq >= 1) [from [30, 0, 0]]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9587728823721409] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9587728823721409, 0.691931739449501] ***
*** starting iteration: 2; err: [Inf, 0.9587728823721409, 0.691931739449501] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9587728823721409, 0.691931739449501, 0.6769191320985556] ***
*** starting iteration: 3; err: [Inf, 0.9587728823721409, 0.691931739449501, 0.6769191320985556] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9587728823721409, 0.691931739449501, 0.6769191320985556, 0.6788440410792828] ***
*** finished computation of 3 references, err: [Inf, 0.9587728823721409, 0.691931739449501, 0.6769191320985556, 0.6788440410792828] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 30, 10]]
** centroid: 1, normalized-entropy: 0.8112781244591328, Tuple{Int64,Int64}[(2, 30), (3, 10)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 2, 24]]
** centroid: 2, normalized-entropy: 0.3912435636292556, Tuple{Int64,Int64}[(2, 2), (3, 24)]
*** center 3: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 2.1140790130198] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.1140790130198, 1.0786514576524495] ***
*** starting iteration: 2; err: [Inf, 2.1140790130198, 1.0786514576524495] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.1140790130198, 1.0786514576524495, 0.7848500216007233] ***
*** starting iteration: 3; err: [Inf, 2.1140790130198, 1.0786514576524495, 0.7848500216007233] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.1140790130198, 1.0786514576524495, 0.7848500216007233, 0.6892470815777778] ***
*** starting iteration: 4; err: [Inf, 2.1140790130198, 1.0786514576524495, 0.7848500216007233, 0.6892470815777778] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.1140790130198, 1.0786514576524495, 0.7848500216007233, 0.6892470815777778, 0.6612801513820886] ***
*** starting iteration: 5; err: [Inf, 2.1140790130198, 1.0786514576524495, 0.7848500216007233, 0.6892470815777778, 0.6612801513820886] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.1140790130198, 1.0786514576524495, 0.7848500216007233, 0.6892470815777778, 0.6612801513820886, 0.6535570219904184] ***
*** starting iteration: 6; err: [Inf, 2.1140790130198, 1.0786514576524495, 0.7848500216007233, 0.6892470815777778, 0.6612801513820886, 0.6535570219904184] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.1140790130198, 1.0786514576524495, 0.7848500216007233, 0.6892470815777778, 0.6612801513820886, 0.6535570219904184, 0.6524912773817778] ***
*** starting iteration: 7; err: [Inf, 2.1140790130198, 1.0786514576524495, 0.7848500216007233, 0.6892470815777778, 0.6612801513820886, 0.6535570219904184, 0.6524912773817778] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.1140790130198, 1.0786514576524495, 0.7848500216007233, 0.6892470815777778, 0.6612801513820886, 0.6535570219904184, 0.6524912773817778, 0.6516616923362016] ***
*** finished computation of 3 references, err: [Inf, 2.1140790130198, 1.0786514576524495, 0.7848500216007233, 0.6892470815777778, 0.6612801513820886, 0.6535570219904184, 0.6524912773817778, 0.6516616923362016] ***
*** center 1: selecting labels [1] (freq >= 1) [from [36, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 2, 25]]
** centroid: 2, normalized-entropy: 0.38094658570539014, Tuple{Int64,Int64}[(2, 2), (3, 25)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 29, 8]]
** centroid: 3, normalized-entropy: 0.7531979910695015, Tuple{Int64,Int64}[(2, 29), (3, 8)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8985053758323193] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8985053758323193, 0.6142729333788156] ***
*** starting iteration: 2; err: [Inf, 0.8985053758323193, 0.6142729333788156] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8985053758323193, 0.6142729333788156, 0.601543839648366] ***
*** starting iteration: 3; err: [Inf, 0.8985053758323193, 0.6142729333788156, 0.601543839648366] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8985053758323193, 0.6142729333788156, 0.601543839648366, 0.5985868758708238] ***
*** finished computation of 3 references, err: [Inf, 0.8985053758323193, 0.6142729333788156, 0.601543839648366, 0.5985868758708238] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 31, 2]]
** centroid: 1, normalized-entropy: 0.32984607020714635, Tuple{Int64,Int64}[(2, 31), (3, 2)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 6, 31]]
** centroid: 2, normalized-entropy: 0.6394571324851642, Tuple{Int64,Int64}[(2, 6), (3, 31)]
*** center 3: selecting labels [1] (freq >= 2) [from [30, 0, 0]]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 2.881577293127775] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.881577293127775, 1.2141272854804992] ***
*** starting iteration: 2; err: [Inf, 2.881577293127775, 1.2141272854804992] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.881577293127775, 1.2141272854804992, 0.71306096509099] ***
*** starting iteration: 3; err: [Inf, 2.881577293127775, 1.2141272854804992, 0.71306096509099] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.881577293127775, 1.2141272854804992, 0.71306096509099, 0.7081968274712562] ***
*** finished computation of 3 references, err: [Inf, 2.881577293127775, 1.2141272854804992, 0.71306096509099, 0.7081968274712562] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 15, 33]]
** centroid: 1, normalized-entropy: 0.8960382325345574, Tuple{Int64,Int64}[(2, 15), (3, 33)]
*** center 2: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 17, 1]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.5309668904542924] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.5309668904542924, 1.1999734720587731] ***
*** starting iteration: 2; err: [Inf, 1.5309668904542924, 1.1999734720587731] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.5309668904542924, 1.1999734720587731, 0.897876045256853] ***
*** starting iteration: 3; err: [Inf, 1.5309668904542924, 1.1999734720587731, 0.897876045256853] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.5309668904542924, 1.1999734720587731, 0.897876045256853, 0.7297031386196613] ***
*** finished computation of 3 references, err: [Inf, 1.5309668904542924, 1.1999734720587731, 0.897876045256853, 0.7297031386196613] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [36, 2, 0]]
** centroid: 1, normalized-entropy: 0.2974722489192896, Tuple{Int64,Int64}[(1, 36), (2, 2)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 29, 18]]
** centroid: 2, normalized-entropy: 0.9601186626422924, Tuple{Int64,Int64}[(2, 29), (3, 18)]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 15]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8066267348825932] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8066267348825932, 0.506723458468914] ***
*** starting iteration: 2; err: [Inf, 0.8066267348825932, 0.506723458468914] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8066267348825932, 0.506723458468914, 0.5014458664506674] ***
*** starting iteration: 3; err: [Inf, 0.8066267348825932, 0.506723458468914, 0.5014458664506674] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8066267348825932, 0.506723458468914, 0.5014458664506674, 0.49879448764026163] ***
*** starting iteration: 4; err: [Inf, 0.8066267348825932, 0.506723458468914, 0.5014458664506674, 0.49879448764026163] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8066267348825932, 0.506723458468914, 0.5014458664506674, 0.49879448764026163, 0.4875164302438498] ***
*** starting iteration: 5; err: [Inf, 0.8066267348825932, 0.506723458468914, 0.5014458664506674, 0.49879448764026163, 0.4875164302438498] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8066267348825932, 0.506723458468914, 0.5014458664506674, 0.49879448764026163, 0.4875164302438498, 0.4813593452423811] ***
*** starting iteration: 6; err: [Inf, 0.8066267348825932, 0.506723458468914, 0.5014458664506674, 0.49879448764026163, 0.4875164302438498, 0.4813593452423811] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8066267348825932, 0.506723458468914, 0.5014458664506674, 0.49879448764026163, 0.4875164302438498, 0.4813593452423811, 0.47791922740638254] ***
*** starting iteration: 7; err: [Inf, 0.8066267348825932, 0.506723458468914, 0.5014458664506674, 0.49879448764026163, 0.4875164302438498, 0.4813593452423811, 0.47791922740638254] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8066267348825932, 0.506723458468914, 0.5014458664506674, 0.49879448764026163, 0.4875164302438498, 0.4813593452423811, 0.47791922740638254, 0.4625573220103979] ***
*** starting iteration: 8; err: [Inf, 0.8066267348825932, 0.506723458468914, 0.5014458664506674, 0.49879448764026163, 0.4875164302438498, 0.4813593452423811, 0.47791922740638254, 0.4625573220103979] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8066267348825932, 0.506723458468914, 0.5014458664506674, 0.49879448764026163, 0.4875164302438498, 0.4813593452423811, 0.47791922740638254, 0.4625573220103979, 0.4468243402987719] ***
*** starting iteration: 9; err: [Inf, 0.8066267348825932, 0.506723458468914, 0.5014458664506674, 0.49879448764026163, 0.4875164302438498, 0.4813593452423811, 0.47791922740638254, 0.4625573220103979, 0.4468243402987719] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8066267348825932, 0.506723458468914, 0.5014458664506674, 0.49879448764026163, 0.4875164302438498, 0.4813593452423811, 0.47791922740638254, 0.4625573220103979, 0.4468243402987719, 0.44179491616785527] ***
*** starting iteration: 10; err: [Inf, 0.8066267348825932, 0.506723458468914, 0.5014458664506674, 0.49879448764026163, 0.4875164302438498, 0.4813593452423811, 0.47791922740638254, 0.4625573220103979, 0.4468243402987719, 0.44179491616785527] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8066267348825932, 0.506723458468914, 0.5014458664506674, 0.49879448764026163, 0.4875164302438498, 0.4813593452423811, 0.47791922740638254, 0.4625573220103979, 0.4468243402987719, 0.44179491616785527, 0.4414761022478342] ***
*** finished computation of 7 references, err: [Inf, 0.8066267348825932, 0.506723458468914, 0.5014458664506674, 0.49879448764026163, 0.4875164302438498, 0.4813593452423811, 0.47791922740638254, 0.4625573220103979, 0.4468243402987719, 0.44179491616785527, 0.4414761022478342] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 16, 10]]
** centroid: 2, normalized-entropy: 0.961236604722876, Tuple{Int64,Int64}[(2, 16), (3, 10)]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 5]]
*** center 4: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 21, 1]]
** centroid: 6, normalized-entropy: 0.2667649878030262, Tuple{Int64,Int64}[(2, 21), (3, 1)]
*** center 7: selecting labels [1] (freq >= 1) [from [1, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6476232831925154] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6476232831925154, 0.5112903998047114] ***
*** starting iteration: 2; err: [Inf, 0.6476232831925154, 0.5112903998047114] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6476232831925154, 0.5112903998047114, 0.5042641887813807] ***
*** starting iteration: 3; err: [Inf, 0.6476232831925154, 0.5112903998047114, 0.5042641887813807] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6476232831925154, 0.5112903998047114, 0.5042641887813807, 0.5007773601263762] ***
*** starting iteration: 4; err: [Inf, 0.6476232831925154, 0.5112903998047114, 0.5042641887813807, 0.5007773601263762] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6476232831925154, 0.5112903998047114, 0.5042641887813807, 0.5007773601263762, 0.4980144863575697] ***
*** starting iteration: 5; err: [Inf, 0.6476232831925154, 0.5112903998047114, 0.5042641887813807, 0.5007773601263762, 0.4980144863575697] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6476232831925154, 0.5112903998047114, 0.5042641887813807, 0.5007773601263762, 0.4980144863575697, 0.49672582626342776] ***
*** starting iteration: 6; err: [Inf, 0.6476232831925154, 0.5112903998047114, 0.5042641887813807, 0.5007773601263762, 0.4980144863575697, 0.49672582626342776] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6476232831925154, 0.5112903998047114, 0.5042641887813807, 0.5007773601263762, 0.4980144863575697, 0.49672582626342776, 0.49463229745626447] ***
*** starting iteration: 7; err: [Inf, 0.6476232831925154, 0.5112903998047114, 0.5042641887813807, 0.5007773601263762, 0.4980144863575697, 0.49672582626342776, 0.49463229745626447] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6476232831925154, 0.5112903998047114, 0.5042641887813807, 0.5007773601263762, 0.4980144863575697, 0.49672582626342776, 0.49463229745626447, 0.49463229745626447] ***
*** finished computation of 7 references, err: [Inf, 0.6476232831925154, 0.5112903998047114, 0.5042641887813807, 0.5007773601263762, 0.4980144863575697, 0.49672582626342776, 0.49463229745626447, 0.49463229745626447] ***
*** center 1: selecting labels [1] (freq >= 1) [from [12, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 19, 11]]
** centroid: 2, normalized-entropy: 0.9480782435939054, Tuple{Int64,Int64}[(2, 19), (3, 11)]
*** center 3: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 5: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 13, 1]]
** centroid: 6, normalized-entropy: 0.3712323266408756, Tuple{Int64,Int64}[(2, 13), (3, 1)]
*** center 7: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7315847952663899] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7315847952663899, 0.6154927369207144] ***
*** starting iteration: 2; err: [Inf, 0.7315847952663899, 0.6154927369207144] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7315847952663899, 0.6154927369207144, 0.5930438990145922] ***
*** starting iteration: 3; err: [Inf, 0.7315847952663899, 0.6154927369207144, 0.5930438990145922] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7315847952663899, 0.6154927369207144, 0.5930438990145922, 0.5311240417510271] ***
*** starting iteration: 4; err: [Inf, 0.7315847952663899, 0.6154927369207144, 0.5930438990145922, 0.5311240417510271] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7315847952663899, 0.6154927369207144, 0.5930438990145922, 0.5311240417510271, 0.5002252219617367] ***
*** starting iteration: 5; err: [Inf, 0.7315847952663899, 0.6154927369207144, 0.5930438990145922, 0.5311240417510271, 0.5002252219617367] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7315847952663899, 0.6154927369207144, 0.5930438990145922, 0.5311240417510271, 0.5002252219617367, 0.494128585010767] ***
*** starting iteration: 6; err: [Inf, 0.7315847952663899, 0.6154927369207144, 0.5930438990145922, 0.5311240417510271, 0.5002252219617367, 0.494128585010767] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7315847952663899, 0.6154927369207144, 0.5930438990145922, 0.5311240417510271, 0.5002252219617367, 0.494128585010767, 0.48642651960253713] ***
*** starting iteration: 7; err: [Inf, 0.7315847952663899, 0.6154927369207144, 0.5930438990145922, 0.5311240417510271, 0.5002252219617367, 0.494128585010767, 0.48642651960253713] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7315847952663899, 0.6154927369207144, 0.5930438990145922, 0.5311240417510271, 0.5002252219617367, 0.494128585010767, 0.48642651960253713, 0.4846696895360947] ***
*** starting iteration: 8; err: [Inf, 0.7315847952663899, 0.6154927369207144, 0.5930438990145922, 0.5311240417510271, 0.5002252219617367, 0.494128585010767, 0.48642651960253713, 0.4846696895360947] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7315847952663899, 0.6154927369207144, 0.5930438990145922, 0.5311240417510271, 0.5002252219617367, 0.494128585010767, 0.48642651960253713, 0.4846696895360947, 0.48301582962274553] ***
*** starting iteration: 9; err: [Inf, 0.7315847952663899, 0.6154927369207144, 0.5930438990145922, 0.5311240417510271, 0.5002252219617367, 0.494128585010767, 0.48642651960253713, 0.4846696895360947, 0.48301582962274553] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7315847952663899, 0.6154927369207144, 0.5930438990145922, 0.5311240417510271, 0.5002252219617367, 0.494128585010767, 0.48642651960253713, 0.4846696895360947, 0.48301582962274553, 0.48225429192185404] ***
*** finished computation of 7 references, err: [Inf, 0.7315847952663899, 0.6154927369207144, 0.5930438990145922, 0.5311240417510271, 0.5002252219617367, 0.494128585010767, 0.48642651960253713, 0.4846696895360947, 0.48301582962274553, 0.48225429192185404] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 17, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [12, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 14, 11]]
** centroid: 4, normalized-entropy: 0.9895875212220558, Tuple{Int64,Int64}[(2, 14), (3, 11)]
*** center 5: selecting labels [1] (freq >= 1) [from [3, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5317035514116287] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5317035514116287, 0.43998036466538903] ***
*** starting iteration: 2; err: [Inf, 0.5317035514116287, 0.43998036466538903] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5317035514116287, 0.43998036466538903, 0.4318589258939028] ***
*** starting iteration: 3; err: [Inf, 0.5317035514116287, 0.43998036466538903, 0.4318589258939028] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5317035514116287, 0.43998036466538903, 0.4318589258939028, 0.4289206325262785] ***
*** starting iteration: 4; err: [Inf, 0.5317035514116287, 0.43998036466538903, 0.4318589258939028, 0.4289206325262785] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5317035514116287, 0.43998036466538903, 0.4318589258939028, 0.4289206325262785, 0.427533645555377] ***
*** starting iteration: 5; err: [Inf, 0.5317035514116287, 0.43998036466538903, 0.4318589258939028, 0.4289206325262785, 0.427533645555377] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5317035514116287, 0.43998036466538903, 0.4318589258939028, 0.4289206325262785, 0.427533645555377, 0.4255832152813673] ***
*** starting iteration: 6; err: [Inf, 0.5317035514116287, 0.43998036466538903, 0.4318589258939028, 0.4289206325262785, 0.427533645555377, 0.4255832152813673] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5317035514116287, 0.43998036466538903, 0.4318589258939028, 0.4289206325262785, 0.427533645555377, 0.4255832152813673, 0.42493757002055643] ***
*** finished computation of 7 references, err: [Inf, 0.5317035514116287, 0.43998036466538903, 0.4318589258939028, 0.4289206325262785, 0.427533645555377, 0.4255832152813673, 0.42493757002055643] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 1, normalized-entropy: 0.7642045065086204, Tuple{Int64,Int64}[(2, 2), (3, 7)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 17, 1]]
** centroid: 2, normalized-entropy: 0.3095434291503252, Tuple{Int64,Int64}[(2, 17), (3, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [30, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 16, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 6, normalized-entropy: 0.7219280948873623, Tuple{Int64,Int64}[(2, 2), (3, 8)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 5]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7641983115673066] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7641983115673066, 0.5146942336112261] ***
*** starting iteration: 2; err: [Inf, 0.7641983115673066, 0.5146942336112261] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7641983115673066, 0.5146942336112261, 0.5022288917005062] ***
*** starting iteration: 3; err: [Inf, 0.7641983115673066, 0.5146942336112261, 0.5022288917005062] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7641983115673066, 0.5146942336112261, 0.5022288917005062, 0.4990608322620392] ***
*** starting iteration: 4; err: [Inf, 0.7641983115673066, 0.5146942336112261, 0.5022288917005062, 0.4990608322620392] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7641983115673066, 0.5146942336112261, 0.5022288917005062, 0.4990608322620392, 0.49879082120954993] ***
*** finished computation of 7 references, err: [Inf, 0.7641983115673066, 0.5146942336112261, 0.5022288917005062, 0.4990608322620392, 0.49879082120954993] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 2: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 19, 13]]
** centroid: 4, normalized-entropy: 0.9744894033980525, Tuple{Int64,Int64}[(2, 19), (3, 13)]
*** center 5: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 13, 1]]
** centroid: 6, normalized-entropy: 0.3712323266408756, Tuple{Int64,Int64}[(2, 13), (3, 1)]
*** center 7: selecting labels [1] (freq >= 1) [from [9, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7075925402343273] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7075925402343273, 0.49325947701931] ***
*** starting iteration: 2; err: [Inf, 0.7075925402343273, 0.49325947701931] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7075925402343273, 0.49325947701931, 0.4411255469918251] ***
*** starting iteration: 3; err: [Inf, 0.7075925402343273, 0.49325947701931, 0.4411255469918251] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7075925402343273, 0.49325947701931, 0.4411255469918251, 0.43280866369605064] ***
*** starting iteration: 4; err: [Inf, 0.7075925402343273, 0.49325947701931, 0.4411255469918251, 0.43280866369605064] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7075925402343273, 0.49325947701931, 0.4411255469918251, 0.43280866369605064, 0.42799725010991096] ***
*** starting iteration: 5; err: [Inf, 0.7075925402343273, 0.49325947701931, 0.4411255469918251, 0.43280866369605064, 0.42799725010991096] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7075925402343273, 0.49325947701931, 0.4411255469918251, 0.43280866369605064, 0.42799725010991096, 0.4274862708151341] ***
*** finished computation of 7 references, err: [Inf, 0.7075925402343273, 0.49325947701931, 0.4411255469918251, 0.43280866369605064, 0.42799725010991096, 0.4274862708151341] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 15]]
*** center 4: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 8, 8]]
** centroid: 5, normalized-entropy: 1.0, Tuple{Int64,Int64}[(2, 8), (3, 8)]
*** center 6: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 16, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 1.383502332419157] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.383502332419157, 1.0314678609371186] ***
*** starting iteration: 2; err: [Inf, 1.383502332419157, 1.0314678609371186] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.383502332419157, 1.0314678609371186, 0.6796847207844258] ***
*** starting iteration: 3; err: [Inf, 1.383502332419157, 1.0314678609371186, 0.6796847207844258] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.383502332419157, 1.0314678609371186, 0.6796847207844258, 0.605370824187994] ***
*** finished computation of 3 references, err: [Inf, 1.383502332419157, 1.0314678609371186, 0.6796847207844258, 0.605370824187994] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 36, 10]]
** centroid: 1, normalized-entropy: 0.7553754125614286, Tuple{Int64,Int64}[(2, 36), (3, 10)]
*** center 2: selecting labels [1] (freq >= 2) [from [30, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 1, 23]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8678588765114545] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8678588765114545, 0.687374017983675] ***
*** starting iteration: 2; err: [Inf, 0.8678588765114545, 0.687374017983675] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8678588765114545, 0.687374017983675, 0.6765322285145521] ***
*** starting iteration: 3; err: [Inf, 0.8678588765114545, 0.687374017983675, 0.6765322285145521] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8678588765114545, 0.687374017983675, 0.6765322285145521, 0.6767503745853901] ***
*** finished computation of 3 references, err: [Inf, 0.8678588765114545, 0.687374017983675, 0.6765322285145521, 0.6767503745853901] ***
*** center 1: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 32, 11]]
** centroid: 2, normalized-entropy: 0.8203636429576731, Tuple{Int64,Int64}[(2, 32), (3, 11)]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 23]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.717186404019594] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.717186404019594, 1.0992056831717492] ***
*** starting iteration: 2; err: [Inf, 1.717186404019594, 1.0992056831717492] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.717186404019594, 1.0992056831717492, 0.8466769680380821] ***
*** starting iteration: 3; err: [Inf, 1.717186404019594, 1.0992056831717492, 0.8466769680380821] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.717186404019594, 1.0992056831717492, 0.8466769680380821, 0.7087053599208594] ***
*** finished computation of 3 references, err: [Inf, 1.717186404019594, 1.0992056831717492, 0.8466769680380821, 0.7087053599208594] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 17]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 30, 16]]
** centroid: 2, normalized-entropy: 0.9321115676166747, Tuple{Int64,Int64}[(2, 30), (3, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [36, 1, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.5425086848437786] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5425086848437786, 0.40669903613626956] ***
*** finished computation of 7 references, err: [Inf, 0.5425086848437786, 0.40669903613626956] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 1, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [24, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 8, 16]]
** centroid: 5, normalized-entropy: 0.9182958340544894, Tuple{Int64,Int64}[(2, 8), (3, 16)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 15, 1]]
** centroid: 6, normalized-entropy: 0.3372900666170139, Tuple{Int64,Int64}[(2, 15), (3, 1)]
*** center 7: selecting labels [1] (freq >= 1) [from [6, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5086048141866922] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5086048141866922, 0.3908579090237618] ***
*** finished computation of 7 references, err: [Inf, 0.5086048141866922, 0.3908579090237618] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 17, 3]]
** centroid: 1, normalized-entropy: 0.6098403047164005, Tuple{Int64,Int64}[(2, 17), (3, 3)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 2, normalized-entropy: 0.7642045065086204, Tuple{Int64,Int64}[(2, 2), (3, 7)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 13, 1]]
** centroid: 3, normalized-entropy: 0.3712323266408756, Tuple{Int64,Int64}[(2, 13), (3, 1)]
*** center 4: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [19, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 11]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4812408757209778] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4812408757209778, 0.3891244007647037] ***
*** finished computation of 7 references, err: [Inf, 0.4812408757209778, 0.3891244007647037] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 6, 3]]
** centroid: 1, normalized-entropy: 0.9182958340544894, Tuple{Int64,Int64}[(2, 6), (3, 3)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 3: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 9, 7]]
** centroid: 4, normalized-entropy: 0.9886994082884974, Tuple{Int64,Int64}[(2, 9), (3, 7)]
*** center 5: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 11]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 16, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5194383569061756] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5194383569061756, 0.4138169380277395] ***
*** starting iteration: 2; err: [Inf, 0.5194383569061756, 0.4138169380277395] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5194383569061756, 0.4138169380277395, 0.3811918190866709] ***
*** starting iteration: 3; err: [Inf, 0.5194383569061756, 0.4138169380277395, 0.3811918190866709] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5194383569061756, 0.4138169380277395, 0.3811918190866709, 0.36944035239517686] ***
*** starting iteration: 4; err: [Inf, 0.5194383569061756, 0.4138169380277395, 0.3811918190866709, 0.36944035239517686] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5194383569061756, 0.4138169380277395, 0.3811918190866709, 0.36944035239517686, 0.3582549272477627] ***
*** starting iteration: 5; err: [Inf, 0.5194383569061756, 0.4138169380277395, 0.3811918190866709, 0.36944035239517686, 0.3582549272477627] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5194383569061756, 0.4138169380277395, 0.3811918190866709, 0.36944035239517686, 0.3582549272477627, 0.35403218820691107] ***
*** starting iteration: 6; err: [Inf, 0.5194383569061756, 0.4138169380277395, 0.3811918190866709, 0.36944035239517686, 0.3582549272477627, 0.35403218820691107] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5194383569061756, 0.4138169380277395, 0.3811918190866709, 0.36944035239517686, 0.3582549272477627, 0.35403218820691107, 0.35313763573765755] ***
*** finished computation of 7 references, err: [Inf, 0.5194383569061756, 0.4138169380277395, 0.3811918190866709, 0.36944035239517686, 0.3582549272477627, 0.35403218820691107, 0.35313763573765755] ***
*** center 1: selecting labels [1] (freq >= 1) [from [12, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 5]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 9, 1]]
** centroid: 3, normalized-entropy: 0.46899559358928133, Tuple{Int64,Int64}[(2, 9), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 22, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 4, 10]]
** centroid: 5, normalized-entropy: 0.8631205685666311, Tuple{Int64,Int64}[(2, 4), (3, 10)]
*** center 6: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 2, 17]]
** centroid: 7, normalized-entropy: 0.48546076074591343, Tuple{Int64,Int64}[(2, 2), (3, 17)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5914321267604827] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5914321267604827, 0.455440267175436] ***
*** starting iteration: 2; err: [Inf, 0.5914321267604827, 0.455440267175436] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5914321267604827, 0.455440267175436, 0.43911066189408304] ***
*** starting iteration: 3; err: [Inf, 0.5914321267604827, 0.455440267175436, 0.43911066189408304] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5914321267604827, 0.455440267175436, 0.43911066189408304, 0.4262260860204697] ***
*** starting iteration: 4; err: [Inf, 0.5914321267604827, 0.455440267175436, 0.43911066189408304, 0.4262260860204697] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5914321267604827, 0.455440267175436, 0.43911066189408304, 0.4262260860204697, 0.42275745324790476] ***
*** starting iteration: 5; err: [Inf, 0.5914321267604827, 0.455440267175436, 0.43911066189408304, 0.4262260860204697, 0.42275745324790476] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5914321267604827, 0.455440267175436, 0.43911066189408304, 0.4262260860204697, 0.42275745324790476, 0.4037283594161272] ***
*** starting iteration: 6; err: [Inf, 0.5914321267604827, 0.455440267175436, 0.43911066189408304, 0.4262260860204697, 0.42275745324790476, 0.4037283594161272] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5914321267604827, 0.455440267175436, 0.43911066189408304, 0.4262260860204697, 0.42275745324790476, 0.4037283594161272, 0.3944625751674175] ***
*** starting iteration: 7; err: [Inf, 0.5914321267604827, 0.455440267175436, 0.43911066189408304, 0.4262260860204697, 0.42275745324790476, 0.4037283594161272, 0.3944625751674175] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5914321267604827, 0.455440267175436, 0.43911066189408304, 0.4262260860204697, 0.42275745324790476, 0.4037283594161272, 0.3944625751674175, 0.3933078096807003] ***
*** starting iteration: 8; err: [Inf, 0.5914321267604827, 0.455440267175436, 0.43911066189408304, 0.4262260860204697, 0.42275745324790476, 0.4037283594161272, 0.3944625751674175, 0.3933078096807003] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5914321267604827, 0.455440267175436, 0.43911066189408304, 0.4262260860204697, 0.42275745324790476, 0.4037283594161272, 0.3944625751674175, 0.3933078096807003, 0.39249067544937133] ***
*** finished computation of 7 references, err: [Inf, 0.5914321267604827, 0.455440267175436, 0.43911066189408304, 0.4262260860204697, 0.42275745324790476, 0.4037283594161272, 0.3944625751674175, 0.3933078096807003, 0.39249067544937133] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 13, 1]]
** centroid: 1, normalized-entropy: 0.3712323266408756, Tuple{Int64,Int64}[(2, 13), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 4: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 6: selecting labels [1] (freq >= 1) [from [1, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 19, 9]]
** centroid: 7, normalized-entropy: 0.9059282160429994, Tuple{Int64,Int64}[(2, 19), (3, 9)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5640348140895367] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5640348140895367, 0.39454118482768535] ***
*** starting iteration: 2; err: [Inf, 0.5640348140895367, 0.39454118482768535] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5640348140895367, 0.39454118482768535, 0.3734226804971695] ***
*** starting iteration: 3; err: [Inf, 0.5640348140895367, 0.39454118482768535, 0.3734226804971695] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5640348140895367, 0.39454118482768535, 0.3734226804971695, 0.362343737334013] ***
*** starting iteration: 4; err: [Inf, 0.5640348140895367, 0.39454118482768535, 0.3734226804971695, 0.362343737334013] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5640348140895367, 0.39454118482768535, 0.3734226804971695, 0.362343737334013, 0.35972354233264925] ***
*** starting iteration: 5; err: [Inf, 0.5640348140895367, 0.39454118482768535, 0.3734226804971695, 0.362343737334013, 0.35972354233264925] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5640348140895367, 0.39454118482768535, 0.3734226804971695, 0.362343737334013, 0.35972354233264925, 0.3590498486161232] ***
*** finished computation of 7 references, err: [Inf, 0.5640348140895367, 0.39454118482768535, 0.3734226804971695, 0.362343737334013, 0.35972354233264925, 0.3590498486161232] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 11, 8]]
** centroid: 1, normalized-entropy: 0.9819407868640977, Tuple{Int64,Int64}[(2, 11), (3, 8)]
*** center 2: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 2, 15]]
** centroid: 3, normalized-entropy: 0.5225593745369407, Tuple{Int64,Int64}[(2, 2), (3, 15)]
*** center 4: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
*** center 7: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.9553512975573539] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.9553512975573539, 0.39643992587924004] ***
*** starting iteration: 2; err: [Inf, 0.9553512975573539, 0.39643992587924004] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.9553512975573539, 0.39643992587924004, 0.37050417765974997] ***
*** starting iteration: 3; err: [Inf, 0.9553512975573539, 0.39643992587924004, 0.37050417765974997] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.9553512975573539, 0.39643992587924004, 0.37050417765974997, 0.36638683050870896] ***
*** starting iteration: 4; err: [Inf, 0.9553512975573539, 0.39643992587924004, 0.37050417765974997, 0.36638683050870896] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.9553512975573539, 0.39643992587924004, 0.37050417765974997, 0.36638683050870896, 0.3651308171451092] ***
*** starting iteration: 5; err: [Inf, 0.9553512975573539, 0.39643992587924004, 0.37050417765974997, 0.36638683050870896, 0.3651308171451092] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.9553512975573539, 0.39643992587924004, 0.37050417765974997, 0.36638683050870896, 0.3651308171451092, 0.36427733682096003] ***
*** finished computation of 7 references, err: [Inf, 0.9553512975573539, 0.39643992587924004, 0.37050417765974997, 0.36638683050870896, 0.3651308171451092, 0.36427733682096003] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 1, 10]]
** centroid: 1, normalized-entropy: 0.43949698692151346, Tuple{Int64,Int64}[(2, 1), (3, 10)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 17, 1]]
** centroid: 2, normalized-entropy: 0.3095434291503252, Tuple{Int64,Int64}[(2, 17), (3, 1)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 6, 8]]
** centroid: 3, normalized-entropy: 0.9852281360342514, Tuple{Int64,Int64}[(2, 6), (3, 8)]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 5]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [30, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5572562117129565] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5572562117129565, 0.47905780404806136] ***
*** starting iteration: 2; err: [Inf, 0.5572562117129565, 0.47905780404806136] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5572562117129565, 0.47905780404806136, 0.457491482719779] ***
*** starting iteration: 3; err: [Inf, 0.5572562117129565, 0.47905780404806136, 0.457491482719779] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5572562117129565, 0.47905780404806136, 0.457491482719779, 0.4266616249084473] ***
*** starting iteration: 4; err: [Inf, 0.5572562117129565, 0.47905780404806136, 0.457491482719779, 0.4266616249084473] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5572562117129565, 0.47905780404806136, 0.457491482719779, 0.4266616249084473, 0.42129224956035616] ***
*** starting iteration: 5; err: [Inf, 0.5572562117129565, 0.47905780404806136, 0.457491482719779, 0.4266616249084473, 0.42129224956035616] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5572562117129565, 0.47905780404806136, 0.457491482719779, 0.4266616249084473, 0.42129224956035616, 0.4203249588608742] ***
*** finished computation of 7 references, err: [Inf, 0.5572562117129565, 0.47905780404806136, 0.457491482719779, 0.4266616249084473, 0.42129224956035616, 0.4203249588608742] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 7, 21]]
** centroid: 1, normalized-entropy: 0.8112781244591328, Tuple{Int64,Int64}[(2, 7), (3, 21)]
*** center 2: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 11]]
*** center 6: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 21, 2]]
** centroid: 7, normalized-entropy: 0.42622865699814483, Tuple{Int64,Int64}[(2, 21), (3, 2)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4650656748563051] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4650656748563051, 0.36254283763468265] ***
*** starting iteration: 2; err: [Inf, 0.4650656748563051, 0.36254283763468265] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4650656748563051, 0.36254283763468265, 0.35578700944781305] ***
*** starting iteration: 3; err: [Inf, 0.4650656748563051, 0.36254283763468265, 0.35578700944781305] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4650656748563051, 0.36254283763468265, 0.35578700944781305, 0.3556560713797808] ***
*** finished computation of 7 references, err: [Inf, 0.4650656748563051, 0.36254283763468265, 0.35578700944781305, 0.3556560713797808] ***
*** center 1: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 6: selecting labels [1] (freq >= 1) [from [6, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 11, 8]]
** centroid: 7, normalized-entropy: 0.9819407868640977, Tuple{Int64,Int64}[(2, 11), (3, 8)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7652349339425564] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7652349339425564, 0.5938263159245253] ***
*** finished computation of 3 references, err: [Inf, 0.7652349339425564, 0.5938263159245253] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 31, 18]]
** centroid: 1, normalized-entropy: 0.9486131982385807, Tuple{Int64,Int64}[(2, 31), (3, 18)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [34, 1, 0]]
** centroid: 2, normalized-entropy: 0.18717625687320805, Tuple{Int64,Int64}[(1, 34), (2, 1)]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8947518593072892] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8947518593072892, 0.5653546859696508] ***
*** finished computation of 3 references, err: [Inf, 0.8947518593072892, 0.5653546859696508] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 31, 10]]
** centroid: 1, normalized-entropy: 0.8014698931335286, Tuple{Int64,Int64}[(2, 31), (3, 10)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 23]]
*** center 3: selecting labels [1] (freq >= 1) [from [36, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9161066459864378] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9161066459864378, 0.5284484174847602] ***
*** starting iteration: 2; err: [Inf, 0.9161066459864378, 0.5284484174847602] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9161066459864378, 0.5284484174847602, 0.5065616948157549] ***
*** starting iteration: 3; err: [Inf, 0.9161066459864378, 0.5284484174847602, 0.5065616948157549] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9161066459864378, 0.5284484174847602, 0.5065616948157549, 0.5011759721487761] ***
*** starting iteration: 4; err: [Inf, 0.9161066459864378, 0.5284484174847602, 0.5065616948157549, 0.5011759721487761] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9161066459864378, 0.5284484174847602, 0.5065616948157549, 0.5011759721487761, 0.4994231735914946] ***
*** starting iteration: 5; err: [Inf, 0.9161066459864378, 0.5284484174847602, 0.5065616948157549, 0.5011759721487761, 0.4994231735914946] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9161066459864378, 0.5284484174847602, 0.5065616948157549, 0.5011759721487761, 0.4994231735914946, 0.4994231735914946] ***
*** finished computation of 3 references, err: [Inf, 0.9161066459864378, 0.5284484174847602, 0.5065616948157549, 0.5011759721487761, 0.4994231735914946, 0.4994231735914946] ***
*** center 1: selecting labels [1] (freq >= 2) [from [30, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 2, 25]]
** centroid: 2, normalized-entropy: 0.38094658570539014, Tuple{Int64,Int64}[(2, 2), (3, 25)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 35, 8]]
** centroid: 3, normalized-entropy: 0.6931274153282881, Tuple{Int64,Int64}[(2, 35), (3, 8)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9690660019218922] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9690660019218922, 0.5724502092599869] ***
*** starting iteration: 2; err: [Inf, 0.9690660019218922, 0.5724502092599869] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9690660019218922, 0.5724502092599869, 0.5680494243651628] ***
*** starting iteration: 3; err: [Inf, 0.9690660019218922, 0.5724502092599869, 0.5680494243651628] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9690660019218922, 0.5724502092599869, 0.5680494243651628, 0.5690978622436523] ***
*** finished computation of 3 references, err: [Inf, 0.9690660019218922, 0.5724502092599869, 0.5680494243651628, 0.5690978622436523] ***
*** center 1: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 24]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 32, 10]]
** centroid: 3, normalized-entropy: 0.7918583525674836, Tuple{Int64,Int64}[(2, 32), (3, 10)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8572187741100789] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8572187741100789, 0.5457825931534172] ***
*** starting iteration: 2; err: [Inf, 0.8572187741100789, 0.5457825931534172] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8572187741100789, 0.5457825931534172, 0.5441819184646011] ***
*** starting iteration: 3; err: [Inf, 0.8572187741100789, 0.5457825931534172, 0.5441819184646011] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8572187741100789, 0.5457825931534172, 0.5441819184646011, 0.5427774305269122] ***
*** starting iteration: 4; err: [Inf, 0.8572187741100789, 0.5457825931534172, 0.5441819184646011, 0.5427774305269122] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8572187741100789, 0.5457825931534172, 0.5441819184646011, 0.5427774305269122, 0.5424259154871106] ***
*** finished computation of 3 references, err: [Inf, 0.8572187741100789, 0.5457825931534172, 0.5441819184646011, 0.5427774305269122, 0.5424259154871106] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 4, 28]]
** centroid: 1, normalized-entropy: 0.5435644431995963, Tuple{Int64,Int64}[(2, 4), (3, 28)]
*** center 2: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 27, 5]]
** centroid: 3, normalized-entropy: 0.625262405223423, Tuple{Int64,Int64}[(2, 27), (3, 5)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.7397558537125587] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7397558537125587, 0.5423149327933788] ***
*** finished computation of 3 references, err: [Inf, 0.7397558537125587, 0.5423149327933788] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 37, 13]]
** centroid: 1, normalized-entropy: 0.8267463724926181, Tuple{Int64,Int64}[(2, 37), (3, 13)]
*** center 2: selecting labels [1] (freq >= 1) [from [30, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.7721791777014733] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7721791777014733, 0.5916227654367685] ***
*** finished computation of 3 references, err: [Inf, 0.7721791777014733, 0.5916227654367685] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 31, 18]]
** centroid: 1, normalized-entropy: 0.9486131982385807, Tuple{Int64,Int64}[(2, 31), (3, 18)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [34, 1, 0]]
** centroid: 2, normalized-entropy: 0.18717625687320805, Tuple{Int64,Int64}[(1, 34), (2, 1)]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8385630078613758] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8385630078613758, 0.5598082245513797] ***
*** finished computation of 3 references, err: [Inf, 0.8385630078613758, 0.5598082245513797] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 24]]
*** center 2: selecting labels [1] (freq >= 1) [from [36, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 31, 9]]
** centroid: 3, normalized-entropy: 0.7691928290130138, Tuple{Int64,Int64}[(2, 31), (3, 9)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.48944973707199096] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.48944973707199096, 0.4014904825761914] ***
*** starting iteration: 2; err: [Inf, 0.48944973707199096, 0.4014904825761914] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.48944973707199096, 0.4014904825761914, 0.38982400692999364] ***
*** starting iteration: 3; err: [Inf, 0.48944973707199096, 0.4014904825761914, 0.38982400692999364] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.48944973707199096, 0.4014904825761914, 0.38982400692999364, 0.38777829967439176] ***
*** finished computation of 7 references, err: [Inf, 0.48944973707199096, 0.4014904825761914, 0.38982400692999364, 0.38777829967439176] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 22, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 5]]
*** center 3: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [6, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 9, 20]]
** centroid: 5, normalized-entropy: 0.8935711016541908, Tuple{Int64,Int64}[(2, 9), (3, 20)]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 7: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
finished with 7 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 16)
[0.9666666666666667, 0.96, 0.96, 0.9466666666666667, 0.9466666666666667, 0.9466666666666667, 0.9466666666666667, 0.9333333333333332, 0.9266666666666666, 0.9266666666666666, 0.9133333333333332, 0.9133333333333332, 0.9066666666666667, 0.9, 0.8866666666666667, 0.8666666666666667]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :rand, 0.9, 2) => 0.9666666666666667
finished with 16
iteration 2 finished
generating 4 configurations using top 4 configurations, starting with 16)
[0.9666666666666667, 0.96, 0.96, 0.9466666666666667, 0.9466666666666667, 0.9466666666666667, 0.9466666666666667, 0.9333333333333332, 0.9266666666666666, 0.9266666666666666, 0.9133333333333332, 0.9133333333333332, 0.9066666666666667, 0.9, 0.8866666666666667, 0.8666666666666667]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :rand, 0.9, 2) => 0.9666666666666667
finished with 18
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.5467321173846722] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5467321173846722, 0.4524126976728439] ***
*** starting iteration: 2; err: [Inf, 0.5467321173846722, 0.4524126976728439] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5467321173846722, 0.4524126976728439, 0.45072179064154627] ***
*** starting iteration: 3; err: [Inf, 0.5467321173846722, 0.4524126976728439, 0.45072179064154627] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5467321173846722, 0.4524126976728439, 0.45072179064154627, 0.4517580817639828] ***
*** finished computation of 7 references, err: [Inf, 0.5467321173846722, 0.4524126976728439, 0.45072179064154627, 0.4517580817639828] ***
*** center 1: selecting labels [1] (freq >= 2) [from [29, 0, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 18, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 2, 9]]
** centroid: 3, normalized-entropy: 0.6840384356390419, Tuple{Int64,Int64}[(2, 2), (3, 9)]
*** center 4: ignoring all elements because minimum-frequency restrictions were not met, freq >= 2, freqs: [1, 0, 0]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 2, 11]]
** centroid: 5, normalized-entropy: 0.6193821946787638, Tuple{Int64,Int64}[(2, 2), (3, 11)]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 13]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 15, 0]]
finished with 6 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7007225857675076] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7007225857675076, 0.5540161547064781] ***
*** starting iteration: 2; err: [Inf, 0.7007225857675076, 0.5540161547064781] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7007225857675076, 0.5540161547064781, 0.5216408176720142] ***
*** starting iteration: 3; err: [Inf, 0.7007225857675076, 0.5540161547064781, 0.5216408176720142] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7007225857675076, 0.5540161547064781, 0.5216408176720142, 0.5155268481373787] ***
*** starting iteration: 4; err: [Inf, 0.7007225857675076, 0.5540161547064781, 0.5216408176720142, 0.5155268481373787] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7007225857675076, 0.5540161547064781, 0.5216408176720142, 0.5155268481373787, 0.5040291424095631] ***
*** starting iteration: 5; err: [Inf, 0.7007225857675076, 0.5540161547064781, 0.5216408176720142, 0.5155268481373787, 0.5040291424095631] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7007225857675076, 0.5540161547064781, 0.5216408176720142, 0.5155268481373787, 0.5040291424095631, 0.5012085825949907] ***
*** starting iteration: 6; err: [Inf, 0.7007225857675076, 0.5540161547064781, 0.5216408176720142, 0.5155268481373787, 0.5040291424095631, 0.5012085825949907] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7007225857675076, 0.5540161547064781, 0.5216408176720142, 0.5155268481373787, 0.5040291424095631, 0.5012085825949907, 0.4969549059122801] ***
*** starting iteration: 7; err: [Inf, 0.7007225857675076, 0.5540161547064781, 0.5216408176720142, 0.5155268481373787, 0.5040291424095631, 0.5012085825949907, 0.4969549059122801] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7007225857675076, 0.5540161547064781, 0.5216408176720142, 0.5155268481373787, 0.5040291424095631, 0.5012085825949907, 0.4969549059122801, 0.49250092707574367] ***
*** starting iteration: 8; err: [Inf, 0.7007225857675076, 0.5540161547064781, 0.5216408176720142, 0.5155268481373787, 0.5040291424095631, 0.5012085825949907, 0.4969549059122801, 0.49250092707574367] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7007225857675076, 0.5540161547064781, 0.5216408176720142, 0.5155268481373787, 0.5040291424095631, 0.5012085825949907, 0.4969549059122801, 0.49250092707574367, 0.4914918463677168] ***
*** starting iteration: 9; err: [Inf, 0.7007225857675076, 0.5540161547064781, 0.5216408176720142, 0.5155268481373787, 0.5040291424095631, 0.5012085825949907, 0.4969549059122801, 0.49250092707574367, 0.4914918463677168] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7007225857675076, 0.5540161547064781, 0.5216408176720142, 0.5155268481373787, 0.5040291424095631, 0.5012085825949907, 0.4969549059122801, 0.49250092707574367, 0.4914918463677168, 0.4914918463677168] ***
*** finished computation of 7 references, err: [Inf, 0.7007225857675076, 0.5540161547064781, 0.5216408176720142, 0.5155268481373787, 0.5040291424095631, 0.5012085825949907, 0.4969549059122801, 0.49250092707574367, 0.4914918463677168, 0.4914918463677168] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 17, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 1, 6]]
*** center 3: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 2, 5]]
** centroid: 4, normalized-entropy: 0.8631205685666311, Tuple{Int64,Int64}[(2, 2), (3, 5)]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 9]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 12, 0]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 14]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6553419806063175] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6553419806063175, 0.4982724469155073] ***
*** starting iteration: 2; err: [Inf, 0.6553419806063175, 0.4982724469155073] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6553419806063175, 0.4982724469155073, 0.45980799935758115] ***
*** starting iteration: 3; err: [Inf, 0.6553419806063175, 0.4982724469155073, 0.45980799935758115] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6553419806063175, 0.4982724469155073, 0.45980799935758115, 0.445174133554101] ***
*** starting iteration: 4; err: [Inf, 0.6553419806063175, 0.4982724469155073, 0.45980799935758115, 0.445174133554101] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6553419806063175, 0.4982724469155073, 0.45980799935758115, 0.445174133554101, 0.4454503574222326] ***
*** finished computation of 7 references, err: [Inf, 0.6553419806063175, 0.4982724469155073, 0.45980799935758115, 0.445174133554101, 0.4454503574222326] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 20, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 11, 8]]
** centroid: 2, normalized-entropy: 0.9819407868640977, Tuple{Int64,Int64}[(2, 11), (3, 8)]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 6]]
*** center 4: selecting labels [1] (freq >= 2) [from [16, 0, 0]]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 9]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 10]]
*** center 7: selecting labels [1] (freq >= 2) [from [20, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.45826943442225454] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.45826943442225454, 0.3780280604958534] ***
*** starting iteration: 2; err: [Inf, 0.45826943442225454, 0.3780280604958534] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.45826943442225454, 0.3780280604958534, 0.3605666441470385] ***
*** starting iteration: 3; err: [Inf, 0.45826943442225454, 0.3780280604958534, 0.3605666441470385] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.45826943442225454, 0.3780280604958534, 0.3605666441470385, 0.35738272711634633] ***
*** starting iteration: 4; err: [Inf, 0.45826943442225454, 0.3780280604958534, 0.3605666441470385, 0.35738272711634633] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.45826943442225454, 0.3780280604958534, 0.3605666441470385, 0.35738272711634633, 0.35692875042557715] ***
*** finished computation of 7 references, err: [Inf, 0.45826943442225454, 0.3780280604958534, 0.3605666441470385, 0.35738272711634633, 0.35692875042557715] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 11]]
*** center 2: selecting labels [1] (freq >= 2) [from [17, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 3, 10]]
** centroid: 3, normalized-entropy: 0.7793498372920851, Tuple{Int64,Int64}[(2, 3), (3, 10)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 15, 6]]
** centroid: 4, normalized-entropy: 0.8631205685666311, Tuple{Int64,Int64}[(2, 15), (3, 6)]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 5]]
*** center 6: selecting labels [1] (freq >= 2) [from [13, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 19, 1]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6793958650529385] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6793958650529385, 0.42563828215003013] ***
*** starting iteration: 2; err: [Inf, 0.6793958650529385, 0.42563828215003013] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6793958650529385, 0.42563828215003013, 0.40138710252940657] ***
*** starting iteration: 3; err: [Inf, 0.6793958650529385, 0.42563828215003013, 0.40138710252940657] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6793958650529385, 0.42563828215003013, 0.40138710252940657, 0.3984471471607685] ***
*** starting iteration: 4; err: [Inf, 0.6793958650529385, 0.42563828215003013, 0.40138710252940657, 0.3984471471607685] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6793958650529385, 0.42563828215003013, 0.40138710252940657, 0.3984471471607685, 0.3980612221360207] ***
*** finished computation of 7 references, err: [Inf, 0.6793958650529385, 0.42563828215003013, 0.40138710252940657, 0.3984471471607685, 0.3980612221360207] ***
*** center 1: selecting labels [1] (freq >= 2) [from [19, 0, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 12, 1]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 17, 4]]
** centroid: 3, normalized-entropy: 0.7024665512903904, Tuple{Int64,Int64}[(2, 17), (3, 4)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 2, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [15, 0, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 11]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 1, 18]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5665685492753982] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5665685492753982, 0.4123132637515664] ***
*** starting iteration: 2; err: [Inf, 0.5665685492753982, 0.4123132637515664] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5665685492753982, 0.4123132637515664, 0.3972729655727744] ***
*** starting iteration: 3; err: [Inf, 0.5665685492753982, 0.4123132637515664, 0.3972729655727744] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5665685492753982, 0.4123132637515664, 0.3972729655727744, 0.39319095682352784] ***
*** starting iteration: 4; err: [Inf, 0.5665685492753982, 0.4123132637515664, 0.3972729655727744, 0.39319095682352784] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5665685492753982, 0.4123132637515664, 0.3972729655727744, 0.39319095682352784, 0.3911759614571929] ***
*** starting iteration: 5; err: [Inf, 0.5665685492753982, 0.4123132637515664, 0.3972729655727744, 0.39319095682352784, 0.3911759614571929] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5665685492753982, 0.4123132637515664, 0.3972729655727744, 0.39319095682352784, 0.3911759614571929, 0.38749238308519124] ***
*** starting iteration: 6; err: [Inf, 0.5665685492753982, 0.4123132637515664, 0.3972729655727744, 0.39319095682352784, 0.3911759614571929, 0.38749238308519124] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5665685492753982, 0.4123132637515664, 0.3972729655727744, 0.39319095682352784, 0.3911759614571929, 0.38749238308519124, 0.38462312903255225] ***
*** starting iteration: 7; err: [Inf, 0.5665685492753982, 0.4123132637515664, 0.3972729655727744, 0.39319095682352784, 0.3911759614571929, 0.38749238308519124, 0.38462312903255225] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5665685492753982, 0.4123132637515664, 0.3972729655727744, 0.39319095682352784, 0.3911759614571929, 0.38749238308519124, 0.38462312903255225, 0.3792932422086597] ***
*** starting iteration: 8; err: [Inf, 0.5665685492753982, 0.4123132637515664, 0.3972729655727744, 0.39319095682352784, 0.3911759614571929, 0.38749238308519124, 0.38462312903255225, 0.3792932422086597] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5665685492753982, 0.4123132637515664, 0.3972729655727744, 0.39319095682352784, 0.3911759614571929, 0.38749238308519124, 0.38462312903255225, 0.3792932422086597, 0.3771741884574294] ***
*** starting iteration: 9; err: [Inf, 0.5665685492753982, 0.4123132637515664, 0.3972729655727744, 0.39319095682352784, 0.3911759614571929, 0.38749238308519124, 0.38462312903255225, 0.3792932422086597, 0.3771741884574294] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5665685492753982, 0.4123132637515664, 0.3972729655727744, 0.39319095682352784, 0.3911759614571929, 0.38749238308519124, 0.38462312903255225, 0.3792932422086597, 0.3771741884574294, 0.37607166286557914] ***
*** starting iteration: 10; err: [Inf, 0.5665685492753982, 0.4123132637515664, 0.3972729655727744, 0.39319095682352784, 0.3911759614571929, 0.38749238308519124, 0.38462312903255225, 0.3792932422086597, 0.3771741884574294, 0.37607166286557914] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5665685492753982, 0.4123132637515664, 0.3972729655727744, 0.39319095682352784, 0.3911759614571929, 0.38749238308519124, 0.38462312903255225, 0.3792932422086597, 0.3771741884574294, 0.37607166286557914, 0.37607166286557914] ***
*** finished computation of 7 references, err: [Inf, 0.5665685492753982, 0.4123132637515664, 0.3972729655727744, 0.39319095682352784, 0.3911759614571929, 0.38749238308519124, 0.38462312903255225, 0.3792932422086597, 0.3771741884574294, 0.37607166286557914, 0.37607166286557914] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 10]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 3, 9]]
** centroid: 2, normalized-entropy: 0.8112781244591328, Tuple{Int64,Int64}[(2, 3), (3, 9)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 11, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 7, 0]]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 14]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 10, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
finished with 7 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 18)
[0.9666666666666667, 0.96, 0.96, 0.9466666666666667, 0.9466666666666667, 0.9466666666666667, 0.9466666666666667, 0.94, 0.9333333333333332, 0.9266666666666666, 0.9266666666666666, 0.9266666666666666, 0.9133333333333332, 0.9133333333333332, 0.9066666666666667, 0.9, 0.8866666666666667, 0.8666666666666667]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :rand, 0.9, 2) => 0.9666666666666667
finished with 19
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.5678633347898722] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5678633347898722, 0.45893797047436236] ***
*** starting iteration: 2; err: [Inf, 0.5678633347898722, 0.45893797047436236] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5678633347898722, 0.45893797047436236, 0.45199023835361] ***
*** starting iteration: 3; err: [Inf, 0.5678633347898722, 0.45893797047436236, 0.45199023835361] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5678633347898722, 0.45893797047436236, 0.45199023835361, 0.4459365150984377] ***
*** starting iteration: 4; err: [Inf, 0.5678633347898722, 0.45893797047436236, 0.45199023835361, 0.4459365150984377] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5678633347898722, 0.45893797047436236, 0.45199023835361, 0.4459365150984377, 0.44508643745444715] ***
*** finished computation of 7 references, err: [Inf, 0.5678633347898722, 0.45893797047436236, 0.45199023835361, 0.4459365150984377, 0.44508643745444715] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 4, 28]]
** centroid: 1, normalized-entropy: 0.5435644431995963, Tuple{Int64,Int64}[(2, 4), (3, 28)]
*** center 2: selecting labels [1] (freq >= 1) [from [9, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [1, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 33, 5]]
** centroid: 5, normalized-entropy: 0.5617526078313283, Tuple{Int64,Int64}[(2, 33), (3, 5)]
*** center 6: selecting labels [1] (freq >= 1) [from [6, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.64369020357728] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.64369020357728, 0.5099760266020894] ***
*** starting iteration: 2; err: [Inf, 0.64369020357728, 0.5099760266020894] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.64369020357728, 0.5099760266020894, 0.4618875974416733] ***
*** starting iteration: 3; err: [Inf, 0.64369020357728, 0.5099760266020894, 0.4618875974416733] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.64369020357728, 0.5099760266020894, 0.4618875974416733, 0.44748890995979307] ***
*** starting iteration: 4; err: [Inf, 0.64369020357728, 0.5099760266020894, 0.4618875974416733, 0.44748890995979307] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.64369020357728, 0.5099760266020894, 0.4618875974416733, 0.44748890995979307, 0.4375712180137634] ***
*** starting iteration: 5; err: [Inf, 0.64369020357728, 0.5099760266020894, 0.4618875974416733, 0.44748890995979307, 0.4375712180137634] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.64369020357728, 0.5099760266020894, 0.4618875974416733, 0.44748890995979307, 0.4375712180137634, 0.42112589702010156] ***
*** starting iteration: 6; err: [Inf, 0.64369020357728, 0.5099760266020894, 0.4618875974416733, 0.44748890995979307, 0.4375712180137634, 0.42112589702010156] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.64369020357728, 0.5099760266020894, 0.4618875974416733, 0.44748890995979307, 0.4375712180137634, 0.42112589702010156, 0.41649104565382006] ***
*** starting iteration: 7; err: [Inf, 0.64369020357728, 0.5099760266020894, 0.4618875974416733, 0.44748890995979307, 0.4375712180137634, 0.42112589702010156, 0.41649104565382006] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.64369020357728, 0.5099760266020894, 0.4618875974416733, 0.44748890995979307, 0.4375712180137634, 0.42112589702010156, 0.41649104565382006, 0.41668171659111974] ***
*** finished computation of 7 references, err: [Inf, 0.64369020357728, 0.5099760266020894, 0.4618875974416733, 0.44748890995979307, 0.4375712180137634, 0.42112589702010156, 0.41649104565382006, 0.41668171659111974] ***
*** center 1: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [12, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 19, 12]]
** centroid: 3, normalized-entropy: 0.9629004147713269, Tuple{Int64,Int64}[(2, 19), (3, 12)]
*** center 4: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [1] (freq >= 1) [from [5, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 13, 1]]
** centroid: 7, normalized-entropy: 0.3712323266408756, Tuple{Int64,Int64}[(2, 13), (3, 1)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5152512514591217] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5152512514591217, 0.4056492917239666] ***
*** starting iteration: 2; err: [Inf, 0.5152512514591217, 0.4056492917239666] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5152512514591217, 0.4056492917239666, 0.392222909219563] ***
*** starting iteration: 3; err: [Inf, 0.5152512514591217, 0.4056492917239666, 0.392222909219563] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5152512514591217, 0.4056492917239666, 0.392222909219563, 0.38576938420534135] ***
*** starting iteration: 4; err: [Inf, 0.5152512514591217, 0.4056492917239666, 0.392222909219563, 0.38576938420534135] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5152512514591217, 0.4056492917239666, 0.392222909219563, 0.38576938420534135, 0.38147442176938057] ***
*** starting iteration: 5; err: [Inf, 0.5152512514591217, 0.4056492917239666, 0.392222909219563, 0.38576938420534135, 0.38147442176938057] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5152512514591217, 0.4056492917239666, 0.392222909219563, 0.38576938420534135, 0.38147442176938057, 0.3773803149163723] ***
*** starting iteration: 6; err: [Inf, 0.5152512514591217, 0.4056492917239666, 0.392222909219563, 0.38576938420534135, 0.38147442176938057, 0.3773803149163723] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5152512514591217, 0.4056492917239666, 0.392222909219563, 0.38576938420534135, 0.38147442176938057, 0.3773803149163723, 0.3736526507884264] ***
*** starting iteration: 7; err: [Inf, 0.5152512514591217, 0.4056492917239666, 0.392222909219563, 0.38576938420534135, 0.38147442176938057, 0.3773803149163723, 0.3736526507884264] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5152512514591217, 0.4056492917239666, 0.392222909219563, 0.38576938420534135, 0.38147442176938057, 0.3773803149163723, 0.3736526507884264, 0.3704583527892828] ***
*** starting iteration: 8; err: [Inf, 0.5152512514591217, 0.4056492917239666, 0.392222909219563, 0.38576938420534135, 0.38147442176938057, 0.3773803149163723, 0.3736526507884264, 0.3704583527892828] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5152512514591217, 0.4056492917239666, 0.392222909219563, 0.38576938420534135, 0.38147442176938057, 0.3773803149163723, 0.3736526507884264, 0.3704583527892828, 0.3663006244599819] ***
*** starting iteration: 9; err: [Inf, 0.5152512514591217, 0.4056492917239666, 0.392222909219563, 0.38576938420534135, 0.38147442176938057, 0.3773803149163723, 0.3736526507884264, 0.3704583527892828, 0.3663006244599819] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5152512514591217, 0.4056492917239666, 0.392222909219563, 0.38576938420534135, 0.38147442176938057, 0.3773803149163723, 0.3736526507884264, 0.3704583527892828, 0.3663006244599819, 0.3621637491881847] ***
*** starting iteration: 10; err: [Inf, 0.5152512514591217, 0.4056492917239666, 0.392222909219563, 0.38576938420534135, 0.38147442176938057, 0.3773803149163723, 0.3736526507884264, 0.3704583527892828, 0.3663006244599819, 0.3621637491881847] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5152512514591217, 0.4056492917239666, 0.392222909219563, 0.38576938420534135, 0.38147442176938057, 0.3773803149163723, 0.3736526507884264, 0.3704583527892828, 0.3663006244599819, 0.3621637491881847, 0.35862906858325005] ***
*** finished computation of 7 references, err: [Inf, 0.5152512514591217, 0.4056492917239666, 0.392222909219563, 0.38576938420534135, 0.38147442176938057, 0.3773803149163723, 0.3736526507884264, 0.3704583527892828, 0.3663006244599819, 0.3621637491881847, 0.35862906858325005] ***
*** center 1: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 15]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 11, 8]]
** centroid: 5, normalized-entropy: 0.9819407868640977, Tuple{Int64,Int64}[(2, 11), (3, 8)]
*** center 6: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
finished with 8 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 19)
[0.9666666666666667, 0.96, 0.96, 0.9466666666666667, 0.9466666666666667, 0.9466666666666667, 0.9466666666666667, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9266666666666666, 0.9266666666666666, 0.9266666666666666, 0.9133333333333332, 0.9133333333333332, 0.9066666666666667, 0.9, 0.8866666666666667, 0.8666666666666667]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :rand, 0.9, 2) => 0.9666666666666667
finished with 19
iteration 5 finished
generating 4 configurations using top 4 configurations, starting with 19)
[0.9666666666666667, 0.96, 0.96, 0.9466666666666667, 0.9466666666666667, 0.9466666666666667, 0.9466666666666667, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9266666666666666, 0.9266666666666666, 0.9266666666666666, 0.9133333333333332, 0.9133333333333332, 0.9066666666666667, 0.9, 0.8866666666666667, 0.8666666666666667]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :rand, 0.9, 2) => 0.9666666666666667
finished with 20
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.7847698675096035] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7847698675096035, 0.47718204170465467] ***
*** starting iteration: 2; err: [Inf, 0.7847698675096035, 0.47718204170465467] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7847698675096035, 0.47718204170465467, 0.4639773173630238] ***
*** starting iteration: 3; err: [Inf, 0.7847698675096035, 0.47718204170465467, 0.4639773173630238] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7847698675096035, 0.47718204170465467, 0.4639773173630238, 0.46099156856536866] ***
*** finished computation of 7 references, err: [Inf, 0.7847698675096035, 0.47718204170465467, 0.4639773173630238, 0.46099156856536866] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 18, 9]]
** centroid: 1, normalized-entropy: 0.9182958340544894, Tuple{Int64,Int64}[(2, 18), (3, 9)]
*** center 2: selecting labels [1] (freq >= 1) [from [29, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 18, 1]]
** centroid: 4, normalized-entropy: 0.2974722489192896, Tuple{Int64,Int64}[(2, 18), (3, 1)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 1, 18]]
** centroid: 5, normalized-entropy: 0.2974722489192896, Tuple{Int64,Int64}[(2, 1), (3, 18)]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 7: selecting labels [1] (freq >= 1) [from [1, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6179320266842843] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6179320266842843, 0.4539933903515339] ***
*** starting iteration: 2; err: [Inf, 0.6179320266842843, 0.4539933903515339] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6179320266842843, 0.4539933903515339, 0.44629321455955506] ***
*** starting iteration: 3; err: [Inf, 0.6179320266842843, 0.4539933903515339, 0.44629321455955506] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6179320266842843, 0.4539933903515339, 0.44629321455955506, 0.4437145295739174] ***
*** finished computation of 7 references, err: [Inf, 0.6179320266842843, 0.4539933903515339, 0.44629321455955506, 0.4437145295739174] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
*** center 2: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 12, 1]]
** centroid: 3, normalized-entropy: 0.3912435636292556, Tuple{Int64,Int64}[(2, 12), (3, 1)]
*** center 4: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 3, 10]]
** centroid: 5, normalized-entropy: 0.7793498372920851, Tuple{Int64,Int64}[(2, 3), (3, 10)]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 17, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6691773428022861] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6691773428022861, 0.4732253612577915] ***
*** starting iteration: 2; err: [Inf, 0.6691773428022861, 0.4732253612577915] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6691773428022861, 0.4732253612577915, 0.4580701760947704] ***
*** starting iteration: 3; err: [Inf, 0.6691773428022861, 0.4732253612577915, 0.4580701760947704] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6691773428022861, 0.4732253612577915, 0.4580701760947704, 0.45351897582411765] ***
*** finished computation of 7 references, err: [Inf, 0.6691773428022861, 0.4732253612577915, 0.4580701760947704, 0.45351897582411765] ***
*** center 1: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 18, 8]]
** centroid: 3, normalized-entropy: 0.8904916402194913, Tuple{Int64,Int64}[(2, 18), (3, 8)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 2, 15]]
** centroid: 4, normalized-entropy: 0.5225593745369407, Tuple{Int64,Int64}[(2, 2), (3, 15)]
*** center 5: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
finished with 7 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 20)
[0.9666666666666667, 0.96, 0.96, 0.9466666666666667, 0.9466666666666667, 0.9466666666666667, 0.9466666666666667, 0.9466666666666667, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9266666666666666, 0.9266666666666666, 0.9266666666666666, 0.9133333333333332, 0.9133333333333332, 0.9066666666666667, 0.9, 0.8866666666666667, 0.8666666666666667]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :rand, 0.9, 2) => 0.9666666666666667
finished with 21
iteration 7 finished
*** starting iteration: 1; err: [Inf, 0.46407951168715955] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.46407951168715955, 0.37699068628251553] ***
*** finished computation of 7 references, err: [Inf, 0.46407951168715955, 0.37699068628251553] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 20]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 14, 1]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 15, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 6, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [11, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 2, 12]]
** centroid: 6, normalized-entropy: 0.5916727785823274, Tuple{Int64,Int64}[(2, 2), (3, 12)]
*** center 7: selecting labels [1] (freq >= 2) [from [19, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6025420898199081] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6025420898199081, 0.5026277362555266] ***
*** finished computation of 7 references, err: [Inf, 0.6025420898199081, 0.5026277362555266] ***
*** center 1: selecting labels [1] (freq >= 2) [from [16, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 1, 26]]
*** center 3: selecting labels [1] (freq >= 2) [from [2, 1, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [5, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [6, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 30, 8]]
** centroid: 6, normalized-entropy: 0.7424875695421234, Tuple{Int64,Int64}[(2, 30), (3, 8)]
*** center 7: selecting labels [1] (freq >= 2) [from [5, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5365448336303235] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5365448336303235, 0.39723551701754334] ***
*** finished computation of 7 references, err: [Inf, 0.5365448336303235, 0.39723551701754334] ***
*** center 1: selecting labels [1] (freq >= 2) [from [15, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [21, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 21]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 19, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 2, 11]]
** centroid: 5, normalized-entropy: 0.6193821946787638, Tuple{Int64,Int64}[(2, 2), (3, 11)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 3, 1]]
finished with 7 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 21)
[0.9666666666666667, 0.96, 0.96, 0.9466666666666667, 0.9466666666666667, 0.9466666666666667, 0.9466666666666667, 0.9466666666666667, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9333333333333332, 0.9266666666666666, 0.9266666666666666, 0.9266666666666666, 0.9133333333333332, 0.9133333333333332, 0.9066666666666667, 0.9, 0.8866666666666667, 0.8666666666666667]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :rand, 0.9, 2) => 0.9666666666666667
finished with 21
iteration 8 finished
generating 4 configurations using top 4 configurations, starting with 21)
[0.9666666666666667, 0.96, 0.96, 0.9466666666666667, 0.9466666666666667, 0.9466666666666667, 0.9466666666666667, 0.9466666666666667, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9333333333333332, 0.9266666666666666, 0.9266666666666666, 0.9266666666666666, 0.9133333333333332, 0.9133333333333332, 0.9066666666666667, 0.9, 0.8866666666666667, 0.8666666666666667]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :rand, 0.9, 2) => 0.9666666666666667
finished with 21
iteration 9 finished
[ Info: ========== BEST MODEL ==========
[ Info: (AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :rand, 0.9, 2), 0.9666666666666667)
[ Info: AKNC{Array{Float64,1}}[AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}(Array{Float64,1}[[5.800000000000001, 2.975, 4.575, 1.525], [5.95, 3.0, 4.949999999999999, 1.8], [6.327272727272728, 3.0090909090909084, 4.59090909090909, 1.4363636363636365], [5.5649999999999995, 2.6399999999999997, 3.9449999999999994, 1.23], [6.529411764705883, 3.0882352941176467, 5.547058823529412, 2.1647058823529415], [4.9333333333333345, 3.36, 1.4533333333333336, 0.2633333333333334], [7.56, 3.1000000000000005, 6.34, 2.04], [6.2, 2.425, 4.725, 1.4749999999999999], [5.887499999999999, 2.6375, 5.112500000000001, 1.8250000000000002]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [2, 3, 2, 2, 3, 1, 3, 2, 3], 3), KCenters.var"#fun#72"{SimilaritySearch.var"#_lp#1"{Float64}}(SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25)), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :rand, 0.9, 2)), AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}(Array{Float64,1}[[5.0470588235294125, 3.4558823529411766, 1.4588235294117649, 0.2382352941176471], [6.458333333333332, 2.933333333333333, 5.516666666666667, 1.9916666666666665], [6.557142857142857, 2.9714285714285715, 4.621428571428571, 1.4428571428571428], [5.166666666666667, 2.3333333333333335, 3.6666666666666665, 1.1833333333333333], [5.79090909090909, 2.790909090909091, 4.263636363636365, 1.290909090909091], [5.979999999999999, 2.79, 4.970000000000001, 1.89], [7.246153846153847, 3.1923076923076925, 6.115384615384615, 2.1]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1, 3, 2, 2, 2, 3, 3], 3), KCenters.var"#fun#72"{SimilaritySearch.var"#_lp#1"{Float64}}(SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25)), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :rand, 0.9, 2)), AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}(Array{Float64,1}[[5.062499999999999, 3.3312499999999994, 1.5249999999999997, 0.23750000000000002], [5.0, 2.3000000000000003, 3.266666666666667, 1.0333333333333334], [6.89655172413793, 3.0620689655172417, 5.644827586206896, 2.041379310344827], [5.55, 2.5874999999999995, 3.7875, 1.175], [6.093333333333334, 2.8466666666666667, 4.5, 1.3933333333333335], [6.0625, 2.7125, 4.9375, 1.8000000000000003], [5.440000000000001, 3.9199999999999995, 1.53, 0.26], [4.5600000000000005, 3.0999999999999996, 1.35, 0.2]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1, 2, 3, 2, 2, 3, 1, 1], 3), KCenters.var"#fun#72"{SimilaritySearch.var"#_lp#1"{Float64}}(SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25)), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :rand, 0.9, 2))]
Test Summary: | Pass  Total
AKNC          |    1      1
[951, 3, 1, 1, 2, 1, 2, 3, 1, 2, 12, 4, 19, 2, 1, 6, 3, 4, 8, 6, 1, 5, 12, 2, 7, 3, 17, 6, 9, 1, 3, 3, 7, 6, 20, 7, 12, 6, 3, 13, 4, 18, 2, 19, 23, 29, 24, 9, 9, 26, 6, 4, 17, 3, 1, 4, 22, 15, 8, 40, 5, 25, 12, 20, 2, 3, 21, 2, 24, 4, 3, 13, 6, 63, 18, 3, 9, 15, 29, 34, 7, 8, 4, 6, 13, 11, 28, 21, 21, 10, 7, 8, 1, 1, 2, 15, 30, 22, 71, 11, 82, 4, 4, 67, 18, 21, 60, 15, 19, 9, 19, 4, 9, 31, 8, 33, 63, 26, 3, 50, 3, 9, 41, 59, 4, 58, 31, 14, 11, 12, 10, 24, 4, 200, 56, 1, 14, 11, 42, 19, 12, 29, 37, 37, 1, 4, 28, 136, 7, 18, 18, 11, 9, 2, 45, 7, 5, 91, 2, 58, 11, 23, 12, 2, 6, 19, 1, 44, 22, 9, 5, 20, 6, 26, 45, 48, 43, 31, 131, 49, 27, 14, 45, 136, 21, 29, 12, 111, 4, 32, 45, 84, 32, 3, 31, 7, 96, 26, 37, 9, 5, 17, 28, 60, 11, 453, 1, 31, 20, 26, 4, 31, 9, 35, 5, 87, 151, 3, 5, 28, 8, 67, 44, 5, 33, 38, 41, 26, 51, 4, 54, 7, 280, 17, 81, 19, 6, 44, 11, 84, 35, 99, 34, 16, 60, 5, 55, 6, 67, 22, 18, 3, 3, 3, 13, 7, 17, 26, 12, 2, 4, 127, 14, 6, 11, 36, 69, 16, 14, 20, 73, 12, 9, 13, 23, 12, 10, 15, 6, 19, 104, 6, 7, 13, 96, 32, 115, 21, 92, 22, 31, 53, 3, 115, 1, 893, 18, 88, 8, 195]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6899999999999998, speedup = 0.25164003459730916, eval_ratio = 0.097454)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.404513888888889,"recall":0.3923611111111112,"f1":null,"seconds":0.00023316405713558197,"exhaustive_search_seconds":0.0003114994615316391,"evaluations":587.1015625,"distances_sum":1696.384283485281}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5546874999999999,"recall":0.5546874999999999,"f1":null,"seconds":0.0003151334822177887,"exhaustive_search_seconds":0.0003114994615316391,"evaluations":790.796875,"distances_sum":1644.1671468280363}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6519097222222219,"recall":0.6519097222222219,"f1":0.6519097222222219,"seconds":0.00042384862899780273,"exhaustive_search_seconds":0.0003114994615316391,"evaluations":948.296875,"distances_sum":1590.3914683774262}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7317708333333331,"recall":0.7317708333333331,"f1":0.7317708333333331,"seconds":0.0005491152405738831,"exhaustive_search_seconds":0.0003114994615316391,"evaluations":1054.8046875,"distances_sum":1557.9532574597376}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7847222222222218,"recall":0.7847222222222218,"f1":0.7847222222222218,"seconds":0.0007331874221563339,"exhaustive_search_seconds":0.0003114994615316391,"evaluations":1203.78125,"distances_sum":1542.3115037668922}
KCenters.DeloneInvIndex> reached performance {"precision":0.8237847222222217,"recall":0.8237847222222217,"f1":0.8237847222222217,"seconds":0.0007196534425020218,"exhaustive_search_seconds":0.0003114994615316391,"evaluations":1329.75,"distances_sum":1530.4906923459541}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8439999999999999, speedup = 0.5481019980758581, eval_ratio = 0.13994600000000001)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
   Testing KCenters tests passed 
