Julia Version 1.4.0-rc1.21
Commit 113211dee6 (2020-02-06 08:37 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-8.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed Reexport ──────────────────── v0.2.0
  Installed DataAPI ───────────────────── v1.1.0
  Installed LearnBase ─────────────────── v0.2.2
  Installed InvertedIndices ───────────── v1.0.0
  Installed KCenters ──────────────────── v0.1.10
  Installed Compat ────────────────────── v3.2.0
  Installed TableTraits ───────────────── v1.0.0
  Installed SimilaritySearch ──────────── v0.3.17
  Installed PooledArrays ──────────────── v0.5.3
  Installed Missings ──────────────────── v0.4.3
  Installed MappedArrays ──────────────── v0.2.2
  Installed Tables ────────────────────── v0.2.11
  Installed DataValueInterfaces ───────── v1.0.0
  Installed OrderedCollections ────────── v1.1.0
  Installed StatsBase ─────────────────── v0.32.0
  Installed DataFrames ────────────────── v0.20.0
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed CategoricalArrays ─────────── v0.7.7
  Installed Parsers ───────────────────── v0.3.11
  Installed JSON ──────────────────────── v0.21.0
  Installed MLDataPattern ─────────────── v0.5.0
  Installed MLDataUtils ───────────────── v0.5.0
  Installed MLLabelUtils ──────────────── v0.5.1
  Installed DataStructures ────────────── v0.17.9
   Updating `~/.julia/environments/v1.4/Project.toml`
  [5d8de97f] + KCenters v0.1.10
   Updating `~/.julia/environments/v1.4/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.2.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.0
  [864edb3b] + DataStructures v0.17.9
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.1.10
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.0
  [cc2ba9b6] + MLDataUtils v0.5.0
  [66a33bbf] + MLLabelUtils v0.5.1
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.11
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.17
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.0
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v0.2.11
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
    Testing KCenters
Status `/tmp/jl_Taoa2U/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.2.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.0
  [864edb3b] DataStructures v0.17.9
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.1.10
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.0
  [cc2ba9b6] MLDataUtils v0.5.0
  [66a33bbf] MLLabelUtils v0.5.1
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v0.3.11
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.17
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.0
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v0.2.11
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
Test Summary: | Pass  Total
Scores        |    9      9
[ Info: 156.04000000000013
[ Info: 75.76999999999998
[ Info: 37.66
[ Info: 24.17
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 267.24999848336876
[ Info: 215.71999828423913
[ Info: 196.1300000884722
[ Info: 76.3000011447471
Test Summary:        |
Clustering with dnet | No tests
inertia(cfft.distances) = 18.858794699096208
inertia(cdnet.distances) = 27.851698000668986
inertia(crand.distances) = 22.96690199632832
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2294921875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2294921875,"f1":null,"seconds":3.470107913017273e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":6.75,"distances_sum":673.4260752968571}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2294921875,"state":{"ssize":3,"bsize":1},"perf":{"precision":null,"recall":0.2294921875,"f1":null,"seconds":3.470107913017273e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":6.75,"distances_sum":673.4260752968571}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4453125, conf: {"ssize":7,"bsize":2}, perf: {"precision":null,"recall":0.4453125,"f1":null,"seconds":3.840774297714233e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":7.09375,"distances_sum":1233.4720256531143}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.701171875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.701171875,"f1":0.8140666625041633,"seconds":4.503875970840454e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.1484375,"distances_sum":2114.6832409271306}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7578125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7578125,"f1":0.8552005286380294,"seconds":7.769092917442322e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.5390625,"distances_sum":2305.816390019056}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7578125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7578125,"f1":0.8552005286380294,"seconds":7.769092917442322e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.5390625,"distances_sum":2305.816390019056}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9637534340659343,"seconds":3.9692968130111694e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.9375,"distances_sum":3144.2144539394494}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8857421875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8857421875,"f1":0.9351336163836171,"seconds":4.414469003677368e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.90625,"distances_sum":2877.027693809318}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8212890625, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8212890625,"f1":0.8958281302031309,"seconds":3.905966877937317e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.5625,"distances_sum":2593.827521464166}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.810546875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.810546875,"f1":0.8894974816849825,"seconds":3.7122517824172974e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.5703125,"distances_sum":2578.6473702044627}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9365234375,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9637534340659343,"seconds":3.9692968130111694e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.9375,"distances_sum":3144.2144539394494}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9365234375,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9637534340659343,"seconds":3.9692968130111694e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.9375,"distances_sum":3144.2144539394494}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.763671875,"f1":0.8595243298368306,"seconds":3.1962990760803223e-6,"exhaustive_search_seconds":9.369105100631714e-7,"evaluations":8.2109375,"distances_sum":2233.814223677006}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2275390625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2275390625,"f1":null,"seconds":2.0097941160202026e-6,"exhaustive_search_seconds":9.369105100631714e-7,"evaluations":6.4609375,"distances_sum":619.0274903836573}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.77734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.77734375,"f1":0.8683524808524817,"seconds":3.375113010406494e-6,"exhaustive_search_seconds":9.369105100631714e-7,"evaluations":8.2421875,"distances_sum":2236.8228349518677}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.77734375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.77734375,"f1":0.8683524808524817,"seconds":3.375113010406494e-6,"exhaustive_search_seconds":9.369105100631714e-7,"evaluations":8.2421875,"distances_sum":2236.8228349518677}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.818359375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.818359375,"f1":0.8926344488844495,"seconds":3.4868717193603516e-6,"exhaustive_search_seconds":9.369105100631714e-7,"evaluations":8.4140625,"distances_sum":2472.053211516228}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9581043956043962,"seconds":3.814697265625e-6,"exhaustive_search_seconds":9.369105100631714e-7,"evaluations":8.875,"distances_sum":2996.1048978692406}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9513450091575096,"seconds":3.7066638469696045e-6,"exhaustive_search_seconds":9.369105100631714e-7,"evaluations":8.796875,"distances_sum":2963.2965144541195}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9529075091575099,"seconds":3.762543201446533e-6,"exhaustive_search_seconds":9.369105100631714e-7,"evaluations":8.8359375,"distances_sum":2932.1608360592404}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.79296875, conf: {"ssize":9,"bsize":5}, perf: {"precision":1.0,"recall":0.79296875,"f1":0.8764802905427914,"seconds":4.081055521965027e-6,"exhaustive_search_seconds":9.369105100631714e-7,"evaluations":8.2734375,"distances_sum":2352.0093488519383}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9267578125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9581043956043962,"seconds":3.814697265625e-6,"exhaustive_search_seconds":9.369105100631714e-7,"evaluations":8.875,"distances_sum":2996.1048978692406}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9744047619047621,"seconds":4.900619387626648e-6,"exhaustive_search_seconds":9.369105100631714e-7,"evaluations":8.96875,"distances_sum":3125.2249947806818}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":4,"bsize":13}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9765453296703299,"seconds":4.669651389122009e-6,"exhaustive_search_seconds":9.369105100631714e-7,"evaluations":8.96875,"distances_sum":3142.780409838109}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9701865842490848,"seconds":5.772337317466736e-6,"exhaustive_search_seconds":9.369105100631714e-7,"evaluations":8.8828125,"distances_sum":3109.53332208221}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.95703125,"state":{"ssize":4,"bsize":13},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9765453296703299,"seconds":4.669651389122009e-6,"exhaustive_search_seconds":9.369105100631714e-7,"evaluations":8.96875,"distances_sum":3142.780409838109}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.95703125,"state":{"ssize":4,"bsize":13},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9765453296703299,"seconds":4.669651389122009e-6,"exhaustive_search_seconds":9.369105100631714e-7,"evaluations":8.96875,"distances_sum":3142.780409838109}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76953125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.76953125,"f1":0.8632789085914095,"seconds":5.3960829973220825e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.375,"distances_sum":2142.9566663656424}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5654296875, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.5654296875,"f1":0.7073523698523705,"seconds":4.621222615242004e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":7.3828125,"distances_sum":1494.1728137898533}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.23046875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.23046875,"f1":null,"seconds":3.3043324947357178e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":6.328125,"distances_sum":585.3245939958799}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.76953125,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.76953125,"f1":0.8632789085914095,"seconds":5.3960829973220825e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.375,"distances_sum":2142.9566663656424}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9491388819513827,"seconds":5.992129445075989e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.8515625,"distances_sum":2819.990033410856}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.82421875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.82421875,"f1":0.8979510073260082,"seconds":5.4854899644851685e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.6484375,"distances_sum":2366.142264599297}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8212890625, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8212890625,"f1":0.8945486804861813,"seconds":3.7364661693573e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.65625,"distances_sum":2387.4657988839467}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9111328125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9111328125,"f1":0.9491388819513827,"seconds":5.992129445075989e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.8515625,"distances_sum":2819.990033410856}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.9770661630036633,"seconds":4.135072231292725e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.953125,"distances_sum":3017.024870302962}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9673763736263742,"seconds":4.433095455169678e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.953125,"distances_sum":2930.75442659815}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9580078125,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9770661630036633,"seconds":4.135072231292725e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.953125,"distances_sum":3017.024870302962}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9580078125,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9770661630036633,"seconds":4.135072231292725e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.953125,"distances_sum":3017.024870302962}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5927734375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5927734375,"f1":0.7304834054834062,"seconds":4.198402166366577e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":7.4765625,"distances_sum":1537.4032960343434}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.248046875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.248046875,"f1":null,"seconds":3.252178430557251e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":6.5546875,"distances_sum":664.7976155201063}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.25, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.25,"f1":null,"seconds":3.295019268989563e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":6.71875,"distances_sum":693.4457453641119}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5927734375,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5927734375,"f1":0.7304834054834062,"seconds":4.198402166366577e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":7.4765625,"distances_sum":1537.4032960343434}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8447265625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8447265625,"f1":0.9104853479853489,"seconds":5.280598998069763e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.5703125,"distances_sum":2525.091041123477}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9326527639027644,"seconds":5.591660737991333e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.6328125,"distances_sum":2737.5861389087313}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.673828125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.673828125,"f1":0.7903046606171614,"seconds":4.708766937255859e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":7.8671875,"distances_sum":1863.2738117360418}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.595703125, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.595703125,"f1":0.7300770410145416,"seconds":4.390254616737366e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":7.484375,"distances_sum":1601.7068214931746}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8828125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8828125,"f1":0.9326527639027644,"seconds":5.591660737991333e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.6328125,"distances_sum":2737.5861389087313}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9459941100566105,"seconds":5.947425961494446e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.8125,"distances_sum":2856.0127108154197}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9627289377289383,"seconds":5.707144737243652e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.8359375,"distances_sum":2992.8714532548443}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9621508699633704,"seconds":5.77978789806366e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.828125,"distances_sum":2999.9215970028777}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9419559607059613,"seconds":6.059184670448303e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.6875,"distances_sum":2872.2681883184487}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.93359375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9627289377289383,"seconds":5.707144737243652e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.8359375,"distances_sum":2992.8714532548443}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.93359375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9627289377289383,"seconds":5.707144737243652e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.8359375,"distances_sum":2992.8714532548443}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4462890625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4462890625,"f1":null,"seconds":3.982335329055786e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":6.1796875,"distances_sum":1196.7797836366424}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.548828125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.548828125,"f1":0.6924178252303258,"seconds":4.392117261886597e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":6.8515625,"distances_sum":1467.6594042755837}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.548828125,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.548828125,"f1":0.6924178252303258,"seconds":4.392117261886597e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":6.8515625,"distances_sum":1467.6594042755837}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8623046875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8623046875,"f1":0.9209592490842496,"seconds":5.999580025672913e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.7421875,"distances_sum":2665.774831823315}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8701171875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8701171875,"f1":0.92469977938728,"seconds":5.949288606643677e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.7109375,"distances_sum":2742.3758851531966}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8701171875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8701171875,"f1":0.92469977938728,"seconds":5.949288606643677e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.7109375,"distances_sum":2742.3758851531966}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.958984375, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.958984375,"f1":0.9779017857142861,"seconds":6.334856152534485e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.9921875,"distances_sum":3111.478743252681}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.964663461538462,"seconds":6.314367055892944e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.9296875,"distances_sum":2999.1936307647156}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9619448260073267,"seconds":6.331130862236023e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.8671875,"distances_sum":2998.37146571989}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.958984375,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9779017857142861,"seconds":6.334856152534485e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.9921875,"distances_sum":3111.478743252681}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.958984375,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9779017857142861,"seconds":6.334856152534485e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.9921875,"distances_sum":3111.478743252681}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4072265625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4072265625,"f1":null,"seconds":3.9245933294296265e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":6.1640625,"distances_sum":1060.0470078185456}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4072265625,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.4072265625,"f1":null,"seconds":3.9245933294296265e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":6.1640625,"distances_sum":1060.0470078185456}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.826171875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.826171875,"f1":0.8977080211455221,"seconds":5.9586018323898315e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":8.6875,"distances_sum":2407.143323866631}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.826171875,"state":{"ssize":3,"bsize":6},"perf":{"precision":1.0,"recall":0.826171875,"f1":0.8977080211455221,"seconds":5.9586018323898315e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":8.6875,"distances_sum":2407.143323866631}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9565705128205133,"seconds":6.318092346191406e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":8.8203125,"distances_sum":2893.0297650937146}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9658138736263742,"seconds":6.3963234424591064e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":8.90625,"distances_sum":2943.4039818264696}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9384765625,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9658138736263742,"seconds":6.3963234424591064e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":8.90625,"distances_sum":2943.4039818264696}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9384765625,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9658138736263742,"seconds":6.3963234424591064e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":8.90625,"distances_sum":2943.4039818264696}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2431640625, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2431640625,"f1":null,"seconds":3.3099204301834106e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":6.703125,"distances_sum":638.0850702484036}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7861328125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7861328125,"f1":0.8729255119880128,"seconds":4.937872290611267e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.3203125,"distances_sum":2274.474531038439}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7861328125,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7861328125,"f1":0.8729255119880128,"seconds":4.937872290611267e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.3203125,"distances_sum":2274.474531038439}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8857421875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8857421875,"f1":0.9339946511821519,"seconds":5.457550287246704e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.6015625,"distances_sum":2747.950223022072}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8857421875,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.8857421875,"f1":0.9339946511821519,"seconds":5.457550287246704e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.6015625,"distances_sum":2747.950223022072}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9661515567765571,"seconds":5.00120222568512e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.90625,"distances_sum":2976.0636173927596}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9420501373626381,"seconds":5.0086528062820435e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.75,"distances_sum":2759.050756296328}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9380437271062274,"seconds":4.949048161506653e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.6953125,"distances_sum":2752.7274975512564}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9566678113553119,"seconds":5.127862095832825e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.84375,"distances_sum":2910.7846754450493}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9661515567765571,"seconds":5.00120222568512e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.90625,"distances_sum":2976.0636173927596}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.939453125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9661515567765571,"seconds":5.00120222568512e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.90625,"distances_sum":2976.0636173927596}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5517578125, conf: {"ssize":1,"bsize":3}, perf: {"precision":0.991015625,"recall":0.5517578125,"f1":0.6897731608669113,"seconds":3.7830322980880737e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":7.6875,"distances_sum":1235.5541227987383}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.666015625, conf: {"ssize":1,"bsize":4}, perf: {"precision":0.9869791666666665,"recall":0.666015625,"f1":0.7859635156510163,"seconds":4.211440682411194e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.0078125,"distances_sum":1529.9535121842448}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.708984375, conf: {"ssize":3,"bsize":4}, perf: {"precision":0.9953683035714286,"recall":0.708984375,"f1":0.8171045100732609,"seconds":4.2691826820373535e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.1953125,"distances_sum":1650.2958361963276}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.708984375,"state":{"ssize":3,"bsize":4},"perf":{"precision":0.9953683035714286,"recall":0.708984375,"f1":0.8171045100732609,"seconds":4.2691826820373535e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.1953125,"distances_sum":1650.2958361963276}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7529296875, conf: {"ssize":2,"bsize":5}, perf: {"precision":0.9874255952380951,"recall":0.7529296875,"f1":0.8461371961371966,"seconds":4.630535840988159e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.3515625,"distances_sum":1782.9175665056166}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.841796875, conf: {"ssize":4,"bsize":6}, perf: {"precision":0.9922805059523809,"recall":0.841796875,"f1":0.9034071397352654,"seconds":4.971399903297424e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.8046875,"distances_sum":1995.5742871006212}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":5,"bsize":8}, perf: {"precision":0.9918619791666667,"recall":0.9111328125,"f1":0.9464951064560444,"seconds":5.427747964859009e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.9609375,"distances_sum":2247.3493727075506}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9111328125,"state":{"ssize":5,"bsize":8},"perf":{"precision":0.9918619791666667,"recall":0.9111328125,"f1":0.9464951064560444,"seconds":5.427747964859009e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.9609375,"distances_sum":2247.3493727075506}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":9,"bsize":11}, perf: {"precision":0.9889787946428571,"recall":0.9482421875,"f1":0.9666573660714288,"seconds":5.558133125305176e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.9765625,"distances_sum":2424.843599335615}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":3,"bsize":11}, perf: {"precision":0.9848865327380952,"recall":0.9482421875,"f1":0.9650576636904766,"seconds":5.459412932395935e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.984375,"distances_sum":2444.34457457493}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9482421875,"state":{"ssize":9,"bsize":11},"perf":{"precision":0.9889787946428571,"recall":0.9482421875,"f1":0.9666573660714288,"seconds":5.558133125305176e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.9765625,"distances_sum":2424.843599335615}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9482421875,"state":{"ssize":9,"bsize":11},"perf":{"precision":0.9889787946428571,"recall":0.9482421875,"f1":0.9666573660714288,"seconds":5.558133125305176e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.9765625,"distances_sum":2424.843599335615}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6923828125, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6923828125,"f1":0.8059242840492847,"seconds":4.30084764957428e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.21875,"distances_sum":1526.5494670420953}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.25, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.25,"f1":null,"seconds":2.9765069484710693e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":6.7734375,"distances_sum":506.7977976544125}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.595703125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.595703125,"f1":0.7345305735930743,"seconds":3.974884748458862e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":7.953125,"distances_sum":1240.9444124558238}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6923828125,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.6923828125,"f1":0.8059242840492847,"seconds":4.30084764957428e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.21875,"distances_sum":1526.5494670420953}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9471986346986355,"seconds":5.422160029411316e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.890625,"distances_sum":2283.836276759261}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7236328125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.7236328125,"f1":0.8318395146520156,"seconds":4.1853636503219604e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.3125,"distances_sum":1596.2147058477567}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7060546875, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.7060546875,"f1":0.816598332223333,"seconds":4.058703780174255e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.1953125,"distances_sum":1593.3372745901358}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.755859375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.755859375,"f1":0.851685814185815,"seconds":4.461035132408142e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.4453125,"distances_sum":1679.9330270736505}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7919921875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7919921875,"f1":0.8786146145521153,"seconds":4.585832357406616e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.5625,"distances_sum":1822.5631047776374}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91015625,"state":{"ssize":6,"bsize":8},"perf":{"precision":1.0,"recall":0.91015625,"f1":0.9471986346986355,"seconds":5.422160029411316e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.890625,"distances_sum":2283.836276759261}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.962394376456877,"seconds":5.114823579788208e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.9140625,"distances_sum":2333.102846258723}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9566792582417585,"seconds":5.064532160758972e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.953125,"distances_sum":2275.8841451950325}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9706845238095241,"seconds":5.271285772323608e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.9453125,"distances_sum":2405.3527254194473}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.966019917582418,"seconds":5.144625902175903e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.9140625,"distances_sum":2382.922160958434}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9519459706959711,"seconds":5.066394805908203e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.90625,"distances_sum":2300.74916840367}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9462890625,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.9706845238095241,"seconds":5.271285772323608e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.9453125,"distances_sum":2405.3527254194473}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9462890625,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.9706845238095241,"seconds":5.271285772323608e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.9453125,"distances_sum":2405.3527254194473}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.68359375, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.68359375,"f1":0.8006242021867029,"seconds":4.043802618980408e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":7.90625,"distances_sum":1457.5830021271815}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7080078125, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.7080078125,"f1":0.8187250249750259,"seconds":4.0512531995773315e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":7.9921875,"distances_sum":1562.126211765239}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7080078125,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.7080078125,"f1":0.8187250249750259,"seconds":4.0512531995773315e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":7.9921875,"distances_sum":1562.126211765239}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7783203125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7783203125,"f1":0.867603230103231,"seconds":4.4405460357666016e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.28125,"distances_sum":1744.393170356149}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8330078125, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8330078125,"f1":0.9029964826839836,"seconds":4.6510249376297e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.7109375,"distances_sum":1920.3417133670393}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8330078125,"state":{"ssize":3,"bsize":6},"perf":{"precision":1.0,"recall":0.8330078125,"f1":0.9029964826839836,"seconds":4.6510249376297e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.7109375,"distances_sum":1920.3417133670393}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9377549533799538,"seconds":5.055218935012817e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.8046875,"distances_sum":2181.4243281064787}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9713942307692308,"seconds":5.153939127922058e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.953125,"distances_sum":2397.7203451411247}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9470066391941394,"seconds":5.010515451431274e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.9140625,"distances_sum":2202.9217843438973}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9661515567765571,"seconds":5.0943344831466675e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.890625,"distances_sum":2365.34964935404}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9507700632700636,"seconds":5.02169132232666e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.875,"distances_sum":2244.2674213634623}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9618131868131872,"seconds":5.1390379667282104e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.9140625,"distances_sum":2316.4379398945343}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94921875,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9713942307692308,"seconds":5.153939127922058e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.953125,"distances_sum":2397.7203451411247}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94921875,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9713942307692308,"seconds":5.153939127922058e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.953125,"distances_sum":2397.7203451411247}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7802734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7802734375,"f1":0.8675829378954386,"seconds":4.569068551063538e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.375,"distances_sum":1713.816019442806}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1796875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.1796875,"f1":null,"seconds":2.7846544981002808e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":6.203125,"distances_sum":344.56143270472074}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7802734375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7802734375,"f1":0.8675829378954386,"seconds":4.569068551063538e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.375,"distances_sum":1713.816019442806}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.954990842490843,"seconds":5.315989255905151e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.8359375,"distances_sum":2246.9732579346023}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9208984375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9208984375,"f1":0.954990842490843,"seconds":5.315989255905151e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.8359375,"distances_sum":2246.9732579346023}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9716796875, conf: {"ssize":5,"bsize":13}, perf: {"precision":1.0,"recall":0.9716796875,"f1":0.9846726190476194,"seconds":5.552545189857483e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.96875,"distances_sum":2414.111784049983}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9716796875,"state":{"ssize":5,"bsize":13},"perf":{"precision":1.0,"recall":0.9716796875,"f1":0.9846726190476194,"seconds":5.552545189857483e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.96875,"distances_sum":2414.111784049983}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9716796875,"state":{"ssize":5,"bsize":13},"perf":{"precision":1.0,"recall":0.9716796875,"f1":0.9846726190476194,"seconds":5.552545189857483e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.96875,"distances_sum":2414.111784049983}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6796875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6796875,"f1":0.7970725455100464,"seconds":4.2710453271865845e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.109375,"distances_sum":1427.4780638761779}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6796875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6796875,"f1":0.7970725455100464,"seconds":4.2710453271865845e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.109375,"distances_sum":1427.4780638761779}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9434841200466209,"seconds":5.2209943532943726e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8515625,"distances_sum":2150.786232666392}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.90234375,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.90234375,"f1":0.9434841200466209,"seconds":5.2209943532943726e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8515625,"distances_sum":2150.786232666392}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9701121794871799,"seconds":5.48921525478363e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9375,"distances_sum":2343.8858672032397}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9701121794871799,"seconds":5.48921525478363e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9375,"distances_sum":2343.8858672032397}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9701121794871799,"seconds":5.48921525478363e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9375,"distances_sum":2343.8858672032397}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2421875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2421875,"f1":null,"seconds":2.7604401111602783e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":5.7578125,"distances_sum":543.1641542434131}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2421875,"state":{"ssize":5,"bsize":1},"perf":{"precision":null,"recall":0.2421875,"f1":null,"seconds":2.7604401111602783e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":5.7578125,"distances_sum":543.1641542434131}}, beam: 3, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.2421875,"state":{"ssize":5,"bsize":1},"perf":{"precision":null,"recall":0.2421875,"f1":null,"seconds":2.7604401111602783e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":5.7578125,"distances_sum":543.1641542434131}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.201171875,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.201171875,"f1":null,"seconds":2.903863787651062e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":6.2265625,"distances_sum":476.35630223586355}}, beam: 3, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.201171875,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.201171875,"f1":null,"seconds":2.903863787651062e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":6.2265625,"distances_sum":476.35630223586355}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5576171875, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5576171875,"f1":null,"seconds":3.6545097827911377e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":6.765625,"distances_sum":1187.9193192294856}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6767578125, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6767578125,"f1":0.795396617271618,"seconds":4.151836037635803e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.6953125,"distances_sum":1532.465158380541}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6767578125,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.6767578125,"f1":0.795396617271618,"seconds":4.151836037635803e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.6953125,"distances_sum":1532.465158380541}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9497252747252752,"seconds":3.5855919122695923e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.6640625,"distances_sum":2420.491459954346}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8095703125, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8095703125,"f1":0.8883127289377298,"seconds":3.332272171974182e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.4375,"distances_sum":2003.9865312336503}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8671875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8671875,"f1":0.9236950549450555,"seconds":3.550201654434204e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.625,"distances_sum":2225.6253749747257}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.828125, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.828125,"f1":0.8997398434898443,"seconds":3.3583492040634155e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.4453125,"distances_sum":2092.367905475749}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91015625,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.91015625,"f1":0.9497252747252752,"seconds":3.5855919122695923e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.6640625,"distances_sum":2420.491459954346}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":9,"bsize":11}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9697401556776558,"seconds":3.7495046854019165e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.890625,"distances_sum":2588.8078370905114}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9527789918414923,"seconds":3.593042492866516e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.7734375,"distances_sum":2511.098682968985}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9610176282051288,"seconds":3.5390257835388184e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.84375,"distances_sum":2532.1326990879347}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":8,"bsize":10}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9635073260073265,"seconds":3.7886202335357666e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.890625,"distances_sum":2532.937394137534}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":9,"bsize":10}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9617616758241765,"seconds":6.549060344696045e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.875,"distances_sum":2521.900372019632}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9453125,"state":{"ssize":9,"bsize":11},"perf":{"precision":1.0,"recall":0.9453125,"f1":0.9697401556776558,"seconds":3.7495046854019165e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.890625,"distances_sum":2588.8078370905114}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9453125,"state":{"ssize":9,"bsize":11},"perf":{"precision":1.0,"recall":0.9453125,"f1":0.9697401556776558,"seconds":3.7495046854019165e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.890625,"distances_sum":2588.8078370905114}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.75,"f1":0.84771044927295,"seconds":5.0067901611328125e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.03125,"distances_sum":1802.8627783041604}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.75,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.75,"f1":0.84771044927295,"seconds":5.0067901611328125e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.03125,"distances_sum":1802.8627783041604}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7880859375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.7880859375,"f1":0.8724879287379297,"seconds":3.213062882423401e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.0234375,"distances_sum":1950.8613613247421}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9379922161172165,"seconds":5.822628736495972e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.7890625,"distances_sum":2278.5208948043155}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8935546875,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.8935546875,"f1":0.9379922161172165,"seconds":5.822628736495972e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.7890625,"distances_sum":2278.5208948043155}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9670444139194142,"seconds":5.953013896942139e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.8671875,"distances_sum":2498.5326418165205}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.944485722610723,"seconds":5.777925252914429e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.7265625,"distances_sum":2373.238499775713}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":2,"bsize":12}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9737580128205132,"seconds":6.373971700668335e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.875,"distances_sum":2559.4681927860843}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9599759615384621,"seconds":5.910173058509827e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.8046875,"distances_sum":2473.5837410098725}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.953125,"state":{"ssize":2,"bsize":12},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9737580128205132,"seconds":6.373971700668335e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.875,"distances_sum":2559.4681927860843}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.953125,"state":{"ssize":2,"bsize":12},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9737580128205132,"seconds":6.373971700668335e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.875,"distances_sum":2559.4681927860843}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.775390625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.775390625,"f1":0.86720258907759,"seconds":3.2838433980941772e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.4375,"distances_sum":1777.115441053807}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.775390625,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.775390625,"f1":0.86720258907759,"seconds":3.2838433980941772e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.4375,"distances_sum":1777.115441053807}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.775390625,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.775390625,"f1":0.86720258907759,"seconds":3.2838433980941772e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.4375,"distances_sum":1777.115441053807}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.775390625,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.775390625,"f1":0.86720258907759,"seconds":3.2838433980941772e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.4375,"distances_sum":1777.115441053807}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.44921875, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.44921875,"f1":null,"seconds":2.8908252716064453e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":6.34375,"distances_sum":920.9199354169552}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.708984375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.708984375,"f1":0.8200459262959272,"seconds":3.1087547540664673e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":7.84375,"distances_sum":1520.1987644230553}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.708984375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.708984375,"f1":0.8200459262959272,"seconds":3.1087547540664673e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":7.84375,"distances_sum":1520.1987644230553}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.748046875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.748046875,"f1":0.8454363344988357,"seconds":3.1776726245880127e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.1640625,"distances_sum":1666.1156268852233}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.748046875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.748046875,"f1":0.8454363344988357,"seconds":3.1776726245880127e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.1640625,"distances_sum":1666.1156268852233}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9564445970695975,"seconds":3.645196557044983e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.890625,"distances_sum":2306.83066834173}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9590831043956047,"seconds":3.606081008911133e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.8515625,"distances_sum":2335.6151675056017}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.935451007326008,"seconds":3.475695848464966e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.8046875,"distances_sum":2185.2408756021487}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.759765625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.759765625,"f1":0.8546307858807868,"seconds":5.260109901428223e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.171875,"distances_sum":1692.1687914571282}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9267578125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9590831043956047,"seconds":3.606081008911133e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.8515625,"distances_sum":2335.6151675056017}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9267578125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9590831043956047,"seconds":3.606081008911133e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.8515625,"distances_sum":2335.6151675056017}}, n: 9
inertia(cfft.distances) = 18.603408502316388
inertia(cdnet.distances) = 544.1443151014245
inertia(crand.distances) = 26.44785424469212
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8866666666666667
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.9066666666666667
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.9199999999999999
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8444444444444444
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.9155555555555556
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.9022222222222221
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9133333333333334
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9488888888888889
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.94
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.9022222222222224
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8866666666666667
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.9244444444444445
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8288888888888888
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8933333333333334
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8955555555555555
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.8777777777777778
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9355555555555556
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9333333333333332
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8555555555555555
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.9133333333333334
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.9066666666666666
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8977777777777778
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.8777777777777778
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.94
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8777777777777778
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9022222222222221
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9066666666666666
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8644444444444445
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8466666666666667
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8488888888888889
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9111111111111111
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.8777777777777778
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9044444444444445
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX===== rocchio like>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX==== clustering>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
nc.class_map = [2, 1, 3, 2, 3, 3, 1, 1, 3, 3, 3, 2, 1, 2, 3, 2, 3, 3, 3, 1, 3]
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 8, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 22, 0]]
*** center 10: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 7, 9]]
** centroid: 12, normalized-entropy: 0.9886994082884974, [(2, 7), (3, 9)]
finished with 15 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 1, 2, 2, 3, 2, 3, 2, 1, 3, 2, 3]
acc = 0.9466666666666667
*** finished computation of 12 references, err: [Inf, 0.5372512143850326] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 12, 21]]
** centroid: 1, normalized-entropy: 0.9456603046006401, [(2, 12), (3, 21)]
*** center 2: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 9, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 11, 1]]
** centroid: 11, normalized-entropy: 0.4138168503036336, [(2, 11), (3, 1)]
*** center 12: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
finished with 14 centroids; started with 12
acc = 0.9266666666666666
Test Summary:   | Pass  Total
NearestCentroid |   10     10
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.49267071440815924] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.49267071440815924, 0.3877173908799887] ***
*** finished computation of 7 references, err: [Inf, 0.49267071440815924, 0.3877173908799887] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 26, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 2, 12]]
** centroid: 3, normalized-entropy: 0.5916727785823274, [(2, 2), (3, 12)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 10, 8]]
** centroid: 4, normalized-entropy: 0.9910760598382222, [(2, 10), (3, 8)]
*** center 5: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 7: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5945824269950389] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5945824269950389, 0.443655466362834] ***
*** starting iteration: 2; err: [Inf, 0.5945824269950389, 0.443655466362834] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5945824269950389, 0.443655466362834, 0.42636412508785726] ***
*** starting iteration: 3; err: [Inf, 0.5945824269950389, 0.443655466362834, 0.42636412508785726] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5945824269950389, 0.443655466362834, 0.42636412508785726, 0.4071803267300129] ***
*** starting iteration: 4; err: [Inf, 0.5945824269950389, 0.443655466362834, 0.42636412508785726, 0.4071803267300129] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5945824269950389, 0.443655466362834, 0.42636412508785726, 0.4071803267300129, 0.38732265166938307] ***
*** starting iteration: 5; err: [Inf, 0.5945824269950389, 0.443655466362834, 0.42636412508785726, 0.4071803267300129, 0.38732265166938307] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5945824269950389, 0.443655466362834, 0.42636412508785726, 0.4071803267300129, 0.38732265166938307, 0.3839441569894552] ***
*** starting iteration: 6; err: [Inf, 0.5945824269950389, 0.443655466362834, 0.42636412508785726, 0.4071803267300129, 0.38732265166938307, 0.3839441569894552] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5945824269950389, 0.443655466362834, 0.42636412508785726, 0.4071803267300129, 0.38732265166938307, 0.3839441569894552, 0.37898843191564086] ***
*** starting iteration: 7; err: [Inf, 0.5945824269950389, 0.443655466362834, 0.42636412508785726, 0.4071803267300129, 0.38732265166938307, 0.3839441569894552, 0.37898843191564086] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5945824269950389, 0.443655466362834, 0.42636412508785726, 0.4071803267300129, 0.38732265166938307, 0.3839441569894552, 0.37898843191564086, 0.3787660741060972] ***
*** finished computation of 7 references, err: [Inf, 0.5945824269950389, 0.443655466362834, 0.42636412508785726, 0.4071803267300129, 0.38732265166938307, 0.3839441569894552, 0.37898843191564086, 0.3787660741060972] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 20]]
*** center 2: selecting labels [1] (freq >= 2) [from [17, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 4, 0]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 9]]
*** center 5: selecting labels [1] (freq >= 2) [from [16, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 16, 10]]
** centroid: 6, normalized-entropy: 0.961236604722876, [(2, 16), (3, 10)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 7, 1]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6261311867833137] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6261311867833137, 0.4303028354048729] ***
*** starting iteration: 2; err: [Inf, 0.6261311867833137, 0.4303028354048729] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6261311867833137, 0.4303028354048729, 0.4055053973197937] ***
*** starting iteration: 3; err: [Inf, 0.6261311867833137, 0.4303028354048729, 0.4055053973197937] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6261311867833137, 0.4303028354048729, 0.4055053973197937, 0.39616167642176153] ***
*** starting iteration: 4; err: [Inf, 0.6261311867833137, 0.4303028354048729, 0.4055053973197937, 0.39616167642176153] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6261311867833137, 0.4303028354048729, 0.4055053973197937, 0.39616167642176153, 0.38523665264248846] ***
*** starting iteration: 5; err: [Inf, 0.6261311867833137, 0.4303028354048729, 0.4055053973197937, 0.39616167642176153, 0.38523665264248846] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6261311867833137, 0.4303028354048729, 0.4055053973197937, 0.39616167642176153, 0.38523665264248846, 0.37748666867613795] ***
*** starting iteration: 6; err: [Inf, 0.6261311867833137, 0.4303028354048729, 0.4055053973197937, 0.39616167642176153, 0.38523665264248846, 0.37748666867613795] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6261311867833137, 0.4303028354048729, 0.4055053973197937, 0.39616167642176153, 0.38523665264248846, 0.37748666867613795, 0.3734444886445999] ***
*** starting iteration: 7; err: [Inf, 0.6261311867833137, 0.4303028354048729, 0.4055053973197937, 0.39616167642176153, 0.38523665264248846, 0.37748666867613795, 0.3734444886445999] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6261311867833137, 0.4303028354048729, 0.4055053973197937, 0.39616167642176153, 0.38523665264248846, 0.37748666867613795, 0.3734444886445999, 0.3690707525610924] ***
*** starting iteration: 8; err: [Inf, 0.6261311867833137, 0.4303028354048729, 0.4055053973197937, 0.39616167642176153, 0.38523665264248846, 0.37748666867613795, 0.3734444886445999, 0.3690707525610924] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6261311867833137, 0.4303028354048729, 0.4055053973197937, 0.39616167642176153, 0.38523665264248846, 0.37748666867613795, 0.3734444886445999, 0.3690707525610924, 0.3686717666685581] ***
*** finished computation of 7 references, err: [Inf, 0.6261311867833137, 0.4303028354048729, 0.4055053973197937, 0.39616167642176153, 0.38523665264248846, 0.37748666867613795, 0.3734444886445999, 0.3690707525610924, 0.3686717666685581] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 14, 8]]
** centroid: 1, normalized-entropy: 0.9456603046006401, [(2, 14), (3, 8)]
*** center 2: selecting labels [1] (freq >= 2) [from [23, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 8]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 6, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 15, 1]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 16]]
*** center 7: selecting labels [1] (freq >= 2) [from [9, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 1.3002188067138194] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.3002188067138194, 0.5911041340231895] ***
*** finished computation of 7 references, err: [Inf, 1.3002188067138194, 0.5911041340231895] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [33, 1, 0]]
** centroid: 3, normalized-entropy: 0.1914332548141934, [(1, 33), (2, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 16, 1]]
** centroid: 4, normalized-entropy: 0.32275695889739825, [(2, 16), (3, 1)]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 9, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 1, 5]]
** centroid: 7, normalized-entropy: 0.6500224216483541, [(2, 1), (3, 5)]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5795180407166481] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5795180407166481, 0.40900197297334673] ***
*** finished computation of 7 references, err: [Inf, 0.5795180407166481, 0.40900197297334673] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 21, 1]]
** centroid: 2, normalized-entropy: 0.2667649878030262, [(2, 21), (3, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 3, 3]]
** centroid: 4, normalized-entropy: 1.0, [(2, 3), (3, 3)]
*** center 5: selecting labels [1] (freq >= 1) [from [19, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 5, 21]]
** centroid: 6, normalized-entropy: 0.7062740891876008, [(2, 5), (3, 21)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5640379849076271] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5640379849076271, 0.4548518195748329] ***
*** starting iteration: 2; err: [Inf, 0.5640379849076271, 0.4548518195748329] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5640379849076271, 0.4548518195748329, 0.4420866974443197] ***
*** starting iteration: 3; err: [Inf, 0.5640379849076271, 0.4548518195748329, 0.4420866974443197] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5640379849076271, 0.4548518195748329, 0.4420866974443197, 0.43079232804477213] ***
*** starting iteration: 4; err: [Inf, 0.5640379849076271, 0.4548518195748329, 0.4420866974443197, 0.43079232804477213] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5640379849076271, 0.4548518195748329, 0.4420866974443197, 0.43079232804477213, 0.42581346549093724] ***
*** starting iteration: 5; err: [Inf, 0.5640379849076271, 0.4548518195748329, 0.4420866974443197, 0.43079232804477213, 0.42581346549093724] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5640379849076271, 0.4548518195748329, 0.4420866974443197, 0.43079232804477213, 0.42581346549093724, 0.4237632348388434] ***
*** starting iteration: 6; err: [Inf, 0.5640379849076271, 0.4548518195748329, 0.4420866974443197, 0.43079232804477213, 0.42581346549093724, 0.4237632348388434] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5640379849076271, 0.4548518195748329, 0.4420866974443197, 0.43079232804477213, 0.42581346549093724, 0.4237632348388434, 0.421371152177453] ***
*** starting iteration: 7; err: [Inf, 0.5640379849076271, 0.4548518195748329, 0.4420866974443197, 0.43079232804477213, 0.42581346549093724, 0.4237632348388434, 0.421371152177453] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5640379849076271, 0.4548518195748329, 0.4420866974443197, 0.43079232804477213, 0.42581346549093724, 0.4237632348388434, 0.421371152177453, 0.4200760368257761] ***
*** starting iteration: 8; err: [Inf, 0.5640379849076271, 0.4548518195748329, 0.4420866974443197, 0.43079232804477213, 0.42581346549093724, 0.4237632348388434, 0.421371152177453, 0.4200760368257761] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5640379849076271, 0.4548518195748329, 0.4420866974443197, 0.43079232804477213, 0.42581346549093724, 0.4237632348388434, 0.421371152177453, 0.4200760368257761, 0.4200760368257761] ***
*** finished computation of 7 references, err: [Inf, 0.5640379849076271, 0.4548518195748329, 0.4420866974443197, 0.43079232804477213, 0.42581346549093724, 0.4237632348388434, 0.421371152177453, 0.4200760368257761, 0.4200760368257761] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 15, 6]]
** centroid: 1, normalized-entropy: 0.8631205685666311, [(2, 15), (3, 6)]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 14]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 3, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 20, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [18, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [17, 0, 0]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6838365982472897] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6838365982472897, 0.5407442060112954] ***
*** starting iteration: 2; err: [Inf, 0.6838365982472897, 0.5407442060112954] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6838365982472897, 0.5407442060112954, 0.49361643388867377] ***
*** starting iteration: 3; err: [Inf, 0.6838365982472897, 0.5407442060112954, 0.49361643388867377] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6838365982472897, 0.5407442060112954, 0.49361643388867377, 0.48072938978672025] ***
*** starting iteration: 4; err: [Inf, 0.6838365982472897, 0.5407442060112954, 0.49361643388867377, 0.48072938978672025] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6838365982472897, 0.5407442060112954, 0.49361643388867377, 0.48072938978672025, 0.48011404387652873] ***
*** finished computation of 7 references, err: [Inf, 0.6838365982472897, 0.5407442060112954, 0.49361643388867377, 0.48072938978672025, 0.48011404387652873] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 9, 1]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 17, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 1, 16]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
*** center 5: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 11]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 5]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6052519969642163] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6052519969642163, 0.5020940849930048] ***
*** starting iteration: 2; err: [Inf, 0.6052519969642163, 0.5020940849930048] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6052519969642163, 0.5020940849930048, 0.4821666157990694] ***
*** starting iteration: 3; err: [Inf, 0.6052519969642163, 0.5020940849930048, 0.4821666157990694] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6052519969642163, 0.5020940849930048, 0.4821666157990694, 0.48222148478031157] ***
*** finished computation of 7 references, err: [Inf, 0.6052519969642163, 0.5020940849930048, 0.4821666157990694, 0.48222148478031157] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 13, 10]]
** centroid: 1, normalized-entropy: 0.9876925088958032, [(2, 13), (3, 10)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 9, 1]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 13, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [10, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [6, 0, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 22]]
*** center 7: selecting labels [1] (freq >= 2) [from [16, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7371015729755164] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7371015729755164, 0.6209130629897117] ***
*** starting iteration: 2; err: [Inf, 0.7371015729755164, 0.6209130629897117] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7371015729755164, 0.6209130629897117, 0.6196299785375595] ***
*** starting iteration: 3; err: [Inf, 0.7371015729755164, 0.6209130629897117, 0.6196299785375595] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7371015729755164, 0.6209130629897117, 0.6196299785375595, 0.6159848375618457] ***
*** starting iteration: 4; err: [Inf, 0.7371015729755164, 0.6209130629897117, 0.6196299785375595, 0.6159848375618457] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7371015729755164, 0.6209130629897117, 0.6196299785375595, 0.6159848375618457, 0.6150600105524063] ***
*** finished computation of 3 references, err: [Inf, 0.7371015729755164, 0.6209130629897117, 0.6196299785375595, 0.6159848375618457, 0.6150600105524063] ***
*** center 1: selecting labels [1] (freq >= 1) [from [35, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 34, 3]]
** centroid: 2, normalized-entropy: 0.40597703847557104, [(2, 34), (3, 3)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 4, 24]]
** centroid: 3, normalized-entropy: 0.5916727785823274, [(2, 4), (3, 24)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 2.967293007075787] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.967293007075787, 0.9992638382315636] ***
*** starting iteration: 2; err: [Inf, 2.967293007075787, 0.9992638382315636] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.967293007075787, 0.9992638382315636, 0.7186336636543273] ***
*** starting iteration: 3; err: [Inf, 2.967293007075787, 0.9992638382315636, 0.7186336636543273] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.967293007075787, 0.9992638382315636, 0.7186336636543273, 0.7053315317630768] ***
*** starting iteration: 4; err: [Inf, 2.967293007075787, 0.9992638382315636, 0.7186336636543273, 0.7053315317630768] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.967293007075787, 0.9992638382315636, 0.7186336636543273, 0.7053315317630768, 0.6987323045730591] ***
*** starting iteration: 5; err: [Inf, 2.967293007075787, 0.9992638382315636, 0.7186336636543273, 0.7053315317630768, 0.6987323045730591] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.967293007075787, 0.9992638382315636, 0.7186336636543273, 0.7053315317630768, 0.6987323045730591, 0.6934566298872232] ***
*** starting iteration: 6; err: [Inf, 2.967293007075787, 0.9992638382315636, 0.7186336636543273, 0.7053315317630768, 0.6987323045730591, 0.6934566298872232] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.967293007075787, 0.9992638382315636, 0.7186336636543273, 0.7053315317630768, 0.6987323045730591, 0.6934566298872232, 0.6843994282186031] ***
*** starting iteration: 7; err: [Inf, 2.967293007075787, 0.9992638382315636, 0.7186336636543273, 0.7053315317630768, 0.6987323045730591, 0.6934566298872232, 0.6843994282186031] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.967293007075787, 0.9992638382315636, 0.7186336636543273, 0.7053315317630768, 0.6987323045730591, 0.6934566298872232, 0.6843994282186031, 0.6772845321893692] ***
*** starting iteration: 8; err: [Inf, 2.967293007075787, 0.9992638382315636, 0.7186336636543273, 0.7053315317630768, 0.6987323045730591, 0.6934566298872232, 0.6843994282186031, 0.6772845321893692] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.967293007075787, 0.9992638382315636, 0.7186336636543273, 0.7053315317630768, 0.6987323045730591, 0.6934566298872232, 0.6843994282186031, 0.6772845321893692, 0.669372633844614] ***
*** starting iteration: 9; err: [Inf, 2.967293007075787, 0.9992638382315636, 0.7186336636543273, 0.7053315317630768, 0.6987323045730591, 0.6934566298872232, 0.6843994282186031, 0.6772845321893692, 0.669372633844614] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.967293007075787, 0.9992638382315636, 0.7186336636543273, 0.7053315317630768, 0.6987323045730591, 0.6934566298872232, 0.6843994282186031, 0.6772845321893692, 0.669372633844614, 0.6695196518301963] ***
*** finished computation of 3 references, err: [Inf, 2.967293007075787, 0.9992638382315636, 0.7186336636543273, 0.7053315317630768, 0.6987323045730591, 0.6934566298872232, 0.6843994282186031, 0.6772845321893692, 0.669372633844614, 0.6695196518301963] ***
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 2, 28]]
** centroid: 2, normalized-entropy: 0.3533593350214213, [(2, 2), (3, 28)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 25, 12]]
** centroid: 3, normalized-entropy: 0.9090221560878149, [(2, 25), (3, 12)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.1477059218287469] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1477059218287469, 0.844624696969986] ***
*** starting iteration: 2; err: [Inf, 1.1477059218287469, 0.844624696969986] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1477059218287469, 0.844624696969986, 0.721793192178011] ***
*** starting iteration: 3; err: [Inf, 1.1477059218287469, 0.844624696969986, 0.721793192178011] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1477059218287469, 0.844624696969986, 0.721793192178011, 0.6597354951500892] ***
*** starting iteration: 4; err: [Inf, 1.1477059218287469, 0.844624696969986, 0.721793192178011, 0.6597354951500892] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1477059218287469, 0.844624696969986, 0.721793192178011, 0.6597354951500892, 0.6475513343513012] ***
*** starting iteration: 5; err: [Inf, 1.1477059218287469, 0.844624696969986, 0.721793192178011, 0.6597354951500892, 0.6475513343513012] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1477059218287469, 0.844624696969986, 0.721793192178011, 0.6597354951500892, 0.6475513343513012, 0.645306790471077] ***
*** starting iteration: 6; err: [Inf, 1.1477059218287469, 0.844624696969986, 0.721793192178011, 0.6597354951500892, 0.6475513343513012, 0.645306790471077] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1477059218287469, 0.844624696969986, 0.721793192178011, 0.6597354951500892, 0.6475513343513012, 0.645306790471077, 0.6465099804103375] ***
*** finished computation of 3 references, err: [Inf, 1.1477059218287469, 0.844624696969986, 0.721793192178011, 0.6597354951500892, 0.6475513343513012, 0.645306790471077, 0.6465099804103375] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 8, 31]]
** centroid: 1, normalized-entropy: 0.7320666900931937, [(2, 8), (3, 31)]
*** center 2: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 27, 2]]
** centroid: 3, normalized-entropy: 0.36205125173399805, [(2, 27), (3, 2)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.6134314765036106] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6134314765036106, 0.4762081710249186] ***
*** finished computation of 7 references, err: [Inf, 0.6134314765036106, 0.4762081710249186] ***
*** center 1: selecting labels [1] (freq >= 1) [from [5, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 36, 6]]
** centroid: 2, normalized-entropy: 0.5916727785823274, [(2, 36), (3, 6)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 2, 21]]
** centroid: 3, normalized-entropy: 0.42622865699814483, [(2, 2), (3, 21)]
*** center 4: selecting labels [1] (freq >= 1) [from [6, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [6, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5955837705731392] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5955837705731392, 0.4291663473844528] ***
*** finished computation of 7 references, err: [Inf, 0.5955837705731392, 0.4291663473844528] ***
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 10, 11]]
** centroid: 3, normalized-entropy: 0.998363672593813, [(2, 10), (3, 11)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 12, 1]]
** centroid: 4, normalized-entropy: 0.3912435636292556, [(2, 12), (3, 1)]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 1, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5656520477682352] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5656520477682352, 0.452846739590168] ***
*** finished computation of 7 references, err: [Inf, 0.5656520477682352, 0.452846739590168] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 2: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 4, 20]]
** centroid: 5, normalized-entropy: 0.6500224216483541, [(2, 4), (3, 20)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 31, 5]]
** centroid: 6, normalized-entropy: 0.581321498763703, [(2, 31), (3, 5)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7234892417490483] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7234892417490483, 0.4876875352486968] ***
*** starting iteration: 2; err: [Inf, 0.7234892417490483, 0.4876875352486968] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7234892417490483, 0.4876875352486968, 0.463539931923151] ***
*** starting iteration: 3; err: [Inf, 0.7234892417490483, 0.4876875352486968, 0.463539931923151] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7234892417490483, 0.4876875352486968, 0.463539931923151, 0.46168325930833815] ***
*** starting iteration: 4; err: [Inf, 0.7234892417490483, 0.4876875352486968, 0.463539931923151, 0.46168325930833815] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7234892417490483, 0.4876875352486968, 0.463539931923151, 0.46168325930833815, 0.45874567836523056] ***
*** starting iteration: 5; err: [Inf, 0.7234892417490483, 0.4876875352486968, 0.463539931923151, 0.46168325930833815, 0.45874567836523056] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7234892417490483, 0.4876875352486968, 0.463539931923151, 0.46168325930833815, 0.45874567836523056, 0.4556871728599072] ***
*** starting iteration: 6; err: [Inf, 0.7234892417490483, 0.4876875352486968, 0.463539931923151, 0.46168325930833815, 0.45874567836523056, 0.4556871728599072] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7234892417490483, 0.4876875352486968, 0.463539931923151, 0.46168325930833815, 0.45874567836523056, 0.4556871728599072, 0.453424468934536] ***
*** starting iteration: 7; err: [Inf, 0.7234892417490483, 0.4876875352486968, 0.463539931923151, 0.46168325930833815, 0.45874567836523056, 0.4556871728599072, 0.453424468934536] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7234892417490483, 0.4876875352486968, 0.463539931923151, 0.46168325930833815, 0.45874567836523056, 0.4556871728599072, 0.453424468934536, 0.4520260685682297] ***
*** starting iteration: 8; err: [Inf, 0.7234892417490483, 0.4876875352486968, 0.463539931923151, 0.46168325930833815, 0.45874567836523056, 0.4556871728599072, 0.453424468934536, 0.4520260685682297] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7234892417490483, 0.4876875352486968, 0.463539931923151, 0.46168325930833815, 0.45874567836523056, 0.4556871728599072, 0.453424468934536, 0.4520260685682297, 0.4520260685682297] ***
*** finished computation of 7 references, err: [Inf, 0.7234892417490483, 0.4876875352486968, 0.463539931923151, 0.46168325930833815, 0.45874567836523056, 0.4556871728599072, 0.453424468934536, 0.4520260685682297, 0.4520260685682297] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 10, 8]]
** centroid: 1, normalized-entropy: 0.9910760598382222, [(2, 10), (3, 8)]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 8, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 13]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 6: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6061869758367538] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6061869758367538, 0.4993637522310019] ***
*** starting iteration: 2; err: [Inf, 0.6061869758367538, 0.4993637522310019] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6061869758367538, 0.4993637522310019, 0.4727454286813736] ***
*** starting iteration: 3; err: [Inf, 0.6061869758367538, 0.4993637522310019, 0.4727454286813736] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6061869758367538, 0.4993637522310019, 0.4727454286813736, 0.46298333778977396] ***
*** starting iteration: 4; err: [Inf, 0.6061869758367538, 0.4993637522310019, 0.4727454286813736, 0.46298333778977396] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6061869758367538, 0.4993637522310019, 0.4727454286813736, 0.46298333778977396, 0.4609018345177174] ***
*** starting iteration: 5; err: [Inf, 0.6061869758367538, 0.4993637522310019, 0.4727454286813736, 0.46298333778977396, 0.4609018345177174] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6061869758367538, 0.4993637522310019, 0.4727454286813736, 0.46298333778977396, 0.4609018345177174, 0.45978006705641744] ***
*** starting iteration: 6; err: [Inf, 0.6061869758367538, 0.4993637522310019, 0.4727454286813736, 0.46298333778977396, 0.4609018345177174, 0.45978006705641744] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6061869758367538, 0.4993637522310019, 0.4727454286813736, 0.46298333778977396, 0.4609018345177174, 0.45978006705641744, 0.45978006705641744] ***
*** finished computation of 7 references, err: [Inf, 0.6061869758367538, 0.4993637522310019, 0.4727454286813736, 0.46298333778977396, 0.4609018345177174, 0.45978006705641744, 0.45978006705641744] ***
*** center 1: selecting labels [1] (freq >= 1) [from [3, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 11, 1]]
** centroid: 2, normalized-entropy: 0.4138168503036336, [(2, 11), (3, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 16, 12]]
** centroid: 4, normalized-entropy: 0.9852281360342514, [(2, 16), (3, 12)]
*** center 5: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5136857049912215] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5136857049912215, 0.458994619846344] ***
*** starting iteration: 2; err: [Inf, 0.5136857049912215, 0.458994619846344] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5136857049912215, 0.458994619846344, 0.4566655793786049] ***
*** starting iteration: 3; err: [Inf, 0.5136857049912215, 0.458994619846344, 0.4566655793786049] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5136857049912215, 0.458994619846344, 0.4566655793786049, 0.4563632090389729] ***
*** finished computation of 7 references, err: [Inf, 0.5136857049912215, 0.458994619846344, 0.4566655793786049, 0.4563632090389729] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 17, 1]]
** centroid: 2, normalized-entropy: 0.3095434291503252, [(2, 17), (3, 1)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 15, 8]]
** centroid: 3, normalized-entropy: 0.9321115676166747, [(2, 15), (3, 8)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 3, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.9343862408399581] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9343862408399581, 0.6173171257972717] ***
*** starting iteration: 2; err: [Inf, 0.9343862408399581, 0.6173171257972717] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9343862408399581, 0.6173171257972717, 0.615212484896183] ***
*** starting iteration: 3; err: [Inf, 0.9343862408399581, 0.6173171257972717, 0.615212484896183] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9343862408399581, 0.6173171257972717, 0.615212484896183, 0.615212484896183] ***
*** finished computation of 3 references, err: [Inf, 0.9343862408399581, 0.6173171257972717, 0.615212484896183, 0.615212484896183] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 2, 21]]
** centroid: 1, normalized-entropy: 0.42622865699814483, [(2, 2), (3, 21)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 36, 6]]
** centroid: 2, normalized-entropy: 0.5916727785823274, [(2, 36), (3, 6)]
*** center 3: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8135053813457489] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8135053813457489, 0.7053315317630768] ***
*** starting iteration: 2; err: [Inf, 0.8135053813457489, 0.7053315317630768] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8135053813457489, 0.7053315317630768, 0.6987323045730591] ***
*** starting iteration: 3; err: [Inf, 0.8135053813457489, 0.7053315317630768, 0.6987323045730591] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8135053813457489, 0.7053315317630768, 0.6987323045730591, 0.6934566298872232] ***
*** finished computation of 3 references, err: [Inf, 0.8135053813457489, 0.7053315317630768, 0.6987323045730591, 0.6934566298872232] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 22, 2]]
** centroid: 1, normalized-entropy: 0.4138168503036336, [(2, 22), (3, 2)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 5, 38]]
** centroid: 2, normalized-entropy: 0.5185697317883058, [(2, 5), (3, 38)]
*** center 3: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9234376687556505] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9234376687556505, 0.6491178517043591] ***
*** starting iteration: 2; err: [Inf, 0.9234376687556505, 0.6491178517043591] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9234376687556505, 0.6491178517043591, 0.645306790471077] ***
*** starting iteration: 3; err: [Inf, 0.9234376687556505, 0.6491178517043591, 0.645306790471077] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9234376687556505, 0.6491178517043591, 0.645306790471077, 0.6465099804103375] ***
*** finished computation of 3 references, err: [Inf, 0.9234376687556505, 0.6491178517043591, 0.645306790471077, 0.6465099804103375] ***
*** center 1: selecting labels [1] (freq >= 2) [from [32, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 27, 2]]
** centroid: 2, normalized-entropy: 0.36205125173399805, [(2, 27), (3, 2)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 8, 31]]
** centroid: 3, normalized-entropy: 0.7320666900931937, [(2, 8), (3, 31)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 2.3497116366028785] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.3497116366028785, 0.6738443147391081] ***
*** finished computation of 3 references, err: [Inf, 2.3497116366028785, 0.6738443147391081] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 20, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 18, 27]]
** centroid: 3, normalized-entropy: 0.9709505944546688, [(2, 18), (3, 27)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.6591006892919541] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6591006892919541, 0.5689027382433415] ***
*** finished computation of 3 references, err: [Inf, 0.6591006892919541, 0.5689027382433415] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 23, 4]]
** centroid: 1, normalized-entropy: 0.6051865766334207, [(2, 23), (3, 4)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 4, 36]]
** centroid: 2, normalized-entropy: 0.46899559358928133, [(2, 4), (3, 36)]
*** center 3: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8246382465213538] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8246382465213538, 0.5991891227662564] ***
*** finished computation of 3 references, err: [Inf, 0.8246382465213538, 0.5991891227662564] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 14]]
*** center 2: selecting labels [1] (freq >= 2) [from [32, 1, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 34, 19]]
** centroid: 3, normalized-entropy: 0.9414231081869789, [(2, 34), (3, 19)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.65314039722085] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.65314039722085, 0.46826704807579517] ***
*** finished computation of 7 references, err: [Inf, 0.65314039722085, 0.46826704807579517] ***
*** center 1: selecting labels [1] (freq >= 2) [from [3, 0, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 33, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 5, 27]]
** centroid: 3, normalized-entropy: 0.625262405223423, [(2, 5), (3, 27)]
*** center 4: selecting labels [1] (freq >= 2) [from [14, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [12, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [6, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5835895934700965] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5835895934700965, 0.4061690657585859] ***
*** finished computation of 7 references, err: [Inf, 0.5835895934700965, 0.4061690657585859] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 2, 20]]
** centroid: 1, normalized-entropy: 0.43949698692151346, [(2, 2), (3, 20)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 7, 1]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 16, 10]]
** centroid: 3, normalized-entropy: 0.961236604722876, [(2, 16), (3, 10)]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 9]]
*** center 5: selecting labels [1] (freq >= 2) [from [16, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [17, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 2, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.511377560198307] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.511377560198307, 0.42735251907259225] ***
*** finished computation of 7 references, err: [Inf, 0.511377560198307, 0.42735251907259225] ***
*** center 1: selecting labels [1] (freq >= 2) [from [32, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 11, 8]]
** centroid: 2, normalized-entropy: 0.9819407868640977, [(2, 11), (3, 8)]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 23]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 5, 1]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 2, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 17, 1]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.9497343227267265] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9497343227267265, 0.8122975089401007] ***
*** starting iteration: 2; err: [Inf, 0.9497343227267265, 0.8122975089401007] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9497343227267265, 0.8122975089401007, 0.8024539434909821] ***
*** starting iteration: 3; err: [Inf, 0.9497343227267265, 0.8122975089401007, 0.8024539434909821] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9497343227267265, 0.8122975089401007, 0.8024539434909821, 0.8013376550376415] ***
*** starting iteration: 4; err: [Inf, 0.9497343227267265, 0.8122975089401007, 0.8024539434909821, 0.8013376550376415] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9497343227267265, 0.8122975089401007, 0.8024539434909821, 0.8013376550376415, 0.8013376550376415] ***
*** finished computation of 3 references, err: [Inf, 0.9497343227267265, 0.8122975089401007, 0.8024539434909821, 0.8013376550376415, 0.8013376550376415] ***
*** center 1: selecting labels [1] (freq >= 2) [from [20, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [15, 2, 0]]
** centroid: 2, normalized-entropy: 0.5225593745369407, [(1, 15), (2, 2)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 36, 27]]
** centroid: 3, normalized-entropy: 0.9852281360342514, [(2, 36), (3, 27)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8044206161797046] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8044206161797046, 0.673554432541132] ***
*** starting iteration: 2; err: [Inf, 0.8044206161797046, 0.673554432541132] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8044206161797046, 0.673554432541132, 0.6682735387980938] ***
*** starting iteration: 3; err: [Inf, 0.8044206161797046, 0.673554432541132, 0.6682735387980938] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8044206161797046, 0.673554432541132, 0.6682735387980938, 0.6695196518301963] ***
*** finished computation of 3 references, err: [Inf, 0.8044206161797046, 0.673554432541132, 0.6682735387980938, 0.6695196518301963] ***
*** center 1: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 2, 28]]
** centroid: 2, normalized-entropy: 0.3533593350214213, [(2, 2), (3, 28)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 25, 12]]
** centroid: 3, normalized-entropy: 0.9090221560878149, [(2, 25), (3, 12)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8689158756285906] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8689158756285906, 0.7255044630169869] ***
*** starting iteration: 2; err: [Inf, 0.8689158756285906, 0.7255044630169869] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8689158756285906, 0.7255044630169869, 0.653767962306738] ***
*** starting iteration: 3; err: [Inf, 0.8689158756285906, 0.7255044630169869, 0.653767962306738] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8689158756285906, 0.7255044630169869, 0.653767962306738, 0.6455838046967983] ***
*** starting iteration: 4; err: [Inf, 0.8689158756285906, 0.7255044630169869, 0.653767962306738, 0.6455838046967983] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8689158756285906, 0.7255044630169869, 0.653767962306738, 0.6455838046967983, 0.645306790471077] ***
*** finished computation of 3 references, err: [Inf, 0.8689158756285906, 0.7255044630169869, 0.653767962306738, 0.6455838046967983, 0.645306790471077] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 9, 31]]
** centroid: 1, normalized-entropy: 0.7691928290130138, [(2, 9), (3, 31)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 26, 2]]
** centroid: 2, normalized-entropy: 0.3712323266408756, [(2, 26), (3, 2)]
*** center 3: selecting labels [1] (freq >= 2) [from [32, 0, 0]]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.544480918943882] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.544480918943882, 0.4447143002599478] ***
*** finished computation of 7 references, err: [Inf, 0.544480918943882, 0.4447143002599478] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 1, 6]]
** centroid: 2, normalized-entropy: 0.5916727785823274, [(2, 1), (3, 6)]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 14, 2]]
** centroid: 5, normalized-entropy: 0.5435644431995963, [(2, 14), (3, 2)]
*** center 6: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 1.4764695684611797] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.4764695684611797, 0.6641027849167586] ***
*** finished computation of 7 references, err: [Inf, 1.4764695684611797, 0.6641027849167586] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [33, 1, 0]]
** centroid: 1, normalized-entropy: 0.1914332548141934, [(1, 33), (2, 1)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 2, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 14]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 8, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6054758124798536] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6054758124798536, 0.48134963437914846] ***
*** finished computation of 7 references, err: [Inf, 0.6054758124798536, 0.48134963437914846] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 3, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [19, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 15, 1]]
** centroid: 3, normalized-entropy: 0.3372900666170139, [(2, 15), (3, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 1, 22]]
** centroid: 4, normalized-entropy: 0.2580186686648155, [(2, 1), (3, 22)]
*** center 5: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 6, 10]]
** centroid: 6, normalized-entropy: 0.954434002924965, [(2, 6), (3, 10)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 10, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.8465628515183926] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8465628515183926, 0.5565382830798626] ***
*** starting iteration: 2; err: [Inf, 0.8465628515183926, 0.5565382830798626] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8465628515183926, 0.5565382830798626, 0.5250318123400212] ***
*** starting iteration: 3; err: [Inf, 0.8465628515183926, 0.5565382830798626, 0.5250318123400212] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8465628515183926, 0.5565382830798626, 0.5250318123400212, 0.5012904554605484] ***
*** starting iteration: 4; err: [Inf, 0.8465628515183926, 0.5565382830798626, 0.5250318123400212, 0.5012904554605484] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8465628515183926, 0.5565382830798626, 0.5250318123400212, 0.5012904554605484, 0.48877443447709085] ***
*** starting iteration: 5; err: [Inf, 0.8465628515183926, 0.5565382830798626, 0.5250318123400212, 0.5012904554605484, 0.48877443447709085] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8465628515183926, 0.5565382830798626, 0.5250318123400212, 0.5012904554605484, 0.48877443447709085, 0.48087092481553556] ***
*** starting iteration: 6; err: [Inf, 0.8465628515183926, 0.5565382830798626, 0.5250318123400212, 0.5012904554605484, 0.48877443447709085, 0.48087092481553556] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8465628515183926, 0.5565382830798626, 0.5250318123400212, 0.5012904554605484, 0.48877443447709085, 0.48087092481553556, 0.4708810068666935] ***
*** starting iteration: 7; err: [Inf, 0.8465628515183926, 0.5565382830798626, 0.5250318123400212, 0.5012904554605484, 0.48877443447709085, 0.48087092481553556, 0.4708810068666935] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8465628515183926, 0.5565382830798626, 0.5250318123400212, 0.5012904554605484, 0.48877443447709085, 0.48087092481553556, 0.4708810068666935, 0.4664855009317398] ***
*** starting iteration: 8; err: [Inf, 0.8465628515183926, 0.5565382830798626, 0.5250318123400212, 0.5012904554605484, 0.48877443447709085, 0.48087092481553556, 0.4708810068666935, 0.4664855009317398] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8465628515183926, 0.5565382830798626, 0.5250318123400212, 0.5012904554605484, 0.48877443447709085, 0.48087092481553556, 0.4708810068666935, 0.4664855009317398, 0.46550479471683504] ***
*** finished computation of 7 references, err: [Inf, 0.8465628515183926, 0.5565382830798626, 0.5250318123400212, 0.5012904554605484, 0.48877443447709085, 0.48087092481553556, 0.4708810068666935, 0.4664855009317398, 0.46550479471683504] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 19, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 19]]
*** center 3: selecting labels [1] (freq >= 2) [from [8, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 19, 8]]
** centroid: 4, normalized-entropy: 0.876716288999464, [(2, 19), (3, 8)]
*** center 5: selecting labels [1] (freq >= 2) [from [6, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [6, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [15, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5792418310046196] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5792418310046196, 0.48444915518164633] ***
*** starting iteration: 2; err: [Inf, 0.5792418310046196, 0.48444915518164633] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5792418310046196, 0.48444915518164633, 0.48046569734811784] ***
*** starting iteration: 3; err: [Inf, 0.5792418310046196, 0.48444915518164633, 0.48046569734811784] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5792418310046196, 0.48444915518164633, 0.48046569734811784, 0.48014337301254273] ***
*** finished computation of 7 references, err: [Inf, 0.5792418310046196, 0.48444915518164633, 0.48046569734811784, 0.48014337301254273] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 2, 25]]
** centroid: 1, normalized-entropy: 0.38094658570539014, [(2, 2), (3, 25)]
*** center 2: selecting labels [1] (freq >= 2) [from [17, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 16, 0]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 14]]
*** center 5: ignoring all elements because minimum-frequency restrictions were not met, freq >= 2, freqs: [1, 0, 0]
*** center 6: selecting labels [1] (freq >= 2) [from [15, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 9, 1]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.8654013658314943] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8654013658314943, 0.552492590919137] ***
*** starting iteration: 2; err: [Inf, 0.8654013658314943, 0.552492590919137] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8654013658314943, 0.552492590919137, 0.5019558553397655] ***
*** starting iteration: 3; err: [Inf, 0.8654013658314943, 0.552492590919137, 0.5019558553397655] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8654013658314943, 0.552492590919137, 0.5019558553397655, 0.49627156525850297] ***
*** starting iteration: 4; err: [Inf, 0.8654013658314943, 0.552492590919137, 0.5019558553397655, 0.49627156525850297] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8654013658314943, 0.552492590919137, 0.5019558553397655, 0.49627156525850297, 0.4905128374695778] ***
*** starting iteration: 5; err: [Inf, 0.8654013658314943, 0.552492590919137, 0.5019558553397655, 0.49627156525850297, 0.4905128374695778] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8654013658314943, 0.552492590919137, 0.5019558553397655, 0.49627156525850297, 0.4905128374695778, 0.4822770833969116] ***
*** starting iteration: 6; err: [Inf, 0.8654013658314943, 0.552492590919137, 0.5019558553397655, 0.49627156525850297, 0.4905128374695778, 0.4822770833969116] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8654013658314943, 0.552492590919137, 0.5019558553397655, 0.49627156525850297, 0.4905128374695778, 0.4822770833969116, 0.47727357476949694] ***
*** starting iteration: 7; err: [Inf, 0.8654013658314943, 0.552492590919137, 0.5019558553397655, 0.49627156525850297, 0.4905128374695778, 0.4822770833969116, 0.47727357476949694] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8654013658314943, 0.552492590919137, 0.5019558553397655, 0.49627156525850297, 0.4905128374695778, 0.4822770833969116, 0.47727357476949694, 0.47727357476949694] ***
*** finished computation of 7 references, err: [Inf, 0.8654013658314943, 0.552492590919137, 0.5019558553397655, 0.49627156525850297, 0.4905128374695778, 0.4822770833969116, 0.47727357476949694, 0.47727357476949694] ***
*** center 1: selecting labels [1] (freq >= 2) [from [14, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 22]]
*** center 3: selecting labels [1] (freq >= 2) [from [13, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 13, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [5, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 13, 6]]
** centroid: 6, normalized-entropy: 0.8997437586982626, [(2, 13), (3, 6)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 9, 5]]
** centroid: 7, normalized-entropy: 0.940285958670631, [(2, 9), (3, 5)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7274740009009838] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7274740009009838, 0.5419881043955683] ***
*** starting iteration: 2; err: [Inf, 0.7274740009009838, 0.5419881043955683] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7274740009009838, 0.5419881043955683, 0.5219160548970103] ***
*** starting iteration: 3; err: [Inf, 0.7274740009009838, 0.5419881043955683, 0.5219160548970103] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7274740009009838, 0.5419881043955683, 0.5219160548970103, 0.5185094596073031] ***
*** finished computation of 3 references, err: [Inf, 0.7274740009009838, 0.5419881043955683, 0.5219160548970103, 0.5185094596073031] ***
*** center 1: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 2, 21]]
** centroid: 2, normalized-entropy: 0.42622865699814483, [(2, 2), (3, 21)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 36, 6]]
** centroid: 3, normalized-entropy: 0.5916727785823274, [(2, 36), (3, 6)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8511079263687134] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8511079263687134, 0.5810318629443646] ***
*** starting iteration: 2; err: [Inf, 0.8511079263687134, 0.5810318629443646] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8511079263687134, 0.5810318629443646, 0.5765541479736567] ***
*** starting iteration: 3; err: [Inf, 0.8511079263687134, 0.5810318629443646, 0.5765541479736567] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8511079263687134, 0.5810318629443646, 0.5765541479736567, 0.5711888663470746] ***
*** finished computation of 3 references, err: [Inf, 0.8511079263687134, 0.5810318629443646, 0.5765541479736567, 0.5711888663470746] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 4, 36]]
** centroid: 1, normalized-entropy: 0.46899559358928133, [(2, 4), (3, 36)]
*** center 2: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 23, 4]]
** centroid: 3, normalized-entropy: 0.6051865766334207, [(2, 23), (3, 4)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.7978111818432808] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7978111818432808, 0.5686776540055871] ***
*** starting iteration: 2; err: [Inf, 0.7978111818432808, 0.5686776540055871] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7978111818432808, 0.5686776540055871, 0.5457258297875524] ***
*** starting iteration: 3; err: [Inf, 0.7978111818432808, 0.5686776540055871, 0.5457258297875524] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7978111818432808, 0.5686776540055871, 0.5457258297875524, 0.5401617032662034] ***
*** finished computation of 3 references, err: [Inf, 0.7978111818432808, 0.5686776540055871, 0.5457258297875524, 0.5401617032662034] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 34, 9]]
** centroid: 1, normalized-entropy: 0.7401470427139037, [(2, 34), (3, 9)]
*** center 2: selecting labels [1] (freq >= 2) [from [32, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 1, 24]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8588026113808155] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8588026113808155, 0.6435670338571071] ***
*** finished computation of 3 references, err: [Inf, 0.8588026113808155, 0.6435670338571071] ***
*** center 1: selecting labels [1] (freq >= 1) [from [35, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 38, 8]]
** centroid: 3, normalized-entropy: 0.6665783579949205, [(2, 38), (3, 8)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.936279961168766] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.936279961168766, 0.7052924366295338] ***
*** finished computation of 3 references, err: [Inf, 0.936279961168766, 0.7052924366295338] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 27, 26]]
** centroid: 1, normalized-entropy: 0.9997431860710851, [(2, 27), (3, 26)]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 14]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.937025478631258] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.937025478631258, 0.6793563839793205] ***
*** finished computation of 3 references, err: [Inf, 0.937025478631258, 0.6793563839793205] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 35, 11]]
** centroid: 1, normalized-entropy: 0.7935912300117066, [(2, 35), (3, 11)]
*** center 2: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.0015417745709418] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0015417745709418, 0.6338506470620632] ***
*** starting iteration: 2; err: [Inf, 1.0015417745709418, 0.6338506470620632] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0015417745709418, 0.6338506470620632, 0.6217867328226566] ***
*** starting iteration: 3; err: [Inf, 1.0015417745709418, 0.6338506470620632, 0.6217867328226566] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0015417745709418, 0.6338506470620632, 0.6217867328226566, 0.6184862825274468] ***
*** starting iteration: 4; err: [Inf, 1.0015417745709418, 0.6338506470620632, 0.6217867328226566, 0.6184862825274468] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0015417745709418, 0.6338506470620632, 0.6217867328226566, 0.6184862825274468, 0.6175523874163628] ***
*** finished computation of 3 references, err: [Inf, 1.0015417745709418, 0.6338506470620632, 0.6217867328226566, 0.6184862825274468, 0.6175523874163628] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 36, 6]]
** centroid: 1, normalized-entropy: 0.5916727785823274, [(2, 36), (3, 6)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 2, 21]]
** centroid: 2, normalized-entropy: 0.42622865699814483, [(2, 2), (3, 21)]
*** center 3: selecting labels [1] (freq >= 1) [from [35, 0, 0]]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.1932576695084571] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1932576695084571, 0.6742348152399064] ***
*** starting iteration: 2; err: [Inf, 1.1932576695084571, 0.6742348152399064] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1932576695084571, 0.6742348152399064, 0.6709319646656513] ***
*** starting iteration: 3; err: [Inf, 1.1932576695084571, 0.6742348152399064, 0.6709319646656513] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1932576695084571, 0.6742348152399064, 0.6709319646656513, 0.6699568350613118] ***
*** finished computation of 3 references, err: [Inf, 1.1932576695084571, 0.6742348152399064, 0.6709319646656513, 0.6699568350613118] ***
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 26]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 27, 14]]
** centroid: 3, normalized-entropy: 0.9262122127346664, [(2, 27), (3, 14)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.0866459392756225] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0866459392756225, 0.6530215778946876] ***
*** starting iteration: 2; err: [Inf, 1.0866459392756225, 0.6530215778946876] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0866459392756225, 0.6530215778946876, 0.6440623700618744] ***
*** starting iteration: 3; err: [Inf, 1.0866459392756225, 0.6530215778946876, 0.6440623700618744] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0866459392756225, 0.6530215778946876, 0.6440623700618744, 0.6437997522950173] ***
*** finished computation of 3 references, err: [Inf, 1.0866459392756225, 0.6530215778946876, 0.6440623700618744, 0.6437997522950173] ***
*** center 1: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 1, 24]]
** centroid: 2, normalized-entropy: 0.24229218908241482, [(2, 1), (3, 24)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 34, 9]]
** centroid: 3, normalized-entropy: 0.7401470427139037, [(2, 34), (3, 9)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.5783523873984814] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5783523873984814, 0.3766801550239325] ***
*** starting iteration: 2; err: [Inf, 0.5783523873984814, 0.3766801550239325] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5783523873984814, 0.3766801550239325, 0.36365194141864776] ***
*** starting iteration: 3; err: [Inf, 0.5783523873984814, 0.3766801550239325, 0.36365194141864776] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5783523873984814, 0.3766801550239325, 0.36365194141864776, 0.35777392335236075] ***
*** finished computation of 7 references, err: [Inf, 0.5783523873984814, 0.3766801550239325, 0.36365194141864776, 0.35777392335236075] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 15, 6]]
** centroid: 1, normalized-entropy: 0.8631205685666311, [(2, 15), (3, 6)]
*** center 2: selecting labels [1] (freq >= 2) [from [19, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 7, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [16, 0, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 14]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 16, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6396324272453785] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6396324272453785, 0.44186546966433526] ***
*** starting iteration: 2; err: [Inf, 0.6396324272453785, 0.44186546966433526] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6396324272453785, 0.44186546966433526, 0.4352803279459476] ***
*** starting iteration: 3; err: [Inf, 0.6396324272453785, 0.44186546966433526, 0.4352803279459476] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6396324272453785, 0.44186546966433526, 0.4352803279459476, 0.43579412169754506] ***
*** finished computation of 7 references, err: [Inf, 0.6396324272453785, 0.44186546966433526, 0.4352803279459476, 0.43579412169754506] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 14, 1]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 8]]
*** center 3: selecting labels [1] (freq >= 2) [from [17, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 13, 29]]
** centroid: 4, normalized-entropy: 0.8926230133850988, [(2, 13), (3, 29)]
*** center 5: ignoring all elements because minimum-frequency restrictions were not met, freq >= 2, freqs: [1, 0, 0]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 2]]
*** center 7: selecting labels [1] (freq >= 2) [from [15, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6153967739641666] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6153967739641666, 0.42161345161497593] ***
*** starting iteration: 2; err: [Inf, 0.6153967739641666, 0.42161345161497593] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6153967739641666, 0.42161345161497593, 0.40454206623136996] ***
*** starting iteration: 3; err: [Inf, 0.6153967739641666, 0.42161345161497593, 0.40454206623136996] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6153967739641666, 0.42161345161497593, 0.40454206623136996, 0.3938440129160881] ***
*** finished computation of 7 references, err: [Inf, 0.6153967739641666, 0.42161345161497593, 0.40454206623136996, 0.3938440129160881] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 17, 1]]
*** center 2: selecting labels [1] (freq >= 2) [from [23, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 4]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 7, 14]]
** centroid: 4, normalized-entropy: 0.9182958340544894, [(2, 7), (3, 14)]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 8]]
*** center 6: selecting labels [1] (freq >= 2) [from [9, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 11, 6]]
** centroid: 7, normalized-entropy: 0.9366673818775627, [(2, 11), (3, 6)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5325150572508573] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5325150572508573, 0.4000343594327569] ***
*** starting iteration: 2; err: [Inf, 0.5325150572508573, 0.4000343594327569] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5325150572508573, 0.4000343594327569, 0.3964333289861679] ***
*** starting iteration: 3; err: [Inf, 0.5325150572508573, 0.4000343594327569, 0.3964333289861679] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5325150572508573, 0.4000343594327569, 0.3964333289861679, 0.3910656041651964] ***
*** starting iteration: 4; err: [Inf, 0.5325150572508573, 0.4000343594327569, 0.3964333289861679, 0.3910656041651964] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5325150572508573, 0.4000343594327569, 0.3964333289861679, 0.3910656041651964, 0.3877201167494059] ***
*** starting iteration: 5; err: [Inf, 0.5325150572508573, 0.4000343594327569, 0.3964333289861679, 0.3910656041651964, 0.3877201167494059] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5325150572508573, 0.4000343594327569, 0.3964333289861679, 0.3910656041651964, 0.3877201167494059, 0.3863886694610119] ***
*** starting iteration: 6; err: [Inf, 0.5325150572508573, 0.4000343594327569, 0.3964333289861679, 0.3910656041651964, 0.3877201167494059, 0.3863886694610119] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5325150572508573, 0.4000343594327569, 0.3964333289861679, 0.3910656041651964, 0.3877201167494059, 0.3863886694610119, 0.38562808342278004] ***
*** finished computation of 7 references, err: [Inf, 0.5325150572508573, 0.4000343594327569, 0.3964333289861679, 0.3910656041651964, 0.3877201167494059, 0.3863886694610119, 0.38562808342278004] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 23, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [16, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 2]]
*** center 4: selecting labels [1] (freq >= 2) [from [19, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 5, 20]]
** centroid: 5, normalized-entropy: 0.7219280948873623, [(2, 5), (3, 20)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 10, 0]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 5]]
finished with 8 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 16)
[0.98, 0.98, 0.9666666666666667, 0.9666666666666667, 0.9533333333333333, 0.9466666666666667, 0.9400000000000001, 0.94, 0.94, 0.94, 0.9333333333333332, 0.9199999999999999, 0.9199999999999999, 0.9133333333333334, 0.9066666666666666, 0.9066666666666666]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.98
finished with 17
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.5676544116437435] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5676544116437435, 0.47120587062090635] ***
*** starting iteration: 2; err: [Inf, 0.5676544116437435, 0.47120587062090635] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5676544116437435, 0.47120587062090635, 0.4447525429725647] ***
*** starting iteration: 3; err: [Inf, 0.5676544116437435, 0.47120587062090635, 0.4447525429725647] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5676544116437435, 0.47120587062090635, 0.4447525429725647, 0.429119089692831] ***
*** finished computation of 7 references, err: [Inf, 0.5676544116437435, 0.47120587062090635, 0.4447525429725647, 0.429119089692831] ***
*** center 1: selecting labels [1] (freq >= 2) [from [20, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 14, 1]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 14]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 10, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [15, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 14, 5]]
** centroid: 7, normalized-entropy: 0.8314743880097292, [(2, 14), (3, 5)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7596460594236851] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7596460594236851, 0.46844936825335026] ***
*** starting iteration: 2; err: [Inf, 0.7596460594236851, 0.46844936825335026] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7596460594236851, 0.46844936825335026, 0.453986438959837] ***
*** starting iteration: 3; err: [Inf, 0.7596460594236851, 0.46844936825335026, 0.453986438959837] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7596460594236851, 0.46844936825335026, 0.453986438959837, 0.4503305973112583] ***
*** finished computation of 7 references, err: [Inf, 0.7596460594236851, 0.46844936825335026, 0.453986438959837, 0.4503305973112583] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 20]]
*** center 2: selecting labels [1] (freq >= 2) [from [16, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 4, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [17, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 16, 12]]
** centroid: 5, normalized-entropy: 0.9852281360342514, [(2, 16), (3, 12)]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 7, 1]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6688597859442234] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6688597859442234, 0.49247013688087465] ***
*** starting iteration: 2; err: [Inf, 0.6688597859442234, 0.49247013688087465] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6688597859442234, 0.49247013688087465, 0.46470919825136664] ***
*** starting iteration: 3; err: [Inf, 0.6688597859442234, 0.49247013688087465, 0.46470919825136664] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6688597859442234, 0.49247013688087465, 0.46470919825136664, 0.45547576539218426] ***
*** finished computation of 7 references, err: [Inf, 0.6688597859442234, 0.49247013688087465, 0.46470919825136664, 0.45547576539218426] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 19, 1]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 4]]
*** center 3: selecting labels [1] (freq >= 2) [from [19, 0, 0]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 16]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 16, 8]]
** centroid: 5, normalized-entropy: 0.9182958340544894, [(2, 16), (3, 8)]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 4]]
*** center 7: selecting labels [1] (freq >= 2) [from [13, 0, 0]]
finished with 8 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 17)
[0.98, 0.98, 0.9666666666666667, 0.9666666666666667, 0.9666666666666667, 0.9533333333333333, 0.9466666666666667, 0.9400000000000001, 0.94, 0.94, 0.94, 0.9333333333333332, 0.9199999999999999, 0.9199999999999999, 0.9133333333333334, 0.9066666666666666, 0.9066666666666666]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.98
finished with 19
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.4323460210859775] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4323460210859775, 0.3875675314664841] ***
*** finished computation of 7 references, err: [Inf, 0.4323460210859775, 0.3875675314664841] ***
*** center 1: selecting labels [1] (freq >= 1) [from [28, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 21, 2]]
** centroid: 3, normalized-entropy: 0.42622865699814483, [(2, 21), (3, 2)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 1, 16]]
** centroid: 4, normalized-entropy: 0.32275695889739825, [(2, 1), (3, 16)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 11, 2]]
** centroid: 7, normalized-entropy: 0.6193821946787638, [(2, 11), (3, 2)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6204051777720452] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6204051777720452, 0.4337788352370262] ***
*** finished computation of 7 references, err: [Inf, 0.6204051777720452, 0.4337788352370262] ***
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 5]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 7, 2]]
** centroid: 3, normalized-entropy: 0.7642045065086204, [(2, 7), (3, 2)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 15, 13]]
** centroid: 4, normalized-entropy: 0.9963165195589622, [(2, 15), (3, 13)]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5589832565933466] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5589832565933466, 0.4087777300551534] ***
*** finished computation of 7 references, err: [Inf, 0.5589832565933466, 0.4087777300551534] ***
*** center 1: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 13, 2]]
** centroid: 3, normalized-entropy: 0.5665095065529052, [(2, 13), (3, 2)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 15, 7]]
** centroid: 4, normalized-entropy: 0.9023932827949788, [(2, 15), (3, 7)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.774502364397049] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.774502364397049, 0.4455654451996088] ***
*** finished computation of 7 references, err: [Inf, 0.774502364397049, 0.4455654451996088] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 14, 6]]
** centroid: 1, normalized-entropy: 0.8812908992306927, [(2, 14), (3, 6)]
*** center 2: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 16, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [12, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 8, 1]]
** centroid: 6, normalized-entropy: 0.5032583347756457, [(2, 8), (3, 1)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 13]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7500686201453209] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7500686201453209, 0.4788039258122444] ***
*** finished computation of 7 references, err: [Inf, 0.7500686201453209, 0.4788039258122444] ***
*** center 1: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 8, 2]]
** centroid: 3, normalized-entropy: 0.7219280948873623, [(2, 8), (3, 2)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 14, 14]]
** centroid: 4, normalized-entropy: 1.0, [(2, 14), (3, 14)]
*** center 5: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6636019313335418] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6636019313335418, 0.4602846166491508] ***
*** finished computation of 7 references, err: [Inf, 0.6636019313335418, 0.4602846166491508] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 2: selecting labels [1] (freq >= 1) [from [19, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 18, 1]]
** centroid: 3, normalized-entropy: 0.2974722489192896, [(2, 18), (3, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 4, 10]]
** centroid: 4, normalized-entropy: 0.8631205685666311, [(2, 4), (3, 10)]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 5]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
finished with 8 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 19)
[0.98, 0.98, 0.9733333333333333, 0.9666666666666667, 0.9666666666666667, 0.9666666666666667, 0.96, 0.9533333333333333, 0.9466666666666667, 0.9400000000000001, 0.94, 0.94, 0.94, 0.9333333333333332, 0.9199999999999999, 0.9199999999999999, 0.9133333333333334, 0.9066666666666666, 0.9066666666666666]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.98
finished with 20
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.5982276152074337] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5982276152074337, 0.41411275826394556] ***
*** starting iteration: 2; err: [Inf, 0.5982276152074337, 0.41411275826394556] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5982276152074337, 0.41411275826394556, 0.40152419347316026] ***
*** starting iteration: 3; err: [Inf, 0.5982276152074337, 0.41411275826394556, 0.40152419347316026] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5982276152074337, 0.41411275826394556, 0.40152419347316026, 0.3970265685394406] ***
*** starting iteration: 4; err: [Inf, 0.5982276152074337, 0.41411275826394556, 0.40152419347316026, 0.3970265685394406] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5982276152074337, 0.41411275826394556, 0.40152419347316026, 0.3970265685394406, 0.39587858054786923] ***
*** starting iteration: 5; err: [Inf, 0.5982276152074337, 0.41411275826394556, 0.40152419347316026, 0.3970265685394406, 0.39587858054786923] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5982276152074337, 0.41411275826394556, 0.40152419347316026, 0.3970265685394406, 0.39587858054786923, 0.3944402000680566] ***
*** starting iteration: 6; err: [Inf, 0.5982276152074337, 0.41411275826394556, 0.40152419347316026, 0.3970265685394406, 0.39587858054786923, 0.3944402000680566] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5982276152074337, 0.41411275826394556, 0.40152419347316026, 0.3970265685394406, 0.39587858054786923, 0.3944402000680566, 0.3935947377607226] ***
*** finished computation of 7 references, err: [Inf, 0.5982276152074337, 0.41411275826394556, 0.40152419347316026, 0.3970265685394406, 0.39587858054786923, 0.3944402000680566, 0.3935947377607226] ***
*** center 1: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 13]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 4]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 3, 10]]
** centroid: 4, normalized-entropy: 0.7793498372920851, [(2, 3), (3, 10)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 20, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 11, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 4, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.8202719761431218] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8202719761431218, 0.615616706609726] ***
*** starting iteration: 2; err: [Inf, 0.8202719761431218, 0.615616706609726] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8202719761431218, 0.615616706609726, 0.6185796348005533] ***
*** finished computation of 7 references, err: [Inf, 0.8202719761431218, 0.615616706609726, 0.6185796348005533] ***
*** center 1: selecting labels [1] (freq >= 2) [from [4, 0, 0]]
*** center 2: ignoring all elements because minimum-frequency restrictions were not met, freq >= 2, freqs: [1, 0, 0]
*** center 3: selecting labels [1] (freq >= 2) [from [2, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [7, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [6, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [13, 1, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 26, 40]]
** centroid: 7, normalized-entropy: 0.9672947789468944, [(2, 26), (3, 40)]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5270192037522793] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5270192037522793, 0.43405207093805076] ***
*** starting iteration: 2; err: [Inf, 0.5270192037522793, 0.43405207093805076] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5270192037522793, 0.43405207093805076, 0.41299845330417156] ***
*** starting iteration: 3; err: [Inf, 0.5270192037522793, 0.43405207093805076, 0.41299845330417156] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5270192037522793, 0.43405207093805076, 0.41299845330417156, 0.4117411931604147] ***
*** starting iteration: 4; err: [Inf, 0.5270192037522793, 0.43405207093805076, 0.41299845330417156, 0.4117411931604147] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5270192037522793, 0.43405207093805076, 0.41299845330417156, 0.4117411931604147, 0.4104103758186102] ***
*** starting iteration: 5; err: [Inf, 0.5270192037522793, 0.43405207093805076, 0.41299845330417156, 0.4117411931604147, 0.4104103758186102] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5270192037522793, 0.43405207093805076, 0.41299845330417156, 0.4117411931604147, 0.4104103758186102, 0.408015393987298] ***
*** starting iteration: 6; err: [Inf, 0.5270192037522793, 0.43405207093805076, 0.41299845330417156, 0.4117411931604147, 0.4104103758186102, 0.408015393987298] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5270192037522793, 0.43405207093805076, 0.41299845330417156, 0.4117411931604147, 0.4104103758186102, 0.408015393987298, 0.40768099032342436] ***
*** finished computation of 7 references, err: [Inf, 0.5270192037522793, 0.43405207093805076, 0.41299845330417156, 0.4117411931604147, 0.4104103758186102, 0.408015393987298, 0.40768099032342436] ***
*** center 1: selecting labels [1] (freq >= 2) [from [8, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [7, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [15, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 18, 1]]
*** center 5: selecting labels [1] (freq >= 2) [from [2, 0, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 22]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 17, 10]]
** centroid: 7, normalized-entropy: 0.9509560484549724, [(2, 17), (3, 10)]
finished with 8 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 20)
[0.98, 0.98, 0.9733333333333333, 0.9666666666666667, 0.9666666666666667, 0.9666666666666667, 0.96, 0.9533333333333333, 0.9466666666666667, 0.9400000000000001, 0.94, 0.94, 0.94, 0.9333333333333332, 0.9199999999999999, 0.9199999999999999, 0.9199999999999999, 0.9133333333333334, 0.9066666666666666, 0.9066666666666666]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.98
finished with 22
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.5381410479545593] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5381410479545593, 0.36689374383538964] ***
*** starting iteration: 2; err: [Inf, 0.5381410479545593, 0.36689374383538964] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5381410479545593, 0.36689374383538964, 0.36358833495527504] ***
*** starting iteration: 3; err: [Inf, 0.5381410479545593, 0.36689374383538964, 0.36358833495527504] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5381410479545593, 0.36689374383538964, 0.36358833495527504, 0.35981055330485107] ***
*** starting iteration: 4; err: [Inf, 0.5381410479545593, 0.36689374383538964, 0.36358833495527504, 0.35981055330485107] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5381410479545593, 0.36689374383538964, 0.36358833495527504, 0.35981055330485107, 0.3590748874470592] ***
*** finished computation of 7 references, err: [Inf, 0.5381410479545593, 0.36689374383538964, 0.36358833495527504, 0.35981055330485107, 0.3590748874470592] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 4: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 1, 17]]
** centroid: 5, normalized-entropy: 0.3095434291503252, [(2, 1), (3, 17)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 3, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 13, 3]]
** centroid: 7, normalized-entropy: 0.6962122601251459, [(2, 13), (3, 3)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6426936295628548] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6426936295628548, 0.44825568325817583] ***
*** starting iteration: 2; err: [Inf, 0.6426936295628548, 0.44825568325817583] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6426936295628548, 0.44825568325817583, 0.42772185496985915] ***
*** starting iteration: 3; err: [Inf, 0.6426936295628548, 0.44825568325817583, 0.42772185496985915] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6426936295628548, 0.44825568325817583, 0.42772185496985915, 0.4187885554879904] ***
*** starting iteration: 4; err: [Inf, 0.6426936295628548, 0.44825568325817583, 0.42772185496985915, 0.4187885554879904] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6426936295628548, 0.44825568325817583, 0.42772185496985915, 0.4187885554879904, 0.4101143320649862] ***
*** starting iteration: 5; err: [Inf, 0.6426936295628548, 0.44825568325817583, 0.42772185496985915, 0.4187885554879904, 0.4101143320649862] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6426936295628548, 0.44825568325817583, 0.42772185496985915, 0.4187885554879904, 0.4101143320649862, 0.3917318717390299] ***
*** starting iteration: 6; err: [Inf, 0.6426936295628548, 0.44825568325817583, 0.42772185496985915, 0.4187885554879904, 0.4101143320649862, 0.3917318717390299] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6426936295628548, 0.44825568325817583, 0.42772185496985915, 0.4187885554879904, 0.4101143320649862, 0.3917318717390299, 0.38771689765155315] ***
*** starting iteration: 7; err: [Inf, 0.6426936295628548, 0.44825568325817583, 0.42772185496985915, 0.4187885554879904, 0.4101143320649862, 0.3917318717390299, 0.38771689765155315] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6426936295628548, 0.44825568325817583, 0.42772185496985915, 0.4187885554879904, 0.4101143320649862, 0.3917318717390299, 0.38771689765155315, 0.38674085311591627] ***
*** finished computation of 7 references, err: [Inf, 0.6426936295628548, 0.44825568325817583, 0.42772185496985915, 0.4187885554879904, 0.4101143320649862, 0.3917318717390299, 0.38771689765155315, 0.38674085311591627] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 16, 12]]
** centroid: 1, normalized-entropy: 0.9852281360342514, [(2, 16), (3, 12)]
*** center 2: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 11, 1]]
** centroid: 4, normalized-entropy: 0.4138168503036336, [(2, 11), (3, 1)]
*** center 5: selecting labels [1] (freq >= 1) [from [1, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 7: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5744943900406361] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5744943900406361, 0.3872021472454071] ***
*** starting iteration: 2; err: [Inf, 0.5744943900406361, 0.3872021472454071] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5744943900406361, 0.3872021472454071, 0.37129729956388474] ***
*** starting iteration: 3; err: [Inf, 0.5744943900406361, 0.3872021472454071, 0.37129729956388474] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5744943900406361, 0.3872021472454071, 0.37129729956388474, 0.3683329448103905] ***
*** starting iteration: 4; err: [Inf, 0.5744943900406361, 0.3872021472454071, 0.37129729956388474, 0.3683329448103905] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5744943900406361, 0.3872021472454071, 0.37129729956388474, 0.3683329448103905, 0.3683329448103905] ***
*** finished computation of 7 references, err: [Inf, 0.5744943900406361, 0.3872021472454071, 0.37129729956388474, 0.3683329448103905, 0.3683329448103905] ***
*** center 1: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 14, 1]]
** centroid: 3, normalized-entropy: 0.3533593350214213, [(2, 14), (3, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 15, 8]]
** centroid: 4, normalized-entropy: 0.9321115676166747, [(2, 15), (3, 8)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [9, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6804410581290722] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6804410581290722, 0.4632981251180172] ***
*** starting iteration: 2; err: [Inf, 0.6804410581290722, 0.4632981251180172] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6804410581290722, 0.4632981251180172, 0.45637473911046983] ***
*** starting iteration: 3; err: [Inf, 0.6804410581290722, 0.4632981251180172, 0.45637473911046983] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6804410581290722, 0.4632981251180172, 0.45637473911046983, 0.4530989895761013] ***
*** starting iteration: 4; err: [Inf, 0.6804410581290722, 0.4632981251180172, 0.45637473911046983, 0.4530989895761013] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6804410581290722, 0.4632981251180172, 0.45637473911046983, 0.4530989895761013, 0.45083628565073014] ***
*** starting iteration: 5; err: [Inf, 0.6804410581290722, 0.4632981251180172, 0.45637473911046983, 0.4530989895761013, 0.45083628565073014] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6804410581290722, 0.4632981251180172, 0.45637473911046983, 0.4530989895761013, 0.45083628565073014, 0.44943788528442385] ***
*** starting iteration: 6; err: [Inf, 0.6804410581290722, 0.4632981251180172, 0.45637473911046983, 0.4530989895761013, 0.45083628565073014, 0.44943788528442385] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6804410581290722, 0.4632981251180172, 0.45637473911046983, 0.4530989895761013, 0.45083628565073014, 0.44943788528442385, 0.44943788528442385] ***
*** finished computation of 7 references, err: [Inf, 0.6804410581290722, 0.4632981251180172, 0.45637473911046983, 0.4530989895761013, 0.45083628565073014, 0.44943788528442385, 0.44943788528442385] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 13]]
*** center 2: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 2, 5]]
** centroid: 7, normalized-entropy: 0.8631205685666311, [(2, 2), (3, 5)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7567573444545269] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7567573444545269, 0.4778764870762825] ***
*** starting iteration: 2; err: [Inf, 0.7567573444545269, 0.4778764870762825] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7567573444545269, 0.4778764870762825, 0.45391829147934915] ***
*** starting iteration: 3; err: [Inf, 0.7567573444545269, 0.4778764870762825, 0.45391829147934915] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7567573444545269, 0.4778764870762825, 0.45391829147934915, 0.45063073068857196] ***
*** starting iteration: 4; err: [Inf, 0.7567573444545269, 0.4778764870762825, 0.45391829147934915, 0.45063073068857196] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7567573444545269, 0.4778764870762825, 0.45391829147934915, 0.45063073068857196, 0.45015953972935674] ***
*** finished computation of 7 references, err: [Inf, 0.7567573444545269, 0.4778764870762825, 0.45391829147934915, 0.45063073068857196, 0.45015953972935674] ***
*** center 1: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 9, 1]]
** centroid: 3, normalized-entropy: 0.46899559358928133, [(2, 9), (3, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 13, 13]]
** centroid: 4, normalized-entropy: 1.0, [(2, 13), (3, 13)]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6576663213968277] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6576663213968277, 0.5026047420501709] ***
*** starting iteration: 2; err: [Inf, 0.6576663213968277, 0.5026047420501709] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6576663213968277, 0.5026047420501709, 0.49016469188034534] ***
*** starting iteration: 3; err: [Inf, 0.6576663213968277, 0.5026047420501709, 0.49016469188034534] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6576663213968277, 0.5026047420501709, 0.49016469188034534, 0.4787665270268917] ***
*** starting iteration: 4; err: [Inf, 0.6576663213968277, 0.5026047420501709, 0.49016469188034534, 0.4787665270268917] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6576663213968277, 0.5026047420501709, 0.49016469188034534, 0.4787665270268917, 0.47376689620316026] ***
*** starting iteration: 5; err: [Inf, 0.6576663213968277, 0.5026047420501709, 0.49016469188034534, 0.4787665270268917, 0.47376689620316026] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6576663213968277, 0.5026047420501709, 0.49016469188034534, 0.4787665270268917, 0.47376689620316026, 0.46985534064471723] ***
*** starting iteration: 6; err: [Inf, 0.6576663213968277, 0.5026047420501709, 0.49016469188034534, 0.4787665270268917, 0.47376689620316026, 0.46985534064471723] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6576663213968277, 0.5026047420501709, 0.49016469188034534, 0.4787665270268917, 0.47376689620316026, 0.46985534064471723, 0.4664856170862913] ***
*** starting iteration: 7; err: [Inf, 0.6576663213968277, 0.5026047420501709, 0.49016469188034534, 0.4787665270268917, 0.47376689620316026, 0.46985534064471723, 0.4664856170862913] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6576663213968277, 0.5026047420501709, 0.49016469188034534, 0.4787665270268917, 0.47376689620316026, 0.46985534064471723, 0.4664856170862913, 0.459425652846694] ***
*** starting iteration: 8; err: [Inf, 0.6576663213968277, 0.5026047420501709, 0.49016469188034534, 0.4787665270268917, 0.47376689620316026, 0.46985534064471723, 0.4664856170862913, 0.459425652846694] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6576663213968277, 0.5026047420501709, 0.49016469188034534, 0.4787665270268917, 0.47376689620316026, 0.46985534064471723, 0.4664856170862913, 0.459425652846694, 0.4568402101844549] ***
*** starting iteration: 9; err: [Inf, 0.6576663213968277, 0.5026047420501709, 0.49016469188034534, 0.4787665270268917, 0.47376689620316026, 0.46985534064471723, 0.4664856170862913, 0.459425652846694, 0.4568402101844549] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6576663213968277, 0.5026047420501709, 0.49016469188034534, 0.4787665270268917, 0.47376689620316026, 0.46985534064471723, 0.4664856170862913, 0.459425652846694, 0.4568402101844549, 0.45575570888817313] ***
*** starting iteration: 10; err: [Inf, 0.6576663213968277, 0.5026047420501709, 0.49016469188034534, 0.4787665270268917, 0.47376689620316026, 0.46985534064471723, 0.4664856170862913, 0.459425652846694, 0.4568402101844549, 0.45575570888817313] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6576663213968277, 0.5026047420501709, 0.49016469188034534, 0.4787665270268917, 0.47376689620316026, 0.46985534064471723, 0.4664856170862913, 0.459425652846694, 0.4568402101844549, 0.45575570888817313, 0.45575570888817313] ***
*** finished computation of 7 references, err: [Inf, 0.6576663213968277, 0.5026047420501709, 0.49016469188034534, 0.4787665270268917, 0.47376689620316026, 0.46985534064471723, 0.4664856170862913, 0.459425652846694, 0.4568402101844549, 0.45575570888817313, 0.45575570888817313] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 14]]
*** center 2: selecting labels [1] (freq >= 1) [from [19, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 17, 1]]
** centroid: 3, normalized-entropy: 0.3095434291503252, [(2, 17), (3, 1)]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 18, 8]]
** centroid: 5, normalized-entropy: 0.8904916402194913, [(2, 18), (3, 8)]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 7: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
finished with 9 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 22)
[0.98, 0.98, 0.9733333333333333, 0.9666666666666667, 0.9666666666666667, 0.9666666666666667, 0.96, 0.96, 0.9533333333333333, 0.9466666666666667, 0.9400000000000001, 0.9400000000000001, 0.94, 0.94, 0.94, 0.9333333333333332, 0.9199999999999999, 0.9199999999999999, 0.9199999999999999, 0.9133333333333334, 0.9066666666666666, 0.9066666666666666]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.98
finished with 24
iteration 6 finished
*** starting iteration: 1; err: [Inf, 1.1440969586372376] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1440969586372376, 0.6438503605127335] ***
*** starting iteration: 2; err: [Inf, 1.1440969586372376, 0.6438503605127335] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1440969586372376, 0.6438503605127335, 0.6232400624454022] ***
*** starting iteration: 3; err: [Inf, 1.1440969586372376, 0.6438503605127335, 0.6232400624454022] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1440969586372376, 0.6438503605127335, 0.6232400624454022, 0.6209130629897117] ***
*** starting iteration: 4; err: [Inf, 1.1440969586372376, 0.6438503605127335, 0.6232400624454022, 0.6209130629897117] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1440969586372376, 0.6438503605127335, 0.6232400624454022, 0.6209130629897117, 0.6196299785375595] ***
*** starting iteration: 5; err: [Inf, 1.1440969586372376, 0.6438503605127335, 0.6232400624454022, 0.6209130629897117, 0.6196299785375595] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1440969586372376, 0.6438503605127335, 0.6232400624454022, 0.6209130629897117, 0.6196299785375595, 0.6159848375618457] ***
*** starting iteration: 6; err: [Inf, 1.1440969586372376, 0.6438503605127335, 0.6232400624454022, 0.6209130629897117, 0.6196299785375595, 0.6159848375618457] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1440969586372376, 0.6438503605127335, 0.6232400624454022, 0.6209130629897117, 0.6196299785375595, 0.6159848375618457, 0.6150600105524063] ***
*** finished computation of 3 references, err: [Inf, 1.1440969586372376, 0.6438503605127335, 0.6232400624454022, 0.6209130629897117, 0.6196299785375595, 0.6159848375618457, 0.6150600105524063] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 34, 3]]
** centroid: 1, normalized-entropy: 0.40597703847557104, [(2, 34), (3, 3)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 4, 24]]
** centroid: 2, normalized-entropy: 0.5916727785823274, [(2, 4), (3, 24)]
*** center 3: selecting labels [1] (freq >= 1) [from [35, 0, 0]]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 2.9469452780485152] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.9469452780485152, 1.0010556346178054] ***
*** starting iteration: 2; err: [Inf, 2.9469452780485152, 1.0010556346178054] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.9469452780485152, 1.0010556346178054, 0.7853384131193161] ***
*** starting iteration: 3; err: [Inf, 2.9469452780485152, 1.0010556346178054, 0.7853384131193161] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.9469452780485152, 1.0010556346178054, 0.7853384131193161, 0.7852110396325588] ***
*** finished computation of 3 references, err: [Inf, 2.9469452780485152, 1.0010556346178054, 0.7853384131193161, 0.7852110396325588] ***
*** center 1: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [16, 2, 0]]
** centroid: 2, normalized-entropy: 0.5032583347756457, [(1, 16), (2, 2)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 25, 40]]
** centroid: 3, normalized-entropy: 0.961236604722876, [(2, 25), (3, 40)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.7264433727413416] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7264433727413416, 0.644591483026743] ***
*** starting iteration: 2; err: [Inf, 0.7264433727413416, 0.644591483026743] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7264433727413416, 0.644591483026743, 0.6447047236561775] ***
*** finished computation of 3 references, err: [Inf, 0.7264433727413416, 0.644591483026743, 0.6447047236561775] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 33, 9]]
** centroid: 1, normalized-entropy: 0.7495952572594798, [(2, 33), (3, 9)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 2, 24]]
** centroid: 2, normalized-entropy: 0.3912435636292556, [(2, 2), (3, 24)]
*** center 3: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 2.2599328081309795] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.2599328081309795, 0.7349310837686062] ***
*** starting iteration: 2; err: [Inf, 2.2599328081309795, 0.7349310837686062] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.2599328081309795, 0.7349310837686062, 0.6541859632730485] ***
*** starting iteration: 3; err: [Inf, 2.2599328081309795, 0.7349310837686062, 0.6541859632730485] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.2599328081309795, 0.7349310837686062, 0.6541859632730485, 0.6486912743747234] ***
*** starting iteration: 4; err: [Inf, 2.2599328081309795, 0.7349310837686062, 0.6541859632730485, 0.6486912743747234] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.2599328081309795, 0.7349310837686062, 0.6541859632730485, 0.6486912743747234, 0.648340115621686] ***
*** finished computation of 3 references, err: [Inf, 2.2599328081309795, 0.7349310837686062, 0.6541859632730485, 0.6486912743747234, 0.648340115621686] ***
*** center 1: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [20, 1, 0]]
** centroid: 2, normalized-entropy: 0.2761954276479391, [(1, 20), (2, 1)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 37, 27]]
** centroid: 3, normalized-entropy: 0.9823166080205502, [(2, 37), (3, 27)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.6662235808372498] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6662235808372498, 0.5666482926905155] ***
*** starting iteration: 2; err: [Inf, 0.6662235808372498, 0.5666482926905155] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6662235808372498, 0.5666482926905155, 0.5627821503579616] ***
*** starting iteration: 3; err: [Inf, 0.6662235808372498, 0.5666482926905155, 0.5627821503579616] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6662235808372498, 0.5666482926905155, 0.5627821503579616, 0.562567928135395] ***
*** finished computation of 3 references, err: [Inf, 0.6662235808372498, 0.5666482926905155, 0.5627821503579616, 0.562567928135395] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 2, 28]]
** centroid: 1, normalized-entropy: 0.3533593350214213, [(2, 2), (3, 28)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 25, 12]]
** centroid: 2, normalized-entropy: 0.9090221560878149, [(2, 25), (3, 12)]
*** center 3: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9428900584578515] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9428900584578515, 0.70949228271842] ***
*** starting iteration: 2; err: [Inf, 0.9428900584578515, 0.70949228271842] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9428900584578515, 0.70949228271842, 0.6928865392506123] ***
*** starting iteration: 3; err: [Inf, 0.9428900584578515, 0.70949228271842, 0.6928865392506123] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9428900584578515, 0.70949228271842, 0.6928865392506123, 0.69359474375844] ***
*** finished computation of 3 references, err: [Inf, 0.9428900584578515, 0.70949228271842, 0.6928865392506123, 0.69359474375844] ***
*** center 1: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 32, 33]]
** centroid: 2, normalized-entropy: 0.9998292601233937, [(2, 32), (3, 33)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [10, 3, 0]]
** centroid: 3, normalized-entropy: 0.7793498372920851, [(1, 10), (2, 3)]
finished with 5 centroids; started with 3
generating 4 configurations using top 4 configurations, starting with 24)
[0.98, 0.98, 0.9733333333333333, 0.9666666666666667, 0.9666666666666667, 0.9666666666666667, 0.96, 0.96, 0.96, 0.9533333333333333, 0.9466666666666667, 0.9400000000000001, 0.9400000000000001, 0.94, 0.94, 0.94, 0.9333333333333332, 0.9266666666666666, 0.9199999999999999, 0.9199999999999999, 0.9199999999999999, 0.9133333333333334, 0.9066666666666666, 0.9066666666666666]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.98
finished with 24
iteration 7 finished
generating 4 configurations using top 4 configurations, starting with 24)
[0.98, 0.98, 0.9733333333333333, 0.9666666666666667, 0.9666666666666667, 0.9666666666666667, 0.96, 0.96, 0.96, 0.9533333333333333, 0.9466666666666667, 0.9400000000000001, 0.9400000000000001, 0.94, 0.94, 0.94, 0.9333333333333332, 0.9266666666666666, 0.9199999999999999, 0.9199999999999999, 0.9199999999999999, 0.9133333333333334, 0.9066666666666666, 0.9066666666666666]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.98
finished with 24
iteration 8 finished
generating 4 configurations using top 4 configurations, starting with 24)
[0.98, 0.98, 0.9733333333333333, 0.9666666666666667, 0.9666666666666667, 0.9666666666666667, 0.96, 0.96, 0.96, 0.9533333333333333, 0.9466666666666667, 0.9400000000000001, 0.9400000000000001, 0.94, 0.94, 0.94, 0.9333333333333332, 0.9266666666666666, 0.9199999999999999, 0.9199999999999999, 0.9199999999999999, 0.9133333333333334, 0.9066666666666666, 0.9066666666666666]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.98
finished with 25
iteration 9 finished
*** starting iteration: 1; err: [Inf, 0.49070911303162573] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.49070911303162573, 0.39811810534447434] ***
*** starting iteration: 2; err: [Inf, 0.49070911303162573, 0.39811810534447434] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.49070911303162573, 0.39811810534447434, 0.38831076938658954] ***
*** starting iteration: 3; err: [Inf, 0.49070911303162573, 0.39811810534447434, 0.38831076938658954] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.49070911303162573, 0.39811810534447434, 0.38831076938658954, 0.38678203634917735] ***
*** starting iteration: 4; err: [Inf, 0.49070911303162573, 0.39811810534447434, 0.38831076938658954, 0.38678203634917735] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.49070911303162573, 0.39811810534447434, 0.38831076938658954, 0.38678203634917735, 0.38391026671975853] ***
*** starting iteration: 5; err: [Inf, 0.49070911303162573, 0.39811810534447434, 0.38831076938658954, 0.38678203634917735, 0.38391026671975853] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.49070911303162573, 0.39811810534447434, 0.38831076938658954, 0.38678203634917735, 0.38391026671975853, 0.37561016593128443] ***
*** starting iteration: 6; err: [Inf, 0.49070911303162573, 0.39811810534447434, 0.38831076938658954, 0.38678203634917735, 0.38391026671975853, 0.37561016593128443] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.49070911303162573, 0.39811810534447434, 0.38831076938658954, 0.38678203634917735, 0.38391026671975853, 0.37561016593128443, 0.37222057100385425] ***
*** starting iteration: 7; err: [Inf, 0.49070911303162573, 0.39811810534447434, 0.38831076938658954, 0.38678203634917735, 0.38391026671975853, 0.37561016593128443, 0.37222057100385425] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.49070911303162573, 0.39811810534447434, 0.38831076938658954, 0.38678203634917735, 0.38391026671975853, 0.37561016593128443, 0.37222057100385425, 0.3713035868480802] ***
*** finished computation of 7 references, err: [Inf, 0.49070911303162573, 0.39811810534447434, 0.38831076938658954, 0.38678203634917735, 0.38391026671975853, 0.37561016593128443, 0.37222057100385425, 0.3713035868480802] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 19]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 15, 8]]
** centroid: 2, normalized-entropy: 0.9321115676166747, [(2, 15), (3, 8)]
*** center 3: selecting labels [1] (freq >= 2) [from [13, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 3, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [8, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 20, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [14, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7068768095970154] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7068768095970154, 0.4908940160274506] ***
*** starting iteration: 2; err: [Inf, 0.7068768095970154, 0.4908940160274506] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7068768095970154, 0.4908940160274506, 0.4556648974120617] ***
*** starting iteration: 3; err: [Inf, 0.7068768095970154, 0.4908940160274506, 0.4556648974120617] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7068768095970154, 0.4908940160274506, 0.4556648974120617, 0.4302964186668396] ***
*** starting iteration: 4; err: [Inf, 0.7068768095970154, 0.4908940160274506, 0.4556648974120617, 0.4302964186668396] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7068768095970154, 0.4908940160274506, 0.4556648974120617, 0.4302964186668396, 0.41887234047055244] ***
*** starting iteration: 5; err: [Inf, 0.7068768095970154, 0.4908940160274506, 0.4556648974120617, 0.4302964186668396, 0.41887234047055244] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7068768095970154, 0.4908940160274506, 0.4556648974120617, 0.4302964186668396, 0.41887234047055244, 0.40777208730578424] ***
*** starting iteration: 6; err: [Inf, 0.7068768095970154, 0.4908940160274506, 0.4556648974120617, 0.4302964186668396, 0.41887234047055244, 0.40777208730578424] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7068768095970154, 0.4908940160274506, 0.4556648974120617, 0.4302964186668396, 0.41887234047055244, 0.40777208730578424, 0.40304008036851885] ***
*** starting iteration: 7; err: [Inf, 0.7068768095970154, 0.4908940160274506, 0.4556648974120617, 0.4302964186668396, 0.41887234047055244, 0.40777208730578424, 0.40304008036851885] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7068768095970154, 0.4908940160274506, 0.4556648974120617, 0.4302964186668396, 0.41887234047055244, 0.40777208730578424, 0.40304008036851885, 0.4030174519121647] ***
*** finished computation of 7 references, err: [Inf, 0.7068768095970154, 0.4908940160274506, 0.4556648974120617, 0.4302964186668396, 0.41887234047055244, 0.40777208730578424, 0.40304008036851885, 0.4030174519121647] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 16, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 13]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 2, 26]]
** centroid: 3, normalized-entropy: 0.3712323266408756, [(2, 2), (3, 26)]
*** center 4: selecting labels [1] (freq >= 2) [from [8, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [9, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [16, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 9, 1]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5563183382898569] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5563183382898569, 0.4045249780267477] ***
*** starting iteration: 2; err: [Inf, 0.5563183382898569, 0.4045249780267477] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5563183382898569, 0.4045249780267477, 0.3898784589767456] ***
*** starting iteration: 3; err: [Inf, 0.5563183382898569, 0.4045249780267477, 0.3898784589767456] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5563183382898569, 0.4045249780267477, 0.3898784589767456, 0.38620223648846147] ***
*** starting iteration: 4; err: [Inf, 0.5563183382898569, 0.4045249780267477, 0.3898784589767456, 0.38620223648846147] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5563183382898569, 0.4045249780267477, 0.3898784589767456, 0.38620223648846147, 0.38677864871919154] ***
*** finished computation of 7 references, err: [Inf, 0.5563183382898569, 0.4045249780267477, 0.3898784589767456, 0.38620223648846147, 0.38677864871919154] ***
*** center 1: selecting labels [1] (freq >= 2) [from [23, 0, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 20, 1]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 8]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 5]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 2, 18]]
** centroid: 5, normalized-entropy: 0.46899559358928133, [(2, 2), (3, 18)]
*** center 6: selecting labels [1] (freq >= 2) [from [9, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 13, 1]]
finished with 8 centroids; started with 7
[ Info: ========== BEST MODEL ==========
[ Info: (AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :fft, 0.6, 2), 0.98)
[ Info: AKNC{Array{Float64,1}}[AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}([[6.386666666666668, 2.8466666666666667, 4.62, 1.4466666666666665], [5.933333333333334, 2.6166666666666667, 4.95, 1.8333333333333333], [4.779999999999999, 3.1100000000000003, 1.445, 0.20500000000000002], [7.3571428571428585, 3.185714285714286, 6.242857142857143, 2.057142857142857], [5.299999999999999, 2.4857142857142853, 3.5142857142857147, 1.1285714285714286], [5.233333333333333, 3.7066666666666666, 1.4866666666666666, 0.2866666666666668], [6.428571428571429, 3.014285714285714, 5.542857142857144, 2.1], [5.677777777777777, 2.7444444444444445, 4.233333333333334, 1.3222222222222222]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [2, 3, 1, 3, 2, 1, 3, 2], 3), KCenters.var"#fun#72"{SimilaritySearch.var"#_lp#1"{Float64}}(SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25)), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :fft, 0.6, 2)), AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}([[5.656250000000001, 2.6249999999999996, 4.0875, 1.2812500000000002], [7.414285714285714, 2.9285714285714284, 6.342857142857143, 2.1285714285714286], [4.788235294117648, 3.2411764705882358, 1.4294117647058824, 0.20000000000000004], [6.430769230769231, 3.053846153846154, 4.676923076923077, 1.5076923076923074], [6.362068965517242, 2.934482758620689, 5.299999999999999, 1.982758620689655], [7.6000000000000005, 3.533333333333333, 6.3, 1.9333333333333336], [5.4, 3.7866666666666666, 1.5199999999999998, 0.2800000000000001]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [2, 3, 1, 2, 3, 3, 1], 3), KCenters.var"#fun#72"{SimilaritySearch.var"#_lp#1"{Float64}}(SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25)), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :fft, 0.6, 2)), AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}([[5.663157894736842, 2.6, 3.8631578947368417, 1.168421052631579], [4.834782608695652, 3.2826086956521734, 1.443478260869565, 0.24347826086956523], [7.6000000000000005, 2.733333333333333, 6.566666666666667, 2.0666666666666664], [6.657142857142857, 2.9857142857142853, 4.714285714285714, 1.442857142857143], [6.464285714285715, 2.9571428571428564, 5.385714285714285, 2.071428571428571], [7.200000000000001, 3.2875, 5.9625, 2.1625], [5.377777777777778, 3.811111111111111, 1.511111111111111, 0.2777777777777778], [5.954545454545454, 2.9, 4.590909090909091, 1.4545454545454546], [5.849999999999999, 2.8333333333333335, 4.966666666666666, 1.8833333333333335]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [2, 1, 3, 2, 3, 3, 1, 2, 3], 3), KCenters.var"#fun#72"{SimilaritySearch.var"#_lp#1"{Float64}}(SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25)), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :fft, 0.6, 2))]
Test Summary: | Pass  Total
AKNC          |    1      1
[109, 1, 2, 3, 1, 2, 5, 11, 2, 1, 6, 5, 18, 2, 4, 26, 32, 6, 28, 5, 5, 15, 4, 6, 4, 11, 1, 34, 4, 16, 3, 1, 32, 5, 21, 2, 19, 4, 4, 5, 9, 10, 27, 6, 12, 12, 6, 7, 5, 8, 34, 3, 3, 22, 15, 13, 30, 6, 29, 10, 4, 13, 74, 1, 41, 10, 1, 2, 111, 24, 14, 10, 66, 3, 8, 13, 5, 31, 61, 17, 6, 10, 9, 11, 15, 10, 26, 1, 2, 9, 2, 85, 110, 41, 44, 7, 3, 17, 14, 28, 22, 4, 10, 3, 15, 32, 6, 1061, 2, 25, 8, 4, 22, 31, 72, 10, 3, 11, 14, 34, 72, 10, 21, 6, 13, 16, 33, 16, 280, 3, 4, 16, 85, 24, 8, 7, 19, 12, 38, 11, 6, 6, 15, 26, 3, 12, 76, 23, 23, 20, 3, 3, 39, 1, 6, 101, 12, 18, 7, 6, 26, 23, 7, 11, 26, 23, 35, 2, 8, 2, 73, 25, 274, 5, 15, 8, 16, 75, 12, 7, 36, 16, 38, 47, 12, 93, 17, 7, 48, 133, 5, 22, 4, 3, 2, 3, 4, 53, 12, 11, 57, 63, 48, 55, 61, 25, 73, 56, 5, 32, 10, 2, 4, 15, 10, 41, 5, 42, 1, 20, 15, 13, 11, 45, 41, 14, 21, 62, 14, 10, 11, 52, 20, 13, 42, 7, 44, 94, 6, 4, 56, 6, 11, 48, 4, 35, 6, 3, 27, 7, 22, 28, 64, 28, 154, 26, 85, 46, 13, 8, 591, 214, 11, 20, 8, 2, 18, 19, 36, 18, 33, 10, 134, 16, 2, 4, 10, 5, 22, 26, 8, 31, 217, 107, 15, 44, 55, 31, 30, 150, 16, 5, 31, 50, 18, 19, 95, 66, 161, 392]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6439999999999998, speedup = 0.17002967851043724, eval_ratio = 0.08475099999999999)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.41756572420634924,"recall":0.4157986111111112,"f1":null,"seconds":0.00019002892076969147,"exhaustive_search_seconds":0.0003538597375154495,"evaluations":515.8671875,"distances_sum":1681.6908750909136}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5685763888888891,"recall":0.5685763888888891,"f1":null,"seconds":0.0002914164215326309,"exhaustive_search_seconds":0.0003538597375154495,"evaluations":677.2109375,"distances_sum":1617.104527551245}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.668402777777778,"recall":0.668402777777778,"f1":0.668402777777778,"seconds":0.00040464289486408234,"exhaustive_search_seconds":0.0003538597375154495,"evaluations":855.0390625,"distances_sum":1558.7100387534244}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7456597222222218,"recall":0.7456597222222218,"f1":0.7456597222222218,"seconds":0.0006791241466999054,"exhaustive_search_seconds":0.0003538597375154495,"evaluations":1025.0234375,"distances_sum":1525.27154652707}
KCenters.DeloneInvIndex> reached performance {"precision":0.8038194444444441,"recall":0.8038194444444441,"f1":0.8038194444444441,"seconds":0.0006285626441240311,"exhaustive_search_seconds":0.0003538597375154495,"evaluations":1163.5234375,"distances_sum":1506.3107334302701}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.7639999999999999, speedup = 0.38576157556404495, eval_ratio = 0.10728)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
