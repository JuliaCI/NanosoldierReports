Julia Version 1.6.0-DEV.199
Commit d765e5923a (2020-06-09 02:02 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed PooledArrays ──────────────── v0.5.3
  Installed DataValueInterfaces ───────── v1.0.0
  Installed DataAPI ───────────────────── v1.3.0
  Installed TableTraits ───────────────── v1.0.0
  Installed KCenters ──────────────────── v0.2.2
  Installed OrderedCollections ────────── v1.2.0
  Installed Tables ────────────────────── v1.0.4
  Installed Parsers ───────────────────── v1.0.5
  Installed LearnBase ─────────────────── v0.2.2
  Installed CategoricalArrays ─────────── v0.7.7
  Installed InvertedIndices ───────────── v1.0.0
  Installed StatsBase ─────────────────── v0.32.2
  Installed MappedArrays ──────────────── v0.2.2
  Installed MLDataUtils ───────────────── v0.5.1
  Installed DataFrames ────────────────── v0.20.2
  Installed Reexport ──────────────────── v0.2.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed Compat ────────────────────── v3.11.0
  Installed JSON ──────────────────────── v0.21.0
  Installed DataStructures ────────────── v0.17.17
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed MLDataPattern ─────────────── v0.5.3
  Installed SimilaritySearch ──────────── v0.3.19
  Installed Missings ──────────────────── v0.4.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.11.0
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.17
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.2.0
  [69de0a69] + Parsers v1.0.5
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_YSSO2B/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_YSSO2B/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.11.0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.17
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.2.0
  [69de0a69] Parsers v1.0.5
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0723782532413801
[ Info: 0.9326678744951884
[ Info: 0.8321307849884033
[ Info: 0.5561161469916502
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.3270024501532316
mean(cdnet.distances) = 0.3966954310735067
mean(crand.distances) = 0.33317625552415847
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3583984375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3583984375,"f1":null,"seconds":4.459172487258911e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":5.265625,"distances_sum":1008.761257666395}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1767578125, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.1767578125,"f1":null,"seconds":4.194676876068115e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":4.53125,"distances_sum":497.98579120339997}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7880859375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7880859375,"f1":0.8750374625374634,"seconds":6.211921572685242e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.4296875,"distances_sum":2208.1942196059495}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7880859375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7880859375,"f1":0.8750374625374634,"seconds":6.211921572685242e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.4296875,"distances_sum":2208.1942196059495}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9437271062271066,"seconds":6.7427754402160645e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.7578125,"distances_sum":2742.9564419748067}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.82421875, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.82421875,"f1":0.8962256493506502,"seconds":6.496906280517578e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.5,"distances_sum":2397.4864281178507}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8056640625, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8056640625,"f1":0.8856690184815195,"seconds":7.139518857002258e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.3046875,"distances_sum":2343.1581423374305}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9013671875,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.9013671875,"f1":0.9437271062271066,"seconds":6.7427754402160645e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.7578125,"distances_sum":2742.9564419748067}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.958711080586081,"seconds":1.2356787919998169e-5,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.890625,"distances_sum":2825.8238109286194}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9587625915750921,"seconds":1.2936070561408997e-5,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.875,"distances_sum":2791.467567912404}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9747596153846159,"seconds":6.269663572311401e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.9296875,"distances_sum":2933.0275455351384}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9660771520146525,"seconds":2.1109357476234436e-5,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.875,"distances_sum":2906.0656285534765}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9481913919413923,"seconds":6.241723895072937e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8203125,"distances_sum":2750.520914068551}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9541015625,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9747596153846159,"seconds":6.269663572311401e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.9296875,"distances_sum":2933.0275455351384}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9541015625,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9747596153846159,"seconds":6.269663572311401e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.9296875,"distances_sum":2933.0275455351384}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4345703125, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.4345703125,"f1":null,"seconds":4.082918167114258e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":6.7421875,"distances_sum":941.2953951342404}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7763671875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7763671875,"f1":0.8682921245421253,"seconds":5.634501576423645e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.453125,"distances_sum":1851.902900138479}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7763671875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7763671875,"f1":0.8682921245421253,"seconds":5.634501576423645e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.453125,"distances_sum":1851.902900138479}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.933705357142858,"seconds":5.925074219703674e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.7109375,"distances_sum":2259.2230997782667}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9575892857142861,"seconds":1.882202923297882e-5,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.7734375,"distances_sum":2469.3894467397286}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9513481310356315,"seconds":6.625428795814514e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.8046875,"distances_sum":2398.7112300180333}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.923828125,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.9575892857142861,"seconds":1.882202923297882e-5,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.7734375,"distances_sum":2469.3894467397286}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":9,"bsize":11}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9726934523809525,"seconds":5.973502993583679e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.9296875,"distances_sum":2531.9099741111145}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.966796875, conf: {"ssize":9,"bsize":13}, perf: {"precision":1.0,"recall":0.966796875,"f1":0.9815476190476191,"seconds":6.055459380149841e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.9609375,"distances_sum":2603.758574798798}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9651098901098906,"seconds":6.087124347686768e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.890625,"distances_sum":2501.88190016973}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9754292582417586,"seconds":5.882233381271362e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.9296875,"distances_sum":2559.449224274561}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9749656593406598,"seconds":1.893937587738037e-5,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.8984375,"distances_sum":2586.268605800553}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9673592032967037,"seconds":5.826354026794434e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.921875,"distances_sum":2478.740491805146}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.966796875,"state":{"ssize":9,"bsize":13},"perf":{"precision":1.0,"recall":0.966796875,"f1":0.9815476190476191,"seconds":6.055459380149841e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.9609375,"distances_sum":2603.758574798798}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.966796875,"state":{"ssize":9,"bsize":13},"perf":{"precision":1.0,"recall":0.966796875,"f1":0.9815476190476191,"seconds":6.055459380149841e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.9609375,"distances_sum":2603.758574798798}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.580078125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.580078125,"f1":0.7183314948939956,"seconds":5.044043064117432e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":6.8359375,"distances_sum":1362.799703728184}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.669921875, conf: {"ssize":1,"bsize":4}, perf: {"precision":null,"recall":0.669921875,"f1":null,"seconds":1.6862526535987854e-5,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":7.6796875,"distances_sum":1597.942536661534}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.669921875,"state":{"ssize":1,"bsize":4},"perf":{"precision":null,"recall":0.669921875,"f1":null,"seconds":1.6862526535987854e-5,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":7.6796875,"distances_sum":1597.942536661534}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8388671875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8388671875,"f1":0.9071803196803204,"seconds":6.342306733131409e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.7734375,"distances_sum":2177.208243890472}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7822265625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7822265625,"f1":0.8717693764568774,"seconds":5.904585123062134e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.2734375,"distances_sum":1961.6144747173373}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.845703125, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.845703125,"f1":0.9117673992674001,"seconds":6.452202796936035e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.828125,"distances_sum":2200.736174435159}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.845703125,"state":{"ssize":2,"bsize":6},"perf":{"precision":1.0,"recall":0.845703125,"f1":0.9117673992674001,"seconds":6.452202796936035e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.828125,"distances_sum":2200.736174435159}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9648065476190484,"seconds":6.847083568572998e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.96875,"distances_sum":2561.0718336018494}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9432921245421252,"seconds":6.683170795440674e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.859375,"distances_sum":2444.0009223622574}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9521119505494511,"seconds":6.472691893577576e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.9140625,"distances_sum":2499.6362657119726}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9559237637362643,"seconds":6.068497896194458e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.8828125,"distances_sum":2537.7171602077315}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.935546875,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9648065476190484,"seconds":6.847083568572998e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.96875,"distances_sum":2561.0718336018494}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.935546875,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9648065476190484,"seconds":6.847083568572998e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.96875,"distances_sum":2561.0718336018494}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.189453125,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.189453125,"f1":null,"seconds":3.507360816001892e-6,"exhaustive_search_seconds":2.6710331439971924e-6,"evaluations":5.6171875,"distances_sum":459.26275754780215}}, beam: 3, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.189453125,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.189453125,"f1":null,"seconds":3.507360816001892e-6,"exhaustive_search_seconds":2.6710331439971924e-6,"evaluations":5.6171875,"distances_sum":459.26275754780215}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.521484375, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.521484375,"f1":null,"seconds":4.6603381633758545e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":6.609375,"distances_sum":1306.8430777269875}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.521484375,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.521484375,"f1":null,"seconds":4.6603381633758545e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":6.609375,"distances_sum":1306.8430777269875}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6064453125, conf: {"ssize":1,"bsize":4}, perf: {"precision":0.9874999999999999,"recall":0.6064453125,"f1":0.7419209262959268,"seconds":4.652887582778931e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":7.375,"distances_sum":1568.1503085464199}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7197265625, conf: {"ssize":1,"bsize":5}, perf: {"precision":0.9894531249999998,"recall":0.7197265625,"f1":0.8257822906260411,"seconds":6.020069122314453e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":7.96875,"distances_sum":2011.0783133461491}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7197265625,"state":{"ssize":1,"bsize":5},"perf":{"precision":0.9894531249999998,"recall":0.7197265625,"f1":0.8257822906260411,"seconds":6.020069122314453e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":7.96875,"distances_sum":2011.0783133461491}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8046875, conf: {"ssize":1,"bsize":6}, perf: {"precision":0.9877697172619049,"recall":0.8046875,"f1":0.8817789632242763,"seconds":7.556751370429993e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.2890625,"distances_sum":2355.4118137694963}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7861328125, conf: {"ssize":2,"bsize":6}, perf: {"precision":0.9903459821428571,"recall":0.7861328125,"f1":0.8683553425740931,"seconds":6.418675184249878e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.265625,"distances_sum":2253.0823389606117}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":1,"bsize":9}, perf: {"precision":0.9882347470238096,"recall":0.9326171875,"f1":0.9561519860347987,"seconds":6.9607049226760864e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.890625,"distances_sum":2796.9603906906354}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":1,"bsize":8}, perf: {"precision":0.9880022321428572,"recall":0.908203125,"f1":0.9424872002997007,"seconds":6.379559636116028e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.8046875,"distances_sum":2690.7128358209075}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9326171875,"state":{"ssize":1,"bsize":9},"perf":{"precision":0.9882347470238096,"recall":0.9326171875,"f1":0.9561519860347987,"seconds":6.9607049226760864e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.890625,"distances_sum":2796.9603906906354}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9326171875,"state":{"ssize":1,"bsize":9},"perf":{"precision":0.9882347470238096,"recall":0.9326171875,"f1":0.9561519860347987,"seconds":6.9607049226760864e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.890625,"distances_sum":2796.9603906906354}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.431640625, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.431640625,"f1":null,"seconds":5.286186933517456e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":6.4140625,"distances_sum":1004.432577331491}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.240234375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.240234375,"f1":null,"seconds":4.4871121644973755e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":6.421875,"distances_sum":583.6887014891537}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.763671875,"f1":0.8594842657342666,"seconds":5.373731255531311e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.0,"distances_sum":2004.3368000861472}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.763671875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.763671875,"f1":0.8594842657342666,"seconds":5.373731255531311e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.0,"distances_sum":2004.3368000861472}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9491472069597074,"seconds":1.337006688117981e-5,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.7890625,"distances_sum":2709.726019150421}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9554201007326014,"seconds":6.8284571170806885e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.8359375,"distances_sum":2757.684375997139}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9208984375,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.9208984375,"f1":0.9554201007326014,"seconds":6.8284571170806885e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.8359375,"distances_sum":2757.684375997139}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.963100961538462,"seconds":6.020069122314453e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.8515625,"distances_sum":2826.719348169647}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9732886904761909,"seconds":6.802380084991455e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.9375,"distances_sum":2883.2112973729495}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9697265625, conf: {"ssize":4,"bsize":12}, perf: {"precision":1.0,"recall":0.9697265625,"f1":0.9829441391941395,"seconds":6.3497573137283325e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.953125,"distances_sum":2971.3586170957806}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9643086080586084,"seconds":6.334856152534485e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.875,"distances_sum":2827.1465347244557}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9697265625,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.9697265625,"f1":0.9829441391941395,"seconds":6.3497573137283325e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.953125,"distances_sum":2971.3586170957806}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9697265625,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.9697265625,"f1":0.9829441391941395,"seconds":6.3497573137283325e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.953125,"distances_sum":2971.3586170957806}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6533203125, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6533203125,"f1":0.7798111610611619,"seconds":5.370005965232849e-6,"exhaustive_search_seconds":1.7117708921432495e-6,"evaluations":7.9140625,"distances_sum":1657.223575664992}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6533203125,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.6533203125,"f1":0.7798111610611619,"seconds":5.370005965232849e-6,"exhaustive_search_seconds":1.7117708921432495e-6,"evaluations":7.9140625,"distances_sum":1657.223575664992}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6630859375, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.6630859375,"f1":0.7865852897102905,"seconds":5.465000867843628e-6,"exhaustive_search_seconds":1.7117708921432495e-6,"evaluations":7.9921875,"distances_sum":1754.5976570097375}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.837890625, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.837890625,"f1":0.9055746336996345,"seconds":5.941838026046753e-6,"exhaustive_search_seconds":1.7117708921432495e-6,"evaluations":8.65625,"distances_sum":2414.035315069209}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9443395146520153,"seconds":6.2622129917144775e-6,"exhaustive_search_seconds":1.7117708921432495e-6,"evaluations":8.828125,"distances_sum":2782.5160437685836}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9033203125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9033203125,"f1":0.9443395146520153,"seconds":6.2622129917144775e-6,"exhaustive_search_seconds":1.7117708921432495e-6,"evaluations":8.828125,"distances_sum":2782.5160437685836}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.946305777555778,"seconds":5.5711716413497925e-6,"exhaustive_search_seconds":1.7117708921432495e-6,"evaluations":8.7734375,"distances_sum":2750.358611426337}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9629120879120884,"seconds":6.206333637237549e-6,"exhaustive_search_seconds":1.7117708921432495e-6,"evaluations":8.9140625,"distances_sum":2875.6390050602217}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9519001831501837,"seconds":6.282702088356018e-6,"exhaustive_search_seconds":1.7117708921432495e-6,"evaluations":8.7890625,"distances_sum":2854.060451194601}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.93359375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9629120879120884,"seconds":6.206333637237549e-6,"exhaustive_search_seconds":1.7117708921432495e-6,"evaluations":8.9140625,"distances_sum":2875.6390050602217}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.93359375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9629120879120884,"seconds":6.206333637237549e-6,"exhaustive_search_seconds":1.7117708921432495e-6,"evaluations":8.9140625,"distances_sum":2875.6390050602217}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2060546875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2060546875,"f1":null,"seconds":3.85381281375885e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":4.21875,"distances_sum":603.0210686072278}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2099609375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2099609375,"f1":null,"seconds":4.002824425697327e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":4.390625,"distances_sum":600.7930677377553}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.181640625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.181640625,"f1":null,"seconds":3.851950168609619e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":4.1015625,"distances_sum":494.19807455479696}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7705078125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7705078125,"f1":0.8621914543789552,"seconds":6.282702088356018e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.0078125,"distances_sum":2179.649700055919}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7705078125,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7705078125,"f1":0.8621914543789552,"seconds":6.282702088356018e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.0078125,"distances_sum":2179.649700055919}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8505859375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8505859375,"f1":0.91402815934066,"seconds":5.366280674934387e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.3984375,"distances_sum":2634.0012797867453}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9409142940392945,"seconds":6.11133873462677e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.5078125,"distances_sum":2906.9942757371346}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8974609375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.8974609375,"f1":0.9409142940392945,"seconds":6.11133873462677e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.5078125,"distances_sum":2906.9942757371346}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9620764652014655,"seconds":6.034970283508301e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.8359375,"distances_sum":2956.173511697525}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.90625,"f1":0.946531593406594,"seconds":5.621463060379028e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.6171875,"distances_sum":2884.4020063986436}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9665750915750921,"seconds":6.03310763835907e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.8203125,"distances_sum":3018.8779951061447}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9665750915750921,"seconds":6.03310763835907e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.8203125,"distances_sum":3018.8779951061447}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.939453125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9665750915750921,"seconds":6.03310763835907e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.8203125,"distances_sum":3018.8779951061447}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.759765625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.759765625,"f1":0.8531661047286055,"seconds":5.714595317840576e-6,"exhaustive_search_seconds":2.5704503059387207e-6,"evaluations":8.28125,"distances_sum":2063.7547558812576}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.197265625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.197265625,"f1":null,"seconds":3.416091203689575e-6,"exhaustive_search_seconds":2.5704503059387207e-6,"evaluations":6.046875,"distances_sum":491.29498098878986}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.759765625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.759765625,"f1":0.8531661047286055,"seconds":5.714595317840576e-6,"exhaustive_search_seconds":2.5704503059387207e-6,"evaluations":8.28125,"distances_sum":2063.7547558812576}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8212890625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8212890625,"f1":0.8947916666666674,"seconds":6.103888154029846e-6,"exhaustive_search_seconds":2.5704503059387207e-6,"evaluations":8.296875,"distances_sum":2339.0024211075643}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8359375, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8359375,"f1":0.9037233599733605,"seconds":5.541369318962097e-6,"exhaustive_search_seconds":2.5704503059387207e-6,"evaluations":8.46875,"distances_sum":2378.401542881577}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9435756951381958,"seconds":5.692243576049805e-6,"exhaustive_search_seconds":2.5704503059387207e-6,"evaluations":8.6640625,"distances_sum":2724.9766732994563}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9033203125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.9033203125,"f1":0.9435756951381958,"seconds":5.692243576049805e-6,"exhaustive_search_seconds":2.5704503059387207e-6,"evaluations":8.6640625,"distances_sum":2724.9766732994563}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9714285714285718,"seconds":6.3050538301467896e-6,"exhaustive_search_seconds":2.5704503059387207e-6,"evaluations":8.90625,"distances_sum":2941.9037335191224}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9487809065934071,"seconds":5.822628736495972e-6,"exhaustive_search_seconds":2.5704503059387207e-6,"evaluations":8.7421875,"distances_sum":2758.2101068661295}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9665064102564105,"seconds":5.733221769332886e-6,"exhaustive_search_seconds":2.5704503059387207e-6,"evaluations":8.859375,"distances_sum":2912.686988148256}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9602392399267403,"seconds":7.195398211479187e-6,"exhaustive_search_seconds":2.5704503059387207e-6,"evaluations":8.8203125,"distances_sum":2861.6711076447305}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9630036630036635,"seconds":6.40377402305603e-6,"exhaustive_search_seconds":2.5704503059387207e-6,"evaluations":8.8828125,"distances_sum":2868.3706068274637}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9482421875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9714285714285718,"seconds":6.3050538301467896e-6,"exhaustive_search_seconds":2.5704503059387207e-6,"evaluations":8.90625,"distances_sum":2941.9037335191224}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9482421875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9714285714285718,"seconds":6.3050538301467896e-6,"exhaustive_search_seconds":2.5704503059387207e-6,"evaluations":8.90625,"distances_sum":2941.9037335191224}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.576171875, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.576171875,"f1":null,"seconds":1.687556505203247e-5,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.453125,"distances_sum":1410.1486765594354}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3681640625, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.3681640625,"f1":null,"seconds":3.863126039505005e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":6.6328125,"distances_sum":829.2746069442818}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.576171875,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.576171875,"f1":null,"seconds":1.687556505203247e-5,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.453125,"distances_sum":1410.1486765594354}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6552734375, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6552734375,"f1":0.7806571900321908,"seconds":4.936009645462036e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.0546875,"distances_sum":1658.6441046002863}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8525390625, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8525390625,"f1":0.9134329212454221,"seconds":7.249414920806885e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.3515625,"distances_sum":2467.8835259562684}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.671875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.671875,"f1":0.79360465922966,"seconds":5.5655837059021e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.171875,"distances_sum":1742.6123012864111}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8525390625,"state":{"ssize":3,"bsize":6},"perf":{"precision":1.0,"recall":0.8525390625,"f1":0.9134329212454221,"seconds":7.249414920806885e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.3515625,"distances_sum":2467.8835259562684}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9681375915750918,"seconds":6.644055247306824e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.890625,"distances_sum":2911.2359793633136}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9564617673992678,"seconds":6.549060344696045e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8125,"distances_sum":2812.1941947799596}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9644745879120882,"seconds":5.733221769332886e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8671875,"distances_sum":2865.756804781094}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.945432692307693,"seconds":5.545094609260559e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.71875,"distances_sum":2709.6134439400116}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9547332875457879,"seconds":6.32554292678833e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.765625,"distances_sum":2826.3486959779934}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9461252289377295,"seconds":7.20098614692688e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.7421875,"distances_sum":2726.993205766848}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9423828125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9681375915750918,"seconds":6.644055247306824e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.890625,"distances_sum":2911.2359793633136}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9423828125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9681375915750918,"seconds":6.644055247306824e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.890625,"distances_sum":2911.2359793633136}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.66796875, conf: {"ssize":3,"bsize":4}, perf: {"precision":null,"recall":0.66796875,"f1":null,"seconds":4.801899194717407e-6,"exhaustive_search_seconds":2.289190888404846e-6,"evaluations":8.328125,"distances_sum":1699.034812939805}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2216796875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2216796875,"f1":null,"seconds":3.894791007041931e-6,"exhaustive_search_seconds":2.289190888404846e-6,"evaluations":6.7265625,"distances_sum":570.9713900503024}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2216796875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2216796875,"f1":null,"seconds":3.8351863622665405e-6,"exhaustive_search_seconds":2.289190888404846e-6,"evaluations":6.890625,"distances_sum":540.3393460303763}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4208984375, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.4208984375,"f1":null,"seconds":4.118308424949646e-6,"exhaustive_search_seconds":2.289190888404846e-6,"evaluations":7.0625,"distances_sum":932.8274834260457}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.66796875,"state":{"ssize":3,"bsize":4},"perf":{"precision":null,"recall":0.66796875,"f1":null,"seconds":4.801899194717407e-6,"exhaustive_search_seconds":2.289190888404846e-6,"evaluations":8.328125,"distances_sum":1699.034812939805}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9373054029304037,"seconds":7.854774594306946e-6,"exhaustive_search_seconds":2.289190888404846e-6,"evaluations":8.71875,"distances_sum":2626.8709518189285}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8642578125, conf: {"ssize":9,"bsize":6}, perf: {"precision":1.0,"recall":0.8642578125,"f1":0.920690247252748,"seconds":8.316710591316223e-6,"exhaustive_search_seconds":2.289190888404846e-6,"evaluations":8.6875,"distances_sum":2500.526953607014}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87109375, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.87109375,"f1":0.925698260073261,"seconds":6.407499313354492e-6,"exhaustive_search_seconds":2.289190888404846e-6,"evaluations":8.6640625,"distances_sum":2546.7301647891322}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.751953125, conf: {"ssize":9,"bsize":5}, perf: {"precision":1.0,"recall":0.751953125,"f1":0.8474910506160515,"seconds":6.634742021560669e-6,"exhaustive_search_seconds":2.289190888404846e-6,"evaluations":8.484375,"distances_sum":2021.9669903223285}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8896484375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8896484375,"f1":0.9373054029304037,"seconds":7.854774594306946e-6,"exhaustive_search_seconds":2.289190888404846e-6,"evaluations":8.71875,"distances_sum":2626.8709518189285}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9564961080586086,"seconds":6.191432476043701e-6,"exhaustive_search_seconds":2.289190888404846e-6,"evaluations":8.875,"distances_sum":2794.6435277403866}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9596211080586086,"seconds":6.586313247680664e-6,"exhaustive_search_seconds":2.289190888404846e-6,"evaluations":8.8984375,"distances_sum":2794.9084620052477}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9583733974358978,"seconds":5.835667252540588e-6,"exhaustive_search_seconds":2.289190888404846e-6,"evaluations":8.859375,"distances_sum":2800.562500002387}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9411375083250089,"seconds":5.813315510749817e-6,"exhaustive_search_seconds":2.289190888404846e-6,"evaluations":8.6640625,"distances_sum":2677.9879453967005}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.927734375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.9596211080586086,"seconds":6.586313247680664e-6,"exhaustive_search_seconds":2.289190888404846e-6,"evaluations":8.8984375,"distances_sum":2794.9084620052477}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.927734375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.9596211080586086,"seconds":6.586313247680664e-6,"exhaustive_search_seconds":2.289190888404846e-6,"evaluations":8.8984375,"distances_sum":2794.9084620052477}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6650390625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6650390625,"f1":0.7849549755799764,"seconds":4.682689905166626e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.4453125,"distances_sum":1775.0199425367005}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76171875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.76171875,"f1":0.8550459956709964,"seconds":6.541609764099121e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.7890625,"distances_sum":2136.3397365265096}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.76171875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.76171875,"f1":0.8550459956709964,"seconds":6.541609764099121e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.7890625,"distances_sum":2136.3397365265096}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9477220695970701,"seconds":6.075948476791382e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.71875,"distances_sum":2805.756199796417}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8115234375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8115234375,"f1":0.8900843947718955,"seconds":5.459412932395935e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.265625,"distances_sum":2305.6556934606647}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8076171875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8076171875,"f1":0.8853485056610065,"seconds":5.329027771949768e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.1015625,"distances_sum":2336.279134515645}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9091796875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9091796875,"f1":0.9477220695970701,"seconds":6.075948476791382e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.71875,"distances_sum":2805.756199796417}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.976636904761905,"seconds":6.9160014390945435e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.9296875,"distances_sum":2993.2699242308536}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":4,"bsize":12}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9740556318681322,"seconds":6.755813956260681e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.890625,"distances_sum":2993.168319091397}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9645146520146525,"seconds":6.504356861114502e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.84375,"distances_sum":2917.828494753804}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9679143772893773,"seconds":7.228925824165344e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.859375,"distances_sum":2921.4533988076046}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.95703125,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.976636904761905,"seconds":6.9160014390945435e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.9296875,"distances_sum":2993.2699242308536}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.95703125,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.976636904761905,"seconds":6.9160014390945435e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.9296875,"distances_sum":2993.2699242308536}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.224609375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.224609375,"f1":null,"seconds":3.7439167499542236e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":5.1953125,"distances_sum":510.6005096146558}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3681640625, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.3681640625,"f1":null,"seconds":7.664784789085388e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":5.453125,"distances_sum":760.6759435063454}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6591796875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6591796875,"f1":0.7823688464313472,"seconds":5.062669515609741e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.609375,"distances_sum":1380.0722425939643}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6591796875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6591796875,"f1":0.7823688464313472,"seconds":5.062669515609741e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.609375,"distances_sum":1380.0722425939643}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8642578125, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8642578125,"f1":0.9226362179487186,"seconds":5.599111318588257e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.390625,"distances_sum":1989.014706497977}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.875,"f1":0.9295444139194148,"seconds":2.0170584321022034e-5,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.453125,"distances_sum":2018.6891640815431}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6650390625, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6650390625,"f1":0.7883949383949391,"seconds":4.809349775314331e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.703125,"distances_sum":1435.9548707163265}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.875,"f1":0.9295444139194148,"seconds":2.0170584321022034e-5,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.453125,"distances_sum":2018.6891640815431}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9383101273726282,"seconds":5.627050995826721e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.6640625,"distances_sum":2122.002180799627}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9547103937728942,"seconds":5.381181836128235e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.734375,"distances_sum":2231.1241919338618}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9435382326007331,"seconds":5.582347512245178e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.6484375,"distances_sum":2189.4909685155017}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9443738553113559,"seconds":5.5264681577682495e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.640625,"distances_sum":2180.489643574813}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.919921875,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.9547103937728942,"seconds":5.381181836128235e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.734375,"distances_sum":2231.1241919338618}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.919921875,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.9547103937728942,"seconds":5.381181836128235e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.734375,"distances_sum":2231.1241919338618}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.439453125, conf: {"ssize":1,"bsize":2}, perf: {"precision":1.0,"recall":0.439453125,"f1":0.5885898823398826,"seconds":3.6526471376419067e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":6.3671875,"distances_sum":831.8776834036411}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4599609375, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.4599609375,"f1":null,"seconds":4.477798938751221e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":6.421875,"distances_sum":879.7084378677717}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4599609375,"state":{"ssize":5,"bsize":2},"perf":{"precision":null,"recall":0.4599609375,"f1":null,"seconds":4.477798938751221e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":6.421875,"distances_sum":879.7084378677717}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7685546875, conf: {"ssize":9,"bsize":5}, perf: {"precision":1.0,"recall":0.7685546875,"f1":0.8605800449550457,"seconds":1.6169622540473938e-5,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.375,"distances_sum":1560.2171691183946}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.783203125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.783203125,"f1":0.8727652555777563,"seconds":5.042180418968201e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.515625,"distances_sum":1610.912462357165}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.671875, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.671875,"f1":0.7900993104118111,"seconds":6.2175095081329346e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.7421875,"distances_sum":1361.0002409834403}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.806640625, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.806640625,"f1":0.8850654553779561,"seconds":5.5264681577682495e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.4140625,"distances_sum":1711.4350670041288}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.525390625, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.525390625,"f1":0.673977411477412,"seconds":4.088506102561951e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":6.671875,"distances_sum":988.6006518988878}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.65625, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.65625,"f1":0.7799585830835839,"seconds":4.855915904045105e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.7578125,"distances_sum":1272.980661262474}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.806640625,"state":{"ssize":4,"bsize":6},"perf":{"precision":1.0,"recall":0.806640625,"f1":0.8850654553779561,"seconds":5.5264681577682495e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.4140625,"distances_sum":1711.4350670041288}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9490384615384619,"seconds":6.8284571170806885e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.890625,"distances_sum":2045.0722556521023}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9461798618048624,"seconds":7.214024662971497e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8671875,"distances_sum":2060.6594460495367}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.822265625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.822265625,"f1":0.8967064185814195,"seconds":5.386769771575928e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.5703125,"distances_sum":1743.2307425104445}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8671875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8671875,"f1":0.9229655760905765,"seconds":6.468966603279114e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.7734375,"distances_sum":1898.7713482619492}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9620192307692313,"seconds":6.4354389905929565e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9609375,"distances_sum":2147.017693370248}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8681640625, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.8681640625,"f1":0.9241529304029311,"seconds":5.640089511871338e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9140625,"distances_sum":1852.7185239703863}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.93359375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9620192307692313,"seconds":6.4354389905929565e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9609375,"distances_sum":2147.017693370248}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.93359375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9620192307692313,"seconds":6.4354389905929565e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9609375,"distances_sum":2147.017693370248}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2275390625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2275390625,"f1":null,"seconds":4.889443516731262e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":6.171875,"distances_sum":435.5457944590531}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5810546875, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.5810546875,"f1":0.7174169580419589,"seconds":4.431232810020447e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":7.25,"distances_sum":1118.4302284375224}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5810546875,"state":{"ssize":4,"bsize":3},"perf":{"precision":1.0,"recall":0.5810546875,"f1":0.7174169580419589,"seconds":4.431232810020447e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":7.25,"distances_sum":1118.4302284375224}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6630859375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6630859375,"f1":0.7847945457320464,"seconds":8.393079042434692e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":7.9140625,"distances_sum":1290.4840535771723}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78515625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.78515625,"f1":0.8723510864135872,"seconds":5.286186933517456e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.4375,"distances_sum":1592.0381818005196}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.78515625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.78515625,"f1":0.8723510864135872,"seconds":5.286186933517456e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.4375,"distances_sum":1592.0381818005196}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8154296875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8154296875,"f1":0.8910261613386619,"seconds":6.213784217834473e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.546875,"distances_sum":1715.004020830193}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.869140625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.869140625,"f1":0.9246425449550457,"seconds":6.418675184249878e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.8203125,"distances_sum":1859.1460852682385}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.932134532134533,"seconds":9.957700967788696e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.84375,"distances_sum":1927.4323896806047}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8837890625,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.8837890625,"f1":0.932134532134533,"seconds":9.957700967788696e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.84375,"distances_sum":1927.4323896806047}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8837890625,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.8837890625,"f1":0.932134532134533,"seconds":9.957700967788696e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.84375,"distances_sum":1927.4323896806047}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6552734375, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6552734375,"f1":0.7788903804528813,"seconds":6.647780537605286e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.0859375,"distances_sum":1306.8714417137724}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2568359375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2568359375,"f1":null,"seconds":3.557652235031128e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":6.375,"distances_sum":536.0412162902721}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7978515625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7978515625,"f1":0.8806464368964377,"seconds":5.161389708518982e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.4921875,"distances_sum":1663.6485179192648}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7978515625,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7978515625,"f1":0.8806464368964377,"seconds":5.161389708518982e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.4921875,"distances_sum":1663.6485179192648}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.95413804945055,"seconds":5.623325705528259e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.8828125,"distances_sum":2101.227121683895}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9375,"f1":0.964921016483517,"seconds":5.8785080909729e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.9140625,"distances_sum":2161.5139027563278}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8515625, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8515625,"f1":0.9157680860805867,"seconds":5.621463060379028e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.609375,"distances_sum":1791.6292249170015}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9375,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9375,"f1":0.964921016483517,"seconds":5.8785080909729e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.9140625,"distances_sum":2161.5139027563278}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9638671875, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9638671875,"f1":0.9802083333333337,"seconds":7.549300789833069e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.9921875,"distances_sum":2272.732557967689}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9697744963369966,"seconds":6.2230974435806274e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.953125,"distances_sum":2182.19945893974}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9764880952380958,"seconds":7.424503564834595e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.9609375,"distances_sum":2234.798617511118}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9671359890109894,"seconds":6.5676867961883545e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.9296875,"distances_sum":2181.641138523639}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9731055402930406,"seconds":7.633119821548462e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.953125,"distances_sum":2216.4491196984545}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9638671875,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9638671875,"f1":0.9802083333333337,"seconds":7.549300789833069e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.9921875,"distances_sum":2272.732557967689}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9638671875,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9638671875,"f1":0.9802083333333337,"seconds":7.549300789833069e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.9921875,"distances_sum":2272.732557967689}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.630859375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.630859375,"f1":0.7634114149739157,"seconds":4.930421710014343e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.4375,"distances_sum":1219.0009334647839}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.630859375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.630859375,"f1":0.7634114149739157,"seconds":4.930421710014343e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.4375,"distances_sum":1219.0009334647839}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7880859375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7880859375,"f1":0.8737699800199809,"seconds":6.329268217086792e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.5234375,"distances_sum":1627.5099660857804}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8388671875, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8388671875,"f1":0.9073431776556784,"seconds":6.8712979555130005e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.640625,"distances_sum":1724.3049614037102}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.876953125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.876953125,"f1":0.929604770229771,"seconds":5.731359124183655e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.8203125,"distances_sum":1883.8625329455188}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.876953125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.876953125,"f1":0.929604770229771,"seconds":5.731359124183655e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.8203125,"distances_sum":1883.8625329455188}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9596783424908429,"seconds":8.231028914451599e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.9296875,"distances_sum":2097.225885341756}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9399267399267406,"seconds":5.552545189857483e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.921875,"distances_sum":1926.1649502942687}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9656078296703303,"seconds":7.394701242446899e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.96875,"distances_sum":2115.7045273344597}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9571116383616388,"seconds":7.499009370803833e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.8828125,"distances_sum":2088.7043122575856}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9375,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9656078296703303,"seconds":7.394701242446899e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.96875,"distances_sum":2115.7045273344597}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9375,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9656078296703303,"seconds":7.394701242446899e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.96875,"distances_sum":2115.7045273344597}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.63671875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.63671875,"f1":0.7637340090465099,"seconds":4.772096872329712e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.1796875,"distances_sum":1193.820186141166}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.63671875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.63671875,"f1":0.7637340090465099,"seconds":4.772096872329712e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.1796875,"distances_sum":1193.820186141166}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9549908424908431,"seconds":9.533017873764038e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.859375,"distances_sum":2060.0646043193765}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9208984375,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.9208984375,"f1":0.9549908424908431,"seconds":9.533017873764038e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.859375,"distances_sum":2060.0646043193765}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.958984375, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.958984375,"f1":0.9766025641025642,"seconds":6.632879376411438e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.9296875,"distances_sum":2204.5453071756706}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9658203125, conf: {"ssize":6,"bsize":12}, perf: {"precision":1.0,"recall":0.9658203125,"f1":0.981324404761905,"seconds":6.042420864105225e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.9921875,"distances_sum":2214.3602494335273}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9658203125,"state":{"ssize":6,"bsize":12},"perf":{"precision":1.0,"recall":0.9658203125,"f1":0.981324404761905,"seconds":6.042420864105225e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.9921875,"distances_sum":2214.3602494335273}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9658203125,"state":{"ssize":6,"bsize":12},"perf":{"precision":1.0,"recall":0.9658203125,"f1":0.981324404761905,"seconds":6.042420864105225e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.9921875,"distances_sum":2214.3602494335273}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7744140625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7744140625,"f1":0.8646899975024983,"seconds":5.645677447319031e-6,"exhaustive_search_seconds":2.3208558559417725e-6,"evaluations":8.265625,"distances_sum":1560.2101864166088}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5654296875, conf: {"ssize":5,"bsize":3}, perf: {"precision":null,"recall":0.5654296875,"f1":null,"seconds":4.800036549568176e-6,"exhaustive_search_seconds":2.3208558559417725e-6,"evaluations":7.1796875,"distances_sum":1040.8014008770751}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7744140625,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7744140625,"f1":0.8646899975024983,"seconds":5.645677447319031e-6,"exhaustive_search_seconds":2.3208558559417725e-6,"evaluations":8.265625,"distances_sum":1560.2101864166088}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9628949175824179,"seconds":5.9138983488082886e-6,"exhaustive_search_seconds":2.3208558559417725e-6,"evaluations":8.8125,"distances_sum":2091.7139476796283}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.822265625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.822265625,"f1":0.8948462995338002,"seconds":6.979331374168396e-6,"exhaustive_search_seconds":2.3208558559417725e-6,"evaluations":8.3125,"distances_sum":1678.122594458763}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9388278388278394,"seconds":6.2212347984313965e-6,"exhaustive_search_seconds":2.3208558559417725e-6,"evaluations":8.6484375,"distances_sum":1967.0058497169923}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8779296875, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8779296875,"f1":0.9305860805860814,"seconds":9.03196632862091e-6,"exhaustive_search_seconds":2.3208558559417725e-6,"evaluations":8.5234375,"distances_sum":1851.392909660339}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9345703125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9345703125,"f1":0.9628949175824179,"seconds":5.9138983488082886e-6,"exhaustive_search_seconds":2.3208558559417725e-6,"evaluations":8.8125,"distances_sum":2091.7139476796283}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9658203125, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.9658203125,"f1":0.9815476190476193,"seconds":6.183981895446777e-6,"exhaustive_search_seconds":2.3208558559417725e-6,"evaluations":8.953125,"distances_sum":2194.625421167112}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":8,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9657769314019317,"seconds":5.725771188735962e-6,"exhaustive_search_seconds":2.3208558559417725e-6,"evaluations":8.890625,"distances_sum":2106.8797681272786}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9692021520146525,"seconds":5.76116144657135e-6,"exhaustive_search_seconds":2.3208558559417725e-6,"evaluations":8.8828125,"distances_sum":2120.3531391699803}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9658203125,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.9658203125,"f1":0.9815476190476193,"seconds":6.183981895446777e-6,"exhaustive_search_seconds":2.3208558559417725e-6,"evaluations":8.953125,"distances_sum":2194.625421167112}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9658203125,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.9658203125,"f1":0.9815476190476193,"seconds":6.183981895446777e-6,"exhaustive_search_seconds":2.3208558559417725e-6,"evaluations":8.953125,"distances_sum":2194.625421167112}}, n: 9
mean(cfft.distances) = 0.920671187271435
mean(cdnet.distances) = 0.38163156325174596
mean(crand.distances) = 0.3380785791436734
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.9044444444444445
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.888888888888889
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.9133333333333334
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.9022222222222221
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8688888888888888
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8977777777777778
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9111111111111111
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.94
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9377777777777778
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.9
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8866666666666667
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.9244444444444445
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.9044444444444445
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8888888888888888
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8911111111111111
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9266666666666667
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9355555555555556
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8555555555555555
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.9066666666666666
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8822222222222221
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.9066666666666667
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9222222222222222
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.8688888888888889
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.9022222222222221
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9044444444444445
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9022222222222221
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8333333333333334
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8622222222222223
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8422222222222221
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8933333333333334
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9022222222222224
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9177777777777778
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.92
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.9733333333333334
*** finished computation of 12 references, err: [Inf, 0.5769514739513397] ***
*** center 1: selecting labels [1] (freq >= 1) [from [40, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 2]]
** centroid: 3, normalized-entropy: 0.9709505944546688, [(2, 3), (3, 2)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 15, 2]]
** centroid: 4, normalized-entropy: 0.5225593745369407, [(2, 15), (3, 2)]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 14]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 4, 17]]
** centroid: 8, normalized-entropy: 0.7024665512903904, [(2, 4), (3, 17)]
*** center 9: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [3, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
finished with 15 centroids; started with 12
acc = 0.9466666666666667
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.3843842447830317] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3843842447830317, 0.31166827260772106] ***
*** starting iteration: 2; err: [Inf, 0.3843842447830317, 0.31166827260772106] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3843842447830317, 0.31166827260772106, 0.3043733625581999] ***
*** starting iteration: 3; err: [Inf, 0.3843842447830317, 0.31166827260772106, 0.3043733625581999] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3843842447830317, 0.31166827260772106, 0.3043733625581999, 0.3025459883074141] ***
*** starting iteration: 4; err: [Inf, 0.3843842447830317, 0.31166827260772106, 0.3043733625581999, 0.3025459883074141] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3843842447830317, 0.31166827260772106, 0.3043733625581999, 0.3025459883074141, 0.30171468302714355] ***
*** finished computation of 3 references, err: [Inf, 0.3843842447830317, 0.31166827260772106, 0.3043733625581999, 0.3025459883074141, 0.30171468302714355] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [251, 12, 0]]
** centroid: 1, normalized-entropy: 0.26752362027976373, [(1, 251), (2, 12)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [1, 195, 24]]
** centroid: 2, normalized-entropy: 0.3396427524398195, [(1, 1), (2, 195), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [141, 43, 0]]
** centroid: 3, normalized-entropy: 0.7843982324677734, [(1, 141), (2, 43)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.45055711613144206] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45055711613144206, 0.29757611156124314] ***
*** starting iteration: 2; err: [Inf, 0.45055711613144206, 0.29757611156124314] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45055711613144206, 0.29757611156124314, 0.29524821410796187] ***
*** starting iteration: 3; err: [Inf, 0.45055711613144206, 0.29757611156124314, 0.29524821410796187] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45055711613144206, 0.29757611156124314, 0.29524821410796187, 0.29473500527480595] ***
*** finished computation of 3 references, err: [Inf, 0.45055711613144206, 0.29757611156124314, 0.29524821410796187, 0.29473500527480595] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [90, 147, 22]]
** centroid: 1, normalized-entropy: 0.817595406459827, [(1, 90), (2, 147), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [102, 108, 0]]
** centroid: 2, normalized-entropy: 0.9994110647387552, [(1, 102), (2, 108)]
*** center 3: selecting labels [1] (freq >= 1) [from [198, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.25089297364759555] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25089297364759555, 0.18075666606968813] ***
*** finished computation of 7 references, err: [Inf, 0.25089297364759555, 0.18075666606968813] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [149, 63, 0]]
** centroid: 1, normalized-entropy: 0.8778037341417048, [(1, 149), (2, 63)]
*** center 2: selecting labels [1] (freq >= 2) [from [128, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 105, 28]]
** centroid: 3, normalized-entropy: 0.7424875695421234, [(2, 105), (3, 28)]
*** center 4: selecting labels [1] (freq >= 2) [from [39, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 32, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [28, 49, 0]]
** centroid: 6, normalized-entropy: 0.9456603046006401, [(1, 28), (2, 49)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [41, 4, 0]]
** centroid: 7, normalized-entropy: 0.43275015878875417, [(1, 41), (2, 4)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1955386150001396] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1955386150001396, 0.15124414289842122] ***
*** finished computation of 7 references, err: [Inf, 0.1955386150001396, 0.15124414289842122] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [99, 35, 0]]
** centroid: 1, normalized-entropy: 0.8285428398536293, [(1, 99), (2, 35)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [65, 38, 0]]
** centroid: 2, normalized-entropy: 0.9498485528365604, [(1, 65), (2, 38)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 88, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [128, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [34, 36, 0]]
** centroid: 6, normalized-entropy: 0.9994110647387552, [(1, 34), (2, 36)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 53, 24]]
** centroid: 7, normalized-entropy: 0.8951127210954559, [(2, 53), (3, 24)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23699817685668692] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23699817685668692, 0.18042086701382182] ***
*** finished computation of 7 references, err: [Inf, 0.23699817685668692, 0.18042086701382182] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [25, 62, 0]]
** centroid: 1, normalized-entropy: 0.8652817028791377, [(1, 25), (2, 62)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [135, 33, 0]]
** centroid: 2, normalized-entropy: 0.7147274731317893, [(1, 135), (2, 33)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 70, 20]]
** centroid: 3, normalized-entropy: 0.7642045065086204, [(2, 70), (3, 20)]
*** center 4: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [50, 42, 0]]
** centroid: 5, normalized-entropy: 0.9945386816500111, [(1, 50), (2, 42)]
*** center 6: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 48, 2]]
** centroid: 7, normalized-entropy: 0.24229218908241482, [(2, 48), (3, 2)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.41075913082562143] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41075913082562143, 0.3157110786199704] ***
*** starting iteration: 2; err: [Inf, 0.41075913082562143, 0.3157110786199704] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41075913082562143, 0.3157110786199704, 0.30226378224149636] ***
*** starting iteration: 3; err: [Inf, 0.41075913082562143, 0.3157110786199704, 0.30226378224149636] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41075913082562143, 0.3157110786199704, 0.30226378224149636, 0.2989007904636184] ***
*** finished computation of 3 references, err: [Inf, 0.41075913082562143, 0.3157110786199704, 0.30226378224149636, 0.2989007904636184] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [246, 8, 0]]
** centroid: 1, normalized-entropy: 0.20183992963258704, [(1, 246), (2, 8)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [4, 181, 28]]
** centroid: 2, normalized-entropy: 0.43665998276971346, [(1, 4), (2, 181), (3, 28)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [135, 64, 0]]
** centroid: 3, normalized-entropy: 0.906121577318211, [(1, 135), (2, 64)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3420677720534167] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3420677720534167, 0.2991275246446391] ***
*** starting iteration: 2; err: [Inf, 0.3420677720534167, 0.2991275246446391] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3420677720534167, 0.2991275246446391, 0.29363914876701547] ***
*** starting iteration: 3; err: [Inf, 0.3420677720534167, 0.2991275246446391, 0.29363914876701547] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3420677720534167, 0.2991275246446391, 0.29363914876701547, 0.2924879776534514] ***
*** finished computation of 3 references, err: [Inf, 0.3420677720534167, 0.2991275246446391, 0.29363914876701547, 0.2924879776534514] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [125, 96, 0]]
** centroid: 1, normalized-entropy: 0.987543122052102, [(1, 125), (2, 96)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [59, 154, 24]]
** centroid: 2, normalized-entropy: 0.7811602050340807, [(1, 59), (2, 154), (3, 24)]
*** center 3: selecting labels [1] (freq >= 2) [from [209, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.37826845862217123] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37826845862217123, 0.3098065644834956] ***
*** starting iteration: 2; err: [Inf, 0.37826845862217123, 0.3098065644834956] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37826845862217123, 0.3098065644834956, 0.2986642407683441] ***
*** starting iteration: 3; err: [Inf, 0.37826845862217123, 0.3098065644834956, 0.2986642407683441] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37826845862217123, 0.3098065644834956, 0.2986642407683441, 0.2967278627703885] ***
*** finished computation of 3 references, err: [Inf, 0.37826845862217123, 0.3098065644834956, 0.2986642407683441, 0.2967278627703885] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [157, 62, 0]]
** centroid: 1, normalized-entropy: 0.8596472019757319, [(1, 157), (2, 62)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [1, 189, 22]]
** centroid: 2, normalized-entropy: 0.48237258307778585, [(2, 189), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [232, 4, 0]]
** centroid: 3, normalized-entropy: 0.12394986771100755, [(1, 232), (2, 4)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.21701441359686646] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21701441359686646, 0.16918597631603927] ***
*** starting iteration: 2; err: [Inf, 0.21701441359686646, 0.16918597631603927] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21701441359686646, 0.16918597631603927, 0.1614393044162441] ***
*** starting iteration: 3; err: [Inf, 0.21701441359686646, 0.16918597631603927, 0.1614393044162441] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21701441359686646, 0.16918597631603927, 0.1614393044162441, 0.15522447585998042] ***
*** finished computation of 7 references, err: [Inf, 0.21701441359686646, 0.16918597631603927, 0.1614393044162441, 0.15522447585998042] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 49, 10]]
** centroid: 1, normalized-entropy: 0.656540281386946, [(2, 49), (3, 10)]
*** center 2: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [46, 27, 0]]
** centroid: 3, normalized-entropy: 0.9505668528932193, [(1, 46), (2, 27)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [15, 65, 0]]
** centroid: 4, normalized-entropy: 0.6962122601251459, [(1, 15), (2, 65)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 73, 18]]
** centroid: 5, normalized-entropy: 0.7175106531195438, [(2, 73), (3, 18)]
*** center 6: selecting labels [1] (freq >= 1) [from [117, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [125, 39, 0]]
** centroid: 7, normalized-entropy: 0.7913707721888852, [(1, 125), (2, 39)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24730441245813106] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24730441245813106, 0.1842020911288851] ***
*** starting iteration: 2; err: [Inf, 0.24730441245813106, 0.1842020911288851] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24730441245813106, 0.1842020911288851, 0.16537125875567388] ***
*** starting iteration: 3; err: [Inf, 0.24730441245813106, 0.1842020911288851, 0.16537125875567388] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24730441245813106, 0.1842020911288851, 0.16537125875567388, 0.15354995529001197] ***
*** finished computation of 7 references, err: [Inf, 0.24730441245813106, 0.1842020911288851, 0.16537125875567388, 0.15354995529001197] ***
*** center 1: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 99, 24]]
** centroid: 2, normalized-entropy: 0.7120640548905481, [(2, 99), (3, 24)]
*** center 3: selecting labels [1] (freq >= 1) [from [120, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [20, 65, 0]]
** centroid: 4, normalized-entropy: 0.787126586201269, [(1, 20), (2, 65)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [52, 54, 0]]
** centroid: 5, normalized-entropy: 0.9997431860710851, [(1, 52), (2, 54)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [72, 3, 0]]
** centroid: 6, normalized-entropy: 0.24229218908241482, [(1, 72), (2, 3)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [74, 29, 0]]
** centroid: 7, normalized-entropy: 0.857558799850773, [(1, 74), (2, 29)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19087652414981304] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19087652414981304, 0.15884396364853748] ***
*** starting iteration: 2; err: [Inf, 0.19087652414981304, 0.15884396364853748] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19087652414981304, 0.15884396364853748, 0.1536454943942836] ***
*** starting iteration: 3; err: [Inf, 0.19087652414981304, 0.15884396364853748, 0.1536454943942836] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19087652414981304, 0.15884396364853748, 0.1536454943942836, 0.15201084241494425] ***
*** finished computation of 7 references, err: [Inf, 0.19087652414981304, 0.15884396364853748, 0.1536454943942836, 0.15201084241494425] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [90, 3, 0]]
** centroid: 1, normalized-entropy: 0.2055925081850832, [(1, 90), (2, 3)]
*** center 2: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [58, 49, 0]]
** centroid: 3, normalized-entropy: 0.9948905370642835, [(1, 58), (2, 49)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 91, 22]]
** centroid: 4, normalized-entropy: 0.7111806626974718, [(2, 91), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [95, 6, 0]]
** centroid: 5, normalized-entropy: 0.3250821976451909, [(1, 95), (2, 6)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 91, 0]]
** centroid: 6, normalized-entropy: 0.14981136747274781, [(1, 2), (2, 91)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [63, 15, 0]]
** centroid: 7, normalized-entropy: 0.7062740891876008, [(1, 63), (2, 15)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3597154728634781] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3597154728634781, 0.2466718235385937] ***
*** starting iteration: 2; err: [Inf, 0.3597154728634781, 0.2466718235385937] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3597154728634781, 0.2466718235385937, 0.23327684996079082] ***
*** starting iteration: 3; err: [Inf, 0.3597154728634781, 0.2466718235385937, 0.23327684996079082] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3597154728634781, 0.2466718235385937, 0.23327684996079082, 0.23151251739841905] ***
*** finished computation of 3 references, err: [Inf, 0.3597154728634781, 0.2466718235385937, 0.23327684996079082, 0.23151251739841905] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [130, 79, 0]]
** centroid: 1, normalized-entropy: 0.9566103531349965, [(1, 130), (2, 79)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [1, 160, 28]]
** centroid: 2, normalized-entropy: 0.41110376319022773, [(1, 1), (2, 160), (3, 28)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [254, 14, 0]]
** centroid: 3, normalized-entropy: 0.2958321779617403, [(1, 254), (2, 14)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3429607936660054] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3429607936660054, 0.23755537941940186] ***
*** starting iteration: 2; err: [Inf, 0.3429607936660054, 0.23755537941940186] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3429607936660054, 0.23755537941940186, 0.23437273640721767] ***
*** starting iteration: 3; err: [Inf, 0.3429607936660054, 0.23755537941940186, 0.23437273640721767] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3429607936660054, 0.23755537941940186, 0.23437273640721767, 0.23386524601405237] ***
*** finished computation of 3 references, err: [Inf, 0.3429607936660054, 0.23755537941940186, 0.23437273640721767, 0.23386524601405237] ***
*** center 1: selecting labels [1] (freq >= 1) [from [202, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [93, 123, 10]]
** centroid: 2, normalized-entropy: 0.7595448144543598, [(1, 93), (2, 123), (3, 10)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [98, 127, 14]]
** centroid: 3, normalized-entropy: 0.7898492856495231, [(1, 98), (2, 127), (3, 14)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.27776280013394766] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27776280013394766, 0.23975502873320242] ***
*** starting iteration: 2; err: [Inf, 0.27776280013394766, 0.23975502873320242] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27776280013394766, 0.23975502873320242, 0.23511728940243976] ***
*** starting iteration: 3; err: [Inf, 0.27776280013394766, 0.23975502873320242, 0.23511728940243976] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27776280013394766, 0.23975502873320242, 0.23511728940243976, 0.23415148863359458] ***
*** finished computation of 3 references, err: [Inf, 0.27776280013394766, 0.23975502873320242, 0.23511728940243976, 0.23415148863359458] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [62, 161, 22]]
** centroid: 1, normalized-entropy: 0.7646637121944819, [(1, 62), (2, 161), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [120, 94, 0]]
** centroid: 2, normalized-entropy: 0.9893257549491837, [(1, 120), (2, 94)]
*** center 3: selecting labels [1] (freq >= 1) [from [208, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.21379370286406293] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21379370286406293, 0.20209007498852954] ***
*** starting iteration: 2; err: [Inf, 0.21379370286406293, 0.20209007498852954] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21379370286406293, 0.20209007498852954, 0.20023839887967138] ***
*** starting iteration: 3; err: [Inf, 0.21379370286406293, 0.20209007498852954, 0.20023839887967138] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21379370286406293, 0.20209007498852954, 0.20023839887967138, 0.1984768555074505] ***
*** finished computation of 7 references, err: [Inf, 0.21379370286406293, 0.20209007498852954, 0.20023839887967138, 0.1984768555074505] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 45, 17]]
** centroid: 1, normalized-entropy: 0.8474179614176633, [(2, 45), (3, 17)]
*** center 2: selecting labels [1] (freq >= 2) [from [130, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 29, 11]]
** centroid: 3, normalized-entropy: 0.8485481782946159, [(2, 29), (3, 11)]
*** center 4: selecting labels [1] (freq >= 2) [from [102, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [106, 24, 0]]
** centroid: 5, normalized-entropy: 0.6900703653284017, [(1, 106), (2, 24)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [6, 86, 0]]
** centroid: 6, normalized-entropy: 0.3478169135710632, [(1, 6), (2, 86)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [41, 68, 0]]
** centroid: 7, normalized-entropy: 0.9552751009754172, [(1, 41), (2, 68)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.259770535644021] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.259770535644021, 0.2045924648896664] ***
*** starting iteration: 2; err: [Inf, 0.259770535644021, 0.2045924648896664] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.259770535644021, 0.2045924648896664, 0.1982842804312516] ***
*** starting iteration: 3; err: [Inf, 0.259770535644021, 0.2045924648896664, 0.1982842804312516] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.259770535644021, 0.2045924648896664, 0.1982842804312516, 0.19508795424000078] ***
*** finished computation of 7 references, err: [Inf, 0.259770535644021, 0.2045924648896664, 0.1982842804312516, 0.19508795424000078] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [41, 14, 0]]
** centroid: 1, normalized-entropy: 0.8184033299219708, [(1, 41), (2, 14)]
*** center 2: selecting labels [1] (freq >= 2) [from [136, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [56, 50, 0]]
** centroid: 3, normalized-entropy: 0.9976875760352552, [(1, 56), (2, 50)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [93, 41, 0]]
** centroid: 4, normalized-entropy: 0.8884667902906952, [(1, 93), (2, 41)]
*** center 5: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 55, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 90, 24]]
** centroid: 7, normalized-entropy: 0.7424875695421234, [(2, 90), (3, 24)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2377652208372459] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2377652208372459, 0.20635038393450486] ***
*** starting iteration: 2; err: [Inf, 0.2377652208372459, 0.20635038393450486] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2377652208372459, 0.20635038393450486, 0.19704824732825987] ***
*** starting iteration: 3; err: [Inf, 0.2377652208372459, 0.20635038393450486, 0.19704824732825987] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2377652208372459, 0.20635038393450486, 0.19704824732825987, 0.1924856818299266] ***
*** finished computation of 7 references, err: [Inf, 0.2377652208372459, 0.20635038393450486, 0.19704824732825987, 0.1924856818299266] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [28, 43, 0]]
** centroid: 1, normalized-entropy: 0.9675594819018211, [(1, 28), (2, 43)]
*** center 2: selecting labels [1] (freq >= 2) [from [105, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [53, 20, 0]]
** centroid: 3, normalized-entropy: 0.847107490529376, [(1, 53), (2, 20)]
*** center 4: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [52, 41, 0]]
** centroid: 5, normalized-entropy: 0.989884644089986, [(1, 52), (2, 41)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 107, 22]]
** centroid: 6, normalized-entropy: 0.6589445953074149, [(2, 107), (3, 22)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [83, 44, 0]]
** centroid: 7, normalized-entropy: 0.9308637102222774, [(1, 83), (2, 44)]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.39446949404342707] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39446949404342707, 0.3434253676749721] ***
*** starting iteration: 2; err: [Inf, 0.39446949404342707, 0.3434253676749721] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39446949404342707, 0.3434253676749721, 0.3332895874003838] ***
*** starting iteration: 3; err: [Inf, 0.39446949404342707, 0.3434253676749721, 0.3332895874003838] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39446949404342707, 0.3434253676749721, 0.3332895874003838, 0.3293611313826083] ***
*** starting iteration: 4; err: [Inf, 0.39446949404342707, 0.3434253676749721, 0.3332895874003838, 0.3293611313826083] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39446949404342707, 0.3434253676749721, 0.3332895874003838, 0.3293611313826083, 0.32700637801251076] ***
*** starting iteration: 5; err: [Inf, 0.39446949404342707, 0.3434253676749721, 0.3332895874003838, 0.3293611313826083, 0.32700637801251076] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39446949404342707, 0.3434253676749721, 0.3332895874003838, 0.3293611313826083, 0.32700637801251076, 0.3246766722204538] ***
*** starting iteration: 6; err: [Inf, 0.39446949404342707, 0.3434253676749721, 0.3332895874003838, 0.3293611313826083, 0.32700637801251076, 0.3246766722204538] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39446949404342707, 0.3434253676749721, 0.3332895874003838, 0.3293611313826083, 0.32700637801251076, 0.3246766722204538, 0.32233369768269965] ***
*** starting iteration: 7; err: [Inf, 0.39446949404342707, 0.3434253676749721, 0.3332895874003838, 0.3293611313826083, 0.32700637801251076, 0.3246766722204538, 0.32233369768269965] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39446949404342707, 0.3434253676749721, 0.3332895874003838, 0.3293611313826083, 0.32700637801251076, 0.3246766722204538, 0.32233369768269965, 0.3198715958369521] ***
*** starting iteration: 8; err: [Inf, 0.39446949404342707, 0.3434253676749721, 0.3332895874003838, 0.3293611313826083, 0.32700637801251076, 0.3246766722204538, 0.32233369768269965, 0.3198715958369521] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39446949404342707, 0.3434253676749721, 0.3332895874003838, 0.3293611313826083, 0.32700637801251076, 0.3246766722204538, 0.32233369768269965, 0.3198715958369521, 0.31699407440624217] ***
*** starting iteration: 9; err: [Inf, 0.39446949404342707, 0.3434253676749721, 0.3332895874003838, 0.3293611313826083, 0.32700637801251076, 0.3246766722204538, 0.32233369768269965, 0.3198715958369521, 0.31699407440624217] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39446949404342707, 0.3434253676749721, 0.3332895874003838, 0.3293611313826083, 0.32700637801251076, 0.3246766722204538, 0.32233369768269965, 0.3198715958369521, 0.31699407440624217, 0.2983873969827731] ***
*** starting iteration: 10; err: [Inf, 0.39446949404342707, 0.3434253676749721, 0.3332895874003838, 0.3293611313826083, 0.32700637801251076, 0.3246766722204538, 0.32233369768269965, 0.3198715958369521, 0.31699407440624217, 0.2983873969827731] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39446949404342707, 0.3434253676749721, 0.3332895874003838, 0.3293611313826083, 0.32700637801251076, 0.3246766722204538, 0.32233369768269965, 0.3198715958369521, 0.31699407440624217, 0.2983873969827731, 0.2962224006194163] ***
*** finished computation of 3 references, err: [Inf, 0.39446949404342707, 0.3434253676749721, 0.3332895874003838, 0.3293611313826083, 0.32700637801251076, 0.3246766722204538, 0.32233369768269965, 0.3198715958369521, 0.31699407440624217, 0.2983873969827731, 0.2962224006194163] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [110, 88, 0]]
** centroid: 1, normalized-entropy: 0.9910760598382222, [(1, 110), (2, 88)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [89, 165, 28]]
** centroid: 2, normalized-entropy: 0.825497980458516, [(1, 89), (2, 165), (3, 28)]
*** center 3: selecting labels [1] (freq >= 1) [from [186, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.38534008519726803] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38534008519726803, 0.2985236776079508] ***
*** starting iteration: 2; err: [Inf, 0.38534008519726803, 0.2985236776079508] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38534008519726803, 0.2985236776079508, 0.29565407296941465] ***
*** starting iteration: 3; err: [Inf, 0.38534008519726803, 0.2985236776079508, 0.29565407296941465] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38534008519726803, 0.2985236776079508, 0.29565407296941465, 0.29531030986189977] ***
*** finished computation of 3 references, err: [Inf, 0.38534008519726803, 0.2985236776079508, 0.29565407296941465, 0.29531030986189977] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [90, 139, 24]]
** centroid: 1, normalized-entropy: 0.8375622070067408, [(1, 90), (2, 139), (3, 24)]
*** center 2: selecting labels [1] (freq >= 1) [from [213, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [90, 111, 0]]
** centroid: 3, normalized-entropy: 0.9921116920021501, [(1, 90), (2, 111)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3415507848962382] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3415507848962382, 0.32684574700958996] ***
*** starting iteration: 2; err: [Inf, 0.3415507848962382, 0.32684574700958996] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3415507848962382, 0.32684574700958996, 0.3233732366409066] ***
*** starting iteration: 3; err: [Inf, 0.3415507848962382, 0.32684574700958996, 0.3233732366409066] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3415507848962382, 0.32684574700958996, 0.3233732366409066, 0.3183964924388349] ***
*** starting iteration: 4; err: [Inf, 0.3415507848962382, 0.32684574700958996, 0.3233732366409066, 0.3183964924388349] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3415507848962382, 0.32684574700958996, 0.3233732366409066, 0.3183964924388349, 0.312897487444387] ***
*** starting iteration: 5; err: [Inf, 0.3415507848962382, 0.32684574700958996, 0.3233732366409066, 0.3183964924388349, 0.312897487444387] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3415507848962382, 0.32684574700958996, 0.3233732366409066, 0.3183964924388349, 0.312897487444387, 0.30457695044515687] ***
*** starting iteration: 6; err: [Inf, 0.3415507848962382, 0.32684574700958996, 0.3233732366409066, 0.3183964924388349, 0.312897487444387, 0.30457695044515687] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3415507848962382, 0.32684574700958996, 0.3233732366409066, 0.3183964924388349, 0.312897487444387, 0.30457695044515687, 0.2947728831245602] ***
*** starting iteration: 7; err: [Inf, 0.3415507848962382, 0.32684574700958996, 0.3233732366409066, 0.3183964924388349, 0.312897487444387, 0.30457695044515687, 0.2947728831245602] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3415507848962382, 0.32684574700958996, 0.3233732366409066, 0.3183964924388349, 0.312897487444387, 0.30457695044515687, 0.2947728831245602, 0.29418778505924714] ***
*** finished computation of 3 references, err: [Inf, 0.3415507848962382, 0.32684574700958996, 0.3233732366409066, 0.3183964924388349, 0.312897487444387, 0.30457695044515687, 0.2947728831245602, 0.29418778505924714] ***
*** center 1: selecting labels [1] (freq >= 1) [from [195, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [97, 119, 0]]
** centroid: 2, normalized-entropy: 0.9925038932477432, [(1, 97), (2, 119)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [98, 136, 22]]
** centroid: 3, normalized-entropy: 0.8324230687214709, [(1, 98), (2, 136), (3, 22)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.394501248022189] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.394501248022189, 0.30605119583686374] ***
*** starting iteration: 2; err: [Inf, 0.394501248022189, 0.30605119583686374] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.394501248022189, 0.30605119583686374, 0.29963899348993916] ***
*** starting iteration: 3; err: [Inf, 0.394501248022189, 0.30605119583686374, 0.29963899348993916] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.394501248022189, 0.30605119583686374, 0.29963899348993916, 0.29814534775028984] ***
*** finished computation of 3 references, err: [Inf, 0.394501248022189, 0.30605119583686374, 0.29963899348993916, 0.29814534775028984] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [229, 34, 0]]
** centroid: 1, normalized-entropy: 0.5554535745519535, [(1, 229), (2, 34)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [156, 39, 0]]
** centroid: 2, normalized-entropy: 0.7219280948873623, [(1, 156), (2, 39)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 180, 28]]
** centroid: 3, normalized-entropy: 0.5699613760403499, [(2, 180), (3, 28)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.39018240707718405] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39018240707718405, 0.2982233033865981] ***
*** starting iteration: 2; err: [Inf, 0.39018240707718405, 0.2982233033865981] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39018240707718405, 0.2982233033865981, 0.29555928577547486] ***
*** starting iteration: 3; err: [Inf, 0.39018240707718405, 0.2982233033865981, 0.29555928577547486] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39018240707718405, 0.2982233033865981, 0.29555928577547486, 0.2947553746413434] ***
*** finished computation of 3 references, err: [Inf, 0.39018240707718405, 0.2982233033865981, 0.29555928577547486, 0.2947553746413434] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [254, 5, 0]]
** centroid: 1, normalized-entropy: 0.13752044631756952, [(1, 254), (2, 5)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [3, 175, 24]]
** centroid: 2, normalized-entropy: 0.40043046078065425, [(1, 3), (2, 175), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [136, 70, 0]]
** centroid: 3, normalized-entropy: 0.9246327718618892, [(1, 136), (2, 70)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4768573753200639] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4768573753200639, 0.2984557120426875] ***
*** starting iteration: 2; err: [Inf, 0.4768573753200639, 0.2984557120426875] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4768573753200639, 0.2984557120426875, 0.2964618294660387] ***
*** starting iteration: 3; err: [Inf, 0.4768573753200639, 0.2984557120426875, 0.2964618294660387] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4768573753200639, 0.2984557120426875, 0.2964618294660387, 0.29579950528808574] ***
*** finished computation of 3 references, err: [Inf, 0.4768573753200639, 0.2984557120426875, 0.2964618294660387, 0.29579950528808574] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [251, 9, 0]]
** centroid: 1, normalized-entropy: 0.21703413204912916, [(1, 251), (2, 9)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [1, 170, 22]]
** centroid: 2, normalized-entropy: 0.35188310143436724, [(1, 1), (2, 170), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [138, 76, 0]]
** centroid: 3, normalized-entropy: 0.9385750889380636, [(1, 138), (2, 76)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.30087356264150616] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30087356264150616, 0.24399431608057953] ***
*** starting iteration: 2; err: [Inf, 0.30087356264150616, 0.24399431608057953] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30087356264150616, 0.24399431608057953, 0.23632113392291418] ***
*** starting iteration: 3; err: [Inf, 0.30087356264150616, 0.24399431608057953, 0.23632113392291418] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30087356264150616, 0.24399431608057953, 0.23632113392291418, 0.23428835278074886] ***
*** finished computation of 3 references, err: [Inf, 0.30087356264150616, 0.24399431608057953, 0.23632113392291418, 0.23428835278074886] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [81, 178, 28]]
** centroid: 1, normalized-entropy: 0.8013334360190545, [(1, 81), (2, 178), (3, 28)]
*** center 2: selecting labels [1] (freq >= 2) [from [191, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [113, 75, 0]]
** centroid: 3, normalized-entropy: 0.9703248913579179, [(1, 113), (2, 75)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.43362346978933514] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43362346978933514, 0.2712361235436851] ***
*** starting iteration: 2; err: [Inf, 0.43362346978933514, 0.2712361235436851] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43362346978933514, 0.2712361235436851, 0.2551339510297668] ***
*** starting iteration: 3; err: [Inf, 0.43362346978933514, 0.2712361235436851, 0.2551339510297668] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43362346978933514, 0.2712361235436851, 0.2551339510297668, 0.2378405726750729] ***
*** finished computation of 3 references, err: [Inf, 0.43362346978933514, 0.2712361235436851, 0.2551339510297668, 0.2378405726750729] ***
*** center 1: selecting labels [1] (freq >= 2) [from [222, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [111, 76, 0]]
** centroid: 2, normalized-entropy: 0.9745808118310898, [(1, 111), (2, 76)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [60, 174, 24]]
** centroid: 3, normalized-entropy: 0.7516670337378022, [(1, 60), (2, 174), (3, 24)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.31389246018941347] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31389246018941347, 0.2628844552750195] ***
*** starting iteration: 2; err: [Inf, 0.31389246018941347, 0.2628844552750195] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31389246018941347, 0.2628844552750195, 0.24078351182435853] ***
*** starting iteration: 3; err: [Inf, 0.31389246018941347, 0.2628844552750195, 0.24078351182435853] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31389246018941347, 0.2628844552750195, 0.24078351182435853, 0.23532024888402742] ***
*** finished computation of 3 references, err: [Inf, 0.31389246018941347, 0.2628844552750195, 0.24078351182435853, 0.23532024888402742] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [240, 4, 0]]
** centroid: 1, normalized-entropy: 0.12068101401352371, [(1, 240), (2, 4)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [116, 95, 0]]
** centroid: 2, normalized-entropy: 0.9928428937961026, [(1, 116), (2, 95)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [34, 156, 22]]
** centroid: 3, normalized-entropy: 0.6866276310846002, [(1, 34), (2, 156), (3, 22)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2284090309389853] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2284090309389853, 0.19039911492769648] ***
*** starting iteration: 2; err: [Inf, 0.2284090309389853, 0.19039911492769648] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2284090309389853, 0.19039911492769648, 0.18788929784799124] ***
*** starting iteration: 3; err: [Inf, 0.2284090309389853, 0.19039911492769648, 0.18788929784799124] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2284090309389853, 0.19039911492769648, 0.18788929784799124, 0.1872504132075442] ***
*** finished computation of 7 references, err: [Inf, 0.2284090309389853, 0.19039911492769648, 0.18788929784799124, 0.1872504132075442] ***
*** center 1: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 70, 28]]
** centroid: 2, normalized-entropy: 0.8631205685666311, [(2, 70), (3, 28)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [96, 2, 0]]
** centroid: 3, normalized-entropy: 0.14372616993938164, [(1, 96), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [66, 49, 0]]
** centroid: 4, normalized-entropy: 0.9841787966895654, [(1, 66), (2, 49)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [43, 65, 0]]
** centroid: 5, normalized-entropy: 0.9698570179131006, [(1, 43), (2, 65)]
*** center 6: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 67, 0]]
** centroid: 7, normalized-entropy: 0.11058084476988722, [(1, 1), (2, 67)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24172475577905952] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24172475577905952, 0.19152837327047567] ***
*** starting iteration: 2; err: [Inf, 0.24172475577905952, 0.19152837327047567] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24172475577905952, 0.19152837327047567, 0.18849556709638332] ***
*** starting iteration: 3; err: [Inf, 0.24172475577905952, 0.19152837327047567, 0.18849556709638332] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24172475577905952, 0.19152837327047567, 0.18849556709638332, 0.18838205187605217] ***
*** finished computation of 7 references, err: [Inf, 0.24172475577905952, 0.19152837327047567, 0.18849556709638332, 0.18838205187605217] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [5, 114, 0]]
** centroid: 1, normalized-entropy: 0.25146396423889, [(1, 5), (2, 114)]
*** center 2: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [57, 51, 0]]
** centroid: 3, normalized-entropy: 0.9977724720899819, [(1, 57), (2, 51)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [68, 26, 0]]
** centroid: 4, normalized-entropy: 0.8507707040532602, [(1, 68), (2, 26)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 59, 24]]
** centroid: 5, normalized-entropy: 0.8676293117125105, [(2, 59), (3, 24)]
*** center 6: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23787432410956724] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23787432410956724, 0.19019128336128535] ***
*** starting iteration: 2; err: [Inf, 0.23787432410956724, 0.19019128336128535] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23787432410956724, 0.19019128336128535, 0.18662496491627156] ***
*** starting iteration: 3; err: [Inf, 0.23787432410956724, 0.19019128336128535, 0.18662496491627156] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23787432410956724, 0.19019128336128535, 0.18662496491627156, 0.1862850037781798] ***
*** finished computation of 7 references, err: [Inf, 0.23787432410956724, 0.19019128336128535, 0.18662496491627156, 0.1862850037781798] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 91, 22]]
** centroid: 1, normalized-entropy: 0.7111806626974718, [(2, 91), (3, 22)]
*** center 2: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [61, 11, 0]]
** centroid: 3, normalized-entropy: 0.6167482598263911, [(1, 61), (2, 11)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [78, 29, 0]]
** centroid: 4, normalized-entropy: 0.8429359403268015, [(1, 78), (2, 29)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [60, 29, 0]]
** centroid: 5, normalized-entropy: 0.9106223680988619, [(1, 60), (2, 29)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [6, 95, 0]]
** centroid: 6, normalized-entropy: 0.3250821976451909, [(1, 6), (2, 95)]
*** center 7: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.43958266721003586] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43958266721003586, 0.3004533531614118] ***
*** starting iteration: 2; err: [Inf, 0.43958266721003586, 0.3004533531614118] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43958266721003586, 0.3004533531614118, 0.2990120584075269] ***
*** starting iteration: 3; err: [Inf, 0.43958266721003586, 0.3004533531614118, 0.2990120584075269] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43958266721003586, 0.3004533531614118, 0.2990120584075269, 0.29818069393671043] ***
*** finished computation of 3 references, err: [Inf, 0.43958266721003586, 0.3004533531614118, 0.2990120584075269, 0.29818069393671043] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [240, 12, 0]]
** centroid: 1, normalized-entropy: 0.2761954276479391, [(1, 240), (2, 12)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [2, 187, 28]]
** centroid: 2, normalized-entropy: 0.3965303822639762, [(1, 2), (2, 187), (3, 28)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [143, 54, 0]]
** centroid: 3, normalized-entropy: 0.8473029551105034, [(1, 143), (2, 54)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 12)
[0.9299958641276008, 0.91902081722441, 0.9150078221934509, 0.9079828331325337, 0.8969748191305077, 0.8879568190945436, 0.8810097522672372, 0.8710027392662122, 0.8660217103330875, 0.8590147033260805, 0.8148717579855305, 0.7789855723987461]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.3, 1) => 0.9299958641276008
finished with 13
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.41833979949598443] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.41833979949598443, 0.2797026730585821] ***
*** finished computation of 7 references, err: [Inf, 0.41833979949598443, 0.2797026730585821] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 125, 4]]
** centroid: 1, normalized-entropy: 0.19942077803751093, [(2, 125), (3, 4)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [24, 7, 0]]
** centroid: 2, normalized-entropy: 0.7706290693639406, [(1, 24), (2, 7)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [222, 62, 0]]
** centroid: 3, normalized-entropy: 0.7570693252310562, [(1, 222), (2, 62)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [49, 7, 0]]
** centroid: 4, normalized-entropy: 0.5435644431995963, [(1, 49), (2, 7)]
*** center 5: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [8, 12, 0]]
** centroid: 6, normalized-entropy: 0.9709505944546688, [(1, 8), (2, 12)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 40, 24]]
** centroid: 7, normalized-entropy: 0.954434002924965, [(2, 40), (3, 24)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.31444779941127976] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.31444779941127976, 0.23888118139075779] ***
*** finished computation of 7 references, err: [Inf, 0.31444779941127976, 0.23888118139075779] ***
*** center 1: selecting labels [1] (freq >= 2) [from [160, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [38, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [17, 134, 5]]
** centroid: 3, normalized-entropy: 0.4391039980363414, [(1, 17), (2, 134), (3, 5)]
*** center 4: selecting labels [1, 2, 3] (freq >= 2) [from [64, 77, 19]]
** centroid: 4, normalized-entropy: 0.8843084169617834, [(1, 64), (2, 77), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [63, 5, 0]]
** centroid: 5, normalized-entropy: 0.378958787501346, [(1, 63), (2, 5)]
*** center 6: selecting labels [1] (freq >= 2) [from [16, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [35, 34, 0]]
** centroid: 7, normalized-entropy: 0.9998484829291058, [(1, 35), (2, 34)]
finished with 13 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3966790874924293] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3966790874924293, 0.23881109867585654] ***
*** finished computation of 7 references, err: [Inf, 0.3966790874924293, 0.23881109867585654] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 56, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [130, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [101, 36, 0]]
** centroid: 3, normalized-entropy: 0.8309031792389611, [(1, 101), (2, 36)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 51, 19]]
** centroid: 4, normalized-entropy: 0.8435070855739035, [(2, 51), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [102, 42, 0]]
** centroid: 5, normalized-entropy: 0.8708644692353648, [(1, 102), (2, 42)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 22, 3]]
** centroid: 6, normalized-entropy: 0.5293608652873645, [(2, 22), (3, 3)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [57, 48, 0]]
** centroid: 7, normalized-entropy: 0.9946937953613056, [(1, 57), (2, 48)]
finished with 12 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 13)
[0.9299958641276008, 0.91902081722441, 0.9150078221934509, 0.9079828331325337, 0.8969748191305077, 0.8879568190945436, 0.8810097522672372, 0.8710027392662122, 0.8660217103330875, 0.8600157043270816, 0.8590147033260805, 0.8148717579855305, 0.7789855723987461]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.3, 1) => 0.9299958641276008
finished with 15
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.229593591030123] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.229593591030123, 0.19323820102055078] ***
*** starting iteration: 2; err: [Inf, 0.229593591030123, 0.19323820102055078] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.229593591030123, 0.19323820102055078, 0.18877698077940322] ***
*** starting iteration: 3; err: [Inf, 0.229593591030123, 0.19323820102055078, 0.18877698077940322] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.229593591030123, 0.19323820102055078, 0.18877698077940322, 0.187180170515689] ***
*** starting iteration: 4; err: [Inf, 0.229593591030123, 0.19323820102055078, 0.18877698077940322, 0.187180170515689] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.229593591030123, 0.19323820102055078, 0.18877698077940322, 0.187180170515689, 0.1859395930940087] ***
*** starting iteration: 5; err: [Inf, 0.229593591030123, 0.19323820102055078, 0.18877698077940322, 0.187180170515689, 0.1859395930940087] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.229593591030123, 0.19323820102055078, 0.18877698077940322, 0.187180170515689, 0.1859395930940087, 0.18537633588559915] ***
*** finished computation of 7 references, err: [Inf, 0.229593591030123, 0.19323820102055078, 0.18877698077940322, 0.187180170515689, 0.1859395930940087, 0.18537633588559915] ***
*** center 1: selecting labels [1] (freq >= 2) [from [117, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 62, 24]]
** centroid: 2, normalized-entropy: 0.8541802051521676, [(2, 62), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [68, 7, 0]]
** centroid: 3, normalized-entropy: 0.44749925503686355, [(1, 68), (2, 7)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [85, 13, 0]]
** centroid: 4, normalized-entropy: 0.5646695797525669, [(1, 85), (2, 13)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [25, 71, 0]]
** centroid: 5, normalized-entropy: 0.8273744775003173, [(1, 25), (2, 71)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [6, 97, 0]]
** centroid: 6, normalized-entropy: 0.32046828741158423, [(1, 6), (2, 97)]
*** center 7: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.23288036415677843] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23288036415677843, 0.19679714980963114] ***
*** starting iteration: 2; err: [Inf, 0.23288036415677843, 0.19679714980963114] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23288036415677843, 0.19679714980963114, 0.19402985838130005] ***
*** starting iteration: 3; err: [Inf, 0.23288036415677843, 0.19679714980963114, 0.19402985838130005] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23288036415677843, 0.19679714980963114, 0.19402985838130005, 0.19289715672135577] ***
*** starting iteration: 4; err: [Inf, 0.23288036415677843, 0.19679714980963114, 0.19402985838130005, 0.19289715672135577] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23288036415677843, 0.19679714980963114, 0.19402985838130005, 0.19289715672135577, 0.19202000071020522] ***
*** finished computation of 7 references, err: [Inf, 0.23288036415677843, 0.19679714980963114, 0.19402985838130005, 0.19289715672135577, 0.19202000071020522] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 92, 28]]
** centroid: 1, normalized-entropy: 0.7837769474847011, [(2, 92), (3, 28)]
*** center 2: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [57, 10, 0]]
** centroid: 3, normalized-entropy: 0.6079696120060726, [(1, 57), (2, 10)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [77, 41, 0]]
** centroid: 4, normalized-entropy: 0.9317769830665124, [(1, 77), (2, 41)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [78, 25, 0]]
** centroid: 5, normalized-entropy: 0.7995318105266797, [(1, 78), (2, 25)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [3, 85, 0]]
** centroid: 6, normalized-entropy: 0.21450983370697788, [(1, 3), (2, 85)]
*** center 7: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2518922615547789] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2518922615547789, 0.19346580661643392] ***
*** starting iteration: 2; err: [Inf, 0.2518922615547789, 0.19346580661643392] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2518922615547789, 0.19346580661643392, 0.18914862919523417] ***
*** starting iteration: 3; err: [Inf, 0.2518922615547789, 0.19346580661643392, 0.18914862919523417] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2518922615547789, 0.19346580661643392, 0.18914862919523417, 0.18835726304390263] ***
*** finished computation of 7 references, err: [Inf, 0.2518922615547789, 0.19346580661643392, 0.18914862919523417, 0.18835726304390263] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [32, 60, 0]]
** centroid: 1, normalized-entropy: 0.9321115676166747, [(1, 32), (2, 60)]
*** center 2: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [79, 31, 0]]
** centroid: 4, normalized-entropy: 0.8579163978157118, [(1, 79), (2, 31)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 87, 22]]
** centroid: 5, normalized-entropy: 0.725582675704817, [(2, 87), (3, 22)]
*** center 6: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [12, 77, 0]]
** centroid: 7, normalized-entropy: 0.5705411428522262, [(1, 12), (2, 77)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.18863304735052291] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18863304735052291, 0.1513598573368949] ***
*** starting iteration: 2; err: [Inf, 0.18863304735052291, 0.1513598573368949] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18863304735052291, 0.1513598573368949, 0.1481951024948253] ***
*** starting iteration: 3; err: [Inf, 0.18863304735052291, 0.1513598573368949, 0.1481951024948253] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18863304735052291, 0.1513598573368949, 0.1481951024948253, 0.1475360545905883] ***
*** finished computation of 7 references, err: [Inf, 0.18863304735052291, 0.1513598573368949, 0.1481951024948253, 0.1475360545905883] ***
*** center 1: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [88, 2, 0]]
** centroid: 2, normalized-entropy: 0.1537421803287618, [(1, 88), (2, 2)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 77, 28]]
** centroid: 3, normalized-entropy: 0.8366407419411671, [(2, 77), (3, 28)]
*** center 4: selecting labels [1] (freq >= 2) [from [111, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [56, 42, 0]]
** centroid: 5, normalized-entropy: 0.9852281360342514, [(1, 56), (2, 42)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [41, 67, 0]]
** centroid: 6, normalized-entropy: 0.9577800211448372, [(1, 41), (2, 67)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 65, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.18730008472985904] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18730008472985904, 0.15134593288622228] ***
*** starting iteration: 2; err: [Inf, 0.18730008472985904, 0.15134593288622228] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18730008472985904, 0.15134593288622228, 0.14767485084584628] ***
*** starting iteration: 3; err: [Inf, 0.18730008472985904, 0.15134593288622228, 0.14767485084584628] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18730008472985904, 0.15134593288622228, 0.14767485084584628, 0.14741183770611055] ***
*** finished computation of 7 references, err: [Inf, 0.18730008472985904, 0.15134593288622228, 0.14767485084584628, 0.14741183770611055] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 119, 24]]
** centroid: 1, normalized-entropy: 0.6527215895689277, [(2, 119), (3, 24)]
*** center 2: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [70, 2, 0]]
** centroid: 3, normalized-entropy: 0.18312206830137262, [(1, 70), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [59, 39, 0]]
** centroid: 4, normalized-entropy: 0.9697442681154499, [(1, 59), (2, 39)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [84, 7, 0]]
** centroid: 5, normalized-entropy: 0.3912435636292556, [(1, 84), (2, 7)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [85, 7, 0]]
** centroid: 6, normalized-entropy: 0.3882389775123619, [(1, 85), (2, 7)]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 76, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.20878029109859864] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20878029109859864, 0.15525424707893176] ***
*** starting iteration: 2; err: [Inf, 0.20878029109859864, 0.15525424707893176] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20878029109859864, 0.15525424707893176, 0.1515631111578896] ***
*** starting iteration: 3; err: [Inf, 0.20878029109859864, 0.15525424707893176, 0.1515631111578896] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20878029109859864, 0.15525424707893176, 0.1515631111578896, 0.1511571686566532] ***
*** finished computation of 7 references, err: [Inf, 0.20878029109859864, 0.15525424707893176, 0.1515631111578896, 0.1511571686566532] ***
*** center 1: selecting labels [1] (freq >= 2) [from [110, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 79, 22]]
** centroid: 2, normalized-entropy: 0.756170148929897, [(2, 79), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [69, 5, 0]]
** centroid: 3, normalized-entropy: 0.35678001438394347, [(1, 69), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [79, 42, 0]]
** centroid: 4, normalized-entropy: 0.9314581888225363, [(1, 79), (2, 42)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [45, 53, 0]]
** centroid: 5, normalized-entropy: 0.9951876662918929, [(1, 45), (2, 53)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [3, 76, 0]]
** centroid: 6, normalized-entropy: 0.23292785546981223, [(1, 3), (2, 76)]
*** center 7: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 15)
[0.9349828870786955, 0.9299958641276008, 0.91902081722441, 0.9150078221934509, 0.9079828331325337, 0.8969748191305077, 0.8879568190945436, 0.8810097522672372, 0.871979764195333, 0.8710027392662122, 0.8660217103330875, 0.8600157043270816, 0.8590147033260805, 0.8148717579855305, 0.7789855723987461]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.9, 2) => 0.9349828870786955
finished with 16
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.38015245516328616] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38015245516328616, 0.31026385222804975] ***
*** starting iteration: 2; err: [Inf, 0.38015245516328616, 0.31026385222804975] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38015245516328616, 0.31026385222804975, 0.2988774542089876] ***
*** starting iteration: 3; err: [Inf, 0.38015245516328616, 0.31026385222804975, 0.2988774542089876] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38015245516328616, 0.31026385222804975, 0.2988774542089876, 0.2962214558248271] ***
*** finished computation of 3 references, err: [Inf, 0.38015245516328616, 0.31026385222804975, 0.2988774542089876, 0.2962214558248271] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [85, 184, 28]]
** centroid: 1, normalized-entropy: 0.7985684509853577, [(1, 85), (2, 184), (3, 28)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [127, 69, 0]]
** centroid: 2, normalized-entropy: 0.9358774832082758, [(1, 127), (2, 69)]
*** center 3: selecting labels [1] (freq >= 2) [from [173, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4337226251046686] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4337226251046686, 0.2976636176962389] ***
*** starting iteration: 2; err: [Inf, 0.4337226251046686, 0.2976636176962389] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4337226251046686, 0.2976636176962389, 0.29289634576321455] ***
*** starting iteration: 3; err: [Inf, 0.4337226251046686, 0.2976636176962389, 0.29289634576321455] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4337226251046686, 0.2976636176962389, 0.29289634576321455, 0.2928584536601757] ***
*** finished computation of 3 references, err: [Inf, 0.4337226251046686, 0.2976636176962389, 0.29289634576321455, 0.2928584536601757] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [106, 103, 0]]
** centroid: 1, normalized-entropy: 0.9998513690015975, [(1, 106), (2, 103)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [72, 147, 24]]
** centroid: 2, normalized-entropy: 0.8129488424607494, [(1, 72), (2, 147), (3, 24)]
*** center 3: selecting labels [1] (freq >= 2) [from [215, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.40147044740176047] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40147044740176047, 0.3233623471714255] ***
*** starting iteration: 2; err: [Inf, 0.40147044740176047, 0.3233623471714255] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40147044740176047, 0.3233623471714255, 0.29966897089062244] ***
*** starting iteration: 3; err: [Inf, 0.40147044740176047, 0.3233623471714255, 0.29966897089062244] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40147044740176047, 0.3233623471714255, 0.29966897089062244, 0.2961034740599199] ***
*** finished computation of 3 references, err: [Inf, 0.40147044740176047, 0.3233623471714255, 0.29966897089062244, 0.2961034740599199] ***
*** center 1: selecting labels [1] (freq >= 2) [from [229, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [118, 100, 0]]
** centroid: 2, normalized-entropy: 0.995076532106423, [(1, 118), (2, 100)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [43, 155, 22]]
** centroid: 3, normalized-entropy: 0.7246026726492559, [(1, 43), (2, 155), (3, 22)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 16)
[0.9349828870786955, 0.9299958641276008, 0.91902081722441, 0.9150078221934509, 0.9079828331325337, 0.8969748191305077, 0.8879568190945436, 0.8810097522672372, 0.871979764195333, 0.8710027392662122, 0.8660217103330875, 0.8600157043270816, 0.8590147033260805, 0.8410056763350177, 0.8148717579855305, 0.7789855723987461]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.9, 2) => 0.9349828870786955
finished with 18
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.20191553389365496] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20191553389365496, 0.15479201494992986] ***
*** starting iteration: 2; err: [Inf, 0.20191553389365496, 0.15479201494992986] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20191553389365496, 0.15479201494992986, 0.1506125789426558] ***
*** starting iteration: 3; err: [Inf, 0.20191553389365496, 0.15479201494992986, 0.1506125789426558] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20191553389365496, 0.15479201494992986, 0.1506125789426558, 0.14872967080820026] ***
*** starting iteration: 4; err: [Inf, 0.20191553389365496, 0.15479201494992986, 0.1506125789426558, 0.14872967080820026] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20191553389365496, 0.15479201494992986, 0.1506125789426558, 0.14872967080820026, 0.14775929081060732] ***
*** finished computation of 7 references, err: [Inf, 0.20191553389365496, 0.15479201494992986, 0.1506125789426558, 0.14872967080820026, 0.14775929081060732] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [74, 26, 0]]
** centroid: 1, normalized-entropy: 0.8267463724926181, [(1, 74), (2, 26)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [58, 51, 0]]
** centroid: 2, normalized-entropy: 0.9970229471810967, [(1, 58), (2, 51)]
*** center 3: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 90, 28]]
** centroid: 4, normalized-entropy: 0.7905013842153699, [(2, 90), (3, 28)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [5, 84, 0]]
** centroid: 5, normalized-entropy: 0.3120895659343452, [(1, 5), (2, 84)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [85, 2, 0]]
** centroid: 6, normalized-entropy: 0.15790637433488164, [(1, 85), (2, 2)]
*** center 7: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.23700111359078577] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23700111359078577, 0.16821771436210337] ***
*** starting iteration: 2; err: [Inf, 0.23700111359078577, 0.16821771436210337] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23700111359078577, 0.16821771436210337, 0.1612150597859403] ***
*** starting iteration: 3; err: [Inf, 0.23700111359078577, 0.16821771436210337, 0.1612150597859403] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23700111359078577, 0.16821771436210337, 0.1612150597859403, 0.1573983117396283] ***
*** starting iteration: 4; err: [Inf, 0.23700111359078577, 0.16821771436210337, 0.1612150597859403, 0.1573983117396283] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23700111359078577, 0.16821771436210337, 0.1612150597859403, 0.1573983117396283, 0.15530347867381536] ***
*** starting iteration: 5; err: [Inf, 0.23700111359078577, 0.16821771436210337, 0.1612150597859403, 0.1573983117396283, 0.15530347867381536] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23700111359078577, 0.16821771436210337, 0.1612150597859403, 0.1573983117396283, 0.15530347867381536, 0.1531287149723055] ***
*** starting iteration: 6; err: [Inf, 0.23700111359078577, 0.16821771436210337, 0.1612150597859403, 0.1573983117396283, 0.15530347867381536, 0.1531287149723055] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23700111359078577, 0.16821771436210337, 0.1612150597859403, 0.1573983117396283, 0.15530347867381536, 0.1531287149723055, 0.15199151881474784] ***
*** starting iteration: 7; err: [Inf, 0.23700111359078577, 0.16821771436210337, 0.1612150597859403, 0.1573983117396283, 0.15530347867381536, 0.1531287149723055, 0.15199151881474784] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23700111359078577, 0.16821771436210337, 0.1612150597859403, 0.1573983117396283, 0.15530347867381536, 0.1531287149723055, 0.15199151881474784, 0.15148942230892057] ***
*** finished computation of 7 references, err: [Inf, 0.23700111359078577, 0.16821771436210337, 0.1612150597859403, 0.1573983117396283, 0.15530347867381536, 0.1531287149723055, 0.15199151881474784, 0.15148942230892057] ***
*** center 1: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [36, 39, 0]]
** centroid: 3, normalized-entropy: 0.998845535995202, [(1, 36), (2, 39)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [106, 36, 0]]
** centroid: 4, normalized-entropy: 0.8168114277045246, [(1, 106), (2, 36)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [11, 96, 0]]
** centroid: 5, normalized-entropy: 0.4778207445858079, [(1, 11), (2, 96)]
*** center 6: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 79, 24]]
** centroid: 7, normalized-entropy: 0.7832211182191516, [(2, 79), (3, 24)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.21512577240669478] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21512577240669478, 0.15378659144406956] ***
*** starting iteration: 2; err: [Inf, 0.21512577240669478, 0.15378659144406956] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21512577240669478, 0.15378659144406956, 0.15175469967954117] ***
*** starting iteration: 3; err: [Inf, 0.21512577240669478, 0.15378659144406956, 0.15175469967954117] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21512577240669478, 0.15378659144406956, 0.15175469967954117, 0.15021832841986055] ***
*** starting iteration: 4; err: [Inf, 0.21512577240669478, 0.15378659144406956, 0.15175469967954117, 0.15021832841986055] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21512577240669478, 0.15378659144406956, 0.15175469967954117, 0.15021832841986055, 0.1490036358702872] ***
*** starting iteration: 5; err: [Inf, 0.21512577240669478, 0.15378659144406956, 0.15175469967954117, 0.15021832841986055, 0.1490036358702872] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21512577240669478, 0.15378659144406956, 0.15175469967954117, 0.15021832841986055, 0.1490036358702872, 0.14836362795694835] ***
*** finished computation of 7 references, err: [Inf, 0.21512577240669478, 0.15378659144406956, 0.15175469967954117, 0.15021832841986055, 0.1490036358702872, 0.14836362795694835] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [4, 102, 0]]
** centroid: 1, normalized-entropy: 0.23181305002459035, [(1, 4), (2, 102)]
*** center 2: selecting labels [1] (freq >= 1) [from [124, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [2, 67, 0]]
** centroid: 3, normalized-entropy: 0.18927843126120178, [(1, 2), (2, 67)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [104, 8, 0]]
** centroid: 4, normalized-entropy: 0.3712323266408756, [(1, 104), (2, 8)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [65, 18, 0]]
** centroid: 5, normalized-entropy: 0.7544062039636575, [(1, 65), (2, 18)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 60, 22]]
** centroid: 6, normalized-entropy: 0.8390040613676978, [(2, 60), (3, 22)]
*** center 7: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2533629153751665] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2533629153751665, 0.20357764804842057] ***
*** starting iteration: 2; err: [Inf, 0.2533629153751665, 0.20357764804842057] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2533629153751665, 0.20357764804842057, 0.19903944472029983] ***
*** starting iteration: 3; err: [Inf, 0.2533629153751665, 0.20357764804842057, 0.19903944472029983] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2533629153751665, 0.20357764804842057, 0.19903944472029983, 0.19726822167976168] ***
*** starting iteration: 4; err: [Inf, 0.2533629153751665, 0.20357764804842057, 0.19903944472029983, 0.19726822167976168] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2533629153751665, 0.20357764804842057, 0.19903944472029983, 0.19726822167976168, 0.1961754618678242] ***
*** starting iteration: 5; err: [Inf, 0.2533629153751665, 0.20357764804842057, 0.19903944472029983, 0.19726822167976168, 0.1961754618678242] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2533629153751665, 0.20357764804842057, 0.19903944472029983, 0.19726822167976168, 0.1961754618678242, 0.19434808411980858] ***
*** starting iteration: 6; err: [Inf, 0.2533629153751665, 0.20357764804842057, 0.19903944472029983, 0.19726822167976168, 0.1961754618678242, 0.19434808411980858] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2533629153751665, 0.20357764804842057, 0.19903944472029983, 0.19726822167976168, 0.1961754618678242, 0.19434808411980858, 0.1938086881444932] ***
*** finished computation of 7 references, err: [Inf, 0.2533629153751665, 0.20357764804842057, 0.19903944472029983, 0.19726822167976168, 0.1961754618678242, 0.19434808411980858, 0.1938086881444932] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [52, 28, 0]]
** centroid: 1, normalized-entropy: 0.9340680553754911, [(1, 52), (2, 28)]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 86, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [93, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [104, 16, 0]]
** centroid: 4, normalized-entropy: 0.5665095065529052, [(1, 104), (2, 16)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [45, 45, 0]]
** centroid: 5, normalized-entropy: 1.0, [(1, 45), (2, 45)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 76, 28]]
** centroid: 6, normalized-entropy: 0.8403586716091169, [(2, 76), (3, 28)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [91, 2, 0]]
** centroid: 7, normalized-entropy: 0.14981136747274781, [(1, 91), (2, 2)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.25008012838885074] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25008012838885074, 0.20292006562864673] ***
*** starting iteration: 2; err: [Inf, 0.25008012838885074, 0.20292006562864673] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25008012838885074, 0.20292006562864673, 0.1934132578669638] ***
*** starting iteration: 3; err: [Inf, 0.25008012838885074, 0.20292006562864673, 0.1934132578669638] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25008012838885074, 0.20292006562864673, 0.1934132578669638, 0.18951530625270135] ***
*** starting iteration: 4; err: [Inf, 0.25008012838885074, 0.20292006562864673, 0.1934132578669638, 0.18951530625270135] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25008012838885074, 0.20292006562864673, 0.1934132578669638, 0.18951530625270135, 0.18829844439768048] ***
*** starting iteration: 5; err: [Inf, 0.25008012838885074, 0.20292006562864673, 0.1934132578669638, 0.18951530625270135, 0.18829844439768048] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25008012838885074, 0.20292006562864673, 0.1934132578669638, 0.18951530625270135, 0.18829844439768048, 0.18747165824972217] ***
*** finished computation of 7 references, err: [Inf, 0.25008012838885074, 0.20292006562864673, 0.1934132578669638, 0.18951530625270135, 0.18829844439768048, 0.18747165824972217] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [46, 45, 0]]
** centroid: 1, normalized-entropy: 0.999912889501356, [(1, 46), (2, 45)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [84, 5, 0]]
** centroid: 2, normalized-entropy: 0.3120895659343452, [(1, 84), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 119, 24]]
** centroid: 3, normalized-entropy: 0.6527215895689277, [(2, 119), (3, 24)]
*** center 4: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [55, 31, 0]]
** centroid: 5, normalized-entropy: 0.9430685934712909, [(1, 55), (2, 31)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [60, 50, 0]]
** centroid: 6, normalized-entropy: 0.9940302114769566, [(1, 60), (2, 50)]
*** center 7: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2343963540383968] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2343963540383968, 0.2052226740248345] ***
*** starting iteration: 2; err: [Inf, 0.2343963540383968, 0.2052226740248345] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2343963540383968, 0.2052226740248345, 0.20100074962222728] ***
*** starting iteration: 3; err: [Inf, 0.2343963540383968, 0.2052226740248345, 0.20100074962222728] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2343963540383968, 0.2052226740248345, 0.20100074962222728, 0.19815104047878124] ***
*** starting iteration: 4; err: [Inf, 0.2343963540383968, 0.2052226740248345, 0.20100074962222728, 0.19815104047878124] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2343963540383968, 0.2052226740248345, 0.20100074962222728, 0.19815104047878124, 0.1941086878424798] ***
*** starting iteration: 5; err: [Inf, 0.2343963540383968, 0.2052226740248345, 0.20100074962222728, 0.19815104047878124, 0.1941086878424798] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2343963540383968, 0.2052226740248345, 0.20100074962222728, 0.19815104047878124, 0.1941086878424798, 0.19045138605653883] ***
*** starting iteration: 6; err: [Inf, 0.2343963540383968, 0.2052226740248345, 0.20100074962222728, 0.19815104047878124, 0.1941086878424798, 0.19045138605653883] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2343963540383968, 0.2052226740248345, 0.20100074962222728, 0.19815104047878124, 0.1941086878424798, 0.19045138605653883, 0.18847297294822143] ***
*** starting iteration: 7; err: [Inf, 0.2343963540383968, 0.2052226740248345, 0.20100074962222728, 0.19815104047878124, 0.1941086878424798, 0.19045138605653883, 0.18847297294822143] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2343963540383968, 0.2052226740248345, 0.20100074962222728, 0.19815104047878124, 0.1941086878424798, 0.19045138605653883, 0.18847297294822143, 0.18791625730000783] ***
*** finished computation of 7 references, err: [Inf, 0.2343963540383968, 0.2052226740248345, 0.20100074962222728, 0.19815104047878124, 0.1941086878424798, 0.19045138605653883, 0.18847297294822143, 0.18791625730000783] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 74, 14]]
** centroid: 1, normalized-entropy: 0.6321302781219708, [(2, 74), (3, 14)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [88, 23, 0]]
** centroid: 2, normalized-entropy: 0.7361103940132281, [(1, 88), (2, 23)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [56, 47, 0]]
** centroid: 3, normalized-entropy: 0.994485462483463, [(1, 56), (2, 47)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [51, 46, 0]]
** centroid: 4, normalized-entropy: 0.998082507968892, [(1, 51), (2, 46)]
*** center 5: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 65, 8]]
** centroid: 6, normalized-entropy: 0.4986751363204345, [(2, 65), (3, 8)]
*** center 7: selecting labels [1] (freq >= 1) [from [115, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 18)
[0.9349828870786955, 0.9299958641276008, 0.9209778640916365, 0.91902081722441, 0.9150078221934509, 0.9079828331325337, 0.8989828151504798, 0.8969748191305077, 0.8879568190945436, 0.8810097522672372, 0.871979764195333, 0.8710027392662122, 0.8660217103330875, 0.8600157043270816, 0.8590147033260805, 0.8410056763350177, 0.8148717579855305, 0.7789855723987461]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.9, 2) => 0.9349828870786955
finished with 19
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.18798844603536366] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18798844603536366, 0.1610928953823832] ***
*** starting iteration: 2; err: [Inf, 0.18798844603536366, 0.1610928953823832] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18798844603536366, 0.1610928953823832, 0.15492052694659558] ***
*** starting iteration: 3; err: [Inf, 0.18798844603536366, 0.1610928953823832, 0.15492052694659558] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18798844603536366, 0.1610928953823832, 0.15492052694659558, 0.1523763091518759] ***
*** finished computation of 7 references, err: [Inf, 0.18798844603536366, 0.1610928953823832, 0.15492052694659558, 0.1523763091518759] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [23, 79, 0]]
** centroid: 1, normalized-entropy: 0.7700664782920602, [(1, 23), (2, 79)]
*** center 2: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 62, 28]]
** centroid: 3, normalized-entropy: 0.8944518845341284, [(2, 62), (3, 28)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [76, 22, 0]]
** centroid: 4, normalized-entropy: 0.7682814090975241, [(1, 76), (2, 22)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [9, 87, 0]]
** centroid: 5, normalized-entropy: 0.44886448872302936, [(1, 9), (2, 87)]
*** center 6: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [72, 3, 0]]
** centroid: 7, normalized-entropy: 0.24229218908241482, [(1, 72), (2, 3)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.21312067828125794] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21312067828125794, 0.1577575930758663] ***
*** starting iteration: 2; err: [Inf, 0.21312067828125794, 0.1577575930758663] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21312067828125794, 0.1577575930758663, 0.15350313341828703] ***
*** starting iteration: 3; err: [Inf, 0.21312067828125794, 0.1577575930758663, 0.15350313341828703] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21312067828125794, 0.1577575930758663, 0.15350313341828703, 0.1518247178664942] ***
*** finished computation of 7 references, err: [Inf, 0.21312067828125794, 0.1577575930758663, 0.15350313341828703, 0.1518247178664942] ***
*** center 1: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 85, 14]]
** centroid: 2, normalized-entropy: 0.5879303728017198, [(2, 85), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [48, 47, 0]]
** centroid: 3, normalized-entropy: 0.9999200708207958, [(1, 48), (2, 47)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [97, 28, 0]]
** centroid: 4, normalized-entropy: 0.7674044165839727, [(1, 97), (2, 28)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 73, 10]]
** centroid: 5, normalized-entropy: 0.530744566923854, [(2, 73), (3, 10)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [64, 17, 0]]
** centroid: 6, normalized-entropy: 0.7412466905234424, [(1, 64), (2, 17)]
*** center 7: selecting labels [1] (freq >= 2) [from [105, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2033202400391941] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2033202400391941, 0.15972149514405254] ***
*** starting iteration: 2; err: [Inf, 0.2033202400391941, 0.15972149514405254] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2033202400391941, 0.15972149514405254, 0.15273400254176184] ***
*** starting iteration: 3; err: [Inf, 0.2033202400391941, 0.15972149514405254, 0.15273400254176184] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2033202400391941, 0.15972149514405254, 0.15273400254176184, 0.1517982895896565] ***
*** finished computation of 7 references, err: [Inf, 0.2033202400391941, 0.15972149514405254, 0.15273400254176184, 0.1517982895896565] ***
*** center 1: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [2, 73, 0]]
** centroid: 2, normalized-entropy: 0.1773894531859976, [(1, 2), (2, 73)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [58, 5, 0]]
** centroid: 3, normalized-entropy: 0.39993804743902767, [(1, 58), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [86, 37, 0]]
** centroid: 4, normalized-entropy: 0.8822824449111785, [(1, 86), (2, 37)]
*** center 5: selecting labels [1] (freq >= 2) [from [111, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 96, 22]]
** centroid: 6, normalized-entropy: 0.693965967334286, [(2, 96), (3, 22)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [50, 44, 0]]
** centroid: 7, normalized-entropy: 0.9970590569034106, [(1, 50), (2, 44)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 19)
[0.9349828870786955, 0.9299958641276008, 0.9209778640916365, 0.91902081722441, 0.9150078221934509, 0.9079828331325337, 0.8989828151504798, 0.8969748191305077, 0.8909748071424718, 0.8879568190945436, 0.8810097522672372, 0.871979764195333, 0.8710027392662122, 0.8660217103330875, 0.8600157043270816, 0.8590147033260805, 0.8410056763350177, 0.8148717579855305, 0.7789855723987461]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.9, 2) => 0.9349828870786955
finished with 19
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 19)
[0.9349828870786955, 0.9299958641276008, 0.9209778640916365, 0.91902081722441, 0.9150078221934509, 0.9079828331325337, 0.8989828151504798, 0.8969748191305077, 0.8909748071424718, 0.8879568190945436, 0.8810097522672372, 0.871979764195333, 0.8710027392662122, 0.8660217103330875, 0.8600157043270816, 0.8590147033260805, 0.8410056763350177, 0.8148717579855305, 0.7789855723987461]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.9, 2) => 0.9349828870786955
finished with 19
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 19)
[0.9349828870786955, 0.9299958641276008, 0.9209778640916365, 0.91902081722441, 0.9150078221934509, 0.9079828331325337, 0.8989828151504798, 0.8969748191305077, 0.8909748071424718, 0.8879568190945436, 0.8810097522672372, 0.871979764195333, 0.8710027392662122, 0.8660217103330875, 0.8600157043270816, 0.8590147033260805, 0.8410056763350177, 0.8148717579855305, 0.7789855723987461]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.9, 2) => 0.9349828870786955
finished with 21
iteration 9 finished
*** starting iteration: 1; err: [Inf, 0.2563504583793818] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2563504583793818, 0.20439488546015253] ***
*** finished computation of 7 references, err: [Inf, 0.2563504583793818, 0.20439488546015253] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 40, 28]]
** centroid: 1, normalized-entropy: 0.9774178175281716, [(2, 40), (3, 28)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [111, 35, 0]]
** centroid: 2, normalized-entropy: 0.7945843756064859, [(1, 111), (2, 35)]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 68, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [129, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [41, 66, 0]]
** centroid: 5, normalized-entropy: 0.9602553596067602, [(1, 41), (2, 66)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [49, 44, 0]]
** centroid: 6, normalized-entropy: 0.9979139338855983, [(1, 49), (2, 44)]
*** center 7: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25541536570030976] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25541536570030976, 0.2141628267279808] ***
*** finished computation of 7 references, err: [Inf, 0.25541536570030976, 0.2141628267279808] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [72, 50, 0]]
** centroid: 1, normalized-entropy: 0.9764143081154868, [(1, 72), (2, 50)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [77, 9, 0]]
** centroid: 2, normalized-entropy: 0.48356837509176975, [(1, 77), (2, 9)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [6, 115, 3]]
** centroid: 3, normalized-entropy: 0.27895401055298175, [(1, 6), (2, 115), (3, 3)]
*** center 4: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [54, 0, 0]]
*** center 7: selecting labels [1, 2, 3] (freq >= 1) [from [38, 76, 21]]
** centroid: 7, normalized-entropy: 0.8826833587545674, [(1, 38), (2, 76), (3, 21)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23090421103047154] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23090421103047154, 0.19921761421232612] ***
*** finished computation of 7 references, err: [Inf, 0.23090421103047154, 0.19921761421232612] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 81, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [129, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 28, 22]]
** centroid: 3, normalized-entropy: 0.9895875212220558, [(2, 28), (3, 22)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [46, 40, 0]]
** centroid: 4, normalized-entropy: 0.996485989886783, [(1, 46), (2, 40)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [52, 47, 0]]
** centroid: 5, normalized-entropy: 0.9981592324817737, [(1, 52), (2, 47)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [60, 50, 0]]
** centroid: 6, normalized-entropy: 0.9940302114769566, [(1, 60), (2, 50)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [103, 9, 0]]
** centroid: 7, normalized-entropy: 0.40343635676427997, [(1, 103), (2, 9)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1733942465302912] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1733942465302912, 0.15412148905291526] ***
*** finished computation of 7 references, err: [Inf, 0.1733942465302912, 0.15412148905291526] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [59, 27, 0]]
** centroid: 1, normalized-entropy: 0.8976844934141643, [(1, 59), (2, 27)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [73, 46, 0]]
** centroid: 2, normalized-entropy: 0.9625400929141298, [(1, 73), (2, 46)]
*** center 3: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [92, 48, 0]]
** centroid: 5, normalized-entropy: 0.927526588431676, [(1, 92), (2, 48)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 34, 28]]
** centroid: 6, normalized-entropy: 0.9932338197397066, [(2, 34), (3, 28)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 98, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18560941878921244] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18560941878921244, 0.16047328537835487] ***
*** finished computation of 7 references, err: [Inf, 0.18560941878921244, 0.16047328537835487] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [56, 20, 0]]
** centroid: 1, normalized-entropy: 0.8314743880097292, [(1, 56), (2, 20)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [4, 49, 0]]
** centroid: 2, normalized-entropy: 0.3860189005698936, [(1, 4), (2, 49)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [27, 16, 0]]
** centroid: 3, normalized-entropy: 0.9522656254366643, [(1, 27), (2, 16)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [116, 59, 0]]
** centroid: 4, normalized-entropy: 0.9220583384200601, [(1, 116), (2, 59)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 105, 24]]
** centroid: 5, normalized-entropy: 0.6931274153282881, [(2, 105), (3, 24)]
*** center 6: selecting labels [1] (freq >= 1) [from [130, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [60, 1, 0]]
** centroid: 7, normalized-entropy: 0.12068101401352371, [(1, 60), (2, 1)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2184818236323456] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2184818236323456, 0.15938478205185466] ***
*** finished computation of 7 references, err: [Inf, 0.2184818236323456, 0.15938478205185466] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 125, 22]]
** centroid: 1, normalized-entropy: 0.6089884591711846, [(2, 125), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [102, 48, 0]]
** centroid: 2, normalized-entropy: 0.9043814577244941, [(1, 102), (2, 48)]
*** center 3: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [54, 52, 0]]
** centroid: 4, normalized-entropy: 0.9997431860710851, [(1, 54), (2, 52)]
*** center 5: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [68, 30, 0]]
** centroid: 6, normalized-entropy: 0.8886466698980794, [(1, 68), (2, 30)]
*** center 7: selecting labels [1] (freq >= 1) [from [44, 0, 0]]
finished with 11 centroids; started with 7
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.1726641448661685] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1726641448661685, 0.15832096646819263] ***
*** finished computation of 7 references, err: [Inf, 0.1726641448661685, 0.15832096646819263] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [142, 17, 0]]
** centroid: 1, normalized-entropy: 0.49054987810875406, [(1, 142), (2, 17)]
*** center 2: selecting labels [1] (freq >= 1) [from [183, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [164, 76, 0]]
** centroid: 3, normalized-entropy: 0.9007196798623592, [(1, 164), (2, 76)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [26, 65, 0]]
** centroid: 4, normalized-entropy: 0.8631205685666311, [(1, 26), (2, 65)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 116, 14]]
** centroid: 5, normalized-entropy: 0.49291577961610966, [(2, 116), (3, 14)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 105, 23]]
** centroid: 6, normalized-entropy: 0.6793929348105144, [(2, 105), (3, 23)]
*** center 7: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22923347966372967] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22923347966372967, 0.16076017131563275] ***
*** finished computation of 7 references, err: [Inf, 0.22923347966372967, 0.16076017131563275] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 51, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [60, 48, 0]]
** centroid: 2, normalized-entropy: 0.9910760598382222, [(1, 60), (2, 48)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [71, 9, 0]]
** centroid: 3, normalized-entropy: 0.5074109636646968, [(1, 71), (2, 9)]
*** center 4: selecting labels [1] (freq >= 1) [from [45, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [44, 44, 0]]
** centroid: 6, normalized-entropy: 1.0, [(1, 44), (2, 44)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 42, 18]]
** centroid: 7, normalized-entropy: 0.8812908992306927, [(2, 42), (3, 18)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21180797165818513] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21180797165818513, 0.17833801664225757] ***
*** finished computation of 7 references, err: [Inf, 0.21180797165818513, 0.17833801664225757] ***
*** center 1: selecting labels [1] (freq >= 1) [from [41, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [97, 15, 0]]
** centroid: 2, normalized-entropy: 0.5681147021801115, [(1, 97), (2, 15)]
*** center 3: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [6, 44, 0]]
** centroid: 4, normalized-entropy: 0.5293608652873645, [(1, 6), (2, 44)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 89, 23]]
** centroid: 5, normalized-entropy: 0.7325138475458123, [(2, 89), (3, 23)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [39, 33, 0]]
** centroid: 6, normalized-entropy: 0.9949848281859699, [(1, 39), (2, 33)]
*** center 7: selecting labels [1] (freq >= 1) [from [48, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22113765983469785] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22113765983469785, 0.16050672107189895] ***
*** finished computation of 7 references, err: [Inf, 0.22113765983469785, 0.16050672107189895] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [25, 12, 0]]
** centroid: 1, normalized-entropy: 0.9090221560878149, [(1, 25), (2, 12)]
*** center 2: selecting labels [1] (freq >= 1) [from [40, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 93, 22]]
** centroid: 3, normalized-entropy: 0.7041920940481365, [(2, 93), (3, 22)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [82, 37, 0]]
** centroid: 4, normalized-entropy: 0.8942376044259772, [(1, 82), (2, 37)]
*** center 5: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [11, 54, 0]]
** centroid: 6, normalized-entropy: 0.6559420757694151, [(1, 11), (2, 54)]
*** center 7: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1937179942447692] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1937179942447692, 0.17126712811365724] ***
*** finished computation of 7 references, err: [Inf, 0.1937179942447692, 0.17126712811365724] ***
*** center 1: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [133, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [41, 30, 0]]
** centroid: 3, normalized-entropy: 0.9826154285526119, [(1, 41), (2, 30)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [20, 29, 0]]
** centroid: 4, normalized-entropy: 0.9755259511264975, [(1, 20), (2, 29)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [23, 32, 0]]
** centroid: 5, normalized-entropy: 0.980597440991727, [(1, 23), (2, 32)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 37, 19]]
** centroid: 6, normalized-entropy: 0.9241335419915458, [(2, 37), (3, 19)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 51, 0]]
** centroid: 7, normalized-entropy: 0.13709947889981755, [(1, 1), (2, 51)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.199711827410385] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.199711827410385, 0.16767017450369895] ***
*** finished computation of 7 references, err: [Inf, 0.199711827410385, 0.16767017450369895] ***
*** center 1: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [14, 85, 8]]
** centroid: 2, normalized-entropy: 0.5851476572082549, [(1, 14), (2, 85), (3, 8)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [32, 16, 0]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(1, 32), (2, 16)]
*** center 4: selecting labels [1, 2, 3] (freq >= 1) [from [9, 92, 11]]
** centroid: 4, normalized-entropy: 0.5389547209413713, [(1, 9), (2, 92), (3, 11)]
*** center 5: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [43, 4, 0]]
** centroid: 6, normalized-entropy: 0.4199210973757179, [(1, 43), (2, 4)]
*** center 7: selecting labels [1] (freq >= 1) [from [44, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2182097162930295] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2182097162930295, 0.18077569052390755] ***
*** finished computation of 7 references, err: [Inf, 0.2182097162930295, 0.18077569052390755] ***
*** center 1: selecting labels [1] (freq >= 1) [from [47, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [14, 32, 0]]
** centroid: 2, normalized-entropy: 0.8865408928220899, [(1, 14), (2, 32)]
*** center 3: selecting labels [1] (freq >= 1) [from [44, 0, 0]]
*** center 4: selecting labels [1, 2, 3] (freq >= 1) [from [21, 107, 20]]
** centroid: 4, normalized-entropy: 0.7118631322212742, [(1, 21), (2, 107), (3, 20)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [76, 53, 0]]
** centroid: 5, normalized-entropy: 0.9769460529925406, [(1, 76), (2, 53)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [60, 1, 0]]
** centroid: 6, normalized-entropy: 0.12068101401352371, [(1, 60), (2, 1)]
*** center 7: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18469291420280934] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18469291420280934, 0.1601687684468925] ***
*** finished computation of 7 references, err: [Inf, 0.18469291420280934, 0.1601687684468925] ***
*** center 1: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [89, 15, 0]]
** centroid: 2, normalized-entropy: 0.5952124653513116, [(1, 89), (2, 15)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [46, 23, 0]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(1, 46), (2, 23)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 51, 9]]
** centroid: 4, normalized-entropy: 0.6098403047164005, [(2, 51), (3, 9)]
*** center 5: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 68, 7]]
** centroid: 6, normalized-entropy: 0.44749925503686355, [(2, 68), (3, 7)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [35, 35, 0]]
** centroid: 7, normalized-entropy: 1.0, [(1, 35), (2, 35)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19932144312001765] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19932144312001765, 0.16047503749164752] ***
*** finished computation of 7 references, err: [Inf, 0.19932144312001765, 0.16047503749164752] ***
*** center 1: selecting labels [1] (freq >= 1) [from [37, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 56, 16]]
** centroid: 2, normalized-entropy: 0.7642045065086204, [(2, 56), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [60, 14, 0]]
** centroid: 3, normalized-entropy: 0.699772221773307, [(1, 60), (2, 14)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 92, 1]]
** centroid: 4, normalized-entropy: 0.0857426825355026, [(2, 92), (3, 1)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [38, 8, 0]]
** centroid: 5, normalized-entropy: 0.6665783579949205, [(1, 38), (2, 8)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [97, 17, 0]]
** centroid: 6, normalized-entropy: 0.6076407686085387, [(1, 97), (2, 17)]
*** center 7: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20222641590423882] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20222641590423882, 0.17238325181789696] ***
*** finished computation of 7 references, err: [Inf, 0.20222641590423882, 0.17238325181789696] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 41, 3]]
** centroid: 1, normalized-entropy: 0.3591016256485496, [(2, 41), (3, 3)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [41, 53, 0]]
** centroid: 2, normalized-entropy: 0.988212082728797, [(1, 41), (2, 53)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [22, 45, 0]]
** centroid: 3, normalized-entropy: 0.9132401614300725, [(1, 22), (2, 45)]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [20, 53, 0]]
** centroid: 5, normalized-entropy: 0.847107490529376, [(1, 20), (2, 53)]
*** center 6: selecting labels [1] (freq >= 1) [from [138, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17228765369392932] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17228765369392932, 0.15196617862489076] ***
*** finished computation of 7 references, err: [Inf, 0.17228765369392932, 0.15196617862489076] ***
*** center 1: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [67, 30, 0]]
** centroid: 2, normalized-entropy: 0.892338681064176, [(1, 67), (2, 30)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [41, 19, 0]]
** centroid: 3, normalized-entropy: 0.9007196798623592, [(1, 41), (2, 19)]
*** center 4: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [20, 40, 0]]
** centroid: 5, normalized-entropy: 0.9182958340544894, [(1, 20), (2, 40)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [44, 17, 0]]
** centroid: 6, normalized-entropy: 0.8536576732793314, [(1, 44), (2, 17)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 80, 13]]
** centroid: 7, normalized-entropy: 0.5836753280239112, [(2, 80), (3, 13)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21157761426921934] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21157761426921934, 0.15067864023149014] ***
*** finished computation of 7 references, err: [Inf, 0.21157761426921934, 0.15067864023149014] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 41, 13]]
** centroid: 1, normalized-entropy: 0.7962699368824384, [(2, 41), (3, 13)]
*** center 2: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [83, 1, 0]]
** centroid: 3, normalized-entropy: 0.09317131799548928, [(1, 83), (2, 1)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [40, 55, 0]]
** centroid: 4, normalized-entropy: 0.9819407868640977, [(1, 40), (2, 55)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [11, 51, 0]]
** centroid: 5, normalized-entropy: 0.674398887071447, [(1, 11), (2, 51)]
*** center 6: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 44, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19161394929140807] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19161394929140807, 0.16638964464887976] ***
*** finished computation of 7 references, err: [Inf, 0.19161394929140807, 0.16638964464887976] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [84, 27, 0]]
** centroid: 1, normalized-entropy: 0.8003922080453356, [(1, 84), (2, 27)]
*** center 2: selecting labels [1] (freq >= 1) [from [103, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [18, 70, 0]]
** centroid: 3, normalized-entropy: 0.7309263775906009, [(1, 18), (2, 70)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 32, 10]]
** centroid: 4, normalized-entropy: 0.7918583525674836, [(2, 32), (3, 10)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 42, 9]]
** centroid: 5, normalized-entropy: 0.6722948170756378, [(2, 42), (3, 9)]
*** center 6: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 27, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1992507929764688] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1992507929764688, 0.15742110302578657] ***
*** finished computation of 7 references, err: [Inf, 0.1992507929764688, 0.15742110302578657] ***
*** center 1: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [55, 5, 0]]
** centroid: 3, normalized-entropy: 0.4138168503036336, [(1, 55), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [14, 64, 0]]
** centroid: 4, normalized-entropy: 0.6789538995185759, [(1, 14), (2, 64)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [27, 60, 0]]
** centroid: 5, normalized-entropy: 0.8935711016541908, [(1, 27), (2, 60)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [77, 2, 0]]
** centroid: 6, normalized-entropy: 0.17033057560105982, [(1, 77), (2, 2)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 54, 18]]
** centroid: 7, normalized-entropy: 0.8112781244591328, [(2, 54), (3, 18)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20128516374714672] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20128516374714672, 0.1615939484136179] ***
*** finished computation of 7 references, err: [Inf, 0.20128516374714672, 0.1615939484136179] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [37, 32, 0]]
** centroid: 1, normalized-entropy: 0.9962088839046743, [(1, 37), (2, 32)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [1, 43, 0]]
** centroid: 2, normalized-entropy: 0.1564910629057016, [(1, 1), (2, 43)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [46, 3, 0]]
** centroid: 3, normalized-entropy: 0.3322866302216152, [(1, 46), (2, 3)]
*** center 4: selecting labels [1] (freq >= 1) [from [113, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 77, 14]]
** centroid: 5, normalized-entropy: 0.6193821946787638, [(2, 77), (3, 14)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [87, 4, 0]]
** centroid: 6, normalized-entropy: 0.26014536394771426, [(1, 87), (2, 4)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 43, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20506920941825957] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20506920941825957, 0.16173129071481526] ***
*** finished computation of 7 references, err: [Inf, 0.20506920941825957, 0.16173129071481526] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [60, 2, 0]]
** centroid: 1, normalized-entropy: 0.2055925081850832, [(1, 60), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [79, 6, 0]]
** centroid: 2, normalized-entropy: 0.3681150054280774, [(1, 79), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 69, 4]]
** centroid: 3, normalized-entropy: 0.306424729870515, [(2, 69), (3, 4)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [61, 28, 0]]
** centroid: 4, normalized-entropy: 0.898419774686072, [(1, 61), (2, 28)]
*** center 5: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [23, 48, 0]]
** centroid: 6, normalized-entropy: 0.9086185980409245, [(1, 23), (2, 48)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 39, 15]]
** centroid: 7, normalized-entropy: 0.8524051786494784, [(2, 39), (3, 15)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19350126410927623] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19350126410927623, 0.154216607933864] ***
*** finished computation of 7 references, err: [Inf, 0.19350126410927623, 0.154216607933864] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [80, 20, 0]]
** centroid: 1, normalized-entropy: 0.7219280948873623, [(1, 80), (2, 20)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [8, 58, 0]]
** centroid: 2, normalized-entropy: 0.5328350630342235, [(1, 8), (2, 58)]
*** center 3: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 46, 22]]
** centroid: 4, normalized-entropy: 0.9081783472997053, [(2, 46), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [44, 24, 0]]
** centroid: 5, normalized-entropy: 0.9366673818775627, [(1, 44), (2, 24)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 33, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21067261801846326] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21067261801846326, 0.1569021907951683] ***
*** finished computation of 7 references, err: [Inf, 0.21067261801846326, 0.1569021907951683] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [10, 36, 0]]
** centroid: 1, normalized-entropy: 0.7553754125614286, [(1, 10), (2, 36)]
*** center 2: selecting labels [1] (freq >= 1) [from [102, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [76, 5, 0]]
** centroid: 3, normalized-entropy: 0.33426813256179383, [(1, 76), (2, 5)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 32, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 33, 20]]
** centroid: 5, normalized-entropy: 0.9561550236844027, [(2, 33), (3, 20)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [33, 22, 0]]
** centroid: 6, normalized-entropy: 0.9709505944546688, [(1, 33), (2, 22)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [91, 40, 0]]
** centroid: 7, normalized-entropy: 0.8877250163956498, [(1, 91), (2, 40)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21389189010905102] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21389189010905102, 0.17241123211011292] ***
*** finished computation of 7 references, err: [Inf, 0.21389189010905102, 0.17241123211011292] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 98, 19]]
** centroid: 1, normalized-entropy: 0.6400041428422206, [(2, 98), (3, 19)]
*** center 2: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [97, 39, 0]]
** centroid: 4, normalized-entropy: 0.8645052513401992, [(1, 97), (2, 39)]
*** center 5: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [79, 39, 0]]
** centroid: 6, normalized-entropy: 0.9154450354498175, [(1, 79), (2, 39)]
*** center 7: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1955923291184008] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1955923291184008, 0.15559882305935024] ***
*** finished computation of 7 references, err: [Inf, 0.1955923291184008, 0.15559882305935024] ***
*** center 1: selecting labels [1] (freq >= 1) [from [37, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [37, 43, 0]]
** centroid: 3, normalized-entropy: 0.9959386076315955, [(1, 37), (2, 43)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [45, 52, 0]]
** centroid: 4, normalized-entropy: 0.9962401135461777, [(1, 45), (2, 52)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [55, 19, 0]]
** centroid: 5, normalized-entropy: 0.8218127305034848, [(1, 55), (2, 19)]
*** center 6: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 71, 18]]
** centroid: 7, normalized-entropy: 0.7263997735417457, [(2, 71), (3, 18)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18664332910999656] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18664332910999656, 0.1452112231424544] ***
*** finished computation of 7 references, err: [Inf, 0.18664332910999656, 0.1452112231424544] ***
*** center 1: selecting labels [1] (freq >= 1) [from [93, 0, 0]]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 42, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 25, 20]]
** centroid: 3, normalized-entropy: 0.9910760598382222, [(2, 25), (3, 20)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [86, 8, 0]]
** centroid: 4, normalized-entropy: 0.4199210973757179, [(1, 86), (2, 8)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [1, 83, 0]]
** centroid: 5, normalized-entropy: 0.09317131799548928, [(1, 1), (2, 83)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [45, 27, 0]]
** centroid: 6, normalized-entropy: 0.954434002924965, [(1, 45), (2, 27)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [65, 5, 0]]
** centroid: 7, normalized-entropy: 0.3712323266408756, [(1, 65), (2, 5)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22952261507231742] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22952261507231742, 0.18079120657965542] ***
*** finished computation of 7 references, err: [Inf, 0.22952261507231742, 0.18079120657965542] ***
*** center 1: selecting labels [1] (freq >= 1) [from [30, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [30, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [30, 63, 0]]
** centroid: 4, normalized-entropy: 0.9071657675730821, [(1, 30), (2, 63)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [53, 1, 0]]
** centroid: 5, normalized-entropy: 0.13303964861069897, [(1, 53), (2, 1)]
*** center 6: selecting labels [1, 2, 3] (freq >= 1) [from [28, 120, 21]]
** centroid: 6, normalized-entropy: 0.7282838929054242, [(1, 28), (2, 120), (3, 21)]
*** center 7: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2261044269958511] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2261044269958511, 0.1668000545799732] ***
*** finished computation of 7 references, err: [Inf, 0.2261044269958511, 0.1668000545799732] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [58, 4, 0]]
** centroid: 1, normalized-entropy: 0.3451173149449528, [(1, 58), (2, 4)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [17, 13, 0]]
** centroid: 2, normalized-entropy: 0.9871377743721862, [(1, 17), (2, 13)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 50, 14]]
** centroid: 3, normalized-entropy: 0.7578784625383954, [(2, 50), (3, 14)]
*** center 4: selecting labels [1] (freq >= 1) [from [120, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [35, 50, 0]]
** centroid: 5, normalized-entropy: 0.9774178175281716, [(1, 35), (2, 50)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [64, 57, 0]]
** centroid: 6, normalized-entropy: 0.9975844702713692, [(1, 64), (2, 57)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1960256619360298] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1960256619360298, 0.1514127634773031] ***
*** finished computation of 7 references, err: [Inf, 0.1960256619360298, 0.1514127634773031] ***
*** center 1: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [42, 30, 0]]
** centroid: 3, normalized-entropy: 0.9798687566511527, [(1, 42), (2, 30)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 55, 21]]
** centroid: 4, normalized-entropy: 0.8503821170987139, [(2, 55), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [6, 57, 0]]
** centroid: 5, normalized-entropy: 0.45371633918694493, [(1, 6), (2, 57)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [55, 11, 0]]
** centroid: 6, normalized-entropy: 0.6500224216483541, [(1, 55), (2, 11)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [16, 46, 0]]
** centroid: 7, normalized-entropy: 0.8238116333123173, [(1, 16), (2, 46)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18405978222284466] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18405978222284466, 0.158258060679771] ***
*** finished computation of 7 references, err: [Inf, 0.18405978222284466, 0.158258060679771] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [14, 72, 0]]
** centroid: 1, normalized-entropy: 0.6409441847875289, [(1, 14), (2, 72)]
*** center 2: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [20, 24, 0]]
** centroid: 3, normalized-entropy: 0.9940302114769566, [(1, 20), (2, 24)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [32, 26, 0]]
** centroid: 4, normalized-entropy: 0.9922666387194963, [(1, 32), (2, 26)]
*** center 5: selecting labels [1] (freq >= 1) [from [103, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [28, 23, 0]]
** centroid: 6, normalized-entropy: 0.9930554830121975, [(1, 28), (2, 23)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 60, 20]]
** centroid: 7, normalized-entropy: 0.8112781244591328, [(2, 60), (3, 20)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2279104086756706] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2279104086756706, 0.1661735619325191] ***
*** finished computation of 7 references, err: [Inf, 0.2279104086756706, 0.1661735619325191] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 85, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [50, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [37, 22, 0]]
** centroid: 3, normalized-entropy: 0.9528588097297789, [(1, 37), (2, 22)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [68, 10, 0]]
** centroid: 4, normalized-entropy: 0.552495114325111, [(1, 68), (2, 10)]
*** center 5: selecting labels [1] (freq >= 1) [from [127, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [11, 52, 0]]
** centroid: 6, normalized-entropy: 0.6681273338436138, [(1, 11), (2, 52)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 19, 19]]
** centroid: 7, normalized-entropy: 1.0, [(2, 19), (3, 19)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20608237974345683] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20608237974345683, 0.16751416300423444] ***
*** finished computation of 7 references, err: [Inf, 0.20608237974345683, 0.16751416300423444] ***
*** center 1: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [41, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 80, 18]]
** centroid: 3, normalized-entropy: 0.6880476235340797, [(2, 80), (3, 18)]
*** center 4: selecting labels [1] (freq >= 1) [from [44, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [53, 20, 0]]
** centroid: 5, normalized-entropy: 0.847107490529376, [(1, 53), (2, 20)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [46, 44, 0]]
** centroid: 6, normalized-entropy: 0.9996437496778561, [(1, 46), (2, 44)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [28, 48, 0]]
** centroid: 7, normalized-entropy: 0.9494520153879484, [(1, 28), (2, 48)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20854371640458702] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20854371640458702, 0.1692556149130687] ***
*** finished computation of 7 references, err: [Inf, 0.20854371640458702, 0.1692556149130687] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [70, 11, 0]]
** centroid: 1, normalized-entropy: 0.5731393980555147, [(1, 70), (2, 11)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [8, 49, 0]]
** centroid: 2, normalized-entropy: 0.5851569902762294, [(1, 8), (2, 49)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 19, 2]]
** centroid: 3, normalized-entropy: 0.45371633918694493, [(2, 19), (3, 2)]
*** center 4: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 6: selecting labels [1, 2, 3] (freq >= 1) [from [5, 94, 18]]
** centroid: 6, normalized-entropy: 0.5448268759746039, [(1, 5), (2, 94), (3, 18)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [64, 9, 0]]
** centroid: 7, normalized-entropy: 0.5387379148665815, [(1, 64), (2, 9)]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19823413767572493] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19823413767572493, 0.15943901914358138] ***
*** finished computation of 7 references, err: [Inf, 0.19823413767572493, 0.15943901914358138] ***
*** center 1: selecting labels [1] (freq >= 1) [from [50, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [25, 38, 0]]
** centroid: 2, normalized-entropy: 0.9690632527820694, [(1, 25), (2, 38)]
*** center 3: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [88, 41, 0]]
** centroid: 4, normalized-entropy: 0.9020054365905131, [(1, 88), (2, 41)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 75, 15]]
** centroid: 5, normalized-entropy: 0.6500224216483541, [(2, 75), (3, 15)]
*** center 6: selecting labels [1] (freq >= 1) [from [52, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [10, 37, 0]]
** centroid: 7, normalized-entropy: 0.7467366074830678, [(1, 10), (2, 37)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20760206364048645] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20760206364048645, 0.161361252611503] ***
*** finished computation of 7 references, err: [Inf, 0.20760206364048645, 0.161361252611503] ***
*** center 1: selecting labels [1] (freq >= 1) [from [103, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 9, 20]]
** centroid: 3, normalized-entropy: 0.8935711016541908, [(2, 9), (3, 20)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 65, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 39, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [89, 19, 0]]
** centroid: 6, normalized-entropy: 0.6710828900205286, [(1, 89), (2, 19)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [12, 65, 0]]
** centroid: 7, normalized-entropy: 0.6242741010130388, [(1, 12), (2, 65)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2144574880413711] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2144574880413711, 0.164165929580573] ***
*** finished computation of 7 references, err: [Inf, 0.2144574880413711, 0.164165929580573] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 69, 15]]
** centroid: 1, normalized-entropy: 0.6769418697808861, [(2, 69), (3, 15)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [3, 50, 0]]
** centroid: 2, normalized-entropy: 0.3138129641688652, [(1, 3), (2, 50)]
*** center 3: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [36, 57, 0]]
** centroid: 4, normalized-entropy: 0.9629004147713269, [(1, 36), (2, 57)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [109, 6, 0]]
** centroid: 5, normalized-entropy: 0.295560777857315, [(1, 109), (2, 6)]
*** center 6: selecting labels [1] (freq >= 1) [from [44, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [35, 3, 0]]
** centroid: 7, normalized-entropy: 0.39845927409523557, [(1, 35), (2, 3)]
finished with 9 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 379,3 => 37,1 => 584), Dict(2 => 366,3 => 35,1 => 599))
[ Info: ===== scores for single classifier: {"micro_f1":0.938,"precision":0.938,"recall":0.938,"macro_recall":0.9420059106230046,"macro_f1":0.9104990730522363,"accuracy":0.938,"class_f1":{"2":0.9129213483146067,"3":0.8607594936708862,"1":0.9578163771712159},"class_precision":{"2":0.9393063583815029,"3":0.7727272727272727,"1":0.9491803278688524},"class_recall":{"2":0.8879781420765027,"3":0.9714285714285714,"1":0.9666110183639399}}
[ Info: ===== scores for 1: {"micro_f1":0.971,"precision":0.971,"recall":0.971,"macro_recall":0.9577792721584286,"macro_f1":0.9605738568701532,"accuracy":0.971,"class_f1":{"2":0.9594405594405595,"3":0.9428571428571428,"1":0.9794238683127573},"class_precision":{"2":0.9828080229226361,"3":0.9428571428571428,"1":0.9659090909090909},"class_recall":{"2":0.9371584699453552,"3":0.9428571428571428,"1":0.993322203672788}}
[ Info: ===== scores for 5: {"micro_f1":0.973,"precision":0.973,"recall":0.973,"macro_recall":0.9771811549911663,"macro_f1":0.9671132972095945,"accuracy":0.973,"class_f1":{"2":0.9622377622377624,"3":0.958904109589041,"1":0.9801980198019802},"class_precision":{"2":0.9856733524355301,"3":0.9210526315789473,"1":0.9690048939641109},"class_recall":{"2":0.9398907103825137,"3":1.0,"1":0.991652754590985}}
[ Info: ===== scores for 7: {"micro_f1":0.967,"precision":0.967,"recall":0.967,"macro_recall":0.9717166741168493,"macro_f1":0.9585241430839697,"accuracy":0.967,"class_f1":{"2":0.9534555712270805,"3":0.945945945945946,"1":0.9761709120788825},"class_precision":{"2":0.9854227405247813,"3":0.8974358974358975,"1":0.9611650485436893},"class_recall":{"2":0.9234972677595629,"3":1.0,"1":0.991652754590985}}
[ Info: ===== scores for 9: {"micro_f1":0.965,"precision":0.965,"recall":0.965,"macro_recall":0.969895180492077,"macro_f1":0.9530659469887875,"accuracy":0.965,"class_f1":{"2":0.9504950495049505,"3":0.9333333333333333,"1":0.9753694581280788},"class_precision":{"2":0.9853372434017595,"3":0.875,"1":0.9596122778675282},"class_recall":{"2":0.9180327868852459,"3":1.0,"1":0.991652754590985}}
[ Info: ===== scores for 11: {"micro_f1":0.971,"precision":0.971,"recall":0.971,"macro_recall":0.9753596613663938,"macro_f1":0.953795617224075,"accuracy":0.971,"class_f1":{"2":0.9593267882187939,"3":0.9210526315789475,"1":0.9810074318744838},"class_precision":{"2":0.9855907780979827,"3":0.8536585365853658,"1":0.9705882352941176},"class_recall":{"2":0.9344262295081968,"3":1.0,"1":0.991652754590985}}
(score = 0.973, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.973, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.971, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.971, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.978, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.978, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.975, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.975, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.973, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.973, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.973, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.973, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.967, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.967, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.967, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.967, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.978,"k":3,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.978,"precision":0.978,"recall":0.978,"macro_recall":0.9724132987714366,"macro_f1":0.9663092476209721,"accuracy":0.978,"class_f1":{"2":0.9693593314763231,"3":0.9444444444444445,"1":0.9851239669421488},"class_precision":{"2":0.9886363636363636,"3":0.918918918918919,"1":0.9754500818330606},"class_recall":{"2":0.9508196721311475,"3":0.9714285714285714,"1":0.994991652754591}}
Test Summary: | Pass  Total
AKNC          |    8      8
[874, 1, 1, 2, 2, 3, 7, 1, 5, 4, 4, 1, 2, 1, 3, 1, 29, 1, 2, 1, 7, 6, 1, 7, 10, 2, 4, 1, 7, 6, 9, 13, 7, 14, 6, 7, 13, 27, 27, 19, 5, 4, 2, 20, 5, 2, 10, 12, 4, 49, 3, 5, 3, 21, 46, 5, 8, 5, 7, 12, 6, 2, 13, 10, 13, 7, 82, 4, 17, 5, 21, 11, 11, 1, 3, 4, 18, 7, 10, 25, 45, 18, 15, 13, 7, 26, 8, 6, 5, 1, 12, 5, 7, 23, 85, 8, 26, 11, 9, 9, 3, 7, 11, 33, 8, 225, 7, 9, 4, 9, 84, 35, 10, 34, 13, 27, 145, 21, 12, 11, 11, 8, 14, 4, 94, 8, 22, 6, 13, 14, 19, 7, 22, 11, 18, 5, 295, 11, 8, 11, 27, 31, 6, 2, 25, 1, 7, 14, 21, 4, 8, 18, 64, 26, 8, 2, 17, 17, 31, 27, 4, 11, 1, 21, 11, 29, 9, 9, 6, 171, 21, 10, 22, 30, 24, 19, 6, 9, 37, 67, 8, 517, 26, 12, 20, 55, 34, 37, 198, 4, 6, 25, 249, 43, 4, 44, 10, 31, 22, 15, 1, 53, 7, 26, 29, 44, 65, 11, 11, 2, 40, 37, 34, 16, 4, 21, 40, 125, 6, 55, 144, 66, 7, 178, 12, 26, 27, 13, 56, 8, 39, 12, 15, 7, 38, 104, 15, 12, 100, 6, 20, 8, 23, 6, 24, 16, 51, 112, 8, 74, 7, 24, 2, 17, 30, 17, 46, 20, 20, 490, 16, 30, 40, 13, 40, 27, 3, 11, 10, 3, 10, 5, 23, 3, 13, 182, 36, 57, 49, 148, 46, 9, 13, 138, 78, 5, 23, 109, 37, 44, 138, 60, 407, 7, 42, 11, 50, 6, 7, 7]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.66, speedup = 0.3296441922253671, eval_ratio = 0.083492)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.4001736111111109,"recall":0.4001736111111109,"f1":null,"seconds":0.00045211613178253174,"exhaustive_search_seconds":0.00039910897612571716,"evaluations":493.71875,"distances_sum":1815.8509532534085}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5607638888888891,"recall":0.5607638888888891,"f1":null,"seconds":0.00030597858130931854,"exhaustive_search_seconds":0.00039910897612571716,"evaluations":657.421875,"distances_sum":1673.428985856185}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6475694444444442,"recall":0.6475694444444442,"f1":null,"seconds":0.0003805253654718399,"exhaustive_search_seconds":0.00039910897612571716,"evaluations":772.8203125,"distances_sum":1631.424684751916}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7178819444444439,"recall":0.7178819444444439,"f1":0.7178819444444439,"seconds":0.0006588120013475418,"exhaustive_search_seconds":0.00039910897612571716,"evaluations":913.4140625,"distances_sum":1601.4951051452329}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7638888888888884,"recall":0.7638888888888884,"f1":0.7638888888888884,"seconds":0.0005930643528699875,"exhaustive_search_seconds":0.00039910897612571716,"evaluations":1064.859375,"distances_sum":1586.6635150195755}
KCenters.DeloneInvIndex> reached performance {"precision":0.8072916666666661,"recall":0.8072916666666661,"f1":0.8072916666666661,"seconds":0.000959513708949089,"exhaustive_search_seconds":0.00039910897612571716,"evaluations":1190.0234375,"distances_sum":1572.8369832435822}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.833, speedup = 0.43488825782275087, eval_ratio = 0.120583)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
