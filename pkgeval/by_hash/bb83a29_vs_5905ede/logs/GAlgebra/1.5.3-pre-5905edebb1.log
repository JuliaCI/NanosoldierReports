Current time is 2020-10-25T19:58:05.687
Julia Version 1.5.3-pre.0
Commit 5905edebb1 (2020-09-24 05:09 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: AMD EPYC 7502 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, znver2)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2
  JULIA_MAX_NUM_PRECOMPILE_FILES = 9223372036854775807
  JULIA_PKG_SERVER = 

Starting installation at 2020-10-25T19:58:08.986
  Resolving package versions...
  Installed VersionParsing ─ v1.2.0
  Installed Conda ────────── v1.4.1
  Installed Parsers ──────── v1.0.11
  Installed MacroTools ───── v0.5.6
  Installed PyCall ───────── v1.92.1
  Installed GAlgebra ─────── v0.1.0
  Installed JSON ─────────── v0.21.1
Updating `~/.julia/environments/v1.5/Project.toml`
  [ace2154a] + GAlgebra v0.1.0
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [8f4d0f93] + Conda v1.4.1
  [ace2154a] + GAlgebra v0.1.0
  [682c06a0] + JSON v0.21.1
  [1914dd2f] + MacroTools v0.5.6
  [69de0a69] + Parsers v1.0.11
  [438e738f] + PyCall v1.92.1
  [81def892] + VersionParsing v1.2.0
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [de0858da] + Printf
  [9a3f8284] + Random
  [9e88b42a] + Serialization
  [4ec0a83e] + Unicode
   Building Conda ───→ `~/.julia/packages/Conda/3rPhK/deps/build.log`
   Building PyCall ──→ `~/.julia/packages/PyCall/BcTLp/deps/build.log`
   Building GAlgebra → `~/.julia/packages/GAlgebra/ebUtS/deps/build.log`
Starting tests at 2020-10-25T19:59:45.238
    Testing GAlgebra
Status `/tmp/jl_L3f15X/Project.toml`
  [ace2154a] GAlgebra v0.1.0
  [438e738f] PyCall v1.92.1
  [24249f21] SymPy v1.0.31
  [8dfed614] Test
Status `/tmp/jl_L3f15X/Manifest.toml`
  [56f22d72] Artifacts v1.3.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.4+0
  [8f4d0f93] Conda v1.4.1
  [ace2154a] GAlgebra v0.1.0
  [692b3bcd] JLLWrappers v1.1.3
  [682c06a0] JSON v0.21.1
  [1914dd2f] MacroTools v0.5.6
  [efe28fd5] OpenSpecFun_jll v0.5.3+4
  [69de0a69] Parsers v1.0.11
  [438e738f] PyCall v1.92.1
  [3cdcf5f2] RecipesBase v1.1.0
  [276daf66] SpecialFunctions v0.10.3
  [24249f21] SymPy v1.0.31
  [81def892] VersionParsing v1.2.0
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
 19.990279 seconds (7.69 M allocations: 391.899 MiB, 4.34% gc time)
 55.942961 seconds (1.05 M allocations: 53.423 MiB, 0.04% gc time)
  0.392023 seconds (8.09 k allocations: 250.391 KiB)
  3.227755 seconds (13.41 k allocations: 392.000 KiB)
  0.446900 seconds (8.18 k allocations: 252.641 KiB)
  0.202100 seconds (7.77 k allocations: 240.234 KiB)
 69.054962 seconds (21.25 k allocations: 626.984 KiB)
  5.144604 seconds (13.97 k allocations: 421.609 KiB)
 30.665579 seconds (20.99 k allocations: 617.328 KiB)
 63.002190 seconds (21.17 k allocations: 621.625 KiB)
Test Summary: | Pass  Broken  Total
GAlgebra.jl   | 2876       1   2877
!!!!If I**2 = 0, I cannot be normalized!!!!
!!!!If I**2 = 0, I cannot be normalized!!!!
!!!!If I**2 = 0, I cannot be normalized!!!!
    Testing GAlgebra tests passed 
Finished at 2020-10-25T20:04:51.547
