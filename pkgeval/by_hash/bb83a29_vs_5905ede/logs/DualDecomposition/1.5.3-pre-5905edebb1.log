Current time is 2020-10-25T19:46:03.279
Julia Version 1.5.3-pre.0
Commit 5905edebb1 (2020-09-24 05:09 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: AMD EPYC 7502 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, znver2)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2
  JULIA_MAX_NUM_PRECOMPILE_FILES = 9223372036854775807
  JULIA_PKG_SERVER = 

Starting installation at 2020-10-25T19:46:06.458
  Resolving package versions...
  Installed CodecBzip2 ─────────────────── v0.7.2
  Installed ZipFile ────────────────────── v0.9.3
  Installed DualDecomposition ──────────── v0.1.1
  Installed MPICH_jll ──────────────────── v3.3.2+10
  Installed CodecZlib ──────────────────── v0.7.0
  Installed CompilerSupportLibraries_jll ─ v0.3.4+0
  Installed MacroTools ─────────────────── v0.5.6
  Installed HTTP ───────────────────────── v0.8.19
  Installed Calculus ───────────────────── v0.5.1
  Installed JuMP ───────────────────────── v0.21.5
  Installed Compat ─────────────────────── v3.22.0
  Installed Zlib_jll ───────────────────── v1.2.11+18
  Installed CommonSubexpressions ───────── v0.3.0
  Installed Artifacts ──────────────────── v1.3.0
  Installed MicrosoftMPI_jll ───────────── v10.1.2+3
  Installed OrderedCollections ─────────── v1.3.1
  Installed MutableArithmetics ─────────── v0.2.10
  Installed BundleMethod ───────────────── v0.1.4
  Installed StaticArrays ───────────────── v0.12.4
  Installed JSON ───────────────────────── v0.21.1
  Installed MathOptInterface ───────────── v0.9.17
  Installed Requires ───────────────────── v1.1.0
  Installed MbedTLS ────────────────────── v1.0.2
  Installed Bzip2_jll ──────────────────── v1.0.6+5
  Installed OpenSpecFun_jll ────────────── v0.5.3+4
  Installed OpenMPI_jll ────────────────── v4.0.2+2
  Installed MbedTLS_jll ────────────────── v2.16.8+0
  Installed NaNMath ────────────────────── v0.3.4
  Installed ForwardDiff ────────────────── v0.10.12
  Installed DocStringExtensions ────────── v0.8.3
  Installed JLLWrappers ────────────────── v1.1.3
  Installed JSONSchema ─────────────────── v0.3.2
  Installed SpecialFunctions ───────────── v0.10.3
  Installed DiffResults ────────────────── v1.0.2
  Installed DiffRules ──────────────────── v1.0.1
  Installed IniFile ────────────────────── v0.5.0
  Installed BenchmarkTools ─────────────── v0.5.0
  Installed TranscodingStreams ─────────── v0.9.5
  Installed Parsers ────────────────────── v1.0.11
  Installed DataStructures ─────────────── v0.18.8
  Installed MPI ────────────────────────── v0.15.1
Updating `~/.julia/environments/v1.5/Project.toml`
  [d0e446f1] + DualDecomposition v0.1.1
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [56f22d72] + Artifacts v1.3.0
  [6e4b80f9] + BenchmarkTools v0.5.0
  [e8a6717a] + BundleMethod v0.1.4
  [6e34b625] + Bzip2_jll v1.0.6+5
  [49dc2e85] + Calculus v0.5.1
  [523fee87] + CodecBzip2 v0.7.2
  [944b1d66] + CodecZlib v0.7.0
  [bbf7d656] + CommonSubexpressions v0.3.0
  [34da2185] + Compat v3.22.0
  [e66e0078] + CompilerSupportLibraries_jll v0.3.4+0
  [864edb3b] + DataStructures v0.18.8
  [163ba53b] + DiffResults v1.0.2
  [b552c78f] + DiffRules v1.0.1
  [ffbed154] + DocStringExtensions v0.8.3
  [d0e446f1] + DualDecomposition v0.1.1
  [f6369f11] + ForwardDiff v0.10.12
  [cd3eb016] + HTTP v0.8.19
  [83e8ac13] + IniFile v0.5.0
  [692b3bcd] + JLLWrappers v1.1.3
  [682c06a0] + JSON v0.21.1
  [7d188eb4] + JSONSchema v0.3.2
  [4076af6c] + JuMP v0.21.5
  [da04e1cc] + MPI v0.15.1
  [7cb0a576] + MPICH_jll v3.3.2+10
  [1914dd2f] + MacroTools v0.5.6
  [b8f27783] + MathOptInterface v0.9.17
  [739be429] + MbedTLS v1.0.2
  [c8ffd9c3] + MbedTLS_jll v2.16.8+0
  [9237b28f] + MicrosoftMPI_jll v10.1.2+3
  [d8a4904e] + MutableArithmetics v0.2.10
  [77ba4419] + NaNMath v0.3.4
  [fe0851c0] + OpenMPI_jll v4.0.2+2
  [efe28fd5] + OpenSpecFun_jll v0.5.3+4
  [bac558e1] + OrderedCollections v1.3.1
  [69de0a69] + Parsers v1.0.11
  [ae029012] + Requires v1.1.0
  [276daf66] + SpecialFunctions v0.10.3
  [90137ffa] + StaticArrays v0.12.4
  [3bb67fe8] + TranscodingStreams v0.9.5
  [a5390f91] + ZipFile v0.9.3
  [83775a58] + Zlib_jll v1.2.11+18
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
   Building MPI → `~/.julia/packages/MPI/z1lDn/deps/build.log`
Starting tests at 2020-10-25T19:46:15.88
    Testing DualDecomposition
Status `/tmp/jl_H9uhb0/Project.toml`
  [e8a6717a] BundleMethod v0.1.4
  [d0e446f1] DualDecomposition v0.1.1
  [60bf3e95] GLPK v0.14.2
  [b6b21f68] Ipopt v0.6.3
  [4076af6c] JuMP v0.21.5
  [da04e1cc] MPI v0.15.1
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_H9uhb0/Manifest.toml`
  [ae81ac8f] ASL_jll v0.1.1+3
  [56f22d72] Artifacts v1.3.0
  [6e4b80f9] BenchmarkTools v0.5.0
  [b99e7846] BinaryProvider v0.5.10
  [e8a6717a] BundleMethod v0.1.4
  [6e34b625] Bzip2_jll v1.0.6+5
  [fa961155] CEnum v0.4.1
  [49dc2e85] Calculus v0.5.1
  [523fee87] CodecBzip2 v0.7.2
  [944b1d66] CodecZlib v0.7.0
  [bbf7d656] CommonSubexpressions v0.3.0
  [34da2185] Compat v3.22.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.4+0
  [864edb3b] DataStructures v0.18.8
  [163ba53b] DiffResults v1.0.2
  [b552c78f] DiffRules v1.0.1
  [ffbed154] DocStringExtensions v0.8.3
  [d0e446f1] DualDecomposition v0.1.1
  [f6369f11] ForwardDiff v0.10.12
  [60bf3e95] GLPK v0.14.2
  [e8aa6df9] GLPK_jll v4.64.0+0
  [781609d7] GMP_jll v6.1.2+6
  [cd3eb016] HTTP v0.8.19
  [83e8ac13] IniFile v0.5.0
  [b6b21f68] Ipopt v0.6.3
  [9cc047cb] Ipopt_jll v3.13.2+0
  [692b3bcd] JLLWrappers v1.1.3
  [682c06a0] JSON v0.21.1
  [7d188eb4] JSONSchema v0.3.2
  [4076af6c] JuMP v0.21.5
  [d00139f3] METIS_jll v5.1.0+4
  [da04e1cc] MPI v0.15.1
  [7cb0a576] MPICH_jll v3.3.2+10
  [d7ed1dd3] MUMPS_seq_jll v5.2.1+3
  [1914dd2f] MacroTools v0.5.6
  [b8f27783] MathOptInterface v0.9.17
  [fdba3010] MathProgBase v0.7.8
  [739be429] MbedTLS v1.0.2
  [c8ffd9c3] MbedTLS_jll v2.16.8+0
  [9237b28f] MicrosoftMPI_jll v10.1.2+3
  [d8a4904e] MutableArithmetics v0.2.10
  [77ba4419] NaNMath v0.3.4
  [656ef2d0] OpenBLAS32_jll v0.3.10+0
  [fe0851c0] OpenMPI_jll v4.0.2+2
  [efe28fd5] OpenSpecFun_jll v0.5.3+4
  [bac558e1] OrderedCollections v1.3.1
  [69de0a69] Parsers v1.0.11
  [ae029012] Requires v1.1.0
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.4
  [3bb67fe8] TranscodingStreams v0.9.5
  [a5390f91] ZipFile v0.9.3
  [83775a58] Zlib_jll v1.2.11+18
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode

******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit http://projects.coin-or.org/Ipopt
******************************************************************************

Iter 0: ncols 12, nrows 6, fx0 1.154000e+05, fx1 0.000000e+00, fy 1.154000e+05, v -1.332200e+05, u 1.000000e-01, i 0
Iter 1: ncols 12, nrows 9, fx0 1.154000e+05, fx1 1.154000e+05, fy 5.735333e+05, v -1.315373e+04, u 1.200000e-01, i -1
Iter 2: ncols 12, nrows 11, fx0 1.154000e+05, fx1 1.154000e+05, fy 1.524635e+05, v -8.707668e+03, u 1.440000e-01, i -1
Iter 3: ncols 12, nrows 13, fx0 1.102523e+05, fx1 1.102523e+05, fy 1.102523e+05, v -2.551334e+03, u 1.728000e-01, i -1
Iter 4: ncols 12, nrows 15, fx0 1.102523e+05, fx1 1.102523e+05, fy 1.138567e+05, v -1.867371e+03, u 2.073600e-01, i -1
Iter 5: ncols 12, nrows 16, fx0 1.084299e+05, fx1 1.084299e+05, fy 1.084299e+05, v -4.494681e+01, u 2.488320e-01, i -1
Iter 6: ncols 12, nrows 19, fx0 1.084299e+05, fx1 1.084299e+05, fy 1.084299e+05, v -3.990977e+01, u 2.985984e-01, i -1
Iter 7: ncols 12, nrows 22, fx0 1.083900e+05, fx1 1.083900e+05, fy 1.083900e+05, v -9.584044e-04, u 3.583181e-01, i -1
TERMINATION: Optimal: v = -0.0009584043618815485
DD.dual_objective_value(algo) = -108389.99987454197
DD.dual_solution(algo) = [40.11111070986328, 23.444444210029467, -63.55555491989319, -16.777777609862543, -28.111110830033784, 44.8888884398965, -23.33333310000074, 4.666666620004317, 18.666666479996692]
Iter 0: ncols 12, nrows 24, Δ 1.000000e+01, fx0 1.154000e+05, m 1.127700e+05, fy 1.154000e+05
Iter 1: ncols 12, nrows 24, Δ 1.500000e+01, fx0 1.132200e+05, m 1.088250e+05, fy 1.132200e+05
Iter 2: ncols 12, nrows 27, Δ 7.500000e+00, fx0 1.132200e+05, m 1.108083e+05, fy 1.148917e+05
Iter 3: ncols 12, nrows 30, Δ 3.750000e+00, fx0 1.132200e+05, m 1.126083e+05, fy 1.123833e+05
Iter 4: ncols 12, nrows 30, Δ 1.187500e+01, fx0 1.126083e+05, m 1.111833e+05, fy 1.126083e+05
Iter 5: ncols 12, nrows 30, Δ 1.593750e+01, fx0 1.111833e+05, m 1.095896e+05, fy 1.111833e+05
Iter 6: ncols 12, nrows 30, Δ 1.796875e+01, fx0 1.095896e+05, m 1.077927e+05, fy 1.095896e+05
Iter 7: ncols 12, nrows 33, Δ 8.984375e+00, fx0 1.095896e+05, m 1.086911e+05, fy 1.124115e+05
Iter 8: ncols 12, nrows 33, Δ 1.449219e+01, fx0 1.086911e+05, m 1.083900e+05, fy 1.086911e+05
Iter 9: ncols 12, nrows 33, Δ 1.724609e+01, fx0 1.083900e+05, m 1.083900e+05, fy 1.083900e+05
TERMINATION: Optimal
DD.dual_objective_value(algo) = -108390.00000000003
DD.dual_solution(algo) = [38.627604166666586, 21.96093749999996, -65.03906250000013, -18.86979166666667, -30.20312499999996, 42.79687500000003, -19.757812499999915, 8.2421875, 22.2421875000001]
objval = 96480.08276953863
Iter 0: ncols 12, nrows 6, fx0 -9.643955e+04, fx1 0.000000e+00, fy -9.643955e+04, v -6.182148e+00, u 1.000000e-01, i 0
Iter 1: ncols 12, nrows 9, fx0 -9.644548e+04, fx1 -9.644548e+04, fy -9.644548e+04, v -4.352687e+00, u 1.200000e-01, i -1
Iter 2: ncols 12, nrows 11, fx0 -9.644969e+04, fx1 -9.644969e+04, fy -9.644969e+04, v -3.463396e+00, u 1.440000e-01, i -1
Iter 3: ncols 12, nrows 13, fx0 -9.645287e+04, fx1 -9.645287e+04, fy -9.645287e+04, v -2.914920e+00, u 1.728000e-01, i -1
Iter 4: ncols 12, nrows 15, fx0 -9.645530e+04, fx1 -9.645530e+04, fy -9.645530e+04, v -2.579865e+00, u 2.073600e-01, i -1
Iter 5: ncols 12, nrows 17, fx0 -9.645720e+04, fx1 -9.645720e+04, fy -9.645720e+04, v -2.379253e+00, u 2.488320e-01, i -1
Iter 6: ncols 12, nrows 19, fx0 -9.645869e+04, fx1 -9.645869e+04, fy -9.645869e+04, v -2.263398e+00, u 2.985984e-01, i -1
Iter 7: ncols 12, nrows 21, fx0 -9.645987e+04, fx1 -9.645987e+04, fy -9.645987e+04, v -2.200725e+00, u 3.583181e-01, i -1
Iter 8: ncols 12, nrows 23, fx0 -9.646081e+04, fx1 -9.646081e+04, fy -9.646081e+04, v -2.171054e+00, u 4.299817e-01, i -1
Iter 9: ncols 12, nrows 25, fx0 -9.646157e+04, fx1 -9.646157e+04, fy -9.646157e+04, v -2.161458e+00, u 5.159780e-01, i -1
Iter 10: ncols 12, nrows 27, fx0 -9.646219e+04, fx1 -9.646219e+04, fy -9.646219e+04, v -2.163669e+00, u 6.191736e-01, i -1
Iter 11: ncols 12, nrows 29, fx0 -9.646269e+04, fx1 -9.646269e+04, fy -9.646269e+04, v -2.172433e+00, u 7.430084e-01, i -1
Iter 12: ncols 12, nrows 32, fx0 -9.646310e+04, fx1 -9.646310e+04, fy -9.646310e+04, v -2.743598e-01, u 8.916100e-01, i -1
Iter 13: ncols 12, nrows 33, fx0 -9.646337e+04, fx1 -9.646337e+04, fy -9.646337e+04, v -2.273735e-01, u 1.069932e+00, i -1
Iter 14: ncols 12, nrows 34, fx0 -9.646359e+04, fx1 -9.646359e+04, fy -9.646359e+04, v -1.897052e-01, u 1.283918e+00, i -1
Iter 15: ncols 12, nrows 35, fx0 -9.646378e+04, fx1 -9.646378e+04, fy -9.646378e+04, v -1.593354e-01, u 1.540702e+00, i -1
Iter 16: ncols 12, nrows 36, fx0 -9.646393e+04, fx1 -9.646393e+04, fy -9.646393e+04, v -1.347288e-01, u 1.848843e+00, i -1
Iter 17: ncols 12, nrows 37, fx0 -9.646406e+04, fx1 -9.646406e+04, fy -9.646406e+04, v -1.147045e-01, u 2.218611e+00, i -1
Iter 18: ncols 12, nrows 38, fx0 -9.646416e+04, fx1 -9.646416e+04, fy -9.646416e+04, v -9.835334e-02, u 2.662333e+00, i -1
Iter 19: ncols 12, nrows 39, fx0 -9.646425e+04, fx1 -9.646425e+04, fy -9.646425e+04, v -8.495774e-02, u 3.194800e+00, i -1
TERMINATION: Optimal: v = -0.08495773747199564
DD.dual_objective_value(algo) = 96464.24834260825
DD.dual_solution(algo) = [18.67625609840457, 13.86433032290031, 14.239644101960344, 0.813482397363856, 0.4079131761863448, 0.37331352941883855, -19.489738495768425, -14.272243499086654, -14.612957631379183]
Iter 0: ncols 12, nrows 24, Δ 1.000000e+01, fx0 -9.643955e+04, m -9.645850e+04, fy -9.643955e+04
Iter 1: ncols 12, nrows 24, Δ 1.500000e+01, fx0 -9.645627e+04, m -9.648693e+04, fy -9.645627e+04
Iter 2: ncols 12, nrows 24, Δ 1.750000e+01, fx0 -9.647299e+04, m -9.652009e+04, fy -9.647299e+04
Iter 3: ncols 12, nrows 27, Δ 8.750000e+00, fx0 -9.647299e+04, m -9.648092e+04, fy -9.647983e+04
Iter 4: ncols 12, nrows 30, Δ 4.375000e+00, fx0 -9.647299e+04, m -9.647868e+04, fy -9.646963e+04
Iter 5: ncols 12, nrows 30, Δ 1.218750e+01, fx0 -9.647598e+04, m -9.648095e+04, fy -9.647598e+04
Iter 6: ncols 12, nrows 33, Δ 6.093750e+00, fx0 -9.647598e+04, m -9.648004e+04, fy -9.647663e+04
Iter 7: ncols 12, nrows 36, Δ 3.046875e+00, fx0 -9.647598e+04, m -9.647793e+04, fy -9.647692e+04
Iter 8: ncols 12, nrows 36, Δ 1.152344e+01, fx0 -9.647756e+04, m -9.648054e+04, fy -9.647756e+04
Iter 9: ncols 12, nrows 36, Δ 1.576172e+01, fx0 -9.647926e+04, m -9.648159e+04, fy -9.647926e+04
Iter 10: ncols 12, nrows 39, Δ 7.880859e+00, fx0 -9.647926e+04, m -9.648097e+04, fy -9.647796e+04
Iter 11: ncols 12, nrows 42, Δ 3.940430e+00, fx0 -9.647926e+04, m -9.648056e+04, fy -9.647944e+04
Iter 12: ncols 12, nrows 45, Δ 1.970215e+00, fx0 -9.647926e+04, m -9.647993e+04, fy -9.647949e+04
Iter 13: ncols 12, nrows 45, Δ 1.098511e+01, fx0 -9.647969e+04, m -9.648076e+04, fy -9.647969e+04
Iter 14: ncols 12, nrows 48, Δ 5.492554e+00, fx0 -9.647969e+04, m -9.648051e+04, fy -9.647954e+04
Iter 15: ncols 12, nrows 48, Δ 1.274628e+01, fx0 -9.648005e+04, m -9.648051e+04, fy -9.648005e+04
Iter 16: ncols 12, nrows 51, Δ 6.373138e+00, fx0 -9.648005e+04, m -9.648023e+04, fy -9.648005e+04
Iter 17: ncols 12, nrows 54, Δ 3.186569e+00, fx0 -9.648005e+04, m -9.648019e+04, fy -9.647966e+04
Iter 18: ncols 12, nrows 57, Δ 1.593285e+00, fx0 -9.648005e+04, m -9.648013e+04, fy -9.648001e+04
TERMINATION: Optimal
DD.dual_objective_value(algo) = 96480.04965574063
DD.dual_solution(algo) = [38.4308148554463, 41.22571441254453, 49.5539103340924, 5.31876480329002e-9, 1.7304124804286927e-8, 8.878615227037662e-9, -38.43081486076507, -41.22571442984865, -49.553910342971015]
Test Summary: | Pass  Total
farmer        |    5      5
Test Summary:             | Pass  Total
combine_dict with 1 procs |    9      9
Test Summary:             |
combine_dict with 2 procs | No tests
Test Summary:             | Pass  Total
combine_dict with 2 procs |   18     18
Test Summary:             |
combine_dict with 3 procs | No tests
Test Summary:             |Test Summary:             | 
combine_dict with 3 procs | Pass  No tests
Total
combine_dict with 3 procs |   27     27

******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit http://projects.coin-or.org/Ipopt
******************************************************************************

Iter 0: ncols 12, nrows 6, fx0 1.154000e+05, fx1 0.000000e+00, fy 1.154000e+05, v -1.332200e+05, u 1.000000e-01, i 0
Iter 1: ncols 12, nrows 9, fx0 1.154000e+05, fx1 1.154000e+05, fy 5.735333e+05, v -1.315373e+04, u 1.200000e-01, i -1
Iter 2: ncols 12, nrows 11, fx0 1.154000e+05, fx1 1.154000e+05, fy 1.524635e+05, v -8.707668e+03, u 1.440000e-01, i -1
Iter 3: ncols 12, nrows 13, fx0 1.102523e+05, fx1 1.102523e+05, fy 1.102523e+05, v -2.551334e+03, u 1.728000e-01, i -1
Iter 4: ncols 12, nrows 15, fx0 1.102523e+05, fx1 1.102523e+05, fy 1.138567e+05, v -1.867371e+03, u 2.073600e-01, i -1
Iter 5: ncols 12, nrows 16, fx0 1.084299e+05, fx1 1.084299e+05, fy 1.084299e+05, v -4.494681e+01, u 2.488320e-01, i -1
Iter 6: ncols 12, nrows 19, fx0 1.084299e+05, fx1 1.084299e+05, fy 1.084299e+05, v -3.990977e+01, u 2.985984e-01, i -1
Iter 7: ncols 12, nrows 22, fx0 1.083900e+05, fx1 1.083900e+05, fy 1.083900e+05, v -9.584044e-04, u 3.583181e-01, i -1
TERMINATION: Optimal: v = -0.0009584043618815485

******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit http://projects.coin-or.org/Ipopt
******************************************************************************

Iter 0: ncols 12, nrows 6, fx0 1.154000e+05, fx1 0.000000e+00, fy 1.154000e+05, v -1.332200e+05, u 1.000000e-01, i 0
Iter 1: ncols 12, nrows 9, fx0 1.154000e+05, fx1 1.154000e+05, fy 5.735333e+05, v -1.315373e+04, u 1.200000e-01, i -1
Iter 2: ncols 12, nrows 11, fx0 1.154000e+05, fx1 1.154000e+05, fy 1.524635e+05, v -8.707668e+03, u 1.440000e-01, i -1
Iter 3: ncols 12, nrows 13, fx0 1.102523e+05, fx1 1.102523e+05, fy 1.102523e+05, v -2.551334e+03, u 1.728000e-01, i -1
Iter 4: ncols 12, nrows 15, fx0 1.102523e+05, fx1 1.102523e+05, fy 1.138567e+05, v -1.867371e+03, u 2.073600e-01, i -1
Iter 5: ncols 12, nrows 16, fx0 1.084299e+05, fx1 1.084299e+05, fy 1.084299e+05, v -4.494681e+01, u 2.488320e-01, i -1
Iter 6: ncols 12, nrows 19, fx0 1.084299e+05, fx1 1.084299e+05, fy 1.084299e+05, v -3.990977e+01, u 2.985984e-01, i -1
Iter 7: ncols 12, nrows 22, fx0 1.083900e+05, fx1 1.083900e+05, fy 1.083900e+05, v -9.584043e-04, u 3.583181e-01, i -1
TERMINATION: Optimal: v = -0.0009584043491486227

******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit http://projects.coin-or.org/Ipopt
******************************************************************************

Iter 0: ncols 12, nrows 6, fx0 1.154000e+05, fx1 0.000000e+00, fy 1.154000e+05, v -1.332200e+05, u 1.000000e-01, i 0
Iter 1: ncols 12, nrows 9, fx0 1.154000e+05, fx1 1.154000e+05, fy 5.735333e+05, v -1.315373e+04, u 1.200000e-01, i -1
Iter 2: ncols 12, nrows 11, fx0 1.154000e+05, fx1 1.154000e+05, fy 1.524635e+05, v -8.707668e+03, u 1.440000e-01, i -1
Iter 3: ncols 12, nrows 13, fx0 1.102523e+05, fx1 1.102523e+05, fy 1.102523e+05, v -2.551334e+03, u 1.728000e-01, i -1
Iter 4: ncols 12, nrows 15, fx0 1.102523e+05, fx1 1.102523e+05, fy 1.138567e+05, v -1.867371e+03, u 2.073600e-01, i -1
Iter 5: ncols 12, nrows 16, fx0 1.084299e+05, fx1 1.084299e+05, fy 1.084299e+05, v -4.494681e+01, u 2.488320e-01, i -1
Iter 6: ncols 12, nrows 19, fx0 1.084299e+05, fx1 1.084299e+05, fy 1.084299e+05, v -3.990977e+01, u 2.985984e-01, i -1
Iter 7: ncols 12, nrows 22, fx0 1.083900e+05, fx1 1.083900e+05, fy 1.083900e+05, v -9.584044e-04, u 3.583181e-01, i -1
TERMINATION: Optimal: v = -0.0009584043618815485
Test Summary: |
MPI tests     | No tests
Iter 0: ncols 160, nrows 79, fx0 1.790400e+02, fx1 0.000000e+00, fy 1.790400e+02, v -2.329989e+06, u 1.000000e-01, i 0
Iter 1: ncols 160, nrows 95, fx0 1.790400e+02, fx1 1.790400e+02, fy 2.263167e+06, v -2.736868e+02, u 1.200000e-01, i -1
Iter 2: ncols 160, nrows 103, fx0 1.790400e+02, fx1 1.790400e+02, fy 1.961183e+04, v -7.290002e+00, u 1.440000e-01, i -1
Iter 3: ncols 160, nrows 119, fx0 1.726358e+02, fx1 1.726358e+02, fy 1.726358e+02, v -8.858075e-01, u 1.728000e-01, i -1
Iter 4: ncols 160, nrows 135, fx0 1.719165e+02, fx1 1.719165e+02, fy 1.719165e+02, v -1.664715e-01, u 2.073600e-01, i -1
Iter 5: ncols 160, nrows 149, fx0 1.717788e+02, fx1 1.717788e+02, fy 1.717788e+02, v -2.875979e-02, u 2.488320e-01, i -1
Iter 6: ncols 160, nrows 160, fx0 1.717500e+02, fx1 1.717500e+02, fy 1.717500e+02, v -1.425825e-06, u 2.985984e-01, i -1
TERMINATION: Optimal: v = -1.4258247578169403e-6
DD.dual_objective_value(algo) = -171.7499999313459
DD.dual_solution(algo) = [-0.0009710593165693176, 0.0010811527723587333, -0.00011009345583002916, -0.0009132068116498066, 0.0010233002673685485, -0.00011009345583002916, -0.0009437472047314547, 0.0010538406604567925, -0.00011009345583002916, -0.0008892998201317869, 0.0009993932760267426, -0.00011009345583002916, 0.003128822284860649, -0.003018728829062251, -0.00011009345583002916, 0.002975777670672853, -0.0028656842149096203, -0.00011009345583002916, 0.0030369453132690055, -0.0029268518573855574, -0.00011009345583002916, 0.0028911416099020983, -0.0027810481540430088, -0.00011009345583002916, -0.0030252332009618773, 0.0031353266568413, -0.00011009345583002916, -0.002841909210317003, 0.0029520026662793212, -0.00011009345583002916, -0.0029484756422248565, 0.0030585690980472553, -0.00011009345583002916, -0.0027766950202648293, 0.0028867884762290032, -0.00011009345583002916, 0.0008446696324844985, -0.0012061087582867721, 0.00036143912566585307, 0.000804772283709798, -0.0011370684800810827, 0.0003322961965629335, 0.0008190195094209647, -0.001173757158764926, 0.0003547376492170932, 0.000808477922531065, -0.0010811264210744773, 0.00027264849851446984, -0.0009342827704358531, 0.0010260050509153479, -0.0001240021695011156, 0.003038261121215109, -0.002835745688499396, -0.0001240021695011156, -0.0029213502273482913, 0.0029560617652724633, -0.0001240021695011156, 0.0008173718765690349, -0.001146321127688415, 0.0003720065085033468, -0.0008303068540334071, 0.0010047441634138093, -7.838490306807545e-5, 0.002672713247491621, -0.0028483246875013707, -7.838490306807545e-5, -0.0025898450186254214, 0.002923952016788445, -7.838490306807545e-5, 0.0007474386251672076, -0.001080371492700883, 0.00023515470920422633, -0.0009221458787825509, 0.0009797941357850076, -0.0001326563375541542, 0.003029506145323496, -0.002651905508074827, -0.0001326563375541542, -0.0029050937376634903, 0.002787861345881775, -0.0001326563375541542, 0.0007977334711225454, -0.0011157499735919558, 0.00039796901266246263, -0.0008335005211988724, 0.0009547777654863517, -8.760937509325552e-5, 0.0026888143551031373, -0.0026818447969413858, -8.760937509325552e-5, -0.002595611453041883, 0.002772165074635538, -8.760937509325552e-5, 0.000740297619137618, -0.0010450980431805036, 0.0002628281252797666, -6.829203137210059e-23, 6.874238737290136e-23, -1.3910331331390275e-23, -6.514874504467648e-23, 6.670384420206141e-23, 1.1950117653438518e-26, -6.561300014861865e-23, 6.305201234533845e-32, -8.615636240853613e-24, -6.776263578018743e-23, -1.610101358700477e-24, 1.0095861203093942e-24, 5.9350211489797e-25, -5.273276424978188e-25, -1.9063773976506726e-26, -1.0708170490793031e-31, 3.388131791482911e-23, 1.8096224924948154e-24, -3.4677478440393436e-23, 3.9497937432620385e-25, 3.655691117666839e-27, 7.61968343356162e-25, -6.842644740211403e-23, 4.648401078949656e-23, 5.293948024332121e-25, 5.38244275605273e-25, -6.523888539274292e-25, 1.0587911840678749e-24, -1.9645539696054116e-25, 2.0627416457949532e-25, 4.957917839402065e-25, 2.352508705453025e-25, -3.0464996276528456e-24, 1.0257043382184472e-24, 3.441395682072488e-23, -6.597761848163007e-23, -4.334017270677602e-24, 1.6543611881282004e-26, -3.5646607096425086e-26, 5.162712269624597e-23, 6.776315270528094e-23, -6.862947032151129e-24, -3.938607309693718e-24, -4.250674372780341e-24, -1.808092480516256e-23, 4.285410834895348e-24, 2.5361874315642482e-23, 1.540827674575825e-24]
Iter 0: ncols 160, nrows 367, Δ 1.000000e+01, fx0 1.790400e+02, m -3.793274e+04, fy 1.790400e+02
Iter 1: ncols 160, nrows 383, Δ 5.000000e+00, fx0 1.790400e+02, m -6.181201e+00, fy 3.731425e+04
Iter 2: ncols 160, nrows 399, Δ 2.500000e+00, fx0 1.790400e+02, m 1.717500e+02, fy 1.635598e+04
Iter 3: ncols 160, nrows 399, Δ 1.125000e+01, fx0 1.720515e+02, m 1.717500e+02, fy 1.720515e+02
Iter 4: ncols 160, nrows 415, Δ 5.625000e+00, fx0 1.720515e+02, m 1.717500e+02, fy 1.720515e+02
Iter 5: ncols 160, nrows 431, Δ 2.812500e+00, fx0 1.720515e+02, m 1.717500e+02, fy 3.748477e+02
Iter 6: ncols 160, nrows 431, Δ 1.140625e+01, fx0 1.717500e+02, m 1.717500e+02, fy 1.717500e+02
TERMINATION: Optimal
DD.dual_objective_value(algo) = -171.75000116416905
DD.dual_solution(algo) = [0.0007075006459170939, 0.0027372974562487017, -0.003444710783104257, 9.778122191343936e-5, 0.0020369674402442354, -0.0021346346600844097, 0.00041967285938579316, 0.0024066905815424275, -0.0028262105351369417, -0.0005286071214170584, 0.0013904117178139075, -0.0008616931702948497, 0.003409156163199691, -0.00266965721978498, -0.0007394274412363468, 0.002740444654173275, -0.003100051590443395, 0.00035969387256387344, 0.003007723509391879, -0.0029280182996730656, -7.957431897745856e-5, 0.002037007772355465, -0.003732952432669, 0.0016960161976722747, -0.001987119453422152, 0.004104449116612933, -0.002117247514479761, -0.0025192583624810594, 0.003285881266950354, -0.0007665551552982655, -0.002209893296898864, 0.003761750064051155, -0.0015517165273468583, -0.0030871746286036776, 0.002669482337856635, 0.0004178257323084342, -0.0004784287566536075, -0.002509763142813004, 0.0029884512097234626, -0.0005222046319659058, -0.00248316124473038, 0.0030039659010429915, -0.0005008612692339411, -0.002494727888777489, 0.00299537663612669, -0.0005857393056603709, -0.0024745981624290352, 0.003060440556521419, -0.00016452053289236495, 0.0018181838507855112, -0.0016610998951216475, 0.002946548296860806, -0.002930123677791353, 5.5104485223650755e-5, -0.002558271811319022, 0.0033297116218283405, -0.0008508620093780201, -0.00022375595264941914, -0.0022177717948224985, 0.002456857419276017, -4.360761262289529e-5, 0.001722700654097629, -0.0015405270594913388, 0.0026838084635443893, -0.002838196221602697, -0.0001006784584503158, -0.0022687328948346, 0.003217003759360935, -0.0006761197869514244, -0.00037146795608689385, -0.0021015081918558673, 0.002317325304893079, -0.00017854862752238795, 0.001792383284925096, -0.0016571521938497438, 0.0029085271059575138, -0.002784107062440277, 0.00011225581570703026, -0.0025235213375693227, 0.0032048357475898365, -0.0009163060853811976, -0.00020645714086580343, -0.0022131119700746554, 0.0024612024635239115, -0.00020467754190176308, 0.0015641497024482965, -0.0012707463420432476, 0.0020708136251920937, -0.003280730344881669, 0.0010749196882391433, -0.002630719718316907, 0.002738139723043294, -2.1925061464921803e-5, 0.0007645836350265763, -0.0010215590806099217, 0.00021775171526902608, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -5.073750066616278e-25, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -6.1621031913536785e-21, 0.0, 0.0, 6.573192197398541e-25, 0.0, 0.0, -5.21529008720019e-21, 0.0, 0.0, 0.0]
Test Summary: | Pass  Total
investment    |    2      2
    Testing DualDecomposition tests passed 
Finished at 2020-10-25T20:00:40.772
