Current time is 2020-10-25T19:17:29.68
Julia Version 1.5.3-pre.0
Commit 5905edebb1 (2020-09-24 05:09 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: AMD EPYC 7502 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, znver2)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2
  JULIA_MAX_NUM_PRECOMPILE_FILES = 9223372036854775807
  JULIA_PKG_SERVER = 

Starting installation at 2020-10-25T19:17:32.681
  Resolving package versions...
  Installed MayOptimize ─ v0.2.0
Updating `~/.julia/environments/v1.5/Project.toml`
  [049513e6] + MayOptimize v0.2.0
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [049513e6] + MayOptimize v0.2.0
Starting tests at 2020-10-25T19:17:34.287
    Testing MayOptimize
Status `/tmp/jl_tJ0kmX/Project.toml`
  [6e4b80f9] BenchmarkTools v0.5.0
  [049513e6] MayOptimize v0.2.0
  [37e2e46d] LinearAlgebra
  [8dfed614] Test
Status `/tmp/jl_tJ0kmX/Manifest.toml`
  [6e4b80f9] BenchmarkTools v0.5.0
  [682c06a0] JSON v0.21.1
  [049513e6] MayOptimize v0.2.0
  [69de0a69] Parsers v1.0.11
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [de0858da] Printf
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Macros        |   62     62

Tests for T=Float32 and 10000 elements ("Basic" is Julia own implementation):
 - Time for `sum(Basic,x)` -------->   11.049 μs (0 allocations: 0 bytes)
 - Time for `sum(Debug,x)` -------->   10.769 μs (0 allocations: 0 bytes)
 - Time for `sum(InBounds,x)` ----->   10.859 μs (0 allocations: 0 bytes)
 - Time for `sum(Vectorize,x)` ---->   10.760 μs (0 allocations: 0 bytes)

 - Time for `dot(Basic,x,y)` -------->   872.034 ns (0 allocations: 0 bytes)
 - Time for `dot(Debug,x,y)` -------->   10.739 μs (0 allocations: 0 bytes)
 - Time for `dot(InBounds,x,y)` ----->   11.070 μs (0 allocations: 0 bytes)
 - Time for `dot(Vectorize,x,y)` ---->   17.909 μs (0 allocations: 0 bytes)

Tests for T=Float64 and 10000 elements ("Basic" is Julia own implementation):
 - Time for `sum(Basic,x)` -------->   11.080 μs (0 allocations: 0 bytes)
 - Time for `sum(Debug,x)` -------->   10.780 μs (0 allocations: 0 bytes)
 - Time for `sum(InBounds,x)` ----->   10.859 μs (0 allocations: 0 bytes)
 - Time for `sum(Vectorize,x)` ---->   10.779 μs (0 allocations: 0 bytes)

 - Time for `dot(Basic,x,y)` -------->   1.858 μs (0 allocations: 0 bytes)
 - Time for `dot(Debug,x,y)` -------->   10.749 μs (0 allocations: 0 bytes)
 - Time for `dot(InBounds,x,y)` ----->   12.400 μs (0 allocations: 0 bytes)
 - Time for `dot(Vectorize,x,y)` ---->   17.740 μs (0 allocations: 0 bytes)
    Testing MayOptimize tests passed 
Finished at 2020-10-25T19:19:26.534
