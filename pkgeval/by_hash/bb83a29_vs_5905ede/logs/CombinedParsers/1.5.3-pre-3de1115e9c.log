Current time is 2020-10-25T20:59:34.601
Julia Version 1.5.3-pre.13
Commit 3de1115e9c (2020-10-23 21:58 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: AMD EPYC 7502 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, znver2)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2
  JULIA_MAX_NUM_PRECOMPILE_FILES = 9223372036854775807
  JULIA_PKG_SERVER = 

Starting installation at 2020-10-25T20:59:37.631
  Resolving package versions...
  Installed XML2_jll ───────────────────── v2.9.10+3
  Installed Zlib_jll ───────────────────── v1.2.11+18
  Installed CodecZlib ──────────────────── v0.7.0
  Installed WeakRefStrings ─────────────── v0.6.2
  Installed RecipesBase ────────────────── v1.1.0
  Installed Tries ──────────────────────── v0.1.4
  Installed Requires ───────────────────── v1.1.0
  Installed CombinedParsers ────────────── v0.1.4
  Installed Compat ─────────────────────── v3.22.0
  Installed Mocking ────────────────────── v0.7.1
  Installed OpenSpecFun_jll ────────────── v0.5.3+4
  Installed Polynomials ────────────────── v1.1.10
  Installed JLLWrappers ────────────────── v1.1.3
  Installed Intervals ──────────────────── v1.5.0
  Installed CompilerSupportLibraries_jll ─ v0.3.4+0
  Installed Nullables ──────────────────── v1.0.0
  Installed ExprTools ──────────────────── v0.1.3
  Installed OrderedCollections ─────────── v1.3.1
  Installed TextParse ──────────────────── v1.0.1
  Installed DoubleFloats ───────────────── v1.1.13
  Installed SpecialFunctions ───────────── v0.10.3
  Installed Quadmath ───────────────────── v0.5.4
  Installed TranscodingStreams ─────────── v0.9.5
  Installed AbstractTrees ──────────────── v0.3.3
  Installed AutoHashEquals ─────────────── v0.2.0
  Installed InternedStrings ────────────── v0.7.0
  Installed Libiconv_jll ───────────────── v1.16.0+7
  Installed EzXML ──────────────────────── v1.1.0
  Installed DataStructures ─────────────── v0.18.8
  Installed GenericSchur ───────────────── v0.4.0
  Installed TimeZones ──────────────────── v1.4.0
  Installed GenericSVD ─────────────────── v0.3.0
  Installed DataAPI ────────────────────── v1.3.0
  Installed Artifacts ──────────────────── v1.3.0
  Installed OffsetArrays ───────────────── v1.3.1
Updating `~/.julia/environments/v1.5/Project.toml`
  [5ae71ed2] + CombinedParsers v0.1.4
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [1520ce14] + AbstractTrees v0.3.3
  [56f22d72] + Artifacts v1.3.0
  [15f4f7f2] + AutoHashEquals v0.2.0
  [944b1d66] + CodecZlib v0.7.0
  [5ae71ed2] + CombinedParsers v0.1.4
  [34da2185] + Compat v3.22.0
  [e66e0078] + CompilerSupportLibraries_jll v0.3.4+0
  [9a962f9c] + DataAPI v1.3.0
  [864edb3b] + DataStructures v0.18.8
  [497a8b3b] + DoubleFloats v1.1.13
  [e2ba6199] + ExprTools v0.1.3
  [8f5d6c58] + EzXML v1.1.0
  [01680d73] + GenericSVD v0.3.0
  [c145ed77] + GenericSchur v0.4.0
  [7d512f48] + InternedStrings v0.7.0
  [d8418881] + Intervals v1.5.0
  [692b3bcd] + JLLWrappers v1.1.3
  [94ce4f54] + Libiconv_jll v1.16.0+7
  [78c3b35d] + Mocking v0.7.1
  [4d1e1d77] + Nullables v1.0.0
  [6fe1bfb0] + OffsetArrays v1.3.1
  [efe28fd5] + OpenSpecFun_jll v0.5.3+4
  [bac558e1] + OrderedCollections v1.3.1
  [f27b6e38] + Polynomials v1.1.10
  [be4d8f0f] + Quadmath v0.5.4
  [3cdcf5f2] + RecipesBase v1.1.0
  [ae029012] + Requires v1.1.0
  [276daf66] + SpecialFunctions v0.10.3
  [e0df1984] + TextParse v1.0.1
  [f269a46b] + TimeZones v1.4.0
  [3bb67fe8] + TranscodingStreams v0.9.5
  [666c268a] + Tries v0.1.4
  [ea10d353] + WeakRefStrings v0.6.2
  [02c8fc9c] + XML2_jll v2.9.10+3
  [83775a58] + Zlib_jll v1.2.11+18
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
   Building TimeZones → `~/.julia/packages/TimeZones/tx0tt/deps/build.log`
Starting tests at 2020-10-25T20:59:59.366
    Testing CombinedParsers
Status `/tmp/jl_3nzU4W/Project.toml`
  [1520ce14] AbstractTrees v0.3.3
  [15f4f7f2] AutoHashEquals v0.2.0
  [5ae71ed2] CombinedParsers v0.1.4
  [7d512f48] InternedStrings v0.7.0
  [4d1e1d77] Nullables v1.0.0
  [e0df1984] TextParse v1.0.1
  [666c268a] Tries v0.1.4
  [8dfed614] Test
Status `/tmp/jl_3nzU4W/Manifest.toml`
  [1520ce14] AbstractTrees v0.3.3
  [56f22d72] Artifacts v1.3.0
  [15f4f7f2] AutoHashEquals v0.2.0
  [944b1d66] CodecZlib v0.7.0
  [5ae71ed2] CombinedParsers v0.1.4
  [34da2185] Compat v3.22.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.4+0
  [9a962f9c] DataAPI v1.3.0
  [864edb3b] DataStructures v0.18.8
  [497a8b3b] DoubleFloats v1.1.13
  [e2ba6199] ExprTools v0.1.3
  [8f5d6c58] EzXML v1.1.0
  [01680d73] GenericSVD v0.3.0
  [c145ed77] GenericSchur v0.4.0
  [7d512f48] InternedStrings v0.7.0
  [d8418881] Intervals v1.5.0
  [692b3bcd] JLLWrappers v1.1.3
  [94ce4f54] Libiconv_jll v1.16.0+7
  [78c3b35d] Mocking v0.7.1
  [4d1e1d77] Nullables v1.0.0
  [6fe1bfb0] OffsetArrays v1.3.1
  [efe28fd5] OpenSpecFun_jll v0.5.3+4
  [bac558e1] OrderedCollections v1.3.1
  [f27b6e38] Polynomials v1.1.10
  [be4d8f0f] Quadmath v0.5.4
  [3cdcf5f2] RecipesBase v1.1.0
  [ae029012] Requires v1.1.0
  [276daf66] SpecialFunctions v0.10.3
  [e0df1984] TextParse v1.0.1
  [f269a46b] TimeZones v1.4.0
  [3bb67fe8] TranscodingStreams v0.9.5
  [666c268a] Tries v0.1.4
  [ea10d353] WeakRefStrings v0.6.2
  [02c8fc9c] XML2_jll v2.9.10+3
  [83775a58] Zlib_jll v1.2.11+18
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
   match left@1-2: abab
                   ^
   match left@1-3: abab
                   ^^
┌ Info: testing r"((((a)(b))))(c)" on "abc"
│   pc_m = ParseMatch("abc", 1="ab", 2="ab", 3="ab", 4="a", 5="b", 6="c")
└   pcre_m = RegexMatch("abc", 1="ab", 2="ab", 3="ab", 4="a", 5="b", 6="c")
┌ Info: testing r"(a)|(d)" on "a"
│   pc_m = ParseMatch("a", 1="a", 2=nothing)
└   pcre_m = RegexMatch("a", 1="a", 2=nothing)
┌ Info: testing r"(a)|(d)" on "d"
│   pc_m = ParseMatch("d", 1=nothing, 2="d")
└   pcre_m = RegexMatch("d", 1=nothing, 2="d")
┌ Info: testing r"(1a(2b?)*)*0" on "1a1a21a2b22b0"
│   pc_m = ParseMatch("1a1a21a2b22b0", 1="1a2b22b", 2="2b")
└   pcre_m = RegexMatch("1a1a21a2b22b0", 1="1a2b22b", 2="2b")
┌ Info: testing r"(1a(2b?)*)*0" on "1a1a21a2b22b0"
│   pc_m = ParseMatch("1a1a21a2b22b0", 1="1a2b22b", 2="2b")
└   pcre_m = RegexMatch("1a1a21a2b22b0", 1="1a2b22b", 2="2b")
┌ Info: testing r"(ab)*c" on "ababc"
│   pc_m = ParseMatch("ababc", 1="ab")
└   pcre_m = RegexMatch("ababc", 1="ab")
┌ Info: testing r"^(ab)*c$" on "ababc"
│   pc_m = ParseMatch("ababc", 1="ab")
└   pcre_m = RegexMatch("ababc", 1="ab")
┌ Info: testing r"(?<ab>foo)(?P=ab)" on "foofoo"
│   pc_m = ParseMatch("foofoo", ab="foo")
└   pcre_m = RegexMatch("foofoo", ab="foo")
┌ Info: testing r"(?<ab>foo|bar)(?1)" on "foobar"
│   pc_m = ParseMatch("foobar", ab="foo")
└   pcre_m = RegexMatch("foobar", ab="foo")
┌ Info: testing r"(ab)(?<ab>foo)\g-1" on "abfoofoo"
│   pc_m = ParseMatch("abfoofoo", 1="ab", ab="foo")
└   pcre_m = RegexMatch("abfoofoo", 1="ab", ab="foo")
┌ Info: testing r"(a|b\1)+" on "aaa"
│   pc_m = ParseMatch("aaa", 1="a")
└   pcre_m = RegexMatch("aaa", 1="a")
┌ Info: testing r"(a|b\1)+" on "aba"
│   pc_m = ParseMatch("aba", 1="ba")
└   pcre_m = RegexMatch("aba", 1="ba")
┌ Info: testing r"(a|b\1)+" on "ababbaa"
│   pc_m = ParseMatch("ababbaa", 1="a")
└   pcre_m = RegexMatch("ababbaa", 1="a")
┌ Info: testing r"(ab)(?<ab>foo)\g-1\g-2" on "abfoofooab"
│   pc_m = ParseMatch("abfoofooab", 1="ab", ab="foo")
└   pcre_m = RegexMatch("abfoofooab", 1="ab", ab="foo")
┌ Info: testing r"(se|respo)nse and ((?1)nse)" on "sense and response"
│   pc_m = ParseMatch("sense and response", 1="se", 2="response")
└   pcre_m = RegexMatch("sense and response", 1="se", 2="response")
┌ Info: testing r"\Q \Ea" on " a"
│   pc_m = ParseMatch(" a")
└   pcre_m = RegexMatch(" a")
┌ Info: testing r"a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz" on "abcxyzpqrrrabbxyyyypqAzz"
│   pc_m = ParseMatch("abcxyzpqrrrabbxyyyypqAzz")
└   pcre_m = RegexMatch("abcxyzpqrrrabbxyyyypqAzz")
┌ Info: testing r"\\"" on "\""
│   pc_m = ParseMatch("\\\"")
└   pcre_m = RegexMatch("\\\"")
┌ Info: testing r""" on """
│   pc_m = ParseMatch("\"")
└   pcre_m = RegexMatch("\"")
┌ Info: testing r"ab*(?<=ab)c" on "abc"
│   pc_m = ParseMatch("abc")
└   pcre_m = RegexMatch("abc")
┌ Info: testing r"(ab|a|b)+c" on "abbabc"
│   pc_m = ParseMatch("abbabc", 1="ab")
└   pcre_m = RegexMatch("abbabc", 1="ab")
┌ Info: testing r"^ (?:(?<A>A)|(?'B'B)(?<A>A)) (?('A')x) (?(<B>)y)$" on 1, "Ax"
│   expectations = (0 => "Ax", 1 => "A")
│   pc_match = ParseMatch("Ax", A="A", B=nothing, A=nothing)
└   re_match = nothing
┌ Info: testing r"^ (?:(?<A>A)|(?'B'B)(?<A>A)) (?('A')x) (?(<B>)y)$" on 2, "BAxy"
│   expectations = (0 => "BAxy", 1 => "<unset>", 2 => "B", 3 => "A")
│   pc_match = ParseMatch("BAxy", A=nothing, B="B", A="A")
└   re_match = nothing
┌ Info: testing r"(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)\12\123" on 1, "abcdefghijk
│ S"
│   expectations = (0 => "abcdefghijk\nS", 1 => "a", 2 => "b", 3 => "c", 4 => "d", 5 => "e", 6 => "f", 7 => "g", 8 => "h", 9 => "i", 10 => "j", 11 => "k")
│   pc_match = ParseMatch("abcdefghijk\nS", 1="a", 2="b", 3="c", 4="d", 5="e", 6="f", 7="g", 8="h", 9="i", 10="j", 11="k")
└   re_match = RegexMatch("abcdefghijk\nS", 1="a", 2="b", 3="c", 4="d", 5="e", 6="f", 7="g", 8="h", 9="i", 10="j", 11="k")
┌ Info: testing r"^$" on 1, ""
│   expectations = (0 => "",)
│   pc_match = ParseMatch("")
└   re_match = RegexMatch("")
[ Info: testing nomatch r"^$" on 1, "A non-empty line"
┌ Info: testing r"^[\w][\W][\s][\S][\d][\D][\b][\n][\c]][\022]" on 1, "a+ Z0+
│ "
│   expectations = (0 => "a+ Z0+\b\n\x1d\x12",)
│   pc_match = ParseMatch("a+ Z0+\b\n\x1d\x12")
└   re_match = RegexMatch("a+ Z0+\b\n\x1d\x12")
┌ Info: testing r"abc\0def\00pqr\000xyz\0000AB" on 1, "abc def pqr xyz 0AB"
│   expectations = (0 => "abc\0def\0pqr\0xyz\x000AB",)
│   pc_match = ParseMatch("abc\0def\0pqr\0xyz\x000AB")
└   re_match = RegexMatch("abc\0def\0pqr\0xyz\x000AB")
┌ Info: testing r"abc\0def\00pqr\000xyz\0000AB" on 2, "abc456 abc def pqr xyz 0ABCDE"
│   expectations = (0 => "abc\0def\0pqr\0xyz\x000AB",)
│   pc_match = ParseMatch("abc\0def\0pqr\0xyz\x000AB")
└   re_match = RegexMatch("abc\0def\0pqr\0xyz\x000AB")
┌ Info: testing r"abc[\1]de" on 1, "abcde"
│   expectations = (0 => "abc\x01de",)
│   pc_match = ParseMatch("abc\x01de")
└   re_match = RegexMatch("abc\x01de")
┌ Info: testing r"abc[\10]de" on 1, "abcde"
│   expectations = (0 => "abc\bde",)
│   pc_match = ParseMatch("abc\bde")
└   re_match = RegexMatch("abc\bde")
┌ Info: testing r"abcd\t\n\r\f\a\e\071\x3b\$\\\?caxyz" on 1, "abcd	
│ 9;$\?caxyz"
│   expectations = (0 => "abcd\t\n\r\f\a\e9;\$\\?caxyz",)
│   pc_match = ParseMatch("abcd\t\n\r\f\a\e9;$\\?caxyz")
└   re_match = RegexMatch("abcd\t\n\r\f\a\e9;\$\\?caxyz")
┌ Info: testing r"(abc)\1000" on 1, "abc@0"
│   expectations = (0 => "abc@0", 1 => "abc")
│   pc_match = ParseMatch("abc@0", 1="abc")
└   re_match = RegexMatch("abc@0", 1="abc")
┌ Info: testing r"(abc)\1000" on 2, "abc@0"
│   expectations = (0 => "abc@0", 1 => "abc")
│   pc_match = ParseMatch("abc@0", 1="abc")
└   re_match = RegexMatch("abc@0", 1="abc")
┌ Info: testing r"(abc)\1000" on 3, "abc@0"
│   expectations = (0 => "abc@0", 1 => "abc")
│   pc_match = ParseMatch("abc@0", 1="abc")
└   re_match = RegexMatch("abc@0", 1="abc")
┌ Info: testing r"(abc)\1000" on 4, "abc@0"
│   expectations = (0 => "abc@0", 1 => "abc")
│   pc_match = ParseMatch("abc@0", 1="abc")
└   re_match = RegexMatch("abc@0", 1="abc")
┌ Info: testing r"(abc)\1000" on 5, "abc@0"
│   expectations = (0 => "abc@0", 1 => "abc")
│   pc_match = ParseMatch("abc@0", 1="abc")
└   re_match = RegexMatch("abc@0", 1="abc")
┌ Info: testing r"(abc)\1000" on 6, "abc@0"
│   expectations = (0 => "abc@0", 1 => "abc")
│   pc_match = ParseMatch("abc@0", 1="abc")
└   re_match = RegexMatch("abc@0", 1="abc")
┌ Info: testing r"\Aabc\z" on 1, "abc"
│   expectations = (0 => "abc",)
│   pc_match = ParseMatch("abc")
└   re_match = RegexMatch("abc")
┌ Info: testing nomatch r"\Aabc\z" on 1, "abc
└ "
┌ Info: testing nomatch r"\Aabc\z" on 2, "qqq
└ abc"
┌ Info: testing nomatch r"\Aabc\z" on 3, "abc
└ zzz"
┌ Info: testing nomatch r"\Aabc\z" on 4, "qqq
│ abc
└ zzz"
┌ Info: testing r"(?|(abc)|(xyz))" on 1, ">abc<"
│   expectations = ()
│   pc_match = ParseMatch("abc", 1="abc")
└   re_match = RegexMatch("abc", 1="abc")
┌ Info: testing r"(?|(abc)|(xyz))" on 2, ">xyz<"
│   expectations = ()
│   pc_match = ParseMatch("xyz", 1="xyz")
└   re_match = RegexMatch("xyz", 1="xyz")
┌ Info: testing r"<tr([\w\W\s\d][^<>]{0,})><TD([\w\W\s\d][^<>]{0,})>([\d]{0,}\.)(.*)((<BR>([\w\W\s\d][^<>]{0,})|[\s]{0,}))<\/a><\/TD><TD([\w\W\s\d][^<>]{0,})>([\w\W\s\d][^<>]{0,})<\/TD><TD([\w\W\s\d][^<>]{0,})>([\w\W\s\d][^<>]{0,})<\/TD><\/TR>" on 1, "<TR BGCOLOR='#DBE9E9'><TD align=left valign=top>43.<a href='joblist.cfm?JobID=94 6735&Keyword='>Word Processor<BR>(N-1286)</a></TD><TD align=left valign=top>Lega lstaff.com</TD><TD align=left valign=top>CA - Statewide</TD></TR>"
│   expectations = (0 => "<TR BGCOLOR='#DBE9E9'><TD align=left valign=top>43.<a href='joblist.cfm?JobID=94 6735&Keyword='>Word Processor<BR>(N-1286)</a></TD><TD align=left valign=top>Lega lstaff.com</TD><TD align=left valign=top>CA - Statewide</TD></TR>", 1 => "BGCOLOR='#DBE9E9'", 2 => "align=left valign=top", 3 => "43.", 4 => "<a href='joblist.cfm?JobID=94 6735&Keyword='>Word Processor<BR>(N-1286)", 5 => "", 6 => "", 7 => "<unset>", 8 => "align=left valign=top", 9 => "Lega lstaff.com", 10 => "align=left valign=top", 11 => "CA - Statewide")
│   pc_match = ParseMatch("<TR BGCOLOR='#DBE9E9'><TD align=left valign=top>43.<a href='joblist.cfm?JobID=94 6735&Keyword='>Word Processor<BR>(N-1286)</a></TD><TD align=left valign=top>Lega lstaff.com</TD><TD align=left valign=top>CA - Statewide</TD></TR>", 1=" BGCOLOR='#DBE9E9'", 2=" align=left valign=top", 3="43.", 4="<a href='joblist.cfm?JobID=94 6735&Keyword='>Word Processor<BR>(N-1286)", 5="", 6="", 7=nothing, 8=" align=left valign=top", 9="Lega lstaff.com", 10=" align=left valign=top", 11="CA - Statewide")
└   re_match = RegexMatch("<TR BGCOLOR='#DBE9E9'><TD align=left valign=top>43.<a href='joblist.cfm?JobID=94 6735&Keyword='>Word Processor<BR>(N-1286)</a></TD><TD align=left valign=top>Lega lstaff.com</TD><TD align=left valign=top>CA - Statewide</TD></TR>", 1=" BGCOLOR='#DBE9E9'", 2=" align=left valign=top", 3="43.", 4="<a href='joblist.cfm?JobID=94 6735&Keyword='>Word Processor<BR>(N-1286)", 5="", 6="", 7=nothing, 8=" align=left valign=top", 9="Lega lstaff.com", 10=" align=left valign=top", 11="CA - Statewide")
Test Summary:      | Pass  Total
CombinedParsers.jl |  164    164
    Testing CombinedParsers tests passed 
Finished at 2020-10-25T21:06:39.812
