Julia Version 1.6.0-DEV.854
Commit 3d1de029bc (2020-09-07 11:48 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed FastGaussQuadrature ────────── v0.4.2
  Installed FunctionIntegrator ─────────── v0.5.1
  Installed SpecialFunctions ───────────── v0.10.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [7685536e] + FunctionIntegrator v0.5.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [442a2c76] + FastGaussQuadrature v0.4.2
  [7685536e] + FunctionIntegrator v0.5.1
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [276daf66] + SpecialFunctions v0.10.3
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing FunctionIntegrator
Status `/tmp/jl_siOgUT/Project.toml`
  [442a2c76] FastGaussQuadrature v0.4.2
  [7685536e] FunctionIntegrator v0.5.1
  [276daf66] SpecialFunctions v0.10.3
  [8dfed614] Test
Status `/tmp/jl_siOgUT/Manifest.toml`
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [442a2c76] FastGaussQuadrature v0.4.2
  [7685536e] FunctionIntegrator v0.5.1
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [276daf66] SpecialFunctions v0.10.3
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Performing the Airy Ai(x) test, where Ai(x) is integrated on the semi-infinite domain, or an approximation of it, namely [0,100] and the result is compared to the analytical result 1/3.
Running: adaptive_simpsons_rule
  0.961642 seconds (1.47 M allocations: 78.502 MiB, 4.97% gc time)
Running: chebyshev_quadrature with k=1
  1.624574 seconds (2.22 M allocations: 126.780 MiB, 2.74% gc time)
Running: chebyshev_quadrature with k=2
  0.280912 seconds (417.70 k allocations: 23.883 MiB)
Running: chebyshev_quadrature with k=3
  0.380416 seconds (533.37 k allocations: 29.153 MiB, 5.80% gc time)
Running: chebyshev_quadrature with k=4
  0.305408 seconds (476.88 k allocations: 25.771 MiB)
Running: jacobi_quadrature with α=β=1
 39.922519 seconds (38.20 M allocations: 3.087 GiB, 8.82% gc time)
Running: laguerre_quadrature with k=1
  3.058462 seconds (3.27 M allocations: 180.955 MiB, 5.84% gc time)
Running: legendre_quadrature
  0.224294 seconds (211.96 k allocations: 12.088 MiB, 12.98% gc time)
Running: lobatto_quadrature
  0.321355 seconds (343.37 k allocations: 20.586 MiB)
Running: radau_quadrature
  0.293506 seconds (325.91 k allocations: 19.624 MiB, 8.19% gc time)
Running: rectangle_rule_left. Only a rough approximation can be practically achieved using this function.
 79.469999 seconds (100.02 M allocations: 1.491 GiB, 0.31% gc time)
Running: rectangle_rule_midpoint.
  0.181831 seconds (173.49 k allocations: 3.863 MiB, 17.21% gc time)
Running: rectangle_rule_right. Only a rough approximation can be practically achieved using this function.
 78.134743 seconds (100.02 M allocations: 1.491 GiB, 0.31% gc time)
Running: rombergs_method
  0.566522 seconds (743.15 k allocations: 42.524 MiB, 6.39% gc time)
Running: simpsons_rule
  0.033448 seconds (46.90 k allocations: 2.084 MiB)
Running: simpsons38_rule
  0.116033 seconds (112.73 k allocations: 5.930 MiB, 35.29% gc time)
Running: trapezoidal_rule
  0.259446 seconds (1.52 M allocations: 25.802 MiB)
Test Summary: | Pass  Total
Airy Ai(x)    |   17     17
Performing the besselj test, where BesselJ_1(2) is approximated and the result is compared to the value obtained from SpecialFunctions' besselj function.
Running: adaptive_simpsons_rule with ε=1e-7
  0.081168 seconds (32.24 k allocations: 1.908 MiB)
Running: chebyshev_quadrature with k=1
  0.472464 seconds (281.94 k allocations: 14.663 MiB, 5.82% gc time)
Running: chebyshev_quadrature with k=2
  0.152016 seconds (94.48 k allocations: 2.698 MiB)
Running: chebyshev_quadrature with k=3
  0.157979 seconds (82.75 k allocations: 2.500 MiB)
Running: chebyshev_quadrature with k=4
  0.155471 seconds (65.36 k allocations: 2.146 MiB)
Running: jacobi_quadrature with α=β=1
  2.317120 seconds (514.03 k allocations: 162.279 MiB, 10.93% gc time)
Running: legendre_quadrature
  0.166842 seconds (43.45 k allocations: 2.492 MiB)
Running: lobatto_quadrature
  0.021120 seconds (17.25 k allocations: 1.066 MiB)
Running: radau_quadrature
  0.023143 seconds (17.23 k allocations: 1.066 MiB)
Running: rectangle_rule_left
 28.119044 seconds (471.41 M allocations: 7.025 GiB, 2.93% gc time)
Running: rectangle_rule_midpoint
  0.000017 seconds (45 allocations: 1.047 KiB)
Running: rectangle_rule_right
 27.251221 seconds (476.96 M allocations: 7.107 GiB, 2.16% gc time)
Running: rombergs_method
  0.403772 seconds (336.55 k allocations: 18.958 MiB, 1.07% gc time)
Running: simpsons_rule
  0.000073 seconds (85 allocations: 1.672 KiB)
Running: simpsons38_rule
  0.070986 seconds (19.65 k allocations: 1.173 MiB)
Running: trapezoidal_rule
  0.057632 seconds (18.10 k allocations: 1.079 MiB)
Test Summary: | Pass  Total
besselj       |   16     16
Integrating cos^2(x)/(1+cot(x)) from 0 to pi/2 and comparing the results to the analytical result 0.25.
Running: adaptive_simpsons_rule with ε=1e-7
  0.034854 seconds (1.99 k allocations: 53.594 KiB)
Running: chebyshev_quadrature with k=1
  0.110758 seconds (2.40 k allocations: 113.328 KiB)
Running: chebyshev_quadrature with k=2
  0.113209 seconds (2.65 k allocations: 121.344 KiB)
Running: chebyshev_quadrature with k=3
  0.145875 seconds (3.08 k allocations: 133.547 KiB)
Running: chebyshev_quadrature with k=4
  0.119441 seconds (3.08 k allocations: 133.609 KiB)
Running: jacobi_quadrature with α=β=1
  0.381154 seconds (370.51 k allocations: 19.303 MiB, 7.17% gc time)
Running: legendre_quadrature
  0.073087 seconds (1.24 k allocations: 63.531 KiB)
Running: lobatto_quadrature
  0.000109 seconds (67 allocations: 2.844 KiB)
Running: radau_quadrature
  0.000053 seconds (71 allocations: 3.078 KiB)
Running: rectangle_rule_left
  0.000502 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_midpoint
  0.000349 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right
  0.000493 seconds (9 allocations: 496 bytes)
Running: rombergs_method
  0.079443 seconds (1.01 k allocations: 54.094 KiB)
Running: simpsons_rule
  0.000041 seconds (323 allocations: 5.391 KiB)
Running: simpsons38_rule
  0.023794 seconds (923 allocations: 39.281 KiB)
Running: trapezoidal_rule
  0.027379 seconds (44.33 k allocations: 704.859 KiB)
Test Summary: | Pass  Total
coscotint     |   16     16
Integrating cosine from 0 to pi/2 and comparing the result to the analytical result of 1.
Running: adaptive_simpsons_rule
  0.060915 seconds (75.05 k allocations: 4.318 MiB)
Running: chebyshev_quadrature with k=1
  0.193175 seconds (235.53 k allocations: 13.184 MiB)
Running: chebyshev_quadrature with k=2
  0.256510 seconds (289.34 k allocations: 16.150 MiB, 9.28% gc time)
Running: chebyshev_quadrature with k=3
  0.209132 seconds (268.23 k allocations: 14.562 MiB)
Running: chebyshev_quadrature with k=4
  0.211034 seconds (268.25 k allocations: 14.457 MiB)
Running: jacobi_quadrature with α=β=1
  2.680884 seconds (456.07 k allocations: 163.570 MiB, 5.92% gc time)
Running: legendre_quadrature
  0.170554 seconds (189.81 k allocations: 10.868 MiB)
Running: lobatto_quadrature
  0.208046 seconds (201.34 k allocations: 11.586 MiB)
Running: radau_quadrature
  0.190156 seconds (201.33 k allocations: 11.585 MiB, 8.23% gc time)
Running: rectangle_rule_left
  1.087942 seconds (19.56 k allocations: 1.174 MiB)
Running: rectangle_rule_midpoint
  0.026822 seconds (25.69 k allocations: 1.591 MiB)
Running: rectangle_rule_right
  1.104488 seconds (18.10 k allocations: 1.088 MiB)
Running: rombergs_method
  0.118877 seconds (137.25 k allocations: 7.871 MiB)
Running: simpsons_rule
  0.031016 seconds (28.64 k allocations: 1.768 MiB)
Running: simpsons38_rule
  0.036568 seconds (44.12 k allocations: 2.739 MiB)
Running: trapezoidal_rule
  0.027600 seconds (45.00 k allocations: 1.804 MiB)
Test Summary: | Pass  Total
Cosine        |   16     16
Integrating e^(-x^2)/(1+x^2) on the infinite domain [-inf, inf], or failing that on [-100,100], and comparing it to the analytical result exp(1)*pi*erfc(1)
Running: adaptive_simpsons_rule with ε=1e-7
  0.040300 seconds (100.84 k allocations: 3.028 MiB)
Running: chebyshev_quadrature with k=1
  0.267411 seconds (242.27 k allocations: 13.240 MiB)
Running: chebyshev_quadrature with k=2
  0.233609 seconds (296.51 k allocations: 16.136 MiB, 7.04% gc time)
Running: chebyshev_quadrature with k=3
  0.203821 seconds (275.10 k allocations: 14.551 MiB)
Running: chebyshev_quadrature with k=4
  0.250531 seconds (275.12 k allocations: 14.560 MiB, 7.94% gc time)
Running: hermite_quadrature with k=2
 16.025106 seconds (21.34 M allocations: 1.106 GiB, 9.63% gc time)
Running: jacobi_quadrature with α=β=1
  0.476648 seconds (465.44 k allocations: 49.814 MiB, 8.77% gc time)
Running: laguerre_quadrature with k=1 and multiplying the result by 2 (as Laguerre is only on the semi-infinite domain)
  0.265318 seconds (282.57 k allocations: 15.496 MiB, 13.25% gc time)
Running: legendre_quadrature
  0.153713 seconds (196.53 k allocations: 11.206 MiB)
Running: lobatto_quadrature
  0.246627 seconds (222.17 k allocations: 37.360 MiB, 9.81% gc time)
Running: radau_quadrature
  0.209142 seconds (218.75 k allocations: 30.025 MiB)
Running: rectangle_rule_left
  0.029033 seconds (22.62 k allocations: 1.326 MiB)
Running: rectangle_rule_midpoint
  0.030645 seconds (27.58 k allocations: 1.683 MiB)
Running: rectangle_rule_right
  0.024956 seconds (19.27 k allocations: 1.145 MiB)
Running: rombergs_method
  0.117987 seconds (139.80 k allocations: 7.914 MiB)
Running: simpsons_rule
  0.062472 seconds (40.68 k allocations: 2.109 MiB, 37.53% gc time)
Running: simpsons38_rule
  0.044120 seconds (59.30 k allocations: 3.134 MiB)
Running: trapezoidal_rule
  0.035756 seconds (31.23 k allocations: 1.737 MiB)
Test Summary: | Pass  Total
expnx2datan   |   18     18
Integrate exp(-x^2) from minus infinity to positive infinity and comparing the result to the analytical solution, sqrt(pi)
Running: adaptive_simpsons_rule with ε=1e-7
  0.037625 seconds (61.10 k allocations: 2.323 MiB)
Running: chebyshev_quadrature with k=1
  0.190680 seconds (237.69 k allocations: 13.020 MiB)
Running: chebyshev_quadrature with k=2
  0.232003 seconds (291.62 k allocations: 15.890 MiB)
Running: chebyshev_quadrature with k=3
  0.305462 seconds (270.42 k allocations: 14.341 MiB, 15.59% gc time)
Running: chebyshev_quadrature with k=4
  0.227423 seconds (270.44 k allocations: 14.342 MiB)
Running: hermite_quadrature with k=2
  0.143044 seconds (174.65 k allocations: 9.932 MiB)
Running: jacobi_quadrature with α=β=1
  9.937938 seconds (458.59 k allocations: 1.175 GiB, 10.54% gc time)
Running: laguerre_quadrature (results multiplied by 2, as laguerre only integrates over the semi-infinite domain)
  0.212200 seconds (277.75 k allocations: 15.327 MiB)
Running: legendre_quadrature
  0.153868 seconds (191.99 k allocations: 10.979 MiB)
Running: lobatto_quadrature
  0.270650 seconds (212.82 k allocations: 23.090 MiB, 5.48% gc time)
Running: radau_quadrature
  0.201643 seconds (211.97 k allocations: 21.021 MiB)
Running: rectangle_rule_left
  0.028906 seconds (20.30 k allocations: 1.217 MiB)
Running: rectangle_rule_midpoint
  0.027531 seconds (26.42 k allocations: 1.628 MiB)
Running: rectangle_rule_right
  0.025771 seconds (18.08 k allocations: 1.088 MiB)
Running: rombergs_method
  0.135460 seconds (135.50 k allocations: 7.729 MiB)
Running: simpsons_rule
  0.030380 seconds (33.09 k allocations: 1.894 MiB)
Running: simpsons38_rule
  0.090229 seconds (49.99 k allocations: 2.888 MiB, 24.45% gc time)
Running: trapezoidal_rule
  0.101136 seconds (26.02 k allocations: 1.569 MiB)
Test Summary: | Pass  Total
Gaussian      |   18     18
Integrating 1/x from 1 to e and comparing the result to the analytical solution, 1.
Running: adaptive_simpsons_rule with ε=1e-7
  0.054226 seconds (32.05 k allocations: 1.916 MiB)
Running: chebyshev_quadrature with k=1
  0.235259 seconds (236.03 k allocations: 13.302 MiB)
Running: chebyshev_quadrature with k=2
  0.267794 seconds (289.85 k allocations: 16.230 MiB)
Running: chebyshev_quadrature with k=3
  0.245476 seconds (268.75 k allocations: 14.554 MiB, 8.27% gc time)
Running: chebyshev_quadrature with k=4
  0.226461 seconds (268.77 k allocations: 14.391 MiB)
Running: jacobi_quadrature with α=β=1
  1.649710 seconds (456.63 k allocations: 194.626 MiB, 7.81% gc time)
Running: legendre_quadrature
  0.192100 seconds (190.33 k allocations: 10.901 MiB, 8.02% gc time)
Running: lobatto_quadrature
  0.235472 seconds (201.85 k allocations: 11.676 MiB)
Running: radau_quadrature
  0.187074 seconds (201.85 k allocations: 11.612 MiB)
Running: rectangle_rule_left
  0.320918 seconds (20.11 k allocations: 1.201 MiB)
Running: rectangle_rule_midpoint
  0.026391 seconds (26.05 k allocations: 1.610 MiB)
Running: rectangle_rule_right
  0.109266 seconds (18.46 k allocations: 1.108 MiB)
Running: rombergs_method
  0.137448 seconds (148.44 k allocations: 8.607 MiB)
Running: simpsons_rule
  0.047386 seconds (29.36 k allocations: 1.799 MiB, 34.53% gc time)
Running: simpsons38_rule
  0.037508 seconds (44.87 k allocations: 2.770 MiB)
Running: trapezoidal_rule
  0.027787 seconds (45.97 k allocations: 1.838 MiB)
Test Summary: | Pass  Total
1/x           |   16     16
Integrating log(x)/x from 1 to e and comparing the result to the analytical solution of 0.5.
Running: adaptive_simpsons_rule with ε=1e-7
  0.032709 seconds (32.78 k allocations: 1.867 MiB)
Running: chebyshev_quadrature with k=1
  0.194413 seconds (236.63 k allocations: 13.186 MiB)
Running: chebyshev_quadrature with k=2
  0.249206 seconds (290.50 k allocations: 16.146 MiB)
Running: chebyshev_quadrature with k=3
  0.240567 seconds (269.34 k allocations: 14.489 MiB, 7.75% gc time)
Running: chebyshev_quadrature with k=4
  0.206750 seconds (269.37 k allocations: 14.635 MiB)
Running: jacobi_quadrature with α=β=1
  1.578551 seconds (457.35 k allocations: 149.315 MiB, 8.70% gc time)
Running: legendre_quadrature
  0.147685 seconds (190.93 k allocations: 10.945 MiB)
Running: lobatto_quadrature
  0.162921 seconds (202.46 k allocations: 11.631 MiB)
Running: radau_quadrature
  0.163452 seconds (202.45 k allocations: 11.631 MiB)
Running: rectangle_rule_left
  1.154430 seconds (20.36 k allocations: 1.214 MiB)
Running: rectangle_rule_midpoint
  0.024732 seconds (26.04 k allocations: 1.610 MiB)
Running: rectangle_rule_right
  1.121386 seconds (18.41 k allocations: 1.105 MiB)
Running: rombergs_method
  0.129490 seconds (138.50 k allocations: 7.928 MiB)
Running: simpsons_rule
  0.066243 seconds (30.06 k allocations: 1.825 MiB, 53.14% gc time)
Running: simpsons38_rule
  0.033219 seconds (45.57 k allocations: 2.797 MiB)
Running: trapezoidal_rule
  0.025886 seconds (58.20 k allocations: 2.038 MiB)
Test Summary: | Pass  Total
log(x)/x      |   16     16
Approximating the modified bessel function I_1(1) and comparing it to the result obtained by SpecialFunctions.
Running: adaptive_simpsons_rule with ε=1e-7
  0.158147 seconds (151.11 k allocations: 8.915 MiB)
Running: chebyshev_quadrature with k=1
  0.159609 seconds (70.60 k allocations: 2.227 MiB)
Running: chebyshev_quadrature with k=2
  0.181124 seconds (105.77 k allocations: 2.890 MiB)
Running: chebyshev_quadrature with k=3
  0.156328 seconds (93.27 k allocations: 2.678 MiB)
Running: chebyshev_quadrature with k=4
  0.153380 seconds (72.80 k allocations: 2.274 MiB)
Running: jacobi_quadrature with α=β=1
  2.398471 seconds (487.54 k allocations: 168.071 MiB, 8.64% gc time)
Running: legendre_quadrature
  0.103773 seconds (19.37 k allocations: 1.112 MiB)
Running: lobatto_quadrature
  0.000083 seconds (150 allocations: 4.328 KiB)
Running: radau_quadrature
  0.000039 seconds (148 allocations: 4.375 KiB)
Running: rectangle_rule_left
 44.246014 seconds (590.00 M allocations: 8.792 GiB, 3.29% gc time)
Running: rectangle_rule_midpoint
  0.000024 seconds (40 allocations: 992 bytes)
Running: rectangle_rule_right
 45.480790 seconds (592.75 M allocations: 8.833 GiB, 3.10% gc time)
Running: rombergs_method
  0.124069 seconds (21.18 k allocations: 1.188 MiB)
Running: simpsons_rule
  0.000061 seconds (93 allocations: 1.797 KiB)
Running: simpsons38_rule
  0.029687 seconds (463 allocations: 22.578 KiB)
Running: trapezoidal_rule
  0.022854 seconds (179 allocations: 8.766 KiB)
Test Summary: | Pass  Total
modbessel0    |   16     16
Integrating 1/sqrt(-19.6 sin(x)) from -pi to 0 and comparing the result to the analytical solution of ellipk(1/2)/sqrt(2.45) The integrand has singularities at x = -pi and x=0, so for some of these functions the integration domain has to be itself approximated.
Running: adaptive_simpsons_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 33.940751 seconds (629.33 M allocations: 9.387 GiB, 4.52% gc time)
Running: chebyshev_quadrature with k=1
  0.562269 seconds (429.80 k allocations: 23.612 MiB)
Running: chebyshev_quadrature with k=2
 13.953952 seconds (485.72 k allocations: 4.041 GiB, 3.88% gc time)
Running: chebyshev_quadrature with k=3
  6.649925 seconds (282.91 k allocations: 1.643 GiB, 4.77% gc time)
Running: chebyshev_quadrature with k=4
  8.666256 seconds (282.93 k allocations: 2.262 GiB, 2.64% gc time)
Running: jacobi_quadrature with α=β=1. The N value required to get an accurate result is too high to be practical, so only a rough approximation can be arrived at.
 51.811748 seconds (495.74 k allocations: 13.255 GiB, 3.52% gc time)
Running: legendre_quadrature.
  5.601036 seconds (229.53 k allocations: 1.976 GiB, 2.74% gc time)
The following integration functions have to use an approximated domain due to the endpoint singularities.
Running: lobatto_quadrature on [-pi+1e-6, -1e-6]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 49.023399 seconds (8.24 M allocations: 13.384 GiB, 3.82% gc time)
Running: radau_quadrature on [-pi+1e-6, -1e-6]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 44.631717 seconds (7.24 M allocations: 13.369 GiB, 3.00% gc time)
Running: rectangle_rule_left on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  2.789248 seconds (23.12 k allocations: 1.379 MiB)
Running: rectangle_rule_midpoint on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  3.793193 seconds (31.66 k allocations: 1.928 MiB)
Running: rectangle_rule_right on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  2.931360 seconds (23.33 k allocations: 1.389 MiB)
Running: rombergs_method on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  1.171415 seconds (450.41 k allocations: 153.194 MiB)
Running: simpsons_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 40.348622 seconds (600.04 M allocations: 8.943 GiB, 8.52% gc time)
Running: simpsons38_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 38.653884 seconds (600.05 M allocations: 8.943 GiB, 8.10% gc time)
Running: trapezoidal_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 37.242877 seconds (600.04 M allocations: 8.943 GiB, 8.90% gc time)
Test Summary: | Pass  Total
Simppen       |   16     16
Integrating sin(x^2)e^(-x)/x from 0 to infinity, with the approximated domain of integration of 0 to 100. The removable singularity at x=0 in the integrand has been removed.
Running: adaptive_simpsons_rule with ε=1e-8
  0.044133 seconds (181.85 k allocations: 4.460 MiB)
Running: chebyshev_quadrature with k=1
  0.177921 seconds (252.81 k allocations: 13.764 MiB)
Running: chebyshev_quadrature with k=2
  0.204484 seconds (277.68 k allocations: 14.749 MiB)
Running: chebyshev_quadrature with k=3
  0.223938 seconds (253.08 k allocations: 13.030 MiB)
Running: chebyshev_quadrature with k=4
  0.218298 seconds (253.10 k allocations: 13.028 MiB)
Running: jacobi_quadrature with α=β=1
  0.367879 seconds (396.03 k allocations: 35.291 MiB)
Running: laguerre_quadrature with k=2
  0.193109 seconds (184.77 k allocations: 10.666 MiB)
Running: legendre_quadrature
  0.134578 seconds (148.86 k allocations: 8.182 MiB)
Running: lobatto_quadrature
  0.035899 seconds (10.55 k allocations: 15.097 MiB)
Running: radau_quadrature
  0.032519 seconds (9.33 k allocations: 13.171 MiB)
Running: rectangle_rule_left
  0.054870 seconds (19.57 k allocations: 1.147 MiB)
Running: rectangle_rule_midpoint
  0.050070 seconds (26.50 k allocations: 1.612 MiB)
Running: rectangle_rule_right
  0.053564 seconds (18.16 k allocations: 1.074 MiB)
Running: rombergs_method
  0.247839 seconds (178.72 k allocations: 10.125 MiB)
Running: simpsons_rule
  0.002026 seconds (24.72 k allocations: 386.656 KiB)
Running: simpsons38_rule
  0.055794 seconds (80.68 k allocations: 3.451 MiB)
Running: trapezoidal_rule
  0.203557 seconds (2.39 M allocations: 37.726 MiB)
Test Summary: | Pass  Total
sinexpox      |   17     17
Integrating sin(x)/x from 0 to 100 and comparing it to the exact result.
Running: adaptive_simpsons_rule with ε=1e-8
  0.002207 seconds (30.71 k allocations: 480.250 KiB)
Running: chebyshev_quadrature with k=1
  0.123835 seconds (2.40 k allocations: 1.688 MiB)
Running: chebyshev_quadrature with k=2
  0.132494 seconds (2.65 k allocations: 2.352 MiB)
Running: chebyshev_quadrature with k=3
  0.131170 seconds (3.08 k allocations: 2.052 MiB)
Running: chebyshev_quadrature with k=4
  0.118767 seconds (3.08 k allocations: 1.493 MiB)
Running: jacobi_quadrature with α=β=1
  7.632839 seconds (372.72 k allocations: 905.097 MiB, 5.37% gc time)
Running: legendre_quadrature
  0.066757 seconds (1.23 k allocations: 65.688 KiB)
Running: lobatto_quadrature
  0.000168 seconds (253 allocations: 9.188 KiB)
Running: radau_quadrature
  0.000132 seconds (221 allocations: 8.812 KiB)
Running: rectangle_rule_left; only a rough approximation can be practically achieved using this function
  3.919856 seconds (11 allocations: 528 bytes)
Running: rectangle_rule_midpoint
  0.000530 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right; only a rough approximation can be practically achieved using this function
  3.946872 seconds (11 allocations: 528 bytes)
Running: rombergs_method
  0.070717 seconds (959 allocations: 54.031 KiB)
Running: simpsons_rule
  0.000047 seconds (9 allocations: 496 bytes)
Running: simpsons38_rule
  0.000057 seconds (9 allocations: 496 bytes)
Running: trapezoidal_rule
  0.000862 seconds (9 allocations: 496 bytes)
Test Summary: | Pass  Total
sinxx         |   16     16
Integrating (x^3+1)/(x^4 (x+1)(x^2+1)) from 1 to e and comparing the result to the analytical solution of log(sqrt(2)*exp(1)/(sqrt(exp(2)+1)))+1/2*(exp(-2)-1)+1/3*(1-exp(-3))
Running: adaptive_simpsons_rule with ε=1e-8
  0.000679 seconds (6.34 k allocations: 99.453 KiB)
Running: chebyshev_quadrature with k=1
  0.129764 seconds (2.48 k allocations: 576.484 KiB)
Running: chebyshev_quadrature with k=2
  0.123221 seconds (2.73 k allocations: 777.266 KiB)
Running: chebyshev_quadrature with k=3
  0.115716 seconds (3.15 k allocations: 685.500 KiB)
Running: chebyshev_quadrature with k=4
  0.140965 seconds (3.16 k allocations: 516.062 KiB)
Running: jacobi_quadrature with α=β=1
  1.812330 seconds (379.39 k allocations: 253.216 MiB)
Running: legendre_quadrature
  0.073963 seconds (1.28 k allocations: 65.359 KiB)
Running: lobatto_quadrature
  0.000091 seconds (91 allocations: 3.656 KiB)
Running: radau_quadrature
  0.000042 seconds (81 allocations: 3.453 KiB)
Running: rectangle_rule_left; only a rough approximation can be practically achieved using this function.
 10.654431 seconds (11 allocations: 528 bytes)
Running: rectangle_rule_midpoint
  0.001080 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right; only a rough approximation can be practically achieved using this function.
 10.466511 seconds (11 allocations: 528 bytes)
Running: rombergs_method
  0.093459 seconds (1.18 k allocations: 62.547 KiB)
Running: simpsons_rule
  0.000066 seconds (9 allocations: 496 bytes)
Running: simpsons38_rule
  0.000051 seconds (9 allocations: 496 bytes)
Running: trapezoidal_rule
  0.001880 seconds (9 allocations: 496 bytes)
Test Summary: | Pass  Total
partfrac      |   16     16
    Testing FunctionIntegrator tests passed 
