Julia Version 1.6.0-DEV.854
Commit 3d1de029bc (2020-09-07 11:48 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed TensorCore â”€ v0.1.0
Updating `~/.julia/environments/v1.6/Project.toml`
  [62fd8b95] + TensorCore v0.1.0
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [62fd8b95] + TensorCore v0.1.0
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
    Testing TensorCore
Status `/tmp/jl_Gl5B3r/Project.toml`
  [62fd8b95] TensorCore v0.1.0
  [37e2e46d] LinearAlgebra
  [8dfed614] Test
Status `/tmp/jl_Gl5B3r/Manifest.toml`
  [62fd8b95] TensorCore v0.1.0
  [2a0f44e3] Base64
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [9a3f8284] Random
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [8dfed614] Test
    Testing Running tests...
Skipping Base.active_repl
Skipping Base.active_repl_backend
Skipping Base.active_repl
Skipping Base.active_repl_backend
Ambiguities: Test Failed at /home/pkgeval/.julia/packages/TensorCore/ZXs84/test/runtests.jl:6
  Expression: isempty(detect_ambiguities(TensorCore, Base, Core, LinearAlgebra))
   Evaluated: isempty(Tuple{Method, Method}[(ldiv!(adjA::Adjoint{var"#s804", var"#s803"} where var"#s803"<:(UnitLowerTriangular{T, var"#s802"} where var"#s802"<:(StridedMatrix{T} where T)) where var"#s804", B::StridedVecOrMat{T}) where T<:Union{ComplexF32, ComplexF64} in LinearAlgebra at /opt/julia/share/julia/stdlib/v1.6/LinearAlgebra/src/triangular.jl:773, ldiv!(A::Union{Adjoint{T, var"#s841"} where var"#s841"<:(UpperTriangular{T, var"#s840"} where var"#s840"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, SubArray{T, 2, var"#s841", Tuple{Base.Slice{Base.OneTo{Int64}}, I}, L} where L where var"#s841"<:SparseArrays.AbstractSparseMatrixCSC{T, Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T, var"#s839"} where var"#s839"<:(UnitUpperTriangular{T, var"#s838"} where var"#s838"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, SubArray{T, 2, var"#s841", Tuple{Base.Slice{Base.OneTo{Int64}}, I}, L} where L where var"#s841"<:SparseArrays.AbstractSparseMatrixCSC{T, Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T, var"#s841"} where var"#s841"<:(LowerTriangular{T, var"#s840"} where var"#s840"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, SubArray{T, 2, var"#s841", Tuple{Base.Slice{Base.OneTo{Int64}}, I}, L} where L where var"#s841"<:SparseArrays.AbstractSparseMatrixCSC{T, Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T, var"#s839"} where var"#s839"<:(UnitLowerTriangular{T, var"#s838"} where var"#s838"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, SubArray{T, 2, var"#s841", Tuple{Base.Slice{Base.OneTo{Int64}}, I}, L} where L where var"#s841"<:SparseArrays.AbstractSparseMatrixCSC{T, Ti} where I<:AbstractUnitRange} where Ti)), LowerTriangular{T, var"#s841"} where var"#s841"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, SubArray{T, 2, var"#s841", Tuple{Base.Slice{Base.OneTo{Int64}}, I}, L} where L where var"#s841"<:SparseArrays.AbstractSparseMatrixCSC{T, Ti} where I<:AbstractUnitRange} where Ti), Transpose{T, var"#s837"} where var"#s837"<:(UpperTriangular{T, var"#s836"} where var"#s836"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, SubArray{T, 2, var"#s841", Tuple{Base.Slice{Base.OneTo{Int64}}, I}, L} where L where var"#s841"<:SparseArrays.AbstractSparseMatrixCSC{T, Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T, var"#s835"} where var"#s835"<:(UnitUpperTriangular{T, var"#s834"} where var"#s834"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, SubArray{T, 2, var"#s841", Tuple{Base.Slice{Base.OneTo{Int64}}, I}, L} where L where var"#s841"<:SparseArrays.AbstractSparseMatrixCSC{T, Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T, var"#s837"} where var"#s837"<:(LowerTriangular{T, var"#s836"} where var"#s836"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, SubArray{T, 2, var"#s841", Tuple{Base.Slice{Base.OneTo{Int64}}, I}, L} where L where var"#s841"<:SparseArrays.AbstractSparseMatrixCSC{T, Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T, var"#s835"} where var"#s835"<:(UnitLowerTriangular{T, var"#s834"} where var"#s834"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, SubArray{T, 2, var"#s841", Tuple{Base.Slice{Base.OneTo{Int64}}, I}, L} where L where var"#s841"<:SparseArrays.AbstractSparseMatrixCSC{T, Ti} where I<:AbstractUnitRange} where Ti)), UnitLowerTriangular{T, var"#s840"} where var"#s840"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, SubArray{T, 2, var"#s841", Tuple{Base.Slice{Base.OneTo{Int64}}, I}, L} where L where var"#s841"<:SparseArrays.AbstractSparseMatrixCSC{T, Ti} where I<:AbstractUnitRange} where Ti), UnitUpperTriangular{T, var"#s840"} where var"#s840"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, SubArray{T, 2, var"#s841", Tuple{Base.Slice{Base.OneTo{Int64}}, I}, L} where L where var"#s841"<:SparseArrays.AbstractSparseMatrixCSC{T, Ti} where I<:AbstractUnitRange} where Ti), UpperTriangular{T, var"#s841"} where var"#s841"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, SubArray{T, 2, var"#s841", Tuple{Base.Slice{Base.OneTo{Int64}}, I}, L} where L where var"#s841"<:SparseArrays.AbstractSparseMatrixCSC{T, Ti} where I<:AbstractUnitRange} where Ti)}, B::StridedVecOrMat{T}) where T in SparseArrays at /opt/julia/share/julia/stdlib/v1.6/SparseArrays/src/linalg.jl:614), (ldiv!(adjF::Adjoint{T, var"#s841"} where var"#s841"<:(LU{T, var"#s840"} where var"#s840"<:(StridedMatrix{T} where T)), B::StridedVecOrMat{T}) where T<:Real in LinearAlgebra at /opt/julia/share/julia/stdlib/v1.6/LinearAlgebra/src/lu.jl:408, ldiv!(adjA::Adjoint{var"#s804", var"#s803"} where var"#s803"<:(UnitUpperTriangular{T, var"#s802"} where var"#s802"<:(StridedMatrix{T} where T)) where var"#s804", B::StridedVecOrMat{T}) where T<:Union{ComplexF32, ComplexF64} in LinearAlgebra at /opt/julia/share/julia/stdlib/v1.6/LinearAlgebra/src/triangular.jl:773), (ldiv!(transA::Transpose{var"#s810", var"#s809"} where var"#s809"<:(UnitLowerTriangular{T, var"#s808"} where var"#s808"<:(StridedMatrix{T} where T)) where var"#s810", B::StridedVecOrMat{T}) where T<:Union{Float32, Float64, ComplexF32, ComplexF64} in LinearAlgebra at /opt/julia/share/julia/stdlib/v1.6/LinearAlgebra/src/triangular.jl:769, ldiv!(transA::Transpose{var"#s810", var"#s809"} where var"#s809"<:(UnitUpperTriangular{T, var"#s808"} where var"#s808"<:(StridedMatrix{T} where T)) where var"#s810", B::StridedVecOrMat{T}) where T<:Union{Float32, Float64, ComplexF32, ComplexF64} in LinearAlgebra at /opt/julia/share/julia/stdlib/v1.6/LinearAlgebra/src/triangular.jl:769), (ldiv!(F::Adjoint{var"#s841", var"#s840"} where var"#s840"<:Hessenberg where var"#s841", B::AbstractVecOrMat{T} where T) in LinearAlgebra at /opt/julia/share/julia/stdlib/v1.6/LinearAlgebra/src/hessenberg.jl:601, ldiv!(adjA::Adjoint{var"#s804", var"#s803"} where var"#s803"<:(UnitUpperTriangular{T, var"#s802"} where var"#s802"<:(StridedMatrix{T} where T)) where var"#s804", B::StridedVecOrMat{T}) where T<:Union{ComplexF32, ComplexF64} in LinearAlgebra at /opt/julia/share/julia/stdlib/v1.6/LinearAlgebra/src/triangular.jl:773), (ldiv!(adjA::Adjoint{var"#s841", var"#s840"} where var"#s840"<:(LU{var"#s839", var"#s838"} where var"#s838"<:(StridedMatrix{T} where T) where var"#s839") where var"#s841", B::StridedVecOrMat{T} where T) in LinearAlgebra at /opt/julia/share/julia/stdlib/v1.6/LinearAlgebra/src/lu.jl:413, ldiv!(adjA::Adjoint{var"#s804", var"#s803"} where var"#s803"<:(UnitUpperTriangular{T, var"#s802"} where var"#s802"<:(StridedMatrix{T} where T)) where var"#s804", B::StridedVecOrMat{T}) where T<:Union{ComplexF32, ComplexF64} in LinearAlgebra at /opt/julia/share/julia/stdlib/v1.6/LinearAlgebra/src/triangular.jl:773), (ldiv!(adjA::Adjoint{var"#s804", var"#s803"} where var"#s803"<:(UnitUpperTriangular{T, var"#s802"} where var"#s802"<:(StridedMatrix{T} where T)) where var"#s804", B::StridedVecOrMat{T}) where T<:Union{ComplexF32, ComplexF64} in LinearAlgebra at /opt/julia/share/julia/stdlib/v1.6/LinearAlgebra/src/triangular.jl:773, ldiv!(adjA::Adjoint{var"#s804", var"#s803"} where var"#s803"<:(UnitLowerTriangular{T, var"#s802"} where var"#s802"<:(StridedMatrix{T} where T)) where var"#s804", B::StridedVecOrMat{T}) where T<:Union{ComplexF32, ComplexF64} in LinearAlgebra at /opt/julia/share/julia/stdlib/v1.6/LinearAlgebra/src/triangular.jl:773), (ldiv!(adjF::Adjoint{T, var"#s841"} where var"#s841"<:(LU{T, var"#s840"} where var"#s840"<:(StridedMatrix{T} where T)), B::StridedVecOrMat{T}) where T<:Real in LinearAlgebra at /opt/julia/share/julia/stdlib/v1.6/LinearAlgebra/src/lu.jl:408, ldiv!(adjA::Adjoint{var"#s804", var"#s803"} where var"#s803"<:(UpperTriangular{T, var"#s802"} where var"#s802"<:(StridedMatrix{T} where T)) where var"#s804", B::StridedVecOrMat{T}) where T<:Union{ComplexF32, ComplexF64} in LinearAlgebra at /opt/julia/share/julia/stdlib/v1.6/LinearAlgebra/src/triangular.jl:773), (ldiv!(transD::Transpose{var"#s841", var"#s840"} where var"#s840"<:(Diagonal{T, V} where V<:AbstractVector{T}) where var"#s841", B::AbstractVecOrMat{T}) where T in LinearAlgebra at /opt/julia/share/julia/stdlib/v1.6/LinearAlgebra/src/diagonal.jl:463, ldiv!(transA::Transpose{var"#s810", var"#s809"} where var"#s809"<:(UnitUpperTriangular{T, var"#s808"} where var"#s808"<:(StridedMatrix{T} where T)) where var"#s810", B::StridedVecOrMat{T}) where T<:Union{Float32, Float64, ComplexF32, ComplexF64} in LinearAlgebra at /opt/julia/share/julia/stdlib/v1.6/LinearAlgebra/src/triangular.jl:769), (ldiv!(transD::Transpose{var"#s841", var"#s840"} where var"#s840"<:(Diagonal{T, V} where V<:AbstractVector{T}) where var"#s841", B::AbstractVecOrMat{T}) where T in LinearAlgebra at /opt/julia/share/julia/stdlib/v1.6/LinearAlgebra/src/diagonal.jl:463, ldiv!(transA::Transpose{var"#s810", var"#s809"} where var"#s809"<:(UpperTriangular{T, var"#s808"} where var"#s808"<:(StridedMatrix{T} where T)) where var"#s810", B::StridedVecOrMat{T}) where T<:Union{Float32, Float64, ComplexF32, ComplexF64} in LinearAlgebra at /opt/julia/share/julia/stdlib/v1.6/LinearAlgebra/src/triangular.jl:769), (convert(::Type{T}, x::T) where T in Base at essentials.jl:205, convert(::Type{T}, x) where T>:Missing in Base at missing.jl:69)  â€¦  (ldiv!(transA::Transpose{var"#s810", var"#s809"} where var"#s809"<:(UpperTriangular{T, var"#s808"} where var"#s808"<:(StridedMatrix{T} where T)) where var"#s810", B::StridedVecOrMat{T}) where T<:Union{Float32, Float64, ComplexF32, ComplexF64} in LinearAlgebra at /opt/julia/share/julia/stdlib/v1.6/LinearAlgebra/src/triangular.jl:769, ldiv!(transA::Transpose{var"#s810", var"#s809"} where var"#s809"<:(UnitLowerTriangular{T, var"#s808"} where var"#s808"<:(StridedMatrix{T} where T)) where var"#s810", B::StridedVecOrMat{T}) where T<:Union{Float32, Float64, ComplexF32, ComplexF64} in LinearAlgebra at /opt/julia/share/julia/stdlib/v1.6/LinearAlgebra/src/triangular.jl:769), (ldiv!(transA::Transpose{var"#s810", var"#s809"} where var"#s809"<:(UnitUpperTriangular{T, var"#s808"} where var"#s808"<:(StridedMatrix{T} where T)) where var"#s810", B::StridedVecOrMat{T}) where T<:Union{Float32, Float64, ComplexF32, ComplexF64} in LinearAlgebra at /opt/julia/share/julia/stdlib/v1.6/LinearAlgebra/src/triangular.jl:769, ldiv!(transA::Transpose{var"#s810", var"#s809"} where var"#s809"<:(LowerTriangular{T, var"#s808"} where var"#s808"<:(StridedMatrix{T} where T)) where var"#s810", B::StridedVecOrMat{T}) where T<:Union{Float32, Float64, ComplexF32, ComplexF64} in LinearAlgebra at /opt/julia/share/julia/stdlib/v1.6/LinearAlgebra/src/triangular.jl:769), (ldiv!(adjA::Adjoint{var"#s804", var"#s803"} where var"#s803"<:(LowerTriangular{T, var"#s802"} where var"#s802"<:(StridedMatrix{T} where T)) where var"#s804", B::StridedVecOrMat{T}) where T<:Union{ComplexF32, ComplexF64} in LinearAlgebra at /opt/julia/share/julia/stdlib/v1.6/LinearAlgebra/src/triangular.jl:773, ldiv!(adjA::Adjoint{var"#s804", var"#s803"} where var"#s803"<:(UpperTriangular{T, var"#s802"} where var"#s802"<:(StridedMatrix{T} where T)) where var"#s804", B::StridedVecOrMat{T}) where T<:Union{ComplexF32, ComplexF64} in LinearAlgebra at /opt/julia/share/julia/stdlib/v1.6/LinearAlgebra/src/triangular.jl:773), (vcat(A::Union{Vector{T}, Matrix{T}, Adjoint{T, Vector{T}}, Transpose{T, Vector{T}}, LinearAlgebra.AbstractTriangular{T, A} where A<:(Matrix{T} where T), Hermitian{T, A} where A<:(Matrix{T} where T), Symmetric{T, A} where A<:(Matrix{T} where T)}...) where T in SparseArrays at /opt/julia/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1121, vcat(A::BitMatrix...) in Base at bitarray.jl:1808), (hcat(A::Union{Vector{T}, Matrix{T}, Adjoint{T, Vector{T}}, Transpose{T, Vector{T}}, LinearAlgebra.AbstractTriangular{T, A} where A<:(Matrix{T} where T), Hermitian{T, A} where A<:(Matrix{T} where T), Symmetric{T, A} where A<:(Matrix{T} where T)}...) where T in SparseArrays at /opt/julia/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1122, hcat(X::Number...) in Base at abstractarray.jl:1428), (ldiv!(transA::Transpose{var"#s810", var"#s809"} where var"#s809"<:(UnitLowerTriangular{T, var"#s808"} where var"#s808"<:(StridedMatrix{T} where T)) where var"#s810", B::StridedVecOrMat{T}) where T<:Union{Float32, Float64, ComplexF32, ComplexF64} in LinearAlgebra at /opt/julia/share/julia/stdlib/v1.6/LinearAlgebra/src/triangular.jl:769, ldiv!(transA::Transpose{var"#s810", var"#s809"} where var"#s809"<:(LowerTriangular{T, var"#s808"} where var"#s808"<:(StridedMatrix{T} where T)) where var"#s810", B::StridedVecOrMat{T}) where T<:Union{Float32, Float64, ComplexF32, ComplexF64} in LinearAlgebra at /opt/julia/share/julia/stdlib/v1.6/LinearAlgebra/src/triangular.jl:769), (ldiv!(adjA::Adjoint{var"#s804", var"#s803"} where var"#s803"<:(UpperTriangular{T, var"#s802"} where var"#s802"<:(StridedMatrix{T} where T)) where var"#s804", B::StridedVecOrMat{T}) where T<:Union{ComplexF32, ComplexF64} in LinearAlgebra at /opt/julia/share/julia/stdlib/v1.6/LinearAlgebra/src/triangular.jl:773, ldiv!(adjA::Adjoint{var"#s804", var"#s803"} where var"#s803"<:(UnitLowerTriangular{T, var"#s802"} where var"#s802"<:(StridedMatrix{T} where T)) where var"#s804", B::StridedVecOrMat{T}) where T<:Union{ComplexF32, ComplexF64} in LinearAlgebra at /opt/julia/share/julia/stdlib/v1.6/LinearAlgebra/src/triangular.jl:773), (ldiv!(adjD::Adjoint{var"#s841", var"#s840"} where var"#s840"<:(Diagonal{T, V} where V<:AbstractVector{T}) where var"#s841", B::AbstractVecOrMat{T}) where T in LinearAlgebra at /opt/julia/share/julia/stdlib/v1.6/LinearAlgebra/src/diagonal.jl:461, ldiv!(adjA::Adjoint{var"#s804", var"#s803"} where var"#s803"<:(UnitLowerTriangular{T, var"#s802"} where var"#s802"<:(StridedMatrix{T} where T)) where var"#s804", B::StridedVecOrMat{T}) where T<:Union{ComplexF32, ComplexF64} in LinearAlgebra at /opt/julia/share/julia/stdlib/v1.6/LinearAlgebra/src/triangular.jl:773), (ldiv!(adjA::Adjoint{var"#s804", var"#s803"} where var"#s803"<:(UpperTriangular{T, var"#s802"} where var"#s802"<:(StridedMatrix{T} where T)) where var"#s804", B::StridedVecOrMat{T}) where T<:Union{ComplexF32, ComplexF64} in LinearAlgebra at /opt/julia/share/julia/stdlib/v1.6/LinearAlgebra/src/triangular.jl:773, ldiv!(A::Union{Adjoint{T, var"#s841"} where var"#s841"<:(UpperTriangular{T, var"#s840"} where var"#s840"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, SubArray{T, 2, var"#s841", Tuple{Base.Slice{Base.OneTo{Int64}}, I}, L} where L where var"#s841"<:SparseArrays.AbstractSparseMatrixCSC{T, Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T, var"#s839"} where var"#s839"<:(UnitUpperTriangular{T, var"#s838"} where var"#s838"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, SubArray{T, 2, var"#s841", Tuple{Base.Slice{Base.OneTo{Int64}}, I}, L} where L where var"#s841"<:SparseArrays.AbstractSparseMatrixCSC{T, Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T, var"#s841"} where var"#s841"<:(LowerTriangular{T, var"#s840"} where var"#s840"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, SubArray{T, 2, var"#s841", Tuple{Base.Slice{Base.OneTo{Int64}}, I}, L} where L where var"#s841"<:SparseArrays.AbstractSparseMatrixCSC{T, Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T, var"#s839"} where var"#s839"<:(UnitLowerTriangular{T, var"#s838"} where var"#s838"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, SubArray{T, 2, var"#s841", Tuple{Base.Slice{Base.OneTo{Int64}}, I}, L} where L where var"#s841"<:SparseArrays.AbstractSparseMatrixCSC{T, Ti} where I<:AbstractUnitRange} where Ti)), LowerTriangular{T, var"#s841"} where var"#s841"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, SubArray{T, 2, var"#s841", Tuple{Base.Slice{Base.OneTo{Int64}}, I}, L} where L where var"#s841"<:SparseArrays.AbstractSparseMatrixCSC{T, Ti} where I<:AbstractUnitRange} where Ti), Transpose{T, var"#s837"} where var"#s837"<:(UpperTriangular{T, var"#s836"} where var"#s836"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, SubArray{T, 2, var"#s841", Tuple{Base.Slice{Base.OneTo{Int64}}, I}, L} where L where var"#s841"<:SparseArrays.AbstractSparseMatrixCSC{T, Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T, var"#s835"} where var"#s835"<:(UnitUpperTriangular{T, var"#s834"} where var"#s834"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, SubArray{T, 2, var"#s841", Tuple{Base.Slice{Base.OneTo{Int64}}, I}, L} where L where var"#s841"<:SparseArrays.AbstractSparseMatrixCSC{T, Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T, var"#s837"} where var"#s837"<:(LowerTriangular{T, var"#s836"} where var"#s836"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, SubArray{T, 2, var"#s841", Tuple{Base.Slice{Base.OneTo{Int64}}, I}, L} where L where var"#s841"<:SparseArrays.AbstractSparseMatrixCSC{T, Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T, var"#s835"} where var"#s835"<:(UnitLowerTriangular{T, var"#s834"} where var"#s834"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, SubArray{T, 2, var"#s841", Tuple{Base.Slice{Base.OneTo{Int64}}, I}, L} where L where var"#s841"<:SparseArrays.AbstractSparseMatrixCSC{T, Ti} where I<:AbstractUnitRange} where Ti)), UnitLowerTriangular{T, var"#s840"} where var"#s840"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, SubArray{T, 2, var"#s841", Tuple{Base.Slice{Base.OneTo{Int64}}, I}, L} where L where var"#s841"<:SparseArrays.AbstractSparseMatrixCSC{T, Ti} where I<:AbstractUnitRange} where Ti), UnitUpperTriangular{T, var"#s840"} where var"#s840"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, SubArray{T, 2, var"#s841", Tuple{Base.Slice{Base.OneTo{Int64}}, I}, L} where L where var"#s841"<:SparseArrays.AbstractSparseMatrixCSC{T, Ti} where I<:AbstractUnitRange} where Ti), UpperTriangular{T, var"#s841"} where var"#s841"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, SubArray{T, 2, var"#s841", Tuple{Base.Slice{Base.OneTo{Int64}}, I}, L} where L where var"#s841"<:SparseArrays.AbstractSparseMatrixCSC{T, Ti} where I<:AbstractUnitRange} where Ti)}, B::StridedVecOrMat{T}) where T in SparseArrays at /opt/julia/share/julia/stdlib/v1.6/SparseArrays/src/linalg.jl:614), (ldiv!(F::Adjoint{var"#s841", var"#s840"} where var"#s840"<:Hessenberg where var"#s841", B::AbstractVecOrMat{T} where T) in LinearAlgebra at /opt/julia/share/julia/stdlib/v1.6/LinearAlgebra/src/hessenberg.jl:601, ldiv!(A::Union{Adjoint{T, var"#s841"} where var"#s841"<:(UpperTriangular{T, var"#s840"} where var"#s840"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, SubArray{T, 2, var"#s841", Tuple{Base.Slice{Base.OneTo{Int64}}, I}, L} where L where var"#s841"<:SparseArrays.AbstractSparseMatrixCSC{T, Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T, var"#s839"} where var"#s839"<:(UnitUpperTriangular{T, var"#s838"} where var"#s838"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, SubArray{T, 2, var"#s841", Tuple{Base.Slice{Base.OneTo{Int64}}, I}, L} where L where var"#s841"<:SparseArrays.AbstractSparseMatrixCSC{T, Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T, var"#s841"} where var"#s841"<:(LowerTriangular{T, var"#s840"} where var"#s840"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, SubArray{T, 2, var"#s841", Tuple{Base.Slice{Base.OneTo{Int64}}, I}, L} where L where var"#s841"<:SparseArrays.AbstractSparseMatrixCSC{T, Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T, var"#s839"} where var"#s839"<:(UnitLowerTriangular{T, var"#s838"} where var"#s838"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, SubArray{T, 2, var"#s841", Tuple{Base.Slice{Base.OneTo{Int64}}, I}, L} where L where var"#s841"<:SparseArrays.AbstractSparseMatrixCSC{T, Ti} where I<:AbstractUnitRange} where Ti)), LowerTriangular{T, var"#s841"} where var"#s841"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, SubArray{T, 2, var"#s841", Tuple{Base.Slice{Base.OneTo{Int64}}, I}, L} where L where var"#s841"<:SparseArrays.AbstractSparseMatrixCSC{T, Ti} where I<:AbstractUnitRange} where Ti), Transpose{T, var"#s837"} where var"#s837"<:(UpperTriangular{T, var"#s836"} where var"#s836"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, SubArray{T, 2, var"#s841", Tuple{Base.Slice{Base.OneTo{Int64}}, I}, L} where L where var"#s841"<:SparseArrays.AbstractSparseMatrixCSC{T, Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T, var"#s835"} where var"#s835"<:(UnitUpperTriangular{T, var"#s834"} where var"#s834"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, SubArray{T, 2, var"#s841", Tuple{Base.Slice{Base.OneTo{Int64}}, I}, L} where L where var"#s841"<:SparseArrays.AbstractSparseMatrixCSC{T, Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T, var"#s837"} where var"#s837"<:(LowerTriangular{T, var"#s836"} where var"#s836"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, SubArray{T, 2, var"#s841", Tuple{Base.Slice{Base.OneTo{Int64}}, I}, L} where L where var"#s841"<:SparseArrays.AbstractSparseMatrixCSC{T, Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T, var"#s835"} where var"#s835"<:(UnitLowerTriangular{T, var"#s834"} where var"#s834"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, SubArray{T, 2, var"#s841", Tuple{Base.Slice{Base.OneTo{Int64}}, I}, L} where L where var"#s841"<:SparseArrays.AbstractSparseMatrixCSC{T, Ti} where I<:AbstractUnitRange} where Ti)), UnitLowerTriangular{T, var"#s840"} where var"#s840"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, SubArray{T, 2, var"#s841", Tuple{Base.Slice{Base.OneTo{Int64}}, I}, L} where L where var"#s841"<:SparseArrays.AbstractSparseMatrixCSC{T, Ti} where I<:AbstractUnitRange} where Ti), UnitUpperTriangular{T, var"#s840"} where var"#s840"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, SubArray{T, 2, var"#s841", Tuple{Base.Slice{Base.OneTo{Int64}}, I}, L} where L where var"#s841"<:SparseArrays.AbstractSparseMatrixCSC{T, Ti} where I<:AbstractUnitRange} where Ti), UpperTriangular{T, var"#s841"} where var"#s841"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, SubArray{T, 2, var"#s841", Tuple{Base.Slice{Base.OneTo{Int64}}, I}, L} where L where var"#s841"<:SparseArrays.AbstractSparseMatrixCSC{T, Ti} where I<:AbstractUnitRange} where Ti)}, B::StridedVecOrMat{T}) where T in SparseArrays at /opt/julia/share/julia/stdlib/v1.6/SparseArrays/src/linalg.jl:614)])
Stacktrace:
 [1] top-level scope
   @ ~/.julia/packages/TensorCore/ZXs84/test/runtests.jl:6
 [2] top-level scope
   @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
 [3] top-level scope
   @ ~/.julia/packages/TensorCore/ZXs84/test/runtests.jl:6
Test Summary: | Fail  Total
Ambiguities   |    1      1
ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 0 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/TensorCore/ZXs84/test/runtests.jl:5
ERROR: Package TensorCore errored during testing
Stacktrace:
  [1] pkgerror(::String, ::Vararg{String, N} where N)
    @ Pkg.Types /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
  [2] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing)
    @ Pkg.Operations /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1580
  [3] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:328
  [4] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:315
  [5] #test#62
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [6] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [7] #test#61
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [8] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [9] test(pkg::String; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [10] test(pkg::String)
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [11] top-level scope
    @ none:19
