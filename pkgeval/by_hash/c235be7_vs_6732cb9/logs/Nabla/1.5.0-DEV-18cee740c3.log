Julia Version 1.5.0-DEV.451
Commit 18cee740c3 (2020-03-12 04:12 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed CompilerSupportLibraries_jll ─ v0.2.0+1
  Installed DualNumbers ────────────────── v0.6.2
  Installed NaNMath ────────────────────── v0.3.3
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed DiffRules ──────────────────── v0.0.10
  Installed SpecialFunctions ───────────── v0.10.0
  Installed FDM ────────────────────────── v0.6.1
  Installed Nabla ──────────────────────── v0.12.1
  Installed Calculus ───────────────────── v0.5.1
#=#=#                                                                         ##                                                                         3.6%#######                                                                   10.2%##############                                                            20.4%######################                                                    31.9%##################################                                        48.5%###############################################                           65.6%#################################################################         90.4%######################################################################## 100.0%
#=#=#                                                                         ######################################################################## 100.0%
   Updating `~/.julia/environments/v1.5/Project.toml`
   49c96f43 + Nabla v0.12.1
   Updating `~/.julia/environments/v1.5/Manifest.toml`
   49dc2e85 + Calculus v0.5.1
   e66e0078 + CompilerSupportLibraries_jll v0.2.0+1
   b552c78f + DiffRules v0.0.10
   fa6b7ba4 + DualNumbers v0.6.2
   e25cca7e + FDM v0.6.1
   77ba4419 + NaNMath v0.3.3
   49c96f43 + Nabla v0.12.1
   efe28fd5 + OpenSpecFun_jll v0.5.3+3
   276daf66 + SpecialFunctions v0.10.0
   2a0f44e3 + Base64
   ade2ca70 + Dates
   8ba89e20 + Distributed
   b77e0a4c + InteractiveUtils
   76f85450 + LibGit2
   8f399da3 + Libdl
   37e2e46d + LinearAlgebra
   56ddb016 + Logging
   d6f4376e + Markdown
   44cfe95a + Pkg
   de0858da + Printf
   3fa0cd96 + REPL
   9a3f8284 + Random
   ea8e919c + SHA
   9e88b42a + Serialization
   6462fe0b + Sockets
   2f01184e + SparseArrays
   10745b16 + Statistics
   8dfed614 + Test
   cf7118a7 + UUIDs
   4ec0a83e + Unicode
    Testing Nabla
#=#=#                                                                         ######################################################################## 100.0%
#=#=#                                                                         ##O#- #                                                                                                                                                  0.8%###                                                                        4.5%#######                                                                    9.9%############                                                              16.8%##################                                                        26.1%###########################                                               37.6%####################################                                      50.7%#################################################                         68.1%##########################################################                80.8%######################################################################## 100.0%
#=#=#                                                                         ######################################################################## 100.0%
     Status `/tmp/jl_8tAVZl/Project.toml`
   6e4b80f9 BenchmarkTools v0.5.0
   b552c78f DiffRules v0.0.10
   31c24e10 Distributions v0.22.5
   fa6b7ba4 DualNumbers v0.6.2
   e25cca7e FDM v0.6.1
   49c96f43 Nabla v0.12.1
   276daf66 SpecialFunctions v0.10.0
   37e2e46d LinearAlgebra
   9a3f8284 Random
   10745b16 Statistics
   8dfed614 Test
     Status `/tmp/jl_8tAVZl/Manifest.toml`
   7d9fca2a Arpack v0.4.0
   68821587 Arpack_jll v3.5.0+2
   6e4b80f9 BenchmarkTools v0.5.0
   49dc2e85 Calculus v0.5.1
   e66e0078 CompilerSupportLibraries_jll v0.2.0+1
   9a962f9c DataAPI v1.1.0
   864edb3b DataStructures v0.17.10
   b552c78f DiffRules v0.0.10
   31c24e10 Distributions v0.22.5
   fa6b7ba4 DualNumbers v0.6.2
   e25cca7e FDM v0.6.1
   1a297f60 FillArrays v0.8.5
   682c06a0 JSON v0.21.0
   e1d29d7a Missings v0.4.3
   77ba4419 NaNMath v0.3.3
   49c96f43 Nabla v0.12.1
   4536629a OpenBLAS_jll v0.3.7+7
   efe28fd5 OpenSpecFun_jll v0.5.3+3
   bac558e1 OrderedCollections v1.1.0
   90014a1f PDMats v0.9.11
   69de0a69 Parsers v0.3.12
   1fd47b50 QuadGK v2.3.1
   79098fc4 Rmath v0.6.1
   f50d1b31 Rmath_jll v0.2.2+0
   a2af1166 SortingAlgorithms v0.3.1
   276daf66 SpecialFunctions v0.10.0
   2913bbd2 StatsBase v0.32.2
   4c63d2b9 StatsFuns v0.9.4
   2a0f44e3 Base64
   ade2ca70 Dates
   8ba89e20 Distributed
   b77e0a4c InteractiveUtils
   76f85450 LibGit2
   8f399da3 Libdl
   37e2e46d LinearAlgebra
   56ddb016 Logging
   d6f4376e Markdown
   a63ad114 Mmap
   44cfe95a Pkg
   de0858da Printf
   3fa0cd96 REPL
   9a3f8284 Random
   ea8e919c SHA
   9e88b42a Serialization
   6462fe0b Sockets
   2f01184e SparseArrays
   10745b16 Statistics
   4607b0f0 SuiteSparse
   8dfed614 Test
   cf7118a7 UUIDs
   4ec0a83e Unicode
Test Summary: | Pass  Total
Core          |  234    234
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = in_domain(::Function, ::Float64) at finite_differencing.jl:128
└ @ Nabla ~/.julia/packages/Nabla/D60dX/src/finite_differencing.jl:128
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = #Branch#13 at core.jl:82 [inlined]
└ @ Core ~/.julia/packages/Nabla/D60dX/src/core.jl:82
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = #44 at finite_differencing.jl:24 [inlined]
└ @ Core ~/.julia/packages/Nabla/D60dX/src/finite_differencing.jl:24
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = #44 at finite_differencing.jl:24 [inlined]
└ @ Core ~/.julia/packages/Nabla/D60dX/src/finite_differencing.jl:24
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = #44 at finite_differencing.jl:24 [inlined]
└ @ Core ~/.julia/packages/Nabla/D60dX/src/finite_differencing.jl:24
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = #44 at finite_differencing.jl:24 [inlined]
└ @ Core ~/.julia/packages/Nabla/D60dX/src/finite_differencing.jl:24
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = #44 at finite_differencing.jl:24 [inlined]
└ @ Core ~/.julia/packages/Nabla/D60dX/src/finite_differencing.jl:24
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = #44 at finite_differencing.jl:24 [inlined]
└ @ Core ~/.julia/packages/Nabla/D60dX/src/finite_differencing.jl:24
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = #44 at finite_differencing.jl:24 [inlined]
└ @ Core ~/.julia/packages/Nabla/D60dX/src/finite_differencing.jl:24
┌ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
│   caller = (::Nabla.var"#55#59"{Float64,typeof(lbeta)})(::Float64) at finite_differencing.jl:197
└ @ Nabla ~/.julia/packages/Nabla/D60dX/src/finite_differencing.jl:197
┌ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
│   caller = Branch(::Function, ::Tuple{Leaf{Float64},Leaf{Float64}}, ::Tape; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at core.jl:82
└ @ Nabla ~/.julia/packages/Nabla/D60dX/src/core.jl:82
┌ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
│   caller = (::Nabla.var"#44#45"{typeof(lbeta),Float64,Tuple{Float64,Float64},Tuple{Float64,Float64}})(::Float64) at finite_differencing.jl:24
└ @ Nabla ~/.julia/packages/Nabla/D60dX/src/finite_differencing.jl:24
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = _broadcast_getindex_evalf at broadcast.jl:631 [inlined]
└ @ Core ./broadcast.jl:631
┌ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
│   caller = _broadcast_getindex_evalf at broadcast.jl:631 [inlined]
└ @ Core ./broadcast.jl:631
┌ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
│   caller = _broadcast_getindex_evalf at broadcast.jl:631 [inlined]
└ @ Core ./broadcast.jl:631
┌ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
│   caller = _broadcast_getindex_evalf at broadcast.jl:631 [inlined]
└ @ Core ./broadcast.jl:631
┌ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
│   caller = _broadcast_getindex_evalf at broadcast.jl:631 [inlined]
└ @ Core ./broadcast.jl:631
┌ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
│   caller = _broadcast_getindex_evalf at broadcast.jl:631 [inlined]
└ @ Core ./broadcast.jl:631
┌ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
│   caller = _broadcast_getindex_evalf at broadcast.jl:631 [inlined]
└ @ Core ./broadcast.jl:631
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = broadcast(::Function, ::Float64) at broadcast.jl:761
└ @ Base.Broadcast ./broadcast.jl:761
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = _broadcast_getindex_evalf(::typeof(lgamma), ::Float64) at broadcast.jl:631
└ @ Base.Broadcast ./broadcast.jl:631
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = _broadcast_getindex_evalf at broadcast.jl:631 [inlined]
└ @ Core ./broadcast.jl:631
┌ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
│   caller = _broadcast_getindex_evalf at broadcast.jl:631 [inlined]
└ @ Core ./broadcast.jl:631
┌ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
│   caller = _broadcast_getindex_evalf at broadcast.jl:631 [inlined]
└ @ Core ./broadcast.jl:631
┌ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
│   caller = _broadcast_getindex_evalf at broadcast.jl:631 [inlined]
└ @ Core ./broadcast.jl:631
┌ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
│   caller = _broadcast_getindex_evalf at broadcast.jl:631 [inlined]
└ @ Core ./broadcast.jl:631
┌ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
│   caller = _broadcast_getindex_evalf at broadcast.jl:631 [inlined]
└ @ Core ./broadcast.jl:631
┌ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
│   caller = _broadcast_getindex_evalf at broadcast.jl:631 [inlined]
└ @ Core ./broadcast.jl:631
┌ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
│   caller = _broadcast_getindex_evalf at broadcast.jl:631 [inlined]
└ @ Core ./broadcast.jl:631
┌ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
│   caller = _broadcast_getindex_evalf at broadcast.jl:631 [inlined]
└ @ Core ./broadcast.jl:631
┌ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
│   caller = _broadcast_getindex_evalf at broadcast.jl:631 [inlined]
└ @ Core ./broadcast.jl:631
┌ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
│   caller = broadcast(::Function, ::Float64, ::Float64) at broadcast.jl:761
└ @ Base.Broadcast ./broadcast.jl:761
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = _mapreduce(::typeof(lgamma), ::typeof(+), ::IndexLinear, ::Array{Float64,1}) at reduce.jl:400
└ @ Base ./reduce.jl:400
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = _mapreduce(::typeof(lgamma), ::typeof(+), ::IndexLinear, ::Array{Float64,1}) at reduce.jl:400
└ @ Base ./reduce.jl:400
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = _mapreduce(::typeof(lgamma), ::typeof(+), ::IndexLinear, ::Array{Float64,1}) at reduce.jl:403
└ @ Base ./reduce.jl:403
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = MappingRF at reduce.jl:90 [inlined]
└ @ Core ./reduce.jl:90
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = MappingRF at reduce.jl:90 [inlined]
└ @ Core ./reduce.jl:90
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = MappingRF at reduce.jl:90 [inlined]
└ @ Core ./reduce.jl:90
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = MappingRF at reduce.jl:90 [inlined]
└ @ Core ./reduce.jl:90
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = _mapreduce(::typeof(lgamma), ::typeof(Base.add_sum), ::IndexLinear, ::Array{Float64,1}) at reduce.jl:400
└ @ Base ./reduce.jl:400
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = _mapreduce(::typeof(lgamma), ::typeof(Base.add_sum), ::IndexLinear, ::Array{Float64,1}) at reduce.jl:400
└ @ Base ./reduce.jl:400
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = _mapreduce(::typeof(lgamma), ::typeof(Base.add_sum), ::IndexLinear, ::Array{Float64,1}) at reduce.jl:403
└ @ Base ./reduce.jl:403
norm: Error During Test at /home/pkgeval/.julia/packages/Nabla/D60dX/test/sensitivities/linalg/generic.jl:38
  Test threw exception
  Expression: check_errs(eval(f), (eval(f))(A, B), (A, B), (VA, VB))
  UndefVarError: maxabs not defined
  Stacktrace:
   [1] generic_normp(::Array{Float64,2}, ::Float64) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/LinearAlgebra/src/generic.jl:514
   [2] normp at /workspace/srcdir/usr/share/julia/stdlib/v1.5/LinearAlgebra/src/generic.jl:539 [inlined]
   [3] norm(::Array{Float64,2}, ::Float64) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/LinearAlgebra/src/generic.jl:617
   [4] (::Nabla.var"#44#45"{typeof(norm),Float64,Tuple{Array{Float64,2},Float64},Tuple{Array{Float64,2},Float64}})(::Float64) at /home/pkgeval/.julia/packages/Nabla/D60dX/src/finite_differencing.jl:24
   [5] #20 at /home/pkgeval/.julia/packages/FDM/01oCp/src/methods.jl:258 [inlined]
   [6] _mapreduce(::FDM.var"#20#22"{Nabla.var"#44#45"{typeof(norm),Float64,Tuple{Array{Float64,2},Float64},Tuple{Array{Float64,2},Float64}},Float64,UnitRange{Int64},Array{Float64,1},Float64}, ::typeof(Base.add_sum), ::IndexLinear, ::Base.OneTo{Int64}) at ./reduce.jl:400
   [7] _mapreduce_dim(::Function, ::Function, ::NamedTuple{(),Tuple{}}, ::Base.OneTo{Int64}, ::Colon) at ./reducedim.jl:312
   [8] #mapreduce#599 at ./reducedim.jl:307 [inlined]
   [9] mapreduce at ./reducedim.jl:307 [inlined]
   [10] _sum at ./reducedim.jl:657 [inlined]
   [11] #sum#603 at ./reducedim.jl:653 [inlined]
   [12] sum at ./reducedim.jl:653 [inlined]
   [13] fdm(::FDM.Central{UnitRange{Int64},Array{Float64,1}}, ::Nabla.var"#44#45"{typeof(norm),Float64,Tuple{Array{Float64,2},Float64},Tuple{Array{Float64,2},Float64}}, ::Float64, ::Val{true}; condition::Int64, bound::Float64, eps::Float64, adapt::Int64, max_step::Float64) at /home/pkgeval/.julia/packages/FDM/01oCp/src/methods.jl:258
   [14] fdm(::FDM.Central{UnitRange{Int64},Array{Float64,1}}, ::Nabla.var"#44#45"{typeof(norm),Float64,Tuple{Array{Float64,2},Float64},Tuple{Array{Float64,2},Float64}}, ::Float64, ::Val{true}) at /home/pkgeval/.julia/packages/FDM/01oCp/src/methods.jl:221
   [15] fdm(::FDM.Central{UnitRange{Int64},Array{Float64,1}}, ::Function, ::Float64, ::Val{false}; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/FDM/01oCp/src/methods.jl:269
   [16] fdm at /home/pkgeval/.julia/packages/FDM/01oCp/src/methods.jl:269 [inlined] (repeats 2 times)
   [17] #_#7 at /home/pkgeval/.julia/packages/FDM/01oCp/src/methods.jl:93 [inlined]
   [18] Central at /home/pkgeval/.julia/packages/FDM/01oCp/src/methods.jl:93 [inlined] (repeats 2 times)
   [19] approximate_Dv(::Function, ::Float64, ::Tuple{Array{Float64,2},Float64}, ::Tuple{Array{Float64,2},Float64}) at /home/pkgeval/.julia/packages/Nabla/D60dX/src/finite_differencing.jl:24
   [20] check_errs(::Function, ::Float64, ::Tuple{Array{Float64,2},Float64}, ::Tuple{Array{Float64,2},Float64}, ::Float64, ::Float64) at /home/pkgeval/.julia/packages/Nabla/D60dX/src/finite_differencing.jl:115
   [21] check_errs(::Function, ::Float64, ::Tuple{Array{Float64,2},Float64}, ::Tuple{Array{Float64,2},Float64}) at /home/pkgeval/.julia/packages/Nabla/D60dX/src/finite_differencing.jl:113
   [22] top-level scope at /home/pkgeval/.julia/packages/Nabla/D60dX/test/sensitivities/linalg/generic.jl:38
   [23] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188
   [24] top-level scope at /home/pkgeval/.julia/packages/Nabla/D60dX/test/sensitivities/linalg/generic.jl:35
   [25] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [26] top-level scope at /home/pkgeval/.julia/packages/Nabla/D60dX/test/sensitivities/linalg/generic.jl:34
   [27] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [28] top-level scope at /home/pkgeval/.julia/packages/Nabla/D60dX/test/sensitivities/linalg/generic.jl:2
  
Test Summary:                                  | Pass  Error  Total
Sensitivities                                  | 3342      1   3343
  Finite-difference estimates of sensitivities |   31            31
  Indexing                                     |    7             7
  Scalar domains                               |   10            10
  Scalar                                       |  910           910
  Array                                        |   10            10
  Functional                                   | 1148          1148
  Linear algebra                               | 1226      1   1227
    Generic                                    |  107      1    108
      Unary sensitivities                      |   50            50
      Binary sensitivities                     |   24      1     25
        *                                      |    5             5
        /                                      |    5             5
        \                                      |    5             5
        norm                                   |    4      1      5
        norm                                   |    5             5
      kron                                     |    5             5
      I                                        |   10            10
      dot                                      |   10            10
      copy                                     |    6             6
      exp                                      |    2             2
    Symmetric                                  |   10            10
    Diagonal                                   |  182           182
    Triangular                                 |   64            64
    Strided                                    |    7             7
    BLAS                                       |  770           770
    Factorisations                             |   86            86
ERROR: LoadError: Some tests did not pass: 3342 passed, 0 failed, 1 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/Nabla/D60dX/test/runtests.jl:18
ERROR: Package Nabla errored during testing
Stacktrace:
 [1] pkgerror(::String, ::Vararg{String,N} where N) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/Types.jl:53
 [2] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/Operations.jl:1523
 [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:316
 [4] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:303
 [5] #test#68 at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:297 [inlined]
 [6] test at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:297 [inlined]
 [7] #test#67 at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:296 [inlined]
 [8] test at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:296 [inlined]
 [9] test(::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:295
 [10] test(::String) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:295
 [11] top-level scope at none:13
