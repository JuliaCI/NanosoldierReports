Julia Version 1.6.0-DEV.921
Commit bfa7261083 (2020-09-16 06:22 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed FileIO ────── v1.4.3
  Installed GAFramework ─ v0.4.1
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.3
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_OYtCQs/Project.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_OYtCQs/Manifest.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21722689597328282
curgen: 20 fitness: 0.21722689597328282
curgen: 30 fitness: 0.21722689597328282
curgen: 40 fitness: 0.21722689597328282
curgen: 50 fitness: 0.21722689597328282
CoordinateCreature{Vector{Float64}}([0.22293853855793477], -0.21722689597328282) 0.22293853855793477 -0.21722689597328282
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.257634989540241
curgen: 100 fitness: 3.257872252383698
curgen: 150 fitness: 3.258027370862229
curgen: 200 fitness: 3.2581396021215063
curgen: 250 fitness: 3.2582948497204574
curgen: 300 fitness: 3.258403289294007
curgen: 350 fitness: 3.258403289294007
curgen: 400 fitness: 3.258461046447323
curgen: 450 fitness: 3.258471804668338
curgen: 500 fitness: 3.258475339255942
CoordinateCreature{Vector{Float64}}([-0.2223470135325312, 0.22249278481614315, 0.2225372021891485, -0.2225216970566095, 0.2225815187871041, 0.22289648191568864, 0.2225674146092876, -0.22279989541442863, 0.22258322985520712, -0.22222999325395984, 0.22226189914634334, 0.22287365592011604, -0.22283264751874726, 0.22231790290563058, -0.22259540489878465], -3.258475339255942) [-0.2223470135325312, 0.22249278481614315, 0.2225372021891485, -0.2225216970566095, 0.2225815187871041, 0.22289648191568864, 0.2225674146092876, -0.22279989541442863, 0.22258322985520712, -0.22222999325395984, 0.22226189914634334, 0.22287365592011604, -0.22283264751874726, 0.22231790290563058, -0.22259540489878465] -3.258475339255942
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.003261633405543307
curgen: 100 fitness: -0.001172297138424483
curgen: 150 fitness: -0.001172297138424483
curgen: 200 fitness: -0.001046678884620178
curgen: 250 fitness: -0.001046678884620178
curgen: 300 fitness: -0.0010023822327696053
curgen: 350 fitness: -0.0010023822327696053
curgen: 400 fitness: -0.0005008346608690317
curgen: 450 fitness: -0.0005008346608690317
curgen: 500 fitness: -0.0005008346608690317
CoordinateCreature{Vector{Float64}}([-0.0005834396652503911, -0.00010988381445153976, 0.00013279445826497972, 8.210962075732545e-5, 0.0005516246866038039, 0.00030007452001696607, 0.00014922888893405186, 0.0001237934860900396, -0.0002743111709356551, -0.0007356686468700502, 0.0002934301590472397, -0.0006578332768092789, -0.0007511144116587685, 1.9571560484631274e-5, -0.00012583433114548412], 0.0005008346608690317) [-0.0005834396652503911, -0.00010988381445153976, 0.00013279445826497972, 8.210962075732545e-5, 0.0005516246866038039, 0.00030007452001696607, 0.00014922888893405186, 0.0001237934860900396, -0.0002743111709356551, -0.0007356686468700502, 0.0002934301590472397, -0.0006578332768092789, -0.0007511144116587685, 1.9571560484631274e-5, -0.00012583433114548412] 0.0005008346608690317
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
