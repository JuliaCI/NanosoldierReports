Julia Version 1.6.0-DEV.921
Commit bfa7261083 (2020-09-16 06:22 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed TreeViews ──────────────────── v0.3.0
  Installed CpuId ──────────────────────── v0.2.2
  Installed Requires ───────────────────── v1.0.2
  Installed UnPack ─────────────────────── v1.0.2
  Installed QuadGK ─────────────────────── v2.4.1
  Installed DiffEqUncertainty ──────────── v1.5.0
  Installed ArrayLayouts ───────────────── v0.4.7
  Installed ChainRules ─────────────────── v0.7.19
  Installed DiffEqBase ─────────────────── v6.47.1
  Installed Combinatorics ──────────────── v1.0.2
  Installed RecipesBase ────────────────── v1.1.0
  Installed CommonSubexpressions ───────── v0.3.0
  Installed Reexport ───────────────────── v0.2.0
  Installed Rmath_jll ──────────────────── v0.2.2+1
  Installed DataValueInterfaces ────────── v1.0.0
  Installed Tables ─────────────────────── v1.0.5
  Installed StatsBase ──────────────────── v0.33.1
  Installed CommonSolve ────────────────── v0.2.0
  Installed VectorizationBase ──────────── v0.12.33
  Installed ForwardDiff ────────────────── v0.10.12
  Installed ReverseDiff ────────────────── v1.4.3
  Installed DiffResults ────────────────── v1.0.2
  Installed MonteCarloIntegration ──────── v0.0.1
  Installed NNlib ──────────────────────── v0.7.4
  Installed SortingAlgorithms ──────────── v0.3.1
  Installed OffsetArrays ───────────────── v1.2.0
  Installed Rmath ──────────────────────── v0.6.1
  Installed SIMDPirates ────────────────── v0.8.25
  Installed SpecialFunctions ───────────── v0.10.3
  Installed Zygote ─────────────────────── v0.5.7
  Installed MacroTools ─────────────────── v0.5.5
  Installed Distributions ──────────────── v0.23.11
  Installed MuladdMacro ────────────────── v0.2.2
  Installed SLEEFPirates ───────────────── v0.5.5
  Installed Quadrature ─────────────────── v1.4.0
  Installed Missings ───────────────────── v0.4.4
  Installed HCubature ──────────────────── v1.4.0
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed NaNMath ────────────────────── v0.3.4
  Installed RecursiveArrayTools ────────── v2.7.0
  Installed FillArrays ─────────────────── v0.9.6
  Installed ArrayInterface ─────────────── v2.12.0
  Installed AbstractFFTs ───────────────── v0.5.0
  Installed OrderedCollections ─────────── v1.3.1
  Installed DataAPI ────────────────────── v1.3.0
  Installed TableTraits ────────────────── v1.0.0
  Installed FunctionWrappers ───────────── v1.1.1
  Installed DataStructures ─────────────── v0.18.6
  Installed Roots ──────────────────────── v1.0.5
  Installed DocStringExtensions ────────── v0.8.3
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed IRTools ────────────────────── v0.4.1
  Installed Parameters ─────────────────── v0.12.1
  Installed PDMats ─────────────────────── v0.10.0
  Installed LabelledArrays ─────────────── v1.3.0
  Installed ZygoteRules ────────────────── v0.2.0
  Installed IterativeSolvers ───────────── v0.8.4
  Installed Compat ─────────────────────── v3.16.0
  Installed RecursiveFactorization ─────── v0.1.4
  Installed IteratorInterfaceExtensions ── v1.0.0
  Installed StaticArrays ───────────────── v0.12.4
  Installed StatsFuns ──────────────────── v0.9.5
  Installed DiffRules ──────────────────── v1.0.1
  Installed LoopVectorization ──────────── v0.8.26
  Installed ChainRulesCore ─────────────── v0.9.10
Updating `~/.julia/environments/v1.6/Project.toml`
  [ef61062a] + DiffEqUncertainty v1.5.0
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [621f4979] + AbstractFFTs v0.5.0
  [4fba245c] + ArrayInterface v2.12.0
  [4c555306] + ArrayLayouts v0.4.7
  [082447d4] + ChainRules v0.7.19
  [d360d2e6] + ChainRulesCore v0.9.10
  [861a8166] + Combinatorics v1.0.2
  [38540f10] + CommonSolve v0.2.0
  [bbf7d656] + CommonSubexpressions v0.3.0
  [34da2185] + Compat v3.16.0
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [adafc99b] + CpuId v0.2.2
  [9a962f9c] + DataAPI v1.3.0
  [864edb3b] + DataStructures v0.18.6
  [e2d170a0] + DataValueInterfaces v1.0.0
  [2b5f629d] + DiffEqBase v6.47.1
  [ef61062a] + DiffEqUncertainty v1.5.0
  [163ba53b] + DiffResults v1.0.2
  [b552c78f] + DiffRules v1.0.1
  [31c24e10] + Distributions v0.23.11
  [ffbed154] + DocStringExtensions v0.8.3
  [1a297f60] + FillArrays v0.9.6
  [f6369f11] + ForwardDiff v0.10.12
  [069b7b12] + FunctionWrappers v1.1.1
  [19dc6840] + HCubature v1.4.0
  [7869d1d1] + IRTools v0.4.1
  [42fd0dbc] + IterativeSolvers v0.8.4
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [2ee39098] + LabelledArrays v1.3.0
  [bdcacae8] + LoopVectorization v0.8.26
  [1914dd2f] + MacroTools v0.5.5
  [e1d29d7a] + Missings v0.4.4
  [4886b29c] + MonteCarloIntegration v0.0.1
  [46d2c3a1] + MuladdMacro v0.2.2
  [872c559c] + NNlib v0.7.4
  [77ba4419] + NaNMath v0.3.4
  [6fe1bfb0] + OffsetArrays v1.2.0
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [bac558e1] + OrderedCollections v1.3.1
  [90014a1f] + PDMats v0.10.0
  [d96e819e] + Parameters v0.12.1
  [1fd47b50] + QuadGK v2.4.1
  [67601950] + Quadrature v1.4.0
  [3cdcf5f2] + RecipesBase v1.1.0
  [731186ca] + RecursiveArrayTools v2.7.0
  [f2c3362d] + RecursiveFactorization v0.1.4
  [189a3867] + Reexport v0.2.0
  [ae029012] + Requires v1.0.2
  [37e2e3b7] + ReverseDiff v1.4.3
  [79098fc4] + Rmath v0.6.1
  [f50d1b31] + Rmath_jll v0.2.2+1
  [f2b01f46] + Roots v1.0.5
  [21efa798] + SIMDPirates v0.8.25
  [476501e8] + SLEEFPirates v0.5.5
  [a2af1166] + SortingAlgorithms v0.3.1
  [276daf66] + SpecialFunctions v0.10.3
  [90137ffa] + StaticArrays v0.12.4
  [2913bbd2] + StatsBase v0.33.1
  [4c63d2b9] + StatsFuns v0.9.5
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.5
  [a2a6695c] + TreeViews v0.3.0
  [3a884ed6] + UnPack v1.0.2
  [3d5dd08c] + VectorizationBase v0.12.33
  [e88e6eb3] + Zygote v0.5.7
  [700de1a5] + ZygoteRules v0.2.0
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [4607b0f0] + SuiteSparse
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
   Building SLEEFPirates → `~/.julia/packages/SLEEFPirates/jGsib/deps/build.log`
    Testing DiffEqUncertainty
┌ Error: Pkg.Resolve.ResolverError("Unsatisfiable requirements detected for package Catalyst [479239e8]:\n Catalyst [479239e8] log:\n ├─possible versions are: 5.0.0-5.1.0 or uninstalled\n ├─restricted by compatibility requirements with DiffEqProblemLibrary [a077e3f3] to versions: 5.0.5-5.1.0\n │ └─DiffEqProblemLibrary [a077e3f3] log:\n │   ├─possible versions are: 3.0.0-4.9.1 or uninstalled\n │   ├─restricted to versions * by an explicit requirement, leaving only versions 3.0.0-4.9.1\n │   ├─restricted by compatibility requirements with DiffEqBase [2b5f629d] to versions: 4.2.0-4.9.1 or uninstalled, leaving only versions: 4.2.0-4.9.1\n │   │ └─DiffEqBase [2b5f629d] log:\n │   │   ├─possible versions are: 3.13.2-6.47.1 or uninstalled\n │   │   └─restricted to versions 6.47.1 by an explicit requirement, leaving only versions 6.47.1\n │   ├─restricted by compatibility requirements with ParameterizedFunctions [65888b18] to versions: 4.4.0-4.9.1 or uninstalled, leaving only versions: 4.4.0-4.9.1\n │   │ └─ParameterizedFunctions [65888b18] log:\n │   │   ├─possible versions are: 3.2.0-5.6.0 or uninstalled\n │   │   └─restricted by compatibility requirements with DataStructures [864edb3b] to versions: 5.5.0-5.6.0 or uninstalled\n │   │     └─DataStructures [864edb3b] log:\n │   │       ├─possible versions are: 0.9.0-0.18.6 or uninstalled\n │   │       └─restricted to versions 0.18.6 by an explicit requirement, leaving only versions 0.18.6\n │   ├─restricted by compatibility requirements with ModelingToolkit [961ee093] to versions: [3.0.0-4.3.0, 4.5.1-4.9.1] or uninstalled, leaving only versions: 4.5.1-4.9.1\n │   │ └─ModelingToolkit [961ee093] log:\n │   │   ├─possible versions are: 0.0.1-3.20.0 or uninstalled\n │   │   ├─restricted by compatibility requirements with DataStructures [864edb3b] to versions: [0.0.1-3.6.1, 3.17.0-3.20.0] or uninstalled\n │   │   │ └─DataStructures [864edb3b] log: see above\n │   │   ├─restricted by compatibility requirements with DiffRules [b552c78f] to versions: 1.1.0-3.20.0 or uninstalled, leaving only versions: [1.1.0-3.6.1, 3.17.0-3.20.0] or uninstalled\n │   │   │ └─DiffRules [b552c78f] log:\n │   │   │   ├─possible versions are: 0.0.8-1.0.1 or uninstalled\n │   │   │   └─restricted to versions 1.0.1 by an explicit requirement, leaving only versions 1.0.1\n │   │   ├─restricted by compatibility requirements with SpecialFunctions [276daf66] to versions: 1.1.3-3.20.0 or uninstalled, leaving only versions: [1.1.3-3.6.1, 3.17.0-3.20.0] or uninstalled\n │   │   │ └─SpecialFunctions [276daf66] log:\n │   │   │   ├─possible versions are: 0.7.0-0.10.3 or uninstalled\n │   │   │   └─restricted to versions 0.10.3 by an explicit requirement, leaving only versions 0.10.3\n │   │   ├─restricted by compatibility requirements with UnPack [3a884ed6] to versions: [0.0.1-2.0.0, 3.2.0-3.20.0] or uninstalled, leaving only versions: [1.1.3-2.0.0, 3.2.0-3.6.1, 3.17.0-3.20.0] or uninstalled\n │   │   │ └─UnPack [3a884ed6] log:\n │   │   │   ├─possible versions are: 0.1.0-1.0.2 or uninstalled\n │   │   │   └─restricted to versions 1.0.2 by an explicit requirement, leaving only versions 1.0.2\n │   │   ├─restricted by compatibility requirements with Latexify [23fbe1c1] to versions: [0.0.1-0.8.0, 1.2.7-3.20.0] or uninstalled, leaving only versions: [1.2.7-2.0.0, 3.2.0-3.6.1, 3.17.0-3.20.0] or uninstalled\n │   │   │ └─Latexify [23fbe1c1] log:\n │   │   │   ├─possible versions are: 0.5.0-0.14.0 or uninstalled\n │   │   │   ├─restricted by compatibility requirements with Requires [ae029012] to versions: 0.13.0-0.14.0 or uninstalled\n │   │   │   │ └─Requires [ae029012] log:\n │   │   │   │   ├─possible versions are: 0.5.0-1.0.2 or uninstalled\n │   │   │   │   └─restricted to versions 1.0.2 by an explicit requirement, leaving only versions 1.0.2\n │   │   │   └─restricted by compatibility requirements with ModelingToolkit [961ee093] to versions: 0.11.0-0.14.0, leaving only versions: 0.13.0-0.14.0\n │   │   │     └─ModelingToolkit [961ee093] log: see above\n │   │   └─restricted by compatibility requirements with DiffEqProblemLibrary [a077e3f3] to versions: 0.0.1-3.20.0, leaving only versions: [1.2.7-2.0.0, 3.2.0-3.6.1, 3.17.0-3.20.0]\n │   │     └─DiffEqProblemLibrary [a077e3f3] log: see above\n │   └─restricted by compatibility requirements with DiffEqBiological [eb300fae] to versions: 4.9.0-4.9.1 or uninstalled, leaving only versions: 4.9.0-4.9.1\n │     └─DiffEqBiological [eb300fae] log:\n │       ├─possible versions are: 3.0.0-4.3.0 or uninstalled\n │       ├─restricted by compatibility requirements with DataStructures [864edb3b] to versions: 4.0.0-4.0.2 or uninstalled\n │       │ └─DataStructures [864edb3b] log: see above\n │       └─restricted by compatibility requirements with RecipesBase [3cdcf5f2] to versions: [3.0.0-3.8.2, 4.3.0] or uninstalled, leaving only versions: uninstalled\n │         └─RecipesBase [3cdcf5f2] log:\n │           ├─possible versions are: 0.4.0-1.1.0 or uninstalled\n │           └─restricted to versions 1.1.0 by an explicit requirement, leaving only versions 1.1.0\n └─restricted by compatibility requirements with Catlab [134e5e36] to versions: 5.0.0-5.0.1 or uninstalled — no versions left\n   └─Catlab [134e5e36] log:\n     ├─possible versions are: 0.2.1-0.8.0 or uninstalled\n     ├─restricted by compatibility requirements with Requires [ae029012] to versions: [0.2.1, 0.5.3-0.8.0] or uninstalled\n     │ └─Requires [ae029012] log: see above\n     └─restricted by compatibility requirements with MetaGraphs [626554b9] to versions: uninstalled\n       └─MetaGraphs [626554b9] log:\n         ├─possible versions are: 0.5.0-0.6.5 or uninstalled\n         └─restricted by compatibility requirements with JLD2 [033835bb] to versions: uninstalled\n           └─JLD2 [033835bb] log:\n             ├─possible versions are: 0.1.0-0.2.0 or uninstalled\n             └─restricted by compatibility requirements with DataStructures [864edb3b] to versions: 0.2.0 or uninstalled\n               └─DataStructures [864edb3b] log: see above", nothing)
└ @ Pkg.Operations /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1428
Status `/tmp/jl_NA6n2C/Project.toml`
  [8a292aeb] Cuba v2.1.0
  [667455a9] Cubature v1.5.1
  [2b5f629d] DiffEqBase v6.44.3
  [071ae1c0] DiffEqGPU v1.8.0
  [a077e3f3] DiffEqProblemLibrary v4.8.1
  [41bf760c] DiffEqSensitivity v6.31.5
  [ef61062a] DiffEqUncertainty v1.5.0
  [31c24e10] Distributions v0.23.8
  [6a86dc24] FiniteDiff v2.6.0
  [f6369f11] ForwardDiff v0.10.12
  [1dea7af3] OrdinaryDiffEq v5.42.3
  [67601950] Quadrature v1.4.0
  [189a3867] Reexport v0.2.0
  [e88e6eb3] Zygote v0.5.7
  [10745b16] Statistics
  [8dfed614] Test
Status `/tmp/jl_NA6n2C/Manifest.toml`
  [c3fe647b] AbstractAlgebra v0.10.0
  [621f4979] AbstractFFTs v0.5.0
  [1520ce14] AbstractTrees v0.3.3
  [79e6a3ab] Adapt v2.1.0
  [ec485272] ArnoldiMethod v0.0.4
  [4fba245c] ArrayInterface v2.12.0
  [4c555306] ArrayLayouts v0.3.8
  [aae01518] BandedMatrices v0.15.15
  [b99e7846] BinaryProvider v0.5.10
  [8e7c35d0] BlockArrays v0.12.11
  [ffab5731] BlockBandedMatrices v0.8.11
  [fa961155] CEnum v0.4.1
  [052768ef] CUDA v1.3.3
  [a603d957] CanonicalTraits v0.2.2
  [7057c7e9] Cassette v0.3.3
  [082447d4] ChainRules v0.7.19
  [d360d2e6] ChainRulesCore v0.9.10
  [861a8166] Combinatorics v1.0.2
  [38540f10] CommonSolve v0.2.0
  [bbf7d656] CommonSubexpressions v0.3.0
  [34da2185] Compat v3.16.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [88cd18e8] ConsoleProgressMonitor v0.1.2
  [187b0558] ConstructionBase v1.0.0
  [adafc99b] CpuId v0.2.2
  [a8cc5b0e] Crayons v4.0.4
  [8a292aeb] Cuba v2.1.0
  [3bed1096] Cuba_jll v4.2.0+1
  [667455a9] Cubature v1.5.1
  [7bc98958] Cubature_jll v1.0.3+0
  [9a962f9c] DataAPI v1.3.0
  [864edb3b] DataStructures v0.17.20
  [e2d170a0] DataValueInterfaces v1.0.0
  [2b5f629d] DiffEqBase v6.44.3
  [eb300fae] DiffEqBiological v4.3.0
  [459566f4] DiffEqCallbacks v2.13.5
  [071ae1c0] DiffEqGPU v1.8.0
  [c894b116] DiffEqJump v6.10.0
  [77a26b50] DiffEqNoiseProcess v5.3.0
  [9fdde737] DiffEqOperators v4.12.0
  [a077e3f3] DiffEqProblemLibrary v4.8.1
  [41bf760c] DiffEqSensitivity v6.31.5
  [ef61062a] DiffEqUncertainty v1.5.0
  [163ba53b] DiffResults v1.0.2
  [b552c78f] DiffRules v1.0.1
  [b4f34e82] Distances v0.9.0
  [31c24e10] Distributions v0.23.8
  [ffbed154] DocStringExtensions v0.8.3
  [497a8b3b] DoubleFloats v1.1.13
  [7c1d4256] DynamicPolynomials v0.3.13
  [fdbdab4c] ElasticArrays v1.2.4
  [d4d017d3] ExponentialUtilities v1.8.0
  [e2ba6199] ExprTools v0.1.2
  [8f5d6c58] EzXML v1.1.0
  [7a1cc6ca] FFTW v1.2.4
  [f5851436] FFTW_jll v3.3.9+5
  [9aa1b823] FastClosures v0.3.2
  [1a297f60] FillArrays v0.8.14
  [6a86dc24] FiniteDiff v2.6.0
  [3dd14ad9] FixedPolynomials v0.4.0
  [59287772] Formatting v0.4.1
  [f6369f11] ForwardDiff v0.10.12
  [069b7b12] FunctionWrappers v1.1.1
  [781609d7] GMP_jll v6.2.0+2
  [0c68f7d7] GPUArrays v5.2.0
  [61eb1bfa] GPUCompiler v0.6.1
  [6b9d7cbe] GeneralizedGenerated v0.2.7
  [01680d73] GenericSVD v0.3.0
  [c145ed77] GenericSchur v0.4.0
  [19dc6840] HCubature v1.4.0
  [f213a82b] HomotopyContinuation v1.4.4
  [7869d1d1] IRTools v0.4.1
  [615f187c] IfElse v0.1.0
  [d25df0c9] Inflate v0.1.2
  [1d5cc7b8] IntelOpenMP_jll v2018.0.3+0
  [d8418881] Intervals v1.4.2
  [42fd0dbc] IterativeSolvers v0.8.4
  [82899510] IteratorInterfaceExtensions v1.0.0
  [b14d175d] JuliaVariables v0.2.3
  [63c18a36] KernelAbstractions v0.4.1
  [929cbde3] LLVM v2.0.0
  [b964fa9f] LaTeXStrings v1.1.0
  [2ee39098] LabelledArrays v1.3.0
  [23fbe1c1] Latexify v0.13.5
  [a5e1c1ea] LatinHypercubeSampling v1.6.4
  [5078a376] LazyArrays v0.16.16
  [d7e5e226] LazyBandedMatrices v0.2.12
  [1d6d02ad] LeftChildRightSiblingTrees v0.1.2
  [94ce4f54] Libiconv_jll v1.16.0+6
  [093fc24a] LightGraphs v1.3.3
  [d3d80556] LineSearches v7.1.0
  [e6f89c97] LoggingExtras v0.4.2
  [bdcacae8] LoopVectorization v0.8.26
  [856f044c] MKL_jll v2020.2.254+0
  [d8e11817] MLStyle v0.4.6
  [2ce0c516] MPC_jll v1.1.0+0
  [3a97d323] MPFR_jll v4.1.0+1
  [1914dd2f] MacroTools v0.5.5
  [a3b82374] MatrixFactorizations v0.5.2
  [e1d29d7a] Missings v0.4.4
  [291d046c] MixedSubdivisions v1.0.0
  [78c3b35d] Mocking v0.7.1
  [961ee093] ModelingToolkit v3.20.0
  [4886b29c] MonteCarloIntegration v0.0.1
  [46d2c3a1] MuladdMacro v0.2.2
  [102ac46a] MultivariatePolynomials v0.3.10
  [d8a4904e] MutableArithmetics v0.2.10
  [d41bc354] NLSolversBase v7.7.0
  [2774e3e8] NLsolve v4.4.1
  [872c559c] NNlib v0.7.4
  [77ba4419] NaNMath v0.3.4
  [71a1bf82] NameResolution v0.1.5
  [6fe1bfb0] OffsetArrays v1.2.0
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [bac558e1] OrderedCollections v1.3.1
  [1dea7af3] OrdinaryDiffEq v5.42.3
  [90014a1f] PDMats v0.10.0
  [d96e819e] Parameters v0.12.1
  [e409e4f3] PoissonRandom v0.4.0
  [f27b6e38] Polynomials v1.1.7
  [8162dcfd] PrettyPrint v0.2.0
  [08abe8d2] PrettyTables v0.9.1
  [33c8b6b6] ProgressLogging v0.1.3
  [92933f4c] ProgressMeter v1.3.3
  [01f381cc] ProjectiveVectors v1.1.2
  [1fd47b50] QuadGK v2.4.1
  [be4d8f0f] Quadmath v0.5.4
  [67601950] Quadrature v1.4.0
  [8a4e6c94] QuasiMonteCarlo v0.2.0
  [e6cf234a] RandomNumbers v1.4.0
  [3cdcf5f2] RecipesBase v1.1.0
  [731186ca] RecursiveArrayTools v2.7.0
  [f2c3362d] RecursiveFactorization v0.1.4
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v1.0.2
  [ae5879a3] ResettableStacks v1.0.0
  [37e2e3b7] ReverseDiff v1.4.3
  [79098fc4] Rmath v0.6.1
  [f50d1b31] Rmath_jll v0.2.2+1
  [f2b01f46] Roots v1.0.5
  [21efa798] SIMDPirates v0.8.25
  [476501e8] SLEEFPirates v0.5.5
  [1bc83da4] SafeTestsets v0.0.1
  [699a6c99] SimpleTraits v0.9.3
  [ed01d8cd] Sobol v1.4.0
  [a2af1166] SortingAlgorithms v0.3.1
  [47a9eef4] SparseDiffTools v1.10.0
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.4
  [62e018b1] StaticPolynomials v1.3.3
  [2913bbd2] StatsBase v0.33.1
  [4c63d2b9] StatsFuns v0.9.5
  [789caeaf] StochasticDiffEq v6.25.0
  [123dc426] SymEngine v0.8.2
  [3428059b] SymEngine_jll v0.6.0+1
  [d1185830] SymbolicUtils v0.5.1
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.5
  [5d786b92] TerminalLoggers v0.1.2
  [f269a46b] TimeZones v1.3.2
  [a759f4b9] TimerOutputs v0.5.6
  [9f7883ad] Tracker v0.2.11
  [a2a6695c] TreeViews v0.3.0
  [3a884ed6] UnPack v1.0.2
  [1986cc42] Unitful v1.4.0
  [3d5dd08c] VectorizationBase v0.12.33
  [19fa3120] VertexSafeGraphs v0.1.2
  [02c8fc9c] XML2_jll v2.9.10+2
  [83775a58] Zlib_jll v1.2.11+16
  [e88e6eb3] Zygote v0.5.7
  [700de1a5] ZygoteRules v0.2.0
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [4607b0f0] SuiteSparse
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Test Summary:  |
ProbInts tests | No tests
581.839856 seconds (73.24 M allocations: 4.683 GiB, 0.64% gc time)
[ Info: HCubatureJL()
[ Info: CubatureJLh()
[ Info: CubatureJLp()
[ Info: CubaSUAVE()
[ Info: CubaDivonne()
[ Info: CubaCuhre()
[ Info: HCubatureJL()
[ Info: CubatureJLh()
[ Info: CubatureJLp()
[ Info: CubaSUAVE()
[ Info: CubaDivonne()
[ Info: CubaCuhre()
[ Info: nout = 1, batch mode = EnsembleSerial(), CubatureJLh()
[ Info: nout = 1, batch mode = EnsembleSerial(), CubatureJLp()
[ Info: nout = 1, batch mode = EnsembleSerial(), CubaSUAVE()
[ Info: nout = 1, batch mode = EnsembleSerial(), CubaDivonne()
[ Info: nout = 1, batch mode = EnsembleSerial(), CubaCuhre()
[ Info: nout = 1, batch mode = EnsembleThreads(), CubatureJLh()
[ Info: nout = 1, batch mode = EnsembleThreads(), CubatureJLp()
[ Info: nout = 1, batch mode = EnsembleThreads(), CubaSUAVE()
[ Info: nout = 1, batch mode = EnsembleThreads(), CubaDivonne()
[ Info: nout = 1, batch mode = EnsembleThreads(), CubaCuhre()
[ Info: nout = 1, batch mode = EnsembleCPUArray(), CubatureJLh()
Koopman Expectation, nout = 1, batch: Error During Test at /home/pkgeval/.julia/packages/DiffEqUncertainty/FPK4O/test/koopman.jl:54
  Test threw exception
  Expression: ≈((expectation(g, prob, u0s_dist, p, Koopman(), Tsit5(), bmode; quadalg = alg, batch = 15))[1], analytical, rtol = 0.01)
  TaskFailedException
  Stacktrace:
    [1] (::Cubature.var"#17#18"{Bool, Bool, Int64, Float64, Float64, Int64, Int32, Ptr{Nothing}, Cubature.IntegrandData{Quadrature.var"#79#91"{QuadratureProblem{true, Vector{Float64}, DiffEqUncertainty.var"#13#26"{DiffEqUncertainty.var"#20#33", DiffEqUncertainty.var"#21#34", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, var"#g#3", ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, Tuple{Tsit5, EnsembleCPUArray}, Vector{Float64}, Vector{Any}, Vector{Bool}, Int64}, Vector{Float64}, Vector{Float64}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, Vector{Float64}}}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Int64})()
      @ Cubature ~/.julia/packages/Cubature/5zwuu/src/Cubature.jl:215
    [2] disable_sigint(f::Cubature.var"#17#18"{Bool, Bool, Int64, Float64, Float64, Int64, Int32, Ptr{Nothing}, Cubature.IntegrandData{Quadrature.var"#79#91"{QuadratureProblem{true, Vector{Float64}, DiffEqUncertainty.var"#13#26"{DiffEqUncertainty.var"#20#33", DiffEqUncertainty.var"#21#34", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, var"#g#3", ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, Tuple{Tsit5, EnsembleCPUArray}, Vector{Float64}, Vector{Any}, Vector{Bool}, Int64}, Vector{Float64}, Vector{Float64}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, Vector{Float64}}}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Int64})
      @ Base ./c.jl:458
    [3] cubature(xscalar::Bool, fscalar::Bool, vectorized::Bool, padaptive::Bool, fdim::Int64, f::Quadrature.var"#79#91"{QuadratureProblem{true, Vector{Float64}, DiffEqUncertainty.var"#13#26"{DiffEqUncertainty.var"#20#33", DiffEqUncertainty.var"#21#34", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, var"#g#3", ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, Tuple{Tsit5, EnsembleCPUArray}, Vector{Float64}, Vector{Any}, Vector{Bool}, Int64}, Vector{Float64}, Vector{Float64}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, Vector{Float64}}, xmin_::Vector{Float64}, xmax_::Vector{Float64}, reqRelError::Float64, reqAbsError::Float64, maxEval::Int64, error_norm::Int32)
      @ Cubature ~/.julia/packages/Cubature/5zwuu/src/Cubature.jl:169
    [4] hcubature_v(f::Function, xmin::Vector{Float64}, xmax::Vector{Float64}; reltol::Float64, abstol::Float64, maxevals::Int64)
      @ Cubature ~/.julia/packages/Cubature/5zwuu/src/Cubature.jl:230
    [5] __solvebp_call(::QuadratureProblem{true, Vector{Float64}, DiffEqUncertainty.var"#13#26"{DiffEqUncertainty.var"#20#33", DiffEqUncertainty.var"#21#34", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, var"#g#3", ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, Tuple{Tsit5, EnsembleCPUArray}, Vector{Float64}, Vector{Any}, Vector{Bool}, Int64}, Vector{Float64}, Vector{Float64}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, ::CubatureJLh, ::Quadrature.ReCallVJP{Quadrature.ZygoteVJP}, ::Vector{Float64}, ::Vector{Float64}, ::Vector{Float64}; reltol::Float64, abstol::Float64, maxiters::Int64, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Quadrature ~/.julia/packages/Quadrature/I6B8x/src/Quadrature.jl:303
    [6] #__solvebp#11
      @ ~/.julia/packages/Quadrature/I6B8x/src/Quadrature.jl:153 [inlined]
    [7] solve(::QuadratureProblem{true, Vector{Float64}, DiffEqUncertainty.var"#13#26"{DiffEqUncertainty.var"#20#33", DiffEqUncertainty.var"#21#34", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, var"#g#3", ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, Tuple{Tsit5, EnsembleCPUArray}, Vector{Float64}, Vector{Any}, Vector{Bool}, Int64}, Vector{Float64}, Vector{Float64}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, ::CubatureJLh; sensealg::Quadrature.ReCallVJP{Quadrature.ZygoteVJP}, kwargs::Base.Iterators.Pairs{Symbol, Real, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:reltol, :abstol, :maxiters), Tuple{Float64, Float64, Int64}}})
      @ Quadrature ~/.julia/packages/Quadrature/I6B8x/src/Quadrature.jl:149
    [8] expectation(::var"#g#3", ::ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, ::Vector{Uniform{Float64}}, ::Vector{Float64}, ::Koopman, ::Tsit5, ::Vararg{Any, N} where N; u0_CoV::DiffEqUncertainty.var"#20#33", p_CoV::DiffEqUncertainty.var"#21#34", maxiters::Int64, batch::Int64, quadalg::CubatureJLh, ireltol::Float64, iabstol::Float64, nout::Int64, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ DiffEqUncertainty ~/.julia/packages/DiffEqUncertainty/FPK4O/src/koopman.jl:102
    [9] top-level scope
      @ ~/.julia/packages/DiffEqUncertainty/FPK4O/test/koopman.jl:54
   [10] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
   [11] top-level scope
      @ ~/.julia/packages/DiffEqUncertainty/FPK4O/test/koopman.jl:45
  
      nested task error: MethodError: no method matching CartesianIndex(::Tuple{Base.OneTo{Int64}})
      Closest candidates are:
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:69
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:76
        CartesianIndex(!Matched::Tuple{var"#s9", var"#s1", var"#s12", Vararg{Any, N} where N} where var"#s12"<:VectorizationBase.Static where var"#s1"<:Integer where var"#s9"<:Integer) at /home/pkgeval/.julia/packages/VectorizationBase/so9eG/src/static.jl:18
        ...
      Stacktrace:
        [1] call(#unused#::Cassette.Context{nametype(CPUCtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{1}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}}, Nothing, KernelAbstractions.var"##PassType#242", Nothing, Cassette.DisableHooks}, f::Type, args::Tuple{Base.OneTo{Int64}})
          @ Cassette ~/.julia/packages/Cassette/158rp/src/context.jl:456
        [2] fallback(::Cassette.Context{nametype(CPUCtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{1}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}}, Nothing, KernelAbstractions.var"##PassType#242", Nothing, Cassette.DisableHooks}, ::Type, ::Vararg{Any, N} where N)
          @ Cassette ~/.julia/packages/Cassette/158rp/src/context.jl:454
        [3] overdub(::Cassette.Context{nametype(CPUCtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{1}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}}, Nothing, KernelAbstractions.var"##PassType#242", Nothing, Cassette.DisableHooks}, ::Type{CartesianIndex}, ::Tuple{Base.OneTo{Int64}})
          @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:536
        [4] first
          @ ./multidimensional.jl:388 [inlined]
        [5] overdub(::Cassette.Context{nametype(CPUCtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{1}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}}, Nothing, KernelAbstractions.var"##PassType#242", Nothing, Cassette.DisableHooks}, ::typeof(first), ::CartesianIndices{1, Tuple{Base.OneTo{Int64}}})
          @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
        [6] iterate
          @ ./multidimensional.jl:347 [inlined]
        [7] overdub(::Cassette.Context{nametype(CPUCtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{1}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}}, Nothing, KernelAbstractions.var"##PassType#242", Nothing, Cassette.DisableHooks}, ::typeof(iterate), ::CartesianIndices{1, Tuple{Base.OneTo{Int64}}})
          @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
        [8] cpu_gpu_kernel
          @ ./none:0 [inlined]
        [9] overdub(::Cassette.Context{nametype(CPUCtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{1}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}}, Nothing, KernelAbstractions.var"##PassType#242", Nothing, Cassette.DisableHooks}, ::typeof(DiffEqGPU.cpu_gpu_kernel), ::typeof(eom!), ::Matrix{Float64}, ::Matrix{Float64}, ::Matrix{Float64}, ::Float64)
          @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
       [10] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, typeof(DiffEqGPU.cpu_gpu_kernel)}, ndrange::Tuple{Int64}, iterspace::KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}, args::Tuple{typeof(eom!), Matrix{Float64}, Matrix{Float64}, Matrix{Float64}, Float64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
          @ KernelAbstractions ~/.julia/packages/KernelAbstractions/xslEz/src/backends/cpu.jl:150
       [11] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, typeof(DiffEqGPU.cpu_gpu_kernel)}, ndrange::Tuple{Int64}, iterspace::KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}, args::Tuple{typeof(eom!), Matrix{Float64}, Matrix{Float64}, Matrix{Float64}, Float64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
          @ KernelAbstractions ~/.julia/packages/KernelAbstractions/xslEz/src/backends/cpu.jl:123
       [12] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, typeof(DiffEqGPU.cpu_gpu_kernel)}, Tuple{Int64}, KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}, Tuple{typeof(eom!), Matrix{Float64}, Matrix{Float64}, Matrix{Float64}, Float64}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
          @ KernelAbstractions ~/.julia/packages/KernelAbstractions/xslEz/src/backends/cpu.jl:22
[ Info: nout = 1, batch mode = EnsembleCPUArray(), CubatureJLp()
Koopman Expectation, nout = 1, batch: Error During Test at /home/pkgeval/.julia/packages/DiffEqUncertainty/FPK4O/test/koopman.jl:54
  Test threw exception
  Expression: ≈((expectation(g, prob, u0s_dist, p, Koopman(), Tsit5(), bmode; quadalg = alg, batch = 15))[1], analytical, rtol = 0.01)
  TaskFailedException
  Stacktrace:
    [1] (::Cubature.var"#17#18"{Bool, Bool, Int64, Float64, Float64, Int64, Int32, Ptr{Nothing}, Cubature.IntegrandData{Quadrature.var"#79#91"{QuadratureProblem{true, Vector{Float64}, DiffEqUncertainty.var"#13#26"{DiffEqUncertainty.var"#20#33", DiffEqUncertainty.var"#21#34", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, var"#g#3", ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, Tuple{Tsit5, EnsembleCPUArray}, Vector{Float64}, Vector{Any}, Vector{Bool}, Int64}, Vector{Float64}, Vector{Float64}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, Vector{Float64}}}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Int64})()
      @ Cubature ~/.julia/packages/Cubature/5zwuu/src/Cubature.jl:215
    [2] disable_sigint(f::Cubature.var"#17#18"{Bool, Bool, Int64, Float64, Float64, Int64, Int32, Ptr{Nothing}, Cubature.IntegrandData{Quadrature.var"#79#91"{QuadratureProblem{true, Vector{Float64}, DiffEqUncertainty.var"#13#26"{DiffEqUncertainty.var"#20#33", DiffEqUncertainty.var"#21#34", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, var"#g#3", ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, Tuple{Tsit5, EnsembleCPUArray}, Vector{Float64}, Vector{Any}, Vector{Bool}, Int64}, Vector{Float64}, Vector{Float64}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, Vector{Float64}}}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Int64})
      @ Base ./c.jl:458
    [3] cubature(xscalar::Bool, fscalar::Bool, vectorized::Bool, padaptive::Bool, fdim::Int64, f::Quadrature.var"#79#91"{QuadratureProblem{true, Vector{Float64}, DiffEqUncertainty.var"#13#26"{DiffEqUncertainty.var"#20#33", DiffEqUncertainty.var"#21#34", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, var"#g#3", ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, Tuple{Tsit5, EnsembleCPUArray}, Vector{Float64}, Vector{Any}, Vector{Bool}, Int64}, Vector{Float64}, Vector{Float64}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, Vector{Float64}}, xmin_::Vector{Float64}, xmax_::Vector{Float64}, reqRelError::Float64, reqAbsError::Float64, maxEval::Int64, error_norm::Int32)
      @ Cubature ~/.julia/packages/Cubature/5zwuu/src/Cubature.jl:169
    [4] pcubature_v(f::Function, xmin::Vector{Float64}, xmax::Vector{Float64}; reltol::Float64, abstol::Float64, maxevals::Int64)
      @ Cubature ~/.julia/packages/Cubature/5zwuu/src/Cubature.jl:230
    [5] __solvebp_call(::QuadratureProblem{true, Vector{Float64}, DiffEqUncertainty.var"#13#26"{DiffEqUncertainty.var"#20#33", DiffEqUncertainty.var"#21#34", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, var"#g#3", ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, Tuple{Tsit5, EnsembleCPUArray}, Vector{Float64}, Vector{Any}, Vector{Bool}, Int64}, Vector{Float64}, Vector{Float64}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, ::CubatureJLp, ::Quadrature.ReCallVJP{Quadrature.ZygoteVJP}, ::Vector{Float64}, ::Vector{Float64}, ::Vector{Float64}; reltol::Float64, abstol::Float64, maxiters::Int64, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Quadrature ~/.julia/packages/Quadrature/I6B8x/src/Quadrature.jl:307
    [6] #__solvebp#11
      @ ~/.julia/packages/Quadrature/I6B8x/src/Quadrature.jl:153 [inlined]
    [7] solve(::QuadratureProblem{true, Vector{Float64}, DiffEqUncertainty.var"#13#26"{DiffEqUncertainty.var"#20#33", DiffEqUncertainty.var"#21#34", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, var"#g#3", ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, Tuple{Tsit5, EnsembleCPUArray}, Vector{Float64}, Vector{Any}, Vector{Bool}, Int64}, Vector{Float64}, Vector{Float64}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, ::CubatureJLp; sensealg::Quadrature.ReCallVJP{Quadrature.ZygoteVJP}, kwargs::Base.Iterators.Pairs{Symbol, Real, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:reltol, :abstol, :maxiters), Tuple{Float64, Float64, Int64}}})
      @ Quadrature ~/.julia/packages/Quadrature/I6B8x/src/Quadrature.jl:149
    [8] expectation(::var"#g#3", ::ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, ::Vector{Uniform{Float64}}, ::Vector{Float64}, ::Koopman, ::Tsit5, ::Vararg{Any, N} where N; u0_CoV::DiffEqUncertainty.var"#20#33", p_CoV::DiffEqUncertainty.var"#21#34", maxiters::Int64, batch::Int64, quadalg::CubatureJLp, ireltol::Float64, iabstol::Float64, nout::Int64, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ DiffEqUncertainty ~/.julia/packages/DiffEqUncertainty/FPK4O/src/koopman.jl:102
    [9] top-level scope
      @ ~/.julia/packages/DiffEqUncertainty/FPK4O/test/koopman.jl:54
   [10] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
   [11] top-level scope
      @ ~/.julia/packages/DiffEqUncertainty/FPK4O/test/koopman.jl:45
  
      nested task error: MethodError: no method matching CartesianIndex(::Tuple{Base.OneTo{Int64}})
      Closest candidates are:
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:69
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:76
        CartesianIndex(!Matched::Tuple{var"#s9", var"#s1", var"#s12", Vararg{Any, N} where N} where var"#s12"<:VectorizationBase.Static where var"#s1"<:Integer where var"#s9"<:Integer) at /home/pkgeval/.julia/packages/VectorizationBase/so9eG/src/static.jl:18
        ...
      Stacktrace:
        [1] call(#unused#::Cassette.Context{nametype(CPUCtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{1}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}}, Nothing, KernelAbstractions.var"##PassType#242", Nothing, Cassette.DisableHooks}, f::Type, args::Tuple{Base.OneTo{Int64}})
          @ Cassette ~/.julia/packages/Cassette/158rp/src/context.jl:456
        [2] fallback(::Cassette.Context{nametype(CPUCtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{1}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}}, Nothing, KernelAbstractions.var"##PassType#242", Nothing, Cassette.DisableHooks}, ::Type, ::Vararg{Any, N} where N)
          @ Cassette ~/.julia/packages/Cassette/158rp/src/context.jl:454
        [3] overdub(::Cassette.Context{nametype(CPUCtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{1}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}}, Nothing, KernelAbstractions.var"##PassType#242", Nothing, Cassette.DisableHooks}, ::Type{CartesianIndex}, ::Tuple{Base.OneTo{Int64}})
          @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:536
        [4] first
          @ ./multidimensional.jl:388 [inlined]
        [5] overdub(::Cassette.Context{nametype(CPUCtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{1}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}}, Nothing, KernelAbstractions.var"##PassType#242", Nothing, Cassette.DisableHooks}, ::typeof(first), ::CartesianIndices{1, Tuple{Base.OneTo{Int64}}})
          @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
        [6] iterate
          @ ./multidimensional.jl:347 [inlined]
        [7] overdub(::Cassette.Context{nametype(CPUCtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{1}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}}, Nothing, KernelAbstractions.var"##PassType#242", Nothing, Cassette.DisableHooks}, ::typeof(iterate), ::CartesianIndices{1, Tuple{Base.OneTo{Int64}}})
          @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
        [8] cpu_gpu_kernel
          @ ./none:0 [inlined]
        [9] overdub(::Cassette.Context{nametype(CPUCtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{1}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}}, Nothing, KernelAbstractions.var"##PassType#242", Nothing, Cassette.DisableHooks}, ::typeof(DiffEqGPU.cpu_gpu_kernel), ::typeof(eom!), ::Matrix{Float64}, ::Matrix{Float64}, ::Matrix{Float64}, ::Float64)
          @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
       [10] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, typeof(DiffEqGPU.cpu_gpu_kernel)}, ndrange::Tuple{Int64}, iterspace::KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}, args::Tuple{typeof(eom!), Matrix{Float64}, Matrix{Float64}, Matrix{Float64}, Float64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
          @ KernelAbstractions ~/.julia/packages/KernelAbstractions/xslEz/src/backends/cpu.jl:150
       [11] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, typeof(DiffEqGPU.cpu_gpu_kernel)}, ndrange::Tuple{Int64}, iterspace::KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}, args::Tuple{typeof(eom!), Matrix{Float64}, Matrix{Float64}, Matrix{Float64}, Float64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
          @ KernelAbstractions ~/.julia/packages/KernelAbstractions/xslEz/src/backends/cpu.jl:123
       [12] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, typeof(DiffEqGPU.cpu_gpu_kernel)}, Tuple{Int64}, KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}, Tuple{typeof(eom!), Matrix{Float64}, Matrix{Float64}, Matrix{Float64}, Float64}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
          @ KernelAbstractions ~/.julia/packages/KernelAbstractions/xslEz/src/backends/cpu.jl:22
[ Info: nout = 1, batch mode = EnsembleCPUArray(), CubaSUAVE()
Koopman Expectation, nout = 1, batch: Error During Test at /home/pkgeval/.julia/packages/DiffEqUncertainty/FPK4O/test/koopman.jl:54
  Test threw exception
  Expression: ≈((expectation(g, prob, u0s_dist, p, Koopman(), Tsit5(), bmode; quadalg = alg, batch = 15))[1], analytical, rtol = 0.01)
  TaskFailedException
  Stacktrace:
    [1] wait
      @ ./task.jl:303 [inlined]
    [2] wait
      @ ~/.julia/packages/KernelAbstractions/xslEz/src/backends/cpu.jl:65 [inlined]
    [3] wait
      @ ~/.julia/packages/KernelAbstractions/xslEz/src/backends/cpu.jl:64 [inlined]
    [4] (::DiffEqGPU.var"#34#38"{typeof(eom!)})(du::Matrix{Float64}, u::Matrix{Float64}, p::Matrix{Float64}, t::Float64)
      @ DiffEqGPU ~/.julia/packages/DiffEqGPU/TnpRW/src/DiffEqGPU.jl:252
    [5] ODEFunction
      @ ~/.julia/packages/DiffEqBase/V7P18/src/diffeqfunction.jl:248 [inlined]
    [6] initialize!(integrator::OrdinaryDiffEq.ODEIntegrator{Tsit5, true, Matrix{Float64}, Nothing, Float64, Matrix{Float64}, Float64, Float64, Float64, Vector{Matrix{Float64}}, ODESolution{Float64, 3, Vector{Matrix{Float64}}, Nothing, Nothing, Vector{Float64}, Vector{Vector{Matrix{Float64}}}, ODEProblem{Matrix{Float64}, Tuple{Float64, Float64}, true, Matrix{Float64}, ODEFunction{true, DiffEqGPU.var"#34#38"{typeof(eom!)}, LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, Tsit5, OrdinaryDiffEq.InterpolationData{ODEFunction{true, DiffEqGPU.var"#34#38"{typeof(eom!)}, LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Vector{Matrix{Float64}}, Vector{Float64}, Vector{Vector{Matrix{Float64}}}, OrdinaryDiffEq.Tsit5Cache{Matrix{Float64}, Matrix{Float64}, Matrix{Float64}, OrdinaryDiffEq.Tsit5ConstantCache{Float64, Float64}}}, DiffEqBase.DEStats}, ODEFunction{true, DiffEqGPU.var"#34#38"{typeof(eom!)}, LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, OrdinaryDiffEq.Tsit5Cache{Matrix{Float64}, Matrix{Float64}, Matrix{Float64}, OrdinaryDiffEq.Tsit5ConstantCache{Float64, Float64}}, OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, typeof(DiffEqGPU.diffeqgpunorm), typeof(LinearAlgebra.opnorm), CallbackSet{Tuple{}, Tuple{}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), DiffEqGPU.var"#6#12", DataStructures.BinaryMinHeap{Float64}, DataStructures.BinaryMinHeap{Float64}, Nothing, Nothing, Int64, Tuple{}, Tuple{}, Tuple{}}, Matrix{Float64}, Float64, Nothing, OrdinaryDiffEq.DefaultInit}, cache::OrdinaryDiffEq.Tsit5Cache{Matrix{Float64}, Matrix{Float64}, Matrix{Float64}, OrdinaryDiffEq.Tsit5ConstantCache{Float64, Float64}})
      @ OrdinaryDiffEq ~/.julia/packages/OrdinaryDiffEq/VPJBD/src/perform_step/low_order_rk_perform_step.jl:623
    [7] __init(prob::ODEProblem{Matrix{Float64}, Tuple{Float64, Float64}, true, Matrix{Float64}, ODEFunction{true, DiffEqGPU.var"#34#38"{typeof(eom!)}, LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, alg::Tsit5, timeseries_init::Tuple{}, ts_init::Tuple{}, ks_init::Tuple{}, recompile::Type{Val{true}}; saveat::Tuple{}, tstops::Tuple{}, d_discontinuities::Tuple{}, save_idxs::Nothing, save_everystep::Bool, save_on::Bool, save_start::Bool, save_end::Bool, callback::Nothing, dense::Bool, calck::Bool, dt::Float64, dtmin::Nothing, dtmax::Float64, force_dtmin::Bool, adaptive::Bool, gamma::Rational{Int64}, abstol::Nothing, reltol::Nothing, qmin::Rational{Int64}, qmax::Int64, qsteady_min::Int64, qsteady_max::Int64, qoldinit::Rational{Int64}, fullnormalize::Bool, failfactor::Int64, beta1::Nothing, beta2::Nothing, maxiters::Int64, internalnorm::typeof(DiffEqGPU.diffeqgpunorm), internalopnorm::typeof(LinearAlgebra.opnorm), isoutofdomain::typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), unstable_check::DiffEqGPU.var"#6#12", verbose::Bool, timeseries_errors::Bool, dense_errors::Bool, advance_to_tstop::Bool, stop_at_next_tstop::Bool, initialize_save::Bool, progress::Bool, progress_steps::Int64, progress_name::String, progress_message::typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), userdata::Nothing, allow_extrapolation::Bool, initialize_integrator::Bool, alias_u0::Bool, alias_du0::Bool, initializealg::OrdinaryDiffEq.DefaultInit, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ OrdinaryDiffEq ~/.julia/packages/OrdinaryDiffEq/VPJBD/src/solve.jl:406
    [8] #__solve#391
      @ ~/.julia/packages/OrdinaryDiffEq/VPJBD/src/solve.jl:4 [inlined]
    [9] solve_call(_prob::ODEProblem{Matrix{Float64}, Tuple{Float64, Float64}, true, Matrix{Float64}, ODEFunction{true, DiffEqGPU.var"#34#38"{typeof(eom!)}, LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, args::Tsit5; merge_callbacks::Bool, kwargs::Base.Iterators.Pairs{Symbol, Union{Nothing, Function}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:callback, :internalnorm, :unstable_check), Tuple{Nothing, typeof(DiffEqGPU.diffeqgpunorm), DiffEqGPU.var"#6#12"}}})
      @ DiffEqBase ~/.julia/packages/DiffEqBase/V7P18/src/solve.jl:92
   [10] #solve_up#461
      @ ~/.julia/packages/DiffEqBase/V7P18/src/solve.jl:114 [inlined]
   [11] #solve#460
      @ ~/.julia/packages/DiffEqBase/V7P18/src/solve.jl:102 [inlined]
   [12] batch_solve(ensembleprob::EnsembleProblem{ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, DiffEqUncertainty.var"#14#27"{Matrix{Float64}, Vector{Float64}, DiffEqUncertainty.var"#20#33", DiffEqUncertainty.var"#21#34", Vector{Float64}, Vector{Bool}, Int64}, DiffEqUncertainty.var"#16#29"{Matrix{Float64}, var"#g#3", Vector{Any}}, typeof(DiffEqBase.DEFAULT_REDUCTION), Nothing}, alg::Tsit5, ensemblealg::EnsembleCPUArray, I::UnitRange{Int64}; kwargs::Base.Iterators.Pairs{Symbol, DiffEqGPU.var"#6#12", Tuple{Symbol}, NamedTuple{(:unstable_check,), Tuple{DiffEqGPU.var"#6#12"}}})
      @ DiffEqGPU ~/.julia/packages/DiffEqGPU/TnpRW/src/DiffEqGPU.jl:238
   [13] macro expansion
      @ ./timing.jl:233 [inlined]
   [14] __solve(ensembleprob::EnsembleProblem{ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, DiffEqUncertainty.var"#14#27"{Matrix{Float64}, Vector{Float64}, DiffEqUncertainty.var"#20#33", DiffEqUncertainty.var"#21#34", Vector{Float64}, Vector{Bool}, Int64}, DiffEqUncertainty.var"#16#29"{Matrix{Float64}, var"#g#3", Vector{Any}}, typeof(DiffEqBase.DEFAULT_REDUCTION), Nothing}, alg::Tsit5, ensemblealg::EnsembleCPUArray; trajectories::Int64, batch_size::Int64, unstable_check::Function, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ DiffEqGPU ~/.julia/packages/DiffEqGPU/TnpRW/src/DiffEqGPU.jl:128
   [15] #solve#462
      @ ~/.julia/packages/DiffEqBase/V7P18/src/solve.jl:128 [inlined]
   [16] (::DiffEqUncertainty.var"#13#26"{DiffEqUncertainty.var"#20#33", DiffEqUncertainty.var"#21#34", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, var"#g#3", ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, Tuple{Tsit5, EnsembleCPUArray}, Vector{Float64}, Vector{Any}, Vector{Bool}, Int64})(dx::Matrix{Float64}, x::Matrix{Float64}, p::Vector{Float64})
      @ DiffEqUncertainty ~/.julia/packages/DiffEqUncertainty/FPK4O/src/koopman.jl:90
   [17] (::Quadrature.var"#112#128"{QuadratureProblem{true, Vector{Float64}, DiffEqUncertainty.var"#13#26"{DiffEqUncertainty.var"#20#33", DiffEqUncertainty.var"#21#34", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, var"#g#3", ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, Tuple{Tsit5, EnsembleCPUArray}, Vector{Float64}, Vector{Any}, Vector{Bool}, Int64}, Vector{Float64}, Vector{Float64}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, Vector{Float64}, Vector{Float64}, Vector{Float64}})(x::Matrix{Float64}, dx::Matrix{Float64})
      @ Quadrature ~/.julia/packages/Quadrature/I6B8x/src/Quadrature.jl:433
   [18] generic_integrand!(ndim::Int32, x_::Ptr{Float64}, ncomp::Int32, f_::Ptr{Float64}, func!::Quadrature.var"#112#128"{QuadratureProblem{true, Vector{Float64}, DiffEqUncertainty.var"#13#26"{DiffEqUncertainty.var"#20#33", DiffEqUncertainty.var"#21#34", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, var"#g#3", ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, Tuple{Tsit5, EnsembleCPUArray}, Vector{Float64}, Vector{Any}, Vector{Bool}, Int64}, Vector{Float64}, Vector{Float64}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, Vector{Float64}, Vector{Float64}, Vector{Float64}}, nvec::Int32)
      @ Cuba ~/.julia/packages/Cuba/S4YWA/src/Cuba.jl:100
   [19] dointegrate!
      @ ~/.julia/packages/Cuba/S4YWA/src/suave.jl:43 [inlined]
   [20] dointegrate
      @ ~/.julia/packages/Cuba/S4YWA/src/Cuba.jl:195 [inlined]
   [21] suave(integrand::Quadrature.var"#112#128"{QuadratureProblem{true, Vector{Float64}, DiffEqUncertainty.var"#13#26"{DiffEqUncertainty.var"#20#33", DiffEqUncertainty.var"#21#34", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, var"#g#3", ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, Tuple{Tsit5, EnsembleCPUArray}, Vector{Float64}, Vector{Any}, Vector{Bool}, Int64}, Vector{Float64}, Vector{Float64}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, Vector{Float64}, Vector{Float64}, Vector{Float64}}, ndim::Int64, ncomp::Int64; nvec::Int64, rtol::Float64, atol::Float64, flags::Int64, seed::Int64, minevals::Int64, maxevals::Int64, nnew::Int64, nmin::Int64, flatness::Float64, statefile::String, spin::Ptr{Nothing}, reltol::Missing, abstol::Missing)
      @ Cuba ~/.julia/packages/Cuba/S4YWA/src/suave.jl:104
   [22] __solvebp_call(::QuadratureProblem{true, Vector{Float64}, DiffEqUncertainty.var"#13#26"{DiffEqUncertainty.var"#20#33", DiffEqUncertainty.var"#21#34", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, var"#g#3", ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, Tuple{Tsit5, EnsembleCPUArray}, Vector{Float64}, Vector{Any}, Vector{Bool}, Int64}, Vector{Float64}, Vector{Float64}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, ::CubaSUAVE, ::Quadrature.ReCallVJP{Quadrature.ZygoteVJP}, ::Vector{Float64}, ::Vector{Float64}, ::Vector{Float64}; reltol::Float64, abstol::Float64, maxiters::Int64, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Quadrature ~/.julia/packages/Quadrature/I6B8x/src/Quadrature.jl:459
   [23] #__solvebp#11
      @ ~/.julia/packages/Quadrature/I6B8x/src/Quadrature.jl:153 [inlined]
   [24] solve(::QuadratureProblem{true, Vector{Float64}, DiffEqUncertainty.var"#13#26"{DiffEqUncertainty.var"#20#33", DiffEqUncertainty.var"#21#34", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, var"#g#3", ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, Tuple{Tsit5, EnsembleCPUArray}, Vector{Float64}, Vector{Any}, Vector{Bool}, Int64}, Vector{Float64}, Vector{Float64}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, ::CubaSUAVE; sensealg::Quadrature.ReCallVJP{Quadrature.ZygoteVJP}, kwargs::Base.Iterators.Pairs{Symbol, Real, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:reltol, :abstol, :maxiters), Tuple{Float64, Float64, Int64}}})
      @ Quadrature ~/.julia/packages/Quadrature/I6B8x/src/Quadrature.jl:149
   [25] expectation(::var"#g#3", ::ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, ::Vector{Uniform{Float64}}, ::Vector{Float64}, ::Koopman, ::Tsit5, ::Vararg{Any, N} where N; u0_CoV::DiffEqUncertainty.var"#20#33", p_CoV::DiffEqUncertainty.var"#21#34", maxiters::Int64, batch::Int64, quadalg::CubaSUAVE, ireltol::Float64, iabstol::Float64, nout::Int64, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ DiffEqUncertainty ~/.julia/packages/DiffEqUncertainty/FPK4O/src/koopman.jl:102
   [26] top-level scope
      @ ~/.julia/packages/DiffEqUncertainty/FPK4O/test/koopman.jl:54
   [27] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
   [28] top-level scope
      @ ~/.julia/packages/DiffEqUncertainty/FPK4O/test/koopman.jl:45
  
      nested task error: MethodError: no method matching CartesianIndex(::Tuple{Base.OneTo{Int64}})
      Closest candidates are:
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:69
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:76
        CartesianIndex(!Matched::Tuple{var"#s9", var"#s1", var"#s12", Vararg{Any, N} where N} where var"#s12"<:VectorizationBase.Static where var"#s1"<:Integer where var"#s9"<:Integer) at /home/pkgeval/.julia/packages/VectorizationBase/so9eG/src/static.jl:18
        ...
      Stacktrace:
        [1] call(#unused#::Cassette.Context{nametype(CPUCtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{1}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}}, Nothing, KernelAbstractions.var"##PassType#242", Nothing, Cassette.DisableHooks}, f::Type, args::Tuple{Base.OneTo{Int64}})
          @ Cassette ~/.julia/packages/Cassette/158rp/src/context.jl:456
        [2] fallback(::Cassette.Context{nametype(CPUCtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{1}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}}, Nothing, KernelAbstractions.var"##PassType#242", Nothing, Cassette.DisableHooks}, ::Type, ::Vararg{Any, N} where N)
          @ Cassette ~/.julia/packages/Cassette/158rp/src/context.jl:454
        [3] overdub(::Cassette.Context{nametype(CPUCtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{1}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}}, Nothing, KernelAbstractions.var"##PassType#242", Nothing, Cassette.DisableHooks}, ::Type{CartesianIndex}, ::Tuple{Base.OneTo{Int64}})
          @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:536
        [4] first
          @ ./multidimensional.jl:388 [inlined]
        [5] overdub(::Cassette.Context{nametype(CPUCtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{1}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}}, Nothing, KernelAbstractions.var"##PassType#242", Nothing, Cassette.DisableHooks}, ::typeof(first), ::CartesianIndices{1, Tuple{Base.OneTo{Int64}}})
          @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
        [6] iterate
          @ ./multidimensional.jl:347 [inlined]
        [7] overdub(::Cassette.Context{nametype(CPUCtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{1}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}}, Nothing, KernelAbstractions.var"##PassType#242", Nothing, Cassette.DisableHooks}, ::typeof(iterate), ::CartesianIndices{1, Tuple{Base.OneTo{Int64}}})
          @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
        [8] cpu_gpu_kernel
          @ ./none:0 [inlined]
        [9] overdub(::Cassette.Context{nametype(CPUCtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{1}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}}, Nothing, KernelAbstractions.var"##PassType#242", Nothing, Cassette.DisableHooks}, ::typeof(DiffEqGPU.cpu_gpu_kernel), ::typeof(eom!), ::Matrix{Float64}, ::Matrix{Float64}, ::Matrix{Float64}, ::Float64)
          @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
       [10] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, typeof(DiffEqGPU.cpu_gpu_kernel)}, ndrange::Tuple{Int64}, iterspace::KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}, args::Tuple{typeof(eom!), Matrix{Float64}, Matrix{Float64}, Matrix{Float64}, Float64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
          @ KernelAbstractions ~/.julia/packages/KernelAbstractions/xslEz/src/backends/cpu.jl:150
       [11] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, typeof(DiffEqGPU.cpu_gpu_kernel)}, ndrange::Tuple{Int64}, iterspace::KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}, args::Tuple{typeof(eom!), Matrix{Float64}, Matrix{Float64}, Matrix{Float64}, Float64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
          @ KernelAbstractions ~/.julia/packages/KernelAbstractions/xslEz/src/backends/cpu.jl:123
       [12] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, typeof(DiffEqGPU.cpu_gpu_kernel)}, Tuple{Int64}, KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}, Tuple{typeof(eom!), Matrix{Float64}, Matrix{Float64}, Matrix{Float64}, Float64}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
          @ KernelAbstractions ~/.julia/packages/KernelAbstractions/xslEz/src/backends/cpu.jl:22
[ Info: nout = 1, batch mode = EnsembleCPUArray(), CubaDivonne()
Koopman Expectation, nout = 1, batch: Error During Test at /home/pkgeval/.julia/packages/DiffEqUncertainty/FPK4O/test/koopman.jl:54
  Test threw exception
  Expression: ≈((expectation(g, prob, u0s_dist, p, Koopman(), Tsit5(), bmode; quadalg = alg, batch = 15))[1], analytical, rtol = 0.01)
  TaskFailedException
  Stacktrace:
    [1] wait
      @ ./task.jl:303 [inlined]
    [2] wait
      @ ~/.julia/packages/KernelAbstractions/xslEz/src/backends/cpu.jl:65 [inlined]
    [3] wait
      @ ~/.julia/packages/KernelAbstractions/xslEz/src/backends/cpu.jl:64 [inlined]
    [4] (::DiffEqGPU.var"#34#38"{typeof(eom!)})(du::Matrix{Float64}, u::Matrix{Float64}, p::Matrix{Float64}, t::Float64)
      @ DiffEqGPU ~/.julia/packages/DiffEqGPU/TnpRW/src/DiffEqGPU.jl:252
    [5] ODEFunction
      @ ~/.julia/packages/DiffEqBase/V7P18/src/diffeqfunction.jl:248 [inlined]
    [6] initialize!(integrator::OrdinaryDiffEq.ODEIntegrator{Tsit5, true, Matrix{Float64}, Nothing, Float64, Matrix{Float64}, Float64, Float64, Float64, Vector{Matrix{Float64}}, ODESolution{Float64, 3, Vector{Matrix{Float64}}, Nothing, Nothing, Vector{Float64}, Vector{Vector{Matrix{Float64}}}, ODEProblem{Matrix{Float64}, Tuple{Float64, Float64}, true, Matrix{Float64}, ODEFunction{true, DiffEqGPU.var"#34#38"{typeof(eom!)}, LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, Tsit5, OrdinaryDiffEq.InterpolationData{ODEFunction{true, DiffEqGPU.var"#34#38"{typeof(eom!)}, LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Vector{Matrix{Float64}}, Vector{Float64}, Vector{Vector{Matrix{Float64}}}, OrdinaryDiffEq.Tsit5Cache{Matrix{Float64}, Matrix{Float64}, Matrix{Float64}, OrdinaryDiffEq.Tsit5ConstantCache{Float64, Float64}}}, DiffEqBase.DEStats}, ODEFunction{true, DiffEqGPU.var"#34#38"{typeof(eom!)}, LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, OrdinaryDiffEq.Tsit5Cache{Matrix{Float64}, Matrix{Float64}, Matrix{Float64}, OrdinaryDiffEq.Tsit5ConstantCache{Float64, Float64}}, OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, typeof(DiffEqGPU.diffeqgpunorm), typeof(LinearAlgebra.opnorm), CallbackSet{Tuple{}, Tuple{}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), DiffEqGPU.var"#6#12", DataStructures.BinaryMinHeap{Float64}, DataStructures.BinaryMinHeap{Float64}, Nothing, Nothing, Int64, Tuple{}, Tuple{}, Tuple{}}, Matrix{Float64}, Float64, Nothing, OrdinaryDiffEq.DefaultInit}, cache::OrdinaryDiffEq.Tsit5Cache{Matrix{Float64}, Matrix{Float64}, Matrix{Float64}, OrdinaryDiffEq.Tsit5ConstantCache{Float64, Float64}})
      @ OrdinaryDiffEq ~/.julia/packages/OrdinaryDiffEq/VPJBD/src/perform_step/low_order_rk_perform_step.jl:623
    [7] __init(prob::ODEProblem{Matrix{Float64}, Tuple{Float64, Float64}, true, Matrix{Float64}, ODEFunction{true, DiffEqGPU.var"#34#38"{typeof(eom!)}, LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, alg::Tsit5, timeseries_init::Tuple{}, ts_init::Tuple{}, ks_init::Tuple{}, recompile::Type{Val{true}}; saveat::Tuple{}, tstops::Tuple{}, d_discontinuities::Tuple{}, save_idxs::Nothing, save_everystep::Bool, save_on::Bool, save_start::Bool, save_end::Bool, callback::Nothing, dense::Bool, calck::Bool, dt::Float64, dtmin::Nothing, dtmax::Float64, force_dtmin::Bool, adaptive::Bool, gamma::Rational{Int64}, abstol::Nothing, reltol::Nothing, qmin::Rational{Int64}, qmax::Int64, qsteady_min::Int64, qsteady_max::Int64, qoldinit::Rational{Int64}, fullnormalize::Bool, failfactor::Int64, beta1::Nothing, beta2::Nothing, maxiters::Int64, internalnorm::typeof(DiffEqGPU.diffeqgpunorm), internalopnorm::typeof(LinearAlgebra.opnorm), isoutofdomain::typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), unstable_check::DiffEqGPU.var"#6#12", verbose::Bool, timeseries_errors::Bool, dense_errors::Bool, advance_to_tstop::Bool, stop_at_next_tstop::Bool, initialize_save::Bool, progress::Bool, progress_steps::Int64, progress_name::String, progress_message::typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), userdata::Nothing, allow_extrapolation::Bool, initialize_integrator::Bool, alias_u0::Bool, alias_du0::Bool, initializealg::OrdinaryDiffEq.DefaultInit, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ OrdinaryDiffEq ~/.julia/packages/OrdinaryDiffEq/VPJBD/src/solve.jl:406
    [8] #__solve#391
      @ ~/.julia/packages/OrdinaryDiffEq/VPJBD/src/solve.jl:4 [inlined]
    [9] solve_call(_prob::ODEProblem{Matrix{Float64}, Tuple{Float64, Float64}, true, Matrix{Float64}, ODEFunction{true, DiffEqGPU.var"#34#38"{typeof(eom!)}, LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, args::Tsit5; merge_callbacks::Bool, kwargs::Base.Iterators.Pairs{Symbol, Union{Nothing, Function}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:callback, :internalnorm, :unstable_check), Tuple{Nothing, typeof(DiffEqGPU.diffeqgpunorm), DiffEqGPU.var"#6#12"}}})
      @ DiffEqBase ~/.julia/packages/DiffEqBase/V7P18/src/solve.jl:92
   [10] #solve_up#461
      @ ~/.julia/packages/DiffEqBase/V7P18/src/solve.jl:114 [inlined]
   [11] #solve#460
      @ ~/.julia/packages/DiffEqBase/V7P18/src/solve.jl:102 [inlined]
   [12] batch_solve(ensembleprob::EnsembleProblem{ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, DiffEqUncertainty.var"#14#27"{Matrix{Float64}, Vector{Float64}, DiffEqUncertainty.var"#20#33", DiffEqUncertainty.var"#21#34", Vector{Float64}, Vector{Bool}, Int64}, DiffEqUncertainty.var"#16#29"{Matrix{Float64}, var"#g#3", Vector{Any}}, typeof(DiffEqBase.DEFAULT_REDUCTION), Nothing}, alg::Tsit5, ensemblealg::EnsembleCPUArray, I::UnitRange{Int64}; kwargs::Base.Iterators.Pairs{Symbol, DiffEqGPU.var"#6#12", Tuple{Symbol}, NamedTuple{(:unstable_check,), Tuple{DiffEqGPU.var"#6#12"}}})
      @ DiffEqGPU ~/.julia/packages/DiffEqGPU/TnpRW/src/DiffEqGPU.jl:238
   [13] macro expansion
      @ ./timing.jl:233 [inlined]
   [14] __solve(ensembleprob::EnsembleProblem{ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, DiffEqUncertainty.var"#14#27"{Matrix{Float64}, Vector{Float64}, DiffEqUncertainty.var"#20#33", DiffEqUncertainty.var"#21#34", Vector{Float64}, Vector{Bool}, Int64}, DiffEqUncertainty.var"#16#29"{Matrix{Float64}, var"#g#3", Vector{Any}}, typeof(DiffEqBase.DEFAULT_REDUCTION), Nothing}, alg::Tsit5, ensemblealg::EnsembleCPUArray; trajectories::Int64, batch_size::Int64, unstable_check::Function, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ DiffEqGPU ~/.julia/packages/DiffEqGPU/TnpRW/src/DiffEqGPU.jl:128
   [15] #solve#462
      @ ~/.julia/packages/DiffEqBase/V7P18/src/solve.jl:128 [inlined]
   [16] (::DiffEqUncertainty.var"#13#26"{DiffEqUncertainty.var"#20#33", DiffEqUncertainty.var"#21#34", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, var"#g#3", ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, Tuple{Tsit5, EnsembleCPUArray}, Vector{Float64}, Vector{Any}, Vector{Bool}, Int64})(dx::Matrix{Float64}, x::Matrix{Float64}, p::Vector{Float64})
      @ DiffEqUncertainty ~/.julia/packages/DiffEqUncertainty/FPK4O/src/koopman.jl:90
   [17] (::Quadrature.var"#112#128"{QuadratureProblem{true, Vector{Float64}, DiffEqUncertainty.var"#13#26"{DiffEqUncertainty.var"#20#33", DiffEqUncertainty.var"#21#34", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, var"#g#3", ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, Tuple{Tsit5, EnsembleCPUArray}, Vector{Float64}, Vector{Any}, Vector{Bool}, Int64}, Vector{Float64}, Vector{Float64}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, Vector{Float64}, Vector{Float64}, Vector{Float64}})(x::Matrix{Float64}, dx::Matrix{Float64})
      @ Quadrature ~/.julia/packages/Quadrature/I6B8x/src/Quadrature.jl:433
   [18] generic_integrand!(ndim::Int32, x_::Ptr{Float64}, ncomp::Int32, f_::Ptr{Float64}, func!::Quadrature.var"#112#128"{QuadratureProblem{true, Vector{Float64}, DiffEqUncertainty.var"#13#26"{DiffEqUncertainty.var"#20#33", DiffEqUncertainty.var"#21#34", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, var"#g#3", ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, Tuple{Tsit5, EnsembleCPUArray}, Vector{Float64}, Vector{Any}, Vector{Bool}, Int64}, Vector{Float64}, Vector{Float64}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, Vector{Float64}, Vector{Float64}, Vector{Float64}}, nvec::Int32)
      @ Cuba ~/.julia/packages/Cuba/S4YWA/src/Cuba.jl:100
   [19] dointegrate!
      @ ~/.julia/packages/Cuba/S4YWA/src/divonne.jl:52 [inlined]
   [20] dointegrate
      @ ~/.julia/packages/Cuba/S4YWA/src/Cuba.jl:195 [inlined]
   [21] divonne(integrand::Quadrature.var"#112#128"{QuadratureProblem{true, Vector{Float64}, DiffEqUncertainty.var"#13#26"{DiffEqUncertainty.var"#20#33", DiffEqUncertainty.var"#21#34", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, var"#g#3", ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, Tuple{Tsit5, EnsembleCPUArray}, Vector{Float64}, Vector{Any}, Vector{Bool}, Int64}, Vector{Float64}, Vector{Float64}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, Vector{Float64}, Vector{Float64}, Vector{Float64}}, ndim::Int64, ncomp::Int64; nvec::Int64, rtol::Float64, atol::Float64, flags::Int64, seed::Int64, minevals::Int64, maxevals::Int64, key1::Int64, key2::Int64, key3::Int64, maxpass::Int64, border::Float64, maxchisq::Float64, mindeviation::Float64, ngiven::Int64, ldxgiven::Int64, xgiven::Matrix{Float64}, nextra::Int64, peakfinder::Ptr{Nothing}, statefile::String, spin::Ptr{Nothing}, reltol::Missing, abstol::Missing)
      @ Cuba ~/.julia/packages/Cuba/S4YWA/src/divonne.jl:145
   [22] __solvebp_call(::QuadratureProblem{true, Vector{Float64}, DiffEqUncertainty.var"#13#26"{DiffEqUncertainty.var"#20#33", DiffEqUncertainty.var"#21#34", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, var"#g#3", ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, Tuple{Tsit5, EnsembleCPUArray}, Vector{Float64}, Vector{Any}, Vector{Bool}, Int64}, Vector{Float64}, Vector{Float64}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, ::CubaDivonne, ::Quadrature.ReCallVJP{Quadrature.ZygoteVJP}, ::Vector{Float64}, ::Vector{Float64}, ::Vector{Float64}; reltol::Float64, abstol::Float64, maxiters::Int64, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Quadrature ~/.julia/packages/Quadrature/I6B8x/src/Quadrature.jl:463
   [23] #__solvebp#11
      @ ~/.julia/packages/Quadrature/I6B8x/src/Quadrature.jl:153 [inlined]
   [24] solve(::QuadratureProblem{true, Vector{Float64}, DiffEqUncertainty.var"#13#26"{DiffEqUncertainty.var"#20#33", DiffEqUncertainty.var"#21#34", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, var"#g#3", ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, Tuple{Tsit5, EnsembleCPUArray}, Vector{Float64}, Vector{Any}, Vector{Bool}, Int64}, Vector{Float64}, Vector{Float64}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, ::CubaDivonne; sensealg::Quadrature.ReCallVJP{Quadrature.ZygoteVJP}, kwargs::Base.Iterators.Pairs{Symbol, Real, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:reltol, :abstol, :maxiters), Tuple{Float64, Float64, Int64}}})
      @ Quadrature ~/.julia/packages/Quadrature/I6B8x/src/Quadrature.jl:149
   [25] expectation(::var"#g#3", ::ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, ::Vector{Uniform{Float64}}, ::Vector{Float64}, ::Koopman, ::Tsit5, ::Vararg{Any, N} where N; u0_CoV::DiffEqUncertainty.var"#20#33", p_CoV::DiffEqUncertainty.var"#21#34", maxiters::Int64, batch::Int64, quadalg::CubaDivonne, ireltol::Float64, iabstol::Float64, nout::Int64, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ DiffEqUncertainty ~/.julia/packages/DiffEqUncertainty/FPK4O/src/koopman.jl:102
   [26] top-level scope
      @ ~/.julia/packages/DiffEqUncertainty/FPK4O/test/koopman.jl:54
   [27] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
   [28] top-level scope
      @ ~/.julia/packages/DiffEqUncertainty/FPK4O/test/koopman.jl:45
  
      nested task error: MethodError: no method matching CartesianIndex(::Tuple{Base.OneTo{Int64}})
      Closest candidates are:
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:69
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:76
        CartesianIndex(!Matched::Tuple{var"#s9", var"#s1", var"#s12", Vararg{Any, N} where N} where var"#s12"<:VectorizationBase.Static where var"#s1"<:Integer where var"#s9"<:Integer) at /home/pkgeval/.julia/packages/VectorizationBase/so9eG/src/static.jl:18
        ...
      Stacktrace:
        [1] call(#unused#::Cassette.Context{nametype(CPUCtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{1}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}}, Nothing, KernelAbstractions.var"##PassType#242", Nothing, Cassette.DisableHooks}, f::Type, args::Tuple{Base.OneTo{Int64}})
          @ Cassette ~/.julia/packages/Cassette/158rp/src/context.jl:456
        [2] fallback(::Cassette.Context{nametype(CPUCtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{1}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}}, Nothing, KernelAbstractions.var"##PassType#242", Nothing, Cassette.DisableHooks}, ::Type, ::Vararg{Any, N} where N)
          @ Cassette ~/.julia/packages/Cassette/158rp/src/context.jl:454
        [3] overdub(::Cassette.Context{nametype(CPUCtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{1}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}}, Nothing, KernelAbstractions.var"##PassType#242", Nothing, Cassette.DisableHooks}, ::Type{CartesianIndex}, ::Tuple{Base.OneTo{Int64}})
          @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:536
        [4] first
          @ ./multidimensional.jl:388 [inlined]
        [5] overdub(::Cassette.Context{nametype(CPUCtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{1}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}}, Nothing, KernelAbstractions.var"##PassType#242", Nothing, Cassette.DisableHooks}, ::typeof(first), ::CartesianIndices{1, Tuple{Base.OneTo{Int64}}})
          @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
        [6] iterate
          @ ./multidimensional.jl:347 [inlined]
        [7] overdub(::Cassette.Context{nametype(CPUCtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{1}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}}, Nothing, KernelAbstractions.var"##PassType#242", Nothing, Cassette.DisableHooks}, ::typeof(iterate), ::CartesianIndices{1, Tuple{Base.OneTo{Int64}}})
          @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
        [8] cpu_gpu_kernel
          @ ./none:0 [inlined]
        [9] overdub(::Cassette.Context{nametype(CPUCtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{1}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}}, Nothing, KernelAbstractions.var"##PassType#242", Nothing, Cassette.DisableHooks}, ::typeof(DiffEqGPU.cpu_gpu_kernel), ::typeof(eom!), ::Matrix{Float64}, ::Matrix{Float64}, ::Matrix{Float64}, ::Float64)
          @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
       [10] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, typeof(DiffEqGPU.cpu_gpu_kernel)}, ndrange::Tuple{Int64}, iterspace::KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}, args::Tuple{typeof(eom!), Matrix{Float64}, Matrix{Float64}, Matrix{Float64}, Float64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
          @ KernelAbstractions ~/.julia/packages/KernelAbstractions/xslEz/src/backends/cpu.jl:150
       [11] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, typeof(DiffEqGPU.cpu_gpu_kernel)}, ndrange::Tuple{Int64}, iterspace::KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}, args::Tuple{typeof(eom!), Matrix{Float64}, Matrix{Float64}, Matrix{Float64}, Float64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
          @ KernelAbstractions ~/.julia/packages/KernelAbstractions/xslEz/src/backends/cpu.jl:123
       [12] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, typeof(DiffEqGPU.cpu_gpu_kernel)}, Tuple{Int64}, KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}, Tuple{typeof(eom!), Matrix{Float64}, Matrix{Float64}, Matrix{Float64}, Float64}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
          @ KernelAbstractions ~/.julia/packages/KernelAbstractions/xslEz/src/backends/cpu.jl:22
[ Info: nout = 1, batch mode = EnsembleCPUArray(), CubaCuhre()
Koopman Expectation, nout = 1, batch: Error During Test at /home/pkgeval/.julia/packages/DiffEqUncertainty/FPK4O/test/koopman.jl:54
  Test threw exception
  Expression: ≈((expectation(g, prob, u0s_dist, p, Koopman(), Tsit5(), bmode; quadalg = alg, batch = 15))[1], analytical, rtol = 0.01)
  TaskFailedException
  Stacktrace:
    [1] wait
      @ ./task.jl:303 [inlined]
    [2] wait
      @ ~/.julia/packages/KernelAbstractions/xslEz/src/backends/cpu.jl:65 [inlined]
    [3] wait
      @ ~/.julia/packages/KernelAbstractions/xslEz/src/backends/cpu.jl:64 [inlined]
    [4] (::DiffEqGPU.var"#34#38"{typeof(eom!)})(du::Matrix{Float64}, u::Matrix{Float64}, p::Matrix{Float64}, t::Float64)
      @ DiffEqGPU ~/.julia/packages/DiffEqGPU/TnpRW/src/DiffEqGPU.jl:252
    [5] ODEFunction
      @ ~/.julia/packages/DiffEqBase/V7P18/src/diffeqfunction.jl:248 [inlined]
    [6] initialize!(integrator::OrdinaryDiffEq.ODEIntegrator{Tsit5, true, Matrix{Float64}, Nothing, Float64, Matrix{Float64}, Float64, Float64, Float64, Vector{Matrix{Float64}}, ODESolution{Float64, 3, Vector{Matrix{Float64}}, Nothing, Nothing, Vector{Float64}, Vector{Vector{Matrix{Float64}}}, ODEProblem{Matrix{Float64}, Tuple{Float64, Float64}, true, Matrix{Float64}, ODEFunction{true, DiffEqGPU.var"#34#38"{typeof(eom!)}, LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, Tsit5, OrdinaryDiffEq.InterpolationData{ODEFunction{true, DiffEqGPU.var"#34#38"{typeof(eom!)}, LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Vector{Matrix{Float64}}, Vector{Float64}, Vector{Vector{Matrix{Float64}}}, OrdinaryDiffEq.Tsit5Cache{Matrix{Float64}, Matrix{Float64}, Matrix{Float64}, OrdinaryDiffEq.Tsit5ConstantCache{Float64, Float64}}}, DiffEqBase.DEStats}, ODEFunction{true, DiffEqGPU.var"#34#38"{typeof(eom!)}, LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, OrdinaryDiffEq.Tsit5Cache{Matrix{Float64}, Matrix{Float64}, Matrix{Float64}, OrdinaryDiffEq.Tsit5ConstantCache{Float64, Float64}}, OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, typeof(DiffEqGPU.diffeqgpunorm), typeof(LinearAlgebra.opnorm), CallbackSet{Tuple{}, Tuple{}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), DiffEqGPU.var"#6#12", DataStructures.BinaryMinHeap{Float64}, DataStructures.BinaryMinHeap{Float64}, Nothing, Nothing, Int64, Tuple{}, Tuple{}, Tuple{}}, Matrix{Float64}, Float64, Nothing, OrdinaryDiffEq.DefaultInit}, cache::OrdinaryDiffEq.Tsit5Cache{Matrix{Float64}, Matrix{Float64}, Matrix{Float64}, OrdinaryDiffEq.Tsit5ConstantCache{Float64, Float64}})
      @ OrdinaryDiffEq ~/.julia/packages/OrdinaryDiffEq/VPJBD/src/perform_step/low_order_rk_perform_step.jl:623
    [7] __init(prob::ODEProblem{Matrix{Float64}, Tuple{Float64, Float64}, true, Matrix{Float64}, ODEFunction{true, DiffEqGPU.var"#34#38"{typeof(eom!)}, LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, alg::Tsit5, timeseries_init::Tuple{}, ts_init::Tuple{}, ks_init::Tuple{}, recompile::Type{Val{true}}; saveat::Tuple{}, tstops::Tuple{}, d_discontinuities::Tuple{}, save_idxs::Nothing, save_everystep::Bool, save_on::Bool, save_start::Bool, save_end::Bool, callback::Nothing, dense::Bool, calck::Bool, dt::Float64, dtmin::Nothing, dtmax::Float64, force_dtmin::Bool, adaptive::Bool, gamma::Rational{Int64}, abstol::Nothing, reltol::Nothing, qmin::Rational{Int64}, qmax::Int64, qsteady_min::Int64, qsteady_max::Int64, qoldinit::Rational{Int64}, fullnormalize::Bool, failfactor::Int64, beta1::Nothing, beta2::Nothing, maxiters::Int64, internalnorm::typeof(DiffEqGPU.diffeqgpunorm), internalopnorm::typeof(LinearAlgebra.opnorm), isoutofdomain::typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), unstable_check::DiffEqGPU.var"#6#12", verbose::Bool, timeseries_errors::Bool, dense_errors::Bool, advance_to_tstop::Bool, stop_at_next_tstop::Bool, initialize_save::Bool, progress::Bool, progress_steps::Int64, progress_name::String, progress_message::typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), userdata::Nothing, allow_extrapolation::Bool, initialize_integrator::Bool, alias_u0::Bool, alias_du0::Bool, initializealg::OrdinaryDiffEq.DefaultInit, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ OrdinaryDiffEq ~/.julia/packages/OrdinaryDiffEq/VPJBD/src/solve.jl:406
    [8] #__solve#391
      @ ~/.julia/packages/OrdinaryDiffEq/VPJBD/src/solve.jl:4 [inlined]
    [9] solve_call(_prob::ODEProblem{Matrix{Float64}, Tuple{Float64, Float64}, true, Matrix{Float64}, ODEFunction{true, DiffEqGPU.var"#34#38"{typeof(eom!)}, LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, args::Tsit5; merge_callbacks::Bool, kwargs::Base.Iterators.Pairs{Symbol, Union{Nothing, Function}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:callback, :internalnorm, :unstable_check), Tuple{Nothing, typeof(DiffEqGPU.diffeqgpunorm), DiffEqGPU.var"#6#12"}}})
      @ DiffEqBase ~/.julia/packages/DiffEqBase/V7P18/src/solve.jl:92
   [10] #solve_up#461
      @ ~/.julia/packages/DiffEqBase/V7P18/src/solve.jl:114 [inlined]
   [11] #solve#460
      @ ~/.julia/packages/DiffEqBase/V7P18/src/solve.jl:102 [inlined]
   [12] batch_solve(ensembleprob::EnsembleProblem{ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, DiffEqUncertainty.var"#14#27"{Matrix{Float64}, Vector{Float64}, DiffEqUncertainty.var"#20#33", DiffEqUncertainty.var"#21#34", Vector{Float64}, Vector{Bool}, Int64}, DiffEqUncertainty.var"#16#29"{Matrix{Float64}, var"#g#3", Vector{Any}}, typeof(DiffEqBase.DEFAULT_REDUCTION), Nothing}, alg::Tsit5, ensemblealg::EnsembleCPUArray, I::UnitRange{Int64}; kwargs::Base.Iterators.Pairs{Symbol, DiffEqGPU.var"#6#12", Tuple{Symbol}, NamedTuple{(:unstable_check,), Tuple{DiffEqGPU.var"#6#12"}}})
      @ DiffEqGPU ~/.julia/packages/DiffEqGPU/TnpRW/src/DiffEqGPU.jl:238
   [13] macro expansion
      @ ./timing.jl:233 [inlined]
   [14] __solve(ensembleprob::EnsembleProblem{ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, DiffEqUncertainty.var"#14#27"{Matrix{Float64}, Vector{Float64}, DiffEqUncertainty.var"#20#33", DiffEqUncertainty.var"#21#34", Vector{Float64}, Vector{Bool}, Int64}, DiffEqUncertainty.var"#16#29"{Matrix{Float64}, var"#g#3", Vector{Any}}, typeof(DiffEqBase.DEFAULT_REDUCTION), Nothing}, alg::Tsit5, ensemblealg::EnsembleCPUArray; trajectories::Int64, batch_size::Int64, unstable_check::Function, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ DiffEqGPU ~/.julia/packages/DiffEqGPU/TnpRW/src/DiffEqGPU.jl:128
   [15] #solve#462
      @ ~/.julia/packages/DiffEqBase/V7P18/src/solve.jl:128 [inlined]
   [16] (::DiffEqUncertainty.var"#13#26"{DiffEqUncertainty.var"#20#33", DiffEqUncertainty.var"#21#34", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, var"#g#3", ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, Tuple{Tsit5, EnsembleCPUArray}, Vector{Float64}, Vector{Any}, Vector{Bool}, Int64})(dx::Matrix{Float64}, x::Matrix{Float64}, p::Vector{Float64})
      @ DiffEqUncertainty ~/.julia/packages/DiffEqUncertainty/FPK4O/src/koopman.jl:90
   [17] (::Quadrature.var"#112#128"{QuadratureProblem{true, Vector{Float64}, DiffEqUncertainty.var"#13#26"{DiffEqUncertainty.var"#20#33", DiffEqUncertainty.var"#21#34", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, var"#g#3", ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, Tuple{Tsit5, EnsembleCPUArray}, Vector{Float64}, Vector{Any}, Vector{Bool}, Int64}, Vector{Float64}, Vector{Float64}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, Vector{Float64}, Vector{Float64}, Vector{Float64}})(x::Matrix{Float64}, dx::Matrix{Float64})
      @ Quadrature ~/.julia/packages/Quadrature/I6B8x/src/Quadrature.jl:433
   [18] generic_integrand!(ndim::Int32, x_::Ptr{Float64}, ncomp::Int32, f_::Ptr{Float64}, func!::Quadrature.var"#112#128"{QuadratureProblem{true, Vector{Float64}, DiffEqUncertainty.var"#13#26"{DiffEqUncertainty.var"#20#33", DiffEqUncertainty.var"#21#34", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, var"#g#3", ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, Tuple{Tsit5, EnsembleCPUArray}, Vector{Float64}, Vector{Any}, Vector{Bool}, Int64}, Vector{Float64}, Vector{Float64}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, Vector{Float64}, Vector{Float64}, Vector{Float64}}, nvec::Int32)
      @ Cuba ~/.julia/packages/Cuba/S4YWA/src/Cuba.jl:100
   [19] dointegrate!
      @ ~/.julia/packages/Cuba/S4YWA/src/cuhre.jl:40 [inlined]
   [20] dointegrate
      @ ~/.julia/packages/Cuba/S4YWA/src/Cuba.jl:195 [inlined]
   [21] cuhre(integrand::Quadrature.var"#112#128"{QuadratureProblem{true, Vector{Float64}, DiffEqUncertainty.var"#13#26"{DiffEqUncertainty.var"#20#33", DiffEqUncertainty.var"#21#34", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, var"#g#3", ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, Tuple{Tsit5, EnsembleCPUArray}, Vector{Float64}, Vector{Any}, Vector{Bool}, Int64}, Vector{Float64}, Vector{Float64}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, Vector{Float64}, Vector{Float64}, Vector{Float64}}, ndim::Int64, ncomp::Int64; nvec::Int64, rtol::Float64, atol::Float64, flags::Int64, minevals::Int64, maxevals::Int64, key::Int64, statefile::String, spin::Ptr{Nothing}, abstol::Missing, reltol::Missing)
      @ Cuba ~/.julia/packages/Cuba/S4YWA/src/cuhre.jl:97
   [22] __solvebp_call(::QuadratureProblem{true, Vector{Float64}, DiffEqUncertainty.var"#13#26"{DiffEqUncertainty.var"#20#33", DiffEqUncertainty.var"#21#34", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, var"#g#3", ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, Tuple{Tsit5, EnsembleCPUArray}, Vector{Float64}, Vector{Any}, Vector{Bool}, Int64}, Vector{Float64}, Vector{Float64}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, ::CubaCuhre, ::Quadrature.ReCallVJP{Quadrature.ZygoteVJP}, ::Vector{Float64}, ::Vector{Float64}, ::Vector{Float64}; reltol::Float64, abstol::Float64, maxiters::Int64, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Quadrature ~/.julia/packages/Quadrature/I6B8x/src/Quadrature.jl:467
   [23] #__solvebp#11
      @ ~/.julia/packages/Quadrature/I6B8x/src/Quadrature.jl:153 [inlined]
   [24] solve(::QuadratureProblem{true, Vector{Float64}, DiffEqUncertainty.var"#13#26"{DiffEqUncertainty.var"#20#33", DiffEqUncertainty.var"#21#34", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, var"#g#3", ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, Tuple{Tsit5, EnsembleCPUArray}, Vector{Float64}, Vector{Any}, Vector{Bool}, Int64}, Vector{Float64}, Vector{Float64}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, ::CubaCuhre; sensealg::Quadrature.ReCallVJP{Quadrature.ZygoteVJP}, kwargs::Base.Iterators.Pairs{Symbol, Real, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:reltol, :abstol, :maxiters), Tuple{Float64, Float64, Int64}}})
      @ Quadrature ~/.julia/packages/Quadrature/I6B8x/src/Quadrature.jl:149
   [25] expectation(::var"#g#3", ::ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, ::Vector{Uniform{Float64}}, ::Vector{Float64}, ::Koopman, ::Tsit5, ::Vararg{Any, N} where N; u0_CoV::DiffEqUncertainty.var"#20#33", p_CoV::DiffEqUncertainty.var"#21#34", maxiters::Int64, batch::Int64, quadalg::CubaCuhre, ireltol::Float64, iabstol::Float64, nout::Int64, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ DiffEqUncertainty ~/.julia/packages/DiffEqUncertainty/FPK4O/src/koopman.jl:102
   [26] top-level scope
      @ ~/.julia/packages/DiffEqUncertainty/FPK4O/test/koopman.jl:54
   [27] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
   [28] top-level scope
      @ ~/.julia/packages/DiffEqUncertainty/FPK4O/test/koopman.jl:45
  
      nested task error: MethodError: no method matching CartesianIndex(::Tuple{Base.OneTo{Int64}})
      Closest candidates are:
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:69
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:76
        CartesianIndex(!Matched::Tuple{var"#s9", var"#s1", var"#s12", Vararg{Any, N} where N} where var"#s12"<:VectorizationBase.Static where var"#s1"<:Integer where var"#s9"<:Integer) at /home/pkgeval/.julia/packages/VectorizationBase/so9eG/src/static.jl:18
        ...
      Stacktrace:
        [1] call(#unused#::Cassette.Context{nametype(CPUCtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{1}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}}, Nothing, KernelAbstractions.var"##PassType#242", Nothing, Cassette.DisableHooks}, f::Type, args::Tuple{Base.OneTo{Int64}})
          @ Cassette ~/.julia/packages/Cassette/158rp/src/context.jl:456
        [2] fallback(::Cassette.Context{nametype(CPUCtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{1}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}}, Nothing, KernelAbstractions.var"##PassType#242", Nothing, Cassette.DisableHooks}, ::Type, ::Vararg{Any, N} where N)
          @ Cassette ~/.julia/packages/Cassette/158rp/src/context.jl:454
        [3] overdub(::Cassette.Context{nametype(CPUCtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{1}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}}, Nothing, KernelAbstractions.var"##PassType#242", Nothing, Cassette.DisableHooks}, ::Type{CartesianIndex}, ::Tuple{Base.OneTo{Int64}})
          @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:536
        [4] first
          @ ./multidimensional.jl:388 [inlined]
        [5] overdub(::Cassette.Context{nametype(CPUCtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{1}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}}, Nothing, KernelAbstractions.var"##PassType#242", Nothing, Cassette.DisableHooks}, ::typeof(first), ::CartesianIndices{1, Tuple{Base.OneTo{Int64}}})
          @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
        [6] iterate
          @ ./multidimensional.jl:347 [inlined]
        [7] overdub(::Cassette.Context{nametype(CPUCtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{1}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}}, Nothing, KernelAbstractions.var"##PassType#242", Nothing, Cassette.DisableHooks}, ::typeof(iterate), ::CartesianIndices{1, Tuple{Base.OneTo{Int64}}})
          @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
        [8] cpu_gpu_kernel
          @ ./none:0 [inlined]
        [9] overdub(::Cassette.Context{nametype(CPUCtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{1}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}}, Nothing, KernelAbstractions.var"##PassType#242", Nothing, Cassette.DisableHooks}, ::typeof(DiffEqGPU.cpu_gpu_kernel), ::typeof(eom!), ::Matrix{Float64}, ::Matrix{Float64}, ::Matrix{Float64}, ::Float64)
          @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
       [10] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, typeof(DiffEqGPU.cpu_gpu_kernel)}, ndrange::Tuple{Int64}, iterspace::KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}, args::Tuple{typeof(eom!), Matrix{Float64}, Matrix{Float64}, Matrix{Float64}, Float64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
          @ KernelAbstractions ~/.julia/packages/KernelAbstractions/xslEz/src/backends/cpu.jl:150
       [11] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, typeof(DiffEqGPU.cpu_gpu_kernel)}, ndrange::Tuple{Int64}, iterspace::KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}, args::Tuple{typeof(eom!), Matrix{Float64}, Matrix{Float64}, Matrix{Float64}, Float64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
          @ KernelAbstractions ~/.julia/packages/KernelAbstractions/xslEz/src/backends/cpu.jl:123
       [12] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, typeof(DiffEqGPU.cpu_gpu_kernel)}, Tuple{Int64}, KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}, Tuple{typeof(eom!), Matrix{Float64}, Matrix{Float64}, Matrix{Float64}, Float64}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
          @ KernelAbstractions ~/.julia/packages/KernelAbstractions/xslEz/src/backends/cpu.jl:22
[ Info: nout = 2, batch mode = EnsembleSerial(), CubatureJLh()
[ Info: nout = 2, batch mode = EnsembleSerial(), CubatureJLp()
[ Info: nout = 2, batch mode = EnsembleSerial(), CubaSUAVE()
[ Info: nout = 2, batch mode = EnsembleSerial(), CubaDivonne()
[ Info: nout = 2, batch mode = EnsembleSerial(), CubaCuhre()
[ Info: nout = 2, batch mode = EnsembleThreads(), CubatureJLh()
[ Info: nout = 2, batch mode = EnsembleThreads(), CubatureJLp()
[ Info: nout = 2, batch mode = EnsembleThreads(), CubaSUAVE()
[ Info: nout = 2, batch mode = EnsembleThreads(), CubaDivonne()
[ Info: nout = 2, batch mode = EnsembleThreads(), CubaCuhre()
[ Info: nout = 2, batch mode = EnsembleCPUArray(), CubatureJLh()
Koopman Expectation, nout > 1, batch: Error During Test at /home/pkgeval/.julia/packages/DiffEqUncertainty/FPK4O/test/koopman.jl:59
  Got exception outside of a @test
  TaskFailedException
  Stacktrace:
    [1] (::Cubature.var"#17#18"{Bool, Bool, Int64, Float64, Float64, Int64, Int32, Ptr{Nothing}, Cubature.IntegrandData{Quadrature.var"#86#98"{QuadratureProblem{true, Vector{Float64}, DiffEqUncertainty.var"#13#26"{DiffEqUncertainty.var"#20#33", DiffEqUncertainty.var"#21#34", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, var"#g#4", ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, Tuple{Tsit5, EnsembleCPUArray}, Vector{Float64}, Vector{Any}, Vector{Bool}, Int64}, Vector{Float64}, Vector{Float64}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, Vector{Float64}}}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Int64})()
      @ Cubature ~/.julia/packages/Cubature/5zwuu/src/Cubature.jl:215
    [2] disable_sigint(f::Cubature.var"#17#18"{Bool, Bool, Int64, Float64, Float64, Int64, Int32, Ptr{Nothing}, Cubature.IntegrandData{Quadrature.var"#86#98"{QuadratureProblem{true, Vector{Float64}, DiffEqUncertainty.var"#13#26"{DiffEqUncertainty.var"#20#33", DiffEqUncertainty.var"#21#34", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, var"#g#4", ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, Tuple{Tsit5, EnsembleCPUArray}, Vector{Float64}, Vector{Any}, Vector{Bool}, Int64}, Vector{Float64}, Vector{Float64}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, Vector{Float64}}}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Int64})
      @ Base ./c.jl:458
    [3] cubature(xscalar::Bool, fscalar::Bool, vectorized::Bool, padaptive::Bool, fdim::Int64, f::Quadrature.var"#86#98"{QuadratureProblem{true, Vector{Float64}, DiffEqUncertainty.var"#13#26"{DiffEqUncertainty.var"#20#33", DiffEqUncertainty.var"#21#34", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, var"#g#4", ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, Tuple{Tsit5, EnsembleCPUArray}, Vector{Float64}, Vector{Any}, Vector{Bool}, Int64}, Vector{Float64}, Vector{Float64}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, Vector{Float64}}, xmin_::Vector{Float64}, xmax_::Vector{Float64}, reqRelError::Float64, reqAbsError::Float64, maxEval::Int64, error_norm::Int32)
      @ Cubature ~/.julia/packages/Cubature/5zwuu/src/Cubature.jl:169
    [4] hcubature_v(fdim::Int64, f::Function, xmin::Vector{Float64}, xmax::Vector{Float64}; reltol::Float64, abstol::Float64, maxevals::Int64, error_norm::Int32)
      @ Cubature ~/.julia/packages/Cubature/5zwuu/src/Cubature.jl:227
    [5] __solvebp_call(::QuadratureProblem{true, Vector{Float64}, DiffEqUncertainty.var"#13#26"{DiffEqUncertainty.var"#20#33", DiffEqUncertainty.var"#21#34", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, var"#g#4", ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, Tuple{Tsit5, EnsembleCPUArray}, Vector{Float64}, Vector{Any}, Vector{Bool}, Int64}, Vector{Float64}, Vector{Float64}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, ::CubatureJLh, ::Quadrature.ReCallVJP{Quadrature.ZygoteVJP}, ::Vector{Float64}, ::Vector{Float64}, ::Vector{Float64}; reltol::Float64, abstol::Float64, maxiters::Int64, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Quadrature ~/.julia/packages/Quadrature/I6B8x/src/Quadrature.jl:365
    [6] #__solvebp#11
      @ ~/.julia/packages/Quadrature/I6B8x/src/Quadrature.jl:153 [inlined]
    [7] solve(::QuadratureProblem{true, Vector{Float64}, DiffEqUncertainty.var"#13#26"{DiffEqUncertainty.var"#20#33", DiffEqUncertainty.var"#21#34", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, var"#g#4", ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, Tuple{Tsit5, EnsembleCPUArray}, Vector{Float64}, Vector{Any}, Vector{Bool}, Int64}, Vector{Float64}, Vector{Float64}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, ::CubatureJLh; sensealg::Quadrature.ReCallVJP{Quadrature.ZygoteVJP}, kwargs::Base.Iterators.Pairs{Symbol, Real, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:reltol, :abstol, :maxiters), Tuple{Float64, Float64, Int64}}})
      @ Quadrature ~/.julia/packages/Quadrature/I6B8x/src/Quadrature.jl:149
    [8] expectation(::var"#g#4", ::ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, ::Vector{Uniform{Float64}}, ::Vector{Float64}, ::Koopman, ::Tsit5, ::Vararg{Any, N} where N; u0_CoV::DiffEqUncertainty.var"#20#33", p_CoV::DiffEqUncertainty.var"#21#34", maxiters::Int64, batch::Int64, quadalg::CubatureJLh, ireltol::Float64, iabstol::Float64, nout::Int64, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ DiffEqUncertainty ~/.julia/packages/DiffEqUncertainty/FPK4O/src/koopman.jl:102
    [9] top-level scope
      @ ~/.julia/packages/DiffEqUncertainty/FPK4O/test/koopman.jl:69
   [10] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
   [11] top-level scope
      @ ~/.julia/packages/DiffEqUncertainty/FPK4O/test/koopman.jl:60
   [12] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [13] macro expansion
      @ ~/.julia/packages/DiffEqUncertainty/FPK4O/test/runtests.jl:4 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [15] macro expansion
      @ ~/.julia/packages/DiffEqUncertainty/FPK4O/test/runtests.jl:4 [inlined]
   [16] top-level scope
      @ ./timing.jl:174
   [17] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [18] top-level scope
      @ none:6
   [19] eval(m::Module, e::Any)
      @ Core ./boot.jl:345
   [20] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [21] _start()
      @ Base ./client.jl:485
  
      nested task error: MethodError: no method matching CartesianIndex(::Tuple{Base.OneTo{Int64}})
      Closest candidates are:
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:69
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:76
        CartesianIndex(!Matched::Tuple{var"#s9", var"#s1", var"#s12", Vararg{Any, N} where N} where var"#s12"<:VectorizationBase.Static where var"#s1"<:Integer where var"#s9"<:Integer) at /home/pkgeval/.julia/packages/VectorizationBase/so9eG/src/static.jl:18
        ...
      Stacktrace:
        [1] call(#unused#::Cassette.Context{nametype(CPUCtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{1}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}}, Nothing, KernelAbstractions.var"##PassType#242", Nothing, Cassette.DisableHooks}, f::Type, args::Tuple{Base.OneTo{Int64}})
          @ Cassette ~/.julia/packages/Cassette/158rp/src/context.jl:456
        [2] fallback(::Cassette.Context{nametype(CPUCtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{1}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}}, Nothing, KernelAbstractions.var"##PassType#242", Nothing, Cassette.DisableHooks}, ::Type, ::Vararg{Any, N} where N)
          @ Cassette ~/.julia/packages/Cassette/158rp/src/context.jl:454
        [3] overdub(::Cassette.Context{nametype(CPUCtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{1}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}}, Nothing, KernelAbstractions.var"##PassType#242", Nothing, Cassette.DisableHooks}, ::Type{CartesianIndex}, ::Tuple{Base.OneTo{Int64}})
          @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:536
        [4] first
          @ ./multidimensional.jl:388 [inlined]
        [5] overdub(::Cassette.Context{nametype(CPUCtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{1}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}}, Nothing, KernelAbstractions.var"##PassType#242", Nothing, Cassette.DisableHooks}, ::typeof(first), ::CartesianIndices{1, Tuple{Base.OneTo{Int64}}})
          @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
        [6] iterate
          @ ./multidimensional.jl:347 [inlined]
        [7] overdub(::Cassette.Context{nametype(CPUCtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{1}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}}, Nothing, KernelAbstractions.var"##PassType#242", Nothing, Cassette.DisableHooks}, ::typeof(iterate), ::CartesianIndices{1, Tuple{Base.OneTo{Int64}}})
          @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
        [8] cpu_gpu_kernel
          @ ./none:0 [inlined]
        [9] overdub(::Cassette.Context{nametype(CPUCtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{1}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}}, Nothing, KernelAbstractions.var"##PassType#242", Nothing, Cassette.DisableHooks}, ::typeof(DiffEqGPU.cpu_gpu_kernel), ::typeof(eom!), ::Matrix{Float64}, ::Matrix{Float64}, ::Matrix{Float64}, ::Float64)
          @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
       [10] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, typeof(DiffEqGPU.cpu_gpu_kernel)}, ndrange::Tuple{Int64}, iterspace::KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}, args::Tuple{typeof(eom!), Matrix{Float64}, Matrix{Float64}, Matrix{Float64}, Float64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
          @ KernelAbstractions ~/.julia/packages/KernelAbstractions/xslEz/src/backends/cpu.jl:150
       [11] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, typeof(DiffEqGPU.cpu_gpu_kernel)}, ndrange::Tuple{Int64}, iterspace::KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}, args::Tuple{typeof(eom!), Matrix{Float64}, Matrix{Float64}, Matrix{Float64}, Float64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
          @ KernelAbstractions ~/.julia/packages/KernelAbstractions/xslEz/src/backends/cpu.jl:123
       [12] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, typeof(DiffEqGPU.cpu_gpu_kernel)}, Tuple{Int64}, KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}, Tuple{typeof(eom!), Matrix{Float64}, Matrix{Float64}, Matrix{Float64}, Float64}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
          @ KernelAbstractions ~/.julia/packages/KernelAbstractions/xslEz/src/backends/cpu.jl:22
[ Info: HCubatureJL(), ForwardDiff
[ Info: HCubatureJL(), Zygote
Koopman Expectation AD: Error During Test at /home/pkgeval/.julia/packages/DiffEqUncertainty/FPK4O/test/koopman.jl:86
  Test threw exception
  Expression: ≈((Zygote.gradient((p->(loss(p, alg);)), p))[1], dp1, rtol = 0.01)
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2778#1234
      @ ~/.julia/packages/Zygote/NSWXO/src/compiler/interface2.jl:34 [inlined]
    [4] #s2778#1234(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:556
    [6] _pullback(f::Function, args::Vector{Float64})
      @ Zygote ~/.julia/packages/Zygote/NSWXO/src/compiler/interface.jl:38
    [7] pullback(f::Function, args::Vector{Float64})
      @ Zygote ~/.julia/packages/Zygote/NSWXO/src/compiler/interface.jl:44
    [8] gradient(f::Function, args::Vector{Float64})
      @ Zygote ~/.julia/packages/Zygote/NSWXO/src/compiler/interface.jl:53
    [9] top-level scope
      @ ~/.julia/packages/DiffEqUncertainty/FPK4O/test/koopman.jl:86
   [10] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
   [11] top-level scope
      @ ~/.julia/packages/DiffEqUncertainty/FPK4O/test/koopman.jl:79
[ Info: CubatureJLh(), ForwardDiff
[ Info: CubatureJLh(), Zygote
Koopman Expectation AD: Error During Test at /home/pkgeval/.julia/packages/DiffEqUncertainty/FPK4O/test/koopman.jl:86
  Test threw exception
  Expression: ≈((Zygote.gradient((p->(loss(p, alg);)), p))[1], dp1, rtol = 0.01)
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2778#1234
      @ ~/.julia/packages/Zygote/NSWXO/src/compiler/interface2.jl:34 [inlined]
    [4] #s2778#1234(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:556
    [6] _pullback(f::Function, args::Vector{Float64})
      @ Zygote ~/.julia/packages/Zygote/NSWXO/src/compiler/interface.jl:38
    [7] pullback(f::Function, args::Vector{Float64})
      @ Zygote ~/.julia/packages/Zygote/NSWXO/src/compiler/interface.jl:44
    [8] gradient(f::Function, args::Vector{Float64})
      @ Zygote ~/.julia/packages/Zygote/NSWXO/src/compiler/interface.jl:53
    [9] top-level scope
      @ ~/.julia/packages/DiffEqUncertainty/FPK4O/test/koopman.jl:86
   [10] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
   [11] top-level scope
      @ ~/.julia/packages/DiffEqUncertainty/FPK4O/test/koopman.jl:79
[ Info: CubatureJLp(), ForwardDiff
[ Info: CubatureJLp(), Zygote
Koopman Expectation AD: Error During Test at /home/pkgeval/.julia/packages/DiffEqUncertainty/FPK4O/test/koopman.jl:86
  Test threw exception
  Expression: ≈((Zygote.gradient((p->(loss(p, alg);)), p))[1], dp1, rtol = 0.01)
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2778#1234
      @ ~/.julia/packages/Zygote/NSWXO/src/compiler/interface2.jl:34 [inlined]
    [4] #s2778#1234(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:556
    [6] _pullback(f::Function, args::Vector{Float64})
      @ Zygote ~/.julia/packages/Zygote/NSWXO/src/compiler/interface.jl:38
    [7] pullback(f::Function, args::Vector{Float64})
      @ Zygote ~/.julia/packages/Zygote/NSWXO/src/compiler/interface.jl:44
    [8] gradient(f::Function, args::Vector{Float64})
      @ Zygote ~/.julia/packages/Zygote/NSWXO/src/compiler/interface.jl:53
    [9] top-level scope
      @ ~/.julia/packages/DiffEqUncertainty/FPK4O/test/koopman.jl:86
   [10] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
   [11] top-level scope
      @ ~/.julia/packages/DiffEqUncertainty/FPK4O/test/koopman.jl:79
[ Info: CubaSUAVE(), ForwardDiff
[ Info: CubaSUAVE(), Zygote
Koopman Expectation AD: Error During Test at /home/pkgeval/.julia/packages/DiffEqUncertainty/FPK4O/test/koopman.jl:86
  Test threw exception
  Expression: ≈((Zygote.gradient((p->(loss(p, alg);)), p))[1], dp1, rtol = 0.01)
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2778#1234
      @ ~/.julia/packages/Zygote/NSWXO/src/compiler/interface2.jl:34 [inlined]
    [4] #s2778#1234(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:556
    [6] _pullback(f::Function, args::Vector{Float64})
      @ Zygote ~/.julia/packages/Zygote/NSWXO/src/compiler/interface.jl:38
    [7] pullback(f::Function, args::Vector{Float64})
      @ Zygote ~/.julia/packages/Zygote/NSWXO/src/compiler/interface.jl:44
    [8] gradient(f::Function, args::Vector{Float64})
      @ Zygote ~/.julia/packages/Zygote/NSWXO/src/compiler/interface.jl:53
    [9] top-level scope
      @ ~/.julia/packages/DiffEqUncertainty/FPK4O/test/koopman.jl:86
   [10] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
   [11] top-level scope
      @ ~/.julia/packages/DiffEqUncertainty/FPK4O/test/koopman.jl:79
[ Info: CubaDivonne(), ForwardDiff
[ Info: CubaDivonne(), Zygote
Koopman Expectation AD: Error During Test at /home/pkgeval/.julia/packages/DiffEqUncertainty/FPK4O/test/koopman.jl:86
  Test threw exception
  Expression: ≈((Zygote.gradient((p->(loss(p, alg);)), p))[1], dp1, rtol = 0.01)
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2778#1234
      @ ~/.julia/packages/Zygote/NSWXO/src/compiler/interface2.jl:34 [inlined]
    [4] #s2778#1234(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:556
    [6] _pullback(f::Function, args::Vector{Float64})
      @ Zygote ~/.julia/packages/Zygote/NSWXO/src/compiler/interface.jl:38
    [7] pullback(f::Function, args::Vector{Float64})
      @ Zygote ~/.julia/packages/Zygote/NSWXO/src/compiler/interface.jl:44
    [8] gradient(f::Function, args::Vector{Float64})
      @ Zygote ~/.julia/packages/Zygote/NSWXO/src/compiler/interface.jl:53
    [9] top-level scope
      @ ~/.julia/packages/DiffEqUncertainty/FPK4O/test/koopman.jl:86
   [10] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
   [11] top-level scope
      @ ~/.julia/packages/DiffEqUncertainty/FPK4O/test/koopman.jl:79
[ Info: CubaCuhre(), ForwardDiff
[ Info: CubaCuhre(), Zygote
Koopman Expectation AD: Error During Test at /home/pkgeval/.julia/packages/DiffEqUncertainty/FPK4O/test/koopman.jl:86
  Test threw exception
  Expression: ≈((Zygote.gradient((p->(loss(p, alg);)), p))[1], dp1, rtol = 0.01)
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2778#1234
      @ ~/.julia/packages/Zygote/NSWXO/src/compiler/interface2.jl:34 [inlined]
    [4] #s2778#1234(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:556
    [6] _pullback(f::Function, args::Vector{Float64})
      @ Zygote ~/.julia/packages/Zygote/NSWXO/src/compiler/interface.jl:38
    [7] pullback(f::Function, args::Vector{Float64})
      @ Zygote ~/.julia/packages/Zygote/NSWXO/src/compiler/interface.jl:44
    [8] gradient(f::Function, args::Vector{Float64})
      @ Zygote ~/.julia/packages/Zygote/NSWXO/src/compiler/interface.jl:53
    [9] top-level scope
      @ ~/.julia/packages/DiffEqUncertainty/FPK4O/test/koopman.jl:86
   [10] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
   [11] top-level scope
      @ ~/.julia/packages/DiffEqUncertainty/FPK4O/test/koopman.jl:79
[ Info: EnsembleSerial(), CubatureJLh(), ForwardDiff
Koopman Expectation AD, batch: Error During Test at /home/pkgeval/.julia/packages/DiffEqUncertainty/FPK4O/test/koopman.jl:100
 Unexpected Pass
 Expression: ≈(ForwardDiff.gradient((p->begin
                loss(p, alg, bmode)
            end), p), dp1, rtol = 0.01)
 Got correct result, please change to @test if no longer broken.

[ Info: EnsembleSerial(), CubatureJLh(), Zygote
[ Info: EnsembleSerial(), CubatureJLp(), ForwardDiff
Koopman Expectation AD, batch: Error During Test at /home/pkgeval/.julia/packages/DiffEqUncertainty/FPK4O/test/koopman.jl:100
 Unexpected Pass
 Expression: ≈(ForwardDiff.gradient((p->begin
                loss(p, alg, bmode)
            end), p), dp1, rtol = 0.01)
 Got correct result, please change to @test if no longer broken.

[ Info: EnsembleSerial(), CubatureJLp(), Zygote
[ Info: EnsembleSerial(), CubaSUAVE(), ForwardDiff
Koopman Expectation AD, batch: Error During Test at /home/pkgeval/.julia/packages/DiffEqUncertainty/FPK4O/test/koopman.jl:100
 Unexpected Pass
 Expression: ≈(ForwardDiff.gradient((p->begin
                loss(p, alg, bmode)
            end), p), dp1, rtol = 0.01)
 Got correct result, please change to @test if no longer broken.

[ Info: EnsembleSerial(), CubaSUAVE(), Zygote
[ Info: EnsembleSerial(), CubaDivonne(), ForwardDiff
Koopman Expectation AD, batch: Error During Test at /home/pkgeval/.julia/packages/DiffEqUncertainty/FPK4O/test/koopman.jl:100
 Unexpected Pass
 Expression: ≈(ForwardDiff.gradient((p->begin
                loss(p, alg, bmode)
            end), p), dp1, rtol = 0.01)
 Got correct result, please change to @test if no longer broken.

[ Info: EnsembleSerial(), CubaDivonne(), Zygote
[ Info: EnsembleSerial(), CubaCuhre(), ForwardDiff
Koopman Expectation AD, batch: Error During Test at /home/pkgeval/.julia/packages/DiffEqUncertainty/FPK4O/test/koopman.jl:100
 Unexpected Pass
 Expression: ≈(ForwardDiff.gradient((p->begin
                loss(p, alg, bmode)
            end), p), dp1, rtol = 0.01)
 Got correct result, please change to @test if no longer broken.

[ Info: EnsembleSerial(), CubaCuhre(), Zygote
[ Info: EnsembleThreads(), CubatureJLh(), ForwardDiff
Koopman Expectation AD, batch: Error During Test at /home/pkgeval/.julia/packages/DiffEqUncertainty/FPK4O/test/koopman.jl:100
 Unexpected Pass
 Expression: ≈(ForwardDiff.gradient((p->begin
                loss(p, alg, bmode)
            end), p), dp1, rtol = 0.01)
 Got correct result, please change to @test if no longer broken.

[ Info: EnsembleThreads(), CubatureJLh(), Zygote
[ Info: EnsembleThreads(), CubatureJLp(), ForwardDiff
Koopman Expectation AD, batch: Error During Test at /home/pkgeval/.julia/packages/DiffEqUncertainty/FPK4O/test/koopman.jl:100
 Unexpected Pass
 Expression: ≈(ForwardDiff.gradient((p->begin
                loss(p, alg, bmode)
            end), p), dp1, rtol = 0.01)
 Got correct result, please change to @test if no longer broken.

[ Info: EnsembleThreads(), CubatureJLp(), Zygote
[ Info: EnsembleThreads(), CubaSUAVE(), ForwardDiff
Koopman Expectation AD, batch: Error During Test at /home/pkgeval/.julia/packages/DiffEqUncertainty/FPK4O/test/koopman.jl:100
 Unexpected Pass
 Expression: ≈(ForwardDiff.gradient((p->begin
                loss(p, alg, bmode)
            end), p), dp1, rtol = 0.01)
 Got correct result, please change to @test if no longer broken.

[ Info: EnsembleThreads(), CubaSUAVE(), Zygote
[ Info: EnsembleThreads(), CubaDivonne(), ForwardDiff
Koopman Expectation AD, batch: Error During Test at /home/pkgeval/.julia/packages/DiffEqUncertainty/FPK4O/test/koopman.jl:100
 Unexpected Pass
 Expression: ≈(ForwardDiff.gradient((p->begin
                loss(p, alg, bmode)
            end), p), dp1, rtol = 0.01)
 Got correct result, please change to @test if no longer broken.

[ Info: EnsembleThreads(), CubaDivonne(), Zygote
[ Info: EnsembleThreads(), CubaCuhre(), ForwardDiff
Koopman Expectation AD, batch: Error During Test at /home/pkgeval/.julia/packages/DiffEqUncertainty/FPK4O/test/koopman.jl:100
 Unexpected Pass
 Expression: ≈(ForwardDiff.gradient((p->begin
                loss(p, alg, bmode)
            end), p), dp1, rtol = 0.01)
 Got correct result, please change to @test if no longer broken.

[ Info: EnsembleThreads(), CubaCuhre(), Zygote
[ Info: EnsembleCPUArray(), CubatureJLh(), ForwardDiff
[ Info: EnsembleCPUArray(), CubatureJLh(), Zygote
[ Info: EnsembleCPUArray(), CubatureJLp(), ForwardDiff
[ Info: EnsembleCPUArray(), CubatureJLp(), Zygote
[ Info: EnsembleCPUArray(), CubaSUAVE(), ForwardDiff
[ Info: EnsembleCPUArray(), CubaSUAVE(), Zygote
[ Info: EnsembleCPUArray(), CubaDivonne(), ForwardDiff
[ Info: EnsembleCPUArray(), CubaDivonne(), Zygote
[ Info: EnsembleCPUArray(), CubaCuhre(), ForwardDiff
[ Info: EnsembleCPUArray(), CubaCuhre(), Zygote
[ Info: batch mode = EnsembleSerial(), alg = CubatureJLh()
[ Info: batch mode = EnsembleSerial(), alg = CubatureJLp()
[ Info: batch mode = EnsembleSerial(), alg = CubaSUAVE()
[ Info: batch mode = EnsembleThreads(), alg = CubatureJLh()
[ Info: batch mode = EnsembleThreads(), alg = CubatureJLp()
[ Info: batch mode = EnsembleThreads(), alg = CubaSUAVE()
[ Info: batch mode = EnsembleCPUArray(), alg = CubatureJLh()
Koopman Central Moment, batch: Error During Test at /home/pkgeval/.julia/packages/DiffEqUncertainty/FPK4O/test/koopman.jl:141
  Got exception outside of a @test
  TaskFailedException
  Stacktrace:
    [1] (::Cubature.var"#17#18"{Bool, Bool, Int64, Float64, Float64, Int64, Int32, Ptr{Nothing}, Cubature.IntegrandData{Quadrature.var"#86#98"{QuadratureProblem{true, Vector{Float64}, DiffEqUncertainty.var"#13#26"{DiffEqUncertainty.var"#20#33", DiffEqUncertainty.var"#21#34", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqUncertainty.var"#49#54"{Int64, var"#g#22"}, ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, Tuple{Tsit5, EnsembleCPUArray}, Vector{Float64}, Vector{Any}, Vector{Bool}, Int64}, Vector{Float64}, Vector{Float64}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, Vector{Float64}}}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Int64})()
      @ Cubature ~/.julia/packages/Cubature/5zwuu/src/Cubature.jl:215
    [2] disable_sigint(f::Cubature.var"#17#18"{Bool, Bool, Int64, Float64, Float64, Int64, Int32, Ptr{Nothing}, Cubature.IntegrandData{Quadrature.var"#86#98"{QuadratureProblem{true, Vector{Float64}, DiffEqUncertainty.var"#13#26"{DiffEqUncertainty.var"#20#33", DiffEqUncertainty.var"#21#34", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqUncertainty.var"#49#54"{Int64, var"#g#22"}, ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, Tuple{Tsit5, EnsembleCPUArray}, Vector{Float64}, Vector{Any}, Vector{Bool}, Int64}, Vector{Float64}, Vector{Float64}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, Vector{Float64}}}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Int64})
      @ Base ./c.jl:458
    [3] cubature(xscalar::Bool, fscalar::Bool, vectorized::Bool, padaptive::Bool, fdim::Int64, f::Quadrature.var"#86#98"{QuadratureProblem{true, Vector{Float64}, DiffEqUncertainty.var"#13#26"{DiffEqUncertainty.var"#20#33", DiffEqUncertainty.var"#21#34", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqUncertainty.var"#49#54"{Int64, var"#g#22"}, ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, Tuple{Tsit5, EnsembleCPUArray}, Vector{Float64}, Vector{Any}, Vector{Bool}, Int64}, Vector{Float64}, Vector{Float64}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, Vector{Float64}}, xmin_::Vector{Float64}, xmax_::Vector{Float64}, reqRelError::Float64, reqAbsError::Float64, maxEval::Int64, error_norm::Int32)
      @ Cubature ~/.julia/packages/Cubature/5zwuu/src/Cubature.jl:169
    [4] hcubature_v(fdim::Int64, f::Function, xmin::Vector{Float64}, xmax::Vector{Float64}; reltol::Float64, abstol::Float64, maxevals::Int64, error_norm::Int32)
      @ Cubature ~/.julia/packages/Cubature/5zwuu/src/Cubature.jl:227
    [5] __solvebp_call(::QuadratureProblem{true, Vector{Float64}, DiffEqUncertainty.var"#13#26"{DiffEqUncertainty.var"#20#33", DiffEqUncertainty.var"#21#34", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqUncertainty.var"#49#54"{Int64, var"#g#22"}, ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, Tuple{Tsit5, EnsembleCPUArray}, Vector{Float64}, Vector{Any}, Vector{Bool}, Int64}, Vector{Float64}, Vector{Float64}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, ::CubatureJLh, ::Quadrature.ReCallVJP{Quadrature.ZygoteVJP}, ::Vector{Float64}, ::Vector{Float64}, ::Vector{Float64}; reltol::Float64, abstol::Float64, maxiters::Int64, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Quadrature ~/.julia/packages/Quadrature/I6B8x/src/Quadrature.jl:365
    [6] #__solvebp#11
      @ ~/.julia/packages/Quadrature/I6B8x/src/Quadrature.jl:153 [inlined]
    [7] solve(::QuadratureProblem{true, Vector{Float64}, DiffEqUncertainty.var"#13#26"{DiffEqUncertainty.var"#20#33", DiffEqUncertainty.var"#21#34", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqUncertainty.var"#49#54"{Int64, var"#g#22"}, ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, Tuple{Tsit5, EnsembleCPUArray}, Vector{Float64}, Vector{Any}, Vector{Bool}, Int64}, Vector{Float64}, Vector{Float64}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, ::CubatureJLh; sensealg::Quadrature.ReCallVJP{Quadrature.ZygoteVJP}, kwargs::Base.Iterators.Pairs{Symbol, Real, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:reltol, :abstol, :maxiters), Tuple{Float64, Float64, Int64}}})
      @ Quadrature ~/.julia/packages/Quadrature/I6B8x/src/Quadrature.jl:149
    [8] expectation(::DiffEqUncertainty.var"#49#54"{Int64, var"#g#22"}, ::ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, ::Vector{Uniform{Float64}}, ::Vector{Float64}, ::Koopman, ::Tsit5, ::Vararg{Any, N} where N; u0_CoV::DiffEqUncertainty.var"#20#33", p_CoV::DiffEqUncertainty.var"#21#34", maxiters::Int64, batch::Int64, quadalg::CubatureJLh, ireltol::Float64, iabstol::Float64, nout::Int64, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ DiffEqUncertainty ~/.julia/packages/DiffEqUncertainty/FPK4O/src/koopman.jl:102
    [9] centralmoment(::Int64, ::var"#g#22", ::ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(eom!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, ::Vararg{Any, N} where N; kwargs::Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:ireltol, :iabstol, :quadalg, :batch), Tuple{Float64, Float64, CubatureJLh, Int64}}})
      @ DiffEqUncertainty ~/.julia/packages/DiffEqUncertainty/FPK4O/src/koopman.jl:144
   [10] top-level scope
      @ ~/.julia/packages/DiffEqUncertainty/FPK4O/test/koopman.jl:151
   [11] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
   [12] top-level scope
      @ ~/.julia/packages/DiffEqUncertainty/FPK4O/test/koopman.jl:142
   [13] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [14] macro expansion
      @ ~/.julia/packages/DiffEqUncertainty/FPK4O/test/runtests.jl:4 [inlined]
   [15] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [16] macro expansion
      @ ~/.julia/packages/DiffEqUncertainty/FPK4O/test/runtests.jl:4 [inlined]
   [17] top-level scope
      @ ./timing.jl:174
   [18] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [19] top-level scope
      @ none:6
   [20] eval(m::Module, e::Any)
      @ Core ./boot.jl:345
   [21] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [22] _start()
      @ Base ./client.jl:485
  
      nested task error: MethodError: no method matching CartesianIndex(::Tuple{Base.OneTo{Int64}})
      Closest candidates are:
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:69
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:76
        CartesianIndex(!Matched::Tuple{var"#s9", var"#s1", var"#s12", Vararg{Any, N} where N} where var"#s12"<:VectorizationBase.Static where var"#s1"<:Integer where var"#s9"<:Integer) at /home/pkgeval/.julia/packages/VectorizationBase/so9eG/src/static.jl:18
        ...
      Stacktrace:
        [1] call(#unused#::Cassette.Context{nametype(CPUCtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{1}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}}, Nothing, KernelAbstractions.var"##PassType#242", Nothing, Cassette.DisableHooks}, f::Type, args::Tuple{Base.OneTo{Int64}})
          @ Cassette ~/.julia/packages/Cassette/158rp/src/context.jl:456
        [2] fallback(::Cassette.Context{nametype(CPUCtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{1}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}}, Nothing, KernelAbstractions.var"##PassType#242", Nothing, Cassette.DisableHooks}, ::Type, ::Vararg{Any, N} where N)
          @ Cassette ~/.julia/packages/Cassette/158rp/src/context.jl:454
        [3] overdub(::Cassette.Context{nametype(CPUCtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{1}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}}, Nothing, KernelAbstractions.var"##PassType#242", Nothing, Cassette.DisableHooks}, ::Type{CartesianIndex}, ::Tuple{Base.OneTo{Int64}})
          @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:536
        [4] first
          @ ./multidimensional.jl:388 [inlined]
        [5] overdub(::Cassette.Context{nametype(CPUCtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{1}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}}, Nothing, KernelAbstractions.var"##PassType#242", Nothing, Cassette.DisableHooks}, ::typeof(first), ::CartesianIndices{1, Tuple{Base.OneTo{Int64}}})
          @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
        [6] iterate
          @ ./multidimensional.jl:347 [inlined]
        [7] overdub(::Cassette.Context{nametype(CPUCtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{1}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}}, Nothing, KernelAbstractions.var"##PassType#242", Nothing, Cassette.DisableHooks}, ::typeof(iterate), ::CartesianIndices{1, Tuple{Base.OneTo{Int64}}})
          @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
        [8] cpu_gpu_kernel
          @ ./none:0 [inlined]
        [9] overdub(::Cassette.Context{nametype(CPUCtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{1}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}}, Nothing, KernelAbstractions.var"##PassType#242", Nothing, Cassette.DisableHooks}, ::typeof(DiffEqGPU.cpu_gpu_kernel), ::typeof(eom!), ::Matrix{Float64}, ::Matrix{Float64}, ::Matrix{Float64}, ::Float64)
          @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
       [10] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, typeof(DiffEqGPU.cpu_gpu_kernel)}, ndrange::Tuple{Int64}, iterspace::KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}, args::Tuple{typeof(eom!), Matrix{Float64}, Matrix{Float64}, Matrix{Float64}, Float64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
          @ KernelAbstractions ~/.julia/packages/KernelAbstractions/xslEz/src/backends/cpu.jl:150
       [11] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, typeof(DiffEqGPU.cpu_gpu_kernel)}, ndrange::Tuple{Int64}, iterspace::KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}, args::Tuple{typeof(eom!), Matrix{Float64}, Matrix{Float64}, Matrix{Float64}, Float64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
          @ KernelAbstractions ~/.julia/packages/KernelAbstractions/xslEz/src/backends/cpu.jl:123
       [12] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, typeof(DiffEqGPU.cpu_gpu_kernel)}, Tuple{Int64}, KernelAbstractions.NDIteration.NDRange{1, KernelAbstractions.NDIteration.DynamicSize, KernelAbstractions.NDIteration.DynamicSize, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}, Tuple{typeof(eom!), Matrix{Float64}, Matrix{Float64}, Matrix{Float64}, Float64}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
          @ KernelAbstractions ~/.julia/packages/KernelAbstractions/xslEz/src/backends/cpu.jl:22
Test Summary:                          | Pass  Error  Broken  Total
Koopman Tests                          |   45     23      23     91
  Koopman Expectation, nout = 1        |    6                     6
  Koopman Expectation, nout > 1        |    6                     6
  Koopman Expectation, nout = 1, batch |   10      5             15
  Koopman Expectation, nout > 1, batch |   10      1             11
  Koopman Expectation AD               |    6      6             12
  Koopman Expectation AD, batch        |          10      20     30
  Koopman Central Moment               |    3              1      4
  Koopman Central Moment, batch        |    4      1       2      7
ERROR: LoadError: Some tests did not pass: 45 passed, 0 failed, 23 errored, 23 broken.
in expression starting at /home/pkgeval/.julia/packages/DiffEqUncertainty/FPK4O/test/runtests.jl:4
ERROR: Package DiffEqUncertainty errored during testing
Stacktrace:
  [1] pkgerror(::String, ::Vararg{String, N} where N)
    @ Pkg.Types /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
  [2] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing)
    @ Pkg.Operations /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1580
  [3] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:328
  [4] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec})
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:315
  [5] #test#62
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [6] test
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [7] #test#61
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [8] test
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [9] test(pkg::String; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [10] test(pkg::String)
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [11] top-level scope
    @ none:19
