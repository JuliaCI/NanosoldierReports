Julia Version 1.6.0-DEV.921
Commit bfa7261083 (2020-09-16 06:22 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed Requires ───────────────────── v1.0.2
  Installed Reexport ───────────────────── v0.2.0
  Installed TranscodingStreams ─────────── v0.9.5
  Installed GPUCompiler ────────────────── v0.4.1
  Installed FileIO ─────────────────────── v1.4.3
  Installed Cassette ───────────────────── v0.3.3
  Installed GPUArrays ──────────────────── v5.2.0
  Installed MKL_jll ────────────────────── v2020.2.254+0
  Installed ExprTools ──────────────────── v0.1.2
  Installed Zlib_jll ───────────────────── v1.2.11+16
  Installed VersionParsing ─────────────── v1.2.0
  Installed JSON ───────────────────────── v0.21.1
  Installed FFTW ───────────────────────── v1.2.4
  Installed NNlib ──────────────────────── v0.7.4
  Installed IntelOpenMP_jll ────────────── v2018.0.3+0
  Installed CEnum ──────────────────────── v0.4.1
  Installed CFTime ─────────────────────── v0.1.0
  Installed MacroTools ─────────────────── v0.5.5
  Installed OffsetArrays ───────────────── v1.2.0
  Installed SpecialFunctions ───────────── v0.10.3
  Installed BinDeps ────────────────────── v1.0.1
  Installed Oceananigans ───────────────── v0.36.0
  Installed Crayons ────────────────────── v4.0.4
  Installed CodecZlib ──────────────────── v0.7.0
  Installed Adapt ──────────────────────── v2.1.0
  Installed URIParser ──────────────────── v0.4.1
  Installed BinaryProvider ─────────────── v0.5.10
  Installed NCDatasets ─────────────────── v0.10.4
  Installed Parsers ────────────────────── v1.0.10
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed CondaBinDeps ───────────────── v0.2.0
  Installed AbstractFFTs ───────────────── v0.5.0
  Installed FFTW_jll ───────────────────── v3.3.9+5
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed SafeTestsets ───────────────── v0.0.1
  Installed DataStructures ─────────────── v0.17.20
  Installed SeawaterPolynomials ────────── v0.2.0
  Installed TimerOutputs ───────────────── v0.5.6
  Installed OrderedCollections ─────────── v1.3.1
  Installed LLVM ───────────────────────── v1.7.0
  Installed CUDA ───────────────────────── v1.3.3
  Installed Conda ──────────────────────── v1.4.1
  Installed KernelAbstractions ─────────── v0.3.3
  Installed JLD2 ───────────────────────── v0.1.14
  Installed StaticArrays ───────────────── v0.12.4
Updating `~/.julia/environments/v1.6/Project.toml`
  [9e8cae18] + Oceananigans v0.36.0
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [621f4979] + AbstractFFTs v0.5.0
  [79e6a3ab] + Adapt v2.1.0
  [9e28174c] + BinDeps v1.0.1
  [b99e7846] + BinaryProvider v0.5.10
  [fa961155] + CEnum v0.4.1
  [179af706] + CFTime v0.1.0
  [052768ef] + CUDA v1.3.3
  [7057c7e9] + Cassette v0.3.3
  [944b1d66] + CodecZlib v0.7.0
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [8f4d0f93] + Conda v1.4.1
  [a9693cdc] + CondaBinDeps v0.2.0
  [a8cc5b0e] + Crayons v4.0.4
  [864edb3b] + DataStructures v0.17.20
  [e2ba6199] + ExprTools v0.1.2
  [7a1cc6ca] + FFTW v1.2.4
  [f5851436] + FFTW_jll v3.3.9+5
  [5789e2e9] + FileIO v1.4.3
  [0c68f7d7] + GPUArrays v5.2.0
  [61eb1bfa] + GPUCompiler v0.4.1
  [1d5cc7b8] + IntelOpenMP_jll v2018.0.3+0
  [033835bb] + JLD2 v0.1.14
  [682c06a0] + JSON v0.21.1
  [63c18a36] + KernelAbstractions v0.3.3
  [929cbde3] + LLVM v1.7.0
  [856f044c] + MKL_jll v2020.2.254+0
  [1914dd2f] + MacroTools v0.5.5
  [85f8d34a] + NCDatasets v0.10.4
  [872c559c] + NNlib v0.7.4
  [9e8cae18] + Oceananigans v0.36.0
  [6fe1bfb0] + OffsetArrays v1.2.0
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [bac558e1] + OrderedCollections v1.3.1
  [69de0a69] + Parsers v1.0.10
  [189a3867] + Reexport v0.2.0
  [ae029012] + Requires v1.0.2
  [1bc83da4] + SafeTestsets v0.0.1
  [d496a93d] + SeawaterPolynomials v0.2.0
  [276daf66] + SpecialFunctions v0.10.3
  [90137ffa] + StaticArrays v0.12.4
  [a759f4b9] + TimerOutputs v0.5.6
  [3bb67fe8] + TranscodingStreams v0.9.5
  [30578b45] + URIParser v0.4.1
  [81def892] + VersionParsing v1.2.0
  [83775a58] + Zlib_jll v1.2.11+16
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
   Building FFTW ──────→ `~/.julia/packages/FFTW/DMUbN/deps/build.log`
   Building Conda ─────→ `~/.julia/packages/Conda/3rPhK/deps/build.log`
   Building NCDatasets → `~/.julia/packages/NCDatasets/HhdCu/deps/build.log`
    Testing Oceananigans
Status `/tmp/jl_4rgI5K/Project.toml`
  [79e6a3ab] Adapt v2.1.0
  [6e4b80f9] BenchmarkTools v0.5.0
  [052768ef] CUDA v1.3.3
  [a2441757] Coverage v1.1.1
  [a8cc5b0e] Crayons v4.0.4
  [7a1cc6ca] FFTW v1.2.4
  [033835bb] JLD2 v0.1.14
  [63c18a36] KernelAbstractions v0.3.3
  [85f8d34a] NCDatasets v0.10.4
  [9e8cae18] Oceananigans v0.36.0
  [6fe1bfb0] OffsetArrays v1.2.0
  [bac558e1] OrderedCollections v1.3.1
  [91a5bcdd] Plots v1.6.4
  [1bc83da4] SafeTestsets v0.0.1
  [d496a93d] SeawaterPolynomials v0.2.0
  [a759f4b9] TimerOutputs v0.5.6
  [bdfc003b] TimesDates v0.2.6
  [ade2ca70] Dates
  [b77e0a4c] InteractiveUtils
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [44cfe95a] Pkg
  [de0858da] Printf
  [9a3f8284] Random
  [10745b16] Statistics
  [8dfed614] Test
Status `/tmp/jl_4rgI5K/Manifest.toml`
  [621f4979] AbstractFFTs v0.5.0
  [79e6a3ab] Adapt v2.1.0
  [6e4b80f9] BenchmarkTools v0.5.0
  [9e28174c] BinDeps v1.0.1
  [b99e7846] BinaryProvider v0.5.10
  [6e34b625] Bzip2_jll v1.0.6+4
  [fa961155] CEnum v0.4.1
  [179af706] CFTime v0.1.0
  [052768ef] CUDA v1.3.3
  [7057c7e9] Cassette v0.3.3
  [944b1d66] CodecZlib v0.7.0
  [35d6a980] ColorSchemes v3.9.0
  [3da002f7] ColorTypes v0.10.9
  [5ae59095] Colors v0.12.4
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [a216cea6] CompoundPeriods v0.4.0
  [8f4d0f93] Conda v1.4.1
  [a9693cdc] CondaBinDeps v0.2.0
  [d38c429a] Contour v0.5.5
  [a2441757] Coverage v1.1.1
  [c36e975a] CoverageTools v1.1.0
  [a8cc5b0e] Crayons v4.0.4
  [9a962f9c] DataAPI v1.3.0
  [864edb3b] DataStructures v0.17.20
  [e2d170a0] DataValueInterfaces v1.0.0
  [5ae413db] EarCut_jll v2.1.5+0
  [e2ba6199] ExprTools v0.1.2
  [8f5d6c58] EzXML v1.1.0
  [c87230d0] FFMPEG v0.4.0
  [b22a6f82] FFMPEG_jll v4.3.1+2
  [7a1cc6ca] FFTW v1.2.4
  [f5851436] FFTW_jll v3.3.9+5
  [5789e2e9] FileIO v1.4.3
  [53c48c17] FixedPointNumbers v0.8.4
  [d7e528f0] FreeType2_jll v2.10.1+4
  [559328eb] FriBidi_jll v1.0.5+5
  [0c68f7d7] GPUArrays v5.2.0
  [61eb1bfa] GPUCompiler v0.4.1
  [28b8d3ca] GR v0.52.0
  [5c1252a2] GeometryBasics v0.3.1
  [4d00f742] GeometryTypes v0.8.3
  [cd3eb016] HTTP v0.8.19
  [83e8ac13] IniFile v0.5.0
  [1d5cc7b8] IntelOpenMP_jll v2018.0.3+0
  [c8e1da08] IterTools v1.3.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [033835bb] JLD2 v0.1.14
  [682c06a0] JSON v0.21.1
  [63c18a36] KernelAbstractions v0.3.3
  [c1c5ebd0] LAME_jll v3.100.0+2
  [929cbde3] LLVM v1.7.0
  [dd192d2f] LibVPX_jll v1.9.0+0
  [94ce4f54] Libiconv_jll v1.16.0+6
  [856f044c] MKL_jll v2020.2.254+0
  [1914dd2f] MacroTools v0.5.5
  [739be429] MbedTLS v1.0.2
  [c8ffd9c3] MbedTLS_jll v2.16.8+0
  [442fdcdd] Measures v0.3.1
  [e1d29d7a] Missings v0.4.4
  [78c3b35d] Mocking v0.7.1
  [85f8d34a] NCDatasets v0.10.4
  [872c559c] NNlib v0.7.4
  [77ba4419] NaNMath v0.3.4
  [9e8cae18] Oceananigans v0.36.0
  [6fe1bfb0] OffsetArrays v1.2.0
  [e7412a2a] Ogg_jll v1.3.4+1
  [458c3c95] OpenSSL_jll v1.1.1+5
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [91d4177d] Opus_jll v1.3.1+2
  [bac558e1] OrderedCollections v1.3.1
  [69de0a69] Parsers v1.0.10
  [ccf2f8ad] PlotThemes v2.0.0
  [995b91a9] PlotUtils v1.0.6
  [91a5bcdd] Plots v1.6.4
  [3cdcf5f2] RecipesBase v1.1.0
  [01d81517] RecipesPipeline v0.1.13
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v1.0.2
  [1bc83da4] SafeTestsets v0.0.1
  [d496a93d] SeawaterPolynomials v0.2.0
  [992d4aef] Showoff v0.3.1
  [a2af1166] SortingAlgorithms v0.3.1
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.4
  [2913bbd2] StatsBase v0.33.1
  [09ab397b] StructArrays v0.4.4
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.5
  [f269a46b] TimeZones v1.3.2
  [a759f4b9] TimerOutputs v0.5.6
  [bdfc003b] TimesDates v0.2.6
  [3bb67fe8] TranscodingStreams v0.9.5
  [30578b45] URIParser v0.4.1
  [81def892] VersionParsing v1.2.0
  [02c8fc9c] XML2_jll v2.9.10+2
  [83775a58] Zlib_jll v1.2.11+16
  [0ac62f75] libass_jll v0.14.0+3
  [f638f0a6] libfdk_aac_jll v0.1.6+3
  [f27f6e37] libvorbis_jll v1.3.6+5
  [1270edf5] x264_jll v2020.7.14+1
  [dfaa095f] x265_jll v3.0.0+2
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
[ Info: Oceananigans will use 2 threads
[2020/09/16 23:55:04.418] INFO  Testing grids...
[2020/09/16 23:55:05.038] INFO    Testing grid utilities...
[2020/09/16 23:55:09.273] INFO    Testing regular Cartesian grid...
[2020/09/16 23:55:09.273] INFO      Testing grid initialization...
[2020/09/16 23:55:13.644] INFO      Testing grid constructor errors...
RegularCartesianGrid{Float64, Periodic, Periodic, Periodic}
                   domain: x ∈ [0.0, 1.0], y ∈ [-3.141592653589793, 3.141592653589793], z ∈ [1.1102230246251526e-17, 6.283185307179586]
                 topology: (Periodic, Periodic, Periodic)
  resolution (Nx, Ny, Nz): (3, 7, 9)
   halo size (Hx, Hy, Hz): (1, 1, 1)
grid spacing (Δx, Δy, Δz): (0.3333333333333333, 0.8975979010256552, 0.6981317007977318)
[2020/09/16 23:55:20.740] INFO    Testing vertically stretched Cartesian grid...
[2020/09/16 23:55:20.740] INFO      Testing grid initialization...
[2020/09/16 23:55:42.211] INFO  Testing operators...
[2020/09/16 23:55:42.212] INFO    Testing function differentiation...
[2020/09/16 23:55:42.813] INFO    Testing function interpolation...
[2020/09/16 23:55:42.985] INFO    Testing 2D operators...
2D operators: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_operators.jl:70
  Got exception outside of a @test
  TaskFailedException
  
      nested task error: TaskFailedException
      
          nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
          Closest candidates are:
            CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:68
            CartesianIndex(!Matched::Integer...) at multidimensional.jl:69
            CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:76
            ...
          Stacktrace:
            [1] call(#unused#::Cassette.Context{nametype(CPUCtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.StaticSize{(32, 16)}, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{2}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(2, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}}, Nothing, KernelAbstractions.var"##PassType#242", Nothing, Cassette.DisableHooks}, f::Type, args::Function)
              @ Cassette ~/.julia/packages/Cassette/158rp/src/context.jl:456
            [2] fallback(::Cassette.Context{nametype(CPUCtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.StaticSize{(32, 16)}, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{2}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(2, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}}, Nothing, KernelAbstractions.var"##PassType#242", Nothing, Cassette.DisableHooks}, ::Type, ::Vararg{Any, N} where N)
              @ Cassette ~/.julia/packages/Cassette/158rp/src/context.jl:454
            [3] overdub(::Cassette.Context{nametype(CPUCtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.StaticSize{(32, 16)}, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{2}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(2, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}}, Nothing, KernelAbstractions.var"##PassType#242", Nothing, Cassette.DisableHooks}, ::Type{CartesianIndex}, ::typeof(first))
              @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:536
            [4] first
              @ ./multidimensional.jl:388 [inlined]
            [5] overdub(::Cassette.Context{nametype(CPUCtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.StaticSize{(32, 16)}, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{2}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(2, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}}, Nothing, KernelAbstractions.var"##PassType#242", Nothing, Cassette.DisableHooks}, ::typeof(first), ::CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
              @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
            [6] iterate
              @ ./multidimensional.jl:347 [inlined]
            [7] overdub(::Cassette.Context{nametype(CPUCtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.StaticSize{(32, 16)}, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{2}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(2, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}}, Nothing, KernelAbstractions.var"##PassType#242", Nothing, Cassette.DisableHooks}, ::typeof(iterate), ::CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
              @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
            [8] cpu__fill_bottom_halo!
              @ ./none:0 [inlined]
            [9] overdub(::Cassette.Context{nametype(CPUCtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.StaticSize{(32, 16)}, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{2}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(2, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}}, Nothing, KernelAbstractions.var"##PassType#242", Nothing, Cassette.DisableHooks}, ::typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!), ::OffsetArray{Float64, 3, Array{Float64, 3}}, ::BoundaryCondition{Flux, Nothing}, ::Int64, ::Int64)
              @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
           [10] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(32, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(2, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
              @ KernelAbstractions ~/.julia/packages/KernelAbstractions/bIZIO/src/backends/cpu.jl:150
           [11] (::KernelAbstractions.var"#38#39"{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(32, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(2, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.NoDynamicCheck, Int64})()
              @ KernelAbstractions ./threadingconstructs.jl:169
      
      ...and 1 more exception(s).
      
      Stacktrace:
       [1] sync_end(c::Channel{Any})
         @ Base ./task.jl:350
       [2] macro expansion
         @ ./task.jl:369 [inlined]
       [3] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(32, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(2, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/bIZIO/src/backends/cpu.jl:125
       [4] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(32, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(2, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/bIZIO/src/backends/cpu.jl:22
  
  ...and 1 more exception(s).
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/bIZIO/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/bIZIO/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/mqzPY/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_operators.jl:84 [inlined]
    [5] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_operators.jl:71 [inlined]
    [7] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
    [8] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_operators.jl:58
    [9] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/runtests.jl:83
   [11] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
   [12] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/runtests.jl:82
   [13] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
   [14] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/runtests.jl:80
   [15] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [16] top-level scope
      @ none:6
   [17] eval(m::Module, e::Any)
      @ Core ./boot.jl:345
   [18] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [19] _start()
      @ Base ./client.jl:485
[2020/09/16 23:56:00.741] INFO  Testing boundary conditions...
[2020/09/16 23:56:00.741] INFO    Testing boundary functions...
[2020/09/16 23:56:00.851] INFO    Testing field boundary functions...
[2020/09/16 23:56:08.186] INFO  Testing fields...
[2020/09/16 23:56:08.186] INFO    Testing field initialization...
Internal error: encountered unexpected error during compilation of #cached_compilation#89:
ErrorException("unsupported or misplaced expression "return" in function #cached_compilation#89")
jl_errorf at /buildworker/worker/package_linux64/build/src/rtutils.c:77
emit_expr at /buildworker/worker/package_linux64/build/src/codegen.cpp:4539
emit_ssaval_assign at /buildworker/worker/package_linux64/build/src/codegen.cpp:3978
emit_stmtpos at /buildworker/worker/package_linux64/build/src/codegen.cpp:4220 [inlined]
emit_function at /buildworker/worker/package_linux64/build/src/codegen.cpp:6778
jl_emit_code at /buildworker/worker/package_linux64/build/src/codegen.cpp:7140
jl_emit_codeinst at /buildworker/worker/package_linux64/build/src/codegen.cpp:7174
_jl_compile_codeinst at /buildworker/worker/package_linux64/build/src/jitlayers.cpp:102
jl_generate_fptr at /buildworker/worker/package_linux64/build/src/jitlayers.cpp:313
jl_compile_method_internal at /buildworker/worker/package_linux64/build/src/gf.c:1895
jl_compile_method_internal at /buildworker/worker/package_linux64/build/src/gf.c:2162 [inlined]
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2155 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
cached_compilation at /home/pkgeval/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
unknown function (ip: 0x7f045d0df8df)
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
#cufunction#778 at /home/pkgeval/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
cufunction at /home/pkgeval/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
#launch_heuristic#838 at /home/pkgeval/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
unknown function (ip: 0x7f045d0deda6)
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
jl_apply at /buildworker/worker/package_linux64/build/src/julia.h:1682 [inlined]
do_apply at /buildworker/worker/package_linux64/build/src/builtins.c:653
launch_heuristic at /home/pkgeval/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
unknown function (ip: 0x7f045d0deb7f)
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
copyto! at /home/pkgeval/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
copyto! at /home/pkgeval/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
materialize! at ./broadcast.jl:848 [inlined]
materialize! at ./broadcast.jl:845
unknown function (ip: 0x7f045d0de90a)
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
zeros at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
unknown function (ip: 0x7f045d0d6423)
CellField at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:103 [inlined]
CellField at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:151 [inlined]
correct_field_size at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:9
unknown function (ip: 0x7f045d0d614b)
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
macro expansion at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:37 [inlined]
macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
macro expansion at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:34 [inlined]
macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
top-level scope at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
jl_toplevel_eval_flex at /buildworker/worker/package_linux64/build/src/toplevel.c:831
jl_toplevel_eval_flex at /buildworker/worker/package_linux64/build/src/toplevel.c:785
jl_toplevel_eval_in at /buildworker/worker/package_linux64/build/src/toplevel.c:880
eval at ./boot.jl:345 [inlined]
include_string at ./loading.jl:1015
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
_include at ./loading.jl:1069
include at ./client.jl:444
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
jl_apply at /buildworker/worker/package_linux64/build/src/julia.h:1682 [inlined]
do_call at /buildworker/worker/package_linux64/build/src/interpreter.c:115
eval_value at /buildworker/worker/package_linux64/build/src/interpreter.c:204
eval_stmt_value at /buildworker/worker/package_linux64/build/src/interpreter.c:155 [inlined]
eval_body at /buildworker/worker/package_linux64/build/src/interpreter.c:561
eval_body at /buildworker/worker/package_linux64/build/src/interpreter.c:489
eval_body at /buildworker/worker/package_linux64/build/src/interpreter.c:489
eval_body at /buildworker/worker/package_linux64/build/src/interpreter.c:489
eval_body at /buildworker/worker/package_linux64/build/src/interpreter.c:489
jl_interpret_toplevel_thunk at /buildworker/worker/package_linux64/build/src/interpreter.c:669
macro expansion at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/runtests.jl:85 [inlined]
macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
macro expansion at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/runtests.jl:82 [inlined]
macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
top-level scope at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/runtests.jl:80
jl_toplevel_eval_flex at /buildworker/worker/package_linux64/build/src/toplevel.c:837
jl_toplevel_eval_flex at /buildworker/worker/package_linux64/build/src/toplevel.c:785
jl_toplevel_eval_in at /buildworker/worker/package_linux64/build/src/toplevel.c:880
eval at ./boot.jl:345 [inlined]
include_string at ./loading.jl:1015
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
_include at ./loading.jl:1069
include at ./client.jl:444
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
jl_apply at /buildworker/worker/package_linux64/build/src/julia.h:1682 [inlined]
do_call at /buildworker/worker/package_linux64/build/src/interpreter.c:115
eval_value at /buildworker/worker/package_linux64/build/src/interpreter.c:204
eval_stmt_value at /buildworker/worker/package_linux64/build/src/interpreter.c:155 [inlined]
eval_body at /buildworker/worker/package_linux64/build/src/interpreter.c:561
jl_interpret_toplevel_thunk at /buildworker/worker/package_linux64/build/src/interpreter.c:669
top-level scope at none:6
jl_toplevel_eval_flex at /buildworker/worker/package_linux64/build/src/toplevel.c:837
jl_toplevel_eval_flex at /buildworker/worker/package_linux64/build/src/toplevel.c:785
jl_toplevel_eval_in at /buildworker/worker/package_linux64/build/src/toplevel.c:880
eval at ./boot.jl:345
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
exec_options at ./client.jl:261
_start at ./client.jl:485
jfptr__start_31826.clone_1 at /opt/julia/lib/julia/sys.so (unknown line)
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
jl_apply at /buildworker/worker/package_linux64/build/ui/../src/julia.h:1682 [inlined]
true_main at /buildworker/worker/package_linux64/build/ui/repl.c:106
main at /buildworker/worker/package_linux64/build/ui/repl.c:227
__libc_start_main at /lib/x86_64-linux-gnu/libc.so.6 (unknown line)
_start at /opt/julia/bin/julia (unknown line)
Internal error: encountered unexpected error during compilation of #cached_compilation#89:
ErrorException("unsupported or misplaced expression "return" in function #cached_compilation#89")
jl_errorf at /buildworker/worker/package_linux64/build/src/rtutils.c:77
emit_expr at /buildworker/worker/package_linux64/build/src/codegen.cpp:4539
emit_ssaval_assign at /buildworker/worker/package_linux64/build/src/codegen.cpp:3978
emit_stmtpos at /buildworker/worker/package_linux64/build/src/codegen.cpp:4220 [inlined]
emit_function at /buildworker/worker/package_linux64/build/src/codegen.cpp:6778
jl_emit_code at /buildworker/worker/package_linux64/build/src/codegen.cpp:7140
jl_emit_codeinst at /buildworker/worker/package_linux64/build/src/codegen.cpp:7174
_jl_compile_codeinst at /buildworker/worker/package_linux64/build/src/jitlayers.cpp:102
jl_generate_fptr_for_unspecialized at /buildworker/worker/package_linux64/build/src/jitlayers.cpp:351
jl_compile_method_internal at /buildworker/worker/package_linux64/build/src/gf.c:1901
jl_compile_method_internal at /buildworker/worker/package_linux64/build/src/gf.c:2162 [inlined]
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2155 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
cached_compilation at /home/pkgeval/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
unknown function (ip: 0x7f045d0df8df)
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
#cufunction#778 at /home/pkgeval/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
cufunction at /home/pkgeval/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
#launch_heuristic#838 at /home/pkgeval/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
unknown function (ip: 0x7f045d0deda6)
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
jl_apply at /buildworker/worker/package_linux64/build/src/julia.h:1682 [inlined]
do_apply at /buildworker/worker/package_linux64/build/src/builtins.c:653
launch_heuristic at /home/pkgeval/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
unknown function (ip: 0x7f045d0deb7f)
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
copyto! at /home/pkgeval/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
copyto! at /home/pkgeval/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
materialize! at ./broadcast.jl:848 [inlined]
materialize! at ./broadcast.jl:845
unknown function (ip: 0x7f045d0de90a)
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
zeros at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
unknown function (ip: 0x7f045d0d6423)
CellField at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:103 [inlined]
CellField at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:151 [inlined]
correct_field_size at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:9
unknown function (ip: 0x7f045d0d614b)
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
macro expansion at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:37 [inlined]
macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
macro expansion at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:34 [inlined]
macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
top-level scope at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
jl_toplevel_eval_flex at /buildworker/worker/package_linux64/build/src/toplevel.c:831
jl_toplevel_eval_flex at /buildworker/worker/package_linux64/build/src/toplevel.c:785
jl_toplevel_eval_in at /buildworker/worker/package_linux64/build/src/toplevel.c:880
eval at ./boot.jl:345 [inlined]
include_string at ./loading.jl:1015
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
_include at ./loading.jl:1069
include at ./client.jl:444
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
jl_apply at /buildworker/worker/package_linux64/build/src/julia.h:1682 [inlined]
do_call at /buildworker/worker/package_linux64/build/src/interpreter.c:115
eval_value at /buildworker/worker/package_linux64/build/src/interpreter.c:204
eval_stmt_value at /buildworker/worker/package_linux64/build/src/interpreter.c:155 [inlined]
eval_body at /buildworker/worker/package_linux64/build/src/interpreter.c:561
eval_body at /buildworker/worker/package_linux64/build/src/interpreter.c:489
eval_body at /buildworker/worker/package_linux64/build/src/interpreter.c:489
eval_body at /buildworker/worker/package_linux64/build/src/interpreter.c:489
eval_body at /buildworker/worker/package_linux64/build/src/interpreter.c:489
jl_interpret_toplevel_thunk at /buildworker/worker/package_linux64/build/src/interpreter.c:669
macro expansion at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/runtests.jl:85 [inlined]
macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
macro expansion at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/runtests.jl:82 [inlined]
macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
top-level scope at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/runtests.jl:80
jl_toplevel_eval_flex at /buildworker/worker/package_linux64/build/src/toplevel.c:837
jl_toplevel_eval_flex at /buildworker/worker/package_linux64/build/src/toplevel.c:785
jl_toplevel_eval_in at /buildworker/worker/package_linux64/build/src/toplevel.c:880
eval at ./boot.jl:345 [inlined]
include_string at ./loading.jl:1015
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
_include at ./loading.jl:1069
include at ./client.jl:444
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
jl_apply at /buildworker/worker/package_linux64/build/src/julia.h:1682 [inlined]
do_call at /buildworker/worker/package_linux64/build/src/interpreter.c:115
eval_value at /buildworker/worker/package_linux64/build/src/interpreter.c:204
eval_stmt_value at /buildworker/worker/package_linux64/build/src/interpreter.c:155 [inlined]
eval_body at /buildworker/worker/package_linux64/build/src/interpreter.c:561
jl_interpret_toplevel_thunk at /buildworker/worker/package_linux64/build/src/interpreter.c:669
top-level scope at none:6
jl_toplevel_eval_flex at /buildworker/worker/package_linux64/build/src/toplevel.c:837
jl_toplevel_eval_flex at /buildworker/worker/package_linux64/build/src/toplevel.c:785
jl_toplevel_eval_in at /buildworker/worker/package_linux64/build/src/toplevel.c:880
eval at ./boot.jl:345
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
exec_options at ./client.jl:261
_start at ./client.jl:485
jfptr__start_31826.clone_1 at /opt/julia/lib/julia/sys.so (unknown line)
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
jl_apply at /buildworker/worker/package_linux64/build/ui/../src/julia.h:1682 [inlined]
true_main at /buildworker/worker/package_linux64/build/ui/repl.c:106
main at /buildworker/worker/package_linux64/build/ui/repl.c:227
__libc_start_main at /lib/x86_64-linux-gnu/libc.so.6 (unknown line)
_start at /opt/julia/bin/julia (unknown line)
Field initialization: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:37
  Test threw exception
  Expression: correct_field_size(arch, grid, CellField, N[1] + 2 * H[1], N[2] + 2 * H[2], N[3] + 2 * H[3])
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] CellField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:103 [inlined]
   [35] CellField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:151 [inlined]
   [36] correct_field_size(a::GPU, g::RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(CellField), Tx::Int64, Ty::Int64, Tz::Int64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:9
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:37 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:34 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Field initialization: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:38
  Test threw exception
  Expression: correct_field_size(arch, grid, XFaceField, N[1] + 2 * H[1], N[2] + 2 * H[2], N[3] + 2 * H[3])
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] XFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:118 [inlined]
   [35] XFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:152 [inlined]
   [36] correct_field_size(a::GPU, g::RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(XFaceField), Tx::Int64, Ty::Int64, Tz::Int64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:9
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:38 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:34 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Field initialization: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:39
  Test threw exception
  Expression: correct_field_size(arch, grid, YFaceField, N[1] + 2 * H[1], N[2] + 2 * H[2], N[3] + 2 * H[3])
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] YFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:133 [inlined]
   [35] YFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:153 [inlined]
   [36] correct_field_size(a::GPU, g::RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(YFaceField), Tx::Int64, Ty::Int64, Tz::Int64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:9
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:39 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:34 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Field initialization: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:40
  Test threw exception
  Expression: correct_field_size(arch, grid, ZFaceField, N[1] + 2 * H[1], N[2] + 2 * H[2], N[3] + 2 * H[3])
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] ZFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:148 [inlined]
   [35] ZFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:154 [inlined]
   [36] correct_field_size(a::GPU, g::RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(ZFaceField), Tx::Int64, Ty::Int64, Tz::Int64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:9
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:40 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:34 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Field initialization: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:43
  Test threw exception
  Expression: correct_field_size(arch, grid, CellField, N[1] + 2 * H[1], N[2] + 2 * H[2], N[3] + 2 * H[3])
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] CellField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:103
   [35] CellField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:151 [inlined]
   [36] correct_field_size(a::GPU, g::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(CellField), Tx::Int64, Ty::Int64, Tz::Int64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:9
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:43 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:34 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Field initialization: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:44
  Test threw exception
  Expression: correct_field_size(arch, grid, XFaceField, N[1] + 2 * H[1], N[2] + 2 * H[2], N[3] + 2 * H[3])
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] XFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:118
   [35] XFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:152 [inlined]
   [36] correct_field_size(a::GPU, g::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(XFaceField), Tx::Int64, Ty::Int64, Tz::Int64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:9
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:44 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:34 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Field initialization: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:45
  Test threw exception
  Expression: correct_field_size(arch, grid, YFaceField, N[1] + 2 * H[1], N[2] + 2 * H[2], N[3] + 2 * H[3])
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] YFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:133
   [35] YFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:153 [inlined]
   [36] correct_field_size(a::GPU, g::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(YFaceField), Tx::Int64, Ty::Int64, Tz::Int64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:9
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:45 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:34 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Field initialization: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:46
  Test threw exception
  Expression: correct_field_size(arch, grid, ZFaceField, N[1] + 2 * H[1], N[2] + 2 * H[2], N[3] + 2 * H[3] + 1)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] ZFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:148
   [35] ZFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:154 [inlined]
   [36] correct_field_size(a::GPU, g::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(ZFaceField), Tx::Int64, Ty::Int64, Tz::Int64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:9
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:46 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:34 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Field initialization: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:49
  Test threw exception
  Expression: correct_field_size(arch, grid, CellField, N[1] + 2 * H[1], N[2] + 2 * H[2], N[3] + 2 * H[3])
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] CellField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:103
   [35] CellField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:151 [inlined]
   [36] correct_field_size(a::GPU, g::RegularCartesianGrid{Float32, Periodic, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(CellField), Tx::Int64, Ty::Int64, Tz::Int64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:9
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:49 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:34 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Field initialization: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:50
  Test threw exception
  Expression: correct_field_size(arch, grid, XFaceField, N[1] + 2 * H[1], N[2] + 2 * H[2], N[3] + 2 * H[3])
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] XFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:118
   [35] XFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:152 [inlined]
   [36] correct_field_size(a::GPU, g::RegularCartesianGrid{Float32, Periodic, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(XFaceField), Tx::Int64, Ty::Int64, Tz::Int64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:9
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:50 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:34 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Field initialization: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:51
  Test threw exception
  Expression: correct_field_size(arch, grid, YFaceField, N[1] + 2 * H[1], N[2] + 1 + 2 * H[2], N[3] + 2 * H[3])
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] YFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:133
   [35] YFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:153 [inlined]
   [36] correct_field_size(a::GPU, g::RegularCartesianGrid{Float32, Periodic, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(YFaceField), Tx::Int64, Ty::Int64, Tz::Int64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:9
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:51 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:34 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Field initialization: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:52
  Test threw exception
  Expression: correct_field_size(arch, grid, ZFaceField, N[1] + 2 * H[1], N[2] + 2 * H[2], N[3] + 1 + 2 * H[3])
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] ZFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:148
   [35] ZFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:154 [inlined]
   [36] correct_field_size(a::GPU, g::RegularCartesianGrid{Float32, Periodic, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(ZFaceField), Tx::Int64, Ty::Int64, Tz::Int64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:9
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:52 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:34 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Field initialization: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:55
  Test threw exception
  Expression: correct_field_size(arch, grid, CellField, N[1] + 2 * H[1], N[2] + 2 * H[2], N[3] + 2 * H[3])
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] CellField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:103
   [35] CellField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:151 [inlined]
   [36] correct_field_size(a::GPU, g::RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(CellField), Tx::Int64, Ty::Int64, Tz::Int64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:9
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:55 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:34 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Field initialization: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:56
  Test threw exception
  Expression: correct_field_size(arch, grid, XFaceField, N[1] + 1 + 2 * H[1], N[2] + 2 * H[2], N[3] + 2 * H[3])
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] XFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:118
   [35] XFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:152 [inlined]
   [36] correct_field_size(a::GPU, g::RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(XFaceField), Tx::Int64, Ty::Int64, Tz::Int64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:9
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:56 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:34 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Field initialization: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:57
  Test threw exception
  Expression: correct_field_size(arch, grid, YFaceField, N[1] + 2 * H[1], N[2] + 1 + 2 * H[2], N[3] + 2 * H[3])
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] YFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:133
   [35] YFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:153 [inlined]
   [36] correct_field_size(a::GPU, g::RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(YFaceField), Tx::Int64, Ty::Int64, Tz::Int64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:9
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:57 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:34 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Field initialization: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:58
  Test threw exception
  Expression: correct_field_size(arch, grid, ZFaceField, N[1] + 2 * H[1], N[2] + 2 * H[2], N[3] + 1 + 2 * H[3])
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] ZFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:148
   [35] ZFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:154 [inlined]
   [36] correct_field_size(a::GPU, g::RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(ZFaceField), Tx::Int64, Ty::Int64, Tz::Int64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:9
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:58 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:34 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Internal error: encountered unexpected error during compilation of #cached_compilation#89:
ErrorException("unsupported or misplaced expression "return" in function #cached_compilation#89")
jl_errorf at /buildworker/worker/package_linux64/build/src/rtutils.c:77
emit_expr at /buildworker/worker/package_linux64/build/src/codegen.cpp:4539
emit_ssaval_assign at /buildworker/worker/package_linux64/build/src/codegen.cpp:3978
emit_stmtpos at /buildworker/worker/package_linux64/build/src/codegen.cpp:4220 [inlined]
emit_function at /buildworker/worker/package_linux64/build/src/codegen.cpp:6778
jl_emit_code at /buildworker/worker/package_linux64/build/src/codegen.cpp:7140
jl_emit_codeinst at /buildworker/worker/package_linux64/build/src/codegen.cpp:7174
_jl_compile_codeinst at /buildworker/worker/package_linux64/build/src/jitlayers.cpp:102
jl_generate_fptr at /buildworker/worker/package_linux64/build/src/jitlayers.cpp:313
jl_compile_method_internal at /buildworker/worker/package_linux64/build/src/gf.c:1895
jl_compile_method_internal at /buildworker/worker/package_linux64/build/src/gf.c:2162 [inlined]
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2155 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
cached_compilation at /home/pkgeval/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
unknown function (ip: 0x7f042c16453f)
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
#cufunction#778 at /home/pkgeval/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
cufunction at /home/pkgeval/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
#launch_heuristic#838 at /home/pkgeval/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
unknown function (ip: 0x7f042c163e66)
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
jl_apply at /buildworker/worker/package_linux64/build/src/julia.h:1682 [inlined]
do_apply at /buildworker/worker/package_linux64/build/src/builtins.c:653
launch_heuristic at /home/pkgeval/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
unknown function (ip: 0x7f042c163c3f)
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
copyto! at /home/pkgeval/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
copyto! at /home/pkgeval/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
materialize! at ./broadcast.jl:848 [inlined]
materialize! at ./broadcast.jl:845
unknown function (ip: 0x7f042c1639ca)
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
zeros at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
unknown function (ip: 0x7f042c162933)
CellField at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:103 [inlined]
CellField at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:151 [inlined]
correct_field_size at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:9
unknown function (ip: 0x7f042c16265b)
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
macro expansion at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:37 [inlined]
macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
macro expansion at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:34 [inlined]
macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
top-level scope at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
jl_toplevel_eval_flex at /buildworker/worker/package_linux64/build/src/toplevel.c:831
jl_toplevel_eval_flex at /buildworker/worker/package_linux64/build/src/toplevel.c:785
jl_toplevel_eval_in at /buildworker/worker/package_linux64/build/src/toplevel.c:880
eval at ./boot.jl:345 [inlined]
include_string at ./loading.jl:1015
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
_include at ./loading.jl:1069
include at ./client.jl:444
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
jl_apply at /buildworker/worker/package_linux64/build/src/julia.h:1682 [inlined]
do_call at /buildworker/worker/package_linux64/build/src/interpreter.c:115
eval_value at /buildworker/worker/package_linux64/build/src/interpreter.c:204
eval_stmt_value at /buildworker/worker/package_linux64/build/src/interpreter.c:155 [inlined]
eval_body at /buildworker/worker/package_linux64/build/src/interpreter.c:561
eval_body at /buildworker/worker/package_linux64/build/src/interpreter.c:489
eval_body at /buildworker/worker/package_linux64/build/src/interpreter.c:489
eval_body at /buildworker/worker/package_linux64/build/src/interpreter.c:489
eval_body at /buildworker/worker/package_linux64/build/src/interpreter.c:489
jl_interpret_toplevel_thunk at /buildworker/worker/package_linux64/build/src/interpreter.c:669
macro expansion at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/runtests.jl:85 [inlined]
macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
macro expansion at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/runtests.jl:82 [inlined]
macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
top-level scope at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/runtests.jl:80
jl_toplevel_eval_flex at /buildworker/worker/package_linux64/build/src/toplevel.c:837
jl_toplevel_eval_flex at /buildworker/worker/package_linux64/build/src/toplevel.c:785
jl_toplevel_eval_in at /buildworker/worker/package_linux64/build/src/toplevel.c:880
eval at ./boot.jl:345 [inlined]
include_string at ./loading.jl:1015
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
_include at ./loading.jl:1069
include at ./client.jl:444
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
jl_apply at /buildworker/worker/package_linux64/build/src/julia.h:1682 [inlined]
do_call at /buildworker/worker/package_linux64/build/src/interpreter.c:115
eval_value at /buildworker/worker/package_linux64/build/src/interpreter.c:204
eval_stmt_value at /buildworker/worker/package_linux64/build/src/interpreter.c:155 [inlined]
eval_body at /buildworker/worker/package_linux64/build/src/interpreter.c:561
jl_interpret_toplevel_thunk at /buildworker/worker/package_linux64/build/src/interpreter.c:669
top-level scope at none:6
jl_toplevel_eval_flex at /buildworker/worker/package_linux64/build/src/toplevel.c:837
jl_toplevel_eval_flex at /buildworker/worker/package_linux64/build/src/toplevel.c:785
jl_toplevel_eval_in at /buildworker/worker/package_linux64/build/src/toplevel.c:880
eval at ./boot.jl:345
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
exec_options at ./client.jl:261
_start at ./client.jl:485
jfptr__start_31826.clone_1 at /opt/julia/lib/julia/sys.so (unknown line)
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
jl_apply at /buildworker/worker/package_linux64/build/ui/../src/julia.h:1682 [inlined]
true_main at /buildworker/worker/package_linux64/build/ui/repl.c:106
main at /buildworker/worker/package_linux64/build/ui/repl.c:227
__libc_start_main at /lib/x86_64-linux-gnu/libc.so.6 (unknown line)
_start at /opt/julia/bin/julia (unknown line)
Internal error: encountered unexpected error during compilation of #cached_compilation#89:
ErrorException("unsupported or misplaced expression "return" in function #cached_compilation#89")
jl_errorf at /buildworker/worker/package_linux64/build/src/rtutils.c:77
emit_expr at /buildworker/worker/package_linux64/build/src/codegen.cpp:4539
emit_ssaval_assign at /buildworker/worker/package_linux64/build/src/codegen.cpp:3978
emit_stmtpos at /buildworker/worker/package_linux64/build/src/codegen.cpp:4220 [inlined]
emit_function at /buildworker/worker/package_linux64/build/src/codegen.cpp:6778
jl_emit_code at /buildworker/worker/package_linux64/build/src/codegen.cpp:7140
jl_emit_codeinst at /buildworker/worker/package_linux64/build/src/codegen.cpp:7174
_jl_compile_codeinst at /buildworker/worker/package_linux64/build/src/jitlayers.cpp:102
jl_generate_fptr_for_unspecialized at /buildworker/worker/package_linux64/build/src/jitlayers.cpp:351
jl_compile_method_internal at /buildworker/worker/package_linux64/build/src/gf.c:1901
jl_compile_method_internal at /buildworker/worker/package_linux64/build/src/gf.c:2162 [inlined]
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2155 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
cached_compilation at /home/pkgeval/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
unknown function (ip: 0x7f042c16453f)
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
#cufunction#778 at /home/pkgeval/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
cufunction at /home/pkgeval/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
#launch_heuristic#838 at /home/pkgeval/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
unknown function (ip: 0x7f042c163e66)
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
jl_apply at /buildworker/worker/package_linux64/build/src/julia.h:1682 [inlined]
do_apply at /buildworker/worker/package_linux64/build/src/builtins.c:653
launch_heuristic at /home/pkgeval/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
unknown function (ip: 0x7f042c163c3f)
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
copyto! at /home/pkgeval/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
copyto! at /home/pkgeval/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
materialize! at ./broadcast.jl:848 [inlined]
materialize! at ./broadcast.jl:845
unknown function (ip: 0x7f042c1639ca)
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
zeros at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
unknown function (ip: 0x7f042c162933)
CellField at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:103 [inlined]
CellField at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:151 [inlined]
correct_field_size at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:9
unknown function (ip: 0x7f042c16265b)
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
macro expansion at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:37 [inlined]
macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
macro expansion at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:34 [inlined]
macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
top-level scope at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
jl_toplevel_eval_flex at /buildworker/worker/package_linux64/build/src/toplevel.c:831
jl_toplevel_eval_flex at /buildworker/worker/package_linux64/build/src/toplevel.c:785
jl_toplevel_eval_in at /buildworker/worker/package_linux64/build/src/toplevel.c:880
eval at ./boot.jl:345 [inlined]
include_string at ./loading.jl:1015
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
_include at ./loading.jl:1069
include at ./client.jl:444
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
jl_apply at /buildworker/worker/package_linux64/build/src/julia.h:1682 [inlined]
do_call at /buildworker/worker/package_linux64/build/src/interpreter.c:115
eval_value at /buildworker/worker/package_linux64/build/src/interpreter.c:204
eval_stmt_value at /buildworker/worker/package_linux64/build/src/interpreter.c:155 [inlined]
eval_body at /buildworker/worker/package_linux64/build/src/interpreter.c:561
eval_body at /buildworker/worker/package_linux64/build/src/interpreter.c:489
eval_body at /buildworker/worker/package_linux64/build/src/interpreter.c:489
eval_body at /buildworker/worker/package_linux64/build/src/interpreter.c:489
eval_body at /buildworker/worker/package_linux64/build/src/interpreter.c:489
jl_interpret_toplevel_thunk at /buildworker/worker/package_linux64/build/src/interpreter.c:669
macro expansion at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/runtests.jl:85 [inlined]
macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
macro expansion at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/runtests.jl:82 [inlined]
macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
top-level scope at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/runtests.jl:80
jl_toplevel_eval_flex at /buildworker/worker/package_linux64/build/src/toplevel.c:837
jl_toplevel_eval_flex at /buildworker/worker/package_linux64/build/src/toplevel.c:785
jl_toplevel_eval_in at /buildworker/worker/package_linux64/build/src/toplevel.c:880
eval at ./boot.jl:345 [inlined]
include_string at ./loading.jl:1015
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
_include at ./loading.jl:1069
include at ./client.jl:444
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
jl_apply at /buildworker/worker/package_linux64/build/src/julia.h:1682 [inlined]
do_call at /buildworker/worker/package_linux64/build/src/interpreter.c:115
eval_value at /buildworker/worker/package_linux64/build/src/interpreter.c:204
eval_stmt_value at /buildworker/worker/package_linux64/build/src/interpreter.c:155 [inlined]
eval_body at /buildworker/worker/package_linux64/build/src/interpreter.c:561
jl_interpret_toplevel_thunk at /buildworker/worker/package_linux64/build/src/interpreter.c:669
top-level scope at none:6
jl_toplevel_eval_flex at /buildworker/worker/package_linux64/build/src/toplevel.c:837
jl_toplevel_eval_flex at /buildworker/worker/package_linux64/build/src/toplevel.c:785
jl_toplevel_eval_in at /buildworker/worker/package_linux64/build/src/toplevel.c:880
eval at ./boot.jl:345
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
exec_options at ./client.jl:261
_start at ./client.jl:485
jfptr__start_31826.clone_1 at /opt/julia/lib/julia/sys.so (unknown line)
_jl_invoke at /buildworker/worker/package_linux64/build/src/gf.c:2163 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2345
jl_apply at /buildworker/worker/package_linux64/build/ui/../src/julia.h:1682 [inlined]
true_main at /buildworker/worker/package_linux64/build/ui/repl.c:106
main at /buildworker/worker/package_linux64/build/ui/repl.c:227
__libc_start_main at /lib/x86_64-linux-gnu/libc.so.6 (unknown line)
_start at /opt/julia/bin/julia (unknown line)
Field initialization: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:37
  Test threw exception
  Expression: correct_field_size(arch, grid, CellField, N[1] + 2 * H[1], N[2] + 2 * H[2], N[3] + 2 * H[3])
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float64, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float64, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float64, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] CellField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:103 [inlined]
   [35] CellField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:151 [inlined]
   [36] correct_field_size(a::GPU, g::RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, fieldtype::typeof(CellField), Tx::Int64, Ty::Int64, Tz::Int64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:9
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:37 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:34 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Field initialization: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:38
  Test threw exception
  Expression: correct_field_size(arch, grid, XFaceField, N[1] + 2 * H[1], N[2] + 2 * H[2], N[3] + 2 * H[3])
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float64, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float64, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float64, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] XFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:118 [inlined]
   [35] XFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:152 [inlined]
   [36] correct_field_size(a::GPU, g::RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, fieldtype::typeof(XFaceField), Tx::Int64, Ty::Int64, Tz::Int64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:9
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:38 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:34 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Field initialization: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:39
  Test threw exception
  Expression: correct_field_size(arch, grid, YFaceField, N[1] + 2 * H[1], N[2] + 2 * H[2], N[3] + 2 * H[3])
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float64, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float64, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float64, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] YFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:133 [inlined]
   [35] YFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:153 [inlined]
   [36] correct_field_size(a::GPU, g::RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, fieldtype::typeof(YFaceField), Tx::Int64, Ty::Int64, Tz::Int64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:9
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:39 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:34 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Field initialization: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:40
  Test threw exception
  Expression: correct_field_size(arch, grid, ZFaceField, N[1] + 2 * H[1], N[2] + 2 * H[2], N[3] + 2 * H[3])
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float64, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float64, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float64, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] ZFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:148 [inlined]
   [35] ZFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:154 [inlined]
   [36] correct_field_size(a::GPU, g::RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, fieldtype::typeof(ZFaceField), Tx::Int64, Ty::Int64, Tz::Int64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:9
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:40 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:34 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Field initialization: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:43
  Test threw exception
  Expression: correct_field_size(arch, grid, CellField, N[1] + 2 * H[1], N[2] + 2 * H[2], N[3] + 2 * H[3])
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float64, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float64, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float64, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] CellField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:103
   [35] CellField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:151 [inlined]
   [36] correct_field_size(a::GPU, g::RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, fieldtype::typeof(CellField), Tx::Int64, Ty::Int64, Tz::Int64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:9
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:43 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:34 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Field initialization: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:44
  Test threw exception
  Expression: correct_field_size(arch, grid, XFaceField, N[1] + 2 * H[1], N[2] + 2 * H[2], N[3] + 2 * H[3])
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float64, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float64, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float64, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] XFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:118
   [35] XFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:152 [inlined]
   [36] correct_field_size(a::GPU, g::RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, fieldtype::typeof(XFaceField), Tx::Int64, Ty::Int64, Tz::Int64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:9
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:44 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:34 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Field initialization: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:45
  Test threw exception
  Expression: correct_field_size(arch, grid, YFaceField, N[1] + 2 * H[1], N[2] + 2 * H[2], N[3] + 2 * H[3])
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float64, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float64, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float64, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] YFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:133
   [35] YFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:153 [inlined]
   [36] correct_field_size(a::GPU, g::RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, fieldtype::typeof(YFaceField), Tx::Int64, Ty::Int64, Tz::Int64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:9
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:45 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:34 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Field initialization: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:46
  Test threw exception
  Expression: correct_field_size(arch, grid, ZFaceField, N[1] + 2 * H[1], N[2] + 2 * H[2], N[3] + 2 * H[3] + 1)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float64, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float64, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float64, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] ZFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:148
   [35] ZFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:154 [inlined]
   [36] correct_field_size(a::GPU, g::RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, fieldtype::typeof(ZFaceField), Tx::Int64, Ty::Int64, Tz::Int64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:9
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:46 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:34 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Field initialization: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:49
  Test threw exception
  Expression: correct_field_size(arch, grid, CellField, N[1] + 2 * H[1], N[2] + 2 * H[2], N[3] + 2 * H[3])
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float64, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float64, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float64, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float64, Periodic, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] CellField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float64, Periodic, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:103
   [35] CellField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:151 [inlined]
   [36] correct_field_size(a::GPU, g::RegularCartesianGrid{Float64, Periodic, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, fieldtype::typeof(CellField), Tx::Int64, Ty::Int64, Tz::Int64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:9
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:49 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:34 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Field initialization: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:50
  Test threw exception
  Expression: correct_field_size(arch, grid, XFaceField, N[1] + 2 * H[1], N[2] + 2 * H[2], N[3] + 2 * H[3])
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float64, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float64, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float64, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float64, Periodic, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] XFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float64, Periodic, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:118
   [35] XFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:152 [inlined]
   [36] correct_field_size(a::GPU, g::RegularCartesianGrid{Float64, Periodic, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, fieldtype::typeof(XFaceField), Tx::Int64, Ty::Int64, Tz::Int64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:9
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:50 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:34 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Field initialization: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:51
  Test threw exception
  Expression: correct_field_size(arch, grid, YFaceField, N[1] + 2 * H[1], N[2] + 1 + 2 * H[2], N[3] + 2 * H[3])
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float64, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float64, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float64, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float64, Periodic, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] YFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float64, Periodic, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:133
   [35] YFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:153 [inlined]
   [36] correct_field_size(a::GPU, g::RegularCartesianGrid{Float64, Periodic, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, fieldtype::typeof(YFaceField), Tx::Int64, Ty::Int64, Tz::Int64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:9
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:51 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:34 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Field initialization: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:52
  Test threw exception
  Expression: correct_field_size(arch, grid, ZFaceField, N[1] + 2 * H[1], N[2] + 2 * H[2], N[3] + 1 + 2 * H[3])
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float64, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float64, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float64, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float64, Periodic, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] ZFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float64, Periodic, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:148
   [35] ZFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:154 [inlined]
   [36] correct_field_size(a::GPU, g::RegularCartesianGrid{Float64, Periodic, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, fieldtype::typeof(ZFaceField), Tx::Int64, Ty::Int64, Tz::Int64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:9
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:52 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:34 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Field initialization: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:55
  Test threw exception
  Expression: correct_field_size(arch, grid, CellField, N[1] + 2 * H[1], N[2] + 2 * H[2], N[3] + 2 * H[3])
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float64, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float64, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float64, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] CellField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:103
   [35] CellField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:151 [inlined]
   [36] correct_field_size(a::GPU, g::RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, fieldtype::typeof(CellField), Tx::Int64, Ty::Int64, Tz::Int64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:9
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:55 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:34 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Field initialization: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:56
  Test threw exception
  Expression: correct_field_size(arch, grid, XFaceField, N[1] + 1 + 2 * H[1], N[2] + 2 * H[2], N[3] + 2 * H[3])
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float64, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float64, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float64, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] XFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:118
   [35] XFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:152 [inlined]
   [36] correct_field_size(a::GPU, g::RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, fieldtype::typeof(XFaceField), Tx::Int64, Ty::Int64, Tz::Int64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:9
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:56 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:34 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Field initialization: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:57
  Test threw exception
  Expression: correct_field_size(arch, grid, YFaceField, N[1] + 2 * H[1], N[2] + 1 + 2 * H[2], N[3] + 2 * H[3])
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float64, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float64, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float64, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] YFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:133
   [35] YFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:153 [inlined]
   [36] correct_field_size(a::GPU, g::RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, fieldtype::typeof(YFaceField), Tx::Int64, Ty::Int64, Tz::Int64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:9
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:57 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:34 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Field initialization: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:58
  Test threw exception
  Expression: correct_field_size(arch, grid, ZFaceField, N[1] + 2 * H[1], N[2] + 2 * H[2], N[3] + 1 + 2 * H[3])
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float64, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float64, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float64, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float64, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] ZFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:148
   [35] ZFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:154 [inlined]
   [36] correct_field_size(a::GPU, g::RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, fieldtype::typeof(ZFaceField), Tx::Int64, Ty::Int64, Tz::Int64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:9
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:58 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:34 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
[2020/09/16 23:56:35.719] INFO    Testing field setting...
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] CellField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:103
   [35] CellField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:151 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(CellField), val::Int64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] CellField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:103
   [35] CellField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:151 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(CellField), val::Int8)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] CellField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:103
   [35] CellField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:151 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(CellField), val::Int16)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] CellField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:103
   [35] CellField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:151 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(CellField), val::Int32)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] CellField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:103
   [35] CellField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:151 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(CellField), val::Int64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] CellField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:103
   [35] CellField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:151 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(CellField), val::Int128)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] CellField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:103
   [35] CellField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:151 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(CellField), val::Int64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] CellField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:103
   [35] CellField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:151 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(CellField), val::UInt8)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] CellField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:103
   [35] CellField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:151 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(CellField), val::UInt16)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] CellField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:103
   [35] CellField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:151 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(CellField), val::UInt32)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] CellField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:103
   [35] CellField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:151 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(CellField), val::UInt64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] CellField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:103
   [35] CellField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:151 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(CellField), val::UInt128)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] CellField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:103
   [35] CellField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:151 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(CellField), val::Float64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] CellField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:103
   [35] CellField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:151 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(CellField), val::Float64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] CellField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:103
   [35] CellField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:151 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(CellField), val::Float64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] CellField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:103
   [35] CellField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:151 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(CellField), val::Float32)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] CellField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:103
   [35] CellField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:151 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(CellField), val::Rational{Int64})
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] CellField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:103
   [35] CellField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:151 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(CellField), val::Rational{Int64})
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] CellField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:103
   [35] CellField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:151 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(CellField), val::Irrational{:π})
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] XFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:118
   [35] XFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:152 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(XFaceField), val::Int64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] XFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:118
   [35] XFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:152 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(XFaceField), val::Int8)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] XFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:118
   [35] XFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:152 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(XFaceField), val::Int16)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] XFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:118
   [35] XFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:152 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(XFaceField), val::Int32)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] XFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:118
   [35] XFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:152 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(XFaceField), val::Int64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] XFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:118
   [35] XFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:152 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(XFaceField), val::Int128)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] XFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:118
   [35] XFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:152 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(XFaceField), val::Int64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] XFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:118
   [35] XFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:152 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(XFaceField), val::UInt8)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] XFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:118
   [35] XFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:152 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(XFaceField), val::UInt16)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] XFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:118
   [35] XFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:152 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(XFaceField), val::UInt32)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] XFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:118
   [35] XFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:152 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(XFaceField), val::UInt64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] XFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:118
   [35] XFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:152 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(XFaceField), val::UInt128)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] XFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:118
   [35] XFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:152 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(XFaceField), val::Float64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] XFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:118
   [35] XFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:152 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(XFaceField), val::Float64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] XFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:118
   [35] XFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:152 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(XFaceField), val::Float64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] XFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:118
   [35] XFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:152 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(XFaceField), val::Float32)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] XFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:118
   [35] XFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:152 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(XFaceField), val::Rational{Int64})
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] XFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:118
   [35] XFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:152 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(XFaceField), val::Rational{Int64})
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] XFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:118
   [35] XFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:152 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(XFaceField), val::Irrational{:π})
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] YFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:133
   [35] YFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:153 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(YFaceField), val::Int64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] YFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:133
   [35] YFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:153 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(YFaceField), val::Int8)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] YFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:133
   [35] YFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:153 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(YFaceField), val::Int16)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] YFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:133
   [35] YFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:153 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(YFaceField), val::Int32)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] YFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:133
   [35] YFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:153 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(YFaceField), val::Int64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] YFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:133
   [35] YFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:153 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(YFaceField), val::Int128)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] YFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:133
   [35] YFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:153 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(YFaceField), val::Int64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] YFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:133
   [35] YFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:153 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(YFaceField), val::UInt8)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] YFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:133
   [35] YFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:153 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(YFaceField), val::UInt16)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] YFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:133
   [35] YFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:153 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(YFaceField), val::UInt32)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] YFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:133
   [35] YFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:153 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(YFaceField), val::UInt64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] YFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:133
   [35] YFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:153 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(YFaceField), val::UInt128)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] YFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:133
   [35] YFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:153 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(YFaceField), val::Float64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] YFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:133
   [35] YFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:153 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(YFaceField), val::Float64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] YFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:133
   [35] YFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:153 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(YFaceField), val::Float64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] YFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:133
   [35] YFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:153 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(YFaceField), val::Float32)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] YFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:133
   [35] YFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:153 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(YFaceField), val::Rational{Int64})
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] YFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:133
   [35] YFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:153 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(YFaceField), val::Rational{Int64})
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] YFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:133
   [35] YFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:153 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(YFaceField), val::Irrational{:π})
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] ZFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:148
   [35] ZFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:154 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(ZFaceField), val::Int64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] ZFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:148
   [35] ZFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:154 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(ZFaceField), val::Int8)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] ZFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:148
   [35] ZFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:154 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(ZFaceField), val::Int16)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] ZFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:148
   [35] ZFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:154 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(ZFaceField), val::Int32)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] ZFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:148
   [35] ZFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:154 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(ZFaceField), val::Int64)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25
Setting fields: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77
  Test threw exception
  Expression: correct_field_value_was_set(arch, grid, fieldtype, val)
  MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), emitted_function=GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(PTX CompilerJob of function unbox_uint64(Any) for sm_75, Core.MethodInstance[MethodInstance for unbox_uint64(::Any)], #undef)), gnu_pubnames=false, debug_info_kind=0)
  Closest candidates are:
    Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:972 got unsupported keyword arguments "static_alloc", "emit_function", "emitted_function"
  Stacktrace:
    [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var"#hook_emit_function#23"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var"#hook_emitted_function#24"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)
      @ Base ./error.jl:157
    [2] compile_method_instance(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:119
    [3] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [4] irgen(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, method_instance::Core.MethodInstance, world::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/irgen.jl:332
    [5] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:101 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]
    [8] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:100
    [9] emit_function!(mod::LLVM.Module, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, f::Function, method::GPUCompiler.Runtime.RuntimeMethodInstance)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:77
   [10] build_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:117
   [11] (::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String})()
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:159
   [12] get!(default::GPUCompiler.var"#52#55"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String, String}, h::Dict{String, LLVM.Module}, key::String)
      @ Base ./dict.jl:465
   [13] load_runtime(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/rtlib.jl:151
   [14] codegen(output::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:96
   [15] compile(target::Symbol, job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:39
   [16] compile
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:35 [inlined]
   [17] _cufunction(source::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310
   [18] _cufunction
      @ ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:304 [inlined]
   [19] #87
      @ ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]
   [20] get!(default::GPUCompiler.var"#87#88"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CUDA._cufunction), GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}}, h::Dict{UInt64, Any}, key::UInt64)
      @ Base ./dict.jl:465
   [21] macro expansion
      @ ./lock.jl:190 [inlined]
   [22] check_cache(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, id::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19
   [23] cached_compilation(driver::typeof(CUDA._cufunction), spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [24] cached_compilation(driver::Function, spec::GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#14", Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}, env::UInt64)
      @ GPUCompiler ~/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:33
   [25] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}}; name::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298
   [26] cufunction(f::GPUArrays.var"#broadcast_kernel#14", tt::Type{Tuple{CUDA.CuKernelContext, CuDeviceArray{Float32, 3, CUDA.AS.Global}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, Int64}})
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:293
   [27] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64; maximize_blocksize::Bool)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:19
   [28] launch_heuristic(::CUDA.CuArrayBackend, ::GPUArrays.var"#broadcast_kernel#14", ::CuArray{Float32, 3}, ::Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Int64}}, ::Int64)
      @ CUDA ~/.julia/packages/CUDA/dZvbp/src/gpuarrays.jl:17
   [29] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:66 [inlined]
   [30] copyto!
      @ ~/.julia/packages/GPUArrays/f3yak/src/host/broadcast.jl:76 [inlined]
   [31] materialize!
      @ ./broadcast.jl:848 [inlined]
   [32] materialize!(dest::CuArray{Float32, 3}, bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(identity), Tuple{Int64}})
      @ Base.Broadcast ./broadcast.jl:845
   [33] zeros(FT::Type, ::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, loc::Tuple{DataType, DataType, DataType})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:309
   [34] ZFaceField(FT::DataType, arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.Fields ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:148
   [35] ZFaceField
      @ ~/.julia/packages/Oceananigans/mqzPY/src/Fields/field.jl:154 [inlined]
   [36] correct_field_value_was_set(arch::GPU, grid::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, fieldtype::typeof(ZFaceField), val::Int128)
      @ Main ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:19
   [37] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:77 [inlined]
   [38] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [39] macro expansion
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:70 [inlined]
   [40] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
   [41] top-level scope
      @ ~/.julia/packages/Oceananigans/mqzPY/test/test_fields.jl:25

signal (15): Terminated
in expression starting at none:19
