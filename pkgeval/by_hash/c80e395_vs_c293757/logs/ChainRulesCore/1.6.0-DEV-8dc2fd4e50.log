Current time is 2020-10-26T22:37:29.671
Julia Version 1.6.0-DEV.1355
Commit 8dc2fd4e50 (2020-10-26 20:08 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: AMD EPYC 7502 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-11.0.0 (ORCJIT, znver2)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2
  JULIA_MAX_NUM_PRECOMPILE_FILES = 9223372036854775807
  JULIA_PKG_SERVER = 

Starting installation at 2020-10-26T22:37:30.938
   Resolving package versions...
   Installed MuladdMacro â”€â”€â”€â”€ v0.2.2
   Installed ChainRulesCore â”€ v0.9.17
Updating `~/.julia/environments/v1.6/Project.toml`
  [d360d2e6] + ChainRulesCore v0.9.17
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [d360d2e6] + ChainRulesCore v0.9.17
  [46d2c3a1] + MuladdMacro v0.2.2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [9a3f8284] + Random
  [9e88b42a] + Serialization
  [2f01184e] + SparseArrays
Precompiling project... (tip: to disable auto-precompilation set ENV["JULIA_PKG_PRECOMPILE_AUTO"]=0)
[32m  âœ“ [39m[90mMuladdMacro[39m
[32m  âœ“ [39mChainRulesCore
2 dependencies successfully precompiled
Starting tests at 2020-10-26T22:37:34.498
     Testing ChainRulesCore
[?25l    Fetching: [>                                        ]  0.0 %[2K[?25h[?25l    Fetching: [>                                        ]  0.0 %[2K[?25hStatus `/tmp/jl_aA8vcX/Project.toml`
  [6e4b80f9] BenchmarkTools v0.5.0
  [d360d2e6] ChainRulesCore v0.9.17
  [26cc04aa] FiniteDifferences v0.10.9
  [46d2c3a1] MuladdMacro v0.2.2
  [90137ffa] StaticArrays v0.12.4
  [37e2e46d] LinearAlgebra
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_aA8vcX/Manifest.toml`
  [6e4b80f9] BenchmarkTools v0.5.0
  [d360d2e6] ChainRulesCore v0.9.17
  [26cc04aa] FiniteDifferences v0.10.9
  [682c06a0] JSON v0.21.1
  [46d2c3a1] MuladdMacro v0.2.2
  [69de0a69] Parsers v1.0.11
  [90137ffa] StaticArrays v0.12.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [b77e0a4c] InteractiveUtils
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [de0858da] Printf
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
     Testing Running tests...
WARNING: Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead).WARNING: Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead).WARNING: Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead).WARNING: Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead).RHS StaticArray: Error During Test at /home/pkgeval/.julia/packages/ChainRulesCore/UayCG/test/accumulation.jl:46
  Got exception outside of a @test
  TypeError: in <:, expected Type, got Vararg
  Stacktrace:
    [1] #s26#5
      @ ~/.julia/packages/StaticArrays/l7lu2/src/util.jl:20 [inlined]
    [2] var"#s26#5"(T::Any, ::Any, #unused#::Any)
      @ StaticArrays ./none:0
    [3] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any})
      @ Core ./boot.jl:574
    [4] macro expansion
      @ ~/.julia/packages/StaticArrays/l7lu2/src/SMatrix.jl:35 [inlined]
    [5] (SMatrix{2, 2, T, L} where L where T)(x::NTuple{4, Float64})
      @ StaticArrays ~/.julia/packages/StaticArrays/l7lu2/src/SMatrix.jl:32
    [6] macro expansion
      @ ~/.julia/packages/ChainRulesCore/UayCG/test/accumulation.jl:47 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/ChainRulesCore/UayCG/test/accumulation.jl:47 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] macro expansion
      @ ~/.julia/packages/ChainRulesCore/UayCG/test/accumulation.jl:38 [inlined]
   [11] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [12] macro expansion
      @ ~/.julia/packages/ChainRulesCore/UayCG/test/accumulation.jl:37 [inlined]
   [13] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [14] macro expansion
      @ ~/.julia/packages/ChainRulesCore/UayCG/test/accumulation.jl:25 [inlined]
   [15] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [16] top-level scope
      @ ~/.julia/packages/ChainRulesCore/UayCG/test/accumulation.jl:2
   [17] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [18] macro expansion
      @ ~/.julia/packages/ChainRulesCore/UayCG/test/runtests.jl:17 [inlined]
   [19] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [20] top-level scope
      @ ~/.julia/packages/ChainRulesCore/UayCG/test/runtests.jl:10
   [21] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [22] top-level scope
      @ none:6
   [23] eval(m::Module, e::Any)
      @ Core ./boot.jl:369
   [24] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [25] _start()
      @ Base ./client.jl:485
add!!(::StaticArray, ::Array) (out of place): Error During Test at /home/pkgeval/.julia/packages/ChainRulesCore/UayCG/test/accumulation.jl:63
  Got exception outside of a @test
  TypeError: in <:, expected Type, got Vararg
  Stacktrace:
    [1] #s26#5
      @ ~/.julia/packages/StaticArrays/l7lu2/src/util.jl:20 [inlined]
    [2] var"#s26#5"(T::Any, ::Any, #unused#::Any)
      @ StaticArrays ./none:0
    [3] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any})
      @ Core ./boot.jl:574
    [4] macro expansion
      @ ~/.julia/packages/StaticArrays/l7lu2/src/SMatrix.jl:35 [inlined]
    [5] (SMatrix{2, 2, T, L} where L where T)(x::NTuple{4, Float64})
      @ StaticArrays ~/.julia/packages/StaticArrays/l7lu2/src/SMatrix.jl:32
    [6] macro expansion
      @ ~/.julia/packages/ChainRulesCore/UayCG/test/accumulation.jl:65 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/ChainRulesCore/UayCG/test/accumulation.jl:64 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] macro expansion
      @ ~/.julia/packages/ChainRulesCore/UayCG/test/accumulation.jl:37 [inlined]
   [11] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [12] macro expansion
      @ ~/.julia/packages/ChainRulesCore/UayCG/test/accumulation.jl:25 [inlined]
   [13] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [14] top-level scope
      @ ~/.julia/packages/ChainRulesCore/UayCG/test/accumulation.jl:2
   [15] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [16] macro expansion
      @ ~/.julia/packages/ChainRulesCore/UayCG/test/runtests.jl:17 [inlined]
   [17] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [18] top-level scope
      @ ~/.julia/packages/ChainRulesCore/UayCG/test/runtests.jl:10
   [19] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [20] top-level scope
      @ none:6
   [21] eval(m::Module, e::Any)
      @ Core ./boot.jl:369
   [22] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [23] _start()
      @ Base ./client.jl:485
out of place: Error During Test at /home/pkgeval/.julia/packages/ChainRulesCore/UayCG/test/accumulation.jl:103
  Got exception outside of a @test
  TypeError: in <:, expected Type, got Vararg
  Stacktrace:
    [1] #s26#5
      @ ~/.julia/packages/StaticArrays/l7lu2/src/util.jl:20 [inlined]
    [2] var"#s26#5"(T::Any, ::Any, #unused#::Any)
      @ StaticArrays ./none:0
    [3] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any})
      @ Core ./boot.jl:574
    [4] macro expansion
      @ ~/.julia/packages/StaticArrays/l7lu2/src/SMatrix.jl:35 [inlined]
    [5] (SMatrix{2, 2, T, L} where L where T)(x::NTuple{4, Float64})
      @ StaticArrays ~/.julia/packages/StaticArrays/l7lu2/src/SMatrix.jl:32
    [6] macro expansion
      @ ~/.julia/packages/ChainRulesCore/UayCG/test/accumulation.jl:104 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/ChainRulesCore/UayCG/test/accumulation.jl:104 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] macro expansion
      @ ~/.julia/packages/ChainRulesCore/UayCG/test/accumulation.jl:91 [inlined]
   [11] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [12] macro expansion
      @ ~/.julia/packages/ChainRulesCore/UayCG/test/accumulation.jl:25 [inlined]
   [13] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [14] top-level scope
      @ ~/.julia/packages/ChainRulesCore/UayCG/test/accumulation.jl:2
   [15] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [16] macro expansion
      @ ~/.julia/packages/ChainRulesCore/UayCG/test/runtests.jl:17 [inlined]
   [17] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [18] top-level scope
      @ ~/.julia/packages/ChainRulesCore/UayCG/test/runtests.jl:10
   [19] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [20] top-level scope
      @ none:6
   [21] eval(m::Module, e::Any)
      @ Core ./boot.jl:369
   [22] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [23] _start()
      @ Base ./client.jl:485
â”Œ Error: Error triggering hook
â”‚   hook_fun = define_dual_overload (generic function with 1 method)
â”‚   sig = Tuple{typeof(Core._apply), Any, Vararg{Any}}
â”‚   exception =
â”‚    TypeError: in <:, expected Type, got Vararg{Any}
â”‚    Stacktrace:
â”‚      [1] #3
â”‚        @ ./none:0 [inlined]
â”‚      [2] iterate
â”‚        @ ./generator.jl:47 [inlined]
â”‚      [3] _all(f::typeof(identity), itr::Base.Generator{Base.Iterators.Rest{Core.SimpleVector, Int64}, Main.ForwardDiffZero.var"#3#4"}, #unused#::Colon)
â”‚        @ Base ./reduce.jl:930
â”‚      [4] all
â”‚        @ ./reduce.jl:918 [inlined]
â”‚      [5] all(itr::Base.Generator{Base.Iterators.Rest{Core.SimpleVector, Int64}, Main.ForwardDiffZero.var"#3#4"})
â”‚        @ Base ./reduce.jl:836
â”‚      [6] define_dual_overload(sig::Type)
â”‚        @ Main.ForwardDiffZero ~/.julia/packages/ChainRulesCore/UayCG/test/demos/forwarddiffzero.jl:34
â”‚      [7] _safe_hook_fun(hook_fun::typeof(Main.ForwardDiffZero.define_dual_overload), sig::Type)
â”‚        @ ChainRulesCore ~/.julia/packages/ChainRulesCore/UayCG/src/ruleset_loading.jl:137
â”‚      [8] (::ChainRulesCore.var"#64#65"{typeof(Main.ForwardDiffZero.define_dual_overload), typeof(frule)})(method::Method)
â”‚        @ ChainRulesCore ~/.julia/packages/ChainRulesCore/UayCG/src/ruleset_loading.jl:33
â”‚      [9] iterate
â”‚        @ ./generator.jl:47 [inlined]
â”‚     [10] grow_to!(dest::Vector{Nothing}, itr::Base.Generator{Base.Generator{Base.Iterators.Filter{ChainRulesCore.var"#66#67", Base.MethodList}, typeof(identity)}, ChainRulesCore.var"#64#65"{typeof(Main.ForwardDiffZero.define_dual_overload), typeof(frule)}}, st::Int64)
â”‚        @ Base ./array.jl:778
â”‚     [11] grow_to!(dest::Vector{Any}, itr::Base.Generator{Base.Generator{Base.Iterators.Filter{ChainRulesCore.var"#66#67", Base.MethodList}, typeof(identity)}, ChainRulesCore.var"#64#65"{typeof(Main.ForwardDiffZero.define_dual_overload), typeof(frule)}})
â”‚        @ Base ./array.jl:751
â”‚     [12] collect(itr::Base.Generator{Base.Generator{Base.Iterators.Filter{ChainRulesCore.var"#66#67", Base.MethodList}, typeof(identity)}, ChainRulesCore.var"#64#65"{typeof(Main.ForwardDiffZero.define_dual_overload), typeof(frule)}})
â”‚        @ Base ./array.jl:684
â”‚     [13] map(f::Function, A::Base.Generator{Base.Iterators.Filter{ChainRulesCore.var"#66#67", Base.MethodList}, typeof(identity)})
â”‚        @ Base ./abstractarray.jl:2267
â”‚     [14] on_new_rule(hook_fun::Function, rule_kind::Function)
â”‚        @ ChainRulesCore ~/.julia/packages/ChainRulesCore/UayCG/src/ruleset_loading.jl:31
â”‚     [15] top-level scope
â”‚        @ ~/.julia/packages/ChainRulesCore/UayCG/test/demos/forwarddiffzero.jl:51
â”‚     [16] include(fname::String)
â”‚        @ Base.MainInclude ./client.jl:444
â”‚     [17] macro expansion
â”‚        @ ~/.julia/packages/ChainRulesCore/UayCG/test/runtests.jl:25 [inlined]
â”‚     [18] macro expansion
â”‚        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
â”‚     [19] macro expansion
â”‚        @ ~/.julia/packages/ChainRulesCore/UayCG/test/runtests.jl:25 [inlined]
â”‚     [20] macro expansion
â”‚        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
â”‚     [21] top-level scope
â”‚        @ ~/.julia/packages/ChainRulesCore/UayCG/test/runtests.jl:10
â”‚     [22] include(fname::String)
â”‚        @ Base.MainInclude ./client.jl:444
â”‚     [23] top-level scope
â”‚        @ none:6
â”‚     [24] eval(m::Module, e::Any)
â”‚        @ Core ./boot.jl:369
â”‚     [25] exec_options(opts::Base.JLOptions)
â”‚        @ Base ./client.jl:261
â”‚     [26] _start()
â”‚        @ Base ./client.jl:485
â”” @ ChainRulesCore ~/.julia/packages/ChainRulesCore/UayCG/src/ruleset_loading.jl:139
â”Œ Error: Error triggering hook
â”‚   hook_fun = define_dual_overload (generic function with 1 method)
â”‚   sig = Tuple{typeof(varargs_function), Vararg{Any}}
â”‚   exception =
â”‚    TypeError: in <:, expected Type, got Vararg{Any}
â”‚    Stacktrace:
â”‚      [1] #3
â”‚        @ ./essentials.jl:0 [inlined]
â”‚      [2] iterate
â”‚        @ ./generator.jl:47 [inlined]
â”‚      [3] _all(f::typeof(identity), itr::Base.Generator{Base.Iterators.Rest{Core.SimpleVector, Int64}, Main.ForwardDiffZero.var"#3#4"}, #unused#::Colon)
â”‚        @ Base ./reduce.jl:922
â”‚      [4] all
â”‚        @ ./reduce.jl:918 [inlined]
â”‚      [5] all(itr::Base.Generator{Base.Iterators.Rest{Core.SimpleVector, Int64}, Main.ForwardDiffZero.var"#3#4"})
â”‚        @ Base ./reduce.jl:836
â”‚      [6] define_dual_overload(sig::Type)
â”‚        @ Main.ForwardDiffZero ~/.julia/packages/ChainRulesCore/UayCG/test/demos/forwarddiffzero.jl:34
â”‚      [7] _safe_hook_fun(hook_fun::typeof(Main.ForwardDiffZero.define_dual_overload), sig::Type)
â”‚        @ ChainRulesCore ~/.julia/packages/ChainRulesCore/UayCG/src/ruleset_loading.jl:137
â”‚      [8] (::ChainRulesCore.var"#64#65"{typeof(Main.ForwardDiffZero.define_dual_overload), typeof(frule)})(method::Method)
â”‚        @ ChainRulesCore ~/.julia/packages/ChainRulesCore/UayCG/src/ruleset_loading.jl:33
â”‚      [9] iterate
â”‚        @ ./generator.jl:47 [inlined]
â”‚     [10] grow_to!(dest::Vector{Nothing}, itr::Base.Generator{Base.Generator{Base.Iterators.Filter{ChainRulesCore.var"#66#67", Base.MethodList}, typeof(identity)}, ChainRulesCore.var"#64#65"{typeof(Main.ForwardDiffZero.define_dual_overload), typeof(frule)}}, st::Int64)
â”‚        @ Base ./array.jl:778
â”‚     [11] grow_to!(dest::Vector{Any}, itr::Base.Generator{Base.Generator{Base.Iterators.Filter{ChainRulesCore.var"#66#67", Base.MethodList}, typeof(identity)}, ChainRulesCore.var"#64#65"{typeof(Main.ForwardDiffZero.define_dual_overload), typeof(frule)}})
â”‚        @ Base ./array.jl:751
â”‚     [12] collect(itr::Base.Generator{Base.Generator{Base.Iterators.Filter{ChainRulesCore.var"#66#67", Base.MethodList}, typeof(identity)}, ChainRulesCore.var"#64#65"{typeof(Main.ForwardDiffZero.define_dual_overload), typeof(frule)}})
â”‚        @ Base ./array.jl:684
â”‚     [13] map(f::Function, A::Base.Generator{Base.Iterators.Filter{ChainRulesCore.var"#66#67", Base.MethodList}, typeof(identity)})
â”‚        @ Base ./abstractarray.jl:2267
â”‚     [14] on_new_rule(hook_fun::Function, rule_kind::Function)
â”‚        @ ChainRulesCore ~/.julia/packages/ChainRulesCore/UayCG/src/ruleset_loading.jl:31
â”‚     [15] top-level scope
â”‚        @ ~/.julia/packages/ChainRulesCore/UayCG/test/demos/forwarddiffzero.jl:51
â”‚     [16] include(fname::String)
â”‚        @ Base.MainInclude ./client.jl:444
â”‚     [17] macro expansion
â”‚        @ ~/.julia/packages/ChainRulesCore/UayCG/test/runtests.jl:25 [inlined]
â”‚     [18] macro expansion
â”‚        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
â”‚     [19] macro expansion
â”‚        @ ~/.julia/packages/ChainRulesCore/UayCG/test/runtests.jl:25 [inlined]
â”‚     [20] macro expansion
â”‚        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
â”‚     [21] top-level scope
â”‚        @ ~/.julia/packages/ChainRulesCore/UayCG/test/runtests.jl:10
â”‚     [22] include(fname::String)
â”‚        @ Base.MainInclude ./client.jl:444
â”‚     [23] top-level scope
â”‚        @ none:6
â”‚     [24] eval(m::Module, e::Any)
â”‚        @ Core ./boot.jl:369
â”‚     [25] exec_options(opts::Base.JLOptions)
â”‚        @ Base ./client.jl:261
â”‚     [26] _start()
â”‚        @ Base ./client.jl:485
â”” @ ChainRulesCore ~/.julia/packages/ChainRulesCore/UayCG/src/ruleset_loading.jl:139
â”Œ Error: Error triggering hook
â”‚   hook_fun = define_dual_overload (generic function with 1 method)
â”‚   sig = Tuple{typeof(mixed_vararg), Any, Any, Vararg{Any}}
â”‚   exception =
â”‚    TypeError: in <:, expected Type, got Vararg{Any}
â”‚    Stacktrace:
â”‚      [1] #3
â”‚        @ ./none:0 [inlined]
â”‚      [2] iterate
â”‚        @ ./generator.jl:47 [inlined]
â”‚      [3] _all(f::typeof(identity), itr::Base.Generator{Base.Iterators.Rest{Core.SimpleVector, Int64}, Main.ForwardDiffZero.var"#3#4"}, #unused#::Colon)
â”‚        @ Base ./reduce.jl:930
â”‚      [4] all
â”‚        @ ./reduce.jl:918 [inlined]
â”‚      [5] all(itr::Base.Generator{Base.Iterators.Rest{Core.SimpleVector, Int64}, Main.ForwardDiffZero.var"#3#4"})
â”‚        @ Base ./reduce.jl:836
â”‚      [6] define_dual_overload(sig::Type)
â”‚        @ Main.ForwardDiffZero ~/.julia/packages/ChainRulesCore/UayCG/test/demos/forwarddiffzero.jl:34
â”‚      [7] _safe_hook_fun(hook_fun::typeof(Main.ForwardDiffZero.define_dual_overload), sig::Type)
â”‚        @ ChainRulesCore ~/.julia/packages/ChainRulesCore/UayCG/src/ruleset_loading.jl:137
â”‚      [8] (::ChainRulesCore.var"#64#65"{typeof(Main.ForwardDiffZero.define_dual_overload), typeof(frule)})(method::Method)
â”‚        @ ChainRulesCore ~/.julia/packages/ChainRulesCore/UayCG/src/ruleset_loading.jl:33
â”‚      [9] iterate
â”‚        @ ./generator.jl:47 [inlined]
â”‚     [10] grow_to!(dest::Vector{Nothing}, itr::Base.Generator{Base.Generator{Base.Iterators.Filter{ChainRulesCore.var"#66#67", Base.MethodList}, typeof(identity)}, ChainRulesCore.var"#64#65"{typeof(Main.ForwardDiffZero.define_dual_overload), typeof(frule)}}, st::Int64)
â”‚        @ Base ./array.jl:778
â”‚     [11] grow_to!(dest::Vector{Any}, itr::Base.Generator{Base.Generator{Base.Iterators.Filter{ChainRulesCore.var"#66#67", Base.MethodList}, typeof(identity)}, ChainRulesCore.var"#64#65"{typeof(Main.ForwardDiffZero.define_dual_overload), typeof(frule)}})
â”‚        @ Base ./array.jl:751
â”‚     [12] collect(itr::Base.Generator{Base.Generator{Base.Iterators.Filter{ChainRulesCore.var"#66#67", Base.MethodList}, typeof(identity)}, ChainRulesCore.var"#64#65"{typeof(Main.ForwardDiffZero.define_dual_overload), typeof(frule)}})
â”‚        @ Base ./array.jl:684
â”‚     [13] map(f::Function, A::Base.Generator{Base.Iterators.Filter{ChainRulesCore.var"#66#67", Base.MethodList}, typeof(identity)})
â”‚        @ Base ./abstractarray.jl:2267
â”‚     [14] on_new_rule(hook_fun::Function, rule_kind::Function)
â”‚        @ ChainRulesCore ~/.julia/packages/ChainRulesCore/UayCG/src/ruleset_loading.jl:31
â”‚     [15] top-level scope
â”‚        @ ~/.julia/packages/ChainRulesCore/UayCG/test/demos/forwarddiffzero.jl:51
â”‚     [16] include(fname::String)
â”‚        @ Base.MainInclude ./client.jl:444
â”‚     [17] macro expansion
â”‚        @ ~/.julia/packages/ChainRulesCore/UayCG/test/runtests.jl:25 [inlined]
â”‚     [18] macro expansion
â”‚        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
â”‚     [19] macro expansion
â”‚        @ ~/.julia/packages/ChainRulesCore/UayCG/test/runtests.jl:25 [inlined]
â”‚     [20] macro expansion
â”‚        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
â”‚     [21] top-level scope
â”‚        @ ~/.julia/packages/ChainRulesCore/UayCG/test/runtests.jl:10
â”‚     [22] include(fname::String)
â”‚        @ Base.MainInclude ./client.jl:444
â”‚     [23] top-level scope
â”‚        @ none:6
â”‚     [24] eval(m::Module, e::Any)
â”‚        @ Core ./boot.jl:369
â”‚     [25] exec_options(opts::Base.JLOptions)
â”‚        @ Base ./client.jl:261
â”‚     [26] _start()
â”‚        @ Base ./client.jl:485
â”” @ ChainRulesCore ~/.julia/packages/ChainRulesCore/UayCG/src/ruleset_loading.jl:139
â”Œ Error: Error triggering hook
â”‚   hook_fun = define_dual_overload (generic function with 1 method)
â”‚   sig = Tuple{typeof(mixed_vararg_type_constaint), Float64, Real, Vararg{Float64}}
â”‚   exception =
â”‚    TypeError: in <:, expected Type, got Vararg{Float64}
â”‚    Stacktrace:
â”‚      [1] #3
â”‚        @ ./none:0 [inlined]
â”‚      [2] iterate
â”‚        @ ./generator.jl:47 [inlined]
â”‚      [3] _all(f::typeof(identity), itr::Base.Generator{Base.Iterators.Rest{Core.SimpleVector, Int64}, Main.ForwardDiffZero.var"#3#4"}, #unused#::Colon)
â”‚        @ Base ./reduce.jl:930
â”‚      [4] all
â”‚        @ ./reduce.jl:918 [inlined]
â”‚      [5] all(itr::Base.Generator{Base.Iterators.Rest{Core.SimpleVector, Int64}, Main.ForwardDiffZero.var"#3#4"})
â”‚        @ Base ./reduce.jl:836
â”‚      [6] define_dual_overload(sig::Type)
â”‚        @ Main.ForwardDiffZero ~/.julia/packages/ChainRulesCore/UayCG/test/demos/forwarddiffzero.jl:34
â”‚      [7] _safe_hook_fun(hook_fun::typeof(Main.ForwardDiffZero.define_dual_overload), sig::Type)
â”‚        @ ChainRulesCore ~/.julia/packages/ChainRulesCore/UayCG/src/ruleset_loading.jl:137
â”‚      [8] (::ChainRulesCore.var"#64#65"{typeof(Main.ForwardDiffZero.define_dual_overload), typeof(frule)})(method::Method)
â”‚        @ ChainRulesCore ~/.julia/packages/ChainRulesCore/UayCG/src/ruleset_loading.jl:33
â”‚      [9] iterate
â”‚        @ ./generator.jl:47 [inlined]
â”‚     [10] grow_to!(dest::Vector{Nothing}, itr::Base.Generator{Base.Generator{Base.Iterators.Filter{ChainRulesCore.var"#66#67", Base.MethodList}, typeof(identity)}, ChainRulesCore.var"#64#65"{typeof(Main.ForwardDiffZero.define_dual_overload), typeof(frule)}}, st::Int64)
â”‚        @ Base ./array.jl:778
â”‚     [11] grow_to!(dest::Vector{Any}, itr::Base.Generator{Base.Generator{Base.Iterators.Filter{ChainRulesCore.var"#66#67", Base.MethodList}, typeof(identity)}, ChainRulesCore.var"#64#65"{typeof(Main.ForwardDiffZero.define_dual_overload), typeof(frule)}})
â”‚        @ Base ./array.jl:751
â”‚     [12] collect(itr::Base.Generator{Base.Generator{Base.Iterators.Filter{ChainRulesCore.var"#66#67", Base.MethodList}, typeof(identity)}, ChainRulesCore.var"#64#65"{typeof(Main.ForwardDiffZero.define_dual_overload), typeof(frule)}})
â”‚        @ Base ./array.jl:684
â”‚     [13] map(f::Function, A::Base.Generator{Base.Iterators.Filter{ChainRulesCore.var"#66#67", Base.MethodList}, typeof(identity)})
â”‚        @ Base ./abstractarray.jl:2267
â”‚     [14] on_new_rule(hook_fun::Function, rule_kind::Function)
â”‚        @ ChainRulesCore ~/.julia/packages/ChainRulesCore/UayCG/src/ruleset_loading.jl:31
â”‚     [15] top-level scope
â”‚        @ ~/.julia/packages/ChainRulesCore/UayCG/test/demos/forwarddiffzero.jl:51
â”‚     [16] include(fname::String)
â”‚        @ Base.MainInclude ./client.jl:444
â”‚     [17] macro expansion
â”‚        @ ~/.julia/packages/ChainRulesCore/UayCG/test/runtests.jl:25 [inlined]
â”‚     [18] macro expansion
â”‚        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
â”‚     [19] macro expansion
â”‚        @ ~/.julia/packages/ChainRulesCore/UayCG/test/runtests.jl:25 [inlined]
â”‚     [20] macro expansion
â”‚        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
â”‚     [21] top-level scope
â”‚        @ ~/.julia/packages/ChainRulesCore/UayCG/test/runtests.jl:10
â”‚     [22] include(fname::String)
â”‚        @ Base.MainInclude ./client.jl:444
â”‚     [23] top-level scope
â”‚        @ none:6
â”‚     [24] eval(m::Module, e::Any)
â”‚        @ Core ./boot.jl:369
â”‚     [25] exec_options(opts::Base.JLOptions)
â”‚        @ Base ./client.jl:261
â”‚     [26] _start()
â”‚        @ Base ./client.jl:485
â”” @ ChainRulesCore ~/.julia/packages/ChainRulesCore/UayCG/src/ruleset_loading.jl:139
WARNING: Method definition simo(Union{Float64, ForwardDiffZero.Dual}) in module ForwardDiffZero at /home/pkgeval/.julia/packages/ChainRulesCore/UayCG/test/demos/forwarddiffzero.jl:40 overwritten on the same line.
WARNING: Method definition nondiff_2_1(Union{Float64, ForwardDiffZero.Dual}, Union{Float64, ForwardDiffZero.Dual}) in module ForwardDiffZero at /home/pkgeval/.julia/packages/ChainRulesCore/UayCG/test/demos/forwarddiffzero.jl:40 overwritten on the same line.
â”Œ Error: Error triggering hook
â”‚   hook_fun = define_dual_overload (generic function with 1 method)
â”‚   sig = Tuple{typeof(Core._apply), Any, Vararg{Any}}
â”‚   exception =
â”‚    TypeError: in <:, expected Type, got Vararg{Any}
â”‚    Stacktrace:
â”‚      [1] #3
â”‚        @ ./none:0 [inlined]
â”‚      [2] iterate
â”‚        @ ./generator.jl:47 [inlined]
â”‚      [3] _all(f::typeof(identity), itr::Base.Generator{Base.Iterators.Rest{Core.SimpleVector, Int64}, Main.ForwardDiffZero.var"#3#4"}, #unused#::Colon)
â”‚        @ Base ./reduce.jl:930
â”‚      [4] all
â”‚        @ ./reduce.jl:918 [inlined]
â”‚      [5] all(itr::Base.Generator{Base.Iterators.Rest{Core.SimpleVector, Int64}, Main.ForwardDiffZero.var"#3#4"})
â”‚        @ Base ./reduce.jl:836
â”‚      [6] define_dual_overload(sig::Type)
â”‚        @ Main.ForwardDiffZero ~/.julia/packages/ChainRulesCore/UayCG/test/demos/forwarddiffzero.jl:34
â”‚      [7] _safe_hook_fun(hook_fun::typeof(Main.ForwardDiffZero.define_dual_overload), sig::Type)
â”‚        @ ChainRulesCore ~/.julia/packages/ChainRulesCore/UayCG/src/ruleset_loading.jl:137
â”‚      [8] _trigger_new_rule_hooks(rule_kind::Function, sig::Type)
â”‚        @ ChainRulesCore ~/.julia/packages/ChainRulesCore/UayCG/src/ruleset_loading.jl:131
â”‚      [9] refresh_rules(rule_kind::Function)
â”‚        @ ChainRulesCore ~/.julia/packages/ChainRulesCore/UayCG/src/ruleset_loading.jl:90
â”‚     [10] refresh_rules()
â”‚        @ ChainRulesCore ~/.julia/packages/ChainRulesCore/UayCG/src/ruleset_loading.jl:80
â”‚     [11] top-level scope
â”‚        @ ~/.julia/packages/ChainRulesCore/UayCG/test/demos/forwarddiffzero.jl:68
â”‚     [12] include(fname::String)
â”‚        @ Base.MainInclude ./client.jl:444
â”‚     [13] macro expansion
â”‚        @ ~/.julia/packages/ChainRulesCore/UayCG/test/runtests.jl:25 [inlined]
â”‚     [14] macro expansion
â”‚        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
â”‚     [15] macro expansion
â”‚        @ ~/.julia/packages/ChainRulesCore/UayCG/test/runtests.jl:25 [inlined]
â”‚     [16] macro expansion
â”‚        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
â”‚     [17] top-level scope
â”‚        @ ~/.julia/packages/ChainRulesCore/UayCG/test/runtests.jl:10
â”‚     [18] include(fname::String)
â”‚        @ Base.MainInclude ./client.jl:444
â”‚     [19] top-level scope
â”‚        @ none:6
â”‚     [20] eval(m::Module, e::Any)
â”‚        @ Core ./boot.jl:369
â”‚     [21] exec_options(opts::Base.JLOptions)
â”‚        @ Base ./client.jl:261
â”‚     [22] _start()
â”‚        @ Base ./client.jl:485
â”” @ ChainRulesCore ~/.julia/packages/ChainRulesCore/UayCG/src/ruleset_loading.jl:139
â”Œ Error: Error triggering hook
â”‚   hook_fun = define_dual_overload (generic function with 1 method)
â”‚   sig = Tuple{typeof(varargs_function), Vararg{Any}}
â”‚   exception =
â”‚    TypeError: in <:, expected Type, got Vararg{Any}
â”‚    Stacktrace:
â”‚      [1] #3
â”‚        @ ./essentials.jl:0 [inlined]
â”‚      [2] iterate
â”‚        @ ./generator.jl:47 [inlined]
â”‚      [3] _all(f::typeof(identity), itr::Base.Generator{Base.Iterators.Rest{Core.SimpleVector, Int64}, Main.ForwardDiffZero.var"#3#4"}, #unused#::Colon)
â”‚        @ Base ./reduce.jl:922
â”‚      [4] all
â”‚        @ ./reduce.jl:918 [inlined]
â”‚      [5] all(itr::Base.Generator{Base.Iterators.Rest{Core.SimpleVector, Int64}, Main.ForwardDiffZero.var"#3#4"})
â”‚        @ Base ./reduce.jl:836
â”‚      [6] define_dual_overload(sig::Type)
â”‚        @ Main.ForwardDiffZero ~/.julia/packages/ChainRulesCore/UayCG/test/demos/forwarddiffzero.jl:34
â”‚      [7] _safe_hook_fun(hook_fun::typeof(Main.ForwardDiffZero.define_dual_overload), sig::Type)
â”‚        @ ChainRulesCore ~/.julia/packages/ChainRulesCore/UayCG/src/ruleset_loading.jl:137
â”‚      [8] _trigger_new_rule_hooks(rule_kind::Function, sig::Type)
â”‚        @ ChainRulesCore ~/.julia/packages/ChainRulesCore/UayCG/src/ruleset_loading.jl:131
â”‚      [9] refresh_rules(rule_kind::Function)
â”‚        @ ChainRulesCore ~/.julia/packages/ChainRulesCore/UayCG/src/ruleset_loading.jl:90
â”‚     [10] refresh_rules()
â”‚        @ ChainRulesCore ~/.julia/packages/ChainRulesCore/UayCG/src/ruleset_loading.jl:80
â”‚     [11] top-level scope
â”‚        @ ~/.julia/packages/ChainRulesCore/UayCG/test/demos/forwarddiffzero.jl:68
â”‚     [12] include(fname::String)
â”‚        @ Base.MainInclude ./client.jl:444
â”‚     [13] macro expansion
â”‚        @ ~/.julia/packages/ChainRulesCore/UayCG/test/runtests.jl:25 [inlined]
â”‚     [14] macro expansion
â”‚        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
â”‚     [15] macro expansion
â”‚        @ ~/.julia/packages/ChainRulesCore/UayCG/test/runtests.jl:25 [inlined]
â”‚     [16] macro expansion
â”‚        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
â”‚     [17] top-level scope
â”‚        @ ~/.julia/packages/ChainRulesCore/UayCG/test/runtests.jl:10
â”‚     [18] include(fname::String)
â”‚        @ Base.MainInclude ./client.jl:444
â”‚     [19] top-level scope
â”‚        @ none:6
â”‚     [20] eval(m::Module, e::Any)
â”‚        @ Core ./boot.jl:369
â”‚     [21] exec_options(opts::Base.JLOptions)
â”‚        @ Base ./client.jl:261
â”‚     [22] _start()
â”‚        @ Base ./client.jl:485
â”” @ ChainRulesCore ~/.julia/packages/ChainRulesCore/UayCG/src/ruleset_loading.jl:139
WARNING: Method definition nondiff_1_2(Union{Float64, ForwardDiffZero.Dual}) in module ForwardDiffZero at /home/pkgeval/.julia/packages/ChainRulesCore/UayCG/test/demos/forwarddiffzero.jl:40 overwritten on the same line.
â”Œ Error: Error triggering hook
â”‚   hook_fun = define_dual_overload (generic function with 1 method)
â”‚   sig = Tuple{typeof(mixed_vararg), Any, Any, Vararg{Any}}
â”‚   exception =
â”‚    TypeError: in <:, expected Type, got Vararg{Any}
â”‚    Stacktrace:
â”‚      [1] #3
â”‚        @ ./none:0 [inlined]
â”‚      [2] iterate
â”‚        @ ./generator.jl:47 [inlined]
â”‚      [3] _all(f::typeof(identity), itr::Base.Generator{Base.Iterators.Rest{Core.SimpleVector, Int64}, Main.ForwardDiffZero.var"#3#4"}, #unused#::Colon)
â”‚        @ Base ./reduce.jl:930
â”‚      [4] all
â”‚        @ ./reduce.jl:918 [inlined]
â”‚      [5] all(itr::Base.Generator{Base.Iterators.Rest{Core.SimpleVector, Int64}, Main.ForwardDiffZero.var"#3#4"})
â”‚        @ Base ./reduce.jl:836
â”‚      [6] define_dual_overload(sig::Type)
â”‚        @ Main.ForwardDiffZero ~/.julia/packages/ChainRulesCore/UayCG/test/demos/forwarddiffzero.jl:34
â”‚      [7] _safe_hook_fun(hook_fun::typeof(Main.ForwardDiffZero.define_dual_overload), sig::Type)
â”‚        @ ChainRulesCore ~/.julia/packages/ChainRulesCore/UayCG/src/ruleset_loading.jl:137
â”‚      [8] _trigger_new_rule_hooks(rule_kind::Function, sig::Type)
â”‚        @ ChainRulesCore ~/.julia/packages/ChainRulesCore/UayCG/src/ruleset_loading.jl:131
â”‚      [9] refresh_rules(rule_kind::Function)
â”‚        @ ChainRulesCore ~/.julia/packages/ChainRulesCore/UayCG/src/ruleset_loading.jl:90
â”‚     [10] refresh_rules()
â”‚        @ ChainRulesCore ~/.julia/packages/ChainRulesCore/UayCG/src/ruleset_loading.jl:80
â”‚     [11] top-level scope
â”‚        @ ~/.julia/packages/ChainRulesCore/UayCG/test/demos/forwarddiffzero.jl:68
â”‚     [12] include(fname::String)
â”‚        @ Base.MainInclude ./client.jl:444
â”‚     [13] macro expansion
â”‚        @ ~/.julia/packages/ChainRulesCore/UayCG/test/runtests.jl:25 [inlined]
â”‚     [14] macro expansion
â”‚        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
â”‚     [15] macro expansion
â”‚        @ ~/.julia/packages/ChainRulesCore/UayCG/test/runtests.jl:25 [inlined]
â”‚     [16] macro expansion
â”‚        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
â”‚     [17] top-level scope
â”‚        @ ~/.julia/packages/ChainRulesCore/UayCG/test/runtests.jl:10
â”‚     [18] include(fname::String)
â”‚        @ Base.MainInclude ./client.jl:444
â”‚     [19] top-level scope
â”‚        @ none:6
â”‚     [20] eval(m::Module, e::Any)
â”‚        @ Core ./boot.jl:369
â”‚     [21] exec_options(opts::Base.JLOptions)
â”‚        @ Base ./client.jl:261
â”‚     [22] _start()
â”‚        @ Base ./client.jl:485
â”” @ ChainRulesCore ~/.julia/packages/ChainRulesCore/UayCG/src/ruleset_loading.jl:139
â”Œ Error: Error triggering hook
â”‚   hook_fun = define_dual_overload (generic function with 1 method)
â”‚   sig = Tuple{typeof(mixed_vararg_type_constaint), Float64, Real, Vararg{Float64}}
â”‚   exception =
â”‚    TypeError: in <:, expected Type, got Vararg{Float64}
â”‚    Stacktrace:
â”‚      [1] #3
â”‚        @ ./none:0 [inlined]
â”‚      [2] iterate
â”‚        @ ./generator.jl:47 [inlined]
â”‚      [3] _all(f::typeof(identity), itr::Base.Generator{Base.Iterators.Rest{Core.SimpleVector, Int64}, Main.ForwardDiffZero.var"#3#4"}, #unused#::Colon)
â”‚        @ Base ./reduce.jl:930
â”‚      [4] all
â”‚        @ ./reduce.jl:918 [inlined]
â”‚      [5] all(itr::Base.Generator{Base.Iterators.Rest{Core.SimpleVector, Int64}, Main.ForwardDiffZero.var"#3#4"})
â”‚        @ Base ./reduce.jl:836
â”‚      [6] define_dual_overload(sig::Type)
â”‚        @ Main.ForwardDiffZero ~/.julia/packages/ChainRulesCore/UayCG/test/demos/forwarddiffzero.jl:34
â”‚      [7] _safe_hook_fun(hook_fun::typeof(Main.ForwardDiffZero.define_dual_overload), sig::Type)
â”‚        @ ChainRulesCore ~/.julia/packages/ChainRulesCore/UayCG/src/ruleset_loading.jl:137
â”‚      [8] _trigger_new_rule_hooks(rule_kind::Function, sig::Type)
â”‚        @ ChainRulesCore ~/.julia/packages/ChainRulesCore/UayCG/src/ruleset_loading.jl:131
â”‚      [9] refresh_rules(rule_kind::Function)
â”‚        @ ChainRulesCore ~/.julia/packages/ChainRulesCore/UayCG/src/ruleset_loading.jl:90
â”‚     [10] refresh_rules()
â”‚        @ ChainRulesCore ~/.julia/packages/ChainRulesCore/UayCG/src/ruleset_loading.jl:80
â”‚     [11] top-level scope
â”‚        @ ~/.julia/packages/ChainRulesCore/UayCG/test/demos/forwarddiffzero.jl:68
â”‚     [12] include(fname::String)
â”‚        @ Base.MainInclude ./client.jl:444
â”‚     [13] macro expansion
â”‚        @ ~/.julia/packages/ChainRulesCore/UayCG/test/runtests.jl:25 [inlined]
â”‚     [14] macro expansion
â”‚        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
â”‚     [15] macro expansion
â”‚        @ ~/.julia/packages/ChainRulesCore/UayCG/test/runtests.jl:25 [inlined]
â”‚     [16] macro expansion
â”‚        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
â”‚     [17] top-level scope
â”‚        @ ~/.julia/packages/ChainRulesCore/UayCG/test/runtests.jl:10
â”‚     [18] include(fname::String)
â”‚        @ Base.MainInclude ./client.jl:444
â”‚     [19] top-level scope
â”‚        @ none:6
â”‚     [20] eval(m::Module, e::Any)
â”‚        @ Core ./boot.jl:369
â”‚     [21] exec_options(opts::Base.JLOptions)
â”‚        @ Base ./client.jl:261
â”‚     [22] _start()
â”‚        @ Base ./client.jl:485
â”” @ ChainRulesCore ~/.julia/packages/ChainRulesCore/UayCG/src/ruleset_loading.jl:139
Test Summary:                                                       | Pass  Error  Total
ChainRulesCore                                                      |  308      3    311
  differentials                                                     |  201           201
  accumulation.jl                                                   |   32      3     35
    is_inplaceable_destination                                      |   13            13
    add!!                                                           |   17      3     20
      scalar                                                        |    1             1
      misc AbstractDifferential subtypes                            |    3             3
      add!!(::AbstractArray, ::AbstractArray)                       |    9      2     11
        LHS Array (inplace)                                         |    4      1      5
          RHS Array                                                 |    2             2
          RHS StaticArray                                           |           1      1
          RHS Diagonal                                              |    2             2
        add!!(::StaticArray, ::Array) (out of place)                |           1      1
        add!!(::Diagonal{<:Vector}, ::Diagonal{<:Vector}) (inplace) |    2             2
        Unhappy Path                                                |    3             3
      InplaceableThunk                                              |    2      1      3
        in place                                                    |    2             2
        out of place                                                |           1      1
      not actually inplace but said it was                          |    2             2
    showerror BadInplaceException                                   |    2             2
  ruleset_loading.jl                                                |   10            10
  frule and rrule                                                   |   26            26
  rule_definition_tools.jl                                          |   29            29
  demos                                                             |   10            10
ERROR: LoadError: Some tests did not pass: 308 passed, 0 failed, 3 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/ChainRulesCore/UayCG/test/runtests.jl:9
ERROR: Package ChainRulesCore errored during testing
Stacktrace:
  [1] pkgerror(msg::String)
    @ Pkg.Types /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
  [2] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing)
    @ Pkg.Operations /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1651
  [3] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:334
  [4] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:321
  [5] #test#62
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:71 [inlined]
  [6] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:70 [inlined]
  [7] #test#61
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:68 [inlined]
  [8] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:68 [inlined]
  [9] test(pkg::String; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67
 [10] test(pkg::String)
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67
 [11] top-level scope
    @ none:35
