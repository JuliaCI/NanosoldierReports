Current time is 2020-10-26T23:55:10.628
Julia Version 1.6.0-DEV.1355
Commit 8dc2fd4e50 (2020-10-26 20:08 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: AMD EPYC 7502 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-11.0.0 (ORCJIT, znver2)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2
  JULIA_MAX_NUM_PRECOMPILE_FILES = 9223372036854775807
  JULIA_PKG_SERVER = 

Starting installation at 2020-10-26T23:55:12.023
   Resolving package versions...
   Installed OpenBLAS_jll â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.3.10+0
   Installed MPICH_jll â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v3.3.2+10
   Installed COSMA â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.1.2
   Installed MPIClusterManagers â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.2.0
   Installed DocStringExtensions â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.8.3
   Installed DistributedArrays â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.6.5
   Installed JLLWrappers â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.1.3
   Installed COSMA_jll â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v2.2.0+0
   Installed Requires â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.1.0
   Installed OpenMPI_jll â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v4.0.2+2
   Installed CompilerSupportLibraries_jll â”€ v0.3.4+0
   Installed MicrosoftMPI_jll â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v10.1.2+3
   Installed MPI â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.14.3
   Installed Primes â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.4.0
Updating `~/.julia/environments/v1.6/Project.toml`
  [ff1143b4] + COSMA v0.1.2
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [ff1143b4] + COSMA v0.1.2
  [aaf54ef3] + DistributedArrays v0.6.5
  [ffbed154] + DocStringExtensions v0.8.3
  [692b3bcd] + JLLWrappers v1.1.3
  [da04e1cc] + MPI v0.14.3
  [e7922434] + MPIClusterManagers v0.2.0
  [27ebfcd6] + Primes v0.4.0
  [ae029012] + Requires v1.1.0
  [0efae8bf] + COSMA_jll v2.2.0+0
  [e66e0078] + CompilerSupportLibraries_jll v0.3.4+0
  [7cb0a576] + MPICH_jll v3.3.2+10
  [9237b28f] + MicrosoftMPI_jll v10.1.2+3
  [4536629a] + OpenBLAS_jll v0.3.10+0
  [fe0851c0] + OpenMPI_jll v4.0.2+2
  [0dad84c5] + ArgTools
  [56f22d72] + Artifacts
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [f43a241f] + Downloads
  [b77e0a4c] + InteractiveUtils
  [b27032c2] + LibCURL
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
  [deac9b47] + LibCURL_jll
  [14a3606d] + MozillaCACerts_jll
    Building MPI â†’ `~/.julia/scratchspaces/44cfe95a-1eb2-52ea-b672-e2afdf69b78f/0fc37a7feb384b51bd6e841ea6cfc424623aab74/build.log`
Precompiling project... (tip: to disable auto-precompilation set ENV["JULIA_PKG_PRECOMPILE_AUTO"]=0)
[32m  âœ“ [39m[90mJLLWrappers[39m
[32m  âœ“ [39m[90mPrimes[39m
[32m  âœ“ [39m[90mRequires[39m
[32m  âœ“ [39m[90mDocStringExtensions[39m
[32m  âœ“ [39m[90mMicrosoftMPI_jll[39m
[32m  âœ“ [39m[90mOpenMPI_jll[39m
[32m  âœ“ [39m[90mDistributedArrays[39m
[32m  âœ“ [39m[90mCompilerSupportLibraries_jll[39m
[32m  âœ“ [39m[90mOpenBLAS_jll[39m
[32m  âœ“ [39m[90mMPICH_jll[39m
[32m  âœ“ [39m[90mCOSMA_jll[39m
[32m  âœ“ [39m[90mMPI[39m
[32m  âœ“ [39m[90mMPIClusterManagers[39m
[32m  âœ“ [39mCOSMA
14 dependencies successfully precompiled
Starting tests at 2020-10-26T23:55:33.686
     Testing COSMA
Status `/tmp/jl_MTjqIY/Project.toml`
  [ff1143b4] COSMA v0.1.2
  [aaf54ef3] DistributedArrays v0.6.5
  [da04e1cc] MPI v0.14.3
  [e7922434] MPIClusterManagers v0.2.0
  [0efae8bf] COSMA_jll v2.2.0+0
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [8dfed614] Test
Status `/tmp/jl_MTjqIY/Manifest.toml`
  [ff1143b4] COSMA v0.1.2
  [aaf54ef3] DistributedArrays v0.6.5
  [ffbed154] DocStringExtensions v0.8.3
  [692b3bcd] JLLWrappers v1.1.3
  [da04e1cc] MPI v0.14.3
  [e7922434] MPIClusterManagers v0.2.0
  [27ebfcd6] Primes v0.4.0
  [ae029012] Requires v1.1.0
  [0efae8bf] COSMA_jll v2.2.0+0
  [e66e0078] CompilerSupportLibraries_jll v0.3.4+0
  [7cb0a576] MPICH_jll v3.3.2+10
  [9237b28f] MicrosoftMPI_jll v10.1.2+3
  [4536629a] OpenBLAS_jll v0.3.10+0
  [fe0851c0] OpenMPI_jll v4.0.2+2
  [0dad84c5] ArgTools
  [56f22d72] Artifacts
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [f43a241f] Downloads
  [b77e0a4c] InteractiveUtils
  [b27032c2] LibCURL
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
  [deac9b47] LibCURL_jll
  [14a3606d] MozillaCACerts_jll
     Testing Running tests...
Test Summary:      | Pass  Total
Incompatible sizes |    4      4
Test Summary:                                              | Pass  Total
C = alpha * identity(A) * identity(B) + beta * C (Float32) |    1      1
Test Summary:                                              | Pass  Total
C = alpha * identity(A) * identity(B) + beta * C (Float64) |    1      1
Test Summary:                                                 | Pass  Total
C = alpha * identity(A) * identity(B) + beta * C (ComplexF32) |    1      1
Test Summary:                                                 | Pass  Total
C = alpha * identity(A) * identity(B) + beta * C (ComplexF64) |    1      1
Test Summary:                                               | Pass  Total
C = alpha * identity(A) * transpose(B) + beta * C (Float32) |    1      1
Test Summary:                                               | Pass  Total
C = alpha * identity(A) * transpose(B) + beta * C (Float64) |    1      1
Test Summary:                                                  | Pass  Total
C = alpha * identity(A) * transpose(B) + beta * C (ComplexF32) |    1      1
Test Summary:                                                  | Pass  Total
C = alpha * identity(A) * transpose(B) + beta * C (ComplexF64) |    1      1
Test Summary:                                             |
C = alpha * identity(A) * adjoint(B) + beta * C (Float32) | No tests
Test Summary:                                             |
C = alpha * identity(A) * adjoint(B) + beta * C (Float64) | No tests
Test Summary:                                                | Pass  Total
C = alpha * identity(A) * adjoint(B) + beta * C (ComplexF32) |    1      1
Test Summary:                                                | Pass  Total
C = alpha * identity(A) * adjoint(B) + beta * C (ComplexF64) |    1      1
Test Summary:                                               | Pass  Total
C = alpha * transpose(A) * identity(B) + beta * C (Float32) |    1      1
Test Summary:                                               | Pass  Total
C = alpha * transpose(A) * identity(B) + beta * C (Float64) |    1      1
Test Summary:                                                  | Pass  Total
C = alpha * transpose(A) * identity(B) + beta * C (ComplexF32) |    1      1
Test Summary:                                                  | Pass  Total
C = alpha * transpose(A) * identity(B) + beta * C (ComplexF64) |    1      1
Test Summary:                                                | Pass  Total
C = alpha * transpose(A) * transpose(B) + beta * C (Float32) |    1      1
Test Summary:                                                | Pass  Total
C = alpha * transpose(A) * transpose(B) + beta * C (Float64) |    1      1
Test Summary:                                                   | Pass  Total
C = alpha * transpose(A) * transpose(B) + beta * C (ComplexF32) |    1      1
Test Summary:                                                   | Pass  Total
C = alpha * transpose(A) * transpose(B) + beta * C (ComplexF64) |    1      1
Test Summary:                                              |
C = alpha * transpose(A) * adjoint(B) + beta * C (Float32) | No tests
Test Summary:                                              |
C = alpha * transpose(A) * adjoint(B) + beta * C (Float64) | No tests
Test Summary:                                                 | Pass  Total
C = alpha * transpose(A) * adjoint(B) + beta * C (ComplexF32) |    1      1
Test Summary:                                                 | Pass  Total
C = alpha * transpose(A) * adjoint(B) + beta * C (ComplexF64) |    1      1
Test Summary:                                             |
C = alpha * adjoint(A) * identity(B) + beta * C (Float32) | No tests
Test Summary:                                             |
C = alpha * adjoint(A) * identity(B) + beta * C (Float64) | No tests
Test Summary:                                                | Pass  Total
C = alpha * adjoint(A) * identity(B) + beta * C (ComplexF32) |    1      1
Test Summary:                                                | Pass  Total
C = alpha * adjoint(A) * identity(B) + beta * C (ComplexF64) |    1      1
Test Summary:                                              |
C = alpha * adjoint(A) * transpose(B) + beta * C (Float32) | No tests
Test Summary:                                              |
C = alpha * adjoint(A) * transpose(B) + beta * C (Float64) | No tests
Test Summary:                                                 | Pass  Total
C = alpha * adjoint(A) * transpose(B) + beta * C (ComplexF32) |    1      1
Test Summary:                                                 | Pass  Total
C = alpha * adjoint(A) * transpose(B) + beta * C (ComplexF64) |    1      1
Test Summary:                                            |
C = alpha * adjoint(A) * adjoint(B) + beta * C (Float32) | No tests
Test Summary:                                            |
C = alpha * adjoint(A) * adjoint(B) + beta * C (Float64) | No tests
Test Summary:                                               | Pass  Total
C = alpha * adjoint(A) * adjoint(B) + beta * C (ComplexF32) |    1      1
Test Summary:                                               | Pass  Total
C = alpha * adjoint(A) * adjoint(B) + beta * C (ComplexF64) |    1      1
     Testing COSMA tests passed 
Finished at 2020-10-27T00:04:50.828
