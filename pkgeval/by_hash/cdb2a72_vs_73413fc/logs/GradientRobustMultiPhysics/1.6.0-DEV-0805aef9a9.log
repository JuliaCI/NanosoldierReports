Julia Version 1.6.0-DEV.968
Commit 0805aef9a9* (2020-09-18 09:12 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed DiffResults ────────────────── v1.0.2
  Installed Adapt ──────────────────────── v2.1.0
  Installed Parsers ────────────────────── v1.0.10
  Installed ElasticArrays ──────────────── v1.2.4
  Installed RecipesBase ────────────────── v1.1.0
  Installed GradientRobustMultiPhysics ─── v0.1.0
  Installed DocStringExtensions ────────── v0.8.3
  Installed CommonSubexpressions ───────── v0.3.0
  Installed SpecialFunctions ───────────── v0.10.3
  Installed AbstractTrees ──────────────── v0.3.3
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed Triangle_jll ───────────────── v1.6.0+0
  Installed BenchmarkTools ─────────────── v0.5.0
  Installed JSON ───────────────────────── v0.21.1
  Installed Triangulate ────────────────── v0.5.0
  Installed ExtendableSparse ───────────── v0.3.1
  Installed DiffRules ──────────────────── v1.0.1
  Installed NaNMath ────────────────────── v0.3.4
  Installed StaticArrays ───────────────── v0.12.4
  Installed ExtendableGrids ────────────── v0.3.0
  Installed MacroTools ─────────────────── v0.5.5
  Installed IterativeSolvers ───────────── v0.8.4
  Installed ForwardDiff ────────────────── v0.10.12
Updating `~/.julia/environments/v1.6/Project.toml`
  [0802c0ca] + GradientRobustMultiPhysics v0.1.0
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [1520ce14] + AbstractTrees v0.3.3
  [79e6a3ab] + Adapt v2.1.0
  [6e4b80f9] + BenchmarkTools v0.5.0
  [bbf7d656] + CommonSubexpressions v0.3.0
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [163ba53b] + DiffResults v1.0.2
  [b552c78f] + DiffRules v1.0.1
  [ffbed154] + DocStringExtensions v0.8.3
  [fdbdab4c] + ElasticArrays v1.2.4
  [cfc395e8] + ExtendableGrids v0.3.0
  [95c220a8] + ExtendableSparse v0.3.1
  [f6369f11] + ForwardDiff v0.10.12
  [0802c0ca] + GradientRobustMultiPhysics v0.1.0
  [42fd0dbc] + IterativeSolvers v0.8.4
  [682c06a0] + JSON v0.21.1
  [1914dd2f] + MacroTools v0.5.5
  [77ba4419] + NaNMath v0.3.4
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [69de0a69] + Parsers v1.0.10
  [3cdcf5f2] + RecipesBase v1.1.0
  [276daf66] + SpecialFunctions v0.10.3
  [90137ffa] + StaticArrays v0.12.4
  [5639c1d2] + Triangle_jll v1.6.0+0
  [f7e6ffb2] + Triangulate v0.5.0
  [56f22d72] + Artifacts
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [4607b0f0] + SuiteSparse
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GradientRobustMultiPhysics
Status `/tmp/jl_cIIiQu/Project.toml`
  [6e4b80f9] BenchmarkTools v0.5.0
  [ffbed154] DocStringExtensions v0.8.3
  [cfc395e8] ExtendableGrids v0.3.0
  [95c220a8] ExtendableSparse v0.3.1
  [f6369f11] ForwardDiff v0.10.12
  [0802c0ca] GradientRobustMultiPhysics v0.1.0
  [42fd0dbc] IterativeSolvers v0.8.4
  [f7e6ffb2] Triangulate v0.5.0
  [37e2e46d] LinearAlgebra
  [de0858da] Printf
  [2f01184e] SparseArrays
  [4607b0f0] SuiteSparse
  [8dfed614] Test
Status `/tmp/jl_cIIiQu/Manifest.toml`
  [1520ce14] AbstractTrees v0.3.3
  [79e6a3ab] Adapt v2.1.0
  [6e4b80f9] BenchmarkTools v0.5.0
  [bbf7d656] CommonSubexpressions v0.3.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [163ba53b] DiffResults v1.0.2
  [b552c78f] DiffRules v1.0.1
  [ffbed154] DocStringExtensions v0.8.3
  [fdbdab4c] ElasticArrays v1.2.4
  [cfc395e8] ExtendableGrids v0.3.0
  [95c220a8] ExtendableSparse v0.3.1
  [f6369f11] ForwardDiff v0.10.12
  [0802c0ca] GradientRobustMultiPhysics v0.1.0
  [42fd0dbc] IterativeSolvers v0.8.4
  [682c06a0] JSON v0.21.1
  [1914dd2f] MacroTools v0.5.5
  [77ba4419] NaNMath v0.3.4
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [69de0a69] Parsers v1.0.10
  [3cdcf5f2] RecipesBase v1.1.0
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.4
  [5639c1d2] Triangle_jll v1.6.0+0
  [f7e6ffb2] Triangulate v0.5.0
  [56f22d72] Artifacts
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [4607b0f0] SuiteSparse
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...


=============================
Testing QuadratureRules in 1D
=============================
EG = Edge1D | order = 1 | error = [0.0]
EG = Edge1D | order = 2 | error = [-2.220446049250313e-16]
EG = Edge1D | order = 3 | error = [-2.220446049250313e-16]
EG = Edge1D | order = 4 | error = [-4.440892098500626e-16]
EG = Edge1D | order = 5 | error = [-4.440892098500626e-16]
EG = Edge1D | order = 6 | error = [2.220446049250313e-16]
EG = Edge1D | order = 7 | error = [-2.220446049250313e-16]
EG = Edge1D | order = 8 | error = [0.0]
EG = Edge1D | order = 9 | error = [-2.220446049250313e-16]
EG = Edge1D | order = 10 | error = [0.0]
EG = Edge1D | order = 11 | error = [2.220446049250313e-16]
EG = Edge1D | order = 12 | error = [2.220446049250313e-16]


=============================
Testing QuadratureRules in 2D
=============================
EG = Triangle2D | order = 1 | error = [0.0, -2.0816681711721685e-17]
EG = Triangle2D | order = 2 | error = [-8.881784197001252e-16, 0.0]
EG = Triangle2D | order = 3 | error = [0.0, 1.1102230246251565e-16]
EG = Triangle2D | order = 4 | error = [-2.220446049250313e-16, 3.3306690738754696e-16]
EG = Triangle2D | order = 5 | error = [-6.661338147750939e-16, 3.3306690738754696e-16]
EG = Triangle2D | order = 6 | error = [-4.440892098500626e-16, 0.0]
EG = Triangle2D | order = 7 | error = [-4.440892098500626e-16, 3.3306690738754696e-16]
EG = Triangle2D | order = 8 | error = [-8.881784197001252e-16, -6.661338147750939e-16]
EG = Triangle2D | order = 9 | error = [0.0, 7.771561172376096e-16]
EG = Triangle2D | order = 10 | error = [6.661338147750939e-16, 0.0]
EG = Triangle2D | order = 11 | error = [2.220446049250313e-16, -7.771561172376096e-16]
EG = Triangle2D | order = 12 | error = [-2.4424906541753444e-15, -4.440892098500626e-16]
EG = Parallelogram2D | order = 1 | error = [0.0, 0.0]
EG = Parallelogram2D | order = 2 | error = [-8.881784197001252e-16, 2.7755575615628914e-16]
EG = Parallelogram2D | order = 3 | error = [-8.881784197001252e-16, 1.6653345369377348e-16]
EG = Parallelogram2D | order = 4 | error = [-4.440892098500626e-16, 5.551115123125783e-16]
EG = Parallelogram2D | order = 5 | error = [-2.220446049250313e-16, 5.551115123125783e-16]
EG = Parallelogram2D | order = 6 | error = [0.0, -1.1102230246251565e-16]
EG = Parallelogram2D | order = 7 | error = [2.220446049250313e-16, 0.0]
EG = Parallelogram2D | order = 8 | error = [-8.881784197001252e-16, -2.220446049250313e-16]
EG = Parallelogram2D | order = 9 | error = [-6.661338147750939e-16, -2.220446049250313e-16]
EG = Parallelogram2D | order = 10 | error = [0.0, -1.1102230246251565e-16]
EG = Parallelogram2D | order = 11 | error = [-2.220446049250313e-16, -2.220446049250313e-16]
EG = Parallelogram2D | order = 12 | error = [-6.661338147750939e-16, 2.220446049250313e-16]


=============================
Testing QuadratureRules in 3D
=============================
EG = Parallelepiped3D | order = 1 | error = [0.0, 0.0, 0.0]
EG = Parallelepiped3D | order = 2 | error = [4.440892098500626e-16, -1.3322676295501878e-15, 2.7755575615628914e-16]
EG = Parallelepiped3D | order = 3 | error = [4.440892098500626e-16, -1.3322676295501878e-15, 3.885780586188048e-16]
EG = Parallelepiped3D | order = 4 | error = [7.771561172376096e-16, -1.1102230246251565e-15, 6.661338147750939e-16]
EG = Parallelepiped3D | order = 5 | error = [8.881784197001252e-16, -6.661338147750939e-16, 7.771561172376096e-16]
EG = Parallelepiped3D | order = 6 | error = [0.0, 1.1102230246251565e-15, -1.1102230246251565e-16]
EG = Parallelepiped3D | order = 7 | error = [-3.3306690738754696e-16, -2.220446049250313e-16, 0.0]
EG = Parallelepiped3D | order = 8 | error = [-2.220446049250313e-16, -1.3322676295501878e-15, -9.992007221626409e-16]
EG = Parallelepiped3D | order = 9 | error = [1.1102230246251565e-16, -8.881784197001252e-16, -2.220446049250313e-16]
EG = Parallelepiped3D | order = 10 | error = [-2.220446049250313e-16, 4.440892098500626e-16, 2.220446049250313e-16]
EG = Parallelepiped3D | order = 11 | error = [-3.3306690738754696e-16, 0.0, 5.551115123125783e-16]
EG = Parallelepiped3D | order = 12 | error = [-1.1102230246251565e-16, 4.440892098500626e-16, 8.881784197001252e-16]
EG = Tetrahedron3D | order = 1 | error = [0.0, 0.0, 0.0]
EG = Tetrahedron3D | order = 2 | error = [0.0, 0.0, 1.6653345369377348e-16]
EG = Tetrahedron3D | order = 3 | error = [1.1102230246251565e-16, -2.220446049250313e-16, 5.551115123125783e-17]
EG = Tetrahedron3D | order = 4 | error = [3.3306690738754696e-16, -4.440892098500626e-16, 2.220446049250313e-16]

Test Summary:   | Pass  Total
QuadratureRules |   52     52


============================
Testing Interpolations in 1D
============================
FEType = L2P0{1} | order = 0 | error = 0.0
FEType = H1P1{1} | order = 1 | error = 0.0
FEType = L2P1{1} | order = 1 | error = 0.0
FEType = H1P2{1, 1} | order = 2 | error = 2.230702205671383e-16


============================
Testing Interpolations in 2D
============================
Constructing Delaunay triangulation by divide-and-conquer method.
  Sorting vertices.
  Forming triangulation.
  Removing ghost triangles.
Recovering segments in Delaunay triangulation.
    Constructing mapping from vertices to triangles.
  Recovering PSLG segments.
Removing unwanted triangles.
  Marking concavities (external triangles) for elimination.
Adding Steiner points to enforce quality.
  Looking for encroached subsegments.
  Making a list of bad triangles.
  Splitting bad triangles.

Writing vertices.
Writing triangles.
Writing segments.

Statistics:

  Input vertices: 4
  Input segments: 4
  Input holes: 0

  Mesh vertices: 13
  Mesh triangles: 16
  Mesh edges: 28
  Mesh exterior boundary edges: 8
  Mesh interior boundary edges: 0
  Mesh subsegments (constrained edges): 8

Mesh quality statistics:

  Smallest area:           0.0625   |  Largest area:           0.0625
  Shortest edge:          0.35355   |  Longest edge:              0.5
  Shortest altitude:         0.25   |  Largest aspect ratio:        2

  Triangle aspect ratio histogram:
  1.1547 - 1.5       :         0    |     15 - 25         :         0
     1.5 - 2         :        16    |     25 - 50         :         0
       2 - 2.5       :         0    |     50 - 100        :         0
     2.5 - 3         :         0    |    100 - 300        :         0
       3 - 4         :         0    |    300 - 1000       :         0
       4 - 6         :         0    |   1000 - 10000      :         0
       6 - 10        :         0    |  10000 - 100000     :         0
      10 - 15        :         0    | 100000 -            :         0
  (Aspect ratio is longest edge divided by shortest altitude)

  Smallest angle:              45   |  Largest angle:              90

  Angle histogram:
      0 -  10 degrees:         0    |     90 - 100 degrees:         0
     10 -  20 degrees:         0    |    100 - 110 degrees:         0
     20 -  30 degrees:         0    |    110 - 120 degrees:         0
     30 -  40 degrees:         0    |    120 - 130 degrees:         0
     40 -  50 degrees:        32    |    130 - 140 degrees:         0
     50 -  60 degrees:         0    |    140 - 150 degrees:         0
     60 -  70 degrees:         0    |    150 - 160 degrees:         0
     70 -  80 degrees:         0    |    160 - 170 degrees:         0
     80 -  90 degrees:        16    |    170 - 180 degrees:         0

Memory allocation statistics:

  Maximum number of vertices: 13
  Maximum number of triangles: 16
  Maximum number of subsegments: 8
  Maximum number of encroached subsegments: 1
  Maximum number of bad triangles: 17
  Maximum number of stacked triangle flips: 1
  Approximate heap memory use (bytes): 3128

Algorithmic statistics:

  Number of incircle tests: 23
  Number of 2D orientation tests: 57
  Number of triangle circumcenter computations: 9

Constructing Delaunay triangulation by divide-and-conquer method.
  Sorting vertices.
  Forming triangulation.
  Removing ghost triangles.
Recovering segments in Delaunay triangulation.
    Constructing mapping from vertices to triangles.
  Recovering PSLG segments.
Removing unwanted triangles.
  Marking concavities (external triangles) for elimination.
Adding Steiner points to enforce quality.
  Looking for encroached subsegments.
  Making a list of bad triangles.
  Splitting bad triangles.

Writing vertices.
Writing triangles.
Writing segments.

Statistics:

  Input vertices: 4
  Input segments: 4
  Input holes: 0

  Mesh vertices: 13
  Mesh triangles: 16
  Mesh edges: 28
  Mesh exterior boundary edges: 8
  Mesh interior boundary edges: 0
  Mesh subsegments (constrained edges): 8

Mesh quality statistics:

  Smallest area:           0.0625   |  Largest area:           0.0625
  Shortest edge:          0.35355   |  Longest edge:              0.5
  Shortest altitude:         0.25   |  Largest aspect ratio:        2

  Triangle aspect ratio histogram:
  1.1547 - 1.5       :         0    |     15 - 25         :         0
     1.5 - 2         :        16    |     25 - 50         :         0
       2 - 2.5       :      EG = Triangle2D | FEType = HDIVRT0{2} | order = 0 | error = 0.0
EG = Triangle2D | FEType = HDIVBDM1{2} | order = 1 | error = 2.0027856461916986e-16
EG = Triangle2D | FEType = L2P0{2} | order = 0 | error = 0.0
EG = Triangle2D | FEType = H1P1{2} | order = 1 | error = 0.0
EG = Triangle2D | FEType = H1CR{2} | order = 1 | error = 0.0
EG = Triangle2D | FEType = H1MINI{2, 2} | order = 1 | error = 2.883371472465162e-16
EG = Triangle2D | FEType = H1BR{2} | order = 1 | error = 2.4587496965696954e-16
EG = Triangle2D | FEType = L2P1{2} | order = 1 | error = 0.0
EG = Triangle2D | FEType = H1P2{2, 2} | order = 2 | error = 6.325048490815722e-16
EG = Parallelogram2D | FEType = HDIVRT0{2} | order = 0 | error = 0.0
EG = Parallelogram2D | FEType = HDIVBDM1{2} | order = 1 | error = 2.4825341532472726e-16
EG = Parallelogram2D | FEType = L2P0{2} | order = 0 | error = 0.0
EG = Parallelogram2D | FEType = H1P1{2} | order = 1 | error = 2.989366980140908e-16
EG = Parallelogram2D | FEType = H1CR{2} | order = 1 | error = 3.845925372767127e-16
EG = Parallelogram2D | FEType = H1MINI{2, 2} | order = 1 | error = 1.3156592486883324e-16
EG = Parallelogram2D | FEType = H1BR{2} | order = 1 | error = 1.3156592486883324e-16
EG = Parallelogram2D | FEType = L2P1{2} | order = 1 | error = 2.989366980140908e-16
EG = Parallelogram2D | FEType = H1P2{2, 2} | order = 2 | error = 3.6468964882764386e-16

Test Summary:  | Pass  Total
Interpolations |   22     22


===================================
Testing L2-Bestapproximations in 1D
===================================
EG = Edge1D | FEType = L2P0{1} | order = 0 | error = 0.0
EG = Edge1D | FEType = H1P1{1} | order = 1 | error = 2.389416733018319e-16
EG = Edge1D | FEType = L2P1{1} | order = 1 | error = 1.5370341782520676e-16
EG = Edge1D | FEType = H1P2{1, 1} | order = 2 | error = 3.5383571404382917e-16


===================================
Testing L2-Bestapproximations in 2D
===================================
EG = Triangle2D/Parallelogram2D | FEType = HDIVRT0{2} | order = 0 | error = 1.6693265551392946e-15
EG = Triangle2D/Parallelogram2D | FEType = HDIVBDM1{2} | order = 1 | error = 1.5706467997246826e-15
EG = Triangle2D/Parallelogram2D | FEType = L2P0{2} | order = 0 | error = 0.0
EG = Triangle2D/Parallelogram2D | FEType = H1P1{2} | order = 1 | error = 7.764916819320381e-16
EG = Triangle2D/Parallelogram2D | FEType = H1CR{2} | order = 1 | error = 6.421622972212065e-16
EG = Triangle2D/Parallelogram2D | FEType = H1MINI{2, 2} | order = 1 | error = 8.00151498565448e-15
EG = Triangle2D/Parallelogram2D | FEType = H1BR{2} | order = 1 | error = 3.989155850042743e-15
EG = Triangle2D/Parallelogram2D | FEType = L2P1{2} | order = 1 | error = 1.2885314859083284e-15
EG = Triangle2D/Parallelogram2D | FEType = H1P2{2, 2} | order = 2 | error = 3.283558796529989e-15


===================================
Testing L2-Bestapproximations in 3D
===================================
EG = Tetrahedron3D | FEType = HDIVRT0{3} | order = 0 | error = 7.395702158726885e-16
EG = Tetrahedron3D | FEType = H1P1{3} | order = 1 | error = 7.775913223308146e-16
EG = Tetrahedron3D | FEType = L2P1{3} | order = 1 | error = 5.996163955091048e-16

Test Summary:         | Pass  Total
L2-Bestapproximations |   16     16


===================================
Testing H1-Bestapproximations in 1D
===================================
EG = Edge1D | FEType = H1P1{1} | order = 1 | error = 1.859600551531243e-16
EG = Edge1D | FEType = H1P2{1, 1} | order = 2 | error = 1.9509798423357722e-15


===================================
Testing H1-Bestapproximations in 2D
===================================
EG = Triangle2D/Parallelogram2D | FEType = H1P1{2} | order = 1 | error = 4.3316486342036336e-16
EG = Triangle2D/Parallelogram2D | FEType = H1CR{2} | order = 1 | error = 7.647907714600139e-16
EG = Triangle2D/Parallelogram2D | FEType = H1MINI{2, 2} | order = 1 | error = 4.761783014224013e-16
EG = Triangle2D/Parallelogram2D | FEType = H1BR{2} | order = 1 | error = 1.4138201571166613e-15
EG = Triangle2D/Parallelogram2D | FEType = H1P2{2, 2} | order = 2 | error = 6.412363395050315e-16


===================================
Testing H1-Bestapproximations in 3D
===================================
EG = Parallelepiped3D | FEType = H1P1{3} | order = 1 | error = 1.0225137153403823e-15
EG = Tetrahedron3D | FEType = H1P1{3} | order = 1 | error = 5.191264035018549e-16

Test Summary:         | Pass  Total
H1-Bestapproximations |    9      9


=============================
Testing Stokes elements in 2D
=============================
EG = Triangle2D/Parallelogram2D | FETypes = DataType[H1CR{2}, L2P0{1}] | orders = [1, 0] | errorV = 2.009166285660708e-16 | errorP = 2.269072096205954e-15
EG = Triangle2D/Parallelogram2D | FETypes = DataType[H1MINI{2, 2}, H1CR{1}] | orders = [1, 1] | errorV = 3.9750157477544247e-16 | errorP = 9.974951025474776e-15
EG = Triangle2D/Parallelogram2D | FETypes = DataType[H1BR{2}, L2P0{1}] | orders = [1, 0] | errorV = 2.1672961195717237e-15 | errorP = 1.4822082580474772e-14
EG = Triangle2D/Parallelogram2D | FETypes = DataType[H1P2{2, 2}, H1P1{1}] | orders = [2, 1] | errorV = 4.619613722714634e-16 | errorP = 1.0143303590095834e-14


=============================
Testing Stokes elements in 3D
=============================

Test Summary: | Pass  Total
Stokes-FEM    |    4      4


===================
Tests from Examples
===================

2D COMMUTING INTERPOLATORS
error(Curl(I_H1P1{1}(psi) - I_HDIVRT0{2}(Curl(psi))) = 2.6880944805904633e-17
error(Curl(I_H1P2{1, 2}(psi) - I_HDIVRT1{2}(Curl(psi))) = 1.6382341294580122e-16

2D PRESSURE_ROBUSTNESS
FETypes = DataType[H1CR{2}, L2P0{1}, ReconstructionIdentity{HDIVRT0{2}}]   error = 2.789270726921618e-18
FETypes = DataType[H1BR{2}, L2P0{1}, ReconstructionIdentity{HDIVRT0{2}}]   error = 1.979109614671597e-18
FETypes = DataType[H1BR{2}, L2P0{1}, ReconstructionIdentity{HDIVBDM1{2}}]   error = 2.5331791137526147e-18
Test Summary: | Pass  Total
Examples      |    2      2
   0    |     50 - 100        :         0
     2.5 - 3         :         0    |    100 - 300        :         0
       3 - 4         :         0    |    300 - 1000       :         0
       4 - 6         :         0    |   1000 - 10000      :         0
       6 - 10        :         0    |  10000 - 100000     :         0
      10 - 15        :         0    | 100000 -            :         0
  (Aspect ratio is longest edge divided by shortest altitude)

  Smallest angle:              45   |  Largest angle:              90

  Angle histogram:
      0 -  10 degrees:         0    |     90 - 100 degrees:         0
     10 -  20 degrees:         0    |    100 - 110 degrees:         0
     20 -  30 degrees:         0    |    110 - 120 degrees:         0
     30 -  40 degrees:         0    |    120 - 130 degrees:         0
     40 -  50 degrees:        32    |    130 - 140 degrees:         0
     50 -  60 degrees:         0    |    140 - 150 degrees:         0
     60 -  70 degrees:         0    |    150 - 160 degrees:         0
     70 -  80 degrees:         0    |    160 - 170 degrees:         0
     80 -  90 degrees:        16    |    170 - 180 degrees:         0

Memory allocation statistics:

  Maximum number of vertices: 13
  Maximum number of triangles: 16
  Maximum number of subsegments: 8
  Maximum number of encroached subsegments: 1
  Maximum number of bad triangles: 17
  Maximum number of stacked triangle flips: 1
  Approximate heap memory use (bytes): 3128

Algorithmic statistics:

  Number of incircle tests: 23
  Number of 2D orientation tests: 57
  Number of triangle circumcenter computations: 9

    Testing GradientRobustMultiPhysics tests passed 
