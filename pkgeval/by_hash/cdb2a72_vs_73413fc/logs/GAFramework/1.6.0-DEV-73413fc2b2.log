Julia Version 1.6.0-DEV.961
Commit 73413fc2b2 (2020-09-17 22:47 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.3
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_TgPH8a/Project.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_TgPH8a/Manifest.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21715901649851277
curgen: 20 fitness: 0.2172124640467129
curgen: 30 fitness: 0.2172237225776625
curgen: 40 fitness: 0.21723134115718237
curgen: 50 fitness: 0.21723134115718237
CoordinateCreature{Vector{Float64}}([-0.22232104521797083], -0.21723134115718237) -0.22232104521797083 -0.21723134115718237
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.2579906641835823
curgen: 100 fitness: 3.258163529458686
curgen: 150 fitness: 3.2582094069266594
curgen: 200 fitness: 3.2583795392015906
curgen: 250 fitness: 3.258388010521078
curgen: 300 fitness: 3.258388010521078
curgen: 350 fitness: 3.258388010521078
curgen: 400 fitness: 3.258407936852844
curgen: 450 fitness: 3.2584082613553256
curgen: 500 fitness: 3.2584307270125445
CoordinateCreature{Vector{Float64}}([0.2226819564418016, -0.22310259269833949, -0.22241933807808967, 0.22148641841129818, 0.22265079698976048, 0.2222278140757807, -0.2225401052036691, -0.22267483425451604, 0.22237649928361186, 0.22243195722957979, -0.2225286528011775, -0.22251246232451857, -0.22266633922850432, 0.22254808157248862, -0.2225789393161622], -3.2584307270125445) [0.2226819564418016, -0.22310259269833949, -0.22241933807808967, 0.22148641841129818, 0.22265079698976048, 0.2222278140757807, -0.2225401052036691, -0.22267483425451604, 0.22237649928361186, 0.22243195722957979, -0.2225286528011775, -0.22251246232451857, -0.22266633922850432, 0.22254808157248862, -0.2225789393161622] -3.2584307270125445
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.0022423808907490184
curgen: 100 fitness: -0.0022038320189778915
curgen: 150 fitness: -0.0016921623486325643
curgen: 200 fitness: -0.0016184125263123406
curgen: 250 fitness: -0.0016184125263123406
curgen: 300 fitness: -0.0016184125263123406
curgen: 350 fitness: -0.0010745981392688009
curgen: 400 fitness: -0.0010745981392688009
curgen: 450 fitness: -0.0009391181166904516
curgen: 500 fitness: -0.0009391181166904516
CoordinateCreature{Vector{Float64}}([0.00018167349975748456, -1.2181042662734454e-7, 0.0001934634598388249, -0.00021215409539616795, 0.00016730697428210181, 0.0005706080727122336, -0.00011991169664527911, 0.0010708515594839705, -0.00041376188320097103, -2.0771723836380748e-5, 8.066995167151325e-5, -0.0003924718514167849, -0.0016563396345211055, 9.599739844908407e-5, 0.00013674078558598336], 0.0009391181166904516) [0.00018167349975748456, -1.2181042662734454e-7, 0.0001934634598388249, -0.00021215409539616795, 0.00016730697428210181, 0.0005706080727122336, -0.00011991169664527911, 0.0010708515594839705, -0.00041376188320097103, -2.0771723836380748e-5, 8.066995167151325e-5, -0.0003924718514167849, -0.0016563396345211055, 9.599739844908407e-5, 0.00013674078558598336] 0.0009391181166904516
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
