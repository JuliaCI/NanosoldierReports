Julia Version 1.5.0-DEV.485
Commit 7206b56e94 (2020-03-18 17:25 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed DataValueInterfaces ───────── v1.0.0
  Installed LeftChildRightSiblingTrees ── v0.1.2
  Installed TreeViews ─────────────────── v0.3.0
  Installed Parameters ────────────────── v0.12.0
  Installed Roots ─────────────────────── v1.0.0
  Installed DataFrames ────────────────── v0.20.2
  Installed ModiaMath ─────────────────── v0.5.2
  Installed FunctionWrappers ──────────── v1.1.1
  Installed ConstructionBase ──────────── v1.0.0
  Installed LoggingExtras ─────────────── v0.4.0
  Installed ZygoteRules ───────────────── v0.2.0
  Installed RecursiveFactorization ────── v0.1.0
  Installed StaticArrays ──────────────── v0.12.1
  Installed AbstractTrees ─────────────── v0.3.2
  Installed CategoricalArrays ─────────── v0.7.7
  Installed DocStringExtensions ───────── v0.8.1
  Installed Sundials ──────────────────── v3.9.0
  Installed Reexport ──────────────────── v0.2.0
  Installed ProgressMeter ─────────────── v1.2.0
  Installed PooledArrays ──────────────── v0.5.3
  Installed RecipesBase ───────────────── v0.8.0
  Installed InvertedIndices ───────────── v1.0.0
  Installed Parsers ───────────────────── v0.3.12
  Installed DataAPI ───────────────────── v1.1.0
  Installed JSON ──────────────────────── v0.21.0
  Installed DataStructures ────────────── v0.17.10
  Installed BinaryProvider ────────────── v0.5.8
  Installed ChainRulesCore ────────────── v0.7.1
  Installed IterativeSolvers ──────────── v0.8.1
  Installed Missings ──────────────────── v0.4.3
  Installed ProgressLogging ───────────── v0.1.2
  Installed RecursiveArrayTools ───────── v2.1.0
  Installed Requires ──────────────────── v1.0.1
  Installed MuladdMacro ───────────────── v0.2.2
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed Tables ────────────────────── v1.0.3
  Installed TerminalLoggers ───────────── v0.1.1
  Installed DiffEqBase ────────────────── v6.24.0
  Installed Unitful ───────────────────── v1.0.0
  Installed MacroTools ────────────────── v0.5.4
  Installed ArrayInterface ────────────── v2.5.1
  Installed ConsoleProgressMonitor ────── v0.1.2
  Installed Compat ────────────────────── v3.8.0
  Installed TableTraits ───────────────── v1.0.0
  Installed OrderedCollections ────────── v1.1.0
   Updating `~/.julia/environments/v1.5/Project.toml`
   67ccffd1 + ModiaMath v0.5.2
   Updating `~/.julia/environments/v1.5/Manifest.toml`
   1520ce14 + AbstractTrees v0.3.2
   4fba245c + ArrayInterface v2.5.1
   b99e7846 + BinaryProvider v0.5.8
   324d7699 + CategoricalArrays v0.7.7
   d360d2e6 + ChainRulesCore v0.7.1
   34da2185 + Compat v3.8.0
   88cd18e8 + ConsoleProgressMonitor v0.1.2
   187b0558 + ConstructionBase v1.0.0
   9a962f9c + DataAPI v1.1.0
   a93c6f00 + DataFrames v0.20.2
   864edb3b + DataStructures v0.17.10
   e2d170a0 + DataValueInterfaces v1.0.0
   2b5f629d + DiffEqBase v6.24.0
   ffbed154 + DocStringExtensions v0.8.1
   069b7b12 + FunctionWrappers v1.1.1
   41ab1584 + InvertedIndices v1.0.0
   42fd0dbc + IterativeSolvers v0.8.1
   82899510 + IteratorInterfaceExtensions v1.0.0
   682c06a0 + JSON v0.21.0
   1d6d02ad + LeftChildRightSiblingTrees v0.1.2
   e6f89c97 + LoggingExtras v0.4.0
   1914dd2f + MacroTools v0.5.4
   e1d29d7a + Missings v0.4.3
   67ccffd1 + ModiaMath v0.5.2
   46d2c3a1 + MuladdMacro v0.2.2
   bac558e1 + OrderedCollections v1.1.0
   d96e819e + Parameters v0.12.0
   69de0a69 + Parsers v0.3.12
   2dfb63ee + PooledArrays v0.5.3
   33c8b6b6 + ProgressLogging v0.1.2
   92933f4c + ProgressMeter v1.2.0
   3cdcf5f2 + RecipesBase v0.8.0
   731186ca + RecursiveArrayTools v2.1.0
   f2c3362d + RecursiveFactorization v0.1.0
   189a3867 + Reexport v0.2.0
   ae029012 + Requires v1.0.1
   f2b01f46 + Roots v1.0.0
   a2af1166 + SortingAlgorithms v0.3.1
   90137ffa + StaticArrays v0.12.1
   c3572dad + Sundials v3.9.0
   3783bdb8 + TableTraits v1.0.0
   bd369af6 + Tables v1.0.3
   5d786b92 + TerminalLoggers v0.1.1
   a2a6695c + TreeViews v0.3.0
   1986cc42 + Unitful v1.0.0
   700de1a5 + ZygoteRules v0.2.0
   2a0f44e3 + Base64
   ade2ca70 + Dates
   8bb1440f + DelimitedFiles
   8ba89e20 + Distributed
   9fa8497b + Future
   b77e0a4c + InteractiveUtils
   76f85450 + LibGit2
   8f399da3 + Libdl
   37e2e46d + LinearAlgebra
   56ddb016 + Logging
   d6f4376e + Markdown
   a63ad114 + Mmap
   44cfe95a + Pkg
   de0858da + Printf
   3fa0cd96 + REPL
   9a3f8284 + Random
   ea8e919c + SHA
   9e88b42a + Serialization
   1a1011a3 + SharedArrays
   6462fe0b + Sockets
   2f01184e + SparseArrays
   10745b16 + Statistics
   4607b0f0 + SuiteSparse
   8dfed614 + Test
   cf7118a7 + UUIDs
   4ec0a83e + Unicode
   Building Sundials → `~/.julia/packages/Sundials/S5Ws7/deps/build.log`
    Testing ModiaMath
     Status `/tmp/jl_4YbgdI/Project.toml`
   a93c6f00 DataFrames v0.20.2
   864edb3b DataStructures v0.17.10
   67ccffd1 ModiaMath v0.5.2
   ae029012 Requires v1.0.1
   90137ffa StaticArrays v0.12.1
   c3572dad Sundials v3.9.0
   1986cc42 Unitful v1.0.0
   37e2e46d LinearAlgebra
   de0858da Printf
   8dfed614 Test
     Status `/tmp/jl_4YbgdI/Manifest.toml`
   1520ce14 AbstractTrees v0.3.2
   4fba245c ArrayInterface v2.5.1
   b99e7846 BinaryProvider v0.5.8
   324d7699 CategoricalArrays v0.7.7
   d360d2e6 ChainRulesCore v0.7.1
   34da2185 Compat v3.8.0
   88cd18e8 ConsoleProgressMonitor v0.1.2
   187b0558 ConstructionBase v1.0.0
   9a962f9c DataAPI v1.1.0
   a93c6f00 DataFrames v0.20.2
   864edb3b DataStructures v0.17.10
   e2d170a0 DataValueInterfaces v1.0.0
   2b5f629d DiffEqBase v6.24.0
   ffbed154 DocStringExtensions v0.8.1
   069b7b12 FunctionWrappers v1.1.1
   41ab1584 InvertedIndices v1.0.0
   42fd0dbc IterativeSolvers v0.8.1
   82899510 IteratorInterfaceExtensions v1.0.0
   682c06a0 JSON v0.21.0
   1d6d02ad LeftChildRightSiblingTrees v0.1.2
   e6f89c97 LoggingExtras v0.4.0
   1914dd2f MacroTools v0.5.4
   e1d29d7a Missings v0.4.3
   67ccffd1 ModiaMath v0.5.2
   46d2c3a1 MuladdMacro v0.2.2
   bac558e1 OrderedCollections v1.1.0
   d96e819e Parameters v0.12.0
   69de0a69 Parsers v0.3.12
   2dfb63ee PooledArrays v0.5.3
   33c8b6b6 ProgressLogging v0.1.2
   92933f4c ProgressMeter v1.2.0
   3cdcf5f2 RecipesBase v0.8.0
   731186ca RecursiveArrayTools v2.1.0
   f2c3362d RecursiveFactorization v0.1.0
   189a3867 Reexport v0.2.0
   ae029012 Requires v1.0.1
   f2b01f46 Roots v1.0.0
   a2af1166 SortingAlgorithms v0.3.1
   90137ffa StaticArrays v0.12.1
   c3572dad Sundials v3.9.0
   3783bdb8 TableTraits v1.0.0
   bd369af6 Tables v1.0.3
   5d786b92 TerminalLoggers v0.1.1
   a2a6695c TreeViews v0.3.0
   1986cc42 Unitful v1.0.0
   700de1a5 ZygoteRules v0.2.0
   2a0f44e3 Base64
   ade2ca70 Dates
   8bb1440f DelimitedFiles
   8ba89e20 Distributed
   9fa8497b Future
   b77e0a4c InteractiveUtils
   76f85450 LibGit2
   8f399da3 Libdl
   37e2e46d LinearAlgebra
   56ddb016 Logging
   d6f4376e Markdown
   a63ad114 Mmap
   44cfe95a Pkg
   de0858da Printf
   3fa0cd96 REPL
   9a3f8284 Random
   ea8e919c SHA
   9e88b42a Serialization
   1a1011a3 SharedArrays
   6462fe0b Sockets
   2f01184e SparseArrays
   10745b16 Statistics
   4607b0f0 SuiteSparse
   8dfed614 Test
   cf7118a7 UUIDs
   4ec0a83e Unicode
 
Importing ModiaMath Version 0.5.2 (2019-07-10)
    PyPlot not available (plot commands will be ignored).
    Try to install PyPlot. See hints here:
    https://github.com/ModiaSim/ModiaMath.jl/wiki/Installing-PyPlot-in-a-robust-way.
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... Next plot should give a warning:
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.

... result variables = 2×4 DataFrames.DataFrame
│ Row │ name   │ elType  │ sizeOrValue │ unit   │
│     │ String │ String  │ String      │ String │
├─────┼────────┼─────────┼─────────────┼────────┤
│ 1   │ phi    │ Float64 │ (100,)      │        │
│ 2   │ time   │ Float64 │ (100,)      │        │
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.

... Next plot should give a warning:
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.

... Next plot should give a warning:
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.

... figure=4 is closed

... result variables = 
│ Row │ name   │ elType  │ sizeOrValue │ unit   │ info   │
│     │ String │ String  │ String      │ String │ String │
├─────┼────────┼─────────┼─────────────┼────────┼────────┤
│ 1   │ phi    │ Float64 │ (100,)      │ rad    │        │
│ 2   │ r      │ Float64 │ (100, 3)    │ m      │        │
│ 3   │ time   │ Float64 │ (100,)      │ s      │        │
│ 4   │ w      │ Float64 │ (100,)      │ rad/s  │        │
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.

... Next plot should give a warning:
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.

... Next plot should give a warning:
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.

... result variables = 7×4 DataFrames.DataFrame
│ Row │ name        │ elType  │ sizeOrValue │ unit     │
│     │ String      │ String  │ String      │ String   │
├─────┼─────────────┼─────────┼─────────────┼──────────┤
│ 1   │ open        │ Bool    │ false       │          │
│ 2   │ phi         │ Float64 │ (100,)      │ rad      │
│ 3   │ phi2        │ Float64 │ (100,)      │ rad      │
│ 4   │ phi_max     │ Float64 │ 1.1         │ rad      │
│ 5   │ phi_max_int │ Int64   │ 1           │          │
│ 6   │ time        │ Float64 │ (100,)      │          │
│ 7   │ w           │ Float64 │ (100,)      │ rad s^-1 │
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.

... result variables = 7×4 DataFrames.DataFrame
│ Row │ name   │ elType  │ sizeOrValue │ unit     │
│     │ String │ String  │ String      │ String   │
├─────┼────────┼─────────┼─────────────┼──────────┤
│ 1   │ phi    │ Float64 │ (100,)      │ rad      │
│ 2   │ phi2   │ Float64 │ (100,)      │ rad      │
│ 3   │ r      │ Float64 │ (100, 3)    │          │
│ 4   │ r2     │ Float64 │ (100, 11)   │          │
│ 5   │ time   │ Float64 │ (100,)      │ s        │
│ 6   │ w      │ Float64 │ (100,)      │ rad s^-1 │
│ 7   │ w2     │ Float64 │ (100,)      │ rad s^-1 │
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.

... result variables = 
│ Row │ name   │ elType  │ sizeOrValue │ unit   │ info   │
│     │ String │ String  │ String      │ String │ String │
├─────┼────────┼─────────┼─────────────┼────────┼────────┤
│ 1   │ phi    │ Float64 │ (100,)      │ rad    │        │
│ 2   │ phi2   │ Float64 │ (100,)      │ rad    │        │
│ 3   │ r      │ Float64 │ (100, 3)    │ m      │        │
│ 4   │ time   │ Float64 │ (100,)      │ s      │        │
│ 5   │ w      │ Float64 │ (100,)      │ rad/s  │        │
│ 6   │ w2     │ Float64 │ (100,)      │ rad/s  │        │
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.

... result variables = 5×4 DataFrames.DataFrame
│ Row │ name   │ elType  │ sizeOrValue │ unit   │
│     │ String │ String  │ String      │ String │
├─────┼────────┼─────────┼─────────────┼────────┤
│ 1   │ phi1   │ Float64 │ (100,)      │        │
│ 2   │ phi2   │ Float64 │ (100,)      │        │
│ 3   │ time   │ Float64 │ (100,)      │        │
│ 4   │ w1     │ Float64 │ (100,)      │        │
│ 5   │ w2     │ Float64 │ (100,)      │        │
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.

... robot =    phi10 = 1.0
   phi20 = 2.0
   var10 = 3.0
   r0[1] = 1.0
   r0[2] = 2.0
   r0[3] = 3.0
   q0[1] = 0.5
   q0[2] = 0.5
   q0[3] = 0.0
   q0[4] = 0.7071067811865476

   rev1 = Revolute(
    phi = 1.0 rad
    w   = 0.0 rad/s
    a   = 22.200000000000003 rad/s^2
    tau = 0.0 N*m
   )

   rev2 = Revolute(
    phi = 2.0 rad
    w   = 0.0 rad/s
    a   = 44.400000000000006 rad/s^2
    tau = 0.0 N*m
   )

   var1 = 3.0 

   res1 = 0.0 

   frame = Revolute(
    r = [1.0, 2.0, 3.0] m
    q = [0.5, 0.5, 0.0, 0.7071067811865476] 
    v = [0.0, 0.0, 0.0] m/s
    w = [0.0, 0.0, 0.0] rad/s
    a = [0.0, 0.0, 0.0] m/s^2
    z = [0.0, 0.0, 0.0] rad/s^2
    f = [0.0, 0.0, 0.0] N
    t = [0.0, 0.0, 0.0] N*m
   )
   )

... Print variables of robot


variables: . Omitted printing of 11 columns
│ Row │ name            │ ValueType                    │ unit    │ numericType │
│     │ Symbol          │ Symbol                       │ String  │ ModiaMat…   │
├─────┼─────────────────┼──────────────────────────────┼─────────┼─────────────┤
│ 1   │ time            │ Float64                      │ s       │ TIME        │
│ 2   │ rev1.phi        │ Float64                      │ rad     │ XD_EXP      │
│ 3   │ rev1.w          │ Float64                      │ rad/s   │ XD_EXP      │
│ 4   │ rev1.a          │ Float64                      │ rad/s^2 │ DER_XD_EXP  │
│ 5   │ rev1.tau        │ Float64                      │ N*m     │ WR          │
│ 6   │ rev2.phi        │ Float64                      │ rad     │ XD_EXP      │
│ 7   │ rev2.w          │ Float64                      │ rad/s   │ XD_EXP      │
⋮
│ 17  │ frame.a         │ SArray{Tuple{3},Float64,1,3} │ m/s^2   │ DER_XD_IMP  │
│ 18  │ frame.z         │ SArray{Tuple{3},Float64,1,3} │ rad/s^2 │ DER_XD_IMP  │
│ 19  │ frame.f         │ SArray{Tuple{3},Float64,1,3} │ N       │ WR          │
│ 20  │ frame.t         │ SArray{Tuple{3},Float64,1,3} │ N*m     │ WR          │
│ 21  │ frame.residue_w │ SArray{Tuple{3},Float64,1,3} │         │ FD_IMP      │
│ 22  │ frame.residue_f │ SArray{Tuple{3},Float64,1,3} │         │ FD_IMP      │
│ 23  │ frame.residue_t │ SArray{Tuple{3},Float64,1,3} │         │ FD_IMP      │
│ 24  │ frame.residue_q │ Float64                      │         │ FC          │


x vector: 
│ Row │ x        │ name     │ fixed │ start                     │
│     │ Symbol   │ Symbol   │ Bool  │ Union…                    │
├─────┼──────────┼──────────┼───────┼───────────────────────────┤
│ 1   │ x[1]     │ rev1.phi │ 1     │ 1.0                       │
│ 2   │ x[2]     │ rev1.w   │ 1     │ 0.0                       │
│ 3   │ x[3]     │ rev2.phi │ 1     │ 2.0                       │
│ 4   │ x[4]     │ rev2.w   │ 1     │ 0.0                       │
│ 5   │ x[5:7]   │ frame.r  │ 1     │ [1.0, 2.0, 3.0]           │
│ 6   │ x[8:11]  │ frame.q  │ 1     │ [0.5, 0.5, 0.0, 0.707107] │
│ 7   │ x[12:14] │ frame.v  │ 1     │ [0.0, 0.0, 0.0]           │
│ 8   │ x[15:17] │ frame.w  │ 1     │ [0.0, 0.0, 0.0]           │
│ 9   │ x[18]    │ var1     │ 0     │ 3.0                       │


copy to variables: 
│ Row │ source      │ target     │
│     │ Symbol      │ Symbol     │
├─────┼─────────────┼────────────┤
│ 1   │ x[1]        │ rev1.phi   │
│ 2   │ x[2]        │ rev1.w     │
│ 3   │ x[3]        │ rev2.phi   │
│ 4   │ x[4]        │ rev2.w     │
│ 5   │ x[5:7]      │ frame.r    │
│ 6   │ x[8:11]     │ frame.q    │
│ 7   │ x[12:14]    │ frame.v    │
│ 8   │ x[15:17]    │ frame.w    │
│ 9   │ x[18]       │ var1       │
│ 10  │ derx[8:11]  │ frame.derq │
│ 11  │ derx[12:14] │ frame.a    │
│ 12  │ derx[15:17] │ frame.z    │


copy to residue vector: 
│ Row │ source              │ target         │
│     │ Symbol              │ Symbol         │
├─────┼─────────────────────┼────────────────┤
│ 1   │ derx[1] - rev1.w    │ residue[1]     │
│ 2   │ derx[2] - rev1.a    │ residue[2]     │
│ 3   │ derx[3] - rev2.w    │ residue[3]     │
│ 4   │ derx[4] - rev2.a    │ residue[4]     │
│ 5   │ derx[5:7] - frame.v │ residue[5:7]   │
│ 6   │ res1                │ residue[8]     │
│ 7   │ frame.residue_w     │ residue[9:11]  │
│ 8   │ frame.residue_f     │ residue[12:14] │
│ 9   │ frame.residue_t     │ residue[15:17] │
│ 10  │ frame.residue_q     │ residue[18]    │


copy to results: 
│ Row │ source     │ target        │ start                     │
│     │ Symbol     │ Symbol        │ Union…                    │
├─────┼────────────┼───────────────┼───────────────────────────┤
│ 1   │ time       │ result[1]     │ 0.0                       │
│ 2   │ rev1.phi   │ result[2]     │ 1.0                       │
│ 3   │ rev1.w     │ result[3]     │ 0.0                       │
│ 4   │ rev1.a     │ result[4]     │ 0.0                       │
│ 5   │ rev1.tau   │ result[5]     │ 0.0                       │
│ 6   │ rev2.phi   │ result[6]     │ 2.0                       │
│ 7   │ rev2.w     │ result[7]     │ 0.0                       │
⋮
│ 12  │ frame.q    │ result[14:17] │ [0.5, 0.5, 0.0, 0.707107] │
│ 13  │ frame.derq │ result[18:21] │ [0.0, 0.0, 0.0, 0.0]      │
│ 14  │ frame.v    │ result[22:24] │ [0.0, 0.0, 0.0]           │
│ 15  │ frame.w    │ result[25:27] │ [0.0, 0.0, 0.0]           │
│ 16  │ frame.a    │ result[28:30] │ [0.0, 0.0, 0.0]           │
│ 17  │ frame.z    │ result[31:33] │ [0.0, 0.0, 0.0]           │
│ 18  │ frame.f    │ result[34:36] │ [0.0, 0.0, 0.0]           │
│ 19  │ frame.t    │ result[37:39] │ [0.0, 0.0, 0.0]           │

... Copy start values to x

... Copy x and der_x to variables

... Copy variables to residues
residue = [0.0, -3.552713678800501e-15, 0.0, -7.105427357601002e-15, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

... robot2 =    phi10 = 1.0
   phi20 = 2.0
   r0[1] = 0.0
   r0[2] = 0.0
   r0[3] = 0.0
   q0[1] = 0.0
   q0[2] = 0.0
   q0[3] = 0.0
   q0[4] = 1.0

   rev1 = Revolute(
    phi = 1.0 rad
    w   = 0.0 rad/s
    a   = 0.0 rad/s^2
    tau = 0.0 N*m
   )

   rev2 = Revolute(
    phi = 2.0 rad
    w   = 0.0 rad/s
    a   = 0.0 rad/s^2
    tau = 0.0 N*m
   )

   frame = Revolute(
    r = [0.0, 0.0, 0.0] m
    q = [0.0, 0.0, 0.0, 1.0] 
    v = [0.0, 0.0, 0.0] m/s
    w = [0.0, 0.0, 0.0] rad/s
    a = [0.0, 0.0, 0.0] m/s^2
    z = [0.0, 0.0, 0.0] rad/s^2
    f = [0.0, 0.0, 0.0] N
    t = [0.0, 0.0, 0.0] N*m
   )
   )

... Print variables of robot2


variables: . Omitted printing of 11 columns
│ Row │ name        │ ValueType                    │ unit   │ numericType │
│     │ Symbol      │ Symbol                       │ String │ ModiaMat…   │
├─────┼─────────────┼──────────────────────────────┼────────┼─────────────┤
│ 1   │ time        │ Float64                      │ s      │ TIME        │
│ 2   │ _dummy_x    │ Float64                      │        │ XD_EXP      │
│ 3   │ _dummy_derx │ Float64                      │        │ DER_XD_EXP  │
│ 4   │ rev1.phi    │ Float64                      │ rad    │ WR          │
│ 5   │ rev2.phi    │ Float64                      │ rad    │ WR          │
│ 6   │ frame.r     │ SArray{Tuple{3},Float64,1,3} │ m      │ WR          │
│ 7   │ frame.q     │ SArray{Tuple{4},Float64,1,4} │        │ WR          │


x vector: 
│ Row │ x      │ name     │ fixed │ start  │
│     │ Symbol │ Symbol   │ Bool  │ Union… │
├─────┼────────┼──────────┼───────┼────────┤
│ 1   │ x[1]   │ _dummy_x │ 1     │ 0.0    │


copy to variables: 
│ Row │ source │ target   │
│     │ Symbol │ Symbol   │
├─────┼────────┼──────────┤
│ 1   │ x[1]   │ _dummy_x │


copy to residue vector: 
│ Row │ source                │ target     │
│     │ Symbol                │ Symbol     │
├─────┼───────────────────────┼────────────┤
│ 1   │ derx[1] - _dummy_derx │ residue[1] │


copy to results: 
│ Row │ source   │ target       │ start                │
│     │ Symbol   │ Symbol       │ Union…               │
├─────┼──────────┼──────────────┼──────────────────────┤
│ 1   │ time     │ result[1]    │ 0.0                  │
│ 2   │ rev1.phi │ result[2]    │ 1.0                  │
│ 3   │ rev2.phi │ result[3]    │ 2.0                  │
│ 4   │ frame.r  │ result[4:6]  │ [0.0, 0.0, 0.0]      │
│ 5   │ frame.q  │ result[7:10] │ [0.0, 0.0, 0.0, 1.0] │

... Copy start values to x

... Copy x and der_x to variables

... Copy variables to residues

... robot3 =    phi10 = 1.0
   phi20 = 2.0
   phi30 = -2.0

   rev1 = Revolute(
    phi = 1.0 rad
    w   = 0.0 rad/s
    a   = 0.0 rad/s^2
    tau = 0.0 N*m
   )

   rev2 = Revolute(
    phi = 2.0 rad
    w   = 0.0 rad/s
    a   = 0.0 rad/s^2
    tau = 0.0 N*m
   )

   rev3 = Revolute(
    phi = -2.0 rad
    w   = 0.0 rad/s
    a   = 0.0 rad/s^2
    tau = 0.0 N*m
   )

   res1 = 0.0 
   )

... Print variables of robot3


variables: . Omitted printing of 9 columns
│ Row │ name     │ ValueType │ unit   │ numericType │ vec     │ vecIndex │
│     │ Symbol   │ Symbol    │ String │ ModiaMat…   │ Symbol  │ Any      │
├─────┼──────────┼───────────┼────────┼─────────────┼─────────┼──────────┤
│ 1   │ time     │ Float64   │ s      │ TIME        │         │ 0        │
│ 2   │ rev1.phi │ Float64   │ rad    │ WR          │         │ 0        │
│ 3   │ rev2.phi │ Float64   │ rad    │ WR          │         │ 0        │
│ 4   │ rev3.phi │ Float64   │ rad    │ XD_EXP      │ x       │ 1        │
│ 5   │ res1     │ Float64   │        │ FC          │ residue │ 1        │


x vector: 
│ Row │ x      │ name     │ fixed │ start  │
│     │ Symbol │ Symbol   │ Bool  │ Union… │
├─────┼────────┼──────────┼───────┼────────┤
│ 1   │ x[1]   │ rev3.phi │ 1     │ -2.0   │


copy to variables: 
│ Row │ source │ target   │
│     │ Symbol │ Symbol   │
├─────┼────────┼──────────┤
│ 1   │ x[1]   │ rev3.phi │


copy to residue vector: 
│ Row │ source │ target     │
│     │ Symbol │ Symbol     │
├─────┼────────┼────────────┤
│ 1   │ res1   │ residue[1] │


copy to results: 
│ Row │ source   │ target    │ start  │
│     │ Symbol   │ Symbol    │ Union… │
├─────┼──────────┼───────────┼────────┤
│ 1   │ time     │ result[1] │ 0.0    │
│ 2   │ rev1.phi │ result[2] │ 1.0    │
│ 3   │ rev2.phi │ result[3] │ 2.0    │
│ 4   │ rev3.phi │ result[4] │ -2.0   │

... Copy start values to x

... Copy x and der_x to variables

... Copy variables to residues
t_end = 2.8284271247461903
path.t = [0.0, 1.4142135623730951, 2.8284271247461903]
... time = 0.0, rt = [1.0, 0.0, 0.0]
... time = 0.1, rt = [0.9, 0.1, 0.0]
... time = 0.2, rt = [0.8, 0.2, 0.0]
... time = 0.30000000000000004, rt = [0.7, 0.30000000000000004, 0.0]
... time = 0.4, rt = [0.6, 0.4, 0.0]
... time = 0.5, rt = [0.5, 0.5, 0.0]
... time = 0.6, rt = [0.4, 0.6, 0.0]
... time = 0.7, rt = [0.30000000000000004, 0.7, 0.0]
... time = 0.7999999999999999, rt = [0.20000000000000007, 0.7999999999999999, 0.0]
... time = 0.8999999999999999, rt = [0.10000000000000009, 0.8999999999999999, 0.0]
... time = 0.9999999999999999, rt = [1.1102230246251565e-16, 0.9999999999999999, 0.0]
... time = 1.0999999999999999, rt = [0.0, 0.9000000000000002, 0.0999999999999998]
... time = 1.2, rt = [0.0, 0.8, 0.1999999999999999]
... time = 1.3, rt = [0.0, 0.7, 0.3]
... time = 1.4000000000000001, rt = [0.0, 0.5999999999999999, 0.40000000000000013]
... time = 1.5000000000000002, rt = [0.0, 0.4999999999999999, 0.5000000000000001]
... time = 1.6000000000000003, rt = [0.0, 0.3999999999999998, 0.6000000000000002]
... time = 1.7000000000000004, rt = [0.0, 0.2999999999999997, 0.7000000000000003]
... time = 1.8000000000000005, rt = [0.0, 0.19999999999999962, 0.8000000000000004]
... time = 1.9000000000000006, rt = [0.0, 0.09999999999999953, 0.9000000000000005]
... time = 2.0000000000000004, rt = [0.0, -2.220446049250313e-16, 1.0000000000000002]

... Results of Solve_SingleNonlinearEquations:
fun1:
   analytical zero     = 1.0000000000000000e+00
   numerical zero      = 1.0000000000000000e+00
   absolute difference = 0.0000000000000000e+00

... Results of Solve_SingleNonlinearEquations:
fun2:
   analytical zero     = 6.4485440358400814e-01
   numerical zero      = 6.4485440358400814e-01
   absolute difference = 0.0000000000000000e+00

... Results of Solve_SingleNonlinearEquations:
fun3:
   analytical zero     = 6.9368474072202186e+00
   numerical zero      = 6.9368474072202186e+00
   absolute difference = 0.0000000000000000e+00
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: Pendulum
      Initialization at time = 0.0 s
        initial values:
          │ x │ name   │ start   │ fixed │ nominal │
          ├───┼────────┼─────────┼───────┼─────────┤
          │ 1 │ phi    │ 1.5708  │ 1     │ 1.0     │
          │ 2 │ w      │ 0.0     │ 1     │ 1.0     │

        for given x, compute der(x)
      Simulation started

      Simulation is terminated at time = 5.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_ExplicitDerivatives
        cpuTime        = 1.8 s (init: 0.92 s, integration: 0.86 s)
        startTime      = 0.0 s
        stopTime       = 5.0 s
        interval       = 0.01 s
        tolerance      = 0.0001
        nEquations     = 2
        nResults       = 501
        nSteps         = 142
        nResidues      = 237 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 25
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 6
        h0             = 5.8e-07 s
        hMin           = 5.8e-07 s
        hMax           = 0.069 s
        orderMax       = 5
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: Pendulum
      Initialization at time = 0.0 s
        initial values:
          │ x │ name   │ start   │ fixed │ nominal │
          ├───┼────────┼─────────┼───────┼─────────┤
          │ 1 │ phi    │ 1.0472  │ 1     │ 1.0     │
          │ 2 │ w      │ 0.0     │ 1     │ 1.0     │

        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
      Simulation started

      Simulation is terminated at time = 10.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_NoSpecialStructure
        cpuTime        = 0.41 s (init: 0.4 s, integration: 0.013 s)
        startTime      = 0.0 s
        stopTime       = 10.0 s
        interval       = 0.1 s
        tolerance      = 1.0e-8
        nEquations     = 2
        nResults       = 101
        nSteps         = 1408
        nResidues      = 1684 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 28
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 3
        h0             = 4.2e-11 s
        hMin           = 4.2e-11 s
        hMax           = 0.016 s
        orderMax       = 5
        sparseSolver   = false
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: Pendulum
      Initialization at time = 0.0 s
        initial values:
          │ x │ name   │ start   │ fixed │ nominal │
          ├───┼────────┼─────────┼───────┼─────────┤
          │ 1 │ phi    │ 1.0472  │ 1     │ 1.0     │
          │ 2 │ w      │ 0.0     │ 1     │ 1.0     │

        for given x, compute der(x)
      Simulation started

      Simulation is terminated at time = 10.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_ExplicitDerivatives
        cpuTime        = 0.015 s (init: 0.00056 s, integration: 0.014 s)
        startTime      = 0.0 s
        stopTime       = 10.0 s
        interval       = 0.1 s
        tolerance      = 1.0e-8
        nEquations     = 2
        nResults       = 101
        nSteps         = 1408
        nResidues      = 1687 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 29
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 3
        h0             = 4.2e-11 s
        hMin           = 4.2e-11 s
        hMax           = 0.016 s
        orderMax       = 5
        sparseSolver   = false
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: Pendulum
      Initialization at time = 0.0 s
        initial values:
          │ x │ name   │ start   │ fixed │ nominal │
          ├───┼────────┼─────────┼───────┼─────────┤
          │ 1 │ phi    │ 1.0472  │ 1     │ 1.0     │
          │ 2 │ w      │ 0.0     │ 1     │ 1.0     │

        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
      Simulation started

      Simulation is terminated at time = 10.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_LinearDerivativesAndConstraints
        cpuTime        = 0.014 s (init: 0.00061 s, integration: 0.013 s)
        startTime      = 0.0 s
        stopTime       = 10.0 s
        interval       = 0.1 s
        tolerance      = 1.0e-8
        nEquations     = 2 (includes 0 constraints)
        nResults       = 101
        nSteps         = 1408
        nResidues      = 1684 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 28
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 3
        h0             = 4.2e-11 s
        hMin           = 4.2e-11 s
        hMax           = 0.016 s
        orderMax       = 5
        sparseSolver   = false
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: FreeBodyRotation
      Initialization at time = 0.0 s
        initial values:
          │ x │ name   │ start   │ fixed │ nominal │
          ├───┼────────┼─────────┼───────┼─────────┤
          │ 1 │ q[1]   │ 0.1     │ 0     │ 0.1     │
          │ 2 │ q[2]   │ 0.5     │ 0     │ 0.5     │
          │ 3 │ q[3]   │ 0.0     │ 0     │ 1.0     │
          │ 4 │ q[4]   │ 1.0     │ 0     │ 1.0     │
          │ 5 │ w[1]   │ 0.0     │ 1     │ 1.0     │
          │ 6 │ w[2]   │ 0.0     │ 1     │ 1.0     │
          │ 7 │ w[3]   │ 0.0     │ 1     │ 1.0     │

        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
            q[1] = 0.1 changed to 0.08908708957321489
            q[2] = 0.5 changed to 0.4454354478660758
            q[4] = 1.0 changed to 0.8908708957321516
      Simulation started

      Simulation is terminated at time = 5.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_LinearDerivativesAndConstraints
        cpuTime        = 1.1 s (init: 0.9 s, integration: 0.22 s)
        startTime      = 0.0 s
        stopTime       = 5.0 s
        interval       = 0.01 s
        tolerance      = 1.0e-6
        nEquations     = 7 (includes 1 constraints)
        nResults       = 501
        nSteps         = 601
        nResidues      = 1473 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 47
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 10
        h0             = 7.5e-08 s
        hMin           = 7.5e-08 s
        hMax           = 0.039 s
        orderMax       = 5
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: FreeBodyRotation
      Initialization at time = 0.0 s
        initial values:
          │ x │ name   │ start   │ fixed │ nominal │
          ├───┼────────┼─────────┼───────┼─────────┤
          │ 1 │ q[1]   │ 0.1     │ 0     │ 0.1     │
          │ 2 │ q[2]   │ 0.5     │ 0     │ 0.5     │
          │ 3 │ q[3]   │ 0.0     │ 0     │ 1.0     │
          │ 4 │ q[4]   │ 1.0     │ 0     │ 1.0     │
          │ 5 │ w[1]   │ 0.0     │ 1     │ 1.0     │
          │ 6 │ w[2]   │ 0.0     │ 1     │ 1.0     │
          │ 7 │ w[3]   │ 0.0     │ 1     │ 1.0     │

        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
            q[1] = 0.1 changed to 0.0890870807438921
            q[2] = 0.5 changed to 0.4454354037194605
            q[4] = 1.0 changed to 0.890870807438921
      Simulation started

      Simulation is terminated at time = 5.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_LinearDerivativesAndConstraints
        cpuTime        = 0.14 s (init: 0.012 s, integration: 0.12 s)
        startTime      = 0.0 s
        stopTime       = 5.0 s
        interval       = 0.01 s
        tolerance      = 1.0e-8
        nEquations     = 7 (includes 1 constraints)
        nResults       = 501
        nSteps         = 1292
        nResidues      = 2653 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 79
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 20
        h0             = 7.5e-10 s
        hMin           = 7.5e-10 s
        hMax           = 0.018 s
        orderMax       = 5
        sparseSolver   = false
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: PendulumWithoutMacro
      Initialization at time = 0.0 s
        initial values:
          │ x │ name   │ start   │ fixed │ nominal │
          ├───┼────────┼─────────┼───────┼─────────┤
          │ 1 │ phi    │ 1.5708  │ 1     │ 1.5708  │
          │ 2 │ w      │ 0.0     │ 1     │ 1.0     │

        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
      Simulation started

      Simulation is terminated at time = 5.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_LinearDerivativesAndConstraints
        cpuTime        = 0.023 s (init: 0.018 s, integration: 0.0051 s)
        startTime      = 0.0 s
        stopTime       = 5.0 s
        interval       = 0.01 s
        tolerance      = 0.0001
        nEquations     = 2 (includes 0 constraints)
        nResults       = 501
        nSteps         = 137
        nResidues      = 218 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 21
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 2
        h0             = 5.8e-07 s
        hMin           = 5.8e-07 s
        hMax           = 0.081 s
        orderMax       = 5
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: FreeBodyRotationWithoutMacro
      Initialization at time = 0.0 s
        initial values:
          │ x │ name   │ start   │ fixed │ nominal │
          ├───┼────────┼─────────┼───────┼─────────┤
          │ 1 │ q[1]   │ 0.1     │ 0     │ 0.1     │
          │ 2 │ q[2]   │ 0.5     │ 0     │ 0.5     │
          │ 3 │ q[3]   │ 0.0     │ 0     │ 1.0     │
          │ 4 │ q[4]   │ 1.0     │ 0     │ 1.0     │
          │ 5 │ w[1]   │ 0.0     │ 1     │ 1.0     │
          │ 6 │ w[2]   │ 0.0     │ 1     │ 1.0     │
          │ 7 │ w[3]   │ 0.0     │ 1     │ 1.0     │

        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
            q[1] = 0.1 changed to 0.0890870807438921
            q[2] = 0.5 changed to 0.4454354037194605
            q[4] = 1.0 changed to 0.890870807438921
      Simulation started

      Simulation is terminated at time = 5.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_LinearDerivativesAndConstraints
        cpuTime        = 0.2 s (init: 0.13 s, integration: 0.072 s)
        startTime      = 0.0 s
        stopTime       = 5.0 s
        interval       = 0.01 s
        tolerance      = 1.0e-8
        nEquations     = 7 (includes 1 constraints)
        nResults       = 501
        nSteps         = 1247
        nResidues      = 2687 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 73
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 21
        h0             = 7.5e-10 s
        hMin           = 7.5e-10 s
        hMax           = 0.018 s
        orderMax       = 5
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: PendulumWithoutMacro
      Initialization at time = 0.0 s
        initial values:
          │ x │ name   │ start   │ fixed │ nominal │
          ├───┼────────┼─────────┼───────┼─────────┤
          │ 1 │ phi    │ 1.0472  │ 1     │ 1.0472  │
          │ 2 │ w      │ 0.0     │ 1     │ 1.0     │

        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
      Simulation started

      Simulation is terminated at time = 10.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_LinearDerivativesAndConstraints
        cpuTime        = 0.0096 s (init: 0.00054 s, integration: 0.0091 s)
        startTime      = 0.0 s
        stopTime       = 10.0 s
        interval       = 0.1 s
        tolerance      = 1.0e-8
        nEquations     = 2 (includes 0 constraints)
        nResults       = 101
        nSteps         = 1383
        nResidues      = 1673 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 28
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 3
        h0             = 4.2e-11 s
        hMin           = 4.2e-11 s
        hMax           = 0.016 s
        orderMax       = 5
        sparseSolver   = false
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: FreeBodyRotationWithoutMacro
      Initialization at time = 0.0 s
        initial values:
          │ x │ name   │ start   │ fixed │ nominal │
          ├───┼────────┼─────────┼───────┼─────────┤
          │ 1 │ q[1]   │ 0.1     │ 0     │ 0.1     │
          │ 2 │ q[2]   │ 0.5     │ 0     │ 0.5     │
          │ 3 │ q[3]   │ 0.0     │ 0     │ 1.0     │
          │ 4 │ q[4]   │ 1.0     │ 0     │ 1.0     │
          │ 5 │ w[1]   │ 0.0     │ 1     │ 1.0     │
          │ 6 │ w[2]   │ 0.0     │ 1     │ 1.0     │
          │ 7 │ w[3]   │ 0.0     │ 1     │ 1.0     │

        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
            q[1] = 0.1 changed to 0.0890870807438921
            q[2] = 0.5 changed to 0.4454354037194605
            q[4] = 1.0 changed to 0.890870807438921
      Simulation started

      Simulation is terminated at time = 5.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_LinearDerivativesAndConstraints
        cpuTime        = 0.058 s (init: 0.0017 s, integration: 0.057 s)
        startTime      = 0.0 s
        stopTime       = 5.0 s
        interval       = 0.01 s
        tolerance      = 1.0e-8
        nEquations     = 7 (includes 1 constraints)
        nResults       = 501
        nSteps         = 1247
        nResidues      = 2687 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 73
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 21
        h0             = 7.5e-10 s
        hMin           = 7.5e-10 s
        hMax           = 0.018 s
        orderMax       = 5
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: PT1
      Initialization at time = 0.0 s
        initial values:
          │ x │ name   │ start   │ fixed │ nominal │
          ├───┼────────┼─────────┼───────┼─────────┤
          │ 1 │ x[1]   │ 1.5     │ 0     │ 1.5     │

        for given x, compute der(x)
      Simulation started

      Simulation is terminated at time = 10.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_ExplicitDerivatives
        cpuTime        = 0.038 s (init: 0.037 s, integration: 0.00071 s)
        startTime      = 0.0 s
        stopTime       = 10.0 s
        interval       = 0.1 s
        tolerance      = 1.0e-8
        nEquations     = 1
        nResults       = 101
        nSteps         = 147
        nResidues      = 199 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 24
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 1
        h0             = 1.1e-08 s
        hMin           = 1.1e-08 s
        hMax           = 0.17 s
        orderMax       = 5
        sparseSolver   = false
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: PT1
      Initialization at time = 0.0 s
        initial values:
          │ x │ name   │ start   │ fixed │ nominal │
          ├───┼────────┼─────────┼───────┼─────────┤
          │ 1 │ x[1]   │ 1.5     │ 0     │ 1.5     │

        for given x, compute der(x)
      Simulation started

      Simulation is terminated at time = 10.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_ExplicitDerivatives
        cpuTime        = 0.21 s (init: 0.15 s, integration: 0.057 s)
        startTime      = 0.0 s
        stopTime       = 10.0 s
        interval       = 0.02 s
        tolerance      = 0.0001
        nEquations     = 1
        nResults       = 501
        nSteps         = 55
        nResidues      = 77 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 14
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 1
        h0             = 2e-05 s
        hMin           = 2e-05 s
        hMax           = 0.46 s
        orderMax       = 5
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: PendulumODE
      Initialization at time = 0.0 s
        initial values:
          │ x │ name   │ start   │ fixed │ nominal │
          ├───┼────────┼─────────┼───────┼─────────┤
          │ 1 │ phi    │ 1.5708  │ 0     │ 1.5708  │
          │ 2 │ w      │ 0.0     │ 0     │ 1.0     │

        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
      Simulation started

      Simulation is terminated at time = 5.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_LinearDerivativesAndConstraints
        cpuTime        = 0.26 s (init: 0.18 s, integration: 0.084 s)
        startTime      = 0.0 s
        stopTime       = 5.0 s
        interval       = 0.01 s
        tolerance      = 0.0001
        nEquations     = 2 (includes 0 constraints)
        nResults       = 501
        nSteps         = 137
        nResidues      = 218 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 21
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 2
        h0             = 5.8e-07 s
        hMin           = 5.8e-07 s
        hMax           = 0.081 s
        orderMax       = 5
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: PendulumDAE
      Initialization at time = 0.0 s
        initial values:
          │ x │ name       │ start   │ fixed │ nominal │
          ├───┼────────────┼─────────┼───────┼─────────┤
          │ 1 │ x          │ 0.5     │ 0     │ 0.5     │
          │ 2 │ y          │ -0.5    │ 0     │ 0.5     │
          │ 3 │ vx         │ 1.0     │ 0     │ 1.0     │
          │ 4 │ vy         │ 1.0     │ 0     │ 1.0     │
          │ 5 │ lambda_int │ 0.0     │ 0     │ 1.0     │
          │ 6 │ mue_int    │ 0.0     │ 0     │ 1.0     │

        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
            x = 0.5 changed to 0.7071067813735292
            y = -0.5 changed to -0.7071067813794369
            mue_int = 0.0 changed to -0.2928932325494339
        compute der(x) with Jacobian that is constructed with model provided constraint derivatives (der(fc))
      Simulation started

      Simulation is terminated at time = 2.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_LinearDerivativesAndConstraints
        cpuTime        = 0.3 s (init: 0.24 s, integration: 0.061 s)
        startTime      = 0.0 s
        stopTime       = 2.0 s
        interval       = 0.004 s
        tolerance      = 0.0001
        nEquations     = 6 (includes 2 constraints)
        nResults       = 501
        nSteps         = 157
        nResidues      = 418 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 27
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 4
        h0             = 1.4e-06 s
        hMin           = 1.4e-06 s
        hMax           = 0.027 s
        orderMax       = 5
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: FreeBodyRotation
      Initialization at time = 0.0 s
        initial values:
          │ x │ name   │ start   │ fixed │ nominal │
          ├───┼────────┼─────────┼───────┼─────────┤
          │ 1 │ Q[1]   │ 0.1     │ 0     │ 0.1     │
          │ 2 │ Q[2]   │ 0.5     │ 0     │ 0.5     │
          │ 3 │ Q[3]   │ 0.0     │ 0     │ 1.0     │
          │ 4 │ Q[4]   │ 1.0     │ 0     │ 1.0     │
          │ 5 │ w[1]   │ 0.0     │ 0     │ 1.0     │
          │ 6 │ w[2]   │ 0.0     │ 0     │ 1.0     │
          │ 7 │ w[3]   │ 0.0     │ 0     │ 1.0     │

        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
            Q[1] = 0.1 changed to 0.0890878309896849
            Q[2] = 0.5 changed to 0.4454391549485386
            Q[4] = 1.0 changed to 0.8908783098970772
      Simulation started

      Simulation is terminated at time = 5.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_LinearDerivativesAndConstraints
        cpuTime        = 0.38 s (init: 0.32 s, integration: 0.06 s)
        startTime      = 0.0 s
        stopTime       = 5.0 s
        interval       = 0.01 s
        tolerance      = 0.0001
        nEquations     = 7 (includes 1 constraints)
        nResults       = 501
        nSteps         = 278
        nResidues      = 745 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 31
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 7
        h0             = 7.5e-06 s
        hMin           = 7.5e-06 s
        hMax           = 0.056 s
        orderMax       = 5
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: StateSelection
      Initialization at time = 0.0 s
        initial values:
          │ x  │ name         │ start   │ fixed │ nominal │
          ├────┼──────────────┼─────────┼───────┼─────────┤
          │ 1  │ s            │ 0.0     │ 1     │ 1.0     │
          │ 2  │ f[1]         │ 0.0     │ 0     │ 1.0     │
          │ 3  │ f[2]         │ 0.0     │ 0     │ 1.0     │
          │ 4  │ f[3]         │ 0.0     │ 0     │ 1.0     │
          │ 5  │ sd           │ 0.0     │ 1     │ 1.0     │
          │ 6  │ der_der_r[1] │ 0.0     │ 0     │ 1.0     │
          │ 7  │ der_der_r[2] │ 0.0     │ 0     │ 1.0     │
          │ 8  │ der_der_r[3] │ 0.0     │ 0     │ 1.0     │
          │ 9  │ der_der_s    │ 0.0     │ 0     │ 1.0     │
          │ 10 │ der_v[1]     │ 0.0     │ 0     │ 1.0     │
          │ 11 │ der_v[2]     │ 0.0     │ 0     │ 1.0     │
          │ 12 │ der_v[3]     │ 0.0     │ 0     │ 1.0     │

        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 0.0001)
            f[3] = 0.0 changed to 9.81
      Simulation started

      Simulation is terminated at time = 1.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_NoSpecialStructure
        cpuTime        = 0.39 s (init: 0.33 s, integration: 0.062 s)
        startTime      = 0.0 s
        stopTime       = 1.0 s
        interval       = 0.002 s
        tolerance      = 0.0001
        nEquations     = 12
        nResults       = 501
        nSteps         = 27
        nResidues      = 316 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 24
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 0
        h0             = 1.7e-08 s
        hMin           = 1.7e-08 s
        hMax           = 0.41 s
        orderMax       = 2
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: SimpleStateEvents
      Initialization at time = 0.0 s
        initial values:
          │ x │ name   │ start   │ fixed │ nominal │
          ├───┼────────┼─────────┼───────┼─────────┤
          │ 1 │ s      │ 2.0     │ 0     │ 2.0     │
          │ 2 │ v      │ 0.0     │ 0     │ 1.0     │

        s = 2.0 (became > 0)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
      Simulation started

      State event (zero-crossing) at time = 1.6228001444219327 s (z[1] < 0)
        s = -1.0044456777026105e-14 (became <= 0)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 3.367874624802094 s (z[1] > 0)
        s = 6.158566664721688e-14 (became > 0)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 6.513310743445715 s (z[1] < 0)
        s = -1.2269646798947816e-13 (became <= 0)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 8.041847236698713 s (z[1] > 0)
        s = 1.8866428997662215e-13 (became > 0)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      Simulation is terminated at time = 10.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_LinearDerivativesAndConstraints
        cpuTime        = 0.39 s (init: 0.24 s, integration: 0.15 s)
        startTime      = 0.0 s
        stopTime       = 10.0 s
        interval       = 0.02 s
        tolerance      = 0.0001
        nEquations     = 2 (includes 0 constraints)
        nResults       = 509
        nSteps         = 181
        nResidues      = 363 (includes residue calls for Jacobian)
        nZeroCrossings = 721
        nJac           = 70
        nTimeEvents    = 0
        nStateEvents   = 4
        nRestartEvents = 4
        nErrTestFails  = 1
        h0             = 3.5e-06 s
        hMin           = 3.5e-06 s
        hMax           = 0.26 s
        orderMax       = 5
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: BouncingBall
      Initialization at time = 0.0 s
        initial values:
          │ x │ name   │ start   │ fixed │ nominal │
          ├───┼────────┼─────────┼───────┼─────────┤
          │ 1 │ h      │ 1.0     │ 0     │ 1.0     │
          │ 2 │ v      │ 0.0     │ 0     │ 1.0     │

        flying = true
        -h = -1.0 (became <= 0)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
      Simulation started

      State event (zero-crossing) at time = 0.45152364095728476 s (z[1] > 0)
        -h = 6.766809335090329e-14 (became > 0)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 1.0836567379347877 s (z[1] > 0)
        -h = 1.4251100299844666e-13 (became > 0)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 1.5261499050367457 s (z[1] > 0)
        -h = 5.5719318048375044e-14 (became > 0)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 1.8358951198266975 s (z[1] > 0)
        -h = 4.279215870539588e-14 (became > 0)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 2.05271676890868 s (z[1] > 0)
        -h = 2.6754206489121302e-14 (became > 0)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 2.2044919175628794 s (z[1] > 0)
        -h = 1.0061396160665481e-16 (became > 0)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 2.3107345138036663 s (z[1] > 0)
        -h = 1.3860006892185694e-14 (became > 0)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 2.3851043238536502 s (z[1] > 0)
        -h = 5.289605559122279e-15 (became > 0)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 2.437163183747697 s (z[1] > 0)
        -h = 7.214931777022038e-15 (became > 0)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 2.473604379573165 s (z[1] > 0)
        -h = 6.7220534694101275e-18 (became > 0)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 2.4991132112013146 s (z[1] > 0)
        -h = 3.4830943467997755e-15 (became > 0)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 2.516969388176662 s (z[1] > 0)
        -h = 1.0408340855860843e-17 (became > 0)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 2.5294687068842765 s (z[1] > 0)
        -h = 1.8260268514272426e-15 (became > 0)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 2.5382182245244422 s (z[1] > 0)
        -h = 1.219625800092522e-15 (became > 0)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 2.544342880797123 s (z[1] > 0)
        -h = 8.764351549193916e-16 (became > 0)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 2.548630133127159 s (z[1] > 0)
        -h = 5.862213383993342e-16 (became > 0)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 2.5516312012257574 s (z[1] > 0)
        -h = 4.0704507093484305e-16 (became > 0)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 2.553731938274084 s (z[1] > 0)
        -h = 3.7880118082512203e-16 (became > 0)
        flying = false
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      Simulation is terminated at time = 3.0 s

      BouncingBall model is terminated (flying = false)

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_LinearDerivativesAndConstraints
        cpuTime        = 0.34 s (init: 0.21 s, integration: 0.13 s)
        startTime      = 0.0 s
        stopTime       = 3.0 s
        interval       = 0.006 s
        tolerance      = 0.0001
        nEquations     = 2 (includes 0 constraints)
        nResults       = 537
        nSteps         = 313
        nResidues      = 861 (includes residue calls for Jacobian)
        nZeroCrossings = 1017
        nJac           = 274
        nTimeEvents    = 0
        nStateEvents   = 18
        nRestartEvents = 18
        nErrTestFails  = 0
        h0             = 1e-07 s
        hMin           = 1e-07 s
        hMax           = 0.59 s
        orderMax       = 3
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: IdealClutch
      Initialization at time = 0.0 s
        initial values:
          │ x │ name                 │ start   │ fixed │ nominal │
          ├───┼──────────────────────┼─────────┼───────┼─────────┤
          │ 1 │ inertia1.w           │ 0.0     │ 0     │ 1.0     │
          │ 2 │ inertia2.w           │ 10.0    │ 0     │ 10.0    │
          │ 3 │ integral(clutch.tau) │ 0.0     │ 0     │ 1.0     │

        nextEventTime = 100 s, integrateToEvent = true
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
            inertia1.w = 0.0 changed to 6.400000003814697
            inertia2.w = 10.0 changed to 6.400000003814697
            integral(clutch.tau) = 0.0 changed to -1.4399999984741212
      Simulation started

      Time event at time = 100.0 s
        nextEventTime = 300 s, integrateToEvent = true
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      Time event at time = 300.0 s
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
            inertia1.w = 39.95300327936998 changed to 32.072047154948535
            inertia2.w = 27.63900929577123 changed to 32.072047139246486
            integral(clutch.tau) = 7.055603718308493 changed to 8.828818845841806
        restart = Restart

      Simulation is terminated at time = 500.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_LinearDerivativesAndConstraints
        cpuTime        = 0.36 s (init: 0.24 s, integration: 0.12 s)
        startTime      = 0.0 s
        stopTime       = 500.0 s
        interval       = 1.0 s
        tolerance      = 0.0001
        nEquations     = 3 (includes 1 constraints)
        nResults       = 503
        nSteps         = 100
        nResidues      = 255 (includes residue calls for Jacobian)
        nZeroCrossings = 600
        nJac           = 41
        nTimeEvents    = 2
        nStateEvents   = 0
        nRestartEvents = 2
        nErrTestFails  = 2
        h0             = 0.00078 s
        hMin           = 0.00078 s
        hMax           = 24 s
        orderMax       = 5
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
w1_end = 38.927746656551946, w2_end = 38.92774665655194

... close all open figures.
Test Summary:  | Pass  Total
Test ModiaMath |  119    119
    Testing ModiaMath tests passed 
