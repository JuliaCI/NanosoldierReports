Julia Version 1.5.0-DEV.162
Commit fba188c5ea (2020-01-28 03:57 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-8.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

 Resolving package versions...
 Installed StatsKit ──────────────────── v0.3.0
 Installed Arpack_jll ────────────────── v3.5.0+2
 Installed Requires ──────────────────── v1.0.0
 Installed SortingAlgorithms ─────────── v0.3.1
 Installed FilePathsBase ─────────────── v0.7.0
 Installed CommonSubexpressions ──────── v0.2.0
 Installed Bootstrap ─────────────────── v2.2.0
 Installed StaticArrays ──────────────── v0.12.1
 Installed Parsers ───────────────────── v0.3.10
 Installed QuadGK ────────────────────── v2.3.1
 Installed TableTraits ───────────────── v1.0.0
 Installed Missings ──────────────────── v0.4.3
 Installed FFTW ──────────────────────── v1.2.0
 Installed JSON ──────────────────────── v0.21.0
 Installed ForwardDiff ───────────────── v0.10.9
 Installed MKL_jll ───────────────────── v2019.0.117+2
 Installed FFTW_jll ──────────────────── v3.3.9+3
 Installed HypothesisTests ───────────── v0.9.0
 Installed Parameters ────────────────── v0.12.0
 Installed Compat ────────────────────── v2.2.0
 Installed TimeSeries ────────────────── v0.16.1
 Installed KernelDensity ─────────────── v0.5.1
 Installed PooledArrays ──────────────── v0.5.3
 Installed Clustering ────────────────── v0.13.3
 Installed PDMats ────────────────────── v0.9.11
 Installed Combinatorics ─────────────── v1.0.0
 Installed OpenBLAS_jll ──────────────── v0.3.7+5
 Installed RecipesBase ───────────────── v0.7.0
 Installed CategoricalArrays ─────────── v0.7.7
 Installed StatsBase ─────────────────── v0.32.0
 Installed GLM ───────────────────────── v1.3.6
 Installed DataAPI ───────────────────── v1.1.0
 Installed DiffResults ───────────────── v1.0.2
 Installed DataValueInterfaces ───────── v1.0.0
 Installed BinaryProvider ────────────── v0.5.8
 Installed Reexport ──────────────────── v0.2.0
 Installed PositiveFactorizations ────── v0.2.3
 Installed SpecialFunctions ──────────── v0.9.0
 Installed FiniteDiff ────────────────── v2.1.0
 Installed AbstractFFTs ──────────────── v0.5.0
 Installed InvertedIndices ───────────── v1.0.0
 Installed Optim ─────────────────────── v0.20.0
 Installed OpenSpecFun_jll ───────────── v0.5.3+1
 Installed OffsetArrays ──────────────── v1.0.2
 Installed Rmath ─────────────────────── v0.6.0
 Installed DataStructures ────────────── v0.17.9
 Installed Tables ────────────────────── v0.2.11
 Installed Distances ─────────────────── v0.8.2
 Installed Loess ─────────────────────── v0.5.0
 Installed Arpack ────────────────────── v0.4.0
 Installed DiffRules ─────────────────── v1.0.0
 Installed DataFrames ────────────────── v0.20.0
 Installed ShiftedArrays ─────────────── v1.0.0
 Installed WeakRefStrings ────────────── v0.6.2
 Installed NaNMath ───────────────────── v0.3.3
 Installed Roots ─────────────────────── v0.8.4
 Installed Polynomials ───────────────── v0.6.0
 Installed Distributions ─────────────── v0.21.12
 Installed FillArrays ────────────────── v0.8.4
 Installed Ratios ────────────────────── v0.3.1
 Installed WoodburyMatrices ──────────── v0.5.0
 Installed MultivariateStats ─────────── v0.7.0
 Installed OrderedCollections ────────── v1.1.0
 Installed StatsFuns ─────────────────── v0.9.3
 Installed LineSearches ──────────────── v7.0.1
 Installed IteratorInterfaceExtensions ─ v1.0.0
 Installed Interpolations ────────────── v0.12.8
 Installed NearestNeighbors ──────────── v0.4.4
 Installed AxisAlgorithms ────────────── v1.0.0
 Installed NLSolversBase ─────────────── v7.6.0
 Installed ArrayInterface ────────────── v2.3.1
 Installed IntelOpenMP_jll ───────────── v2018.0.3+0
 Installed StatsModels ───────────────── v0.6.7
 Installed CSV ───────────────────────── v0.5.22
  Updating `~/.julia/environments/v1.5/Project.toml`
  [2cb19f9e] + StatsKit v0.3.0
  Updating `~/.julia/environments/v1.5/Manifest.toml`
  [621f4979] + AbstractFFTs v0.5.0
  [7d9fca2a] + Arpack v0.4.0
  [68821587] + Arpack_jll v3.5.0+2
  [4fba245c] + ArrayInterface v2.3.1
  [13072b0f] + AxisAlgorithms v1.0.0
  [b99e7846] + BinaryProvider v0.5.8
  [e28b5b4c] + Bootstrap v2.2.0
  [336ed68f] + CSV v0.5.22
  [324d7699] + CategoricalArrays v0.7.7
  [aaaa29a8] + Clustering v0.13.3
  [861a8166] + Combinatorics v1.0.0
  [bbf7d656] + CommonSubexpressions v0.2.0
  [34da2185] + Compat v2.2.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.0
  [864edb3b] + DataStructures v0.17.9
  [e2d170a0] + DataValueInterfaces v1.0.0
  [163ba53b] + DiffResults v1.0.2
  [b552c78f] + DiffRules v1.0.0
  [b4f34e82] + Distances v0.8.2
  [31c24e10] + Distributions v0.21.12
  [7a1cc6ca] + FFTW v1.2.0
  [f5851436] + FFTW_jll v3.3.9+3
  [48062228] + FilePathsBase v0.7.0
  [1a297f60] + FillArrays v0.8.4
  [6a86dc24] + FiniteDiff v2.1.0
  [f6369f11] + ForwardDiff v0.10.9
  [38e38edf] + GLM v1.3.6
  [09f84164] + HypothesisTests v0.9.0
  [1d5cc7b8] + IntelOpenMP_jll v2018.0.3+0
  [a98d9a8b] + Interpolations v0.12.8
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5ab0869b] + KernelDensity v0.5.1
  [d3d80556] + LineSearches v7.0.1
  [4345ca2d] + Loess v0.5.0
  [856f044c] + MKL_jll v2019.0.117+2
  [e1d29d7a] + Missings v0.4.3
  [6f286f6a] + MultivariateStats v0.7.0
  [d41bc354] + NLSolversBase v7.6.0
  [77ba4419] + NaNMath v0.3.3
  [b8a86587] + NearestNeighbors v0.4.4
  [6fe1bfb0] + OffsetArrays v1.0.2
  [4536629a] + OpenBLAS_jll v0.3.7+5
  [efe28fd5] + OpenSpecFun_jll v0.5.3+1
  [429524aa] + Optim v0.20.0
  [bac558e1] + OrderedCollections v1.1.0
  [90014a1f] + PDMats v0.9.11
  [d96e819e] + Parameters v0.12.0
  [69de0a69] + Parsers v0.3.10
  [f27b6e38] + Polynomials v0.6.0
  [2dfb63ee] + PooledArrays v0.5.3
  [85a6dd25] + PositiveFactorizations v0.2.3
  [1fd47b50] + QuadGK v2.3.1
  [c84ed2f1] + Ratios v0.3.1
  [3cdcf5f2] + RecipesBase v0.7.0
  [189a3867] + Reexport v0.2.0
  [ae029012] + Requires v1.0.0
  [79098fc4] + Rmath v0.6.0
  [f2b01f46] + Roots v0.8.4
  [1277b4bf] + ShiftedArrays v1.0.0
  [a2af1166] + SortingAlgorithms v0.3.1
  [276daf66] + SpecialFunctions v0.9.0
  [90137ffa] + StaticArrays v0.12.1
  [2913bbd2] + StatsBase v0.32.0
  [4c63d2b9] + StatsFuns v0.9.3
  [2cb19f9e] + StatsKit v0.3.0
  [3eaba693] + StatsModels v0.6.7
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v0.2.11
  [9e3dc215] + TimeSeries v0.16.1
  [ea10d353] + WeakRefStrings v0.6.2
  [efce3f68] + WoodburyMatrices v0.5.0
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [4607b0f0] + SuiteSparse 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
  Building FFTW ─→ `~/.julia/packages/FFTW/qqcBj/deps/build.log`
  Updating `/tmp/jl_BueFWC/Project.toml`
 [no changes]
  Updating `/tmp/jl_BueFWC/Manifest.toml`
 [no changes]
  Building Rmath → `~/.julia/packages/Rmath/BoBag/deps/build.log`
  Updating `/tmp/jl_CJjvBB/Project.toml`
 [no changes]
  Updating `/tmp/jl_CJjvBB/Manifest.toml`
 [no changes]
   Testing StatsKit
  Updating `/tmp/jl_DvX3Tb/Project.toml`
 [no changes]
  Updating `/tmp/jl_DvX3Tb/Manifest.toml`
 [no changes]
Running sandbox
Status `/tmp/jl_DvX3Tb/Project.toml`
  [e28b5b4c] Bootstrap v2.2.0
  [336ed68f] CSV v0.5.22
  [324d7699] CategoricalArrays v0.7.7
  [aaaa29a8] Clustering v0.13.3
  [a93c6f00] DataFrames v0.20.0
  [b4f34e82] Distances v0.8.2
  [31c24e10] Distributions v0.21.12
  [38e38edf] GLM v1.3.6
  [09f84164] HypothesisTests v0.9.0
  [5ab0869b] KernelDensity v0.5.1
  [4345ca2d] Loess v0.5.0
  [6f286f6a] MultivariateStats v0.7.0
  [189a3867] Reexport v0.2.0
  [2913bbd2] StatsBase v0.32.0
  [2cb19f9e] StatsKit v0.3.0
  [9e3dc215] TimeSeries v0.16.1
  [44cfe95a] Pkg 
  [10745b16] Statistics 
   Testing Bootstrap
 Installed Zlib_jll ─────────── v1.2.11+8
 Installed Libiconv_jll ─────── v1.16.0+1
 Installed Mocking ──────────── v0.7.1
 Installed XML2_jll ─────────── v2.9.9+1
 Installed FileIO ───────────── v1.2.1
 Installed EzXML ────────────── v1.1.0
 Installed TranscodingStreams ─ v0.9.5
 Installed CodecZlib ────────── v0.6.0
 Installed ExprTools ────────── v0.1.0
 Installed RData ────────────── v0.6.3
 Installed TimeZones ────────── v1.0.0
 Installed RDatasets ────────── v0.6.6
  Updating `/tmp/jl_9AEr1v/Project.toml`
  [ce6b1742] + RDatasets v0.6.6
  Updating `/tmp/jl_9AEr1v/Manifest.toml`
  [336ed68f] + CSV v0.5.22
  [944b1d66] + CodecZlib v0.6.0
  [e2ba6199] + ExprTools v0.1.0
  [8f5d6c58] + EzXML v1.1.0
  [5789e2e9] + FileIO v1.2.1
  [48062228] + FilePathsBase v0.7.0
  [94ce4f54] + Libiconv_jll v1.16.0+1
  [78c3b35d] + Mocking v0.7.1
  [df47a6cb] + RData v0.6.3
  [ce6b1742] + RDatasets v0.6.6
  [ae029012] + Requires v1.0.0
  [f269a46b] + TimeZones v1.0.0
  [3bb67fe8] + TranscodingStreams v0.9.5
  [ea10d353] + WeakRefStrings v0.6.2
  [02c8fc9c] + XML2_jll v2.9.9+1
  [83775a58] + Zlib_jll v1.2.11+8
  Building CodecZlib → `~/.julia/packages/CodecZlib/5t9zO/deps/build.log`
  Updating `/tmp/jl_fjzgJu/Project.toml`
 [no changes]
  Updating `/tmp/jl_fjzgJu/Manifest.toml`
 [no changes]
  Building TimeZones → `~/.julia/packages/TimeZones/vYAiM/deps/build.log`
  Updating `/tmp/jl_64Iy9i/Project.toml`
 [no changes]
  Updating `/tmp/jl_64Iy9i/Manifest.toml`
 [no changes]
Running sandbox
Status `/tmp/jl_9AEr1v/Project.toml`
  [e28b5b4c] Bootstrap v2.2.0
  [a93c6f00] DataFrames v0.20.0
  [31c24e10] Distributions v0.21.12
  [38e38edf] GLM v1.3.6
  [ce6b1742] RDatasets v0.6.6
  [2913bbd2] StatsBase v0.32.0
  [3eaba693] StatsModels v0.6.7
  [9a3f8284] Random 
  [10745b16] Statistics 
  [8dfed614] Test 
Test Summary:             | Pass  Total
Non-parametric bootstraps |  448    448
Test Summary:         | Pass  Total
Parametric bootstraps |  315    315
Test Summary:       | Pass  Total
Statistic functions | 1008   1008
Test Summary:     | Pass  Total
Utility functions |   10     10
Test Summary: | Pass  Total
Distributions |    5      5
   Testing Bootstrap tests passed 
   Testing CategoricalArrays
  Updating `/tmp/jl_XHkovx/Project.toml`
 [no changes]
  Updating `/tmp/jl_XHkovx/Manifest.toml`
 [no changes]
Running sandbox
Status `/tmp/jl_XHkovx/Project.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v2.2.0
  [9a962f9c] DataAPI v1.1.0
  [682c06a0] JSON v0.21.0
  [e1d29d7a] Missings v0.4.3
  [189a3867] Reexport v0.2.0
  [9fa8497b] Future 
  [de0858da] Printf 
  [10745b16] Statistics 
  [8dfed614] Test 
  [4ec0a83e] Unicode 
┌ Warning: `eltype(x::CategoricalString)` is deprecated, use `eltype(String(x))` instead.
│   caller = macro expansion at 01_typedef.jl:56 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/01_typedef.jl:56
Test Summary: | Pass  Total
01_typedef.jl |   99     99
Test Summary:    | Pass  Total
02_buildorder.jl |    6      6
Test Summary:     | Pass  Total
03_buildfields.jl |    6      6
Test Summary:      | Pass  Total
04_constructors.jl |  121    121
┌ Warning: `eltype(x::CategoricalString)` is deprecated, use `eltype(String(x))` instead.
│   caller = macro expansion at 05_convert.jl:76 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/05_convert.jl:76
Test Summary: | Pass  Total
05_convert.jl |  131    131
Test Summary: | Pass  Total
05_copy.jl    |   14     14
Test Summary: | Pass  Total
06_show.jl    |   52     52
Test Summary: | Pass  Total
06_length.jl  |    2      2
Test Summary: | Pass  Total
07_levels.jl  |  363    363
Test Summary:  | Pass  Total
08_equality.jl |  110    110
┌ Warning: `isempty(x::CategoricalString)` is deprecated, use `isempty(String(x))` instead.
│   caller = eval_test(::Expr, ::Expr, ::LineNumberNode, ::Bool) at Test.jl:258
└ @ Test /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:258
┌ Warning: `eltype(x::CategoricalString)` is deprecated, use `eltype(String(x))` instead.
│   caller = top-level scope at 08_string.jl:35
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:35
┌ Warning: `eltype(x::CategoricalString)` is deprecated, use `eltype(String(x))` instead.
│   caller = top-level scope at 08_string.jl:36
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:36
┌ Warning: `length(x::CategoricalString)` is deprecated, use `length(String(x))` instead.
│   caller = top-level scope at 08_string.jl:38
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:38
┌ Warning: `length(x::CategoricalString)` is deprecated, use `length(String(x))` instead.
│   caller = top-level scope at 08_string.jl:39
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:39
┌ Warning: `sizeof(x::CategoricalString)` is deprecated, use `sizeof(String(x))` instead.
│   caller = top-level scope at 08_string.jl:41
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:41
┌ Warning: `sizeof(x::CategoricalString)` is deprecated, use `sizeof(String(x))` instead.
│   caller = top-level scope at 08_string.jl:42
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:42
┌ Warning: `nextind(x::CategoricalString, i::Int)` is deprecated, use `nextind(String(x), i)` instead.
│   caller = top-level scope at 08_string.jl:44
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:44
┌ Warning: `nextind(x::CategoricalString, i::Int)` is deprecated, use `nextind(String(x), i)` instead.
│   caller = top-level scope at 08_string.jl:45
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:45
┌ Warning: `prevind(x::CategoricalString, i::Int)` is deprecated, use `prevind(String(x), i)` instead.
│   caller = top-level scope at 08_string.jl:47
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:47
┌ Warning: `prevind(x::CategoricalString, i::Int)` is deprecated, use `prevind(String(x), i)` instead.
│   caller = top-level scope at 08_string.jl:48
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:48
┌ Warning: `firstindex(x::CategoricalString)` is deprecated, use `firstindex(String(x))` instead.
│   caller = top-level scope at 08_string.jl:50
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:50
┌ Warning: `firstindex(x::CategoricalString)` is deprecated, use `firstindex(String(x))` instead.
│   caller = top-level scope at 08_string.jl:51
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:51
┌ Warning: `lastindex(x::CategoricalString)` is deprecated, use `lastindex(String(x))` instead.
│   caller = top-level scope at 08_string.jl:53
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:53
┌ Warning: `lastindex(x::CategoricalString)` is deprecated, use `lastindex(String(x))` instead.
│   caller = top-level scope at 08_string.jl:54
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:54
┌ Warning: `collect(x::CategoricalString)` is deprecated, use `collect(String(x))` instead.
│   caller = top-level scope at 08_string.jl:56
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:56
┌ Warning: `collect(x::CategoricalString)` is deprecated, use `collect(String(x))` instead.
│   caller = top-level scope at 08_string.jl:57
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:57
┌ Warning: `getindex(x::CategoricalString, i::Int)` is deprecated, use `getindex(String(x), i)` instead.
│   caller = top-level scope at 08_string.jl:59
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:59
┌ Warning: `getindex(x::CategoricalString, i::Int)` is deprecated, use `getindex(String(x), i)` instead.
│   caller = top-level scope at 08_string.jl:60
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:60
┌ Warning: `getindex(x::CategoricalString, i::Int)` is deprecated, use `getindex(String(x), i)` instead.
│   caller = top-level scope at 08_string.jl:61
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:61
┌ Warning: `getindex(x::CategoricalString, i::Int)` is deprecated, use `getindex(String(x), i)` instead.
│   caller = top-level scope at 08_string.jl:62
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:62
┌ Warning: `codeunit(x::CategoricalString, i::Integer)` is deprecated, use `codeunit(String(x), i)` instead.
│   caller = top-level scope at 08_string.jl:64
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:64
┌ Warning: `codeunit(x::CategoricalString, i::Integer)` is deprecated, use `codeunit(String(x), i)` instead.
│   caller = top-level scope at 08_string.jl:65
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:65
┌ Warning: `codeunit(x::CategoricalString, i::Integer)` is deprecated, use `codeunit(String(x), i)` instead.
│   caller = top-level scope at 08_string.jl:66
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:66
┌ Warning: `codeunit(x::CategoricalString, i::Integer)` is deprecated, use `codeunit(String(x), i)` instead.
│   caller = top-level scope at 08_string.jl:67
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:67
┌ Warning: `ascii(x::CategoricalString)` is deprecated, use `ascii(String(x))` instead.
│   caller = top-level scope at 08_string.jl:69
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:69
┌ Warning: `ascii(x::CategoricalString)` is deprecated, use `ascii(String(x))` instead.
│   caller = top-level scope at 08_string.jl:70
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:70
┌ Warning: `normalize(x::CategoricalString, s::Symbol)` is deprecated, use `normalize(String(x), s)` instead.
│   caller = top-level scope at 08_string.jl:74
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:74
┌ Warning: `graphemes(x::CategoricalString)` is deprecated, use `graphemes(String(x))` instead.
│   caller = top-level scope at 08_string.jl:76
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:76
┌ Warning: `graphemes(x::CategoricalString)` is deprecated, use `graphemes(String(x))` instead.
│   caller = top-level scope at 08_string.jl:77
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:77
┌ Warning: `isvalid(x::CategoricalString)` is deprecated, use `isvalid(String(x))` instead.
│   caller = top-level scope at 08_string.jl:79
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:79
┌ Warning: `isvalid(x::CategoricalString)` is deprecated, use `isvalid(String(x))` instead.
│   caller = top-level scope at 08_string.jl:80
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:80
┌ Warning: `isvalid(x::CategoricalString, i::Integer)` is deprecated, use `isvalid(String(x), i)` instead.
│   caller = top-level scope at 08_string.jl:81
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:81
┌ Warning: `isvalid(x::CategoricalString, i::Integer)` is deprecated, use `isvalid(String(x), i)` instead.
│   caller = top-level scope at 08_string.jl:82
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:82
┌ Warning: `isvalid(x::CategoricalString, i::Integer)` is deprecated, use `isvalid(String(x), i)` instead.
│   caller = top-level scope at 08_string.jl:83
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:83
┌ Warning: `length(x::CategoricalString, i::Int, j::Int)` is deprecated, use `length(String(x), i, j)` instead.
│   caller = top-level scope at 08_string.jl:85
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:85
┌ Warning: `length(x::CategoricalString, i::Int, j::Int)` is deprecated, use `length(String(x), i, j)` instead.
│   caller = top-level scope at 08_string.jl:86
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:86
┌ Warning: `ncodeunits(x::CategoricalString)` is deprecated, use `ncodeunits(String(x))` instead.
│   caller = nextind(::CategoricalArrays.CategoricalString{UInt32}, ::Int64, ::Int64) at basic.jl:521
└ @ Base ./strings/basic.jl:521
┌ Warning: `isvalid(x::CategoricalString, i::Integer)` is deprecated, use `isvalid(String(x), i)` instead.
│   caller = nextind(::CategoricalArrays.CategoricalString{UInt32}, ::Int64, ::Int64) at basic.jl:525
└ @ Base ./strings/basic.jl:525
┌ Warning: `repeat(x::CategoricalString, i::Integer)` is deprecated, use `repeat(String(x), i)` instead.
│   caller = ^ at basic.jl:680 [inlined]
└ @ Core ./strings/basic.jl:680
┌ Warning: `repeat(x::CategoricalString, i::Integer)` is deprecated, use `repeat(String(x), i)` instead.
│   caller = ^ at basic.jl:680 [inlined]
└ @ Core ./strings/basic.jl:680
┌ Warning: `repeat(x::CategoricalString, i::Integer)` is deprecated, use `repeat(String(x), i)` instead.
│   caller = top-level scope at 08_string.jl:112
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:112
┌ Warning: `repeat(x::CategoricalString, i::Integer)` is deprecated, use `repeat(String(x), i)` instead.
│   caller = top-level scope at 08_string.jl:113
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:113
┌ Warning: `eachmatch(r::Regex, x::CategoricalString; overlap = false)` is deprecated, use `eachmatch(r, String(x), overlap = overlap)` instead.
│   caller = top-level scope at 08_string.jl:115
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:115
┌ Warning: `eachmatch(r::Regex, x::CategoricalString; overlap = false)` is deprecated, use `eachmatch(r, String(x), overlap = overlap)` instead.
│   caller = top-level scope at 08_string.jl:116
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:116
┌ Warning: `firstindex(x::CategoricalString)` is deprecated, use `firstindex(String(x))` instead.
│   caller = match(::Regex, ::CategoricalArrays.CategoricalString{UInt32}) at deprecated.jl:66
└ @ CategoricalArrays ./deprecated.jl:66
┌ Warning: `match(r::Regex, s::CategoricalString, idx::Integer = firstindex(s), add_opts::UInt32 = UInt32(0); kwargs...)` is deprecated, use `match(r, String(s), idx, add_opts; kwargs...)` instead.
│   caller = match(::Regex, ::CategoricalArrays.CategoricalString{UInt32}, ::Int64) at deprecated.jl:66
└ @ CategoricalArrays ./deprecated.jl:66
┌ Warning: `match(r::Regex, s::CategoricalString, idx::Integer = firstindex(s), add_opts::UInt32 = UInt32(0); kwargs...)` is deprecated, use `match(r, String(s), idx, add_opts; kwargs...)` instead.
│   caller = top-level scope at 08_string.jl:121
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:121
┌ Warning: `eachmatch(r::Regex, x::CategoricalString; overlap = false)` is deprecated, use `eachmatch(r, String(x), overlap = overlap)` instead.
│   caller = top-level scope at 08_string.jl:123
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:123
┌ Warning: `eachmatch(r::Regex, x::CategoricalString; overlap = false)` is deprecated, use `eachmatch(r, String(x), overlap = overlap)` instead.
│   caller = top-level scope at 08_string.jl:124
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:124
┌ Warning: `eachmatch(r::Regex, x::CategoricalString; overlap = false)` is deprecated, use `eachmatch(r, String(x), overlap = overlap)` instead.
│   caller = ip:0x0
└ @ Core :-1
┌ Warning: `lpad(x::CategoricalString, n::Integer, c::Union{AbstractChar, AbstractString} = ' ')` is deprecated, use `lpad(String(x), n)` instead.
│   caller = lpad(::CategoricalArrays.CategoricalString{UInt32}, ::Int64) at deprecated.jl:66
└ @ CategoricalArrays ./deprecated.jl:66
┌ Warning: `rpad(x::CategoricalString, n::Integer, c::Union{AbstractChar, AbstractString} = ' ')` is deprecated, use `rpad(String(x), n)` instead.
│   caller = rpad(::CategoricalArrays.CategoricalString{UInt32}, ::Int64) at deprecated.jl:66
└ @ CategoricalArrays ./deprecated.jl:66
┌ Warning: `firstindex(x::CategoricalString)` is deprecated, use `firstindex(String(x))` instead.
│   caller = findfirst(::String, ::CategoricalArrays.CategoricalString{UInt32}) at search.jl:104
└ @ Base ./strings/search.jl:104
┌ Warning: `lastindex(x::CategoricalString)` is deprecated, use `lastindex(String(x))` instead.
│   caller = _searchindex(::CategoricalArrays.CategoricalString{UInt32}, ::String, ::Int64) at search.jl:145
└ @ Base ./strings/search.jl:145
┌ Warning: `nextind(x::CategoricalString, i::Int)` is deprecated, use `nextind(String(x), i)` instead.
│   caller = _searchindex(::CategoricalArrays.CategoricalString{UInt32}, ::String, ::Int64) at search.jl:145
└ @ Base ./strings/search.jl:145
┌ Warning: `ncodeunits(x::CategoricalString)` is deprecated, use `ncodeunits(String(x))` instead.
│   caller = findnext(::Base.Fix2{typeof(isequal),Char}, ::CategoricalArrays.CategoricalString{UInt32}, ::Int64) at search.jl:128
└ @ Base ./strings/search.jl:128
┌ Warning: `isvalid(x::CategoricalString, i::Integer)` is deprecated, use `isvalid(String(x), i)` instead.
│   caller = findnext(::Base.Fix2{typeof(isequal),Char}, ::CategoricalArrays.CategoricalString{UInt32}, ::Int64) at search.jl:130
└ @ Base ./strings/search.jl:130
┌ Warning: `lastindex(x::CategoricalString)` is deprecated, use `lastindex(String(x))` instead.
│   caller = SubString at substring.jl:39 [inlined]
└ @ Core ./strings/substring.jl:39
┌ Warning: `ncodeunits(x::CategoricalString)` is deprecated, use `ncodeunits(String(x))` instead.
│   caller = checkbounds at basic.jl:188 [inlined]
└ @ Core ./strings/basic.jl:188
┌ Warning: `isvalid(x::CategoricalString, i::Integer)` is deprecated, use `isvalid(String(x), i)` instead.
│   caller = SubString{CategoricalArrays.CategoricalString{UInt32}}(::CategoricalArrays.CategoricalString{UInt32}, ::Int64, ::Int64) at substring.jl:31
└ @ Base ./strings/substring.jl:31
┌ Warning: `isvalid(x::CategoricalString, i::Integer)` is deprecated, use `isvalid(String(x), i)` instead.
│   caller = SubString{CategoricalArrays.CategoricalString{UInt32}}(::CategoricalArrays.CategoricalString{UInt32}, ::Int64, ::Int64) at substring.jl:32
└ @ Base ./strings/substring.jl:32
┌ Warning: `nextind(x::CategoricalString, i::Int)` is deprecated, use `nextind(String(x), i)` instead.
│   caller = SubString{CategoricalArrays.CategoricalString{UInt32}}(::CategoricalArrays.CategoricalString{UInt32}, ::Int64, ::Int64) at substring.jl:34
└ @ Base ./strings/substring.jl:34
┌ Warning: `isvalid(x::CategoricalString, i::Integer)` is deprecated, use `isvalid(String(x), i)` instead.
│   caller = isvalid at substring.jl:86 [inlined]
└ @ Core ./strings/substring.jl:86
┌ Warning: `iterate(x::CategoricalString, i::Int)` is deprecated, use `iterate(String(x), i)` instead.
│   caller = iterate at substring.jl:72 [inlined]
└ @ Core ./strings/substring.jl:72
┌ Warning: `iterate(x::CategoricalString, i::Int)` is deprecated, use `iterate(String(x), i)` instead.
│   caller = iterate at substring.jl:72 [inlined]
└ @ Core ./strings/substring.jl:72
┌ Warning: `nextind(x::CategoricalString, i::Int)` is deprecated, use `nextind(String(x), i)` instead.
│   caller = _searchindex(::CategoricalArrays.CategoricalString{UInt32}, ::String, ::Int64) at search.jl:152
└ @ Base ./strings/search.jl:152
┌ Warning: `lastindex(x::CategoricalString)` is deprecated, use `lastindex(String(x))` instead.
│   caller = SubString at substring.jl:39 [inlined]
└ @ Core ./strings/substring.jl:39
┌ Warning: `ncodeunits(x::CategoricalString)` is deprecated, use `ncodeunits(String(x))` instead.
│   caller = findnext(::Base.Fix2{typeof(==),Char}, ::CategoricalArrays.CategoricalString{UInt32}, ::Int64) at search.jl:128
└ @ Base ./strings/search.jl:128
┌ Warning: `isvalid(x::CategoricalString, i::Integer)` is deprecated, use `isvalid(String(x), i)` instead.
│   caller = findnext(::Base.Fix2{typeof(==),Char}, ::CategoricalArrays.CategoricalString{UInt32}, ::Int64) at search.jl:130
└ @ Base ./strings/search.jl:130
┌ Warning: `lastindex(x::CategoricalString)` is deprecated, use `lastindex(String(x))` instead.
│   caller = SubString at substring.jl:39 [inlined]
└ @ Core ./strings/substring.jl:39
┌ Warning: `iterate(x::CategoricalString, i::Int)` is deprecated, use `iterate(String(x), i)` instead.
│   caller = iterate at substring.jl:72 [inlined]
└ @ Core ./strings/substring.jl:72
┌ Warning: `iterate(x::CategoricalString, i::Int)` is deprecated, use `iterate(String(x), i)` instead.
│   caller = iterate at substring.jl:72 [inlined]
└ @ Core ./strings/substring.jl:72
┌ Warning: `lastindex(x::CategoricalString)` is deprecated, use `lastindex(String(x))` instead.
│   caller = findlast(::String, ::CategoricalArrays.CategoricalString{UInt32}) at search.jl:312
└ @ Base ./strings/search.jl:312
┌ Warning: `ncodeunits(x::CategoricalString)` is deprecated, use `ncodeunits(String(x))` instead.
│   caller = findprev(::Function, ::CategoricalArrays.CategoricalString{UInt32}, ::Int64) at search.jl:339
└ @ Base ./strings/search.jl:339
┌ Warning: `reverse(x::CategoricalString)` is deprecated, use `reverse(String(x))` instead.
│   caller = findprev(::Function, ::CategoricalArrays.CategoricalString{UInt32}, ::Int64) at search.jl:345
└ @ Base ./strings/search.jl:345
┌ Warning: `ncodeunits(x::CategoricalString)` is deprecated, use `ncodeunits(String(x))` instead.
│   caller = reverseind at basic.jl:650 [inlined]
└ @ Core ./strings/basic.jl:650
┌ Warning: `ncodeunits(x::CategoricalString)` is deprecated, use `ncodeunits(String(x))` instead.
│   caller = thisind(::CategoricalArrays.CategoricalString{UInt32}, ::Int64) at basic.jl:401
└ @ Base ./strings/basic.jl:401
┌ Warning: `isvalid(x::CategoricalString, i::Integer)` is deprecated, use `isvalid(String(x), i)` instead.
│   caller = thisind(::CategoricalArrays.CategoricalString{UInt32}, ::Int64) at basic.jl:404
└ @ Base ./strings/basic.jl:404
┌ Warning: `prevind(x::CategoricalString, i::Int)` is deprecated, use `prevind(String(x), i)` instead.
│   caller = _rsearchindex(::CategoricalArrays.CategoricalString{UInt32}, ::String, ::Int64) at search.jl:361
└ @ Base ./strings/search.jl:361
┌ Warning: `getindex(x::CategoricalString, i::Int)` is deprecated, use `getindex(String(x), i)` instead.
│   caller = getindex at substring.jl:80 [inlined]
└ @ Core ./strings/substring.jl:80
┌ Warning: `nextind(x::CategoricalString, i::Int)` is deprecated, use `nextind(String(x), i)` instead.
│   caller = _rsearchindex(::CategoricalArrays.CategoricalString{UInt32}, ::String, ::Int64) at search.jl:368
└ @ Base ./strings/search.jl:368
┌ Warning: `lastindex(x::CategoricalString)` is deprecated, use `lastindex(String(x))` instead.
│   caller = last at basic.jl:539 [inlined]
└ @ Core ./strings/basic.jl:539
┌ Warning: `occursin(x::AbstractString, y::CategoricalString)` is deprecated, use `occursin(x, String(y))` instead.
│   caller = eval_test(::Expr, ::Expr, ::LineNumberNode, ::Bool) at Test.jl:258
└ @ Test /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:258
┌ Warning: `startswith(x::CategoricalString, y::AbstractString)` is deprecated, use `startswith(String(x), y)` instead.
│   caller = eval_test(::Expr, ::Expr, ::LineNumberNode, ::Bool) at Test.jl:258
└ @ Test /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:258
┌ Warning: `endswith(x::CategoricalString, y::AbstractString)` is deprecated, use `endswith(String(x), y)` instead.
│   caller = eval_test(::Expr, ::Expr, ::LineNumberNode, ::Bool) at Test.jl:258
└ @ Test /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:258
┌ Warning: `reverse(x::CategoricalString)` is deprecated, use `reverse(String(x))` instead.
│   caller = top-level scope at 08_string.jl:160
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:160
┌ Warning: `reverse(x::CategoricalString)` is deprecated, use `reverse(String(x))` instead.
│   caller = top-level scope at 08_string.jl:161
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:161
┌ Warning: `split(x::CategoricalString; kwargs...)` is deprecated, use `split(String(x); kwargs...)` instead.
│   caller = top-level scope at 08_string.jl:167
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:167
┌ Warning: `lastindex(x::CategoricalString)` is deprecated, use `lastindex(String(x))` instead.
│   caller = _split(::CategoricalArrays.CategoricalString{UInt32}, ::String, ::Int64, ::Bool, ::Array{SubString{CategoricalArrays.CategoricalString{UInt32}},1}) at util.jl:326
└ @ Base ./strings/util.jl:326
┌ Warning: `firstindex(x::CategoricalString)` is deprecated, use `firstindex(String(x))` instead.
│   caller = findfirst at search.jl:104 [inlined]
└ @ Core ./strings/search.jl:104
┌ Warning: `nextind(x::CategoricalString, i::Int)` is deprecated, use `nextind(String(x), i)` instead.
│   caller = _split(::CategoricalArrays.CategoricalString{UInt32}, ::String, ::Int64, ::Bool, ::Array{SubString{CategoricalArrays.CategoricalString{UInt32}},1}) at util.jl:329
└ @ Base ./strings/util.jl:329
┌ Warning: `lastindex(x::CategoricalString)` is deprecated, use `lastindex(String(x))` instead.
│   caller = SubString at substring.jl:39 [inlined]
└ @ Core ./strings/substring.jl:39
┌ Warning: `split(x::CategoricalString; kwargs...)` is deprecated, use `split(String(x); kwargs...)` instead.
│   caller = top-level scope at 08_string.jl:169
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:169
┌ Warning: `prevind(x::CategoricalString, i::Int)` is deprecated, use `prevind(String(x), i)` instead.
│   caller = _split(::CategoricalArrays.CategoricalString{UInt32}, ::String, ::Int64, ::Bool, ::Array{SubString{CategoricalArrays.CategoricalString{UInt32}},1}) at util.jl:333
└ @ Base ./strings/util.jl:333
┌ Warning: `nextind(x::CategoricalString, i::Int)` is deprecated, use `nextind(String(x), i)` instead.
│   caller = _split(::CategoricalArrays.CategoricalString{UInt32}, ::String, ::Int64, ::Bool, ::Array{SubString{CategoricalArrays.CategoricalString{UInt32}},1}) at util.jl:340
└ @ Base ./strings/util.jl:340
┌ Warning: `iterate(x::CategoricalString, i::Int)` is deprecated, use `iterate(String(x), i)` instead.
│   caller = iterate at substring.jl:72 [inlined]
└ @ Core ./strings/substring.jl:72
┌ Warning: `iterate(x::CategoricalString, i::Int)` is deprecated, use `iterate(String(x), i)` instead.
│   caller = iterate at substring.jl:72 [inlined]
└ @ Core ./strings/substring.jl:72
┌ Warning: `lastindex(x::CategoricalString)` is deprecated, use `lastindex(String(x))` instead.
│   caller = _rsplit(::CategoricalArrays.CategoricalString{UInt32}, ::String, ::Int64, ::Bool, ::Array{SubString{CategoricalArrays.CategoricalString{UInt32}},1}) at util.jl:399
└ @ Base ./strings/util.jl:399
┌ Warning: `lastindex(x::CategoricalString)` is deprecated, use `lastindex(String(x))` instead.
│   caller = findlast at search.jl:312 [inlined]
└ @ Core ./strings/search.jl:312
┌ Warning: `isvalid(x::CategoricalString, i::Integer)` is deprecated, use `isvalid(String(x), i)` instead.
│   caller = isvalid at substring.jl:86 [inlined]
└ @ Core ./strings/substring.jl:86
┌ Warning: `isvalid(x::CategoricalString, i::Integer)` is deprecated, use `isvalid(String(x), i)` instead.
│   caller = isvalid at substring.jl:86 [inlined]
└ @ Core ./strings/substring.jl:86
┌ Warning: `isvalid(x::CategoricalString, i::Integer)` is deprecated, use `isvalid(String(x), i)` instead.
│   caller = isvalid at substring.jl:86 [inlined]
└ @ Core ./strings/substring.jl:86
┌ Warning: `getindex(x::CategoricalString, i::Int)` is deprecated, use `getindex(String(x), i)` instead.
│   caller = getindex at substring.jl:80 [inlined]
└ @ Core ./strings/substring.jl:80
┌ Warning: `nextind(x::CategoricalString, i::Int)` is deprecated, use `nextind(String(x), i)` instead.
│   caller = _rsplit(::CategoricalArrays.CategoricalString{UInt32}, ::String, ::Int64, ::Bool, ::Array{SubString{CategoricalArrays.CategoricalString{UInt32}},1}) at util.jl:403
└ @ Base ./strings/util.jl:403
┌ Warning: `prevind(x::CategoricalString, i::Int)` is deprecated, use `prevind(String(x), i)` instead.
│   caller = _rsplit(::CategoricalArrays.CategoricalString{UInt32}, ::String, ::Int64, ::Bool, ::Array{SubString{CategoricalArrays.CategoricalString{UInt32}},1}) at util.jl:404
└ @ Base ./strings/util.jl:404
┌ Warning: `strip(x::CategoricalString)` is deprecated, use `strip(String(x))` instead.
│   caller = top-level scope at 08_string.jl:175
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:175
┌ Warning: `strip(x::CategoricalString)` is deprecated, use `strip(String(x))` instead.
│   caller = top-level scope at 08_string.jl:176
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:176
┌ Warning: `lastindex(x::CategoricalString)` is deprecated, use `lastindex(String(x))` instead.
│   caller = iterate at basic.jl:684 [inlined]
└ @ Core ./strings/basic.jl:684
┌ Warning: `firstindex(x::CategoricalString)` is deprecated, use `firstindex(String(x))` instead.
│   caller = iterate at basic.jl:684 [inlined]
└ @ Core ./strings/basic.jl:684
┌ Warning: `prevind(x::CategoricalString, i::Int)` is deprecated, use `prevind(String(x), i)` instead.
│   caller = iterate at basic.jl:684 [inlined]
└ @ Core ./strings/basic.jl:684
┌ Warning: `lastindex(x::CategoricalString)` is deprecated, use `lastindex(String(x))` instead.
│   caller = iterate at basic.jl:683 [inlined]
└ @ Core ./strings/basic.jl:683
┌ Warning: `firstindex(x::CategoricalString)` is deprecated, use `firstindex(String(x))` instead.
│   caller = iterate at basic.jl:683 [inlined]
└ @ Core ./strings/basic.jl:683
┌ Warning: `getindex(x::CategoricalString, i::Int)` is deprecated, use `getindex(String(x), i)` instead.
│   caller = iterate at basic.jl:683 [inlined]
└ @ Core ./strings/basic.jl:683
┌ Warning: `prevind(x::CategoricalString, i::Int)` is deprecated, use `prevind(String(x), i)` instead.
│   caller = iterate at basic.jl:683 [inlined]
└ @ Core ./strings/basic.jl:683
┌ Warning: `firstindex(x::CategoricalString)` is deprecated, use `firstindex(String(x))` instead.
│   caller = iterate at basic.jl:684 [inlined]
└ @ Core ./strings/basic.jl:684
┌ Warning: `prevind(x::CategoricalString, i::Int)` is deprecated, use `prevind(String(x), i)` instead.
│   caller = iterate at basic.jl:684 [inlined]
└ @ Core ./strings/basic.jl:684
┌ Warning: `firstindex(x::CategoricalString)` is deprecated, use `firstindex(String(x))` instead.
│   caller = iterate at basic.jl:683 [inlined]
└ @ Core ./strings/basic.jl:683
┌ Warning: `getindex(x::CategoricalString, i::Int)` is deprecated, use `getindex(String(x), i)` instead.
│   caller = iterate at basic.jl:683 [inlined]
└ @ Core ./strings/basic.jl:683
┌ Warning: `prevind(x::CategoricalString, i::Int)` is deprecated, use `prevind(String(x), i)` instead.
│   caller = iterate at basic.jl:683 [inlined]
└ @ Core ./strings/basic.jl:683
┌ Warning: `isvalid(x::CategoricalString, i::Integer)` is deprecated, use `isvalid(String(x), i)` instead.
│   caller = isvalid at substring.jl:86 [inlined]
└ @ Core ./strings/substring.jl:86
┌ Warning: `iterate(x::CategoricalString, i::Int)` is deprecated, use `iterate(String(x), i)` instead.
│   caller = iterate at substring.jl:72 [inlined]
└ @ Core ./strings/substring.jl:72
┌ Warning: `iterate(x::CategoricalString, i::Int)` is deprecated, use `iterate(String(x), i)` instead.
│   caller = iterate at substring.jl:72 [inlined]
└ @ Core ./strings/substring.jl:72
┌ Warning: `lstrip(x::CategoricalString)` is deprecated, use `lstrip(String(x))` instead.
│   caller = top-level scope at 08_string.jl:179
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:179
┌ Warning: `lstrip(x::CategoricalString)` is deprecated, use `lstrip(String(x))` instead.
│   caller = top-level scope at 08_string.jl:180
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:180
┌ Warning: `lastindex(x::CategoricalString)` is deprecated, use `lastindex(String(x))` instead.
│   caller = lstrip(::Base.Fix2{typeof(in),Char}, ::CategoricalArrays.CategoricalString{UInt32}) at util.jl:158
└ @ Base ./strings/util.jl:158
┌ Warning: `firstindex(x::CategoricalString)` is deprecated, use `firstindex(String(x))` instead.
│   caller = iterate at basic.jl:540 [inlined]
└ @ Core ./strings/basic.jl:540
┌ Warning: `ncodeunits(x::CategoricalString)` is deprecated, use `ncodeunits(String(x))` instead.
│   caller = iterate at basic.jl:540 [inlined]
└ @ Core ./strings/basic.jl:540
┌ Warning: `nextind(x::CategoricalString, i::Int)` is deprecated, use `nextind(String(x), i)` instead.
│   caller = iterate at basic.jl:540 [inlined]
└ @ Core ./strings/basic.jl:540
┌ Warning: `iterate(x::CategoricalString)` is deprecated, use `iterate(String(x))` instead.
│   caller = _zip_iterate_some at iterators.jl:352 [inlined]
└ @ Core ./iterators.jl:352
┌ Warning: `rstrip(x::CategoricalString)` is deprecated, use `rstrip(String(x))` instead.
│   caller = top-level scope at 08_string.jl:183
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:183
┌ Warning: `rstrip(x::CategoricalString)` is deprecated, use `rstrip(String(x))` instead.
│   caller = top-level scope at 08_string.jl:184
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:184
┌ Warning: `uppercase(x::CategoricalString)` is deprecated, use `uppercase(String(x))` instead.
│   caller = top-level scope at 08_string.jl:187
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:187
┌ Warning: `uppercase(x::CategoricalString)` is deprecated, use `uppercase(String(x))` instead.
│   caller = top-level scope at 08_string.jl:188
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:188
┌ Warning: `lowercase(x::CategoricalString)` is deprecated, use `lowercase(String(x))` instead.
│   caller = top-level scope at 08_string.jl:190
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:190
┌ Warning: `lowercase(x::CategoricalString)` is deprecated, use `lowercase(String(x))` instead.
│   caller = top-level scope at 08_string.jl:191
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:191
┌ Warning: `titlecase(x::CategoricalString)` is deprecated, use `titlecase(String(x))` instead.
│   caller = top-level scope at 08_string.jl:193
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:193
┌ Warning: `titlecase(x::CategoricalString)` is deprecated, use `titlecase(String(x))` instead.
│   caller = top-level scope at 08_string.jl:194
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:194
┌ Warning: `uppercasefirst(x::CategoricalString)` is deprecated, use `uppercasefirst(String(x))` instead.
│   caller = top-level scope at 08_string.jl:196
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:196
┌ Warning: `uppercasefirst(x::CategoricalString)` is deprecated, use `uppercasefirst(String(x))` instead.
│   caller = top-level scope at 08_string.jl:197
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:197
┌ Warning: `lowercasefirst(x::CategoricalString)` is deprecated, use `lowercasefirst(String(x))` instead.
│   caller = top-level scope at 08_string.jl:199
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:199
┌ Warning: `lowercasefirst(x::CategoricalString)` is deprecated, use `lowercasefirst(String(x))` instead.
│   caller = top-level scope at 08_string.jl:200
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:200
┌ Warning: `chop(x::CategoricalString; kwargs...)` is deprecated, use `chop(String(x); kwargs...)` instead.
│   caller = top-level scope at 08_string.jl:206
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:206
┌ Warning: `chop(x::CategoricalString; kwargs...)` is deprecated, use `chop(String(x); kwargs...)` instead.
│   caller = top-level scope at 08_string.jl:208
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:208
┌ Warning: `chomp(x::CategoricalString)` is deprecated, use `chomp(String(x))` instead.
│   caller = top-level scope at 08_string.jl:210
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:210
┌ Warning: `chomp(x::CategoricalString)` is deprecated, use `chomp(String(x))` instead.
│   caller = top-level scope at 08_string.jl:211
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:211
┌ Warning: `textwidth(x::CategoricalString)` is deprecated, use `textwidth(String(x))` instead.
│   caller = top-level scope at 08_string.jl:213
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:213
┌ Warning: `textwidth(x::CategoricalString)` is deprecated, use `textwidth(String(x))` instead.
│   caller = top-level scope at 08_string.jl:214
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:214
┌ Warning: `isascii(x::CategoricalString)` is deprecated, use `isascii(String(x))` instead.
│   caller = top-level scope at 08_string.jl:216
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:216
┌ Warning: `isascii(x::CategoricalString)` is deprecated, use `isascii(String(x))` instead.
│   caller = top-level scope at 08_string.jl:217
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:217
┌ Warning: `escape_string(x::CategoricalString)` is deprecated, use `escape_string(String(x))` instead.
│   caller = top-level scope at 08_string.jl:219
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:219
┌ Warning: `escape_string(x::CategoricalString)` is deprecated, use `escape_string(String(x))` instead.
│   caller = top-level scope at 08_string.jl:220
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:220
┌ Warning: `collect(x::CategoricalString)` is deprecated, use `collect(String(x))` instead.
│   caller = top-level scope at 08_string.jl:222
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:222
┌ Warning: `collect(x::CategoricalString)` is deprecated, use `collect(String(x))` instead.
│   caller = top-level scope at 08_string.jl:223
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/test/08_string.jl:223
Test Summary: | Pass  Total
08_string.jl  |  151    151
Test Summary: | Pass  Total
09_hash.jl    |   54     54
Test Summary: | Pass  Total
10_isless.jl  |  429    429
Test Summary: | Pass  Total
11_array.jl   | 9054   9054
Test Summary:      |  Pass  Total
12_missingarray.jl | 12672  12672
┌ Warning: adding new levels to ordered CategoricalArray destination will throw an error in the future
│   caller = copy! at array.jl:426 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/src/array.jl:426
┌ Warning: adding new levels to ordered CategoricalArray destination will throw an error in the future
│   caller = copyto!(::CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Union{}}, ::CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Union{}}) at array.jl:415
└ @ CategoricalArrays ~/.julia/packages/CategoricalArrays/dmrjI/src/array.jl:415
┌ Warning: adding new levels to ordered CategoricalArray destination will throw an error in the future
│   caller = copyto!(::CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Union{}}, ::Int64, ::CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Union{}}, ::Int64) at abstractarray.jl:829
└ @ Base ./abstractarray.jl:829
┌ Warning: adding new levels to ordered CategoricalArray destination will throw an error in the future
│   caller = copy! at array.jl:426 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/src/array.jl:426
┌ Warning: adding new levels to ordered CategoricalArray destination will throw an error in the future
│   caller = copyto!(::SubArray{CategoricalArrays.CategoricalString{UInt32},1,CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Union{}},Tuple{UnitRange{Int64}},true}, ::CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Union{}}) at array.jl:415
└ @ CategoricalArrays ~/.julia/packages/CategoricalArrays/dmrjI/src/array.jl:415
┌ Warning: adding new levels to ordered CategoricalArray destination will throw an error in the future
│   caller = copy! at array.jl:426 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/dmrjI/src/array.jl:426
┌ Warning: adding new levels to ordered CategoricalArray destination will throw an error in the future
│   caller = copyto!(::CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}, ::CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}) at array.jl:415
└ @ CategoricalArrays ~/.julia/packages/CategoricalArrays/dmrjI/src/array.jl:415
┌ Warning: adding new levels to ordered CategoricalArray destination will throw an error in the future
│   caller = copyto!(::CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}, ::Int64, ::CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}, ::Int64) at abstractarray.jl:829
└ @ Base ./abstractarray.jl:829
Test Summary:     |  Pass  Total
13_arraycommon.jl | 22825  22825
Test Summary: | Pass  Total
14_view.jl    |  158    158
Test Summary: | Pass  Total
15_extras.jl  |   99     99
Test Summary: | Pass  Total
16_recode.jl  |  808    808
   Testing CategoricalArrays tests passed 
   Testing Clustering
  Updating `/tmp/jl_4SaGKI/Project.toml`
  [944b1d66] + CodecZlib v0.6.0
  Updating `/tmp/jl_4SaGKI/Manifest.toml`
  [b99e7846] + BinaryProvider v0.5.8
  [944b1d66] + CodecZlib v0.6.0
  [3bb67fe8] + TranscodingStreams v0.9.5
  [ea8e919c] + SHA 
Running sandbox
Status `/tmp/jl_4SaGKI/Project.toml`
  [aaaa29a8] Clustering v0.13.3
  [944b1d66] CodecZlib v0.6.0
  [b4f34e82] Distances v0.8.2
  [b8a86587] NearestNeighbors v0.4.4
  [2913bbd2] StatsBase v0.32.0
  [37e2e46d] LinearAlgebra 
  [de0858da] Printf 
  [9a3f8284] Random 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [8dfed614] Test 
Runing tests:
* seeding.jl ...
Test Summary: | Pass  Total
seeding       |   64     64
* kmeans.jl ...
  Iters               objv        objv-change | affected 
-------------------------------------------------------------
      0       1.470563e+00
      1       7.352817e-01      -7.352817e-01 |        0
      2       7.352817e-01       0.000000e+00 |        0
K-means converged with 2 iterations (objv = 0.7352816593329847)
K-means converged with 2 iterations (objv = 0.09164881001248792)
┌ Warning: The clustering cost increased at iteration #1
└ @ Clustering ~/.julia/packages/Clustering/Dlx92/src/kmeans.jl:179
Test Summary:      | Pass  Total
kmeans() (k-means) |   87     87
* kmedoids.jl ...
  Iters               objv        objv-change
-----------------------------------------------------
      0       1.589132e+00
      1       1.623600e+00       3.446832e-02
      2       1.623600e+00       0.000000e+00
K-medoids converged with 2 iterations (objv = 1.6236002870003423)
K-medoids converged with 2 iterations (objv = 1.6236002870003423)
Test Summary:          | Pass  Total
kmedoids() (k-medoids) |   26     26
* affprop.jl ...
  Iters  objv-change | exemplars 
-----------------------------------------------------
      1   1.7243e+00 |        1
      2   1.1599e+00 |        1
      3   1.0111e+00 |        1
      4   8.2884e-01 |        1
      5   6.2996e-01 |        1
      6   4.4970e-01 |        1
      7   3.0568e-01 |        1
      8   1.9999e-01 |        1
      9   1.2694e-01 |        1
     10   7.8624e-02 |        1
Affinity propagation converged with 10 iterations: 1 exemplars.
Affinity propagation converged with 9 iterations: 1 exemplars.
Test Summary:                         | Pass  Total
affinityprop() (affinity propagation) |   78     78
* dbscan.jl ...
Test Summary:                | Pass  Total
dbscan() (DBSCAN clustering) |   19     19
* fuzzycmeans.jl ...
  Iters      center-change
----------------------------
      1       5.244585e-01
      2       1.013155e-01
      3       2.621402e-01
      4       2.313798e-01
      5       3.691017e-02
Fuzzy C-means converged with 5 iterations (δ = 0.036910170483319474)
Fuzzy C-means converged with 6 iterations (δ = 0.052544440650040276)
Test Summary:  | Pass  Total
fuzzy_cmeans() |   36     36
* counts.jl ...
Test Summary:                 | Pass  Total
counts() (contingency matrix) |   22     22
* silhouette.jl ...
Test Summary: | Pass  Broken  Total
silhouettes() |   11       1     12
* varinfo.jl ...
Test Summary:                       | Pass  Total
varinfo() (variational information) |    7      7
* randindex.jl ...
Test Summary:            | Pass  Total
randindex() (Rand index) |   13     13
* hclust.jl ...
Test Summary:                      | Pass  Total
hclust() (hierarchical clustering) | 6665   6665
* mcl.jl ...
[ Info: Starting MCL iterations...
┌ Info: MCL iter. #0: rel.Δ=
└   rel_delta = 0.0
[ Info: MCL converged after 0 iteration(s)
[ Info: Generating MCL clusters...
[ Info: Starting MCL iterations...
[ Info: MCL converged after 0 iteration(s)
[ Info: Generating MCL clusters...
Test Summary: | Pass  Broken  Total
MCL           |   33       1     34
* vmeasure.jl ...
Test Summary: | Pass  Broken  Total
V-measure     |    8       1      9
* mutualinfo.jl ...
Test Summary:                     | Pass  Total
mutualinfo() (mutual information) |    4      4
   Testing Clustering tests passed 
   Testing CSV
  Updating `/tmp/jl_FMlHuP/Project.toml`
  [944b1d66] + CodecZlib v0.6.0
  Updating `/tmp/jl_FMlHuP/Manifest.toml`
  [b99e7846] + BinaryProvider v0.5.8
  [944b1d66] + CodecZlib v0.6.0
  [3bb67fe8] + TranscodingStreams v0.9.5
Running sandbox
Status `/tmp/jl_FMlHuP/Project.toml`
  [336ed68f] CSV v0.5.22
  [324d7699] CategoricalArrays v0.7.7
  [944b1d66] CodecZlib v0.6.0
  [a93c6f00] DataFrames v0.20.0
  [48062228] FilePathsBase v0.7.0
  [69de0a69] Parsers v0.3.10
  [2dfb63ee] PooledArrays v0.5.3
  [bd369af6] Tables v0.2.11
  [ea10d353] WeakRefStrings v0.6.2
  [ade2ca70] Dates 
  [a63ad114] Mmap 
  [9a3f8284] Random 
  [8dfed614] Test 
  [4ec0a83e] Unicode 
thread = 1 warning: only found 7 / 8 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: error parsing Int64 on row = 1, col = 1: "abc
", error=INVALID: SENTINEL | NEWLINE | EOF | INVALID_DELIMITER 
testing test_utf8_with_BOM.csv
testing test_utf8.csv
testing test_windows.csv
testing test_single_column.csv
testing test_empty_file.csv
testing test_empty_file_newlines.csv
testing test_simple_quoted.csv
testing test_quoted_delim_and_newline.csv
testing test_quoted_numbers.csv
testing test_crlf_line_endings.csv
testing test_newline_line_endings.csv
testing test_mac_line_endings.csv
testing test_no_header.csv
testing test_2_footer_rows.csv
testing test_footer_missing.csv
testing test_footer_missing.csv
testing test_dates.csv
testing test_excel_date_formats.csv
testing test_datetimes.csv
testing test_missing_value_NULL.csv
testing test_missing_value_NULL.csv
testing test_missing_value.csv
testing test_header_range.csv
testing test_header_int_list.csv
testing test_basic.csv
testing test_basic_pipe.csv
testing test_tab_null_empty.txt
testing test_tab_null_string.txt
testing IOBuffer(data=UInt8[...], readable=true, writable=false, seekable=true, append=false, size=5, maxsize=Inf, ptr=1, mark=-1)
testing IOBuffer(data=UInt8[...], readable=true, writable=false, seekable=true, append=false, size=0, maxsize=Inf, ptr=1, mark=-1)
testing dash_as_null.csv
testing plus_as_null.csv
testing comma_decimal.csv
testing double_quote_quotechar_and_escapechar.csv
testing census.txt
testing bools.csv
testing attenu.csv
testing test_null_only_column.csv
testing IOBuffer(data=UInt8[...], readable=true, writable=false, seekable=true, append=false, size=20, maxsize=Inf, ptr=1, mark=-1)
testing categorical.csv
testing categorical.csv
testing categorical.csv
testing categorical.csv
testing baseball.csv
testing FL_insurance_sample.csv
testing FL_insurance_sample.csv
testing SacramentocrimeJanuary2006.csv
testing Sacramentorealestatetransactions.csv
testing SalesJan2009.csv
testing stocks.csv
testing TechCrunchcontinentalUSA.csv
testing Fielding.csv
testing latest (1).csv
testing IOBuffer(data=UInt8[...], readable=true, writable=false, seekable=true, append=false, size=16, maxsize=Inf, ptr=1, mark=-1)
testing issue_198.csv
testing issue_198_part2.csv
thread = 1 warning: parsed expected 3 columns, but didn't reach end of line on data row: 2. Ignoring any extra columns on this row
thread = 1 warning: parsed expected 3 columns, but didn't reach end of line on data row: 3. Ignoring any extra columns on this row
thread = 1 warning: parsed expected 3 columns, but didn't reach end of line on data row: 2. Ignoring any extra columns on this row
thread = 1 warning: parsed expected 3 columns, but didn't reach end of line on data row: 3. Ignoring any extra columns on this row
testing issue_207.csv
thread = 1 warning: only found 5 / 6 columns on data row: 2. Filling remaining columns with `missing`
thread = 1 warning: only found 5 / 6 columns on data row: 2. Filling remaining columns with `missing`
testing issue_120.csv
testing pandas_zeros.csv
testing transposed.csv
testing transposed_1row.csv
testing transposed_emtpy.csv
testing transposed_extra_newline.csv
testing transposed_noheader.csv
testing transposed_noheader.csv
testing test_utf8.csv
testing test_utf8.csv
testing test_multiple_missing.csv
testing test_openclosequotes.csv
testing test_truestrings.csv
testing test_truestrings.csv
testing test_string_delimiters.csv
testing IOBuffer(data=UInt8[...], readable=true, writable=false, seekable=true, append=false, size=20, maxsize=Inf, ptr=1, mark=-1)
testing test_basic.csv
testing test_basic.csv
testing test_truestrings.csv
testing test_repeated_delimiters.csv
testing test_comments1.csv
testing test_comments_multiple.csv
testing test_comments_multichar.csv
testing test_not_enough_columns.csv
thread = 1 warning: only found 3 / 5 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: only found 3 / 5 columns on data row: 2. Filling remaining columns with `missing`
thread = 1 warning: only found 3 / 5 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: only found 3 / 5 columns on data row: 2. Filling remaining columns with `missing`
testing test_not_enough_columns2.csv
thread = 1 warning: only found 3 / 5 columns on data row: 2. Filling remaining columns with `missing`
thread = 1 warning: only found 3 / 5 columns on data row: 2. Filling remaining columns with `missing`
testing test_correct_trailing_missings.csv
thread = 1 warning: only found 4 / 5 columns on data row: 2. Filling remaining columns with `missing`
thread = 1 warning: only found 4 / 5 columns on data row: 2. Filling remaining columns with `missing`
testing norwegian_data.csv
testing test_duplicate_columnnames.csv
testing test_bad_datetime.csv
testing test_types.csv
thread = 1 warning: only found 7 / 8 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: only found 7 / 8 columns on data row: 1. Filling remaining columns with `missing`
testing test_issue_326.wsv
testing test_missing_last_field.csv
thread = 1 warning: only found 2 / 3 columns on data row: 2. Filling remaining columns with `missing`
thread = 1 warning: only found 2 / 3 columns on data row: 2. Filling remaining columns with `missing`
testing test_delim.tsv
testing test_delim.wsv
testing test_comment_first_row.csv
testing test_comment_first_row.csv
testing test_repeated_delim_371.csv
testing test_file_issue_154.csv
testing IOBuffer(data=UInt8[...], readable=true, writable=false, seekable=true, append=false, size=16, maxsize=Inf, ptr=1, mark=-1)
thread = 1 warning: only found 2 / 3 columns on data row: 2. Filling remaining columns with `missing`
thread = 1 warning: only found 2 / 3 columns on data row: 2. Filling remaining columns with `missing`
testing IOBuffer(data=UInt8[...], readable=true, writable=false, seekable=true, append=false, size=19, maxsize=Inf, ptr=1, mark=-1)
thread = 1 warning: only found 1 / 3 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: only found 1 / 3 columns on data row: 2. Filling remaining columns with `missing`
thread = 1 warning: only found 1 / 3 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: only found 1 / 3 columns on data row: 2. Filling remaining columns with `missing`
testing IOBuffer(data=UInt8[...], readable=true, writable=false, seekable=true, append=false, size=19, maxsize=Inf, ptr=1, mark=-1)
thread = 1 warning: only found 1 / 3 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: only found 1 / 3 columns on data row: 2. Filling remaining columns with `missing`
thread = 1 warning: only found 1 / 3 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: only found 1 / 3 columns on data row: 2. Filling remaining columns with `missing`
testing IOBuffer(data=UInt8[...], readable=true, writable=false, seekable=true, append=false, size=43, maxsize=Inf, ptr=1, mark=-1)
thread = 1 warning: parsed expected 5 columns, but didn't reach end of line on data row: 1. Ignoring any extra columns on this row
thread = 1 warning: parsed expected 5 columns, but didn't reach end of line on data row: 2. Ignoring any extra columns on this row
thread = 1 warning: parsed expected 5 columns, but didn't reach end of line on data row: 3. Ignoring any extra columns on this row
thread = 1 warning: parsed expected 5 columns, but didn't reach end of line on data row: 1. Ignoring any extra columns on this row
thread = 1 warning: parsed expected 5 columns, but didn't reach end of line on data row: 2. Ignoring any extra columns on this row
thread = 1 warning: parsed expected 5 columns, but didn't reach end of line on data row: 3. Ignoring any extra columns on this row
testing IOBuffer(data=UInt8[...], readable=true, writable=false, seekable=true, append=false, size=17, maxsize=Inf, ptr=1, mark=-1)
testing heat_flux.dat
testing log001_vehicle_status_flags_0.txt
testing fecal_samples.csv
header is: 1, datarow computed as: 2
headerpos = 4, datapos = 481
estimated rows: 756
detected delimiter: ","
column names detected: [:SampleID, :Mother_Child, :SubjectID, :MaternalID, :TimePoint, :Fecal_EtOH, :CollectionRep, :DOC, :RAInitials_DOC, :DOF, :RAInitials_DOF, :Date_Brought_In, :RAInitials_Brought, :Date_Shipped, :RAInitials_Shipped, :Date_Aliquoted, :Number_Replicates, :RAInitials_Aliquot, :StorageBox, :DOE, :Extract_number, :AliquotRep, :DNABox, :KitUsed, :RAInitials_Extract, :DNAConc, :DOM, :Mgx_processed, :Mgx_batch, :DO16S, :_16S_processed, :_16S_batch, :_16S_plate, :Notes, :Discrepancies, :Batch_1_Mapping, :Mgx_batch_Mapping, :_16S_batch_Mapping, :Mother_Child_Dyads]
byte position of data computed at: 481
thread = 1 warning: only found 38 / 39 columns on data row: 1079. Filling remaining columns with `missing`
header is: 1, datarow computed as: 2
headerpos = 4, datapos = 481
estimated rows: 756
detected delimiter: ","
column names detected: [:SampleID, :Mother_Child, :SubjectID, :MaternalID, :TimePoint, :Fecal_EtOH, :CollectionRep, :DOC, :RAInitials_DOC, :DOF, :RAInitials_DOF, :Date_Brought_In, :RAInitials_Brought, :Date_Shipped, :RAInitials_Shipped, :Date_Aliquoted, :Number_Replicates, :RAInitials_Aliquot, :StorageBox, :DOE, :Extract_number, :AliquotRep, :DNABox, :KitUsed, :RAInitials_Extract, :DNAConc, :DOM, :Mgx_processed, :Mgx_batch, :DO16S, :_16S_processed, :_16S_batch, :_16S_plate, :Notes, :Discrepancies, :Batch_1_Mapping, :Mgx_batch_Mapping, :_16S_batch_Mapping, :Mother_Child_Dyads]
byte position of data computed at: 481
computed typecodes are: Int8[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
initial byte positions before adjusting for start of rows: [481, 100610, 201701]
parsing using 2 threads: 378 rows chunked at positions: [481, 100794, 201701]
thread = 2 warning: didn't pre-allocate enough tape while parsing on row 378, re-allocating from 378 to 480...
thread = 2 warning: didn't pre-allocate enough tape while parsing on row 480, re-allocating from 480 to 555...
thread = 1 warning: didn't pre-allocate enough tape while parsing on row 378, re-allocating from 378 to 465...
thread = 1: time for parsing: 0.015384197235107422
thread = 2 warning: didn't pre-allocate enough tape while parsing on row 555, re-allocating from 555 to 600...
thread = 2 warning: didn't pre-allocate enough tape while parsing on row 600, re-allocating from 600 to 624...
thread = 2 warning: didn't pre-allocate enough tape while parsing on row 624, re-allocating from 624 to 635...
thread = 2 warning: only found 38 / 39 columns on data row: 625. Filling remaining columns with `missing`
thread = 2: time for parsing: 0.1426692008972168
types after parsing: Type[String, PooledString, Int64, String, Int64, PooledString, Int64, Date, Union{Missing, PooledString}, Union{Missing, Date}, Union{Missing, PooledString}, Union{Missing, Date}, Union{Missing, PooledString}, Union{Missing, Date}, Union{Missing, PooledString}, Union{Missing, Date}, Union{Missing, PooledString}, Union{Missing, PooledString}, Union{Missing, PooledString}, Union{Missing, Date}, Union{Missing, String}, Union{Missing, PooledString}, Union{Missing, PooledString}, Union{Missing, PooledString}, Union{Missing, PooledString}, Union{Missing, Float64}, Union{Missing, Date}, Union{Missing, PooledString}, Union{Missing, PooledString}, Union{Missing, Date}, Union{Missing, PooledString}, Union{Missing, PooledString}, Union{Missing, PooledString}, Union{Missing, String}, Union{Missing, PooledString}, Union{Missing, String}, Union{Missing, PooledString}, Union{Missing, PooledString}, Union{Missing, Int64}], pool = 0.1
testing time.csv
testing escaped_pooled.csv
testing error_comment.txt
testing test_508.csv
testing bug555.txt
testing test_basic.csv
thread = 1 warning: only found 3 / 5 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: only found 3 / 5 columns on data row: 2. Filling remaining columns with `missing`
thread = 1 warning: only found 4 / 5 columns on data row: 2. Filling remaining columns with `missing`
CSV.Rows("<Base.GenericIOBuffer{Array{UInt8,1}}>"):
Size: 1
Tables.Schema:
 :X  Union{Missing, String}thread = 1 warning: only found 1 / 3 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: only found 2 / 3 columns on data row: 2. Filling remaining columns with `missing`
thread = 1 warning: parsed expected 3 columns, but didn't reach end of line on data row: 2. Ignoring any extra columns on this row
Test Summary: | Pass  Total
CSV           | 1205   1205
   Testing CSV tests passed 
   Testing DataFrames
 Installed DataValues ─ v0.4.13
  Updating `/tmp/jl_oDN1ZX/Project.toml`
  [e7dc6d0d] + DataValues v0.4.13
  Updating `/tmp/jl_oDN1ZX/Manifest.toml`
  [e7dc6d0d] + DataValues v0.4.13
Running sandbox
Status `/tmp/jl_oDN1ZX/Project.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v2.2.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.0
  [864edb3b] DataStructures v0.17.9
  [e7dc6d0d] DataValues v0.4.13
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [e1d29d7a] Missings v0.4.3
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [a2af1166] SortingAlgorithms v0.3.1
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v0.2.11
  [ade2ca70] Dates 
  [9fa8497b] Future 
  [56ddb016] Logging 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [10745b16] Statistics 
  [8dfed614] Test 
  [4ec0a83e] Unicode 
Running tests:
Test Summary: | Pass  Total
make_unique   |    3      3
Test Summary: | Pass  Total
count         |    2      2
Test Summary: | Pass  Total
inner_outer   |    2      2
	[1m[32mPASSED[0m: utils.jl
Test Summary: | Pass  Total
hcat          |   10     10
Test Summary: | Pass  Total
hcat: copying |   26     26
Test Summary:            | Pass  Total
hcat ::AbstractDataFrame |    2      2
Test Summary:            | Pass  Total
hcat ::AbstractDataFrame |    2      2
Test Summary:          | Pass  Total
hcat ::AbstractVectors |   11     11
Test Summary:  | Pass  Total
hcat: copycols |   76     76
Test Summary: | Pass  Total
vcat          |   21     21
Test Summary: | Pass  Total
vcat copy     |    2      2
Test Summary: | Pass  Total
vcat >2 args  |    4      4
Test Summary:       | Pass  Total
vcat mixed coltypes |   18     18
Test Summary:     | Pass  Total
vcat out of order |   19     19
Test Summary:         | Pass  Total
vcat with cols=:union |    6      6
Test Summary:             | Pass  Total
vcat with cols=:intersect |    6      6
Test Summary:          | Pass  Total
vcat with cols::Vector |   15     15
Test Summary:          | Pass  Total
vcat thrown exceptions |   32     32
Test Summary:  | Pass  Total
vcat with view |    1      1
	[1m[32mPASSED[0m: cat.jl
Test Summary: | Pass  Total
constructors  |   61     61
Test Summary:                 | Pass  Total
completecases and dropmissing |  209    209
Test Summary: | Pass  Total
merge         |   17     17
Test Summary: | Pass  Total
join tests    |    4      4
Test Summary:                                     | Pass  Total
nonunique, nonunique, unique! with extra argument |   36     36
Test Summary:          | Pass  Total
filter() and filter!() |    4      4
	[1m[32mPASSED[0m: data.jl
Test Summary:  | Pass  Total
Index indexing |   50     50
Test Summary: | Pass  Total
rename!       |   14     14
Test Summary: | Pass  Total
SubIndex      |   55     55
Test Summary:     | Pass  Total
selector mutation |   12     12
Test Summary:  | Pass  Total
fuzzy matching |    8      8
Test Summary:  | Pass  Total
Regex indexing |   36     36
Test Summary: | Pass  Total
Not indexing  |   36     36
Test Summary:    | Pass  Total
Between indexing |   20     20
Test Summary: | Pass  Total
All indexing  |   25     25
	[1m[32mPASSED[0m: index.jl
Test Summary:                |  Pass  Total
randomized tests for rename! | 11440  11440
Test Summary:            | Pass  Total
additional rename! tests | 6620   6620
Test Summary:              | Pass  Total
rename with integer source |   27     27
Test Summary: | Pass  Total
equality      |    9      9
Test Summary: | Pass  Total
copying       |    9      9
Test Summary:      | Pass  Total
similar / missings |    2      2
Test Summary: | Pass  Total
hasproperty   |    5      5
Test Summary: | Pass  Total
insertcols!   |   24     24
Test Summary:          | Pass  Total
DataFrame constructors |   19     19
Test Summary:  | Pass  Total
push!(df, row) |   69     69
Test Summary: | Pass  Total
select! Not   |   13     13
Test Summary: | Pass  Total
select Not    |   64     64
Test Summary:   | Pass  Total
select Not view |   76     76
Test Summary: | Pass  Total
select!       |   35     35
Test Summary: | Pass  Total
select        |   66     66
Test Summary: | Pass  Total
select view   |   78     78
Test Summary: | Pass  Total
deleterows!   |   40     40
Test Summary: | Pass  Total
describe      |    8      8
Test Summary: | Pass  Total
append!       |   35     35
Test Summary:     | Pass  Total
test categorical! |   14     14
Test Summary: | Pass  Total
categorical!  |   11     11
Test Summary: | Pass  Total
rename        |   48     48
Test Summary:             | Pass  Total
flexible rename arguments |   30     30
Test Summary: | Pass  Total
size          |    5      5
Test Summary: | Pass  Total
description   |    8      8
Test Summary:      | Pass  Total
column conversions |  124    124
Test Summary:        | Pass  Total
test disallowmissing |  634    634
Test Summary:     | Pass  Total
test allowmissing |  312    312
Test Summary:    | Pass  Total
test categorical |  432    432
Test Summary: | Pass  Total
similar       |    8      8
Test Summary:                | Pass  Total
passing range to a DataFrame |    1      1
Test Summary:                | Pass  Total
test getindex using ! syntax |   15     15
Test Summary:                | Pass  Total
test corner case of getindex |    2      2
Test Summary:             | Pass  Total
empty data frame getindex |    9      9
Test Summary:               | Pass  Total
handling of end in indexing |   22     22
Test Summary:        | Pass  Total
aliasing in indexing |    5      5
Test Summary:          | Pass  Total
select! on all columns |   21     21
Test Summary:                               | Pass  Total
getproperty, setproperty! and propertynames |   10     10
Test Summary:          | Pass  Total
duplicate column names |    1      1
Test Summary:         | Pass  Total
parent, size and axes |   11     11
Test Summary:                | Pass  Total
0-row DataFrame corner cases |    4      4
Test Summary:         |
And and Between tests | No tests
Test Summary:                                   | Pass  Total
select and select! with multiple columns passed |    9      9
Test Summary:                   | Pass  Total
vcat and push! with :orderequal |   14     14
Test Summary:      | Pass  Total
push! with :subset |   18     18
Test Summary:         | Pass  Total
push! with :intersect |   12     12
	[1m[32mPASSED[0m: dataframe.jl
Test Summary:         | Pass  Total
the output of unstack |   27     27
Test Summary:                               | Pass  Total
unstack promotion to support missing values |    8      8
Test Summary:                         | Pass  Total
duplicate entries in unstack warnings |    9      9
Test Summary:            | Pass  Total
missing values in colkey |    6      6
Test Summary:             | Pass  Total
stack-unstack correctness |    4      4
Test Summary: | Pass  Total
reshape       |   71     71
Test Summary:           | Pass  Total
column names duplicates |    5      5
Test Summary: | Pass  Total
flatten       |    8      8
	[1m[32mPASSED[0m: reshape.jl
Test Summary: | Pass  Total
constructors  |   28     28
Test Summary:          | Pass  Total
getindex and setindex! |   53     53
Test Summary: | Pass  Total
equality      |   17     17
Test Summary: | Pass  Total
isless        |   13     13
Test Summary: | Pass  Total
hashing       |    6      6
Test Summary: | Pass  Total
grouping      |    6      6
Test Summary:                               | Pass  Total
getproperty, setproperty! and propertynames |    6      6
Test Summary:                    | Pass  Total
keys, values and iteration, size |   31     31
Test Summary:    | Pass  Total
convert and copy |   10     10
Test Summary:            | Pass  Total
parent and parentindices |   34     34
Test Summary:         | Pass  Total
iteration and collect |   10     10
Test Summary:    | Pass  Total
duplicate column |    2      2
Test Summary:        | Pass  Total
conversion and push! |   15     15
Test Summary: | Pass  Total
show          |    7      7
Test Summary:     | Pass  Total
check Vector type |    1      1
	[1m[32mPASSED[0m: dataframerow.jl
Test Summary: | Pass  Total
LaTeX export  |    4      4
Test Summary:     | Pass  Total
Huge LaTeX export |    2      2
Test Summary: | Pass  Total
HTML output   |   11     11
Test Summary:   | Pass  Total
limit attribute |    2      2
Test Summary: | Pass  Total
printtable    |    1      1
Test Summary:  | Pass  Total
csv/tsv output |    6      6
Test Summary:                     | Pass  Total
empty data frame and DataFrameRow |   12     12
Test Summary: | Pass  Total
consistency   |    8      8
	[1m[32mPASSED[0m: io.jl
Test Summary: | Pass  Total
constructors  |   42     42
Test Summary:                          | Pass  Total
DataFrame keyword argument constructor |   22     22
Test Summary:         | Pass  Total
DataFrame constructor |   21     21
Test Summary:    | Pass  Total
pair constructor |   11     11
Test Summary: | Pass  Total
associative   |    9      9
Test Summary:       | Pass  Total
vector constructors |   58     58
Test Summary: | Pass  Total
recyclers     |    2      2
Test Summary:                 | Pass  Total
constructor thrown exceptions |   11     11
Test Summary: | Pass  Total
column types  |    3      3
Test Summary:      | Pass  Total
Matrix constructor |    4      4
Test Summary:          | Pass  Total
constructor with types |   19     19
	[1m[32mPASSED[0m: constructors.jl
Test Summary:    | Pass  Total
Conversion tests |   72     72
	[1m[32mPASSED[0m: conversions.jl
	[1m[32mPASSED[0m: sort.jl
Test Summary: | Pass  Total
parent        |    2      2
Test Summary: | Pass  Total
consistency   |    2      2
Test Summary:    | Pass  Total
accepted columns |    2      2
Test Summary:                                       | Pass  Total
by, groupby and map(::Function, ::GroupedDataFrame) |  986    986
Test Summary:          | Pass  Total
grouping with missings | 1372   1372
Test Summary:            | Pass  Total
grouping with three keys | 2906   2906
Test Summary:                 | Pass  Total
grouping with hash collisions |    2      2
Test Summary:                           | Pass  Total
by, combine and map with pair interface |  374    374
Test Summary:                      | Pass  Total
combine with aggregation functions |  345    345
Test Summary:                      | Pass  Total
combine with aggregation functions |  345    345
Test Summary:                      | Pass  Total
combine with aggregation functions |  345    345
Test Summary:                      | Pass  Total
combine with aggregation functions |  345    345
Test Summary:                                         | Pass  Total
combine and map with columns named like grouping keys |   12     12
Test Summary:      | Pass  Total
iteration protocol |    3      3
Test Summary: | Pass  Total
getindex      |   30     30
Test Summary:  | Pass  Total
== and isequal |   19     19
Test Summary: | Pass  Total
show          |   11     11
Test Summary: | Pass  Total
DataFrame     |   24     24
Test Summary:              | Pass  Total
groupindices and groupvars |   20     20
Test Summary:           | Pass  Total
by skipmissing and sort |    4      4
Test Summary:               | Pass  Total
non standard cols arguments |   27     27
Test Summary:                         | Pass  Total
GroupedDataFrame dictionary interface |   35     35
Test Summary:          | Pass  Total
GroupKey and GroupKeys |  146    146
Test Summary:                  | Pass  Total
Parent DataFrame names changed |   16     16
	[1m[32mPASSED[0m: grouping.jl
Test Summary: | Pass  Total
join types    |   20     20
Test Summary:       | Pass  Total
Test empty inputs 1 |   21     21
Test Summary:       | Pass  Total
Test empty inputs 2 |   21     21
Test Summary: | Pass  Total
issue #960    |    3      3
Test Summary: | Pass  Total
all joins     |   30     30
Test Summary:                    | Pass  Total
all joins with CategoricalArrays |   32     32
Test Summary:                                                     | Pass  Total
maintain CategoricalArray levels ordering on join - non-`on` cols |    6      6
Test Summary:                                                          | Pass  Total
maintain CategoricalArray levels ordering on join - ordering conflicts |   10     10
Test Summary:                                                           | Pass  Total
maintain CategoricalArray levels ordering on join - left is categorical |   12     12
Test Summary:                                   | Pass  Total
join on columns with different left/right names |   18     18
Test Summary:                  | Pass  Total
join with a column of type Any |   16     16
Test Summary:                                       | Pass  Total
joins with categorical columns and no matching rows |   24     24
Test Summary:     | Pass  Total
indicator columns |    4      4
Test Summary:                       | Pass  Total
test checks of merge key uniqueness |   18     18
Test Summary: | Pass  Total
consistency   |    3      3
Test Summary:         | Pass  Total
multi data frame join |   11     11
Test Summary:       | Pass  Total
flexible on in join |    4      4
	[1m[32mPASSED[0m: join.jl
Test Summary: | Pass  Total
mapcols       |    8      8
Test Summary: | Pass  Total
SubDataFrame  |    7      7
Test Summary:   | Pass  Total
parent mutation |    4      4
Test Summary:                 | Pass  Total
getproperty and propertynames |   33     33
	[1m[32mPASSED[0m: iteration.jl
Test Summary: | Pass  Total
nonunique     |   18     18
	[1m[32mPASSED[0m: duplicates.jl
Test Summary:                            | Pass  Total
Basic show test with allrows and allcols |    9      9
Test Summary:    | Pass  Total
displaysize test |    4      4
Test Summary:             | Pass  Total
IOContext parameters test |    2      2
Test Summary:          | Pass  Total
SubDataFrame show test |    1      1
Test Summary:                                 | Pass  Total
Test showing StackedVector and RepeatedVector |    3      3
Test Summary:                                            | Pass  Total
Test colors and non-standard values: missing and nothing |    3      3
Test Summary:                  | Pass  Total
Test correct width computation |    1      1
Test Summary:                                                              | Pass  Total
Test showing special types: strings with escapes, categorical and BigFloat |    3      3
Test Summary:                              | Pass  Total
Test using :compact parameter of IOContext |    2      2
Test Summary:                              | Pass  Total
Test of DataFrameRows and DataFrameColumns |    6      6
Test Summary:                          | Pass  Total
Test empty data frame and DataFrameRow |    3      3
Test Summary: | Pass  Total
consistency   |    2      2
	[1m[32mPASSED[0m: show.jl
Test Summary:       | Pass  Total
copy - SubDataFrame |    5      5
Test Summary:     | Pass  Total
view -- DataFrame |   77     77
Test Summary:        | Pass  Total
view -- SubDataFrame |   62     62
Test Summary:                               | Pass  Total
getproperty, setproperty! and propertynames |    8      8
Test Summary: | Pass  Total
index         |   10     10
Test Summary: | Pass  Total
deleterows!   |    1      1
Test Summary: | Pass  Total
parent        |    6      6
Test Summary:    | Pass  Total
duplicate column |    1      1
Test Summary:           | Pass  Total
conversion to DataFrame |   12     12
	[1m[32mPASSED[0m: subdataframe.jl
Test Summary: | Pass  Total
Tables        |   45     45
Test Summary: | Pass  Total
DataFrame!    |    9      9
Test Summary: | Pass  Total
columnindex   |    4      4
Test Summary:                   | Pass  Total
eachrow and eachcol integration |   13     13
	[1m[32mPASSED[0m: tables.jl
Test Summary: | Pass  Total
TableTraits   |   10     10
	[1m[32mPASSED[0m: tabletraits.jl
Test Summary:      | Pass  Total
getindex DataFrame |   89     89
Test Summary:       | Pass  Total
getindex df[!, col] |   13     13
Test Summary:  | Pass  Total
view DataFrame |  129    129
Test Summary:         | Pass  Total
getindex SubDataFrame |  133    133
Test Summary:     | Pass  Total
view SubDataFrame |  128    128
Test Summary:         | Pass  Total
getindex DataFrameRow |   16     16
Test Summary:     | Pass  Total
view DataFrameRow |   17     17
Test Summary:                             | Pass  Total
additional tests of post-! getindex rules |  179    179
Test Summary:          | Pass  Total
setindex! on DataFrame |   78     78
Test Summary:             | Pass  Total
setindex! on SubDataFrame |  159    159
Test Summary:             | Pass  Total
setindex! on DataFrameRow |   87     87
Test Summary:                           | Pass  Total
setindex! with ! or : and multiple cols |   24     24
Test Summary:              | Pass  Total
additional setindex! tests |    5      5
Test Summary:      | Pass  Total
invalid view tests |   24     24
	[1m[32mPASSED[0m: indexing.jl
Test Summary:  | Pass  Total
CartesianIndex |   24     24
Test Summary:                             | Pass  Total
broadcasting of AbstractDataFrame objects |   28     28
Test Summary:                                               | Pass  Total
broadcasting of AbstractDataFrame objects thrown exceptions |   10     10
Test Summary:          | Pass  Total
broadcasting expansion |    5      5
Test Summary:                                          | Pass  Total
broadcasting of AbstractDataFrame objects corner cases |   34     34
Test Summary:                                                               | Pass  Total
normal data frame and data frame row in broadcasted assignment - one column |   79     79
Test Summary:                                                                 | Pass  Total
normal data frame and data frame view in broadcasted assignment - two columns |   72     72
Test Summary:                                       | Pass  Total
assignment to a whole data frame and data frame row |    8      8
Test Summary:                                               | Pass  Total
extending data frame in broadcasted assignment - one column |   20     20
Test Summary:                | Pass  Total
empty data frame corner case |   99     99
Test Summary:           | Pass  Total
test categorical values |  126    126
Test Summary:       | Pass  Total
scalar broadcasting |    3      3
Test Summary:      | Pass  Total
tuple broadcasting |    8      8
Test Summary:             | Pass  Total
scalar on assignment side |    4      4
Test Summary: | Pass  Total
nothing test  |    4      4
Test Summary: | Pass  Total
aliasing test |  154    154
Test Summary: | Pass  Total
@. test       |    2      2
Test Summary:     | Pass  Total
test common cases |   11     11
Test Summary:                                             | Pass  Total
data frame only on left hand side broadcasting assignment |   26     26
Test Summary:                          | Pass  Total
broadcasting with 3-dimensional object |    4      4
Test Summary:                                  | Pass  Total
additional checks of post-! broadcasting rules |  159    159
Test Summary:                                   | Pass  Total
DataFrameRow getproperty broadcasted assignment |    4      4
Test Summary:                                | Pass  Total
make sure that : is in place and ! allocates |    5      5
Test Summary:                                            | Pass  Total
add new correct rules for df[row, col] .= v broadcasting |    6      6
Test Summary:                 | Pass  Total
broadcasting into df[!, cols] |  149    149
Test Summary:                          | Pass  Total
broadcasting over heterogenous columns |    1      1
Test Summary:        | Pass  Total
@views on df[!, col] |    3      3
Test Summary:                      | Pass  Total
broadcasting of df[:, col] = value |    8      8
	[1m[32mPASSED[0m: broadcasting.jl
Test Summary: | Pass  Total
identifier    |    6      6
Test Summary:  |
reserved words | No tests
Test Summary:           | Pass  Total
categorical constructor |    3      3
Test Summary:          | Pass  Total
DataFrame constructors |   42     42
Test Summary: | Pass  Total
colwise       |   29     29
Test Summary: | Pass  Total
empty!        |    5      5
Test Summary:              | Pass  Total
deletecols and deletecols! |    7      7
Test Summary: | Pass  Total
haskey        |    7      7
Test Summary:                                        | Pass  Total
df[col] and df[col] for getindex, view, and setindex |  132    132
Test Summary: | Pass  Total
eltypes       |    1      1
Test Summary: | Pass  Total
melt          |   22     22
	[1m[32mPASSED[0m: deprecated.jl
   Testing DataFrames tests passed 
   Testing Distances
  Updating `/tmp/jl_0dkPb7/Project.toml`
 [no changes]
  Updating `/tmp/jl_0dkPb7/Manifest.toml`
 [no changes]
Running sandbox
Status `/tmp/jl_0dkPb7/Project.toml`
  [b4f34e82] Distances v0.8.2
  [37e2e46d] LinearAlgebra 
  [9a3f8284] Random 
  [10745b16] Statistics 
  [8dfed614] Test 
Test Summary:                            | Pass  Total
PreMetric, SemiMetric, Metric on Float64 |  401    401
Test Summary:                        | Pass  Total
PreMetric, SemiMetric, Metric on F64 |  401    401
Test Summary:      | Pass  Total
individual metrics |  153    153
Test Summary: | Pass  Total
NaN behavior  |    3      3
Test Summary: | Pass  Total
empty vector  |   46     46
Test Summary:              | Pass  Total
DimensionMismatch throwing |   15     15
Test Summary:         | Pass  Total
Different input types |   52     52
Test Summary: | Pass  Total
mahalanobis   |    8      8
Test Summary: | Pass  Total
haversine     |   12     12
Test Summary:             | Pass  Total
bhattacharyya / hellinger |   20     20
Test Summary:                  | Pass  Total
column-wise metrics on Float64 |   93     93
Test Summary:              | Pass  Total
column-wise metrics on F64 |   93     93
┌ Warning: implicit `dims=2` argument now has to be passed explicitly to specify that distances between columns should be computed
│   caller = ip:0x0
└ @ Core :-1
Test Summary:               | Pass  Total
pairwise metrics on Float64 |  174    174
Test Summary:           | Pass  Total
pairwise metrics on F64 |  174    174
Test Summary:       | Pass  Total
Euclidean precision |    8      8
Test Summary:      | Pass  Total
Bregman Divergence |    4      4
   Testing Distances tests passed 
   Testing Distributions
 Installed Calculus ────────── v0.5.1
 Installed FiniteDifferences ─ v0.9.1
  Updating `/tmp/jl_Xb7faa/Project.toml`
  [49dc2e85] + Calculus v0.5.1
  [26cc04aa] + FiniteDifferences v0.9.1
  Updating `/tmp/jl_Xb7faa/Manifest.toml`
  [49dc2e85] + Calculus v0.5.1
  [26cc04aa] + FiniteDifferences v0.9.1
Running sandbox
Status `/tmp/jl_Xb7faa/Project.toml`
  [49dc2e85] Calculus v0.5.1
  [31c24e10] Distributions v0.21.12
  [1a297f60] FillArrays v0.8.4
  [26cc04aa] FiniteDifferences v0.9.1
  [f6369f11] ForwardDiff v0.10.9
  [682c06a0] JSON v0.21.0
  [90014a1f] PDMats v0.9.11
  [1fd47b50] QuadGK v2.3.1
  [276daf66] SpecialFunctions v0.9.0
  [90137ffa] StaticArrays v0.12.1
  [2913bbd2] StatsBase v0.32.0
  [4c63d2b9] StatsFuns v0.9.3
  [8ba89e20] Distributed 
  [37e2e46d] LinearAlgebra 
  [de0858da] Printf 
  [9a3f8284] Random 
  [10745b16] Statistics 
  [8dfed614] Test 
Running tests:
    [Discrete]
    ------------
    testing Truncated(BetaBinomial(10, 0.2, 0.25),3,5)
    testing Truncated(BetaBinomial(10, 2, 2.5),3,5)
    testing Truncated(BetaBinomial(10, 60, 40),3,5)
    testing Truncated(Binomial(5, 0.4),3,5)
    testing Truncated(Binomial(6, 0.8),3,5)
    testing Truncated(Binomial(100, 0.1),3,5)
    testing Truncated(Binomial(100, 0.9),3,5)
    testing Truncated(Binomial(10, 0.0),3,5)
    testing Truncated(Binomial(10, 1.0),3,5)
    testing Truncated(DiscreteUniform(6),3,5)
    testing Truncated(DiscreteUniform(7),3,5)
    testing Truncated(DiscreteUniform(2, 8),3,5)
    testing Truncated(Geometric(),3,5)
    testing Truncated(Geometric(0.02),3,5)
    testing Truncated(Geometric(0.1),3,5)
    testing Truncated(Geometric(0.5),3,5)
    testing Truncated(Geometric(0.9),3,5)
    testing Truncated(NegativeBinomial(),3,5)
    testing Truncated(NegativeBinomial(6),3,5)
    testing Truncated(NegativeBinomial(1, 0.5),3,5)
    testing Truncated(NegativeBinomial(5, 0.6),3,5)
    testing Truncated(NegativeBinomial(0.5, 0.5),3,5)
    testing Truncated(Poisson(),3,5)
    testing Truncated(Poisson(0.5),3,5)
    testing Truncated(Poisson(2.0),3,5)
    testing Truncated(Poisson(10.0),3,5)
    testing Truncated(Poisson(80.0),3,5)

    [Continuous]
    ------------
    testing Truncated(BetaPrime(),3,5)
    testing Truncated(BetaPrime(3.0),3,5)
    testing Truncated(BetaPrime(3.0, 5.0),3,5)
    testing Truncated(BetaPrime(5.0, 3.0),3,5)
    testing Truncated(Cauchy(),3,5)
    testing Truncated(Cauchy(2.0),3,5)
    testing Truncated(Cauchy(0.0, 1.0),3,5)
    testing Truncated(Cauchy(10.0, 1.0),3,5)
    testing Truncated(Cauchy(2.0, 10.0),3,5)
    testing Truncated(Chi(1),3,5)
    testing Truncated(Chi(2),3,5)
    testing Truncated(Chi(3),3,5)
    testing Truncated(Chi(12),3,5)
    testing Truncated(Chisq(1),3,5)
    testing Truncated(Chisq(8),3,5)
    testing Truncated(Chisq(20),3,5)
    testing Truncated(Erlang(),3,5)
    testing Truncated(Erlang(3),3,5)
    testing Truncated(Erlang(3, 1.0),3,5)
    testing Truncated(Erlang(5, 2.0),3,5)
    testing Truncated(Exponential(),3,5)
    testing Truncated(Exponential(2.0),3,5)
    testing Truncated(Exponential(6.5),3,5)
    testing Truncated(FDist(6.0, 8.0),3,5)
    testing Truncated(FDist(8.0, 6.0),3,5)
    testing Truncated(FDist(30, 40),3,5)
    testing Truncated(Frechet(),3,5)
    testing Truncated(Frechet(0.5),3,5)
    testing Truncated(Frechet(3.0),3,5)
    testing Truncated(Frechet(20.0),3,5)
    testing Truncated(Frechet(60.0),3,5)
    testing Truncated(Frechet(0.5, 2.0),3,5)
    testing Truncated(Frechet(3.0, 2.0),3,5)
    testing Truncated(Gamma(),3,5)
    testing Truncated(Gamma(2.0),3,5)
    testing Truncated(Gamma(1.0, 1.0),3,5)
    testing Truncated(Gamma(3.0, 1.0),3,5)
    testing Truncated(Gamma(3.0, 2.0),3,5)
    testing Truncated(GeneralizedExtremeValue(1.0, 1.0, 1.0),3,5)
    testing Truncated(GeneralizedExtremeValue(0.0, 1.0, 0.0),3,5)
    testing Truncated(GeneralizedExtremeValue(0.0, 1.0, 1.1),3,5)
    testing Truncated(GeneralizedExtremeValue(0.0, 1.0, 0.6),3,5)
    testing Truncated(GeneralizedExtremeValue(0.0, 1.0, 0.3),3,5)
    testing Truncated(GeneralizedExtremeValue(-1.0, 0.5, 0.6),3,5)
    testing Truncated(GeneralizedPareto(),3,5)
    testing Truncated(GeneralizedPareto(1.0, 1.0),3,5)
    testing Truncated(GeneralizedPareto(0.1, 2.0),3,5)
    testing Truncated(GeneralizedPareto(1.0, 1.0, 1.0),3,5)
    testing Truncated(GeneralizedPareto(-1.5, 0.5, 2.0),3,5)
    testing Truncated(Gumbel(),3,5)
    testing Truncated(Gumbel(3.0),3,5)
    testing Truncated(Gumbel(3.0, 5.0),3,5)
    testing Truncated(Gumbel(5.0, 3.0),3,5)
    testing Truncated(InverseGamma(),3,5)
    testing Truncated(InverseGamma(2.0),3,5)
    testing Truncated(InverseGamma(1.0, 1.0),3,5)
    testing Truncated(InverseGamma(1.0, 2.0),3,5)
    testing Truncated(InverseGamma(2.0, 1.0),3,5)
    testing Truncated(InverseGamma(2.0, 3.0),3,5)
    testing Truncated(InverseGaussian(),3,5)
    testing Truncated(InverseGaussian(0.8),3,5)
    testing Truncated(InverseGaussian(2.0),3,5)
    testing Truncated(InverseGaussian(1.0, 1.0),3,5)
    testing Truncated(InverseGaussian(2.0, 1.5),3,5)
    testing Truncated(InverseGaussian(2.0, 7.0),3,5)
    testing Truncated(Laplace(),3,5)
    testing Truncated(Laplace(2.0),3,5)
    testing Truncated(Laplace(0.0, 1.0),3,5)
    testing Truncated(Laplace(5.0, 1.0),3,5)
    testing Truncated(Laplace(5.0, 1.5),3,5)
    testing Truncated(Levy(),3,5)
    testing Truncated(Levy(2),3,5)
    testing Truncated(Levy(2, 8),3,5)
    testing Truncated(Levy(3.0, 3),3,5)
    testing Truncated(Logistic(),3,5)
    testing Truncated(Logistic(2.0),3,5)
    testing Truncated(Logistic(0.0, 1.0),3,5)
    testing Truncated(Logistic(5.0, 1.0),3,5)
    testing Truncated(Logistic(2.0, 1.5),3,5)
    testing Truncated(Logistic(5.0, 1.5),3,5)
    testing Truncated(LogNormal(),3,5)
    testing Truncated(LogNormal(1.0),3,5)
    testing Truncated(LogNormal(0.0, 2.0),3,5)
    testing Truncated(LogNormal(1.0, 2.0),3,5)
    testing Truncated(LogNormal(3.0, 0.5),3,5)
    testing Truncated(LogNormal(3.0, 1.0),3,5)
    testing Truncated(LogNormal(3.0, 2.0),3,5)
    testing Truncated(NoncentralChisq(2, 2),3,5)
    testing Truncated(NoncentralChisq(2, 5),3,5)
    testing Truncated(NoncentralF(2, 2, 2),3,5)
    testing Truncated(NoncentralF(8, 10, 5),3,5)
    testing Truncated(NoncentralT(2, 2),3,5)
    testing Truncated(NoncentralT(10, 2),3,5)
    testing Truncated(Normal(),3,5)
    testing Truncated(Normal(2.0),3,5)
    testing Truncated(Normal(-3.0, 2.0),3,5)
    testing Truncated(Normal(1.0, 10.0),3,5)
    testing Truncated(NormalCanon(),3,5)
    testing Truncated(NormalCanon(0.0, 1.0),3,5)
    testing Truncated(NormalCanon(-1.0, 2.5),3,5)
    testing Truncated(NormalCanon(2.0, 0.8),3,5)
    testing Truncated(Pareto(),3,5)
    testing Truncated(Pareto(2.0),3,5)
    testing Truncated(Pareto(2.0, 1.5),3,5)
    testing Truncated(Pareto(3.0, 2.0),3,5)
    testing Truncated(Rayleigh(),3,5)
    testing Truncated(Rayleigh(3.0),3,5)
    testing Truncated(Rayleigh(8.0),3,5)
    testing Truncated(StudentizedRange(2.0, 2.0),3,5)
    testing Truncated(StudentizedRange(5.0, 10.0),3,5)
    testing Truncated(StudentizedRange(10.0, 5.0),3,5)
    testing Truncated(SymTriangularDist(3.0, 2.0),3,5)
    testing Truncated(SymTriangularDist(10.0, 8.0),3,5)
    testing Truncated(TDist(1.2),3,5)
    testing Truncated(TDist(5.0),3,5)
    testing Truncated(TDist(28.0),3,5)
    testing Truncated(TriangularDist(0, 5),3,5)
    testing Truncated(TriangularDist(-4, 14, 3),3,5)
    testing Truncated(TriangularDist(2, 2000, 500),3,5)
    testing Truncated(truncated(Normal(27, 3), 0, Inf),3,5)
    testing Truncated(Uniform(3.0, 17.0),3,5)
    testing Truncated(Weibull(),3,5)
    testing Truncated(Weibull(0.5),3,5)
    testing Truncated(Weibull(5.0),3,5)
    testing Truncated(Weibull(20.0, 1.0),3,5)
    testing Truncated(Weibull(1.0, 2.0),3,5)
    testing Truncated(Weibull(5.0, 2.0),3,5)

Test Summary: | Pass  Total
Test truncate | 5078   5078
Test Summary:    | Pass  Total
Test truncnormal |   16     16
Test Summary:              | Pass  Total
Test truncated_exponential |    8      8
Test Summary: | Pass  Total
Test normal   |  136    136
Test Summary: | Pass  Total
Test mvnormal | 5624   5624
Test Summary:    | Pass  Total
Test mvlognormal | 1415   1415
Test Summary: | Pass  Total
Test types    |   30     30
Test Summary: | Pass  Total
Test utils    |   14     14
    testing CategoricalDirectSampler
    testing AliasTable
    testing BinomialGeomSampler
    testing BinomialTPESampler
    testing BinomialPolySampler
    testing BinomialAliasSampler
    testing PoissonCountSampler
    testing PoissonADSampler
    testing PoissBinAliasSampler
    testing ExponentialSampler
    testing GammaGDSampler
    testing GammaMTSampler
    testing GammaGSSampler
    testing GammaIPSampler
Test Summary: | Pass  Total
Test samplers |    2      2
    testing DiscreteNonParametric{Int64,Float64,Base.OneTo{Int64},Array{Float64,1}}(support=Base.OneTo(2), p=[0.5, 0.5]) as Categorical
    testing DiscreteNonParametric{Int64,Float32,Base.OneTo{Int64},Array{Float32,1}}(support=Base.OneTo(2), p=Float32[0.5, 0.5]) as Categorical
    testing DiscreteNonParametric{Int64,Rational{Int64},Base.OneTo{Int64},Array{Rational{Int64},1}}(support=Base.OneTo(2), p=Rational{Int64}[1//2, 1//2]) as Categorical
    testing DiscreteNonParametric{Int64,Float64,Base.OneTo{Int64},Array{Float64,1}}(support=Base.OneTo(4), p=[0.1, 0.3, 0.2, 0.4]) as Categorical
    testing DiscreteNonParametric{Int64,Float64,Base.OneTo{Int64},Array{Float64,1}}(support=Base.OneTo(3), p=[0.15, 0.25, 0.6]) as Categorical
    testing DiscreteNonParametric{Int64,Float64,Base.OneTo{Int64},Array{Float64,1}}(support=Base.OneTo(4), p=[0.25, 0.25, 0.25, 0.25]) as Categorical
Test Summary:    | Pass  Total
Test categorical |  350    350
    [Discrete]
    ------------
    testing Bernoulli()
    testing Bernoulli(0.25)
    testing Bernoulli(0.75)
    testing Bernoulli(0.0)
    testing Bernoulli(1.0)
    testing BetaBinomial(2, 0.2, 0.25)
    testing BetaBinomial(10, 0.2, 0.25)
    testing BetaBinomial(10, 2, 2.5)
    testing BetaBinomial(10, 60, 40)
    testing Binomial()
    testing Binomial(3)
    testing Binomial(5, 0.4)
    testing Binomial(6, 0.8)
    testing Binomial(100, 0.1)
    testing Binomial(100, 0.9)
    testing Binomial(10, 0.0)
    testing Binomial(10, 1.0)
    testing DiscreteUniform()
    testing DiscreteUniform(6)
    testing DiscreteUniform(7)
    testing DiscreteUniform(0, 4)
    testing DiscreteUniform(2, 8)
    testing Geometric()
    testing Geometric(0.02)
    testing Geometric(0.1)
    testing Geometric(0.5)
    testing Geometric(0.9)
    testing Hypergeometric(2, 2, 2)
    testing Hypergeometric(3, 2, 2)
    testing Hypergeometric(3, 2, 0)
    testing Hypergeometric(3, 2, 5)
    testing Hypergeometric(4, 5, 6)
    testing Hypergeometric(60, 80, 100)
    testing NegativeBinomial()
    testing NegativeBinomial(6)
    testing NegativeBinomial(1, 0.5)
    testing NegativeBinomial(5, 0.6)
    testing NegativeBinomial(0.5, 0.5)
    testing Poisson()
    testing Poisson(0.0)
    testing Poisson(0.5)
    testing Poisson(2.0)
    testing Poisson(10.0)
    testing Poisson(80.0)
    testing Skellam()
    testing Skellam(2.0)
    testing Skellam(2.0, 3.0)
    testing Skellam(3.2, 1.8)
    testing FisherNoncentralHypergeometric(8, 6, 10, 1)
    testing FisherNoncentralHypergeometric(8, 6, 10, 10)
    testing FisherNoncentralHypergeometric(8, 6, 10, 0.1)
    testing FisherNoncentralHypergeometric(80, 60, 100, 1)
    testing FisherNoncentralHypergeometric(80, 60, 100, 10)
    testing FisherNoncentralHypergeometric(80, 60, 100, 0.1)
    testing WalleniusNoncentralHypergeometric(8, 6, 10, 1)
    testing WalleniusNoncentralHypergeometric(8, 6, 10, 10)
    testing WalleniusNoncentralHypergeometric(8, 6, 10, 0.1)
    testing WalleniusNoncentralHypergeometric(40, 30, 50, 1)
    testing WalleniusNoncentralHypergeometric(40, 30, 50, 0.5)
    testing WalleniusNoncentralHypergeometric(40, 30, 50, 2)

    [Continuous]
    ------------
    testing Arcsine()
    testing Arcsine(2.0)
    testing Arcsine(1.0, 2.5)
    testing Arcsine(-1.0, 1.0)
    testing Beta(2.0, 2.0)
    testing Beta(3.0, 4.0)
    testing Beta(17.0, 13.0)
    testing BetaPrime()
    testing BetaPrime(3.0)
    testing BetaPrime(3.0, 5.0)
    testing BetaPrime(5.0, 3.0)
    testing Cauchy()
    testing Cauchy(2.0)
    testing Cauchy(0.0, 1.0)
    testing Cauchy(10.0, 1.0)
    testing Cauchy(2.0, 10.0)
    testing Chi(1)
    testing Chi(2)
    testing Chi(3)
    testing Chi(12)
    testing Chisq(1)
    testing Chisq(8)
    testing Chisq(20)
    testing Cosine()
    testing Cosine(1.5)
    testing Cosine(2.0, 2.8)
    testing Erlang()
    testing Erlang(3)
    testing Erlang(3, 1.0)
    testing Erlang(5, 2.0)
    testing Exponential()
    testing Exponential(2.0)
    testing Exponential(6.5)
    testing FDist(6.0, 8.0)
    testing FDist(8.0, 6.0)
    testing FDist(30, 40)
    testing Frechet()
    testing Frechet(0.5)
    testing Frechet(3.0)
    testing Frechet(20.0)
    testing Frechet(60.0)
    testing Frechet(0.5, 2.0)
    testing Frechet(3.0, 2.0)
    testing Gamma()
    testing Gamma(2.0)
    testing Gamma(1.0, 1.0)
    testing Gamma(3.0, 1.0)
    testing Gamma(3.0, 2.0)
    testing GeneralizedExtremeValue(1.0, 1.0, 1.0)
    testing GeneralizedExtremeValue(0.0, 1.0, 0.0)
    testing GeneralizedExtremeValue(0.0, 1.0, 1.1)
    testing GeneralizedExtremeValue(0.0, 1.0, 0.6)
    testing GeneralizedExtremeValue(0.0, 1.0, 0.3)
    testing GeneralizedExtremeValue(1.0, 1.0, -1.0)
    testing GeneralizedExtremeValue(-1.0, 0.5, 0.6)
    testing GeneralizedPareto()
    testing GeneralizedPareto(1.0, 1.0)
    testing GeneralizedPareto(0.1, 2.0)
    testing GeneralizedPareto(1.0, 1.0, 1.0)
    testing GeneralizedPareto(-1.5, 0.5, 2.0)
    testing Gumbel()
    testing Gumbel(3.0)
    testing Gumbel(3.0, 5.0)
    testing Gumbel(5.0, 3.0)
    testing InverseGamma()
    testing InverseGamma(2.0)
    testing InverseGamma(1.0, 1.0)
    testing InverseGamma(1.0, 2.0)
    testing InverseGamma(2.0, 1.0)
    testing InverseGamma(2.0, 3.0)
    testing InverseGaussian()
    testing InverseGaussian(0.8)
    testing InverseGaussian(2.0)
    testing InverseGaussian(1.0, 1.0)
    testing InverseGaussian(2.0, 1.5)
    testing InverseGaussian(2.0, 7.0)
    testing Laplace()
    testing Laplace(2.0)
    testing Laplace(0.0, 1.0)
    testing Laplace(5.0, 1.0)
    testing Laplace(5.0, 1.5)
    testing Levy()
    testing Levy(2)
    testing Levy(2, 8)
    testing Levy(3.0, 3)
    testing Logistic()
    testing Logistic(2.0)
    testing Logistic(0.0, 1.0)
    testing Logistic(5.0, 1.0)
    testing Logistic(2.0, 1.5)
    testing Logistic(5.0, 1.5)
    testing LogNormal()
    testing LogNormal(1.0)
    testing LogNormal(0.0, 2.0)
    testing LogNormal(1.0, 2.0)
    testing LogNormal(3.0, 0.5)
    testing LogNormal(3.0, 1.0)
    testing LogNormal(3.0, 2.0)
    testing NoncentralBeta(2, 2, 0)
    testing NoncentralBeta(2, 6, 5)
    testing NoncentralChisq(2, 2)
    testing NoncentralChisq(2, 5)
    testing NoncentralF(2, 2, 2)
    testing NoncentralF(8, 10, 5)
    testing NoncentralT(2, 2)
    testing NoncentralT(10, 2)
    testing Normal()
    testing Normal(2.0)
    testing Normal(-3.0, 2.0)
    testing Normal(1.0, 10.0)
    testing NormalInverseGaussian(1.7, 1.8, 1.2, 2.3)

signal (15): Terminated
in expression starting at none:13

signal (15): Terminated
in expression starting at /home/pkgeval/.julia/packages/StatsKit/GbRKr/test/runtests.jl:8
pthread_cond_wait at /lib/x86_64-linux-gnu/libpthread.so.0 (unknown line)
pthread_cond_wait at /lib/x86_64-linux-gnu/libpthread.so.0 (unknown line)
