Julia Version 1.5.0-DEV.162
Commit fba188c5ea (2020-01-28 03:57 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-8.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

 Resolving package versions...
 Installed URIParser ────── v0.4.0
 Installed FTPClient ────── v1.0.1
 Installed LibCURL ──────── v0.5.2
 Installed BinaryProvider ─ v0.5.8
  Updating `~/.julia/environments/v1.5/Project.toml`
  [01fcc997] + FTPClient v1.0.1
  Updating `~/.julia/environments/v1.5/Manifest.toml`
  [b99e7846] + BinaryProvider v0.5.8
  [01fcc997] + FTPClient v1.0.1
  [b27032c2] + LibCURL v0.5.2
  [30578b45] + URIParser v0.4.0
  [2a0f44e3] + Base64 
  [8ba89e20] + Distributed 
  [b77e0a4c] + InteractiveUtils 
  [8f399da3] + Libdl 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [6462fe0b] + Sockets 
  [8dfed614] + Test 
  [4ec0a83e] + Unicode 
  Building LibCURL → `~/.julia/packages/LibCURL/lWJxD/deps/build.log`
  Updating `/tmp/jl_Lf6079/Project.toml`
 [no changes]
  Updating `/tmp/jl_Lf6079/Manifest.toml`
 [no changes]
   Testing FTPClient
 Installed Parsers ──────────── v0.3.10
 Installed Zlib_jll ─────────── v1.2.11+8
 Installed Libiconv_jll ─────── v1.16.0+1
 Installed JSON ─────────────── v0.21.0
 Installed PyCall ───────────── v1.91.2
 Installed VersionParsing ───── v1.2.0
 Installed FTPServer ────────── v0.2.0
 Installed EzXML ────────────── v1.1.0
 Installed Mocking ──────────── v0.7.1
 Installed Syslogs ──────────── v0.3.0
 Installed DataStructures ───── v0.17.9
 Installed OrderedCollections ─ v1.1.0
 Installed XML2_jll ─────────── v2.9.9+1
 Installed MacroTools ───────── v0.5.3
 Installed Conda ────────────── v1.3.0
 Installed Memento ──────────── v0.12.1
 Installed TimeZones ────────── v0.11.0
 Installed ExprTools ────────── v0.1.0
  Updating `/tmp/jl_zfu3WN/Project.toml`
  [9c2b0ca7] + FTPServer v0.2.0
  Updating `/tmp/jl_zfu3WN/Manifest.toml`
  [8f4d0f93] + Conda v1.3.0
  [864edb3b] + DataStructures v0.17.9
  [e2ba6199] + ExprTools v0.1.0
  [8f5d6c58] + EzXML v1.1.0
  [9c2b0ca7] + FTPServer v0.2.0
  [682c06a0] + JSON v0.21.0
  [94ce4f54] + Libiconv_jll v1.16.0+1
  [1914dd2f] + MacroTools v0.5.3
  [f28f55f0] + Memento v0.12.1
  [78c3b35d] + Mocking v0.7.1
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.10
  [438e738f] + PyCall v1.91.2
  [cea106d9] + Syslogs v0.3.0
  [f269a46b] + TimeZones v0.11.0
  [81def892] + VersionParsing v1.2.0
  [02c8fc9c] + XML2_jll v2.9.9+1
  [83775a58] + Zlib_jll v1.2.11+8
  [ade2ca70] + Dates 
  [76f85450] + LibGit2 
  [37e2e46d] + LinearAlgebra 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [cf7118a7] + UUIDs 
  Building Conda ────→ `~/.julia/packages/Conda/kLXeC/deps/build.log`
  Updating `/tmp/jl_jiuvOR/Project.toml`
 [no changes]
  Updating `/tmp/jl_jiuvOR/Manifest.toml`
 [no changes]
  Building PyCall ───→ `~/.julia/packages/PyCall/ttONZ/deps/build.log`
  Updating `/tmp/jl_vw610K/Project.toml`
 [no changes]
  Updating `/tmp/jl_vw610K/Manifest.toml`
 [no changes]
  Building TimeZones → `~/.julia/packages/TimeZones/HAL5Z/deps/build.log`
  Updating `/tmp/jl_t8H2k8/Project.toml`
 [no changes]
  Updating `/tmp/jl_t8H2k8/Manifest.toml`
 [no changes]
Running sandbox
Status `/tmp/jl_zfu3WN/Project.toml`
  [01fcc997] FTPClient v1.0.1
  [9c2b0ca7] FTPServer v0.2.0
  [b27032c2] LibCURL v0.5.2
  [30578b45] URIParser v0.4.0
  [8dfed614] Test 
ERROR: LoadError: InitError: PyError (PyImport_ImportModule

The Python package OpenSSL.crypto could not be found by pyimport. Usually this means
that you did not install OpenSSL.crypto in the Python version being used by PyCall.

PyCall is currently configured to use the Python version at:

/usr/bin/python3

and you should use whatever mechanism you usually use (apt-get, pip, conda,
etcetera) to install the Python package containing the OpenSSL.crypto module.

One alternative is to re-configure PyCall to use a different Python
version on your system: set ENV["PYTHON"] to the path/name of the python
executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.

Another alternative is to configure PyCall to use a Julia-specific Python
distribution via the Conda.jl package (which installs a private Anaconda
Python distribution), which has the advantage that packages can be installed
and kept up-to-date via Julia.  As explained in the PyCall documentation,
set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
To install the OpenSSL.crypto module, you can use `pyimport_conda("OpenSSL.crypto", PKG)`,
where PKG is the Anaconda package the contains the module OpenSSL.crypto,
or alternatively you can use the Conda package directly (via
`using Conda` followed by `Conda.add` etcetera).

) <class 'ModuleNotFoundError'>
ModuleNotFoundError("No module named 'OpenSSL'",)

Stacktrace:
 [1] pyimport(::String) at /home/pkgeval/.julia/packages/PyCall/ttONZ/src/PyCall.jl:544
 [2] pyimport_conda(::String, ::String, ::String) at /home/pkgeval/.julia/packages/PyCall/ttONZ/src/PyCall.jl:702
 [3] pyimport_conda at /home/pkgeval/.julia/packages/PyCall/ttONZ/src/PyCall.jl:701 [inlined]
 [4] __init__() at /home/pkgeval/.julia/packages/FTPServer/2u0Pc/src/FTPServer.jl:37
 [5] _include_from_serialized(::String, ::Array{Any,1}) at ./loading.jl:697
 [6] _require_from_serialized(::String) at ./loading.jl:748
 [7] _require(::Base.PkgId) at ./loading.jl:1039
 [8] require(::Base.PkgId) at ./loading.jl:927
 [9] require(::Module, ::Symbol) at ./loading.jl:922
 [10] include(::String) at ./client.jl:439
 [11] top-level scope at none:6
during initialization of module FTPServer
in expression starting at /home/pkgeval/.julia/packages/FTPClient/5MZUK/test/runtests.jl:3
err = ProcessFailedException(Base.Process[Process(`/opt/julia/bin/julia -Cnative -J/opt/julia/lib/julia/sys.so -g1 --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --inline=yes --startup-file=no --track-allocation=none --eval 'append!(empty!(Base.DEPOT_PATH), ["/home/pkgeval/.julia", "/opt/julia/local/share/julia", "/opt/julia/share/julia", "/usr/local/share/julia"])
append!(empty!(Base.DL_LOAD_PATH), String[])

cd("/home/pkgeval/.julia/packages/FTPClient/5MZUK/test")
append!(empty!(ARGS), String[])
include("/home/pkgeval/.julia/packages/FTPClient/5MZUK/test/runtests.jl")
'`, ProcessExited(1))])
ERROR: Package FTPClient errored during testing
Stacktrace:
 [1] pkgerror(::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Types.jl:54
 [2] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Operations.jl:1471
 [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:313
 [4] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:300
 [5] #test#66 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:294 [inlined]
 [6] test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:294 [inlined]
 [7] #test#65 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:293 [inlined]
 [8] test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:293 [inlined]
 [9] test(::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:292
 [10] test(::String) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:292
 [11] top-level scope at none:13
