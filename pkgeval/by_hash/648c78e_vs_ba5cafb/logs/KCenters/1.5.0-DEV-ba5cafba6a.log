Julia Version 1.5.0-DEV.654
Commit ba5cafba6a (2020-04-20 23:25 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed MappedArrays ──────────────── v0.2.2
  Installed TableTraits ───────────────── v1.0.0
  Installed DataAPI ───────────────────── v1.2.0
  Installed OrderedCollections ────────── v1.1.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed KCenters ──────────────────── v0.2.2
  Installed MLDataUtils ───────────────── v0.5.1
  Installed MLDataPattern ─────────────── v0.5.1
  Installed InvertedIndices ───────────── v1.0.0
  Installed DataValueInterfaces ───────── v1.0.0
  Installed Parsers ───────────────────── v1.0.2
  Installed JSON ──────────────────────── v0.21.0
  Installed Missings ──────────────────── v0.4.3
  Installed CategoricalArrays ─────────── v0.7.7
  Installed DataStructures ────────────── v0.17.13
  Installed DataFrames ────────────────── v0.20.2
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed Reexport ──────────────────── v0.2.0
  Installed LearnBase ─────────────────── v0.2.2
  Installed StatsBase ─────────────────── v0.32.2
  Installed PooledArrays ──────────────── v0.5.3
  Installed Compat ────────────────────── v3.8.0
  Installed Tables ────────────────────── v1.0.4
  Installed SimilaritySearch ──────────── v0.3.19
  Installed MLLabelUtils ──────────────── v0.5.2
Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.8.0
  [9a962f9c] + DataAPI v1.2.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.13
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.1
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v1.0.2
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_wmXHSR/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_wmXHSR/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.8.0
  [9a962f9c] DataAPI v1.2.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.13
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.1
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v1.0.2
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0723782532413801
[ Info: 0.9323044313987097
[ Info: 0.8302954188982645
[ Info: 0.5552099955578645
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.3308493535965681
mean(cdnet.distances) = 0.34944344125688076
mean(crand.distances) = 0.341462880174319
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.431640625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.431640625,"f1":null,"seconds":2.825632691383362e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.109375,"distances_sum":1158.3252119408255}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6953125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6953125,"f1":0.8097485847485855,"seconds":5.170702934265137e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.4921875,"distances_sum":2021.9334102596758}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.400390625, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.400390625,"f1":null,"seconds":3.7178397178649902e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":6.84375,"distances_sum":1051.5376890772322}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6953125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6953125,"f1":0.8097485847485855,"seconds":5.170702934265137e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.4921875,"distances_sum":2021.9334102596758}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7822265625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7822265625,"f1":0.8674549408924416,"seconds":5.668029189109802e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.7578125,"distances_sum":2351.5391859608694}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.931536172161173,"seconds":6.036832928657532e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.9296875,"distances_sum":2749.5230191553665}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8798828125,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8798828125,"f1":0.931536172161173,"seconds":6.036832928657532e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.9296875,"distances_sum":2749.5230191553665}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9669528388278391,"seconds":6.4838677644729614e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.953125,"distances_sum":3038.355272578294}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9469722985347993,"seconds":6.426125764846802e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8828125,"distances_sum":2844.86790966191}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9423828125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9669528388278391,"seconds":6.4838677644729614e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.953125,"distances_sum":3038.355272578294}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9423828125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9669528388278391,"seconds":6.4838677644729614e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.953125,"distances_sum":3038.355272578294}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.30859375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.30859375,"f1":null,"seconds":3.6284327507019043e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":4.953125,"distances_sum":839.055836124996}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1435546875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.1435546875,"f1":null,"seconds":3.244727849960327e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":4.5546875,"distances_sum":412.5921847735196}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.30859375,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.30859375,"f1":null,"seconds":3.6284327507019043e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":4.953125,"distances_sum":839.055836124996}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7900390625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7900390625,"f1":0.8699954559329567,"seconds":5.578622221946716e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.6171875,"distances_sum":2102.7631702239537}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7900390625,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7900390625,"f1":0.8699954559329567,"seconds":5.578622221946716e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.6171875,"distances_sum":2102.7631702239537}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8662109375, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.8662109375,"f1":0.9213890276390282,"seconds":5.997717380523682e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.7734375,"distances_sum":2417.0678583229187}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9549336080586085,"seconds":6.122514605522156e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.828125,"distances_sum":2671.8864028625826}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.845703125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.845703125,"f1":0.9088947510822515,"seconds":5.679205060005188e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.59375,"distances_sum":2360.006582773668}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.837890625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.837890625,"f1":0.9046136155511165,"seconds":5.731359124183655e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.59375,"distances_sum":2301.199644438215}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9208984375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9208984375,"f1":0.9549336080586085,"seconds":6.122514605522156e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.828125,"distances_sum":2671.8864028625826}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9208984375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9208984375,"f1":0.9549336080586085,"seconds":6.122514605522156e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.828125,"distances_sum":2671.8864028625826}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7841796875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7841796875,"f1":0.873160173160174,"seconds":5.891546607017517e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.5859375,"distances_sum":2000.4660754423749}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7841796875,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7841796875,"f1":0.873160173160174,"seconds":5.891546607017517e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.5859375,"distances_sum":2000.4660754423749}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9714686355311357,"seconds":6.0927122831344604e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.9296875,"distances_sum":2678.1269076744115}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94921875,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9714686355311357,"seconds":6.0927122831344604e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.9296875,"distances_sum":2678.1269076744115}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.96484375, conf: {"ssize":2,"bsize":12}, perf: {"precision":1.0,"recall":0.96484375,"f1":0.9803972069597073,"seconds":6.450340151786804e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.9453125,"distances_sum":2744.425369064388}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9716796875, conf: {"ssize":6,"bsize":13}, perf: {"precision":1.0,"recall":0.9716796875,"f1":0.984449404761905,"seconds":6.239861249923706e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.9765625,"distances_sum":2788.9665839085133}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9716796875,"state":{"ssize":6,"bsize":13},"perf":{"precision":1.0,"recall":0.9716796875,"f1":0.984449404761905,"seconds":6.239861249923706e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.9765625,"distances_sum":2788.9665839085133}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9716796875,"state":{"ssize":6,"bsize":13},"perf":{"precision":1.0,"recall":0.9716796875,"f1":0.984449404761905,"seconds":6.239861249923706e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.9765625,"distances_sum":2788.9665839085133}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7734375,"f1":0.858559496059497,"seconds":3.555789589881897e-6,"exhaustive_search_seconds":9.294599294662476e-7,"evaluations":8.484375,"distances_sum":2013.804976206716}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.166015625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.166015625,"f1":null,"seconds":1.9762665033340454e-6,"exhaustive_search_seconds":9.294599294662476e-7,"evaluations":4.6015625,"distances_sum":474.7278409164518}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4853515625, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.4853515625,"f1":0.6413295038295043,"seconds":2.641230821609497e-6,"exhaustive_search_seconds":9.294599294662476e-7,"evaluations":6.6796875,"distances_sum":1278.122253921185}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7734375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7734375,"f1":0.858559496059497,"seconds":3.555789589881897e-6,"exhaustive_search_seconds":9.294599294662476e-7,"evaluations":8.484375,"distances_sum":2013.804976206716}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9318228646353652,"seconds":3.6992132663726807e-6,"exhaustive_search_seconds":9.294599294662476e-7,"evaluations":8.6015625,"distances_sum":2576.3503204881713}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8740234375,"f1":0.9265853937728945,"seconds":3.941357135772705e-6,"exhaustive_search_seconds":9.294599294662476e-7,"evaluations":8.71875,"distances_sum":2473.9647465726775}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9451751373626379,"seconds":3.734603524208069e-6,"exhaustive_search_seconds":9.294599294662476e-7,"evaluations":8.7109375,"distances_sum":2619.1013604010172}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7744140625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7744140625,"f1":0.8590789418914425,"seconds":3.259629011154175e-6,"exhaustive_search_seconds":9.294599294662476e-7,"evaluations":8.4453125,"distances_sum":2053.9199453458864}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.904296875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.904296875,"f1":0.9451751373626379,"seconds":3.734603524208069e-6,"exhaustive_search_seconds":9.294599294662476e-7,"evaluations":8.7109375,"distances_sum":2619.1013604010172}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9704842032967036,"seconds":3.7550926208496094e-6,"exhaustive_search_seconds":9.294599294662476e-7,"evaluations":8.8984375,"distances_sum":2796.4316348521884}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9591346153846161,"seconds":4.058703780174255e-6,"exhaustive_search_seconds":9.294599294662476e-7,"evaluations":8.84375,"distances_sum":2697.653396640192}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9517342032967038,"seconds":3.460794687271118e-6,"exhaustive_search_seconds":9.294599294662476e-7,"evaluations":8.765625,"distances_sum":2683.3896009864825}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9515885156510161,"seconds":3.4980475902557373e-6,"exhaustive_search_seconds":9.294599294662476e-7,"evaluations":8.75,"distances_sum":2668.2954392818847}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":8,"bsize":10}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9638621794871799,"seconds":3.876164555549622e-6,"exhaustive_search_seconds":9.294599294662476e-7,"evaluations":8.828125,"distances_sum":2731.4354220163477}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9458390567765574,"seconds":5.559995770454407e-6,"exhaustive_search_seconds":9.294599294662476e-7,"evaluations":8.7421875,"distances_sum":2649.3897239309617}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9704842032967036,"seconds":3.7550926208496094e-6,"exhaustive_search_seconds":9.294599294662476e-7,"evaluations":8.8984375,"distances_sum":2796.4316348521884}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9704842032967036,"seconds":3.7550926208496094e-6,"exhaustive_search_seconds":9.294599294662476e-7,"evaluations":8.8984375,"distances_sum":2796.4316348521884}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5419921875, conf: {"ssize":2,"bsize":3}, perf: {"precision":null,"recall":0.5419921875,"f1":null,"seconds":4.163011908531189e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":6.8046875,"distances_sum":1279.9601764313759}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7333984375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7333984375,"f1":0.8351122835497843,"seconds":5.720183253288269e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":7.9453125,"distances_sum":1854.3239953625705}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7216796875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7216796875,"f1":0.8269527347652355,"seconds":4.688277840614319e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":7.8984375,"distances_sum":1788.1795698538913}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7333984375,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7333984375,"f1":0.8351122835497843,"seconds":5.720183253288269e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":7.9453125,"distances_sum":1854.3239953625705}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9374198717948723,"seconds":5.826354026794434e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.734375,"distances_sum":2374.7392559549726}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.93834706959707,"seconds":6.590038537979126e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.71875,"distances_sum":2372.625579446562}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9493360805860813,"seconds":6.426125764846802e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.734375,"distances_sum":2489.8098723952658}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91015625,"state":{"ssize":9,"bsize":9},"perf":{"precision":1.0,"recall":0.91015625,"f1":0.9493360805860813,"seconds":6.426125764846802e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.734375,"distances_sum":2489.8098723952658}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":9,"bsize":11}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9594754204129208,"seconds":4.408881068229675e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.84375,"distances_sum":2575.1831605597945}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":9,"bsize":12}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9722298534798539,"seconds":4.237517714500427e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.8828125,"distances_sum":2665.2654625662176}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.958984375, conf: {"ssize":5,"bsize":12}, perf: {"precision":1.0,"recall":0.958984375,"f1":0.977438186813187,"seconds":4.317611455917358e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.9140625,"distances_sum":2695.678649308138}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9575549450549454,"seconds":3.825873136520386e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.78125,"distances_sum":2556.5900614048373}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9527930402930407,"seconds":4.151836037635803e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.8203125,"distances_sum":2487.6135725388713}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9517914377289383,"seconds":3.93204391002655e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.7421875,"distances_sum":2535.2179046504025}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.958984375,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.977438186813187,"seconds":4.317611455917358e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.9140625,"distances_sum":2695.678649308138}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.958984375,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.977438186813187,"seconds":4.317611455917358e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.9140625,"distances_sum":2695.678649308138}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6884765625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6884765625,"f1":0.802053155178156,"seconds":3.5446137189865112e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":8.2578125,"distances_sum":1735.5584496543452}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.228515625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.228515625,"f1":null,"seconds":2.680346369743347e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":7.1796875,"distances_sum":569.3708870001394}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.580078125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.580078125,"f1":0.7222496253746261,"seconds":3.334134817123413e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":7.9453125,"distances_sum":1368.517391433506}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6884765625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6884765625,"f1":0.802053155178156,"seconds":3.5446137189865112e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":8.2578125,"distances_sum":1735.5584496543452}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8515625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8515625,"f1":0.9137050449550458,"seconds":3.982335329055786e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":8.8515625,"distances_sum":2280.2512686773557}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75390625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.75390625,"f1":0.850101981351982,"seconds":3.6675482988357544e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":8.546875,"distances_sum":1930.8606500264457}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9617044413919417,"seconds":4.289671778678894e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":8.96875,"distances_sum":2651.901058023173}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8623046875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8623046875,"f1":0.9198265276390284,"seconds":3.870576620101929e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":8.859375,"distances_sum":2359.74005836186}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7734375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7734375,"f1":0.8629958583083589,"seconds":3.6526471376419067e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":8.6484375,"distances_sum":1978.8845906034878}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78125, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.78125,"f1":0.868496087246088,"seconds":3.6563724279403687e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":8.546875,"distances_sum":2032.5176773255562}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9326171875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9617044413919417,"seconds":4.289671778678894e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":8.96875,"distances_sum":2651.901058023173}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9753548534798537,"seconds":4.297122359275818e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":8.96875,"distances_sum":2752.785541195906}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.958984375, conf: {"ssize":4,"bsize":12}, perf: {"precision":1.0,"recall":0.958984375,"f1":0.9777358058608061,"seconds":4.328787326812744e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":8.984375,"distances_sum":2766.107709935693}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9657222985347989,"seconds":4.1425228118896484e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":8.953125,"distances_sum":2676.7065068214256}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9737351190476192,"seconds":4.775822162628174e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":8.96875,"distances_sum":2735.2346451507565}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.958984375,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9777358058608061,"seconds":4.328787326812744e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":8.984375,"distances_sum":2766.107709935693}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.958984375,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9777358058608061,"seconds":4.328787326812744e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":8.984375,"distances_sum":2766.107709935693}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4208984375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4208984375,"f1":null,"seconds":2.818182110786438e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":6.390625,"distances_sum":936.6447768101398}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.693359375, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.693359375,"f1":0.8077453796203803,"seconds":3.5427510738372803e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":7.9140625,"distances_sum":1715.5514048399104}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1962890625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.1962890625,"f1":null,"seconds":2.419576048851013e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":5.9765625,"distances_sum":442.0434586309765}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.693359375,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.693359375,"f1":0.8077453796203803,"seconds":3.5427510738372803e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":7.9140625,"distances_sum":1715.5514048399104}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8740234375,"f1":0.9276156135531141,"seconds":4.071742296218872e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":8.5859375,"distances_sum":2395.151138489858}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8740234375,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.8740234375,"f1":0.9276156135531141,"seconds":4.071742296218872e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":8.5859375,"distances_sum":2395.151138489858}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.970707417582418,"seconds":4.461035132408142e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":8.8984375,"distances_sum":2728.8281621204023}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9522378663003669,"seconds":5.463138222694397e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":8.8203125,"distances_sum":2562.7601448963833}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9681204212454216,"seconds":5.163252353668213e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":8.8671875,"distances_sum":2726.37974395529}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9369333791208797,"seconds":4.174187779426575e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":8.65625,"distances_sum":2464.321731834807}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.970707417582418,"seconds":4.461035132408142e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":8.8984375,"distances_sum":2728.8281621204023}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.970707417582418,"seconds":4.461035132408142e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":8.8984375,"distances_sum":2728.8281621204023}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.544921875, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.544921875,"f1":0.6874670468420473,"seconds":3.9711594581604e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":6.7734375,"distances_sum":1450.9475259771164}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.544921875,"state":{"ssize":3,"bsize":3},"perf":{"precision":1.0,"recall":0.544921875,"f1":0.6874670468420473,"seconds":3.9711594581604e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":6.7734375,"distances_sum":1450.9475259771164}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7255859375, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7255859375,"f1":0.8301526598401605,"seconds":4.623085260391235e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.796875,"distances_sum":1992.7366361967054}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.755859375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.755859375,"f1":0.8540183774558783,"seconds":3.4850090742111206e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.7734375,"distances_sum":2111.4125964687887}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.755859375,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.755859375,"f1":0.8540183774558783,"seconds":3.4850090742111206e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.7734375,"distances_sum":2111.4125964687887}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9577380952380959,"seconds":3.511086106300354e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.75,"distances_sum":2775.8325025009394}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8017578125, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.8017578125,"f1":0.8805725524475534,"seconds":3.2652169466018677e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.265625,"distances_sum":2250.880450362059}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.861328125, conf: {"ssize":10,"bsize":7}, perf: {"precision":1.0,"recall":0.861328125,"f1":0.9188988095238101,"seconds":3.4105032682418823e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.46875,"distances_sum":2486.0043739538446}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9418211996337,"seconds":3.5017728805541992e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.6171875,"distances_sum":2674.814360930975}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9248046875,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.9577380952380959,"seconds":3.511086106300354e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.75,"distances_sum":2775.8325025009394}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9248046875,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.9577380952380959,"seconds":3.511086106300354e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.75,"distances_sum":2775.8325025009394}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1748046875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.1748046875,"f1":null,"seconds":2.1364539861679077e-6,"exhaustive_search_seconds":9.443610906600952e-7,"evaluations":5.984375,"distances_sum":380.1786978101173}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5595703125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5595703125,"f1":0.7008862665112671,"seconds":2.907589077949524e-6,"exhaustive_search_seconds":9.443610906600952e-7,"evaluations":7.6015625,"distances_sum":1209.3129821234493}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7880859375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7880859375,"f1":0.8694701132201138,"seconds":3.5259872674942017e-6,"exhaustive_search_seconds":9.443610906600952e-7,"evaluations":8.1484375,"distances_sum":1871.205152460976}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7880859375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7880859375,"f1":0.8694701132201138,"seconds":3.5259872674942017e-6,"exhaustive_search_seconds":9.443610906600952e-7,"evaluations":8.1484375,"distances_sum":1871.205152460976}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.794921875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.794921875,"f1":0.8764058857808863,"seconds":3.2410025596618652e-6,"exhaustive_search_seconds":9.443610906600952e-7,"evaluations":8.109375,"distances_sum":1887.2791395239747}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.794921875,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.794921875,"f1":0.8764058857808863,"seconds":3.2410025596618652e-6,"exhaustive_search_seconds":9.443610906600952e-7,"evaluations":8.109375,"distances_sum":1887.2791395239747}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.794921875,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.794921875,"f1":0.8764058857808863,"seconds":3.2410025596618652e-6,"exhaustive_search_seconds":9.443610906600952e-7,"evaluations":8.109375,"distances_sum":1887.2791395239747}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6240234375, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6240234375,"f1":0.7569826007326015,"seconds":2.816319465637207e-6,"exhaustive_search_seconds":9.052455425262451e-7,"evaluations":7.3984375,"distances_sum":1504.6740433920672}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6240234375,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.6240234375,"f1":0.7569826007326015,"seconds":2.816319465637207e-6,"exhaustive_search_seconds":9.052455425262451e-7,"evaluations":7.3984375,"distances_sum":1504.6740433920672}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8232421875, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8232421875,"f1":0.8967319139194146,"seconds":3.390014171600342e-6,"exhaustive_search_seconds":9.052455425262451e-7,"evaluations":8.2890625,"distances_sum":2127.8026792713495}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8232421875,"state":{"ssize":2,"bsize":6},"perf":{"precision":1.0,"recall":0.8232421875,"f1":0.8967319139194146,"seconds":3.390014171600342e-6,"exhaustive_search_seconds":9.052455425262451e-7,"evaluations":8.2890625,"distances_sum":2127.8026792713495}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9499885531135537,"seconds":3.606081008911133e-6,"exhaustive_search_seconds":9.052455425262451e-7,"evaluations":8.765625,"distances_sum":2446.5124212491733}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9111328125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9111328125,"f1":0.9499885531135537,"seconds":3.606081008911133e-6,"exhaustive_search_seconds":9.052455425262451e-7,"evaluations":8.765625,"distances_sum":2446.5124212491733}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9111328125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9111328125,"f1":0.9499885531135537,"seconds":3.606081008911133e-6,"exhaustive_search_seconds":9.052455425262451e-7,"evaluations":8.765625,"distances_sum":2446.5124212491733}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2294921875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2294921875,"f1":null,"seconds":2.035871148109436e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":6.625,"distances_sum":535.6685205516264}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.556640625, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.556640625,"f1":0.6966255966255973,"seconds":2.8796494007110596e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":7.5859375,"distances_sum":1243.5654207869195}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.556640625,"state":{"ssize":3,"bsize":3},"perf":{"precision":1.0,"recall":0.556640625,"f1":0.6966255966255973,"seconds":2.8796494007110596e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":7.5859375,"distances_sum":1243.5654207869195}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.701171875, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.701171875,"f1":0.8159460331335341,"seconds":3.1478703022003174e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.2734375,"distances_sum":1630.0600078425368}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7939453125, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.7939453125,"f1":0.8776993839493847,"seconds":3.2261013984680176e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.4609375,"distances_sum":1914.8774761831887}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7939453125,"state":{"ssize":7,"bsize":5},"perf":{"precision":1.0,"recall":0.7939453125,"f1":0.8776993839493847,"seconds":3.2261013984680176e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.4609375,"distances_sum":1914.8774761831887}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8515625, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.8515625,"f1":0.9134703837828843,"seconds":3.559514880180359e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.5625,"distances_sum":2137.7694058541033}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8671875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8671875,"f1":0.9230056401931408,"seconds":5.148351192474365e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.609375,"distances_sum":2219.2494051817225}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8505859375, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8505859375,"f1":0.9129120879120886,"seconds":5.854293704032898e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.53125,"distances_sum":2149.8815958954615}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9484832875457878,"seconds":6.414949893951416e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.828125,"distances_sum":2396.888247282337}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91015625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.91015625,"f1":0.9484832875457878,"seconds":6.414949893951416e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.828125,"distances_sum":2396.888247282337}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.91015625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.91015625,"f1":0.9484832875457878,"seconds":6.414949893951416e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.828125,"distances_sum":2396.888247282337}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.201171875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.201171875,"f1":null,"seconds":3.2410025596618652e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":4.8984375,"distances_sum":506.74819304125674}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.201171875,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.201171875,"f1":null,"seconds":3.2410025596618652e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":4.8984375,"distances_sum":506.74819304125674}}, beam: 2, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.201171875,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.201171875,"f1":null,"seconds":3.2410025596618652e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":4.8984375,"distances_sum":506.74819304125674}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2216796875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2216796875,"f1":null,"seconds":3.4365803003311157e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":5.7890625,"distances_sum":462.02922017502107}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.59765625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.59765625,"f1":0.7333732239982247,"seconds":4.798173904418945e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":7.5703125,"distances_sum":1269.3261293226578}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.365234375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.365234375,"f1":null,"seconds":3.98978590965271e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":6.25,"distances_sum":716.6760850440958}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.59765625,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.59765625,"f1":0.7333732239982247,"seconds":4.798173904418945e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":7.5703125,"distances_sum":1269.3261293226578}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8447265625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8447265625,"f1":0.909895833333334,"seconds":5.9194862842559814e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.6796875,"distances_sum":1957.208464422727}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8447265625,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8447265625,"f1":0.909895833333334,"seconds":5.9194862842559814e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.6796875,"distances_sum":1957.208464422727}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9605139652014656,"seconds":6.372109055519104e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.890625,"distances_sum":2297.8189045193844}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.946045100732601,"seconds":6.154179573059082e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.8515625,"distances_sum":2220.3372727681594}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9414892399267406,"seconds":6.362795829772949e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.921875,"distances_sum":2137.298470918197}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9324550449550456,"seconds":6.118789315223694e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.765625,"distances_sum":2107.6342205878605}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9287109375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9605139652014656,"seconds":6.372109055519104e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.890625,"distances_sum":2297.8189045193844}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9287109375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9605139652014656,"seconds":6.372109055519104e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.890625,"distances_sum":2297.8189045193844}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.22265625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.22265625,"f1":null,"seconds":3.430992364883423e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":6.3359375,"distances_sum":510.8849624058802}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6884765625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6884765625,"f1":0.8050255300255308,"seconds":5.107372999191284e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":7.8671875,"distances_sum":1546.606403736446}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.533203125, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.533203125,"f1":null,"seconds":4.341825842857361e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":6.8828125,"distances_sum":1175.7907591070339}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6884765625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6884765625,"f1":0.8050255300255308,"seconds":5.107372999191284e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":7.8671875,"distances_sum":1546.606403736446}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.826171875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.826171875,"f1":0.8992731227106234,"seconds":6.059184670448303e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.6875,"distances_sum":1959.1602598912182}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9471471237096243,"seconds":6.28642737865448e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.8125,"distances_sum":2316.9955494193337}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.908203125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.908203125,"f1":0.9471471237096243,"seconds":6.28642737865448e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.8125,"distances_sum":2316.9955494193337}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.956644917582418,"seconds":6.362795829772949e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.9296875,"distances_sum":2357.837687522805}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9731227106227109,"seconds":6.401911377906799e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.953125,"distances_sum":2475.495189173258}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.951171875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9731227106227109,"seconds":6.401911377906799e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.953125,"distances_sum":2475.495189173258}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.951171875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9731227106227109,"seconds":6.401911377906799e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.953125,"distances_sum":2475.495189173258}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2021484375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2021484375,"f1":null,"seconds":2.12155282497406e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":6.0234375,"distances_sum":485.11930070567814}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.21484375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.21484375,"f1":null,"seconds":2.1830201148986816e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":6.375,"distances_sum":497.05821029996713}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5517578125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5517578125,"f1":0.6946447649572656,"seconds":2.6654452085494995e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":6.6328125,"distances_sum":1137.8779817843185}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7412109375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7412109375,"f1":0.8411182567432576,"seconds":3.46451997756958e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.421875,"distances_sum":1646.8773691504239}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7412109375,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7412109375,"f1":0.8411182567432576,"seconds":3.46451997756958e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.421875,"distances_sum":1646.8773691504239}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7587890625, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7587890625,"f1":0.8539439726939735,"seconds":3.3657997846603394e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.2734375,"distances_sum":1737.172118494591}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9613698801198806,"seconds":3.861263394355774e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.84375,"distances_sum":2328.444975391653}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.931640625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9613698801198806,"seconds":3.861263394355774e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.84375,"distances_sum":2328.444975391653}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9633616383616387,"seconds":3.5297125577926636e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.875,"distances_sum":2357.0539838017994}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.935546875,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9633616383616387,"seconds":3.5297125577926636e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.875,"distances_sum":2357.0539838017994}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.935546875,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9633616383616387,"seconds":3.5297125577926636e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.875,"distances_sum":2357.0539838017994}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7421875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7421875,"f1":0.843670392107893,"seconds":3.4850090742111206e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.171875,"distances_sum":1545.7090676387177}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6796875, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6796875,"f1":0.7992975774225783,"seconds":2.8777867555618286e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":7.578125,"distances_sum":1365.0493155504269}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7421875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7421875,"f1":0.843670392107893,"seconds":3.4850090742111206e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.171875,"distances_sum":1545.7090676387177}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.833984375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.833984375,"f1":0.9021754287379296,"seconds":3.514811396598816e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.21875,"distances_sum":1875.6499122095292}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.853515625, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.853515625,"f1":0.9161630036630044,"seconds":3.596767783164978e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.3828125,"distances_sum":1912.7829518211045}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9458962912087918,"seconds":3.5706907510757446e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.65625,"distances_sum":2144.148774780715}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.82421875, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.82421875,"f1":0.8960527319902327,"seconds":3.382563591003418e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.2890625,"distances_sum":1797.1805186540832}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.90625,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.90625,"f1":0.9458962912087918,"seconds":3.5706907510757446e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.65625,"distances_sum":2144.148774780715}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9730654761904762,"seconds":3.60049307346344e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.875,"distances_sum":2279.8948383727666}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9644001831501834,"seconds":3.5017728805541992e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.8359375,"distances_sum":2210.9641436392344}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9628205128205133,"seconds":3.855675458908081e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.796875,"distances_sum":2218.049487298944}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.951171875,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9730654761904762,"seconds":3.60049307346344e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.875,"distances_sum":2279.8948383727666}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.951171875,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9730654761904762,"seconds":3.60049307346344e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.875,"distances_sum":2279.8948383727666}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.74609375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.74609375,"f1":0.8449378746253756,"seconds":3.285706043243408e-6,"exhaustive_search_seconds":1.1399388313293457e-6,"evaluations":8.1796875,"distances_sum":1642.362452928688}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5556640625, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.5556640625,"f1":0.6991617757242763,"seconds":2.609565854072571e-6,"exhaustive_search_seconds":1.1399388313293457e-6,"evaluations":7.03125,"distances_sum":1118.2352494582653}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.74609375,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.74609375,"f1":0.8449378746253756,"seconds":3.285706043243408e-6,"exhaustive_search_seconds":1.1399388313293457e-6,"evaluations":8.1796875,"distances_sum":1642.362452928688}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9471668956043959,"seconds":3.6153942346572876e-6,"exhaustive_search_seconds":1.1399388313293457e-6,"evaluations":8.671875,"distances_sum":2227.376023073809}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.960273580586081,"seconds":3.693625330924988e-6,"exhaustive_search_seconds":1.1399388313293457e-6,"evaluations":8.796875,"distances_sum":2267.5977365449603}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9492616758241761,"seconds":3.5669654607772827e-6,"exhaustive_search_seconds":1.1399388313293457e-6,"evaluations":8.7421875,"distances_sum":2231.0409253805583}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9287109375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.960273580586081,"seconds":3.693625330924988e-6,"exhaustive_search_seconds":1.1399388313293457e-6,"evaluations":8.796875,"distances_sum":2267.5977365449603}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.966796875, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.966796875,"f1":0.9820684523809529,"seconds":6.562098860740662e-6,"exhaustive_search_seconds":1.1399388313293457e-6,"evaluations":8.9453125,"distances_sum":2400.9307741991242}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9711309523809528,"seconds":6.1355531215667725e-6,"exhaustive_search_seconds":1.1399388313293457e-6,"evaluations":8.890625,"distances_sum":2331.4152060289803}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.958984375, conf: {"ssize":7,"bsize":13}, perf: {"precision":1.0,"recall":0.958984375,"f1":0.9775297619047623,"seconds":6.105750799179077e-6,"exhaustive_search_seconds":1.1399388313293457e-6,"evaluations":8.953125,"distances_sum":2376.6332336487153}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.966796875,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.966796875,"f1":0.9820684523809529,"seconds":6.562098860740662e-6,"exhaustive_search_seconds":1.1399388313293457e-6,"evaluations":8.9453125,"distances_sum":2400.9307741991242}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.966796875,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.966796875,"f1":0.9820684523809529,"seconds":6.562098860740662e-6,"exhaustive_search_seconds":1.1399388313293457e-6,"evaluations":8.9453125,"distances_sum":2400.9307741991242}}, n: 9
mean(cfft.distances) = 0.3308493530097676
mean(cdnet.distances) = 0.6614381201123687
mean(crand.distances) = 0.34192324464621254
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8977777777777778
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.9022222222222224
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8955555555555555
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.9044444444444445
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.9
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8533333333333334
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.9199999999999999
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.8844444444444445
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.94
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.94
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8488888888888889
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.9066666666666667
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8911111111111111
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.9244444444444445
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8933333333333334
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8888888888888888
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9244444444444445
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9244444444444445
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.86
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8711111111111111
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8777777777777778
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8577777777777778
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9244444444444445
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9222222222222222
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8822222222222221
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9044444444444445
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.8999999999999999
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.9022222222222221
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8911111111111111
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8977777777777778
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9088888888888889
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9088888888888889
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 13]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 3, 14]]
** centroid: 7, normalized-entropy: 0.6722948170756378, [(2, 3), (3, 14)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 13]]
*** center 10: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 10, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 13, 1]]
** centroid: 12, normalized-entropy: 0.3712323266408756, [(2, 13), (3, 1)]
finished with 13 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 2, 3, 2, 3, 3, 3, 1, 2, 2]
acc = 0.9666666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 13]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 3, 14]]
** centroid: 7, normalized-entropy: 0.6722948170756378, [(2, 3), (3, 14)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 13]]
*** center 10: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 10, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 13, 1]]
** centroid: 12, normalized-entropy: 0.3712323266408756, [(2, 13), (3, 1)]
finished with 13 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 2, 3, 2, 3, 3, 3, 1, 2, 2]
acc = 0.9666666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 13]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 3, 14]]
** centroid: 7, normalized-entropy: 0.6722948170756378, [(2, 3), (3, 14)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 13]]
*** center 10: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 10, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 13, 1]]
** centroid: 12, normalized-entropy: 0.3712323266408756, [(2, 13), (3, 1)]
finished with 13 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 2, 3, 2, 3, 3, 3, 1, 2, 2]
acc = 0.9666666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 13]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 3, 14]]
** centroid: 7, normalized-entropy: 0.6722948170756378, [(2, 3), (3, 14)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 13]]
*** center 10: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 10, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 13, 1]]
** centroid: 12, normalized-entropy: 0.3712323266408756, [(2, 13), (3, 1)]
finished with 13 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 2, 3, 2, 3, 3, 3, 1, 2, 2]
acc = 0.9666666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 13]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 3, 14]]
** centroid: 7, normalized-entropy: 0.6722948170756378, [(2, 3), (3, 14)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 13]]
*** center 10: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 10, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 13, 1]]
** centroid: 12, normalized-entropy: 0.3712323266408756, [(2, 13), (3, 1)]
finished with 13 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 2, 3, 2, 3, 3, 3, 1, 2, 2]
acc = 0.9666666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 13]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 3, 14]]
** centroid: 7, normalized-entropy: 0.6722948170756378, [(2, 3), (3, 14)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 13]]
*** center 10: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 10, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 13, 1]]
** centroid: 12, normalized-entropy: 0.3712323266408756, [(2, 13), (3, 1)]
finished with 13 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 2, 3, 2, 3, 3, 3, 1, 2, 2]
acc = 0.9533333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 13]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 3, 14]]
** centroid: 7, normalized-entropy: 0.6722948170756378, [(2, 3), (3, 14)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 13]]
*** center 10: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 10, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 13, 1]]
** centroid: 12, normalized-entropy: 0.3712323266408756, [(2, 13), (3, 1)]
finished with 13 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 2, 3, 2, 3, 3, 3, 1, 2, 2]
acc = 0.96
*** finished computation of 12 references, err: [Inf, 0.5182461724678675] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 11, 21]]
** centroid: 1, normalized-entropy: 0.9283620723948678, [(2, 11), (3, 21)]
*** center 2: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 5: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 29, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 5]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 4, 7]]
** centroid: 8, normalized-entropy: 0.9456603046006401, [(2, 4), (3, 7)]
*** center 9: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 1]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
finished with 14 centroids; started with 12
acc = 0.9733333333333334
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.36076725723904307] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36076725723904307, 0.3327397607887785] ***
*** starting iteration: 2; err: [Inf, 0.36076725723904307, 0.3327397607887785] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36076725723904307, 0.3327397607887785, 0.3264587617817673] ***
*** starting iteration: 3; err: [Inf, 0.36076725723904307, 0.3327397607887785, 0.3264587617817673] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36076725723904307, 0.3327397607887785, 0.3264587617817673, 0.3230229063000105] ***
*** starting iteration: 4; err: [Inf, 0.36076725723904307, 0.3327397607887785, 0.3264587617817673, 0.3230229063000105] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36076725723904307, 0.3327397607887785, 0.3264587617817673, 0.3230229063000105, 0.3164675685160377] ***
*** starting iteration: 5; err: [Inf, 0.36076725723904307, 0.3327397607887785, 0.3264587617817673, 0.3230229063000105, 0.3164675685160377] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36076725723904307, 0.3327397607887785, 0.3264587617817673, 0.3230229063000105, 0.3164675685160377, 0.3102543689317543] ***
*** starting iteration: 6; err: [Inf, 0.36076725723904307, 0.3327397607887785, 0.3264587617817673, 0.3230229063000105, 0.3164675685160377, 0.3102543689317543] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36076725723904307, 0.3327397607887785, 0.3264587617817673, 0.3230229063000105, 0.3164675685160377, 0.3102543689317543, 0.29318972760755513] ***
*** starting iteration: 7; err: [Inf, 0.36076725723904307, 0.3327397607887785, 0.3264587617817673, 0.3230229063000105, 0.3164675685160377, 0.3102543689317543, 0.29318972760755513] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36076725723904307, 0.3327397607887785, 0.3264587617817673, 0.3230229063000105, 0.3164675685160377, 0.3102543689317543, 0.29318972760755513, 0.2924209865853302] ***
*** finished computation of 3 references, err: [Inf, 0.36076725723904307, 0.3327397607887785, 0.3264587617817673, 0.3230229063000105, 0.3164675685160377, 0.3102543689317543, 0.29318972760755513, 0.2924209865853302] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [164, 25, 0]]
** centroid: 1, normalized-entropy: 0.563644892465867, [(1, 164), (2, 25)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 195, 24]]
** centroid: 2, normalized-entropy: 0.4986751363204345, [(2, 195), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [213, 45, 0]]
** centroid: 3, normalized-entropy: 0.6677135405281421, [(1, 213), (2, 45)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.37296262875901304] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37296262875901304, 0.30619893760445555] ***
*** starting iteration: 2; err: [Inf, 0.37296262875901304, 0.30619893760445555] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37296262875901304, 0.30619893760445555, 0.3038543756399583] ***
*** starting iteration: 3; err: [Inf, 0.37296262875901304, 0.30619893760445555, 0.3038543756399583] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37296262875901304, 0.30619893760445555, 0.3038543756399583, 0.3026057454224609] ***
*** starting iteration: 4; err: [Inf, 0.37296262875901304, 0.30619893760445555, 0.3038543756399583, 0.3026057454224609] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37296262875901304, 0.30619893760445555, 0.3038543756399583, 0.3026057454224609, 0.30161147465923793] ***
*** finished computation of 3 references, err: [Inf, 0.37296262875901304, 0.30619893760445555, 0.3038543756399583, 0.3026057454224609, 0.30161147465923793] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [66, 190, 24]]
** centroid: 1, normalized-entropy: 0.7412468458966909, [(1, 66), (2, 190), (3, 24)]
*** center 2: selecting labels [1] (freq >= 1) [from [176, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [135, 75, 0]]
** centroid: 3, normalized-entropy: 0.940285958670631, [(1, 135), (2, 75)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.42506690063922925] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42506690063922925, 0.3050993955044866] ***
*** starting iteration: 2; err: [Inf, 0.42506690063922925, 0.3050993955044866] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42506690063922925, 0.3050993955044866, 0.29978621604599653] ***
*** starting iteration: 3; err: [Inf, 0.42506690063922925, 0.3050993955044866, 0.29978621604599653] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42506690063922925, 0.3050993955044866, 0.29978621604599653, 0.297950794615935] ***
*** starting iteration: 4; err: [Inf, 0.42506690063922925, 0.3050993955044866, 0.29978621604599653, 0.297950794615935] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42506690063922925, 0.3050993955044866, 0.29978621604599653, 0.297950794615935, 0.2974457694126804] ***
*** finished computation of 3 references, err: [Inf, 0.42506690063922925, 0.3050993955044866, 0.29978621604599653, 0.297950794615935, 0.2974457694126804] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [226, 25, 0]]
** centroid: 1, normalized-entropy: 0.4677314015595348, [(1, 226), (2, 25)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [171, 42, 0]]
** centroid: 2, normalized-entropy: 0.7162583911075451, [(1, 171), (2, 42)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 186, 17]]
** centroid: 3, normalized-entropy: 0.4152353892671978, [(2, 186), (3, 17)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.41715868337378686] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41715868337378686, 0.31457256488334473] ***
*** starting iteration: 2; err: [Inf, 0.41715868337378686, 0.31457256488334473] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41715868337378686, 0.31457256488334473, 0.3091517296721642] ***
*** starting iteration: 3; err: [Inf, 0.41715868337378686, 0.31457256488334473, 0.3091517296721642] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41715868337378686, 0.31457256488334473, 0.3091517296721642, 0.3083720008941783] ***
*** finished computation of 3 references, err: [Inf, 0.41715868337378686, 0.31457256488334473, 0.3091517296721642, 0.3083720008941783] ***
*** center 1: selecting labels [1] (freq >= 1) [from [211, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [67, 169, 17]]
** centroid: 2, normalized-entropy: 0.7307660468412716, [(1, 67), (2, 169), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [119, 84, 0]]
** centroid: 3, normalized-entropy: 0.9784493292686188, [(1, 119), (2, 84)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.40519892985931133] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40519892985931133, 0.3157501329445857] ***
*** starting iteration: 2; err: [Inf, 0.40519892985931133, 0.3157501329445857] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40519892985931133, 0.3157501329445857, 0.30958942677741913] ***
*** starting iteration: 3; err: [Inf, 0.40519892985931133, 0.3157501329445857, 0.30958942677741913] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40519892985931133, 0.3157501329445857, 0.30958942677741913, 0.3060870839037124] ***
*** starting iteration: 4; err: [Inf, 0.40519892985931133, 0.3157501329445857, 0.30958942677741913, 0.3060870839037124] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40519892985931133, 0.3157501329445857, 0.30958942677741913, 0.3060870839037124, 0.3036652722408523] ***
*** starting iteration: 5; err: [Inf, 0.40519892985931133, 0.3157501329445857, 0.30958942677741913, 0.3060870839037124, 0.3036652722408523] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40519892985931133, 0.3157501329445857, 0.30958942677741913, 0.3060870839037124, 0.3036652722408523, 0.30292249146033484] ***
*** finished computation of 3 references, err: [Inf, 0.40519892985931133, 0.3157501329445857, 0.30958942677741913, 0.3060870839037124, 0.3036652722408523, 0.30292249146033484] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [153, 44, 0]]
** centroid: 1, normalized-entropy: 0.7662379557405551, [(1, 153), (2, 44)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [243, 16, 0]]
** centroid: 2, normalized-entropy: 0.33445524376298336, [(1, 243), (2, 16)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 188, 23]]
** centroid: 3, normalized-entropy: 0.49690663370857324, [(2, 188), (3, 23)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.21615083944807584] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21615083944807584, 0.19774193155744277] ***
*** starting iteration: 2; err: [Inf, 0.21615083944807584, 0.19774193155744277] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21615083944807584, 0.19774193155744277, 0.19363353151951107] ***
*** starting iteration: 3; err: [Inf, 0.21615083944807584, 0.19774193155744277, 0.19363353151951107] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21615083944807584, 0.19774193155744277, 0.19363353151951107, 0.19262564688635705] ***
*** starting iteration: 4; err: [Inf, 0.21615083944807584, 0.19774193155744277, 0.19363353151951107, 0.19262564688635705] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21615083944807584, 0.19774193155744277, 0.19363353151951107, 0.19262564688635705, 0.19199417335576974] ***
*** finished computation of 7 references, err: [Inf, 0.21615083944807584, 0.19774193155744277, 0.19363353151951107, 0.19262564688635705, 0.19199417335576974] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [94, 4, 0]]
** centroid: 1, normalized-entropy: 0.2460225782203316, [(1, 94), (2, 4)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [60, 23, 0]]
** centroid: 2, normalized-entropy: 0.8514808683852091, [(1, 60), (2, 23)]
*** center 3: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [91, 18, 0]]
** centroid: 4, normalized-entropy: 0.6464599001526788, [(1, 91), (2, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [56, 31, 0]]
** centroid: 5, normalized-entropy: 0.9395876193289702, [(1, 56), (2, 31)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 93, 23]]
** centroid: 6, normalized-entropy: 0.7184663880382773, [(2, 93), (3, 23)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 96, 1]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2959862867819852] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2959862867819852, 0.2434993570946601] ***
*** starting iteration: 2; err: [Inf, 0.2959862867819852, 0.2434993570946601] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2959862867819852, 0.2434993570946601, 0.22143019672631212] ***
*** starting iteration: 3; err: [Inf, 0.2959862867819852, 0.2434993570946601, 0.22143019672631212] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2959862867819852, 0.2434993570946601, 0.22143019672631212, 0.2070146490344317] ***
*** starting iteration: 4; err: [Inf, 0.2959862867819852, 0.2434993570946601, 0.22143019672631212, 0.2070146490344317] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2959862867819852, 0.2434993570946601, 0.22143019672631212, 0.2070146490344317, 0.19905075749886436] ***
*** starting iteration: 5; err: [Inf, 0.2959862867819852, 0.2434993570946601, 0.22143019672631212, 0.2070146490344317, 0.19905075749886436] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2959862867819852, 0.2434993570946601, 0.22143019672631212, 0.2070146490344317, 0.19905075749886436, 0.19367794899166613] ***
*** starting iteration: 6; err: [Inf, 0.2959862867819852, 0.2434993570946601, 0.22143019672631212, 0.2070146490344317, 0.19905075749886436, 0.19367794899166613] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2959862867819852, 0.2434993570946601, 0.22143019672631212, 0.2070146490344317, 0.19905075749886436, 0.19367794899166613, 0.1915171843153359] ***
*** starting iteration: 7; err: [Inf, 0.2959862867819852, 0.2434993570946601, 0.22143019672631212, 0.2070146490344317, 0.19905075749886436, 0.19367794899166613, 0.1915171843153359] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2959862867819852, 0.2434993570946601, 0.22143019672631212, 0.2070146490344317, 0.19905075749886436, 0.19367794899166613, 0.1915171843153359, 0.1898638143998639] ***
*** starting iteration: 8; err: [Inf, 0.2959862867819852, 0.2434993570946601, 0.22143019672631212, 0.2070146490344317, 0.19905075749886436, 0.19367794899166613, 0.1915171843153359, 0.1898638143998639] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2959862867819852, 0.2434993570946601, 0.22143019672631212, 0.2070146490344317, 0.19905075749886436, 0.19367794899166613, 0.1915171843153359, 0.1898638143998639, 0.18953414372764696] ***
*** finished computation of 7 references, err: [Inf, 0.2959862867819852, 0.2434993570946601, 0.22143019672631212, 0.2070146490344317, 0.19905075749886436, 0.19367794899166613, 0.1915171843153359, 0.1898638143998639, 0.18953414372764696] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [4, 80, 0]]
** centroid: 1, normalized-entropy: 0.2761954276479391, [(1, 4), (2, 80)]
*** center 2: selecting labels [1] (freq >= 2) [from [110, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [68, 16, 0]]
** centroid: 3, normalized-entropy: 0.7024665512903904, [(1, 68), (2, 16)]
*** center 4: selecting labels [1] (freq >= 2) [from [105, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [105, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 99, 17]]
** centroid: 6, normalized-entropy: 0.6011432909108727, [(2, 99), (3, 17)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [5, 58, 0]]
** centroid: 7, normalized-entropy: 0.39993804743902767, [(1, 5), (2, 58)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.33014000659582315] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33014000659582315, 0.23794430655858728] ***
*** starting iteration: 2; err: [Inf, 0.33014000659582315, 0.23794430655858728] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33014000659582315, 0.23794430655858728, 0.22244961704427693] ***
*** starting iteration: 3; err: [Inf, 0.33014000659582315, 0.23794430655858728, 0.22244961704427693] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33014000659582315, 0.23794430655858728, 0.22244961704427693, 0.20992039031219267] ***
*** starting iteration: 4; err: [Inf, 0.33014000659582315, 0.23794430655858728, 0.22244961704427693, 0.20992039031219267] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33014000659582315, 0.23794430655858728, 0.22244961704427693, 0.20992039031219267, 0.20236399868221164] ***
*** starting iteration: 5; err: [Inf, 0.33014000659582315, 0.23794430655858728, 0.22244961704427693, 0.20992039031219267, 0.20236399868221164] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33014000659582315, 0.23794430655858728, 0.22244961704427693, 0.20992039031219267, 0.20236399868221164, 0.19622962873825606] ***
*** starting iteration: 6; err: [Inf, 0.33014000659582315, 0.23794430655858728, 0.22244961704427693, 0.20992039031219267, 0.20236399868221164, 0.19622962873825606] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33014000659582315, 0.23794430655858728, 0.22244961704427693, 0.20992039031219267, 0.20236399868221164, 0.19622962873825606, 0.1932128844307973] ***
*** starting iteration: 7; err: [Inf, 0.33014000659582315, 0.23794430655858728, 0.22244961704427693, 0.20992039031219267, 0.20236399868221164, 0.19622962873825606, 0.1932128844307973] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33014000659582315, 0.23794430655858728, 0.22244961704427693, 0.20992039031219267, 0.20236399868221164, 0.19622962873825606, 0.1932128844307973, 0.19149290936136118] ***
*** starting iteration: 8; err: [Inf, 0.33014000659582315, 0.23794430655858728, 0.22244961704427693, 0.20992039031219267, 0.20236399868221164, 0.19622962873825606, 0.1932128844307973, 0.19149290936136118] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33014000659582315, 0.23794430655858728, 0.22244961704427693, 0.20992039031219267, 0.20236399868221164, 0.19622962873825606, 0.1932128844307973, 0.19149290936136118, 0.19052091976795263] ***
*** finished computation of 7 references, err: [Inf, 0.33014000659582315, 0.23794430655858728, 0.22244961704427693, 0.20992039031219267, 0.20236399868221164, 0.19622962873825606, 0.1932128844307973, 0.19149290936136118, 0.19052091976795263] ***
*** center 1: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 100, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [103, 12, 0]]
** centroid: 3, normalized-entropy: 0.4826282743485024, [(1, 103), (2, 12)]
*** center 4: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [78, 28, 0]]
** centroid: 5, normalized-entropy: 0.8329458235361399, [(1, 78), (2, 28)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 64, 23]]
** centroid: 6, normalized-entropy: 0.8332661971210122, [(2, 64), (3, 23)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [56, 44, 0]]
** centroid: 7, normalized-entropy: 0.9895875212220558, [(1, 56), (2, 44)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2791019169566174] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2791019169566174, 0.1831573358007676] ***
*** finished computation of 7 references, err: [Inf, 0.2791019169566174, 0.1831573358007676] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [110, 25, 0]]
** centroid: 1, normalized-entropy: 0.6912898694057888, [(1, 110), (2, 25)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [86, 43, 0]]
** centroid: 2, normalized-entropy: 0.9182958340544894, [(1, 86), (2, 43)]
*** center 3: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [115, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 146, 9]]
** centroid: 5, normalized-entropy: 0.31971336908415166, [(2, 146), (3, 9)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 51, 15]]
** centroid: 6, normalized-entropy: 0.7732266742876346, [(2, 51), (3, 15)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.28115321439865426] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28115321439865426, 0.18878699790454587] ***
*** finished computation of 7 references, err: [Inf, 0.28115321439865426, 0.18878699790454587] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 122, 1]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [88, 54, 0]]
** centroid: 2, normalized-entropy: 0.9582407282588409, [(1, 88), (2, 54)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 57, 16]]
** centroid: 3, normalized-entropy: 0.7586638628883696, [(2, 57), (3, 16)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [128, 20, 0]]
** centroid: 4, normalized-entropy: 0.5713549744279549, [(1, 128), (2, 20)]
*** center 6: selecting labels [1] (freq >= 2) [from [143, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [38, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20242199465922867] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20242199465922867, 0.16356216923011163] ***
*** finished computation of 7 references, err: [Inf, 0.20242199465922867, 0.16356216923011163] ***
*** center 1: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [11, 96, 0]]
** centroid: 2, normalized-entropy: 0.4778207445858079, [(1, 11), (2, 96)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [14, 19, 0]]
** centroid: 3, normalized-entropy: 0.9833761901392238, [(1, 14), (2, 19)]
*** center 4: selecting labels [1] (freq >= 2) [from [153, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [41, 49, 0]]
** centroid: 5, normalized-entropy: 0.9942929346520455, [(1, 41), (2, 49)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 73, 23]]
** centroid: 6, normalized-entropy: 0.7943466904341503, [(2, 73), (3, 23)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [89, 11, 0]]
** centroid: 7, normalized-entropy: 0.49991595816452816, [(1, 89), (2, 11)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3182170999760099] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3182170999760099, 0.2602654669284205] ***
*** starting iteration: 2; err: [Inf, 0.3182170999760099, 0.2602654669284205] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3182170999760099, 0.2602654669284205, 0.24859438768473338] ***
*** starting iteration: 3; err: [Inf, 0.3182170999760099, 0.2602654669284205, 0.24859438768473338] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3182170999760099, 0.2602654669284205, 0.24859438768473338, 0.24656847271195673] ***
*** starting iteration: 4; err: [Inf, 0.3182170999760099, 0.2602654669284205, 0.24859438768473338, 0.24656847271195673] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3182170999760099, 0.2602654669284205, 0.24859438768473338, 0.24656847271195673, 0.24555461143853854] ***
*** starting iteration: 5; err: [Inf, 0.3182170999760099, 0.2602654669284205, 0.24859438768473338, 0.24656847271195673, 0.24555461143853854] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3182170999760099, 0.2602654669284205, 0.24859438768473338, 0.24656847271195673, 0.24555461143853854, 0.24484350704416694] ***
*** finished computation of 3 references, err: [Inf, 0.3182170999760099, 0.2602654669284205, 0.24859438768473338, 0.24656847271195673, 0.24555461143853854, 0.24484350704416694] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [102, 152, 21]]
** centroid: 1, normalized-entropy: 0.8119334382861964, [(1, 102), (2, 152), (3, 21)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [111, 113, 3]]
** centroid: 2, normalized-entropy: 0.6865495055111163, [(1, 111), (2, 113), (3, 3)]
*** center 3: selecting labels [1] (freq >= 1) [from [164, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2804700237890144] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2804700237890144, 0.2325630902293148] ***
*** starting iteration: 2; err: [Inf, 0.2804700237890144, 0.2325630902293148] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2804700237890144, 0.2325630902293148, 0.2317385720249651] ***
*** finished computation of 3 references, err: [Inf, 0.2804700237890144, 0.2325630902293148, 0.2317385720249651] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 184, 17]]
** centroid: 1, normalized-entropy: 0.4181050831403908, [(2, 184), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [227, 24, 0]]
** centroid: 2, normalized-entropy: 0.45494751159082986, [(1, 227), (2, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [170, 45, 0]]
** centroid: 3, normalized-entropy: 0.7401470427139037, [(1, 170), (2, 45)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.404860100988159] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.404860100988159, 0.2590578224269444] ***
*** starting iteration: 2; err: [Inf, 0.404860100988159, 0.2590578224269444] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.404860100988159, 0.2590578224269444, 0.2441335384729786] ***
*** starting iteration: 3; err: [Inf, 0.404860100988159, 0.2590578224269444, 0.2441335384729786] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.404860100988159, 0.2590578224269444, 0.2441335384729786, 0.24049896662887268] ***
*** starting iteration: 4; err: [Inf, 0.404860100988159, 0.2590578224269444, 0.2441335384729786, 0.24049896662887268] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.404860100988159, 0.2590578224269444, 0.2441335384729786, 0.24049896662887268, 0.23973513718811737] ***
*** finished computation of 3 references, err: [Inf, 0.404860100988159, 0.2590578224269444, 0.2441335384729786, 0.24049896662887268, 0.23973513718811737] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [156, 44, 0]]
** centroid: 1, normalized-entropy: 0.7601675029619658, [(1, 156), (2, 44)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [240, 27, 0]]
** centroid: 2, normalized-entropy: 0.4725472219330293, [(1, 240), (2, 27)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 177, 23]]
** centroid: 3, normalized-entropy: 0.5148156530047155, [(2, 177), (3, 23)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3154833568302025] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3154833568302025, 0.25655333951462406] ***
*** finished computation of 3 references, err: [Inf, 0.3154833568302025, 0.25655333951462406] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [6, 153, 24]]
** centroid: 1, normalized-entropy: 0.48076107845692523, [(1, 6), (2, 153), (3, 24)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [205, 112, 0]]
** centroid: 2, normalized-entropy: 0.9369914854420316, [(1, 205), (2, 112)]
*** center 3: selecting labels [1] (freq >= 2) [from [166, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3049236240934977] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3049236240934977, 0.24782570481657804] ***
*** finished computation of 3 references, err: [Inf, 0.3049236240934977, 0.24782570481657804] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [46, 154, 17]]
** centroid: 1, normalized-entropy: 0.7024567533339953, [(1, 46), (2, 154), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [109, 97, 0]]
** centroid: 2, normalized-entropy: 0.9975508325577991, [(1, 109), (2, 97)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [242, 2, 0]]
** centroid: 3, normalized-entropy: 0.06858609403644415, [(1, 242), (2, 2)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.25571723259577733] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.25571723259577733, 0.23725758348151796] ***
*** finished computation of 3 references, err: [Inf, 0.25571723259577733, 0.23725758348151796] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [220, 2, 0]]
** centroid: 1, normalized-entropy: 0.07414948357792069, [(1, 220), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [109, 78, 0]]
** centroid: 2, normalized-entropy: 0.9800844894494528, [(1, 109), (2, 78)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [67, 168, 23]]
** centroid: 3, normalized-entropy: 0.7691410398328348, [(1, 67), (2, 168), (3, 23)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.37881936366997054] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37881936366997054, 0.2563183512664526] ***
*** starting iteration: 2; err: [Inf, 0.37881936366997054, 0.2563183512664526] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37881936366997054, 0.2563183512664526, 0.2340513538281145] ***
*** starting iteration: 3; err: [Inf, 0.37881936366997054, 0.2563183512664526, 0.2340513538281145] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37881936366997054, 0.2563183512664526, 0.2340513538281145, 0.23159084919079378] ***
*** starting iteration: 4; err: [Inf, 0.37881936366997054, 0.2563183512664526, 0.2340513538281145, 0.23159084919079378] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37881936366997054, 0.2563183512664526, 0.2340513538281145, 0.23159084919079378, 0.23099409271165863] ***
*** finished computation of 3 references, err: [Inf, 0.37881936366997054, 0.2563183512664526, 0.2340513538281145, 0.23159084919079378, 0.23099409271165863] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 188, 24]]
** centroid: 1, normalized-entropy: 0.5095157180881823, [(2, 188), (3, 24)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [168, 45, 0]]
** centroid: 2, normalized-entropy: 0.743898745288434, [(1, 168), (2, 45)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [209, 32, 0]]
** centroid: 3, normalized-entropy: 0.5650135743838848, [(1, 209), (2, 32)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2560815643826346] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2560815643826346, 0.24137894263437976] ***
*** starting iteration: 2; err: [Inf, 0.2560815643826346, 0.24137894263437976] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2560815643826346, 0.24137894263437976, 0.24005031923035988] ***
*** starting iteration: 3; err: [Inf, 0.2560815643826346, 0.24137894263437976, 0.24005031923035988] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2560815643826346, 0.24137894263437976, 0.24005031923035988, 0.23942104289433855] ***
*** finished computation of 3 references, err: [Inf, 0.2560815643826346, 0.24137894263437976, 0.24005031923035988, 0.23942104289433855] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [262, 8, 0]]
** centroid: 1, normalized-entropy: 0.19253105481819402, [(1, 262), (2, 8)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [2, 184, 17]]
** centroid: 2, normalized-entropy: 0.3115516296996665, [(1, 2), (2, 184), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [133, 61, 0]]
** centroid: 3, normalized-entropy: 0.8982244838727241, [(1, 133), (2, 61)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3462661798272667] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3462661798272667, 0.29206326245044034] ***
*** starting iteration: 2; err: [Inf, 0.3462661798272667, 0.29206326245044034] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3462661798272667, 0.29206326245044034, 0.23629706775639736] ***
*** starting iteration: 3; err: [Inf, 0.3462661798272667, 0.29206326245044034, 0.23629706775639736] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3462661798272667, 0.29206326245044034, 0.23629706775639736, 0.23452946166277513] ***
*** starting iteration: 4; err: [Inf, 0.3462661798272667, 0.29206326245044034, 0.23629706775639736, 0.23452946166277513] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3462661798272667, 0.29206326245044034, 0.23629706775639736, 0.23452946166277513, 0.23455407481634993] ***
*** finished computation of 3 references, err: [Inf, 0.3462661798272667, 0.29206326245044034, 0.23629706775639736, 0.23452946166277513, 0.23455407481634993] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [1, 180, 23]]
** centroid: 1, normalized-entropy: 0.3482462778076484, [(1, 1), (2, 180), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [236, 8, 0]]
** centroid: 2, normalized-entropy: 0.20818094555717087, [(1, 236), (2, 8)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [159, 60, 0]]
** centroid: 3, normalized-entropy: 0.847107490529376, [(1, 159), (2, 60)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3567754723587529] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3567754723587529, 0.24357711180241207] ***
*** starting iteration: 2; err: [Inf, 0.3567754723587529, 0.24357711180241207] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3567754723587529, 0.24357711180241207, 0.23280063251525657] ***
*** starting iteration: 3; err: [Inf, 0.3567754723587529, 0.24357711180241207, 0.23280063251525657] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3567754723587529, 0.24357711180241207, 0.23280063251525657, 0.230036386908885] ***
*** finished computation of 3 references, err: [Inf, 0.3567754723587529, 0.24357711180241207, 0.23280063251525657, 0.230036386908885] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [187, 21, 0]]
** centroid: 1, normalized-entropy: 0.4720362091154094, [(1, 187), (2, 21)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 202, 24]]
** centroid: 2, normalized-entropy: 0.48833020341885913, [(2, 202), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [190, 42, 0]]
** centroid: 3, normalized-entropy: 0.6823348859052101, [(1, 190), (2, 42)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3049802113054921] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3049802113054921, 0.25618486727882495] ***
*** starting iteration: 2; err: [Inf, 0.3049802113054921, 0.25618486727882495] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3049802113054921, 0.25618486727882495, 0.24754786701674672] ***
*** starting iteration: 3; err: [Inf, 0.3049802113054921, 0.25618486727882495, 0.24754786701674672] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3049802113054921, 0.25618486727882495, 0.24754786701674672, 0.24555335352769767] ***
*** finished computation of 3 references, err: [Inf, 0.3049802113054921, 0.25618486727882495, 0.24754786701674672, 0.24555335352769767] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [94, 165, 17]]
** centroid: 1, normalized-entropy: 0.7701260344087055, [(1, 94), (2, 165), (3, 17)]
*** center 2: selecting labels [1] (freq >= 2) [from [197, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [106, 88, 0]]
** centroid: 3, normalized-entropy: 0.9937811379408324, [(1, 106), (2, 88)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4035119376490186] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4035119376490186, 0.28130107590540504] ***
*** starting iteration: 2; err: [Inf, 0.4035119376490186, 0.28130107590540504] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4035119376490186, 0.28130107590540504, 0.24396153051696573] ***
*** starting iteration: 3; err: [Inf, 0.4035119376490186, 0.28130107590540504, 0.24396153051696573] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4035119376490186, 0.28130107590540504, 0.24396153051696573, 0.23693405920458116] ***
*** finished computation of 3 references, err: [Inf, 0.4035119376490186, 0.28130107590540504, 0.24396153051696573, 0.23693405920458116] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [181, 40, 0]]
** centroid: 1, normalized-entropy: 0.682249937864035, [(1, 181), (2, 40)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 182, 23]]
** centroid: 2, normalized-entropy: 0.506501809234841, [(2, 182), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [215, 26, 0]]
** centroid: 3, normalized-entropy: 0.49349972903742084, [(1, 215), (2, 26)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4160718148912134] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4160718148912134, 0.31625666571124783] ***
*** starting iteration: 2; err: [Inf, 0.4160718148912134, 0.31625666571124783] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4160718148912134, 0.31625666571124783, 0.30578416944628045] ***
*** starting iteration: 3; err: [Inf, 0.4160718148912134, 0.31625666571124783, 0.30578416944628045] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4160718148912134, 0.31625666571124783, 0.30578416944628045, 0.303836661546297] ***
*** starting iteration: 4; err: [Inf, 0.4160718148912134, 0.31625666571124783, 0.30578416944628045, 0.303836661546297] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4160718148912134, 0.31625666571124783, 0.30578416944628045, 0.303836661546297, 0.3025839203156006] ***
*** starting iteration: 5; err: [Inf, 0.4160718148912134, 0.31625666571124783, 0.30578416944628045, 0.303836661546297, 0.3025839203156006] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4160718148912134, 0.31625666571124783, 0.30578416944628045, 0.303836661546297, 0.3025839203156006, 0.30237375889839174] ***
*** finished computation of 3 references, err: [Inf, 0.4160718148912134, 0.31625666571124783, 0.30578416944628045, 0.303836661546297, 0.3025839203156006, 0.30237375889839174] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [242, 18, 0]]
** centroid: 1, normalized-entropy: 0.3630464536191718, [(1, 242), (2, 18)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 188, 23]]
** centroid: 2, normalized-entropy: 0.49690663370857324, [(2, 188), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [154, 42, 0]]
** centroid: 3, normalized-entropy: 0.7495952572594798, [(1, 154), (2, 42)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.34572785417619234] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34572785417619234, 0.24253863217337085] ***
*** starting iteration: 2; err: [Inf, 0.34572785417619234, 0.24253863217337085] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34572785417619234, 0.24253863217337085, 0.2397665149761593] ***
*** starting iteration: 3; err: [Inf, 0.34572785417619234, 0.24253863217337085, 0.2397665149761593] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34572785417619234, 0.24253863217337085, 0.2397665149761593, 0.2388093657141367] ***
*** finished computation of 3 references, err: [Inf, 0.34572785417619234, 0.24253863217337085, 0.2397665149761593, 0.2388093657141367] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [56, 192, 24]]
** centroid: 1, normalized-entropy: 0.7149596619906441, [(1, 56), (2, 192), (3, 24)]
*** center 2: selecting labels [1] (freq >= 2) [from [186, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [135, 73, 0]]
** centroid: 3, normalized-entropy: 0.9349238604482871, [(1, 135), (2, 73)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3590989302218273] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3590989302218273, 0.2496288830031832] ***
*** starting iteration: 2; err: [Inf, 0.3590989302218273, 0.2496288830031832] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3590989302218273, 0.2496288830031832, 0.24600658631105832] ***
*** starting iteration: 3; err: [Inf, 0.3590989302218273, 0.2496288830031832, 0.24600658631105832] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3590989302218273, 0.2496288830031832, 0.24600658631105832, 0.24534887253031737] ***
*** finished computation of 3 references, err: [Inf, 0.3590989302218273, 0.2496288830031832, 0.24600658631105832, 0.24534887253031737] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [84, 174, 17]]
** centroid: 1, normalized-entropy: 0.7499814883999312, [(1, 84), (2, 174), (3, 17)]
*** center 2: selecting labels [1] (freq >= 2) [from [205, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [108, 79, 0]]
** centroid: 3, normalized-entropy: 0.9825814687665365, [(1, 108), (2, 79)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3689153044759624] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3689153044759624, 0.2420584450013701] ***
*** starting iteration: 2; err: [Inf, 0.3689153044759624, 0.2420584450013701] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3689153044759624, 0.2420584450013701, 0.24068301983563037] ***
*** starting iteration: 3; err: [Inf, 0.3689153044759624, 0.2420584450013701, 0.24068301983563037] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3689153044759624, 0.2420584450013701, 0.24068301983563037, 0.24036447016865775] ***
*** finished computation of 3 references, err: [Inf, 0.3689153044759624, 0.2420584450013701, 0.24068301983563037, 0.24036447016865775] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [253, 19, 0]]
** centroid: 1, normalized-entropy: 0.36537461642280794, [(1, 253), (2, 19)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 187, 23]]
** centroid: 2, normalized-entropy: 0.4984779510551734, [(2, 187), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [143, 42, 0]]
** centroid: 3, normalized-entropy: 0.772792633943244, [(1, 143), (2, 42)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.1894401631516603] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1894401631516603, 0.15271968674194347] ***
*** starting iteration: 2; err: [Inf, 0.1894401631516603, 0.15271968674194347] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1894401631516603, 0.15271968674194347, 0.14978324113184358] ***
*** starting iteration: 3; err: [Inf, 0.1894401631516603, 0.15271968674194347, 0.14978324113184358] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1894401631516603, 0.15271968674194347, 0.14978324113184358, 0.14909544065958252] ***
*** finished computation of 7 references, err: [Inf, 0.1894401631516603, 0.15271968674194347, 0.14978324113184358, 0.14909544065958252] ***
*** center 1: selecting labels [1] (freq >= 1) [from [110, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 75, 24]]
** centroid: 2, normalized-entropy: 0.7990485210442682, [(2, 75), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [56, 7, 0]]
** centroid: 3, normalized-entropy: 0.5032583347756457, [(1, 56), (2, 7)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [105, 4, 0]]
** centroid: 4, normalized-entropy: 0.22693864262148727, [(1, 105), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [16, 99, 0]]
** centroid: 5, normalized-entropy: 0.5819569606149722, [(1, 16), (2, 99)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [10, 80, 0]]
** centroid: 6, normalized-entropy: 0.5032583347756457, [(1, 10), (2, 80)]
*** center 7: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1962240262227929] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1962240262227929, 0.15070878908686017] ***
*** starting iteration: 2; err: [Inf, 0.1962240262227929, 0.15070878908686017] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1962240262227929, 0.15070878908686017, 0.14616491439517704] ***
*** starting iteration: 3; err: [Inf, 0.1962240262227929, 0.15070878908686017, 0.14616491439517704] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1962240262227929, 0.15070878908686017, 0.14616491439517704, 0.14492898609913674] ***
*** finished computation of 7 references, err: [Inf, 0.1962240262227929, 0.15070878908686017, 0.14616491439517704, 0.14492898609913674] ***
*** center 1: selecting labels [1] (freq >= 1) [from [100, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 85, 17]]
** centroid: 2, normalized-entropy: 0.6500224216483541, [(2, 85), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [82, 32, 0]]
** centroid: 3, normalized-entropy: 0.8564052389131375, [(1, 82), (2, 32)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [87, 8, 0]]
** centroid: 4, normalized-entropy: 0.4168441963431652, [(1, 87), (2, 8)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [44, 35, 0]]
** centroid: 5, normalized-entropy: 0.9906174973781801, [(1, 44), (2, 35)]
*** center 6: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 93, 0]]
** centroid: 7, normalized-entropy: 0.0849955598367127, [(1, 1), (2, 93)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19583871225495522] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19583871225495522, 0.15561576819011028] ***
*** starting iteration: 2; err: [Inf, 0.19583871225495522, 0.15561576819011028] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19583871225495522, 0.15561576819011028, 0.15099015557577183] ***
*** starting iteration: 3; err: [Inf, 0.19583871225495522, 0.15561576819011028, 0.15099015557577183] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19583871225495522, 0.15561576819011028, 0.15099015557577183, 0.14949288213698156] ***
*** finished computation of 7 references, err: [Inf, 0.19583871225495522, 0.15561576819011028, 0.15099015557577183, 0.14949288213698156] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [7, 71, 0]]
** centroid: 1, normalized-entropy: 0.4356133734874324, [(1, 7), (2, 71)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [83, 5, 0]]
** centroid: 2, normalized-entropy: 0.314682604134666, [(1, 83), (2, 5)]
*** center 3: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 106, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [112, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [88, 17, 0]]
** centroid: 6, normalized-entropy: 0.6388469391771899, [(1, 88), (2, 17)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 49, 23]]
** centroid: 7, normalized-entropy: 0.9037762882345833, [(2, 49), (3, 23)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2610150373138085] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2610150373138085, 0.19307455507823051] ***
*** starting iteration: 2; err: [Inf, 0.2610150373138085, 0.19307455507823051] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2610150373138085, 0.19307455507823051, 0.18892641819303144] ***
*** starting iteration: 3; err: [Inf, 0.2610150373138085, 0.19307455507823051, 0.18892641819303144] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2610150373138085, 0.19307455507823051, 0.18892641819303144, 0.1882536639878946] ***
*** finished computation of 7 references, err: [Inf, 0.2610150373138085, 0.19307455507823051, 0.18892641819303144, 0.1882536639878946] ***
*** center 1: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 91, 24]]
** centroid: 2, normalized-entropy: 0.7389821181149047, [(2, 91), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [61, 3, 0]]
** centroid: 3, normalized-entropy: 0.2729708579140699, [(1, 61), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [54, 40, 0]]
** centroid: 4, normalized-entropy: 0.9839393951635759, [(1, 54), (2, 40)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [97, 31, 0]]
** centroid: 5, normalized-entropy: 0.798659130358246, [(1, 97), (2, 31)]
*** center 6: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 100, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24850589402768386] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24850589402768386, 0.19302543809684902] ***
*** starting iteration: 2; err: [Inf, 0.24850589402768386, 0.19302543809684902] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24850589402768386, 0.19302543809684902, 0.18977567085205974] ***
*** starting iteration: 3; err: [Inf, 0.24850589402768386, 0.19302543809684902, 0.18977567085205974] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24850589402768386, 0.19302543809684902, 0.18977567085205974, 0.18932780198825486] ***
*** finished computation of 7 references, err: [Inf, 0.24850589402768386, 0.19302543809684902, 0.18977567085205974, 0.18932780198825486] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [62, 42, 0]]
** centroid: 1, normalized-entropy: 0.9731560354421095, [(1, 62), (2, 42)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [62, 22, 0]]
** centroid: 2, normalized-entropy: 0.8296071030882032, [(1, 62), (2, 22)]
*** center 3: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [25, 83, 0]]
** centroid: 4, normalized-entropy: 0.7805849322915901, [(1, 25), (2, 83)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 103, 17]]
** centroid: 5, normalized-entropy: 0.5885870739324579, [(2, 103), (3, 17)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [88, 3, 0]]
** centroid: 6, normalized-entropy: 0.20905980566852464, [(1, 88), (2, 3)]
*** center 7: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25049153261858487] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25049153261858487, 0.19738443258513083] ***
*** starting iteration: 2; err: [Inf, 0.25049153261858487, 0.19738443258513083] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25049153261858487, 0.19738443258513083, 0.19326668197911853] ***
*** starting iteration: 3; err: [Inf, 0.25049153261858487, 0.19738443258513083, 0.19326668197911853] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25049153261858487, 0.19738443258513083, 0.19326668197911853, 0.19313572229666712] ***
*** finished computation of 7 references, err: [Inf, 0.25049153261858487, 0.19738443258513083, 0.19326668197911853, 0.19313572229666712] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [92, 5, 0]]
** centroid: 1, normalized-entropy: 0.29292995113885967, [(1, 92), (2, 5)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [92, 6, 0]]
** centroid: 2, normalized-entropy: 0.3322866302216152, [(1, 92), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 64, 23]]
** centroid: 3, normalized-entropy: 0.8332661971210122, [(2, 64), (3, 23)]
*** center 4: selecting labels [1] (freq >= 2) [from [111, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [47, 54, 0]]
** centroid: 5, normalized-entropy: 0.9965322634876737, [(1, 47), (2, 54)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [54, 9, 0]]
** centroid: 6, normalized-entropy: 0.5916727785823274, [(1, 54), (2, 9)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 110, 0]]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 13)
[0.9359748970527413, 0.9270138401874929, 0.9269898641156126, 0.9209898521275767, 0.9170038301774829, 0.9049978121834409, 0.8899408390426354, 0.8729567891244537, 0.8690007372642103, 0.8629707551863239, 0.8589427751104398, 0.850053646460832, 0.780981580382778]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :dnet, 0.6, 2) => 0.9359748970527413
finished with 14
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.3959179193651242] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3959179193651242, 0.2949019276855832] ***
*** starting iteration: 2; err: [Inf, 0.3959179193651242, 0.2949019276855832] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3959179193651242, 0.2949019276855832, 0.292769563065523] ***
*** starting iteration: 3; err: [Inf, 0.3959179193651242, 0.2949019276855832, 0.292769563065523] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3959179193651242, 0.2949019276855832, 0.292769563065523, 0.29200855386653196] ***
*** finished computation of 3 references, err: [Inf, 0.3959179193651242, 0.2949019276855832, 0.292769563065523, 0.29200855386653196] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [160, 58, 0]]
** centroid: 1, normalized-entropy: 0.8357467426696918, [(1, 160), (2, 58)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 197, 24]]
** centroid: 2, normalized-entropy: 0.4956703944583371, [(2, 197), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [217, 10, 0]]
** centroid: 3, normalized-entropy: 0.26057536663309283, [(1, 217), (2, 10)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3935861236218927] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3935861236218927, 0.3101177865896246] ***
*** starting iteration: 2; err: [Inf, 0.3935861236218927, 0.3101177865896246] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3935861236218927, 0.3101177865896246, 0.3081743756177901] ***
*** starting iteration: 3; err: [Inf, 0.3935861236218927, 0.3101177865896246, 0.3081743756177901] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3935861236218927, 0.3101177865896246, 0.3081743756177901, 0.30750920550375505] ***
*** finished computation of 3 references, err: [Inf, 0.3935861236218927, 0.3101177865896246, 0.3081743756177901, 0.30750920550375505] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [103, 138, 17]]
** centroid: 1, normalized-entropy: 0.8014368914373992, [(1, 103), (2, 138), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [100, 115, 0]]
** centroid: 2, normalized-entropy: 0.996485989886783, [(1, 100), (2, 115)]
*** center 3: selecting labels [1] (freq >= 2) [from [194, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4337407115293943] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4337407115293943, 0.3091673271135724] ***
*** starting iteration: 2; err: [Inf, 0.4337407115293943, 0.3091673271135724] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4337407115293943, 0.3091673271135724, 0.30638536290339624] ***
*** starting iteration: 3; err: [Inf, 0.4337407115293943, 0.3091673271135724, 0.30638536290339624] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4337407115293943, 0.3091673271135724, 0.30638536290339624, 0.30604373388735207] ***
*** finished computation of 3 references, err: [Inf, 0.4337407115293943, 0.3091673271135724, 0.30638536290339624, 0.30604373388735207] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [112, 143, 1]]
** centroid: 1, normalized-entropy: 0.9893128390950879, [(1, 112), (2, 143)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [90, 105, 22]]
** centroid: 2, normalized-entropy: 0.8632007674685781, [(1, 90), (2, 105), (3, 22)]
*** center 3: selecting labels [1] (freq >= 2) [from [194, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 14)
[0.9359748970527413, 0.9270138401874929, 0.9269898641156126, 0.9209898521275767, 0.9170038301774829, 0.9049978121834409, 0.8899408390426354, 0.8729567891244537, 0.8690007372642103, 0.8629707551863239, 0.8589427751104398, 0.850053646460832, 0.8319577062092032, 0.780981580382778]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :dnet, 0.6, 2) => 0.9359748970527413
finished with 16
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.20855373375162528] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20855373375162528, 0.16325019518411285] ***
*** starting iteration: 2; err: [Inf, 0.20855373375162528, 0.16325019518411285] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20855373375162528, 0.16325019518411285, 0.1541535399739516] ***
*** starting iteration: 3; err: [Inf, 0.20855373375162528, 0.16325019518411285, 0.1541535399739516] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20855373375162528, 0.16325019518411285, 0.1541535399739516, 0.15117461063099225] ***
*** starting iteration: 4; err: [Inf, 0.20855373375162528, 0.16325019518411285, 0.1541535399739516, 0.15117461063099225] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20855373375162528, 0.16325019518411285, 0.1541535399739516, 0.15117461063099225, 0.15066667725571553] ***
*** finished computation of 7 references, err: [Inf, 0.20855373375162528, 0.16325019518411285, 0.1541535399739516, 0.15117461063099225, 0.15066667725571553] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [59, 44, 0]]
** centroid: 1, normalized-entropy: 0.984646826868755, [(1, 59), (2, 44)]
*** center 2: selecting labels [1] (freq >= 2) [from [85, 1, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [50, 39, 0]]
** centroid: 3, normalized-entropy: 0.9889525767600615, [(1, 50), (2, 39)]
*** center 4: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 113, 24]]
** centroid: 5, normalized-entropy: 0.6694238875574322, [(2, 113), (3, 24)]
*** center 6: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [22, 68, 0]]
** centroid: 7, normalized-entropy: 0.80235344282919, [(1, 22), (2, 68)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1950282633075605] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1950282633075605, 0.16947318183560472] ***
*** starting iteration: 2; err: [Inf, 0.1950282633075605, 0.16947318183560472] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1950282633075605, 0.16947318183560472, 0.16323483747470638] ***
*** starting iteration: 3; err: [Inf, 0.1950282633075605, 0.16947318183560472, 0.16323483747470638] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1950282633075605, 0.16947318183560472, 0.16323483747470638, 0.15930448182840376] ***
*** starting iteration: 4; err: [Inf, 0.1950282633075605, 0.16947318183560472, 0.16323483747470638, 0.15930448182840376] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1950282633075605, 0.16947318183560472, 0.16323483747470638, 0.15930448182840376, 0.15467106808686273] ***
*** starting iteration: 5; err: [Inf, 0.1950282633075605, 0.16947318183560472, 0.16323483747470638, 0.15930448182840376, 0.15467106808686273] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1950282633075605, 0.16947318183560472, 0.16323483747470638, 0.15930448182840376, 0.15467106808686273, 0.15057432488154346] ***
*** starting iteration: 6; err: [Inf, 0.1950282633075605, 0.16947318183560472, 0.16323483747470638, 0.15930448182840376, 0.15467106808686273, 0.15057432488154346] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1950282633075605, 0.16947318183560472, 0.16323483747470638, 0.15930448182840376, 0.15467106808686273, 0.15057432488154346, 0.14886381592729997] ***
*** starting iteration: 7; err: [Inf, 0.1950282633075605, 0.16947318183560472, 0.16323483747470638, 0.15930448182840376, 0.15467106808686273, 0.15057432488154346, 0.14886381592729997] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1950282633075605, 0.16947318183560472, 0.16323483747470638, 0.15930448182840376, 0.15467106808686273, 0.15057432488154346, 0.14886381592729997, 0.1479114238459008] ***
*** finished computation of 7 references, err: [Inf, 0.1950282633075605, 0.16947318183560472, 0.16323483747470638, 0.15930448182840376, 0.15467106808686273, 0.15057432488154346, 0.14886381592729997, 0.1479114238459008] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [87, 43, 0]]
** centroid: 1, normalized-entropy: 0.9157103623282269, [(1, 87), (2, 43)]
*** center 2: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 119, 17]]
** centroid: 4, normalized-entropy: 0.5435644431995963, [(2, 119), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [45, 38, 0]]
** centroid: 5, normalized-entropy: 0.9948631079048572, [(1, 45), (2, 38)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [9, 53, 0]]
** centroid: 6, normalized-entropy: 0.5975977764379984, [(1, 9), (2, 53)]
*** center 7: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.21531229397397897] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21531229397397897, 0.1557866298150958] ***
*** starting iteration: 2; err: [Inf, 0.21531229397397897, 0.1557866298150958] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21531229397397897, 0.1557866298150958, 0.15221623382970936] ***
*** starting iteration: 3; err: [Inf, 0.21531229397397897, 0.1557866298150958, 0.15221623382970936] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21531229397397897, 0.1557866298150958, 0.15221623382970936, 0.15118604771809643] ***
*** starting iteration: 4; err: [Inf, 0.21531229397397897, 0.1557866298150958, 0.15221623382970936, 0.15118604771809643] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21531229397397897, 0.1557866298150958, 0.15221623382970936, 0.15118604771809643, 0.15022177751088092] ***
*** finished computation of 7 references, err: [Inf, 0.21531229397397897, 0.1557866298150958, 0.15221623382970936, 0.15118604771809643, 0.15022177751088092] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [83, 22, 0]]
** centroid: 1, normalized-entropy: 0.7405715327916912, [(1, 83), (2, 22)]
*** center 2: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 102, 23]]
** centroid: 3, normalized-entropy: 0.6887498056988564, [(2, 102), (3, 23)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [99, 3, 0]]
** centroid: 4, normalized-entropy: 0.1914332548141934, [(1, 99), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [51, 47, 0]]
** centroid: 5, normalized-entropy: 0.9987979209581141, [(1, 51), (2, 47)]
*** center 6: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 74, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24067361514690938] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24067361514690938, 0.2086027768989759] ***
*** starting iteration: 2; err: [Inf, 0.24067361514690938, 0.2086027768989759] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24067361514690938, 0.2086027768989759, 0.20185040411128252] ***
*** starting iteration: 3; err: [Inf, 0.24067361514690938, 0.2086027768989759, 0.20185040411128252] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24067361514690938, 0.2086027768989759, 0.20185040411128252, 0.19839670910155988] ***
*** starting iteration: 4; err: [Inf, 0.24067361514690938, 0.2086027768989759, 0.20185040411128252, 0.19839670910155988] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24067361514690938, 0.2086027768989759, 0.20185040411128252, 0.19839670910155988, 0.1962768454356371] ***
*** starting iteration: 5; err: [Inf, 0.24067361514690938, 0.2086027768989759, 0.20185040411128252, 0.19839670910155988, 0.1962768454356371] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24067361514690938, 0.2086027768989759, 0.20185040411128252, 0.19839670910155988, 0.1962768454356371, 0.19514387714545112] ***
*** starting iteration: 6; err: [Inf, 0.24067361514690938, 0.2086027768989759, 0.20185040411128252, 0.19839670910155988, 0.1962768454356371, 0.19514387714545112] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24067361514690938, 0.2086027768989759, 0.20185040411128252, 0.19839670910155988, 0.1962768454356371, 0.19514387714545112, 0.19447170534344563] ***
*** finished computation of 7 references, err: [Inf, 0.24067361514690938, 0.2086027768989759, 0.20185040411128252, 0.19839670910155988, 0.1962768454356371, 0.19514387714545112, 0.19447170534344563] ***
*** center 1: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 86, 1]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 84, 23]]
** centroid: 3, normalized-entropy: 0.7508446639457529, [(2, 84), (3, 23)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [94, 8, 0]]
** centroid: 4, normalized-entropy: 0.3966277727783787, [(1, 94), (2, 8)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [13, 59, 0]]
** centroid: 5, normalized-entropy: 0.6812908868842175, [(1, 13), (2, 59)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [113, 28, 0]]
** centroid: 6, normalized-entropy: 0.7190821284943316, [(1, 113), (2, 28)]
*** center 7: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23636625286239177] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23636625286239177, 0.20063736498973023] ***
*** starting iteration: 2; err: [Inf, 0.23636625286239177, 0.20063736498973023] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23636625286239177, 0.20063736498973023, 0.1961224603297739] ***
*** starting iteration: 3; err: [Inf, 0.23636625286239177, 0.20063736498973023, 0.1961224603297739] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23636625286239177, 0.20063736498973023, 0.1961224603297739, 0.19238372084390054] ***
*** starting iteration: 4; err: [Inf, 0.23636625286239177, 0.20063736498973023, 0.1961224603297739, 0.19238372084390054] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23636625286239177, 0.20063736498973023, 0.1961224603297739, 0.19238372084390054, 0.18906145067424743] ***
*** starting iteration: 5; err: [Inf, 0.23636625286239177, 0.20063736498973023, 0.1961224603297739, 0.19238372084390054, 0.18906145067424743] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23636625286239177, 0.20063736498973023, 0.1961224603297739, 0.19238372084390054, 0.18906145067424743, 0.1870480968241302] ***
*** starting iteration: 6; err: [Inf, 0.23636625286239177, 0.20063736498973023, 0.1961224603297739, 0.19238372084390054, 0.18906145067424743, 0.1870480968241302] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23636625286239177, 0.20063736498973023, 0.1961224603297739, 0.19238372084390054, 0.18906145067424743, 0.1870480968241302, 0.1857768792946679] ***
*** starting iteration: 7; err: [Inf, 0.23636625286239177, 0.20063736498973023, 0.1961224603297739, 0.19238372084390054, 0.18906145067424743, 0.1870480968241302, 0.1857768792946679] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23636625286239177, 0.20063736498973023, 0.1961224603297739, 0.19238372084390054, 0.18906145067424743, 0.1870480968241302, 0.1857768792946679, 0.1854063208079499] ***
*** finished computation of 7 references, err: [Inf, 0.23636625286239177, 0.20063736498973023, 0.1961224603297739, 0.19238372084390054, 0.18906145067424743, 0.1870480968241302, 0.1857768792946679, 0.1854063208079499] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 82, 1]]
*** center 2: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [79, 16, 0]]
** centroid: 3, normalized-entropy: 0.6540800387941991, [(1, 79), (2, 16)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 97, 16]]
** centroid: 4, normalized-entropy: 0.5883953722191577, [(2, 97), (3, 16)]
*** center 5: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [85, 15, 0]]
** centroid: 6, normalized-entropy: 0.6098403047164005, [(1, 85), (2, 15)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [53, 43, 0]]
** centroid: 7, normalized-entropy: 0.9921586617207422, [(1, 53), (2, 43)]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2573279715750528] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2573279715750528, 0.203849491789641] ***
*** starting iteration: 2; err: [Inf, 0.2573279715750528, 0.203849491789641] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2573279715750528, 0.203849491789641, 0.19642901413192948] ***
*** starting iteration: 3; err: [Inf, 0.2573279715750528, 0.203849491789641, 0.19642901413192948] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2573279715750528, 0.203849491789641, 0.19642901413192948, 0.1920007861465791] ***
*** starting iteration: 4; err: [Inf, 0.2573279715750528, 0.203849491789641, 0.19642901413192948, 0.1920007861465791] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2573279715750528, 0.203849491789641, 0.19642901413192948, 0.1920007861465791, 0.19130773476787147] ***
*** finished computation of 7 references, err: [Inf, 0.2573279715750528, 0.203849491789641, 0.19642901413192948, 0.1920007861465791, 0.19130773476787147] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 75, 4]]
** centroid: 1, normalized-entropy: 0.2890794597316462, [(2, 75), (3, 4)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [58, 39, 0]]
** centroid: 2, normalized-entropy: 0.9721439323621084, [(1, 58), (2, 39)]
*** center 3: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 96, 19]]
** centroid: 4, normalized-entropy: 0.646646374208209, [(2, 96), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [89, 19, 0]]
** centroid: 5, normalized-entropy: 0.6710828900205286, [(1, 89), (2, 19)]
*** center 6: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [74, 19, 0]]
** centroid: 7, normalized-entropy: 0.7304472862481346, [(1, 74), (2, 19)]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 16)
[0.9419868970767175, 0.9359748970527413, 0.9270138401874929, 0.9269898641156126, 0.9209898521275767, 0.9170038301774829, 0.9149868431305558, 0.9049978121834409, 0.8899408390426354, 0.8729567891244537, 0.8690007372642103, 0.8629707551863239, 0.8589427751104398, 0.850053646460832, 0.8319577062092032, 0.780981580382778]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.6, 2) => 0.9419868970767175
finished with 16
iteration 4 finished
generating 4 configurations using top 12 configurations, starting with 16)
[0.9419868970767175, 0.9359748970527413, 0.9270138401874929, 0.9269898641156126, 0.9209898521275767, 0.9170038301774829, 0.9149868431305558, 0.9049978121834409, 0.8899408390426354, 0.8729567891244537, 0.8690007372642103, 0.8629707551863239, 0.8589427751104398, 0.850053646460832, 0.8319577062092032, 0.780981580382778]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.6, 2) => 0.9419868970767175
finished with 17
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.28643419188845837] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28643419188845837, 0.1800038968408676] ***
*** starting iteration: 2; err: [Inf, 0.28643419188845837, 0.1800038968408676] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28643419188845837, 0.1800038968408676, 0.16048465090714306] ***
*** starting iteration: 3; err: [Inf, 0.28643419188845837, 0.1800038968408676, 0.16048465090714306] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28643419188845837, 0.1800038968408676, 0.16048465090714306, 0.15471348487254646] ***
*** starting iteration: 4; err: [Inf, 0.28643419188845837, 0.1800038968408676, 0.16048465090714306, 0.15471348487254646] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28643419188845837, 0.1800038968408676, 0.16048465090714306, 0.15471348487254646, 0.15181487499367077] ***
*** starting iteration: 5; err: [Inf, 0.28643419188845837, 0.1800038968408676, 0.16048465090714306, 0.15471348487254646, 0.15181487499367077] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28643419188845837, 0.1800038968408676, 0.16048465090714306, 0.15471348487254646, 0.15181487499367077, 0.14994599184408705] ***
*** starting iteration: 6; err: [Inf, 0.28643419188845837, 0.1800038968408676, 0.16048465090714306, 0.15471348487254646, 0.15181487499367077, 0.14994599184408705] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28643419188845837, 0.1800038968408676, 0.16048465090714306, 0.15471348487254646, 0.15181487499367077, 0.14994599184408705, 0.14845267272842405] ***
*** starting iteration: 7; err: [Inf, 0.28643419188845837, 0.1800038968408676, 0.16048465090714306, 0.15471348487254646, 0.15181487499367077, 0.14994599184408705, 0.14845267272842405] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28643419188845837, 0.1800038968408676, 0.16048465090714306, 0.15471348487254646, 0.15181487499367077, 0.14994599184408705, 0.14845267272842405, 0.14748405033649803] ***
*** finished computation of 7 references, err: [Inf, 0.28643419188845837, 0.1800038968408676, 0.16048465090714306, 0.15471348487254646, 0.15181487499367077, 0.14994599184408705, 0.14845267272842405, 0.14748405033649803] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [54, 10, 0]]
** centroid: 1, normalized-entropy: 0.625262405223423, [(1, 54), (2, 10)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 104, 1]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [100, 35, 0]]
** centroid: 3, normalized-entropy: 0.8256265261578954, [(1, 100), (2, 35)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [64, 31, 0]]
** centroid: 4, normalized-entropy: 0.9111178649415465, [(1, 64), (2, 31)]
*** center 5: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 85, 23]]
** centroid: 7, normalized-entropy: 0.7471082932651727, [(2, 85), (3, 23)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18406330576973565] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18406330576973565, 0.1577161862270563] ***
*** starting iteration: 2; err: [Inf, 0.18406330576973565, 0.1577161862270563] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18406330576973565, 0.1577161862270563, 0.1547088271462131] ***
*** starting iteration: 3; err: [Inf, 0.18406330576973565, 0.1577161862270563, 0.1547088271462131] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18406330576973565, 0.1577161862270563, 0.1547088271462131, 0.1517529342315862] ***
*** starting iteration: 4; err: [Inf, 0.18406330576973565, 0.1577161862270563, 0.1547088271462131, 0.1517529342315862] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18406330576973565, 0.1577161862270563, 0.1547088271462131, 0.1517529342315862, 0.14851625732493878] ***
*** starting iteration: 5; err: [Inf, 0.18406330576973565, 0.1577161862270563, 0.1547088271462131, 0.1517529342315862, 0.14851625732493878] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18406330576973565, 0.1577161862270563, 0.1547088271462131, 0.1517529342315862, 0.14851625732493878, 0.1452886640555693] ***
*** starting iteration: 6; err: [Inf, 0.18406330576973565, 0.1577161862270563, 0.1547088271462131, 0.1517529342315862, 0.14851625732493878, 0.1452886640555693] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18406330576973565, 0.1577161862270563, 0.1547088271462131, 0.1517529342315862, 0.14851625732493878, 0.1452886640555693, 0.1438483483754266] ***
*** starting iteration: 7; err: [Inf, 0.18406330576973565, 0.1577161862270563, 0.1547088271462131, 0.1517529342315862, 0.14851625732493878, 0.1452886640555693, 0.1438483483754266] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18406330576973565, 0.1577161862270563, 0.1547088271462131, 0.1517529342315862, 0.14851625732493878, 0.1452886640555693, 0.1438483483754266, 0.14339480162325918] ***
*** finished computation of 7 references, err: [Inf, 0.18406330576973565, 0.1577161862270563, 0.1547088271462131, 0.1517529342315862, 0.14851625732493878, 0.1452886640555693, 0.1438483483754266, 0.14339480162325918] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [5, 84, 0]]
** centroid: 1, normalized-entropy: 0.3120895659343452, [(1, 5), (2, 84)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [84, 2, 0]]
** centroid: 2, normalized-entropy: 0.15935006268563429, [(1, 84), (2, 2)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [56, 25, 0]]
** centroid: 3, normalized-entropy: 0.8915996278279094, [(1, 56), (2, 25)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 107, 17]]
** centroid: 4, normalized-entropy: 0.5765847309822099, [(2, 107), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [85, 35, 0]]
** centroid: 5, normalized-entropy: 0.8708644692353648, [(1, 85), (2, 35)]
*** center 6: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23644214577070888] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23644214577070888, 0.1902575271784969] ***
*** starting iteration: 2; err: [Inf, 0.23644214577070888, 0.1902575271784969] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23644214577070888, 0.1902575271784969, 0.1665629944198582] ***
*** starting iteration: 3; err: [Inf, 0.23644214577070888, 0.1902575271784969, 0.1665629944198582] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23644214577070888, 0.1902575271784969, 0.1665629944198582, 0.15879909915715523] ***
*** starting iteration: 4; err: [Inf, 0.23644214577070888, 0.1902575271784969, 0.1665629944198582, 0.15879909915715523] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23644214577070888, 0.1902575271784969, 0.1665629944198582, 0.15879909915715523, 0.15563827286847215] ***
*** starting iteration: 5; err: [Inf, 0.23644214577070888, 0.1902575271784969, 0.1665629944198582, 0.15879909915715523, 0.15563827286847215] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23644214577070888, 0.1902575271784969, 0.1665629944198582, 0.15879909915715523, 0.15563827286847215, 0.15372533800507682] ***
*** starting iteration: 6; err: [Inf, 0.23644214577070888, 0.1902575271784969, 0.1665629944198582, 0.15879909915715523, 0.15563827286847215, 0.15372533800507682] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23644214577070888, 0.1902575271784969, 0.1665629944198582, 0.15879909915715523, 0.15563827286847215, 0.15372533800507682, 0.15271368172198443] ***
*** starting iteration: 7; err: [Inf, 0.23644214577070888, 0.1902575271784969, 0.1665629944198582, 0.15879909915715523, 0.15563827286847215, 0.15372533800507682, 0.15271368172198443] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23644214577070888, 0.1902575271784969, 0.1665629944198582, 0.15879909915715523, 0.15563827286847215, 0.15372533800507682, 0.15271368172198443, 0.15238264768986196] ***
*** finished computation of 7 references, err: [Inf, 0.23644214577070888, 0.1902575271784969, 0.1665629944198582, 0.15879909915715523, 0.15563827286847215, 0.15372533800507682, 0.15271368172198443, 0.15238264768986196] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [90, 20, 0]]
** centroid: 1, normalized-entropy: 0.6840384356390419, [(1, 90), (2, 20)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [73, 35, 0]]
** centroid: 2, normalized-entropy: 0.9087569615031438, [(1, 73), (2, 35)]
*** center 3: selecting labels [1] (freq >= 2) [from [116, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [28, 33, 0]]
** centroid: 4, normalized-entropy: 0.995148095654003, [(1, 28), (2, 33)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 96, 19]]
** centroid: 5, normalized-entropy: 0.646646374208209, [(2, 96), (3, 19)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 64, 4]]
** centroid: 6, normalized-entropy: 0.32275695889739825, [(2, 64), (3, 4)]
*** center 7: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
finished with 12 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 17)
[0.9419868970767175, 0.9359748970527413, 0.9270138401874929, 0.9269898641156126, 0.9209898521275767, 0.9200008391625158, 0.9170038301774829, 0.9149868431305558, 0.9049978121834409, 0.8899408390426354, 0.8729567891244537, 0.8690007372642103, 0.8629707551863239, 0.8589427751104398, 0.850053646460832, 0.8319577062092032, 0.780981580382778]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.6, 2) => 0.9419868970767175
finished with 19
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.3855481844593969] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3855481844593969, 0.3057626430224907] ***
*** starting iteration: 2; err: [Inf, 0.3855481844593969, 0.3057626430224907] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3855481844593969, 0.3057626430224907, 0.3041010694969837] ***
*** starting iteration: 3; err: [Inf, 0.3855481844593969, 0.3057626430224907, 0.3041010694969837] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3855481844593969, 0.3057626430224907, 0.3041010694969837, 0.30282527194414344] ***
*** finished computation of 3 references, err: [Inf, 0.3855481844593969, 0.3057626430224907, 0.3041010694969837, 0.30282527194414344] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [71, 187, 24]]
** centroid: 1, normalized-entropy: 0.7549076109577709, [(1, 71), (2, 187), (3, 24)]
*** center 2: selecting labels [1] (freq >= 1) [from [170, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [136, 78, 0]]
** centroid: 3, normalized-entropy: 0.9463439981707659, [(1, 136), (2, 78)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4061420485070129] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4061420485070129, 0.30025905953801196] ***
*** starting iteration: 2; err: [Inf, 0.4061420485070129, 0.30025905953801196] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4061420485070129, 0.30025905953801196, 0.2988336099091096] ***
*** starting iteration: 3; err: [Inf, 0.4061420485070129, 0.30025905953801196, 0.2988336099091096] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4061420485070129, 0.30025905953801196, 0.2988336099091096, 0.29800563495790494] ***
*** finished computation of 3 references, err: [Inf, 0.4061420485070129, 0.30025905953801196, 0.2988336099091096, 0.29800563495790494] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [234, 22, 0]]
** centroid: 1, normalized-entropy: 0.42276234377915173, [(1, 234), (2, 22)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [163, 47, 0]]
** centroid: 2, normalized-entropy: 0.7670628263874817, [(1, 163), (2, 47)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 184, 17]]
** centroid: 3, normalized-entropy: 0.4181050831403908, [(2, 184), (3, 17)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.45192552334175207] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45192552334175207, 0.30063961575860565] ***
*** starting iteration: 2; err: [Inf, 0.45192552334175207, 0.30063961575860565] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45192552334175207, 0.30063961575860565, 0.2975210687752975] ***
*** starting iteration: 3; err: [Inf, 0.45192552334175207, 0.30063961575860565, 0.2975210687752975] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45192552334175207, 0.30063961575860565, 0.2975210687752975, 0.2969777145125586] ***
*** finished computation of 3 references, err: [Inf, 0.45192552334175207, 0.30063961575860565, 0.2975210687752975, 0.2969777145125586] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [244, 13, 0]]
** centroid: 1, normalized-entropy: 0.28887113790524604, [(1, 244), (2, 13)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [1, 181, 23]]
** centroid: 2, normalized-entropy: 0.34710181777688587, [(1, 1), (2, 181), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [151, 54, 0]]
** centroid: 3, normalized-entropy: 0.8318555104570841, [(1, 151), (2, 54)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.37465428498604364] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37465428498604364, 0.2507982321150668] ***
*** starting iteration: 2; err: [Inf, 0.37465428498604364, 0.2507982321150668] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37465428498604364, 0.2507982321150668, 0.248924735526613] ***
*** starting iteration: 3; err: [Inf, 0.37465428498604364, 0.2507982321150668, 0.248924735526613] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37465428498604364, 0.2507982321150668, 0.248924735526613, 0.2482772580405289] ***
*** finished computation of 3 references, err: [Inf, 0.37465428498604364, 0.2507982321150668, 0.248924735526613, 0.2482772580405289] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [98, 143, 21]]
** centroid: 1, normalized-entropy: 0.8197631629061694, [(1, 98), (2, 143), (3, 21)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [116, 122, 3]]
** centroid: 2, normalized-entropy: 0.6837490246338529, [(1, 116), (2, 122), (3, 3)]
*** center 3: selecting labels [1] (freq >= 1) [from [163, 0, 0]]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.31663083998525493] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31663083998525493, 0.24355139707060142] ***
*** starting iteration: 2; err: [Inf, 0.31663083998525493, 0.24355139707060142] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31663083998525493, 0.24355139707060142, 0.23647039968833172] ***
*** starting iteration: 3; err: [Inf, 0.31663083998525493, 0.24355139707060142, 0.23647039968833172] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31663083998525493, 0.24355139707060142, 0.23647039968833172, 0.23547944491463846] ***
*** finished computation of 3 references, err: [Inf, 0.31663083998525493, 0.24355139707060142, 0.23647039968833172, 0.23547944491463846] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [79, 190, 17]]
** centroid: 1, normalized-entropy: 0.7235067587065269, [(1, 79), (2, 190), (3, 17)]
*** center 2: selecting labels [1] (freq >= 1) [from [198, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [120, 63, 0]]
** centroid: 3, normalized-entropy: 0.9288391461883213, [(1, 120), (2, 63)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.33587191987648674] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33587191987648674, 0.2531635857786218] ***
*** starting iteration: 2; err: [Inf, 0.33587191987648674, 0.2531635857786218] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33587191987648674, 0.2531635857786218, 0.24827684107972406] ***
*** starting iteration: 3; err: [Inf, 0.33587191987648674, 0.2531635857786218, 0.24827684107972406] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33587191987648674, 0.2531635857786218, 0.24827684107972406, 0.24695006496589939] ***
*** finished computation of 3 references, err: [Inf, 0.33587191987648674, 0.2531635857786218, 0.24827684107972406, 0.24695006496589939] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [86, 170, 23]]
** centroid: 1, normalized-entropy: 0.7922412890298334, [(1, 86), (2, 170), (3, 23)]
*** center 2: selecting labels [1] (freq >= 1) [from [196, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [114, 78, 0]]
** centroid: 3, normalized-entropy: 0.9744894033980525, [(1, 114), (2, 78)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 19)
[0.9419868970767175, 0.9359748970527413, 0.9270138401874929, 0.9269898641156126, 0.9209898521275767, 0.9200008391625158, 0.9170038301774829, 0.9149868431305558, 0.9049978121834409, 0.8899408390426354, 0.8730017442592293, 0.8729567891244537, 0.8690007372642103, 0.8629707551863239, 0.8589427751104398, 0.850053646460832, 0.8319577062092032, 0.7941024857192521, 0.780981580382778]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.6, 2) => 0.9419868970767175
finished with 19
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 19)
[0.9419868970767175, 0.9359748970527413, 0.9270138401874929, 0.9269898641156126, 0.9209898521275767, 0.9200008391625158, 0.9170038301774829, 0.9149868431305558, 0.9049978121834409, 0.8899408390426354, 0.8730017442592293, 0.8729567891244537, 0.8690007372642103, 0.8629707551863239, 0.8589427751104398, 0.850053646460832, 0.8319577062092032, 0.7941024857192521, 0.780981580382778]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.6, 2) => 0.9419868970767175
finished with 20
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.21002445405477788] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21002445405477788, 0.1565786184136149] ***
*** starting iteration: 2; err: [Inf, 0.21002445405477788, 0.1565786184136149] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21002445405477788, 0.1565786184136149, 0.15133637635249858] ***
*** starting iteration: 3; err: [Inf, 0.21002445405477788, 0.1565786184136149, 0.15133637635249858] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21002445405477788, 0.1565786184136149, 0.15133637635249858, 0.15038199160407456] ***
*** finished computation of 7 references, err: [Inf, 0.21002445405477788, 0.1565786184136149, 0.15133637635249858, 0.15038199160407456] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [16, 97, 0]]
** centroid: 1, normalized-entropy: 0.5883953722191577, [(1, 16), (2, 97)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [59, 47, 0]]
** centroid: 2, normalized-entropy: 0.9907353985141654, [(1, 59), (2, 47)]
*** center 3: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [54, 26, 0]]
** centroid: 4, normalized-entropy: 0.9097361225311661, [(1, 54), (2, 26)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 94, 24]]
** centroid: 5, normalized-entropy: 0.7286561673702678, [(2, 94), (3, 24)]
*** center 6: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [93, 1, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20310659400526732] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20310659400526732, 0.15332619479202528] ***
*** starting iteration: 2; err: [Inf, 0.20310659400526732, 0.15332619479202528] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20310659400526732, 0.15332619479202528, 0.14920414666780668] ***
*** starting iteration: 3; err: [Inf, 0.20310659400526732, 0.15332619479202528, 0.14920414666780668] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20310659400526732, 0.15332619479202528, 0.14920414666780668, 0.14842908175220934] ***
*** finished computation of 7 references, err: [Inf, 0.20310659400526732, 0.15332619479202528, 0.14920414666780668, 0.14842908175220934] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [65, 51, 0]]
** centroid: 1, normalized-entropy: 0.9894671995465737, [(1, 65), (2, 51)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [80, 33, 0]]
** centroid: 2, normalized-entropy: 0.8713360108238786, [(1, 80), (2, 33)]
*** center 3: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 122, 17]]
** centroid: 4, normalized-entropy: 0.5359423426233068, [(2, 122), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [35, 47, 0]]
** centroid: 5, normalized-entropy: 0.9844961311800012, [(1, 35), (2, 47)]
*** center 6: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20667483117515179] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20667483117515179, 0.15805405269571018] ***
*** starting iteration: 2; err: [Inf, 0.20667483117515179, 0.15805405269571018] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20667483117515179, 0.15805405269571018, 0.1526137331243733] ***
*** starting iteration: 3; err: [Inf, 0.20667483117515179, 0.15805405269571018, 0.1526137331243733] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20667483117515179, 0.15805405269571018, 0.1526137331243733, 0.15146951416143106] ***
*** finished computation of 7 references, err: [Inf, 0.20667483117515179, 0.15805405269571018, 0.1526137331243733, 0.15146951416143106] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [17, 87, 0]]
** centroid: 1, normalized-entropy: 0.6425267139094084, [(1, 17), (2, 87)]
*** center 2: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [70, 41, 0]]
** centroid: 3, normalized-entropy: 0.9501866467511052, [(1, 70), (2, 41)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [50, 36, 0]]
** centroid: 4, normalized-entropy: 0.9807983646944296, [(1, 50), (2, 36)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 83, 23]]
** centroid: 5, normalized-entropy: 0.7546167018169155, [(2, 83), (3, 23)]
*** center 6: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [86, 1, 0]]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 20)
[0.9530128931326537, 0.9419868970767175, 0.9359748970527413, 0.9270138401874929, 0.9269898641156126, 0.9209898521275767, 0.9200008391625158, 0.9170038301774829, 0.9149868431305558, 0.9049978121834409, 0.8899408390426354, 0.8730017442592293, 0.8729567891244537, 0.8690007372642103, 0.8629707551863239, 0.8589427751104398, 0.850053646460832, 0.8319577062092032, 0.7941024857192521, 0.780981580382778]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.3, 2) => 0.9530128931326537
finished with 20
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.19959513783920557] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19959513783920557, 0.15624039379367605] ***
*** starting iteration: 2; err: [Inf, 0.19959513783920557, 0.15624039379367605] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19959513783920557, 0.15624039379367605, 0.15051792258024216] ***
*** starting iteration: 3; err: [Inf, 0.19959513783920557, 0.15624039379367605, 0.15051792258024216] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19959513783920557, 0.15624039379367605, 0.15051792258024216, 0.1491868039590772] ***
*** finished computation of 7 references, err: [Inf, 0.19959513783920557, 0.15624039379367605, 0.15051792258024216, 0.1491868039590772] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [2, 123, 0]]
** centroid: 1, normalized-entropy: 0.11835001140827515, [(1, 2), (2, 123)]
*** center 2: selecting labels [1] (freq >= 2) [from [145, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [120, 6, 0]]
** centroid: 3, normalized-entropy: 0.2761954276479391, [(1, 120), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [181, 8, 0]]
** centroid: 4, normalized-entropy: 0.25286620431599255, [(1, 181), (2, 8)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [137, 16, 0]]
** centroid: 5, normalized-entropy: 0.4833329710221149, [(1, 137), (2, 16)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 145, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 85, 32]]
** centroid: 7, normalized-entropy: 0.8464482275175529, [(2, 85), (3, 32)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18286134031042456] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18286134031042456, 0.15423919988796114] ***
*** starting iteration: 2; err: [Inf, 0.18286134031042456, 0.15423919988796114] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18286134031042456, 0.15423919988796114, 0.14900565793714485] ***
*** starting iteration: 3; err: [Inf, 0.18286134031042456, 0.15423919988796114, 0.14900565793714485] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18286134031042456, 0.15423919988796114, 0.14900565793714485, 0.1477649607528001] ***
*** finished computation of 7 references, err: [Inf, 0.18286134031042456, 0.15423919988796114, 0.14900565793714485, 0.1477649607528001] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 69, 18]]
** centroid: 1, normalized-entropy: 0.7355085815538399, [(2, 69), (3, 18)]
*** center 2: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [52, 5, 0]]
** centroid: 3, normalized-entropy: 0.4288109647301171, [(1, 52), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [49, 25, 0]]
** centroid: 4, normalized-entropy: 0.9227346209530939, [(1, 49), (2, 25)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [60, 3, 0]]
** centroid: 5, normalized-entropy: 0.2761954276479391, [(1, 60), (2, 3)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [62, 8, 0]]
** centroid: 6, normalized-entropy: 0.5127091420308771, [(1, 62), (2, 8)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 86, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18788863648846746] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18788863648846746, 0.1560555914081633] ***
*** starting iteration: 2; err: [Inf, 0.18788863648846746, 0.1560555914081633] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18788863648846746, 0.1560555914081633, 0.15184304556995631] ***
*** starting iteration: 3; err: [Inf, 0.18788863648846746, 0.1560555914081633, 0.15184304556995631] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18788863648846746, 0.1560555914081633, 0.15184304556995631, 0.1509586579501629] ***
*** finished computation of 7 references, err: [Inf, 0.18788863648846746, 0.1560555914081633, 0.15184304556995631, 0.1509586579501629] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [34, 57, 0]]
** centroid: 1, normalized-entropy: 0.9534158774525225, [(1, 34), (2, 57)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [79, 3, 0]]
** centroid: 2, normalized-entropy: 0.22641094842107634, [(1, 79), (2, 3)]
*** center 3: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 55, 19]]
** centroid: 4, normalized-entropy: 0.8218127305034848, [(2, 55), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [69, 12, 0]]
** centroid: 5, normalized-entropy: 0.6051865766334207, [(1, 69), (2, 12)]
*** center 6: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 55, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18091564744152128] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18091564744152128, 0.15536293472442775] ***
*** starting iteration: 2; err: [Inf, 0.18091564744152128, 0.15536293472442775] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18091564744152128, 0.15536293472442775, 0.15120208107866348] ***
*** starting iteration: 3; err: [Inf, 0.18091564744152128, 0.15536293472442775, 0.15120208107866348] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18091564744152128, 0.15536293472442775, 0.15120208107866348, 0.15024518291279673] ***
*** finished computation of 7 references, err: [Inf, 0.18091564744152128, 0.15536293472442775, 0.15120208107866348, 0.15024518291279673] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 78, 19]]
** centroid: 1, normalized-entropy: 0.7136036068604937, [(2, 78), (3, 19)]
*** center 2: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [43, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [48, 31, 0]]
** centroid: 4, normalized-entropy: 0.966334094295981, [(1, 48), (2, 31)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [69, 7, 0]]
** centroid: 5, normalized-entropy: 0.4434581453896789, [(1, 69), (2, 7)]
*** center 6: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [13, 73, 0]]
** centroid: 7, normalized-entropy: 0.6127425554686624, [(1, 13), (2, 73)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2038667811146006] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2038667811146006, 0.151362396704033] ***
*** starting iteration: 2; err: [Inf, 0.2038667811146006, 0.151362396704033] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2038667811146006, 0.151362396704033, 0.14707865844480694] ***
*** starting iteration: 3; err: [Inf, 0.2038667811146006, 0.151362396704033, 0.14707865844480694] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2038667811146006, 0.151362396704033, 0.14707865844480694, 0.146531111324206] ***
*** finished computation of 7 references, err: [Inf, 0.2038667811146006, 0.151362396704033, 0.14707865844480694, 0.146531111324206] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [74, 5, 0]]
** centroid: 1, normalized-entropy: 0.340373285759646, [(1, 74), (2, 5)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 46, 15]]
** centroid: 2, normalized-entropy: 0.8047175193210769, [(2, 46), (3, 15)]
*** center 3: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [70, 3, 0]]
** centroid: 4, normalized-entropy: 0.24729443986205674, [(1, 70), (2, 3)]
*** center 5: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [8, 69, 0]]
** centroid: 6, normalized-entropy: 0.481225663841737, [(1, 8), (2, 69)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 63, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1898189074639231] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1898189074639231, 0.1501378988325596] ***
*** starting iteration: 2; err: [Inf, 0.1898189074639231, 0.1501378988325596] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1898189074639231, 0.1501378988325596, 0.14826830193400384] ***
*** starting iteration: 3; err: [Inf, 0.1898189074639231, 0.1501378988325596, 0.14826830193400384] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1898189074639231, 0.1501378988325596, 0.14826830193400384, 0.14802234742604195] ***
*** finished computation of 7 references, err: [Inf, 0.1898189074639231, 0.1501378988325596, 0.14826830193400384, 0.14802234742604195] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 59, 2]]
** centroid: 1, normalized-entropy: 0.20818094555717087, [(2, 59), (3, 2)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [49, 6, 0]]
** centroid: 2, normalized-entropy: 0.4971677614160751, [(1, 49), (2, 6)]
*** center 3: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 108, 12]]
** centroid: 4, normalized-entropy: 0.46899559358928133, [(2, 108), (3, 12)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [79, 3, 0]]
** centroid: 5, normalized-entropy: 0.22641094842107634, [(1, 79), (2, 3)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [43, 21, 0]]
** centroid: 6, normalized-entropy: 0.912999213585247, [(1, 43), (2, 21)]
*** center 7: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1916424931809306] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1916424931809306, 0.15224952004104852] ***
*** starting iteration: 2; err: [Inf, 0.1916424931809306, 0.15224952004104852] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1916424931809306, 0.15224952004104852, 0.14956907581910492] ***
*** starting iteration: 3; err: [Inf, 0.1916424931809306, 0.15224952004104852, 0.14956907581910492] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1916424931809306, 0.15224952004104852, 0.14956907581910492, 0.1488284514658153] ***
*** finished computation of 7 references, err: [Inf, 0.1916424931809306, 0.15224952004104852, 0.14956907581910492, 0.1488284514658153] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 79, 16]]
** centroid: 1, normalized-entropy: 0.6540800387941991, [(2, 79), (3, 16)]
*** center 2: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [58, 5, 0]]
** centroid: 3, normalized-entropy: 0.39993804743902767, [(1, 58), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [80, 20, 0]]
** centroid: 4, normalized-entropy: 0.7219280948873623, [(1, 80), (2, 20)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [34, 24, 0]]
** centroid: 5, normalized-entropy: 0.9784493292686188, [(1, 34), (2, 24)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 67, 1]]
*** center 7: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1968379650823772] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1968379650823772, 0.14759819098375737] ***
*** starting iteration: 2; err: [Inf, 0.1968379650823772, 0.14759819098375737] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1968379650823772, 0.14759819098375737, 0.14427719742432238] ***
*** starting iteration: 3; err: [Inf, 0.1968379650823772, 0.14759819098375737, 0.14427719742432238] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1968379650823772, 0.14759819098375737, 0.14427719742432238, 0.14403091267868876] ***
*** finished computation of 7 references, err: [Inf, 0.1968379650823772, 0.14759819098375737, 0.14427719742432238, 0.14403091267868876] ***
*** center 1: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 62, 17]]
** centroid: 2, normalized-entropy: 0.751286576718343, [(2, 62), (3, 17)]
*** center 3: selecting labels [1] (freq >= 2) [from [45, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [72, 21, 0]]
** centroid: 4, normalized-entropy: 0.7706290693639406, [(1, 72), (2, 21)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [47, 26, 0]]
** centroid: 5, normalized-entropy: 0.9394532068181357, [(1, 47), (2, 26)]
*** center 6: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [4, 62, 0]]
** centroid: 7, normalized-entropy: 0.32984607020714635, [(1, 4), (2, 62)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1993050454799086] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1993050454799086, 0.15003204653970897] ***
*** starting iteration: 2; err: [Inf, 0.1993050454799086, 0.15003204653970897] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1993050454799086, 0.15003204653970897, 0.14702499665832147] ***
*** starting iteration: 3; err: [Inf, 0.1993050454799086, 0.15003204653970897, 0.14702499665832147] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1993050454799086, 0.15003204653970897, 0.14702499665832147, 0.14664654752751813] ***
*** finished computation of 7 references, err: [Inf, 0.1993050454799086, 0.15003204653970897, 0.14702499665832147, 0.14664654752751813] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [75, 6, 0]]
** centroid: 1, normalized-entropy: 0.38094658570539014, [(1, 75), (2, 6)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [65, 6, 0]]
** centroid: 2, normalized-entropy: 0.4178642624458583, [(1, 65), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 61, 15]]
** centroid: 3, normalized-entropy: 0.7166336117927455, [(2, 61), (3, 15)]
*** center 4: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [30, 63, 0]]
** centroid: 5, normalized-entropy: 0.9071657675730821, [(1, 30), (2, 63)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 60, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20830340343527495] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20830340343527495, 0.15624319597147404] ***
*** starting iteration: 2; err: [Inf, 0.20830340343527495, 0.15624319597147404] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20830340343527495, 0.15624319597147404, 0.15233906768448652] ***
*** starting iteration: 3; err: [Inf, 0.20830340343527495, 0.15624319597147404, 0.15233906768448652] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20830340343527495, 0.15624319597147404, 0.15233906768448652, 0.15133448971807956] ***
*** finished computation of 7 references, err: [Inf, 0.20830340343527495, 0.15624319597147404, 0.15233906768448652, 0.15133448971807956] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [45, 38, 0]]
** centroid: 1, normalized-entropy: 0.9948631079048572, [(1, 45), (2, 38)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [53, 33, 0]]
** centroid: 2, normalized-entropy: 0.9606276613221153, [(1, 53), (2, 33)]
*** center 3: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 69, 14]]
** centroid: 4, normalized-entropy: 0.6546640527143932, [(2, 69), (3, 14)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [21, 55, 0]]
** centroid: 5, normalized-entropy: 0.8503821170987139, [(1, 21), (2, 55)]
*** center 6: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20624193854257464] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20624193854257464, 0.15780316048092208] ***
*** starting iteration: 2; err: [Inf, 0.20624193854257464, 0.15780316048092208] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20624193854257464, 0.15780316048092208, 0.15189540296979248] ***
*** starting iteration: 3; err: [Inf, 0.20624193854257464, 0.15780316048092208, 0.15189540296979248] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20624193854257464, 0.15780316048092208, 0.15189540296979248, 0.14991223191469907] ***
*** finished computation of 7 references, err: [Inf, 0.20624193854257464, 0.15780316048092208, 0.15189540296979248, 0.14991223191469907] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [3, 80, 0]]
** centroid: 1, normalized-entropy: 0.2243269603450881, [(1, 3), (2, 80)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [41, 33, 0]]
** centroid: 2, normalized-entropy: 0.9915528503834039, [(1, 41), (2, 33)]
*** center 3: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 84, 17]]
** centroid: 4, normalized-entropy: 0.653839880626333, [(2, 84), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [52, 2, 0]]
** centroid: 5, normalized-entropy: 0.22853814395352806, [(1, 52), (2, 2)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [69, 7, 0]]
** centroid: 6, normalized-entropy: 0.4434581453896789, [(1, 69), (2, 7)]
*** center 7: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.199932614531368] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.199932614531368, 0.15790482647717] ***
*** starting iteration: 2; err: [Inf, 0.199932614531368, 0.15790482647717] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.199932614531368, 0.15790482647717, 0.15406178736686707] ***
*** starting iteration: 3; err: [Inf, 0.199932614531368, 0.15790482647717, 0.15406178736686707] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.199932614531368, 0.15790482647717, 0.15406178736686707, 0.1528474077079445] ***
*** finished computation of 7 references, err: [Inf, 0.199932614531368, 0.15790482647717, 0.15406178736686707, 0.1528474077079445] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [45, 41, 0]]
** centroid: 1, normalized-entropy: 0.9984389230256238, [(1, 45), (2, 41)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [56, 16, 0]]
** centroid: 2, normalized-entropy: 0.7642045065086204, [(1, 56), (2, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 98, 17]]
** centroid: 4, normalized-entropy: 0.6043732420352782, [(2, 98), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [29, 38, 0]]
** centroid: 5, normalized-entropy: 0.9869444983748495, [(1, 29), (2, 38)]
*** center 6: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19205897279269993] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19205897279269993, 0.15520980165153742] ***
*** starting iteration: 2; err: [Inf, 0.19205897279269993, 0.15520980165153742] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19205897279269993, 0.15520980165153742, 0.14979964234726503] ***
*** starting iteration: 3; err: [Inf, 0.19205897279269993, 0.15520980165153742, 0.14979964234726503] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19205897279269993, 0.15520980165153742, 0.14979964234726503, 0.1486464729607105] ***
*** finished computation of 7 references, err: [Inf, 0.19205897279269993, 0.15520980165153742, 0.14979964234726503, 0.1486464729607105] ***
*** center 1: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 53, 15]]
** centroid: 2, normalized-entropy: 0.7612401496918493, [(2, 53), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [62, 17, 0]]
** centroid: 3, normalized-entropy: 0.751286576718343, [(1, 62), (2, 17)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [20, 63, 0]]
** centroid: 4, normalized-entropy: 0.7966394665488286, [(1, 20), (2, 63)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [10, 60, 0]]
** centroid: 5, normalized-entropy: 0.5916727785823274, [(1, 10), (2, 60)]
*** center 6: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [49, 1, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20809452701359987] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20809452701359987, 0.1524261675728485] ***
*** starting iteration: 2; err: [Inf, 0.20809452701359987, 0.1524261675728485] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20809452701359987, 0.1524261675728485, 0.14753470432106405] ***
*** starting iteration: 3; err: [Inf, 0.20809452701359987, 0.1524261675728485, 0.14753470432106405] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20809452701359987, 0.1524261675728485, 0.14753470432106405, 0.14694395194156096] ***
*** finished computation of 7 references, err: [Inf, 0.20809452701359987, 0.1524261675728485, 0.14753470432106405, 0.14694395194156096] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [12, 60, 0]]
** centroid: 1, normalized-entropy: 0.6500224216483541, [(1, 12), (2, 60)]
*** center 2: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [57, 30, 0]]
** centroid: 3, normalized-entropy: 0.9293636260137188, [(1, 57), (2, 30)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [49, 19, 0]]
** centroid: 4, normalized-entropy: 0.8546480601169081, [(1, 49), (2, 19)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 71, 13]]
** centroid: 5, normalized-entropy: 0.6216297820565386, [(2, 71), (3, 13)]
*** center 6: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18822870789840818] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18822870789840818, 0.15112918423116206] ***
*** starting iteration: 2; err: [Inf, 0.18822870789840818, 0.15112918423116206] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18822870789840818, 0.15112918423116206, 0.14651385645754636] ***
*** starting iteration: 3; err: [Inf, 0.18822870789840818, 0.15112918423116206, 0.14651385645754636] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18822870789840818, 0.15112918423116206, 0.14651385645754636, 0.14584822888020427] ***
*** finished computation of 7 references, err: [Inf, 0.18822870789840818, 0.15112918423116206, 0.14651385645754636, 0.14584822888020427] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 80, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [53, 27, 0]]
** centroid: 3, normalized-entropy: 0.9224062617590724, [(1, 53), (2, 27)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [41, 6, 0]]
** centroid: 4, normalized-entropy: 0.5509844433017146, [(1, 41), (2, 6)]
*** center 5: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [67, 18, 0]]
** centroid: 6, normalized-entropy: 0.7448423974714387, [(1, 67), (2, 18)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 57, 16]]
** centroid: 7, normalized-entropy: 0.7586638628883696, [(2, 57), (3, 16)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20698086689971387] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20698086689971387, 0.15419226213358342] ***
*** starting iteration: 2; err: [Inf, 0.20698086689971387, 0.15419226213358342] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20698086689971387, 0.15419226213358342, 0.151428950086236] ***
*** starting iteration: 3; err: [Inf, 0.20698086689971387, 0.15419226213358342, 0.151428950086236] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20698086689971387, 0.15419226213358342, 0.151428950086236, 0.15083909288980066] ***
*** finished computation of 7 references, err: [Inf, 0.20698086689971387, 0.15419226213358342, 0.151428950086236, 0.15083909288980066] ***
*** center 1: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 87, 15]]
** centroid: 2, normalized-entropy: 0.6024308020404452, [(2, 87), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [49, 20, 0]]
** centroid: 3, normalized-entropy: 0.868533960265235, [(1, 49), (2, 20)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [47, 27, 0]]
** centroid: 4, normalized-entropy: 0.9466474387740499, [(1, 47), (2, 27)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [31, 51, 0]]
** centroid: 5, normalized-entropy: 0.956652272148091, [(1, 31), (2, 51)]
*** center 6: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18936927677411586] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18936927677411586, 0.1533224141485989] ***
*** starting iteration: 2; err: [Inf, 0.18936927677411586, 0.1533224141485989] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18936927677411586, 0.1533224141485989, 0.15085422299336643] ***
*** starting iteration: 3; err: [Inf, 0.18936927677411586, 0.1533224141485989, 0.15085422299336643] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18936927677411586, 0.1533224141485989, 0.15085422299336643, 0.15038767169974745] ***
*** finished computation of 7 references, err: [Inf, 0.18936927677411586, 0.1533224141485989, 0.15085422299336643, 0.15038767169974745] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 65, 9]]
** centroid: 1, normalized-entropy: 0.5340042729285396, [(2, 65), (3, 9)]
*** center 2: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [63, 12, 0]]
** centroid: 3, normalized-entropy: 0.634309554640566, [(1, 63), (2, 12)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [63, 21, 0]]
** centroid: 4, normalized-entropy: 0.8112781244591328, [(1, 63), (2, 21)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [44, 23, 0]]
** centroid: 5, normalized-entropy: 0.9279262619599757, [(1, 44), (2, 23)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 75, 7]]
** centroid: 6, normalized-entropy: 0.42080948947668984, [(2, 75), (3, 7)]
*** center 7: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18846446078270673] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18846446078270673, 0.15395578937605023] ***
*** starting iteration: 2; err: [Inf, 0.18846446078270673, 0.15395578937605023] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18846446078270673, 0.15395578937605023, 0.14871939842123538] ***
*** starting iteration: 3; err: [Inf, 0.18846446078270673, 0.15395578937605023, 0.14871939842123538] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18846446078270673, 0.15395578937605023, 0.14871939842123538, 0.1479630036689341] ***
*** finished computation of 7 references, err: [Inf, 0.18846446078270673, 0.15395578937605023, 0.14871939842123538, 0.1479630036689341] ***
*** center 1: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 47, 17]]
** centroid: 2, normalized-entropy: 0.8351164948421137, [(2, 47), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [63, 7, 0]]
** centroid: 3, normalized-entropy: 0.46899559358928133, [(1, 63), (2, 7)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [66, 5, 0]]
** centroid: 4, normalized-entropy: 0.3674984948272913, [(1, 66), (2, 5)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [19, 75, 0]]
** centroid: 5, normalized-entropy: 0.7261630586710504, [(1, 19), (2, 75)]
*** center 6: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 55, 0]]
** centroid: 7, normalized-entropy: 0.29367630985136944, [(1, 3), (2, 55)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19606105649471284] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19606105649471284, 0.15212102549523115] ***
*** starting iteration: 2; err: [Inf, 0.19606105649471284, 0.15212102549523115] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19606105649471284, 0.15212102549523115, 0.14942683055717498] ***
*** starting iteration: 3; err: [Inf, 0.19606105649471284, 0.15212102549523115, 0.14942683055717498] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19606105649471284, 0.15212102549523115, 0.14942683055717498, 0.14865702849254012] ***
*** finished computation of 7 references, err: [Inf, 0.19606105649471284, 0.15212102549523115, 0.14942683055717498, 0.14865702849254012] ***
*** center 1: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 65, 14]]
** centroid: 2, normalized-entropy: 0.6739468651941155, [(2, 65), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [50, 18, 0]]
** centroid: 3, normalized-entropy: 0.8337649072106652, [(1, 50), (2, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [71, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [24, 41, 0]]
** centroid: 5, normalized-entropy: 0.9500796252338518, [(1, 24), (2, 41)]
*** center 6: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [9, 65, 0]]
** centroid: 7, normalized-entropy: 0.5340042729285396, [(1, 9), (2, 65)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21068026864062994] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21068026864062994, 0.153694787863642] ***
*** starting iteration: 2; err: [Inf, 0.21068026864062994, 0.153694787863642] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21068026864062994, 0.153694787863642, 0.1489737810175866] ***
*** starting iteration: 3; err: [Inf, 0.21068026864062994, 0.153694787863642, 0.1489737810175866] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21068026864062994, 0.153694787863642, 0.1489737810175866, 0.14854547182563693] ***
*** finished computation of 7 references, err: [Inf, 0.21068026864062994, 0.153694787863642, 0.1489737810175866, 0.14854547182563693] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [40, 22, 0]]
** centroid: 1, normalized-entropy: 0.9383153522334071, [(1, 40), (2, 22)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [42, 3, 0]]
** centroid: 2, normalized-entropy: 0.3533593350214213, [(1, 42), (2, 3)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 59, 20]]
** centroid: 3, normalized-entropy: 0.8162554088088008, [(2, 59), (3, 20)]
*** center 4: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [63, 18, 0]]
** centroid: 5, normalized-entropy: 0.7642045065086204, [(1, 63), (2, 18)]
*** center 6: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 80, 0]]
** centroid: 7, normalized-entropy: 0.2243269603450881, [(1, 3), (2, 80)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20609220741316675] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20609220741316675, 0.1544943461678922] ***
*** starting iteration: 2; err: [Inf, 0.20609220741316675, 0.1544943461678922] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20609220741316675, 0.1544943461678922, 0.14965959604573437] ***
*** starting iteration: 3; err: [Inf, 0.20609220741316675, 0.1544943461678922, 0.14965959604573437] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20609220741316675, 0.1544943461678922, 0.14965959604573437, 0.14918583935312926] ***
*** finished computation of 7 references, err: [Inf, 0.20609220741316675, 0.1544943461678922, 0.14965959604573437, 0.14918583935312926] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [19, 54, 0]]
** centroid: 1, normalized-entropy: 0.8271595195340525, [(1, 19), (2, 54)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [52, 5, 0]]
** centroid: 2, normalized-entropy: 0.4288109647301171, [(1, 52), (2, 5)]
*** center 3: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [86, 6, 0]]
** centroid: 4, normalized-entropy: 0.3478169135710632, [(1, 86), (2, 6)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 52, 17]]
** centroid: 5, normalized-entropy: 0.8054848387405957, [(2, 52), (3, 17)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 69, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19310961496829987] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19310961496829987, 0.15898421981651337] ***
*** starting iteration: 2; err: [Inf, 0.19310961496829987, 0.15898421981651337] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19310961496829987, 0.15898421981651337, 0.15583702890202403] ***
*** starting iteration: 3; err: [Inf, 0.19310961496829987, 0.15898421981651337, 0.15583702890202403] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19310961496829987, 0.15898421981651337, 0.15583702890202403, 0.15538471022900194] ***
*** finished computation of 7 references, err: [Inf, 0.19310961496829987, 0.15898421981651337, 0.15583702890202403, 0.15538471022900194] ***
*** center 1: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 53, 13]]
** centroid: 2, normalized-entropy: 0.7158259310602146, [(2, 53), (3, 13)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [52, 17, 0]]
** centroid: 3, normalized-entropy: 0.8054848387405957, [(1, 52), (2, 17)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [73, 2, 0]]
** centroid: 4, normalized-entropy: 0.1773894531859976, [(1, 73), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [10, 59, 0]]
** centroid: 5, normalized-entropy: 0.5969995167604553, [(1, 10), (2, 59)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [3, 64, 0]]
** centroid: 6, normalized-entropy: 0.26377743669413856, [(1, 3), (2, 64)]
*** center 7: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18974312043003738] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18974312043003738, 0.15746052842400968] ***
*** starting iteration: 2; err: [Inf, 0.18974312043003738, 0.15746052842400968] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18974312043003738, 0.15746052842400968, 0.15397965493798255] ***
*** starting iteration: 3; err: [Inf, 0.18974312043003738, 0.15746052842400968, 0.15397965493798255] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18974312043003738, 0.15746052842400968, 0.15397965493798255, 0.15315222319960595] ***
*** finished computation of 7 references, err: [Inf, 0.18974312043003738, 0.15746052842400968, 0.15397965493798255, 0.15315222319960595] ***
*** center 1: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 74, 17]]
** centroid: 2, normalized-entropy: 0.6947570868163001, [(2, 74), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [37, 18, 0]]
** centroid: 3, normalized-entropy: 0.9121156307204275, [(1, 37), (2, 18)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [42, 31, 0]]
** centroid: 4, normalized-entropy: 0.9835585673909616, [(1, 42), (2, 31)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [14, 63, 0]]
** centroid: 5, normalized-entropy: 0.6840384356390419, [(1, 14), (2, 63)]
*** center 6: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [70, 2, 0]]
** centroid: 7, normalized-entropy: 0.18312206830137262, [(1, 70), (2, 2)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2002839563563466] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2002839563563466, 0.1555115154851228] ***
*** starting iteration: 2; err: [Inf, 0.2002839563563466, 0.1555115154851228] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2002839563563466, 0.1555115154851228, 0.15068048821017146] ***
*** starting iteration: 3; err: [Inf, 0.2002839563563466, 0.1555115154851228, 0.15068048821017146] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2002839563563466, 0.1555115154851228, 0.15068048821017146, 0.14982160079479218] ***
*** finished computation of 7 references, err: [Inf, 0.2002839563563466, 0.1555115154851228, 0.15068048821017146, 0.14982160079479218] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [69, 8, 0]]
** centroid: 1, normalized-entropy: 0.481225663841737, [(1, 69), (2, 8)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 64, 14]]
** centroid: 2, normalized-entropy: 0.6789538995185759, [(2, 64), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [40, 11, 0]]
** centroid: 3, normalized-entropy: 0.7522121733341471, [(1, 40), (2, 11)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [59, 29, 0]]
** centroid: 4, normalized-entropy: 0.9144612916935675, [(1, 59), (2, 29)]
*** center 5: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [2, 77, 0]]
** centroid: 6, normalized-entropy: 0.17033057560105982, [(1, 2), (2, 77)]
*** center 7: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19803192183561624] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19803192183561624, 0.15262130228988827] ***
*** starting iteration: 2; err: [Inf, 0.19803192183561624, 0.15262130228988827] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19803192183561624, 0.15262130228988827, 0.14886667316034435] ***
*** starting iteration: 3; err: [Inf, 0.19803192183561624, 0.15262130228988827, 0.14886667316034435] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19803192183561624, 0.15262130228988827, 0.14886667316034435, 0.14841084730811416] ***
*** finished computation of 7 references, err: [Inf, 0.19803192183561624, 0.15262130228988827, 0.14886667316034435, 0.14841084730811416] ***
*** center 1: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 68, 15]]
** centroid: 2, normalized-entropy: 0.6816559115981193, [(2, 68), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [53, 6, 0]]
** centroid: 3, normalized-entropy: 0.4743454375622396, [(1, 53), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [59, 16, 0]]
** centroid: 4, normalized-entropy: 0.7478061583312324, [(1, 59), (2, 16)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [30, 54, 0]]
** centroid: 5, normalized-entropy: 0.940285958670631, [(1, 30), (2, 54)]
*** center 6: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 52, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20169707055017352] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20169707055017352, 0.14767779962485655] ***
*** starting iteration: 2; err: [Inf, 0.20169707055017352, 0.14767779962485655] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20169707055017352, 0.14767779962485655, 0.14397177224233745] ***
*** starting iteration: 3; err: [Inf, 0.20169707055017352, 0.14767779962485655, 0.14397177224233745] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20169707055017352, 0.14767779962485655, 0.14397177224233745, 0.14323801105283201] ***
*** finished computation of 7 references, err: [Inf, 0.20169707055017352, 0.14767779962485655, 0.14397177224233745, 0.14323801105283201] ***
*** center 1: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [87, 1, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 42, 14]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 42), (3, 14)]
*** center 4: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [57, 11, 0]]
** centroid: 5, normalized-entropy: 0.6385146263620961, [(1, 57), (2, 11)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 65, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 58, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19073771640099585] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19073771640099585, 0.15468864995613693] ***
*** starting iteration: 2; err: [Inf, 0.19073771640099585, 0.15468864995613693] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19073771640099585, 0.15468864995613693, 0.14923963473923504] ***
*** starting iteration: 3; err: [Inf, 0.19073771640099585, 0.15468864995613693, 0.14923963473923504] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19073771640099585, 0.15468864995613693, 0.14923963473923504, 0.14799934351816774] ***
*** finished computation of 7 references, err: [Inf, 0.19073771640099585, 0.15468864995613693, 0.14923963473923504, 0.14799934351816774] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [3, 65, 0]]
** centroid: 1, normalized-entropy: 0.260862909647207, [(1, 3), (2, 65)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [65, 6, 0]]
** centroid: 2, normalized-entropy: 0.4178642624458583, [(1, 65), (2, 6)]
*** center 3: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 51, 23]]
** centroid: 4, normalized-entropy: 0.8941071841443881, [(2, 51), (3, 23)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [74, 6, 0]]
** centroid: 5, normalized-entropy: 0.3843115441264972, [(1, 74), (2, 6)]
*** center 6: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 60, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19359375832602382] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19359375832602382, 0.15253766201157123] ***
*** starting iteration: 2; err: [Inf, 0.19359375832602382, 0.15253766201157123] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19359375832602382, 0.15253766201157123, 0.14794271550886334] ***
*** starting iteration: 3; err: [Inf, 0.19359375832602382, 0.15253766201157123, 0.14794271550886334] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19359375832602382, 0.15253766201157123, 0.14794271550886334, 0.1462933833254501] ***
*** finished computation of 7 references, err: [Inf, 0.19359375832602382, 0.15253766201157123, 0.14794271550886334, 0.1462933833254501] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 66, 10]]
** centroid: 1, normalized-entropy: 0.5617526078313283, [(2, 66), (3, 10)]
*** center 2: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [47, 8, 0]]
** centroid: 3, normalized-entropy: 0.5983474220910422, [(1, 47), (2, 8)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [82, 19, 0]]
** centroid: 4, normalized-entropy: 0.6975195309289136, [(1, 82), (2, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [49, 24, 0]]
** centroid: 5, normalized-entropy: 0.9136617865655933, [(1, 49), (2, 24)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 78, 5]]
** centroid: 6, normalized-entropy: 0.32840071392894665, [(2, 78), (3, 5)]
*** center 7: selecting labels [1] (freq >= 2) [from [39, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20129174304753542] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20129174304753542, 0.15766404159739614] ***
*** starting iteration: 2; err: [Inf, 0.20129174304753542, 0.15766404159739614] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20129174304753542, 0.15766404159739614, 0.15124859535321594] ***
*** starting iteration: 3; err: [Inf, 0.20129174304753542, 0.15766404159739614, 0.15124859535321594] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20129174304753542, 0.15766404159739614, 0.15124859535321594, 0.15003035922348498] ***
*** finished computation of 7 references, err: [Inf, 0.20129174304753542, 0.15766404159739614, 0.15124859535321594, 0.15003035922348498] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [31, 55, 0]]
** centroid: 1, normalized-entropy: 0.9430685934712909, [(1, 31), (2, 55)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [56, 9, 0]]
** centroid: 2, normalized-entropy: 0.5801954953637372, [(1, 56), (2, 9)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 61, 17]]
** centroid: 3, normalized-entropy: 0.7564041945982506, [(2, 61), (3, 17)]
*** center 4: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 64, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [67, 2, 0]]
** centroid: 6, normalized-entropy: 0.18927843126120178, [(1, 67), (2, 2)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [63, 6, 0]]
** centroid: 7, normalized-entropy: 0.42622865699814483, [(1, 63), (2, 6)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2005639773812145] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2005639773812145, 0.1583776303464547] ***
*** starting iteration: 2; err: [Inf, 0.2005639773812145, 0.1583776303464547] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2005639773812145, 0.1583776303464547, 0.15287996961548925] ***
*** starting iteration: 3; err: [Inf, 0.2005639773812145, 0.1583776303464547, 0.15287996961548925] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2005639773812145, 0.1583776303464547, 0.15287996961548925, 0.15079959883447736] ***
*** finished computation of 7 references, err: [Inf, 0.2005639773812145, 0.1583776303464547, 0.15287996961548925, 0.15079959883447736] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [64, 12, 0]]
** centroid: 1, normalized-entropy: 0.6292492238560344, [(1, 64), (2, 12)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [78, 15, 0]]
** centroid: 2, normalized-entropy: 0.6373874992221911, [(1, 78), (2, 15)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 60, 11]]
** centroid: 3, normalized-entropy: 0.6220403090607189, [(2, 60), (3, 11)]
*** center 4: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [28, 30, 0]]
** centroid: 5, normalized-entropy: 0.999142103991909, [(1, 28), (2, 30)]
*** center 6: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 78, 1]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20357276731170715] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20357276731170715, 0.1525159227726981] ***
*** starting iteration: 2; err: [Inf, 0.20357276731170715, 0.1525159227726981] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20357276731170715, 0.1525159227726981, 0.14845832629967481] ***
*** starting iteration: 3; err: [Inf, 0.20357276731170715, 0.1525159227726981, 0.14845832629967481] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20357276731170715, 0.1525159227726981, 0.14845832629967481, 0.14795925901271403] ***
*** finished computation of 7 references, err: [Inf, 0.20357276731170715, 0.1525159227726981, 0.14845832629967481, 0.14795925901271403] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [18, 44, 0]]
** centroid: 1, normalized-entropy: 0.8691375806126381, [(1, 18), (2, 44)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [53, 3, 0]]
** centroid: 2, normalized-entropy: 0.3013786435930858, [(1, 53), (2, 3)]
*** center 3: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [79, 7, 0]]
** centroid: 4, normalized-entropy: 0.40707680632541937, [(1, 79), (2, 7)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 66, 14]]
** centroid: 5, normalized-entropy: 0.6690158350565576, [(2, 66), (3, 14)]
*** center 6: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 64, 0]]
** centroid: 7, normalized-entropy: 0.19590927087360496, [(1, 2), (2, 64)]
finished with 11 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 383,3 => 32,1 => 585), Dict(2 => 375,3 => 40,1 => 585))
[ Info: ===== scores for single classifier: {"micro_f1":0.952,"precision":0.952,"recall":0.952,"macro_recall":0.965948717948718,"macro_f1":0.9503192848020433,"accuracy":0.952,"class_f1":{"2":0.9365079365079364,"3":0.9523809523809523,"1":0.9620689655172413},"class_precision":{"2":0.9291338582677166,"3":0.9090909090909091,"1":0.9704347826086956},"class_recall":{"2":0.944,"3":1.0,"1":0.9538461538461539}}
[ Info: ===== scores for 1: {"micro_f1":0.942,"precision":0.942,"recall":0.942,"macro_recall":0.9592934472934473,"macro_f1":0.9236113229934739,"accuracy":0.942,"class_f1":{"2":0.9236842105263157,"3":0.888888888888889,"1":0.9582608695652174},"class_precision":{"2":0.9116883116883117,"3":0.8,"1":0.9752212389380531},"class_recall":{"2":0.936,"3":1.0,"1":0.9418803418803419}}
[ Info: ===== scores for 5: {"micro_f1":0.9500000000000001,"precision":0.95,"recall":0.95,"macro_recall":0.9667236467236467,"macro_f1":0.952647965473461,"accuracy":0.95,"class_f1":{"2":0.935064935064935,"3":0.963855421686747,"1":0.9590235396687008},"class_precision":{"2":0.9113924050632911,"3":0.9302325581395349,"1":0.9786476868327402},"class_recall":{"2":0.96,"3":1.0,"1":0.9401709401709402}}
[ Info: ===== scores for 7: {"micro_f1":0.951,"precision":0.951,"recall":0.951,"macro_recall":0.966974358974359,"macro_f1":0.9533233848038831,"accuracy":0.951,"class_f1":{"2":0.9361147327249023,"3":0.963855421686747,"1":0.9600000000000001},"class_precision":{"2":0.9158163265306123,"3":0.9302325581395349,"1":0.9769911504424779},"class_recall":{"2":0.9573333333333334,"3":1.0,"1":0.9435897435897436}}
[ Info: ===== scores for 9: {"micro_f1":0.954,"precision":0.954,"recall":0.954,"macro_recall":0.9693219373219373,"macro_f1":0.9555119138433631,"accuracy":0.954,"class_f1":{"2":0.9401041666666667,"3":0.963855421686747,"1":0.9625761531766754},"class_precision":{"2":0.9185750636132316,"3":0.9302325581395349,"1":0.9804964539007093},"class_recall":{"2":0.9626666666666667,"3":1.0,"1":0.9452991452991453}}
[ Info: ===== scores for 11: {"micro_f1":0.956,"precision":0.956,"recall":0.956,"macro_recall":0.9704615384615384,"macro_f1":0.9569309898218704,"accuracy":0.956,"class_f1":{"2":0.9425587467362926,"3":0.963855421686747,"1":0.9643788010425716},"class_precision":{"2":0.9232736572890026,"3":0.9302325581395349,"1":0.980565371024735},"class_recall":{"2":0.9626666666666667,"3":1.0,"1":0.9487179487179487}}
(score = 0.941, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.941, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.942, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.942, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.945, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.945, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.95, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.95, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.95, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.95, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.95, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.95, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.952, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.952, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.951, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.951, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.952,"k":7,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.952,"precision":0.952,"recall":0.952,"macro_recall":0.9523361823361823,"macro_f1":0.9497685185185185,"accuracy":0.952,"class_f1":{"2":0.9375,"3":0.9500000000000001,"1":0.9618055555555555},"class_precision":{"2":0.916030534351145,"3":0.95,"1":0.9770723104056437},"class_recall":{"2":0.96,"3":0.95,"1":0.947008547008547}}
Test Summary: | Pass  Total
AKNC          |    8      8
[685, 2, 5, 2, 5, 4, 1, 1, 26, 1, 2, 1, 2, 6, 1, 1, 1, 1, 5, 6, 24, 20, 5, 10, 11, 2, 21, 16, 1, 6, 1, 7, 14, 11, 4, 3, 30, 28, 20, 8, 1, 5, 12, 5, 12, 3, 4, 1, 5, 4, 7, 14, 8, 49, 44, 9, 6, 11, 35, 19, 2, 20, 16, 14, 9, 3, 9, 17, 10, 6, 21, 26, 11, 4, 13, 93, 9, 2, 12, 9, 18, 25, 21, 14, 35, 31, 61, 20, 42, 32, 8, 18, 6, 1, 10, 16, 6, 5, 75, 32, 32, 2, 23, 3, 8, 2, 4, 13, 55, 60, 13, 1, 5, 58, 37, 15, 8, 182, 15, 6, 17, 12, 24, 22, 41, 2, 13, 29, 49, 231, 51, 26, 10, 6, 61, 589, 42, 16, 6, 9, 13, 53, 30, 6, 12, 160, 23, 22, 90, 6, 30, 2, 6, 12, 21, 77, 26, 32, 11, 17, 11, 65, 66, 17, 40, 6, 15, 7, 14, 8, 74, 436, 46, 11, 44, 27, 5, 13, 31, 22, 27, 21, 13, 50, 46, 18, 22, 3, 53, 2, 122, 10, 16, 10, 12, 31, 33, 26, 6, 4, 21, 9, 131, 20, 123, 36, 42, 4, 120, 4, 229, 107, 15, 139, 3, 22, 18, 23, 9, 55, 18, 4, 42, 2, 6, 13, 7, 34, 4, 34, 18, 192, 5, 3, 32, 19, 61, 10, 75, 15, 8, 100, 38, 26, 12, 3, 32, 97, 77, 8, 36, 138, 46, 15, 9, 22, 127, 27, 7, 12, 3, 14, 34, 4, 4, 50, 13, 15, 59, 36, 14, 22, 6, 4, 227, 19, 27, 41, 5, 8, 155, 32, 4, 104, 7, 40, 2, 9, 27, 18, 62, 11, 10, 10, 5, 8, 243, 8, 92, 18]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6619999999999999, speedup = 0.17912389208797586, eval_ratio = 0.072229)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.4431423611111109,"recall":0.4427083333333331,"f1":null,"seconds":0.000164790078997612,"exhaustive_search_seconds":0.00024239905178546906,"evaluations":501.40625,"distances_sum":1769.9106205007988}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.6050347222222219,"recall":0.6050347222222219,"f1":null,"seconds":0.00019277259707450867,"exhaustive_search_seconds":0.00024239905178546906,"evaluations":610.7890625,"distances_sum":1674.4397700095767}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.7039930555555552,"recall":0.7039930555555552,"f1":0.7039930555555552,"seconds":0.00020819343626499176,"exhaustive_search_seconds":0.00024239905178546906,"evaluations":722.7890625,"distances_sum":1631.081819385802}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7699652777777767,"recall":0.7699652777777767,"f1":0.7699652777777767,"seconds":0.00028147175908088684,"exhaustive_search_seconds":0.00024239905178546906,"evaluations":831.5078125,"distances_sum":1606.1829140814664}
KCenters.DeloneInvIndex> reached performance {"precision":0.812499999999999,"recall":0.812499999999999,"f1":0.812499999999999,"seconds":0.0003233030438423157,"exhaustive_search_seconds":0.00024239905178546906,"evaluations":916.7265625,"distances_sum":1592.124057304833}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.7930000000000003, speedup = 0.4450082340867324, eval_ratio = 0.09479800000000001)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
