Julia Version 1.4.2-pre.13
Commit 58353fd273 (2020-05-10 17:03 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-8.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed TreeViews ─────────────────── v0.3.0
  Installed VersionParsing ────────────── v1.2.0
  Installed ArrayInterface ────────────── v2.8.7
  Installed PyDSTool ──────────────────── v0.6.0
  Installed TableTraits ───────────────── v1.0.0
  Installed Parsers ───────────────────── v1.0.3
  Installed OrderedCollections ────────── v1.2.0
  Installed MacroTools ────────────────── v0.5.5
  Installed LoggingExtras ─────────────── v0.4.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed AbstractTrees ─────────────── v0.3.3
  Installed DocStringExtensions ───────── v0.8.1
  Installed UnPack ────────────────────── v1.0.0
  Installed Parameters ────────────────── v0.12.1
  Installed ProgressMeter ─────────────── v1.2.0
  Installed PyCall ────────────────────── v1.91.4
  Installed LeftChildRightSiblingTrees ── v0.1.2
  Installed ConsoleProgressMonitor ────── v0.1.2
  Installed RecipesBase ───────────────── v0.8.0
  Installed LabelledArrays ────────────── v1.2.0
  Installed FunctionWrappers ──────────── v1.1.1
  Installed Roots ─────────────────────── v1.0.1
  Installed DataStructures ────────────── v0.17.15
  Installed JSON ──────────────────────── v0.21.0
  Installed ChainRulesCore ────────────── v0.7.5
  Installed ZygoteRules ───────────────── v0.2.0
  Installed RecursiveArrayTools ───────── v2.3.2
  Installed MuladdMacro ───────────────── v0.2.2
  Installed Conda ─────────────────────── v1.4.1
  Installed TerminalLoggers ───────────── v0.1.1
  Installed StaticArrays ──────────────── v0.12.3
  Installed DiffEqBase ────────────────── v6.32.2
  Installed IterativeSolvers ──────────── v0.8.4
  Installed Requires ──────────────────── v1.0.1
  Installed RecursiveFactorization ────── v0.1.0
  Installed ProgressLogging ───────────── v0.1.2
   Updating `~/.julia/environments/v1.4/Project.toml`
  [7186c646] + PyDSTool v0.6.0
   Updating `~/.julia/environments/v1.4/Manifest.toml`
  [1520ce14] + AbstractTrees v0.3.3
  [4fba245c] + ArrayInterface v2.8.7
  [d360d2e6] + ChainRulesCore v0.7.5
  [8f4d0f93] + Conda v1.4.1
  [88cd18e8] + ConsoleProgressMonitor v0.1.2
  [864edb3b] + DataStructures v0.17.15
  [2b5f629d] + DiffEqBase v6.32.2
  [ffbed154] + DocStringExtensions v0.8.1
  [069b7b12] + FunctionWrappers v1.1.1
  [42fd0dbc] + IterativeSolvers v0.8.4
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [2ee39098] + LabelledArrays v1.2.0
  [1d6d02ad] + LeftChildRightSiblingTrees v0.1.2
  [e6f89c97] + LoggingExtras v0.4.0
  [1914dd2f] + MacroTools v0.5.5
  [46d2c3a1] + MuladdMacro v0.2.2
  [bac558e1] + OrderedCollections v1.2.0
  [d96e819e] + Parameters v0.12.1
  [69de0a69] + Parsers v1.0.3
  [33c8b6b6] + ProgressLogging v0.1.2
  [92933f4c] + ProgressMeter v1.2.0
  [438e738f] + PyCall v1.91.4
  [7186c646] + PyDSTool v0.6.0
  [3cdcf5f2] + RecipesBase v0.8.0
  [731186ca] + RecursiveArrayTools v2.3.2
  [f2c3362d] + RecursiveFactorization v0.1.0
  [ae029012] + Requires v1.0.1
  [f2b01f46] + Roots v1.0.1
  [90137ffa] + StaticArrays v0.12.3
  [3783bdb8] + TableTraits v1.0.0
  [5d786b92] + TerminalLoggers v0.1.1
  [a2a6695c] + TreeViews v0.3.0
  [3a884ed6] + UnPack v1.0.0
  [81def892] + VersionParsing v1.2.0
  [700de1a5] + ZygoteRules v0.2.0
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8ba89e20] + Distributed 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [4607b0f0] + SuiteSparse 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
   Building Conda ─→ `~/.julia/packages/Conda/3rPhK/deps/build.log`
   Building PyCall → `~/.julia/packages/PyCall/zqDXB/deps/build.log`
    Testing PyDSTool
Status `/tmp/jl_PFqMzS/Manifest.toml`
  [1520ce14] AbstractTrees v0.3.3
  [4fba245c] ArrayInterface v2.8.7
  [a603d957] CanonicalTraits v0.2.1
  [d360d2e6] ChainRulesCore v0.7.5
  [861a8166] Combinatorics v1.0.1
  [34da2185] Compat v3.9.1
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [8f4d0f93] Conda v1.4.1
  [88cd18e8] ConsoleProgressMonitor v0.1.2
  [187b0558] ConstructionBase v1.0.0
  [864edb3b] DataStructures v0.17.15
  [2b5f629d] DiffEqBase v6.32.2
  [c894b116] DiffEqJump v6.6.3
  [b552c78f] DiffRules v1.0.1
  [ffbed154] DocStringExtensions v0.8.1
  [e2ba6199] ExprTools v0.1.1
  [8f5d6c58] EzXML v1.1.0
  [59287772] Formatting v0.4.1
  [069b7b12] FunctionWrappers v1.1.1
  [6b9d7cbe] GeneralizedGenerated v0.2.3
  [d8418881] Intervals v1.1.0
  [42fd0dbc] IterativeSolvers v0.8.4
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [b14d175d] JuliaVariables v0.2.0
  [b964fa9f] LaTeXStrings v1.1.0
  [2ee39098] LabelledArrays v1.2.0
  [23fbe1c1] Latexify v0.13.1
  [1d6d02ad] LeftChildRightSiblingTrees v0.1.2
  [94ce4f54] Libiconv_jll v1.16.0+2
  [e6f89c97] LoggingExtras v0.4.0
  [d8e11817] MLStyle v0.3.1
  [1914dd2f] MacroTools v0.5.5
  [78c3b35d] Mocking v0.7.1
  [961ee093] ModelingToolkit v3.3.0
  [46d2c3a1] MuladdMacro v0.2.2
  [77ba4419] NaNMath v0.3.3
  [71a1bf82] NameResolution v0.1.3
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [bac558e1] OrderedCollections v1.2.0
  [65888b18] ParameterizedFunctions v5.3.0
  [d96e819e] Parameters v0.12.1
  [69de0a69] Parsers v1.0.3
  [e409e4f3] PoissonRandom v0.4.0
  [f27b6e38] Polynomials v0.8.0
  [8162dcfd] PrettyPrint v0.1.0
  [33c8b6b6] ProgressLogging v0.1.2
  [92933f4c] ProgressMeter v1.2.0
  [438e738f] PyCall v1.91.4
  [7186c646] PyDSTool v0.6.0
  [e6cf234a] RandomNumbers v1.4.0
  [3cdcf5f2] RecipesBase v0.8.0
  [731186ca] RecursiveArrayTools v2.3.2
  [f2c3362d] RecursiveFactorization v0.1.0
  [ae029012] Requires v1.0.1
  [f2b01f46] Roots v1.0.1
  [1bc83da4] SafeTestsets v0.0.1
  [276daf66] SpecialFunctions v0.10.0
  [90137ffa] StaticArrays v0.12.3
  [d1185830] SymbolicUtils v0.3.2
  [3783bdb8] TableTraits v1.0.0
  [5d786b92] TerminalLoggers v0.1.1
  [f269a46b] TimeZones v1.1.1
  [a759f4b9] TimerOutputs v0.5.5
  [a2a6695c] TreeViews v0.3.0
  [3a884ed6] UnPack v1.0.0
  [1986cc42] Unitful v1.2.0
  [81def892] VersionParsing v1.2.0
  [02c8fc9c] XML2_jll v2.9.9+4
  [83775a58] Zlib_jll v1.2.11+9
  [700de1a5] ZygoteRules v0.2.0
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [4607b0f0] SuiteSparse 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
┌ Warning: `getindex(o::PyObject, s::AbstractString)` is deprecated in favor of dot overloading (`getproperty`) so elements should now be accessed as e.g. `o."s"` instead of `o["s"]`.
│   caller = __init__() at PyDSTool.jl:23
└ @ PyDSTool ~/.julia/packages/PyDSTool/7Bz2h/src/PyDSTool.jl:23
ERROR: LoadError: InitError: PyError (PyImport_ImportModule

The Python package _pydstool_jl_hack could not be found by pyimport. Usually this means
that you did not install _pydstool_jl_hack in the Python version being used by PyCall.

PyCall is currently configured to use the Python version at:

/usr/bin/python3

and you should use whatever mechanism you usually use (apt-get, pip, conda,
etcetera) to install the Python package containing the _pydstool_jl_hack module.

One alternative is to re-configure PyCall to use a different Python
version on your system: set ENV["PYTHON"] to the path/name of the python
executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.

Another alternative is to configure PyCall to use a Julia-specific Python
distribution via the Conda.jl package (which installs a private Anaconda
Python distribution), which has the advantage that packages can be installed
and kept up-to-date via Julia.  As explained in the PyCall documentation,
set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
To install the _pydstool_jl_hack module, you can use `pyimport_conda("_pydstool_jl_hack", PKG)`,
where PKG is the Anaconda package the contains the module _pydstool_jl_hack,
or alternatively you can use the Conda package directly (via
`using Conda` followed by `Conda.add` etcetera).

) <class 'ModuleNotFoundError'>
ModuleNotFoundError("No module named 'scipy'",)
  File "/home/pkgeval/.julia/packages/PyDSTool/7Bz2h/src/_pydstool_jl_hack.py", line 1, in <module>
    import scipy.special

Stacktrace:
 [1] pyimport(::String) at /home/pkgeval/.julia/packages/PyCall/zqDXB/src/PyCall.jl:536
 [2] __init__() at /home/pkgeval/.julia/packages/PyDSTool/7Bz2h/src/PyDSTool.jl:24
 [3] _include_from_serialized(::String, ::Array{Any,1}) at ./loading.jl:697
 [4] _require_from_serialized(::String) at ./loading.jl:748
 [5] _require(::Base.PkgId) at ./loading.jl:1039
 [6] require(::Base.PkgId) at ./loading.jl:927
 [7] require(::Module, ::Symbol) at ./loading.jl:922
 [8] include(::String) at ./client.jl:439
 [9] top-level scope at none:6
during initialization of module PyDSTool
in expression starting at /home/pkgeval/.julia/packages/PyDSTool/7Bz2h/test/runtests.jl:1
caused by [exception 1]
PyError (PyImport_ImportModule

The Python package PyDSTool could not be found by pyimport. Usually this means
that you did not install PyDSTool in the Python version being used by PyCall.

PyCall is currently configured to use the Python version at:

/usr/bin/python3

and you should use whatever mechanism you usually use (apt-get, pip, conda,
etcetera) to install the Python package containing the PyDSTool module.

One alternative is to re-configure PyCall to use a different Python
version on your system: set ENV["PYTHON"] to the path/name of the python
executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.

Another alternative is to configure PyCall to use a Julia-specific Python
distribution via the Conda.jl package (which installs a private Anaconda
Python distribution), which has the advantage that packages can be installed
and kept up-to-date via Julia.  As explained in the PyCall documentation,
set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
To install the PyDSTool module, you can use `pyimport_conda("PyDSTool", PKG)`,
where PKG is the Anaconda package the contains the module PyDSTool,
or alternatively you can use the Conda package directly (via
`using Conda` followed by `Conda.add` etcetera).

) <class 'ModuleNotFoundError'>
ModuleNotFoundError("No module named 'PyDSTool'",)

Stacktrace:
 [1] pyimport(::String) at /home/pkgeval/.julia/packages/PyCall/zqDXB/src/PyCall.jl:536
 [2] pyimport_conda(::String, ::String, ::String) at /home/pkgeval/.julia/packages/PyCall/zqDXB/src/PyCall.jl:694
 [3] __init__() at /home/pkgeval/.julia/packages/PyDSTool/7Bz2h/src/PyDSTool.jl:11
 [4] _include_from_serialized(::String, ::Array{Any,1}) at ./loading.jl:697
 [5] _require_from_serialized(::String) at ./loading.jl:748
 [6] _require(::Base.PkgId) at ./loading.jl:1039
 [7] require(::Base.PkgId) at ./loading.jl:927
 [8] require(::Module, ::Symbol) at ./loading.jl:922
 [9] include(::String) at ./client.jl:439
 [10] top-level scope at none:6
ERROR: Package PyDSTool errored during testing
Stacktrace:
 [1] pkgerror(::String, ::Vararg{String,N} where N) at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/Types.jl:53
 [2] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/Operations.jl:1510
 [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:316
 [4] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:303
 [5] #test#68 at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:297 [inlined]
 [6] test at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:297 [inlined]
 [7] #test#67 at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:296 [inlined]
 [8] test at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:296 [inlined]
 [9] test(::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:295
 [10] test(::String) at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:295
 [11] top-level scope at none:16
