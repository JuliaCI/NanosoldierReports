Julia Version 1.4.2-pre.0
Commit ef4fe83698 (2020-04-15 16:24 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-8.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed Reexport ──────────────────── v0.2.0
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed Missings ──────────────────── v0.4.3
  Installed LearnBase ─────────────────── v0.2.2
  Installed DataAPI ───────────────────── v1.3.0
  Installed KCenters ──────────────────── v0.2.2
  Installed CategoricalArrays ─────────── v0.7.7
  Installed SimilaritySearch ──────────── v0.3.19
  Installed Parsers ───────────────────── v1.0.3
  Installed PooledArrays ──────────────── v0.5.3
  Installed DataValueInterfaces ───────── v1.0.0
  Installed InvertedIndices ───────────── v1.0.0
  Installed MappedArrays ──────────────── v0.2.2
  Installed Tables ────────────────────── v1.0.4
  Installed OrderedCollections ────────── v1.2.0
  Installed DataStructures ────────────── v0.17.15
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed StatsBase ─────────────────── v0.32.2
  Installed MLDataUtils ───────────────── v0.5.1
  Installed Compat ────────────────────── v3.9.1
  Installed TableTraits ───────────────── v1.0.0
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed JSON ──────────────────────── v0.21.0
  Installed MLDataPattern ─────────────── v0.5.3
  Installed DataFrames ────────────────── v0.20.2
   Updating `~/.julia/environments/v1.4/Project.toml`
  [5d8de97f] + KCenters v0.2.2
   Updating `~/.julia/environments/v1.4/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.9.1
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.15
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.2.0
  [69de0a69] + Parsers v1.0.3
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
    Testing KCenters
Status `/tmp/jl_GEr5ye/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.9.1
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.15
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.2.0
  [69de0a69] Parsers v1.0.3
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0723782532413801
[ Info: 0.9326678744951884
[ Info: 0.8326150393486023
[ Info: 0.5567020623385907
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.32921808046599227
mean(cdnet.distances) = 0.35179740212857724
mean(crand.distances) = 0.3371164838721355
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.1728515625,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.1728515625,"f1":null,"seconds":0.0010324809700250626,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":4.90625,"distances_sum":504.37629210468793}}, beam: 3, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.1728515625,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.1728515625,"f1":null,"seconds":0.0010324809700250626,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":4.90625,"distances_sum":504.37629210468793}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.421875, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.421875,"f1":null,"seconds":5.453824996948242e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":6.3828125,"distances_sum":933.9581594740381}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.671875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.671875,"f1":0.7932484182484191,"seconds":4.932284355163574e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":7.875,"distances_sum":1685.9309559093595}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5234375, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5234375,"f1":0.6739834817959823,"seconds":5.206093192100525e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":7.265625,"distances_sum":1246.9359653922825}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.671875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.671875,"f1":0.7932484182484191,"seconds":4.932284355163574e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":7.875,"distances_sum":1685.9309559093595}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8779296875, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8779296875,"f1":0.9309383325008332,"seconds":7.184222340583801e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":8.890625,"distances_sum":2348.7699218238104}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7392578125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7392578125,"f1":0.8438306485181495,"seconds":5.057081580162048e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":8.375,"distances_sum":1893.374083301828}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8779296875,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.8779296875,"f1":0.9309383325008332,"seconds":7.184222340583801e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":8.890625,"distances_sum":2348.7699218238104}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9526098901098905,"seconds":6.979331374168396e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":8.8515625,"distances_sum":2562.046994065941}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9336226273726278,"seconds":6.757676601409912e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":8.8515625,"distances_sum":2399.7482324553125}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9623740842490848,"seconds":6.821006536483765e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":8.9140625,"distances_sum":2633.8264040903814}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9326171875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9623740842490848,"seconds":6.821006536483765e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":8.9140625,"distances_sum":2633.8264040903814}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9326171875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9623740842490848,"seconds":6.821006536483765e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":8.9140625,"distances_sum":2633.8264040903814}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.21875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.21875,"f1":null,"seconds":4.079192876815796e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":6.484375,"distances_sum":486.48012891831587}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5361328125, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5361328125,"f1":null,"seconds":4.958361387252808e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":7.5546875,"distances_sum":1226.8943645333563}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5361328125,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.5361328125,"f1":null,"seconds":4.958361387252808e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":7.5546875,"distances_sum":1226.8943645333563}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.666015625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.666015625,"f1":0.7854844807969816,"seconds":4.997476935386658e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.0078125,"distances_sum":1605.2712274423272}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.677734375, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.677734375,"f1":0.7942795052170061,"seconds":6.269663572311401e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":7.9921875,"distances_sum":1708.622313298304}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7607421875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7607421875,"f1":0.8560730935730944,"seconds":5.297362804412842e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.3671875,"distances_sum":1931.0666656003734}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7607421875,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7607421875,"f1":0.8560730935730944,"seconds":5.297362804412842e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.3671875,"distances_sum":1931.0666656003734}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9633012820512824,"seconds":6.6086649894714355e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.90625,"distances_sum":2588.7720853384358}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7958984375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7958984375,"f1":0.8795215201465209,"seconds":6.202608346939087e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.53125,"distances_sum":2048.0595027361232}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9535084706959713,"seconds":7.826834917068481e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.8828125,"distances_sum":2514.3206750878967}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7666015625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7666015625,"f1":0.8571954087579096,"seconds":5.543231964111328e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.484375,"distances_sum":1920.1699706128456}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8408203125, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8408203125,"f1":0.9061787171162179,"seconds":5.850568413734436e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.6171875,"distances_sum":2209.641349706762}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.935546875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9633012820512824,"seconds":6.6086649894714355e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.90625,"distances_sum":2588.7720853384358}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.935546875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9633012820512824,"seconds":6.6086649894714355e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.90625,"distances_sum":2588.7720853384358}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.53515625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.53515625,"f1":0.6778433372183378,"seconds":5.759298801422119e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":6.5234375,"distances_sum":1343.198258861222}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.369140625, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.369140625,"f1":null,"seconds":3.766268491744995e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":5.484375,"distances_sum":901.7685596499533}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.53515625,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.53515625,"f1":0.6778433372183378,"seconds":5.759298801422119e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":6.5234375,"distances_sum":1343.198258861222}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.546875, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.546875,"f1":0.6943202630702636,"seconds":5.347654223442078e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":6.734375,"distances_sum":1364.8839694062929}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.783203125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.783203125,"f1":0.8713604104229113,"seconds":5.979090929031372e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.2734375,"distances_sum":2081.1693607009975}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8134765625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8134765625,"f1":0.8906765109890118,"seconds":5.550682544708252e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.40625,"distances_sum":2157.670382540617}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8134765625,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8134765625,"f1":0.8906765109890118,"seconds":5.550682544708252e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.40625,"distances_sum":2157.670382540617}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.82421875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.82421875,"f1":0.8957625707625715,"seconds":6.9607049226760864e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.40625,"distances_sum":2195.8499704582973}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.86328125, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.86328125,"f1":0.9207532051282057,"seconds":7.569789886474609e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.5234375,"distances_sum":2390.040619760614}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.965235805860806,"seconds":6.100162863731384e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.8203125,"distances_sum":2711.6006487968993}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.859375, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.859375,"f1":0.9189336704961713,"seconds":1.4239922165870667e-5,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.5703125,"distances_sum":2351.151117683177}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9591918498168501,"seconds":6.444752216339111e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.8359375,"distances_sum":2649.2099999914067}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9365234375,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.965235805860806,"seconds":6.100162863731384e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.8203125,"distances_sum":2711.6006487968993}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9365234375,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.965235805860806,"seconds":6.100162863731384e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.8203125,"distances_sum":2711.6006487968993}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1640625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1640625,"f1":null,"seconds":3.1311064958572388e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":5.1015625,"distances_sum":407.48009607827703}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.361328125, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.361328125,"f1":null,"seconds":3.822147846221924e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":5.9140625,"distances_sum":924.1453887587023}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.337890625, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.337890625,"f1":null,"seconds":3.825873136520386e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":6.1953125,"distances_sum":806.5694210823432}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.361328125,"state":{"ssize":3,"bsize":2},"perf":{"precision":null,"recall":0.361328125,"f1":null,"seconds":3.822147846221924e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":5.9140625,"distances_sum":924.1453887587023}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.74609375, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.74609375,"f1":0.8424950049950057,"seconds":6.38328492641449e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.234375,"distances_sum":1935.1761991680892}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8544921875, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8544921875,"f1":0.9118964368964374,"seconds":3.6034733057022095e-5,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.6796875,"distances_sum":2269.292811869688}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.646484375, conf: {"ssize":3,"bsize":4}, perf: {"precision":null,"recall":0.646484375,"f1":null,"seconds":4.639849066734314e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":7.9375,"distances_sum":1617.6670235600313}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.486328125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.486328125,"f1":0.6336850649350653,"seconds":4.230067133903503e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":7.046875,"distances_sum":1234.9034052014008}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6337890625, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6337890625,"f1":0.7596476440226447,"seconds":4.850327968597412e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":7.734375,"distances_sum":1621.5018300790596}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8544921875,"state":{"ssize":5,"bsize":6},"perf":{"precision":1.0,"recall":0.8544921875,"f1":0.9118964368964374,"seconds":3.6034733057022095e-5,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.6796875,"distances_sum":2269.292811869688}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9459478021978025,"seconds":7.2605907917022705e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.8046875,"distances_sum":2462.5998902624706}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9380125083250089,"seconds":5.770474672317505e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.828125,"distances_sum":2409.0934749948615}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":10,"bsize":7}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9360238719613725,"seconds":5.8747828006744385e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.8671875,"distances_sum":2409.4881387119726}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9479052197802201,"seconds":6.0498714447021484e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.875,"distances_sum":2499.0534685583875}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8857421875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8857421875,"f1":0.9331959706959713,"seconds":5.077570676803589e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.796875,"distances_sum":2405.0396215980727}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9478136446886449,"seconds":5.066394805908203e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.78125,"distances_sum":2533.305060937515}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9432322885447889,"seconds":4.947185516357422e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.7421875,"distances_sum":2502.8817774659315}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91015625,"state":{"ssize":7,"bsize":7},"perf":{"precision":1.0,"recall":0.91015625,"f1":0.9479052197802201,"seconds":6.0498714447021484e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.875,"distances_sum":2499.0534685583875}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.91015625,"state":{"ssize":7,"bsize":7},"perf":{"precision":1.0,"recall":0.91015625,"f1":0.9479052197802201,"seconds":6.0498714447021484e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.875,"distances_sum":2499.0534685583875}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6572265625, conf: {"ssize":1,"bsize":4}, perf: {"precision":null,"recall":0.6572265625,"f1":null,"seconds":1.0622665286064148e-5,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":7.7890625,"distances_sum":1492.3865271032264}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3994140625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3994140625,"f1":null,"seconds":4.420056939125061e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":6.6796875,"distances_sum":813.4978716661786}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76953125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.76953125,"f1":0.8603625541125548,"seconds":5.189329385757446e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":8.1484375,"distances_sum":1842.7981834776315}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.76953125,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.76953125,"f1":0.8603625541125548,"seconds":5.189329385757446e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":8.1484375,"distances_sum":1842.7981834776315}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9611092032967037,"seconds":9.078532457351685e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":8.828125,"distances_sum":2474.651852650587}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9457474816849822,"seconds":5.725771188735962e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":8.75,"distances_sum":2343.4591313337583}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8388671875, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8388671875,"f1":0.9056922244422252,"seconds":4.664063453674316e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":8.4375,"distances_sum":2065.8572268830317}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8037109375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8037109375,"f1":0.8796261030636037,"seconds":5.295500159263611e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":8.140625,"distances_sum":2019.072453809534}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.931640625,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9611092032967037,"seconds":9.078532457351685e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":8.828125,"distances_sum":2474.651852650587}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.966796875, conf: {"ssize":5,"bsize":13}, perf: {"precision":1.0,"recall":0.966796875,"f1":0.9818280677655681,"seconds":6.109476089477539e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":8.9296875,"distances_sum":2607.9373457416314}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.962890625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.962890625,"f1":0.9799107142857147,"seconds":6.282702088356018e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":8.9375,"distances_sum":2583.8210001339758}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9677734375, conf: {"ssize":3,"bsize":12}, perf: {"precision":1.0,"recall":0.9677734375,"f1":0.9818280677655682,"seconds":6.355345249176025e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":8.953125,"distances_sum":2585.376069473415}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9625972985347987,"seconds":8.499808609485626e-5,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":8.84375,"distances_sum":2487.8429253267823}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9677734375,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.9677734375,"f1":0.9818280677655682,"seconds":6.355345249176025e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":8.953125,"distances_sum":2585.376069473415}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9677734375,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.9677734375,"f1":0.9818280677655682,"seconds":6.355345249176025e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":8.953125,"distances_sum":2585.376069473415}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3701171875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3701171875,"f1":null,"seconds":3.984197974205017e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":7.5078125,"distances_sum":795.8953928948206}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.810546875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.810546875,"f1":0.8876727439227446,"seconds":5.705282092094421e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.5625,"distances_sum":2062.7148848616166}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.810546875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.810546875,"f1":0.8876727439227446,"seconds":5.705282092094421e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.5625,"distances_sum":2062.7148848616166}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8662109375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8662109375,"f1":0.9215602106227112,"seconds":6.692484021186829e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.703125,"distances_sum":2272.727125165085}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8662109375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8662109375,"f1":0.9215602106227112,"seconds":6.692484021186829e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.703125,"distances_sum":2272.727125165085}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9623912545787549,"seconds":5.880370736122131e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.9140625,"distances_sum":2547.973408704904}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9648122710622715,"seconds":5.712732672691345e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.96875,"distances_sum":2557.9602589103124}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9375,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9648122710622715,"seconds":5.712732672691345e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.96875,"distances_sum":2557.9602589103124}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9375,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9648122710622715,"seconds":5.712732672691345e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.96875,"distances_sum":2557.9602589103124}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4072265625, conf: {"ssize":1,"bsize":2}, perf: {"precision":1.0,"recall":0.4072265625,"f1":0.5570332445332447,"seconds":4.015862941741943e-6,"exhaustive_search_seconds":1.2908130884170532e-6,"evaluations":7.796875,"distances_sum":883.545281051641}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.220703125, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.220703125,"f1":null,"seconds":3.339722752571106e-6,"exhaustive_search_seconds":1.2908130884170532e-6,"evaluations":7.53125,"distances_sum":481.301132617711}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4072265625,"state":{"ssize":1,"bsize":2},"perf":{"precision":1.0,"recall":0.4072265625,"f1":0.5570332445332447,"seconds":4.015862941741943e-6,"exhaustive_search_seconds":1.2908130884170532e-6,"evaluations":7.796875,"distances_sum":883.545281051641}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8505859375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8505859375,"f1":0.9097615925740932,"seconds":5.465000867843628e-6,"exhaustive_search_seconds":1.2908130884170532e-6,"evaluations":8.765625,"distances_sum":2217.660616803342}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.53125, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.53125,"f1":0.6751061438561444,"seconds":4.278495907783508e-6,"exhaustive_search_seconds":1.2908130884170532e-6,"evaluations":7.7578125,"distances_sum":1177.2862849627923}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6796875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6796875,"f1":0.7971729659229667,"seconds":4.6622008085250854e-6,"exhaustive_search_seconds":1.2908130884170532e-6,"evaluations":8.2421875,"distances_sum":1596.1386270516844}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8505859375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8505859375,"f1":0.9097615925740932,"seconds":5.465000867843628e-6,"exhaustive_search_seconds":1.2908130884170532e-6,"evaluations":8.765625,"distances_sum":2217.660616803342}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.859375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.859375,"f1":0.9157540376290381,"seconds":5.610287189483643e-6,"exhaustive_search_seconds":1.2908130884170532e-6,"evaluations":8.84375,"distances_sum":2216.0425070177935}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.958751144688645,"seconds":5.686655640602112e-6,"exhaustive_search_seconds":1.2908130884170532e-6,"evaluations":8.8515625,"distances_sum":2515.0533588307353}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8662109375, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8662109375,"f1":0.9202157217782224,"seconds":5.349516868591309e-6,"exhaustive_search_seconds":1.2908130884170532e-6,"evaluations":8.7421875,"distances_sum":2280.702449970388}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.9316709332334339,"seconds":5.511566996574402e-6,"exhaustive_search_seconds":1.2908130884170532e-6,"evaluations":8.765625,"distances_sum":2330.086323091555}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.927734375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.958751144688645,"seconds":5.686655640602112e-6,"exhaustive_search_seconds":1.2908130884170532e-6,"evaluations":8.8515625,"distances_sum":2515.0533588307353}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.927734375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.958751144688645,"seconds":5.686655640602112e-6,"exhaustive_search_seconds":1.2908130884170532e-6,"evaluations":8.8515625,"distances_sum":2515.0533588307353}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6962890625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6962890625,"f1":0.8112533300033309,"seconds":4.954636096954346e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.296875,"distances_sum":1681.6013079711772}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6962890625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6962890625,"f1":0.8112533300033309,"seconds":4.954636096954346e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.296875,"distances_sum":1681.6013079711772}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.936409944222445,"seconds":5.58607280254364e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8125,"distances_sum":2372.8488424133534}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.849609375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.849609375,"f1":0.9113069222444233,"seconds":5.41098415851593e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8359375,"distances_sum":2188.800670000386}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8916015625,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.8916015625,"f1":0.936409944222445,"seconds":5.58607280254364e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8125,"distances_sum":2372.8488424133534}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9702953296703299,"seconds":5.783513188362122e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.9140625,"distances_sum":2597.069974280104}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9739411630036632,"seconds":5.764886736869812e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.984375,"distances_sum":2605.130593782126}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9717261904761909,"seconds":5.520880222320557e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.921875,"distances_sum":2592.8982403192285}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9521978021978028,"seconds":5.535781383514404e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.890625,"distances_sum":2468.439724173634}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.953125,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9739411630036632,"seconds":5.764886736869812e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.984375,"distances_sum":2605.130593782126}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.953125,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9739411630036632,"seconds":5.764886736869812e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.984375,"distances_sum":2605.130593782126}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3369140625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3369140625,"f1":null,"seconds":3.378838300704956e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":5.3203125,"distances_sum":750.3884465441929}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3369140625,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.3369140625,"f1":null,"seconds":3.378838300704956e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":5.3203125,"distances_sum":750.3884465441929}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3369140625,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.3369140625,"f1":null,"seconds":3.378838300704956e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":5.3203125,"distances_sum":750.3884465441929}}, beam: 3, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.3369140625,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.3369140625,"f1":null,"seconds":3.378838300704956e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":5.3203125,"distances_sum":750.3884465441929}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2119140625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2119140625,"f1":null,"seconds":2.9709190130233765e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":5.859375,"distances_sum":463.8466031704418}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.748046875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.748046875,"f1":0.8462979728604737,"seconds":4.854053258895874e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":7.859375,"distances_sum":1780.390496326236}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.748046875,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.748046875,"f1":0.8462979728604737,"seconds":4.854053258895874e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":7.859375,"distances_sum":1780.390496326236}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9720066391941398,"seconds":5.031004548072815e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.8984375,"distances_sum":2527.513276603497}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9453182234432238,"seconds":5.055218935012817e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.75,"distances_sum":2352.920754032835}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9476076007326013,"seconds":5.766749382019043e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.796875,"distances_sum":2382.7375953940127}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7919921875, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.7919921875,"f1":0.8756098068598075,"seconds":5.127862095832825e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.1796875,"distances_sum":1894.194952380536}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94921875,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9720066391941398,"seconds":5.031004548072815e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.8984375,"distances_sum":2527.513276603497}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":5,"bsize":12}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9752804487179491,"seconds":5.964189767837524e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.9296875,"distances_sum":2540.6036988903197}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":7,"bsize":12}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9758756868131874,"seconds":6.143003702163696e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.8984375,"distances_sum":2574.654463149954}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.95703125,"state":{"ssize":7,"bsize":12},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9758756868131874,"seconds":6.143003702163696e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.8984375,"distances_sum":2574.654463149954}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.95703125,"state":{"ssize":7,"bsize":12},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9758756868131874,"seconds":6.143003702163696e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.8984375,"distances_sum":2574.654463149954}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.41015625, conf: {"ssize":3,"bsize":2}, perf: {"precision":1.0,"recall":0.41015625,"f1":0.5598901098901102,"seconds":3.6098062992095947e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":6.65625,"distances_sum":875.6778415663395}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.419921875, conf: {"ssize":1,"bsize":2}, perf: {"precision":1.0,"recall":0.419921875,"f1":0.5656302031302031,"seconds":3.999099135398865e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":6.7734375,"distances_sum":903.663958709733}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.419921875,"state":{"ssize":1,"bsize":2},"perf":{"precision":1.0,"recall":0.419921875,"f1":0.5656302031302031,"seconds":3.999099135398865e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":6.7734375,"distances_sum":903.663958709733}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.802734375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.802734375,"f1":0.882629870129871,"seconds":4.906207323074341e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.3203125,"distances_sum":2081.899344292894}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.810546875, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.810546875,"f1":0.8870051823176832,"seconds":4.8764050006866455e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.3125,"distances_sum":2085.665854705102}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.810546875,"state":{"ssize":5,"bsize":6},"perf":{"precision":1.0,"recall":0.810546875,"f1":0.8870051823176832,"seconds":4.8764050006866455e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.3125,"distances_sum":2085.665854705102}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9612751831501835,"seconds":5.358830094337463e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.8984375,"distances_sum":2559.2249654832217}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8486328125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8486328125,"f1":0.9113412629037636,"seconds":5.720183253288269e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.6640625,"distances_sum":2255.7181991955463}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9554544413919419,"seconds":5.543231964111328e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.8515625,"distances_sum":2521.7700543700475}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9306640625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.9612751831501835,"seconds":5.358830094337463e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.8984375,"distances_sum":2559.2249654832217}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9306640625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.9612751831501835,"seconds":5.358830094337463e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.8984375,"distances_sum":2559.2249654832217}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2431640625,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2431640625,"f1":null,"seconds":3.0975788831710815e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":6.015625,"distances_sum":606.985571744348}}, beam: 2, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.2431640625,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2431640625,"f1":null,"seconds":3.0975788831710815e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":6.015625,"distances_sum":606.985571744348}}, n: 9
mean(cfft.distances) = 0.3566403519480594
mean(cdnet.distances) = 0.4276060850456496
mean(crand.distances) = 0.6251676605991325
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8777777777777779
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.9
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8422222222222223
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8955555555555555
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.9133333333333334
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9022222222222221
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.8866666666666667
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.8866666666666667
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8711111111111111
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8933333333333334
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8888888888888888
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8533333333333334
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9377777777777778
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8977777777777778
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9022222222222221
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9355555555555556
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9266666666666667
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8688888888888888
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8711111111111111
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8822222222222221
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8933333333333332
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9244444444444445
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.8844444444444445
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.9066666666666666
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9022222222222221
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9022222222222221
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8688888888888888
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8666666666666667
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8488888888888889
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8733333333333334
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9133333333333334
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.8933333333333332
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 5, 2]]
** centroid: 1, normalized-entropy: 0.8631205685666311, [(2, 5), (3, 2)]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 17, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 21, 1]]
** centroid: 9, normalized-entropy: 0.2667649878030262, [(2, 21), (3, 1)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 15]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 3, 13]]
** centroid: 11, normalized-entropy: 0.6962122601251459, [(2, 3), (3, 13)]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 2, 1, 3, 2, 3, 3, 2, 3, 2, 3, 1]
acc = 0.9666666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 5, 2]]
** centroid: 1, normalized-entropy: 0.8631205685666311, [(2, 5), (3, 2)]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 17, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 21, 1]]
** centroid: 9, normalized-entropy: 0.2667649878030262, [(2, 21), (3, 1)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 15]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 3, 13]]
** centroid: 11, normalized-entropy: 0.6962122601251459, [(2, 3), (3, 13)]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 2, 1, 3, 2, 3, 3, 2, 3, 2, 3, 1]
acc = 0.9666666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 5, 2]]
** centroid: 1, normalized-entropy: 0.8631205685666311, [(2, 5), (3, 2)]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 17, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 21, 1]]
** centroid: 9, normalized-entropy: 0.2667649878030262, [(2, 21), (3, 1)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 15]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 3, 13]]
** centroid: 11, normalized-entropy: 0.6962122601251459, [(2, 3), (3, 13)]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 2, 1, 3, 2, 3, 3, 2, 3, 2, 3, 1]
acc = 0.9666666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 5, 2]]
** centroid: 1, normalized-entropy: 0.8631205685666311, [(2, 5), (3, 2)]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 17, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 21, 1]]
** centroid: 9, normalized-entropy: 0.2667649878030262, [(2, 21), (3, 1)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 15]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 3, 13]]
** centroid: 11, normalized-entropy: 0.6962122601251459, [(2, 3), (3, 13)]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 2, 1, 3, 2, 3, 3, 2, 3, 2, 3, 1]
acc = 0.9666666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 5, 2]]
** centroid: 1, normalized-entropy: 0.8631205685666311, [(2, 5), (3, 2)]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 17, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 21, 1]]
** centroid: 9, normalized-entropy: 0.2667649878030262, [(2, 21), (3, 1)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 15]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 3, 13]]
** centroid: 11, normalized-entropy: 0.6962122601251459, [(2, 3), (3, 13)]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 2, 1, 3, 2, 3, 3, 2, 3, 2, 3, 1]
acc = 0.9666666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 5, 2]]
** centroid: 1, normalized-entropy: 0.8631205685666311, [(2, 5), (3, 2)]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 17, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 21, 1]]
** centroid: 9, normalized-entropy: 0.2667649878030262, [(2, 21), (3, 1)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 15]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 3, 13]]
** centroid: 11, normalized-entropy: 0.6962122601251459, [(2, 3), (3, 13)]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 2, 1, 3, 2, 3, 3, 2, 3, 2, 3, 1]
acc = 0.9133333333333333
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 5, 2]]
** centroid: 1, normalized-entropy: 0.8631205685666311, [(2, 5), (3, 2)]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 17, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 21, 1]]
** centroid: 9, normalized-entropy: 0.2667649878030262, [(2, 21), (3, 1)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 15]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 3, 13]]
** centroid: 11, normalized-entropy: 0.6962122601251459, [(2, 3), (3, 13)]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 2, 1, 3, 2, 3, 3, 2, 3, 2, 3, 1]
acc = 0.9533333333333334
*** finished computation of 12 references, err: [Inf, 0.6234646276632945] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 10, 2]]
** centroid: 1, normalized-entropy: 0.6500224216483541, [(2, 10), (3, 2)]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 9, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 17, 1]]
** centroid: 7, normalized-entropy: 0.3095434291503252, [(2, 17), (3, 1)]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 1, 6]]
** centroid: 8, normalized-entropy: 0.5916727785823274, [(2, 1), (3, 6)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 13, 2]]
** centroid: 10, normalized-entropy: 0.5665095065529052, [(2, 13), (3, 2)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
finished with 15 centroids; started with 12
acc = 0.9466666666666667
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.2051632104482776] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2051632104482776, 0.1675123561910625] ***
*** starting iteration: 2; err: [Inf, 0.2051632104482776, 0.1675123561910625] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2051632104482776, 0.1675123561910625, 0.159498477822055] ***
*** starting iteration: 3; err: [Inf, 0.2051632104482776, 0.1675123561910625, 0.159498477822055] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2051632104482776, 0.1675123561910625, 0.159498477822055, 0.1557011893102983] ***
*** finished computation of 7 references, err: [Inf, 0.2051632104482776, 0.1675123561910625, 0.159498477822055, 0.1557011893102983] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [20, 49, 0]]
** centroid: 1, normalized-entropy: 0.868533960265235, [(1, 20), (2, 49)]
*** center 2: selecting labels [1] (freq >= 1) [from [129, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [9, 83, 0]]
** centroid: 3, normalized-entropy: 0.4620663276355394, [(1, 9), (2, 83)]
*** center 4: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [94, 1, 0]]
** centroid: 5, normalized-entropy: 0.08426242877623306, [(1, 94), (2, 1)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [71, 59, 0]]
** centroid: 6, normalized-entropy: 0.993844848434754, [(1, 71), (2, 59)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 60, 16]]
** centroid: 7, normalized-entropy: 0.7424875695421234, [(2, 60), (3, 16)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18655663178590415] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18655663178590415, 0.1549596656330612] ***
*** finished computation of 7 references, err: [Inf, 0.18655663178590415, 0.1549596656330612] ***
*** center 1: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 41, 16]]
** centroid: 2, normalized-entropy: 0.8564052389131375, [(2, 41), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [66, 9, 0]]
** centroid: 3, normalized-entropy: 0.5293608652873645, [(1, 66), (2, 9)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [90, 26, 0]]
** centroid: 4, normalized-entropy: 0.7676515870125797, [(1, 90), (2, 26)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [47, 83, 0]]
** centroid: 5, normalized-entropy: 0.9439528220235028, [(1, 47), (2, 83)]
*** center 6: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 93, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18451271412651177] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18451271412651177, 0.1531071696455578] ***
*** finished computation of 7 references, err: [Inf, 0.18451271412651177, 0.1531071696455578] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [54, 84, 0]]
** centroid: 1, normalized-entropy: 0.9656361333706099, [(1, 54), (2, 84)]
*** center 2: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 90, 16]]
** centroid: 4, normalized-entropy: 0.612196127490834, [(2, 90), (3, 16)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [96, 18, 0]]
** centroid: 5, normalized-entropy: 0.6292492238560344, [(1, 96), (2, 18)]
*** center 6: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [18, 71, 0]]
** centroid: 7, normalized-entropy: 0.7263997735417457, [(1, 18), (2, 71)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1894173052362997] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1894173052362997, 0.1527117700853582] ***
*** finished computation of 7 references, err: [Inf, 0.1894173052362997, 0.1527117700853582] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [71, 71, 0]]
** centroid: 1, normalized-entropy: 1.0, [(1, 71), (2, 71)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [62, 8, 0]]
** centroid: 2, normalized-entropy: 0.5127091420308771, [(1, 62), (2, 8)]
*** center 3: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 63, 26]]
** centroid: 4, normalized-entropy: 0.8714630056611941, [(2, 63), (3, 26)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [20, 103, 0]]
** centroid: 5, normalized-entropy: 0.6404973004805509, [(1, 20), (2, 103)]
*** center 6: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22463270449485104] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22463270449485104, 0.1894587172893108] ***
*** starting iteration: 2; err: [Inf, 0.22463270449485104, 0.1894587172893108] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22463270449485104, 0.1894587172893108, 0.18777427846263792] ***
*** starting iteration: 3; err: [Inf, 0.22463270449485104, 0.1894587172893108, 0.18777427846263792] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22463270449485104, 0.1894587172893108, 0.18777427846263792, 0.18658016736594005] ***
*** finished computation of 7 references, err: [Inf, 0.22463270449485104, 0.1894587172893108, 0.18777427846263792, 0.18658016736594005] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 99, 16]]
** centroid: 1, normalized-entropy: 0.5819569606149722, [(2, 99), (3, 16)]
*** center 2: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [71, 10, 0]]
** centroid: 3, normalized-entropy: 0.5392163432092415, [(1, 71), (2, 10)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [62, 33, 0]]
** centroid: 4, normalized-entropy: 0.9316958485118404, [(1, 62), (2, 33)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [94, 9, 0]]
** centroid: 5, normalized-entropy: 0.4276590022251725, [(1, 94), (2, 9)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [96, 4, 0]]
** centroid: 6, normalized-entropy: 0.24229218908241482, [(1, 96), (2, 4)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 97, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.39199319667275156] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39199319667275156, 0.24284384006707072] ***
*** starting iteration: 2; err: [Inf, 0.39199319667275156, 0.24284384006707072] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39199319667275156, 0.24284384006707072, 0.2415195904635788] ***
*** starting iteration: 3; err: [Inf, 0.39199319667275156, 0.24284384006707072, 0.2415195904635788] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39199319667275156, 0.24284384006707072, 0.2415195904635788, 0.24105519576728143] ***
*** finished computation of 3 references, err: [Inf, 0.39199319667275156, 0.24284384006707072, 0.2415195904635788, 0.24105519576728143] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [191, 29, 0]]
** centroid: 1, normalized-entropy: 0.5624035543722615, [(1, 191), (2, 29)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [207, 40, 0]]
** centroid: 2, normalized-entropy: 0.6389383894880993, [(1, 207), (2, 40)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 183, 16]]
** centroid: 3, normalized-entropy: 0.4035941159909868, [(2, 183), (3, 16)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.326249981945523] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.326249981945523, 0.23153314907578515] ***
*** starting iteration: 2; err: [Inf, 0.326249981945523, 0.23153314907578515] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.326249981945523, 0.23153314907578515, 0.2292461846571142] ***
*** starting iteration: 3; err: [Inf, 0.326249981945523, 0.23153314907578515, 0.2292461846571142] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.326249981945523, 0.23153314907578515, 0.2292461846571142, 0.22859101753676314] ***
*** finished computation of 3 references, err: [Inf, 0.326249981945523, 0.23153314907578515, 0.2292461846571142, 0.22859101753676314] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [104, 150, 16]]
** centroid: 1, normalized-entropy: 0.7841561312555506, [(1, 104), (2, 150), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [106, 113, 0]]
** centroid: 2, normalized-entropy: 0.9992629000732495, [(1, 106), (2, 113)]
*** center 3: selecting labels [1] (freq >= 2) [from [178, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.434377559057173] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.434377559057173, 0.23739970383699285] ***
*** starting iteration: 2; err: [Inf, 0.434377559057173, 0.23739970383699285] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.434377559057173, 0.23739970383699285, 0.23671660269854933] ***
*** finished computation of 3 references, err: [Inf, 0.434377559057173, 0.23739970383699285, 0.23671660269854933] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [51, 177, 26]]
** centroid: 1, normalized-entropy: 0.7348955580337357, [(1, 51), (2, 177), (3, 26)]
*** center 2: selecting labels [1] (freq >= 2) [from [217, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [128, 68, 0]]
** centroid: 3, normalized-entropy: 0.9313043685793762, [(1, 128), (2, 68)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4772818012543403] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4772818012543403, 0.29675146669195546] ***
*** finished computation of 3 references, err: [Inf, 0.4772818012543403, 0.29675146669195546] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [104, 150, 16]]
** centroid: 1, normalized-entropy: 0.7841561312555506, [(1, 104), (2, 150), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [111, 102, 0]]
** centroid: 2, normalized-entropy: 0.9987117514654895, [(1, 111), (2, 102)]
*** center 3: selecting labels [1] (freq >= 1) [from [183, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3728976655895284] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3728976655895284, 0.3021056305510976] ***
*** finished computation of 3 references, err: [Inf, 0.3728976655895284, 0.3021056305510976] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [128, 179, 16]]
** centroid: 1, normalized-entropy: 0.76713256467919, [(1, 128), (2, 179), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [105, 84, 0]]
** centroid: 2, normalized-entropy: 0.9910760598382222, [(1, 105), (2, 84)]
*** center 3: selecting labels [1] (freq >= 1) [from [155, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.43071565599735084] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43071565599735084, 0.3016308827697114] ***
*** finished computation of 3 references, err: [Inf, 0.43071565599735084, 0.3016308827697114] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [80, 160, 26]]
** centroid: 1, normalized-entropy: 0.8141151135902124, [(1, 80), (2, 160), (3, 26)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [113, 85, 0]]
** centroid: 2, normalized-entropy: 0.9855260527835448, [(1, 113), (2, 85)]
*** center 3: selecting labels [1] (freq >= 1) [from [203, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.225057243439334] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.225057243439334, 0.15024311035924565] ***
*** starting iteration: 2; err: [Inf, 0.225057243439334, 0.15024311035924565] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.225057243439334, 0.15024311035924565, 0.1462104087639628] ***
*** starting iteration: 3; err: [Inf, 0.225057243439334, 0.15024311035924565, 0.1462104087639628] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.225057243439334, 0.15024311035924565, 0.1462104087639628, 0.14542292410262053] ***
*** finished computation of 7 references, err: [Inf, 0.225057243439334, 0.15024311035924565, 0.1462104087639628, 0.14542292410262053] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [12, 100, 0]]
** centroid: 1, normalized-entropy: 0.4912373418243334, [(1, 12), (2, 100)]
*** center 2: selecting labels [1] (freq >= 1) [from [110, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [48, 36, 0]]
** centroid: 3, normalized-entropy: 0.9852281360342514, [(1, 48), (2, 36)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [56, 35, 0]]
** centroid: 4, normalized-entropy: 0.961236604722876, [(1, 56), (2, 35)]
*** center 5: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 85, 16]]
** centroid: 6, normalized-entropy: 0.6305062394675903, [(2, 85), (3, 16)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [96, 7, 0]]
** centroid: 7, normalized-entropy: 0.35826863860424546, [(1, 96), (2, 7)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2544543263146366] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2544543263146366, 0.17329638471444328] ***
*** starting iteration: 2; err: [Inf, 0.2544543263146366, 0.17329638471444328] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2544543263146366, 0.17329638471444328, 0.16086731339501834] ***
*** starting iteration: 3; err: [Inf, 0.2544543263146366, 0.17329638471444328, 0.16086731339501834] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2544543263146366, 0.17329638471444328, 0.16086731339501834, 0.1579632581668212] ***
*** finished computation of 7 references, err: [Inf, 0.2544543263146366, 0.17329638471444328, 0.16086731339501834, 0.1579632581668212] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 79, 26]]
** centroid: 1, normalized-entropy: 0.8074825483550796, [(2, 79), (3, 26)]
*** center 2: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 93, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [112, 48, 0]]
** centroid: 4, normalized-entropy: 0.8812908992306927, [(1, 112), (2, 48)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [71, 13, 0]]
** centroid: 5, normalized-entropy: 0.6216297820565386, [(1, 71), (2, 13)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [32, 12, 0]]
** centroid: 6, normalized-entropy: 0.8453509366224364, [(1, 32), (2, 12)]
*** center 7: selecting labels [1] (freq >= 1) [from [119, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4925649206272212] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4925649206272212, 0.267525741088976] ***
*** finished computation of 3 references, err: [Inf, 0.4925649206272212, 0.267525741088976] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [278, 66, 0]]
** centroid: 1, normalized-entropy: 0.7053472253567695, [(1, 278), (2, 66)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [6, 175, 16]]
** centroid: 2, normalized-entropy: 0.37814947359744744, [(1, 6), (2, 175), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [114, 11, 0]]
** centroid: 3, normalized-entropy: 0.4297586093037606, [(1, 114), (2, 11)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3598019407581778] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3598019407581778, 0.2315762063985442] ***
*** finished computation of 3 references, err: [Inf, 0.3598019407581778, 0.2315762063985442] ***
*** center 1: selecting labels [1] (freq >= 1) [from [175, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [126, 143, 13]]
** centroid: 2, normalized-entropy: 0.7702016650922924, [(1, 126), (2, 143), (3, 13)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [87, 120, 3]]
** centroid: 3, normalized-entropy: 0.6786211796150754, [(1, 87), (2, 120), (3, 3)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3588037582119924] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3588037582119924, 0.27039400122869856] ***
*** finished computation of 3 references, err: [Inf, 0.3588037582119924, 0.27039400122869856] ***
*** center 1: selecting labels [1] (freq >= 1) [from [139, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [219, 53, 0]]
** centroid: 2, normalized-entropy: 0.7115137598367124, [(1, 219), (2, 53)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [38, 192, 26]]
** centroid: 3, normalized-entropy: 0.6655680969288973, [(1, 38), (2, 192), (3, 26)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.39957534671235306] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39957534671235306, 0.30841983943323215] ***
*** starting iteration: 2; err: [Inf, 0.39957534671235306, 0.30841983943323215] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39957534671235306, 0.30841983943323215, 0.3043734645470977] ***
*** starting iteration: 3; err: [Inf, 0.39957534671235306, 0.30841983943323215, 0.3043734645470977] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39957534671235306, 0.30841983943323215, 0.3043734645470977, 0.30355418524103567] ***
*** finished computation of 3 references, err: [Inf, 0.39957534671235306, 0.30841983943323215, 0.3043734645470977, 0.30355418524103567] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 194, 16]]
** centroid: 1, normalized-entropy: 0.38861174916944274, [(2, 194), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [232, 16, 0]]
** centroid: 2, normalized-entropy: 0.3451173149449528, [(1, 232), (2, 16)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [166, 42, 0]]
** centroid: 3, normalized-entropy: 0.7257576154473545, [(1, 166), (2, 42)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.34856392793228913] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34856392793228913, 0.30552264726043554] ***
*** starting iteration: 2; err: [Inf, 0.34856392793228913, 0.30552264726043554] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34856392793228913, 0.30552264726043554, 0.30019464044422584] ***
*** starting iteration: 3; err: [Inf, 0.34856392793228913, 0.30552264726043554, 0.30019464044422584] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34856392793228913, 0.30552264726043554, 0.30019464044422584, 0.2984231081826129] ***
*** starting iteration: 4; err: [Inf, 0.34856392793228913, 0.30552264726043554, 0.30019464044422584, 0.2984231081826129] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34856392793228913, 0.30552264726043554, 0.30019464044422584, 0.2984231081826129, 0.29809977892350625] ***
*** finished computation of 3 references, err: [Inf, 0.34856392793228913, 0.30552264726043554, 0.30019464044422584, 0.2984231081826129, 0.29809977892350625] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 204, 16]]
** centroid: 1, normalized-entropy: 0.37601985096927276, [(2, 204), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [223, 19, 0]]
** centroid: 2, normalized-entropy: 0.3969157148049413, [(1, 223), (2, 19)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [165, 40, 0]]
** centroid: 3, normalized-entropy: 0.7120640548905481, [(1, 165), (2, 40)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.402013995116395] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.402013995116395, 0.318787957646366] ***
*** starting iteration: 2; err: [Inf, 0.402013995116395, 0.318787957646366] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.402013995116395, 0.318787957646366, 0.30504123654043386] ***
*** starting iteration: 3; err: [Inf, 0.402013995116395, 0.318787957646366, 0.30504123654043386] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.402013995116395, 0.318787957646366, 0.30504123654043386, 0.302257490263361] ***
*** starting iteration: 4; err: [Inf, 0.402013995116395, 0.318787957646366, 0.30504123654043386, 0.302257490263361] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.402013995116395, 0.318787957646366, 0.30504123654043386, 0.302257490263361, 0.30129688284799705] ***
*** finished computation of 3 references, err: [Inf, 0.402013995116395, 0.318787957646366, 0.30504123654043386, 0.302257490263361, 0.30129688284799705] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [257, 7, 0]]
** centroid: 1, normalized-entropy: 0.17660247694470366, [(1, 257), (2, 7)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [5, 169, 26]]
** centroid: 2, normalized-entropy: 0.4549052107275063, [(1, 5), (2, 169), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [134, 69, 0]]
** centroid: 3, normalized-entropy: 0.9247243948253971, [(1, 134), (2, 69)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.34449211528731716] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34449211528731716, 0.28126443419591507] ***
*** starting iteration: 2; err: [Inf, 0.34449211528731716, 0.28126443419591507] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34449211528731716, 0.28126443419591507, 0.25248887258170694] ***
*** starting iteration: 3; err: [Inf, 0.34449211528731716, 0.28126443419591507, 0.25248887258170694] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34449211528731716, 0.28126443419591507, 0.25248887258170694, 0.2390136473571641] ***
*** starting iteration: 4; err: [Inf, 0.34449211528731716, 0.28126443419591507, 0.25248887258170694, 0.2390136473571641] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34449211528731716, 0.28126443419591507, 0.25248887258170694, 0.2390136473571641, 0.23796462210793015] ***
*** starting iteration: 5; err: [Inf, 0.34449211528731716, 0.28126443419591507, 0.25248887258170694, 0.2390136473571641, 0.23796462210793015] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34449211528731716, 0.28126443419591507, 0.25248887258170694, 0.2390136473571641, 0.23796462210793015, 0.23793791624362226] ***
*** finished computation of 3 references, err: [Inf, 0.34449211528731716, 0.28126443419591507, 0.25248887258170694, 0.2390136473571641, 0.23796462210793015, 0.23793791624362226] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [139, 66, 0]]
** centroid: 1, normalized-entropy: 0.9064907288409316, [(1, 139), (2, 66)]
*** center 2: selecting labels [1] (freq >= 1) [from [238, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [21, 186, 16]]
** centroid: 3, normalized-entropy: 0.5123219565369034, [(1, 21), (2, 186), (3, 16)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.28152993743934823] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28152993743934823, 0.23781069870088725] ***
*** starting iteration: 2; err: [Inf, 0.28152993743934823, 0.23781069870088725] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28152993743934823, 0.23781069870088725, 0.23350724744934426] ***
*** starting iteration: 3; err: [Inf, 0.28152993743934823, 0.23781069870088725, 0.23350724744934426] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28152993743934823, 0.23781069870088725, 0.23350724744934426, 0.23257927102214102] ***
*** finished computation of 3 references, err: [Inf, 0.28152993743934823, 0.23781069870088725, 0.23350724744934426, 0.23257927102214102] ***
*** center 1: selecting labels [1] (freq >= 1) [from [208, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [59, 174, 16]]
** centroid: 2, normalized-entropy: 0.6990711118186328, [(1, 59), (2, 174), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [121, 89, 0]]
** centroid: 3, normalized-entropy: 0.9831849125888115, [(1, 121), (2, 89)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2881588296168184] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2881588296168184, 0.23523439900639623] ***
*** starting iteration: 2; err: [Inf, 0.2881588296168184, 0.23523439900639623] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2881588296168184, 0.23523439900639623, 0.2344663046465173] ***
*** finished computation of 3 references, err: [Inf, 0.2881588296168184, 0.23523439900639623, 0.2344663046465173] ***
*** center 1: selecting labels [1] (freq >= 1) [from [213, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [78, 156, 26]]
** centroid: 2, normalized-entropy: 0.8173454221465101, [(1, 78), (2, 156), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [105, 89, 0]]
** centroid: 3, normalized-entropy: 0.9950878179038686, [(1, 105), (2, 89)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.36557520702397367] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36557520702397367, 0.24109521241405527] ***
*** starting iteration: 2; err: [Inf, 0.36557520702397367, 0.24109521241405527] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36557520702397367, 0.24109521241405527, 0.23969691753521696] ***
*** starting iteration: 3; err: [Inf, 0.36557520702397367, 0.24109521241405527, 0.23969691753521696] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36557520702397367, 0.24109521241405527, 0.23969691753521696, 0.23971323306915593] ***
*** finished computation of 3 references, err: [Inf, 0.36557520702397367, 0.24109521241405527, 0.23969691753521696, 0.23971323306915593] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [223, 35, 0]]
** centroid: 1, normalized-entropy: 0.5727560024182085, [(1, 223), (2, 35)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 178, 16]]
** centroid: 2, normalized-entropy: 0.4108378385169277, [(2, 178), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [175, 39, 0]]
** centroid: 3, normalized-entropy: 0.6849593644091599, [(1, 175), (2, 39)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.29651692808037444] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29651692808037444, 0.24050436667243447] ***
*** starting iteration: 2; err: [Inf, 0.29651692808037444, 0.24050436667243447] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29651692808037444, 0.24050436667243447, 0.2305707072342063] ***
*** starting iteration: 3; err: [Inf, 0.29651692808037444, 0.24050436667243447, 0.2305707072342063] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29651692808037444, 0.24050436667243447, 0.2305707072342063, 0.22863158310946452] ***
*** starting iteration: 4; err: [Inf, 0.29651692808037444, 0.24050436667243447, 0.2305707072342063, 0.22863158310946452] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29651692808037444, 0.24050436667243447, 0.2305707072342063, 0.22863158310946452, 0.2279545179811883] ***
*** finished computation of 3 references, err: [Inf, 0.29651692808037444, 0.24050436667243447, 0.2305707072342063, 0.22863158310946452, 0.2279545179811883] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [113, 105, 0]]
** centroid: 1, normalized-entropy: 0.9990283518050957, [(1, 113), (2, 105)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [82, 158, 16]]
** centroid: 2, normalized-entropy: 0.7607715907831126, [(1, 82), (2, 158), (3, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [193, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.30521850572756565] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30521850572756565, 0.2500805781604066] ***
*** starting iteration: 2; err: [Inf, 0.30521850572756565, 0.2500805781604066] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30521850572756565, 0.2500805781604066, 0.23716166995206045] ***
*** starting iteration: 3; err: [Inf, 0.30521850572756565, 0.2500805781604066, 0.23716166995206045] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30521850572756565, 0.2500805781604066, 0.23716166995206045, 0.23588095415548338] ***
*** starting iteration: 4; err: [Inf, 0.30521850572756565, 0.2500805781604066, 0.23716166995206045, 0.23588095415548338] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30521850572756565, 0.2500805781604066, 0.23716166995206045, 0.23588095415548338, 0.23583295765351028] ***
*** finished computation of 3 references, err: [Inf, 0.30521850572756565, 0.2500805781604066, 0.23716166995206045, 0.23588095415548338, 0.23583295765351028] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [96, 119, 12]]
** centroid: 1, normalized-entropy: 0.7809277233505546, [(1, 96), (2, 119), (3, 12)]
*** center 2: selecting labels [1] (freq >= 2) [from [207, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [93, 126, 14]]
** centroid: 3, normalized-entropy: 0.7900793820485738, [(1, 93), (2, 126), (3, 14)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.20998473984871743] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20998473984871743, 0.1841909130287074] ***
*** finished computation of 7 references, err: [Inf, 0.20998473984871743, 0.1841909130287074] ***
*** center 1: selecting labels [1] (freq >= 1) [from [19, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [67, 110, 7]]
** centroid: 2, normalized-entropy: 0.7279913395122317, [(1, 67), (2, 110), (3, 7)]
*** center 3: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [47, 51, 0]]
** centroid: 4, normalized-entropy: 0.9987979209581141, [(1, 47), (2, 51)]
*** center 5: selecting labels [1] (freq >= 1) [from [103, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [44, 0, 0]]
*** center 7: selecting labels [1, 2, 3] (freq >= 1) [from [40, 91, 9]]
** centroid: 7, normalized-entropy: 0.7412697291436533, [(1, 40), (2, 91), (3, 9)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19342046402146232] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19342046402146232, 0.16594703661032145] ***
*** finished computation of 7 references, err: [Inf, 0.19342046402146232, 0.16594703661032145] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [25, 91, 0]]
** centroid: 1, normalized-entropy: 0.7518972278650765, [(1, 25), (2, 91)]
*** center 2: selecting labels [1] (freq >= 1) [from [142, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [54, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [18, 38, 0]]
** centroid: 5, normalized-entropy: 0.9059282160429994, [(1, 18), (2, 38)]
*** center 6: selecting labels [1] (freq >= 1) [from [52, 0, 0]]
*** center 7: selecting labels [1, 2, 3] (freq >= 1) [from [12, 134, 16]]
** centroid: 7, normalized-entropy: 0.5264766024892592, [(1, 12), (2, 134), (3, 16)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2058032440186396] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2058032440186396, 0.18163989463365865] ***
*** finished computation of 7 references, err: [Inf, 0.2058032440186396, 0.18163989463365865] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 103, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [54, 3, 0]]
** centroid: 2, normalized-entropy: 0.2974722489192896, [(1, 54), (2, 3)]
*** center 3: selecting labels [1] (freq >= 1) [from [103, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [44, 7, 0]]
** centroid: 4, normalized-entropy: 0.577004250315725, [(1, 44), (2, 7)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [166, 29, 0]]
** centroid: 5, normalized-entropy: 0.6066226498404358, [(1, 166), (2, 29)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [29, 34, 0]]
** centroid: 6, normalized-entropy: 0.9954515828457716, [(1, 29), (2, 34)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 69, 26]]
** centroid: 7, normalized-entropy: 0.846701711600821, [(2, 69), (3, 26)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.21997689282259103] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21997689282259103, 0.19000216202483675] ***
*** starting iteration: 2; err: [Inf, 0.21997689282259103, 0.19000216202483675] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21997689282259103, 0.19000216202483675, 0.18745948392562736] ***
*** starting iteration: 3; err: [Inf, 0.21997689282259103, 0.19000216202483675, 0.18745948392562736] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21997689282259103, 0.19000216202483675, 0.18745948392562736, 0.186705374526142] ***
*** finished computation of 7 references, err: [Inf, 0.21997689282259103, 0.19000216202483675, 0.18745948392562736, 0.186705374526142] ***
*** center 1: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [91, 4, 0]]
** centroid: 2, normalized-entropy: 0.25186284771956524, [(1, 91), (2, 4)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 56, 16]]
** centroid: 3, normalized-entropy: 0.7642045065086204, [(2, 56), (3, 16)]
*** center 4: selecting labels [1] (freq >= 2) [from [126, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [43, 55, 0]]
** centroid: 5, normalized-entropy: 0.9891571023188154, [(1, 43), (2, 55)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [30, 77, 0]]
** centroid: 6, normalized-entropy: 0.8559596826463527, [(1, 30), (2, 77)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 71, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.26194948631421155] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26194948631421155, 0.19593726492290017] ***
*** starting iteration: 2; err: [Inf, 0.26194948631421155, 0.19593726492290017] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26194948631421155, 0.19593726492290017, 0.19162576265543743] ***
*** starting iteration: 3; err: [Inf, 0.26194948631421155, 0.19593726492290017, 0.19162576265543743] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26194948631421155, 0.19593726492290017, 0.19162576265543743, 0.1912891730649405] ***
*** finished computation of 7 references, err: [Inf, 0.26194948631421155, 0.19593726492290017, 0.19162576265543743, 0.1912891730649405] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [75, 16, 0]]
** centroid: 1, normalized-entropy: 0.6708561590207726, [(1, 75), (2, 16)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [86, 27, 0]]
** centroid: 2, normalized-entropy: 0.7932698344258595, [(1, 86), (2, 27)]
*** center 3: selecting labels [1] (freq >= 2) [from [107, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 81, 26]]
** centroid: 4, normalized-entropy: 0.7999783611177544, [(2, 81), (3, 26)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [51, 38, 0]]
** centroid: 5, normalized-entropy: 0.9845543528607513, [(1, 51), (2, 38)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 83, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19845679960166057] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19845679960166057, 0.15554375896249917] ***
*** finished computation of 7 references, err: [Inf, 0.19845679960166057, 0.15554375896249917] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [72, 61, 0]]
** centroid: 1, normalized-entropy: 0.9950600468156066, [(1, 72), (2, 61)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [58, 20, 0]]
** centroid: 2, normalized-entropy: 0.8212809417449864, [(1, 58), (2, 20)]
*** center 3: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 87, 16]]
** centroid: 4, normalized-entropy: 0.6230433996216712, [(2, 87), (3, 16)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [34, 84, 0]]
** centroid: 5, normalized-entropy: 0.8663006754980497, [(1, 34), (2, 84)]
*** center 6: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18585113621689658] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18585113621689658, 0.15384860811517692] ***
*** finished computation of 7 references, err: [Inf, 0.18585113621689658, 0.15384860811517692] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [130, 14, 0]]
** centroid: 1, normalized-entropy: 0.460127886147135, [(1, 130), (2, 14)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [68, 4, 0]]
** centroid: 2, normalized-entropy: 0.3095434291503252, [(1, 68), (2, 4)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 37, 16]]
** centroid: 3, normalized-entropy: 0.8835850861052531, [(2, 37), (3, 16)]
*** center 4: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [9, 117, 0]]
** centroid: 6, normalized-entropy: 0.3712323266408756, [(1, 9), (2, 117)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [13, 91, 0]]
** centroid: 7, normalized-entropy: 0.5435644431995963, [(1, 13), (2, 91)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20073877313806826] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20073877313806826, 0.1547019060595014] ***
*** finished computation of 7 references, err: [Inf, 0.20073877313806826, 0.1547019060595014] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 95, 23]]
** centroid: 1, normalized-entropy: 0.7116412885080164, [(2, 95), (3, 23)]
*** center 2: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [48, 4, 0]]
** centroid: 3, normalized-entropy: 0.3912435636292556, [(1, 48), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [110, 20, 0]]
** centroid: 4, normalized-entropy: 0.6193821946787638, [(1, 110), (2, 20)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [75, 36, 0]]
** centroid: 5, normalized-entropy: 0.9090221560878149, [(1, 75), (2, 36)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 90, 3]]
** centroid: 6, normalized-entropy: 0.2055925081850832, [(2, 90), (3, 3)]
*** center 7: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18846860043907276] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18846860043907276, 0.15286762389010405] ***
*** starting iteration: 2; err: [Inf, 0.18846860043907276, 0.15286762389010405] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18846860043907276, 0.15286762389010405, 0.14887546185843153] ***
*** starting iteration: 3; err: [Inf, 0.18846860043907276, 0.15286762389010405, 0.14887546185843153] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18846860043907276, 0.15286762389010405, 0.14887546185843153, 0.14794012188265385] ***
*** finished computation of 7 references, err: [Inf, 0.18846860043907276, 0.15286762389010405, 0.14887546185843153, 0.14794012188265385] ***
*** center 1: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 82, 16]]
** centroid: 2, normalized-entropy: 0.6420642892306891, [(2, 82), (3, 16)]
*** center 3: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [67, 49, 0]]
** centroid: 4, normalized-entropy: 0.9825606664869173, [(1, 67), (2, 49)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [43, 45, 0]]
** centroid: 5, normalized-entropy: 0.9996273710574612, [(1, 43), (2, 45)]
*** center 6: selecting labels [1] (freq >= 1) [from [105, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 76, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20302358356121553] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20302358356121553, 0.15176066586529946] ***
*** starting iteration: 2; err: [Inf, 0.20302358356121553, 0.15176066586529946] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20302358356121553, 0.15176066586529946, 0.14893644445225307] ***
*** starting iteration: 3; err: [Inf, 0.20302358356121553, 0.15176066586529946, 0.14893644445225307] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20302358356121553, 0.15176066586529946, 0.14893644445225307, 0.14864440056234612] ***
*** finished computation of 7 references, err: [Inf, 0.20302358356121553, 0.15176066586529946, 0.14893644445225307, 0.14864440056234612] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [15, 104, 0]]
** centroid: 1, normalized-entropy: 0.5465060858222177, [(1, 15), (2, 104)]
*** center 2: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [107, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [81, 10, 0]]
** centroid: 4, normalized-entropy: 0.49958440742366095, [(1, 81), (2, 10)]
*** center 5: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [9, 92, 0]]
** centroid: 6, normalized-entropy: 0.43348846324460666, [(1, 9), (2, 92)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 57, 16]]
** centroid: 7, normalized-entropy: 0.7586638628883696, [(2, 57), (3, 16)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2047010057674221] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2047010057674221, 0.15702597524920503] ***
*** starting iteration: 2; err: [Inf, 0.2047010057674221, 0.15702597524920503] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2047010057674221, 0.15702597524920503, 0.15169126250588433] ***
*** starting iteration: 3; err: [Inf, 0.2047010057674221, 0.15702597524920503, 0.15169126250588433] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2047010057674221, 0.15702597524920503, 0.15169126250588433, 0.1510448233577712] ***
*** finished computation of 7 references, err: [Inf, 0.2047010057674221, 0.15702597524920503, 0.15169126250588433, 0.1510448233577712] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [51, 39, 0]]
** centroid: 1, normalized-entropy: 0.9871377743721862, [(1, 51), (2, 39)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [42, 4, 0]]
** centroid: 2, normalized-entropy: 0.42622865699814483, [(1, 42), (2, 4)]
*** center 3: selecting labels [1] (freq >= 1) [from [117, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 82, 26]]
** centroid: 4, normalized-entropy: 0.7962699368824384, [(2, 82), (3, 26)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [85, 32, 0]]
** centroid: 5, normalized-entropy: 0.8464482275175529, [(1, 85), (2, 32)]
*** center 6: selecting labels [1] (freq >= 1) [from [96, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [5, 88, 0]]
** centroid: 7, normalized-entropy: 0.30217361847879526, [(1, 5), (2, 88)]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 14)
[0.9379768990547434, 0.9309878741016466, 0.9299718880557203, 0.9249908591225956, 0.9109978241714769, 0.9049888211564858, 0.8989858121594648, 0.8800896705088322, 0.8739907572242901, 0.8609927292562022, 0.8290356224487961, 0.7839576103049156, 0.7799176421930913, 0.7539395683108259]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 1) => 0.9379768990547434
finished with 15
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.40808186601489427] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40808186601489427, 0.3122980669672201] ***
*** starting iteration: 2; err: [Inf, 0.40808186601489427, 0.3122980669672201] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40808186601489427, 0.3122980669672201, 0.30428338720737297] ***
*** starting iteration: 3; err: [Inf, 0.40808186601489427, 0.3122980669672201, 0.30428338720737297] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40808186601489427, 0.3122980669672201, 0.30428338720737297, 0.30349948914727204] ***
*** finished computation of 3 references, err: [Inf, 0.40808186601489427, 0.3122980669672201, 0.30428338720737297, 0.30349948914727204] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [5, 171, 16]]
** centroid: 1, normalized-entropy: 0.36886512682825967, [(1, 5), (2, 171), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [157, 74, 0]]
** centroid: 2, normalized-entropy: 0.9047576707124741, [(1, 157), (2, 74)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [236, 7, 0]]
** centroid: 3, normalized-entropy: 0.18837116984529617, [(1, 236), (2, 7)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.31088058364115423] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31088058364115423, 0.295299953144362] ***
*** starting iteration: 2; err: [Inf, 0.31088058364115423, 0.295299953144362] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31088058364115423, 0.295299953144362, 0.29090930350862076] ***
*** starting iteration: 3; err: [Inf, 0.31088058364115423, 0.295299953144362, 0.29090930350862076] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31088058364115423, 0.295299953144362, 0.29090930350862076, 0.28984280763196757] ***
*** starting iteration: 4; err: [Inf, 0.31088058364115423, 0.295299953144362, 0.29090930350862076, 0.28984280763196757] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31088058364115423, 0.295299953144362, 0.29090930350862076, 0.28984280763196757, 0.28967593491794413] ***
*** finished computation of 3 references, err: [Inf, 0.31088058364115423, 0.295299953144362, 0.29090930350862076, 0.28984280763196757, 0.28967593491794413] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [106, 138, 16]]
** centroid: 1, normalized-entropy: 0.7951648650246342, [(1, 106), (2, 138), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [97, 125, 0]]
** centroid: 2, normalized-entropy: 0.9884943290757264, [(1, 97), (2, 125)]
*** center 3: selecting labels [1] (freq >= 1) [from [185, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.40894859429655495] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40894859429655495, 0.33718610361408347] ***
*** starting iteration: 2; err: [Inf, 0.40894859429655495, 0.33718610361408347] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40894859429655495, 0.33718610361408347, 0.3343732251940683] ***
*** starting iteration: 3; err: [Inf, 0.40894859429655495, 0.33718610361408347, 0.3343732251940683] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40894859429655495, 0.33718610361408347, 0.3343732251940683, 0.33314121008824105] ***
*** starting iteration: 4; err: [Inf, 0.40894859429655495, 0.33718610361408347, 0.3343732251940683, 0.33314121008824105] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40894859429655495, 0.33718610361408347, 0.3343732251940683, 0.33314121008824105, 0.33249247557242056] ***
*** finished computation of 3 references, err: [Inf, 0.40894859429655495, 0.33718610361408347, 0.3343732251940683, 0.33314121008824105, 0.33249247557242056] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [74, 138, 0]]
** centroid: 1, normalized-entropy: 0.9332226994125877, [(1, 74), (2, 138)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [77, 104, 26]]
** centroid: 2, normalized-entropy: 0.8868131393807357, [(1, 77), (2, 104), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [245, 3, 0]]
** centroid: 3, normalized-entropy: 0.0943931549119023, [(1, 245), (2, 3)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 15)
[0.9379768990547434, 0.9309878741016466, 0.9299718880557203, 0.9249908591225956, 0.9109978241714769, 0.9099878321435207, 0.9049888211564858, 0.8989858121594648, 0.8800896705088322, 0.8739907572242901, 0.8609927292562022, 0.8290356224487961, 0.7839576103049156, 0.7799176421930913, 0.7539395683108259]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 1) => 0.9379768990547434
finished with 15
iteration 3 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9379768990547434, 0.9309878741016466, 0.9299718880557203, 0.9249908591225956, 0.9109978241714769, 0.9099878321435207, 0.9049888211564858, 0.8989858121594648, 0.8800896705088322, 0.8739907572242901, 0.8609927292562022, 0.8290356224487961, 0.7839576103049156, 0.7799176421930913, 0.7539395683108259]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 1) => 0.9379768990547434
finished with 16
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.2334481551907621] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2334481551907621, 0.19605127596310354] ***
*** starting iteration: 2; err: [Inf, 0.2334481551907621, 0.19605127596310354] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2334481551907621, 0.19605127596310354, 0.1909289477049029] ***
*** starting iteration: 3; err: [Inf, 0.2334481551907621, 0.19605127596310354, 0.1909289477049029] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2334481551907621, 0.19605127596310354, 0.1909289477049029, 0.18868888933323436] ***
*** starting iteration: 4; err: [Inf, 0.2334481551907621, 0.19605127596310354, 0.1909289477049029, 0.18868888933323436] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2334481551907621, 0.19605127596310354, 0.1909289477049029, 0.18868888933323436, 0.18774651809575948] ***
*** finished computation of 7 references, err: [Inf, 0.2334481551907621, 0.19605127596310354, 0.1909289477049029, 0.18868888933323436, 0.18774651809575948] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [68, 47, 0]]
** centroid: 1, normalized-entropy: 0.9758104923889663, [(1, 68), (2, 47)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [73, 2, 0]]
** centroid: 2, normalized-entropy: 0.1773894531859976, [(1, 73), (2, 2)]
*** center 3: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 88, 16]]
** centroid: 4, normalized-entropy: 0.6193821946787638, [(2, 88), (3, 16)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [91, 11, 0]]
** centroid: 5, normalized-entropy: 0.493375733509813, [(1, 91), (2, 11)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [92, 2, 0]]
** centroid: 6, normalized-entropy: 0.14854949043034832, [(1, 92), (2, 2)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 102, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2479433484122051] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2479433484122051, 0.19687888128934303] ***
*** starting iteration: 2; err: [Inf, 0.2479433484122051, 0.19687888128934303] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2479433484122051, 0.19687888128934303, 0.19440636858958443] ***
*** starting iteration: 3; err: [Inf, 0.2479433484122051, 0.19687888128934303, 0.19440636858958443] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2479433484122051, 0.19687888128934303, 0.19440636858958443, 0.1938165912036037] ***
*** finished computation of 7 references, err: [Inf, 0.2479433484122051, 0.19687888128934303, 0.19440636858958443, 0.1938165912036037] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [5, 119, 0]]
** centroid: 1, normalized-entropy: 0.24376925951524556, [(1, 5), (2, 119)]
*** center 2: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [70, 31, 0]]
** centroid: 3, normalized-entropy: 0.8895986430672326, [(1, 70), (2, 31)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [69, 31, 0]]
** centroid: 4, normalized-entropy: 0.8931734583778567, [(1, 69), (2, 31)]
*** center 5: selecting labels [1] (freq >= 1) [from [102, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 81, 16]]
** centroid: 6, normalized-entropy: 0.6460174789535751, [(2, 81), (3, 16)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [78, 1, 0]]
** centroid: 7, normalized-entropy: 0.09794058271817412, [(1, 78), (2, 1)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2212425182312392] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2212425182312392, 0.19323191969380385] ***
*** starting iteration: 2; err: [Inf, 0.2212425182312392, 0.19323191969380385] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2212425182312392, 0.19323191969380385, 0.19202250981706193] ***
*** starting iteration: 3; err: [Inf, 0.2212425182312392, 0.19323191969380385, 0.19202250981706193] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2212425182312392, 0.19323191969380385, 0.19202250981706193, 0.19218123375230106] ***
*** finished computation of 7 references, err: [Inf, 0.2212425182312392, 0.19323191969380385, 0.19202250981706193, 0.19218123375230106] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 93, 25]]
** centroid: 1, normalized-entropy: 0.7450314037905273, [(2, 93), (3, 25)]
*** center 2: selecting labels [1] (freq >= 1) [from [101, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [62, 22, 0]]
** centroid: 3, normalized-entropy: 0.8296071030882032, [(1, 62), (2, 22)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [112, 23, 0]]
** centroid: 4, normalized-entropy: 0.6585513284599941, [(1, 112), (2, 23)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [59, 27, 0]]
** centroid: 5, normalized-entropy: 0.8976844934141643, [(1, 59), (2, 27)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 80, 1]]
** centroid: 6, normalized-entropy: 0.09597040299587173, [(2, 80), (3, 1)]
*** center 7: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 16)
[0.9379768990547434, 0.9309878741016466, 0.9299718880557203, 0.9249908591225956, 0.9219818621016226, 0.9109978241714769, 0.9099878321435207, 0.9049888211564858, 0.8989858121594648, 0.8800896705088322, 0.8739907572242901, 0.8609927292562022, 0.8290356224487961, 0.7839576103049156, 0.7799176421930913, 0.7539395683108259]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 1) => 0.9379768990547434
finished with 18
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.42347753592263404] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42347753592263404, 0.27440475048735047] ***
*** finished computation of 3 references, err: [Inf, 0.42347753592263404, 0.27440475048735047] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [217, 1, 0]]
** centroid: 1, normalized-entropy: 0.042236538352834696, [(1, 217), (2, 1)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [82, 159, 9]]
** centroid: 2, normalized-entropy: 0.7037367553030928, [(1, 82), (2, 159), (3, 9)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [99, 92, 7]]
** centroid: 3, normalized-entropy: 0.7471964719859352, [(1, 99), (2, 92), (3, 7)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.30629754032397916] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30629754032397916, 0.2843333465763475] ***
*** finished computation of 3 references, err: [Inf, 0.30629754032397916, 0.2843333465763475] ***
*** center 1: selecting labels [1] (freq >= 1) [from [161, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [120, 263, 16]]
** centroid: 2, normalized-entropy: 0.6963869980723062, [(1, 120), (2, 263), (3, 16)]
*** center 3: selecting labels [1] (freq >= 1) [from [107, 0, 0]]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.28662555600269357] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28662555600269357, 0.24172233720903455] ***
*** finished computation of 3 references, err: [Inf, 0.28662555600269357, 0.24172233720903455] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [110, 82, 0]]
** centroid: 1, normalized-entropy: 0.98460399620868, [(1, 110), (2, 82)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [19, 148, 26]]
** centroid: 2, normalized-entropy: 0.6388508793477726, [(1, 19), (2, 148), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [267, 15, 0]]
** centroid: 3, normalized-entropy: 0.2998025130558691, [(1, 267), (2, 15)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3830550388424649] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3830550388424649, 0.3131772653890533] ***
*** finished computation of 3 references, err: [Inf, 0.3830550388424649, 0.3131772653890533] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [121, 41, 0]]
** centroid: 1, normalized-entropy: 0.8161334356033447, [(1, 121), (2, 41)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [272, 22, 0]]
** centroid: 2, normalized-entropy: 0.3836948331693138, [(1, 272), (2, 22)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [5, 189, 16]]
** centroid: 3, normalized-entropy: 0.3458639738142749, [(1, 5), (2, 189), (3, 16)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.400626666545086] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.400626666545086, 0.2983512722843814] ***
*** finished computation of 3 references, err: [Inf, 0.400626666545086, 0.2983512722843814] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [84, 136, 14]]
** centroid: 1, normalized-entropy: 0.775215206484044, [(1, 84), (2, 136), (3, 14)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [224, 1, 0]]
** centroid: 2, normalized-entropy: 0.041125624368578, [(1, 224), (2, 1)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [80, 126, 2]]
** centroid: 3, normalized-entropy: 0.6515561315865728, [(1, 80), (2, 126), (3, 2)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.35910793664729757] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35910793664729757, 0.30138587124640126] ***
*** finished computation of 3 references, err: [Inf, 0.35910793664729757, 0.30138587124640126] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [109, 131, 2]]
** centroid: 1, normalized-entropy: 0.6654859295227229, [(1, 109), (2, 131), (3, 2)]
*** center 2: selecting labels [1] (freq >= 1) [from [192, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [95, 114, 24]]
** centroid: 3, normalized-entropy: 0.8644293472525175, [(1, 95), (2, 114), (3, 24)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 18)
[0.9379768990547434, 0.9309878741016466, 0.9299718880557203, 0.9249908591225956, 0.9219818621016226, 0.9109978241714769, 0.9099878321435207, 0.9049888211564858, 0.8989858121594648, 0.8800896705088322, 0.8739907572242901, 0.8609927292562022, 0.8290356224487961, 0.8131005256753759, 0.7839576103049156, 0.7799176421930913, 0.759861658065251, 0.7539395683108259]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 1) => 0.9379768990547434
finished with 19
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.338074549898371] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.338074549898371, 0.23819518494056174] ***
*** finished computation of 3 references, err: [Inf, 0.338074549898371, 0.23819518494056174] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [103, 175, 16]]
** centroid: 1, normalized-entropy: 0.7597599663166729, [(1, 103), (2, 175), (3, 16)]
*** center 2: selecting labels [1] (freq >= 1) [from [179, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [116, 77, 0]]
** centroid: 3, normalized-entropy: 0.9703411871732319, [(1, 116), (2, 77)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3621251147025372] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3621251147025372, 0.23510039016859943] ***
*** finished computation of 3 references, err: [Inf, 0.3621251147025372, 0.23510039016859943] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [91, 193, 16]]
** centroid: 1, normalized-entropy: 0.7299690824231211, [(1, 91), (2, 193), (3, 16)]
*** center 2: selecting labels [1] (freq >= 1) [from [178, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [119, 70, 0]]
** centroid: 3, normalized-entropy: 0.9509560484549724, [(1, 119), (2, 70)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3413970189607483] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3413970189607483, 0.2378242185571115] ***
*** finished computation of 3 references, err: [Inf, 0.3413970189607483, 0.2378242185571115] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [85, 186, 26]]
** centroid: 1, normalized-entropy: 0.7867706300815512, [(1, 85), (2, 186), (3, 26)]
*** center 2: selecting labels [1] (freq >= 1) [from [205, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [106, 59, 0]]
** centroid: 3, normalized-entropy: 0.9406524682091628, [(1, 106), (2, 59)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 19)
[0.9379768990547434, 0.9309878741016466, 0.9299718880557203, 0.9249908591225956, 0.9219818621016226, 0.9109978241714769, 0.9099878321435207, 0.9049888211564858, 0.9029748311185437, 0.8989858121594648, 0.8800896705088322, 0.8739907572242901, 0.8609927292562022, 0.8290356224487961, 0.8131005256753759, 0.7839576103049156, 0.7799176421930913, 0.759861658065251, 0.7539395683108259]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 1) => 0.9379768990547434
finished with 19
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 19)
[0.9379768990547434, 0.9309878741016466, 0.9299718880557203, 0.9249908591225956, 0.9219818621016226, 0.9109978241714769, 0.9099878321435207, 0.9049888211564858, 0.9029748311185437, 0.8989858121594648, 0.8800896705088322, 0.8739907572242901, 0.8609927292562022, 0.8290356224487961, 0.8131005256753759, 0.7839576103049156, 0.7799176421930913, 0.759861658065251, 0.7539395683108259]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 1) => 0.9379768990547434
finished with 19
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 19)
[0.9379768990547434, 0.9309878741016466, 0.9299718880557203, 0.9249908591225956, 0.9219818621016226, 0.9109978241714769, 0.9099878321435207, 0.9049888211564858, 0.9029748311185437, 0.8989858121594648, 0.8800896705088322, 0.8739907572242901, 0.8609927292562022, 0.8290356224487961, 0.8131005256753759, 0.7839576103049156, 0.7799176421930913, 0.759861658065251, 0.7539395683108259]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 1) => 0.9379768990547434
finished with 19
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.20869260847126134] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20869260847126134, 0.15361578649771399] ***
*** starting iteration: 2; err: [Inf, 0.20869260847126134, 0.15361578649771399] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20869260847126134, 0.15361578649771399, 0.14980669566337018] ***
*** starting iteration: 3; err: [Inf, 0.20869260847126134, 0.15361578649771399, 0.14980669566337018] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20869260847126134, 0.15361578649771399, 0.14980669566337018, 0.14915249604801648] ***
*** finished computation of 7 references, err: [Inf, 0.20869260847126134, 0.15361578649771399, 0.14980669566337018, 0.14915249604801648] ***
*** center 1: selecting labels [1] (freq >= 1) [from [162, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 118, 29]]
** centroid: 2, normalized-entropy: 0.7164524218200592, [(2, 118), (3, 29)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [110, 16, 0]]
** centroid: 3, normalized-entropy: 0.5491087450260074, [(1, 110), (2, 16)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [138, 47, 0]]
** centroid: 4, normalized-entropy: 0.8176406439528728, [(1, 138), (2, 47)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [68, 79, 0]]
** centroid: 5, normalized-entropy: 0.9959570229927303, [(1, 68), (2, 79)]
*** center 6: selecting labels [1] (freq >= 1) [from [113, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 120, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2016529989093542] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2016529989093542, 0.1536037946268916] ***
*** starting iteration: 2; err: [Inf, 0.2016529989093542, 0.1536037946268916] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2016529989093542, 0.1536037946268916, 0.15053542603366077] ***
*** starting iteration: 3; err: [Inf, 0.2016529989093542, 0.1536037946268916, 0.15053542603366077] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2016529989093542, 0.1536037946268916, 0.15053542603366077, 0.14945643922872842] ***
*** starting iteration: 4; err: [Inf, 0.2016529989093542, 0.1536037946268916, 0.15053542603366077, 0.14945643922872842] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2016529989093542, 0.1536037946268916, 0.15053542603366077, 0.14945643922872842, 0.14863856931123884] ***
*** finished computation of 7 references, err: [Inf, 0.2016529989093542, 0.1536037946268916, 0.15053542603366077, 0.14945643922872842, 0.14863856931123884] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [12, 69, 0]]
** centroid: 1, normalized-entropy: 0.6051865766334207, [(1, 12), (2, 69)]
*** center 2: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [49, 2, 0]]
** centroid: 3, normalized-entropy: 0.23868451135100152, [(1, 49), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [73, 3, 0]]
** centroid: 4, normalized-entropy: 0.23987382528036535, [(1, 73), (2, 3)]
*** center 5: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 44, 16]]
** centroid: 6, normalized-entropy: 0.8366407419411671, [(2, 44), (3, 16)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [3, 79, 0]]
** centroid: 7, normalized-entropy: 0.22641094842107634, [(1, 3), (2, 79)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18704707516543567] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18704707516543567, 0.15352556414622814] ***
*** starting iteration: 2; err: [Inf, 0.18704707516543567, 0.15352556414622814] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18704707516543567, 0.15352556414622814, 0.14871582145243883] ***
*** starting iteration: 3; err: [Inf, 0.18704707516543567, 0.15352556414622814, 0.14871582145243883] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18704707516543567, 0.15352556414622814, 0.14871582145243883, 0.14798117645084857] ***
*** finished computation of 7 references, err: [Inf, 0.18704707516543567, 0.15352556414622814, 0.14871582145243883, 0.14798117645084857] ***
*** center 1: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 38, 14]]
** centroid: 3, normalized-entropy: 0.8403586716091169, [(2, 38), (3, 14)]
*** center 4: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [56, 10, 0]]
** centroid: 5, normalized-entropy: 0.6136190195993708, [(1, 56), (2, 10)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [18, 63, 0]]
** centroid: 6, normalized-entropy: 0.7642045065086204, [(1, 18), (2, 63)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 74, 0]]
** centroid: 7, normalized-entropy: 0.10215803640865054, [(1, 1), (2, 74)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18711038416065276] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18711038416065276, 0.1522244485244155] ***
*** starting iteration: 2; err: [Inf, 0.18711038416065276, 0.1522244485244155] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18711038416065276, 0.1522244485244155, 0.14764939779322594] ***
*** starting iteration: 3; err: [Inf, 0.18711038416065276, 0.1522244485244155, 0.14764939779322594] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18711038416065276, 0.1522244485244155, 0.14764939779322594, 0.14617174840532243] ***
*** starting iteration: 4; err: [Inf, 0.18711038416065276, 0.1522244485244155, 0.14764939779322594, 0.14617174840532243] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18711038416065276, 0.1522244485244155, 0.14764939779322594, 0.14617174840532243, 0.14558572357706726] ***
*** finished computation of 7 references, err: [Inf, 0.18711038416065276, 0.1522244485244155, 0.14764939779322594, 0.14617174840532243, 0.14558572357706726] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [44, 52, 0]]
** centroid: 1, normalized-entropy: 0.9949848281859699, [(1, 44), (2, 52)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [64, 4, 0]]
** centroid: 2, normalized-entropy: 0.32275695889739825, [(1, 64), (2, 4)]
*** center 3: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 51, 13]]
** centroid: 4, normalized-entropy: 0.7281342378690551, [(2, 51), (3, 13)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [73, 2, 0]]
** centroid: 5, normalized-entropy: 0.1773894531859976, [(1, 73), (2, 2)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 74, 0]]
** centroid: 6, normalized-entropy: 0.10215803640865054, [(1, 1), (2, 74)]
*** center 7: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1982992802914232] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1982992802914232, 0.15379651827388444] ***
*** starting iteration: 2; err: [Inf, 0.1982992802914232, 0.15379651827388444] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1982992802914232, 0.15379651827388444, 0.14960611989721656] ***
*** starting iteration: 3; err: [Inf, 0.1982992802914232, 0.15379651827388444, 0.14960611989721656] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1982992802914232, 0.15379651827388444, 0.14960611989721656, 0.14823652037605645] ***
*** starting iteration: 4; err: [Inf, 0.1982992802914232, 0.15379651827388444, 0.14960611989721656, 0.14823652037605645] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1982992802914232, 0.15379651827388444, 0.14960611989721656, 0.14823652037605645, 0.14747429567575454] ***
*** finished computation of 7 references, err: [Inf, 0.1982992802914232, 0.15379651827388444, 0.14960611989721656, 0.14823652037605645, 0.14747429567575454] ***
*** center 1: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 52, 15]]
** centroid: 2, normalized-entropy: 0.7671903206448686, [(2, 52), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [63, 7, 0]]
** centroid: 3, normalized-entropy: 0.46899559358928133, [(1, 63), (2, 7)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [66, 30, 0]]
** centroid: 4, normalized-entropy: 0.8960382325345574, [(1, 66), (2, 30)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [25, 41, 0]]
** centroid: 5, normalized-entropy: 0.9571814385446724, [(1, 25), (2, 41)]
*** center 6: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 63, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18651338577270507] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18651338577270507, 0.147928095664829] ***
*** starting iteration: 2; err: [Inf, 0.18651338577270507, 0.147928095664829] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18651338577270507, 0.147928095664829, 0.14571250878553837] ***
*** starting iteration: 3; err: [Inf, 0.18651338577270507, 0.147928095664829, 0.14571250878553837] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18651338577270507, 0.147928095664829, 0.14571250878553837, 0.14534650965593754] ***
*** finished computation of 7 references, err: [Inf, 0.18651338577270507, 0.147928095664829, 0.14571250878553837, 0.14534650965593754] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [22, 64, 0]]
** centroid: 1, normalized-entropy: 0.8203636429576731, [(1, 22), (2, 64)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [71, 5, 0]]
** centroid: 2, normalized-entropy: 0.35001059292688486, [(1, 71), (2, 5)]
*** center 3: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [61, 12, 0]]
** centroid: 4, normalized-entropy: 0.644694043811662, [(1, 61), (2, 12)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 78, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 35, 19]]
** centroid: 7, normalized-entropy: 0.9357110512652843, [(2, 35), (3, 19)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18905634475499392] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18905634475499392, 0.1542832840224728] ***
*** starting iteration: 2; err: [Inf, 0.18905634475499392, 0.1542832840224728] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18905634475499392, 0.1542832840224728, 0.14940808321163057] ***
*** starting iteration: 3; err: [Inf, 0.18905634475499392, 0.1542832840224728, 0.14940808321163057] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18905634475499392, 0.1542832840224728, 0.14940808321163057, 0.14779955122806132] ***
*** starting iteration: 4; err: [Inf, 0.18905634475499392, 0.1542832840224728, 0.14940808321163057, 0.14779955122806132] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18905634475499392, 0.1542832840224728, 0.14940808321163057, 0.14779955122806132, 0.14747504532337188] ***
*** finished computation of 7 references, err: [Inf, 0.18905634475499392, 0.1542832840224728, 0.14940808321163057, 0.14779955122806132, 0.14747504532337188] ***
*** center 1: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 40, 17]]
** centroid: 2, normalized-entropy: 0.8791357668533337, [(2, 40), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [49, 10, 0]]
** centroid: 3, normalized-entropy: 0.656540281386946, [(1, 49), (2, 10)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [73, 2, 0]]
** centroid: 4, normalized-entropy: 0.1773894531859976, [(1, 73), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [13, 62, 0]]
** centroid: 5, normalized-entropy: 0.6652735227649414, [(1, 13), (2, 62)]
*** center 6: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [17, 71, 0]]
** centroid: 7, normalized-entropy: 0.7080803256135676, [(1, 17), (2, 71)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19869488326832652] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19869488326832652, 0.1492937520176638] ***
*** starting iteration: 2; err: [Inf, 0.19869488326832652, 0.1492937520176638] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19869488326832652, 0.1492937520176638, 0.14601517245918513] ***
*** starting iteration: 3; err: [Inf, 0.19869488326832652, 0.1492937520176638, 0.14601517245918513] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19869488326832652, 0.1492937520176638, 0.14601517245918513, 0.14541607802547515] ***
*** finished computation of 7 references, err: [Inf, 0.19869488326832652, 0.1492937520176638, 0.14601517245918513, 0.14541607802547515] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [81, 6, 0]]
** centroid: 1, normalized-entropy: 0.36205125173399805, [(1, 81), (2, 6)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [58, 5, 0]]
** centroid: 2, normalized-entropy: 0.39993804743902767, [(1, 58), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 63, 14]]
** centroid: 3, normalized-entropy: 0.6840384356390419, [(2, 63), (3, 14)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [54, 25, 0]]
** centroid: 4, normalized-entropy: 0.9004854334784268, [(1, 54), (2, 25)]
*** center 5: selecting labels [1] (freq >= 1) [from [50, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [7, 70, 0]]
** centroid: 6, normalized-entropy: 0.43949698692151346, [(1, 7), (2, 70)]
*** center 7: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1902642002850771] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1902642002850771, 0.15468705126084387] ***
*** starting iteration: 2; err: [Inf, 0.1902642002850771, 0.15468705126084387] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1902642002850771, 0.15468705126084387, 0.14886475671827792] ***
*** starting iteration: 3; err: [Inf, 0.1902642002850771, 0.15468705126084387, 0.14886475671827792] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1902642002850771, 0.15468705126084387, 0.14886475671827792, 0.14635037290491162] ***
*** starting iteration: 4; err: [Inf, 0.1902642002850771, 0.15468705126084387, 0.14886475671827792, 0.14635037290491162] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1902642002850771, 0.15468705126084387, 0.14886475671827792, 0.14635037290491162, 0.14502464176528157] ***
*** starting iteration: 5; err: [Inf, 0.1902642002850771, 0.15468705126084387, 0.14886475671827792, 0.14635037290491162, 0.14502464176528157] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1902642002850771, 0.15468705126084387, 0.14886475671827792, 0.14635037290491162, 0.14502464176528157, 0.14428547451086343] ***
*** finished computation of 7 references, err: [Inf, 0.1902642002850771, 0.15468705126084387, 0.14886475671827792, 0.14635037290491162, 0.14502464176528157, 0.14428547451086343] ***
*** center 1: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [78, 10, 0]]
** centroid: 2, normalized-entropy: 0.5107878229540133, [(1, 78), (2, 10)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 51, 12]]
** centroid: 3, normalized-entropy: 0.7024665512903904, [(2, 51), (3, 12)]
*** center 4: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [34, 37, 0]]
** centroid: 5, normalized-entropy: 0.9987117514654895, [(1, 34), (2, 37)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [48, 21, 0]]
** centroid: 6, normalized-entropy: 0.8865408928220899, [(1, 48), (2, 21)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 63, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1871138469809666] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1871138469809666, 0.15522012982331215] ***
*** starting iteration: 2; err: [Inf, 0.1871138469809666, 0.15522012982331215] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1871138469809666, 0.15522012982331215, 0.14998215402755885] ***
*** starting iteration: 3; err: [Inf, 0.1871138469809666, 0.15522012982331215, 0.14998215402755885] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1871138469809666, 0.15522012982331215, 0.14998215402755885, 0.1484912865543738] ***
*** starting iteration: 4; err: [Inf, 0.1871138469809666, 0.15522012982331215, 0.14998215402755885, 0.1484912865543738] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1871138469809666, 0.15522012982331215, 0.14998215402755885, 0.1484912865543738, 0.14811230534035713] ***
*** finished computation of 7 references, err: [Inf, 0.1871138469809666, 0.15522012982331215, 0.14998215402755885, 0.1484912865543738, 0.14811230534035713] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [64, 19, 0]]
** centroid: 1, normalized-entropy: 0.776116265618875, [(1, 64), (2, 19)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [55, 2, 0]]
** centroid: 2, normalized-entropy: 0.2192973081321754, [(1, 55), (2, 2)]
*** center 3: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 68, 20]]
** centroid: 4, normalized-entropy: 0.7732266742876346, [(2, 68), (3, 20)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [42, 17, 0]]
** centroid: 5, normalized-entropy: 0.8663006754980497, [(1, 42), (2, 17)]
*** center 6: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [5, 81, 0]]
** centroid: 7, normalized-entropy: 0.32001486274754665, [(1, 5), (2, 81)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1799996145684272] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1799996145684272, 0.1545178618761711] ***
*** starting iteration: 2; err: [Inf, 0.1799996145684272, 0.1545178618761711] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1799996145684272, 0.1545178618761711, 0.15106326883099974] ***
*** starting iteration: 3; err: [Inf, 0.1799996145684272, 0.1545178618761711, 0.15106326883099974] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1799996145684272, 0.1545178618761711, 0.15106326883099974, 0.1494388032089919] ***
*** starting iteration: 4; err: [Inf, 0.1799996145684272, 0.1545178618761711, 0.15106326883099974, 0.1494388032089919] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1799996145684272, 0.1545178618761711, 0.15106326883099974, 0.1494388032089919, 0.14855027181096375] ***
*** finished computation of 7 references, err: [Inf, 0.1799996145684272, 0.1545178618761711, 0.15106326883099974, 0.1494388032089919, 0.14855027181096375] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [57, 39, 0]]
** centroid: 1, normalized-entropy: 0.9744894033980525, [(1, 57), (2, 39)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [56, 4, 0]]
** centroid: 2, normalized-entropy: 0.3533593350214213, [(1, 56), (2, 4)]
*** center 3: selecting labels [1] (freq >= 1) [from [52, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 75, 10]]
** centroid: 4, normalized-entropy: 0.5225593745369407, [(2, 75), (3, 10)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [78, 7, 0]]
** centroid: 5, normalized-entropy: 0.4104161417181887, [(1, 78), (2, 7)]
*** center 6: selecting labels [1] (freq >= 1) [from [51, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [2, 69, 0]]
** centroid: 7, normalized-entropy: 0.18512476010054582, [(1, 2), (2, 69)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18361549411527814] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18361549411527814, 0.1568029345041141] ***
*** starting iteration: 2; err: [Inf, 0.18361549411527814, 0.1568029345041141] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18361549411527814, 0.1568029345041141, 0.15276003948971628] ***
*** starting iteration: 3; err: [Inf, 0.18361549411527814, 0.1568029345041141, 0.15276003948971628] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18361549411527814, 0.1568029345041141, 0.15276003948971628, 0.15091064786864444] ***
*** starting iteration: 4; err: [Inf, 0.18361549411527814, 0.1568029345041141, 0.15276003948971628, 0.15091064786864444] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18361549411527814, 0.1568029345041141, 0.15276003948971628, 0.15091064786864444, 0.14959072737488896] ***
*** starting iteration: 5; err: [Inf, 0.18361549411527814, 0.1568029345041141, 0.15276003948971628, 0.15091064786864444, 0.14959072737488896] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18361549411527814, 0.1568029345041141, 0.15276003948971628, 0.15091064786864444, 0.14959072737488896, 0.14933787220902742] ***
*** finished computation of 7 references, err: [Inf, 0.18361549411527814, 0.1568029345041141, 0.15276003948971628, 0.15091064786864444, 0.14959072737488896, 0.14933787220902742] ***
*** center 1: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 28, 11]]
** centroid: 2, normalized-entropy: 0.8582307926411409, [(2, 28), (3, 11)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [64, 6, 0]]
** centroid: 3, normalized-entropy: 0.4220005168831531, [(1, 64), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [58, 12, 0]]
** centroid: 4, normalized-entropy: 0.6609623351442084, [(1, 58), (2, 12)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [30, 67, 0]]
** centroid: 5, normalized-entropy: 0.892338681064176, [(1, 30), (2, 67)]
*** center 6: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [2, 75, 0]]
** centroid: 7, normalized-entropy: 0.17378132267943294, [(1, 2), (2, 75)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18745556661486626] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18745556661486626, 0.15606891134101897] ***
*** starting iteration: 2; err: [Inf, 0.18745556661486626, 0.15606891134101897] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18745556661486626, 0.15606891134101897, 0.15230689412727952] ***
*** starting iteration: 3; err: [Inf, 0.18745556661486626, 0.15606891134101897, 0.15230689412727952] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18745556661486626, 0.15606891134101897, 0.15230689412727952, 0.15178412826918067] ***
*** finished computation of 7 references, err: [Inf, 0.18745556661486626, 0.15606891134101897, 0.15230689412727952, 0.15178412826918067] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [95, 1, 0]]
** centroid: 1, normalized-entropy: 0.08354288831032243, [(1, 95), (2, 1)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [56, 4, 0]]
** centroid: 2, normalized-entropy: 0.3533593350214213, [(1, 56), (2, 4)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 37, 10]]
** centroid: 3, normalized-entropy: 0.7467366074830678, [(2, 37), (3, 10)]
*** center 4: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [10, 64, 0]]
** centroid: 5, normalized-entropy: 0.5713549744279549, [(1, 10), (2, 64)]
*** center 6: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [17, 64, 0]]
** centroid: 7, normalized-entropy: 0.7412466905234424, [(1, 17), (2, 64)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19859285279689357] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19859285279689357, 0.15880463269539177] ***
*** starting iteration: 2; err: [Inf, 0.19859285279689357, 0.15880463269539177] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19859285279689357, 0.15880463269539177, 0.15372411061637103] ***
*** starting iteration: 3; err: [Inf, 0.19859285279689357, 0.15880463269539177, 0.15372411061637103] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19859285279689357, 0.15880463269539177, 0.15372411061637103, 0.15303206342086195] ***
*** finished computation of 7 references, err: [Inf, 0.19859285279689357, 0.15880463269539177, 0.15372411061637103, 0.15303206342086195] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [1, 85, 0]]
** centroid: 1, normalized-entropy: 0.09140162014739266, [(1, 1), (2, 85)]
*** center 2: selecting labels [1] (freq >= 1) [from [42, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [52, 46, 0]]
** centroid: 3, normalized-entropy: 0.9972943816462351, [(1, 52), (2, 46)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [46, 27, 0]]
** centroid: 4, normalized-entropy: 0.9505668528932193, [(1, 46), (2, 27)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 46, 15]]
** centroid: 5, normalized-entropy: 0.8047175193210769, [(2, 46), (3, 15)]
*** center 6: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1838191514313221] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1838191514313221, 0.1526864426974207] ***
*** starting iteration: 2; err: [Inf, 0.1838191514313221, 0.1526864426974207] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1838191514313221, 0.1526864426974207, 0.14946117512695492] ***
*** starting iteration: 3; err: [Inf, 0.1838191514313221, 0.1526864426974207, 0.14946117512695492] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1838191514313221, 0.1526864426974207, 0.14946117512695492, 0.14911107029486448] ***
*** finished computation of 7 references, err: [Inf, 0.1838191514313221, 0.1526864426974207, 0.14946117512695492, 0.14911107029486448] ***
*** center 1: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [66, 9, 0]]
** centroid: 2, normalized-entropy: 0.5293608652873645, [(1, 66), (2, 9)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 22, 12]]
** centroid: 3, normalized-entropy: 0.9366673818775627, [(2, 22), (3, 12)]
*** center 4: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [82, 3, 0]]
** centroid: 5, normalized-entropy: 0.22028326695127437, [(1, 82), (2, 3)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 63, 0]]
** centroid: 6, normalized-entropy: 0.11611507530476962, [(1, 1), (2, 63)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 79, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2062895582076162] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2062895582076162, 0.15607230389630422] ***
*** starting iteration: 2; err: [Inf, 0.2062895582076162, 0.15607230389630422] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2062895582076162, 0.15607230389630422, 0.15264060448296368] ***
*** starting iteration: 3; err: [Inf, 0.2062895582076162, 0.15607230389630422, 0.15264060448296368] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2062895582076162, 0.15607230389630422, 0.15264060448296368, 0.15213863081298767] ***
*** finished computation of 7 references, err: [Inf, 0.2062895582076162, 0.15607230389630422, 0.15264060448296368, 0.15213863081298767] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [73, 13, 0]]
** centroid: 1, normalized-entropy: 0.6127425554686624, [(1, 73), (2, 13)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [45, 5, 0]]
** centroid: 2, normalized-entropy: 0.46899559358928133, [(1, 45), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 70, 15]]
** centroid: 3, normalized-entropy: 0.6722948170756378, [(2, 70), (3, 15)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [46, 31, 0]]
** centroid: 4, normalized-entropy: 0.9724497147128791, [(1, 46), (2, 31)]
*** center 5: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [5, 71, 0]]
** centroid: 6, normalized-entropy: 0.35001059292688486, [(1, 5), (2, 71)]
*** center 7: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19051628704136236] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19051628704136236, 0.15528820118680597] ***
*** starting iteration: 2; err: [Inf, 0.19051628704136236, 0.15528820118680597] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19051628704136236, 0.15528820118680597, 0.15192084764968602] ***
*** starting iteration: 3; err: [Inf, 0.19051628704136236, 0.15528820118680597, 0.15192084764968602] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19051628704136236, 0.15528820118680597, 0.15192084764968602, 0.15112146942131222] ***
*** finished computation of 7 references, err: [Inf, 0.19051628704136236, 0.15528820118680597, 0.15192084764968602, 0.15112146942131222] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [73, 1, 0]]
** centroid: 1, normalized-entropy: 0.10327508457163559, [(1, 73), (2, 1)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 59, 16]]
** centroid: 2, normalized-entropy: 0.7478061583312324, [(2, 59), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [44, 19, 0]]
** centroid: 3, normalized-entropy: 0.8832225588099292, [(1, 44), (2, 19)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [49, 39, 0]]
** centroid: 4, normalized-entropy: 0.9906649266228326, [(1, 49), (2, 39)]
*** center 5: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [11, 75, 0]]
** centroid: 6, normalized-entropy: 0.5516699920020824, [(1, 11), (2, 75)]
*** center 7: selecting labels [1] (freq >= 1) [from [50, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19261391741409897] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19261391741409897, 0.15253167070262133] ***
*** starting iteration: 2; err: [Inf, 0.19261391741409897, 0.15253167070262133] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19261391741409897, 0.15253167070262133, 0.14959896329790354] ***
*** starting iteration: 3; err: [Inf, 0.19261391741409897, 0.15253167070262133, 0.14959896329790354] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19261391741409897, 0.15253167070262133, 0.14959896329790354, 0.14915440462902188] ***
*** finished computation of 7 references, err: [Inf, 0.19261391741409897, 0.15253167070262133, 0.14959896329790354, 0.14915440462902188] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 56, 9]]
** centroid: 1, normalized-entropy: 0.5801954953637372, [(2, 56), (3, 9)]
*** center 2: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [51, 4, 0]]
** centroid: 3, normalized-entropy: 0.37601985096927276, [(1, 51), (2, 4)]
*** center 4: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [85, 9, 0]]
** centroid: 5, normalized-entropy: 0.45535954758523894, [(1, 85), (2, 9)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 70, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [29, 37, 0]]
** centroid: 7, normalized-entropy: 0.9893755831922303, [(1, 29), (2, 37)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18924607407674193] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18924607407674193, 0.15676038493216038] ***
*** starting iteration: 2; err: [Inf, 0.18924607407674193, 0.15676038493216038] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18924607407674193, 0.15676038493216038, 0.15422684696689248] ***
*** starting iteration: 3; err: [Inf, 0.18924607407674193, 0.15676038493216038, 0.15422684696689248] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18924607407674193, 0.15676038493216038, 0.15422684696689248, 0.1531362762292847] ***
*** starting iteration: 4; err: [Inf, 0.18924607407674193, 0.15676038493216038, 0.15422684696689248, 0.1531362762292847] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18924607407674193, 0.15676038493216038, 0.15422684696689248, 0.1531362762292847, 0.1526498952191323] ***
*** finished computation of 7 references, err: [Inf, 0.18924607407674193, 0.15676038493216038, 0.15422684696689248, 0.1531362762292847, 0.1526498952191323] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 78, 8]]
** centroid: 1, normalized-entropy: 0.446481346896803, [(2, 78), (3, 8)]
*** center 2: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [51, 15, 0]]
** centroid: 3, normalized-entropy: 0.7732266742876346, [(1, 51), (2, 15)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [75, 11, 0]]
** centroid: 4, normalized-entropy: 0.5516699920020824, [(1, 75), (2, 11)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [44, 24, 0]]
** centroid: 5, normalized-entropy: 0.9366673818775627, [(1, 44), (2, 24)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 72, 8]]
** centroid: 6, normalized-entropy: 0.46899559358928133, [(2, 72), (3, 8)]
*** center 7: selecting labels [1] (freq >= 1) [from [52, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19631010390818118] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19631010390818118, 0.15156406412273646] ***
*** starting iteration: 2; err: [Inf, 0.19631010390818118, 0.15156406412273646] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19631010390818118, 0.15156406412273646, 0.14785436530597507] ***
*** starting iteration: 3; err: [Inf, 0.19631010390818118, 0.15156406412273646, 0.14785436530597507] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19631010390818118, 0.15156406412273646, 0.14785436530597507, 0.14738782998919486] ***
*** finished computation of 7 references, err: [Inf, 0.19631010390818118, 0.15156406412273646, 0.14785436530597507, 0.14738782998919486] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [3, 87, 0]]
** centroid: 1, normalized-entropy: 0.2108423003185322, [(1, 3), (2, 87)]
*** center 2: selecting labels [1] (freq >= 1) [from [46, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [56, 28, 0]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(1, 56), (2, 28)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [57, 18, 0]]
** centroid: 4, normalized-entropy: 0.7950402793845225, [(1, 57), (2, 18)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 51, 14]]
** centroid: 5, normalized-entropy: 0.7516499461153354, [(2, 51), (3, 14)]
*** center 6: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [72, 4, 0]]
** centroid: 7, normalized-entropy: 0.2974722489192896, [(1, 72), (2, 4)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1830838903002441] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1830838903002441, 0.14996333563141526] ***
*** starting iteration: 2; err: [Inf, 0.1830838903002441, 0.14996333563141526] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1830838903002441, 0.14996333563141526, 0.14603297272184865] ***
*** starting iteration: 3; err: [Inf, 0.1830838903002441, 0.14996333563141526, 0.14603297272184865] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1830838903002441, 0.14996333563141526, 0.14603297272184865, 0.14469333390891553] ***
*** starting iteration: 4; err: [Inf, 0.1830838903002441, 0.14996333563141526, 0.14603297272184865, 0.14469333390891553] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1830838903002441, 0.14996333563141526, 0.14603297272184865, 0.14469333390891553, 0.14419829406030477] ***
*** finished computation of 7 references, err: [Inf, 0.1830838903002441, 0.14996333563141526, 0.14603297272184865, 0.14469333390891553, 0.14419829406030477] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 64, 14]]
** centroid: 1, normalized-entropy: 0.6789538995185759, [(2, 64), (3, 14)]
*** center 2: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [61, 3, 0]]
** centroid: 3, normalized-entropy: 0.2729708579140699, [(1, 61), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [36, 42, 0]]
** centroid: 4, normalized-entropy: 0.9957274520849256, [(1, 36), (2, 42)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [78, 4, 0]]
** centroid: 5, normalized-entropy: 0.2811937964320427, [(1, 78), (2, 4)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [69, 2, 0]]
** centroid: 6, normalized-entropy: 0.18512476010054582, [(1, 69), (2, 2)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 71, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18166444591619074] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18166444591619074, 0.14946208877209574] ***
*** starting iteration: 2; err: [Inf, 0.18166444591619074, 0.14946208877209574] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18166444591619074, 0.14946208877209574, 0.1471084421798587] ***
*** starting iteration: 3; err: [Inf, 0.18166444591619074, 0.14946208877209574, 0.1471084421798587] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18166444591619074, 0.14946208877209574, 0.1471084421798587, 0.14694673004187644] ***
*** finished computation of 7 references, err: [Inf, 0.18166444591619074, 0.14946208877209574, 0.1471084421798587, 0.14694673004187644] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [98, 13, 0]]
** centroid: 1, normalized-entropy: 0.521016937889524, [(1, 98), (2, 13)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [49, 8, 0]]
** centroid: 2, normalized-entropy: 0.5851569902762294, [(1, 49), (2, 8)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 28, 17]]
** centroid: 3, normalized-entropy: 0.9564574047992596, [(2, 28), (3, 17)]
*** center 4: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [13, 65, 0]]
** centroid: 5, normalized-entropy: 0.6500224216483541, [(1, 13), (2, 65)]
*** center 6: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 74, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18258015297725796] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18258015297725796, 0.15225621711649] ***
*** starting iteration: 2; err: [Inf, 0.18258015297725796, 0.15225621711649] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18258015297725796, 0.15225621711649, 0.14936075433110818] ***
*** starting iteration: 3; err: [Inf, 0.18258015297725796, 0.15225621711649, 0.14936075433110818] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18258015297725796, 0.15225621711649, 0.14936075433110818, 0.14895984045229851] ***
*** finished computation of 7 references, err: [Inf, 0.18258015297725796, 0.15225621711649, 0.14936075433110818, 0.14895984045229851] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 81, 14]]
** centroid: 1, normalized-entropy: 0.6032154068313579, [(2, 81), (3, 14)]
*** center 2: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [59, 6, 0]]
** centroid: 3, normalized-entropy: 0.4441260450795996, [(1, 59), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [40, 24, 0]]
** centroid: 4, normalized-entropy: 0.954434002924965, [(1, 40), (2, 24)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [53, 17, 0]]
** centroid: 5, normalized-entropy: 0.7997594113291759, [(1, 53), (2, 17)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 70, 2]]
** centroid: 6, normalized-entropy: 0.18312206830137262, [(2, 70), (3, 2)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [70, 4, 0]]
** centroid: 7, normalized-entropy: 0.30337483608641397, [(1, 70), (2, 4)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18971478100540115] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18971478100540115, 0.15252327129710466] ***
*** starting iteration: 2; err: [Inf, 0.18971478100540115, 0.15252327129710466] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18971478100540115, 0.15252327129710466, 0.14914421471953393] ***
*** starting iteration: 3; err: [Inf, 0.18971478100540115, 0.15252327129710466, 0.14914421471953393] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18971478100540115, 0.15252327129710466, 0.14914421471953393, 0.14840716826170683] ***
*** finished computation of 7 references, err: [Inf, 0.18971478100540115, 0.15252327129710466, 0.14914421471953393, 0.14840716826170683] ***
*** center 1: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [74, 1, 0]]
** centroid: 2, normalized-entropy: 0.10215803640865054, [(1, 74), (2, 1)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 41, 11]]
** centroid: 3, normalized-entropy: 0.7444131797881749, [(2, 41), (3, 11)]
*** center 4: selecting labels [1] (freq >= 1) [from [100, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [25, 36, 0]]
** centroid: 5, normalized-entropy: 0.9764143081154868, [(1, 25), (2, 36)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [11, 59, 0]]
** centroid: 6, normalized-entropy: 0.6274303352684106, [(1, 11), (2, 59)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 61, 0]]
** centroid: 7, normalized-entropy: 0.11911602665564841, [(1, 1), (2, 61)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18624795215390622] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18624795215390622, 0.1519010663125664] ***
*** starting iteration: 2; err: [Inf, 0.18624795215390622, 0.1519010663125664] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18624795215390622, 0.1519010663125664, 0.14796850246377288] ***
*** starting iteration: 3; err: [Inf, 0.18624795215390622, 0.1519010663125664, 0.14796850246377288] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18624795215390622, 0.1519010663125664, 0.14796850246377288, 0.14665813888888807] ***
*** starting iteration: 4; err: [Inf, 0.18624795215390622, 0.1519010663125664, 0.14796850246377288, 0.14665813888888807] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18624795215390622, 0.1519010663125664, 0.14796850246377288, 0.14665813888888807, 0.14641480633150786] ***
*** finished computation of 7 references, err: [Inf, 0.18624795215390622, 0.1519010663125664, 0.14796850246377288, 0.14665813888888807, 0.14641480633150786] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [76, 4, 0]]
** centroid: 1, normalized-entropy: 0.2863969571159561, [(1, 76), (2, 4)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [53, 12, 0]]
** centroid: 2, normalized-entropy: 0.6900703653284017, [(1, 53), (2, 12)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 50, 13]]
** centroid: 3, normalized-entropy: 0.7344461802527668, [(2, 50), (3, 13)]
*** center 4: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [38, 47, 0]]
** centroid: 5, normalized-entropy: 0.9918977415529348, [(1, 38), (2, 47)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 86, 0]]
** centroid: 6, normalized-entropy: 0.1564910629057016, [(1, 2), (2, 86)]
*** center 7: selecting labels [1] (freq >= 1) [from [51, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18865473606344313] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18865473606344313, 0.1584227454457432] ***
*** starting iteration: 2; err: [Inf, 0.18865473606344313, 0.1584227454457432] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18865473606344313, 0.1584227454457432, 0.15587034837109967] ***
*** starting iteration: 3; err: [Inf, 0.18865473606344313, 0.1584227454457432, 0.15587034837109967] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18865473606344313, 0.1584227454457432, 0.15587034837109967, 0.1553240701686591] ***
*** finished computation of 7 references, err: [Inf, 0.18865473606344313, 0.1584227454457432, 0.15587034837109967, 0.1553240701686591] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [44, 51, 0]]
** centroid: 1, normalized-entropy: 0.996079990851081, [(1, 44), (2, 51)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [54, 5, 0]]
** centroid: 2, normalized-entropy: 0.4186843105268563, [(1, 54), (2, 5)]
*** center 3: selecting labels [1] (freq >= 1) [from [44, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 51, 15]]
** centroid: 4, normalized-entropy: 0.7732266742876346, [(2, 51), (3, 15)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [76, 6, 0]]
** centroid: 5, normalized-entropy: 0.3776463213737003, [(1, 76), (2, 6)]
*** center 6: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 77, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18141676548868418] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18141676548868418, 0.1561644346481189] ***
*** starting iteration: 2; err: [Inf, 0.18141676548868418, 0.1561644346481189] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18141676548868418, 0.1561644346481189, 0.1522906955536455] ***
*** starting iteration: 3; err: [Inf, 0.18141676548868418, 0.1561644346481189, 0.1522906955536455] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18141676548868418, 0.1561644346481189, 0.1522906955536455, 0.1507620240589604] ***
*** starting iteration: 4; err: [Inf, 0.18141676548868418, 0.1561644346481189, 0.1522906955536455, 0.1507620240589604] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18141676548868418, 0.1561644346481189, 0.1522906955536455, 0.1507620240589604, 0.15014880091464147] ***
*** finished computation of 7 references, err: [Inf, 0.18141676548868418, 0.1561644346481189, 0.1522906955536455, 0.1507620240589604, 0.15014880091464147] ***
*** center 1: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 31, 19]]
** centroid: 2, normalized-entropy: 0.9580420222262997, [(2, 31), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [51, 9, 0]]
** centroid: 3, normalized-entropy: 0.6098403047164005, [(1, 51), (2, 9)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [71, 2, 0]]
** centroid: 4, normalized-entropy: 0.18116640155354563, [(1, 71), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [3, 80, 0]]
** centroid: 5, normalized-entropy: 0.2243269603450881, [(1, 3), (2, 80)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [12, 64, 0]]
** centroid: 6, normalized-entropy: 0.6292492238560344, [(1, 12), (2, 64)]
*** center 7: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.193434100064449] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.193434100064449, 0.15495634566992522] ***
*** starting iteration: 2; err: [Inf, 0.193434100064449, 0.15495634566992522] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.193434100064449, 0.15495634566992522, 0.15080607540905475] ***
*** starting iteration: 3; err: [Inf, 0.193434100064449, 0.15495634566992522, 0.15080607540905475] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.193434100064449, 0.15495634566992522, 0.15080607540905475, 0.15040266541577876] ***
*** finished computation of 7 references, err: [Inf, 0.193434100064449, 0.15495634566992522, 0.15080607540905475, 0.15040266541577876] ***
*** center 1: selecting labels [1] (freq >= 1) [from [102, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 47, 14]]
** centroid: 2, normalized-entropy: 0.7771529943226336, [(2, 47), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [42, 23, 0]]
** centroid: 3, normalized-entropy: 0.937456170782005, [(1, 42), (2, 23)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [72, 4, 0]]
** centroid: 4, normalized-entropy: 0.2974722489192896, [(1, 72), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [21, 44, 0]]
** centroid: 5, normalized-entropy: 0.9076961653608385, [(1, 21), (2, 44)]
*** center 6: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 70, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20064722510054708] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20064722510054708, 0.15158398605324327] ***
*** starting iteration: 2; err: [Inf, 0.20064722510054708, 0.15158398605324327] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20064722510054708, 0.15158398605324327, 0.1482950005568564] ***
*** starting iteration: 3; err: [Inf, 0.20064722510054708, 0.15158398605324327, 0.1482950005568564] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20064722510054708, 0.15158398605324327, 0.1482950005568564, 0.14780675387382508] ***
*** finished computation of 7 references, err: [Inf, 0.20064722510054708, 0.15158398605324327, 0.1482950005568564, 0.14780675387382508] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [56, 16, 0]]
** centroid: 1, normalized-entropy: 0.7642045065086204, [(1, 56), (2, 16)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 36, 21]]
** centroid: 2, normalized-entropy: 0.9494520153879484, [(2, 36), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [79, 4, 0]]
** centroid: 3, normalized-entropy: 0.27866980356389914, [(1, 79), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [77, 1, 0]]
** centroid: 4, normalized-entropy: 0.098959095355743, [(1, 77), (2, 1)]
*** center 5: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [3, 69, 0]]
** centroid: 6, normalized-entropy: 0.24988229283318547, [(1, 3), (2, 69)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 70, 0]]
** centroid: 7, normalized-entropy: 0.10679203237584184, [(1, 1), (2, 70)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1897540515474975] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1897540515474975, 0.1576942666163668] ***
*** starting iteration: 2; err: [Inf, 0.1897540515474975, 0.1576942666163668] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1897540515474975, 0.1576942666163668, 0.1517930515948683] ***
*** starting iteration: 3; err: [Inf, 0.1897540515474975, 0.1576942666163668, 0.1517930515948683] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1897540515474975, 0.1576942666163668, 0.1517930515948683, 0.14926039154082538] ***
*** starting iteration: 4; err: [Inf, 0.1897540515474975, 0.1576942666163668, 0.1517930515948683, 0.14926039154082538] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1897540515474975, 0.1576942666163668, 0.1517930515948683, 0.14926039154082538, 0.14834278634283693] ***
*** finished computation of 7 references, err: [Inf, 0.1897540515474975, 0.1576942666163668, 0.1517930515948683, 0.14926039154082538, 0.14834278634283693] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 71, 17]]
** centroid: 1, normalized-entropy: 0.7080803256135676, [(2, 71), (3, 17)]
*** center 2: selecting labels [1] (freq >= 1) [from [38, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [57, 4, 0]]
** centroid: 3, normalized-entropy: 0.34918437350730797, [(1, 57), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [49, 32, 0]]
** centroid: 4, normalized-entropy: 0.9679884922470298, [(1, 49), (2, 32)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [69, 3, 0]]
** centroid: 5, normalized-entropy: 0.24988229283318547, [(1, 69), (2, 3)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [69, 2, 0]]
** centroid: 6, normalized-entropy: 0.18512476010054582, [(1, 69), (2, 2)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [5, 84, 0]]
** centroid: 7, normalized-entropy: 0.3120895659343452, [(1, 5), (2, 84)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1940093274079263] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1940093274079263, 0.15422026970982552] ***
*** starting iteration: 2; err: [Inf, 0.1940093274079263, 0.15422026970982552] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1940093274079263, 0.15422026970982552, 0.1515203402284533] ***
*** starting iteration: 3; err: [Inf, 0.1940093274079263, 0.15422026970982552, 0.1515203402284533] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1940093274079263, 0.15422026970982552, 0.1515203402284533, 0.15126537419483066] ***
*** finished computation of 7 references, err: [Inf, 0.1940093274079263, 0.15422026970982552, 0.1515203402284533, 0.15126537419483066] ***
*** center 1: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 42, 17]]
** centroid: 2, normalized-entropy: 0.8663006754980497, [(2, 42), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [49, 24, 0]]
** centroid: 3, normalized-entropy: 0.9136617865655933, [(1, 49), (2, 24)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [68, 6, 0]]
** centroid: 4, normalized-entropy: 0.40597703847557104, [(1, 68), (2, 6)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [21, 63, 0]]
** centroid: 5, normalized-entropy: 0.8112781244591328, [(1, 21), (2, 63)]
*** center 6: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 61, 0]]
** centroid: 7, normalized-entropy: 0.11911602665564841, [(1, 1), (2, 61)]
finished with 10 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 380,3 => 29,1 => 591), Dict(2 => 360,3 => 42,1 => 598))
[ Info: ===== scores for single classifier: {"micro_f1":0.944,"precision":0.944,"recall":0.944,"macro_recall":0.953307320698625,"macro_f1":0.8900620852065938,"accuracy":0.944,"class_f1":{"2":0.9190751445086706,"3":0.7777777777777778,"1":0.9733333333333334},"class_precision":{"2":0.9578313253012049,"3":0.6363636363636364,"1":0.9700996677740864},"class_recall":{"2":0.8833333333333333,"3":1.0,"1":0.9765886287625418}}
[ Info: ===== scores for 1: {"micro_f1":0.984,"precision":0.984,"recall":0.984,"macro_recall":0.9648904638035072,"macro_f1":0.9765885392115967,"accuracy":0.984,"class_f1":{"2":0.9775910364145659,"3":0.962962962962963,"1":0.9892116182572614},"class_precision":{"2":0.9858757062146892,"3":1.0,"1":0.9818780889621087},"class_recall":{"2":0.9694444444444444,"3":0.9285714285714286,"1":0.9966555183946488}}
[ Info: ===== scores for 5: {"micro_f1":0.977,"precision":0.977,"recall":0.977,"macro_recall":0.9764837819185646,"macro_f1":0.9756113654819464,"accuracy":0.977,"class_f1":{"2":0.9682758620689654,"3":0.9761904761904762,"1":0.9823677581863979},"class_precision":{"2":0.9616438356164384,"3":0.9761904761904762,"1":0.9865092748735245},"class_recall":{"2":0.975,"3":0.9761904761904762,"1":0.9782608695652174}}
[ Info: ===== scores for 7: {"micro_f1":0.9810000000000001,"precision":0.981,"recall":0.981,"macro_recall":0.9860925306577482,"macro_f1":0.9718662358729855,"accuracy":0.981,"class_f1":{"2":0.9736477115117893,"3":0.9545454545454545,"1":0.9874055415617129},"class_precision":{"2":0.9722991689750693,"3":0.9130434782608695,"1":0.9915682967959528},"class_recall":{"2":0.975,"3":1.0,"1":0.9832775919732442}}
[ Info: ===== scores for 9: {"micro_f1":0.984,"precision":0.984,"recall":0.984,"macro_recall":0.9873962591353896,"macro_f1":0.9707562783611717,"accuracy":0.984,"class_f1":{"2":0.9776536312849161,"3":0.9438202247191011,"1":0.990794979079498},"class_precision":{"2":0.9831460674157303,"3":0.8936170212765957,"1":0.9916247906197655},"class_recall":{"2":0.9722222222222222,"3":1.0,"1":0.9899665551839465}}
[ Info: ===== scores for 11: {"micro_f1":0.984,"precision":0.984,"recall":0.984,"macro_recall":0.9877647714604237,"macro_f1":0.9644120418170923,"accuracy":0.984,"class_f1":{"2":0.9777158774373259,"3":0.923076923076923,"1":0.9924433249370277},"class_precision":{"2":0.9804469273743017,"3":0.8571428571428571,"1":0.9966273187183811},"class_recall":{"2":0.975,"3":1.0,"1":0.9882943143812709}}
(score = 0.985, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.985, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.984, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.984, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.976, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.976, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.982, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.982, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.978, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.978, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.977, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.977, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.979, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.979, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.981, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.981, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.985,"k":1,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.985,"precision":0.985,"recall":0.985,"macro_recall":0.9724584594149811,"macro_f1":0.9812474014329354,"accuracy":0.985,"class_f1":{"2":0.9789029535864978,"3":0.975609756097561,"1":0.9892294946147473},"class_precision":{"2":0.9914529914529915,"3":1.0,"1":0.9802955665024631},"class_recall":{"2":0.9666666666666667,"3":0.9523809523809523,"1":0.9983277591973244}}
Test Summary: | Pass  Total
AKNC          |    8      8
[231, 1, 1, 2, 6, 1, 4, 2, 1, 5, 1, 3, 3, 2, 1, 6, 30, 8, 19, 1, 30, 2, 9, 2, 1, 1, 5, 5, 6, 3, 1, 3, 26, 8, 12, 5, 29, 9, 25, 13, 12, 7, 9, 2, 9, 10, 58, 20, 3, 6, 5, 14, 5, 1, 2, 5, 10, 14, 15, 9, 86, 23, 21, 8, 25, 134, 64, 5, 13, 12, 5, 12, 7, 47, 4, 44, 19, 55, 17, 6, 5, 20, 143, 9, 10, 18, 50, 12, 5, 17, 3, 18, 6, 19, 8, 17, 5, 45, 20, 33, 2, 45, 26, 36, 15, 4, 12, 3, 23, 13, 118, 43, 8, 38, 6, 39, 10, 45, 3, 10, 5, 1, 11, 47, 1023, 31, 12, 254, 5, 5, 1, 6, 9, 266, 24, 51, 5, 5, 3, 12, 70, 3, 7, 15, 11, 4, 43, 4, 60, 7, 3, 6, 10, 2, 18, 13, 19, 15, 53, 21, 34, 32, 18, 31, 9, 17, 16, 6, 7, 10, 10, 17, 29, 3, 18, 45, 15, 77, 44, 6, 40, 4, 18, 23, 50, 12, 28, 24, 15, 13, 25, 29, 45, 18, 3, 10, 41, 62, 42, 12, 16, 8, 6, 3, 59, 15, 7, 37, 61, 10, 43, 16, 19, 87, 29, 15, 266, 9, 43, 16, 105, 42, 7, 25, 37, 16, 8, 217, 49, 62, 4, 19, 11, 6, 13, 25, 18, 21, 10, 28, 38, 29, 22, 107, 20, 67, 40, 33, 153, 4, 5, 41, 53, 19, 1, 16, 41, 726, 4, 63, 10, 3, 5, 6, 19, 10, 75, 83, 42, 53, 40, 27, 17, 57, 28, 4, 20, 5, 7, 248, 15, 1, 27, 6, 7, 19, 31, 24, 40, 22, 230, 7, 22, 4, 70, 206, 13, 5, 74, 22]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6929999999999998, speedup = 0.2866638627638726, eval_ratio = 0.091436)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.37302517361111115,"recall":0.3628472222222223,"f1":null,"seconds":0.0002651885151863098,"exhaustive_search_seconds":0.0003720540553331375,"evaluations":532.0625,"distances_sum":1719.220498978149}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5399305555555557,"recall":0.5399305555555557,"f1":null,"seconds":0.000325055792927742,"exhaustive_search_seconds":0.0003720540553331375,"evaluations":775.2265625,"distances_sum":1629.5324649616616}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6545138888888886,"recall":0.6545138888888886,"f1":0.6545138888888886,"seconds":0.00044788047671318054,"exhaustive_search_seconds":0.0003720540553331375,"evaluations":924.9609375,"distances_sum":1575.5994735230695}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7404513888888886,"recall":0.7404513888888886,"f1":0.7404513888888886,"seconds":0.0004622451961040497,"exhaustive_search_seconds":0.0003720540553331375,"evaluations":1081.7890625,"distances_sum":1545.8969151357178}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7821180555555551,"recall":0.7821180555555551,"f1":0.7821180555555551,"seconds":0.0005009304732084274,"exhaustive_search_seconds":0.0003720540553331375,"evaluations":1197.46875,"distances_sum":1532.761672862949}
KCenters.DeloneInvIndex> reached performance {"precision":0.8246527777777769,"recall":0.8246527777777769,"f1":0.8246527777777769,"seconds":0.0007413383573293686,"exhaustive_search_seconds":0.0003720540553331375,"evaluations":1328.9453125,"distances_sum":1520.252981489917}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8570000000000003, speedup = 0.5976388764514492, eval_ratio = 0.139177)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
