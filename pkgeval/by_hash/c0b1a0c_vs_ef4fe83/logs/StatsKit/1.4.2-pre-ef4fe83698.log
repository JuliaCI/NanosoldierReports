Julia Version 1.4.2-pre.0
Commit ef4fe83698 (2020-04-15 16:24 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-8.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed StatsKit ───────────────────── v0.3.0
  Installed Requires ───────────────────── v1.0.1
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed PDMats ─────────────────────── v0.9.12
  Installed DiffResults ────────────────── v1.0.2
  Installed Ratios ─────────────────────── v0.4.0
  Installed RecipesBase ────────────────── v1.0.1
  Installed GLM ────────────────────────── v1.3.9
  Installed NLSolversBase ──────────────── v7.6.1
  Installed AbstractFFTs ───────────────── v0.5.0
  Installed EzXML ──────────────────────── v1.1.0
  Installed ExprTools ──────────────────── v0.1.1
  Installed Intervals ──────────────────── v1.1.0
  Installed MKL_jll ────────────────────── v2019.0.117+2
  Installed Rmath ──────────────────────── v0.6.1
  Installed DiffRules ──────────────────── v1.0.1
  Installed WeakRefStrings ─────────────── v0.6.2
  Installed Reexport ───────────────────── v0.2.0
  Installed SortingAlgorithms ──────────── v0.3.1
  Installed Clustering ─────────────────── v0.14.0
  Installed Missings ───────────────────── v0.4.3
  Installed StatsModels ────────────────── v0.6.11
  Installed Bootstrap ──────────────────── v2.2.0
  Installed OpenBLAS_jll ───────────────── v0.3.9+4
  Installed Arpack_jll ─────────────────── v3.5.0+3
  Installed ForwardDiff ────────────────── v0.10.10
  Installed Roots ──────────────────────── v1.0.1
  Installed ArrayInterface ─────────────── v2.8.7
  Installed StatsFuns ──────────────────── v0.9.4
  Installed FFTW_jll ───────────────────── v3.3.9+5
  Installed UnPack ─────────────────────── v1.0.0
  Installed Loess ──────────────────────── v0.5.1
  Installed Polynomials ────────────────── v0.8.0
  Installed KernelDensity ──────────────── v0.5.1
  Installed NearestNeighbors ───────────── v0.4.4
  Installed FilePathsBase ──────────────── v0.8.0
  Installed Parameters ─────────────────── v0.12.1
  Installed Interpolations ─────────────── v0.12.9
  Installed Optim ──────────────────────── v0.21.0
  Installed Zlib_jll ───────────────────── v1.2.11+9
  Installed Arpack ─────────────────────── v0.4.0
  Installed DataAPI ────────────────────── v1.3.0
  Installed SpecialFunctions ───────────── v0.10.0
  Installed AxisAlgorithms ─────────────── v1.0.0
  Installed DataStructures ─────────────── v0.17.15
  Installed HypothesisTests ────────────── v0.10.0
  Installed CategoricalArrays ──────────── v0.8.0
  Installed Tables ─────────────────────── v1.0.4
  Installed NaNMath ────────────────────── v0.3.3
  Installed DataValueInterfaces ────────── v1.0.0
  Installed LineSearches ───────────────── v7.0.1
  Installed Parsers ────────────────────── v1.0.3
  Installed StaticArrays ───────────────── v0.12.3
  Installed ShiftedArrays ──────────────── v1.0.0
  Installed Combinatorics ──────────────── v1.0.1
  Installed PooledArrays ───────────────── v0.5.3
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed IntelOpenMP_jll ────────────── v2018.0.3+0
  Installed CommonSubexpressions ───────── v0.2.0
  Installed InvertedIndices ────────────── v1.0.0
  Installed OffsetArrays ───────────────── v1.0.4
  Installed TimeZones ──────────────────── v1.1.1
  Installed OrderedCollections ─────────── v1.2.0
  Installed Mocking ────────────────────── v0.7.1
  Installed StatsBase ──────────────────── v0.33.0
  Installed IteratorInterfaceExtensions ── v1.0.0
  Installed Rmath_jll ──────────────────── v0.2.2+0
  Installed Libiconv_jll ───────────────── v1.16.0+2
  Installed FiniteDiff ─────────────────── v2.3.1
  Installed WoodburyMatrices ───────────── v0.5.2
  Installed Compat ─────────────────────── v3.9.1
  Installed QuadGK ─────────────────────── v2.3.1
  Installed MultivariateStats ──────────── v0.7.0
  Installed XML2_jll ───────────────────── v2.9.9+4
  Installed Distributions ──────────────── v0.23.2
  Installed PositiveFactorizations ─────── v0.2.3
  Installed Distances ──────────────────── v0.8.2
  Installed TableTraits ────────────────── v1.0.0
  Installed FFTW ───────────────────────── v1.2.1
  Installed CSV ────────────────────────── v0.6.2
  Installed TimeSeries ─────────────────── v0.18.0
  Installed JSON ───────────────────────── v0.21.0
  Installed DataFrames ─────────────────── v0.21.0
  Installed FillArrays ─────────────────── v0.8.9
   Updating `~/.julia/environments/v1.4/Project.toml`
  [2cb19f9e] + StatsKit v0.3.0
   Updating `~/.julia/environments/v1.4/Manifest.toml`
  [621f4979] + AbstractFFTs v0.5.0
  [7d9fca2a] + Arpack v0.4.0
  [68821587] + Arpack_jll v3.5.0+3
  [4fba245c] + ArrayInterface v2.8.7
  [13072b0f] + AxisAlgorithms v1.0.0
  [e28b5b4c] + Bootstrap v2.2.0
  [336ed68f] + CSV v0.6.2
  [324d7699] + CategoricalArrays v0.8.0
  [aaaa29a8] + Clustering v0.14.0
  [861a8166] + Combinatorics v1.0.1
  [bbf7d656] + CommonSubexpressions v0.2.0
  [34da2185] + Compat v3.9.1
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.21.0
  [864edb3b] + DataStructures v0.17.15
  [e2d170a0] + DataValueInterfaces v1.0.0
  [163ba53b] + DiffResults v1.0.2
  [b552c78f] + DiffRules v1.0.1
  [b4f34e82] + Distances v0.8.2
  [31c24e10] + Distributions v0.23.2
  [e2ba6199] + ExprTools v0.1.1
  [8f5d6c58] + EzXML v1.1.0
  [7a1cc6ca] + FFTW v1.2.1
  [f5851436] + FFTW_jll v3.3.9+5
  [48062228] + FilePathsBase v0.8.0
  [1a297f60] + FillArrays v0.8.9
  [6a86dc24] + FiniteDiff v2.3.1
  [f6369f11] + ForwardDiff v0.10.10
  [38e38edf] + GLM v1.3.9
  [09f84164] + HypothesisTests v0.10.0
  [1d5cc7b8] + IntelOpenMP_jll v2018.0.3+0
  [a98d9a8b] + Interpolations v0.12.9
  [d8418881] + Intervals v1.1.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5ab0869b] + KernelDensity v0.5.1
  [94ce4f54] + Libiconv_jll v1.16.0+2
  [d3d80556] + LineSearches v7.0.1
  [4345ca2d] + Loess v0.5.1
  [856f044c] + MKL_jll v2019.0.117+2
  [e1d29d7a] + Missings v0.4.3
  [78c3b35d] + Mocking v0.7.1
  [6f286f6a] + MultivariateStats v0.7.0
  [d41bc354] + NLSolversBase v7.6.1
  [77ba4419] + NaNMath v0.3.3
  [b8a86587] + NearestNeighbors v0.4.4
  [6fe1bfb0] + OffsetArrays v1.0.4
  [4536629a] + OpenBLAS_jll v0.3.9+4
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [429524aa] + Optim v0.21.0
  [bac558e1] + OrderedCollections v1.2.0
  [90014a1f] + PDMats v0.9.12
  [d96e819e] + Parameters v0.12.1
  [69de0a69] + Parsers v1.0.3
  [f27b6e38] + Polynomials v0.8.0
  [2dfb63ee] + PooledArrays v0.5.3
  [85a6dd25] + PositiveFactorizations v0.2.3
  [1fd47b50] + QuadGK v2.3.1
  [c84ed2f1] + Ratios v0.4.0
  [3cdcf5f2] + RecipesBase v1.0.1
  [189a3867] + Reexport v0.2.0
  [ae029012] + Requires v1.0.1
  [79098fc4] + Rmath v0.6.1
  [f50d1b31] + Rmath_jll v0.2.2+0
  [f2b01f46] + Roots v1.0.1
  [1277b4bf] + ShiftedArrays v1.0.0
  [a2af1166] + SortingAlgorithms v0.3.1
  [276daf66] + SpecialFunctions v0.10.0
  [90137ffa] + StaticArrays v0.12.3
  [2913bbd2] + StatsBase v0.33.0
  [4c63d2b9] + StatsFuns v0.9.4
  [2cb19f9e] + StatsKit v0.3.0
  [3eaba693] + StatsModels v0.6.11
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [9e3dc215] + TimeSeries v0.18.0
  [f269a46b] + TimeZones v1.1.1
  [3a884ed6] + UnPack v1.0.0
  [ea10d353] + WeakRefStrings v0.6.2
  [efce3f68] + WoodburyMatrices v0.5.2
  [02c8fc9c] + XML2_jll v2.9.9+4
  [83775a58] + Zlib_jll v1.2.11+9
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [4607b0f0] + SuiteSparse 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
   Building TimeZones → `~/.julia/packages/TimeZones/X323b/deps/build.log`
   Building FFTW ─────→ `~/.julia/packages/FFTW/5DZuu/deps/build.log`
    Testing StatsKit
Status `/tmp/jl_FBjRHx/Manifest.toml`
  [621f4979] AbstractFFTs v0.5.0
  [7d9fca2a] Arpack v0.4.0
  [68821587] Arpack_jll v3.5.0+3
  [4fba245c] ArrayInterface v2.8.7
  [13072b0f] AxisAlgorithms v1.0.0
  [e28b5b4c] Bootstrap v2.2.0
  [336ed68f] CSV v0.6.2
  [324d7699] CategoricalArrays v0.8.0
  [aaaa29a8] Clustering v0.14.0
  [861a8166] Combinatorics v1.0.1
  [bbf7d656] CommonSubexpressions v0.2.0
  [34da2185] Compat v3.9.1
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.21.0
  [864edb3b] DataStructures v0.17.15
  [e2d170a0] DataValueInterfaces v1.0.0
  [163ba53b] DiffResults v1.0.2
  [b552c78f] DiffRules v1.0.1
  [b4f34e82] Distances v0.8.2
  [31c24e10] Distributions v0.23.2
  [e2ba6199] ExprTools v0.1.1
  [8f5d6c58] EzXML v1.1.0
  [7a1cc6ca] FFTW v1.2.1
  [f5851436] FFTW_jll v3.3.9+5
  [48062228] FilePathsBase v0.8.0
  [1a297f60] FillArrays v0.8.9
  [6a86dc24] FiniteDiff v2.3.1
  [f6369f11] ForwardDiff v0.10.10
  [38e38edf] GLM v1.3.9
  [09f84164] HypothesisTests v0.10.0
  [1d5cc7b8] IntelOpenMP_jll v2018.0.3+0
  [a98d9a8b] Interpolations v0.12.9
  [d8418881] Intervals v1.1.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5ab0869b] KernelDensity v0.5.1
  [94ce4f54] Libiconv_jll v1.16.0+2
  [d3d80556] LineSearches v7.0.1
  [4345ca2d] Loess v0.5.1
  [856f044c] MKL_jll v2019.0.117+2
  [e1d29d7a] Missings v0.4.3
  [78c3b35d] Mocking v0.7.1
  [6f286f6a] MultivariateStats v0.7.0
  [d41bc354] NLSolversBase v7.6.1
  [77ba4419] NaNMath v0.3.3
  [b8a86587] NearestNeighbors v0.4.4
  [6fe1bfb0] OffsetArrays v1.0.4
  [4536629a] OpenBLAS_jll v0.3.9+4
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [429524aa] Optim v0.21.0
  [bac558e1] OrderedCollections v1.2.0
  [90014a1f] PDMats v0.9.12
  [d96e819e] Parameters v0.12.1
  [69de0a69] Parsers v1.0.3
  [f27b6e38] Polynomials v0.8.0
  [2dfb63ee] PooledArrays v0.5.3
  [85a6dd25] PositiveFactorizations v0.2.3
  [1fd47b50] QuadGK v2.3.1
  [c84ed2f1] Ratios v0.4.0
  [3cdcf5f2] RecipesBase v1.0.1
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v1.0.1
  [79098fc4] Rmath v0.6.1
  [f50d1b31] Rmath_jll v0.2.2+0
  [f2b01f46] Roots v1.0.1
  [1277b4bf] ShiftedArrays v1.0.0
  [a2af1166] SortingAlgorithms v0.3.1
  [276daf66] SpecialFunctions v0.10.0
  [90137ffa] StaticArrays v0.12.3
  [2913bbd2] StatsBase v0.33.0
  [4c63d2b9] StatsFuns v0.9.4
  [2cb19f9e] StatsKit v0.3.0
  [3eaba693] StatsModels v0.6.11
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [9e3dc215] TimeSeries v0.18.0
  [f269a46b] TimeZones v1.1.1
  [3a884ed6] UnPack v1.0.0
  [ea10d353] WeakRefStrings v0.6.2
  [efce3f68] WoodburyMatrices v0.5.2
  [02c8fc9c] XML2_jll v2.9.9+4
  [83775a58] Zlib_jll v1.2.11+9
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [4607b0f0] SuiteSparse 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
    Testing Bootstrap
Status `/tmp/jl_rZXtP3/Manifest.toml`
  [7d9fca2a] Arpack v0.4.0
  [68821587] Arpack_jll v3.5.0+3
  [e28b5b4c] Bootstrap v2.2.0
  [336ed68f] CSV v0.6.2
  [324d7699] CategoricalArrays v0.8.0
  [944b1d66] CodecZlib v0.7.0
  [34da2185] Compat v3.9.1
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.21.0
  [864edb3b] DataStructures v0.17.15
  [e2d170a0] DataValueInterfaces v1.0.0
  [31c24e10] Distributions v0.23.2
  [e2ba6199] ExprTools v0.1.1
  [8f5d6c58] EzXML v1.1.0
  [5789e2e9] FileIO v1.3.0
  [48062228] FilePathsBase v0.8.0
  [1a297f60] FillArrays v0.8.9
  [38e38edf] GLM v1.3.9
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [94ce4f54] Libiconv_jll v1.16.0+2
  [e1d29d7a] Missings v0.4.3
  [78c3b35d] Mocking v0.7.1
  [4536629a] OpenBLAS_jll v0.3.9+4
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [bac558e1] OrderedCollections v1.2.0
  [90014a1f] PDMats v0.9.12
  [69de0a69] Parsers v1.0.3
  [2dfb63ee] PooledArrays v0.5.3
  [1fd47b50] QuadGK v2.3.1
  [df47a6cb] RData v0.6.3
  [ce6b1742] RDatasets v0.6.1
  [3cdcf5f2] RecipesBase v1.0.1
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v1.0.1
  [79098fc4] Rmath v0.6.1
  [f50d1b31] Rmath_jll v0.2.2+0
  [1277b4bf] ShiftedArrays v1.0.0
  [a2af1166] SortingAlgorithms v0.3.1
  [276daf66] SpecialFunctions v0.10.0
  [2913bbd2] StatsBase v0.33.0
  [4c63d2b9] StatsFuns v0.9.4
  [3eaba693] StatsModels v0.6.11
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [f269a46b] TimeZones v1.1.1
  [3bb67fe8] TranscodingStreams v0.9.5
  [ea10d353] WeakRefStrings v0.6.2
  [02c8fc9c] XML2_jll v2.9.9+4
  [83775a58] Zlib_jll v1.2.11+9
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [4607b0f0] SuiteSparse 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
WARNING: could not import DataFrames.identifier into RData
ERROR: LoadError: LoadError: MethodError: no method matching CSV.File(::Base.GenericIOBuffer{Array{UInt8,1}}; delim=',', quotechar='"', missingstring="NA", rows_for_type_detect=200)
Closest candidates are:
  CSV.File(::Any; header, normalizenames, datarow, skipto, footerskip, limit, transpose, comment, use_mmap, ignoreemptylines, threaded, select, drop, missingstrings, missingstring, delim, ignorerepeated, quotechar, openquotechar, closequotechar, escapechar, dateformat, dateformats, decimal, truestrings, falsestrings, type, types, typemap, categorical, pool, strict, silencewarnings, debug, parsingdebug) at /home/pkgeval/.julia/packages/CSV/vyG0T/src/file.jl:210 got unsupported keyword argument "rows_for_type_detect"
Stacktrace:
 [1] kwerr(::NamedTuple{(:delim, :quotechar, :missingstring, :rows_for_type_detect),Tuple{Char,Char,String,Int64}}, ::Type{T} where T, ::Base.GenericIOBuffer{Array{UInt8,1}}) at ./error.jl:157
 [2] (::RDatasets.var"#1#2"{String,String})(::IOStream) at /home/pkgeval/.julia/packages/RDatasets/1Ih8s/src/dataset.jl:28
 [3] open(::RDatasets.var"#1#2"{String,String}, ::String, ::Vararg{String,N} where N; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{,Tuple{}}}) at ./io.jl:298
 [4] open at ./io.jl:296 [inlined]
 [5] dataset(::String, ::String) at /home/pkgeval/.julia/packages/RDatasets/1Ih8s/src/dataset.jl:26
 [6] top-level scope at /home/pkgeval/.julia/packages/Bootstrap/QldPq/test/test-bootsample-non-parametric.jl:14
 [7] include(::String) at ./client.jl:439
 [8] top-level scope at /home/pkgeval/.julia/packages/Bootstrap/QldPq/test/runtests.jl:8
 [9] include(::String) at ./client.jl:439
 [10] top-level scope at none:6
in expression starting at /home/pkgeval/.julia/packages/Bootstrap/QldPq/test/test-bootsample-non-parametric.jl:14
in expression starting at /home/pkgeval/.julia/packages/Bootstrap/QldPq/test/runtests.jl:6
    Testing CategoricalArrays
Status `/tmp/jl_IvOzhy/Manifest.toml`
  [324d7699] CategoricalArrays v0.8.0
  [9a962f9c] DataAPI v1.3.0
  [682c06a0] JSON v0.21.0
  [e1d29d7a] Missings v0.4.3
  [69de0a69] Parsers v1.0.3
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [de0858da] Printf 
  [9a3f8284] Random 
  [9e88b42a] Serialization 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [8dfed614] Test 
  [4ec0a83e] Unicode 
Test Summary: | Pass  Total
01_value.jl   |   58     58
Test Summary:      | Pass  Total
04_constructors.jl |   70     70
Test Summary: | Pass  Total
05_convert.jl |   73     73
Test Summary: | Pass  Total
05_copy.jl    |   12     12
Test Summary: | Pass  Total
06_show.jl    |   67     67
Test Summary: | Pass  Total
07_levels.jl  |  168    168
Test Summary:  | Pass  Total
08_equality.jl |  110    110
┌ Warning: `isempty(x::CategoricalValue{String})` is deprecated, use `isempty(String(x))` instead.
│   caller = eval_test(::Expr, ::Expr, ::LineNumberNode, ::Bool) at Test.jl:258
└ @ Test /workspace/srcdir/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:258
┌ Warning: `eltype(x::CategoricalValue{String})` is deprecated, use `eltype(get(x))` instead.
│   caller = top-level scope at 08_string.jl:31
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:31
┌ Warning: `eltype(x::CategoricalValue{String})` is deprecated, use `eltype(get(x))` instead.
│   caller = top-level scope at 08_string.jl:32
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:32
┌ Warning: `length(x::CategoricalValue{String})` is deprecated, use `length(String(x))` instead.
│   caller = top-level scope at 08_string.jl:34
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:34
┌ Warning: `length(x::CategoricalValue{String})` is deprecated, use `length(String(x))` instead.
│   caller = top-level scope at 08_string.jl:35
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:35
┌ Warning: `sizeof(x::CategoricalValue{String})` is deprecated, use `sizeof(String(x))` instead.
│   caller = top-level scope at 08_string.jl:37
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:37
┌ Warning: `sizeof(x::CategoricalValue{String})` is deprecated, use `sizeof(String(x))` instead.
│   caller = top-level scope at 08_string.jl:38
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:38
┌ Warning: `nextind(x::CategoricalValue{String}, i::Int, j::Int = 1)` is deprecated, use `nextind(String(x), i, j)` instead.
│   caller = nextind(::CategoricalArrays.CategoricalValue{String,UInt32}, ::Int64) at deprecated.jl:66
└ @ CategoricalArrays ./deprecated.jl:66
┌ Warning: `prevind(x::CategoricalValue{String}, i::Int, j::Int = 1)` is deprecated, use `prevind(String(x), i, j)` instead.
│   caller = prevind(::CategoricalArrays.CategoricalValue{String,UInt32}, ::Int64) at deprecated.jl:66
└ @ CategoricalArrays ./deprecated.jl:66
┌ Warning: `firstindex(x::CategoricalValue{String})` is deprecated, use `firstindex(String(x))` instead.
│   caller = top-level scope at 08_string.jl:46
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:46
┌ Warning: `firstindex(x::CategoricalValue{String})` is deprecated, use `firstindex(String(x))` instead.
│   caller = top-level scope at 08_string.jl:47
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:47
┌ Warning: `lastindex(x::CategoricalValue{String})` is deprecated, use `lastindex(String(x))` instead.
│   caller = top-level scope at 08_string.jl:49
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:49
┌ Warning: `lastindex(x::CategoricalValue{String})` is deprecated, use `lastindex(String(x))` instead.
│   caller = top-level scope at 08_string.jl:50
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:50
┌ Warning: `collect(x::CategoricalValue{String})` is deprecated, use `collect(String(x))` instead.
│   caller = top-level scope at 08_string.jl:52
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:52
┌ Warning: `collect(x::CategoricalValue{String})` is deprecated, use `collect(String(x))` instead.
│   caller = top-level scope at 08_string.jl:53
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:53
┌ Warning: `getindex(x::CategoricalValue{String}, i::Int)` is deprecated, use `getindex(String(x), i)` instead.
│   caller = top-level scope at 08_string.jl:55
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:55
┌ Warning: `getindex(x::CategoricalValue{String}, i::Int)` is deprecated, use `getindex(String(x), i)` instead.
│   caller = top-level scope at 08_string.jl:56
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:56
┌ Warning: `getindex(x::CategoricalValue{String}, i::Int)` is deprecated, use `getindex(String(x), i)` instead.
│   caller = top-level scope at 08_string.jl:57
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:57
┌ Warning: `getindex(x::CategoricalValue{String}, i::Int)` is deprecated, use `getindex(String(x), i)` instead.
│   caller = top-level scope at 08_string.jl:58
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:58
┌ Warning: `codeunit(x::CategoricalValue{String}, i::Integer)` is deprecated, use `codeunit(String(x), i)` instead.
│   caller = top-level scope at 08_string.jl:60
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:60
┌ Warning: `codeunit(x::CategoricalValue{String}, i::Integer)` is deprecated, use `codeunit(String(x), i)` instead.
│   caller = top-level scope at 08_string.jl:61
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:61
┌ Warning: `codeunit(x::CategoricalValue{String}, i::Integer)` is deprecated, use `codeunit(String(x), i)` instead.
│   caller = top-level scope at 08_string.jl:62
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:62
┌ Warning: `codeunit(x::CategoricalValue{String}, i::Integer)` is deprecated, use `codeunit(String(x), i)` instead.
│   caller = top-level scope at 08_string.jl:63
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:63
┌ Warning: `ascii(x::CategoricalValue{String})` is deprecated, use `ascii(String(x))` instead.
│   caller = top-level scope at 08_string.jl:65
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:65
┌ Warning: `ascii(x::CategoricalValue{String})` is deprecated, use `ascii(String(x))` instead.
│   caller = top-level scope at 08_string.jl:66
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:66
┌ Warning: `normalize(x::CategoricalValue{String}; kwargs...)` is deprecated, use `normalize(String(x); kwargs...)` instead.
│   caller = top-level scope at 08_string.jl:68
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:68
┌ Warning: `normalize(x::CategoricalValue{String}; kwargs...)` is deprecated, use `normalize(String(x); kwargs...)` instead.
│   caller = top-level scope at 08_string.jl:69
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:69
┌ Warning: `normalize(x::CategoricalValue{String}, s::Symbol)` is deprecated, use `normalize(String(x), s)` instead.
│   caller = top-level scope at 08_string.jl:70
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:70
┌ Warning: `graphemes(x::CategoricalValue{String})` is deprecated, use `graphemes(String(x))` instead.
│   caller = top-level scope at 08_string.jl:72
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:72
┌ Warning: `graphemes(x::CategoricalValue{String})` is deprecated, use `graphemes(String(x))` instead.
│   caller = top-level scope at 08_string.jl:73
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:73
┌ Warning: `isvalid(x::CategoricalValue{String})` is deprecated, use `isvalid(String(x))` instead.
│   caller = top-level scope at 08_string.jl:75
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:75
┌ Warning: `isvalid(x::CategoricalValue{String})` is deprecated, use `isvalid(String(x))` instead.
│   caller = top-level scope at 08_string.jl:76
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:76
┌ Warning: `isvalid(x::CategoricalValue{String}, i::Integer)` is deprecated, use `isvalid(String(x), i)` instead.
│   caller = top-level scope at 08_string.jl:77
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:77
┌ Warning: `isvalid(x::CategoricalValue{String}, i::Integer)` is deprecated, use `isvalid(String(x), i)` instead.
│   caller = top-level scope at 08_string.jl:78
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:78
┌ Warning: `isvalid(x::CategoricalValue{String}, i::Integer)` is deprecated, use `isvalid(String(x), i)` instead.
│   caller = top-level scope at 08_string.jl:79
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:79
┌ Warning: `length(x::CategoricalValue{String}, i::Int, j::Int)` is deprecated, use `length(String(x), i, j)` instead.
│   caller = top-level scope at 08_string.jl:81
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:81
┌ Warning: `length(x::CategoricalValue{String}, i::Int, j::Int)` is deprecated, use `length(String(x), i, j)` instead.
│   caller = top-level scope at 08_string.jl:82
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:82
┌ Warning: `nextind(x::CategoricalValue{String}, i::Int, j::Int = 1)` is deprecated, use `nextind(String(x), i, j)` instead.
│   caller = top-level scope at 08_string.jl:84
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:84
┌ Warning: `nextind(x::CategoricalValue{String}, i::Int, j::Int = 1)` is deprecated, use `nextind(String(x), i, j)` instead.
│   caller = top-level scope at 08_string.jl:85
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:85
┌ Warning: `x::AbstractString * y::CategoricalValue{String}` is deprecated, use `x * String(y)` instead.
│   caller = top-level scope at 08_string.jl:99
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:99
┌ Warning: `x::AbstractString * y::CategoricalValue{String}` is deprecated, use `x * String(y)` instead.
│   caller = *(::String, ::CategoricalArrays.CategoricalValue{String,UInt32}, ::String) at operators.jl:529
└ @ Base ./operators.jl:529
┌ Warning: `x::AbstractString * y::CategoricalValue{String}` is deprecated, use `x * String(y)` instead.
│   caller = *(::String, ::CategoricalArrays.CategoricalValue{String,UInt32}, ::CategoricalArrays.CategoricalValue{String,UInt32}) at operators.jl:529
└ @ Base ./operators.jl:529
┌ Warning: `x::AbstractString * y::CategoricalValue{String}` is deprecated, use `x * String(y)` instead.
│   caller = *(::String, ::CategoricalArrays.CategoricalValue{String,UInt32}, ::CategoricalArrays.CategoricalValue{String,UInt32}) at operators.jl:529
└ @ Base ./operators.jl:529
┌ Warning: `x::CategoricalValue{String} ^ n::Integer` is deprecated, use `String(x) ^ n` instead.
│   caller = macro expansion at none:0 [inlined]
└ @ Core ./none:0
┌ Warning: `x::CategoricalValue{String} ^ n::Integer` is deprecated, use `String(x) ^ n` instead.
│   caller = macro expansion at none:0 [inlined]
└ @ Core ./none:0
┌ Warning: `repeat(x::CategoricalValue{String}, i::Integer)` is deprecated, use `repeat(String(x), i)` instead.
│   caller = top-level scope at 08_string.jl:108
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:108
┌ Warning: `repeat(x::CategoricalValue{String}, i::Integer)` is deprecated, use `repeat(String(x), i)` instead.
│   caller = top-level scope at 08_string.jl:109
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:109
┌ Warning: `eachmatch(r::Regex, x::CategoricalValue{String}; overlap = false)` is deprecated, use `eachmatch(r, String(x), overlap = overlap)` instead.
│   caller = top-level scope at 08_string.jl:111
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:111
┌ Warning: `eachmatch(r::Regex, x::CategoricalValue{String}; overlap = false)` is deprecated, use `eachmatch(r, String(x), overlap = overlap)` instead.
│   caller = top-level scope at 08_string.jl:112
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:112
┌ Warning: `firstindex(x::CategoricalValue{String})` is deprecated, use `firstindex(String(x))` instead.
│   caller = match(::Regex, ::CategoricalArrays.CategoricalValue{String,UInt32}) at deprecated.jl:66
└ @ CategoricalArrays ./deprecated.jl:66
┌ Warning: `match(r::Regex, s::CategoricalValue{String}, idx::Integer = firstindex(s), add_opts::UInt32 = UInt32(0); kwargs...)` is deprecated, use `match(r, String(s), idx, add_opts; kwargs...)` instead.
│   caller = match(::Regex, ::CategoricalArrays.CategoricalValue{String,UInt32}, ::Int64) at deprecated.jl:66
└ @ CategoricalArrays ./deprecated.jl:66
┌ Warning: `match(r::Regex, s::CategoricalValue{String}, idx::Integer = firstindex(s), add_opts::UInt32 = UInt32(0); kwargs...)` is deprecated, use `match(r, String(s), idx, add_opts; kwargs...)` instead.
│   caller = top-level scope at 08_string.jl:117
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:117
┌ Warning: `eachmatch(r::Regex, x::CategoricalValue{String}; overlap = false)` is deprecated, use `eachmatch(r, String(x), overlap = overlap)` instead.
│   caller = top-level scope at 08_string.jl:119
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:119
┌ Warning: `eachmatch(r::Regex, x::CategoricalValue{String}; overlap = false)` is deprecated, use `eachmatch(r, String(x), overlap = overlap)` instead.
│   caller = top-level scope at 08_string.jl:120
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:120
┌ Warning: `eachmatch(r::Regex, x::CategoricalValue{String}; overlap = false)` is deprecated, use `eachmatch(r, String(x), overlap = overlap)` instead.
│   caller = ip:0x0
└ @ Core :-1
┌ Warning: `lpad(x::CategoricalValue{String}, n::Integer, c::Union{AbstractChar, AbstractString} = ' ')` is deprecated, use `lpad(String(x), n)` instead.
│   caller = lpad(::CategoricalArrays.CategoricalValue{String,UInt32}, ::Int64) at deprecated.jl:66
└ @ CategoricalArrays ./deprecated.jl:66
┌ Warning: `rpad(x::CategoricalValue{String}, n::Integer, c::Union{AbstractChar, AbstractString} = ' ')` is deprecated, use `rpad(String(x), n)` instead.
│   caller = rpad(::CategoricalArrays.CategoricalValue{String,UInt32}, ::Int64) at deprecated.jl:66
└ @ CategoricalArrays ./deprecated.jl:66
┌ Warning: `findfirst(needle::AbstractString, haystack::CategoricalValue{String})` is deprecated, use `findfirst(needle, String(haystack))` instead.
│   caller = top-level scope at 08_string.jl:131
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:131
┌ Warning: `findfirst(needle::AbstractString, haystack::CategoricalValue{String})` is deprecated, use `findfirst(needle, String(haystack))` instead.
│   caller = top-level scope at 08_string.jl:132
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:132
┌ Warning: `findfirst(needle::Base.Fix2, haystack::CategoricalValue{String})` is deprecated, use `findfirst(needle, String(haystack))` instead.
│   caller = top-level scope at 08_string.jl:133
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:133
┌ Warning: `keys(x::CategoricalValue{String})` is deprecated, use `keys(String(x))` instead.
│   caller = findnext(::Base.Fix2{typeof(==),Char}, ::CategoricalArrays.CategoricalValue{String,UInt32}, ::Int64) at array.jl:1728
└ @ Base ./array.jl:1728
┌ Warning: `getindex(x::CategoricalValue{String}, i::Int)` is deprecated, use `getindex(String(x), i)` instead.
│   caller = findnext(::Base.Fix2{typeof(==),Char}, ::CategoricalArrays.CategoricalValue{String,UInt32}, ::Int64) at array.jl:1732
└ @ Base ./array.jl:1732
┌ Warning: `getindex(x::CategoricalValue{String}, i::Int)` is deprecated, use `getindex(String(x), i)` instead.
│   caller = findnext(::Base.Fix2{typeof(==),Char}, ::CategoricalArrays.CategoricalValue{String,UInt32}, ::Int64) at array.jl:1732
└ @ Base ./array.jl:1732
┌ Warning: `findlast(needle::AbstractString, haystack::CategoricalValue{String})` is deprecated, use `findlast(needle, String(haystack))` instead.
│   caller = top-level scope at 08_string.jl:136
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:136
┌ Warning: `findlast(needle::AbstractString, haystack::CategoricalValue{String})` is deprecated, use `findlast(needle, String(haystack))` instead.
│   caller = top-level scope at 08_string.jl:137
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:137
┌ Warning: `findlast(needle::Base.Fix2, haystack::CategoricalValue{String})` is deprecated, use `findlast(needle, String(haystack))` instead.
│   caller = top-level scope at 08_string.jl:138
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:138
┌ Warning: `keys(x::CategoricalValue{String})` is deprecated, use `keys(String(x))` instead.
│   caller = findprev(::Base.Fix2{typeof(==),Char}, ::CategoricalArrays.CategoricalValue{String,UInt32}, ::Int64) at array.jl:1919
└ @ Base ./array.jl:1919
┌ Warning: `getindex(x::CategoricalValue{String}, i::Int)` is deprecated, use `getindex(String(x), i)` instead.
│   caller = findprev(::Base.Fix2{typeof(==),Char}, ::CategoricalArrays.CategoricalValue{String,UInt32}, ::Int64) at array.jl:1922
└ @ Base ./array.jl:1922
┌ Warning: `occursin(x::AbstractString, y::CategoricalValue{String})` is deprecated, use `occursin(x, String(y))` instead.
│   caller = eval_test(::Expr, ::Expr, ::LineNumberNode, ::Bool) at Test.jl:258
└ @ Test /workspace/srcdir/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:258
┌ Warning: `startswith(x::CategoricalValue{String}, y::AbstractString)` is deprecated, use `startswith(String(x), y)` instead.
│   caller = eval_test(::Expr, ::Expr, ::LineNumberNode, ::Bool) at Test.jl:258
└ @ Test /workspace/srcdir/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:258
┌ Warning: `endswith(x::CategoricalValue{String}, y::AbstractString)` is deprecated, use `endswith(String(x), y)` instead.
│   caller = eval_test(::Expr, ::Expr, ::LineNumberNode, ::Bool) at Test.jl:258
└ @ Test /workspace/srcdir/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:258
┌ Warning: `reverse(x::CategoricalValue{String})` is deprecated, use `reverse(String(x))` instead.
│   caller = top-level scope at 08_string.jl:156
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:156
┌ Warning: `reverse(x::CategoricalValue{String})` is deprecated, use `reverse(String(x))` instead.
│   caller = top-level scope at 08_string.jl:157
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:157
┌ Warning: `replace(x::CategoricalValue{String}, old_new::Pair...; kwargs...)` is deprecated, use `replace(String(x), old_new...; kwargs...)` instead.
│   caller = top-level scope at 08_string.jl:159
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:159
┌ Warning: `replace(x::CategoricalValue{String}, old_new::Pair...; kwargs...)` is deprecated, use `replace(String(x), old_new...; kwargs...)` instead.
│   caller = top-level scope at 08_string.jl:160
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:160
┌ Warning: `replace(x::CategoricalValue{String}, old_new::Pair...; kwargs...)` is deprecated, use `replace(String(x), old_new...; kwargs...)` instead.
│   caller = ip:0x0
└ @ Core :-1
┌ Warning: `split(x::CategoricalValue{String}; kwargs...)` is deprecated, use `split(String(x); kwargs...)` instead.
│   caller = top-level scope at 08_string.jl:163
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:163
┌ Warning: `split(x::CategoricalValue{String}, dlm; kwargs...)` is deprecated, use `split(String(x), dlm; kwargs...)` instead.
│   caller = top-level scope at 08_string.jl:164
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:164
┌ Warning: `split(x::CategoricalValue{String}; kwargs...)` is deprecated, use `split(String(x); kwargs...)` instead.
│   caller = top-level scope at 08_string.jl:165
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:165
┌ Warning: `split(x::CategoricalValue{String}, dlm; kwargs...)` is deprecated, use `split(String(x), dlm; kwargs...)` instead.
│   caller = top-level scope at 08_string.jl:166
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:166
┌ Warning: `rsplit(x::CategoricalValue{String}, dlm; kwargs...)` is deprecated, use `rsplit(String(x), dlm; kwargs...)` instead.
│   caller = top-level scope at 08_string.jl:168
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:168
┌ Warning: `rsplit(x::CategoricalValue{String}, dlm; kwargs...)` is deprecated, use `rsplit(String(x), dlm; kwargs...)` instead.
│   caller = top-level scope at 08_string.jl:169
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:169
┌ Warning: `strip(x::CategoricalValue{String})` is deprecated, use `strip(String(x))` instead.
│   caller = top-level scope at 08_string.jl:171
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:171
┌ Warning: `strip(x::CategoricalValue{String})` is deprecated, use `strip(String(x))` instead.
│   caller = top-level scope at 08_string.jl:172
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:172
┌ Warning: `strip(x::CategoricalValue{String}, chars::Base.Chars)` is deprecated, use `strip(String(x), chars)` instead.
│   caller = top-level scope at 08_string.jl:173
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:173
┌ Warning: `lstrip(x::CategoricalValue{String})` is deprecated, use `lstrip(String(x))` instead.
│   caller = top-level scope at 08_string.jl:175
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:175
┌ Warning: `lstrip(x::CategoricalValue{String})` is deprecated, use `lstrip(String(x))` instead.
│   caller = top-level scope at 08_string.jl:176
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:176
┌ Warning: `lstrip(x::CategoricalValue{String}, chars::Base.Chars)` is deprecated, use `lstrip(String(x), chars)` instead.
│   caller = top-level scope at 08_string.jl:177
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:177
┌ Warning: `rstrip(x::CategoricalValue{String})` is deprecated, use `rstrip(String(x))` instead.
│   caller = top-level scope at 08_string.jl:179
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:179
┌ Warning: `rstrip(x::CategoricalValue{String})` is deprecated, use `rstrip(String(x))` instead.
│   caller = top-level scope at 08_string.jl:180
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:180
┌ Warning: `rstrip(x::CategoricalValue{String}, chars::Base.Chars)` is deprecated, use `rstrip(String(x), chars)` instead.
│   caller = top-level scope at 08_string.jl:181
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:181
┌ Warning: `uppercase(x::CategoricalValue{String})` is deprecated, use `uppercase(String(x))` instead.
│   caller = top-level scope at 08_string.jl:183
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:183
┌ Warning: `uppercase(x::CategoricalValue{String})` is deprecated, use `uppercase(String(x))` instead.
│   caller = top-level scope at 08_string.jl:184
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:184
┌ Warning: `lowercase(x::CategoricalValue{String})` is deprecated, use `lowercase(String(x))` instead.
│   caller = top-level scope at 08_string.jl:186
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:186
┌ Warning: `lowercase(x::CategoricalValue{String})` is deprecated, use `lowercase(String(x))` instead.
│   caller = top-level scope at 08_string.jl:187
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:187
┌ Warning: `titlecase(x::CategoricalValue{String})` is deprecated, use `titlecase(String(x))` instead.
│   caller = top-level scope at 08_string.jl:189
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:189
┌ Warning: `titlecase(x::CategoricalValue{String})` is deprecated, use `titlecase(String(x))` instead.
│   caller = top-level scope at 08_string.jl:190
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:190
┌ Warning: `uppercasefirst(x::CategoricalValue{String})` is deprecated, use `uppercasefirst(String(x))` instead.
│   caller = top-level scope at 08_string.jl:192
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:192
┌ Warning: `uppercasefirst(x::CategoricalValue{String})` is deprecated, use `uppercasefirst(String(x))` instead.
│   caller = top-level scope at 08_string.jl:193
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:193
┌ Warning: `lowercasefirst(x::CategoricalValue{String})` is deprecated, use `lowercasefirst(String(x))` instead.
│   caller = top-level scope at 08_string.jl:195
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:195
┌ Warning: `lowercasefirst(x::CategoricalValue{String})` is deprecated, use `lowercasefirst(String(x))` instead.
│   caller = top-level scope at 08_string.jl:196
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:196
┌ Warning: `chop(x::CategoricalValue{String}; kwargs...)` is deprecated, use `chop(String(x); kwargs...)` instead.
│   caller = top-level scope at 08_string.jl:202
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:202
┌ Warning: `chop(x::CategoricalValue{String}; kwargs...)` is deprecated, use `chop(String(x); kwargs...)` instead.
│   caller = top-level scope at 08_string.jl:204
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:204
┌ Warning: `chomp(x::CategoricalValue{String})` is deprecated, use `chomp(String(x))` instead.
│   caller = top-level scope at 08_string.jl:206
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:206
┌ Warning: `chomp(x::CategoricalValue{String})` is deprecated, use `chomp(String(x))` instead.
│   caller = top-level scope at 08_string.jl:207
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:207
┌ Warning: `textwidth(x::CategoricalValue{String})` is deprecated, use `textwidth(String(x))` instead.
│   caller = top-level scope at 08_string.jl:209
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:209
┌ Warning: `textwidth(x::CategoricalValue{String})` is deprecated, use `textwidth(String(x))` instead.
│   caller = top-level scope at 08_string.jl:210
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:210
┌ Warning: `isascii(x::CategoricalValue{String})` is deprecated, use `isascii(String(x))` instead.
│   caller = top-level scope at 08_string.jl:212
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:212
┌ Warning: `isascii(x::CategoricalValue{String})` is deprecated, use `isascii(String(x))` instead.
│   caller = top-level scope at 08_string.jl:213
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:213
┌ Warning: `escape_string(x::CategoricalValue{String})` is deprecated, use `escape_string(String(x))` instead.
│   caller = top-level scope at 08_string.jl:215
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:215
┌ Warning: `escape_string(x::CategoricalValue{String})` is deprecated, use `escape_string(String(x))` instead.
│   caller = top-level scope at 08_string.jl:216
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:216
┌ Warning: `collect(x::CategoricalValue{String})` is deprecated, use `collect(String(x))` instead.
│   caller = top-level scope at 08_string.jl:218
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:218
┌ Warning: `collect(x::CategoricalValue{String})` is deprecated, use `collect(String(x))` instead.
│   caller = top-level scope at 08_string.jl:219
└ @ Core ~/.julia/packages/CategoricalArrays/i7Sbk/test/08_string.jl:219
Test Summary: | Pass  Total
08_string.jl  |  149    149
Test Summary: | Pass  Total
09_hash.jl    |   54     54
Test Summary: | Pass  Total
10_isless.jl  |  161    161
Test Summary: | Pass  Total
11_array.jl   | 9014   9014
Test Summary:      |  Pass  Total
12_missingarray.jl | 12652  12652
Test Summary:     |  Pass  Total
13_arraycommon.jl | 22435  22435
Test Summary: | Pass  Total
14_view.jl    |  158    158
Test Summary: | Pass  Total
15_extras.jl  |  130    130
Test Summary: | Pass  Total
16_recode.jl  |  808    808
WARNING: replacing module TestExtras.
┌ Warning: `categorical(A::AbstractArray, compress::Bool; kwargs...)` is deprecated, use `categorical(A; compress = compress, kwargs...)` instead.
│   caller = ip:0x0
└ @ Core :-1
┌ Warning: allow_missing argument is deprecated, use allowmissing instead
│   caller = ip:0x0
└ @ Core :-1
┌ Warning: allow_missing argument is deprecated, use allowmissing instead
│   caller = ip:0x0
└ @ Core :-1
Test Summary:    | Pass  Total
17_deprecated.jl |   14     14
    Testing CategoricalArrays tests passed 
    Testing Clustering
Status `/tmp/jl_hq0SwA/Manifest.toml`
  [aaaa29a8] Clustering v0.14.0
  [944b1d66] CodecZlib v0.7.0
  [9a962f9c] DataAPI v1.3.0
  [864edb3b] DataStructures v0.17.15
  [b4f34e82] Distances v0.8.2
  [e1d29d7a] Missings v0.4.3
  [b8a86587] NearestNeighbors v0.4.4
  [bac558e1] OrderedCollections v1.2.0
  [a2af1166] SortingAlgorithms v0.3.1
  [90137ffa] StaticArrays v0.12.3
  [2913bbd2] StatsBase v0.33.0
  [3bb67fe8] TranscodingStreams v0.9.5
  [83775a58] Zlib_jll v1.2.11+9
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
Runing tests:
* seeding.jl ...
Test Summary: | Pass  Total
seeding       |   64     64
* kmeans.jl ...
  Iters               objv        objv-change | affected 
-------------------------------------------------------------
      0       1.470563e+00
      1       7.352817e-01      -7.352817e-01 |        0
      2       7.352817e-01       0.000000e+00 |        0
K-means converged with 2 iterations (objv = 0.7352816593329847)
K-means converged with 2 iterations (objv = 0.09164881001248792)
┌ Warning: The clustering cost increased at iteration #1
└ @ Clustering ~/.julia/packages/Clustering/dzWhx/src/kmeans.jl:188
Test Summary:      | Pass  Total
kmeans() (k-means) |   95     95
* kmedoids.jl ...
  Iters               objv        objv-change
-----------------------------------------------------
      0       1.589132e+00
      1       1.623600e+00       3.446832e-02
      2       1.623600e+00       0.000000e+00
K-medoids converged with 2 iterations (objv = 1.6236002870003423)
K-medoids converged with 2 iterations (objv = 1.6236002870003423)
Test Summary:          | Pass  Total
kmedoids() (k-medoids) |   38     38
* affprop.jl ...
  Iters  objv-change | exemplars 
-----------------------------------------------------
      1   1.7243e+00 |        1
      2   1.1599e+00 |        1
      3   1.0111e+00 |        1
      4   8.2884e-01 |        1
      5   6.2996e-01 |        1
      6   4.4970e-01 |        1
      7   3.0568e-01 |        1
      8   1.9999e-01 |        1
      9   1.2694e-01 |        1
     10   7.8624e-02 |        1
Affinity propagation converged with 10 iterations: 1 exemplars.
Affinity propagation converged with 9 iterations: 1 exemplars.
Test Summary:                         | Pass  Total
affinityprop() (affinity propagation) |   84     84
* dbscan.jl ...
Test Summary:                | Pass  Total
dbscan() (DBSCAN clustering) |   25     25
* fuzzycmeans.jl ...
  Iters      center-change
----------------------------
      1       5.244585e-01
      2       1.013155e-01
      3       2.621402e-01
      4       2.313798e-01
      5       3.691017e-02
Fuzzy C-means converged with 5 iterations (δ = 0.036910170483319474)
Fuzzy C-means converged with 6 iterations (δ = 0.052544440650040276)
Test Summary:  | Pass  Total
fuzzy_cmeans() |   36     36
* counts.jl ...
Test Summary:                 | Pass  Total
counts() (contingency matrix) |   22     22
* silhouette.jl ...
Test Summary: | Pass  Broken  Total
silhouettes() |   11       1     12
* varinfo.jl ...
Test Summary:                       | Pass  Total
varinfo() (variational information) |    7      7
* randindex.jl ...
Test Summary:            | Pass  Total
randindex() (Rand index) |   13     13
* hclust.jl ...
Test Summary:                      | Pass  Total
hclust() (hierarchical clustering) | 6667   6667
* mcl.jl ...
[ Info: Starting MCL iterations...
┌ Info: MCL iter. #0: rel.Δ=
└   rel_delta = 0.0
[ Info: MCL converged after 0 iteration(s)
[ Info: Generating MCL clusters...
[ Info: Starting MCL iterations...
[ Info: MCL converged after 0 iteration(s)
[ Info: Generating MCL clusters...
Test Summary: | Pass  Broken  Total
MCL           |   33       1     34
* vmeasure.jl ...
Test Summary: | Pass  Broken  Total
V-measure     |    8       1      9
* mutualinfo.jl ...
Test Summary:                     | Pass  Total
mutualinfo() (mutual information) |    4      4
    Testing Clustering tests passed 
    Testing CSV
Status `/tmp/jl_MrRIxd/Manifest.toml`
  [336ed68f] CSV v0.6.2
  [324d7699] CategoricalArrays v0.8.0
  [944b1d66] CodecZlib v0.7.0
  [34da2185] Compat v3.9.1
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.21.0
  [864edb3b] DataStructures v0.17.15
  [e2d170a0] DataValueInterfaces v1.0.0
  [48062228] FilePathsBase v0.8.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.2.0
  [69de0a69] Parsers v1.0.3
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [a2af1166] SortingAlgorithms v0.3.1
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [3bb67fe8] TranscodingStreams v0.9.5
  [ea10d353] WeakRefStrings v0.6.2
  [83775a58] Zlib_jll v1.2.11+9
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
thread = 1 warning: only found 7 / 8 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: error parsing Int64 on row = 1, col = 1: "abc
", error=INVALID: SENTINEL | NEWLINE | EOF | INVALID_DELIMITER 
testing test_utf8_with_BOM.csv
testing test_utf8.csv
testing test_windows.csv
testing test_single_column.csv
testing test_empty_file.csv
testing test_empty_file_newlines.csv
testing test_simple_quoted.csv
testing test_quoted_delim_and_newline.csv
testing test_quoted_numbers.csv
testing test_crlf_line_endings.csv
testing test_newline_line_endings.csv
testing test_mac_line_endings.csv
testing test_no_header.csv
testing test_2_footer_rows.csv
testing test_footer_missing.csv
testing test_footer_missing.csv
testing test_dates.csv
testing test_excel_date_formats.csv
testing test_datetimes.csv
testing test_missing_value_NULL.csv
testing test_missing_value_NULL.csv
testing test_missing_value.csv
testing test_header_range.csv
testing test_header_int_list.csv
testing test_basic.csv
testing test_basic_pipe.csv
testing test_tab_null_empty.txt
testing test_tab_null_string.txt
testing IOBuffer(data=UInt8[...], readable=true, writable=false, seekable=true, append=false, size=5, maxsize=Inf, ptr=1, mark=-1)
testing IOBuffer(data=UInt8[...], readable=true, writable=false, seekable=true, append=false, size=0, maxsize=Inf, ptr=1, mark=-1)
testing dash_as_null.csv
testing plus_as_null.csv
testing comma_decimal.csv
testing double_quote_quotechar_and_escapechar.csv
testing census.txt
testing bools.csv
testing boolext.csv
testing attenu.csv
testing test_null_only_column.csv
testing IOBuffer(data=UInt8[...], readable=true, writable=false, seekable=true, append=false, size=20, maxsize=Inf, ptr=1, mark=-1)
testing categorical.csv
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 1)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
testing categorical.csv
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 1)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
testing categorical.csv
testing categorical.csv
testing baseball.csv
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 4)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 5)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 6)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 15)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
testing FL_insurance_sample.csv
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 2)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 3)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 16)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 17)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
testing FL_insurance_sample.csv
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 2)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 3)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 16)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 17)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
testing SacramentocrimeJanuary2006.csv
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 1)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 2)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 4)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 6)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
testing Sacramentorealestatetransactions.csv
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 1)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 2)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 4)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 8)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 9)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
testing SalesJan2009.csv
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 1)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 2)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 4)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 5)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 6)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 7)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 8)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 9)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 10)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
testing stocks.csv
testing TechCrunchcontinentalUSA.csv
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 1)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 2)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 4)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 5)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 6)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 7)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 9)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 10)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
testing Fielding.csv
testing latest (1).csv
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 1)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 2)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 5)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 7)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 12)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
testing IOBuffer(data=UInt8[...], readable=true, writable=false, seekable=true, append=false, size=16, maxsize=Inf, ptr=1, mark=-1)
testing issue_198.csv
testing issue_198_part2.csv
thread = 1 warning: parsed expected 3 columns, but didn't reach end of line on data row: 1. Ignoring any extra columns on this row
thread = 1 warning: parsed expected 3 columns, but didn't reach end of line on data row: 1. Ignoring any extra columns on this row
thread = 1 warning: parsed expected 3 columns, but didn't reach end of line on data row: 2. Ignoring any extra columns on this row
thread = 1 warning: parsed expected 3 columns, but didn't reach end of line on data row: 3. Ignoring any extra columns on this row
thread = 1 warning: parsed expected 3 columns, but didn't reach end of line on data row: 1. Ignoring any extra columns on this row
thread = 1 warning: parsed expected 3 columns, but didn't reach end of line on data row: 1. Ignoring any extra columns on this row
testing issue_207.csv
thread = 1 warning: only found 5 / 6 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: only found 5 / 6 columns on data row: 2. Filling remaining columns with `missing`
thread = 1 warning: only found 5 / 6 columns on data row: 1. Filling remaining columns with `missing`
testing issue_120.csv
testing pandas_zeros.csv
testing transposed.csv
testing transposed_1row.csv
testing transposed_emtpy.csv
testing transposed_extra_newline.csv
testing transposed_noheader.csv
testing transposed_noheader.csv
testing test_utf8.csv
testing test_utf8.csv
testing test_multiple_missing.csv
testing test_openclosequotes.csv
testing test_truestrings.csv
testing test_truestrings.csv
testing test_string_delimiters.csv
testing IOBuffer(data=UInt8[...], readable=true, writable=false, seekable=true, append=false, size=20, maxsize=Inf, ptr=1, mark=-1)
testing test_basic.csv
testing test_basic.csv
testing test_truestrings.csv
testing test_repeated_delimiters.csv
testing test_comments1.csv
testing test_comments_multiple.csv
testing test_comments_multichar.csv
testing test_not_enough_columns.csv
thread = 1 warning: only found 3 / 5 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: only found 3 / 5 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: only found 3 / 5 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: only found 3 / 5 columns on data row: 2. Filling remaining columns with `missing`
thread = 1 warning: only found 3 / 5 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: only found 3 / 5 columns on data row: 1. Filling remaining columns with `missing`
testing test_not_enough_columns2.csv
thread = 1 warning: only found 3 / 5 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: only found 3 / 5 columns on data row: 2. Filling remaining columns with `missing`
thread = 1 warning: only found 3 / 5 columns on data row: 1. Filling remaining columns with `missing`
testing test_correct_trailing_missings.csv
thread = 1 warning: only found 4 / 5 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: only found 4 / 5 columns on data row: 2. Filling remaining columns with `missing`
thread = 1 warning: only found 4 / 5 columns on data row: 1. Filling remaining columns with `missing`
testing norwegian_data.csv
testing test_duplicate_columnnames.csv
testing test_bad_datetime.csv
testing test_types.csv
thread = 1 warning: only found 7 / 8 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: only found 7 / 8 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: only found 7 / 8 columns on data row: 1. Filling remaining columns with `missing`
testing test_issue_326.wsv
testing test_missing_last_field.csv
thread = 1 warning: only found 2 / 3 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: only found 2 / 3 columns on data row: 2. Filling remaining columns with `missing`
thread = 1 warning: only found 2 / 3 columns on data row: 1. Filling remaining columns with `missing`
testing test_delim.tsv
testing test_delim.wsv
testing test_comment_first_row.csv
testing test_comment_first_row.csv
testing test_repeated_delim_371.csv
testing test_file_issue_154.csv
testing IOBuffer(data=UInt8[...], readable=true, writable=false, seekable=true, append=false, size=16, maxsize=Inf, ptr=1, mark=-1)
thread = 1 warning: only found 2 / 3 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: only found 2 / 3 columns on data row: 2. Filling remaining columns with `missing`
thread = 1 warning: only found 2 / 3 columns on data row: 1. Filling remaining columns with `missing`
testing IOBuffer(data=UInt8[...], readable=true, writable=false, seekable=true, append=false, size=19, maxsize=Inf, ptr=1, mark=-1)
thread = 1 warning: only found 1 / 3 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: only found 1 / 3 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: only found 1 / 3 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: only found 1 / 3 columns on data row: 2. Filling remaining columns with `missing`
thread = 1 warning: only found 1 / 3 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: only found 1 / 3 columns on data row: 1. Filling remaining columns with `missing`
testing IOBuffer(data=UInt8[...], readable=true, writable=false, seekable=true, append=false, size=19, maxsize=Inf, ptr=1, mark=-1)
thread = 1 warning: only found 1 / 3 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: only found 1 / 3 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: only found 1 / 3 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: only found 1 / 3 columns on data row: 2. Filling remaining columns with `missing`
thread = 1 warning: only found 1 / 3 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: only found 1 / 3 columns on data row: 1. Filling remaining columns with `missing`
testing IOBuffer(data=UInt8[...], readable=true, writable=false, seekable=true, append=false, size=43, maxsize=Inf, ptr=1, mark=-1)
thread = 1 warning: parsed expected 5 columns, but didn't reach end of line on data row: 1. Ignoring any extra columns on this row
thread = 1 warning: parsed expected 5 columns, but didn't reach end of line on data row: 1. Ignoring any extra columns on this row
thread = 1 warning: parsed expected 5 columns, but didn't reach end of line on data row: 1. Ignoring any extra columns on this row
thread = 1 warning: parsed expected 5 columns, but didn't reach end of line on data row: 1. Ignoring any extra columns on this row
thread = 1 warning: parsed expected 5 columns, but didn't reach end of line on data row: 2. Ignoring any extra columns on this row
thread = 1 warning: parsed expected 5 columns, but didn't reach end of line on data row: 3. Ignoring any extra columns on this row
thread = 1 warning: parsed expected 5 columns, but didn't reach end of line on data row: 1. Ignoring any extra columns on this row
thread = 1 warning: parsed expected 5 columns, but didn't reach end of line on data row: 1. Ignoring any extra columns on this row
thread = 1 warning: parsed expected 5 columns, but didn't reach end of line on data row: 1. Ignoring any extra columns on this row
testing IOBuffer(data=UInt8[...], readable=true, writable=false, seekable=true, append=false, size=17, maxsize=Inf, ptr=1, mark=-1)
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 1)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
testing heat_flux.dat
testing log001_vehicle_status_flags_0.txt
testing fecal_samples.csv
header is: 1, datarow computed as: 2
headerpos = 4, datapos = 481
estimated rows: 756
detected delimiter: ","
column names detected: [:SampleID, :Mother_Child, :SubjectID, :MaternalID, :TimePoint, :Fecal_EtOH, :CollectionRep, :DOC, :RAInitials_DOC, :DOF, :RAInitials_DOF, :Date_Brought_In, :RAInitials_Brought, :Date_Shipped, :RAInitials_Shipped, :Date_Aliquoted, :Number_Replicates, :RAInitials_Aliquot, :StorageBox, :DOE, :Extract_number, :AliquotRep, :DNABox, :KitUsed, :RAInitials_Extract, :DNAConc, :DOM, :Mgx_processed, :Mgx_batch, :DO16S, :_16S_processed, :_16S_batch, :_16S_plate, :Notes, :Discrepancies, :Batch_1_Mapping, :Mgx_batch_Mapping, :_16S_batch_Mapping, :Mother_Child_Dyads]
byte position of data computed at: 481
column options generated as: 
computed typecodes are: Int8[-120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120]
thread = 1 warning: only found 38 / 39 columns on data row: 1. Filling remaining columns with `missing`
header is: 1, datarow computed as: 2
headerpos = 4, datapos = 481
estimated rows: 756
detected delimiter: ","
column names detected: [:SampleID, :Mother_Child, :SubjectID, :MaternalID, :TimePoint, :Fecal_EtOH, :CollectionRep, :DOC, :RAInitials_DOC, :DOF, :RAInitials_DOF, :Date_Brought_In, :RAInitials_Brought, :Date_Shipped, :RAInitials_Shipped, :Date_Aliquoted, :Number_Replicates, :RAInitials_Aliquot, :StorageBox, :DOE, :Extract_number, :AliquotRep, :DNABox, :KitUsed, :RAInitials_Extract, :DNAConc, :DOM, :Mgx_processed, :Mgx_batch, :DO16S, :_16S_processed, :_16S_batch, :_16S_plate, :Notes, :Discrepancies, :Batch_1_Mapping, :Mgx_batch_Mapping, :_16S_batch_Mapping, :Mother_Child_Dyads]
byte position of data computed at: 481
column options generated as: 
computed typecodes are: Int8[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
initial byte positions before adjusting for start of rows: [481, 101091, 201701]
parsing using 2 threads: 378 rows chunked at positions: [481, 101105, 201701]
thread = 2 warning: didn't pre-allocate enough tape while parsing on row 378, re-allocating from 378 to 467...
thread = 1 warning: didn't pre-allocate enough tape while parsing on row 378, re-allocating from 378 to 629...
thread = 2: time for parsing: 0.02999591827392578
thread = 1 warning: only found 38 / 39 columns on data row: 623. Filling remaining columns with `missing`
thread = 1: time for parsing: 0.025113821029663086
types after parsing: Type[String, PooledString, Int64, String, Int64, PooledString, Int64, Date, Union{Missing, PooledString}, Union{Missing, Date}, Union{Missing, PooledString}, Union{Missing, Date}, Union{Missing, PooledString}, Union{Missing, Date}, Union{Missing, PooledString}, Union{Missing, Date}, Union{Missing, PooledString}, Union{Missing, PooledString}, Union{Missing, PooledString}, Union{Missing, Date}, Union{Missing, String}, Union{Missing, PooledString}, Union{Missing, PooledString}, Union{Missing, PooledString}, Union{Missing, PooledString}, Union{Missing, Float64}, Union{Missing, Date}, Union{Missing, PooledString}, Union{Missing, PooledString}, Union{Missing, Date}, Union{Missing, PooledString}, Union{Missing, PooledString}, Union{Missing, PooledString}, Union{Missing, String}, Union{Missing, PooledString}, Union{Missing, String}, Union{Missing, PooledString}, Union{Missing, PooledString}, Union{Missing, Int64}], pool = 0.1
header is: 1, datarow computed as: 2
headerpos = 4, datapos = 481
estimated rows: 756
detected delimiter: ","
column names detected: [:SampleID, :Mother_Child, :SubjectID, :MaternalID, :TimePoint, :Fecal_EtOH, :CollectionRep, :DOC, :RAInitials_DOC, :DOF, :RAInitials_DOF, :Date_Brought_In, :RAInitials_Brought, :Date_Shipped, :RAInitials_Shipped, :Date_Aliquoted, :Number_Replicates, :RAInitials_Aliquot, :StorageBox, :DOE, :Extract_number, :AliquotRep, :DNABox, :KitUsed, :RAInitials_Extract, :DNAConc, :DOM, :Mgx_processed, :Mgx_batch, :DO16S, :_16S_processed, :_16S_batch, :_16S_plate, :Notes, :Discrepancies, :Batch_1_Mapping, :Mgx_batch_Mapping, :_16S_batch_Mapping, :Mother_Child_Dyads]
byte position of data computed at: 481
column options generated as: 
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 2)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 6)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 9)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 11)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 13)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 15)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 17)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 18)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 19)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 22)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 23)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 24)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 25)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 28)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 29)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 31)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 32)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 33)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 35)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 37)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 38)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
computed typecodes are: Int8[40, 8, 34, 40, 34, 8, 34, 36, -120, -92, -120, -92, -120, -92, -120, -92, -120, -120, -120, -92, -88, -120, -120, -120, -120, -93, -92, -120, -120, -92, -120, -120, -120, -88, -120, -88, -120, -120, -94]
thread = 1 warning: only found 38 / 39 columns on data row: 1. Filling remaining columns with `missing`
testing time.csv
testing escaped_pooled.csv
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 1)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 1)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
testing error_comment.txt
testing test_508.csv
testing bug555.txt
testing csv_segfault.txt
thread = 1 warning: only found 4 / 9 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: only found 4 / 9 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: only found 1 / 9 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: only found 4 / 9 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: only found 4 / 9 columns on data row: 4. Filling remaining columns with `missing`
thread = 1 warning: only found 4 / 9 columns on data row: 466. Filling remaining columns with `missing`
thread = 1 warning: only found 1 / 9 columns on data row: 467. Filling remaining columns with `missing`
thread = 1 warning: only found 4 / 9 columns on data row: 468. Filling remaining columns with `missing`
thread = 1 warning: only found 4 / 9 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: only found 4 / 9 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: only found 1 / 9 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: only found 4 / 9 columns on data row: 1. Filling remaining columns with `missing`
testing types_override.csv
testing select.csv
thread = 1 warning: only found 16 / 17 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: only found 16 / 17 columns on data row: 784. Filling remaining columns with `missing`
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 2)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 10)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
thread = 1 warning: only found 16 / 17 columns on data row: 1. Filling remaining columns with `missing`
testing ampm.csv
┌ Warning: pooled column types not allowed in `CSV.Rows` (column number = 2)
└ @ CSV ~/.julia/packages/CSV/vyG0T/src/header.jl:213
testing test_basic.csv
thread = 1 warning: only found 3 / 5 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: only found 3 / 5 columns on data row: 2. Filling remaining columns with `missing`
thread = 1 warning: only found 4 / 5 columns on data row: 2. Filling remaining columns with `missing`
CSV.Rows("<Base.GenericIOBuffer{Array{UInt8,1}}>"):
Size: 1
Tables.Schema:
 :X  Union{Missing, String}thread = 1 warning: only found 1 / 3 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: only found 2 / 3 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: parsed expected 3 columns, but didn't reach end of line on data row: 1. Ignoring any extra columns on this row
Test Summary: | Pass  Total
CSV           | 1749   1749
    Testing CSV tests passed 
    Testing DataFrames
Status `/tmp/jl_DOvyFl/Manifest.toml`
  [324d7699] CategoricalArrays v0.8.0
  [34da2185] Compat v3.9.1
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.21.0
  [864edb3b] DataStructures v0.17.15
  [e2d170a0] DataValueInterfaces v1.0.0
  [e7dc6d0d] DataValues v0.4.13
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.2.0
  [69de0a69] Parsers v1.0.3
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [a2af1166] SortingAlgorithms v0.3.1
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
Running tests:
Test Summary: | Pass  Total
make_unique   |    3      3
Test Summary: | Pass  Total
repeat count  |    5      5
Test Summary:      | Pass  Total
repeat inner_outer |    8      8
Test Summary: | Pass  Total
repeat! count |    8      8
Test Summary:       | Pass  Total
repeat! inner_outer |   11     11
	[1m[32mPASSED[0m: utils.jl
Test Summary: | Pass  Total
hcat          |   10     10
Test Summary: | Pass  Total
hcat: copying |   26     26
Test Summary:            | Pass  Total
hcat ::AbstractDataFrame |    2      2
Test Summary:            | Pass  Total
hcat ::AbstractDataFrame |    2      2
Test Summary:          | Pass  Total
hcat ::AbstractVectors |   11     11
Test Summary:  | Pass  Total
hcat: copycols |   76     76
Test Summary: | Pass  Total
vcat          |   21     21
Test Summary: | Pass  Total
vcat copy     |    2      2
Test Summary: | Pass  Total
vcat >2 args  |    4      4
Test Summary:       | Pass  Total
vcat mixed coltypes |   18     18
Test Summary:     | Pass  Total
vcat out of order |   19     19
Test Summary:         | Pass  Total
vcat with cols=:union |    6      6
Test Summary:             | Pass  Total
vcat with cols=:intersect |    6      6
Test Summary:          | Pass  Total
vcat with cols::Vector |   30     30
Test Summary:          | Pass  Total
vcat thrown exceptions |   32     32
Test Summary:  | Pass  Total
vcat with view |    1      1
	[1m[32mPASSED[0m: cat.jl
Test Summary: | Pass  Total
constructors  |   40     40
Test Summary:                 | Pass  Total
completecases and dropmissing |  236    236
Test Summary: | Pass  Total
merge         |   17     17
Test Summary: | Pass  Total
join tests    |    3      3
Test Summary:                                     | Pass  Total
nonunique, nonunique, unique! with extra argument |   41     41
Test Summary:          | Pass  Total
filter() and filter!() |   44     44
Test Summary:                   | Pass  Total
filter and filter! with AsTable |    8      8
Test Summary:   | Pass  Total
names with cols |   20     20
	[1m[32mPASSED[0m: data.jl
Test Summary:  | Pass  Total
Index indexing |   56     56
Test Summary: | Pass  Total
rename!       |   19     19
Test Summary: | Pass  Total
SubIndex      |   74     74
Test Summary:     | Pass  Total
selector mutation |   16     16
Test Summary:  | Pass  Total
fuzzy matching |   12     12
Test Summary:  | Pass  Total
Regex indexing |   46     46
Test Summary: | Pass  Total
Not indexing  |   36     36
Test Summary:    | Pass  Total
Between indexing |   36     36
Test Summary: | Pass  Total
All indexing  |   41     41
Test Summary: | Pass  Total
views         |   11     11
	[1m[32mPASSED[0m: index.jl
Test Summary:                |  Pass  Total
randomized tests for rename! | 14295  14295
Test Summary:            | Pass  Total
additional rename! tests | 6620   6620
Test Summary:              | Pass  Total
rename with integer source |   29     29
Test Summary: | Pass  Total
equality      |    9      9
Test Summary: | Pass  Total
copying       |    9      9
Test Summary:      | Pass  Total
similar / missings |    2      2
Test Summary: | Pass  Total
hasproperty   |    5      5
┌ Warning: inserting colums using a keyword argument is deprecated, use `insertcols!(df, col_ind, :a => 1, makeunique=false)` instead. 
│   caller = ip:0x0
└ @ Core :-1
Test Summary: | Pass  Total
insertcols!   |   87     87
Test Summary:          | Pass  Total
DataFrame constructors |   19     19
Test Summary:  | Pass  Total
push!(df, row) |   69     69
Test Summary: | Pass  Total
delete!       |   44     44
Test Summary: | Pass  Total
describe      |   10     10
Test Summary: | Pass  Total
append!       |   35     35
Test Summary:           | Pass  Total
append! default options |   11     11
Test Summary:            | Pass  Total
append! advanced options |  174    174
Test Summary:     | Pass  Total
test categorical! |   14     14
Test Summary: | Pass  Total
categorical!  |   11     11
Test Summary: | Pass  Total
rename        |   47     47
Test Summary:             | Pass  Total
flexible rename arguments |   30     30
Test Summary: | Pass  Total
size          |    5      5
Test Summary: | Pass  Total
description   |    8      8
Test Summary:      | Pass  Total
column conversions |  172    172
Test Summary:        | Pass  Total
test disallowmissing |  730    730
Test Summary:     | Pass  Total
test allowmissing |  360    360
Test Summary:    | Pass  Total
test categorical |  496    496
Test Summary: | Pass  Total
similar       |    8      8
Test Summary:                | Pass  Total
passing range to a DataFrame |    1      1
Test Summary:                | Pass  Total
test getindex using ! syntax |   15     15
Test Summary:                | Pass  Total
test corner case of getindex |    2      2
Test Summary:             | Pass  Total
empty data frame getindex |    9      9
Test Summary:               | Pass  Total
handling of end in indexing |   22     22
Test Summary:        | Pass  Total
aliasing in indexing |    5      5
Test Summary:                               | Pass  Total
getproperty, setproperty! and propertynames |   10     10
Test Summary:          | Pass  Total
duplicate column names |    1      1
Test Summary:         | Pass  Total
parent, size and axes |   11     11
Test Summary:                | Pass  Total
0-row DataFrame corner cases |    4      4
Test Summary:         |
And and Between tests | No tests
Test Summary:                   | Pass  Total
vcat and push! with :orderequal |   14     14
Test Summary:      | Pass  Total
push! with :subset |   18     18
Test Summary:         | Pass  Total
push! with :intersect |   12     12
Test Summary:              | Pass  Total
push!(df, row) with :union |   56     56
Test Summary:                       | Pass  Total
push!(df, row) with promote options |   22     22
	[1m[32mPASSED[0m: dataframe.jl
Test Summary: | Pass  Total
select! Not   |   13     13
Test Summary: | Pass  Total
select Not    |   58     58
Test Summary:              | Pass  Total
select Not on SubDataFrame |   70     70
Test Summary: | Pass  Total
select!       |   35     35
Test Summary: | Pass  Total
select        |   66     66
Test Summary:          | Pass  Total
select on SubDataFrame |   78     78
Test Summary:          | Pass  Total
select! on all columns |   21     21
Test Summary:                                     | Pass  Total
select and select! with multiple selectors passed |   11     11
Test Summary:               | Pass  Total
select and select! renaming |   23     23
Test Summary:                          | Pass  Total
select and select! many columns naming |   24     24
Test Summary:                                | Pass  Total
select and select! many different transforms |   25     25
Test Summary:  | Pass  Total
nrow in select |   24     24
Test Summary:                             | Pass  Total
select and select! reserved return values |   28     28
Test Summary:                      | Pass  Total
select and select! empty selection |   16     16
Test Summary:            | Pass  Total
wrong selection patterns |    4      4
Test Summary:                 | Pass  Total
select and select! duplicates |   15     15
Test Summary:          | Pass  Total
SubDataFrame selection |   17     17
Test Summary:       | Pass  Total
pseudo-broadcasting |  152    152
Test Summary:          | Pass  Total
copycols special cases |   11     11
Test Summary: | Pass  Total
empty select  |    5      5
Test Summary:            | Pass  Total
transform and transform! |   30     30
Test Summary:    | Pass  Total
vectors of pairs |   18     18
Test Summary: | Pass  Total
AsTable tests |   14     14
Test Summary:                      | Pass  Total
make sure select! is safe on error |    3      3
Test Summary:             | Pass  Total
combine AbstractDataFrame |   20     20
Test Summary:                          | Pass  Total
select and transform AbstractDataFrame |   29     29
Test Summary:                            | Pass  Total
select! and transform! AbstractDataFrame |   12     12
	[1m[32mPASSED[0m: select.jl
Test Summary:         | Pass  Total
the output of unstack |   27     27
Test Summary:                               | Pass  Total
unstack promotion to support missing values |    8      8
Test Summary:                         | Pass  Total
duplicate entries in unstack warnings |    9      9
Test Summary:            | Pass  Total
missing values in colkey |    6      6
Test Summary:             | Pass  Total
stack-unstack correctness |    4      4
Test Summary: | Pass  Total
reshape       |   78     78
Test Summary:           | Pass  Total
column names duplicates |    5      5
Test Summary:         | Pass  Total
flatten single column |   13     13
Test Summary:            | Pass  Total
flatten multiple columns |   12     12
Test Summary:                       | Pass  Total
test RepeatedVector for categorical |    6      6
Test Summary:          | Pass  Total
stack categorical test |   31     31
Test Summary:     | Pass  Total
test stack eltype |    8      8
	[1m[32mPASSED[0m: reshape.jl
Test Summary: | Pass  Total
constructors  |   28     28
Test Summary:          | Pass  Total
getindex and setindex! |   53     53
Test Summary: | Pass  Total
equality      |   17     17
Test Summary: | Pass  Total
isless        |   13     13
Test Summary: | Pass  Total
hashing       |    6      6
Test Summary: | Pass  Total
grouping      |    6      6
Test Summary:                               | Pass  Total
getproperty, setproperty! and propertynames |    6      6
Test Summary:                    | Pass  Total
keys, values and iteration, size |   31     31
Test Summary:           | Pass  Total
convert, copy and merge |   24     24
Test Summary:            | Pass  Total
parent and parentindices |   34     34
Test Summary:         | Pass  Total
iteration and collect |   10     10
Test Summary:    | Pass  Total
duplicate column |    2      2
Test Summary:        | Pass  Total
conversion and push! |   15     15
Test Summary: | Pass  Total
show          |   11     11
Test Summary:     | Pass  Total
check Vector type |    1      1
Test Summary: | Pass  Total
DataFrameRow  |    2      2
	[1m[32mPASSED[0m: dataframerow.jl
Test Summary: | Pass  Total
LaTeX export  |    4      4
Test Summary:     | Pass  Total
Huge LaTeX export |    2      2
Test Summary: | Pass  Total
HTML output   |   10     10
Test Summary:   | Pass  Total
limit attribute |    2      2
Test Summary: | Pass  Total
printtable    |    1      1
Test Summary:  | Pass  Total
csv/tsv output |    6      6
Test Summary:                     | Pass  Total
empty data frame and DataFrameRow |   12     12
Test Summary: | Pass  Total
consistency   |    8      8
Test Summary: | Pass  Total
summary tests |   16     16
Test Summary: | Pass  Total
eltypes tests |   18     18
Test Summary:                      | Pass  Total
improved printing of special types |    8      8
	[1m[32mPASSED[0m: io.jl
Test Summary: | Pass  Total
constructors  |   72     72
Test Summary:                          | Pass  Total
DataFrame keyword argument constructor |   22     22
Test Summary:         | Pass  Total
DataFrame constructor |   21     21
Test Summary:    | Pass  Total
pair constructor |   22     22
Test Summary: | Pass  Total
associative   |   18     18
Test Summary:       | Pass  Total
vector constructors |   91     91
Test Summary: | Pass  Total
recyclers     |    4      4
Test Summary:                 | Pass  Total
constructor thrown exceptions |   17     17
Test Summary: | Pass  Total
column types  |    3      3
Test Summary:      | Pass  Total
Matrix constructor |    4      4
Test Summary:          | Pass  Total
constructor with types |   33     33
Test Summary:                             | Pass  Total
expansion of Ref and 0-dimensional arrays |    2      2
Test Summary:            | Pass  Total
broadcasting into 0 rows |    6      6
	[1m[32mPASSED[0m: constructors.jl
Test Summary:    | Pass  Total
Conversion tests |   72     72
	[1m[32mPASSED[0m: conversions.jl
Test Summary:  | Pass  Total
standard tests |  189    189
Test Summary:          | Pass  Total
non standard selectors |    4      4
	[1m[32mPASSED[0m: sort.jl
Test Summary: | Pass  Total
parent        |    3      3
Test Summary: | Pass  Total
consistency   |    2      2
Test Summary:    | Pass  Total
accepted columns |    8      8
Test Summary:                                       | Pass  Total
groupby and combine(::Function, ::GroupedDataFrame) | 1160   1160
Test Summary:          | Pass  Total
grouping with missings | 1372   1372
Test Summary:            | Pass  Total
grouping with three keys | 2906   2906
Test Summary:                 | Pass  Total
grouping with hash collisions |    2      2
Test Summary:               | Pass  Total
combine with pair interface |  141    141
Test Summary:                                                                     | Pass  Total
combine with aggregation functions (skipmissing=false, sort=false, indices=false) |  370    370
Test Summary:                                                                    | Pass  Total
combine with aggregation functions (skipmissing=false, sort=false, indices=true) |  471    471
Test Summary:                                                                    | Pass  Total
combine with aggregation functions (skipmissing=false, sort=true, indices=false) |  370    370
Test Summary:                                                                   | Pass  Total
combine with aggregation functions (skipmissing=false, sort=true, indices=true) |  471    471
Test Summary:                                                                    | Pass  Total
combine with aggregation functions (skipmissing=true, sort=false, indices=false) |  370    370
Test Summary:                                                                   | Pass  Total
combine with aggregation functions (skipmissing=true, sort=false, indices=true) |  471    471
Test Summary:                                                                   | Pass  Total
combine with aggregation functions (skipmissing=true, sort=true, indices=false) |  370    370
Test Summary:                                                                  | Pass  Total
combine with aggregation functions (skipmissing=true, sort=true, indices=true) |  471    471
Test Summary:                                 | Pass  Total
combine with columns named like grouping keys |   17     17
Test Summary:      | Pass  Total
iteration protocol |    4      4
Test Summary:                  | Pass  Total
type stability of index fields |    1      1
Test Summary:       | Pass  Total
Array-like getindex |   39     39
Test Summary:  | Pass  Total
== and isequal |   19     19
Test Summary: | Pass  Total
show          |   15     15
Test Summary: | Pass  Total
DataFrame     |   24     24
Test Summary:                          | Pass  Total
groupindices, groupcols, and valuecols |   28     28
Test Summary:               | Pass  Total
non standard cols arguments |   34     34
Test Summary:                         | Pass  Total
GroupedDataFrame dictionary interface |   35     35
Test Summary:          | Pass  Total
GroupKey and GroupKeys |  149    149
Test Summary:                                | Pass  Total
GroupedDataFrame indexing with array of keys |  240    240
Test Summary:                       | Pass  Total
InvertedIndex with GroupedDataFrame |   33     33
Test Summary:                            | Pass  Total
GroupedDataFrame array index homogeneity |   49     49
Test Summary:                  | Pass  Total
Parent DataFrame names changed |   18     18
Test Summary:       | Pass  Total
haskey for GroupKey |   26     26
Test Summary:                     | Pass  Total
Check aggregation of DataFrameRow |    4      4
Test Summary:                                             | Pass  Total
Allow returning DataFrame() or NamedTuple() to drop group | 3026   3026
Test Summary:                              | Pass  Total
auto-splatting, ByRow, and column renaming |    9      9
Test Summary:                   | Pass  Total
hard tabular return value cases |   26     26
Test Summary:                                   | Pass  Total
last Pair interface with multiple return values |    8      8
Test Summary: | Pass  Total
keepkeys      |    3      3
Test Summary:            | Pass  Total
additional do_call tests |   13     13
Test Summary:                                              | Pass  Total
mixing of different return lengths and pseudo-broadcasting |  101    101
Test Summary:   | Pass  Total
passing columns |   27     27
Test Summary:              | Pass  Total
correct dropping of groups |   10     10
Test Summary: | Pass  Total
AsTable tests |   14     14
Test Summary:                  | Pass  Total
test correctness of ungrouping |    5      5
Test Summary:            | Pass  Total
combine GroupedDataFrame |  138    138
Test Summary:                         | Pass  Total
select and transform GroupedDataFrame |  316    316
Test Summary:                           | Pass  Total
select! and transform! GroupedDataFrame |  144    144
	[1m[32mPASSED[0m: grouping.jl
Test Summary: | Pass  Total
join types    |   17     17
Test Summary:       | Pass  Total
Test empty inputs 1 |   21     21
Test Summary:       | Pass  Total
Test empty inputs 2 |   21     21
Test Summary: | Pass  Total
issue #960    |    4      4
Test Summary: | Pass  Total
all joins     |   30     30
Test Summary:                    | Pass  Total
all joins with CategoricalArrays |   32     32
Test Summary:                                                     | Pass  Total
maintain CategoricalArray levels ordering on join - non-`on` cols |    6      6
Test Summary:                                                          | Pass  Total
maintain CategoricalArray levels ordering on join - ordering conflicts |   10     10
Test Summary:                                                           | Pass  Total
maintain CategoricalArray levels ordering on join - left is categorical |   10     10
Test Summary:                                   | Pass  Total
join on columns with different left/right names |   18     18
Test Summary:                  | Pass  Total
join with a column of type Any |   16     16
Test Summary:                                       | Pass  Total
joins with categorical columns and no matching rows |   24     24
Test Summary:     | Pass  Total
indicator columns |    4      4
Test Summary:                       | Pass  Total
test checks of merge key uniqueness |   18     18
Test Summary: | Pass  Total
consistency   |    3      3
Test Summary:         | Pass  Total
multi data frame join |   10     10
Test Summary:       | Pass  Total
flexible on in join |    4      4
	[1m[32mPASSED[0m: join.jl
Test Summary:       | Pass  Total
eachrow and eachcol |   34     34
Test Summary: | Pass  Total
mapcols       |    9      9
Test Summary: | Pass  Total
mapcols!      |    9      9
Test Summary: | Pass  Total
SubDataFrame  |    5      5
Test Summary:   | Pass  Total
parent mutation |    4      4
Test Summary:                 | Pass  Total
getproperty and propertynames |   22     22
Test Summary:             |
overload Compat functions | No tests
Test Summary:              | Pass  Total
keys and pairs for eachcol |   10     10
	[1m[32mPASSED[0m: iteration.jl
Test Summary: | Pass  Total
nonunique     |   18     18
	[1m[32mPASSED[0m: duplicates.jl
Test Summary:                            | Pass  Total
Basic show test with allrows and allcols |    9      9
Test Summary:    | Pass  Total
displaysize test |    4      4
Test Summary:             | Pass  Total
IOContext parameters test |    2      2
Test Summary:          | Pass  Total
SubDataFrame show test |    1      1
Test Summary:                                 | Pass  Total
Test showing StackedVector and RepeatedVector |    3      3
Test Summary:                                            | Pass  Total
Test colors and non-standard values: missing and nothing |    3      3
Test Summary:                  | Pass  Total
Test correct width computation |    1      1
Test Summary:              | Pass  Total
Test showing special types |    5      5
Test Summary:                              | Pass  Total
Test using :compact parameter of IOContext |    2      2
Test Summary:                              | Pass  Total
Test of DataFrameRows and DataFrameColumns |    4      4
Test Summary:                          | Pass  Total
Test empty data frame and DataFrameRow |    3      3
Test Summary: | Pass  Total
consistency   |    2      2
Test Summary:  | Pass  Total
wide type name |    6      6
Test Summary:  | Pass  Total
wide type name |    2      2
	[1m[32mPASSED[0m: show.jl
Test Summary:       | Pass  Total
copy - SubDataFrame |    5      5
Test Summary:     | Pass  Total
view -- DataFrame |   77     77
Test Summary:        | Pass  Total
view -- SubDataFrame |   62     62
Test Summary:                               | Pass  Total
getproperty, setproperty! and propertynames |    8      8
Test Summary: | Pass  Total
index         |   11     11
Test Summary: | Pass  Total
delete!       |    1      1
Test Summary: | Pass  Total
parent        |    6      6
Test Summary:    | Pass  Total
duplicate column |    1      1
Test Summary:           | Pass  Total
conversion to DataFrame |   12     12
Test Summary:     | Pass  Total
setindex! in view |    4      4
	[1m[32mPASSED[0m: subdataframe.jl
Test Summary: | Pass  Total
Tables        |   98     98
Test Summary: | Pass  Total
DataFrame!    |    9      9
Test Summary: | Pass  Total
columnindex   |    2      2
Test Summary:                   | Pass  Total
eachrow and eachcol integration |   29     29
	[1m[32mPASSED[0m: tables.jl
Test Summary: | Pass  Total
TableTraits   |   10     10
	[1m[32mPASSED[0m: tabletraits.jl
Test Summary:      | Pass  Total
getindex DataFrame |   87     87
Test Summary:       | Pass  Total
getindex df[!, col] |   13     13
Test Summary:  | Pass  Total
view DataFrame |  131    131
Test Summary:         | Pass  Total
getindex SubDataFrame |  140    140
Test Summary:     | Pass  Total
view SubDataFrame |  143    143
Test Summary:         | Pass  Total
getindex DataFrameRow |   22     22
Test Summary:     | Pass  Total
view DataFrameRow |   25     25
Test Summary:                             | Pass  Total
additional tests of post-! getindex rules |  230    230
Test Summary:          | Pass  Total
setindex! on DataFrame |  100    100
Test Summary:             | Pass  Total
setindex! on SubDataFrame |  240    240
Test Summary:             | Pass  Total
setindex! on DataFrameRow |  101    101
Test Summary:                           | Pass  Total
setindex! with ! or : and multiple cols |   24     24
Test Summary:              | Pass  Total
additional setindex! tests |    5      5
Test Summary:      | Pass  Total
invalid view tests |   28     28
Test Summary:   | Pass  Total
string indexing |  115    115
Test Summary:       | Pass  Total
begin and end tests |   18     18
	[1m[32mPASSED[0m: indexing.jl
Test Summary:  | Pass  Total
CartesianIndex |   24     24
Test Summary:                             | Pass  Total
broadcasting of AbstractDataFrame objects |   28     28
Test Summary:                                               | Pass  Total
broadcasting of AbstractDataFrame objects thrown exceptions |   10     10
Test Summary:          | Pass  Total
broadcasting expansion |    5      5
Test Summary:                                          | Pass  Total
broadcasting of AbstractDataFrame objects corner cases |   34     34
Test Summary:                                                               | Pass  Total
normal data frame and data frame row in broadcasted assignment - one column |  117    117
Test Summary:                                                                 | Pass  Total
normal data frame and data frame view in broadcasted assignment - two columns |  104    104
Test Summary:                                       | Pass  Total
assignment to a whole data frame and data frame row |    8      8
Test Summary:                                               | Pass  Total
extending data frame in broadcasted assignment - one column |   40     40
Test Summary:                | Pass  Total
empty data frame corner case |  191    191
Test Summary:           | Pass  Total
test categorical values |  126    126
Test Summary:       | Pass  Total
scalar broadcasting |    3      3
Test Summary:      | Pass  Total
tuple broadcasting |    8      8
Test Summary:             | Pass  Total
scalar on assignment side |    4      4
Test Summary: | Pass  Total
nothing test  |    4      4
Test Summary: | Pass  Total
aliasing test |  154    154
Test Summary: | Pass  Total
@. test       |    2      2
Test Summary:     | Pass  Total
test common cases |   11     11
Test Summary:                                             | Pass  Total
data frame only on left hand side broadcasting assignment |   26     26
Test Summary:                          | Pass  Total
broadcasting with 3-dimensional object |    4      4
Test Summary:                                  | Pass  Total
additional checks of post-! broadcasting rules |  168    168
Test Summary:                                   | Pass  Total
DataFrameRow getproperty broadcasted assignment |    8      8
Test Summary:                                | Pass  Total
make sure that : is in place and ! allocates |   10     10
Test Summary:                                            | Pass  Total
add new correct rules for df[row, col] .= v broadcasting |   12     12
Test Summary:                 | Pass  Total
broadcasting into df[!, cols] |  223    223
Test Summary:                          | Pass  Total
broadcasting over heterogenous columns |    1      1
Test Summary:        | Pass  Total
@views on df[!, col] |    3      3
Test Summary:                      | Pass  Total
broadcasting of df[:, col] = value |   12     12
	[1m[32mPASSED[0m: broadcasting.jl
Test Summary: | Pass  Total
iteration     |   12     12
Test Summary: | Pass  Total
joins         |   24     24
Test Summary: | Pass  Total
reshape       |    6      6
Test Summary: | Pass  Total
selection     |   13     13
Test Summary: | Pass  Total
tables        |    4      4
Test Summary:       | Pass  Total
split-apply-combine |   15     15
Test Summary: | Pass  Total
DataFrameRow  |   13     13
Test Summary:                        | Pass  Total
names, propertynames and hasproperty |   43     43
Test Summary:     | Pass  Total
append! and push! |    5      5
	[1m[32mPASSED[0m: string.jl
Test Summary:            | Pass  Total
deprecated tuple in sort |    5      5
Test Summary:           | Pass  Total
categorical constructor |    3      3
Test Summary:          | Pass  Total
DataFrame constructors |   42     42
Test Summary: | Pass  Total
colwise       |   29     29
Test Summary: | Pass  Total
empty!        |    5      5
Test Summary:              | Pass  Total
deletecols and deletecols! |    7      7
Test Summary: | Pass  Total
haskey        |    7      7
Test Summary:                                        | Pass  Total
df[col] and df[col] for getindex, view, and setindex |  132    132
Test Summary: | Pass  Total
eltypes       |    1      1
Test Summary: | Pass  Total
melt          |   22     22
Test Summary: | Pass  Total
insertcols!   |    1      1
Test Summary: | Pass  Total
join          |    3      3
Test Summary:     | Pass  Total
eachcol(df, true) |   44     44
Test Summary:         | Pass  Total
deprecated by/combine |    8      8
Test Summary:        | Pass  Total
deprecated aggregate |   23     23
Test Summary:          | Pass  Total
deprecated deleterows! |    1      1
Test Summary:           | Pass  Total
by skipmissing and sort |    4      4
Test Summary:            | Pass  Total
map skipmissing and sort |    8      8
	[1m[32mPASSED[0m: deprecated.jl
    Testing DataFrames tests passed 
    Testing Distances
Status `/tmp/jl_l5AsOm/Manifest.toml`
  [b4f34e82] Distances v0.8.2
  [2a0f44e3] Base64 
  [8ba89e20] Distributed 
  [b77e0a4c] InteractiveUtils 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [9a3f8284] Random 
  [9e88b42a] Serialization 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [8dfed614] Test 
Test Summary:                            | Pass  Total
PreMetric, SemiMetric, Metric on Float64 |  401    401
Test Summary:                        | Pass  Total
PreMetric, SemiMetric, Metric on F64 |  401    401
Test Summary:      | Pass  Total
individual metrics |  153    153
Test Summary: | Pass  Total
NaN behavior  |    3      3
Test Summary: | Pass  Total
empty vector  |   46     46
Test Summary:              | Pass  Total
DimensionMismatch throwing |   15     15
Test Summary:         | Pass  Total
Different input types |   52     52
Test Summary: | Pass  Total
mahalanobis   |    8      8
Test Summary: | Pass  Total
haversine     |   12     12
Test Summary:             | Pass  Total
bhattacharyya / hellinger |   20     20
Test Summary:                  | Pass  Total
column-wise metrics on Float64 |   93     93
Test Summary:              | Pass  Total
column-wise metrics on F64 |   93     93
┌ Warning: implicit `dims=2` argument now has to be passed explicitly to specify that distances between columns should be computed
│   caller = ip:0x0
└ @ Core :-1
Test Summary:               | Pass  Total
pairwise metrics on Float64 |  174    174
Test Summary:           | Pass  Total
pairwise metrics on F64 |  174    174
Test Summary:       | Pass  Total
Euclidean precision |    8      8
Test Summary:      | Pass  Total
Bregman Divergence |    4      4
    Testing Distances tests passed 
    Testing Distributions
Status `/tmp/jl_s7gr17/Manifest.toml`
  [7d9fca2a] Arpack v0.4.0
  [68821587] Arpack_jll v3.5.0+3
  [49dc2e85] Calculus v0.5.1
  [861a8166] Combinatorics v1.0.1
  [bbf7d656] CommonSubexpressions v0.2.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [9a962f9c] DataAPI v1.3.0
  [864edb3b] DataStructures v0.17.15
  [163ba53b] DiffResults v1.0.2
  [b552c78f] DiffRules v1.0.1
  [31c24e10] Distributions v0.23.2
  [e2ba6199] ExprTools v0.1.1
  [8f5d6c58] EzXML v1.1.0
  [1a297f60] FillArrays v0.8.9
  [26cc04aa] FiniteDifferences v0.10.0
  [f6369f11] ForwardDiff v0.10.10
  [09f84164] HypothesisTests v0.10.0
  [d8418881] Intervals v1.1.0
  [682c06a0] JSON v0.21.0
  [94ce4f54] Libiconv_jll v1.16.0+2
  [e1d29d7a] Missings v0.4.3
  [78c3b35d] Mocking v0.7.1
  [77ba4419] NaNMath v0.3.3
  [4536629a] OpenBLAS_jll v0.3.9+4
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [bac558e1] OrderedCollections v1.2.0
  [90014a1f] PDMats v0.9.12
  [69de0a69] Parsers v1.0.3
  [f27b6e38] Polynomials v0.8.0
  [1fd47b50] QuadGK v2.3.1
  [3cdcf5f2] RecipesBase v1.0.1
  [79098fc4] Rmath v0.6.1
  [f50d1b31] Rmath_jll v0.2.2+0
  [f2b01f46] Roots v1.0.1
  [a2af1166] SortingAlgorithms v0.3.1
  [276daf66] SpecialFunctions v0.10.0
  [90137ffa] StaticArrays v0.12.3
  [2913bbd2] StatsBase v0.33.0
  [4c63d2b9] StatsFuns v0.9.4
  [f269a46b] TimeZones v1.1.1
  [02c8fc9c] XML2_jll v2.9.9+4
  [83775a58] Zlib_jll v1.2.11+9
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8ba89e20] Distributed 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [4607b0f0] SuiteSparse 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
Running tests:
