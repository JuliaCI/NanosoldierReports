Julia Version 1.5.0-DEV.269
Commit 2538080e8c (2020-02-12 17:50 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed PooledArrays ──────────────── v0.5.3
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed LearnBase ─────────────────── v0.2.2
  Installed KCenters ──────────────────── v0.1.13
  Installed MLLabelUtils ──────────────── v0.5.1
  Installed StatsBase ─────────────────── v0.32.0
  Installed CategoricalArrays ─────────── v0.7.7
  Installed JSON ──────────────────────── v0.21.0
  Installed TableTraits ───────────────── v1.0.0
  Installed Compat ────────────────────── v3.5.0
  Installed DataValueInterfaces ───────── v1.0.0
  Installed Parsers ───────────────────── v0.3.11
  Installed OrderedCollections ────────── v1.1.0
  Installed MappedArrays ──────────────── v0.2.2
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed Tables ────────────────────── v1.0.0
  Installed Missings ──────────────────── v0.4.3
  Installed DataAPI ───────────────────── v1.1.0
  Installed Reexport ──────────────────── v0.2.0
  Installed DataStructures ────────────── v0.17.9
  Installed MLDataPattern ─────────────── v0.5.0
  Installed MLDataUtils ───────────────── v0.5.0
  Installed DataFrames ────────────────── v0.18.4
  Installed SimilaritySearch ──────────── v0.3.19
   Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.1.13
   Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.5.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.18.4
  [864edb3b] + DataStructures v0.17.9
  [e2d170a0] + DataValueInterfaces v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.1.13
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.0
  [cc2ba9b6] + MLDataUtils v0.5.0
  [66a33bbf] + MLLabelUtils v0.5.1
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.11
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.0
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.0
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
    Testing KCenters
Status `/tmp/jl_YimbRb/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.5.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.18.4
  [864edb3b] DataStructures v0.17.9
  [e2d170a0] DataValueInterfaces v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.1.13
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.0
  [cc2ba9b6] MLDataUtils v0.5.0
  [66a33bbf] MLLabelUtils v0.5.1
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v0.3.11
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.0
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.0
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0723782532413801
[ Info: 0.9326678744951884
[ Info: 0.8326150393486023
[ Info: 0.5556568817794323
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.3293835195153952
mean(cdnet.distances) = 0.3642230802277724
mean(crand.distances) = 0.33831199708084264
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.439453125, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.439453125,"f1":null,"seconds":4.578381776809692e-6,"exhaustive_search_seconds":1.8123537302017212e-6,"evaluations":7.203125,"distances_sum":1148.7899284068035}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.69140625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.69140625,"f1":0.8084467615717623,"seconds":5.50784170627594e-6,"exhaustive_search_seconds":1.8123537302017212e-6,"evaluations":8.375,"distances_sum":2012.0346252152679}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.779296875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.779296875,"f1":0.8668336871461879,"seconds":5.280598998069763e-6,"exhaustive_search_seconds":1.8123537302017212e-6,"evaluations":8.75,"distances_sum":2358.3793035807767}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.779296875,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.779296875,"f1":0.8668336871461879,"seconds":5.280598998069763e-6,"exhaustive_search_seconds":1.8123537302017212e-6,"evaluations":8.75,"distances_sum":2358.3793035807767}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9476991758241763,"seconds":6.67572021484375e-6,"exhaustive_search_seconds":1.8123537302017212e-6,"evaluations":8.9296875,"distances_sum":2921.2051066052386}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9401671245421253,"seconds":5.6438148021698e-6,"exhaustive_search_seconds":1.8123537302017212e-6,"evaluations":8.875,"distances_sum":2888.0656312829733}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9520146520146524,"seconds":5.967915058135986e-6,"exhaustive_search_seconds":1.8123537302017212e-6,"evaluations":8.9375,"distances_sum":2996.5093079526837}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9406739094239099,"seconds":6.018206477165222e-6,"exhaustive_search_seconds":1.8123537302017212e-6,"evaluations":8.875,"distances_sum":2893.1252883207962}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8447265625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8447265625,"f1":0.9090576090576098,"seconds":6.431713700294495e-6,"exhaustive_search_seconds":1.8123537302017212e-6,"evaluations":8.90625,"distances_sum":2624.082200275484}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.916015625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.9520146520146524,"seconds":5.967915058135986e-6,"exhaustive_search_seconds":1.8123537302017212e-6,"evaluations":8.9375,"distances_sum":2996.5093079526837}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.9375,"f1":0.965052655677656,"seconds":6.381422281265259e-6,"exhaustive_search_seconds":1.8123537302017212e-6,"evaluations":8.9375,"distances_sum":3091.228146214025}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9673592032967036,"seconds":5.995854735374451e-6,"exhaustive_search_seconds":1.8123537302017212e-6,"evaluations":8.96875,"distances_sum":3131.5968780972703}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9724530677655682,"seconds":6.470829248428345e-6,"exhaustive_search_seconds":1.8123537302017212e-6,"evaluations":8.984375,"distances_sum":3145.654385625753}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9766197344322346,"seconds":6.122514605522156e-6,"exhaustive_search_seconds":1.8123537302017212e-6,"evaluations":9.0,"distances_sum":3179.284400638924}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9542696886446892,"seconds":5.956739187240601e-6,"exhaustive_search_seconds":1.8123537302017212e-6,"evaluations":8.9765625,"distances_sum":2979.1800701387497}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.966277472527473,"seconds":6.357207894325256e-6,"exhaustive_search_seconds":1.8123537302017212e-6,"evaluations":8.9296875,"distances_sum":3097.4346268310655}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.95703125,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9766197344322346,"seconds":6.122514605522156e-6,"exhaustive_search_seconds":1.8123537302017212e-6,"evaluations":9.0,"distances_sum":3179.284400638924}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.95703125,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9766197344322346,"seconds":6.122514605522156e-6,"exhaustive_search_seconds":1.8123537302017212e-6,"evaluations":9.0,"distances_sum":3179.284400638924}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7890625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7890625,"f1":0.8742393023643034,"seconds":5.248934030532837e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.3046875,"distances_sum":2228.014695682584}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.55859375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.55859375,"f1":0.7012575965700971,"seconds":4.364177584648132e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":6.984375,"distances_sum":1416.4931304521533}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2236328125, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2236328125,"f1":null,"seconds":3.252178430557251e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":5.6796875,"distances_sum":586.6632426193755}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7890625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7890625,"f1":0.8742393023643034,"seconds":5.248934030532837e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.3046875,"distances_sum":2228.014695682584}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9632841117216121,"seconds":6.113201379776001e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.9140625,"distances_sum":2868.4714279817395}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9345703125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9345703125,"f1":0.9632841117216121,"seconds":6.113201379776001e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.9140625,"distances_sum":2868.4714279817395}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9716796875, conf: {"ssize":2,"bsize":13}, perf: {"precision":1.0,"recall":0.9716796875,"f1":0.9841918498168498,"seconds":6.411224603652954e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.9765625,"distances_sum":3034.9437371361078}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9677734375, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.9677734375,"f1":0.9822000915750919,"seconds":6.619840860366821e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.9375,"distances_sum":3024.7513034193976}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.966796875, conf: {"ssize":3,"bsize":13}, perf: {"precision":1.0,"recall":0.966796875,"f1":0.9818280677655683,"seconds":6.323680281639099e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.9453125,"distances_sum":3017.0441340641737}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":3,"bsize":12}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.9770833333333335,"seconds":0.00023254379630088806,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.9296875,"distances_sum":2975.805648129301}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9716796875,"state":{"ssize":2,"bsize":13},"perf":{"precision":1.0,"recall":0.9716796875,"f1":0.9841918498168498,"seconds":6.411224603652954e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.9765625,"distances_sum":3034.9437371361078}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9716796875,"state":{"ssize":2,"bsize":13},"perf":{"precision":1.0,"recall":0.9716796875,"f1":0.9841918498168498,"seconds":6.411224603652954e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.9765625,"distances_sum":3034.9437371361078}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5283203125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5283203125,"f1":0.6733532092907097,"seconds":3.8929283618927e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":6.6484375,"distances_sum":1405.2538965623482}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.669921875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.669921875,"f1":0.7896721334221343,"seconds":4.680827260017395e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.2109375,"distances_sum":1882.1473842290122}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.669921875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.669921875,"f1":0.7896721334221343,"seconds":4.680827260017395e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.2109375,"distances_sum":1882.1473842290122}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.783203125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.783203125,"f1":0.8714889277389288,"seconds":5.04031777381897e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.359375,"distances_sum":2323.093213635349}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8779296875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8779296875,"f1":0.9290693681318688,"seconds":5.317851901054382e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.6953125,"distances_sum":2712.2158020398033}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7724609375, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7724609375,"f1":0.8639969405594415,"seconds":4.841014742851257e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.3671875,"distances_sum":2271.6573055084627}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8779296875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8779296875,"f1":0.9290693681318688,"seconds":5.317851901054382e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.6953125,"distances_sum":2712.2158020398033}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9495993589743598,"seconds":5.379319190979004e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.78125,"distances_sum":2923.7273968407394}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9410084706959713,"seconds":5.5283308029174805e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.609375,"distances_sum":2862.6879318763704}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9506581959706965,"seconds":5.491077899932861e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.8359375,"distances_sum":2885.5421145529212}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9446714743589747,"seconds":5.457550287246704e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.6796875,"distances_sum":2874.856420476392}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.912109375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.912109375,"f1":0.9506581959706965,"seconds":5.491077899932861e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.8359375,"distances_sum":2885.5421145529212}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.912109375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.912109375,"f1":0.9506581959706965,"seconds":5.491077899932861e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.8359375,"distances_sum":2885.5421145529212}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6416015625, conf: {"ssize":2,"bsize":4}, perf: {"precision":0.976860119047619,"recall":0.6416015625,"f1":0.7640245171495177,"seconds":4.518777132034302e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":7.734375,"distances_sum":1386.2827042036338}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6220703125, conf: {"ssize":1,"bsize":4}, perf: {"precision":0.9826729910714286,"recall":0.6220703125,"f1":0.7522683696511827,"seconds":5.632638931274414e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":7.640625,"distances_sum":1325.0758544796943}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1865234375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.1865234375,"f1":null,"seconds":3.2410025596618652e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":6.1015625,"distances_sum":402.9111299241561}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6416015625,"state":{"ssize":2,"bsize":4},"perf":{"precision":0.976860119047619,"recall":0.6416015625,"f1":0.7640245171495177,"seconds":4.518777132034302e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":7.734375,"distances_sum":1386.2827042036338}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7568359375, conf: {"ssize":6,"bsize":5}, perf: {"precision":0.9801339285714286,"recall":0.7568359375,"f1":0.847174700299701,"seconds":5.120411515235901e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.140625,"distances_sum":1710.6482247806266}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8408203125, conf: {"ssize":1,"bsize":6}, perf: {"precision":0.9843284970238096,"recall":0.8408203125,"f1":0.9006405703671336,"seconds":5.273148417472839e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.4140625,"distances_sum":2004.6591513174706}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":1,"bsize":8}, perf: {"precision":0.9848121279761904,"recall":0.91015625,"f1":0.9430080986721617,"seconds":5.455687642097473e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.8203125,"distances_sum":2303.8952348885077}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":3,"bsize":7}, perf: {"precision":0.989164806547619,"recall":0.8876953125,"f1":0.9310775812728942,"seconds":5.3513795137405396e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.5546875,"distances_sum":2191.6525425749915}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8701171875, conf: {"ssize":1,"bsize":7}, perf: {"precision":0.984468005952381,"recall":0.8701171875,"f1":0.9180677395521153,"seconds":5.29363751411438e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.5234375,"distances_sum":2128.389841011184}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91015625,"state":{"ssize":1,"bsize":8},"perf":{"precision":0.9848121279761904,"recall":0.91015625,"f1":0.9430080986721617,"seconds":5.455687642097473e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.8203125,"distances_sum":2303.8952348885077}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":1,"bsize":10}, perf: {"precision":0.9885137648809523,"recall":0.9423828125,"f1":0.9629385588369966,"seconds":5.89713454246521e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.90625,"distances_sum":2419.384872981073}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":1,"bsize":11}, perf: {"precision":0.9846540178571429,"recall":0.9306640625,"f1":0.9547433035714288,"seconds":5.811452865600586e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.90625,"distances_sum":2375.812631818675}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":2,"bsize":8}, perf: {"precision":0.9878069196428572,"recall":0.916015625,"f1":0.9473879635989015,"seconds":6.206333637237549e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.8046875,"distances_sum":2296.6657029706453}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9423828125,"state":{"ssize":1,"bsize":10},"perf":{"precision":0.9885137648809523,"recall":0.9423828125,"f1":0.9629385588369966,"seconds":5.89713454246521e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.90625,"distances_sum":2419.384872981073}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9423828125,"state":{"ssize":1,"bsize":10},"perf":{"precision":0.9885137648809523,"recall":0.9423828125,"f1":0.9629385588369966,"seconds":5.89713454246521e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.90625,"distances_sum":2419.384872981073}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.208984375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.208984375,"f1":null,"seconds":2.993270754814148e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":5.1796875,"distances_sum":408.42638067774044}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4931640625, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.4931640625,"f1":0.6483877233877239,"seconds":3.9711594581604e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":6.765625,"distances_sum":1012.8416914070887}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4931640625,"state":{"ssize":4,"bsize":3},"perf":{"precision":1.0,"recall":0.4931640625,"f1":0.6483877233877239,"seconds":3.9711594581604e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":6.765625,"distances_sum":1012.8416914070887}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7802734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7802734375,"f1":0.8634084665334674,"seconds":5.0943344831466675e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.0546875,"distances_sum":1639.2427169010646}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8515625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8515625,"f1":0.9123168498168505,"seconds":5.548819899559021e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.2890625,"distances_sum":1928.955039524673}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6943359375, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6943359375,"f1":0.8095019563769572,"seconds":4.887580871582031e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":7.984375,"distances_sum":1410.2912590930034}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8095703125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.8095703125,"f1":0.8879214535464542,"seconds":5.0477683544158936e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.21875,"distances_sum":1719.7755797372465}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8515625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8515625,"f1":0.9123168498168505,"seconds":5.548819899559021e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.2890625,"distances_sum":1928.955039524673}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9414720695970704,"seconds":5.969777703285217e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.6484375,"distances_sum":2067.7592140102765}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.935019147519148,"seconds":5.634501576423645e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.4140625,"distances_sum":2049.9006264167847}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.896484375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.896484375,"f1":0.9414720695970704,"seconds":5.969777703285217e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.6484375,"distances_sum":2067.7592140102765}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.896484375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.896484375,"f1":0.9414720695970704,"seconds":5.969777703285217e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.6484375,"distances_sum":2067.7592140102765}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76953125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.76953125,"f1":0.8602969946719955,"seconds":5.302950739860535e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.0546875,"distances_sum":1601.4902298635948}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.66796875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.66796875,"f1":0.7886648074148082,"seconds":4.932284355163574e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":7.625,"distances_sum":1353.0078452434489}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.76953125,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.76953125,"f1":0.8602969946719955,"seconds":5.302950739860535e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.0546875,"distances_sum":1601.4902298635948}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9390167124542131,"seconds":6.1318278312683105e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.7265625,"distances_sum":2026.3613464793043}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8681640625, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.8681640625,"f1":0.9230030386280395,"seconds":5.8319419622421265e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.53125,"distances_sum":1915.9932677869185}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7890625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7890625,"f1":0.8718385780885789,"seconds":5.627050995826721e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.140625,"distances_sum":1656.8343623125543}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9411343864468867,"seconds":5.966052412986755e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.6875,"distances_sum":2059.2256562428906}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8984375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.8984375,"f1":0.9411343864468867,"seconds":5.966052412986755e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.6875,"distances_sum":2059.2256562428906}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9615530303030306,"seconds":6.0051679611206055e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.8046875,"distances_sum":2154.493606014445}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9590258699633707,"seconds":6.01448118686676e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.8203125,"distances_sum":2139.648577599197}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9672275641025647,"seconds":6.427988409996033e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.875,"distances_sum":2177.2125727436237}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":8,"bsize":10}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9593463827838833,"seconds":6.288290023803711e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.828125,"distances_sum":2132.342206077872}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9663347069597075,"seconds":6.185844540596008e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.8515625,"distances_sum":2177.580102366103}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9466632326007333,"seconds":6.139278411865234e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.7578125,"distances_sum":2048.9870285495685}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9404296875,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9672275641025647,"seconds":6.427988409996033e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.875,"distances_sum":2177.2125727436237}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9404296875,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9672275641025647,"seconds":6.427988409996033e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.875,"distances_sum":2177.2125727436237}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3701171875, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.3701171875,"f1":null,"seconds":4.000961780548096e-6,"exhaustive_search_seconds":1.6782432794570923e-6,"evaluations":6.1796875,"distances_sum":698.245225112634}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.552734375, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.552734375,"f1":null,"seconds":4.505738615989685e-6,"exhaustive_search_seconds":1.6782432794570923e-6,"evaluations":7.15625,"distances_sum":1115.573552592988}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.552734375,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.552734375,"f1":null,"seconds":4.505738615989685e-6,"exhaustive_search_seconds":1.6782432794570923e-6,"evaluations":7.15625,"distances_sum":1115.573552592988}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.78125,"f1":0.868047057109558,"seconds":5.533918738365173e-6,"exhaustive_search_seconds":1.6782432794570923e-6,"evaluations":8.1171875,"distances_sum":1724.545070380913}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.791015625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.791015625,"f1":0.8737101440226449,"seconds":5.4854899644851685e-6,"exhaustive_search_seconds":1.6782432794570923e-6,"evaluations":8.203125,"distances_sum":1727.414636043484}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7998046875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7998046875,"f1":0.8783175158175167,"seconds":5.494803190231323e-6,"exhaustive_search_seconds":1.6782432794570923e-6,"evaluations":8.15625,"distances_sum":1791.9795155992376}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7998046875,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7998046875,"f1":0.8783175158175167,"seconds":5.494803190231323e-6,"exhaustive_search_seconds":1.6782432794570923e-6,"evaluations":8.15625,"distances_sum":1791.9795155992376}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.941300366300367,"seconds":0.00010394491255283356,"exhaustive_search_seconds":1.6782432794570923e-6,"evaluations":8.4921875,"distances_sum":2085.720109741835}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9465633325008329,"seconds":5.433335900306702e-6,"exhaustive_search_seconds":1.6782432794570923e-6,"evaluations":8.7265625,"distances_sum":2134.1225402027335}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9486492673992677,"seconds":5.591660737991333e-6,"exhaustive_search_seconds":1.6782432794570923e-6,"evaluations":8.640625,"distances_sum":2116.6908815532856}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.932131410256411,"seconds":5.295500159263611e-6,"exhaustive_search_seconds":1.6782432794570923e-6,"evaluations":8.3671875,"distances_sum":2020.3775035481208}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9091796875,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.9091796875,"f1":0.9486492673992677,"seconds":5.591660737991333e-6,"exhaustive_search_seconds":1.6782432794570923e-6,"evaluations":8.640625,"distances_sum":2116.6908815532856}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9091796875,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.9091796875,"f1":0.9486492673992677,"seconds":5.591660737991333e-6,"exhaustive_search_seconds":1.6782432794570923e-6,"evaluations":8.640625,"distances_sum":2116.6908815532856}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.625,"f1":0.7524668040293047,"seconds":4.265457391738892e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":7.34375,"distances_sum":1364.963292101652}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1904296875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.1904296875,"f1":null,"seconds":2.5797635316848755e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":4.8671875,"distances_sum":439.0776213041866}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.625,"f1":0.7524668040293047,"seconds":4.265457391738892e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":7.34375,"distances_sum":1364.963292101652}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7509765625, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7509765625,"f1":0.8465726981351989,"seconds":4.623085260391235e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":7.9296875,"distances_sum":1660.272760602225}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7509765625,"state":{"ssize":6,"bsize":5},"perf":{"precision":1.0,"recall":0.7509765625,"f1":0.8465726981351989,"seconds":4.623085260391235e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":7.9296875,"distances_sum":1660.272760602225}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9517342032967036,"seconds":5.8785080909729e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.703125,"distances_sum":2194.8135774685165}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8349609375, conf: {"ssize":9,"bsize":6}, perf: {"precision":1.0,"recall":0.8349609375,"f1":0.9017175532800539,"seconds":5.085021257400513e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.1875,"distances_sum":1933.179747025906}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9399642024642032,"seconds":5.424022674560547e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.625,"distances_sum":2140.470257986932}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84765625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.84765625,"f1":0.9096361971361978,"seconds":5.0943344831466675e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.28125,"distances_sum":1947.471336015359}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8564453125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8564453125,"f1":0.9164954836829845,"seconds":5.107372999191284e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.4375,"distances_sum":1999.9186284933057}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9140625,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.9517342032967036,"seconds":5.8785080909729e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.703125,"distances_sum":2194.8135774685165}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9140625,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.9517342032967036,"seconds":5.8785080909729e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.703125,"distances_sum":2194.8135774685165}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2041015625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2041015625,"f1":null,"seconds":2.644956111907959e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":5.2578125,"distances_sum":376.3043047317126}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.205078125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.205078125,"f1":null,"seconds":2.7604401111602783e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":5.34375,"distances_sum":357.0158314659518}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.373046875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.373046875,"f1":null,"seconds":3.244727849960327e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":5.8203125,"distances_sum":714.039400889299}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.373046875,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.373046875,"f1":null,"seconds":3.244727849960327e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":5.8203125,"distances_sum":714.039400889299}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5517578125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5517578125,"f1":0.6948515026640033,"seconds":3.6675482988357544e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":6.65625,"distances_sum":1042.738103531623}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.671875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.671875,"f1":0.790934933122434,"seconds":4.287809133529663e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":7.578125,"distances_sum":1276.9913977944923}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.380859375, conf: {"ssize":3,"bsize":2}, perf: {"precision":1.0,"recall":0.380859375,"f1":0.5335074647574646,"seconds":3.116205334663391e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":5.890625,"distances_sum":727.6253637057877}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.544921875, conf: {"ssize":2,"bsize":3}, perf: {"precision":null,"recall":0.544921875,"f1":null,"seconds":3.5837292671203613e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":6.59375,"distances_sum":1015.536912388041}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.671875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.671875,"f1":0.790934933122434,"seconds":4.287809133529663e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":7.578125,"distances_sum":1276.9913977944923}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.830078125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.830078125,"f1":0.8994828088578095,"seconds":5.155801773071289e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.1640625,"distances_sum":1759.6417475802684}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.75,"f1":0.8448468198468209,"seconds":4.841014742851257e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":7.8828125,"distances_sum":1488.187848360952}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6767578125, conf: {"ssize":7,"bsize":4}, perf: {"precision":1.0,"recall":0.6767578125,"f1":0.7950835622710629,"seconds":4.4889748096466064e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":7.5546875,"distances_sum":1357.0756084861348}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.830078125,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.830078125,"f1":0.8994828088578095,"seconds":5.155801773071289e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.1640625,"distances_sum":1759.6417475802684}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.830078125,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.830078125,"f1":0.8994828088578095,"seconds":5.155801773071289e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.1640625,"distances_sum":1759.6417475802684}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.392578125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.392578125,"f1":null,"seconds":3.471970558166504e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":6.078125,"distances_sum":788.9117670910263}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7353515625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7353515625,"f1":0.8384516525141533,"seconds":4.881992936134338e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.453125,"distances_sum":1523.961685978399}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7353515625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7353515625,"f1":0.8384516525141533,"seconds":4.881992936134338e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.453125,"distances_sum":1523.961685978399}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7529296875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7529296875,"f1":0.8489703005328013,"seconds":4.822388291358948e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.4453125,"distances_sum":1605.3404700657425}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7529296875,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7529296875,"f1":0.8489703005328013,"seconds":4.822388291358948e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.4453125,"distances_sum":1605.3404700657425}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.9271207958707965,"seconds":5.2228569984436035e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.7890625,"distances_sum":1940.634592149425}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9536916208791215,"seconds":5.407258868217468e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.8125,"distances_sum":2126.8355068732767}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9636733058608064,"seconds":5.362555384635925e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.8984375,"distances_sum":2159.0035714141345}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9358604936729942,"seconds":5.276873707771301e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.7421875,"distances_sum":2002.8510381357523}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9345703125,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.9345703125,"f1":0.9636733058608064,"seconds":5.362555384635925e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.8984375,"distances_sum":2159.0035714141345}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9345703125,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.9345703125,"f1":0.9636733058608064,"seconds":5.362555384635925e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.8984375,"distances_sum":2159.0035714141345}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2734375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2734375,"f1":null,"seconds":2.8759241104125977e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":5.609375,"distances_sum":512.0384454951527}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2734375,"state":{"ssize":3,"bsize":1},"perf":{"precision":null,"recall":0.2734375,"f1":null,"seconds":2.8759241104125977e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":5.609375,"distances_sum":512.0384454951527}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2734375,"state":{"ssize":3,"bsize":1},"perf":{"precision":null,"recall":0.2734375,"f1":null,"seconds":2.8759241104125977e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":5.609375,"distances_sum":512.0384454951527}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.2734375,"state":{"ssize":3,"bsize":1},"perf":{"precision":null,"recall":0.2734375,"f1":null,"seconds":2.8759241104125977e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":5.609375,"distances_sum":512.0384454951527}}, n: 9
mean(cfft.distances) = 0.34892083534825213
mean(cdnet.distances) = 0.4414361818910757
mean(crand.distances) = 0.5852153021741302
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8933333333333332
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8911111111111111
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.9022222222222221
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.9022222222222221
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8755555555555556
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.851111111111111
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.9022222222222221
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9222222222222222
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9422222222222222
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.8866666666666667
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.9044444444444445
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8888888888888888
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8844444444444445
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8911111111111111
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9355555555555556
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9466666666666667
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9266666666666666
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9199999999999999
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9288888888888889
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8377777777777778
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8733333333333334
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8844444444444445
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8533333333333332
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.8933333333333332
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9422222222222222
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8977777777777778
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9044444444444443
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.8844444444444445
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8822222222222221
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.9044444444444445
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9044444444444445
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8444444444444444
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.8488888888888888
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.8999999999999999
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX===== rocchio like>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX==== clustering>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
nc.class_map = [3, 1, 3, 2, 1, 3, 2, 3, 3, 1, 2, 3, 2, 3, 3, 3, 3, 2, 1, 2, 3]
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 2, 11]]
** centroid: 5, normalized-entropy: 0.6193821946787638, [(2, 2), (3, 11)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
*** center 9: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 9, 1]]
** centroid: 10, normalized-entropy: 0.46899559358928133, [(2, 9), (3, 1)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 11]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 15, 1]]
** centroid: 12, normalized-entropy: 0.3372900666170139, [(2, 15), (3, 1)]
finished with 13 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 2, 3, 2, 3, 3, 1, 2, 3, 2]
acc = 0.9733333333333334
*** finished computation of 12 references, err: [Inf, 0.5576255004604658] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 1, 22]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(2, 1), (3, 22)]
*** center 2: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 5: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 12, 6]]
** centroid: 6, normalized-entropy: 0.9182958340544894, [(2, 12), (3, 6)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 2]]
** centroid: 8, normalized-entropy: 0.9709505944546688, [(2, 3), (3, 2)]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 13]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 12: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
finished with 14 centroids; started with 12
acc = 0.9666666666666667
Test Summary:   | Pass  Total
NearestCentroid |   10     10
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.4695347436219901] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4695347436219901, 0.33571196267487585] ***
*** starting iteration: 2; err: [Inf, 0.4695347436219901, 0.33571196267487585] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4695347436219901, 0.33571196267487585, 0.2996101567728652] ***
*** starting iteration: 3; err: [Inf, 0.4695347436219901, 0.33571196267487585, 0.2996101567728652] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4695347436219901, 0.33571196267487585, 0.2996101567728652, 0.2927511253480886] ***
*** finished computation of 3 references, err: [Inf, 0.4695347436219901, 0.33571196267487585, 0.2996101567728652, 0.2927511253480886] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [81, 166, 19]]
** centroid: 1, normalized-entropy: 0.7689992644168578, [(1, 81), (2, 166), (3, 19)]
*** center 2: selecting labels [1] (freq >= 2) [from [194, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [113, 93, 0]]
** centroid: 3, normalized-entropy: 0.9931898855037856, [(1, 113), (2, 93)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.23522035808752742] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23522035808752742, 0.19584981664629267] ***
*** starting iteration: 2; err: [Inf, 0.23522035808752742, 0.19584981664629267] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23522035808752742, 0.19584981664629267, 0.18810797202772833] ***
*** starting iteration: 3; err: [Inf, 0.23522035808752742, 0.19584981664629267, 0.18810797202772833] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23522035808752742, 0.19584981664629267, 0.18810797202772833, 0.18613977236365592] ***
*** finished computation of 7 references, err: [Inf, 0.23522035808752742, 0.19584981664629267, 0.18810797202772833, 0.18613977236365592] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [7, 85, 0]]
** centroid: 1, normalized-entropy: 0.3882389775123619, [(1, 7), (2, 85)]
*** center 2: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 73, 19]]
** centroid: 4, normalized-entropy: 0.7347813522127804, [(2, 73), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [23, 91, 0]]
** centroid: 5, normalized-entropy: 0.7254230207665605, [(1, 23), (2, 91)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [78, 10, 0]]
** centroid: 6, normalized-entropy: 0.5107878229540133, [(1, 78), (2, 10)]
*** center 7: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23856901778871642] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23856901778871642, 0.18777029378119034] ***
*** starting iteration: 2; err: [Inf, 0.23856901778871642, 0.18777029378119034] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23856901778871642, 0.18777029378119034, 0.1857141122330857] ***
*** starting iteration: 3; err: [Inf, 0.23856901778871642, 0.18777029378119034, 0.1857141122330857] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23856901778871642, 0.18777029378119034, 0.1857141122330857, 0.18570736210620117] ***
*** finished computation of 7 references, err: [Inf, 0.23856901778871642, 0.18777029378119034, 0.1857141122330857, 0.18570736210620117] ***
*** center 1: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 65, 26]]
** centroid: 2, normalized-entropy: 0.8631205685666311, [(2, 65), (3, 26)]
*** center 3: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [86, 30, 0]]
** centroid: 4, normalized-entropy: 0.8246578332945033, [(1, 86), (2, 30)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [29, 69, 0]]
** centroid: 5, normalized-entropy: 0.8762441668050731, [(1, 29), (2, 69)]
*** center 6: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [11, 78, 0]]
** centroid: 7, normalized-entropy: 0.5396084773004918, [(1, 11), (2, 78)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.245072473756511] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.245072473756511, 0.2006259717038837] ***
*** starting iteration: 2; err: [Inf, 0.245072473756511, 0.2006259717038837] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.245072473756511, 0.2006259717038837, 0.19648839049306566] ***
*** starting iteration: 3; err: [Inf, 0.245072473756511, 0.2006259717038837, 0.19648839049306566] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.245072473756511, 0.2006259717038837, 0.19648839049306566, 0.1944141244320995] ***
*** finished computation of 7 references, err: [Inf, 0.245072473756511, 0.2006259717038837, 0.19648839049306566, 0.1944141244320995] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 83, 25]]
** centroid: 1, normalized-entropy: 0.7805849322915901, [(2, 83), (3, 25)]
*** center 2: selecting labels [1] (freq >= 2) [from [114, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [99, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [39, 31, 0]]
** centroid: 4, normalized-entropy: 0.9905577004075262, [(1, 39), (2, 31)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [85, 21, 0]]
** centroid: 5, normalized-entropy: 0.7181384220154764, [(1, 85), (2, 21)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [3, 73, 0]]
** centroid: 6, normalized-entropy: 0.23987382528036535, [(1, 3), (2, 73)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [81, 13, 0]]
** centroid: 7, normalized-entropy: 0.57976367540648, [(1, 81), (2, 13)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4039518032195061] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4039518032195061, 0.33605691601139687] ***
*** starting iteration: 2; err: [Inf, 0.4039518032195061, 0.33605691601139687] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4039518032195061, 0.33605691601139687, 0.3303311939534174] ***
*** starting iteration: 3; err: [Inf, 0.4039518032195061, 0.33605691601139687, 0.3303311939534174] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4039518032195061, 0.33605691601139687, 0.3303311939534174, 0.3297323895537335] ***
*** finished computation of 3 references, err: [Inf, 0.4039518032195061, 0.33605691601139687, 0.3303311939534174, 0.3297323895537335] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [134, 69, 0]]
** centroid: 1, normalized-entropy: 0.9247243948253971, [(1, 134), (2, 69)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [221, 40, 0]]
** centroid: 2, normalized-entropy: 0.6179305581752452, [(1, 221), (2, 40)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [44, 133, 26]]
** centroid: 3, normalized-entropy: 0.7934305395380066, [(1, 44), (2, 133), (3, 26)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.39156417823026607] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39156417823026607, 0.3017354144462045] ***
*** starting iteration: 2; err: [Inf, 0.39156417823026607, 0.3017354144462045] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39156417823026607, 0.3017354144462045, 0.29729466496881607] ***
*** starting iteration: 3; err: [Inf, 0.39156417823026607, 0.3017354144462045, 0.29729466496881607] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39156417823026607, 0.3017354144462045, 0.29729466496881607, 0.29617482448217347] ***
*** finished computation of 3 references, err: [Inf, 0.39156417823026607, 0.3017354144462045, 0.29729466496881607, 0.29617482448217347] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [99, 122, 25]]
** centroid: 1, normalized-entropy: 0.8615163764311434, [(1, 99), (2, 122), (3, 25)]
*** center 2: selecting labels [1] (freq >= 2) [from [216, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [106, 99, 0]]
** centroid: 3, normalized-entropy: 0.9991587650099314, [(1, 106), (2, 99)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2945029809399768] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2945029809399768, 0.2185900037892879] ***
*** starting iteration: 2; err: [Inf, 0.2945029809399768, 0.2185900037892879] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2945029809399768, 0.2185900037892879, 0.20134208060230488] ***
*** starting iteration: 3; err: [Inf, 0.2945029809399768, 0.2185900037892879, 0.20134208060230488] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2945029809399768, 0.2185900037892879, 0.20134208060230488, 0.19256395559657263] ***
*** finished computation of 7 references, err: [Inf, 0.2945029809399768, 0.2185900037892879, 0.20134208060230488, 0.19256395559657263] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [56, 81, 0]]
** centroid: 1, normalized-entropy: 0.9758443028957061, [(1, 56), (2, 81)]
*** center 2: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 92, 19]]
** centroid: 3, normalized-entropy: 0.6603769229926888, [(2, 92), (3, 19)]
*** center 4: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [19, 58, 0]]
** centroid: 5, normalized-entropy: 0.8060914696192223, [(1, 19), (2, 58)]
*** center 6: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [88, 28, 0]]
** centroid: 7, normalized-entropy: 0.7973265101474423, [(1, 88), (2, 28)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2766785147635481] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2766785147635481, 0.24893413904343623] ***
*** starting iteration: 2; err: [Inf, 0.2766785147635481, 0.24893413904343623] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2766785147635481, 0.24893413904343623, 0.21847623575624006] ***
*** starting iteration: 3; err: [Inf, 0.2766785147635481, 0.24893413904343623, 0.21847623575624006] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2766785147635481, 0.24893413904343623, 0.21847623575624006, 0.20169287485264611] ***
*** finished computation of 7 references, err: [Inf, 0.2766785147635481, 0.24893413904343623, 0.21847623575624006, 0.20169287485264611] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [52, 101, 0]]
** centroid: 1, normalized-entropy: 0.9246935609850174, [(1, 52), (2, 101)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [95, 2, 0]]
** centroid: 2, normalized-entropy: 0.14489961753310668, [(1, 95), (2, 2)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 97, 26]]
** centroid: 3, normalized-entropy: 0.7441163072594041, [(2, 97), (3, 26)]
*** center 4: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [61, 18, 0]]
** centroid: 5, normalized-entropy: 0.7742411580847273, [(1, 61), (2, 18)]
*** center 6: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [59, 24, 0]]
** centroid: 7, normalized-entropy: 0.8676293117125105, [(1, 59), (2, 24)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.32854269857405277] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.32854269857405277, 0.25426935382477794] ***
*** starting iteration: 2; err: [Inf, 0.32854269857405277, 0.25426935382477794] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.32854269857405277, 0.25426935382477794, 0.22878995949522532] ***
*** starting iteration: 3; err: [Inf, 0.32854269857405277, 0.25426935382477794, 0.22878995949522532] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.32854269857405277, 0.25426935382477794, 0.22878995949522532, 0.21505791509197256] ***
*** finished computation of 7 references, err: [Inf, 0.32854269857405277, 0.25426935382477794, 0.22878995949522532, 0.21505791509197256] ***
*** center 1: selecting labels [1] (freq >= 2) [from [152, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [146, 25, 0]]
** centroid: 3, normalized-entropy: 0.6002455538282918, [(1, 146), (2, 25)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [19, 78, 0]]
** centroid: 4, normalized-entropy: 0.7136036068604937, [(1, 19), (2, 78)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 97, 25]]
** centroid: 5, normalized-entropy: 0.7316557766078085, [(2, 97), (3, 25)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [20, 21, 0]]
** centroid: 6, normalized-entropy: 0.9995708393473225, [(1, 20), (2, 21)]
*** center 7: selecting labels [1] (freq >= 2) [from [20, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.31228108121244397] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31228108121244397, 0.24294444241815502] ***
*** finished computation of 3 references, err: [Inf, 0.31228108121244397, 0.24294444241815502] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [222, 72, 0]]
** centroid: 1, normalized-entropy: 0.8030909760146977, [(1, 222), (2, 72)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [166, 55, 0]]
** centroid: 2, normalized-entropy: 0.8094802523894143, [(1, 166), (2, 55)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 132, 19]]
** centroid: 3, normalized-entropy: 0.5458839015055826, [(2, 132), (3, 19)]
finished with 5 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.33943877392623023] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33943877392623023, 0.24236621359304555] ***
*** finished computation of 3 references, err: [Inf, 0.33943877392623023, 0.24236621359304555] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [134, 114, 4]]
** centroid: 1, normalized-entropy: 0.6921928513407164, [(1, 134), (2, 114), (3, 4)]
*** center 2: selecting labels [1] (freq >= 1) [from [151, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [114, 128, 22]]
** centroid: 3, normalized-entropy: 0.8380446103812303, [(1, 114), (2, 128), (3, 22)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2924541086530958] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2924541086530958, 0.2496161152688281] ***
*** finished computation of 3 references, err: [Inf, 0.2924541086530958, 0.2496161152688281] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [312, 14, 0]]
** centroid: 1, normalized-entropy: 0.25563471498620666, [(1, 312), (2, 14)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [2, 133, 25]]
** centroid: 2, normalized-entropy: 0.45371549194223704, [(1, 2), (2, 133), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [107, 74, 0]]
** centroid: 3, normalized-entropy: 0.9758872318264928, [(1, 107), (2, 74)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3363567480199352] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3363567480199352, 0.2655195770932043] ***
*** starting iteration: 2; err: [Inf, 0.3363567480199352, 0.2655195770932043] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3363567480199352, 0.2655195770932043, 0.24119645567588485] ***
*** starting iteration: 3; err: [Inf, 0.3363567480199352, 0.2655195770932043, 0.24119645567588485] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3363567480199352, 0.2655195770932043, 0.24119645567588485, 0.2353760576625173] ***
*** starting iteration: 4; err: [Inf, 0.3363567480199352, 0.2655195770932043, 0.24119645567588485, 0.2353760576625173] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3363567480199352, 0.2655195770932043, 0.24119645567588485, 0.2353760576625173, 0.23476242546171128] ***
*** finished computation of 3 references, err: [Inf, 0.3363567480199352, 0.2655195770932043, 0.24119645567588485, 0.2353760576625173, 0.23476242546171128] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [155, 71, 0]]
** centroid: 1, normalized-entropy: 0.897916447803067, [(1, 155), (2, 71)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [2, 184, 19]]
** centroid: 2, normalized-entropy: 0.3300759718055974, [(1, 2), (2, 184), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [231, 4, 0]]
** centroid: 3, normalized-entropy: 0.1243721441517688, [(1, 231), (2, 4)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.37928687953955675] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37928687953955675, 0.28425257360057227] ***
*** starting iteration: 2; err: [Inf, 0.37928687953955675, 0.28425257360057227] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37928687953955675, 0.28425257360057227, 0.2462782643140591] ***
*** starting iteration: 3; err: [Inf, 0.37928687953955675, 0.28425257360057227, 0.2462782643140591] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37928687953955675, 0.28425257360057227, 0.2462782643140591, 0.23752004158441564] ***
*** starting iteration: 4; err: [Inf, 0.37928687953955675, 0.28425257360057227, 0.2462782643140591, 0.23752004158441564] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37928687953955675, 0.28425257360057227, 0.2462782643140591, 0.23752004158441564, 0.2363402793062446] ***
*** starting iteration: 5; err: [Inf, 0.37928687953955675, 0.28425257360057227, 0.2462782643140591, 0.23752004158441564, 0.2363402793062446] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37928687953955675, 0.28425257360057227, 0.2462782643140591, 0.23752004158441564, 0.2363402793062446, 0.23613614221403692] ***
*** finished computation of 3 references, err: [Inf, 0.37928687953955675, 0.28425257360057227, 0.2462782643140591, 0.23752004158441564, 0.2363402793062446, 0.23613614221403692] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [88, 148, 26]]
** centroid: 1, normalized-entropy: 0.8359008012748615, [(1, 88), (2, 148), (3, 26)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [120, 94, 0]]
** centroid: 2, normalized-entropy: 0.9893257549491837, [(1, 120), (2, 94)]
*** center 3: selecting labels [1] (freq >= 2) [from [191, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4241094797559228] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4241094797559228, 0.2484204709150087] ***
*** starting iteration: 2; err: [Inf, 0.4241094797559228, 0.2484204709150087] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4241094797559228, 0.2484204709150087, 0.2364829385700612] ***
*** starting iteration: 3; err: [Inf, 0.4241094797559228, 0.2484204709150087, 0.2364829385700612] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4241094797559228, 0.2484204709150087, 0.2364829385700612, 0.23418235746135507] ***
*** starting iteration: 4; err: [Inf, 0.4241094797559228, 0.2484204709150087, 0.2364829385700612, 0.23418235746135507] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4241094797559228, 0.2484204709150087, 0.2364829385700612, 0.23418235746135507, 0.23359672032084422] ***
*** finished computation of 3 references, err: [Inf, 0.4241094797559228, 0.2484204709150087, 0.2364829385700612, 0.23418235746135507, 0.23359672032084422] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [98, 106, 10]]
** centroid: 1, normalized-entropy: 0.7726045026854633, [(1, 98), (2, 106), (3, 10)]
*** center 2: selecting labels [1] (freq >= 2) [from [207, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [116, 115, 15]]
** centroid: 3, normalized-entropy: 0.8014809869093936, [(1, 116), (2, 115), (3, 15)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2859153686589128] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2859153686589128, 0.24392608882909692] ***
*** finished computation of 3 references, err: [Inf, 0.2859153686589128, 0.24392608882909692] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [220, 37, 0]]
** centroid: 1, normalized-entropy: 0.5945392904246319, [(1, 220), (2, 37)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [2, 213, 19]]
** centroid: 2, normalized-entropy: 0.3005317200089331, [(1, 2), (2, 213), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [166, 9, 0]]
** centroid: 3, normalized-entropy: 0.2924347083090698, [(1, 166), (2, 9)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3050481907861388] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3050481907861388, 0.24085391582320745] ***
*** finished computation of 3 references, err: [Inf, 0.3050481907861388, 0.24085391582320745] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [111, 60, 0]]
** centroid: 1, normalized-entropy: 0.9348490242345946, [(1, 111), (2, 60)]
*** center 2: selecting labels [1] (freq >= 2) [from [164, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [124, 182, 26]]
** centroid: 3, normalized-entropy: 0.8163369973234416, [(1, 124), (2, 182), (3, 26)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.35512274347044626] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35512274347044626, 0.2566705040935276] ***
*** finished computation of 3 references, err: [Inf, 0.35512274347044626, 0.2566705040935276] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [206, 37, 0]]
** centroid: 1, normalized-entropy: 0.6154755360007845, [(1, 206), (2, 37)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 125, 25]]
** centroid: 2, normalized-entropy: 0.6500224216483541, [(2, 125), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [215, 59, 0]]
** centroid: 3, normalized-entropy: 0.7515452122521961, [(1, 215), (2, 59)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.18910612237525057] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18910612237525057, 0.1506133330650292] ***
*** starting iteration: 2; err: [Inf, 0.18910612237525057, 0.1506133330650292] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18910612237525057, 0.1506133330650292, 0.14581733254027796] ***
*** starting iteration: 3; err: [Inf, 0.18910612237525057, 0.1506133330650292, 0.14581733254027796] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18910612237525057, 0.1506133330650292, 0.14581733254027796, 0.14445266869428144] ***
*** finished computation of 7 references, err: [Inf, 0.18910612237525057, 0.1506133330650292, 0.14581733254027796, 0.14445266869428144] ***
*** center 1: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [86, 12, 0]]
** centroid: 2, normalized-entropy: 0.5363596511250623, [(1, 86), (2, 12)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 66, 19]]
** centroid: 3, normalized-entropy: 0.7665599404543365, [(2, 66), (3, 19)]
*** center 4: selecting labels [1] (freq >= 2) [from [107, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [13, 95, 0]]
** centroid: 5, normalized-entropy: 0.5304245472812997, [(1, 13), (2, 95)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [14, 83, 0]]
** centroid: 6, normalized-entropy: 0.5954670513561874, [(1, 14), (2, 83)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [77, 3, 0]]
** centroid: 7, normalized-entropy: 0.2307099556914763, [(1, 77), (2, 3)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19445807227901166] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19445807227901166, 0.15531475040635773] ***
*** starting iteration: 2; err: [Inf, 0.19445807227901166, 0.15531475040635773] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19445807227901166, 0.15531475040635773, 0.15061358024674779] ***
*** starting iteration: 3; err: [Inf, 0.19445807227901166, 0.15531475040635773, 0.15061358024674779] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19445807227901166, 0.15531475040635773, 0.15061358024674779, 0.14910306019577263] ***
*** finished computation of 7 references, err: [Inf, 0.19445807227901166, 0.15531475040635773, 0.15061358024674779, 0.14910306019577263] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [3, 91, 0]]
** centroid: 1, normalized-entropy: 0.2039058755048202, [(1, 3), (2, 91)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [72, 22, 0]]
** centroid: 2, normalized-entropy: 0.7849920887641585, [(1, 72), (2, 22)]
*** center 3: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 93, 26]]
** centroid: 4, normalized-entropy: 0.7573958968817643, [(2, 93), (3, 26)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [77, 18, 0]]
** centroid: 5, normalized-entropy: 0.7003691487575897, [(1, 77), (2, 18)]
*** center 6: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [72, 18, 0]]
** centroid: 7, normalized-entropy: 0.7219280948873623, [(1, 72), (2, 18)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19845026361196116] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19845026361196116, 0.1564190732922567] ***
*** starting iteration: 2; err: [Inf, 0.19845026361196116, 0.1564190732922567] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19845026361196116, 0.1564190732922567, 0.15193564493440906] ***
*** starting iteration: 3; err: [Inf, 0.19845026361196116, 0.1564190732922567, 0.15193564493440906] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19845026361196116, 0.1564190732922567, 0.15193564493440906, 0.15064624623525358] ***
*** finished computation of 7 references, err: [Inf, 0.19845026361196116, 0.1564190732922567, 0.15193564493440906, 0.15064624623525358] ***
*** center 1: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [105, 6, 0]]
** centroid: 2, normalized-entropy: 0.30337483608641397, [(1, 105), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 38, 25]]
** centroid: 3, normalized-entropy: 0.9690632527820694, [(2, 38), (3, 25)]
*** center 4: selecting labels [1] (freq >= 2) [from [140, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [34, 47, 0]]
** centroid: 5, normalized-entropy: 0.9813387358307915, [(1, 34), (2, 47)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [40, 58, 0]]
** centroid: 6, normalized-entropy: 0.9755259511264975, [(1, 40), (2, 58)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 72, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2444373722602096] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2444373722602096, 0.1912469286499573] ***
*** starting iteration: 2; err: [Inf, 0.2444373722602096, 0.1912469286499573] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2444373722602096, 0.1912469286499573, 0.18529668482238645] ***
*** starting iteration: 3; err: [Inf, 0.2444373722602096, 0.1912469286499573, 0.18529668482238645] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2444373722602096, 0.1912469286499573, 0.18529668482238645, 0.18309656529080448] ***
*** starting iteration: 4; err: [Inf, 0.2444373722602096, 0.1912469286499573, 0.18529668482238645, 0.18309656529080448] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2444373722602096, 0.1912469286499573, 0.18529668482238645, 0.18309656529080448, 0.1818606824209975] ***
*** starting iteration: 5; err: [Inf, 0.2444373722602096, 0.1912469286499573, 0.18529668482238645, 0.18309656529080448, 0.1818606824209975] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2444373722602096, 0.1912469286499573, 0.18529668482238645, 0.18309656529080448, 0.1818606824209975, 0.18173048363011973] ***
*** finished computation of 7 references, err: [Inf, 0.2444373722602096, 0.1912469286499573, 0.18529668482238645, 0.18309656529080448, 0.1818606824209975, 0.18173048363011973] ***
*** center 1: selecting labels [1] (freq >= 2) [from [107, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 69, 19]]
** centroid: 2, normalized-entropy: 0.7526269564427315, [(2, 69), (3, 19)]
*** center 3: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [70, 24, 0]]
** centroid: 4, normalized-entropy: 0.8196004346196011, [(1, 70), (2, 24)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [20, 70, 0]]
** centroid: 5, normalized-entropy: 0.7642045065086204, [(1, 20), (2, 70)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [16, 96, 0]]
** centroid: 6, normalized-entropy: 0.5916727785823274, [(1, 16), (2, 96)]
*** center 7: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24847184999313937] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24847184999313937, 0.19061453625939598] ***
*** starting iteration: 2; err: [Inf, 0.24847184999313937, 0.19061453625939598] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24847184999313937, 0.19061453625939598, 0.18916319064988657] ***
*** starting iteration: 3; err: [Inf, 0.24847184999313937, 0.19061453625939598, 0.18916319064988657] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24847184999313937, 0.19061453625939598, 0.18916319064988657, 0.1884689404736685] ***
*** finished computation of 7 references, err: [Inf, 0.24847184999313937, 0.19061453625939598, 0.18916319064988657, 0.1884689404736685] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 84, 26]]
** centroid: 1, normalized-entropy: 0.7889406572966208, [(2, 84), (3, 26)]
*** center 2: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [73, 19, 0]]
** centroid: 3, normalized-entropy: 0.7347813522127804, [(1, 73), (2, 19)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [82, 20, 0]]
** centroid: 4, normalized-entropy: 0.7140152804378671, [(1, 82), (2, 20)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [66, 32, 0]]
** centroid: 5, normalized-entropy: 0.9113423759758414, [(1, 66), (2, 32)]
*** center 6: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 87, 0]]
** centroid: 7, normalized-entropy: 0.1551032721030341, [(1, 2), (2, 87)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23819064560194111] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23819064560194111, 0.19751925787272706] ***
*** starting iteration: 2; err: [Inf, 0.23819064560194111, 0.19751925787272706] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23819064560194111, 0.19751925787272706, 0.19129354323398717] ***
*** starting iteration: 3; err: [Inf, 0.23819064560194111, 0.19751925787272706, 0.19129354323398717] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23819064560194111, 0.19751925787272706, 0.19129354323398717, 0.1898306067460503] ***
*** starting iteration: 4; err: [Inf, 0.23819064560194111, 0.19751925787272706, 0.19129354323398717, 0.1898306067460503] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23819064560194111, 0.19751925787272706, 0.19129354323398717, 0.1898306067460503, 0.1892060805314585] ***
*** finished computation of 7 references, err: [Inf, 0.23819064560194111, 0.19751925787272706, 0.19129354323398717, 0.1898306067460503, 0.1892060805314585] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [96, 14, 0]]
** centroid: 1, normalized-entropy: 0.54991090463341, [(1, 96), (2, 14)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [73, 16, 0]]
** centroid: 2, normalized-entropy: 0.6795851972782937, [(1, 73), (2, 16)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 77, 25]]
** centroid: 3, normalized-entropy: 0.8034158480707552, [(2, 77), (3, 25)]
*** center 4: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [12, 80, 0]]
** centroid: 5, normalized-entropy: 0.5586293734521991, [(1, 12), (2, 80)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [61, 34, 0]]
** centroid: 6, normalized-entropy: 0.9409217747114994, [(1, 61), (2, 34)]
*** center 7: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
finished with 12 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 10)
[0.9310028591465717, 0.9009788231345118, 0.8990247732762704, 0.8989798181414947, 0.8929588270905636, 0.88807370244496, 0.8739907572242901, 0.817931704159249, 0.7909796023568477, 0.7589056121990253]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9310028591465717
finished with 10
iteration 2 finished
generating 4 configurations using top 12 configurations, starting with 10)
[0.9310028591465717, 0.9009788231345118, 0.8990247732762704, 0.8989798181414947, 0.8929588270905636, 0.88807370244496, 0.8739907572242901, 0.817931704159249, 0.7909796023568477, 0.7589056121990253]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9310028591465717
finished with 10
iteration 3 finished
generating 4 configurations using top 12 configurations, starting with 10)
[0.9310028591465717, 0.9009788231345118, 0.8990247732762704, 0.8989798181414947, 0.8929588270905636, 0.88807370244496, 0.8739907572242901, 0.817931704159249, 0.7909796023568477, 0.7589056121990253]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9310028591465717
finished with 10
iteration 4 finished
generating 4 configurations using top 12 configurations, starting with 10)
[0.9310028591465717, 0.9009788231345118, 0.8990247732762704, 0.8989798181414947, 0.8929588270905636, 0.88807370244496, 0.8739907572242901, 0.817931704159249, 0.7909796023568477, 0.7589056121990253]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9310028591465717
finished with 11
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.20819355581199062] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20819355581199062, 0.16938970707197515] ***
*** starting iteration: 2; err: [Inf, 0.20819355581199062, 0.16938970707197515] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20819355581199062, 0.16938970707197515, 0.15640029394663535] ***
*** starting iteration: 3; err: [Inf, 0.20819355581199062, 0.16938970707197515, 0.15640029394663535] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20819355581199062, 0.16938970707197515, 0.15640029394663535, 0.15126161535085925] ***
*** finished computation of 7 references, err: [Inf, 0.20819355581199062, 0.16938970707197515, 0.15640029394663535, 0.15126161535085925] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 75, 19]]
** centroid: 1, normalized-entropy: 0.7261630586710504, [(2, 75), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [96, 10, 0]]
** centroid: 2, normalized-entropy: 0.4507913883546652, [(1, 96), (2, 10)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [21, 78, 0]]
** centroid: 3, normalized-entropy: 0.7455178428108284, [(1, 21), (2, 78)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [20, 93, 0]]
** centroid: 4, normalized-entropy: 0.6734503665674518, [(1, 20), (2, 93)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [34, 3, 0]]
** centroid: 5, normalized-entropy: 0.40597703847557104, [(1, 34), (2, 3)]
*** center 6: selecting labels [1] (freq >= 2) [from [154, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3003762703503425] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3003762703503425, 0.19062948163537338] ***
*** starting iteration: 2; err: [Inf, 0.3003762703503425, 0.19062948163537338] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3003762703503425, 0.19062948163537338, 0.172669966514725] ***
*** starting iteration: 3; err: [Inf, 0.3003762703503425, 0.19062948163537338, 0.172669966514725] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3003762703503425, 0.19062948163537338, 0.172669966514725, 0.16493383303251133] ***
*** finished computation of 7 references, err: [Inf, 0.3003762703503425, 0.19062948163537338, 0.172669966514725, 0.16493383303251133] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 117, 26]]
** centroid: 1, normalized-entropy: 0.6840384356390419, [(2, 117), (3, 26)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [118, 59, 0]]
** centroid: 2, normalized-entropy: 0.9182958340544894, [(1, 118), (2, 59)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [54, 24, 0]]
** centroid: 3, normalized-entropy: 0.8904916402194913, [(1, 54), (2, 24)]
*** center 4: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [33, 42, 0]]
** centroid: 5, normalized-entropy: 0.9895875212220558, [(1, 33), (2, 42)]
*** center 6: selecting labels [1] (freq >= 2) [from [30, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21313745212689533] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21313745212689533, 0.1557942017601493] ***
*** starting iteration: 2; err: [Inf, 0.21313745212689533, 0.1557942017601493] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21313745212689533, 0.1557942017601493, 0.15119038098331156] ***
*** starting iteration: 3; err: [Inf, 0.21313745212689533, 0.1557942017601493, 0.15119038098331156] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21313745212689533, 0.1557942017601493, 0.15119038098331156, 0.1500726546484815] ***
*** finished computation of 7 references, err: [Inf, 0.21313745212689533, 0.1557942017601493, 0.15119038098331156, 0.1500726546484815] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [95, 20, 0]]
** centroid: 1, normalized-entropy: 0.6665783579949205, [(1, 95), (2, 20)]
*** center 2: selecting labels [1] (freq >= 2) [from [126, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [36, 40, 0]]
** centroid: 3, normalized-entropy: 0.9980008838722993, [(1, 36), (2, 40)]
*** center 4: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 74, 21]]
** centroid: 5, normalized-entropy: 0.762084924805724, [(2, 74), (3, 21)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 67, 4]]
** centroid: 6, normalized-entropy: 0.3127333763966432, [(2, 67), (3, 4)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [73, 20, 0]]
** centroid: 7, normalized-entropy: 0.7510324165275097, [(1, 73), (2, 20)]
finished with 12 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 11)
[0.9310028591465717, 0.916014817212422, 0.9009788231345118, 0.8990247732762704, 0.8989798181414947, 0.8929588270905636, 0.88807370244496, 0.8739907572242901, 0.817931704159249, 0.7909796023568477, 0.7589056121990253]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9310028591465717
finished with 11
iteration 6 finished
generating 4 configurations using top 12 configurations, starting with 11)
[0.9310028591465717, 0.916014817212422, 0.9009788231345118, 0.8990247732762704, 0.8989798181414947, 0.8929588270905636, 0.88807370244496, 0.8739907572242901, 0.817931704159249, 0.7909796023568477, 0.7589056121990253]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9310028591465717
finished with 12
iteration 7 finished
*** starting iteration: 1; err: [Inf, 0.24556375619767978] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24556375619767978, 0.16406195133353943] ***
*** finished computation of 7 references, err: [Inf, 0.24556375619767978, 0.16406195133353943] ***
*** center 1: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [98, 4, 0]]
** centroid: 2, normalized-entropy: 0.23868451135100152, [(1, 98), (2, 4)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 131, 19]]
** centroid: 3, normalized-entropy: 0.54822511745032, [(2, 131), (3, 19)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [99, 75, 0]]
** centroid: 4, normalized-entropy: 0.9862325350724501, [(1, 99), (2, 75)]
*** center 5: selecting labels [1] (freq >= 1) [from [35, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [51, 1, 0]]
** centroid: 6, normalized-entropy: 0.13709947889981755, [(1, 51), (2, 1)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [36, 48, 0]]
** centroid: 7, normalized-entropy: 0.9852281360342514, [(1, 36), (2, 48)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.18344827171699932] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18344827171699932, 0.15382054031755346] ***
*** finished computation of 7 references, err: [Inf, 0.18344827171699932, 0.15382054031755346] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 104, 26]]
** centroid: 1, normalized-entropy: 0.7219280948873623, [(2, 104), (3, 26)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [42, 88, 0]]
** centroid: 2, normalized-entropy: 0.9076961653608385, [(1, 42), (2, 88)]
*** center 3: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [62, 1, 0]]
** centroid: 5, normalized-entropy: 0.11759466565886466, [(1, 62), (2, 1)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [58, 33, 0]]
** centroid: 6, normalized-entropy: 0.9448506439764089, [(1, 58), (2, 33)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [70, 16, 0]]
** centroid: 7, normalized-entropy: 0.6931274153282881, [(1, 70), (2, 16)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2559383278300726] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2559383278300726, 0.17753027156770307] ***
*** finished computation of 7 references, err: [Inf, 0.2559383278300726, 0.17753027156770307] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [144, 19, 0]]
** centroid: 1, normalized-entropy: 0.5194040869726659, [(1, 144), (2, 19)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [81, 56, 0]]
** centroid: 2, normalized-entropy: 0.9758443028957061, [(1, 81), (2, 56)]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 72, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [65, 29, 0]]
** centroid: 4, normalized-entropy: 0.8914467590654126, [(1, 65), (2, 29)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 45, 25]]
** centroid: 5, normalized-entropy: 0.940285958670631, [(2, 45), (3, 25)]
*** center 6: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 12)
[0.9310028591465717, 0.916014817212422, 0.9160028291764819, 0.9009788231345118, 0.8990247732762704, 0.8989798181414947, 0.8929588270905636, 0.88807370244496, 0.8739907572242901, 0.817931704159249, 0.7909796023568477, 0.7589056121990253]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9310028591465717
finished with 12
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 12)
[0.9310028591465717, 0.916014817212422, 0.9160028291764819, 0.9009788231345118, 0.8990247732762704, 0.8989798181414947, 0.8929588270905636, 0.88807370244496, 0.8739907572242901, 0.817931704159249, 0.7909796023568477, 0.7589056121990253]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9310028591465717
finished with 13
iteration 9 finished
*** starting iteration: 1; err: [Inf, 0.22086033493269225] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22086033493269225, 0.18559558579401747] ***
*** starting iteration: 2; err: [Inf, 0.22086033493269225, 0.18559558579401747] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22086033493269225, 0.18559558579401747, 0.1829046517171458] ***
*** starting iteration: 3; err: [Inf, 0.22086033493269225, 0.18559558579401747, 0.1829046517171458] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22086033493269225, 0.18559558579401747, 0.1829046517171458, 0.18236185807466238] ***
*** finished computation of 7 references, err: [Inf, 0.22086033493269225, 0.18559558579401747, 0.1829046517171458, 0.18236185807466238] ***
*** center 1: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [81, 10, 0]]
** centroid: 2, normalized-entropy: 0.49958440742366095, [(1, 81), (2, 10)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 74, 19]]
** centroid: 3, normalized-entropy: 0.7304472862481346, [(2, 74), (3, 19)]
*** center 4: selecting labels [1] (freq >= 2) [from [110, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [30, 71, 0]]
** centroid: 5, normalized-entropy: 0.8776296673746861, [(1, 30), (2, 71)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [61, 11, 0]]
** centroid: 6, normalized-entropy: 0.6167482598263911, [(1, 61), (2, 11)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [10, 93, 0]]
** centroid: 7, normalized-entropy: 0.4596942127956402, [(1, 10), (2, 93)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22510779124015812] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22510779124015812, 0.1946254507242318] ***
*** starting iteration: 2; err: [Inf, 0.22510779124015812, 0.1946254507242318] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22510779124015812, 0.1946254507242318, 0.19008893334213225] ***
*** starting iteration: 3; err: [Inf, 0.22510779124015812, 0.1946254507242318, 0.19008893334213225] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22510779124015812, 0.1946254507242318, 0.19008893334213225, 0.18950714031967433] ***
*** finished computation of 7 references, err: [Inf, 0.22510779124015812, 0.1946254507242318, 0.19008893334213225, 0.18950714031967433] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 83, 26]]
** centroid: 1, normalized-entropy: 0.7925906965800167, [(2, 83), (3, 26)]
*** center 2: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [83, 12, 0]]
** centroid: 3, normalized-entropy: 0.5472469471683307, [(1, 83), (2, 12)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [55, 25, 0]]
** centroid: 4, normalized-entropy: 0.8960382325345574, [(1, 55), (2, 25)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [82, 10, 0]]
** centroid: 5, normalized-entropy: 0.49596907206183377, [(1, 82), (2, 10)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 94, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [76, 18, 0]]
** centroid: 7, normalized-entropy: 0.7045767128725937, [(1, 76), (2, 18)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2524996427246656] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2524996427246656, 0.19731967959893698] ***
*** starting iteration: 2; err: [Inf, 0.2524996427246656, 0.19731967959893698] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2524996427246656, 0.19731967959893698, 0.19116945673377886] ***
*** starting iteration: 3; err: [Inf, 0.2524996427246656, 0.19731967959893698, 0.19116945673377886] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2524996427246656, 0.19731967959893698, 0.19116945673377886, 0.19032945877256646] ***
*** finished computation of 7 references, err: [Inf, 0.2524996427246656, 0.19731967959893698, 0.19116945673377886, 0.19032945877256646] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 77, 25]]
** centroid: 1, normalized-entropy: 0.8034158480707552, [(2, 77), (3, 25)]
*** center 2: selecting labels [1] (freq >= 2) [from [111, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [64, 7, 0]]
** centroid: 3, normalized-entropy: 0.4645149440905521, [(1, 64), (2, 7)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [76, 25, 0]]
** centroid: 4, normalized-entropy: 0.8073313266519867, [(1, 76), (2, 25)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [83, 24, 0]]
** centroid: 5, normalized-entropy: 0.7679401376244881, [(1, 83), (2, 24)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [87, 6, 0]]
** centroid: 6, normalized-entropy: 0.3451173149449528, [(1, 87), (2, 6)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 82, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.2357513465071097] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2357513465071097, 0.19702803402859717] ***
*** starting iteration: 2; err: [Inf, 0.2357513465071097, 0.19702803402859717] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2357513465071097, 0.19702803402859717, 0.19075073466449977] ***
*** starting iteration: 3; err: [Inf, 0.2357513465071097, 0.19702803402859717, 0.19075073466449977] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2357513465071097, 0.19702803402859717, 0.19075073466449977, 0.18907694615377113] ***
*** finished computation of 7 references, err: [Inf, 0.2357513465071097, 0.19702803402859717, 0.19075073466449977, 0.18907694615377113] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [100, 94, 0]]
** centroid: 1, normalized-entropy: 0.999309898706868, [(1, 100), (2, 94)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [107, 34, 0]]
** centroid: 2, normalized-entropy: 0.7969222449701818, [(1, 107), (2, 34)]
*** center 3: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 107, 35]]
** centroid: 4, normalized-entropy: 0.8056494213497768, [(2, 107), (3, 35)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [23, 125, 0]]
** centroid: 5, normalized-entropy: 0.6232036320338675, [(1, 23), (2, 125)]
*** center 6: selecting labels [1] (freq >= 2) [from [137, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [134, 1, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23279591708630323] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23279591708630323, 0.19215353233367205] ***
*** starting iteration: 2; err: [Inf, 0.23279591708630323, 0.19215353233367205] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23279591708630323, 0.19215353233367205, 0.1904606244172901] ***
*** starting iteration: 3; err: [Inf, 0.23279591708630323, 0.19215353233367205, 0.1904606244172901] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23279591708630323, 0.19215353233367205, 0.1904606244172901, 0.18980198714137078] ***
*** finished computation of 7 references, err: [Inf, 0.23279591708630323, 0.19215353233367205, 0.1904606244172901, 0.18980198714137078] ***
*** center 1: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 49, 18]]
** centroid: 2, normalized-entropy: 0.8395304981054318, [(2, 49), (3, 18)]
*** center 3: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [71, 40, 0]]
** centroid: 4, normalized-entropy: 0.9429819088696832, [(1, 71), (2, 40)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [21, 49, 0]]
** centroid: 5, normalized-entropy: 0.8812908992306927, [(1, 21), (2, 49)]
*** center 6: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [14, 40, 0]]
** centroid: 7, normalized-entropy: 0.8256265261578954, [(1, 14), (2, 40)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21840406102873386] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21840406102873386, 0.18291548694111406] ***
*** starting iteration: 2; err: [Inf, 0.21840406102873386, 0.18291548694111406] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21840406102873386, 0.18291548694111406, 0.17807921989262104] ***
*** starting iteration: 3; err: [Inf, 0.21840406102873386, 0.18291548694111406, 0.17807921989262104] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21840406102873386, 0.18291548694111406, 0.17807921989262104, 0.17763187697622926] ***
*** finished computation of 7 references, err: [Inf, 0.21840406102873386, 0.18291548694111406, 0.17807921989262104, 0.17763187697622926] ***
*** center 1: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 51, 12]]
** centroid: 2, normalized-entropy: 0.7024665512903904, [(2, 51), (3, 12)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [67, 18, 0]]
** centroid: 3, normalized-entropy: 0.7448423974714387, [(1, 67), (2, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [58, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [10, 49, 0]]
** centroid: 5, normalized-entropy: 0.656540281386946, [(1, 10), (2, 49)]
*** center 6: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [23, 49, 0]]
** centroid: 7, normalized-entropy: 0.9037762882345833, [(1, 23), (2, 49)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23843866902403532] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23843866902403532, 0.18833133239485322] ***
*** starting iteration: 2; err: [Inf, 0.23843866902403532, 0.18833133239485322] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23843866902403532, 0.18833133239485322, 0.1824668663907796] ***
*** starting iteration: 3; err: [Inf, 0.23843866902403532, 0.18833133239485322, 0.1824668663907796] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23843866902403532, 0.18833133239485322, 0.1824668663907796, 0.18110442760400475] ***
*** finished computation of 7 references, err: [Inf, 0.23843866902403532, 0.18833133239485322, 0.1824668663907796, 0.18110442760400475] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [39, 55, 0]]
** centroid: 1, normalized-entropy: 0.978998737002276, [(1, 39), (2, 55)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [61, 15, 0]]
** centroid: 2, normalized-entropy: 0.7166336117927455, [(1, 61), (2, 15)]
*** center 3: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 46, 17]]
** centroid: 4, normalized-entropy: 0.8412367762002599, [(2, 46), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [15, 70, 0]]
** centroid: 5, normalized-entropy: 0.6722948170756378, [(1, 15), (2, 70)]
*** center 6: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.241188100816682] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.241188100816682, 0.19435484872758388] ***
*** starting iteration: 2; err: [Inf, 0.241188100816682, 0.19435484872758388] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.241188100816682, 0.19435484872758388, 0.18767562018567696] ***
*** starting iteration: 3; err: [Inf, 0.241188100816682, 0.19435484872758388, 0.18767562018567696] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.241188100816682, 0.19435484872758388, 0.18767562018567696, 0.18667213420011103] ***
*** finished computation of 7 references, err: [Inf, 0.241188100816682, 0.19435484872758388, 0.18767562018567696, 0.18667213420011103] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [25, 73, 0]]
** centroid: 1, normalized-entropy: 0.8192649712314392, [(1, 25), (2, 73)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [61, 10, 0]]
** centroid: 2, normalized-entropy: 0.5864477034453907, [(1, 61), (2, 10)]
*** center 3: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 34, 17]]
** centroid: 4, normalized-entropy: 0.9182958340544894, [(2, 34), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [7, 51, 0]]
** centroid: 5, normalized-entropy: 0.5313400141801669, [(1, 7), (2, 51)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [69, 6, 0]]
** centroid: 6, normalized-entropy: 0.4021791902022729, [(1, 69), (2, 6)]
*** center 7: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23385173506103457] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23385173506103457, 0.18781792120821775] ***
*** starting iteration: 2; err: [Inf, 0.23385173506103457, 0.18781792120821775] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23385173506103457, 0.18781792120821775, 0.18415315889380873] ***
*** starting iteration: 3; err: [Inf, 0.23385173506103457, 0.18781792120821775, 0.18415315889380873] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23385173506103457, 0.18781792120821775, 0.18415315889380873, 0.1833580904332921] ***
*** finished computation of 7 references, err: [Inf, 0.23385173506103457, 0.18781792120821775, 0.18415315889380873, 0.1833580904332921] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [26, 50, 0]]
** centroid: 1, normalized-entropy: 0.9268190639645774, [(1, 26), (2, 50)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [48, 9, 0]]
** centroid: 2, normalized-entropy: 0.6292492238560344, [(1, 48), (2, 9)]
*** center 3: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 49, 18]]
** centroid: 4, normalized-entropy: 0.8395304981054318, [(2, 49), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [62, 5, 0]]
** centroid: 5, normalized-entropy: 0.3829576722723533, [(1, 62), (2, 5)]
*** center 6: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 75, 0]]
** centroid: 7, normalized-entropy: 0.23519338181924157, [(1, 3), (2, 75)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21659508586116136] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21659508586116136, 0.18808233635220678] ***
*** starting iteration: 2; err: [Inf, 0.21659508586116136, 0.18808233635220678] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21659508586116136, 0.18808233635220678, 0.18610974819399417] ***
*** starting iteration: 3; err: [Inf, 0.21659508586116136, 0.18808233635220678, 0.18610974819399417] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21659508586116136, 0.18808233635220678, 0.18610974819399417, 0.18409497405961156] ***
*** finished computation of 7 references, err: [Inf, 0.21659508586116136, 0.18808233635220678, 0.18610974819399417, 0.18409497405961156] ***
*** center 1: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 41, 15]]
** centroid: 2, normalized-entropy: 0.8383729377099398, [(2, 41), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [76, 10, 0]]
** centroid: 3, normalized-entropy: 0.5185697317883058, [(1, 76), (2, 10)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [16, 47, 0]]
** centroid: 4, normalized-entropy: 0.8175072881213616, [(1, 16), (2, 47)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [10, 71, 0]]
** centroid: 5, normalized-entropy: 0.5392163432092415, [(1, 10), (2, 71)]
*** center 6: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [63, 1, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2534337955228984] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2534337955228984, 0.1903999050874263] ***
*** starting iteration: 2; err: [Inf, 0.2534337955228984, 0.1903999050874263] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2534337955228984, 0.1903999050874263, 0.186399749728851] ***
*** starting iteration: 3; err: [Inf, 0.2534337955228984, 0.1903999050874263, 0.186399749728851] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2534337955228984, 0.1903999050874263, 0.186399749728851, 0.18603579476103185] ***
*** finished computation of 7 references, err: [Inf, 0.2534337955228984, 0.1903999050874263, 0.186399749728851, 0.18603579476103185] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 73, 19]]
** centroid: 1, normalized-entropy: 0.7347813522127804, [(2, 73), (3, 19)]
*** center 2: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [53, 15, 0]]
** centroid: 3, normalized-entropy: 0.7612401496918493, [(1, 53), (2, 15)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [57, 15, 0]]
** centroid: 4, normalized-entropy: 0.7382848661434506, [(1, 57), (2, 15)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [47, 23, 0]]
** centroid: 5, normalized-entropy: 0.9134601452569628, [(1, 47), (2, 23)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [3, 59, 0]]
** centroid: 6, normalized-entropy: 0.2795055456366802, [(1, 3), (2, 59)]
*** center 7: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2249711677543819] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2249711677543819, 0.19290481026656925] ***
*** starting iteration: 2; err: [Inf, 0.2249711677543819, 0.19290481026656925] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2249711677543819, 0.19290481026656925, 0.18678674188256264] ***
*** starting iteration: 3; err: [Inf, 0.2249711677543819, 0.19290481026656925, 0.18678674188256264] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2249711677543819, 0.19290481026656925, 0.18678674188256264, 0.18542366830259563] ***
*** finished computation of 7 references, err: [Inf, 0.2249711677543819, 0.19290481026656925, 0.18678674188256264, 0.18542366830259563] ***
*** center 1: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 47, 17]]
** centroid: 2, normalized-entropy: 0.8351164948421137, [(2, 47), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [76, 18, 0]]
** centroid: 3, normalized-entropy: 0.7045767128725937, [(1, 76), (2, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [11, 69, 0]]
** centroid: 5, normalized-entropy: 0.5776539033535634, [(1, 11), (2, 69)]
*** center 6: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [9, 66, 0]]
** centroid: 7, normalized-entropy: 0.5293608652873645, [(1, 9), (2, 66)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2382121295556426] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2382121295556426, 0.1907976383510977] ***
*** starting iteration: 2; err: [Inf, 0.2382121295556426, 0.1907976383510977] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2382121295556426, 0.1907976383510977, 0.18742467756569386] ***
*** starting iteration: 3; err: [Inf, 0.2382121295556426, 0.1907976383510977, 0.18742467756569386] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2382121295556426, 0.1907976383510977, 0.18742467756569386, 0.18700382625311612] ***
*** finished computation of 7 references, err: [Inf, 0.2382121295556426, 0.1907976383510977, 0.18742467756569386, 0.18700382625311612] ***
*** center 1: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [67, 1, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 46, 19]]
** centroid: 3, normalized-entropy: 0.871683617119982, [(2, 46), (3, 19)]
*** center 4: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [58, 30, 0]]
** centroid: 5, normalized-entropy: 0.9256859869821296, [(1, 58), (2, 30)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [38, 41, 0]]
** centroid: 6, normalized-entropy: 0.9989595114657399, [(1, 38), (2, 41)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 61, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2444052042197436] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2444052042197436, 0.19009421285055578] ***
*** starting iteration: 2; err: [Inf, 0.2444052042197436, 0.19009421285055578] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2444052042197436, 0.19009421285055578, 0.18517251930013298] ***
*** starting iteration: 3; err: [Inf, 0.2444052042197436, 0.19009421285055578, 0.18517251930013298] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2444052042197436, 0.19009421285055578, 0.18517251930013298, 0.1844761856868863] ***
*** finished computation of 7 references, err: [Inf, 0.2444052042197436, 0.19009421285055578, 0.18517251930013298, 0.1844761856868863] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [21, 53, 0]]
** centroid: 1, normalized-entropy: 0.8605553930586318, [(1, 21), (2, 53)]
*** center 2: selecting labels [1] (freq >= 2) [from [56, 1, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [64, 17, 0]]
** centroid: 4, normalized-entropy: 0.7412466905234424, [(1, 64), (2, 17)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 40, 20]]
** centroid: 5, normalized-entropy: 0.9182958340544894, [(2, 40), (3, 20)]
*** center 6: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [12, 61, 0]]
** centroid: 7, normalized-entropy: 0.644694043811662, [(1, 12), (2, 61)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24134831451810895] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24134831451810895, 0.19402828039601444] ***
*** starting iteration: 2; err: [Inf, 0.24134831451810895, 0.19402828039601444] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24134831451810895, 0.19402828039601444, 0.19083869317546487] ***
*** starting iteration: 3; err: [Inf, 0.24134831451810895, 0.19402828039601444, 0.19083869317546487] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24134831451810895, 0.19402828039601444, 0.19083869317546487, 0.1895161926401779] ***
*** finished computation of 7 references, err: [Inf, 0.24134831451810895, 0.19402828039601444, 0.19083869317546487, 0.1895161926401779] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [64, 4, 0]]
** centroid: 1, normalized-entropy: 0.32275695889739825, [(1, 64), (2, 4)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [62, 4, 0]]
** centroid: 2, normalized-entropy: 0.32984607020714635, [(1, 62), (2, 4)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 41, 21]]
** centroid: 3, normalized-entropy: 0.9235785996175947, [(2, 41), (3, 21)]
*** center 4: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [59, 11, 0]]
** centroid: 5, normalized-entropy: 0.6274303352684106, [(1, 59), (2, 11)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [30, 52, 0]]
** centroid: 6, normalized-entropy: 0.9474351361840305, [(1, 30), (2, 52)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 75, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22191048919968306] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22191048919968306, 0.1911040950519964] ***
*** starting iteration: 2; err: [Inf, 0.22191048919968306, 0.1911040950519964] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22191048919968306, 0.1911040950519964, 0.18911230602115392] ***
*** starting iteration: 3; err: [Inf, 0.22191048919968306, 0.1911040950519964, 0.18911230602115392] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22191048919968306, 0.1911040950519964, 0.18911230602115392, 0.18926447490230203] ***
*** finished computation of 7 references, err: [Inf, 0.22191048919968306, 0.1911040950519964, 0.18911230602115392, 0.18926447490230203] ***
*** center 1: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 40, 15]]
** centroid: 2, normalized-entropy: 0.8453509366224364, [(2, 40), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [70, 3, 0]]
** centroid: 3, normalized-entropy: 0.24729443986205674, [(1, 70), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [19, 60, 0]]
** centroid: 4, normalized-entropy: 0.7958812735955936, [(1, 19), (2, 60)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [51, 10, 0]]
** centroid: 5, normalized-entropy: 0.6436394131461666, [(1, 51), (2, 10)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [7, 63, 0]]
** centroid: 6, normalized-entropy: 0.46899559358928133, [(1, 7), (2, 63)]
*** center 7: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24460877806227654] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24460877806227654, 0.19024338302202523] ***
*** starting iteration: 2; err: [Inf, 0.24460877806227654, 0.19024338302202523] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24460877806227654, 0.19024338302202523, 0.1837940054014325] ***
*** starting iteration: 3; err: [Inf, 0.24460877806227654, 0.19024338302202523, 0.1837940054014325] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24460877806227654, 0.19024338302202523, 0.1837940054014325, 0.1834110548608005] ***
*** finished computation of 7 references, err: [Inf, 0.24460877806227654, 0.19024338302202523, 0.1837940054014325, 0.1834110548608005] ***
*** center 1: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 31, 17]]
** centroid: 2, normalized-entropy: 0.9377342939868042, [(2, 31), (3, 17)]
*** center 3: selecting labels [1] (freq >= 2) [from [78, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [61, 6, 0]]
** centroid: 4, normalized-entropy: 0.43497348007474274, [(1, 61), (2, 6)]
*** center 5: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 84, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 62, 0]]
** centroid: 7, normalized-entropy: 0.269828447703074, [(1, 3), (2, 62)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24035050328820945] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24035050328820945, 0.19582257158309221] ***
*** starting iteration: 2; err: [Inf, 0.24035050328820945, 0.19582257158309221] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24035050328820945, 0.19582257158309221, 0.19032747478969395] ***
*** starting iteration: 3; err: [Inf, 0.24035050328820945, 0.19582257158309221, 0.19032747478969395] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24035050328820945, 0.19582257158309221, 0.19032747478969395, 0.1890445803515613] ***
*** finished computation of 7 references, err: [Inf, 0.24035050328820945, 0.19582257158309221, 0.19032747478969395, 0.1890445803515613] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 53, 22]]
** centroid: 1, normalized-entropy: 0.8729882944709463, [(2, 53), (3, 22)]
*** center 2: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [59, 5, 0]]
** centroid: 3, normalized-entropy: 0.3955378064564774, [(1, 59), (2, 5)]
*** center 4: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [69, 2, 0]]
** centroid: 5, normalized-entropy: 0.18512476010054582, [(1, 69), (2, 2)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [28, 52, 0]]
** centroid: 6, normalized-entropy: 0.9340680553754911, [(1, 28), (2, 52)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 69, 0]]
** centroid: 7, normalized-entropy: 0.24988229283318547, [(1, 3), (2, 69)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24573757163248955] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24573757163248955, 0.19662044075503946] ***
*** starting iteration: 2; err: [Inf, 0.24573757163248955, 0.19662044075503946] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24573757163248955, 0.19662044075503946, 0.19122944895736874] ***
*** starting iteration: 3; err: [Inf, 0.24573757163248955, 0.19662044075503946, 0.19122944895736874] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24573757163248955, 0.19662044075503946, 0.19122944895736874, 0.19018922945298256] ***
*** finished computation of 7 references, err: [Inf, 0.24573757163248955, 0.19662044075503946, 0.19122944895736874, 0.19018922945298256] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [62, 30, 0]]
** centroid: 1, normalized-entropy: 0.9108783787500366, [(1, 62), (2, 30)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [65, 9, 0]]
** centroid: 2, normalized-entropy: 0.5340042729285396, [(1, 65), (2, 9)]
*** center 3: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 51, 17]]
** centroid: 4, normalized-entropy: 0.8112781244591328, [(2, 51), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [24, 47, 0]]
** centroid: 5, normalized-entropy: 0.9229192878686723, [(1, 24), (2, 47)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 49, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23126657373830675] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23126657373830675, 0.19368202803842724] ***
*** starting iteration: 2; err: [Inf, 0.23126657373830675, 0.19368202803842724] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23126657373830675, 0.19368202803842724, 0.18972506642900408] ***
*** starting iteration: 3; err: [Inf, 0.23126657373830675, 0.19368202803842724, 0.18972506642900408] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23126657373830675, 0.19368202803842724, 0.18972506642900408, 0.18796833342313765] ***
*** finished computation of 7 references, err: [Inf, 0.23126657373830675, 0.19368202803842724, 0.18972506642900408, 0.18796833342313765] ***
*** center 1: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 59, 17]]
** centroid: 2, normalized-entropy: 0.7668379316856329, [(2, 59), (3, 17)]
*** center 3: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [48, 36, 0]]
** centroid: 4, normalized-entropy: 0.9852281360342514, [(1, 48), (2, 36)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [8, 63, 0]]
** centroid: 5, normalized-entropy: 0.5079353563991225, [(1, 8), (2, 63)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [46, 20, 0]]
** centroid: 6, normalized-entropy: 0.8849636363831529, [(1, 46), (2, 20)]
*** center 7: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2343746590744704] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2343746590744704, 0.19161239884980022] ***
*** starting iteration: 2; err: [Inf, 0.2343746590744704, 0.19161239884980022] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2343746590744704, 0.19161239884980022, 0.1846558957695961] ***
*** starting iteration: 3; err: [Inf, 0.2343746590744704, 0.19161239884980022, 0.1846558957695961] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2343746590744704, 0.19161239884980022, 0.1846558957695961, 0.18350188595894723] ***
*** finished computation of 7 references, err: [Inf, 0.2343746590744704, 0.19161239884980022, 0.1846558957695961, 0.18350188595894723] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [53, 40, 0]]
** centroid: 1, normalized-entropy: 0.9858587262978805, [(1, 53), (2, 40)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [59, 17, 0]]
** centroid: 2, normalized-entropy: 0.7668379316856329, [(1, 59), (2, 17)]
*** center 3: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [12, 48, 0]]
** centroid: 4, normalized-entropy: 0.7219280948873623, [(1, 12), (2, 48)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 61, 16]]
** centroid: 5, normalized-entropy: 0.7372413771710565, [(2, 61), (3, 16)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [74, 4, 0]]
** centroid: 6, normalized-entropy: 0.29181825659888555, [(1, 74), (2, 4)]
*** center 7: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24215843636542558] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24215843636542558, 0.19090733195468784] ***
*** starting iteration: 2; err: [Inf, 0.24215843636542558, 0.19090733195468784] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24215843636542558, 0.19090733195468784, 0.18650314593501388] ***
*** starting iteration: 3; err: [Inf, 0.24215843636542558, 0.19090733195468784, 0.18650314593501388] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24215843636542558, 0.19090733195468784, 0.18650314593501388, 0.18414716901537032] ***
*** finished computation of 7 references, err: [Inf, 0.24215843636542558, 0.19090733195468784, 0.18650314593501388, 0.18414716901537032] ***
*** center 1: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 29, 21]]
** centroid: 2, normalized-entropy: 0.9814538950336533, [(2, 29), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [71, 4, 0]]
** centroid: 3, normalized-entropy: 0.3003914173647818, [(1, 71), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [67, 11, 0]]
** centroid: 4, normalized-entropy: 0.5869185834047994, [(1, 67), (2, 11)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [13, 75, 0]]
** centroid: 5, normalized-entropy: 0.6041234581483739, [(1, 13), (2, 75)]
*** center 6: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 66, 0]]
** centroid: 7, normalized-entropy: 0.2580186686648155, [(1, 3), (2, 66)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2478860040009022] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2478860040009022, 0.19602166671585292] ***
*** starting iteration: 2; err: [Inf, 0.2478860040009022, 0.19602166671585292] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2478860040009022, 0.19602166671585292, 0.1931537961624563] ***
*** starting iteration: 3; err: [Inf, 0.2478860040009022, 0.19602166671585292, 0.1931537961624563] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2478860040009022, 0.19602166671585292, 0.1931537961624563, 0.19161817586049437] ***
*** finished computation of 7 references, err: [Inf, 0.2478860040009022, 0.19602166671585292, 0.1931537961624563, 0.19161817586049437] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 54, 19]]
** centroid: 1, normalized-entropy: 0.8271595195340525, [(2, 54), (3, 19)]
*** center 2: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [46, 36, 0]]
** centroid: 3, normalized-entropy: 0.9892452969285004, [(1, 46), (2, 36)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [63, 3, 0]]
** centroid: 4, normalized-entropy: 0.2667649878030262, [(1, 63), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [40, 34, 0]]
** centroid: 5, normalized-entropy: 0.9952525494396791, [(1, 40), (2, 34)]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 56, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23032473265379666] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23032473265379666, 0.19586877857521176] ***
*** starting iteration: 2; err: [Inf, 0.23032473265379666, 0.19586877857521176] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23032473265379666, 0.19586877857521176, 0.19045071594044566] ***
*** starting iteration: 3; err: [Inf, 0.23032473265379666, 0.19586877857521176, 0.19045071594044566] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23032473265379666, 0.19586877857521176, 0.19045071594044566, 0.18851543797552586] ***
*** finished computation of 7 references, err: [Inf, 0.23032473265379666, 0.19586877857521176, 0.19045071594044566, 0.18851543797552586] ***
*** center 1: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 62, 15]]
** centroid: 2, normalized-entropy: 0.7114160189012126, [(2, 62), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [42, 18, 0]]
** centroid: 3, normalized-entropy: 0.8812908992306927, [(1, 42), (2, 18)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [35, 37, 0]]
** centroid: 4, normalized-entropy: 0.9994433330902989, [(1, 35), (2, 37)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [14, 53, 0]]
** centroid: 5, normalized-entropy: 0.7394809367166378, [(1, 14), (2, 53)]
*** center 6: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [65, 20, 0]]
** centroid: 7, normalized-entropy: 0.787126586201269, [(1, 65), (2, 20)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23649605009518565] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23649605009518565, 0.19464901134371757] ***
*** starting iteration: 2; err: [Inf, 0.23649605009518565, 0.19464901134371757] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23649605009518565, 0.19464901134371757, 0.19188870941661298] ***
*** starting iteration: 3; err: [Inf, 0.23649605009518565, 0.19464901134371757, 0.19188870941661298] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23649605009518565, 0.19464901134371757, 0.19188870941661298, 0.19109372929669916] ***
*** finished computation of 7 references, err: [Inf, 0.23649605009518565, 0.19464901134371757, 0.19188870941661298, 0.19109372929669916] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [83, 18, 0]]
** centroid: 1, normalized-entropy: 0.6761627418829197, [(1, 83), (2, 18)]
*** center 2: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 25, 17]]
** centroid: 3, normalized-entropy: 0.9736680645496202, [(2, 25), (3, 17)]
*** center 4: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [69, 11, 0]]
** centroid: 5, normalized-entropy: 0.5776539033535634, [(1, 69), (2, 11)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 66, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 59, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2388970492836088] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2388970492836088, 0.19012728764489292] ***
*** starting iteration: 2; err: [Inf, 0.2388970492836088, 0.19012728764489292] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2388970492836088, 0.19012728764489292, 0.18722880786284804] ***
*** starting iteration: 3; err: [Inf, 0.2388970492836088, 0.19012728764489292, 0.18722880786284804] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2388970492836088, 0.19012728764489292, 0.18722880786284804, 0.18708692761510612] ***
*** finished computation of 7 references, err: [Inf, 0.2388970492836088, 0.19012728764489292, 0.18722880786284804, 0.18708692761510612] ***
*** center 1: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 45, 16]]
** centroid: 2, normalized-entropy: 0.8301899714180444, [(2, 45), (3, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [54, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [63, 17, 0]]
** centroid: 4, normalized-entropy: 0.7462343013654809, [(1, 63), (2, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [18, 53, 0]]
** centroid: 5, normalized-entropy: 0.8168114277045246, [(1, 18), (2, 53)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [7, 61, 0]]
** centroid: 6, normalized-entropy: 0.4782501641071144, [(1, 7), (2, 61)]
*** center 7: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23464140217751264] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23464140217751264, 0.19374106510728598] ***
*** starting iteration: 2; err: [Inf, 0.23464140217751264, 0.19374106510728598] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23464140217751264, 0.19374106510728598, 0.1896276386138052] ***
*** starting iteration: 3; err: [Inf, 0.23464140217751264, 0.19374106510728598, 0.1896276386138052] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23464140217751264, 0.19374106510728598, 0.1896276386138052, 0.18769009917974472] ***
*** finished computation of 7 references, err: [Inf, 0.23464140217751264, 0.19374106510728598, 0.1896276386138052, 0.18769009917974472] ***
*** center 1: selecting labels [1] (freq >= 2) [from [64, 1, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [61, 5, 0]]
** centroid: 2, normalized-entropy: 0.38705142139219795, [(1, 61), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 55, 19]]
** centroid: 3, normalized-entropy: 0.8218127305034848, [(2, 55), (3, 19)]
*** center 4: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [55, 19, 0]]
** centroid: 5, normalized-entropy: 0.8218127305034848, [(1, 55), (2, 19)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [49, 35, 0]]
** centroid: 6, normalized-entropy: 0.9798687566511527, [(1, 49), (2, 35)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 56, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24108513180725277] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24108513180725277, 0.19622267010807992] ***
*** starting iteration: 2; err: [Inf, 0.24108513180725277, 0.19622267010807992] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24108513180725277, 0.19622267010807992, 0.19170388126187027] ***
*** starting iteration: 3; err: [Inf, 0.24108513180725277, 0.19622267010807992, 0.19170388126187027] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24108513180725277, 0.19622267010807992, 0.19170388126187027, 0.19132483331114053] ***
*** finished computation of 7 references, err: [Inf, 0.24108513180725277, 0.19622267010807992, 0.19170388126187027, 0.19132483331114053] ***
*** center 1: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 34, 20]]
** centroid: 2, normalized-entropy: 0.9509560484549724, [(2, 34), (3, 20)]
*** center 3: selecting labels [1] (freq >= 2) [from [78, 1, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [8, 78, 0]]
** centroid: 6, normalized-entropy: 0.446481346896803, [(1, 8), (2, 78)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [6, 65, 0]]
** centroid: 7, normalized-entropy: 0.4178642624458583, [(1, 6), (2, 65)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23885330094210805] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23885330094210805, 0.18932349072955548] ***
*** starting iteration: 2; err: [Inf, 0.23885330094210805, 0.18932349072955548] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23885330094210805, 0.18932349072955548, 0.18580124209821225] ***
*** starting iteration: 3; err: [Inf, 0.23885330094210805, 0.18932349072955548, 0.18580124209821225] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23885330094210805, 0.18932349072955548, 0.18580124209821225, 0.18553751503117383] ***
*** finished computation of 7 references, err: [Inf, 0.23885330094210805, 0.18932349072955548, 0.18580124209821225, 0.18553751503117383] ***
*** center 1: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 31, 21]]
** centroid: 2, normalized-entropy: 0.9731560354421095, [(2, 31), (3, 21)]
*** center 3: selecting labels [1] (freq >= 2) [from [80, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [76, 5, 0]]
** centroid: 4, normalized-entropy: 0.33426813256179383, [(1, 76), (2, 5)]
*** center 5: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [2, 65, 0]]
** centroid: 6, normalized-entropy: 0.19364280468389852, [(1, 2), (2, 65)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [9, 66, 0]]
** centroid: 7, normalized-entropy: 0.5293608652873645, [(1, 9), (2, 66)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25260659796744583] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25260659796744583, 0.19287762192077934] ***
*** starting iteration: 2; err: [Inf, 0.25260659796744583, 0.19287762192077934] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25260659796744583, 0.19287762192077934, 0.1872362096570432] ***
*** starting iteration: 3; err: [Inf, 0.25260659796744583, 0.19287762192077934, 0.1872362096570432] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25260659796744583, 0.19287762192077934, 0.1872362096570432, 0.1866861667400226] ***
*** finished computation of 7 references, err: [Inf, 0.25260659796744583, 0.19287762192077934, 0.1872362096570432, 0.1866861667400226] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [63, 42, 0]]
** centroid: 1, normalized-entropy: 0.9709505944546688, [(1, 63), (2, 42)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [54, 34, 0]]
** centroid: 2, normalized-entropy: 0.9624127354629922, [(1, 54), (2, 34)]
*** center 3: selecting labels [1] (freq >= 2) [from [44, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 56, 14]]
** centroid: 4, normalized-entropy: 0.7219280948873623, [(2, 56), (3, 14)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [12, 57, 0]]
** centroid: 5, normalized-entropy: 0.6665783579949205, [(1, 12), (2, 57)]
*** center 6: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24637124755699188] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24637124755699188, 0.19269369759503752] ***
*** starting iteration: 2; err: [Inf, 0.24637124755699188, 0.19269369759503752] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24637124755699188, 0.19269369759503752, 0.19050285406876355] ***
*** starting iteration: 3; err: [Inf, 0.24637124755699188, 0.19269369759503752, 0.19050285406876355] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24637124755699188, 0.19269369759503752, 0.19050285406876355, 0.19019989049993455] ***
*** finished computation of 7 references, err: [Inf, 0.24637124755699188, 0.19269369759503752, 0.19050285406876355, 0.19019989049993455] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [14, 57, 0]]
** centroid: 1, normalized-entropy: 0.7162583911075451, [(1, 14), (2, 57)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [52, 4, 0]]
** centroid: 2, normalized-entropy: 0.3712323266408756, [(1, 52), (2, 4)]
*** center 3: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 48, 21]]
** centroid: 4, normalized-entropy: 0.8865408928220899, [(2, 48), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [66, 15, 0]]
** centroid: 5, normalized-entropy: 0.6912898694057888, [(1, 66), (2, 15)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [11, 60, 0]]
** centroid: 6, normalized-entropy: 0.6220403090607189, [(1, 11), (2, 60)]
*** center 7: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24046415727585554] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24046415727585554, 0.19119110835716127] ***
*** starting iteration: 2; err: [Inf, 0.24046415727585554, 0.19119110835716127] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24046415727585554, 0.19119110835716127, 0.18608051899820566] ***
*** starting iteration: 3; err: [Inf, 0.24046415727585554, 0.19119110835716127, 0.18608051899820566] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24046415727585554, 0.19119110835716127, 0.18608051899820566, 0.1853950989767909] ***
*** finished computation of 7 references, err: [Inf, 0.24046415727585554, 0.19119110835716127, 0.18608051899820566, 0.1853950989767909] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [27, 50, 0]]
** centroid: 1, normalized-entropy: 0.9346466439786693, [(1, 27), (2, 50)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [50, 2, 0]]
** centroid: 2, normalized-entropy: 0.23519338181924157, [(1, 50), (2, 2)]
*** center 3: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 49, 14]]
** centroid: 4, normalized-entropy: 0.7642045065086204, [(2, 49), (3, 14)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [57, 9, 0]]
** centroid: 5, normalized-entropy: 0.5746356978376794, [(1, 57), (2, 9)]
*** center 6: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [10, 65, 0]]
** centroid: 7, normalized-entropy: 0.5665095065529052, [(1, 10), (2, 65)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23853573595359923] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23853573595359923, 0.18954519813880324] ***
*** starting iteration: 2; err: [Inf, 0.23853573595359923, 0.18954519813880324] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23853573595359923, 0.18954519813880324, 0.1839188903737813] ***
*** starting iteration: 3; err: [Inf, 0.23853573595359923, 0.18954519813880324, 0.1839188903737813] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23853573595359923, 0.18954519813880324, 0.1839188903737813, 0.1834734167344868] ***
*** finished computation of 7 references, err: [Inf, 0.23853573595359923, 0.18954519813880324, 0.1839188903737813, 0.1834734167344868] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 41, 21]]
** centroid: 1, normalized-entropy: 0.9235785996175947, [(2, 41), (3, 21)]
*** center 2: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [59, 10, 0]]
** centroid: 3, normalized-entropy: 0.5969995167604553, [(1, 59), (2, 10)]
*** center 4: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [65, 7, 0]]
** centroid: 5, normalized-entropy: 0.460127886147135, [(1, 65), (2, 7)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 67, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [6, 60, 0]]
** centroid: 7, normalized-entropy: 0.43949698692151346, [(1, 6), (2, 60)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2243567922208458] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2243567922208458, 0.19887656436860562] ***
*** starting iteration: 2; err: [Inf, 0.2243567922208458, 0.19887656436860562] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2243567922208458, 0.19887656436860562, 0.19655000014603138] ***
*** starting iteration: 3; err: [Inf, 0.2243567922208458, 0.19887656436860562, 0.19655000014603138] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2243567922208458, 0.19887656436860562, 0.19655000014603138, 0.19589428985118865] ***
*** finished computation of 7 references, err: [Inf, 0.2243567922208458, 0.19887656436860562, 0.19655000014603138, 0.19589428985118865] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [23, 61, 0]]
** centroid: 1, normalized-entropy: 0.8468781063424823, [(1, 23), (2, 61)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [53, 13, 0]]
** centroid: 2, normalized-entropy: 0.7158259310602146, [(1, 53), (2, 13)]
*** center 3: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 71, 23]]
** centroid: 4, normalized-entropy: 0.8027381019527042, [(2, 71), (3, 23)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [38, 26, 0]]
** centroid: 5, normalized-entropy: 0.9744894033980525, [(1, 38), (2, 26)]
*** center 6: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
finished with 11 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 361,3 => 35,1 => 604), Dict(2 => 374,3 => 44,1 => 582))
[ Info: (AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, 1, 7, 3, 1.0, :fft, 0.6, 2), 0.9310028591465717)
[ Info: ===== scores for single classifier: {"micro_f1":0.944,"precision":0.944,"recall":0.944,"macro_recall":0.9545485173138296,"macro_f1":0.8977207977207978,"accuracy":0.944,"class_f1":{"2":0.9222222222222223,"3":0.8,"1":0.9709401709401709},"class_precision":{"2":0.9595375722543352,"3":0.6666666666666666,"1":0.9659863945578231},"class_recall":{"2":0.8877005347593583,"3":1.0,"1":0.9759450171821306}}
[ Info: ===== scores for 1: {"micro_f1":0.967,"precision":0.967,"recall":0.967,"macro_recall":0.9728179306711752,"macro_f1":0.9687537821636356,"accuracy":0.967,"class_f1":{"2":0.9547325102880658,"3":0.9777777777777777,"1":0.9737510584250635},"class_precision":{"2":0.9802816901408451,"3":0.9565217391304348,"1":0.9599332220367279},"class_recall":{"2":0.93048128342246,"3":1.0,"1":0.9879725085910653}}
[ Info: ===== scores for 5: {"micro_f1":0.968,"precision":0.968,"recall":0.968,"macro_recall":0.9743462520903394,"macro_f1":0.9662517952413019,"accuracy":0.968,"class_f1":{"2":0.9564032697547683,"3":0.967032967032967,"1":0.9753191489361702},"class_precision":{"2":0.975,"3":0.9361702127659575,"1":0.9662731871838112},"class_recall":{"2":0.9385026737967914,"3":1.0,"1":0.9845360824742269}}
[ Info: ===== scores for 7: {"micro_f1":0.97,"precision":0.97,"recall":0.97,"macro_recall":0.9764473111956434,"macro_f1":0.9710788620969258,"accuracy":0.97,"class_f1":{"2":0.9593495934959351,"3":0.9777777777777777,"1":0.9761092150170648},"class_precision":{"2":0.9725274725274725,"3":0.9565217391304348,"1":0.9694915254237289},"class_recall":{"2":0.946524064171123,"3":1.0,"1":0.9828178694158075}}
[ Info: ===== scores for 9: {"micro_f1":0.97,"precision":0.97,"recall":0.97,"macro_recall":0.9764473111956434,"macro_f1":0.9710788620969258,"accuracy":0.97,"class_f1":{"2":0.9593495934959351,"3":0.9777777777777777,"1":0.9761092150170648},"class_precision":{"2":0.9725274725274725,"3":0.9565217391304348,"1":0.9694915254237289},"class_recall":{"2":0.946524064171123,"3":1.0,"1":0.9828178694158075}}
[ Info: ===== scores for 11: {"micro_f1":0.971,"precision":0.971,"recall":0.971,"macro_recall":0.9767015209707751,"macro_f1":0.9684768923513144,"accuracy":0.971,"class_f1":{"2":0.9605442176870749,"3":0.967032967032967,"1":0.9778534923339012},"class_precision":{"2":0.9778393351800554,"3":0.9361702127659575,"1":0.9695945945945946},"class_recall":{"2":0.9438502673796791,"3":1.0,"1":0.9862542955326461}}
(score = 0.967, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.972, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.969, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.97, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.968, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.973, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.97, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.968, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: ("config: ", "{\"score\":0.973,\"k\":5,\"kernel\":\"direct_kernel\",\"dist\":\"l2_distance\",\"kernel_fun\":\"fun\"}")
[ Info: ===== scores optimized! B: {"micro_f1":0.973,"precision":0.973,"recall":0.973,"macro_recall":0.9781655242540627,"macro_f1":0.9667264007052095,"accuracy":0.973,"class_f1":{"2":0.963265306122449,"3":0.9565217391304348,"1":0.9803921568627451},"class_precision":{"2":0.9806094182825484,"3":0.9166666666666666,"1":0.9729272419627749},"class_recall":{"2":0.946524064171123,"3":1.0,"1":0.9879725085910653}}
Test Summary: | Pass  Total
AKNC          |    8      8
    Testing KCenters tests passed 
