Julia Version 1.6.0-DEV.923
Commit 3dde06fe9f (2020-09-16 06:22 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed FastGaussQuadrature ────────── v0.4.2
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed FunctionIntegrator ─────────── v0.5.1
  Installed SpecialFunctions ───────────── v0.10.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [7685536e] + FunctionIntegrator v0.5.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [442a2c76] + FastGaussQuadrature v0.4.2
  [7685536e] + FunctionIntegrator v0.5.1
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [276daf66] + SpecialFunctions v0.10.3
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing FunctionIntegrator
Status `/tmp/jl_tsnPDt/Project.toml`
  [442a2c76] FastGaussQuadrature v0.4.2
  [7685536e] FunctionIntegrator v0.5.1
  [276daf66] SpecialFunctions v0.10.3
  [8dfed614] Test
Status `/tmp/jl_tsnPDt/Manifest.toml`
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [442a2c76] FastGaussQuadrature v0.4.2
  [7685536e] FunctionIntegrator v0.5.1
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [276daf66] SpecialFunctions v0.10.3
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Performing the Airy Ai(x) test, where Ai(x) is integrated on the semi-infinite domain, or an approximation of it, namely [0,100] and the result is compared to the analytical result 1/3.
Running: adaptive_simpsons_rule
  1.017248 seconds (1.36 M allocations: 72.480 MiB, 1.58% gc time)
Running: chebyshev_quadrature with k=1
  1.995420 seconds (2.15 M allocations: 123.794 MiB, 7.15% gc time)
Running: chebyshev_quadrature with k=2
  0.316913 seconds (409.21 k allocations: 23.545 MiB, 10.84% gc time)
Running: chebyshev_quadrature with k=3
  0.401674 seconds (522.62 k allocations: 28.689 MiB)
Running: chebyshev_quadrature with k=4
  0.522014 seconds (467.27 k allocations: 25.338 MiB, 18.10% gc time)
Running: jacobi_quadrature with α=β=1
 43.722824 seconds (37.10 M allocations: 3.038 GiB, 9.38% gc time)
Running: laguerre_quadrature with k=1
  3.224649 seconds (3.17 M allocations: 177.138 MiB, 6.43% gc time)
Running: legendre_quadrature
  0.238418 seconds (206.09 k allocations: 11.849 MiB, 9.90% gc time)
Running: lobatto_quadrature
  0.331881 seconds (330.29 k allocations: 19.967 MiB)
Running: radau_quadrature
  0.272091 seconds (313.25 k allocations: 19.024 MiB)
Running: rectangle_rule_left. Only a rough approximation can be practically achieved using this function.
 83.889813 seconds (100.02 M allocations: 1.491 GiB, 0.30% gc time)
Running: rectangle_rule_midpoint.
  0.172986 seconds (172.63 k allocations: 3.836 MiB)
Running: rectangle_rule_right. Only a rough approximation can be practically achieved using this function.
 82.576178 seconds (100.02 M allocations: 1.491 GiB, 0.24% gc time)
Running: rombergs_method
  0.543318 seconds (722.05 k allocations: 41.694 MiB, 5.55% gc time)
Running: simpsons_rule
  0.037867 seconds (45.97 k allocations: 2.054 MiB)
Running: simpsons38_rule
  0.089129 seconds (109.15 k allocations: 5.781 MiB)
Running: trapezoidal_rule
  0.340104 seconds (1.51 M allocations: 25.690 MiB, 5.05% gc time)
Test Summary: | Pass  Total
Airy Ai(x)    |   17     17
Performing the besselj test, where BesselJ_1(2) is approximated and the result is compared to the value obtained from SpecialFunctions' besselj function.
Running: adaptive_simpsons_rule with ε=1e-7
  0.096931 seconds (31.25 k allocations: 1.877 MiB)
Running: chebyshev_quadrature with k=1
  0.475773 seconds (273.51 k allocations: 14.246 MiB)
Running: chebyshev_quadrature with k=2
  0.156940 seconds (93.84 k allocations: 2.677 MiB)
Running: chebyshev_quadrature with k=3
  0.171662 seconds (82.09 k allocations: 2.478 MiB)
Running: chebyshev_quadrature with k=4
  0.170272 seconds (64.70 k allocations: 2.124 MiB)
Running: jacobi_quadrature with α=β=1
  2.592409 seconds (499.12 k allocations: 161.610 MiB, 21.89% gc time)
Running: legendre_quadrature
  0.150323 seconds (41.67 k allocations: 2.408 MiB)
Running: lobatto_quadrature
  0.020280 seconds (16.16 k allocations: 1.006 MiB)
Running: radau_quadrature
  0.020248 seconds (16.14 k allocations: 1.006 MiB)
Running: rectangle_rule_left
 28.112353 seconds (471.41 M allocations: 7.025 GiB, 2.46% gc time)
Running: rectangle_rule_midpoint
  0.000024 seconds (45 allocations: 1.047 KiB)
Running: rectangle_rule_right
 27.874297 seconds (476.96 M allocations: 7.107 GiB, 2.10% gc time)
Running: rombergs_method
  0.357845 seconds (326.58 k allocations: 18.556 MiB)
Running: simpsons_rule
  0.000024 seconds (85 allocations: 1.672 KiB)
Running: simpsons38_rule
  0.064431 seconds (19.11 k allocations: 1.156 MiB)
Running: trapezoidal_rule
  0.057796 seconds (17.61 k allocations: 1.063 MiB)
Test Summary: | Pass  Total
besselj       |   16     16
Integrating cos^2(x)/(1+cot(x)) from 0 to pi/2 and comparing the results to the analytical result 0.25.
Running: adaptive_simpsons_rule with ε=1e-7
  0.030955 seconds (1.99 k allocations: 53.594 KiB)
Running: chebyshev_quadrature with k=1
  0.108446 seconds (2.40 k allocations: 113.328 KiB)
Running: chebyshev_quadrature with k=2
  0.107134 seconds (2.65 k allocations: 121.344 KiB)
Running: chebyshev_quadrature with k=3
  0.112652 seconds (3.08 k allocations: 133.547 KiB)
Running: chebyshev_quadrature with k=4
  0.115458 seconds (3.08 k allocations: 133.609 KiB)
Running: jacobi_quadrature with α=β=1
  0.293305 seconds (362.14 k allocations: 18.886 MiB)
Running: legendre_quadrature
  0.067972 seconds (1.24 k allocations: 63.531 KiB)
Running: lobatto_quadrature
  0.000087 seconds (67 allocations: 2.844 KiB)
Running: radau_quadrature
  0.000036 seconds (71 allocations: 3.078 KiB)
Running: rectangle_rule_left
  0.000517 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_midpoint
  0.000451 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right
  0.000512 seconds (9 allocations: 496 bytes)
Running: rombergs_method
  0.078548 seconds (1.01 k allocations: 54.094 KiB)
Running: simpsons_rule
  0.000038 seconds (323 allocations: 5.391 KiB)
Running: simpsons38_rule
  0.024580 seconds (923 allocations: 39.281 KiB)
Running: trapezoidal_rule
  0.021518 seconds (44.33 k allocations: 704.859 KiB)
Test Summary: | Pass  Total
coscotint     |   16     16
Integrating cosine from 0 to pi/2 and comparing the result to the analytical result of 1.
Running: adaptive_simpsons_rule
  0.055061 seconds (72.77 k allocations: 4.238 MiB)
Running: chebyshev_quadrature with k=1
  0.205184 seconds (230.11 k allocations: 12.933 MiB, 12.78% gc time)
Running: chebyshev_quadrature with k=2
  0.232341 seconds (282.77 k allocations: 15.902 MiB)
Running: chebyshev_quadrature with k=3
  0.222324 seconds (262.34 k allocations: 14.292 MiB)
Running: chebyshev_quadrature with k=4
  0.242398 seconds (262.37 k allocations: 14.214 MiB, 9.92% gc time)
Running: jacobi_quadrature with α=β=1
  1.698648 seconds (445.68 k allocations: 163.116 MiB, 1.25% gc time)
Running: legendre_quadrature
  0.195585 seconds (184.98 k allocations: 10.684 MiB, 8.20% gc time)
Running: lobatto_quadrature
  0.183014 seconds (195.84 k allocations: 11.375 MiB)
Running: radau_quadrature
  0.163363 seconds (195.84 k allocations: 11.379 MiB)
Running: rectangle_rule_left
  1.209584 seconds (18.94 k allocations: 1.154 MiB)
Running: rectangle_rule_midpoint
  0.022547 seconds (24.84 k allocations: 1.564 MiB)
Running: rectangle_rule_right
  1.123385 seconds (17.51 k allocations: 1.069 MiB)
Running: rombergs_method
  0.112957 seconds (133.60 k allocations: 7.727 MiB)
Running: simpsons_rule
  0.030193 seconds (27.73 k allocations: 1.739 MiB)
Running: simpsons38_rule
  0.048387 seconds (42.67 k allocations: 2.694 MiB)
Running: trapezoidal_rule
  0.027808 seconds (44.25 k allocations: 1.780 MiB)
Test Summary: | Pass  Total
Cosine        |   16     16
Integrating e^(-x^2)/(1+x^2) on the infinite domain [-inf, inf], or failing that on [-100,100], and comparing it to the analytical result exp(1)*pi*erfc(1)
Running: adaptive_simpsons_rule with ε=1e-7
  0.057032 seconds (99.77 k allocations: 2.991 MiB, 30.06% gc time)
Running: chebyshev_quadrature with k=1
  0.176667 seconds (236.70 k allocations: 13.003 MiB)
Running: chebyshev_quadrature with k=2
  0.193657 seconds (289.79 k allocations: 15.860 MiB)
Running: chebyshev_quadrature with k=3
  0.212017 seconds (269.06 k allocations: 14.291 MiB, 8.87% gc time)
Running: chebyshev_quadrature with k=4
  0.219041 seconds (269.08 k allocations: 14.284 MiB)
Running: hermite_quadrature with k=2
 15.341935 seconds (20.86 M allocations: 1.086 GiB, 10.24% gc time)
Running: jacobi_quadrature with α=β=1
  0.436003 seconds (454.89 k allocations: 49.319 MiB, 8.37% gc time)
Running: laguerre_quadrature with k=1 and multiplying the result by 2 (as Laguerre is only on the semi-infinite domain)
  0.249874 seconds (275.97 k allocations: 15.221 MiB)
Running: legendre_quadrature
  0.208204 seconds (191.54 k allocations: 11.006 MiB, 15.40% gc time)
Running: lobatto_quadrature
  0.217769 seconds (216.66 k allocations: 37.144 MiB)
Running: radau_quadrature
  0.248400 seconds (213.25 k allocations: 29.808 MiB, 14.46% gc time)
Running: rectangle_rule_left
  0.026585 seconds (21.90 k allocations: 1.303 MiB)
Running: rectangle_rule_midpoint
  0.030608 seconds (26.66 k allocations: 1.652 MiB)
Running: rectangle_rule_right
  0.026769 seconds (18.64 k allocations: 1.124 MiB)
Running: rombergs_method
  0.150159 seconds (136.09 k allocations: 7.768 MiB)
Running: simpsons_rule
  0.040143 seconds (39.61 k allocations: 2.073 MiB)
Running: simpsons38_rule
  0.034815 seconds (57.69 k allocations: 3.080 MiB)
Running: trapezoidal_rule
  0.031799 seconds (30.32 k allocations: 1.708 MiB)
Test Summary: | Pass  Total
expnx2datan   |   18     18
Integrate exp(-x^2) from minus infinity to positive infinity and comparing the result to the analytical solution, sqrt(pi)
Running: adaptive_simpsons_rule with ε=1e-7
  0.042321 seconds (60.13 k allocations: 2.291 MiB)
Running: chebyshev_quadrature with k=1
  0.227730 seconds (232.22 k allocations: 12.800 MiB, 11.54% gc time)
Running: chebyshev_quadrature with k=2
  0.246441 seconds (284.99 k allocations: 15.610 MiB)
Running: chebyshev_quadrature with k=3
  0.197082 seconds (264.48 k allocations: 14.079 MiB)
Running: chebyshev_quadrature with k=4
  0.223660 seconds (264.50 k allocations: 14.078 MiB, 12.08% gc time)
Running: hermite_quadrature with k=2
  0.150297 seconds (170.26 k allocations: 9.766 MiB)
Running: jacobi_quadrature with α=β=1
  9.574478 seconds (448.13 k allocations: 1.175 GiB, 15.37% gc time)
Running: laguerre_quadrature (results multiplied by 2, as laguerre only integrates over the semi-infinite domain)
  0.258375 seconds (271.25 k allocations: 15.043 MiB, 5.74% gc time)
Running: legendre_quadrature
  0.149268 seconds (187.10 k allocations: 10.791 MiB)
Running: lobatto_quadrature
  0.206827 seconds (207.41 k allocations: 22.877 MiB, 7.23% gc time)
Running: radau_quadrature
  0.180093 seconds (206.56 k allocations: 20.810 MiB)
Running: rectangle_rule_left
  0.024033 seconds (19.66 k allocations: 1.196 MiB)
Running: rectangle_rule_midpoint
  0.023095 seconds (25.54 k allocations: 1.600 MiB)
Running: rectangle_rule_right
  0.022199 seconds (17.49 k allocations: 1.069 MiB)
Running: rombergs_method
  0.112522 seconds (131.91 k allocations: 7.590 MiB)
Running: simpsons_rule
  0.031313 seconds (32.11 k allocations: 1.862 MiB)
Running: simpsons38_rule
  0.075250 seconds (48.48 k allocations: 2.840 MiB)
Running: trapezoidal_rule
  0.024382 seconds (25.21 k allocations: 1.544 MiB)
Test Summary: | Pass  Total
Gaussian      |   18     18
Integrating 1/x from 1 to e and comparing the result to the analytical solution, 1.
Running: adaptive_simpsons_rule with ε=1e-7
  0.032954 seconds (31.08 k allocations: 1.886 MiB)
Running: chebyshev_quadrature with k=1
  0.196604 seconds (230.60 k allocations: 13.011 MiB, 8.10% gc time)
Running: chebyshev_quadrature with k=2
  0.220535 seconds (283.28 k allocations: 15.955 MiB)
Running: chebyshev_quadrature with k=3
  0.203099 seconds (262.85 k allocations: 14.294 MiB)
Running: chebyshev_quadrature with k=4
  0.225576 seconds (262.88 k allocations: 14.131 MiB, 7.55% gc time)
Running: jacobi_quadrature with α=β=1
  2.100947 seconds (446.23 k allocations: 194.232 MiB, 6.67% gc time)
Running: legendre_quadrature
  0.185458 seconds (185.48 k allocations: 10.711 MiB)
Running: lobatto_quadrature
  0.213934 seconds (196.34 k allocations: 11.401 MiB, 7.40% gc time)
Running: radau_quadrature
  0.192059 seconds (196.34 k allocations: 11.401 MiB)
Running: rectangle_rule_left
  0.355972 seconds (19.47 k allocations: 1.180 MiB)
Running: rectangle_rule_midpoint
  0.025111 seconds (25.18 k allocations: 1.583 MiB)
Running: rectangle_rule_right
  0.116200 seconds (17.85 k allocations: 1.087 MiB)
Running: rombergs_method
  0.142402 seconds (144.42 k allocations: 8.457 MiB)
Running: simpsons_rule
  0.039861 seconds (28.43 k allocations: 1.769 MiB)
Running: simpsons38_rule
  0.046823 seconds (43.39 k allocations: 2.724 MiB)
Running: trapezoidal_rule
  0.026246 seconds (45.19 k allocations: 1.814 MiB)
Test Summary: | Pass  Total
1/x           |   16     16
Integrating log(x)/x from 1 to e and comparing the result to the analytical solution of 0.5.
Running: adaptive_simpsons_rule with ε=1e-7
  0.036567 seconds (31.84 k allocations: 1.837 MiB)
Running: chebyshev_quadrature with k=1
  0.214016 seconds (231.19 k allocations: 12.975 MiB, 8.42% gc time)
Running: chebyshev_quadrature with k=2
  0.225141 seconds (283.91 k allocations: 15.859 MiB)
Running: chebyshev_quadrature with k=3
  0.204379 seconds (263.43 k allocations: 14.216 MiB)
Running: chebyshev_quadrature with k=4
  0.316996 seconds (263.45 k allocations: 14.311 MiB, 9.60% gc time)
Running: jacobi_quadrature with α=β=1
  2.066625 seconds (446.93 k allocations: 148.855 MiB, 4.10% gc time)
Running: legendre_quadrature
  0.148275 seconds (186.07 k allocations: 10.726 MiB)
Running: lobatto_quadrature
  0.218263 seconds (196.94 k allocations: 11.418 MiB, 8.60% gc time)
Running: radau_quadrature
  0.218068 seconds (196.94 k allocations: 11.514 MiB)
Running: rectangle_rule_left
  1.161452 seconds (19.72 k allocations: 1.193 MiB)
Running: rectangle_rule_midpoint
  0.026628 seconds (25.18 k allocations: 1.583 MiB)
Running: rectangle_rule_right
  1.164691 seconds (17.81 k allocations: 1.085 MiB)
Running: rombergs_method
  0.158257 seconds (134.82 k allocations: 7.782 MiB)
Running: simpsons_rule
  0.044074 seconds (29.12 k allocations: 1.795 MiB)
Running: simpsons38_rule
  0.045050 seconds (44.09 k allocations: 2.750 MiB)
Running: trapezoidal_rule
  0.036760 seconds (57.42 k allocations: 2.014 MiB)
Test Summary: | Pass  Total
log(x)/x      |   16     16
Approximating the modified bessel function I_1(1) and comparing it to the result obtained by SpecialFunctions.
Running: adaptive_simpsons_rule with ε=1e-7
  0.164057 seconds (146.06 k allocations: 8.742 MiB)
Running: chebyshev_quadrature with k=1
  0.148453 seconds (69.97 k allocations: 2.207 MiB)
Running: chebyshev_quadrature with k=2
  0.152577 seconds (105.13 k allocations: 2.869 MiB)
Running: chebyshev_quadrature with k=3
  0.155493 seconds (92.61 k allocations: 2.656 MiB)
Running: chebyshev_quadrature with k=4
  0.190500 seconds (72.14 k allocations: 2.252 MiB, 15.32% gc time)
Running: jacobi_quadrature with α=β=1
  2.700997 seconds (474.73 k allocations: 167.499 MiB, 9.17% gc time)
Running: legendre_quadrature
  0.103499 seconds (18.76 k allocations: 1.093 MiB)
Running: lobatto_quadrature
  0.000103 seconds (150 allocations: 4.328 KiB)
Running: radau_quadrature
  0.000039 seconds (148 allocations: 4.375 KiB)
Running: rectangle_rule_left
 42.314141 seconds (590.00 M allocations: 8.792 GiB, 2.72% gc time)
Running: rectangle_rule_midpoint
  0.000048 seconds (40 allocations: 992 bytes)
Running: rectangle_rule_right
 42.185601 seconds (592.75 M allocations: 8.833 GiB, 2.69% gc time)
Running: rombergs_method
  0.137389 seconds (20.54 k allocations: 1.167 MiB)
Running: simpsons_rule
  0.000041 seconds (93 allocations: 1.797 KiB)
Running: simpsons38_rule
  0.032436 seconds (463 allocations: 22.578 KiB)
Running: trapezoidal_rule
  0.022623 seconds (179 allocations: 8.766 KiB)
Test Summary: | Pass  Total
modbessel0    |   16     16
Integrating 1/sqrt(-19.6 sin(x)) from -pi to 0 and comparing the result to the analytical solution of ellipk(1/2)/sqrt(2.45) The integrand has singularities at x = -pi and x=0, so for some of these functions the integration domain has to be itself approximated.
Running: adaptive_simpsons_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 31.240915 seconds (629.33 M allocations: 9.387 GiB, 3.88% gc time)
Running: chebyshev_quadrature with k=1
  0.583803 seconds (418.93 k allocations: 23.194 MiB, 5.15% gc time)
Running: chebyshev_quadrature with k=2
 13.281077 seconds (473.65 k allocations: 4.040 GiB, 3.88% gc time)
Running: chebyshev_quadrature with k=3
  6.079607 seconds (276.76 k allocations: 1.643 GiB, 4.63% gc time)
Running: chebyshev_quadrature with k=4
  8.530418 seconds (276.78 k allocations: 2.261 GiB, 2.49% gc time)
Running: jacobi_quadrature with α=β=1. The N value required to get an accurate result is too high to be practical, so only a rough approximation can be arrived at.
 58.351749 seconds (483.64 k allocations: 13.254 GiB, 3.62% gc time)
Running: legendre_quadrature.
  5.921432 seconds (223.24 k allocations: 1.976 GiB, 1.79% gc time)
The following integration functions have to use an approximated domain due to the endpoint singularities.
Running: lobatto_quadrature on [-pi+1e-6, -1e-6]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 53.223681 seconds (8.23 M allocations: 13.383 GiB, 3.44% gc time)
Running: radau_quadrature on [-pi+1e-6, -1e-6]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 51.219961 seconds (7.23 M allocations: 13.369 GiB, 2.72% gc time)
Running: rectangle_rule_left on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  3.551156 seconds (22.38 k allocations: 1.354 MiB)
Running: rectangle_rule_midpoint on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  3.143632 seconds (30.63 k allocations: 1.894 MiB)
Running: rectangle_rule_right on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  2.972170 seconds (22.59 k allocations: 1.364 MiB)
Running: rombergs_method on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  1.190930 seconds (437.92 k allocations: 152.680 MiB)
Running: simpsons_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 39.627344 seconds (600.04 M allocations: 8.943 GiB, 8.81% gc time)
Running: simpsons38_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 40.338962 seconds (600.05 M allocations: 8.943 GiB, 8.12% gc time)
Running: trapezoidal_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 40.071372 seconds (600.03 M allocations: 8.943 GiB, 8.54% gc time)
Test Summary: | Pass  Total
Simppen       |   16     16
Integrating sin(x^2)e^(-x)/x from 0 to infinity, with the approximated domain of integration of 0 to 100. The removable singularity at x=0 in the integrand has been removed.
Running: adaptive_simpsons_rule with ε=1e-8
  0.067180 seconds (180.71 k allocations: 4.420 MiB)
Running: chebyshev_quadrature with k=1
  0.219063 seconds (247.17 k allocations: 13.417 MiB)
Running: chebyshev_quadrature with k=2
  0.267554 seconds (271.77 k allocations: 14.487 MiB)
Running: chebyshev_quadrature with k=3
  0.205041 seconds (247.88 k allocations: 12.783 MiB)
Running: chebyshev_quadrature with k=4
  0.211690 seconds (247.91 k allocations: 12.782 MiB)
Running: jacobi_quadrature with α=β=1
  0.431161 seconds (387.50 k allocations: 34.885 MiB)
Running: laguerre_quadrature with k=2
  0.193199 seconds (180.07 k allocations: 10.454 MiB)
Running: legendre_quadrature
  0.145698 seconds (145.31 k allocations: 8.036 MiB)
Running: lobatto_quadrature
  0.041068 seconds (10.69 k allocations: 15.100 MiB)
Running: radau_quadrature
  0.037285 seconds (9.47 k allocations: 13.173 MiB)
Running: rectangle_rule_left
  0.064078 seconds (18.99 k allocations: 1.128 MiB)
Running: rectangle_rule_midpoint
  0.054964 seconds (25.65 k allocations: 1.585 MiB)
Running: rectangle_rule_right
  0.063974 seconds (17.59 k allocations: 1.055 MiB)
Running: rombergs_method
  0.250205 seconds (171.86 k allocations: 9.875 MiB)
Running: simpsons_rule
  0.002032 seconds (24.72 k allocations: 386.656 KiB)
Running: simpsons38_rule
  0.051872 seconds (79.17 k allocations: 3.400 MiB)
Running: trapezoidal_rule
  0.206081 seconds (2.39 M allocations: 37.700 MiB)
Test Summary: | Pass  Total
sinexpox      |   17     17
Integrating sin(x)/x from 0 to 100 and comparing it to the exact result.
Running: adaptive_simpsons_rule with ε=1e-8
  0.002122 seconds (30.71 k allocations: 480.250 KiB)
Running: chebyshev_quadrature with k=1
  0.125653 seconds (2.40 k allocations: 1.688 MiB)
Running: chebyshev_quadrature with k=2
  0.139706 seconds (2.65 k allocations: 2.352 MiB)
Running: chebyshev_quadrature with k=3
  0.133664 seconds (3.08 k allocations: 2.052 MiB)
Running: chebyshev_quadrature with k=4
  0.138275 seconds (3.08 k allocations: 1.493 MiB)
Running: jacobi_quadrature with α=β=1
  9.560548 seconds (364.54 k allocations: 904.721 MiB, 3.20% gc time)
Running: legendre_quadrature
  0.085676 seconds (1.23 k allocations: 65.688 KiB)
Running: lobatto_quadrature
  0.000206 seconds (253 allocations: 9.188 KiB)
Running: radau_quadrature
  0.000169 seconds (221 allocations: 8.812 KiB)
Running: rectangle_rule_left; only a rough approximation can be practically achieved using this function
  3.718380 seconds (11 allocations: 528 bytes)
Running: rectangle_rule_midpoint
  0.000494 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right; only a rough approximation can be practically achieved using this function
  3.944649 seconds (11 allocations: 528 bytes)
Running: rombergs_method
  0.066490 seconds (959 allocations: 54.031 KiB)
Running: simpsons_rule
  0.000061 seconds (9 allocations: 496 bytes)
Running: simpsons38_rule
  0.000068 seconds (9 allocations: 496 bytes)
Running: trapezoidal_rule
  0.000950 seconds (9 allocations: 496 bytes)
Test Summary: | Pass  Total
sinxx         |   16     16
Integrating (x^3+1)/(x^4 (x+1)(x^2+1)) from 1 to e and comparing the result to the analytical solution of log(sqrt(2)*exp(1)/(sqrt(exp(2)+1)))+1/2*(exp(-2)-1)+1/3*(1-exp(-3))
Running: adaptive_simpsons_rule with ε=1e-8
  0.000815 seconds (6.34 k allocations: 99.453 KiB)
Running: chebyshev_quadrature with k=1
  0.119626 seconds (2.48 k allocations: 576.484 KiB)
Running: chebyshev_quadrature with k=2
  0.111794 seconds (2.73 k allocations: 777.266 KiB)
Running: chebyshev_quadrature with k=3
  0.137753 seconds (3.15 k allocations: 685.500 KiB)
Running: chebyshev_quadrature with k=4
  0.170018 seconds (3.16 k allocations: 516.062 KiB)
Running: jacobi_quadrature with α=β=1
  2.956261 seconds (371.10 k allocations: 252.863 MiB)
Running: legendre_quadrature
  0.075446 seconds (1.28 k allocations: 65.359 KiB)
Running: lobatto_quadrature
  0.000082 seconds (91 allocations: 3.656 KiB)
Running: radau_quadrature
  0.000036 seconds (81 allocations: 3.453 KiB)
Running: rectangle_rule_left; only a rough approximation can be practically achieved using this function.
 12.270841 seconds (11 allocations: 528 bytes)
Running: rectangle_rule_midpoint
  0.001153 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right; only a rough approximation can be practically achieved using this function.
 11.213892 seconds (11 allocations: 528 bytes)
Running: rombergs_method
  0.104294 seconds (1.18 k allocations: 62.547 KiB)
Running: simpsons_rule
  0.000058 seconds (9 allocations: 496 bytes)
Running: simpsons38_rule
  0.000046 seconds (9 allocations: 496 bytes)
Running: trapezoidal_rule
  0.001929 seconds (9 allocations: 496 bytes)
Test Summary: | Pass  Total
partfrac      |   16     16
    Testing FunctionIntegrator tests passed 
