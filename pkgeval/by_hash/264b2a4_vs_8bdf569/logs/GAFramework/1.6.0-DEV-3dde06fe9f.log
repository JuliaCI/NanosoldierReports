Julia Version 1.6.0-DEV.923
Commit 3dde06fe9f (2020-09-16 06:22 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.3
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_F0wjb5/Project.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_F0wjb5/Manifest.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21723351893352766
curgen: 20 fitness: 0.21723351893352766
curgen: 30 fitness: 0.21723351893352766
curgen: 40 fitness: 0.21723351893352766
curgen: 50 fitness: 0.21723351893352766
CoordinateCreature{Vector{Float64}}([0.22259784397146407], -0.21723351893352766) 0.22259784397146407 -0.21723351893352766
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.258210909524091
curgen: 100 fitness: 3.258309677372106
curgen: 150 fitness: 3.258366494837415
curgen: 200 fitness: 3.2584090346436674
curgen: 250 fitness: 3.2584396158239586
curgen: 300 fitness: 3.2584613258202784
curgen: 350 fitness: 3.2584664808362747
curgen: 400 fitness: 3.2584747977731765
curgen: 450 fitness: 3.2584791603146845
curgen: 500 fitness: 3.258480627320262
CoordinateCreature{Vector{Float64}}([0.22251461701874994, 0.22269257386055483, 0.2225426282161557, 0.2225743931882863, -0.2224877444995766, -0.22271754013187467, -0.22233767947997257, 0.2226743765322043, 0.22319002795558116, -0.2225326984406582, -0.22256285489585287, -0.22262854102327145, 0.22250204236282684, 0.22253675378027646, 0.22249766651815306], -3.258480627320262) [0.22251461701874994, 0.22269257386055483, 0.2225426282161557, 0.2225743931882863, -0.2224877444995766, -0.22271754013187467, -0.22233767947997257, 0.2226743765322043, 0.22319002795558116, -0.2225326984406582, -0.22256285489585287, -0.22262854102327145, 0.22250204236282684, 0.22253675378027646, 0.22249766651815306] -3.258480627320262
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.0006052656003703305
curgen: 100 fitness: -0.0006052656003703305
curgen: 150 fitness: -0.0006052656003703305
curgen: 200 fitness: -0.0002449229374121842
curgen: 250 fitness: -0.00018083688172509937
curgen: 300 fitness: -0.00018083688172509937
curgen: 350 fitness: -0.00018083688172509937
curgen: 400 fitness: -0.00017568577604265556
curgen: 450 fitness: -0.00017568577604265556
curgen: 500 fitness: -0.00017568577604265556
CoordinateCreature{Vector{Float64}}([0.0002226737117203767, 0.0003709401803949201, -1.780209723424613e-5, 4.249673508032012e-6, 0.0005214373890821891, 3.905695712053798e-5, 0.00013494870023148843, -3.51470244055567e-5, 0.00020112639126351753, -0.00019004613031456624, -0.00014253890142848155, 0.0001913060651637889, 8.068205685107365e-5, -0.0003130434248589637, -0.0004088694521308144], 0.00017568577604265556) [0.0002226737117203767, 0.0003709401803949201, -1.780209723424613e-5, 4.249673508032012e-6, 0.0005214373890821891, 3.905695712053798e-5, 0.00013494870023148843, -3.51470244055567e-5, 0.00020112639126351753, -0.00019004613031456624, -0.00014253890142848155, 0.0001913060651637889, 8.068205685107365e-5, -0.0003130434248589637, -0.0004088694521308144] 0.00017568577604265556
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
