Julia Version 1.6.0-DEV.918
Commit 8bdf5695e2 (2020-09-15 16:48 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.3
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_Nq7MmX/Project.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_Nq7MmX/Manifest.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21722236286079077
curgen: 20 fitness: 0.2172236370347996
curgen: 30 fitness: 0.2172236370347996
curgen: 40 fitness: 0.21723348383536964
curgen: 50 fitness: 0.21723348383536964
CoordinateCreature{Vector{Float64}}([0.22260526961771215], -0.21723348383536964) 0.22260526961771215 -0.21723348383536964
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.2567456465512374
curgen: 100 fitness: 3.2577898976053565
curgen: 150 fitness: 3.258199829574462
curgen: 200 fitness: 3.258248367164607
curgen: 250 fitness: 3.258257860510327
curgen: 300 fitness: 3.25826766727769
curgen: 350 fitness: 3.2583632674919425
curgen: 400 fitness: 3.2584264691746707
curgen: 450 fitness: 3.258441746346946
curgen: 500 fitness: 3.258456589207721
CoordinateCreature{Vector{Float64}}([-0.22256100513293345, -0.2228049873390787, 0.2226086696604565, -0.2224066572298498, -0.22265492615950905, 0.2224357908313099, 0.2223541180308898, -0.22213198827653985, -0.22268445515708749, 0.22219839404958527, -0.22230352642962964, 0.2225219671860496, -0.22247638394146377, -0.22327547716846696, 0.2226951521419713], -3.258456589207721) [-0.22256100513293345, -0.2228049873390787, 0.2226086696604565, -0.2224066572298498, -0.22265492615950905, 0.2224357908313099, 0.2223541180308898, -0.22213198827653985, -0.22268445515708749, 0.22219839404958527, -0.22230352642962964, 0.2225219671860496, -0.22247638394146377, -0.22327547716846696, 0.2226951521419713] -3.258456589207721
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.000683645037952374
curgen: 100 fitness: -0.0005933150153509814
curgen: 150 fitness: -0.0005190004281416805
curgen: 200 fitness: -0.00041678005464973467
curgen: 250 fitness: -0.0004114929589889016
curgen: 300 fitness: -0.0004114929589889016
curgen: 350 fitness: -0.0004114929589889016
curgen: 400 fitness: -0.0004114929589889016
curgen: 450 fitness: -0.0004114929589889016
curgen: 500 fitness: -0.0004093415937234113
CoordinateCreature{Vector{Float64}}([0.00026082161400717925, -0.0003225116207653091, 0.0005412234638066241, 0.000652539843591716, -0.0001610069782751474, 0.0004369468051028469, -0.00026212936285096986, -0.000757011331416404, 0.0002910011790555951, -1.8108426124536017e-5, 0.00014635194540190723, 0.0004229257042916718, -0.0001656997173968791, 3.109287942418425e-5, -1.3563168407309023e-5], 0.0004093415937234113) [0.00026082161400717925, -0.0003225116207653091, 0.0005412234638066241, 0.000652539843591716, -0.0001610069782751474, 0.0004369468051028469, -0.00026212936285096986, -0.000757011331416404, 0.0002910011790555951, -1.8108426124536017e-5, 0.00014635194540190723, 0.0004229257042916718, -0.0001656997173968791, 3.109287942418425e-5, -1.3563168407309023e-5] 0.0004093415937234113
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
