Julia Version 1.6.0-DEV.1120
Commit defde49587 (2020-10-03 04:30 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: AMD EPYC 7502 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-10.0.1 (ORCJIT, znver2)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed GMP_jll ───────────────────── v6.2.0+2
  Installed Glob ──────────────────────── v1.3.0
  Installed Compat ────────────────────── v3.18.0
  Installed TableTraits ───────────────── v1.0.0
  Installed StippleUI ─────────────────── v0.1.0
  Installed TextWrap ──────────────────── v1.0.1
  Installed Nettle ────────────────────── v0.5.0
  Installed AbstractTrees ─────────────── v0.3.3
  Installed Nullables ─────────────────── v1.0.0
  Installed DataAPI ───────────────────── v1.3.0
  Installed Observables ───────────────── v0.3.1
  Installed URIParser ─────────────────── v0.4.1
  Installed Reexport ──────────────────── v0.2.0
  Installed Gumbo_jll ─────────────────── v0.10.1+1
  Installed MacroTools ────────────────── v0.5.5
  Installed ArgParse ──────────────────── v1.1.0
  Installed Gumbo ─────────────────────── v0.8.0
  Installed MbedTLS ───────────────────── v1.0.2
  Installed HttpCommon ────────────────── v0.5.0
  Installed Revise ────────────────────── v2.7.6
  Installed MbedTLS_jll ───────────────── v2.16.8+0
  Installed Tables ────────────────────── v1.1.0
  Installed CategoricalArrays ─────────── v0.8.3
  Installed DataFrames ────────────────── v0.21.7
  Installed Nettle_jll ────────────────── v3.4.1+1
  Installed FilePaths ─────────────────── v0.8.1
  Installed YAML ──────────────────────── v0.4.2
  Installed InvertedIndices ───────────── v1.0.0
  Installed FilePathsBase ─────────────── v0.9.5
  Installed CodeTracking ──────────────── v0.5.12
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed LoweredCodeUtils ──────────── v0.4.9
  Installed HTTP ──────────────────────── v0.8.19
  Installed JuliaInterpreter ──────────── v0.7.26
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed Parsers ───────────────────── v1.0.10
  Installed Genie ─────────────────────── v1.3.0
  Installed Missings ──────────────────── v0.4.4
  Installed Millboard ─────────────────── v0.2.5
  Installed DataValueInterfaces ───────── v1.0.0
  Installed IniFile ───────────────────── v0.5.0
  Installed PooledArrays ──────────────── v0.5.3
  Installed LoggingExtras ─────────────── v0.4.2
  Installed StructTypes ───────────────── v1.1.0
  Installed JSON ──────────────────────── v0.21.1
  Installed Stipple ───────────────────── v0.2.0
  Installed OrderedCollections ────────── v1.3.1
  Installed DataStructures ────────────── v0.18.6
Updating `~/.julia/environments/v1.6/Project.toml`
  [a3c5d34a] + StippleUI v0.1.0
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [1520ce14] + AbstractTrees v0.3.3
  [c7e460c6] + ArgParse v1.1.0
  [324d7699] + CategoricalArrays v0.8.3
  [da1fd8a2] + CodeTracking v0.5.12
  [34da2185] + Compat v3.18.0
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.21.7
  [864edb3b] + DataStructures v0.18.6
  [e2d170a0] + DataValueInterfaces v1.0.0
  [8fc22ac5] + FilePaths v0.8.1
  [48062228] + FilePathsBase v0.9.5
  [781609d7] + GMP_jll v6.2.0+2
  [c43c736e] + Genie v1.3.0
  [c27321d9] + Glob v1.3.0
  [708ec375] + Gumbo v0.8.0
  [528830af] + Gumbo_jll v0.10.1+1
  [cd3eb016] + HTTP v0.8.19
  [77172c1b] + HttpCommon v0.5.0
  [83e8ac13] + IniFile v0.5.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.1
  [aa1ae85d] + JuliaInterpreter v0.7.26
  [e6f89c97] + LoggingExtras v0.4.2
  [6f1432cf] + LoweredCodeUtils v0.4.9
  [1914dd2f] + MacroTools v0.5.5
  [739be429] + MbedTLS v1.0.2
  [c8ffd9c3] + MbedTLS_jll v2.16.8+0
  [39ec1447] + Millboard v0.2.5
  [e1d29d7a] + Missings v0.4.4
  [49dea1ee] + Nettle v0.5.0
  [4c82536e] + Nettle_jll v3.4.1+1
  [4d1e1d77] + Nullables v1.0.0
  [510215fc] + Observables v0.3.1
  [bac558e1] + OrderedCollections v1.3.1
  [69de0a69] + Parsers v1.0.10
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [295af30f] + Revise v2.7.6
  [a2af1166] + SortingAlgorithms v0.3.1
  [4acbeb90] + Stipple v0.2.0
  [a3c5d34a] + StippleUI v0.1.0
  [856f2bd8] + StructTypes v1.1.0
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.1.0
  [b718987f] + TextWrap v1.0.1
  [30578b45] + URIParser v0.4.1
  [ddb6d928] + YAML v0.4.2
  [56f22d72] + Artifacts
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [7b1f6079] + FileWatching
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing StippleUI
Status `/tmp/jl_XjUGo0/Project.toml`
  [a93c6f00] DataFrames v0.21.7
  [c43c736e] Genie v1.3.0
  [682c06a0] JSON v0.21.1
  [295af30f] Revise v2.7.6
  [4acbeb90] Stipple v0.2.0
  [a3c5d34a] StippleUI v0.1.0
  [8dfed614] Test
Status `/tmp/jl_XjUGo0/Manifest.toml`
  [1520ce14] AbstractTrees v0.3.3
  [c7e460c6] ArgParse v1.1.0
  [324d7699] CategoricalArrays v0.8.3
  [da1fd8a2] CodeTracking v0.5.12
  [34da2185] Compat v3.18.0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.21.7
  [864edb3b] DataStructures v0.18.6
  [e2d170a0] DataValueInterfaces v1.0.0
  [8fc22ac5] FilePaths v0.8.1
  [48062228] FilePathsBase v0.9.5
  [781609d7] GMP_jll v6.2.0+2
  [c43c736e] Genie v1.3.0
  [c27321d9] Glob v1.3.0
  [708ec375] Gumbo v0.8.0
  [528830af] Gumbo_jll v0.10.1+1
  [cd3eb016] HTTP v0.8.19
  [77172c1b] HttpCommon v0.5.0
  [83e8ac13] IniFile v0.5.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.1
  [aa1ae85d] JuliaInterpreter v0.7.26
  [e6f89c97] LoggingExtras v0.4.2
  [6f1432cf] LoweredCodeUtils v0.4.9
  [1914dd2f] MacroTools v0.5.5
  [739be429] MbedTLS v1.0.2
  [c8ffd9c3] MbedTLS_jll v2.16.8+0
  [39ec1447] Millboard v0.2.5
  [e1d29d7a] Missings v0.4.4
  [49dea1ee] Nettle v0.5.0
  [4c82536e] Nettle_jll v3.4.1+1
  [4d1e1d77] Nullables v1.0.0
  [510215fc] Observables v0.3.1
  [bac558e1] OrderedCollections v1.3.1
  [69de0a69] Parsers v1.0.10
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [295af30f] Revise v2.7.6
  [a2af1166] SortingAlgorithms v0.3.1
  [4acbeb90] Stipple v0.2.0
  [a3c5d34a] StippleUI v0.1.0
  [856f2bd8] StructTypes v1.1.0
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.1.0
  [b718987f] TextWrap v1.0.1
  [30578b45] URIParser v0.4.1
  [ddb6d928] YAML v0.4.2
  [56f22d72] Artifacts
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [7b1f6079] FileWatching
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
┌ Error: evaluation error starting at /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Badge.jl:12
│   mod = StippleUI.Badge
│   ex =
│    quote
│        #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Badge.jl:12 =#
│        function badge(label::String = "", fieldname::Union{Symbol, Nothing} = nothing, args...; wrap::Function = StippleUI.DEFAULT_WRAPPER, kwargs...)
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Badge.jl:12 =#
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Badge.jl:17 =#
│            wrap() do 
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Badge.jl:18 =#
│                q__badge(args...; attributes([:label => label, :fieldname => fieldname, kwargs...], Dict("fieldname" => "v-model", "textcolor" => "text-color", "multiline" => "multi-line"))...)
│            end
│        end
│    end
│   exception =
│    Evaluation into the closed module `Badge` breaks incremental compilation because the side effects will not be permanent. This is likely due to some other module mutating `Badge` with `eval` during precompilation - don't do this.
│    Stacktrace:
│     [1] eval
│       @ ./boot.jl:360 [inlined]
│     [2] step_expr!(recurse::Any, frame::JuliaInterpreter.Frame, node::Any, istoplevel::Bool)
│       @ JuliaInterpreter ~/.julia/packages/JuliaInterpreter/CPmYX/src/interpret.jl:506
└ @ Revise ~/.julia/packages/Revise/qxX5H/src/lowered.jl:106
┌ Error: evaluation error starting at /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Banner.jl:12
│   mod = StippleUI.Banner
│   ex =
│    quote
│        #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Banner.jl:12 =#
│        function banner(content::String = "", args...; buttons::Vector{String} = String[], icon::Union{String, Nothing} = nothing, wrap::Function = StippleUI.DEFAULT_WRAPPER, kwargs...)
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Banner.jl:12 =#
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Banner.jl:19 =#
│            wrap() do 
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Banner.jl:20 =#
│                q__banner(args...; kwargs...) do 
│                    #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Banner.jl:21 =#
│                    string(if icon !== nothing
│                            wrap((()->begin
│                                        #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Banner.jl:22 =#
│                                        icon
│                                    end), Symbol("v-slot:avatar"))
│                        else
│                            ""
│                        end, content, if !(isempty(buttons))
│                            wrap((()->begin
│                                        #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Banner.jl:24 =#
│                                        join(buttons, "\n")
│                                    end), Symbol("v-slot:action"))
│                        else
│                            ""
│                        end)
│                end
│            end
│        end
│    end
│   exception =
│    Evaluation into the closed module `Banner` breaks incremental compilation because the side effects will not be permanent. This is likely due to some other module mutating `Banner` with `eval` during precompilation - don't do this.
│    Stacktrace:
│     [1] eval
│       @ ./boot.jl:360 [inlined]
│     [2] step_expr!(recurse::Any, frame::JuliaInterpreter.Frame, node::Any, istoplevel::Bool)
│       @ JuliaInterpreter ~/.julia/packages/JuliaInterpreter/CPmYX/src/interpret.jl:506
└ @ Revise ~/.julia/packages/Revise/qxX5H/src/lowered.jl:106
┌ Error: evaluation error starting at /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/BigNumber.jl:12
│   mod = StippleUI.BigNumber
│   ex =
│    quote
│        #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/BigNumber.jl:12 =#
│        function bignumber(label::Union{String, Symbol} = "", number::Union{Symbol, Number, Nothing} = nothing, args...; wrap::Function = StippleUI.DEFAULT_WRAPPER, kwargs...)
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/BigNumber.jl:27 =#
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/BigNumber.jl:32 =#
│            wrap() do 
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/BigNumber.jl:33 =#
│                st__big__number(args...; attributes([:title => label, :number => number, kwargs...])...)
│            end
│        end
│    end
│   exception =
│    Evaluation into the closed module `BigNumber` breaks incremental compilation because the side effects will not be permanent. This is likely due to some other module mutating `BigNumber` with `eval` during precompilation - don't do this.
│    Stacktrace:
│     [1] eval
│       @ ./boot.jl:360 [inlined]
│     [2] step_expr!(recurse::Any, frame::JuliaInterpreter.Frame, node::Any, istoplevel::Bool)
│       @ JuliaInterpreter ~/.julia/packages/JuliaInterpreter/CPmYX/src/interpret.jl:506
└ @ Revise ~/.julia/packages/Revise/qxX5H/src/lowered.jl:106
┌ Error: evaluation error starting at /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Button.jl:13
│   mod = StippleUI.Button
│   ex =
│    quote
│        #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Button.jl:13 =#
│        function button(label::String = "", args...; wrap::Function = StippleUI.DEFAULT_WRAPPER, kwargs...)
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Button.jl:13 =#
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Button.jl:18 =#
│            wrap() do 
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Button.jl:19 =#
│                q__btn(args...; attributes([:label => label, kwargs...], Dict("iconright" => "icon-right", "textcolor" => "text-color", "stacked" => "stack", "nocaps" => "no-caps", "darkpercentage" => "dark-percentage"))...)
│            end
│        end
│    end
│   exception =
│    Evaluation into the closed module `Button` breaks incremental compilation because the side effects will not be permanent. This is likely due to some other module mutating `Button` with `eval` during precompilation - don't do this.
│    Stacktrace:
│     [1] eval
│       @ ./boot.jl:360 [inlined]
│     [2] step_expr!(recurse::Any, frame::JuliaInterpreter.Frame, node::Any, istoplevel::Bool)
│       @ JuliaInterpreter ~/.julia/packages/JuliaInterpreter/CPmYX/src/interpret.jl:506
└ @ Revise ~/.julia/packages/Revise/qxX5H/src/lowered.jl:106
┌ Error: evaluation error starting at /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Button.jl:26
│   mod = StippleUI.Button
│   ex =
│    quote
│        #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Button.jl:26 =#
│        function buttongroup(args...; wrap::Function = StippleUI.DEFAULT_WRAPPER, kwargs...)
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Button.jl:26 =#
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Button.jl:29 =#
│            wrap() do 
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Button.jl:30 =#
│                q__btn__group(args...; kwargs...)
│            end
│        end
│    end
│   exception =
│    Evaluation into the closed module `Button` breaks incremental compilation because the side effects will not be permanent. This is likely due to some other module mutating `Button` with `eval` during precompilation - don't do this.
│    Stacktrace:
│     [1] eval
│       @ ./boot.jl:360 [inlined]
│     [2] step_expr!(recurse::Any, frame::JuliaInterpreter.Frame, node::Any, istoplevel::Bool)
│       @ JuliaInterpreter ~/.julia/packages/JuliaInterpreter/CPmYX/src/interpret.jl:506
└ @ Revise ~/.julia/packages/Revise/qxX5H/src/lowered.jl:106
┌ Error: evaluation error starting at /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Card.jl:14
│   mod = StippleUI.Card
│   ex =
│    quote
│        #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Card.jl:14 =#
│        function card(args...; wrap::Function = StippleUI.DEFAULT_WRAPPER, kwargs...)
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Card.jl:14 =#
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Card.jl:17 =#
│            wrap() do 
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Card.jl:18 =#
│                q__card(args...; kwargs...)
│            end
│        end
│    end
│   exception =
│    Evaluation into the closed module `Card` breaks incremental compilation because the side effects will not be permanent. This is likely due to some other module mutating `Card` with `eval` during precompilation - don't do this.
│    Stacktrace:
│     [1] eval
│       @ ./boot.jl:360 [inlined]
│     [2] step_expr!(recurse::Any, frame::JuliaInterpreter.Frame, node::Any, istoplevel::Bool)
│       @ JuliaInterpreter ~/.julia/packages/JuliaInterpreter/CPmYX/src/interpret.jl:506
└ @ Revise ~/.julia/packages/Revise/qxX5H/src/lowered.jl:106
┌ Error: evaluation error starting at /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Card.jl:22
│   mod = StippleUI.Card
│   ex =
│    quote
│        #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Card.jl:22 =#
│        function card_section(args...; kwargs...)
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Card.jl:22 =#
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Card.jl:23 =#
│            q__card__section(args...; kwargs...)
│        end
│    end
│   exception =
│    Evaluation into the closed module `Card` breaks incremental compilation because the side effects will not be permanent. This is likely due to some other module mutating `Card` with `eval` during precompilation - don't do this.
│    Stacktrace:
│     [1] eval
│       @ ./boot.jl:360 [inlined]
│     [2] evaluate_methoddef(frame::JuliaInterpreter.Frame, node::Expr)
│       @ JuliaInterpreter ~/.julia/packages/JuliaInterpreter/CPmYX/src/interpret.jl:268
└ @ Revise ~/.julia/packages/Revise/qxX5H/src/lowered.jl:106
┌ Error: evaluation error starting at /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Card.jl:26
│   mod = StippleUI.Card
│   ex =
│    quote
│        #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Card.jl:26 =#
│        function card_actions(args...; kwargs...)
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Card.jl:26 =#
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Card.jl:27 =#
│            q__card__actions(args...; kwargs...)
│        end
│    end
│   exception =
│    Evaluation into the closed module `Card` breaks incremental compilation because the side effects will not be permanent. This is likely due to some other module mutating `Card` with `eval` during precompilation - don't do this.
│    Stacktrace:
│     [1] eval
│       @ ./boot.jl:360 [inlined]
│     [2] evaluate_methoddef(frame::JuliaInterpreter.Frame, node::Expr)
│       @ JuliaInterpreter ~/.julia/packages/JuliaInterpreter/CPmYX/src/interpret.jl:268
└ @ Revise ~/.julia/packages/Revise/qxX5H/src/lowered.jl:106
┌ Error: evaluation error starting at /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Checkbox.jl:12
│   mod = StippleUI.Checkbox
│   ex =
│    quote
│        #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Checkbox.jl:12 =#
│        function checkbox(label::String = "", fieldname::Union{Symbol, Nothing} = nothing, args...; wrap::Function = StippleUI.DEFAULT_WRAPPER, kwargs...)
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Checkbox.jl:12 =#
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Checkbox.jl:18 =#
│            wrap() do 
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Checkbox.jl:19 =#
│                q__checkbox(args...; attributes([:label => label, :fieldname => fieldname, kwargs...], Dict("fieldname" => "v-model", "indeterminatevalue" => "indeterminate-value", "toggleorder" => "toggle-order", "truevalue" => "true-value", "falsevalue" => "false-value", "toggleindeterminate" => "toggle-indeterminate", "keepcolor" => "keep-color", "leftlabel" => "left-label"))...)
│            end
│        end
│    end
│   exception =
│    Evaluation into the closed module `Checkbox` breaks incremental compilation because the side effects will not be permanent. This is likely due to some other module mutating `Checkbox` with `eval` during precompilation - don't do this.
│    Stacktrace:
│     [1] eval
│       @ ./boot.jl:360 [inlined]
│     [2] step_expr!(recurse::Any, frame::JuliaInterpreter.Frame, node::Any, istoplevel::Bool)
│       @ JuliaInterpreter ~/.julia/packages/JuliaInterpreter/CPmYX/src/interpret.jl:506
└ @ Revise ~/.julia/packages/Revise/qxX5H/src/lowered.jl:106
┌ Error: evaluation error starting at /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Chip.jl:12
│   mod = StippleUI.Chip
│   ex =
│    quote
│        #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Chip.jl:12 =#
│        function chip(label::String = "", fieldname::Union{Symbol, Nothing} = nothing, args...; wrap::Function = StippleUI.DEFAULT_WRAPPER, kwargs...)
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Chip.jl:12 =#
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Chip.jl:18 =#
│            wrap() do 
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Chip.jl:19 =#
│                q__chip(args...; attributes([:label => label, :fieldname => fieldname, kwargs...], Dict("fieldname" => "v-model", "iconremove" => "icon-remove", "iconright" => "icon-right", "textcolor" => "text-color"))...)
│            end
│        end
│    end
│   exception =
│    Evaluation into the closed module `Chip` breaks incremental compilation because the side effects will not be permanent. This is likely due to some other module mutating `Chip` with `eval` during precompilation - don't do this.
│    Stacktrace:
│     [1] eval
│       @ ./boot.jl:360 [inlined]
│     [2] step_expr!(recurse::Any, frame::JuliaInterpreter.Frame, node::Any, istoplevel::Bool)
│       @ JuliaInterpreter ~/.julia/packages/JuliaInterpreter/CPmYX/src/interpret.jl:506
└ @ Revise ~/.julia/packages/Revise/qxX5H/src/lowered.jl:106
┌ Error: evaluation error starting at /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Dashboard.jl:12
│   mod = StippleUI.Dashboard
│   ex =
│    quote
│        #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Dashboard.jl:12 =#
│        function dashboard(args...; wrap::Function = StippleUI.DEFAULT_WRAPPER, kwargs...)
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Dashboard.jl:12 =#
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Dashboard.jl:16 =#
│            wrap() do 
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Dashboard.jl:17 =#
│                st__dashboard(args...; kwargs...)
│            end
│        end
│    end
│   exception =
│    Evaluation into the closed module `Dashboard` breaks incremental compilation because the side effects will not be permanent. This is likely due to some other module mutating `Dashboard` with `eval` during precompilation - don't do this.
│    Stacktrace:
│     [1] eval
│       @ ./boot.jl:360 [inlined]
│     [2] step_expr!(recurse::Any, frame::JuliaInterpreter.Frame, node::Any, istoplevel::Bool)
│       @ JuliaInterpreter ~/.julia/packages/JuliaInterpreter/CPmYX/src/interpret.jl:506
└ @ Revise ~/.julia/packages/Revise/qxX5H/src/lowered.jl:106
┌ Error: evaluation error starting at /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Dashboard.jl:21
│   mod = StippleUI.Dashboard
│   ex =
│    quote
│        #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Dashboard.jl:21 =#
│        function dashboard(elemid, content::Union{String, Vector}; partial::Bool = false, title::String = "Stipple Dashboard", class::String = "", style::String = "", kwargs...)
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Dashboard.jl:21 =#
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Dashboard.jl:22 =#
│            content = if content isa Vector
│                    #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Dashboard.jl:23 =#
│                    push!(pushfirst!(content, "<st-dashboard>"), "</st-dashboard>")
│                else
│                    #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Dashboard.jl:25 =#
│                    string("<st-dashboard>", content, "</st-dashboard>")
│                end
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Dashboard.jl:27 =#
│            kwargs = NamedTuple(delete!(Dict(kwargs...), :id), :id, elemid)
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Dashboard.jl:29 =#
│            Stipple.layout(Genie.Renderer.Html.div(content; kwargs...), partial = partial, title = title, class = class, style = style)
│        end
│    end
│   exception =
│    Evaluation into the closed module `Core` breaks incremental compilation because the side effects will not be permanent. This is likely due to some other module mutating `Core` with `eval` during precompilation - don't do this.
│    Stacktrace:
│     [1] eval
│       @ ./boot.jl:360 [inlined]
│     [2] evaluate_foreigncall(frame::JuliaInterpreter.Frame, call_expr::Expr)
│       @ JuliaInterpreter ~/.julia/packages/JuliaInterpreter/CPmYX/src/interpret.jl:167
└ @ Revise ~/.julia/packages/Revise/qxX5H/src/lowered.jl:106
┌ Error: evaluation error starting at /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Dialog.jl:12
│   mod = StippleUI.Dialog
│   ex =
│    quote
│        #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Dialog.jl:12 =#
│        function dialog(args...; wrap::Function = StippleUI.DEFAULT_WRAPPER, kwargs...)
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Dialog.jl:12 =#
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Dialog.jl:16 =#
│            wrap() do 
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Dialog.jl:17 =#
│                q__dialog(args...; attributes([kwargs...], Dict("nobackdrop" => "no-backdrop-dismiss", "autoclose" => "auto-close", "noesc" => "no-esc-dismiss", "transitionshow" => "transition-show", "transitionhide" => "transition-hide", "norefocus" => "no-refocus", "nofocus" => "no-focus", "fullwidth" => "full-width", "fullheight" => "full-height", "contentclass" => "content-class", "contentstyle" => "content-style"))...)
│            end
│        end
│    end
│   exception =
│    Evaluation into the closed module `Dialog` breaks incremental compilation because the side effects will not be permanent. This is likely due to some other module mutating `Dialog` with `eval` during precompilation - don't do this.
│    Stacktrace:
│     [1] eval
│       @ ./boot.jl:360 [inlined]
│     [2] step_expr!(recurse::Any, frame::JuliaInterpreter.Frame, node::Any, istoplevel::Bool)
│       @ JuliaInterpreter ~/.julia/packages/JuliaInterpreter/CPmYX/src/interpret.jl:506
└ @ Revise ~/.julia/packages/Revise/qxX5H/src/lowered.jl:106
┌ Error: evaluation error starting at /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Form.jl:14
│   mod = StippleUI.Form
│   ex =
│    quote
│        #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Form.jl:14 =#
│        function form(args...; wrap::Function = StippleUI.DEFAULT_WRAPPER, noresetfocus::Bool = false, kwargs...)
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Form.jl:14 =#
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Form.jl:19 =#
│            wrap() do 
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Form.jl:20 =#
│                q__form(args...; attributes([kwargs...], Dict("noerrorfocus" => "no-error-focus", "noresetfocus" => "no-reset-focus"))...)
│            end
│        end
│    end
│   exception =
│    Evaluation into the closed module `Form` breaks incremental compilation because the side effects will not be permanent. This is likely due to some other module mutating `Form` with `eval` during precompilation - don't do this.
│    Stacktrace:
│     [1] eval
│       @ ./boot.jl:360 [inlined]
│     [2] step_expr!(recurse::Any, frame::JuliaInterpreter.Frame, node::Any, istoplevel::Bool)
│       @ JuliaInterpreter ~/.julia/packages/JuliaInterpreter/CPmYX/src/interpret.jl:506
└ @ Revise ~/.julia/packages/Revise/qxX5H/src/lowered.jl:106
┌ Error: evaluation error starting at /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:15
│   mod = StippleUI.FormInput
│   ex =
│    quote
│        #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:15 =#
│        function textfield(fieldname::Union{Symbol, Nothing} = nothing, args...; label::String = "", labelcolor::Union{String, Nothing} = nothing, labelslot::Union{String, Nothing} = nothing, bgcolor::Union{String, Nothing} = nothing, inputclass::Union{String, Nothing} = nothing, inputstyle::Union{String, Nothing} = nothing, clearicon::Union{String, Nothing} = nothing, fillmask::Union{String, Nothing} = nothing, rules::Union{String, Nothing} = nothing, errormessage::Union{String, Nothing} = nothing, shadowtext::Union{String, Nothing} = nothing, bottomslots::Bool = false, stacklabel::Bool = false, unmaskedvalue::Bool = false, reversefillmask::Bool = false, lazyrules::Bool = false, reactiverules::Bool = false, noerroricon::Bool = false, hidehint::Bool = false, hidebottomspace::Bool = false, itemaligned::Bool = false, kwargs...)
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:15 =#
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:41 =#
│            k = (:label,)
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:42 =#
│            v = Any[label]
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:44 =#
│            if fieldname !== nothing
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:45 =#
│                k = (k..., Symbol("v-model"))
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:46 =#
│                push!(v, fieldname)
│            end
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:49 =#
│            if labelcolor !== nothing
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:50 =#
│                k = (k..., Symbol("label-color"))
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:51 =#
│                push!(v, labelcolor)
│            end
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:54 =#
│            if labelslot !== nothing
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:55 =#
│                k = (k..., Symbol("label-slot"))
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:56 =#
│                push!(v, labelslot)
│            end
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:59 =#
│            if bgcolor !== nothing
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:60 =#
│                k = (k..., Symbol("bg-color"))
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:61 =#
│                push!(v, bgcolor)
│            end
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:64 =#
│            if inputclass !== nothing
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:65 =#
│                k = (k..., Symbol("input-class"))
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:66 =#
│                push!(v, inputclass)
│            end
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:69 =#
│            if inputstyle !== nothing
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:70 =#
│                k = (k..., Symbol("input-style"))
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:71 =#
│                push!(v, inputstyle)
│            end
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:74 =#
│            if clearicon !== nothing
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:75 =#
│                k = (k..., Symbol("clear-icon"))
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:76 =#
│                push!(v, clearicon)
│            end
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:79 =#
│            if fillmask !== nothing
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:80 =#
│                k = (k..., Symbol("fill-mask"))
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:81 =#
│                push!(v, fillmask)
│            end
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:84 =#
│            if rules !== nothing
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:85 =#
│                k = (k..., Symbol(":rules"))
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:86 =#
│                push!(v, rules)
│            end
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:89 =#
│            if errormessage !== nothing
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:90 =#
│                k = (k..., Symbol("error-message"))
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:91 =#
│                push!(v, errormessage)
│            end
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:94 =#
│            if shadowtext !== nothing
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:95 =#
│                k = (k..., Symbol("shadow-text"))
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:96 =#
│                push!(v, shadowtext)
│            end
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:99 =#
│            if bottomslots
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:100 =#
│                k = (k..., Symbol("bottom-slots"))
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:101 =#
│                push!(v, true)
│            end
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:104 =#
│            if stacklabel
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:105 =#
│                k = (k..., Symbol("stack-label"))
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:106 =#
│                push!(v, true)
│            end
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:109 =#
│            if unmaskedvalue
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:110 =#
│                k = (k..., Symbol("unmasked-value"))
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:111 =#
│                push!(v, true)
│            end
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:114 =#
│            if reversefillmask
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:115 =#
│                k = (k..., Symbol("reverse-fill-mask"))
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:116 =#
│                push!(v, true)
│            end
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:119 =#
│            if lazyrules
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:120 =#
│                k = (k..., Symbol("lazy-rules"))
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:121 =#
│                push!(v, true)
│            end
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:124 =#
│            if reactiverules
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:125 =#
│                k = (k..., Symbol("reactive-rules"))
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:126 =#
│                push!(v, true)
│            end
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:129 =#
│            if noerroricon
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:130 =#
│                k = (k..., Symbol("no-error-icon"))
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:131 =#
│                push!(v, true)
│            end
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:134 =#
│            if hidehint
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:135 =#
│                k = (k..., Symbol("hide-hint"))
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:136 =#
│                push!(v, true)
│            end
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:139 =#
│            if hidebottomspace
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:140 =#
│                k = (k..., Symbol("hide-bottom-space"))
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:141 =#
│                push!(v, true)
│            end
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:144 =#
│            if itemaligned
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:145 =#
│                k = (k..., Symbol("item-aligned"))
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:146 =#
│                push!(v, true)
│            end
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:149 =#
│            template() do 
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:150 =#
│                q__input(; kwargs..., NamedTuple{k}(v)...)
│            end
│        end
│    end
│   exception =
│    Evaluation into the closed module `FormInput` breaks incremental compilation because the side effects will not be permanent. This is likely due to some other module mutating `FormInput` with `eval` during precompilation - don't do this.
│    Stacktrace:
│     [1] eval
│       @ ./boot.jl:360 [inlined]
│     [2] step_expr!(recurse::Any, frame::JuliaInterpreter.Frame, node::Any, istoplevel::Bool)
│       @ JuliaInterpreter ~/.julia/packages/JuliaInterpreter/CPmYX/src/interpret.jl:506
└ @ Revise ~/.julia/packages/Revise/qxX5H/src/lowered.jl:106
┌ Error: evaluation error starting at /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:154
│   mod = StippleUI.FormInput
│   ex =
│    quote
│        #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:154 =#
│        function numberfield(fieldname::Union{Symbol, Nothing} = nothing, args...; kwargs...)
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:154 =#
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:159 =#
│            kwargs = Dict{Symbol, Any}(kwargs...)
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:161 =#
│            fieldname !== nothing && (kwargs[Symbol("v-model.number")] = fieldname)
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:162 =#
│            kwargs[:type] = :number
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:164 =#
│            textfield(nothing; Stipple.NamedTuple(kwargs)...)
│        end
│    end
│   exception =
│    Evaluation into the closed module `FormInput` breaks incremental compilation because the side effects will not be permanent. This is likely due to some other module mutating `FormInput` with `eval` during precompilation - don't do this.
│    Stacktrace:
│     [1] eval
│       @ ./boot.jl:360 [inlined]
│     [2] evaluate_methoddef(frame::JuliaInterpreter.Frame, node::Expr)
│       @ JuliaInterpreter ~/.julia/packages/JuliaInterpreter/CPmYX/src/interpret.jl:268
└ @ Revise ~/.julia/packages/Revise/qxX5H/src/lowered.jl:106
┌ Error: evaluation error starting at /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:167
│   mod = StippleUI.FormInput
│   ex =
│    quote
│        #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:167 =#
│        function textarea(fieldname::Union{Symbol, Nothing} = nothing, args...; kwargs...)
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:167 =#
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:172 =#
│            kwargs = Dict{Symbol, Any}(kwargs...)
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:173 =#
│            kwargs[:type] = :textarea
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:175 =#
│            textfield(fieldname; Stipple.NamedTuple(kwargs)...)
│        end
│    end
│   exception =
│    Evaluation into the closed module `FormInput` breaks incremental compilation because the side effects will not be permanent. This is likely due to some other module mutating `FormInput` with `eval` during precompilation - don't do this.
│    Stacktrace:
│     [1] eval
│       @ ./boot.jl:360 [inlined]
│     [2] evaluate_methoddef(frame::JuliaInterpreter.Frame, node::Expr)
│       @ JuliaInterpreter ~/.julia/packages/JuliaInterpreter/CPmYX/src/interpret.jl:268
└ @ Revise ~/.julia/packages/Revise/qxX5H/src/lowered.jl:106
┌ Error: evaluation error starting at /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:178
│   mod = StippleUI.FormInput
│   ex =
│    quote
│        #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:178 =#
│        function filefield(fieldname::Union{Symbol, Nothing} = nothing, args...; label::String = "", labelcolor::Union{String, Nothing} = nothing, labelslot::Union{String, Nothing} = nothing, bgcolor::Union{String, Nothing} = nothing, inputclass::Union{String, Nothing} = nothing, inputstyle::Union{String, Nothing} = nothing, clearicon::Union{String, Nothing} = nothing, rules::Union{String, Nothing} = nothing, errormessage::Union{String, Nothing} = nothing, maxfilesize::Union{String, Number, Nothing} = nothing, maxtotalsize::Union{String, Number, Nothing} = nothing, maxfiles::Union{String, Number, Nothing} = nothing, counterlabel::Union{String, Nothing} = nothing, displayvalue::Union{String, Number, Nothing} = nothing, bottomslots::Bool = false, stacklabel::Bool = false, lazyrules::Bool = false, reactiverules::Bool = false, noerroricon::Bool = false, hidehint::Bool = false, hidebottomspace::Bool = false, itemaligned::Bool = false, kwargs...)
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:178 =#
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:205 =#
│            k = (:label,)
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:206 =#
│            v = Any[label]
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:208 =#
│            if fieldname !== nothing
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:209 =#
│                k = (k..., Symbol("v-model"))
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:210 =#
│                push!(v, fieldname)
│            end
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:213 =#
│            if labelcolor !== nothing
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:214 =#
│                k = (k..., Symbol("label-color"))
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:215 =#
│                push!(v, labelcolor)
│            end
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:218 =#
│            if labelslot !== nothing
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:219 =#
│                k = (k..., Symbol("label-slot"))
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:220 =#
│                push!(v, labelslot)
│            end
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:223 =#
│            if bgcolor !== nothing
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:224 =#
│                k = (k..., Symbol("bg-color"))
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:225 =#
│                push!(v, bgcolor)
│            end
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:228 =#
│            if inputclass !== nothing
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:229 =#
│                k = (k..., Symbol("input-class"))
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:230 =#
│                push!(v, inputclass)
│            end
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:233 =#
│            if inputstyle !== nothing
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:234 =#
│                k = (k..., Symbol("input-style"))
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:235 =#
│                push!(v, inputstyle)
│            end
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:238 =#
│            if clearicon !== nothing
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:239 =#
│                k = (k..., Symbol("clear-icon"))
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:240 =#
│                push!(v, clearicon)
│            end
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:243 =#
│            if rules !== nothing
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:244 =#
│                k = (k..., Symbol(":rules"))
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:245 =#
│                push!(v, rules)
│            end
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:248 =#
│            if errormessage !== nothing
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:249 =#
│                k = (k..., Symbol("error-message"))
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:250 =#
│                push!(v, errormessage)
│            end
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:253 =#
│            if maxfilesize !== nothing
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:254 =#
│                k = (k..., Symbol("max-file-size"))
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:255 =#
│                push!(v, maxfilesize)
│            end
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:258 =#
│            if maxtotalsize !== nothing
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:259 =#
│                k = (k..., Symbol("max-total-size"))
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:260 =#
│                push!(v, maxtotalsize)
│            end
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:263 =#
│            if maxfiles !== nothing
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:264 =#
│                k = (k..., Symbol("max-files"))
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:265 =#
│                push!(v, maxfiles)
│            end
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:268 =#
│            if counterlabel !== nothing
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:269 =#
│                k = (k..., Symbol("counter-label"))
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:270 =#
│                push!(v, counterlabel)
│            end
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:273 =#
│            if displayvalue !== nothing
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:274 =#
│                k = (k..., Symbol("display-value"))
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:275 =#
│                push!(v, displayvalue)
│            end
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:278 =#
│            if bottomslots
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:279 =#
│                k = (k..., Symbol("bottom-slots"))
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:280 =#
│                push!(v, true)
│            end
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:283 =#
│            if stacklabel
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:284 =#
│                k = (k..., Symbol("stack-label"))
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:285 =#
│                push!(v, true)
│            end
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:288 =#
│            if lazyrules
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:289 =#
│                k = (k..., Symbol("lazy-rules"))
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:290 =#
│                push!(v, true)
│            end
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:293 =#
│            if reactiverules
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:294 =#
│                k = (k..., Symbol("reactive-rules"))
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:295 =#
│                push!(v, true)
│            end
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:298 =#
│            if noerroricon
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:299 =#
│                k = (k..., Symbol("no-error-icon"))
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:300 =#
│                push!(v, true)
│            end
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:303 =#
│            if hidehint
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:304 =#
│                k = (k..., Symbol("hide-hint"))
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:305 =#
│                push!(v, true)
│            end
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:308 =#
│            if hidebottomspace
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:309 =#
│                k = (k..., Symbol("hide-bottom-space"))
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:310 =#
│                push!(v, true)
│            end
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:313 =#
│            if itemaligned
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:314 =#
│                k = (k..., Symbol("item-aligned"))
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:315 =#
│                push!(v, true)
│            end
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:318 =#
│            template() do 
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/FormInput.jl:319 =#
│                q__file(args...; kwargs..., NamedTuple{k}(v)...)
│            end
│        end
│    end
│   exception =
│    Evaluation into the closed module `FormInput` breaks incremental compilation because the side effects will not be permanent. This is likely due to some other module mutating `FormInput` with `eval` during precompilation - don't do this.
│    Stacktrace:
│     [1] eval
│       @ ./boot.jl:360 [inlined]
│     [2] step_expr!(recurse::Any, frame::JuliaInterpreter.Frame, node::Any, istoplevel::Bool)
│       @ JuliaInterpreter ~/.julia/packages/JuliaInterpreter/CPmYX/src/interpret.jl:506
└ @ Revise ~/.julia/packages/Revise/qxX5H/src/lowered.jl:106
┌ Error: evaluation error starting at /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Heading.jl:9
│   mod = StippleUI.Heading
│   ex =
│    quote
│        #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Heading.jl:9 =#
│        function heading(title::String = ""; class = "", img = Genie.Renderer.Html.img(class = "st-logo", src = "/img/st-logo.svg"), h = Genie.Renderer.Html.h1(title, class = "st-header__title text-h3"), kwargs...)
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Heading.jl:9 =#
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Heading.jl:15 =#
│            Genie.Renderer.Html.header(; class = "$(class) st-header q-pa-sm", kwargs...) do 
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Heading.jl:15 =#
│                [img; h]
│            end
│        end
│    end
│   exception =
│    Evaluation into the closed module `Heading` breaks incremental compilation because the side effects will not be permanent. This is likely due to some other module mutating `Heading` with `eval` during precompilation - don't do this.
│    Stacktrace:
│     [1] eval
│       @ ./boot.jl:360 [inlined]
│     [2] step_expr!(recurse::Any, frame::JuliaInterpreter.Frame, node::Any, istoplevel::Bool)
│       @ JuliaInterpreter ~/.julia/packages/JuliaInterpreter/CPmYX/src/interpret.jl:506
└ @ Revise ~/.julia/packages/Revise/qxX5H/src/lowered.jl:106
┌ Error: evaluation error starting at /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Icon.jl:12
│   mod = StippleUI.Icon
│   ex =
│    quote
│        #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Icon.jl:12 =#
│        function icon(name::Union{String, Symbol}, args...; wrap::Function = StippleUI.DEFAULT_WRAPPER, kwargs...)
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Icon.jl:12 =#
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Icon.jl:17 =#
│            wrap() do 
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Icon.jl:18 =#
│                q__icon(args...; attributes([:name => name, kwargs...])...)
│            end
│        end
│    end
│   exception =
│    Evaluation into the closed module `Icon` breaks incremental compilation because the side effects will not be permanent. This is likely due to some other module mutating `Icon` with `eval` during precompilation - don't do this.
│    Stacktrace:
│     [1] eval
│       @ ./boot.jl:360 [inlined]
│     [2] step_expr!(recurse::Any, frame::JuliaInterpreter.Frame, node::Any, istoplevel::Bool)
│       @ JuliaInterpreter ~/.julia/packages/JuliaInterpreter/CPmYX/src/interpret.jl:506
└ @ Revise ~/.julia/packages/Revise/qxX5H/src/lowered.jl:106
┌ Error: evaluation error starting at /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/List.jl:15
│   mod = StippleUI.List
│   ex =
│    quote
│        #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/List.jl:15 =#
│        function list(args...; wrap::Function = StippleUI.DEFAULT_WRAPPER, kwargs...)
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/List.jl:15 =#
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/List.jl:18 =#
│            wrap() do 
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/List.jl:19 =#
│                q__list(args...; kwargs...)
│            end
│        end
│    end
│   exception =
│    Evaluation into the closed module `List` breaks incremental compilation because the side effects will not be permanent. This is likely due to some other module mutating `List` with `eval` during precompilation - don't do this.
│    Stacktrace:
│     [1] eval
│       @ ./boot.jl:360 [inlined]
│     [2] step_expr!(recurse::Any, frame::JuliaInterpreter.Frame, node::Any, istoplevel::Bool)
│       @ JuliaInterpreter ~/.julia/packages/JuliaInterpreter/CPmYX/src/interpret.jl:506
└ @ Revise ~/.julia/packages/Revise/qxX5H/src/lowered.jl:106
┌ Error: evaluation error starting at /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/List.jl:24
│   mod = StippleUI.List
│   ex =
│    quote
│        #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/List.jl:24 =#
│        function item(args...; kwargs...)
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/List.jl:24 =#
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/List.jl:25 =#
│            q__item(args...; attributes([kwargs...], Dict("vripple" => "v-ripple", "insetlevel" => "inset-level", "manualfocus" => "manual-focus"))...)
│        end
│    end
│   exception =
│    Evaluation into the closed module `List` breaks incremental compilation because the side effects will not be permanent. This is likely due to some other module mutating `List` with `eval` during precompilation - don't do this.
│    Stacktrace:
│     [1] eval
│       @ ./boot.jl:360 [inlined]
│     [2] evaluate_methoddef(frame::JuliaInterpreter.Frame, node::Expr)
│       @ JuliaInterpreter ~/.julia/packages/JuliaInterpreter/CPmYX/src/interpret.jl:268
└ @ Revise ~/.julia/packages/Revise/qxX5H/src/lowered.jl:106
┌ Error: evaluation error starting at /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/List.jl:30
│   mod = StippleUI.List
│   ex =
│    quote
│        #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/List.jl:30 =#
│        function item_section(args...; kwargs...)
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/List.jl:30 =#
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/List.jl:31 =#
│            q__item__section(args...; attributes([kwargs...], Dict("nowrap" => "no-wrap"))...)
│        end
│    end
│   exception =
│    Evaluation into the closed module `List` breaks incremental compilation because the side effects will not be permanent. This is likely due to some other module mutating `List` with `eval` during precompilation - don't do this.
│    Stacktrace:
│     [1] eval
│       @ ./boot.jl:360 [inlined]
│     [2] evaluate_methoddef(frame::JuliaInterpreter.Frame, node::Expr)
│       @ JuliaInterpreter ~/.julia/packages/JuliaInterpreter/CPmYX/src/interpret.jl:268
└ @ Revise ~/.julia/packages/Revise/qxX5H/src/lowered.jl:106
┌ Error: evaluation error starting at /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/List.jl:35
│   mod = StippleUI.List
│   ex =
│    quote
│        #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/List.jl:35 =#
│        function item_label(args...; kwargs...)
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/List.jl:35 =#
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/List.jl:36 =#
│            q__item__label(args...; kwargs...)
│        end
│    end
│   exception =
│    Evaluation into the closed module `List` breaks incremental compilation because the side effects will not be permanent. This is likely due to some other module mutating `List` with `eval` during precompilation - don't do this.
│    Stacktrace:
│     [1] eval
│       @ ./boot.jl:360 [inlined]
│     [2] evaluate_methoddef(frame::JuliaInterpreter.Frame, node::Expr)
│       @ JuliaInterpreter ~/.julia/packages/JuliaInterpreter/CPmYX/src/interpret.jl:268
└ @ Revise ~/.julia/packages/Revise/qxX5H/src/lowered.jl:106
┌ Error: evaluation error starting at /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Radio.jl:14
│   mod = StippleUI.Radio
│   ex =
│    quote
│        #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Radio.jl:14 =#
│        function radio(label::String = "", fieldname::Union{Symbol, Nothing} = nothing, args...; keepcolor::Bool = false, leftlabel::Bool = false, kwargs...)
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Radio.jl:14 =#
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Radio.jl:21 =#
│            k = (:label,)
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Radio.jl:22 =#
│            v = Any[label]
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Radio.jl:24 =#
│            if fieldname !== nothing
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Radio.jl:25 =#
│                k = (k..., Symbol("v-model"))
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Radio.jl:26 =#
│                push!(v, fieldname)
│            end
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Radio.jl:29 =#
│            if keepcolor
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Radio.jl:30 =#
│                k = (k..., Symbol("keep-color"))
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Radio.jl:31 =#
│                push!(v, true)
│            end
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Radio.jl:34 =#
│            if leftlabel
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Radio.jl:35 =#
│                k = (k..., Symbol("left-label"))
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Radio.jl:36 =#
│                push!(v, true)
│            end
│            #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Radio.jl:39 =#
│            template() do 
│                #= /home/pkgeval/.julia/packages/StippleUI/3yyzZ/src/Radio.jl:40 =#
│                q__radio(args...; kwargs..., NamedTuple{k}(v)...)
│            end
│        end
│    end
│   exception =
│    Evaluation into the closed module `Radio` breaks incremental compilation because the side effects will not be permanent. This is likely due to some other module mutating `Radio` with `eval` during precompilation - don't do this.
│    Stacktrace:
│     [1] eval
│       @ ./boot.jl:360 [inlined]
│     [2] step_expr!(recurse::Any, frame::JuliaInterpreter.Frame, node::Any, istoplevel::Bool)
│       @ JuliaInterpreter ~/.julia/packages/JuliaInterpreter/CPmYX/src/interpret.jl:506
└ @ Revise ~/.julia/packages/Revise/qxX5H/src/lowered.jl:106
Test Summary: |
StippleUI.jl  | No tests
    Testing StippleUI tests passed 
