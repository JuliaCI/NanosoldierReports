Julia Version 1.3.2-pre.0
Commit 2e6715c045 (2019-12-31 00:49 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-6.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia

 Resolving package versions...
 Installed Reexport ──────────────────── v0.2.0
 Installed PositiveFactorizations ────── v0.2.3
 Installed Showoff ───────────────────── v0.3.1
 Installed MCMCChains ────────────────── v1.0.0
 Installed StatsFuns ─────────────────── v0.9.3
 Installed FFTW ──────────────────────── v1.2.0
 Installed SpecialFunctions ──────────── v0.9.0
 Installed ForwardDiff ───────────────── v0.10.8
 Installed DiffRules ─────────────────── v1.0.0
 Installed OpenBLAS_jll ──────────────── v0.3.7+4
 Installed OpenSpecFun_jll ───────────── v0.5.3+1
 Installed IntervalSets ──────────────── v0.3.2
 Installed Arpack_jll ────────────────── v3.5.0+2
 Installed CategoricalArrays ─────────── v0.7.6
 Installed TableTraits ───────────────── v1.0.0
 Installed Parameters ────────────────── v0.12.0
 Installed IntelOpenMP_jll ───────────── v2018.0.3+0
 Installed IterTools ─────────────────── v1.3.0
 Installed PDMats ────────────────────── v0.9.10
 Installed WoodburyMatrices ──────────── v0.5.0
 Installed BinaryProvider ────────────── v0.5.8
 Installed FFTW_jll ──────────────────── v3.3.9+3
 Installed RecipesBase ───────────────── v0.7.0
 Installed Parsers ───────────────────── v0.3.10
 Installed Distributions ─────────────── v0.21.12
 Installed PooledArrays ──────────────── v0.5.3
 Installed Compat ────────────────────── v2.2.0
 Installed DataValueInterfaces ───────── v1.0.0
 Installed Arpack ────────────────────── v0.4.0
 Installed AbstractFFTs ──────────────── v0.5.0
 Installed NaNMath ───────────────────── v0.3.3
 Installed Rmath ─────────────────────── v0.6.0
 Installed StaticArrays ──────────────── v0.12.1
 Installed FillArrays ────────────────── v0.8.2
 Installed Requires ──────────────────── v1.0.0
 Installed Tables ────────────────────── v0.2.11
 Installed Calculus ──────────────────── v0.5.1
 Installed OffsetArrays ──────────────── v0.11.4
 Installed DataStructures ────────────── v0.17.7
 Installed JSON ──────────────────────── v0.21.0
 Installed CommonSubexpressions ──────── v0.2.0
 Installed ArrayInterface ────────────── v2.3.1
 Installed StatsBase ─────────────────── v0.32.0
 Installed NLSolversBase ─────────────── v7.5.0
 Installed IteratorInterfaceExtensions ─ v1.0.0
 Installed Interpolations ────────────── v0.12.6
 Installed RangeArrays ───────────────── v0.3.2
 Installed AxisAlgorithms ────────────── v1.0.0
 Installed DiffEqDiffTools ───────────── v1.7.0
 Installed Ratios ────────────────────── v0.3.1
 Installed KernelDensity ─────────────── v0.5.1
 Installed DataFrames ────────────────── v0.20.0
 Installed InvertedIndices ───────────── v1.0.0
 Installed QuadGK ────────────────────── v2.3.1
 Installed AxisArrays ────────────────── v0.3.3
 Installed SortingAlgorithms ─────────── v0.3.1
 Installed DataAPI ───────────────────── v1.1.0
 Installed OrderedCollections ────────── v1.1.0
 Installed Optim ─────────────────────── v0.19.7
 Installed DiffResults ───────────────── v1.0.2
 Installed LineSearches ──────────────── v7.0.1
 Installed Missings ──────────────────── v0.4.3
 Installed AbstractMCMC ──────────────── v0.1.0
 Installed MKL_jll ───────────────────── v2019.0.117+0
 Installed ProgressMeter ─────────────── v1.2.0
  Updating `~/.julia/environments/v1.3/Project.toml`
  [c7f686f2] + MCMCChains v1.0.0
  Updating `~/.julia/environments/v1.3/Manifest.toml`
  [621f4979] + AbstractFFTs v0.5.0
  [80f14c24] + AbstractMCMC v0.1.0
  [7d9fca2a] + Arpack v0.4.0
  [68821587] + Arpack_jll v3.5.0+2
  [4fba245c] + ArrayInterface v2.3.1
  [13072b0f] + AxisAlgorithms v1.0.0
  [39de3d68] + AxisArrays v0.3.3
  [b99e7846] + BinaryProvider v0.5.8
  [49dc2e85] + Calculus v0.5.1
  [324d7699] + CategoricalArrays v0.7.6
  [bbf7d656] + CommonSubexpressions v0.2.0
  [34da2185] + Compat v2.2.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.0
  [864edb3b] + DataStructures v0.17.7
  [e2d170a0] + DataValueInterfaces v1.0.0
  [01453d9d] + DiffEqDiffTools v1.7.0
  [163ba53b] + DiffResults v1.0.2
  [b552c78f] + DiffRules v1.0.0
  [31c24e10] + Distributions v0.21.12
  [7a1cc6ca] + FFTW v1.2.0
  [f5851436] + FFTW_jll v3.3.9+3
  [1a297f60] + FillArrays v0.8.2
  [f6369f11] + ForwardDiff v0.10.8
  [1d5cc7b8] + IntelOpenMP_jll v2018.0.3+0
  [a98d9a8b] + Interpolations v0.12.6
  [8197267c] + IntervalSets v0.3.2
  [41ab1584] + InvertedIndices v1.0.0
  [c8e1da08] + IterTools v1.3.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5ab0869b] + KernelDensity v0.5.1
  [d3d80556] + LineSearches v7.0.1
  [c7f686f2] + MCMCChains v1.0.0
  [856f044c] + MKL_jll v2019.0.117+0
  [e1d29d7a] + Missings v0.4.3
  [d41bc354] + NLSolversBase v7.5.0
  [77ba4419] + NaNMath v0.3.3
  [6fe1bfb0] + OffsetArrays v0.11.4
  [4536629a] + OpenBLAS_jll v0.3.7+4
  [efe28fd5] + OpenSpecFun_jll v0.5.3+1
  [429524aa] + Optim v0.19.7
  [bac558e1] + OrderedCollections v1.1.0
  [90014a1f] + PDMats v0.9.10
  [d96e819e] + Parameters v0.12.0
  [69de0a69] + Parsers v0.3.10
  [2dfb63ee] + PooledArrays v0.5.3
  [85a6dd25] + PositiveFactorizations v0.2.3
  [92933f4c] + ProgressMeter v1.2.0
  [1fd47b50] + QuadGK v2.3.1
  [b3c3ace0] + RangeArrays v0.3.2
  [c84ed2f1] + Ratios v0.3.1
  [3cdcf5f2] + RecipesBase v0.7.0
  [189a3867] + Reexport v0.2.0
  [ae029012] + Requires v1.0.0
  [79098fc4] + Rmath v0.6.0
  [992d4aef] + Showoff v0.3.1
  [a2af1166] + SortingAlgorithms v0.3.1
  [276daf66] + SpecialFunctions v0.9.0
  [90137ffa] + StaticArrays v0.12.1
  [2913bbd2] + StatsBase v0.32.0
  [4c63d2b9] + StatsFuns v0.9.3
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v0.2.11
  [efce3f68] + WoodburyMatrices v0.5.0
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [4607b0f0] + SuiteSparse 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
  Building FFTW ─→ `~/.julia/packages/FFTW/qqcBj/deps/build.log`
  Building Rmath → `~/.julia/packages/Rmath/BoBag/deps/build.log`
   Testing MCMCChains
 Resolving package versions...
 Installed StatsPlots ────────── v0.13.0
 Installed DistributionsAD ───── v0.1.3
 Installed PlotUtils ─────────── v0.6.1
 Installed IRTools ───────────── v0.3.0
 Installed ArrayLayouts ──────── v0.1.5
 Installed Contour ───────────── v0.5.1
 Installed LazyArrays ────────── v0.14.10
 Installed Combinatorics ─────── v0.7.0
 Installed Widgets ───────────── v0.6.2
 Installed Turing ────────────── v0.8.1
 Installed Adapt ─────────────── v1.0.0
 Installed FFMPEG ────────────── v0.2.4
 Installed ArgCheck ──────────── v1.0.1
 Installed NearestNeighbors ──── v0.4.4
 Installed Plots ─────────────── v0.28.4
 Installed Measures ──────────── v0.3.1
 Installed MacroTools ────────── v0.5.3
 Installed ColorTypes ────────── v0.9.0
 Installed TransformVariables ── v0.3.9
 Installed Roots ─────────────── v0.8.4
 Installed Colors ────────────── v0.11.2
 Installed NNlib ─────────────── v0.6.2
 Installed DynamicPPL ────────── v0.1.0
 Installed DocStringExtensions ─ v0.8.1
 Installed MappedArrays ──────── v0.2.2
 Installed Clustering ────────── v0.13.3
 Installed MultivariateStats ─── v0.7.0
 Installed Polynomials ───────── v0.6.0
 Installed LogDensityProblems ── v0.10.1
 Installed Libtask ───────────── v0.3.1
 Installed BenchmarkTools ────── v0.4.3
 Installed ZygoteRules ───────── v0.2.0
 Installed PlotThemes ────────── v1.0.1
 Installed Zygote ────────────── v0.4.4
 Installed AdvancedHMC ───────── v0.2.19
 Installed Observables ───────── v0.2.3
 Installed Tracker ───────────── v0.2.6
 Installed GeometryTypes ─────── v0.7.7
 Installed Bijectors ─────────── v0.4.0
 Installed Distances ─────────── v0.8.2
 Installed InplaceOps ────────── v0.3.0
 Installed DataValues ────────── v0.4.13
 Installed FixedPointNumbers ─── v0.6.1
 Installed GR ────────────────── v0.44.0
  Building GR ─────→ `~/.julia/packages/GR/oiZD3/deps/build.log`
  Building FFMPEG ─→ `~/.julia/packages/FFMPEG/guN1x/deps/build.log`
  Building Plots ──→ `~/.julia/packages/Plots/qZHsp/deps/build.log`
  Building NNlib ──→ `~/.julia/packages/NNlib/udnNA/deps/build.log`
  Building Libtask → `~/.julia/packages/Libtask/RjRkK/deps/build.log`
    Status `/tmp/jl_WGJJct/Manifest.toml`
  [621f4979] AbstractFFTs v0.5.0
  [80f14c24] AbstractMCMC v0.1.0
  [79e6a3ab] Adapt v1.0.0
  [0bf59076] AdvancedHMC v0.2.19
  [dce04be8] ArgCheck v1.0.1
  [7d9fca2a] Arpack v0.4.0
  [68821587] Arpack_jll v3.5.0+2
  [4fba245c] ArrayInterface v2.3.1
  [4c555306] ArrayLayouts v0.1.5
  [13072b0f] AxisAlgorithms v1.0.0
  [39de3d68] AxisArrays v0.3.3
  [6e4b80f9] BenchmarkTools v0.4.3
  [76274a88] Bijectors v0.4.0
  [b99e7846] BinaryProvider v0.5.8
  [49dc2e85] Calculus v0.5.1
  [324d7699] CategoricalArrays v0.7.6
  [aaaa29a8] Clustering v0.13.3
  [3da002f7] ColorTypes v0.9.0
  [5ae59095] Colors v0.11.2
  [861a8166] Combinatorics v0.7.0
  [bbf7d656] CommonSubexpressions v0.2.0
  [34da2185] Compat v2.2.0
  [d38c429a] Contour v0.5.1
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.0
  [864edb3b] DataStructures v0.17.7
  [e2d170a0] DataValueInterfaces v1.0.0
  [e7dc6d0d] DataValues v0.4.13
  [01453d9d] DiffEqDiffTools v1.7.0
  [163ba53b] DiffResults v1.0.2
  [b552c78f] DiffRules v1.0.0
  [b4f34e82] Distances v0.8.2
  [31c24e10] Distributions v0.21.12
  [ced4e74d] DistributionsAD v0.1.3
  [ffbed154] DocStringExtensions v0.8.1
  [366bfd00] DynamicPPL v0.1.0
  [c87230d0] FFMPEG v0.2.4
  [7a1cc6ca] FFTW v1.2.0
  [f5851436] FFTW_jll v3.3.9+3
  [1a297f60] FillArrays v0.8.2
  [53c48c17] FixedPointNumbers v0.6.1
  [f6369f11] ForwardDiff v0.10.8
  [28b8d3ca] GR v0.44.0
  [4d00f742] GeometryTypes v0.7.7
  [7869d1d1] IRTools v0.3.0
  [505f98c9] InplaceOps v0.3.0
  [1d5cc7b8] IntelOpenMP_jll v2018.0.3+0
  [a98d9a8b] Interpolations v0.12.6
  [8197267c] IntervalSets v0.3.2
  [41ab1584] InvertedIndices v1.0.0
  [c8e1da08] IterTools v1.3.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5ab0869b] KernelDensity v0.5.1
  [5078a376] LazyArrays v0.14.10
  [6f1fad26] Libtask v0.3.1
  [d3d80556] LineSearches v7.0.1
  [6fdf6af0] LogDensityProblems v0.10.1
  [c7f686f2] MCMCChains v1.0.0
  [856f044c] MKL_jll v2019.0.117+0
  [1914dd2f] MacroTools v0.5.3
  [dbb5928d] MappedArrays v0.2.2
  [442fdcdd] Measures v0.3.1
  [e1d29d7a] Missings v0.4.3
  [6f286f6a] MultivariateStats v0.7.0
  [d41bc354] NLSolversBase v7.5.0
  [872c559c] NNlib v0.6.2
  [77ba4419] NaNMath v0.3.3
  [b8a86587] NearestNeighbors v0.4.4
  [510215fc] Observables v0.2.3
  [6fe1bfb0] OffsetArrays v0.11.4
  [4536629a] OpenBLAS_jll v0.3.7+4
  [efe28fd5] OpenSpecFun_jll v0.5.3+1
  [429524aa] Optim v0.19.7
  [bac558e1] OrderedCollections v1.1.0
  [90014a1f] PDMats v0.9.10
  [d96e819e] Parameters v0.12.0
  [69de0a69] Parsers v0.3.10
  [ccf2f8ad] PlotThemes v1.0.1
  [995b91a9] PlotUtils v0.6.1
  [91a5bcdd] Plots v0.28.4
  [f27b6e38] Polynomials v0.6.0
  [2dfb63ee] PooledArrays v0.5.3
  [85a6dd25] PositiveFactorizations v0.2.3
  [92933f4c] ProgressMeter v1.2.0
  [1fd47b50] QuadGK v2.3.1
  [b3c3ace0] RangeArrays v0.3.2
  [c84ed2f1] Ratios v0.3.1
  [3cdcf5f2] RecipesBase v0.7.0
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v1.0.0
  [79098fc4] Rmath v0.6.0
  [f2b01f46] Roots v0.8.4
  [992d4aef] Showoff v0.3.1
  [a2af1166] SortingAlgorithms v0.3.1
  [276daf66] SpecialFunctions v0.9.0
  [90137ffa] StaticArrays v0.12.1
  [2913bbd2] StatsBase v0.32.0
  [4c63d2b9] StatsFuns v0.9.3
  [f3b207a7] StatsPlots v0.13.0
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v0.2.11
  [9f7883ad] Tracker v0.2.6
  [84d833dd] TransformVariables v0.3.9
  [fce5fe82] Turing v0.8.1
  [cc8bc4a8] Widgets v0.6.2
  [efce3f68] WoodburyMatrices v0.5.0
  [e88e6eb3] Zygote v0.4.4
  [700de1a5] ZygoteRules v0.2.0
  [2a0f44e3] Base64  [`@stdlib/Base64`]
  [ade2ca70] Dates  [`@stdlib/Dates`]
  [8bb1440f] DelimitedFiles  [`@stdlib/DelimitedFiles`]
  [8ba89e20] Distributed  [`@stdlib/Distributed`]
  [9fa8497b] Future  [`@stdlib/Future`]
  [b77e0a4c] InteractiveUtils  [`@stdlib/InteractiveUtils`]
  [76f85450] LibGit2  [`@stdlib/LibGit2`]
  [8f399da3] Libdl  [`@stdlib/Libdl`]
  [37e2e46d] LinearAlgebra  [`@stdlib/LinearAlgebra`]
  [56ddb016] Logging  [`@stdlib/Logging`]
  [d6f4376e] Markdown  [`@stdlib/Markdown`]
  [a63ad114] Mmap  [`@stdlib/Mmap`]
  [44cfe95a] Pkg  [`@stdlib/Pkg`]
  [de0858da] Printf  [`@stdlib/Printf`]
  [3fa0cd96] REPL  [`@stdlib/REPL`]
  [9a3f8284] Random  [`@stdlib/Random`]
  [ea8e919c] SHA  [`@stdlib/SHA`]
  [9e88b42a] Serialization  [`@stdlib/Serialization`]
  [1a1011a3] SharedArrays  [`@stdlib/SharedArrays`]
  [6462fe0b] Sockets  [`@stdlib/Sockets`]
  [2f01184e] SparseArrays  [`@stdlib/SparseArrays`]
  [10745b16] Statistics  [`@stdlib/Statistics`]
  [4607b0f0] SuiteSparse  [`@stdlib/SuiteSparse`]
  [8dfed614] Test  [`@stdlib/Test`]
  [cf7118a7] UUIDs  [`@stdlib/UUIDs`]
  [4ec0a83e] Unicode  [`@stdlib/Unicode`]
QStandardPaths: XDG_RUNTIME_DIR not set, defaulting to '/tmp/runtime-pkgeval'
┌ Warning: Section mapping does not contain all parameter names, ["Param2", "Param3", "Param4"] assigned to :parameters.
└ @ MCMCChains ~/.julia/packages/MCMCChains/EAtMA/src/chains.jl:596
  Building Libtask → `~/.julia/packages/Libtask/RjRkK/deps/build.log`
 Resolving package versions...
Sampling   0%|                               |  ETA: 0:07:25
  iterations:                1
  n_steps:                   5
  is_accept:                 true
  acceptance_rate:           1.0
  log_density:               -7.72906644720233
  hamiltonian_energy:        8.241028974715702
  hamiltonian_energy_error:  -1.6362726036334152e-6
  step_size:                 0.01
  nom_step_size:             0.01
  mass_matrix:               UnitEuclideanMetric([1.0, 1.0])[A[A[A[A[A[A[A[A[A[A









[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[ASampling 100%|███████████████████████████████| Time: 0:00:01
  iterations:                500
  n_steps:                   5
  is_accept:                 true
  acceptance_rate:           1.0
  log_density:               -6.47706446658803
  hamiltonian_energy:        6.946850416480073
  hamiltonian_energy_error:  -4.42898922869972e-7
  step_size:                 0.01
  nom_step_size:             0.01
  mass_matrix:               UnitEuclideanMetric([1.0, 1.0])
Internal error: encountered unexpected error in runtime:
UndefRefError()
rec_backtrace at /workspace/srcdir/src/stackwalk.c:94
record_backtrace at /workspace/srcdir/src/task.c:224 [inlined]
jl_throw at /workspace/srcdir/src/task.c:461
istopfunction at ./compiler/utilities.jl:49 [inlined]
abstract_call at ./compiler/abstractinterpretation.jl:838
jfptr_abstract_call_606.clone_1 at /opt/julia/lib/julia/sys.so (unknown line)
_jl_invoke at /workspace/srcdir/src/gf.c:2135 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2305
abstract_apply at ./compiler/abstractinterpretation.jl:581
abstract_call at ./compiler/abstractinterpretation.jl:637
abstract_call at ./compiler/abstractinterpretation.jl:636
abstract_eval_call at ./compiler/abstractinterpretation.jl:879
abstract_eval at ./compiler/abstractinterpretation.jl:949
typeinf_local at ./compiler/abstractinterpretation.jl:1208
typeinf_nocycle at ./compiler/abstractinterpretation.jl:1264
typeinf at ./compiler/typeinfer.jl:12
typeinf_edge at ./compiler/typeinfer.jl:488
abstract_call_method at ./compiler/abstractinterpretation.jl:396
abstract_call_gf_by_type at ./compiler/abstractinterpretation.jl:93
abstract_call at ./compiler/abstractinterpretation.jl:850
jfptr_abstract_call_606.clone_1 at /opt/julia/lib/julia/sys.so (unknown line)
_jl_invoke at /workspace/srcdir/src/gf.c:2135 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2305
abstract_apply at ./compiler/abstractinterpretation.jl:581
abstract_call at ./compiler/abstractinterpretation.jl:637
abstract_call at ./compiler/abstractinterpretation.jl:636
abstract_eval_call at ./compiler/abstractinterpretation.jl:879
abstract_eval at ./compiler/abstractinterpretation.jl:949
typeinf_local at ./compiler/abstractinterpretation.jl:1208
typeinf_nocycle at ./compiler/abstractinterpretation.jl:1264
typeinf at ./compiler/typeinfer.jl:12
typeinf_edge at ./compiler/typeinfer.jl:488
abstract_call_method at ./compiler/abstractinterpretation.jl:396
abstract_call_gf_by_type at ./compiler/abstractinterpretation.jl:93
abstract_call_gf_by_type at ./compiler/abstractinterpretation.jl:21
abstract_eval_call at ./compiler/abstractinterpretation.jl:877
abstract_eval at ./compiler/abstractinterpretation.jl:949
typeinf_local at ./compiler/abstractinterpretation.jl:1208
typeinf_nocycle at ./compiler/abstractinterpretation.jl:1264
typeinf at ./compiler/typeinfer.jl:12
typeinf_edge at ./compiler/typeinfer.jl:488
abstract_call_method at ./compiler/abstractinterpretation.jl:396
abstract_call_gf_by_type at ./compiler/abstractinterpretation.jl:93
abstract_call at ./compiler/abstractinterpretation.jl:850
abstract_call at ./compiler/abstractinterpretation.jl:636
abstract_eval_call at ./compiler/abstractinterpretation.jl:879
abstract_eval at ./compiler/abstractinterpretation.jl:949
typeinf_local at ./compiler/abstractinterpretation.jl:1208
typeinf_nocycle at ./compiler/abstractinterpretation.jl:1264
typeinf at ./compiler/typeinfer.jl:12
typeinf_edge at ./compiler/typeinfer.jl:488
abstract_call_method at ./compiler/abstractinterpretation.jl:396
abstract_call_gf_by_type at ./compiler/abstractinterpretation.jl:93
abstract_call at ./compiler/abstractinterpretation.jl:850
abstract_call at ./compiler/abstractinterpretation.jl:636
abstract_eval_call at ./compiler/abstractinterpretation.jl:879
abstract_eval at ./compiler/abstractinterpretation.jl:949
typeinf_local at ./compiler/abstractinterpretation.jl:1208
typeinf_nocycle at ./compiler/abstractinterpretation.jl:1264
typeinf at ./compiler/typeinfer.jl:12
typeinf_edge at ./compiler/typeinfer.jl:488
abstract_call_method at ./compiler/abstractinterpretation.jl:396
abstract_call_gf_by_type at ./compiler/abstractinterpretation.jl:93
abstract_call at ./compiler/abstractinterpretation.jl:850
abstract_call at ./compiler/abstractinterpretation.jl:636
abstract_eval_call at ./compiler/abstractinterpretation.jl:879
abstract_eval at ./compiler/abstractinterpretation.jl:949
typeinf_local at ./compiler/abstractinterpretation.jl:1208
typeinf_nocycle at ./compiler/abstractinterpretation.jl:1264
typeinf at ./compiler/typeinfer.jl:12
typeinf_edge at ./compiler/typeinfer.jl:488
abstract_call_method at ./compiler/abstractinterpretation.jl:396
abstract_call_gf_by_type at ./compiler/abstractinterpretation.jl:93
abstract_call at ./compiler/abstractinterpretation.jl:850
abstract_call at ./compiler/abstractinterpretation.jl:636
abstract_eval_call at ./compiler/abstractinterpretation.jl:879
abstract_eval at ./compiler/abstractinterpretation.jl:949
typeinf_local at ./compiler/abstractinterpretation.jl:1208
typeinf_nocycle at ./compiler/abstractinterpretation.jl:1264
typeinf at ./compiler/typeinfer.jl:12
typeinf_edge at ./compiler/typeinfer.jl:488
abstract_call_method at ./compiler/abstractinterpretation.jl:396
abstract_call_gf_by_type at ./compiler/abstractinterpretation.jl:93
abstract_call at ./compiler/abstractinterpretation.jl:850
abstract_call at ./compiler/abstractinterpretation.jl:636
abstract_eval_call at ./compiler/abstractinterpretation.jl:879
abstract_eval at ./compiler/abstractinterpretation.jl:949
typeinf_local at ./compiler/abstractinterpretation.jl:1208
typeinf_nocycle at ./compiler/abstractinterpretation.jl:1264
typeinf at ./compiler/typeinfer.jl:12
typeinf_edge at ./compiler/typeinfer.jl:488
abstract_call_method at ./compiler/abstractinterpretation.jl:396
abstract_call_gf_by_type at ./compiler/abstractinterpretation.jl:93
abstract_call at ./compiler/abstractinterpretation.jl:850
abstract_call at ./compiler/abstractinterpretation.jl:636
abstract_eval_call at ./compiler/abstractinterpretation.jl:879
abstract_eval at ./compiler/abstractinterpretation.jl:949
typeinf_local at ./compiler/abstractinterpretation.jl:1194
typeinf_nocycle at ./compiler/abstractinterpretation.jl:1264
typeinf at ./compiler/typeinfer.jl:12
typeinf_edge at ./compiler/typeinfer.jl:488
abstract_call_method at ./compiler/abstractinterpretation.jl:396
abstract_call_gf_by_type at ./compiler/abstractinterpretation.jl:93
abstract_call at ./compiler/abstractinterpretation.jl:850
abstract_call at ./compiler/abstractinterpretation.jl:636
abstract_eval_call at ./compiler/abstractinterpretation.jl:879
abstract_eval at ./compiler/abstractinterpretation.jl:949
typeinf_local at ./compiler/abstractinterpretation.jl:1208
typeinf_nocycle at ./compiler/abstractinterpretation.jl:1264
typeinf at ./compiler/typeinfer.jl:12
typeinf_ext at ./compiler/typeinfer.jl:574
typeinf_ext at ./compiler/typeinfer.jl:605
jfptr_typeinf_ext_1.clone_1 at /opt/julia/lib/julia/sys.so (unknown line)
_jl_invoke at /workspace/srcdir/src/gf.c:2135 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2305
jl_apply at /workspace/srcdir/src/julia.h:1631 [inlined]
jl_type_infer at /workspace/srcdir/src/gf.c:209
jl_compile_method_internal at /workspace/srcdir/src/gf.c:1879
_jl_invoke at /workspace/srcdir/src/gf.c:2140 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2305
jl_apply at /workspace/srcdir/src/julia.h:1631 [inlined]
do_call at /workspace/srcdir/src/interpreter.c:328
eval_value at /workspace/srcdir/src/interpreter.c:417
eval_body at /workspace/srcdir/src/interpreter.c:641
eval_body at /workspace/srcdir/src/interpreter.c:705
eval_body at /workspace/srcdir/src/interpreter.c:705
jl_interpret_toplevel_thunk_callback at /workspace/srcdir/src/interpreter.c:888
Interpreter frame (ip: 184)
Core.CodeInfo(code=Array{Any, (234,)}[
  <newvar #<1>>,
  Expr(:call, Test.get_testset_depth),
  Expr(:call, Test.:(==), SSAValue(2), 0),
  Expr(:gotoifnot, SSAValue(3), 7),
  Core.SlotNumber(id=22) = Test.DefaultTestSet,
  goto 9,
  Expr(:call, Test.get_testset),
  Core.SlotNumber(id=22) = Expr(:call, Test.typeof, SSAValue(7)),
  Core.SlotNumber(id=22),
  Expr(:call, Test._check_testset, SSAValue(9), quote Expr(:call, :==, Expr(:call, :get_testset_depth), 0) end),
  Expr(:call, Test.get_testset_depth),
  Expr(:call, Test.:(==), SSAValue(11), 0),
  Expr(:gotoifnot, SSAValue(12), 16),
  Core.SlotNumber(id=23) = Test.DefaultTestSet,
  goto 18,
  Expr(:call, Test.get_testset),
  Core.SlotNumber(id=23) = Expr(:call, Test.typeof, SSAValue(16)),
  Core.SlotNumber(id=23),
  SSAValue(18),
  Expr(:call, Base.NamedTuple),
  Expr(:call, Core.apply_type, Test.Dict, Test.Symbol, Test.Any),
  Expr(:call, SSAValue(21)),
  Expr(:call, Base.merge, SSAValue(20), SSAValue(22)),
  Expr(:call, Base.isempty, SSAValue(23)),
  Expr(:gotoifnot, SSAValue(24), 28),
  Core.SlotNumber(id=24) = Expr(:call, SSAValue(19), "serialization read and write test"),
  goto 30,
  Expr(:call, Core.kwfunc, SSAValue(19)),
  Core.SlotNumber(id=24) = Expr(:call, SSAValue(28), SSAValue(23), SSAValue(19), "serialization read and write test"),
  Symbol("#404#ts") = Core.SlotNumber(id=24),
  Expr(:gotoifnot, false, 33),
  goto 31,
  Expr(:call, Test.push_testset, Symbol("#404#ts")),
  Core.SlotNumber(id=1) = Expr(:call, Test.default_rng),
  Expr(:call, Test.copy, Core.SlotNumber(id=1)),
  Symbol("#406#oldrng") = SSAValue(35),
  Expr(:enter, 226),
  Core.SlotNumber(id=25) = -1,
  Expr(:enter, 210),
  <newvar #<2>>,
  <newvar #<3>>,
  Core.SlotNumber(id=5) = Expr(:call, Core.Box),
  <newvar #<6>>,
  <newvar #<7>>,
  <newvar #<8>>,
  <newvar #<9>>,
  <newvar #<10>>,
  <newvar #<11>>,
  Expr(:call, Base.getproperty, Test.Random, :(:seed!)),
  Expr(:call, Base.getproperty, Core.SlotNumber(id=1), :(:seed)),
  Expr(:call, SSAValue(49), SSAValue(50)),
  Expr(:thunk, Core.CodeInfo(code=Array{Any, (4,)}[
  Expr(:global, Symbol("##gdemo#502#17#23")),
  Expr(:const, Symbol("##gdemo#502#17#23")),
  Expr(:struct_type, Symbol("##gdemo#502#17#23"), Expr(:call, Core.svec), Expr(:call, Core.svec, :(Symbol("##gdemo#502"))), Core.Function, Expr(:call, Core.svec, Core.Box), false, 1),
  Expr(:return, nothing)], codelocs=Array{Int32, (4,)}[1, 1, 1, 1], ssavaluetypes=4, ssaflags=Array{UInt8, (0,)}[], method_for_inference_limit_heuristics=nothing, linetable=Array{Any, (1,)}[Core.LineInfoNode(method=Symbol("top-level scope"), file=:none, line=0, inlined_at=0)], slotnames=Array{Symbol, (0,)}[], slotflags=Array{UInt8, (0,)}[], slottypes=nothing, rettype=Any, parent=nothing, edges=nothing, min_world=0x0000000000000001, max_world=0xffffffffffffffff, inferred=false, inlineable=false, propagate_inbounds=false, pure=false)),
  Expr(:thunk, Core.CodeInfo(code=Array{Any, (5,)}[
  Expr(:global, Symbol("##gdemo#502#22")),
  Expr(:const, Symbol("##gdemo#502#22")),
  Expr(:call, Core.TypeVar, :(Symbol("##gdemo#502#17")), Core.Any),
  Expr(:struct_type, Symbol("##gdemo#502#22"), Expr(:call, Core.svec, SSAValue(3)), Expr(:call, Core.svec, :(Symbol("##gdemo#502#17")), :(Symbol("##gdemo#502"))), Core.Function, Expr(:call, Core.svec, SSAValue(3), Core.Box), false, 2),
  Expr(:return, nothing)], codelocs=Array{Int32, (5,)}[1, 1, 1, 1, 1], ssavaluetypes=5, ssaflags=Array{UInt8, (0,)}[], method_for_inference_limit_heuristics=nothing, linetable=Array{Any, (1,)}[Core.LineInfoNode(method=Symbol("top-level scope"), file=:none, line=0, inlined_at=0)], slotnames=Array{Symbol, (0,)}[], slotflags=Array{UInt8, (0,)}[], slottypes=nothing, rettype=Any, parent=nothing, edges=nothing, min_world=0x0000000000000001, max_world=0xffffffffffffffff, inferred=false, inlineable=false, propagate_inbounds=false, pure=false)),
  Expr(:call, Core.svec, Symbol("##gdemo#502#17#23"), Core.Any, Symbol("##gdemo#502#22")),
  Expr(:call, Core.svec),
  Expr(:call, Core.svec, SSAValue(54), SSAValue(55)),
  Expr(:method, false, SSAValue(56), Core.CodeInfo(code=Array{Any, (9,)}[
  Expr(:call, Core.getfield, Core.SlotNumber(id=1), :(Symbol("##gdemo#502"))),
  Expr(:call, Core.isdefined, SSAValue(1), :(:contents)),
  Expr(:gotoifnot, SSAValue(2), 5),
  goto 7,
  <newvar #<4>>,
  Core.SlotNumber(id=4),
  Expr(:call, Core.getfield, SSAValue(1), :(:contents)),
  Expr(:call, SSAValue(7), Core.SlotNumber(id=2)),
  Expr(:return, SSAValue(8))], codelocs=Array{Int32, (9,)}[1, 1, 1, 1, 1, 1, 1, 1, 1], ssavaluetypes=9, ssaflags=Array{UInt8, (0,)}[], method_for_inference_limit_heuristics=nothing, linetable=Array{Any, (1,)}[Core.LineInfoNode(method=Symbol("##gdemo#502#17#23"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=581, inlined_at=0)], slotnames=Array{Symbol, (4,)}[
  Symbol("##gdemo#502#17"),
  :x,
  Symbol(""),
  Symbol("##gdemo#502")], slotflags=Array{UInt8, (4,)}[0x00, 0x08, 0x00, 0x20], slottypes=nothing, rettype=Any, parent=nothing, edges=nothing, min_world=0x0000000000000001, max_world=0xffffffffffffffff, inferred=false, inlineable=false, propagate_inbounds=false, pure=false)),
  Expr(:call, Core.svec, Symbol("##gdemo#502#22")),
  Expr(:call, Core.svec),
  Expr(:call, Core.svec, SSAValue(58), SSAValue(59)),
  Expr(:method, false, SSAValue(60), Core.CodeInfo(code=Array{Any, (6,)}[
  Expr(:call, Core.UndefKeywordError, :(:x)),
  Core.SlotNumber(id=2) = Expr(:call, Core.throw, SSAValue(1)),
  Expr(:call, Core.getfield, Core.SlotNumber(id=1), :(Symbol("##gdemo#502#17"))),
  Core.SlotNumber(id=2),
  Expr(:call, SSAValue(3), SSAValue(4), Core.SlotNumber(id=1)),
  Expr(:return, SSAValue(5))], codelocs=Array{Int32, (6,)}[1, 1, 1, 1, 1, 1], ssavaluetypes=6, ssaflags=Array{UInt8, (0,)}[], method_for_inference_limit_heuristics=nothing, linetable=Array{Any, (1,)}[Core.LineInfoNode(method=Symbol("##gdemo#502#22"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=581, inlined_at=0)], slotnames=Array{Symbol, (2,)}[
  Symbol("#self#"),
  :x], slotflags=Array{UInt8, (2,)}[0x08, 0x18], slottypes=nothing, rettype=Any, parent=nothing, edges=nothing, min_world=0x0000000000000001, max_world=0xffffffffffffffff, inferred=false, inlineable=false, propagate_inbounds=false, pure=false)),
  Expr(:call, Core.kwftype, Symbol("##gdemo#502#22")),
  Expr(:call, Core.svec, SSAValue(62), Core.Any, Symbol("##gdemo#502#22")),
  Expr(:call, Core.svec),
  Expr(:call, Core.svec, SSAValue(63), SSAValue(64)),
  Expr(:method, false, SSAValue(65), Core.CodeInfo(code=Array{Any, (19,)}[
  Expr(:call, Base.haskey, Core.SlotNumber(id=2), :(:x)),
  Expr(:gotoifnot, SSAValue(1), 5),
  Core.SlotNumber(id=5) = Expr(:call, Base.getindex, Core.SlotNumber(id=2), :(:x)),
  goto 7,
  Expr(:call, Core.UndefKeywordError, :(:x)),
  Core.SlotNumber(id=5) = Expr(:call, Core.throw, SSAValue(5)),
  Core.SlotNumber(id=4) = Core.SlotNumber(id=5),
  Expr(:call, Core.tuple, :(:x)),
  Expr(:call, Core.apply_type, Core.NamedTuple, SSAValue(8)),
  Expr(:call, Base.structdiff, Core.SlotNumber(id=2), SSAValue(9)),
  Expr(:call, Base.pairs, SSAValue(10)),
  Expr(:call, Base.isempty, SSAValue(11)),
  Expr(:gotoifnot, SSAValue(12), 15),
  goto 16,
  Expr(:call, Base.kwerr, Core.SlotNumber(id=2), Core.SlotNumber(id=3)),
  Expr(:call, Core.getfield, Core.SlotNumber(id=3), :(Symbol("##gdemo#502#17"))),
  Core.SlotNumber(id=4),
  Expr(:call, SSAValue(16), SSAValue(17), Core.SlotNumber(id=3)),
  Expr(:return, SSAValue(18))], codelocs=Array{Int32, (19,)}[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ssavaluetypes=19, ssaflags=Array{UInt8, (0,)}[], method_for_inference_limit_heuristics=nothing, linetable=Array{Any, (1,)}[Core.LineInfoNode(method=:Any, file=:none, line=0, inlined_at=0)], slotnames=Array{Symbol, (5,)}[
  Symbol("#unused#"),
  Symbol(""),
  Symbol(""),
  :x,
  Symbol("")], slotflags=Array{UInt8, (5,)}[0x00, 0x08, 0x08, 0x18, 0x00], slottypes=nothing, rettype=Any, parent=nothing, edges=nothing, min_world=0x0000000000000001, max_world=0xffffffffffffffff, inferred=false, inlineable=false, propagate_inbounds=false, pure=false)),
  Core.SlotNumber(id=4) = Expr(:new, Symbol("##gdemo#502#17#23"), Core.SlotNumber(id=5)),
  Symbol("##gdemo#502#22"),
  Expr(:call, Core.typeof, Core.SlotNumber(id=4)),
  Expr(:call, Core.apply_type, SSAValue(68), SSAValue(69)),
  Core.SlotNumber(id=4),
  Expr(:new, SSAValue(70), SSAValue(71), Core.SlotNumber(id=5)),
  Expr(:call, Core.setfield!, Core.SlotNumber(id=5), :(:contents), SSAValue(72)),
  Expr(:call, Core.isdefined, Core.SlotNumber(id=5), :(:contents)),
  Expr(:gotoifnot, SSAValue(74), 77),
  goto 79,
  <newvar #<19>>,
  Core.SlotNumber(id=19),
  Expr(:call, Core.getfield, Core.SlotNumber(id=5), :(:contents)),
  Expr(:call, Core.ifelse, false, false, SSAValue(79)),
  Expr(:thunk, Core.CodeInfo(code=Array{Any, (4,)}[
  Expr(:global, Symbol("##inner_function#482#24")),
  Expr(:const, Symbol("##inner_function#482#24")),
  Expr(:struct_type, Symbol("##inner_function#482#24"), Expr(:call, Core.svec), Expr(:call, Core.svec), Core.Function, Expr(:call, Core.svec), false, 0),
  Expr(:return, nothing)], codelocs=Array{Int32, (4,)}[1, 1, 1, 1], ssavaluetypes=4, ssaflags=Array{UInt8, (0,)}[], method_for_inference_limit_heuristics=nothing, linetable=Array{Any, (1,)}[Core.LineInfoNode(method=Symbol("top-level scope"), file=:none, line=0, inlined_at=0)], slotnames=Array{Symbol, (0,)}[], slotflags=Array{UInt8, (0,)}[], slottypes=nothing, rettype=Any, parent=nothing, edges=nothing, min_world=0x0000000000000001, max_world=0xffffffffffffffff, inferred=false, inlineable=false, propagate_inbounds=false, pure=false)),
  Symbol("##inner_function#482#24"),
  Expr(:call, Base.getproperty, :DynamicPPL, :(:VarInfo)),
  Expr(:call, Base.getproperty, :DynamicPPL, :(:AbstractSampler)),
  Expr(:call, Base.getproperty, :DynamicPPL, :(:AbstractContext)),
  Expr(:call, Core.svec, SSAValue(82), SSAValue(83), SSAValue(84), SSAValue(85), Core.Any),
  Expr(:call, Core.svec),
  Expr(:call, Core.svec, SSAValue(86), SSAValue(87)),
  Expr(:method, false, SSAValue(88), Core.CodeInfo(code=Array{Any, (316,)}[
  <newvar #<8>>,
  <newvar #<9>>,
  <newvar #<10>>,
  <newvar #<11>>,
  <newvar #<12>>,
  <newvar #<13>>,
  <newvar #<14>>,
  <newvar #<15>>,
  <newvar #<16>>,
  <newvar #<17>>,
  <newvar #<18>>,
  <newvar #<19>>,
  <newvar #<20>>,
  <newvar #<21>>,
  <newvar #<22>>,
  <newvar #<23>>,
  <newvar #<24>>,
  <newvar #<25>>,
  <newvar #<26>>,
  <newvar #<27>>,
  Expr(:call, Base.getproperty, Core.SlotNumber(id=5), :(:args)),
  Core.SlotNumber(id=6) = Expr(:call, Base.getproperty, SSAValue(21), :(:x)),
  Core.SlotNumber(id=7) = Expr(:call, Main.typeof, Core.SlotNumber(id=6)),
  Core.SlotNumber(id=6),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:FloatOrArrayType)),
  Expr(:call, Main.isa, SSAValue(24), SSAValue(25)),
  Expr(:gotoifnot, SSAValue(26), 31),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:get_matching_type)),
  Core.SlotNumber(id=27) = Expr(:call, SSAValue(28), Core.SlotNumber(id=3), Core.SlotNumber(id=2), Core.SlotNumber(id=6)),
  goto 39,
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:hasmissing)),
  Expr(:call, SSAValue(31), Core.SlotNumber(id=7)),
  Expr(:gotoifnot, SSAValue(32), 38),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:get_matching_type)),
  Expr(:call, SSAValue(34), Core.SlotNumber(id=3), Core.SlotNumber(id=2), Core.SlotNumber(id=7)),
  Core.SlotNumber(id=27) = Expr(:call, SSAValue(35), Core.SlotNumber(id=6)),
  goto 39,
  Core.SlotNumber(id=27) = Core.SlotNumber(id=6),
  Expr(:call, Base.setproperty!, Core.SlotNumber(id=2), :(:logp), 0),
  Core.SlotNumber(id=8) = Expr(:call, Main.InverseGamma, 2, 3),
  Expr(:call, Core.tuple, :(:msg)),
  Expr(:call, Core.apply_type, Core.NamedTuple, SSAValue(41)),
  Expr(:call, Core.tuple, "Right-hand side of a ~ must be subtype of Distribution or a vector of Distributions on line 449."),
  Expr(:call, SSAValue(42), SSAValue(43)),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:assert_dist)),
  Expr(:call, Core.kwfunc, SSAValue(45)),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:assert_dist)),
  Expr(:call, SSAValue(46), SSAValue(44), SSAValue(47), Core.SlotNumber(id=8)),
  Core.SlotNumber(id=9) = Expr(:call, Main.Val, :(:s)),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:inparams)),
  Core.SlotNumber(id=9),
  Expr(:call, SSAValue(50), SSAValue(51), Base.Val{(:x,)}()),
  Expr(:call, Main.:(!), SSAValue(52)),
  Expr(:gotoifnot, SSAValue(53), 57),
  Core.SlotNumber(id=37) = SSAValue(53),
  goto 62,
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:inparams)),
  Core.SlotNumber(id=9),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:getmissing)),
  Expr(:call, SSAValue(59), Core.SlotNumber(id=5)),
  Core.SlotNumber(id=37) = Expr(:call, SSAValue(57), SSAValue(58), SSAValue(60)),
  Expr(:gotoifnot, Core.SlotNumber(id=37), 69),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:VarName)),
  Expr(:call, Core.apply_type, SSAValue(63), :(:s)),
  Expr(:call, SSAValue(64), ""),
  Expr(:call, Core.tuple),
  Core.SlotNumber(id=38) = Expr(:call, Core.tuple, SSAValue(65), SSAValue(66)),
  goto 87,
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:inparams)),
  Core.SlotNumber(id=9),
  Expr(:call, SSAValue(69), SSAValue(70), Base.Val{(:x,)}()),
  Expr(:gotoifnot, SSAValue(71), 85),
  Core.SlotNumber(id=11) = Core.SlotNumber(id=16),
  Expr(:call, Main.:(===), Core.SlotNumber(id=11), Main.missing),
  Expr(:gotoifnot, SSAValue(74), 82),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:VarName)),
  Expr(:call, Core.apply_type, SSAValue(76), :(:s)),
  Expr(:call, SSAValue(77), ""),
  Expr(:call, Core.tuple),
  Core.SlotNumber(id=40) = Expr(:call, Core.tuple, SSAValue(78), SSAValue(79)),
  goto 83,
  Core.SlotNumber(id=40) = Core.SlotNumber(id=11),
  Core.SlotNumber(id=39) = Core.SlotNumber(id=40),
  goto 86,
  Core.SlotNumber(id=39) = Expr(:call, Main.throw, "This point should not be reached. Please report this error."),
  Core.SlotNumber(id=38) = Core.SlotNumber(id=39),
  Core.SlotNumber(id=10) = Core.SlotNumber(id=38),
  Expr(:call, Main.isa, Core.SlotNumber(id=10), Main.Tuple),
  Expr(:gotoifnot, SSAValue(88), 106),
  Expr(:call, Base.indexed_iterate, Core.SlotNumber(id=10), 1),
  Core.SlotNumber(id=12) = Expr(:call, Core.getfield, SSAValue(90), 1),
  Core.SlotNumber(id=13) = Expr(:call, Core.getfield, SSAValue(90), 2),
  Expr(:call, Base.indexed_iterate, Core.SlotNumber(id=10), 2, Core.SlotNumber(id=13)),
  Core.SlotNumber(id=14) = Expr(:call, Core.getfield, SSAValue(93), 1),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:tilde)),
  Core.SlotNumber(id=8),
  Core.SlotNumber(id=12),
  Core.SlotNumber(id=14),
  Core.SlotNumber(id=15) = Expr(:call, SSAValue(95), Core.SlotNumber(id=4), Core.SlotNumber(id=3), SSAValue(96), SSAValue(97), SSAValue(98), Core.SlotNumber(id=2)),
  Core.SlotNumber(id=16) = Expr(:call, Base.getindex, Core.SlotNumber(id=15), 1),
  Expr(:call, Base.getproperty, Core.SlotNumber(id=2), :(:logp)),
  Expr(:call, Base.getindex, Core.SlotNumber(id=15), 2),
  Expr(:call, Main.:(+), SSAValue(101), SSAValue(102)),
  Expr(:call, Base.setproperty!, Core.SlotNumber(id=2), :(:logp), SSAValue(103)),
  goto 113,
  Expr(:call, Base.getproperty, Core.SlotNumber(id=2), :(:logp)),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:tilde)),
  Core.SlotNumber(id=8),
  Core.SlotNumber(id=10),
  Expr(:call, SSAValue(107), Core.SlotNumber(id=4), Core.SlotNumber(id=3), SSAValue(108), SSAValue(109), Core.SlotNumber(id=2)),
  Expr(:call, Main.:(+), SSAValue(106), SSAValue(110)),
  Expr(:call, Base.setproperty!, Core.SlotNumber(id=2), :(:logp), SSAValue(111)),
  Expr(:call, Main.sqrt, Core.SlotNumber(id=16)),
  Core.SlotNumber(id=17) = Expr(:call, Main.Normal, 0, SSAValue(113)),
  Expr(:call, Core.tuple, :(:msg)),
  Expr(:call, Core.apply_type, Core.NamedTuple, SSAValue(115)),
  Expr(:call, Core.tuple, "Right-hand side of a ~ must be subtype of Distribution or a vector of Distributions on line 449."),
  Expr(:call, SSAValue(116), SSAValue(117)),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:assert_dist)),
  Expr(:call, Core.kwfunc, SSAValue(119)),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:assert_dist)),
  Expr(:call, SSAValue(120), SSAValue(118), SSAValue(121), Core.SlotNumber(id=17)),
  Core.SlotNumber(id=18) = Expr(:call, Main.Val, :(:m)),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:inparams)),
  Core.SlotNumber(id=18),
  Expr(:call, SSAValue(124), SSAValue(125), Base.Val{(:x,)}()),
  Expr(:call, Main.:(!), SSAValue(126)),
  Expr(:gotoifnot, SSAValue(127), 131),
  Core.SlotNumber(id=41) = SSAValue(127),
  goto 136,
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:inparams)),
  Core.SlotNumber(id=18),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:getmissing)),
  Expr(:call, SSAValue(133), Core.SlotNumber(id=5)),
  Core.SlotNumber(id=41) = Expr(:call, SSAValue(131), SSAValue(132), SSAValue(134)),
  Expr(:gotoifnot, Core.SlotNumber(id=41), 143),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:VarName)),
  Expr(:call, Core.apply_type, SSAValue(137), :(:m)),
  Expr(:call, SSAValue(138), ""),
  Expr(:call, Core.tuple),
  Core.SlotNumber(id=42) = Expr(:call, Core.tuple, SSAValue(139), SSAValue(140)),
  goto 161,
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:inparams)),
  Core.SlotNumber(id=18),
  Expr(:call, SSAValue(143), SSAValue(144), Base.Val{(:x,)}()),
  Expr(:gotoifnot, SSAValue(145), 159),
  Core.SlotNumber(id=20) = Core.SlotNumber(id=25),
  Expr(:call, Main.:(===), Core.SlotNumber(id=20), Main.missing),
  Expr(:gotoifnot, SSAValue(148), 156),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:VarName)),
  Expr(:call, Core.apply_type, SSAValue(150), :(:m)),
  Expr(:call, SSAValue(151), ""),
  Expr(:call, Core.tuple),
  Core.SlotNumber(id=44) = Expr(:call, Core.tuple, SSAValue(152), SSAValue(153)),
  goto 157,
  Core.SlotNumber(id=44) = Core.SlotNumber(id=20),
  Core.SlotNumber(id=43) = Core.SlotNumber(id=44),
  goto 160,
  Core.SlotNumber(id=43) = Expr(:call, Main.throw, "This point should not be reached. Please report this error."),
  Core.SlotNumber(id=42) = Core.SlotNumber(id=43),
  Core.SlotNumber(id=19) = Core.SlotNumber(id=42),
  Expr(:call, Main.isa, Core.SlotNumber(id=19), Main.Tuple),
  Expr(:gotoifnot, SSAValue(162), 180),
  Expr(:call, Base.indexed_iterate, Core.SlotNumber(id=19), 1),
  Core.SlotNumber(id=21) = Expr(:call, Core.getfield, SSAValue(164), 1),
  Core.SlotNumber(id=22) = Expr(:call, Core.getfield, SSAValue(164), 2),
  Expr(:call, Base.indexed_iterate, Core.SlotNumber(id=19), 2, Core.SlotNumber(id=22)),
  Core.SlotNumber(id=23) = Expr(:call, Core.getfield, SSAValue(167), 1),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:tilde)),
  Core.SlotNumber(id=17),
  Core.SlotNumber(id=21),
  Core.SlotNumber(id=23),
  Core.SlotNumber(id=24) = Expr(:call, SSAValue(169), Core.SlotNumber(id=4), Core.SlotNumber(id=3), SSAValue(170), SSAValue(171), SSAValue(172), Core.SlotNumber(id=2)),
  Core.SlotNumber(id=25) = Expr(:call, Base.getindex, Core.SlotNumber(id=24), 1),
  Expr(:call, Base.getproperty, Core.SlotNumber(id=2), :(:logp)),
  Expr(:call, Base.getindex, Core.SlotNumber(id=24), 2),
  Expr(:call, Main.:(+), SSAValue(175), SSAValue(176)),
  Expr(:call, Base.setproperty!, Core.SlotNumber(id=2), :(:logp), SSAValue(177)),
  goto 187,
  Expr(:call, Base.getproperty, Core.SlotNumber(id=2), :(:logp)),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:tilde)),
  Core.SlotNumber(id=17),
  Core.SlotNumber(id=19),
  Expr(:call, SSAValue(181), Core.SlotNumber(id=4), Core.SlotNumber(id=3), SSAValue(182), SSAValue(183), Core.SlotNumber(id=2)),
  Expr(:call, Main.:(+), SSAValue(180), SSAValue(184)),
  Expr(:call, Base.setproperty!, Core.SlotNumber(id=2), :(:logp), SSAValue(185)),
  Expr(:call, Main.eachindex, Core.SlotNumber(id=27)),
  Core.SlotNumber(id=26) = Expr(:call, Base.iterate, SSAValue(187)),
  Expr(:call, Core.:(===), Core.SlotNumber(id=26), nothing),
  Expr(:call, Base.not_int, SSAValue(189)),
  Expr(:gotoifnot, SSAValue(190), 316),
  <newvar #<31>>,
  <newvar #<32>>,
  <newvar #<33>>,
  <newvar #<34>>,
  <newvar #<35>>,
  <newvar #<36>>,
  Core.SlotNumber(id=26),
  Core.SlotNumber(id=28) = Expr(:call, Core.getfield, SSAValue(198), 1),
  Expr(:call, Core.getfield, SSAValue(198), 2),
  Core.SlotNumber(id=25),
  Expr(:call, Main.sqrt, Core.SlotNumber(id=16)),
  Core.SlotNumber(id=29) = Expr(:call, Main.Normal, SSAValue(201), SSAValue(202)),
  Expr(:call, Core.tuple, :(:msg)),
  Expr(:call, Core.apply_type, Core.NamedTuple, SSAValue(204)),
  Expr(:call, Core.tuple, "Right-hand side of a ~ must be subtype of Distribution or a vector of Distributions on line 449."),
  Expr(:call, SSAValue(205), SSAValue(206)),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:assert_dist)),
  Expr(:call, Core.kwfunc, SSAValue(208)),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:assert_dist)),
  Expr(:call, SSAValue(209), SSAValue(207), SSAValue(210), Core.SlotNumber(id=29)),
  Core.SlotNumber(id=30) = Expr(:call, Main.Val, :(:x)),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:inparams)),
  Core.SlotNumber(id=30),
  Expr(:call, SSAValue(213), SSAValue(214), Base.Val{(:x,)}()),
  Expr(:call, Main.:(!), SSAValue(215)),
  Expr(:gotoifnot, SSAValue(216), 220),
  Core.SlotNumber(id=45) = SSAValue(216),
  goto 225,
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:inparams)),
  Core.SlotNumber(id=30),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:getmissing)),
  Expr(:call, SSAValue(222), Core.SlotNumber(id=5)),
  Core.SlotNumber(id=45) = Expr(:call, SSAValue(220), SSAValue(221), SSAValue(223)),
  Expr(:gotoifnot, Core.SlotNumber(id=45), 249),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:VarName)),
  Expr(:call, Core.apply_type, SSAValue(226), :(:x)),
  Expr(:call, Main.:(===), Core.SlotNumber(id=28), Main.:(:)),
  Expr(:gotoifnot, SSAValue(228), 232),
  Core.SlotNumber(id=47) = "Colon()",
  goto 233,
  Core.SlotNumber(id=47) = Expr(:call, Main.string, Core.SlotNumber(id=28)),
  Core.SlotNumber(id=47),
  Expr(:call, Base.vect, SSAValue(233)),
  Expr(:call, Main.join, SSAValue(234), ","),
  Expr(:call, Main.:(*), "[", SSAValue(235), "]"),
  Expr(:call, Core.tuple, :(:init)),
  Expr(:call, Core.apply_type, Core.NamedTuple, SSAValue(237)),
  Expr(:call, Core.tuple, ""),
  Expr(:call, SSAValue(238), SSAValue(239)),
  Expr(:call, Core.kwfunc, Main.foldl),
  Expr(:call, Core.tuple, SSAValue(236)),
  Expr(:call, SSAValue(241), SSAValue(240), Main.foldl, Main.:(*), SSAValue(242)),
  Expr(:call, SSAValue(227), SSAValue(243)),
  Expr(:call, Core.tuple, Core.SlotNumber(id=28)),
  Expr(:call, Core.tuple, SSAValue(245)),
  Core.SlotNumber(id=46) = Expr(:call, Core.tuple, SSAValue(244), SSAValue(246)),
  goto 284,
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:inparams)),
  Core.SlotNumber(id=30),
  Expr(:call, SSAValue(249), SSAValue(250), Base.Val{(:x,)}()),
  Expr(:gotoifnot, SSAValue(251), 282),
  Core.SlotNumber(id=32) = Expr(:call, Base.getindex, Core.SlotNumber(id=27), Core.SlotNumber(id=28)),
  Expr(:call, Main.:(===), Core.SlotNumber(id=32), Main.missing),
  Expr(:gotoifnot, SSAValue(254), 279),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:VarName)),
  Expr(:call, Core.apply_type, SSAValue(256), :(:x)),
  Expr(:call, Main.:(===), Core.SlotNumber(id=28), Main.:(:)),
  Expr(:gotoifnot, SSAValue(258), 262),
  Core.SlotNumber(id=50) = "Colon()",
  goto 263,
  Core.SlotNumber(id=50) = Expr(:call, Main.string, Core.SlotNumber(id=28)),
  Core.SlotNumber(id=50),
  Expr(:call, Base.vect, SSAValue(263)),
  Expr(:call, Main.join, SSAValue(264), ","),
  Expr(:call, Main.:(*), "[", SSAValue(265), "]"),
  Expr(:call, Core.tuple, :(:init)),
  Expr(:call, Core.apply_type, Core.NamedTuple, SSAValue(267)),
  Expr(:call, Core.tuple, ""),
  Expr(:call, SSAValue(268), SSAValue(269)),
  Expr(:call, Core.kwfunc, Main.foldl),
  Expr(:call, Core.tuple, SSAValue(266)),
  Expr(:call, SSAValue(271), SSAValue(270), Main.foldl, Main.:(*), SSAValue(272)),
  Expr(:call, SSAValue(257), SSAValue(273)),
  Expr(:call, Core.tuple, Core.SlotNumber(id=28)),
  Expr(:call, Core.tuple, SSAValue(275)),
  Core.SlotNumber(id=49) = Expr(:call, Core.tuple, SSAValue(274), SSAValue(276)),
  goto 280,
  Core.SlotNumber(id=49) = Core.SlotNumber(id=32),
  Core.SlotNumber(id=48) = Core.SlotNumber(id=49),
  goto 283,
  Core.SlotNumber(id=48) = Expr(:call, Main.throw, "This point should not be reached. Please report this error."),
  Core.SlotNumber(id=46) = Core.SlotNumber(id=48),
  Core.SlotNumber(id=31) = Core.SlotNumber(id=46),
  Expr(:call, Main.isa, Core.SlotNumber(id=31), Main.Tuple),
  Expr(:gotoifnot, SSAValue(285), 304),
  Expr(:call, Base.indexed_iterate, Core.SlotNumber(id=31), 1),
  Core.SlotNumber(id=33) = Expr(:call, Core.getfield, SSAValue(287), 1),
  Core.SlotNumber(id=34) = Expr(:call, Core.getfield, SSAValue(287), 2),
  Expr(:call, Base.indexed_iterate, Core.SlotNumber(id=31), 2, Core.SlotNumber(id=34)),
  Core.SlotNumber(id=35) = Expr(:call, Core.getfield, SSAValue(290), 1),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:tilde)),
  Core.SlotNumber(id=29),
  Core.SlotNumber(id=33),
  Core.SlotNumber(id=35),
  Core.SlotNumber(id=36) = Expr(:call, SSAValue(292), Core.SlotNumber(id=4), Core.SlotNumber(id=3), SSAValue(293), SSAValue(294), SSAValue(295), Core.SlotNumber(id=2)),
  Expr(:call, Base.getindex, Core.SlotNumber(id=36), 1),
  Expr(:call, Base.setindex!, Core.SlotNumber(id=27), SSAValue(297), Core.SlotNumber(id=28)),
  Expr(:call, Base.getproperty, Core.SlotNumber(id=2), :(:logp)),
  Expr(:call, Base.getindex, Core.SlotNumber(id=36), 2),
  Expr(:call, Main.:(+), SSAValue(299), SSAValue(300)),
  Expr(:call, Base.setproperty!, Core.SlotNumber(id=2), :(:logp), SSAValue(301)),
  goto 311,
  Expr(:call, Base.getproperty, Core.SlotNumber(id=2), :(:logp)),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:tilde)),
  Core.SlotNumber(id=29),
  Core.SlotNumber(id=31),
  Expr(:call, SSAValue(305), Core.SlotNumber(id=4), Core.SlotNumber(id=3), SSAValue(306), SSAValue(307), Core.SlotNumber(id=2)),
  Expr(:call, Main.:(+), SSAValue(304), SSAValue(308)),
  Expr(:call, Base.setproperty!, Core.SlotNumber(id=2), :(:logp), SSAValue(309)),
  Core.SlotNumber(id=26) = Expr(:call, Base.iterate, SSAValue(187), SSAValue(200)),
  Expr(:call, Core.:(===), Core.SlotNumber(id=26), nothing),
  Expr(:call, Base.not_int, SSAValue(312)),
  Expr(:gotoifnot, SSAValue(313), 316),
  goto 192,
  Expr(:return, nothing)], codelocs=Array{Int32, (316,)}[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 4, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 8, 9, 10, 14, 15, 15, 15, 15, 15, 15, 15, 15, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 23, 23, 25, 25, 25, 25, 25, 25, 26, 26, 26, 27, 27, 27, 28, 28, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 35, 35, 36, 36, 36, 36, 36, 36, 36, 36, 38, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 41, 41, 41, 41, 41, 41, 42, 42, 42, 42, 43, 44, 44, 46, 46, 46, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 52, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 57, 57, 57, 58, 58, 58, 58, 58, 58, 58, 58, 60, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 64, 64, 64, 64, 65, 66, 66, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 69, 69, 69, 70, 70, 70, 71, 71, 72, 72, 72, 72, 72, 73, 73, 73, 73, 73, 74, 74, 75, 75, 75, 75, 75, 76, 76, 76, 76, 76, 76, 76, 56, 56, 56, 56, 56, 11], ssavaluetypes=316, ssaflags=Array{UInt8, (0,)}[], method_for_inference_limit_heuristics=nothing, linetable=Array{Any, (76,)}[
  Core.LineInfoNode(method=Symbol("##inner_function#482#24"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=589, inlined_at=0),
  Core.LineInfoNode(method=Symbol("##inner_function#482#24"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=567, inlined_at=0),
  Core.LineInfoNode(method=Symbol("##inner_function#482#24"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=568, inlined_at=0),
  Core.LineInfoNode(method=Symbol("##inner_function#482#24"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=569, inlined_at=0),
  Core.LineInfoNode(method=Symbol("##inner_function#482#24"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=570, inlined_at=0),
  Core.LineInfoNode(method=Symbol("##inner_function#482#24"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=571, inlined_at=0),
  Core.LineInfoNode(method=Symbol("##inner_function#482#24"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=572, inlined_at=0),
  Core.LineInfoNode(method=Symbol("##inner_function#482#24"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=573, inlined_at=0),
  Core.LineInfoNode(method=Symbol("##inner_function#482#24"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=575, inlined_at=0),
  Core.LineInfoNode(method=Symbol("##inner_function#482#24"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=590, inlined_at=0),
  Core.LineInfoNode(method=Symbol("##inner_function#482#24"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=591, inlined_at=0),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"), line=6, inlined_at=11),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"), line=7, inlined_at=11),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=452, inlined_at=13),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=453, inlined_at=13),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=454, inlined_at=13),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=178, inlined_at=13),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=181, inlined_at=13),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=182, inlined_at=13),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=47, inlined_at=13),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=184, inlined_at=13),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=186, inlined_at=13),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=187, inlined_at=13),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=188, inlined_at=13),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=47, inlined_at=13),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=190, inlined_at=13),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=193, inlined_at=13),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=455, inlined_at=13),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=456, inlined_at=13),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=457, inlined_at=13),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=458, inlined_at=13),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=459, inlined_at=13),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=461, inlined_at=13),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"), line=8, inlined_at=11),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=452, inlined_at=34),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=453, inlined_at=34),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=454, inlined_at=34),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=178, inlined_at=34),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=181, inlined_at=34),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=182, inlined_at=34),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=47, inlined_at=34),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=184, inlined_at=34),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=186, inlined_at=34),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=187, inlined_at=34),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=188, inlined_at=34),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=47, inlined_at=34),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=190, inlined_at=34),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=193, inlined_at=34),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=455, inlined_at=34),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=456, inlined_at=34),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=457, inlined_at=34),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=458, inlined_at=34),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=459, inlined_at=34),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=461, inlined_at=34),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"), line=9, inlined_at=11),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"), line=10, inlined_at=11),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=452, inlined_at=56),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=453, inlined_at=56),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=454, inlined_at=56),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=178, inlined_at=56),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=181, inlined_at=56),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=182, inlined_at=56),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=58, inlined_at=56),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=184, inlined_at=56),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=186, inlined_at=56),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=187, inlined_at=56),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=188, inlined_at=56),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=58, inlined_at=56),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=190, inlined_at=56),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=193, inlined_at=56),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=455, inlined_at=56),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=456, inlined_at=56),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=457, inlined_at=56),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=458, inlined_at=56),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=459, inlined_at=56),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=461, inlined_at=56)], slotnames=Array{Symbol, (50,)}[
  Symbol("#self#"),
  Symbol("vi#479"),
  Symbol("sampler#480"),
  Symbol("ctx#478"),
  Symbol("model#481"),
  Symbol("temp_var#503"),
  Symbol("varT#504"),
  Symbol("temp_right#484"),
  Symbol("sym#505"),
  Symbol("preprocessed#489"),
  Symbol("lhs#506"),
  Symbol("vn#487"),
  Symbol(""),
  Symbol("inds#488"),
  Symbol("out#485"),
  :s,
  Symbol("temp_right#490"),
  Symbol("sym#507"),
  Symbol("preprocessed#495"),
  Symbol("lhs#508"),
  Symbol("vn#493"),
  Symbol(""),
  Symbol("inds#494"),
  Symbol("out#491"),
  :m,
  Symbol(""),
  :x,
  :i,
  Symbol("temp_right#496"),
  Symbol("sym#509"),
  Symbol("preprocessed#501"),
  Symbol("lhs#510"),
  Symbol("vn#499"),
  Symbol(""),
  Symbol("inds#500"),
  Symbol("out#497"),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol("")], slotflags=Array{UInt8, (50,)}[0x00, 0x08, 0x08, 0x08, 0x08, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x08, 0x08, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], slottypes=nothing, rettype=Any, parent=nothing, edges=nothing, min_world=0x0000000000000001, max_world=0xffffffffffffffff, inferred=false, inlineable=false, propagate_inbounds=false, pure=false)),
  Expr(:call, Core.svec, Symbol("##gdemo#502#22"), Core.Any),
  Expr(:call, Core.svec),
  Expr(:call, Core.svec, SSAValue(90), SSAValue(91)),
  Expr(:method, false, SSAValue(92), Core.CodeInfo(code=Array{Any, (24,)}[
  Core.SlotNumber(id=3) = Expr(:new, Main.:(##inner_function#482#24)),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:Model)),
  Core.SlotNumber(id=3),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:namedtuple)),
  Expr(:call, Core.tuple, :(:x)),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:get_type)),
  Expr(:call, SSAValue(6), Core.SlotNumber(id=2)),
  Expr(:call, Core.apply_type, Main.Tuple, SSAValue(7)),
  Expr(:call, Core.apply_type, Main.NamedTuple, SSAValue(5), SSAValue(8)),
  Expr(:call, Core.tuple, Core.SlotNumber(id=2)),
  Expr(:call, SSAValue(4), SSAValue(9), SSAValue(10)),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:ModelGen)),
  Expr(:call, Core.apply_type, SSAValue(12), (:x,)),
  Expr(:call, Core.getfield, Core.SlotNumber(id=1), :(Symbol("##gdemo#502"))),
  Expr(:call, Core.isdefined, SSAValue(14), :(:contents)),
  Expr(:gotoifnot, SSAValue(15), 18),
  goto 20,
  <newvar #<4>>,
  Core.SlotNumber(id=4),
  Expr(:call, Core.getfield, SSAValue(14), :(:contents)),
  Expr(:call, Main.NamedTuple),
  Expr(:call, SSAValue(13), SSAValue(20), SSAValue(21)),
  Expr(:call, SSAValue(2), SSAValue(3), SSAValue(11), SSAValue(22)),
  Expr(:return, SSAValue(23))], codelocs=Array{Int32, (24,)}[1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], ssavaluetypes=24, ssaflags=Array{UInt8, (0,)}[], method_for_inference_limit_heuristics=nothing, linetable=Array{Any, (3,)}[
  Core.LineInfoNode(method=Symbol("##gdemo#502#22"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=583, inlined_at=0),
  Core.LineInfoNode(method=Symbol("##gdemo#502#22"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=593, inlined_at=0),
  Core.LineInfoNode(method=Symbol("##gdemo#502#22"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=557, inlined_at=0)], slotnames=Array{Symbol, (4,)}[
  Symbol("#self#"),
  :x,
  Symbol("inner_function#482"),
  Symbol("##gdemo#502")], slotflags=Array{UInt8, (4,)}[0x00, 0x08, 0x18, 0x20], slottypes=nothing, rettype=Any, parent=nothing, edges=nothing, min_world=0x0000000000000001, max_world=0xffffffffffffffff, inferred=false, inlineable=false, propagate_inbounds=false, pure=false)),
  Expr(:call, Base.getproperty, :DynamicPPL, :(:ModelGen)),
  Expr(:call, Core.apply_type, SSAValue(94), (:x,)),
  Expr(:call, Core.isdefined, Core.SlotNumber(id=5), :(:contents)),
  Expr(:gotoifnot, SSAValue(96), 99),
  goto 101,
  <newvar #<21>>,
  Core.SlotNumber(id=21),
  Expr(:call, Core.getfield, Core.SlotNumber(id=5), :(:contents)),
  Expr(:call, :NamedTuple),
  Core.SlotNumber(id=6) = Expr(:call, SSAValue(95), SSAValue(101), SSAValue(102)),
  Expr(:call, Base.vect, 1.5, 2),
  Core.SlotNumber(id=7) = Expr(:call, Core.SlotNumber(id=6), SSAValue(104)),
  Core.SlotNumber(id=8) = Expr(:call, :HMC, 0.01, 5),
  Expr(:call, Core.tuple, :(:save_state)),
  Expr(:call, Core.apply_type, Core.NamedTuple, SSAValue(107)),
  Expr(:call, Core.tuple, true),
  Expr(:call, SSAValue(108), SSAValue(109)),
  Expr(:call, Core.kwfunc, :sample),
  Core.SlotNumber(id=7),
  Core.SlotNumber(id=8),
  Core.SlotNumber(id=9) = Expr(:call, SSAValue(111), SSAValue(110), :sample, SSAValue(112), SSAValue(113), 500),
  Expr(:call, :joinpath, :ProjDir, "chn1.jls"),
  Expr(:call, :write, SSAValue(115), Core.SlotNumber(id=9)),
  Expr(:call, :joinpath, :ProjDir, "chn1.jls"),
  Expr(:call, Base.getproperty, :MCMCChains, :(:Chains)),
  Core.SlotNumber(id=10) = Expr(:call, :read, SSAValue(117), SSAValue(118)),
  Expr(:thunk, Core.CodeInfo(code=Array{Any, (5,)}[
  Expr(:global, Symbol("#18#25")),
  Expr(:const, Symbol("#18#25")),
  Expr(:call, Core.TypeVar, :(:chn1), Core.Any),
  Expr(:struct_type, Symbol("#18#25"), Expr(:call, Core.svec, SSAValue(3)), Expr(:call, Core.svec, :(:chn1)), Core.Function, Expr(:call, Core.svec, SSAValue(3)), false, 1),
  Expr(:return, nothing)], codelocs=Array{Int32, (5,)}[1, 1, 1, 1, 1], ssavaluetypes=5, ssaflags=Array{UInt8, (0,)}[], method_for_inference_limit_heuristics=nothing, linetable=Array{Any, (1,)}[Core.LineInfoNode(method=Symbol("top-level scope"), file=:none, line=0, inlined_at=0)], slotnames=Array{Symbol, (0,)}[], slotflags=Array{UInt8, (0,)}[], slottypes=nothing, rettype=Any, parent=nothing, edges=nothing, min_world=0x0000000000000001, max_world=0xffffffffffffffff, inferred=false, inlineable=false, propagate_inbounds=false, pure=false)),
  Expr(:call, Core.svec, Symbol("#18#25"), Core.Any),
  Expr(:call, Core.svec),
  Expr(:call, Core.svec, SSAValue(121), SSAValue(122)),
  Expr(:method, false, SSAValue(123), Core.CodeInfo(code=Array{Any, (3,)}[
  Expr(:call, Core.getfield, Core.SlotNumber(id=1), :(:chn1)),
  Expr(:call, Main.describe, Core.SlotNumber(id=2), SSAValue(1)),
  Expr(:return, SSAValue(2))], codelocs=Array{Int32, (3,)}[1, 1, 1], ssavaluetypes=3, ssaflags=Array{UInt8, (0,)}[], method_for_inference_limit_heuristics=nothing, linetable=Array{Any, (1,)}[Core.LineInfoNode(method=Symbol("#18"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"), line=22, inlined_at=0)], slotnames=Array{Symbol, (2,)}[
  Symbol("#self#"),
  :io], slotflags=Array{UInt8, (2,)}[0x00, 0x08], slottypes=nothing, rettype=Any, parent=nothing, edges=nothing, min_world=0x0000000000000001, max_world=0xffffffffffffffff, inferred=false, inlineable=false, propagate_inbounds=false, pure=false)),
  Symbol("#18#25"),
  Expr(:call, Core.typeof, Core.SlotNumber(id=9)),
  Expr(:call, Core.apply_type, SSAValue(125), SSAValue(126)),
  Core.SlotNumber(id=2) = Expr(:new, SSAValue(127), Core.SlotNumber(id=9)),
  Core.SlotNumber(id=2),
  Expr(:call, :joinpath, :ProjDir, "chn1.txt"),
  Expr(:call, :open, SSAValue(129), SSAValue(130), "w"),
  Expr(:thunk, Core.CodeInfo(code=Array{Any, (5,)}[
  Expr(:global, Symbol("#19#26")),
  Expr(:const, Symbol("#19#26")),
  Expr(:call, Core.TypeVar, :(:chn2), Core.Any),
  Expr(:struct_type, Symbol("#19#26"), Expr(:call, Core.svec, SSAValue(3)), Expr(:call, Core.svec, :(:chn2)), Core.Function, Expr(:call, Core.svec, SSAValue(3)), false, 1),
  Expr(:return, nothing)], codelocs=Array{Int32, (5,)}[1, 1, 1, 1, 1], ssavaluetypes=5, ssaflags=Array{UInt8, (0,)}[], method_for_inference_limit_heuristics=nothing, linetable=Array{Any, (1,)}[Core.LineInfoNode(method=Symbol("top-level scope"), file=:none, line=0, inlined_at=0)], slotnames=Array{Symbol, (0,)}[], slotflags=Array{UInt8, (0,)}[], slottypes=nothing, rettype=Any, parent=nothing, edges=nothing, min_world=0x0000000000000001, max_world=0xffffffffffffffff, inferred=false, inlineable=false, propagate_inbounds=false, pure=false)),
  Expr(:call, Core.svec, Symbol("#19#26"), Core.Any),
  Expr(:call, Core.svec),
  Expr(:call, Core.svec, SSAValue(133), SSAValue(134)),
  Expr(:method, false, SSAValue(135), Core.CodeInfo(code=Array{Any, (3,)}[
  Expr(:call, Core.getfield, Core.SlotNumber(id=1), :(:chn2)),
  Expr(:call, Main.describe, Core.SlotNumber(id=2), SSAValue(1)),
  Expr(:return, SSAValue(2))], codelocs=Array{Int32, (3,)}[1, 1, 1], ssavaluetypes=3, ssaflags=Array{UInt8, (0,)}[], method_for_inference_limit_heuristics=nothing, linetable=Array{Any, (1,)}[Core.LineInfoNode(method=Symbol("#19"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"), line=26, inlined_at=0)], slotnames=Array{Symbol, (2,)}[
  Symbol("#self#"),
  :io], slotflags=Array{UInt8, (2,)}[0x00, 0x08], slottypes=nothing, rettype=Any, parent=nothing, edges=nothing, min_world=0x0000000000000001, max_world=0xffffffffffffffff, inferred=false, inlineable=false, propagate_inbounds=false, pure=false)),
  Symbol("#19#26"),
  Expr(:call, Core.typeof, Core.SlotNumber(id=10)),
  Expr(:call, Core.apply_type, SSAValue(137), SSAValue(138)),
  Core.SlotNumber(id=3) = Expr(:new, SSAValue(139), Core.SlotNumber(id=10)),
  Core.SlotNumber(id=3),
  Expr(:call, :joinpath, :ProjDir, "chn2.txt"),
  Expr(:call, :open, SSAValue(141), SSAValue(142), "w"),
  Expr(:thunk, Core.CodeInfo(code=Array{Any, (4,)}[
  Expr(:global, Symbol("#20#27")),
  Expr(:const, Symbol("#20#27")),
  Expr(:struct_type, Symbol("#20#27"), Expr(:call, Core.svec), Expr(:call, Core.svec), Core.Function, Expr(:call, Core.svec), false, 0),
  Expr(:return, nothing)], codelocs=Array{Int32, (4,)}[1, 1, 1, 1], ssavaluetypes=4, ssaflags=Array{UInt8, (0,)}[], method_for_inference_limit_heuristics=nothing, linetable=Array{Any, (1,)}[Core.LineInfoNode(method=Symbol("top-level scope"), file=:none, line=0, inlined_at=0)], slotnames=Array{Symbol, (0,)}[], slotflags=Array{UInt8, (0,)}[], slottypes=nothing, rettype=Any, parent=nothing, edges=nothing, min_world=0x0000000000000001, max_world=0xffffffffffffffff, inferred=false, inlineable=false, propagate_inbounds=false, pure=false)),
  Expr(:thunk, Core.CodeInfo(code=Array{Any, (4,)}[
  Expr(:global, Symbol("#21#28")),
  Expr(:const, Symbol("#21#28")),
  Expr(:struct_type, Symbol("#21#28"), Expr(:call, Core.svec), Expr(:call, Core.svec), Core.Function, Expr(:call, Core.svec), false, 0),
  Expr(:return, nothing)], codelocs=Array{Int32, (4,)}[1, 1, 1, 1], ssavaluetypes=4, ssaflags=Array{UInt8, (0,)}[], method_for_inference_limit_heuristics=nothing, linetable=Array{Any, (1,)}[Core.LineInfoNode(method=Symbol("top-level scope"), file=:none, line=0, inlined_at=0)], slotnames=Array{Symbol, (0,)}[], slotflags=Array{UInt8, (0,)}[], slottypes=nothing, rettype=Any, parent=nothing, edges=nothing, min_world=0x0000000000000001, max_world=0xffffffffffffffff, inferred=false, inlineable=false, propagate_inbounds=false, pure=false)),
  Expr(:call, Core.svec, Symbol("#20#27"), Core.Any),
  Expr(:call, Core.svec),
  Expr(:call, Core.svec, SSAValue(146), SSAValue(147)),
  Expr(:method, false, SSAValue(148), Core.CodeInfo(code=Array{Any, (2,)}[
  Expr(:call, Main.read, Core.SlotNumber(id=2), Main.String),
  Expr(:return, SSAValue(1))], codelocs=Array{Int32, (2,)}[1, 1], ssavaluetypes=2, ssaflags=Array{UInt8, (0,)}[], method_for_inference_limit_heuristics=nothing, linetable=Array{Any, (1,)}[Core.LineInfoNode(method=Symbol("#20"), file=:none, line=0, inlined_at=0)], slotnames=Array{Symbol, (2,)}[
  Symbol("#self#"),
  :f], slotflags=Array{UInt8, (2,)}[0x00, 0x08], slottypes=nothing, rettype=Any, parent=nothing, edges=nothing, min_world=0x0000000000000001, max_world=0xffffffffffffffff, inferred=false, inlineable=false, propagate_inbounds=false, pure=false)),
  Expr(:call, Core.svec, Symbol("#21#28"), Core.Any),
  Expr(:call, Core.svec),
  Expr(:call, Core.svec, SSAValue(150), SSAValue(151)),
  Expr(:method, false, SSAValue(152), Core.CodeInfo(code=Array{Any, (2,)}[
  Expr(:call, Main.read, Core.SlotNumber(id=2), Main.String),
  Expr(:return, SSAValue(1))], codelocs=Array{Int32, (2,)}[1, 1], ssavaluetypes=2, ssaflags=Array{UInt8, (0,)}[], method_for_inference_limit_heuristics=nothing, linetable=Array{Any, (1,)}[Core.LineInfoNode(method=Symbol("#21"), file=:none, line=0, inlined_at=0)], slotnames=Array{Symbol, (2,)}[
  Symbol("#self#"),
  :f], slotflags=Array{UInt8, (2,)}[0x00, 0x08], slottypes=nothing, rettype=Any, parent=nothing, edges=nothing, min_world=0x0000000000000001, max_world=0xffffffffffffffff, inferred=false, inlineable=false, propagate_inbounds=false, pure=false)),
  Expr(:enter, 168),
  Core.SlotNumber(id=12) = Expr(:new, Symbol("#20#27")),
  Core.SlotNumber(id=12),
  Expr(:call, :joinpath, :ProjDir, "chn1.txt"),
  Expr(:call, :open, SSAValue(156), SSAValue(157)),
  Core.SlotNumber(id=13) = Expr(:new, Symbol("#21#28")),
  Core.SlotNumber(id=13),
  Expr(:call, :joinpath, :ProjDir, "chn2.txt"),
  Expr(:call, :open, SSAValue(160), SSAValue(161)),
  Expr(:call, Test.Expr, :(:comparison), SSAValue(158), :==, SSAValue(162)),
  Expr(:call, Test.Expr, :(:comparison), quote Expr(:call, :open, Expr(:->, :f, Expr(:block, Expr(:call, :read, :f, :String))), Expr(:call, :joinpath, :ProjDir, "chn1.txt")) end, :(:==), quote Expr(:call, :open, Expr(:->, :f, Expr(:block, Expr(:call, :read, :f, :String))), Expr(:call, :joinpath, :ProjDir, "chn2.txt")) end),
  Core.SlotNumber(id=26) = Expr(:call, Test.eval_test, SSAValue(163), SSAValue(164), quote #= Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"):29 =# end, quote false end),
  Expr(:leave, 1),
  goto 180,
  Expr(:leave, 1),
  Core.SlotNumber(id=14) = Expr(:the_exception),
  Expr(:call, Test.isa, Core.SlotNumber(id=14), Test.InterruptException),
  Expr(:gotoifnot, SSAValue(170), 174),
  Expr(:call, Test.rethrow),
  goto 175,
  false,
  Core.SlotNumber(id=14),
  Expr(:call, Base.getproperty, Test.Base, :(:catch_stack)),
  Expr(:call, SSAValue(176)),
  Core.SlotNumber(id=26) = Expr(:call, Test.Threw, SSAValue(175), SSAValue(177), quote #= Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"):29 =# end),
  Expr(:pop_exception, SSAValue(154)),
  Core.SlotNumber(id=26),
  Expr(:call, Test.do_test, SSAValue(180), quote Expr(:call, :==, Expr(:call, :open, Expr(:->, :f, Expr(:block, Expr(:call, :read, :f, :String))), Expr(:call, :joinpath, :ProjDir, "chn1.txt")), Expr(:call, :open, Expr(:->, :f, Expr(:block, Expr(:call, :read, :f, :String))), Expr(:call, :joinpath, :ProjDir, "chn2.txt"))) end),
  Expr(:call, Base.getproperty, :Turing, :(:Inference)),
  Expr(:call, Base.getproperty, SSAValue(182), :(:resume)),
  Core.SlotNumber(id=10),
  Core.SlotNumber(id=11) = Expr(:call, SSAValue(183), SSAValue(184), 100),
  Expr(:enter, 194),
  Expr(:call, :range, Core.SlotNumber(id=11)),
  Expr(:call, ::, 1, 1, 100),
  Expr(:call, Test.Expr, :(:comparison), SSAValue(187), :==, SSAValue(188)),
  Expr(:call, Test.Expr, :(:comparison), quote Expr(:call, :range, :chn3) end, :(:==), quote Expr(:call, ::, 1, 1, 100) end),
  Core.SlotNumber(id=27) = Expr(:call, Test.eval_test, SSAValue(189), SSAValue(190), quote #= Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"):34 =# end, quote false end),
  Expr(:leave, 1),
  goto 206,
  Expr(:leave, 1),
  Core.SlotNumber(id=15) = Expr(:the_exception),
  Expr(:call, Test.isa, Core.SlotNumber(id=15), Test.InterruptException),
  Expr(:gotoifnot, SSAValue(196), 200),
  Expr(:call, Test.rethrow),
  goto 201,
  false,
  Core.SlotNumber(id=15),
  Expr(:call, Base.getproperty, Test.Base, :(:catch_stack)),
  Expr(:call, SSAValue(202)),
  Core.SlotNumber(id=27) = Expr(:call, Test.Threw, SSAValue(201), SSAValue(203), quote #= Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"):34 =# end),
  Expr(:pop_exception, SSAValue(186)),
  Core.SlotNumber(id=27),
  Expr(:call, Test.do_test, SSAValue(206), quote Expr(:call, :==, Expr(:call, :range, :chn3), Expr(:call, ::, 1, 1, 100)) end),
  Expr(:leave, 1),
  goto 224,
  Expr(:leave, 1),
  Core.SlotNumber(id=16) = Expr(:the_exception),
  Expr(:call, Test.isa, Core.SlotNumber(id=16), Test.InterruptException),
  Expr(:gotoifnot, SSAValue(212), 216),
  Expr(:call, Test.rethrow),
  goto 217,
  false,
  Expr(:copyast, quote Expr(:tuple) end),
  Core.SlotNumber(id=16),
  Expr(:call, Base.getproperty, Test.Base, :(:catch_stack)),
  Expr(:call, SSAValue(219)),
  Expr(:call, Test.Error, :(:nontest_error), SSAValue(217), SSAValue(218), SSAValue(220), quote #= Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"):5 =# end),
  Expr(:call, Test.record, Symbol("#404#ts"), SSAValue(221)),
  Expr(:pop_exception, SSAValue(39)),
  Expr(:leave, 1),
  goto 228,
  Expr(:leave, 1),
  Core.SlotNumber(id=25) = 1,
  Expr(:call, Test.copy!, Core.SlotNumber(id=1), Symbol("#406#oldrng")),
  Expr(:call, Core.:(===), Core.SlotNumber(id=25), 1),
  Expr(:gotoifnot, SSAValue(229), 232),
  Expr(:call, Base.rethrow),
  Expr(:call, Test.pop_testset),
  Expr(:call, Test.finish, Symbol("#404#ts")),
  Expr(:return, nothing)], codelocs=Array{Int32, (234,)}[1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 6, 7, 8, 9, 9, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 19, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 12, 12, 12, 12, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 31, 32, 2], ssavaluetypes=234, ssaflags=Array{UInt8, (0,)}[], method_for_inference_limit_heuristics=nothing, linetable=Array{Any, (32,)}[
  Core.LineInfoNode(method=Symbol("top-level scope"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"), line=5, inlined_at=0),
  Core.LineInfoNode(method=Symbol("top-level scope"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"), line=6, inlined_at=0),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1093, inlined_at=2),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1094, inlined_at=2),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1097, inlined_at=2),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1097, inlined_at=2),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1098, inlined_at=2),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1102, inlined_at=2),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1103, inlined_at=2),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1104, inlined_at=2),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1106, inlined_at=2),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1107, inlined_at=2),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"), line=6, inlined_at=12),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=581, inlined_at=13),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=582, inlined_at=13),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=595, inlined_at=13),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=557, inlined_at=13),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"), line=14, inlined_at=12),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"), line=15, inlined_at=12),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"), line=16, inlined_at=12),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"), line=18, inlined_at=12),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"), line=19, inlined_at=12),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"), line=21, inlined_at=12),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"), line=25, inlined_at=12),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"), line=29, inlined_at=12),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"), line=33, inlined_at=12),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"), line=34, inlined_at=12),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1109, inlined_at=2),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1112, inlined_at=2),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1114, inlined_at=2),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1116, inlined_at=2),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1117, inlined_at=2)], slotnames=Array{Symbol, (27,)}[
  Symbol("#405#RNG"),
  Symbol("#18"),
  Symbol("#19"),
  Symbol("gdemo#502#17"),
  Symbol("gdemo#502"),
  :gdemo,
  :model,
  :sampler,
  :chn1,
  :chn2,
  :chn3,
  Symbol("#20"),
  Symbol("#21"),
  :_e,
  :_e,
  :err,
  Symbol("##gdemo#502"),
  Symbol("##gdemo#502"),
  Symbol("##gdemo#502"),
  Symbol("##gdemo#502"),
  Symbol("##gdemo#502"),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol("")], slotflags=Array{UInt8, (27,)}[0x18, 0x18, 0x18, 0x58, 0x48, 0x58, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], slottypes=nothing, rettype=Any, parent=nothing, edges=nothing, min_world=0x0000000000000001, max_world=0xffffffffffffffff, inferred=false, inlineable=false, propagate_inbounds=false, pure=false)jl_interpret_toplevel_thunk at /workspace/srcdir/src/interpreter.c:897
jl_toplevel_eval_flex at /workspace/srcdir/src/toplevel.c:814
jl_parse_eval_all at /workspace/srcdir/src/ast.c:873
jl_load at /workspace/srcdir/src/toplevel.c:878
include at ./boot.jl:328 [inlined]
include_relative at ./loading.jl:1105
include at ./Base.jl:31
_jl_invoke at /workspace/srcdir/src/gf.c:2135 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2305
include at ./client.jl:424
_jl_invoke at /workspace/srcdir/src/gf.c:2135 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2305
jl_apply at /workspace/srcdir/src/julia.h:1631 [inlined]
do_call at /workspace/srcdir/src/interpreter.c:328
eval_value at /workspace/srcdir/src/interpreter.c:417
eval_stmt_value at /workspace/srcdir/src/interpreter.c:368 [inlined]
eval_body at /workspace/srcdir/src/interpreter.c:778
eval_body at /workspace/srcdir/src/interpreter.c:705
eval_body at /workspace/srcdir/src/interpreter.c:705
jl_interpret_toplevel_thunk_callback at /workspace/srcdir/src/interpreter.c:888
Interpreter frame (ip: 46)
Core.CodeInfo(code=Array{Any, (81,)}[
  <newvar #<1>>,
  Expr(:call, Test.get_testset_depth),
  Expr(:call, Test.:(==), SSAValue(2), 0),
  Expr(:gotoifnot, SSAValue(3), 7),
  Core.SlotNumber(id=3) = Test.DefaultTestSet,
  goto 9,
  Expr(:call, Test.get_testset),
  Core.SlotNumber(id=3) = Expr(:call, Test.typeof, SSAValue(7)),
  Core.SlotNumber(id=3),
  Expr(:call, Test._check_testset, SSAValue(9), quote Expr(:call, :==, Expr(:call, :get_testset_depth), 0) end),
  Expr(:call, Test.get_testset_depth),
  Expr(:call, Test.:(==), SSAValue(11), 0),
  Expr(:gotoifnot, SSAValue(12), 16),
  Core.SlotNumber(id=4) = Test.DefaultTestSet,
  goto 18,
  Expr(:call, Test.get_testset),
  Core.SlotNumber(id=4) = Expr(:call, Test.typeof, SSAValue(16)),
  Core.SlotNumber(id=4),
  SSAValue(18),
  Expr(:call, Base.NamedTuple),
  Expr(:call, Core.apply_type, Test.Dict, Test.Symbol, Test.Any),
  Expr(:call, SSAValue(21)),
  Expr(:call, Base.merge, SSAValue(20), SSAValue(22)),
  Expr(:call, Base.isempty, SSAValue(23)),
  Expr(:gotoifnot, SSAValue(24), 28),
  Core.SlotNumber(id=5) = Expr(:call, SSAValue(19), "MCMCChains"),
  goto 30,
  Expr(:call, Core.kwfunc, SSAValue(19)),
  Core.SlotNumber(id=5) = Expr(:call, SSAValue(28), SSAValue(23), SSAValue(19), "MCMCChains"),
  Symbol("#1#ts") = Core.SlotNumber(id=5),
  Expr(:gotoifnot, false, 33),
  goto 31,
  Expr(:call, Test.push_testset, Symbol("#1#ts")),
  Core.SlotNumber(id=1) = Expr(:call, Test.default_rng),
  Expr(:call, Test.copy, Core.SlotNumber(id=1)),
  Symbol("#3#oldrng") = SSAValue(35),
  Expr(:enter, 73),
  Core.SlotNumber(id=6) = -1,
  Expr(:enter, 57),
  Expr(:call, Base.getproperty, Test.Random, :(:seed!)),
  Expr(:call, Base.getproperty, Core.SlotNumber(id=1), :(:seed)),
  Expr(:call, SSAValue(40), SSAValue(41)),
  Expr(:call, :include, "plot_test.jl"),
  Expr(:call, :include, "diagnostic_tests.jl"),
  Expr(:call, :include, "missing_tests.jl"),
  Expr(:call, :include, "sections_tests.jl"),
  Expr(:call, :include, "serialization_tests.jl"),
  Expr(:call, :include, "sampling_tests.jl"),
  Expr(:call, :include, "arrayconstructor_tests.jl"),
  Expr(:call, :include, "sampling_tests.jl"),
  Expr(:call, :include, "arrayconstructor_tests.jl"),
  Expr(:call, :include, "dfconstructor_tests.jl"),
  Expr(:call, :include, "summarize_tests.jl"),
  Expr(:call, :include, "modelstats_test.jl"),
  Expr(:leave, 1),
  goto 71,
  Expr(:leave, 1),
  Core.SlotNumber(id=2) = Expr(:the_exception),
  Expr(:call, Test.isa, Core.SlotNumber(id=2), Test.InterruptException),
  Expr(:gotoifnot, SSAValue(59), 63),
  Expr(:call, Test.rethrow),
  goto 64,
  false,
  Expr(:copyast, quote Expr(:tuple) end),
  Core.SlotNumber(id=2),
  Expr(:call, Base.getproperty, Test.Base, :(:catch_stack)),
  Expr(:call, SSAValue(66)),
  Expr(:call, Test.Error, :(:nontest_error), SSAValue(64), SSAValue(65), SSAValue(67), quote #= Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/runtests.jl"):3 =# end),
  Expr(:call, Test.record, Symbol("#1#ts"), SSAValue(68)),
  Expr(:pop_exception, SSAValue(39)),
  Expr(:leave, 1),
  goto 75,
  Expr(:leave, 1),
  Core.SlotNumber(id=6) = 1,
  Expr(:call, Test.copy!, Core.SlotNumber(id=1), Symbol("#3#oldrng")),
  Expr(:call, Core.:(===), Core.SlotNumber(id=6), 1),
  Expr(:gotoifnot, SSAValue(76), 79),
  Expr(:call, Base.rethrow),
  Expr(:call, Test.pop_testset),
  Expr(:call, Test.finish, Symbol("#1#ts")),
  Expr(:return, SSAValue(80))], codelocs=Array{Int32, (81,)}[1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 5, 6, 7, 8, 8, 9, 9, 9, 10, 10, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 11, 11, 11, 11, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 27, 28, 1], ssavaluetypes=81, ssaflags=Array{UInt8, (0,)}[], method_for_inference_limit_heuristics=nothing, linetable=Array{Any, (28,)}[
  Core.LineInfoNode(method=Symbol("top-level scope"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/runtests.jl"), line=5, inlined_at=0),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1093, inlined_at=1),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1094, inlined_at=1),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1097, inlined_at=1),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1097, inlined_at=1),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1098, inlined_at=1),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1102, inlined_at=1),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1103, inlined_at=1),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1104, inlined_at=1),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1106, inlined_at=1),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1107, inlined_at=1),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/runtests.jl"), line=5, inlined_at=11),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/runtests.jl"), line=8, inlined_at=11),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/runtests.jl"), line=11, inlined_at=11),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/runtests.jl"), line=14, inlined_at=11),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/runtests.jl"), line=17, inlined_at=11),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/runtests.jl"), line=20, inlined_at=11),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/runtests.jl"), line=23, inlined_at=11),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/runtests.jl"), line=26, inlined_at=11),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/runtests.jl"), line=29, inlined_at=11),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/runtests.jl"), line=32, inlined_at=11),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/runtests.jl"), line=35, inlined_at=11),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/runtests.jl"), line=38, inlined_at=11),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1109, inlined_at=1),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1112, inlined_at=1),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1114, inlined_at=1),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1116, inlined_at=1),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1117, inlined_at=1)], slotnames=Array{Symbol, (6,)}[
  Symbol("#2#RNG"),
  :err,
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol("")], slotflags=Array{UInt8, (6,)}[0x18, 0x18, 0x00, 0x00, 0x00, 0x00], slottypes=nothing, rettype=Any, parent=nothing, edges=nothing, min_world=0x0000000000000001, max_world=0xffffffffffffffff, inferred=false, inlineable=false, propagate_inbounds=false, pure=false)jl_interpret_toplevel_thunk at /workspace/srcdir/src/interpreter.c:897
jl_toplevel_eval_flex at /workspace/srcdir/src/toplevel.c:814
jl_parse_eval_all at /workspace/srcdir/src/ast.c:873
jl_load at /workspace/srcdir/src/toplevel.c:878
include at ./boot.jl:328 [inlined]
include_relative at ./loading.jl:1105
include at ./Base.jl:31
_jl_invoke at /workspace/srcdir/src/gf.c:2135 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2305
include at ./client.jl:424
_jl_invoke at /workspace/srcdir/src/gf.c:2135 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2305
jl_apply at /workspace/srcdir/src/julia.h:1631 [inlined]
do_call at /workspace/srcdir/src/interpreter.c:328
eval_value at /workspace/srcdir/src/interpreter.c:417
eval_stmt_value at /workspace/srcdir/src/interpreter.c:368 [inlined]
eval_body at /workspace/srcdir/src/interpreter.c:778
jl_interpret_toplevel_thunk_callback at /workspace/srcdir/src/interpreter.c:888
Interpreter frame (ip: 0)
Core.CodeInfo(code=Array{Any, (2,)}[
  Expr(:call, :include, "/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/runtests.jl"),
  Expr(:return, SSAValue(1))], codelocs=Array{Int32, (2,)}[1, 1], ssavaluetypes=2, ssaflags=Array{UInt8, (0,)}[], method_for_inference_limit_heuristics=nothing, linetable=Array{Any, (1,)}[Core.LineInfoNode(method=Symbol("top-level scope"), file=:none, line=6, inlined_at=0)], slotnames=Array{Symbol, (0,)}[], slotflags=Array{UInt8, (0,)}[], slottypes=nothing, rettype=Any, parent=nothing, edges=nothing, min_world=0x0000000000000001, max_world=0xffffffffffffffff, inferred=false, inlineable=false, propagate_inbounds=false, pure=false)jl_interpret_toplevel_thunk at /workspace/srcdir/src/interpreter.c:897
jl_toplevel_eval_flex at /workspace/srcdir/src/toplevel.c:814
jl_toplevel_eval_flex at /workspace/srcdir/src/toplevel.c:764
jl_toplevel_eval_in at /workspace/srcdir/src/toplevel.c:843
eval at ./boot.jl:330
_jl_invoke at /workspace/srcdir/src/gf.c:2135 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2305
exec_options at ./client.jl:263
_start at ./client.jl:460
jfptr__start_2084.clone_1 at /opt/julia/lib/julia/sys.so (unknown line)
_jl_invoke at /workspace/srcdir/src/gf.c:2135 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2305
jl_apply at /workspace/srcdir/ui/../src/julia.h:1631 [inlined]
true_main at /workspace/srcdir/ui/repl.c:96
main at /workspace/srcdir/ui/repl.c:217
__libc_start_main at /lib/x86_64-linux-gnu/libc.so.6 (unknown line)
unknown function (ip: 0x4015e4)
Internal error: encountered unexpected error in runtime:
UndefRefError()
rec_backtrace at /workspace/srcdir/src/stackwalk.c:94
record_backtrace at /workspace/srcdir/src/task.c:224 [inlined]
jl_throw at /workspace/srcdir/src/task.c:461
istopfunction at ./compiler/utilities.jl:49 [inlined]
abstract_call at ./compiler/abstractinterpretation.jl:805
jfptr_abstract_call_606.clone_1 at /opt/julia/lib/julia/sys.so (unknown line)
_jl_invoke at /workspace/srcdir/src/gf.c:2135 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2305
abstract_apply at ./compiler/abstractinterpretation.jl:581
abstract_call at ./compiler/abstractinterpretation.jl:637
abstract_call at ./compiler/abstractinterpretation.jl:636
abstract_eval_call at ./compiler/abstractinterpretation.jl:879
abstract_eval at ./compiler/abstractinterpretation.jl:949
typeinf_local at ./compiler/abstractinterpretation.jl:1208
typeinf_nocycle at ./compiler/abstractinterpretation.jl:1264
typeinf at ./compiler/typeinfer.jl:12
typeinf_edge at ./compiler/typeinfer.jl:488
abstract_call_method at ./compiler/abstractinterpretation.jl:396
abstract_call_gf_by_type at ./compiler/abstractinterpretation.jl:93
abstract_call at ./compiler/abstractinterpretation.jl:850
jfptr_abstract_call_606.clone_1 at /opt/julia/lib/julia/sys.so (unknown line)
_jl_invoke at /workspace/srcdir/src/gf.c:2135 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2305
abstract_apply at ./compiler/abstractinterpretation.jl:581
abstract_call at ./compiler/abstractinterpretation.jl:637
abstract_call at ./compiler/abstractinterpretation.jl:636
abstract_eval_call at ./compiler/abstractinterpretation.jl:879
abstract_eval at ./compiler/abstractinterpretation.jl:949
typeinf_local at ./compiler/abstractinterpretation.jl:1208
typeinf_nocycle at ./compiler/abstractinterpretation.jl:1264
typeinf at ./compiler/typeinfer.jl:12
typeinf_ext at ./compiler/typeinfer.jl:574
typeinf_ext at ./compiler/typeinfer.jl:605
jfptr_typeinf_ext_1.clone_1 at /opt/julia/lib/julia/sys.so (unknown line)
_jl_invoke at /workspace/srcdir/src/gf.c:2135 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2305
jl_apply at /workspace/srcdir/src/julia.h:1631 [inlined]
jl_type_infer at /workspace/srcdir/src/gf.c:209
jl_compile_method_internal at /workspace/srcdir/src/gf.c:1879
_jl_invoke at /workspace/srcdir/src/gf.c:2140 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2305
runmodel! at /home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/varinfo.jl:602
_jl_invoke at /workspace/srcdir/src/gf.c:2141 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2305
runmodel! at /home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/varinfo.jl:598
_jl_invoke at /workspace/srcdir/src/gf.c:2141 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2305
#sample_init!#23 at /home/pkgeval/.julia/packages/Turing/a0nSz/src/inference/hmc.jl:140
_jl_invoke at /workspace/srcdir/src/gf.c:2141 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2305
#sample_init! at ./none:0
_jl_invoke at /workspace/srcdir/src/gf.c:2141 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2305
#sample#6 at /home/pkgeval/.julia/packages/AbstractMCMC/pi3j6/src/AbstractMCMC.jl:206
_jl_invoke at /workspace/srcdir/src/gf.c:2141 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2305
#sample at ./none:0
_jl_invoke at /workspace/srcdir/src/gf.c:2141 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2305
#resume#15 at /home/pkgeval/.julia/packages/Turing/a0nSz/src/inference/Inference.jl:430
_jl_invoke at /workspace/srcdir/src/gf.c:2141 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2305
resume at /home/pkgeval/.julia/packages/Turing/a0nSz/src/inference/Inference.jl:427
_jl_invoke at /workspace/srcdir/src/gf.c:2141 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2305
jl_apply at /workspace/srcdir/src/julia.h:1631 [inlined]
do_call at /workspace/srcdir/src/interpreter.c:328
eval_value at /workspace/srcdir/src/interpreter.c:417
eval_body at /workspace/srcdir/src/interpreter.c:641
eval_body at /workspace/srcdir/src/interpreter.c:705
eval_body at /workspace/srcdir/src/interpreter.c:705
jl_interpret_toplevel_thunk_callback at /workspace/srcdir/src/interpreter.c:888
Interpreter frame (ip: 184)
Core.CodeInfo(code=Array{Any, (234,)}[
  <newvar #<1>>,
  Expr(:call, Test.get_testset_depth),
  Expr(:call, Test.:(==), SSAValue(2), 0),
  Expr(:gotoifnot, SSAValue(3), 7),
  Core.SlotNumber(id=22) = Test.DefaultTestSet,
  goto 9,
  Expr(:call, Test.get_testset),
  Core.SlotNumber(id=22) = Expr(:call, Test.typeof, SSAValue(7)),
  Core.SlotNumber(id=22),
  Expr(:call, Test._check_testset, SSAValue(9), quote Expr(:call, :==, Expr(:call, :get_testset_depth), 0) end),
  Expr(:call, Test.get_testset_depth),
  Expr(:call, Test.:(==), SSAValue(11), 0),
  Expr(:gotoifnot, SSAValue(12), 16),
  Core.SlotNumber(id=23) = Test.DefaultTestSet,
  goto 18,
  Expr(:call, Test.get_testset),
  Core.SlotNumber(id=23) = Expr(:call, Test.typeof, SSAValue(16)),
  Core.SlotNumber(id=23),
  SSAValue(18),
  Expr(:call, Base.NamedTuple),
  Expr(:call, Core.apply_type, Test.Dict, Test.Symbol, Test.Any),
  Expr(:call, SSAValue(21)),
  Expr(:call, Base.merge, SSAValue(20), SSAValue(22)),
  Expr(:call, Base.isempty, SSAValue(23)),
  Expr(:gotoifnot, SSAValue(24), 28),
  Core.SlotNumber(id=24) = Expr(:call, SSAValue(19), "serialization read and write test"),
  goto 30,
  Expr(:call, Core.kwfunc, SSAValue(19)),
  Core.SlotNumber(id=24) = Expr(:call, SSAValue(28), SSAValue(23), SSAValue(19), "serialization read and write test"),
  Symbol("#404#ts") = Core.SlotNumber(id=24),
  Expr(:gotoifnot, false, 33),
  goto 31,
  Expr(:call, Test.push_testset, Symbol("#404#ts")),
  Core.SlotNumber(id=1) = Expr(:call, Test.default_rng),
  Expr(:call, Test.copy, Core.SlotNumber(id=1)),
  Symbol("#406#oldrng") = SSAValue(35),
  Expr(:enter, 226),
  Core.SlotNumber(id=25) = -1,
  Expr(:enter, 210),
  <newvar #<2>>,
  <newvar #<3>>,
  Core.SlotNumber(id=5) = Expr(:call, Core.Box),
  <newvar #<6>>,
  <newvar #<7>>,
  <newvar #<8>>,
  <newvar #<9>>,
  <newvar #<10>>,
  <newvar #<11>>,
  Expr(:call, Base.getproperty, Test.Random, :(:seed!)),
  Expr(:call, Base.getproperty, Core.SlotNumber(id=1), :(:seed)),
  Expr(:call, SSAValue(49), SSAValue(50)),
  Expr(:thunk, Core.CodeInfo(code=Array{Any, (4,)}[
  Expr(:global, Symbol("##gdemo#502#17#23")),
  Expr(:const, Symbol("##gdemo#502#17#23")),
  Expr(:struct_type, Symbol("##gdemo#502#17#23"), Expr(:call, Core.svec), Expr(:call, Core.svec, :(Symbol("##gdemo#502"))), Core.Function, Expr(:call, Core.svec, Core.Box), false, 1),
  Expr(:return, nothing)], codelocs=Array{Int32, (4,)}[1, 1, 1, 1], ssavaluetypes=4, ssaflags=Array{UInt8, (0,)}[], method_for_inference_limit_heuristics=nothing, linetable=Array{Any, (1,)}[Core.LineInfoNode(method=Symbol("top-level scope"), file=:none, line=0, inlined_at=0)], slotnames=Array{Symbol, (0,)}[], slotflags=Array{UInt8, (0,)}[], slottypes=nothing, rettype=Any, parent=nothing, edges=nothing, min_world=0x0000000000000001, max_world=0xffffffffffffffff, inferred=false, inlineable=false, propagate_inbounds=false, pure=false)),
  Expr(:thunk, Core.CodeInfo(code=Array{Any, (5,)}[
  Expr(:global, Symbol("##gdemo#502#22")),
  Expr(:const, Symbol("##gdemo#502#22")),
  Expr(:call, Core.TypeVar, :(Symbol("##gdemo#502#17")), Core.Any),
  Expr(:struct_type, Symbol("##gdemo#502#22"), Expr(:call, Core.svec, SSAValue(3)), Expr(:call, Core.svec, :(Symbol("##gdemo#502#17")), :(Symbol("##gdemo#502"))), Core.Function, Expr(:call, Core.svec, SSAValue(3), Core.Box), false, 2),
  Expr(:return, nothing)], codelocs=Array{Int32, (5,)}[1, 1, 1, 1, 1], ssavaluetypes=5, ssaflags=Array{UInt8, (0,)}[], method_for_inference_limit_heuristics=nothing, linetable=Array{Any, (1,)}[Core.LineInfoNode(method=Symbol("top-level scope"), file=:none, line=0, inlined_at=0)], slotnames=Array{Symbol, (0,)}[], slotflags=Array{UInt8, (0,)}[], slottypes=nothing, rettype=Any, parent=nothing, edges=nothing, min_world=0x0000000000000001, max_world=0xffffffffffffffff, inferred=false, inlineable=false, propagate_inbounds=false, pure=false)),
  Expr(:call, Core.svec, Symbol("##gdemo#502#17#23"), Core.Any, Symbol("##gdemo#502#22")),
  Expr(:call, Core.svec),
  Expr(:call, Core.svec, SSAValue(54), SSAValue(55)),
  Expr(:method, false, SSAValue(56), Core.CodeInfo(code=Array{Any, (9,)}[
  Expr(:call, Core.getfield, Core.SlotNumber(id=1), :(Symbol("##gdemo#502"))),
  Expr(:call, Core.isdefined, SSAValue(1), :(:contents)),
  Expr(:gotoifnot, SSAValue(2), 5),
  goto 7,
  <newvar #<4>>,
  Core.SlotNumber(id=4),
  Expr(:call, Core.getfield, SSAValue(1), :(:contents)),
  Expr(:call, SSAValue(7), Core.SlotNumber(id=2)),
  Expr(:return, SSAValue(8))], codelocs=Array{Int32, (9,)}[1, 1, 1, 1, 1, 1, 1, 1, 1], ssavaluetypes=9, ssaflags=Array{UInt8, (0,)}[], method_for_inference_limit_heuristics=nothing, linetable=Array{Any, (1,)}[Core.LineInfoNode(method=Symbol("##gdemo#502#17#23"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=581, inlined_at=0)], slotnames=Array{Symbol, (4,)}[
  Symbol("##gdemo#502#17"),
  :x,
  Symbol(""),
  Symbol("##gdemo#502")], slotflags=Array{UInt8, (4,)}[0x00, 0x08, 0x00, 0x20], slottypes=nothing, rettype=Any, parent=nothing, edges=nothing, min_world=0x0000000000000001, max_world=0xffffffffffffffff, inferred=false, inlineable=false, propagate_inbounds=false, pure=false)),
  Expr(:call, Core.svec, Symbol("##gdemo#502#22")),
  Expr(:call, Core.svec),
  Expr(:call, Core.svec, SSAValue(58), SSAValue(59)),
  Expr(:method, false, SSAValue(60), Core.CodeInfo(code=Array{Any, (6,)}[
  Expr(:call, Core.UndefKeywordError, :(:x)),
  Core.SlotNumber(id=2) = Expr(:call, Core.throw, SSAValue(1)),
  Expr(:call, Core.getfield, Core.SlotNumber(id=1), :(Symbol("##gdemo#502#17"))),
  Core.SlotNumber(id=2),
  Expr(:call, SSAValue(3), SSAValue(4), Core.SlotNumber(id=1)),
  Expr(:return, SSAValue(5))], codelocs=Array{Int32, (6,)}[1, 1, 1, 1, 1, 1], ssavaluetypes=6, ssaflags=Array{UInt8, (0,)}[], method_for_inference_limit_heuristics=nothing, linetable=Array{Any, (1,)}[Core.LineInfoNode(method=Symbol("##gdemo#502#22"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=581, inlined_at=0)], slotnames=Array{Symbol, (2,)}[
  Symbol("#self#"),
  :x], slotflags=Array{UInt8, (2,)}[0x08, 0x18], slottypes=nothing, rettype=Any, parent=nothing, edges=nothing, min_world=0x0000000000000001, max_world=0xffffffffffffffff, inferred=false, inlineable=false, propagate_inbounds=false, pure=false)),
  Expr(:call, Core.kwftype, Symbol("##gdemo#502#22")),
  Expr(:call, Core.svec, SSAValue(62), Core.Any, Symbol("##gdemo#502#22")),
  Expr(:call, Core.svec),
  Expr(:call, Core.svec, SSAValue(63), SSAValue(64)),
  Expr(:method, false, SSAValue(65), Core.CodeInfo(code=Array{Any, (19,)}[
  Expr(:call, Base.haskey, Core.SlotNumber(id=2), :(:x)),
  Expr(:gotoifnot, SSAValue(1), 5),
  Core.SlotNumber(id=5) = Expr(:call, Base.getindex, Core.SlotNumber(id=2), :(:x)),
  goto 7,
  Expr(:call, Core.UndefKeywordError, :(:x)),
  Core.SlotNumber(id=5) = Expr(:call, Core.throw, SSAValue(5)),
  Core.SlotNumber(id=4) = Core.SlotNumber(id=5),
  Expr(:call, Core.tuple, :(:x)),
  Expr(:call, Core.apply_type, Core.NamedTuple, SSAValue(8)),
  Expr(:call, Base.structdiff, Core.SlotNumber(id=2), SSAValue(9)),
  Expr(:call, Base.pairs, SSAValue(10)),
  Expr(:call, Base.isempty, SSAValue(11)),
  Expr(:gotoifnot, SSAValue(12), 15),
  goto 16,
  Expr(:call, Base.kwerr, Core.SlotNumber(id=2), Core.SlotNumber(id=3)),
  Expr(:call, Core.getfield, Core.SlotNumber(id=3), :(Symbol("##gdemo#502#17"))),
  Core.SlotNumber(id=4),
  Expr(:call, SSAValue(16), SSAValue(17), Core.SlotNumber(id=3)),
  Expr(:return, SSAValue(18))], codelocs=Array{Int32, (19,)}[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ssavaluetypes=19, ssaflags=Array{UInt8, (0,)}[], method_for_inference_limit_heuristics=nothing, linetable=Array{Any, (1,)}[Core.LineInfoNode(method=:Any, file=:none, line=0, inlined_at=0)], slotnames=Array{Symbol, (5,)}[
  Symbol("#unused#"),
  Symbol(""),
  Symbol(""),
  :x,
  Symbol("")], slotflags=Array{UInt8, (5,)}[0x00, 0x08, 0x08, 0x18, 0x00], slottypes=nothing, rettype=Any, parent=nothing, edges=nothing, min_world=0x0000000000000001, max_world=0xffffffffffffffff, inferred=false, inlineable=false, propagate_inbounds=false, pure=false)),
  Core.SlotNumber(id=4) = Expr(:new, Symbol("##gdemo#502#17#23"), Core.SlotNumber(id=5)),
  Symbol("##gdemo#502#22"),
  Expr(:call, Core.typeof, Core.SlotNumber(id=4)),
  Expr(:call, Core.apply_type, SSAValue(68), SSAValue(69)),
  Core.SlotNumber(id=4),
  Expr(:new, SSAValue(70), SSAValue(71), Core.SlotNumber(id=5)),
  Expr(:call, Core.setfield!, Core.SlotNumber(id=5), :(:contents), SSAValue(72)),
  Expr(:call, Core.isdefined, Core.SlotNumber(id=5), :(:contents)),
  Expr(:gotoifnot, SSAValue(74), 77),
  goto 79,
  <newvar #<19>>,
  Core.SlotNumber(id=19),
  Expr(:call, Core.getfield, Core.SlotNumber(id=5), :(:contents)),
  Expr(:call, Core.ifelse, false, false, SSAValue(79)),
  Expr(:thunk, Core.CodeInfo(code=Array{Any, (4,)}[
  Expr(:global, Symbol("##inner_function#482#24")),
  Expr(:const, Symbol("##inner_function#482#24")),
  Expr(:struct_type, Symbol("##inner_function#482#24"), Expr(:call, Core.svec), Expr(:call, Core.svec), Core.Function, Expr(:call, Core.svec), false, 0),
  Expr(:return, nothing)], codelocs=Array{Int32, (4,)}[1, 1, 1, 1], ssavaluetypes=4, ssaflags=Array{UInt8, (0,)}[], method_for_inference_limit_heuristics=nothing, linetable=Array{Any, (1,)}[Core.LineInfoNode(method=Symbol("top-level scope"), file=:none, line=0, inlined_at=0)], slotnames=Array{Symbol, (0,)}[], slotflags=Array{UInt8, (0,)}[], slottypes=nothing, rettype=Any, parent=nothing, edges=nothing, min_world=0x0000000000000001, max_world=0xffffffffffffffff, inferred=false, inlineable=false, propagate_inbounds=false, pure=false)),
  Symbol("##inner_function#482#24"),
  Expr(:call, Base.getproperty, :DynamicPPL, :(:VarInfo)),
  Expr(:call, Base.getproperty, :DynamicPPL, :(:AbstractSampler)),
  Expr(:call, Base.getproperty, :DynamicPPL, :(:AbstractContext)),
  Expr(:call, Core.svec, SSAValue(82), SSAValue(83), SSAValue(84), SSAValue(85), Core.Any),
  Expr(:call, Core.svec),
  Expr(:call, Core.svec, SSAValue(86), SSAValue(87)),
  Expr(:method, false, SSAValue(88), Core.CodeInfo(code=Array{Any, (316,)}[
  <newvar #<8>>,
  <newvar #<9>>,
  <newvar #<10>>,
  <newvar #<11>>,
  <newvar #<12>>,
  <newvar #<13>>,
  <newvar #<14>>,
  <newvar #<15>>,
  <newvar #<16>>,
  <newvar #<17>>,
  <newvar #<18>>,
  <newvar #<19>>,
  <newvar #<20>>,
  <newvar #<21>>,
  <newvar #<22>>,
  <newvar #<23>>,
  <newvar #<24>>,
  <newvar #<25>>,
  <newvar #<26>>,
  <newvar #<27>>,
  Expr(:call, Base.getproperty, Core.SlotNumber(id=5), :(:args)),
  Core.SlotNumber(id=6) = Expr(:call, Base.getproperty, SSAValue(21), :(:x)),
  Core.SlotNumber(id=7) = Expr(:call, Main.typeof, Core.SlotNumber(id=6)),
  Core.SlotNumber(id=6),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:FloatOrArrayType)),
  Expr(:call, Main.isa, SSAValue(24), SSAValue(25)),
  Expr(:gotoifnot, SSAValue(26), 31),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:get_matching_type)),
  Core.SlotNumber(id=27) = Expr(:call, SSAValue(28), Core.SlotNumber(id=3), Core.SlotNumber(id=2), Core.SlotNumber(id=6)),
  goto 39,
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:hasmissing)),
  Expr(:call, SSAValue(31), Core.SlotNumber(id=7)),
  Expr(:gotoifnot, SSAValue(32), 38),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:get_matching_type)),
  Expr(:call, SSAValue(34), Core.SlotNumber(id=3), Core.SlotNumber(id=2), Core.SlotNumber(id=7)),
  Core.SlotNumber(id=27) = Expr(:call, SSAValue(35), Core.SlotNumber(id=6)),
  goto 39,
  Core.SlotNumber(id=27) = Core.SlotNumber(id=6),
  Expr(:call, Base.setproperty!, Core.SlotNumber(id=2), :(:logp), 0),
  Core.SlotNumber(id=8) = Expr(:call, Main.InverseGamma, 2, 3),
  Expr(:call, Core.tuple, :(:msg)),
  Expr(:call, Core.apply_type, Core.NamedTuple, SSAValue(41)),
  Expr(:call, Core.tuple, "Right-hand side of a ~ must be subtype of Distribution or a vector of Distributions on line 449."),
  Expr(:call, SSAValue(42), SSAValue(43)),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:assert_dist)),
  Expr(:call, Core.kwfunc, SSAValue(45)),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:assert_dist)),
  Expr(:call, SSAValue(46), SSAValue(44), SSAValue(47), Core.SlotNumber(id=8)),
  Core.SlotNumber(id=9) = Expr(:call, Main.Val, :(:s)),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:inparams)),
  Core.SlotNumber(id=9),
  Expr(:call, SSAValue(50), SSAValue(51), Base.Val{(:x,)}()),
  Expr(:call, Main.:(!), SSAValue(52)),
  Expr(:gotoifnot, SSAValue(53), 57),
  Core.SlotNumber(id=37) = SSAValue(53),
  goto 62,
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:inparams)),
  Core.SlotNumber(id=9),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:getmissing)),
  Expr(:call, SSAValue(59), Core.SlotNumber(id=5)),
  Core.SlotNumber(id=37) = Expr(:call, SSAValue(57), SSAValue(58), SSAValue(60)),
  Expr(:gotoifnot, Core.SlotNumber(id=37), 69),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:VarName)),
  Expr(:call, Core.apply_type, SSAValue(63), :(:s)),
  Expr(:call, SSAValue(64), ""),
  Expr(:call, Core.tuple),
  Core.SlotNumber(id=38) = Expr(:call, Core.tuple, SSAValue(65), SSAValue(66)),
  goto 87,
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:inparams)),
  Core.SlotNumber(id=9),
  Expr(:call, SSAValue(69), SSAValue(70), Base.Val{(:x,)}()),
  Expr(:gotoifnot, SSAValue(71), 85),
  Core.SlotNumber(id=11) = Core.SlotNumber(id=16),
  Expr(:call, Main.:(===), Core.SlotNumber(id=11), Main.missing),
  Expr(:gotoifnot, SSAValue(74), 82),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:VarName)),
  Expr(:call, Core.apply_type, SSAValue(76), :(:s)),
  Expr(:call, SSAValue(77), ""),
  Expr(:call, Core.tuple),
  Core.SlotNumber(id=40) = Expr(:call, Core.tuple, SSAValue(78), SSAValue(79)),
  goto 83,
  Core.SlotNumber(id=40) = Core.SlotNumber(id=11),
  Core.SlotNumber(id=39) = Core.SlotNumber(id=40),
  goto 86,
  Core.SlotNumber(id=39) = Expr(:call, Main.throw, "This point should not be reached. Please report this error."),
  Core.SlotNumber(id=38) = Core.SlotNumber(id=39),
  Core.SlotNumber(id=10) = Core.SlotNumber(id=38),
  Expr(:call, Main.isa, Core.SlotNumber(id=10), Main.Tuple),
  Expr(:gotoifnot, SSAValue(88), 106),
  Expr(:call, Base.indexed_iterate, Core.SlotNumber(id=10), 1),
  Core.SlotNumber(id=12) = Expr(:call, Core.getfield, SSAValue(90), 1),
  Core.SlotNumber(id=13) = Expr(:call, Core.getfield, SSAValue(90), 2),
  Expr(:call, Base.indexed_iterate, Core.SlotNumber(id=10), 2, Core.SlotNumber(id=13)),
  Core.SlotNumber(id=14) = Expr(:call, Core.getfield, SSAValue(93), 1),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:tilde)),
  Core.SlotNumber(id=8),
  Core.SlotNumber(id=12),
  Core.SlotNumber(id=14),
  Core.SlotNumber(id=15) = Expr(:call, SSAValue(95), Core.SlotNumber(id=4), Core.SlotNumber(id=3), SSAValue(96), SSAValue(97), SSAValue(98), Core.SlotNumber(id=2)),
  Core.SlotNumber(id=16) = Expr(:call, Base.getindex, Core.SlotNumber(id=15), 1),
  Expr(:call, Base.getproperty, Core.SlotNumber(id=2), :(:logp)),
  Expr(:call, Base.getindex, Core.SlotNumber(id=15), 2),
  Expr(:call, Main.:(+), SSAValue(101), SSAValue(102)),
  Expr(:call, Base.setproperty!, Core.SlotNumber(id=2), :(:logp), SSAValue(103)),
  goto 113,
  Expr(:call, Base.getproperty, Core.SlotNumber(id=2), :(:logp)),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:tilde)),
  Core.SlotNumber(id=8),
  Core.SlotNumber(id=10),
  Expr(:call, SSAValue(107), Core.SlotNumber(id=4), Core.SlotNumber(id=3), SSAValue(108), SSAValue(109), Core.SlotNumber(id=2)),
  Expr(:call, Main.:(+), SSAValue(106), SSAValue(110)),
  Expr(:call, Base.setproperty!, Core.SlotNumber(id=2), :(:logp), SSAValue(111)),
  Expr(:call, Main.sqrt, Core.SlotNumber(id=16)),
  Core.SlotNumber(id=17) = Expr(:call, Main.Normal, 0, SSAValue(113)),
  Expr(:call, Core.tuple, :(:msg)),
  Expr(:call, Core.apply_type, Core.NamedTuple, SSAValue(115)),
  Expr(:call, Core.tuple, "Right-hand side of a ~ must be subtype of Distribution or a vector of Distributions on line 449."),
  Expr(:call, SSAValue(116), SSAValue(117)),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:assert_dist)),
  Expr(:call, Core.kwfunc, SSAValue(119)),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:assert_dist)),
  Expr(:call, SSAValue(120), SSAValue(118), SSAValue(121), Core.SlotNumber(id=17)),
  Core.SlotNumber(id=18) = Expr(:call, Main.Val, :(:m)),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:inparams)),
  Core.SlotNumber(id=18),
  Expr(:call, SSAValue(124), SSAValue(125), Base.Val{(:x,)}()),
  Expr(:call, Main.:(!), SSAValue(126)),
  Expr(:gotoifnot, SSAValue(127), 131),
  Core.SlotNumber(id=41) = SSAValue(127),
  goto 136,
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:inparams)),
  Core.SlotNumber(id=18),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:getmissing)),
  Expr(:call, SSAValue(133), Core.SlotNumber(id=5)),
  Core.SlotNumber(id=41) = Expr(:call, SSAValue(131), SSAValue(132), SSAValue(134)),
  Expr(:gotoifnot, Core.SlotNumber(id=41), 143),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:VarName)),
  Expr(:call, Core.apply_type, SSAValue(137), :(:m)),
  Expr(:call, SSAValue(138), ""),
  Expr(:call, Core.tuple),
  Core.SlotNumber(id=42) = Expr(:call, Core.tuple, SSAValue(139), SSAValue(140)),
  goto 161,
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:inparams)),
  Core.SlotNumber(id=18),
  Expr(:call, SSAValue(143), SSAValue(144), Base.Val{(:x,)}()),
  Expr(:gotoifnot, SSAValue(145), 159),
  Core.SlotNumber(id=20) = Core.SlotNumber(id=25),
  Expr(:call, Main.:(===), Core.SlotNumber(id=20), Main.missing),
  Expr(:gotoifnot, SSAValue(148), 156),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:VarName)),
  Expr(:call, Core.apply_type, SSAValue(150), :(:m)),
  Expr(:call, SSAValue(151), ""),
  Expr(:call, Core.tuple),
  Core.SlotNumber(id=44) = Expr(:call, Core.tuple, SSAValue(152), SSAValue(153)),
  goto 157,
  Core.SlotNumber(id=44) = Core.SlotNumber(id=20),
  Core.SlotNumber(id=43) = Core.SlotNumber(id=44),
  goto 160,
  Core.SlotNumber(id=43) = Expr(:call, Main.throw, "This point should not be reached. Please report this error."),
  Core.SlotNumber(id=42) = Core.SlotNumber(id=43),
  Core.SlotNumber(id=19) = Core.SlotNumber(id=42),
  Expr(:call, Main.isa, Core.SlotNumber(id=19), Main.Tuple),
  Expr(:gotoifnot, SSAValue(162), 180),
  Expr(:call, Base.indexed_iterate, Core.SlotNumber(id=19), 1),
  Core.SlotNumber(id=21) = Expr(:call, Core.getfield, SSAValue(164), 1),
  Core.SlotNumber(id=22) = Expr(:call, Core.getfield, SSAValue(164), 2),
  Expr(:call, Base.indexed_iterate, Core.SlotNumber(id=19), 2, Core.SlotNumber(id=22)),
  Core.SlotNumber(id=23) = Expr(:call, Core.getfield, SSAValue(167), 1),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:tilde)),
  Core.SlotNumber(id=17),
  Core.SlotNumber(id=21),
  Core.SlotNumber(id=23),
  Core.SlotNumber(id=24) = Expr(:call, SSAValue(169), Core.SlotNumber(id=4), Core.SlotNumber(id=3), SSAValue(170), SSAValue(171), SSAValue(172), Core.SlotNumber(id=2)),
  Core.SlotNumber(id=25) = Expr(:call, Base.getindex, Core.SlotNumber(id=24), 1),
  Expr(:call, Base.getproperty, Core.SlotNumber(id=2), :(:logp)),
  Expr(:call, Base.getindex, Core.SlotNumber(id=24), 2),
  Expr(:call, Main.:(+), SSAValue(175), SSAValue(176)),
  Expr(:call, Base.setproperty!, Core.SlotNumber(id=2), :(:logp), SSAValue(177)),
  goto 187,
  Expr(:call, Base.getproperty, Core.SlotNumber(id=2), :(:logp)),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:tilde)),
  Core.SlotNumber(id=17),
  Core.SlotNumber(id=19),
  Expr(:call, SSAValue(181), Core.SlotNumber(id=4), Core.SlotNumber(id=3), SSAValue(182), SSAValue(183), Core.SlotNumber(id=2)),
  Expr(:call, Main.:(+), SSAValue(180), SSAValue(184)),
  Expr(:call, Base.setproperty!, Core.SlotNumber(id=2), :(:logp), SSAValue(185)),
  Expr(:call, Main.eachindex, Core.SlotNumber(id=27)),
  Core.SlotNumber(id=26) = Expr(:call, Base.iterate, SSAValue(187)),
  Expr(:call, Core.:(===), Core.SlotNumber(id=26), nothing),
  Expr(:call, Base.not_int, SSAValue(189)),
  Expr(:gotoifnot, SSAValue(190), 316),
  <newvar #<31>>,
  <newvar #<32>>,
  <newvar #<33>>,
  <newvar #<34>>,
  <newvar #<35>>,
  <newvar #<36>>,
  Core.SlotNumber(id=26),
  Core.SlotNumber(id=28) = Expr(:call, Core.getfield, SSAValue(198), 1),
  Expr(:call, Core.getfield, SSAValue(198), 2),
  Core.SlotNumber(id=25),
  Expr(:call, Main.sqrt, Core.SlotNumber(id=16)),
  Core.SlotNumber(id=29) = Expr(:call, Main.Normal, SSAValue(201), SSAValue(202)),
  Expr(:call, Core.tuple, :(:msg)),
  Expr(:call, Core.apply_type, Core.NamedTuple, SSAValue(204)),
  Expr(:call, Core.tuple, "Right-hand side of a ~ must be subtype of Distribution or a vector of Distributions on line 449."),
  Expr(:call, SSAValue(205), SSAValue(206)),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:assert_dist)),
  Expr(:call, Core.kwfunc, SSAValue(208)),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:assert_dist)),
  Expr(:call, SSAValue(209), SSAValue(207), SSAValue(210), Core.SlotNumber(id=29)),
  Core.SlotNumber(id=30) = Expr(:call, Main.Val, :(:x)),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:inparams)),
  Core.SlotNumber(id=30),
  Expr(:call, SSAValue(213), SSAValue(214), Base.Val{(:x,)}()),
  Expr(:call, Main.:(!), SSAValue(215)),
  Expr(:gotoifnot, SSAValue(216), 220),
  Core.SlotNumber(id=45) = SSAValue(216),
  goto 225,
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:inparams)),
  Core.SlotNumber(id=30),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:getmissing)),
  Expr(:call, SSAValue(222), Core.SlotNumber(id=5)),
  Core.SlotNumber(id=45) = Expr(:call, SSAValue(220), SSAValue(221), SSAValue(223)),
  Expr(:gotoifnot, Core.SlotNumber(id=45), 249),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:VarName)),
  Expr(:call, Core.apply_type, SSAValue(226), :(:x)),
  Expr(:call, Main.:(===), Core.SlotNumber(id=28), Main.:(:)),
  Expr(:gotoifnot, SSAValue(228), 232),
  Core.SlotNumber(id=47) = "Colon()",
  goto 233,
  Core.SlotNumber(id=47) = Expr(:call, Main.string, Core.SlotNumber(id=28)),
  Core.SlotNumber(id=47),
  Expr(:call, Base.vect, SSAValue(233)),
  Expr(:call, Main.join, SSAValue(234), ","),
  Expr(:call, Main.:(*), "[", SSAValue(235), "]"),
  Expr(:call, Core.tuple, :(:init)),
  Expr(:call, Core.apply_type, Core.NamedTuple, SSAValue(237)),
  Expr(:call, Core.tuple, ""),
  Expr(:call, SSAValue(238), SSAValue(239)),
  Expr(:call, Core.kwfunc, Main.foldl),
  Expr(:call, Core.tuple, SSAValue(236)),
  Expr(:call, SSAValue(241), SSAValue(240), Main.foldl, Main.:(*), SSAValue(242)),
  Expr(:call, SSAValue(227), SSAValue(243)),
  Expr(:call, Core.tuple, Core.SlotNumber(id=28)),
  Expr(:call, Core.tuple, SSAValue(245)),
  Core.SlotNumber(id=46) = Expr(:call, Core.tuple, SSAValue(244), SSAValue(246)),
  goto 284,
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:inparams)),
  Core.SlotNumber(id=30),
  Expr(:call, SSAValue(249), SSAValue(250), Base.Val{(:x,)}()),
  Expr(:gotoifnot, SSAValue(251), 282),
  Core.SlotNumber(id=32) = Expr(:call, Base.getindex, Core.SlotNumber(id=27), Core.SlotNumber(id=28)),
  Expr(:call, Main.:(===), Core.SlotNumber(id=32), Main.missing),
  Expr(:gotoifnot, SSAValue(254), 279),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:VarName)),
  Expr(:call, Core.apply_type, SSAValue(256), :(:x)),
  Expr(:call, Main.:(===), Core.SlotNumber(id=28), Main.:(:)),
  Expr(:gotoifnot, SSAValue(258), 262),
  Core.SlotNumber(id=50) = "Colon()",
  goto 263,
  Core.SlotNumber(id=50) = Expr(:call, Main.string, Core.SlotNumber(id=28)),
  Core.SlotNumber(id=50),
  Expr(:call, Base.vect, SSAValue(263)),
  Expr(:call, Main.join, SSAValue(264), ","),
  Expr(:call, Main.:(*), "[", SSAValue(265), "]"),
  Expr(:call, Core.tuple, :(:init)),
  Expr(:call, Core.apply_type, Core.NamedTuple, SSAValue(267)),
  Expr(:call, Core.tuple, ""),
  Expr(:call, SSAValue(268), SSAValue(269)),
  Expr(:call, Core.kwfunc, Main.foldl),
  Expr(:call, Core.tuple, SSAValue(266)),
  Expr(:call, SSAValue(271), SSAValue(270), Main.foldl, Main.:(*), SSAValue(272)),
  Expr(:call, SSAValue(257), SSAValue(273)),
  Expr(:call, Core.tuple, Core.SlotNumber(id=28)),
  Expr(:call, Core.tuple, SSAValue(275)),
  Core.SlotNumber(id=49) = Expr(:call, Core.tuple, SSAValue(274), SSAValue(276)),
  goto 280,
  Core.SlotNumber(id=49) = Core.SlotNumber(id=32),
  Core.SlotNumber(id=48) = Core.SlotNumber(id=49),
  goto 283,
  Core.SlotNumber(id=48) = Expr(:call, Main.throw, "This point should not be reached. Please report this error."),
  Core.SlotNumber(id=46) = Core.SlotNumber(id=48),
  Core.SlotNumber(id=31) = Core.SlotNumber(id=46),
  Expr(:call, Main.isa, Core.SlotNumber(id=31), Main.Tuple),
  Expr(:gotoifnot, SSAValue(285), 304),
  Expr(:call, Base.indexed_iterate, Core.SlotNumber(id=31), 1),
  Core.SlotNumber(id=33) = Expr(:call, Core.getfield, SSAValue(287), 1),
  Core.SlotNumber(id=34) = Expr(:call, Core.getfield, SSAValue(287), 2),
  Expr(:call, Base.indexed_iterate, Core.SlotNumber(id=31), 2, Core.SlotNumber(id=34)),
  Core.SlotNumber(id=35) = Expr(:call, Core.getfield, SSAValue(290), 1),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:tilde)),
  Core.SlotNumber(id=29),
  Core.SlotNumber(id=33),
  Core.SlotNumber(id=35),
  Core.SlotNumber(id=36) = Expr(:call, SSAValue(292), Core.SlotNumber(id=4), Core.SlotNumber(id=3), SSAValue(293), SSAValue(294), SSAValue(295), Core.SlotNumber(id=2)),
  Expr(:call, Base.getindex, Core.SlotNumber(id=36), 1),
  Expr(:call, Base.setindex!, Core.SlotNumber(id=27), SSAValue(297), Core.SlotNumber(id=28)),
  Expr(:call, Base.getproperty, Core.SlotNumber(id=2), :(:logp)),
  Expr(:call, Base.getindex, Core.SlotNumber(id=36), 2),
  Expr(:call, Main.:(+), SSAValue(299), SSAValue(300)),
  Expr(:call, Base.setproperty!, Core.SlotNumber(id=2), :(:logp), SSAValue(301)),
  goto 311,
  Expr(:call, Base.getproperty, Core.SlotNumber(id=2), :(:logp)),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:tilde)),
  Core.SlotNumber(id=29),
  Core.SlotNumber(id=31),
  Expr(:call, SSAValue(305), Core.SlotNumber(id=4), Core.SlotNumber(id=3), SSAValue(306), SSAValue(307), Core.SlotNumber(id=2)),
  Expr(:call, Main.:(+), SSAValue(304), SSAValue(308)),
  Expr(:call, Base.setproperty!, Core.SlotNumber(id=2), :(:logp), SSAValue(309)),
  Core.SlotNumber(id=26) = Expr(:call, Base.iterate, SSAValue(187), SSAValue(200)),
  Expr(:call, Core.:(===), Core.SlotNumber(id=26), nothing),
  Expr(:call, Base.not_int, SSAValue(312)),
  Expr(:gotoifnot, SSAValue(313), 316),
  goto 192,
  Expr(:return, nothing)], codelocs=Array{Int32, (316,)}[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 4, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 8, 9, 10, 14, 15, 15, 15, 15, 15, 15, 15, 15, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 23, 23, 25, 25, 25, 25, 25, 25, 26, 26, 26, 27, 27, 27, 28, 28, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 35, 35, 36, 36, 36, 36, 36, 36, 36, 36, 38, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 41, 41, 41, 41, 41, 41, 42, 42, 42, 42, 43, 44, 44, 46, 46, 46, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 52, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 57, 57, 57, 58, 58, 58, 58, 58, 58, 58, 58, 60, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 64, 64, 64, 64, 65, 66, 66, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 69, 69, 69, 70, 70, 70, 71, 71, 72, 72, 72, 72, 72, 73, 73, 73, 73, 73, 74, 74, 75, 75, 75, 75, 75, 76, 76, 76, 76, 76, 76, 76, 56, 56, 56, 56, 56, 11], ssavaluetypes=316, ssaflags=Array{UInt8, (0,)}[], method_for_inference_limit_heuristics=nothing, linetable=Array{Any, (76,)}[
  Core.LineInfoNode(method=Symbol("##inner_function#482#24"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=589, inlined_at=0),
  Core.LineInfoNode(method=Symbol("##inner_function#482#24"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=567, inlined_at=0),
  Core.LineInfoNode(method=Symbol("##inner_function#482#24"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=568, inlined_at=0),
  Core.LineInfoNode(method=Symbol("##inner_function#482#24"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=569, inlined_at=0),
  Core.LineInfoNode(method=Symbol("##inner_function#482#24"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=570, inlined_at=0),
  Core.LineInfoNode(method=Symbol("##inner_function#482#24"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=571, inlined_at=0),
  Core.LineInfoNode(method=Symbol("##inner_function#482#24"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=572, inlined_at=0),
  Core.LineInfoNode(method=Symbol("##inner_function#482#24"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=573, inlined_at=0),
  Core.LineInfoNode(method=Symbol("##inner_function#482#24"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=575, inlined_at=0),
  Core.LineInfoNode(method=Symbol("##inner_function#482#24"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=590, inlined_at=0),
  Core.LineInfoNode(method=Symbol("##inner_function#482#24"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=591, inlined_at=0),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"), line=6, inlined_at=11),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"), line=7, inlined_at=11),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=452, inlined_at=13),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=453, inlined_at=13),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=454, inlined_at=13),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=178, inlined_at=13),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=181, inlined_at=13),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=182, inlined_at=13),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=47, inlined_at=13),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=184, inlined_at=13),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=186, inlined_at=13),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=187, inlined_at=13),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=188, inlined_at=13),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=47, inlined_at=13),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=190, inlined_at=13),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=193, inlined_at=13),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=455, inlined_at=13),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=456, inlined_at=13),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=457, inlined_at=13),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=458, inlined_at=13),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=459, inlined_at=13),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=461, inlined_at=13),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"), line=8, inlined_at=11),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=452, inlined_at=34),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=453, inlined_at=34),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=454, inlined_at=34),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=178, inlined_at=34),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=181, inlined_at=34),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=182, inlined_at=34),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=47, inlined_at=34),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=184, inlined_at=34),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=186, inlined_at=34),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=187, inlined_at=34),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=188, inlined_at=34),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=47, inlined_at=34),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=190, inlined_at=34),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=193, inlined_at=34),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=455, inlined_at=34),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=456, inlined_at=34),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=457, inlined_at=34),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=458, inlined_at=34),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=459, inlined_at=34),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=461, inlined_at=34),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"), line=9, inlined_at=11),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"), line=10, inlined_at=11),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=452, inlined_at=56),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=453, inlined_at=56),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=454, inlined_at=56),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=178, inlined_at=56),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=181, inlined_at=56),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=182, inlined_at=56),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=58, inlined_at=56),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=184, inlined_at=56),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=186, inlined_at=56),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=187, inlined_at=56),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=188, inlined_at=56),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=58, inlined_at=56),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=190, inlined_at=56),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=193, inlined_at=56),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=455, inlined_at=56),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=456, inlined_at=56),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=457, inlined_at=56),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=458, inlined_at=56),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=459, inlined_at=56),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=461, inlined_at=56)], slotnames=Array{Symbol, (50,)}[
  Symbol("#self#"),
  Symbol("vi#479"),
  Symbol("sampler#480"),
  Symbol("ctx#478"),
  Symbol("model#481"),
  Symbol("temp_var#503"),
  Symbol("varT#504"),
  Symbol("temp_right#484"),
  Symbol("sym#505"),
  Symbol("preprocessed#489"),
  Symbol("lhs#506"),
  Symbol("vn#487"),
  Symbol(""),
  Symbol("inds#488"),
  Symbol("out#485"),
  :s,
  Symbol("temp_right#490"),
  Symbol("sym#507"),
  Symbol("preprocessed#495"),
  Symbol("lhs#508"),
  Symbol("vn#493"),
  Symbol(""),
  Symbol("inds#494"),
  Symbol("out#491"),
  :m,
  Symbol(""),
  :x,
  :i,
  Symbol("temp_right#496"),
  Symbol("sym#509"),
  Symbol("preprocessed#501"),
  Symbol("lhs#510"),
  Symbol("vn#499"),
  Symbol(""),
  Symbol("inds#500"),
  Symbol("out#497"),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol("")], slotflags=Array{UInt8, (50,)}[0x00, 0x08, 0x08, 0x08, 0x08, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x08, 0x08, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], slottypes=nothing, rettype=Any, parent=nothing, edges=nothing, min_world=0x0000000000000001, max_world=0xffffffffffffffff, inferred=false, inlineable=false, propagate_inbounds=false, pure=false)),
  Expr(:call, Core.svec, Symbol("##gdemo#502#22"), Core.Any),
  Expr(:call, Core.svec),
  Expr(:call, Core.svec, SSAValue(90), SSAValue(91)),
  Expr(:method, false, SSAValue(92), Core.CodeInfo(code=Array{Any, (24,)}[
  Core.SlotNumber(id=3) = Expr(:new, Main.:(##inner_function#482#24)),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:Model)),
  Core.SlotNumber(id=3),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:namedtuple)),
  Expr(:call, Core.tuple, :(:x)),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:get_type)),
  Expr(:call, SSAValue(6), Core.SlotNumber(id=2)),
  Expr(:call, Core.apply_type, Main.Tuple, SSAValue(7)),
  Expr(:call, Core.apply_type, Main.NamedTuple, SSAValue(5), SSAValue(8)),
  Expr(:call, Core.tuple, Core.SlotNumber(id=2)),
  Expr(:call, SSAValue(4), SSAValue(9), SSAValue(10)),
  Expr(:call, Base.getproperty, Main.DynamicPPL, :(:ModelGen)),
  Expr(:call, Core.apply_type, SSAValue(12), (:x,)),
  Expr(:call, Core.getfield, Core.SlotNumber(id=1), :(Symbol("##gdemo#502"))),
  Expr(:call, Core.isdefined, SSAValue(14), :(:contents)),
  Expr(:gotoifnot, SSAValue(15), 18),
  goto 20,
  <newvar #<4>>,
  Core.SlotNumber(id=4),
  Expr(:call, Core.getfield, SSAValue(14), :(:contents)),
  Expr(:call, Main.NamedTuple),
  Expr(:call, SSAValue(13), SSAValue(20), SSAValue(21)),
  Expr(:call, SSAValue(2), SSAValue(3), SSAValue(11), SSAValue(22)),
  Expr(:return, SSAValue(23))], codelocs=Array{Int32, (24,)}[1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], ssavaluetypes=24, ssaflags=Array{UInt8, (0,)}[], method_for_inference_limit_heuristics=nothing, linetable=Array{Any, (3,)}[
  Core.LineInfoNode(method=Symbol("##gdemo#502#22"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=583, inlined_at=0),
  Core.LineInfoNode(method=Symbol("##gdemo#502#22"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=593, inlined_at=0),
  Core.LineInfoNode(method=Symbol("##gdemo#502#22"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=557, inlined_at=0)], slotnames=Array{Symbol, (4,)}[
  Symbol("#self#"),
  :x,
  Symbol("inner_function#482"),
  Symbol("##gdemo#502")], slotflags=Array{UInt8, (4,)}[0x00, 0x08, 0x18, 0x20], slottypes=nothing, rettype=Any, parent=nothing, edges=nothing, min_world=0x0000000000000001, max_world=0xffffffffffffffff, inferred=false, inlineable=false, propagate_inbounds=false, pure=false)),
  Expr(:call, Base.getproperty, :DynamicPPL, :(:ModelGen)),
  Expr(:call, Core.apply_type, SSAValue(94), (:x,)),
  Expr(:call, Core.isdefined, Core.SlotNumber(id=5), :(:contents)),
  Expr(:gotoifnot, SSAValue(96), 99),
  goto 101,
  <newvar #<21>>,
  Core.SlotNumber(id=21),
  Expr(:call, Core.getfield, Core.SlotNumber(id=5), :(:contents)),
  Expr(:call, :NamedTuple),
  Core.SlotNumber(id=6) = Expr(:call, SSAValue(95), SSAValue(101), SSAValue(102)),
  Expr(:call, Base.vect, 1.5, 2),
  Core.SlotNumber(id=7) = Expr(:call, Core.SlotNumber(id=6), SSAValue(104)),
  Core.SlotNumber(id=8) = Expr(:call, :HMC, 0.01, 5),
  Expr(:call, Core.tuple, :(:save_state)),
  Expr(:call, Core.apply_type, Core.NamedTuple, SSAValue(107)),
  Expr(:call, Core.tuple, true),
  Expr(:call, SSAValue(108), SSAValue(109)),
  Expr(:call, Core.kwfunc, :sample),
  Core.SlotNumber(id=7),
  Core.SlotNumber(id=8),
  Core.SlotNumber(id=9) = Expr(:call, SSAValue(111), SSAValue(110), :sample, SSAValue(112), SSAValue(113), 500),
  Expr(:call, :joinpath, :ProjDir, "chn1.jls"),
  Expr(:call, :write, SSAValue(115), Core.SlotNumber(id=9)),
  Expr(:call, :joinpath, :ProjDir, "chn1.jls"),
  Expr(:call, Base.getproperty, :MCMCChains, :(:Chains)),
  Core.SlotNumber(id=10) = Expr(:call, :read, SSAValue(117), SSAValue(118)),
  Expr(:thunk, Core.CodeInfo(code=Array{Any, (5,)}[
  Expr(:global, Symbol("#18#25")),
  Expr(:const, Symbol("#18#25")),
  Expr(:call, Core.TypeVar, :(:chn1), Core.Any),
  Expr(:struct_type, Symbol("#18#25"), Expr(:call, Core.svec, SSAValue(3)), Expr(:call, Core.svec, :(:chn1)), Core.Function, Expr(:call, Core.svec, SSAValue(3)), false, 1),
  Expr(:return, nothing)], codelocs=Array{Int32, (5,)}[1, 1, 1, 1, 1], ssavaluetypes=5, ssaflags=Array{UInt8, (0,)}[], method_for_inference_limit_heuristics=nothing, linetable=Array{Any, (1,)}[Core.LineInfoNode(method=Symbol("top-level scope"), file=:none, line=0, inlined_at=0)], slotnames=Array{Symbol, (0,)}[], slotflags=Array{UInt8, (0,)}[], slottypes=nothing, rettype=Any, parent=nothing, edges=nothing, min_world=0x0000000000000001, max_world=0xffffffffffffffff, inferred=false, inlineable=false, propagate_inbounds=false, pure=false)),
  Expr(:call, Core.svec, Symbol("#18#25"), Core.Any),
  Expr(:call, Core.svec),
  Expr(:call, Core.svec, SSAValue(121), SSAValue(122)),
  Expr(:method, false, SSAValue(123), Core.CodeInfo(code=Array{Any, (3,)}[
  Expr(:call, Core.getfield, Core.SlotNumber(id=1), :(:chn1)),
  Expr(:call, Main.describe, Core.SlotNumber(id=2), SSAValue(1)),
  Expr(:return, SSAValue(2))], codelocs=Array{Int32, (3,)}[1, 1, 1], ssavaluetypes=3, ssaflags=Array{UInt8, (0,)}[], method_for_inference_limit_heuristics=nothing, linetable=Array{Any, (1,)}[Core.LineInfoNode(method=Symbol("#18"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"), line=22, inlined_at=0)], slotnames=Array{Symbol, (2,)}[
  Symbol("#self#"),
  :io], slotflags=Array{UInt8, (2,)}[0x00, 0x08], slottypes=nothing, rettype=Any, parent=nothing, edges=nothing, min_world=0x0000000000000001, max_world=0xffffffffffffffff, inferred=false, inlineable=false, propagate_inbounds=false, pure=false)),
  Symbol("#18#25"),
  Expr(:call, Core.typeof, Core.SlotNumber(id=9)),
  Expr(:call, Core.apply_type, SSAValue(125), SSAValue(126)),
  Core.SlotNumber(id=2) = Expr(:new, SSAValue(127), Core.SlotNumber(id=9)),
  Core.SlotNumber(id=2),
  Expr(:call, :joinpath, :ProjDir, "chn1.txt"),
  Expr(:call, :open, SSAValue(129), SSAValue(130), "w"),
  Expr(:thunk, Core.CodeInfo(code=Array{Any, (5,)}[
  Expr(:global, Symbol("#19#26")),
  Expr(:const, Symbol("#19#26")),
  Expr(:call, Core.TypeVar, :(:chn2), Core.Any),
  Expr(:struct_type, Symbol("#19#26"), Expr(:call, Core.svec, SSAValue(3)), Expr(:call, Core.svec, :(:chn2)), Core.Function, Expr(:call, Core.svec, SSAValue(3)), false, 1),
  Expr(:return, nothing)], codelocs=Array{Int32, (5,)}[1, 1, 1, 1, 1], ssavaluetypes=5, ssaflags=Array{UInt8, (0,)}[], method_for_inference_limit_heuristics=nothing, linetable=Array{Any, (1,)}[Core.LineInfoNode(method=Symbol("top-level scope"), file=:none, line=0, inlined_at=0)], slotnames=Array{Symbol, (0,)}[], slotflags=Array{UInt8, (0,)}[], slottypes=nothing, rettype=Any, parent=nothing, edges=nothing, min_world=0x0000000000000001, max_world=0xffffffffffffffff, inferred=false, inlineable=false, propagate_inbounds=false, pure=false)),
  Expr(:call, Core.svec, Symbol("#19#26"), Core.Any),
  Expr(:call, Core.svec),
  Expr(:call, Core.svec, SSAValue(133), SSAValue(134)),
  Expr(:method, false, SSAValue(135), Core.CodeInfo(code=Array{Any, (3,)}[
  Expr(:call, Core.getfield, Core.SlotNumber(id=1), :(:chn2)),
  Expr(:call, Main.describe, Core.SlotNumber(id=2), SSAValue(1)),
  Expr(:return, SSAValue(2))], codelocs=Array{Int32, (3,)}[1, 1, 1], ssavaluetypes=3, ssaflags=Array{UInt8, (0,)}[], method_for_inference_limit_heuristics=nothing, linetable=Array{Any, (1,)}[Core.LineInfoNode(method=Symbol("#19"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"), line=26, inlined_at=0)], slotnames=Array{Symbol, (2,)}[
  Symbol("#self#"),
  :io], slotflags=Array{UInt8, (2,)}[0x00, 0x08], slottypes=nothing, rettype=Any, parent=nothing, edges=nothing, min_world=0x0000000000000001, max_world=0xffffffffffffffff, inferred=false, inlineable=false, propagate_inbounds=false, pure=false)),
  Symbol("#19#26"),
  Expr(:call, Core.typeof, Core.SlotNumber(id=10)),
  Expr(:call, Core.apply_type, SSAValue(137), SSAValue(138)),
  Core.SlotNumber(id=3) = Expr(:new, SSAValue(139), Core.SlotNumber(id=10)),
  Core.SlotNumber(id=3),
  Expr(:call, :joinpath, :ProjDir, "chn2.txt"),
  Expr(:call, :open, SSAValue(141), SSAValue(142), "w"),
  Expr(:thunk, Core.CodeInfo(code=Array{Any, (4,)}[
  Expr(:global, Symbol("#20#27")),
  Expr(:const, Symbol("#20#27")),
  Expr(:struct_type, Symbol("#20#27"), Expr(:call, Core.svec), Expr(:call, Core.svec), Core.Function, Expr(:call, Core.svec), false, 0),
  Expr(:return, nothing)], codelocs=Array{Int32, (4,)}[1, 1, 1, 1], ssavaluetypes=4, ssaflags=Array{UInt8, (0,)}[], method_for_inference_limit_heuristics=nothing, linetable=Array{Any, (1,)}[Core.LineInfoNode(method=Symbol("top-level scope"), file=:none, line=0, inlined_at=0)], slotnames=Array{Symbol, (0,)}[], slotflags=Array{UInt8, (0,)}[], slottypes=nothing, rettype=Any, parent=nothing, edges=nothing, min_world=0x0000000000000001, max_world=0xffffffffffffffff, inferred=false, inlineable=false, propagate_inbounds=false, pure=false)),
  Expr(:thunk, Core.CodeInfo(code=Array{Any, (4,)}[
  Expr(:global, Symbol("#21#28")),
  Expr(:const, Symbol("#21#28")),
  Expr(:struct_type, Symbol("#21#28"), Expr(:call, Core.svec), Expr(:call, Core.svec), Core.Function, Expr(:call, Core.svec), false, 0),
  Expr(:return, nothing)], codelocs=Array{Int32, (4,)}[1, 1, 1, 1], ssavaluetypes=4, ssaflags=Array{UInt8, (0,)}[], method_for_inference_limit_heuristics=nothing, linetable=Array{Any, (1,)}[Core.LineInfoNode(method=Symbol("top-level scope"), file=:none, line=0, inlined_at=0)], slotnames=Array{Symbol, (0,)}[], slotflags=Array{UInt8, (0,)}[], slottypes=nothing, rettype=Any, parent=nothing, edges=nothing, min_world=0x0000000000000001, max_world=0xffffffffffffffff, inferred=false, inlineable=false, propagate_inbounds=false, pure=false)),
  Expr(:call, Core.svec, Symbol("#20#27"), Core.Any),
  Expr(:call, Core.svec),
  Expr(:call, Core.svec, SSAValue(146), SSAValue(147)),
  Expr(:method, false, SSAValue(148), Core.CodeInfo(code=Array{Any, (2,)}[
  Expr(:call, Main.read, Core.SlotNumber(id=2), Main.String),
  Expr(:return, SSAValue(1))], codelocs=Array{Int32, (2,)}[1, 1], ssavaluetypes=2, ssaflags=Array{UInt8, (0,)}[], method_for_inference_limit_heuristics=nothing, linetable=Array{Any, (1,)}[Core.LineInfoNode(method=Symbol("#20"), file=:none, line=0, inlined_at=0)], slotnames=Array{Symbol, (2,)}[
  Symbol("#self#"),
  :f], slotflags=Array{UInt8, (2,)}[0x00, 0x08], slottypes=nothing, rettype=Any, parent=nothing, edges=nothing, min_world=0x0000000000000001, max_world=0xffffffffffffffff, inferred=false, inlineable=false, propagate_inbounds=false, pure=false)),
  Expr(:call, Core.svec, Symbol("#21#28"), Core.Any),
  Expr(:call, Core.svec),
  Expr(:call, Core.svec, SSAValue(150), SSAValue(151)),
  Expr(:method, false, SSAValue(152), Core.CodeInfo(code=Array{Any, (2,)}[
  Expr(:call, Main.read, Core.SlotNumber(id=2), Main.String),
  Expr(:return, SSAValue(1))], codelocs=Array{Int32, (2,)}[1, 1], ssavaluetypes=2, ssaflags=Array{UInt8, (0,)}[], method_for_inference_limit_heuristics=nothing, linetable=Array{Any, (1,)}[Core.LineInfoNode(method=Symbol("#21"), file=:none, line=0, inlined_at=0)], slotnames=Array{Symbol, (2,)}[
  Symbol("#self#"),
  :f], slotflags=Array{UInt8, (2,)}[0x00, 0x08], slottypes=nothing, rettype=Any, parent=nothing, edges=nothing, min_world=0x0000000000000001, max_world=0xffffffffffffffff, inferred=false, inlineable=false, propagate_inbounds=false, pure=false)),
  Expr(:enter, 168),
  Core.SlotNumber(id=12) = Expr(:new, Symbol("#20#27")),
  Core.SlotNumber(id=12),
  Expr(:call, :joinpath, :ProjDir, "chn1.txt"),
  Expr(:call, :open, SSAValue(156), SSAValue(157)),
  Core.SlotNumber(id=13) = Expr(:new, Symbol("#21#28")),
  Core.SlotNumber(id=13),
  Expr(:call, :joinpath, :ProjDir, "chn2.txt"),
  Expr(:call, :open, SSAValue(160), SSAValue(161)),
  Expr(:call, Test.Expr, :(:comparison), SSAValue(158), :==, SSAValue(162)),
  Expr(:call, Test.Expr, :(:comparison), quote Expr(:call, :open, Expr(:->, :f, Expr(:block, Expr(:call, :read, :f, :String))), Expr(:call, :joinpath, :ProjDir, "chn1.txt")) end, :(:==), quote Expr(:call, :open, Expr(:->, :f, Expr(:block, Expr(:call, :read, :f, :String))), Expr(:call, :joinpath, :ProjDir, "chn2.txt")) end),
  Core.SlotNumber(id=26) = Expr(:call, Test.eval_test, SSAValue(163), SSAValue(164), quote #= Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"):29 =# end, quote false end),
  Expr(:leave, 1),
  goto 180,
  Expr(:leave, 1),
  Core.SlotNumber(id=14) = Expr(:the_exception),
  Expr(:call, Test.isa, Core.SlotNumber(id=14), Test.InterruptException),
  Expr(:gotoifnot, SSAValue(170), 174),
  Expr(:call, Test.rethrow),
  goto 175,
  false,
  Core.SlotNumber(id=14),
  Expr(:call, Base.getproperty, Test.Base, :(:catch_stack)),
  Expr(:call, SSAValue(176)),
  Core.SlotNumber(id=26) = Expr(:call, Test.Threw, SSAValue(175), SSAValue(177), quote #= Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"):29 =# end),
  Expr(:pop_exception, SSAValue(154)),
  Core.SlotNumber(id=26),
  Expr(:call, Test.do_test, SSAValue(180), quote Expr(:call, :==, Expr(:call, :open, Expr(:->, :f, Expr(:block, Expr(:call, :read, :f, :String))), Expr(:call, :joinpath, :ProjDir, "chn1.txt")), Expr(:call, :open, Expr(:->, :f, Expr(:block, Expr(:call, :read, :f, :String))), Expr(:call, :joinpath, :ProjDir, "chn2.txt"))) end),
  Expr(:call, Base.getproperty, :Turing, :(:Inference)),
  Expr(:call, Base.getproperty, SSAValue(182), :(:resume)),
  Core.SlotNumber(id=10),
  Core.SlotNumber(id=11) = Expr(:call, SSAValue(183), SSAValue(184), 100),
  Expr(:enter, 194),
  Expr(:call, :range, Core.SlotNumber(id=11)),
  Expr(:call, ::, 1, 1, 100),
  Expr(:call, Test.Expr, :(:comparison), SSAValue(187), :==, SSAValue(188)),
  Expr(:call, Test.Expr, :(:comparison), quote Expr(:call, :range, :chn3) end, :(:==), quote Expr(:call, ::, 1, 1, 100) end),
  Core.SlotNumber(id=27) = Expr(:call, Test.eval_test, SSAValue(189), SSAValue(190), quote #= Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"):34 =# end, quote false end),
  Expr(:leave, 1),
  goto 206,
  Expr(:leave, 1),
  Core.SlotNumber(id=15) = Expr(:the_exception),
  Expr(:call, Test.isa, Core.SlotNumber(id=15), Test.InterruptException),
  Expr(:gotoifnot, SSAValue(196), 200),
  Expr(:call, Test.rethrow),
  goto 201,
  false,
  Core.SlotNumber(id=15),
  Expr(:call, Base.getproperty, Test.Base, :(:catch_stack)),
  Expr(:call, SSAValue(202)),
  Core.SlotNumber(id=27) = Expr(:call, Test.Threw, SSAValue(201), SSAValue(203), quote #= Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"):34 =# end),
  Expr(:pop_exception, SSAValue(186)),
  Core.SlotNumber(id=27),
  Expr(:call, Test.do_test, SSAValue(206), quote Expr(:call, :==, Expr(:call, :range, :chn3), Expr(:call, ::, 1, 1, 100)) end),
  Expr(:leave, 1),
  goto 224,
  Expr(:leave, 1),
  Core.SlotNumber(id=16) = Expr(:the_exception),
  Expr(:call, Test.isa, Core.SlotNumber(id=16), Test.InterruptException),
  Expr(:gotoifnot, SSAValue(212), 216),
  Expr(:call, Test.rethrow),
  goto 217,
  false,
  Expr(:copyast, quote Expr(:tuple) end),
  Core.SlotNumber(id=16),
  Expr(:call, Base.getproperty, Test.Base, :(:catch_stack)),
  Expr(:call, SSAValue(219)),
  Expr(:call, Test.Error, :(:nontest_error), SSAValue(217), SSAValue(218), SSAValue(220), quote #= Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"):5 =# end),
  Expr(:call, Test.record, Symbol("#404#ts"), SSAValue(221)),
  Expr(:pop_exception, SSAValue(39)),
  Expr(:leave, 1),
  goto 228,
  Expr(:leave, 1),
  Core.SlotNumber(id=25) = 1,
  Expr(:call, Test.copy!, Core.SlotNumber(id=1), Symbol("#406#oldrng")),
  Expr(:call, Core.:(===), Core.SlotNumber(id=25), 1),
  Expr(:gotoifnot, SSAValue(229), 232),
  Expr(:call, Base.rethrow),
  Expr(:call, Test.pop_testset),
  Expr(:call, Test.finish, Symbol("#404#ts")),
  Expr(:return, nothing)], codelocs=Array{Int32, (234,)}[1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 6, 7, 8, 9, 9, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 19, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 12, 12, 12, 12, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 31, 32, 2], ssavaluetypes=234, ssaflags=Array{UInt8, (0,)}[], method_for_inference_limit_heuristics=nothing, linetable=Array{Any, (32,)}[
  Core.LineInfoNode(method=Symbol("top-level scope"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"), line=5, inlined_at=0),
  Core.LineInfoNode(method=Symbol("top-level scope"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"), line=6, inlined_at=0),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1093, inlined_at=2),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1094, inlined_at=2),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1097, inlined_at=2),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1097, inlined_at=2),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1098, inlined_at=2),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1102, inlined_at=2),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1103, inlined_at=2),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1104, inlined_at=2),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1106, inlined_at=2),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1107, inlined_at=2),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"), line=6, inlined_at=12),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=581, inlined_at=13),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=582, inlined_at=13),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=595, inlined_at=13),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/compiler.jl"), line=557, inlined_at=13),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"), line=14, inlined_at=12),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"), line=15, inlined_at=12),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"), line=16, inlined_at=12),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"), line=18, inlined_at=12),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"), line=19, inlined_at=12),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"), line=21, inlined_at=12),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"), line=25, inlined_at=12),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"), line=29, inlined_at=12),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"), line=33, inlined_at=12),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl"), line=34, inlined_at=12),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1109, inlined_at=2),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1112, inlined_at=2),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1114, inlined_at=2),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1116, inlined_at=2),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1117, inlined_at=2)], slotnames=Array{Symbol, (27,)}[
  Symbol("#405#RNG"),
  Symbol("#18"),
  Symbol("#19"),
  Symbol("gdemo#502#17"),
  Symbol("gdemo#502"),
  :gdemo,
  :model,
  :sampler,
  :chn1,
  :chn2,
  :chn3,
  Symbol("#20"),
  Symbol("#21"),
  :_e,
  :_e,
  :err,
  Symbol("##gdemo#502"),
  Symbol("##gdemo#502"),
  Symbol("##gdemo#502"),
  Symbol("##gdemo#502"),
  Symbol("##gdemo#502"),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol("")], slotflags=Array{UInt8, (27,)}[0x18, 0x18, 0x18, 0x58, 0x48, 0x58, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], slottypes=nothing, rettype=Any, parent=nothing, edges=nothing, min_world=0x0000000000000001, max_world=0xffffffffffffffff, inferred=false, inlineable=false, propagate_inbounds=false, pure=false)jl_interpret_toplevel_thunk at /workspace/srcdir/src/interpreter.c:897
jl_toplevel_eval_flex at /workspace/srcdir/src/toplevel.c:814
jl_parse_eval_all at /workspace/srcdir/src/ast.c:873
jl_load at /workspace/srcdir/src/toplevel.c:878
include at ./boot.jl:328 [inlined]
include_relative at ./loading.jl:1105
include at ./Base.jl:31
_jl_invoke at /workspace/srcdir/src/gf.c:2135 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2305
include at ./client.jl:424
_jl_invoke at /workspace/srcdir/src/gf.c:2135 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2305
jl_apply at /workspace/srcdir/src/julia.h:1631 [inlined]
do_call at /workspace/srcdir/src/interpreter.c:328
eval_value at /workspace/srcdir/src/interpreter.c:417
eval_stmt_value at /workspace/srcdir/src/interpreter.c:368 [inlined]
eval_body at /workspace/srcdir/src/interpreter.c:778
eval_body at /workspace/srcdir/src/interpreter.c:705
eval_body at /workspace/srcdir/src/interpreter.c:705
jl_interpret_toplevel_thunk_callback at /workspace/srcdir/src/interpreter.c:888
Interpreter frame (ip: 46)
Core.CodeInfo(code=Array{Any, (81,)}[
  <newvar #<1>>,
  Expr(:call, Test.get_testset_depth),
  Expr(:call, Test.:(==), SSAValue(2), 0),
  Expr(:gotoifnot, SSAValue(3), 7),
  Core.SlotNumber(id=3) = Test.DefaultTestSet,
  goto 9,
  Expr(:call, Test.get_testset),
  Core.SlotNumber(id=3) = Expr(:call, Test.typeof, SSAValue(7)),
  Core.SlotNumber(id=3),
  Expr(:call, Test._check_testset, SSAValue(9), quote Expr(:call, :==, Expr(:call, :get_testset_depth), 0) end),
  Expr(:call, Test.get_testset_depth),
  Expr(:call, Test.:(==), SSAValue(11), 0),
  Expr(:gotoifnot, SSAValue(12), 16),
  Core.SlotNumber(id=4) = Test.DefaultTestSet,
  goto 18,
  Expr(:call, Test.get_testset),
  Core.SlotNumber(id=4) = Expr(:call, Test.typeof, SSAValue(16)),
  Core.SlotNumber(id=4),
  SSAValue(18),
  Expr(:call, Base.NamedTuple),
  Expr(:call, Core.apply_type, Test.Dict, Test.Symbol, Test.Any),
  Expr(:call, SSAValue(21)),
  Expr(:call, Base.merge, SSAValue(20), SSAValue(22)),
  Expr(:call, Base.isempty, SSAValue(23)),
  Expr(:gotoifnot, SSAValue(24), 28),
  Core.SlotNumber(id=5) = Expr(:call, SSAValue(19), "MCMCChains"),
  goto 30,
  Expr(:call, Core.kwfunc, SSAValue(19)),
  Core.SlotNumber(id=5) = Expr(:call, SSAValue(28), SSAValue(23), SSAValue(19), "MCMCChains"),
  Symbol("#1#ts") = Core.SlotNumber(id=5),
  Expr(:gotoifnot, false, 33),
  goto 31,
  Expr(:call, Test.push_testset, Symbol("#1#ts")),
  Core.SlotNumber(id=1) = Expr(:call, Test.default_rng),
  Expr(:call, Test.copy, Core.SlotNumber(id=1)),
  Symbol("#3#oldrng") = SSAValue(35),
  Expr(:enter, 73),
  Core.SlotNumber(id=6) = -1,
  Expr(:enter, 57),
  Expr(:call, Base.getproperty, Test.Random, :(:seed!)),
  Expr(:call, Base.getproperty, Core.SlotNumber(id=1), :(:seed)),
  Expr(:call, SSAValue(40), SSAValue(41)),
  Expr(:call, :include, "plot_test.jl"),
  Expr(:call, :include, "diagnostic_tests.jl"),
  Expr(:call, :include, "missing_tests.jl"),
  Expr(:call, :include, "sections_tests.jl"),
  Expr(:call, :include, "serialization_tests.jl"),
  Expr(:call, :include, "sampling_tests.jl"),
  Expr(:call, :include, "arrayconstructor_tests.jl"),
  Expr(:call, :include, "sampling_tests.jl"),
  Expr(:call, :include, "arrayconstructor_tests.jl"),
  Expr(:call, :include, "dfconstructor_tests.jl"),
  Expr(:call, :include, "summarize_tests.jl"),
  Expr(:call, :include, "modelstats_test.jl"),
  Expr(:leave, 1),
  goto 71,
  Expr(:leave, 1),
  Core.SlotNumber(id=2) = Expr(:the_exception),
  Expr(:call, Test.isa, Core.SlotNumber(id=2), Test.InterruptException),
  Expr(:gotoifnot, SSAValue(59), 63),
  Expr(:call, Test.rethrow),
  goto 64,
  false,
  Expr(:copyast, quote Expr(:tuple) end),
  Core.SlotNumber(id=2),
  Expr(:call, Base.getproperty, Test.Base, :(:catch_stack)),
  Expr(:call, SSAValue(66)),
  Expr(:call, Test.Error, :(:nontest_error), SSAValue(64), SSAValue(65), SSAValue(67), quote #= Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/runtests.jl"):3 =# end),
  Expr(:call, Test.record, Symbol("#1#ts"), SSAValue(68)),
  Expr(:pop_exception, SSAValue(39)),
  Expr(:leave, 1),
  goto 75,
  Expr(:leave, 1),
  Core.SlotNumber(id=6) = 1,
  Expr(:call, Test.copy!, Core.SlotNumber(id=1), Symbol("#3#oldrng")),
  Expr(:call, Core.:(===), Core.SlotNumber(id=6), 1),
  Expr(:gotoifnot, SSAValue(76), 79),
  Expr(:call, Base.rethrow),
  Expr(:call, Test.pop_testset),
  Expr(:call, Test.finish, Symbol("#1#ts")),
  Expr(:return, SSAValue(80))], codelocs=Array{Int32, (81,)}[1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 5, 6, 7, 8, 8, 9, 9, 9, 10, 10, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 11, 11, 11, 11, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 27, 28, 1], ssavaluetypes=81, ssaflags=Array{UInt8, (0,)}[], method_for_inference_limit_heuristics=nothing, linetable=Array{Any, (28,)}[
  Core.LineInfoNode(method=Symbol("top-level scope"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/runtests.jl"), line=5, inlined_at=0),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1093, inlined_at=1),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1094, inlined_at=1),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1097, inlined_at=1),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1097, inlined_at=1),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1098, inlined_at=1),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1102, inlined_at=1),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1103, inlined_at=1),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1104, inlined_at=1),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1106, inlined_at=1),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1107, inlined_at=1),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/runtests.jl"), line=5, inlined_at=11),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/runtests.jl"), line=8, inlined_at=11),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/runtests.jl"), line=11, inlined_at=11),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/runtests.jl"), line=14, inlined_at=11),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/runtests.jl"), line=17, inlined_at=11),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/runtests.jl"), line=20, inlined_at=11),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/runtests.jl"), line=23, inlined_at=11),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/runtests.jl"), line=26, inlined_at=11),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/runtests.jl"), line=29, inlined_at=11),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/runtests.jl"), line=32, inlined_at=11),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/runtests.jl"), line=35, inlined_at=11),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/runtests.jl"), line=38, inlined_at=11),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1109, inlined_at=1),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1112, inlined_at=1),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1114, inlined_at=1),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1116, inlined_at=1),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl"), line=1117, inlined_at=1)], slotnames=Array{Symbol, (6,)}[
  Symbol("#2#RNG"),
  :err,
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol("")], slotflags=Array{UInt8, (6,)}[0x18, 0x18, 0x00, 0x00, 0x00, 0x00], slottypes=nothing, rettype=Any, parent=nothing, edges=nothing, min_world=0x0000000000000001, max_world=0xffffffffffffffff, inferred=false, inlineable=false, propagate_inbounds=false, pure=false)jl_interpret_toplevel_thunk at /workspace/srcdir/src/interpreter.c:897
jl_toplevel_eval_flex at /workspace/srcdir/src/toplevel.c:814
jl_parse_eval_all at /workspace/srcdir/src/ast.c:873
jl_load at /workspace/srcdir/src/toplevel.c:878
include at ./boot.jl:328 [inlined]
include_relative at ./loading.jl:1105
include at ./Base.jl:31
_jl_invoke at /workspace/srcdir/src/gf.c:2135 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2305
include at ./client.jl:424
_jl_invoke at /workspace/srcdir/src/gf.c:2135 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2305
jl_apply at /workspace/srcdir/src/julia.h:1631 [inlined]
do_call at /workspace/srcdir/src/interpreter.c:328
eval_value at /workspace/srcdir/src/interpreter.c:417
eval_stmt_value at /workspace/srcdir/src/interpreter.c:368 [inlined]
eval_body at /workspace/srcdir/src/interpreter.c:778
jl_interpret_toplevel_thunk_callback at /workspace/srcdir/src/interpreter.c:888
Interpreter frame (ip: 0)
Core.CodeInfo(code=Array{Any, (2,)}[
  Expr(:call, :include, "/home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/runtests.jl"),
  Expr(:return, SSAValue(1))], codelocs=Array{Int32, (2,)}[1, 1], ssavaluetypes=2, ssaflags=Array{UInt8, (0,)}[], method_for_inference_limit_heuristics=nothing, linetable=Array{Any, (1,)}[Core.LineInfoNode(method=Symbol("top-level scope"), file=:none, line=6, inlined_at=0)], slotnames=Array{Symbol, (0,)}[], slotflags=Array{UInt8, (0,)}[], slottypes=nothing, rettype=Any, parent=nothing, edges=nothing, min_world=0x0000000000000001, max_world=0xffffffffffffffff, inferred=false, inlineable=false, propagate_inbounds=false, pure=false)jl_interpret_toplevel_thunk at /workspace/srcdir/src/interpreter.c:897
jl_toplevel_eval_flex at /workspace/srcdir/src/toplevel.c:814
jl_toplevel_eval_flex at /workspace/srcdir/src/toplevel.c:764
jl_toplevel_eval_in at /workspace/srcdir/src/toplevel.c:843
eval at ./boot.jl:330
_jl_invoke at /workspace/srcdir/src/gf.c:2135 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2305
exec_options at ./client.jl:263
_start at ./client.jl:460
jfptr__start_2084.clone_1 at /opt/julia/lib/julia/sys.so (unknown line)
_jl_invoke at /workspace/srcdir/src/gf.c:2135 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2305
jl_apply at /workspace/srcdir/ui/../src/julia.h:1631 [inlined]
true_main at /workspace/srcdir/ui/repl.c:96
main at /workspace/srcdir/ui/repl.c:217
__libc_start_main at /lib/x86_64-linux-gnu/libc.so.6 (unknown line)
unknown function (ip: 0x4015e4)

signal (11): Segmentation fault
in expression starting at /home/pkgeval/.julia/packages/MCMCChains/EAtMA/test/serialization_tests.jl:5
jl_lookup_generic_ at /workspace/srcdir/src/gf.c:2251 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2301
jl_apply at /workspace/srcdir/src/julia.h:1631 [inlined]
jl_f__apply at /workspace/srcdir/src/builtins.c:627
#_#3 at /home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/model.jl:24
_jl_invoke at /workspace/srcdir/src/gf.c:2141 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2305
jl_apply at /workspace/srcdir/src/julia.h:1631 [inlined]
jl_f__apply at /workspace/srcdir/src/builtins.c:627
Model at /home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/model.jl:24
_jl_invoke at /workspace/srcdir/src/gf.c:2141 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2305
runmodel! at /home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/varinfo.jl:602
_jl_invoke at /workspace/srcdir/src/gf.c:2141 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2305
runmodel! at /home/pkgeval/.julia/packages/DynamicPPL/rxgFN/src/varinfo.jl:598
_jl_invoke at /workspace/srcdir/src/gf.c:2141 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2305
#sample_init!#23 at /home/pkgeval/.julia/packages/Turing/a0nSz/src/inference/hmc.jl:140
_jl_invoke at /workspace/srcdir/src/gf.c:2141 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2305
#sample_init! at ./none:0
_jl_invoke at /workspace/srcdir/src/gf.c:2141 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2305
#sample#6 at /home/pkgeval/.julia/packages/AbstractMCMC/pi3j6/src/AbstractMCMC.jl:206
_jl_invoke at /workspace/srcdir/src/gf.c:2141 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2305
#sample at ./none:0
_jl_invoke at /workspace/srcdir/src/gf.c:2141 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2305
#resume#15 at /home/pkgeval/.julia/packages/Turing/a0nSz/src/inference/Inference.jl:430
_jl_invoke at /workspace/srcdir/src/gf.c:2141 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2305
resume at /home/pkgeval/.julia/packages/Turing/a0nSz/src/inference/Inference.jl:427
_jl_invoke at /workspace/srcdir/src/gf.c:2141 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2305
jl_apply at /workspace/srcdir/src/julia.h:1631 [inlined]
do_call at /workspace/srcdir/src/interpreter.c:328
eval_value at /workspace/srcdir/src/interpreter.c:417
eval_body at /workspace/srcdir/src/interpreter.c:641
eval_body at /workspace/srcdir/src/interpreter.c:705
eval_body at /workspace/srcdir/src/interpreter.c:705
jl_interpret_toplevel_thunk_callback at /workspace/srcdir/src/interpreter.c:888
unknown function (ip: 0xfffffffffffffffe)
unknown function (ip: 0x7f4aedf4f30f)
unknown function (ip: 0xb7)
jl_interpret_toplevel_thunk at /workspace/srcdir/src/interpreter.c:897
jl_toplevel_eval_flex at /workspace/srcdir/src/toplevel.c:814
jl_parse_eval_all at /workspace/srcdir/src/ast.c:873
jl_load at /workspace/srcdir/src/toplevel.c:878
include at ./boot.jl:328 [inlined]
include_relative at ./loading.jl:1105
include at ./Base.jl:31
_jl_invoke at /workspace/srcdir/src/gf.c:2135 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2305
include at ./client.jl:424
_jl_invoke at /workspace/srcdir/src/gf.c:2135 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2305
jl_apply at /workspace/srcdir/src/julia.h:1631 [inlined]
do_call at /workspace/srcdir/src/interpreter.c:328
eval_value at /workspace/srcdir/src/interpreter.c:417
eval_stmt_value at /workspace/srcdir/src/interpreter.c:368 [inlined]
eval_body at /workspace/srcdir/src/interpreter.c:778
eval_body at /workspace/srcdir/src/interpreter.c:705
eval_body at /workspace/srcdir/src/interpreter.c:705
jl_interpret_toplevel_thunk_callback at /workspace/srcdir/src/interpreter.c:888
unknown function (ip: 0xfffffffffffffffe)
unknown function (ip: 0x7f4b2ca5c20f)
unknown function (ip: 0x2d)
jl_interpret_toplevel_thunk at /workspace/srcdir/src/interpreter.c:897
jl_toplevel_eval_flex at /workspace/srcdir/src/toplevel.c:814
jl_parse_eval_all at /workspace/srcdir/src/ast.c:873
jl_load at /workspace/srcdir/src/toplevel.c:878
include at ./boot.jl:328 [inlined]
include_relative at ./loading.jl:1105
include at ./Base.jl:31
_jl_invoke at /workspace/srcdir/src/gf.c:2135 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2305
include at ./client.jl:424
_jl_invoke at /workspace/srcdir/src/gf.c:2135 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2305
jl_apply at /workspace/srcdir/src/julia.h:1631 [inlined]
do_call at /workspace/srcdir/src/interpreter.c:328
eval_value at /workspace/srcdir/src/interpreter.c:417
eval_stmt_value at /workspace/srcdir/src/interpreter.c:368 [inlined]
eval_body at /workspace/srcdir/src/interpreter.c:778
jl_interpret_toplevel_thunk_callback at /workspace/srcdir/src/interpreter.c:888
unknown function (ip: 0xfffffffffffffffe)
unknown function (ip: 0x7f4b2c5efb0f)
unknown function (ip: 0xffffffffffffffff)
jl_interpret_toplevel_thunk at /workspace/srcdir/src/interpreter.c:897
jl_toplevel_eval_flex at /workspace/srcdir/src/toplevel.c:814
jl_toplevel_eval_flex at /workspace/srcdir/src/toplevel.c:764
jl_toplevel_eval_in at /workspace/srcdir/src/toplevel.c:843
eval at ./boot.jl:330
_jl_invoke at /workspace/srcdir/src/gf.c:2135 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2305
exec_options at ./client.jl:263
_start at ./client.jl:460
jfptr__start_2084.clone_1 at /opt/julia/lib/julia/sys.so (unknown line)
_jl_invoke at /workspace/srcdir/src/gf.c:2135 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2305
jl_apply at /workspace/srcdir/ui/../src/julia.h:1631 [inlined]
true_main at /workspace/srcdir/ui/repl.c:96
main at /workspace/srcdir/ui/repl.c:217
__libc_start_main at /lib/x86_64-linux-gnu/libc.so.6 (unknown line)
unknown function (ip: 0x4015e4)
Allocations: 388551821 (Pool: 388407697; Big: 144124); GC: 334
ERROR: Package MCMCChains errored during testing
Stacktrace:
 [1] pkgerror(::String, ::Vararg{String,N} where N) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Pkg/src/Types.jl:113
 [2] #test#131(::Bool, ::Nothing, ::Cmd, ::Cmd, ::typeof(Pkg.Operations.test), ::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Pkg/src/Operations.jl:1372
 [3] #test at ./none:0 [inlined]
 [4] #test#62(::Bool, ::Nothing, ::Cmd, ::Cmd, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::typeof(Pkg.API.test), ::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Pkg/src/API.jl:253
 [5] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Pkg/src/API.jl:239
 [6] #test#61 at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Pkg/src/API.jl:233 [inlined]
 [7] test at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Pkg/src/API.jl:233 [inlined]
 [8] #test#60 at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Pkg/src/API.jl:232 [inlined]
 [9] test at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Pkg/src/API.jl:232 [inlined]
 [10] #test#59(::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::typeof(Pkg.API.test), ::String) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Pkg/src/API.jl:231
 [11] test(::String) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Pkg/src/API.jl:231
 [12] top-level scope at none:13
