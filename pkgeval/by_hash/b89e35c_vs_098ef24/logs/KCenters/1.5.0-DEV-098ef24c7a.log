Julia Version 1.5.0-DEV.665
Commit 098ef24c7a (2020-04-22 23:09 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed DataValueInterfaces ───────── v1.0.0
  Installed PooledArrays ──────────────── v0.5.3
  Installed KCenters ──────────────────── v0.2.2
  Installed Parsers ───────────────────── v1.0.2
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed DataStructures ────────────── v0.17.13
  Installed StatsBase ─────────────────── v0.32.2
  Installed SimilaritySearch ──────────── v0.3.19
  Installed LearnBase ─────────────────── v0.2.2
  Installed Reexport ──────────────────── v0.2.0
  Installed InvertedIndices ───────────── v1.0.0
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed MappedArrays ──────────────── v0.2.2
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed TableTraits ───────────────── v1.0.0
  Installed JSON ──────────────────────── v0.21.0
  Installed Missings ──────────────────── v0.4.3
  Installed Compat ────────────────────── v3.8.0
  Installed DataAPI ───────────────────── v1.2.0
  Installed OrderedCollections ────────── v1.1.0
  Installed Tables ────────────────────── v1.0.4
  Installed CategoricalArrays ─────────── v0.7.7
  Installed MLDataUtils ───────────────── v0.5.1
  Installed DataFrames ────────────────── v0.20.2
  Installed MLDataPattern ─────────────── v0.5.1
Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.8.0
  [9a962f9c] + DataAPI v1.2.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.13
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.1
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v1.0.2
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_hB3MEq/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_hB3MEq/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.8.0
  [9a962f9c] DataAPI v1.2.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.13
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.1
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v1.0.2
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0723782532413801
[ Info: 0.9316620069742203
[ Info: 0.8321307849884033
[ Info: 0.5539093809823196
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.3253413225462039
mean(cdnet.distances) = 0.3527383491645257
mean(crand.distances) = 0.33292137811581296
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4033203125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4033203125,"f1":null,"seconds":3.2633543014526367e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":6.625,"distances_sum":1066.182825533913}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4033203125,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.4033203125,"f1":null,"seconds":3.2633543014526367e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":6.625,"distances_sum":1066.182825533913}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5927734375, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.5927734375,"f1":0.7304237429237437,"seconds":3.825873136520386e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":7.7890625,"distances_sum":1689.0506523203228}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7587890625, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7587890625,"f1":0.8511202339327344,"seconds":4.127621650695801e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.578125,"distances_sum":2227.7424143905782}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7744140625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7744140625,"f1":0.8664720695970703,"seconds":5.193054676055908e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.671875,"distances_sum":2270.689674295504}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7744140625,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7744140625,"f1":0.8664720695970703,"seconds":5.193054676055908e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.671875,"distances_sum":2270.689674295504}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9573317307692313,"seconds":6.213784217834473e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.890625,"distances_sum":2950.0505683172737}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9591746794871799,"seconds":5.2228569984436035e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.8515625,"distances_sum":2958.8397775330427}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8857421875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8857421875,"f1":0.9347756410256419,"seconds":5.748122930526733e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.71875,"distances_sum":2764.78174348253}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.85546875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.85546875,"f1":0.9151759698634704,"seconds":5.0906091928482056e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.8046875,"distances_sum":2645.9972262186197}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9448405760905768,"seconds":5.302950739860535e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.7734375,"distances_sum":2902.8154727373694}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9446173618048624,"seconds":5.166977643966675e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.828125,"distances_sum":2857.486727894221}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9267578125,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9591746794871799,"seconds":5.2228569984436035e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.8515625,"distances_sum":2958.8397775330427}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9267578125,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9591746794871799,"seconds":5.2228569984436035e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.8515625,"distances_sum":2958.8397775330427}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5595703125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5595703125,"f1":0.6995806277056283,"seconds":5.343928933143616e-6,"exhaustive_search_seconds":2.1401792764663696e-6,"evaluations":7.0625,"distances_sum":1437.4757669334676}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1923828125, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.1923828125,"f1":null,"seconds":4.770234227180481e-6,"exhaustive_search_seconds":2.1401792764663696e-6,"evaluations":5.921875,"distances_sum":458.7409968155084}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4443359375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4443359375,"f1":null,"seconds":4.883855581283569e-6,"exhaustive_search_seconds":2.1401792764663696e-6,"evaluations":6.5859375,"distances_sum":1112.0871264272394}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5595703125,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5595703125,"f1":0.6995806277056283,"seconds":5.343928933143616e-6,"exhaustive_search_seconds":2.1401792764663696e-6,"evaluations":7.0625,"distances_sum":1437.4757669334676}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.646484375, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.646484375,"f1":0.7714915293040301,"seconds":5.8710575103759766e-6,"exhaustive_search_seconds":2.1401792764663696e-6,"evaluations":7.515625,"distances_sum":1699.7497943509193}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.865234375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.865234375,"f1":0.9196402555777563,"seconds":6.817281246185303e-6,"exhaustive_search_seconds":2.1401792764663696e-6,"evaluations":8.4375,"distances_sum":2542.908946629643}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.74609375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.74609375,"f1":0.8461345945720954,"seconds":7.517635822296143e-6,"exhaustive_search_seconds":2.1401792764663696e-6,"evaluations":7.9765625,"distances_sum":2064.3291600112075}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6728515625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6728515625,"f1":0.7899978493728501,"seconds":7.148832082748413e-6,"exhaustive_search_seconds":2.1401792764663696e-6,"evaluations":7.5546875,"distances_sum":1806.5107592031954}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7529296875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7529296875,"f1":0.8489078629703636,"seconds":6.73346221446991e-6,"exhaustive_search_seconds":2.1401792764663696e-6,"evaluations":7.953125,"distances_sum":2102.3788892206544}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.666015625, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.666015625,"f1":0.7865613553113561,"seconds":4.3548643589019775e-6,"exhaustive_search_seconds":2.1401792764663696e-6,"evaluations":7.5859375,"distances_sum":1768.2607620296515}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.865234375,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.865234375,"f1":0.9196402555777563,"seconds":6.817281246185303e-6,"exhaustive_search_seconds":2.1401792764663696e-6,"evaluations":8.4375,"distances_sum":2542.908946629643}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9486549908424915,"seconds":4.9620866775512695e-6,"exhaustive_search_seconds":2.1401792764663696e-6,"evaluations":8.7109375,"distances_sum":2748.483194607875}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9597527472527475,"seconds":4.868954420089722e-6,"exhaustive_search_seconds":2.1401792764663696e-6,"evaluations":8.8046875,"distances_sum":2812.055407639533}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9554575632700639,"seconds":4.794448614120483e-6,"exhaustive_search_seconds":2.1401792764663696e-6,"evaluations":8.78125,"distances_sum":2779.6084919539585}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.926912150349651,"seconds":4.563480615615845e-6,"exhaustive_search_seconds":2.1401792764663696e-6,"evaluations":8.5078125,"distances_sum":2608.4647720124663}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9310444763569767,"seconds":4.285946488380432e-6,"exhaustive_search_seconds":2.1401792764663696e-6,"evaluations":8.4609375,"distances_sum":2614.281678106029}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9287109375,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9597527472527475,"seconds":4.868954420089722e-6,"exhaustive_search_seconds":2.1401792764663696e-6,"evaluations":8.8046875,"distances_sum":2812.055407639533}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9287109375,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9597527472527475,"seconds":4.868954420089722e-6,"exhaustive_search_seconds":2.1401792764663696e-6,"evaluations":8.8046875,"distances_sum":2812.055407639533}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.703125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.703125,"f1":0.8145593989343998,"seconds":3.462657332420349e-6,"exhaustive_search_seconds":1.039355993270874e-6,"evaluations":7.7421875,"distances_sum":1839.184129923252}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3994140625, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.3994140625,"f1":null,"seconds":2.4419277906417847e-6,"exhaustive_search_seconds":1.039355993270874e-6,"evaluations":5.9296875,"distances_sum":952.6692938592325}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3857421875, conf: {"ssize":1,"bsize":2}, perf: {"precision":1.0,"recall":0.3857421875,"f1":0.5319930069930064,"seconds":2.382323145866394e-6,"exhaustive_search_seconds":1.039355993270874e-6,"evaluations":5.7890625,"distances_sum":910.5975565285331}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.703125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.703125,"f1":0.8145593989343998,"seconds":3.462657332420349e-6,"exhaustive_search_seconds":1.039355993270874e-6,"evaluations":7.7421875,"distances_sum":1839.184129923252}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.771484375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.771484375,"f1":0.8644662629037636,"seconds":3.898516297340393e-6,"exhaustive_search_seconds":1.039355993270874e-6,"evaluations":7.890625,"distances_sum":2105.891794549055}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9351877289377295,"seconds":4.336237907409668e-6,"exhaustive_search_seconds":1.039355993270874e-6,"evaluations":8.609375,"distances_sum":2526.180499389292}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.763671875,"f1":0.8593297327672336,"seconds":5.0496309995651245e-6,"exhaustive_search_seconds":1.039355993270874e-6,"evaluations":7.8671875,"distances_sum":2020.4018181465574}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.794921875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.794921875,"f1":0.8786749708624717,"seconds":5.712732672691345e-6,"exhaustive_search_seconds":1.039355993270874e-6,"evaluations":7.9375,"distances_sum":2160.6537598457153}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.888671875,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.888671875,"f1":0.9351877289377295,"seconds":4.336237907409668e-6,"exhaustive_search_seconds":1.039355993270874e-6,"evaluations":8.609375,"distances_sum":2526.180499389292}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9754120879120884,"seconds":6.77257776260376e-6,"exhaustive_search_seconds":1.039355993270874e-6,"evaluations":8.9140625,"distances_sum":2833.7000429274876}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":6,"bsize":11}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9735691391941399,"seconds":7.014721632003784e-6,"exhaustive_search_seconds":1.039355993270874e-6,"evaluations":8.9609375,"distances_sum":2817.840711791773}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9519402472527478,"seconds":6.679445505142212e-6,"exhaustive_search_seconds":1.039355993270874e-6,"evaluations":8.828125,"distances_sum":2677.9748037159875}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9392971611721617,"seconds":6.8712979555130005e-6,"exhaustive_search_seconds":1.039355993270874e-6,"evaluations":8.6640625,"distances_sum":2600.394564059938}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9514022435897441,"seconds":7.152557373046875e-6,"exhaustive_search_seconds":1.039355993270874e-6,"evaluations":8.796875,"distances_sum":2703.664137059055}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9585222069597075,"seconds":7.212162017822266e-6,"exhaustive_search_seconds":1.039355993270874e-6,"evaluations":8.8046875,"distances_sum":2716.7200047724423}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9583962912087917,"seconds":7.076188921928406e-6,"exhaustive_search_seconds":1.039355993270874e-6,"evaluations":8.84375,"distances_sum":2736.8560346899317}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9549565018315025,"seconds":7.312744855880737e-6,"exhaustive_search_seconds":1.039355993270874e-6,"evaluations":8.8203125,"distances_sum":2705.6514708995387}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9485951548451557,"seconds":7.1711838245391846e-6,"exhaustive_search_seconds":1.039355993270874e-6,"evaluations":8.765625,"distances_sum":2665.8874375318183}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9560546875,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9754120879120884,"seconds":6.77257776260376e-6,"exhaustive_search_seconds":1.039355993270874e-6,"evaluations":8.9140625,"distances_sum":2833.7000429274876}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9560546875,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9754120879120884,"seconds":6.77257776260376e-6,"exhaustive_search_seconds":1.039355993270874e-6,"evaluations":8.9140625,"distances_sum":2833.7000429274876}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.318359375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.318359375,"f1":null,"seconds":3.93204391002655e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":5.3046875,"distances_sum":793.2385781426026}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.318359375,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.318359375,"f1":null,"seconds":3.93204391002655e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":5.3046875,"distances_sum":793.2385781426026}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6240234375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6240234375,"f1":0.7544056637806645,"seconds":5.790963768959045e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":7.3984375,"distances_sum":1614.8145637042314}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7529296875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7529296875,"f1":0.8469306734931743,"seconds":6.245449185371399e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":7.921875,"distances_sum":2114.0578096615154}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7529296875,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7529296875,"f1":0.8469306734931743,"seconds":6.245449185371399e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":7.921875,"distances_sum":2114.0578096615154}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9370452464202472,"seconds":6.2212347984313965e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.609375,"distances_sum":2568.5652239247675}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8701171875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8701171875,"f1":0.9231747419247425,"seconds":6.16908073425293e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.5625,"distances_sum":2481.0887971058237}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84765625, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.84765625,"f1":0.9101164460539468,"seconds":6.075948476791382e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.59375,"distances_sum":2358.490687977851}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.890625,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.890625,"f1":0.9370452464202472,"seconds":6.2212347984313965e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.609375,"distances_sum":2568.5652239247675}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.890625,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.890625,"f1":0.9370452464202472,"seconds":6.2212347984313965e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.609375,"distances_sum":2568.5652239247675}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.642578125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.642578125,"f1":0.7710164835164842,"seconds":5.520880222320557e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":7.8828125,"distances_sum":1703.4305671518644}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.642578125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.642578125,"f1":0.7710164835164842,"seconds":5.520880222320557e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":7.8828125,"distances_sum":1703.4305671518644}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.771484375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.771484375,"f1":0.8616680194805204,"seconds":5.798414349555969e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.359375,"distances_sum":2168.4349584636584}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9293872793872802,"seconds":6.3907355070114136e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.71875,"distances_sum":2571.0115865452867}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8798828125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8798828125,"f1":0.9293872793872802,"seconds":6.3907355070114136e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.71875,"distances_sum":2571.0115865452867}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9436298076923084,"seconds":6.424263119697571e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.71875,"distances_sum":2719.3536637093057}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9440705128205131,"seconds":6.820447742938995e-5,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.7734375,"distances_sum":2702.281206219286}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9379552738927744,"seconds":5.804002285003662e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.734375,"distances_sum":2668.3163740654036}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9013671875,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.9013671875,"f1":0.9440705128205131,"seconds":6.820447742938995e-5,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.7734375,"distances_sum":2702.281206219286}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9013671875,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.9013671875,"f1":0.9440705128205131,"seconds":6.820447742938995e-5,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.7734375,"distances_sum":2702.281206219286}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6474609375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6474609375,"f1":0.7741638569763578,"seconds":5.075708031654358e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":7.59375,"distances_sum":1667.6010184116917}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3525390625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3525390625,"f1":null,"seconds":3.7439167499542236e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":5.65625,"distances_sum":871.587195626719}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6474609375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6474609375,"f1":0.7741638569763578,"seconds":5.075708031654358e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":7.59375,"distances_sum":1667.6010184116917}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9354853479853485,"seconds":6.878189742565155e-5,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.5078125,"distances_sum":2565.3241670786756}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8896484375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8896484375,"f1":0.9354853479853485,"seconds":6.878189742565155e-5,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.5078125,"distances_sum":2565.3241670786756}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9638793498168505,"seconds":7.0463865995407104e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.8359375,"distances_sum":2747.4986373665342}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9345703125,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9345703125,"f1":0.9638793498168505,"seconds":7.0463865995407104e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.8359375,"distances_sum":2747.4986373665342}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9345703125,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9345703125,"f1":0.9638793498168505,"seconds":7.0463865995407104e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.8359375,"distances_sum":2747.4986373665342}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.642578125, conf: {"ssize":1,"bsize":4}, perf: {"precision":0.9670572916666665,"recall":0.642578125,"f1":0.7621594551282055,"seconds":4.248693585395813e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.359375,"distances_sum":1062.536858978325}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7607421875, conf: {"ssize":5,"bsize":5}, perf: {"precision":0.9771949404761904,"recall":0.7607421875,"f1":0.8466783216783222,"seconds":5.822628736495972e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.5390625,"distances_sum":1319.877182608693}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7607421875,"state":{"ssize":5,"bsize":5},"perf":{"precision":0.9771949404761904,"recall":0.7607421875,"f1":0.8466783216783222,"seconds":5.822628736495972e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.5390625,"distances_sum":1319.877182608693}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":1,"bsize":7}, perf: {"precision":0.9891648065476191,"recall":0.88671875,"f1":0.9305052369505502,"seconds":6.679445505142212e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.8984375,"distances_sum":1665.9510488032608}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7880859375, conf: {"ssize":1,"bsize":5}, perf: {"precision":0.9849702380952381,"recall":0.7880859375,"f1":0.868398268398269,"seconds":6.1783939599990845e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.59375,"distances_sum":1340.700190462323}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.771484375, conf: {"ssize":6,"bsize":5}, perf: {"precision":0.9831659226190476,"recall":0.771484375,"f1":0.8551106445637701,"seconds":6.0051679611206055e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.609375,"distances_sum":1312.5794110410834}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.88671875,"state":{"ssize":1,"bsize":7},"perf":{"precision":0.9891648065476191,"recall":0.88671875,"f1":0.9305052369505502,"seconds":6.679445505142212e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.8984375,"distances_sum":1665.9510488032608}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":1,"bsize":11}, perf: {"precision":0.9778180803571429,"recall":0.93359375,"f1":0.9538597470238097,"seconds":7.35744833946228e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.9765625,"distances_sum":1840.5210466907263}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":1,"bsize":9}, perf: {"precision":0.9866443452380951,"recall":0.9111328125,"f1":0.9434924450549454,"seconds":7.281079888343811e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.8828125,"distances_sum":1777.1800037168005}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":9,"bsize":8}, perf: {"precision":0.9795386904761905,"recall":0.896484375,"f1":0.931430548618049,"seconds":6.755813956260681e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.875,"distances_sum":1733.3063301427842}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":10,"bsize":9}, perf: {"precision":0.980375744047619,"recall":0.90625,"f1":0.9386575663919418,"seconds":6.897374987602234e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.8828125,"distances_sum":1754.1807627252356}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.93359375,"state":{"ssize":1,"bsize":11},"perf":{"precision":0.9778180803571429,"recall":0.93359375,"f1":0.9538597470238097,"seconds":7.35744833946228e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.9765625,"distances_sum":1840.5210466907263}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.93359375,"state":{"ssize":1,"bsize":11},"perf":{"precision":0.9778180803571429,"recall":0.93359375,"f1":0.9538597470238097,"seconds":7.35744833946228e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.9765625,"distances_sum":1840.5210466907263}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.361328125, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.361328125,"f1":null,"seconds":4.330649971961975e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":6.0859375,"distances_sum":709.3596340527633}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3623046875, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.3623046875,"f1":null,"seconds":3.7420541048049927e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":6.0078125,"distances_sum":728.8847630534256}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3623046875,"state":{"ssize":5,"bsize":2},"perf":{"precision":null,"recall":0.3623046875,"f1":null,"seconds":3.7420541048049927e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":6.0078125,"distances_sum":728.8847630534256}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8271484375, conf: {"ssize":8,"bsize":6}, perf: {"precision":0.9855747767857141,"recall":0.8271484375,"f1":0.8933100103021985,"seconds":5.632638931274414e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.6796875,"distances_sum":1743.468034287993}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.62109375, conf: {"ssize":3,"bsize":4}, perf: {"precision":0.9770647321428572,"recall":0.62109375,"f1":0.7475322420634926,"seconds":4.664063453674316e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.046875,"distances_sum":1282.9772965694426}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5234375, conf: {"ssize":3,"bsize":3}, perf: {"precision":0.9822730654761904,"recall":0.5234375,"f1":0.669406721750472,"seconds":5.671754479408264e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":7.625,"distances_sum":1011.8318560331409}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6474609375, conf: {"ssize":7,"bsize":4}, perf: {"precision":0.981956845238095,"recall":0.6474609375,"f1":0.7727865884115889,"seconds":5.023553967475891e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.234375,"distances_sum":1333.266356183469}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5224609375, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5224609375,"f1":null,"seconds":4.777684807777405e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":7.65625,"distances_sum":1067.9195247765515}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.748046875, conf: {"ssize":1,"bsize":5}, perf: {"precision":0.9854910714285714,"recall":0.748046875,"f1":0.8428004287379293,"seconds":6.5267086029052734e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.6171875,"distances_sum":1485.9305952695354}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5244140625, conf: {"ssize":5,"bsize":3}, perf: {"precision":0.9797991071428572,"recall":0.5244140625,"f1":0.668384913697414,"seconds":5.492940545082092e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":7.7265625,"distances_sum":1075.707426043282}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6240234375, conf: {"ssize":1,"bsize":4}, perf: {"precision":0.9699032738095237,"recall":0.6240234375,"f1":0.7517430486180491,"seconds":5.884096026420593e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.3359375,"distances_sum":1243.4300720297176}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8271484375,"state":{"ssize":8,"bsize":6},"perf":{"precision":0.9855747767857141,"recall":0.8271484375,"f1":0.8933100103021985,"seconds":5.632638931274414e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.6796875,"distances_sum":1743.468034287993}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":11,"bsize":8}, perf: {"precision":0.9813709077380952,"recall":0.884765625,"f1":0.9259593921703303,"seconds":6.146728992462158e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.828125,"distances_sum":1970.3298687334143}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":1,"bsize":7}, perf: {"precision":0.9872767857142857,"recall":0.8740234375,"f1":0.9221983745421248,"seconds":6.055459380149841e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.7265625,"distances_sum":1941.6453493247038}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":1,"bsize":8}, perf: {"precision":0.9849330357142857,"recall":0.8984375,"f1":0.9366271749084253,"seconds":7.295981049537659e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.7734375,"distances_sum":2040.570973886224}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":9,"bsize":8}, perf: {"precision":0.9893694196428571,"recall":0.8876953125,"f1":0.9313508756868135,"seconds":5.938112735748291e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.71875,"distances_sum":1995.3790505521827}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":3,"bsize":7}, perf: {"precision":0.9849795386904762,"recall":0.89453125,"f1":0.9331823775183155,"seconds":5.666166543960571e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.859375,"distances_sum":1969.385442263589}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.861328125, conf: {"ssize":2,"bsize":7}, perf: {"precision":0.9852027529761905,"recall":0.861328125,"f1":0.9129435018106898,"seconds":5.606561899185181e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.7734375,"distances_sum":1867.5923567596212}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8984375,"state":{"ssize":1,"bsize":8},"perf":{"precision":0.9849330357142857,"recall":0.8984375,"f1":0.9366271749084253,"seconds":7.295981049537659e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.7734375,"distances_sum":2040.570973886224}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8984375,"state":{"ssize":1,"bsize":8},"perf":{"precision":0.9849330357142857,"recall":0.8984375,"f1":0.9366271749084253,"seconds":7.295981049537659e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.7734375,"distances_sum":2040.570973886224}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7392578125, conf: {"ssize":1,"bsize":5}, perf: {"precision":0.9923735119047618,"recall":0.7392578125,"f1":0.8385567557442564,"seconds":5.0067901611328125e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.78125,"distances_sum":1514.7440925235865}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5625, conf: {"ssize":5,"bsize":3}, perf: {"precision":0.9819010416666666,"recall":0.5625,"f1":0.7051605512543018,"seconds":5.068257451057434e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":7.359375,"distances_sum":1124.0648919751986}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6640625, conf: {"ssize":4,"bsize":4}, perf: {"precision":0.9920572916666667,"recall":0.6640625,"f1":0.7855541160228667,"seconds":5.295500159263611e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.5390625,"distances_sum":1394.8221812393497}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7392578125,"state":{"ssize":1,"bsize":5},"perf":{"precision":0.9923735119047618,"recall":0.7392578125,"f1":0.8385567557442564,"seconds":5.0067901611328125e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.78125,"distances_sum":1514.7440925235865}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":1,"bsize":8}, perf: {"precision":0.9879464285714286,"recall":0.90234375,"f1":0.9392313415750919,"seconds":6.556510925292969e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.9140625,"distances_sum":2104.3508111404976}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.830078125, conf: {"ssize":6,"bsize":6}, perf: {"precision":0.9862072172619049,"recall":0.830078125,"f1":0.8956139563561445,"seconds":5.319714546203613e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.75,"distances_sum":1816.6882155431051}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":8,"bsize":8}, perf: {"precision":0.9922340029761905,"recall":0.93359375,"f1":0.9594443967490845,"seconds":5.7872384786605835e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.9375,"distances_sum":2217.5878601575123}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7509765625, conf: {"ssize":5,"bsize":5}, perf: {"precision":0.983100818452381,"recall":0.7509765625,"f1":0.8422519104159735,"seconds":6.126239895820618e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.796875,"distances_sum":1601.8628840445854}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.93359375,"state":{"ssize":8,"bsize":8},"perf":{"precision":0.9922340029761905,"recall":0.93359375,"f1":0.9594443967490845,"seconds":5.7872384786605835e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.9375,"distances_sum":2217.5878601575123}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":10,"bsize":11}, perf: {"precision":0.9895089285714286,"recall":0.943359375,"f1":0.9638507326007328,"seconds":6.495043635368347e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.9765625,"distances_sum":2235.1653340614353}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.943359375,"state":{"ssize":10,"bsize":11},"perf":{"precision":0.9895089285714286,"recall":0.943359375,"f1":0.9638507326007328,"seconds":6.495043635368347e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.9765625,"distances_sum":2235.1653340614353}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.943359375,"state":{"ssize":10,"bsize":11},"perf":{"precision":0.9895089285714286,"recall":0.943359375,"f1":0.9638507326007328,"seconds":6.495043635368347e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.9765625,"distances_sum":2235.1653340614353}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.193359375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.193359375,"f1":null,"seconds":3.0472874641418457e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":5.265625,"distances_sum":417.68781157215477}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5419921875, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5419921875,"f1":null,"seconds":4.187226295471191e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":7.7578125,"distances_sum":1012.7887499838781}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5419921875,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.5419921875,"f1":null,"seconds":4.187226295471191e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":7.7578125,"distances_sum":1012.7887499838781}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.82421875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.82421875,"f1":0.8952667124542133,"seconds":5.340203642845154e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.7109375,"distances_sum":1795.653142792745}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6748046875, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6748046875,"f1":0.7920383436008445,"seconds":4.766508936882019e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.46875,"distances_sum":1318.9359089203003}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.82421875,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.82421875,"f1":0.8952667124542133,"seconds":5.340203642845154e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.7109375,"distances_sum":1795.653142792745}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9728422619047621,"seconds":5.8729201555252075e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.8984375,"distances_sum":2215.7012798095006}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9669299450549454,"seconds":5.953013896942139e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.8828125,"distances_sum":2193.0419533747736}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9574461996337001,"seconds":5.861744284629822e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.765625,"distances_sum":2148.893962743072}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.876953125, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.876953125,"f1":0.9284028471528478,"seconds":5.60469925403595e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.7578125,"distances_sum":1957.408810383105}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9501953125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9728422619047621,"seconds":5.8729201555252075e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.8984375,"distances_sum":2215.7012798095006}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9501953125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9728422619047621,"seconds":5.8729201555252075e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.8984375,"distances_sum":2215.7012798095006}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76953125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.76953125,"f1":0.8587782009657018,"seconds":5.234032869338989e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.609375,"distances_sum":1670.4744637573308}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4111328125, conf: {"ssize":1,"bsize":2}, perf: {"precision":1.0,"recall":0.4111328125,"f1":0.5601794039294038,"seconds":3.898516297340393e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":6.5859375,"distances_sum":818.732743402974}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.76953125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.76953125,"f1":0.8587782009657018,"seconds":5.234032869338989e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.609375,"distances_sum":1670.4744637573308}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9507268772893775,"seconds":5.435198545455933e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.875,"distances_sum":2224.8661237677557}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9514766483516486,"seconds":8.171424269676208e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.7890625,"distances_sum":2297.362737666886}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8154296875, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8154296875,"f1":0.888118652181153,"seconds":5.15766441822052e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.6796875,"distances_sum":1855.5171744042668}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7880859375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7880859375,"f1":0.8747887529137538,"seconds":4.6603381633758545e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.75,"distances_sum":1745.9976852617697}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9169921875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9169921875,"f1":0.9514766483516486,"seconds":8.171424269676208e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.7890625,"distances_sum":2297.362737666886}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9762648809523814,"seconds":6.1765313148498535e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.96875,"distances_sum":2400.3430090694733}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9582417582417586,"seconds":6.2175095081329346e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.875,"distances_sum":2280.6163468640207}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9646806318681324,"seconds":6.336718797683716e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.8984375,"distances_sum":2317.6716152821596}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9656822344322349,"seconds":6.794929504394531e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.9453125,"distances_sum":2316.9372937667094}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9671531593406597,"seconds":6.3963234424591064e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.9375,"distances_sum":2331.4517386168623}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.95703125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9762648809523814,"seconds":6.1765313148498535e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.96875,"distances_sum":2400.3430090694733}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.95703125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9762648809523814,"seconds":6.1765313148498535e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.96875,"distances_sum":2400.3430090694733}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1474609375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.1474609375,"f1":null,"seconds":3.334134817123413e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":4.8515625,"distances_sum":320.246376602942}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5595703125, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5595703125,"f1":null,"seconds":4.9229711294174194e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":7.0625,"distances_sum":1138.3078595560978}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5595703125,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.5595703125,"f1":null,"seconds":4.9229711294174194e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":7.0625,"distances_sum":1138.3078595560978}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9308410339660346,"seconds":6.584450602531433e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.6875,"distances_sum":1953.4876706532714}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9434841200466205,"seconds":6.487593054771423e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.8515625,"distances_sum":2014.1538123447165}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9013671875,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.9013671875,"f1":0.9434841200466205,"seconds":6.487593054771423e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.8515625,"distances_sum":2014.1538123447165}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9639938186813191,"seconds":6.921589374542236e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.8828125,"distances_sum":2150.56974577551}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9736092032967035,"seconds":6.6980719566345215e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.8984375,"distances_sum":2224.784679442817}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9618933150183154,"seconds":6.686896085739136e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.8515625,"distances_sum":2156.701166574494}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9494677197802203,"seconds":6.778165698051453e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.7734375,"distances_sum":2080.812777339645}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9621165293040297,"seconds":6.258487701416016e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.875,"distances_sum":2135.58209400467}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.953125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9736092032967035,"seconds":6.6980719566345215e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.8984375,"distances_sum":2224.784679442817}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.953125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9736092032967035,"seconds":6.6980719566345215e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.8984375,"distances_sum":2224.784679442817}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4091796875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4091796875,"f1":null,"seconds":4.202127456665039e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":6.7890625,"distances_sum":803.5538849534526}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.701171875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.701171875,"f1":0.8136075729825738,"seconds":5.647540092468262e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.421875,"distances_sum":1550.8629694645185}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.701171875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.701171875,"f1":0.8136075729825738,"seconds":5.647540092468262e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.421875,"distances_sum":1550.8629694645185}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.841796875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.841796875,"f1":0.909209020146521,"seconds":5.930662155151367e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.8828125,"distances_sum":1947.1442647235438}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9426828379953387,"seconds":6.387010216712952e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.90625,"distances_sum":2182.401310662405}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9341778013653019,"seconds":6.509944796562195e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.921875,"distances_sum":2108.2316348263653}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8994140625,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.8994140625,"f1":0.9426828379953387,"seconds":6.387010216712952e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.90625,"distances_sum":2182.401310662405}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9684008699633702,"seconds":6.2193721532821655e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.9453125,"distances_sum":2363.3308317141964}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9655334249084255,"seconds":6.586313247680664e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.9453125,"distances_sum":2345.5122978530376}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9540979853479858,"seconds":6.316229701042175e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.859375,"distances_sum":2293.382558955865}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":9,"bsize":10}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9703125000000005,"seconds":6.897374987602234e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.9375,"distances_sum":2378.0984432433593}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9462890625,"state":{"ssize":9,"bsize":10},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.9703125000000005,"seconds":6.897374987602234e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.9375,"distances_sum":2378.0984432433593}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9462890625,"state":{"ssize":9,"bsize":10},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.9703125000000005,"seconds":6.897374987602234e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.9375,"distances_sum":2378.0984432433593}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2822265625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2822265625,"f1":null,"seconds":3.257766366004944e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":5.5390625,"distances_sum":505.73833966794297}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2822265625,"state":{"ssize":5,"bsize":1},"perf":{"precision":null,"recall":0.2822265625,"f1":null,"seconds":3.257766366004944e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":5.5390625,"distances_sum":505.73833966794297}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2861328125, conf: {"ssize":7,"bsize":1}, perf: {"precision":null,"recall":0.2861328125,"f1":null,"seconds":3.3508986234664917e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":5.484375,"distances_sum":537.0438838058125}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2861328125,"state":{"ssize":7,"bsize":1},"perf":{"precision":null,"recall":0.2861328125,"f1":null,"seconds":3.3508986234664917e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":5.484375,"distances_sum":537.0438838058125}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.2861328125,"state":{"ssize":7,"bsize":1},"perf":{"precision":null,"recall":0.2861328125,"f1":null,"seconds":3.3508986234664917e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":5.484375,"distances_sum":537.0438838058125}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5,"f1":0.6525347915972919,"seconds":3.902241587638855e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":6.6015625,"distances_sum":952.4777300311234}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3662109375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3662109375,"f1":null,"seconds":3.335997462272644e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":5.3515625,"distances_sum":728.4174674044594}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5,"f1":0.6525347915972919,"seconds":3.902241587638855e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":6.6015625,"distances_sum":952.4777300311234}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5,"f1":0.6525347915972919,"seconds":3.902241587638855e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":6.6015625,"distances_sum":952.4777300311234}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.5,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5,"f1":0.6525347915972919,"seconds":3.902241587638855e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":6.6015625,"distances_sum":952.4777300311234}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6748046875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6748046875,"f1":0.7961725774225783,"seconds":4.386529326438904e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":7.46875,"distances_sum":1199.0858657558717}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2353515625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2353515625,"f1":null,"seconds":3.1106173992156982e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":6.390625,"distances_sum":432.432444600852}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6748046875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6748046875,"f1":0.7961725774225783,"seconds":4.386529326438904e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":7.46875,"distances_sum":1199.0858657558717}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8671875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8671875,"f1":0.9223786630036636,"seconds":5.256384611129761e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.65625,"distances_sum":1715.333361550755}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6884765625, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6884765625,"f1":0.8054783757908767,"seconds":4.362314939498901e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":7.640625,"distances_sum":1255.8450157653874}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8671875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8671875,"f1":0.9223786630036636,"seconds":5.256384611129761e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.65625,"distances_sum":1715.333361550755}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9541895604395609,"seconds":5.559995770454407e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.7890625,"distances_sum":1884.017516753752}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9411916208791211,"seconds":5.381181836128235e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.6953125,"distances_sum":1825.4365169803689}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.950755494505495,"seconds":5.338340997695923e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.8359375,"distances_sum":1844.0614733506056}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9189453125,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9189453125,"f1":0.9541895604395609,"seconds":5.559995770454407e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.7890625,"distances_sum":1884.017516753752}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9189453125,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9189453125,"f1":0.9541895604395609,"seconds":5.559995770454407e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.7890625,"distances_sum":1884.017516753752}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.244140625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.244140625,"f1":null,"seconds":3.0659139156341553e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":5.5234375,"distances_sum":470.4672186195805}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7421875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7421875,"f1":0.8430959665334674,"seconds":4.909932613372803e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.125,"distances_sum":1419.9940454551056}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7421875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7421875,"f1":0.8430959665334674,"seconds":4.909932613372803e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.125,"distances_sum":1419.9940454551056}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9673363095238102,"seconds":5.634501576423645e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.84375,"distances_sum":1984.2614948754738}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7763671875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7763671875,"f1":0.8670163170163179,"seconds":5.1371753215789795e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.2734375,"distances_sum":1489.7150121106986}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9404296875,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9673363095238102,"seconds":5.634501576423645e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.84375,"distances_sum":1984.2614948754738}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9404296875,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9673363095238102,"seconds":5.634501576423645e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.84375,"distances_sum":1984.2614948754738}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9404296875,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9673363095238102,"seconds":5.634501576423645e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.84375,"distances_sum":1984.2614948754738}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.259765625, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.259765625,"f1":null,"seconds":3.252178430557251e-6,"exhaustive_search_seconds":1.2908130884170532e-6,"evaluations":5.9375,"distances_sum":451.7656416093609}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.564453125, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.564453125,"f1":0.7061559967809973,"seconds":4.231929779052734e-6,"exhaustive_search_seconds":1.2908130884170532e-6,"evaluations":7.0703125,"distances_sum":968.7997312882612}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.564453125,"state":{"ssize":4,"bsize":3},"perf":{"precision":1.0,"recall":0.564453125,"f1":0.7061559967809973,"seconds":4.231929779052734e-6,"exhaustive_search_seconds":1.2908130884170532e-6,"evaluations":7.0703125,"distances_sum":968.7997312882612}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.755859375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.755859375,"f1":0.8513276653901662,"seconds":5.125999450683594e-6,"exhaustive_search_seconds":1.2908130884170532e-6,"evaluations":8.1171875,"distances_sum":1448.93259175022}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.837890625, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.837890625,"f1":0.9054117757242766,"seconds":5.5301934480667114e-6,"exhaustive_search_seconds":1.2908130884170532e-6,"evaluations":8.6953125,"distances_sum":1620.608459188276}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.837890625,"state":{"ssize":3,"bsize":6},"perf":{"precision":1.0,"recall":0.837890625,"f1":0.9054117757242766,"seconds":5.5301934480667114e-6,"exhaustive_search_seconds":1.2908130884170532e-6,"evaluations":8.6953125,"distances_sum":1620.608459188276}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9643257783882789,"seconds":5.729496479034424e-6,"exhaustive_search_seconds":1.2908130884170532e-6,"evaluations":8.90625,"distances_sum":1930.6085944683493}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8466796875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8466796875,"f1":0.9119619963369973,"seconds":5.3085386753082275e-6,"exhaustive_search_seconds":1.2908130884170532e-6,"evaluations":8.71875,"distances_sum":1648.6763062115194}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9659798534798539,"seconds":5.3979456424713135e-6,"exhaustive_search_seconds":1.2908130884170532e-6,"evaluations":8.8828125,"distances_sum":1935.9755199550473}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9591174450549457,"seconds":5.45009970664978e-6,"exhaustive_search_seconds":1.2908130884170532e-6,"evaluations":8.8515625,"distances_sum":1902.2315540314573}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9659798534798539,"seconds":5.3979456424713135e-6,"exhaustive_search_seconds":1.2908130884170532e-6,"evaluations":8.8828125,"distances_sum":1935.9755199550473}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.939453125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9659798534798539,"seconds":5.3979456424713135e-6,"exhaustive_search_seconds":1.2908130884170532e-6,"evaluations":8.8828125,"distances_sum":1935.9755199550473}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4306640625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4306640625,"f1":null,"seconds":3.688037395477295e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":5.890625,"distances_sum":785.0072534991745}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.296875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.296875,"f1":null,"seconds":3.5390257835388184e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":6.171875,"distances_sum":585.8348127110362}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.732421875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.732421875,"f1":0.8357788045288054,"seconds":5.017966032028198e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":7.8984375,"distances_sum":1349.6322732574038}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.732421875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.732421875,"f1":0.8357788045288054,"seconds":5.017966032028198e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":7.8984375,"distances_sum":1349.6322732574038}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9318910256410264,"seconds":5.550682544708252e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.703125,"distances_sum":1764.6702926613575}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.833984375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.833984375,"f1":0.9024329836829845,"seconds":5.519017577171326e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.3515625,"distances_sum":1624.388450699063}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9442255661005665,"seconds":5.384907126426697e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.703125,"distances_sum":1858.8157704930884}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9557692307692313,"seconds":5.677342414855957e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.8046875,"distances_sum":1885.1654899712903}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7490234375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7490234375,"f1":0.8487080627705638,"seconds":4.9211084842681885e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":7.875,"distances_sum":1382.3215997953182}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.919921875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.9557692307692313,"seconds":5.677342414855957e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.8046875,"distances_sum":1885.1654899712903}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9619140625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9619140625,"f1":0.9789262820512823,"seconds":5.578622221946716e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.9765625,"distances_sum":2010.7917681116028}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.96875, conf: {"ssize":3,"bsize":12}, perf: {"precision":1.0,"recall":0.96875,"f1":0.9830357142857146,"seconds":6.113201379776001e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.9765625,"distances_sum":2029.082902232023}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9766197344322347,"seconds":5.48921525478363e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.9296875,"distances_sum":2001.1190629756027}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9594379578754582,"seconds":7.666647434234619e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.8515625,"distances_sum":1913.3666724465334}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9667239010989013,"seconds":5.796551704406738e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.9296875,"distances_sum":1929.4253894442022}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.96875,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.96875,"f1":0.9830357142857146,"seconds":6.113201379776001e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.9765625,"distances_sum":2029.082902232023}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.96875,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.96875,"f1":0.9830357142857146,"seconds":6.113201379776001e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.9765625,"distances_sum":2029.082902232023}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4169921875, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.4169921875,"f1":null,"seconds":3.5706907510757446e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":5.7421875,"distances_sum":741.9940966898208}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4169921875,"state":{"ssize":5,"bsize":2},"perf":{"precision":null,"recall":0.4169921875,"f1":null,"seconds":3.5706907510757446e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":5.7421875,"distances_sum":741.9940966898208}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5654296875, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.5654296875,"f1":0.7039441461316466,"seconds":4.177913069725037e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":6.8828125,"distances_sum":1028.9148364703262}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.515625, conf: {"ssize":5,"bsize":3}, perf: {"precision":null,"recall":0.515625,"f1":null,"seconds":3.829598426818848e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":6.65625,"distances_sum":901.9851965250195}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.669921875, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.669921875,"f1":0.7910703879453889,"seconds":4.556030035018921e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":7.6484375,"distances_sum":1229.7999867548924}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.56640625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.56640625,"f1":0.7084661865911872,"seconds":4.060566425323486e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":7.0546875,"distances_sum":1026.583992665693}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.533203125, conf: {"ssize":9,"bsize":3}, perf: {"precision":1.0,"recall":0.533203125,"f1":0.6759993478743485,"seconds":3.948807716369629e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":6.7421875,"distances_sum":943.427926302322}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.666015625, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.666015625,"f1":0.786885857198358,"seconds":4.423782229423523e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":7.578125,"distances_sum":1216.0797525625683}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.669921875,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.669921875,"f1":0.7910703879453889,"seconds":4.556030035018921e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":7.6484375,"distances_sum":1229.7999867548924}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9450606684981688,"seconds":5.435198545455933e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.78125,"distances_sum":1825.7978307502128}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8623046875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8623046875,"f1":0.9185959873459877,"seconds":5.194917321205139e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.65625,"distances_sum":1731.8557798468396}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.673828125, conf: {"ssize":7,"bsize":4}, perf: {"precision":1.0,"recall":0.673828125,"f1":0.7929997086247095,"seconds":4.6584755182266235e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":7.65625,"distances_sum":1259.0018871865723}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7529296875, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7529296875,"f1":0.8505778943278953,"seconds":4.230067133903503e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.03125,"distances_sum":1386.3289992986552}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7578125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7578125,"f1":0.8533346861471871,"seconds":4.777684807777405e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.0390625,"distances_sum":1449.8001532094147}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.751953125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.751953125,"f1":0.8483521686646694,"seconds":5.111098289489746e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.0390625,"distances_sum":1423.6986553376955}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.904296875,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.904296875,"f1":0.9450606684981688,"seconds":5.435198545455933e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.78125,"distances_sum":1825.7978307502128}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.904296875,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.904296875,"f1":0.9450606684981688,"seconds":5.435198545455933e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.78125,"distances_sum":1825.7978307502128}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.720703125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.720703125,"f1":0.828607330169831,"seconds":4.895031452178955e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":7.6953125,"distances_sum":1447.2710388959774}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.279296875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.279296875,"f1":null,"seconds":3.3043324947357178e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":6.0234375,"distances_sum":546.5979334493087}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.720703125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.720703125,"f1":0.828607330169831,"seconds":4.895031452178955e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":7.6953125,"distances_sum":1447.2710388959774}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.720703125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.720703125,"f1":0.828607330169831,"seconds":4.895031452178955e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":7.6953125,"distances_sum":1447.2710388959774}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.720703125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.720703125,"f1":0.828607330169831,"seconds":4.895031452178955e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":7.6953125,"distances_sum":1447.2710388959774}}, n: 9
mean(cfft.distances) = 0.32662644878307456
mean(cdnet.distances) = 0.38447786191995104
mean(crand.distances) = 0.34271643791460754
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8977777777777778
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.9111111111111111
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8866666666666667
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8688888888888888
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.8955555555555555
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.8911111111111111
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9444444444444445
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.9
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8866666666666667
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.9177777777777778
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.888888888888889
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8733333333333334
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9488888888888889
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9177777777777778
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9244444444444445
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9244444444444445
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.851111111111111
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.9199999999999999
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.9044444444444445
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.86
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9133333333333334
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.928888888888889
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8933333333333332
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.8955555555555555
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9022222222222224
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.9088888888888889
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.851111111111111
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9066666666666666
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8911111111111111
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.8466666666666667
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9066666666666667
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 1, 13]]
** centroid: 1, normalized-entropy: 0.3712323266408756, [(2, 1), (3, 13)]
*** center 2: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 16, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 8, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 4, 2]]
** centroid: 9, normalized-entropy: 0.9182958340544894, [(2, 4), (3, 2)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 2, 12]]
** centroid: 11, normalized-entropy: 0.5916727785823274, [(2, 2), (3, 12)]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 2, 1, 1, 2, 2, 3, 3, 2, 3, 3]
acc = 0.9666666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 1, 13]]
** centroid: 1, normalized-entropy: 0.3712323266408756, [(2, 1), (3, 13)]
*** center 2: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 16, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 8, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 4, 2]]
** centroid: 9, normalized-entropy: 0.9182958340544894, [(2, 4), (3, 2)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 2, 12]]
** centroid: 11, normalized-entropy: 0.5916727785823274, [(2, 2), (3, 12)]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 2, 1, 1, 2, 2, 3, 3, 2, 3, 3]
acc = 0.9666666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 1, 13]]
** centroid: 1, normalized-entropy: 0.3712323266408756, [(2, 1), (3, 13)]
*** center 2: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 16, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 8, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 4, 2]]
** centroid: 9, normalized-entropy: 0.9182958340544894, [(2, 4), (3, 2)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 2, 12]]
** centroid: 11, normalized-entropy: 0.5916727785823274, [(2, 2), (3, 12)]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 2, 1, 1, 2, 2, 3, 3, 2, 3, 3]
acc = 0.9666666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 1, 13]]
** centroid: 1, normalized-entropy: 0.3712323266408756, [(2, 1), (3, 13)]
*** center 2: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 16, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 8, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 4, 2]]
** centroid: 9, normalized-entropy: 0.9182958340544894, [(2, 4), (3, 2)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 2, 12]]
** centroid: 11, normalized-entropy: 0.5916727785823274, [(2, 2), (3, 12)]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 2, 1, 1, 2, 2, 3, 3, 2, 3, 3]
acc = 0.9666666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 1, 13]]
** centroid: 1, normalized-entropy: 0.3712323266408756, [(2, 1), (3, 13)]
*** center 2: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 16, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 8, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 4, 2]]
** centroid: 9, normalized-entropy: 0.9182958340544894, [(2, 4), (3, 2)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 2, 12]]
** centroid: 11, normalized-entropy: 0.5916727785823274, [(2, 2), (3, 12)]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 2, 1, 1, 2, 2, 3, 3, 2, 3, 3]
acc = 0.9666666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 1, 13]]
** centroid: 1, normalized-entropy: 0.3712323266408756, [(2, 1), (3, 13)]
*** center 2: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 16, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 8, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 4, 2]]
** centroid: 9, normalized-entropy: 0.9182958340544894, [(2, 4), (3, 2)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 2, 12]]
** centroid: 11, normalized-entropy: 0.5916727785823274, [(2, 2), (3, 12)]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 2, 1, 1, 2, 2, 3, 3, 2, 3, 3]
acc = 0.96
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 1, 13]]
** centroid: 1, normalized-entropy: 0.3712323266408756, [(2, 1), (3, 13)]
*** center 2: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 16, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 8, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 4, 2]]
** centroid: 9, normalized-entropy: 0.9182958340544894, [(2, 4), (3, 2)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 2, 12]]
** centroid: 11, normalized-entropy: 0.5916727785823274, [(2, 2), (3, 12)]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 2, 1, 1, 2, 2, 3, 3, 2, 3, 3]
acc = 0.9533333333333334
*** finished computation of 12 references, err: [Inf, 0.6071500116586686] ***
*** center 1: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 2]]
** centroid: 3, normalized-entropy: 0.9709505944546688, [(2, 3), (3, 2)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 15, 2]]
** centroid: 4, normalized-entropy: 0.5225593745369407, [(2, 15), (3, 2)]
*** center 5: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 14]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 4, 17]]
** centroid: 9, normalized-entropy: 0.7024665512903904, [(2, 4), (3, 17)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [35, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
finished with 15 centroids; started with 12
acc = 0.9466666666666667
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.49834452108577926] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.49834452108577926, 0.2636808623831059] ***
*** starting iteration: 2; err: [Inf, 0.49834452108577926, 0.2636808623831059] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.49834452108577926, 0.2636808623831059, 0.2394305434827511] ***
*** starting iteration: 3; err: [Inf, 0.49834452108577926, 0.2636808623831059, 0.2394305434827511] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.49834452108577926, 0.2636808623831059, 0.2394305434827511, 0.23465779271080262] ***
*** finished computation of 3 references, err: [Inf, 0.49834452108577926, 0.2636808623831059, 0.2394305434827511, 0.23465779271080262] ***
*** center 1: selecting labels [1] (freq >= 2) [from [170, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [104, 143, 15]]
** centroid: 2, normalized-entropy: 0.783716221943564, [(1, 104), (2, 143), (3, 15)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [117, 111, 6]]
** centroid: 3, normalized-entropy: 0.7229881639332509, [(1, 117), (2, 111), (3, 6)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2075812288555778] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2075812288555778, 0.1545913504644971] ***
*** finished computation of 7 references, err: [Inf, 0.2075812288555778, 0.1545913504644971] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [101, 16, 0]]
** centroid: 1, normalized-entropy: 0.5756693370369834, [(1, 101), (2, 16)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 34, 21]]
** centroid: 2, normalized-entropy: 0.9593160320543779, [(2, 34), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [93, 3, 0]]
** centroid: 3, normalized-entropy: 0.2006223243127146, [(1, 93), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [101, 3, 0]]
** centroid: 4, normalized-entropy: 0.18857195602479668, [(1, 101), (2, 3)]
*** center 5: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [5, 106, 0]]
** centroid: 6, normalized-entropy: 0.2649635360966293, [(1, 5), (2, 106)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [6, 92, 0]]
** centroid: 7, normalized-entropy: 0.3322866302216152, [(1, 6), (2, 92)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1810225048081494] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1810225048081494, 0.1506024751891808] ***
*** finished computation of 7 references, err: [Inf, 0.1810225048081494, 0.1506024751891808] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [47, 84, 0]]
** centroid: 1, normalized-entropy: 0.9416646844209248, [(1, 47), (2, 84)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [71, 8, 0]]
** centroid: 2, normalized-entropy: 0.47299536229314826, [(1, 71), (2, 8)]
*** center 3: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 57, 24]]
** centroid: 4, normalized-entropy: 0.876716288999464, [(2, 57), (3, 24)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [106, 4, 0]]
** centroid: 5, normalized-entropy: 0.22536363912739493, [(1, 106), (2, 4)]
*** center 6: selecting labels [1] (freq >= 2) [from [110, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 90, 0]]
** centroid: 7, normalized-entropy: 0.1510969705171136, [(1, 2), (2, 90)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18519653303679945] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18519653303679945, 0.14934544266387262] ***
*** finished computation of 7 references, err: [Inf, 0.18519653303679945, 0.14934544266387262] ***
*** center 1: selecting labels [1] (freq >= 2) [from [134, 1, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [60, 18, 0]]
** centroid: 2, normalized-entropy: 0.7793498372920851, [(1, 60), (2, 18)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 54, 27]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(2, 54), (3, 27)]
*** center 4: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [25, 94, 0]]
** centroid: 5, normalized-entropy: 0.7416433363998257, [(1, 25), (2, 94)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [5, 76, 0]]
** centroid: 6, normalized-entropy: 0.33426813256179383, [(1, 5), (2, 76)]
*** center 7: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1957800814304389] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1957800814304389, 0.1507601000762939] ***
*** starting iteration: 2; err: [Inf, 0.1957800814304389, 0.1507601000762939] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1957800814304389, 0.1507601000762939, 0.14688644122175715] ***
*** starting iteration: 3; err: [Inf, 0.1957800814304389, 0.1507601000762939, 0.14688644122175715] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1957800814304389, 0.1507601000762939, 0.14688644122175715, 0.14600682934444095] ***
*** finished computation of 7 references, err: [Inf, 0.1957800814304389, 0.1507601000762939, 0.14688644122175715, 0.14600682934444095] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [16, 92, 0]]
** centroid: 1, normalized-entropy: 0.6051865766334207, [(1, 16), (2, 92)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [60, 7, 0]]
** centroid: 2, normalized-entropy: 0.4830306801456181, [(1, 60), (2, 7)]
*** center 3: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [108, 3, 0]]
** centroid: 4, normalized-entropy: 0.1792560669283214, [(1, 108), (2, 3)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 56, 21]]
** centroid: 5, normalized-entropy: 0.8453509366224364, [(2, 56), (3, 21)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [110, 2, 0]]
** centroid: 6, normalized-entropy: 0.12923377484588472, [(1, 110), (2, 2)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [3, 94, 0]]
** centroid: 7, normalized-entropy: 0.19902377455969078, [(1, 3), (2, 94)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1998858066175183] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1998858066175183, 0.14786067784860216] ***
*** starting iteration: 2; err: [Inf, 0.1998858066175183, 0.14786067784860216] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1998858066175183, 0.14786067784860216, 0.1446124854989104] ***
*** starting iteration: 3; err: [Inf, 0.1998858066175183, 0.14786067784860216, 0.1446124854989104] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1998858066175183, 0.14786067784860216, 0.1446124854989104, 0.14423727846636006] ***
*** finished computation of 7 references, err: [Inf, 0.1998858066175183, 0.14786067784860216, 0.1446124854989104, 0.14423727846636006] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 63, 24]]
** centroid: 1, normalized-entropy: 0.8497511372532974, [(2, 63), (3, 24)]
*** center 2: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [108, 8, 0]]
** centroid: 3, normalized-entropy: 0.36205125173399805, [(1, 108), (2, 8)]
*** center 4: selecting labels [1] (freq >= 1) [from [121, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [70, 19, 0]]
** centroid: 5, normalized-entropy: 0.748088105780153, [(1, 70), (2, 19)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 77, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [6, 76, 0]]
** centroid: 7, normalized-entropy: 0.3776463213737003, [(1, 6), (2, 76)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19696211148014311] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19696211148014311, 0.15221667851180373] ***
*** starting iteration: 2; err: [Inf, 0.19696211148014311, 0.15221667851180373] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19696211148014311, 0.15221667851180373, 0.14589514474927642] ***
*** starting iteration: 3; err: [Inf, 0.19696211148014311, 0.15221667851180373, 0.14589514474927642] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19696211148014311, 0.15221667851180373, 0.14589514474927642, 0.1444373269226106] ***
*** starting iteration: 4; err: [Inf, 0.19696211148014311, 0.15221667851180373, 0.14589514474927642, 0.1444373269226106] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19696211148014311, 0.15221667851180373, 0.14589514474927642, 0.1444373269226106, 0.14317513977329635] ***
*** starting iteration: 5; err: [Inf, 0.19696211148014311, 0.15221667851180373, 0.14589514474927642, 0.1444373269226106, 0.14317513977329635] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19696211148014311, 0.15221667851180373, 0.14589514474927642, 0.1444373269226106, 0.14317513977329635, 0.1427554724978163] ***
*** finished computation of 7 references, err: [Inf, 0.19696211148014311, 0.15221667851180373, 0.14589514474927642, 0.1444373269226106, 0.14317513977329635, 0.1427554724978163] ***
*** center 1: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [121, 9, 0]]
** centroid: 2, normalized-entropy: 0.3630464536191718, [(1, 121), (2, 9)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 59, 27]]
** centroid: 3, normalized-entropy: 0.8976844934141643, [(2, 59), (3, 27)]
*** center 4: selecting labels [1] (freq >= 1) [from [99, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [7, 83, 0]]
** centroid: 5, normalized-entropy: 0.39430023792747493, [(1, 7), (2, 83)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [8, 82, 0]]
** centroid: 6, normalized-entropy: 0.43275015878875417, [(1, 8), (2, 82)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [75, 10, 0]]
** centroid: 7, normalized-entropy: 0.5225593745369407, [(1, 75), (2, 10)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3317179463477945] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3317179463477945, 0.24238863718268033] ***
*** starting iteration: 2; err: [Inf, 0.3317179463477945, 0.24238863718268033] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3317179463477945, 0.24238863718268033, 0.23549687300666092] ***
*** starting iteration: 3; err: [Inf, 0.3317179463477945, 0.24238863718268033, 0.23549687300666092] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3317179463477945, 0.24238863718268033, 0.23549687300666092, 0.23378065107641993] ***
*** finished computation of 3 references, err: [Inf, 0.3317179463477945, 0.24238863718268033, 0.23549687300666092, 0.23378065107641993] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [65, 183, 21]]
** centroid: 1, normalized-entropy: 0.7321546488678424, [(1, 65), (2, 183), (3, 21)]
*** center 2: selecting labels [1] (freq >= 1) [from [199, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [127, 71, 0]]
** centroid: 3, normalized-entropy: 0.9415030811659858, [(1, 127), (2, 71)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3127917863450933] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3127917863450933, 0.24345374463972214] ***
*** starting iteration: 2; err: [Inf, 0.3127917863450933, 0.24345374463972214] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3127917863450933, 0.24345374463972214, 0.23881619547757654] ***
*** starting iteration: 3; err: [Inf, 0.3127917863450933, 0.24345374463972214, 0.23881619547757654] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3127917863450933, 0.24345374463972214, 0.23881619547757654, 0.23819747307328046] ***
*** finished computation of 3 references, err: [Inf, 0.3127917863450933, 0.24345374463972214, 0.23881619547757654, 0.23819747307328046] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [118, 155, 24]]
** centroid: 1, normalized-entropy: 0.827776684625104, [(1, 118), (2, 155), (3, 24)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [133, 88, 0]]
** centroid: 2, normalized-entropy: 0.9698819876188506, [(1, 133), (2, 88)]
*** center 3: selecting labels [1] (freq >= 1) [from [149, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3081173778300745] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3081173778300745, 0.24630229724599034] ***
*** starting iteration: 2; err: [Inf, 0.3081173778300745, 0.24630229724599034] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3081173778300745, 0.24630229724599034, 0.23911191560076675] ***
*** starting iteration: 3; err: [Inf, 0.3081173778300745, 0.24630229724599034, 0.23911191560076675] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3081173778300745, 0.24630229724599034, 0.23911191560076675, 0.23730114336939587] ***
*** finished computation of 3 references, err: [Inf, 0.3081173778300745, 0.24630229724599034, 0.23911191560076675, 0.23730114336939587] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [98, 140, 27]]
** centroid: 1, normalized-entropy: 0.8535091900121756, [(1, 98), (2, 140), (3, 27)]
*** center 2: selecting labels [1] (freq >= 1) [from [184, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [115, 103, 0]]
** centroid: 3, normalized-entropy: 0.9978131772609874, [(1, 115), (2, 103)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.30294815299409755] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30294815299409755, 0.24282904711274103] ***
*** starting iteration: 2; err: [Inf, 0.30294815299409755, 0.24282904711274103] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30294815299409755, 0.24282904711274103, 0.233612602598954] ***
*** starting iteration: 3; err: [Inf, 0.30294815299409755, 0.24282904711274103, 0.233612602598954] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30294815299409755, 0.24282904711274103, 0.233612602598954, 0.23156501670372204] ***
*** finished computation of 3 references, err: [Inf, 0.30294815299409755, 0.24282904711274103, 0.233612602598954, 0.23156501670372204] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 171, 24]]
** centroid: 1, normalized-entropy: 0.5381411852224502, [(2, 171), (3, 24)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [169, 51, 0]]
** centroid: 2, normalized-entropy: 0.7811673627417713, [(1, 169), (2, 51)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [231, 21, 0]]
** centroid: 3, normalized-entropy: 0.4138168503036336, [(1, 231), (2, 21)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4194076061067262] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4194076061067262, 0.2848725844219305] ***
*** starting iteration: 2; err: [Inf, 0.4194076061067262, 0.2848725844219305] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4194076061067262, 0.2848725844219305, 0.25852291644278586] ***
*** starting iteration: 3; err: [Inf, 0.4194076061067262, 0.2848725844219305, 0.25852291644278586] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4194076061067262, 0.2848725844219305, 0.25852291644278586, 0.23397336918665193] ***
*** finished computation of 3 references, err: [Inf, 0.4194076061067262, 0.2848725844219305, 0.25852291644278586, 0.23397336918665193] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [7, 187, 27]]
** centroid: 1, normalized-entropy: 0.4619883331241206, [(1, 7), (2, 187), (3, 27)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [243, 3, 0]]
** centroid: 2, normalized-entropy: 0.09501724567107643, [(1, 243), (2, 3)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [147, 53, 0]]
** centroid: 3, normalized-entropy: 0.834198095860749, [(1, 147), (2, 53)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.28669464388895816] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28669464388895816, 0.20451359591074847] ***
*** starting iteration: 2; err: [Inf, 0.28669464388895816, 0.20451359591074847] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28669464388895816, 0.20451359591074847, 0.1955255778344186] ***
*** starting iteration: 3; err: [Inf, 0.28669464388895816, 0.20451359591074847, 0.1955255778344186] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28669464388895816, 0.20451359591074847, 0.1955255778344186, 0.19207639779123636] ***
*** finished computation of 7 references, err: [Inf, 0.28669464388895816, 0.20451359591074847, 0.1955255778344186, 0.19207639779123636] ***
*** center 1: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [20, 70, 0]]
** centroid: 2, normalized-entropy: 0.7642045065086204, [(1, 20), (2, 70)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [49, 33, 0]]
** centroid: 3, normalized-entropy: 0.9723594643683989, [(1, 49), (2, 33)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [103, 10, 0]]
** centroid: 4, normalized-entropy: 0.43142820800151405, [(1, 103), (2, 10)]
*** center 5: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [58, 45, 0]]
** centroid: 6, normalized-entropy: 0.9884783227925916, [(1, 58), (2, 45)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 96, 21]]
** centroid: 7, normalized-entropy: 0.6789538995185759, [(2, 96), (3, 21)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2877996161976631] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2877996161976631, 0.21873126558909217] ***
*** starting iteration: 2; err: [Inf, 0.2877996161976631, 0.21873126558909217] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2877996161976631, 0.21873126558909217, 0.20378261498829023] ***
*** starting iteration: 3; err: [Inf, 0.2877996161976631, 0.21873126558909217, 0.20378261498829023] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2877996161976631, 0.21873126558909217, 0.20378261498829023, 0.1969202686648542] ***
*** finished computation of 7 references, err: [Inf, 0.2877996161976631, 0.21873126558909217, 0.20378261498829023, 0.1969202686648542] ***
*** center 1: selecting labels [1] (freq >= 2) [from [104, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 56, 8]]
** centroid: 2, normalized-entropy: 0.5435644431995963, [(2, 56), (3, 8)]
*** center 3: selecting labels [1] (freq >= 2) [from [99, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 36, 16]]
** centroid: 4, normalized-entropy: 0.8904916402194913, [(2, 36), (3, 16)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [96, 41, 0]]
** centroid: 5, normalized-entropy: 0.8803968110001441, [(1, 96), (2, 41)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [98, 34, 0]]
** centroid: 6, normalized-entropy: 0.8230660790114689, [(1, 98), (2, 34)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 76, 0]]
** centroid: 7, normalized-entropy: 0.23292785546981223, [(1, 3), (2, 76)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2372372432624449] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2372372432624449, 0.19772451531248114] ***
*** starting iteration: 2; err: [Inf, 0.2372372432624449, 0.19772451531248114] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2372372432624449, 0.19772451531248114, 0.19348539401270237] ***
*** starting iteration: 3; err: [Inf, 0.2372372432624449, 0.19772451531248114, 0.19348539401270237] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2372372432624449, 0.19772451531248114, 0.19348539401270237, 0.19039969268845564] ***
*** finished computation of 7 references, err: [Inf, 0.2372372432624449, 0.19772451531248114, 0.19348539401270237, 0.19039969268845564] ***
*** center 1: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [15, 86, 0]]
** centroid: 2, normalized-entropy: 0.6061112071230008, [(1, 15), (2, 86)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 101, 27]]
** centroid: 3, normalized-entropy: 0.7432709194035553, [(2, 101), (3, 27)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [92, 9, 0]]
** centroid: 4, normalized-entropy: 0.43348846324460666, [(1, 92), (2, 9)]
*** center 5: selecting labels [1] (freq >= 2) [from [70, 1, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [81, 2, 0]]
** centroid: 6, normalized-entropy: 0.1638605128691586, [(1, 81), (2, 2)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [54, 44, 0]]
** centroid: 7, normalized-entropy: 0.9924760039430819, [(1, 54), (2, 44)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4484652541144318] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4484652541144318, 0.3342936358808934] ***
*** starting iteration: 2; err: [Inf, 0.4484652541144318, 0.3342936358808934] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4484652541144318, 0.3342936358808934, 0.3043794352673106] ***
*** starting iteration: 3; err: [Inf, 0.4484652541144318, 0.3342936358808934, 0.3043794352673106] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4484652541144318, 0.3342936358808934, 0.3043794352673106, 0.29813915985012734] ***
*** starting iteration: 4; err: [Inf, 0.4484652541144318, 0.3342936358808934, 0.3043794352673106, 0.29813915985012734] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4484652541144318, 0.3342936358808934, 0.3043794352673106, 0.29813915985012734, 0.29656487743317095] ***
*** starting iteration: 5; err: [Inf, 0.4484652541144318, 0.3342936358808934, 0.3043794352673106, 0.29813915985012734, 0.29656487743317095] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4484652541144318, 0.3342936358808934, 0.3043794352673106, 0.29813915985012734, 0.29656487743317095, 0.29612529494480844] ***
*** finished computation of 3 references, err: [Inf, 0.4484652541144318, 0.3342936358808934, 0.3043794352673106, 0.29813915985012734, 0.29656487743317095, 0.29612529494480844] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [102, 141, 21]]
** centroid: 1, normalized-entropy: 0.8226398050865289, [(1, 102), (2, 141), (3, 21)]
*** center 2: selecting labels [1] (freq >= 1) [from [178, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [111, 113, 0]]
** centroid: 3, normalized-entropy: 0.9999424938532381, [(1, 111), (2, 113)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.43596996525037235] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43596996525037235, 0.31833710433633206] ***
*** starting iteration: 2; err: [Inf, 0.43596996525037235, 0.31833710433633206] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43596996525037235, 0.31833710433633206, 0.30377933879786434] ***
*** starting iteration: 3; err: [Inf, 0.43596996525037235, 0.31833710433633206, 0.30377933879786434] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43596996525037235, 0.31833710433633206, 0.30377933879786434, 0.2975501418337114] ***
*** starting iteration: 4; err: [Inf, 0.43596996525037235, 0.31833710433633206, 0.30377933879786434, 0.2975501418337114] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43596996525037235, 0.31833710433633206, 0.30377933879786434, 0.2975501418337114, 0.2950758618718736] ***
*** starting iteration: 5; err: [Inf, 0.43596996525037235, 0.31833710433633206, 0.30377933879786434, 0.2975501418337114, 0.2950758618718736] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43596996525037235, 0.31833710433633206, 0.30377933879786434, 0.2975501418337114, 0.2950758618718736, 0.29498451508335893] ***
*** finished computation of 3 references, err: [Inf, 0.43596996525037235, 0.31833710433633206, 0.30377933879786434, 0.2975501418337114, 0.2950758618718736, 0.29498451508335893] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [133, 97, 0]]
** centroid: 1, normalized-entropy: 0.9822547917538987, [(1, 133), (2, 97)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [86, 146, 24]]
** centroid: 2, normalized-entropy: 0.8270792717127012, [(1, 86), (2, 146), (3, 24)]
*** center 3: selecting labels [1] (freq >= 1) [from [181, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.387065965764649] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.387065965764649, 0.3042926439496017] ***
*** starting iteration: 2; err: [Inf, 0.387065965764649, 0.3042926439496017] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.387065965764649, 0.3042926439496017, 0.2984125539185717] ***
*** starting iteration: 3; err: [Inf, 0.387065965764649, 0.3042926439496017, 0.2984125539185717] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.387065965764649, 0.3042926439496017, 0.2984125539185717, 0.29756707270005567] ***
*** finished computation of 3 references, err: [Inf, 0.387065965764649, 0.3042926439496017, 0.2984125539185717, 0.29756707270005567] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [109, 105, 0]]
** centroid: 1, normalized-entropy: 0.9997479641785869, [(1, 109), (2, 105)]
*** center 2: selecting labels [1] (freq >= 1) [from [193, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [95, 138, 27]]
** centroid: 3, normalized-entropy: 0.8549608024986066, [(1, 95), (2, 138), (3, 27)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.23621437144283955] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23621437144283955, 0.1977779739606264] ***
*** starting iteration: 2; err: [Inf, 0.23621437144283955, 0.1977779739606264] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23621437144283955, 0.1977779739606264, 0.1935219621962613] ***
*** starting iteration: 3; err: [Inf, 0.23621437144283955, 0.1977779739606264, 0.1935219621962613] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23621437144283955, 0.1977779739606264, 0.1935219621962613, 0.1916008958531482] ***
*** starting iteration: 4; err: [Inf, 0.23621437144283955, 0.1977779739606264, 0.1935219621962613, 0.1916008958531482] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23621437144283955, 0.1977779739606264, 0.1935219621962613, 0.1916008958531482, 0.18997648474410758] ***
*** starting iteration: 5; err: [Inf, 0.23621437144283955, 0.1977779739606264, 0.1935219621962613, 0.1916008958531482, 0.18997648474410758] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23621437144283955, 0.1977779739606264, 0.1935219621962613, 0.1916008958531482, 0.18997648474410758, 0.18973544252023952] ***
*** finished computation of 7 references, err: [Inf, 0.23621437144283955, 0.1977779739606264, 0.1935219621962613, 0.1916008958531482, 0.18997648474410758, 0.18973544252023952] ***
*** center 1: selecting labels [2] (freq >= 2) [from [1, 112, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [82, 2, 0]]
** centroid: 2, normalized-entropy: 0.1623261801753929, [(1, 82), (2, 2)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 57, 21]]
** centroid: 3, normalized-entropy: 0.8403586716091169, [(2, 57), (3, 21)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [55, 57, 0]]
** centroid: 4, normalized-entropy: 0.9997699662429026, [(1, 55), (2, 57)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [104, 2, 0]]
** centroid: 5, normalized-entropy: 0.13503620280212753, [(1, 104), (2, 2)]
*** center 6: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [75, 24, 0]]
** centroid: 7, normalized-entropy: 0.7990485210442682, [(1, 75), (2, 24)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24784827611382598] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24784827611382598, 0.20383375223217787] ***
*** starting iteration: 2; err: [Inf, 0.24784827611382598, 0.20383375223217787] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24784827611382598, 0.20383375223217787, 0.1998741258685568] ***
*** starting iteration: 3; err: [Inf, 0.24784827611382598, 0.20383375223217787, 0.1998741258685568] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24784827611382598, 0.20383375223217787, 0.1998741258685568, 0.19766884658770492] ***
*** starting iteration: 4; err: [Inf, 0.24784827611382598, 0.20383375223217787, 0.1998741258685568, 0.19766884658770492] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24784827611382598, 0.20383375223217787, 0.1998741258685568, 0.19766884658770492, 0.1956729679591842] ***
*** starting iteration: 5; err: [Inf, 0.24784827611382598, 0.20383375223217787, 0.1998741258685568, 0.19766884658770492, 0.1956729679591842] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24784827611382598, 0.20383375223217787, 0.1998741258685568, 0.19766884658770492, 0.1956729679591842, 0.19300472624655785] ***
*** starting iteration: 6; err: [Inf, 0.24784827611382598, 0.20383375223217787, 0.1998741258685568, 0.19766884658770492, 0.1956729679591842, 0.19300472624655785] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24784827611382598, 0.20383375223217787, 0.1998741258685568, 0.19766884658770492, 0.1956729679591842, 0.19300472624655785, 0.19067751213969633] ***
*** starting iteration: 7; err: [Inf, 0.24784827611382598, 0.20383375223217787, 0.1998741258685568, 0.19766884658770492, 0.1956729679591842, 0.19300472624655785, 0.19067751213969633] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24784827611382598, 0.20383375223217787, 0.1998741258685568, 0.19766884658770492, 0.1956729679591842, 0.19300472624655785, 0.19067751213969633, 0.1890963189264779] ***
*** starting iteration: 8; err: [Inf, 0.24784827611382598, 0.20383375223217787, 0.1998741258685568, 0.19766884658770492, 0.1956729679591842, 0.19300472624655785, 0.19067751213969633, 0.1890963189264779] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24784827611382598, 0.20383375223217787, 0.1998741258685568, 0.19766884658770492, 0.1956729679591842, 0.19300472624655785, 0.19067751213969633, 0.1890963189264779, 0.18854245595421748] ***
*** finished computation of 7 references, err: [Inf, 0.24784827611382598, 0.20383375223217787, 0.1998741258685568, 0.19766884658770492, 0.1956729679591842, 0.19300472624655785, 0.19067751213969633, 0.1890963189264779, 0.18854245595421748] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 92, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 54, 24]]
** centroid: 3, normalized-entropy: 0.8904916402194913, [(2, 54), (3, 24)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [11, 81, 0]]
** centroid: 4, normalized-entropy: 0.5281098034628294, [(1, 11), (2, 81)]
*** center 5: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [115, 16, 0]]
** centroid: 7, normalized-entropy: 0.5354737201740676, [(1, 115), (2, 16)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3254868518407533] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3254868518407533, 0.2325082882035194] ***
*** starting iteration: 2; err: [Inf, 0.3254868518407533, 0.2325082882035194] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3254868518407533, 0.2325082882035194, 0.21035891649560415] ***
*** starting iteration: 3; err: [Inf, 0.3254868518407533, 0.2325082882035194, 0.21035891649560415] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3254868518407533, 0.2325082882035194, 0.21035891649560415, 0.2000043226400393] ***
*** starting iteration: 4; err: [Inf, 0.3254868518407533, 0.2325082882035194, 0.21035891649560415, 0.2000043226400393] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3254868518407533, 0.2325082882035194, 0.21035891649560415, 0.2000043226400393, 0.1953905617973224] ***
*** starting iteration: 5; err: [Inf, 0.3254868518407533, 0.2325082882035194, 0.21035891649560415, 0.2000043226400393, 0.1953905617973224] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3254868518407533, 0.2325082882035194, 0.21035891649560415, 0.2000043226400393, 0.1953905617973224, 0.19329170997755818] ***
*** starting iteration: 6; err: [Inf, 0.3254868518407533, 0.2325082882035194, 0.21035891649560415, 0.2000043226400393, 0.1953905617973224, 0.19329170997755818] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3254868518407533, 0.2325082882035194, 0.21035891649560415, 0.2000043226400393, 0.1953905617973224, 0.19329170997755818, 0.19171378782893095] ***
*** starting iteration: 7; err: [Inf, 0.3254868518407533, 0.2325082882035194, 0.21035891649560415, 0.2000043226400393, 0.1953905617973224, 0.19329170997755818, 0.19171378782893095] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3254868518407533, 0.2325082882035194, 0.21035891649560415, 0.2000043226400393, 0.1953905617973224, 0.19329170997755818, 0.19171378782893095, 0.19111989537670068] ***
*** finished computation of 7 references, err: [Inf, 0.3254868518407533, 0.2325082882035194, 0.21035891649560415, 0.2000043226400393, 0.1953905617973224, 0.19329170997755818, 0.19171378782893095, 0.19111989537670068] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [106, 50, 0]]
** centroid: 1, normalized-entropy: 0.9049382594235603, [(1, 106), (2, 50)]
*** center 2: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [11, 51, 0]]
** centroid: 3, normalized-entropy: 0.674398887071447, [(1, 11), (2, 51)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 87, 27]]
** centroid: 4, normalized-entropy: 0.7897492536625221, [(2, 87), (3, 27)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [25, 55, 0]]
** centroid: 5, normalized-entropy: 0.8960382325345574, [(1, 25), (2, 55)]
*** center 6: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3135216510169454] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3135216510169454, 0.24650481199935168] ***
*** starting iteration: 2; err: [Inf, 0.3135216510169454, 0.24650481199935168] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3135216510169454, 0.24650481199935168, 0.23688937241474428] ***
*** starting iteration: 3; err: [Inf, 0.3135216510169454, 0.24650481199935168, 0.23688937241474428] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3135216510169454, 0.24650481199935168, 0.23688937241474428, 0.23528442345070164] ***
*** finished computation of 3 references, err: [Inf, 0.3135216510169454, 0.24650481199935168, 0.23688937241474428, 0.23528442345070164] ***
*** center 1: selecting labels [1] (freq >= 1) [from [174, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [101, 155, 21]]
** centroid: 2, normalized-entropy: 0.8085678469833932, [(1, 101), (2, 155), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [116, 99, 0]]
** centroid: 3, normalized-entropy: 0.9954854039025779, [(1, 116), (2, 99)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.27294819502542533] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27294819502542533, 0.2626953317917816] ***
*** starting iteration: 2; err: [Inf, 0.27294819502542533, 0.2626953317917816] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27294819502542533, 0.2626953317917816, 0.24475095995787022] ***
*** starting iteration: 3; err: [Inf, 0.27294819502542533, 0.2626953317917816, 0.24475095995787022] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27294819502542533, 0.2626953317917816, 0.24475095995787022, 0.23785598011410933] ***
*** finished computation of 3 references, err: [Inf, 0.27294819502542533, 0.2626953317917816, 0.24475095995787022, 0.23785598011410933] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [104, 148, 23]]
** centroid: 1, normalized-entropy: 0.8271314554708026, [(1, 104), (2, 148), (3, 23)]
*** center 2: selecting labels [1] (freq >= 1) [from [179, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [117, 95, 1]]
** centroid: 3, normalized-entropy: 0.6502551441432612, [(1, 117), (2, 95), (3, 1)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.27914256685185823] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27914256685185823, 0.25577996471600756] ***
*** starting iteration: 2; err: [Inf, 0.27914256685185823, 0.25577996471600756] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27914256685185823, 0.25577996471600756, 0.23455863890853867] ***
*** starting iteration: 3; err: [Inf, 0.27914256685185823, 0.25577996471600756, 0.23455863890853867] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27914256685185823, 0.25577996471600756, 0.23455863890853867, 0.23011469778729074] ***
*** finished computation of 3 references, err: [Inf, 0.27914256685185823, 0.25577996471600756, 0.23455863890853867, 0.23011469778729074] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [242, 11, 0]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(1, 242), (2, 11)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 184, 27]]
** centroid: 2, normalized-entropy: 0.5518225893095359, [(2, 184), (3, 27)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [155, 48, 0]]
** centroid: 3, normalized-entropy: 0.789092159292948, [(1, 155), (2, 48)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4549283468676312] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4549283468676312, 0.3508031850949198] ***
*** finished computation of 3 references, err: [Inf, 0.4549283468676312, 0.3508031850949198] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [148, 200, 21]]
** centroid: 1, normalized-entropy: 0.7841824424538552, [(1, 148), (2, 200), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [124, 54, 0]]
** centroid: 2, normalized-entropy: 0.8853723770068483, [(1, 124), (2, 54)]
*** center 3: selecting labels [1] (freq >= 1) [from [119, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.48215311758130835] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.48215311758130835, 0.3409421168130891] ***
*** finished computation of 3 references, err: [Inf, 0.48215311758130835, 0.3409421168130891] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [186, 1, 0]]
** centroid: 1, normalized-entropy: 0.048052006058257844, [(1, 186), (2, 1)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [63, 42, 0]]
** centroid: 2, normalized-entropy: 0.9709505944546688, [(1, 63), (2, 42)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [151, 200, 24]]
** centroid: 3, normalized-entropy: 0.7987075878323165, [(1, 151), (2, 200), (3, 24)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.354967529197102] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.354967529197102, 0.30543604070625113] ***
*** finished computation of 3 references, err: [Inf, 0.354967529197102, 0.30543604070625113] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [196, 30, 0]]
** centroid: 1, normalized-entropy: 0.5649141512875933, [(1, 196), (2, 30)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [25, 213, 27]]
** centroid: 2, normalized-entropy: 0.5743564234288628, [(1, 25), (2, 213), (3, 27)]
*** center 3: selecting labels [1] (freq >= 1) [from [176, 0, 0]]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.33175574497434424] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33175574497434424, 0.25806679077552735] ***
*** starting iteration: 2; err: [Inf, 0.33175574497434424, 0.25806679077552735] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33175574497434424, 0.25806679077552735, 0.2377007802341458] ***
*** starting iteration: 3; err: [Inf, 0.33175574497434424, 0.25806679077552735, 0.2377007802341458] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33175574497434424, 0.25806679077552735, 0.2377007802341458, 0.23364210051313802] ***
*** starting iteration: 4; err: [Inf, 0.33175574497434424, 0.25806679077552735, 0.2377007802341458, 0.23364210051313802] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33175574497434424, 0.25806679077552735, 0.2377007802341458, 0.23364210051313802, 0.232900646765501] ***
*** finished computation of 3 references, err: [Inf, 0.33175574497434424, 0.25806679077552735, 0.2377007802341458, 0.23364210051313802, 0.232900646765501] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [211, 37, 0]]
** centroid: 1, normalized-entropy: 0.6078184743163622, [(1, 211), (2, 37)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 193, 21]]
** centroid: 2, normalized-entropy: 0.46304234120912124, [(2, 193), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [180, 24, 0]]
** centroid: 3, normalized-entropy: 0.5225593745369407, [(1, 180), (2, 24)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2825497978505144] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2825497978505144, 0.23656955633083473] ***
*** starting iteration: 2; err: [Inf, 0.2825497978505144, 0.23656955633083473] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2825497978505144, 0.23656955633083473, 0.23417359546407768] ***
*** starting iteration: 3; err: [Inf, 0.2825497978505144, 0.23656955633083473, 0.23417359546407768] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2825497978505144, 0.23656955633083473, 0.23417359546407768, 0.23295886212934752] ***
*** starting iteration: 4; err: [Inf, 0.2825497978505144, 0.23656955633083473, 0.23417359546407768, 0.23295886212934752] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2825497978505144, 0.23656955633083473, 0.23417359546407768, 0.23295886212934752, 0.23233853658239567] ***
*** finished computation of 3 references, err: [Inf, 0.2825497978505144, 0.23656955633083473, 0.23417359546407768, 0.23295886212934752, 0.23233853658239567] ***
*** center 1: selecting labels [1] (freq >= 2) [from [222, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [29, 169, 24]]
** centroid: 2, normalized-entropy: 0.649946171653883, [(1, 29), (2, 169), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [149, 74, 0]]
** centroid: 3, normalized-entropy: 0.9167938075193885, [(1, 149), (2, 74)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.284580390072376] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.284580390072376, 0.24702995727913848] ***
*** starting iteration: 2; err: [Inf, 0.284580390072376, 0.24702995727913848] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.284580390072376, 0.24702995727913848, 0.2377347168266547] ***
*** starting iteration: 3; err: [Inf, 0.284580390072376, 0.24702995727913848, 0.2377347168266547] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.284580390072376, 0.24702995727913848, 0.2377347168266547, 0.23504524088480036] ***
*** starting iteration: 4; err: [Inf, 0.284580390072376, 0.24702995727913848, 0.2377347168266547, 0.23504524088480036] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.284580390072376, 0.24702995727913848, 0.2377347168266547, 0.23504524088480036, 0.23453164481065017] ***
*** finished computation of 3 references, err: [Inf, 0.284580390072376, 0.24702995727913848, 0.2377347168266547, 0.23504524088480036, 0.23453164481065017] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [151, 51, 0]]
** centroid: 1, normalized-entropy: 0.8151777793922245, [(1, 151), (2, 51)]
*** center 2: selecting labels [1] (freq >= 2) [from [219, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [27, 192, 27]]
** centroid: 3, normalized-entropy: 0.6175464589640999, [(1, 27), (2, 192), (3, 27)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.1968425707597923] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1968425707597923, 0.1620591379123161] ***
*** starting iteration: 2; err: [Inf, 0.1968425707597923, 0.1620591379123161] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1968425707597923, 0.1620591379123161, 0.15676575371025092] ***
*** starting iteration: 3; err: [Inf, 0.1968425707597923, 0.1620591379123161, 0.15676575371025092] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1968425707597923, 0.1620591379123161, 0.15676575371025092, 0.15435998441124274] ***
*** finished computation of 7 references, err: [Inf, 0.1968425707597923, 0.1620591379123161, 0.15676575371025092, 0.15435998441124274] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 70, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [128, 40, 0]]
** centroid: 2, normalized-entropy: 0.7918583525674836, [(1, 128), (2, 40)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [108, 4, 0]]
** centroid: 3, normalized-entropy: 0.2222848306856879, [(1, 108), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [28, 47, 0]]
** centroid: 4, normalized-entropy: 0.9531971725430559, [(1, 28), (2, 47)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 93, 21]]
** centroid: 5, normalized-entropy: 0.6892019851173655, [(2, 93), (3, 21)]
*** center 6: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [48, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23270702774244093] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23270702774244093, 0.16458147363751188] ***
*** starting iteration: 2; err: [Inf, 0.23270702774244093, 0.16458147363751188] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23270702774244093, 0.16458147363751188, 0.15385501652347228] ***
*** starting iteration: 3; err: [Inf, 0.23270702774244093, 0.16458147363751188, 0.15385501652347228] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23270702774244093, 0.16458147363751188, 0.15385501652347228, 0.1491904450801091] ***
*** finished computation of 7 references, err: [Inf, 0.23270702774244093, 0.16458147363751188, 0.15385501652347228, 0.1491904450801091] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [46, 69, 0]]
** centroid: 1, normalized-entropy: 0.9709505944546688, [(1, 46), (2, 69)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [100, 6, 0]]
** centroid: 2, normalized-entropy: 0.3138129641688652, [(1, 100), (2, 6)]
*** center 3: selecting labels [1] (freq >= 1) [from [117, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 71, 24]]
** centroid: 4, normalized-entropy: 0.8154224977821039, [(2, 71), (3, 24)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [4, 84, 0]]
** centroid: 5, normalized-entropy: 0.2667649878030262, [(1, 4), (2, 84)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [47, 13, 0]]
** centroid: 6, normalized-entropy: 0.7540340561971327, [(1, 47), (2, 13)]
*** center 7: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3014616014413547] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3014616014413547, 0.17541434482365534] ***
*** starting iteration: 2; err: [Inf, 0.3014616014413547, 0.17541434482365534] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3014616014413547, 0.17541434482365534, 0.157928837821407] ***
*** starting iteration: 3; err: [Inf, 0.3014616014413547, 0.17541434482365534, 0.157928837821407] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3014616014413547, 0.17541434482365534, 0.157928837821407, 0.15199631058319152] ***
*** finished computation of 7 references, err: [Inf, 0.3014616014413547, 0.17541434482365534, 0.157928837821407, 0.15199631058319152] ***
*** center 1: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [9, 83, 0]]
** centroid: 2, normalized-entropy: 0.4620663276355394, [(1, 9), (2, 83)]
*** center 3: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [73, 2, 0]]
** centroid: 4, normalized-entropy: 0.1773894531859976, [(1, 73), (2, 2)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 130, 27]]
** centroid: 5, normalized-entropy: 0.6622017791329471, [(2, 130), (3, 27)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [107, 27, 0]]
** centroid: 6, normalized-entropy: 0.7249031449104859, [(1, 107), (2, 27)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [68, 1, 0]]
** centroid: 7, normalized-entropy: 0.10928571467638523, [(1, 68), (2, 1)]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 12)
[0.9380068691445936, 0.9300168431904958, 0.9229738720756685, 0.919017820215425, 0.9119898341455227, 0.9099968231704759, 0.8889937842033651, 0.887992783202364, 0.879061696426966, 0.8779917642193092, 0.8250136363908819, 0.7890345435255615]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 1) => 0.9380068691445936
finished with 13
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.24545702389818994] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24545702389818994, 0.19296591549810418] ***
*** starting iteration: 2; err: [Inf, 0.24545702389818994, 0.19296591549810418] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24545702389818994, 0.19296591549810418, 0.1876114978099818] ***
*** starting iteration: 3; err: [Inf, 0.24545702389818994, 0.19296591549810418, 0.1876114978099818] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24545702389818994, 0.19296591549810418, 0.1876114978099818, 0.1870090499381862] ***
*** finished computation of 7 references, err: [Inf, 0.24545702389818994, 0.19296591549810418, 0.1876114978099818, 0.1870090499381862] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [104, 5, 0]]
** centroid: 1, normalized-entropy: 0.2685937636658219, [(1, 104), (2, 5)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 38, 21]]
** centroid: 2, normalized-entropy: 0.9392547207311595, [(2, 38), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [116, 5, 0]]
** centroid: 3, normalized-entropy: 0.24832244463628733, [(1, 116), (2, 5)]
*** center 4: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 108, 0]]
** centroid: 6, normalized-entropy: 0.07526826758743464, [(1, 1), (2, 108)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [5, 98, 0]]
** centroid: 7, normalized-entropy: 0.28017814662275986, [(1, 5), (2, 98)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2171416557275284] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2171416557275284, 0.19304241293537217] ***
*** starting iteration: 2; err: [Inf, 0.2171416557275284, 0.19304241293537217] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2171416557275284, 0.19304241293537217, 0.188717704140644] ***
*** starting iteration: 3; err: [Inf, 0.2171416557275284, 0.19304241293537217, 0.188717704140644] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2171416557275284, 0.19304241293537217, 0.188717704140644, 0.18815257760934878] ***
*** finished computation of 7 references, err: [Inf, 0.2171416557275284, 0.19304241293537217, 0.188717704140644, 0.18815257760934878] ***
*** center 1: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [99, 6, 0]]
** centroid: 2, normalized-entropy: 0.3159971329784246, [(1, 99), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 73, 24]]
** centroid: 3, normalized-entropy: 0.8071675554288905, [(2, 73), (3, 24)]
*** center 4: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [79, 11, 0]]
** centroid: 5, normalized-entropy: 0.5357150195407704, [(1, 79), (2, 11)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [20, 81, 0]]
** centroid: 6, normalized-entropy: 0.7179499765002912, [(1, 20), (2, 81)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [36, 72, 0]]
** centroid: 7, normalized-entropy: 0.9182958340544894, [(1, 36), (2, 72)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22835320931603795] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22835320931603795, 0.1906754750481945] ***
*** starting iteration: 2; err: [Inf, 0.22835320931603795, 0.1906754750481945] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22835320931603795, 0.1906754750481945, 0.18573156497797286] ***
*** starting iteration: 3; err: [Inf, 0.22835320931603795, 0.1906754750481945, 0.18573156497797286] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22835320931603795, 0.1906754750481945, 0.18573156497797286, 0.18484242042635513] ***
*** finished computation of 7 references, err: [Inf, 0.22835320931603795, 0.1906754750481945, 0.18573156497797286, 0.18484242042635513] ***
*** center 1: selecting labels [1] (freq >= 1) [from [126, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [88, 14, 0]]
** centroid: 2, normalized-entropy: 0.577004250315725, [(1, 88), (2, 14)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 50, 27]]
** centroid: 3, normalized-entropy: 0.9346466439786693, [(2, 50), (3, 27)]
*** center 4: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [82, 3, 0]]
** centroid: 5, normalized-entropy: 0.22028326695127437, [(1, 82), (2, 3)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [7, 85, 0]]
** centroid: 6, normalized-entropy: 0.3882389775123619, [(1, 7), (2, 85)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 91, 0]]
finished with 8 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 13)
[0.9380068691445936, 0.9300168431904958, 0.9279878681076287, 0.9229738720756685, 0.919017820215425, 0.9119898341455227, 0.9099968231704759, 0.8889937842033651, 0.887992783202364, 0.879061696426966, 0.8779917642193092, 0.8250136363908819, 0.7890345435255615]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 1) => 0.9380068691445936
finished with 15
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.26006430202490977] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26006430202490977, 0.21408374200773625] ***
*** starting iteration: 2; err: [Inf, 0.26006430202490977, 0.21408374200773625] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26006430202490977, 0.21408374200773625, 0.195516546983999] ***
*** starting iteration: 3; err: [Inf, 0.26006430202490977, 0.21408374200773625, 0.195516546983999] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26006430202490977, 0.21408374200773625, 0.195516546983999, 0.19048449605166376] ***
*** starting iteration: 4; err: [Inf, 0.26006430202490977, 0.21408374200773625, 0.195516546983999, 0.19048449605166376] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26006430202490977, 0.21408374200773625, 0.195516546983999, 0.19048449605166376, 0.1884483945662262] ***
*** starting iteration: 5; err: [Inf, 0.26006430202490977, 0.21408374200773625, 0.195516546983999, 0.19048449605166376, 0.1884483945662262] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26006430202490977, 0.21408374200773625, 0.195516546983999, 0.19048449605166376, 0.1884483945662262, 0.18807072201450062] ***
*** finished computation of 7 references, err: [Inf, 0.26006430202490977, 0.21408374200773625, 0.195516546983999, 0.19048449605166376, 0.1884483945662262, 0.18807072201450062] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [60, 34, 0]]
** centroid: 1, normalized-entropy: 0.9440870182837795, [(1, 60), (2, 34)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [115, 3, 0]]
** centroid: 2, normalized-entropy: 0.17089522427059886, [(1, 115), (2, 3)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [108, 5, 0]]
** centroid: 3, normalized-entropy: 0.26144010659136985, [(1, 108), (2, 5)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 86, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [99, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [9, 92, 0]]
** centroid: 6, normalized-entropy: 0.43348846324460666, [(1, 9), (2, 92)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 34, 21]]
** centroid: 7, normalized-entropy: 0.9593160320543779, [(2, 34), (3, 21)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.34185177629123786] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34185177629123786, 0.2142142322699147] ***
*** starting iteration: 2; err: [Inf, 0.34185177629123786, 0.2142142322699147] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34185177629123786, 0.2142142322699147, 0.20076337490632928] ***
*** starting iteration: 3; err: [Inf, 0.34185177629123786, 0.2142142322699147, 0.20076337490632928] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34185177629123786, 0.2142142322699147, 0.20076337490632928, 0.19609940177977442] ***
*** starting iteration: 4; err: [Inf, 0.34185177629123786, 0.2142142322699147, 0.20076337490632928, 0.19609940177977442] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34185177629123786, 0.2142142322699147, 0.20076337490632928, 0.19609940177977442, 0.19453687401770473] ***
*** starting iteration: 5; err: [Inf, 0.34185177629123786, 0.2142142322699147, 0.20076337490632928, 0.19609940177977442, 0.19453687401770473] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34185177629123786, 0.2142142322699147, 0.20076337490632928, 0.19609940177977442, 0.19453687401770473, 0.1940389670294778] ***
*** finished computation of 7 references, err: [Inf, 0.34185177629123786, 0.2142142322699147, 0.20076337490632928, 0.19609940177977442, 0.19453687401770473, 0.1940389670294778] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [86, 3, 0]]
** centroid: 1, normalized-entropy: 0.21265863988163503, [(1, 86), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [128, 36, 0]]
** centroid: 2, normalized-entropy: 0.7592757847892834, [(1, 128), (2, 36)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [20, 52, 0]]
** centroid: 3, normalized-entropy: 0.8524051786494784, [(1, 20), (2, 52)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 72, 24]]
** centroid: 4, normalized-entropy: 0.8112781244591328, [(2, 72), (3, 24)]
*** center 5: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 80, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24330421478516873] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24330421478516873, 0.19497645855776552] ***
*** starting iteration: 2; err: [Inf, 0.24330421478516873, 0.19497645855776552] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24330421478516873, 0.19497645855776552, 0.19092791881537932] ***
*** starting iteration: 3; err: [Inf, 0.24330421478516873, 0.19497645855776552, 0.19092791881537932] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24330421478516873, 0.19497645855776552, 0.19092791881537932, 0.18968341030484845] ***
*** starting iteration: 4; err: [Inf, 0.24330421478516873, 0.19497645855776552, 0.19092791881537932, 0.18968341030484845] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24330421478516873, 0.19497645855776552, 0.19092791881537932, 0.18968341030484845, 0.18763975013533365] ***
*** starting iteration: 5; err: [Inf, 0.24330421478516873, 0.19497645855776552, 0.19092791881537932, 0.18968341030484845, 0.18763975013533365] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24330421478516873, 0.19497645855776552, 0.19092791881537932, 0.18968341030484845, 0.18763975013533365, 0.1862335995948319] ***
*** starting iteration: 6; err: [Inf, 0.24330421478516873, 0.19497645855776552, 0.19092791881537932, 0.18968341030484845, 0.18763975013533365, 0.1862335995948319] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24330421478516873, 0.19497645855776552, 0.19092791881537932, 0.18968341030484845, 0.18763975013533365, 0.1862335995948319, 0.18538640828969338] ***
*** finished computation of 7 references, err: [Inf, 0.24330421478516873, 0.19497645855776552, 0.19092791881537932, 0.18968341030484845, 0.18763975013533365, 0.1862335995948319, 0.18538640828969338] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [123, 7, 0]]
** centroid: 1, normalized-entropy: 0.302515746788995, [(1, 123), (2, 7)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 36, 27]]
** centroid: 2, normalized-entropy: 0.9852281360342514, [(2, 36), (3, 27)]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 83, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [8, 84, 0]]
** centroid: 4, normalized-entropy: 0.42622865699814483, [(1, 8), (2, 84)]
*** center 5: selecting labels [1] (freq >= 1) [from [103, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [58, 29, 0]]
** centroid: 6, normalized-entropy: 0.9182958340544894, [(1, 58), (2, 29)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [105, 4, 0]]
** centroid: 7, normalized-entropy: 0.22693864262148727, [(1, 105), (2, 4)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24617556826136] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24617556826136, 0.16940602618017914] ***
*** starting iteration: 2; err: [Inf, 0.24617556826136, 0.16940602618017914] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24617556826136, 0.16940602618017914, 0.1608034450534239] ***
*** starting iteration: 3; err: [Inf, 0.24617556826136, 0.16940602618017914, 0.1608034450534239] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24617556826136, 0.16940602618017914, 0.1608034450534239, 0.15644404689806538] ***
*** starting iteration: 4; err: [Inf, 0.24617556826136, 0.16940602618017914, 0.1608034450534239, 0.15644404689806538] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24617556826136, 0.16940602618017914, 0.1608034450534239, 0.15644404689806538, 0.15295608821548745] ***
*** starting iteration: 5; err: [Inf, 0.24617556826136, 0.16940602618017914, 0.1608034450534239, 0.15644404689806538, 0.15295608821548745] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24617556826136, 0.16940602618017914, 0.1608034450534239, 0.15644404689806538, 0.15295608821548745, 0.14917522781338352] ***
*** starting iteration: 6; err: [Inf, 0.24617556826136, 0.16940602618017914, 0.1608034450534239, 0.15644404689806538, 0.15295608821548745, 0.14917522781338352] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24617556826136, 0.16940602618017914, 0.1608034450534239, 0.15644404689806538, 0.15295608821548745, 0.14917522781338352, 0.14644633018108946] ***
*** starting iteration: 7; err: [Inf, 0.24617556826136, 0.16940602618017914, 0.1608034450534239, 0.15644404689806538, 0.15295608821548745, 0.14917522781338352, 0.14644633018108946] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24617556826136, 0.16940602618017914, 0.1608034450534239, 0.15644404689806538, 0.15295608821548745, 0.14917522781338352, 0.14644633018108946, 0.14450601840254715] ***
*** starting iteration: 8; err: [Inf, 0.24617556826136, 0.16940602618017914, 0.1608034450534239, 0.15644404689806538, 0.15295608821548745, 0.14917522781338352, 0.14644633018108946, 0.14450601840254715] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24617556826136, 0.16940602618017914, 0.1608034450534239, 0.15644404689806538, 0.15295608821548745, 0.14917522781338352, 0.14644633018108946, 0.14450601840254715, 0.14396526757557807] ***
*** finished computation of 7 references, err: [Inf, 0.24617556826136, 0.16940602618017914, 0.1608034450534239, 0.15644404689806538, 0.15295608821548745, 0.14917522781338352, 0.14644633018108946, 0.14450601840254715, 0.14396526757557807] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [50, 55, 0]]
** centroid: 1, normalized-entropy: 0.998363672593813, [(1, 50), (2, 55)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [29, 54, 0]]
** centroid: 2, normalized-entropy: 0.9335289015212996, [(1, 29), (2, 54)]
*** center 3: selecting labels [1] (freq >= 1) [from [99, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [114, 4, 0]]
** centroid: 4, normalized-entropy: 0.21357981533827744, [(1, 114), (2, 4)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 71, 21]]
** centroid: 5, normalized-entropy: 0.7749672673267259, [(2, 71), (3, 21)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 70, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [99, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2226734139804339] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2226734139804339, 0.15819801065220457] ***
*** starting iteration: 2; err: [Inf, 0.2226734139804339, 0.15819801065220457] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2226734139804339, 0.15819801065220457, 0.15057160348716614] ***
*** starting iteration: 3; err: [Inf, 0.2226734139804339, 0.15819801065220457, 0.15057160348716614] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2226734139804339, 0.15819801065220457, 0.15057160348716614, 0.14751194266677797] ***
*** starting iteration: 4; err: [Inf, 0.2226734139804339, 0.15819801065220457, 0.15057160348716614, 0.14751194266677797] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2226734139804339, 0.15819801065220457, 0.15057160348716614, 0.14751194266677797, 0.14602460743959944] ***
*** starting iteration: 5; err: [Inf, 0.2226734139804339, 0.15819801065220457, 0.15057160348716614, 0.14751194266677797, 0.14602460743959944] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2226734139804339, 0.15819801065220457, 0.15057160348716614, 0.14751194266677797, 0.14602460743959944, 0.14525396519897693] ***
*** finished computation of 7 references, err: [Inf, 0.2226734139804339, 0.15819801065220457, 0.15057160348716614, 0.14751194266677797, 0.14602460743959944, 0.14525396519897693] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [50, 31, 0]]
** centroid: 1, normalized-entropy: 0.9599377175669783, [(1, 50), (2, 31)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [106, 14, 0]]
** centroid: 2, normalized-entropy: 0.5197027865043053, [(1, 106), (2, 14)]
*** center 3: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 77, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 87, 24]]
** centroid: 5, normalized-entropy: 0.7531979910695015, [(2, 87), (3, 24)]
*** center 6: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [74, 34, 0]]
** centroid: 7, normalized-entropy: 0.8986533756907481, [(1, 74), (2, 34)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18891600120081] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18891600120081, 0.16696458414051754] ***
*** starting iteration: 2; err: [Inf, 0.18891600120081, 0.16696458414051754] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18891600120081, 0.16696458414051754, 0.1586404337632893] ***
*** starting iteration: 3; err: [Inf, 0.18891600120081, 0.16696458414051754, 0.1586404337632893] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18891600120081, 0.16696458414051754, 0.1586404337632893, 0.15455038719803563] ***
*** starting iteration: 4; err: [Inf, 0.18891600120081, 0.16696458414051754, 0.1586404337632893, 0.15455038719803563] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18891600120081, 0.16696458414051754, 0.1586404337632893, 0.15455038719803563, 0.15058350266059345] ***
*** starting iteration: 5; err: [Inf, 0.18891600120081, 0.16696458414051754, 0.1586404337632893, 0.15455038719803563, 0.15058350266059345] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18891600120081, 0.16696458414051754, 0.1586404337632893, 0.15455038719803563, 0.15058350266059345, 0.1490028394927931] ***
*** starting iteration: 6; err: [Inf, 0.18891600120081, 0.16696458414051754, 0.1586404337632893, 0.15455038719803563, 0.15058350266059345, 0.1490028394927931] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18891600120081, 0.16696458414051754, 0.1586404337632893, 0.15455038719803563, 0.15058350266059345, 0.1490028394927931, 0.14823235878008773] ***
*** finished computation of 7 references, err: [Inf, 0.18891600120081, 0.16696458414051754, 0.1586404337632893, 0.15455038719803563, 0.15058350266059345, 0.1490028394927931, 0.14823235878008773] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [92, 26, 0]]
** centroid: 1, normalized-entropy: 0.7607859931846075, [(1, 92), (2, 26)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 117, 27]]
** centroid: 2, normalized-entropy: 0.6962122601251459, [(2, 117), (3, 27)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [13, 89, 0]]
** centroid: 3, normalized-entropy: 0.550405815580872, [(1, 13), (2, 89)]
*** center 4: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [81, 8, 0]]
** centroid: 5, normalized-entropy: 0.43609466429612137, [(1, 81), (2, 8)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [78, 3, 0]]
** centroid: 6, normalized-entropy: 0.22853814395352806, [(1, 78), (2, 3)]
*** center 7: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 15)
[0.9380068691445936, 0.9300168431904958, 0.9279878681076287, 0.9229738720756685, 0.919017820215425, 0.9159758560956165, 0.9139858421295548, 0.9119898341455227, 0.9099968231704759, 0.8889937842033651, 0.887992783202364, 0.879061696426966, 0.8779917642193092, 0.8250136363908819, 0.7890345435255615]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 1) => 0.9380068691445936
finished with 16
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.2373767667512938] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2373767667512938, 0.19955524073161363] ***
*** finished computation of 7 references, err: [Inf, 0.2373767667512938, 0.19955524073161363] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [64, 80, 0]]
** centroid: 1, normalized-entropy: 0.9910760598382222, [(1, 64), (2, 80)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [87, 4, 0]]
** centroid: 2, normalized-entropy: 0.26014536394771426, [(1, 87), (2, 4)]
*** center 3: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 71, 21]]
** centroid: 4, normalized-entropy: 0.7749672673267259, [(2, 71), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [25, 98, 0]]
** centroid: 5, normalized-entropy: 0.7283846722688453, [(1, 25), (2, 98)]
*** center 6: selecting labels [1] (freq >= 2) [from [62, 1, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23513882310092002] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23513882310092002, 0.18930073663162283] ***
*** finished computation of 7 references, err: [Inf, 0.23513882310092002, 0.18930073663162283] ***
*** center 1: selecting labels [1] (freq >= 2) [from [107, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 48, 24]]
** centroid: 2, normalized-entropy: 0.9182958340544894, [(2, 48), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [116, 4, 0]]
** centroid: 3, normalized-entropy: 0.2108423003185322, [(1, 116), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [83, 8, 0]]
** centroid: 4, normalized-entropy: 0.4294619720471057, [(1, 83), (2, 8)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [13, 88, 0]]
** centroid: 5, normalized-entropy: 0.5538976334852961, [(1, 13), (2, 88)]
*** center 6: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [14, 95, 0]]
** centroid: 7, normalized-entropy: 0.5531453183526465, [(1, 14), (2, 95)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2479591329290212] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2479591329290212, 0.19368436517448037] ***
*** finished computation of 7 references, err: [Inf, 0.2479591329290212, 0.19368436517448037] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [26, 93, 0]]
** centroid: 1, normalized-entropy: 0.7573958968817643, [(1, 26), (2, 93)]
*** center 2: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [91, 21, 0]]
** centroid: 4, normalized-entropy: 0.6962122601251459, [(1, 91), (2, 21)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 57, 27]]
** centroid: 5, normalized-entropy: 0.9059282160429994, [(2, 57), (3, 27)]
*** center 6: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [26, 72, 0]]
** centroid: 7, normalized-entropy: 0.834648285181383, [(1, 26), (2, 72)]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 16)
[0.9380068691445936, 0.9300168431904958, 0.9279878681076287, 0.9229918541295786, 0.9229738720756685, 0.919017820215425, 0.9159758560956165, 0.9139858421295548, 0.9119898341455227, 0.9099968231704759, 0.8889937842033651, 0.887992783202364, 0.879061696426966, 0.8779917642193092, 0.8250136363908819, 0.7890345435255615]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 1) => 0.9380068691445936
finished with 17
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.38314909074600934] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38314909074600934, 0.329770261079196] ***
*** starting iteration: 2; err: [Inf, 0.38314909074600934, 0.329770261079196] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38314909074600934, 0.329770261079196, 0.30527327267394344] ***
*** starting iteration: 3; err: [Inf, 0.38314909074600934, 0.329770261079196, 0.30527327267394344] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38314909074600934, 0.329770261079196, 0.30527327267394344, 0.29772711807006114] ***
*** finished computation of 3 references, err: [Inf, 0.38314909074600934, 0.329770261079196, 0.30527327267394344, 0.29772711807006114] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [164, 50, 0]]
** centroid: 1, normalized-entropy: 0.7843112002044088, [(1, 164), (2, 50)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 184, 21]]
** centroid: 2, normalized-entropy: 0.4766797785647419, [(2, 184), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [227, 20, 0]]
** centroid: 3, normalized-entropy: 0.4055936748527548, [(1, 227), (2, 20)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4468089797795154] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4468089797795154, 0.32085610437311646] ***
*** starting iteration: 2; err: [Inf, 0.4468089797795154, 0.32085610437311646] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4468089797795154, 0.32085610437311646, 0.2965059864084827] ***
*** starting iteration: 3; err: [Inf, 0.4468089797795154, 0.32085610437311646, 0.2965059864084827] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4468089797795154, 0.32085610437311646, 0.2965059864084827, 0.2895678963981334] ***
*** finished computation of 3 references, err: [Inf, 0.4468089797795154, 0.32085610437311646, 0.2965059864084827, 0.2895678963981334] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [233, 32, 0]]
** centroid: 1, normalized-entropy: 0.5315263920752888, [(1, 233), (2, 32)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 163, 24]]
** centroid: 2, normalized-entropy: 0.5528741970161213, [(2, 163), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [167, 48, 0]]
** centroid: 3, normalized-entropy: 0.7660681199253571, [(1, 167), (2, 48)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.46046020470125354] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.46046020470125354, 0.31885011089167026] ***
*** starting iteration: 2; err: [Inf, 0.46046020470125354, 0.31885011089167026] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.46046020470125354, 0.31885011089167026, 0.29814740814927637] ***
*** starting iteration: 3; err: [Inf, 0.46046020470125354, 0.31885011089167026, 0.29814740814927637] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.46046020470125354, 0.31885011089167026, 0.29814740814927637, 0.29531391982318667] ***
*** finished computation of 3 references, err: [Inf, 0.46046020470125354, 0.31885011089167026, 0.29814740814927637, 0.29531391982318667] ***
*** center 1: selecting labels [1] (freq >= 1) [from [170, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [102, 169, 27]]
** centroid: 2, normalized-entropy: 0.8248543698195044, [(1, 102), (2, 169), (3, 27)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [125, 74, 0]]
** centroid: 3, normalized-entropy: 0.9520890193411206, [(1, 125), (2, 74)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 17)
[0.9380068691445936, 0.9300168431904958, 0.9279878681076287, 0.9229918541295786, 0.9229738720756685, 0.919017820215425, 0.9159758560956165, 0.9139858421295548, 0.9119898341455227, 0.9099968231704759, 0.8889937842033651, 0.887992783202364, 0.879061696426966, 0.8779917642193092, 0.8630606654558749, 0.8250136363908819, 0.7890345435255615]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 1) => 0.9380068691445936
finished with 17
iteration 6 finished
generating 4 configurations using top 12 configurations, starting with 17)
[0.9380068691445936, 0.9300168431904958, 0.9279878681076287, 0.9229918541295786, 0.9229738720756685, 0.919017820215425, 0.9159758560956165, 0.9139858421295548, 0.9119898341455227, 0.9099968231704759, 0.8889937842033651, 0.887992783202364, 0.879061696426966, 0.8779917642193092, 0.8630606654558749, 0.8250136363908819, 0.7890345435255615]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 1) => 0.9380068691445936
finished with 17
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 17)
[0.9380068691445936, 0.9300168431904958, 0.9279878681076287, 0.9229918541295786, 0.9229738720756685, 0.919017820215425, 0.9159758560956165, 0.9139858421295548, 0.9119898341455227, 0.9099968231704759, 0.8889937842033651, 0.887992783202364, 0.879061696426966, 0.8779917642193092, 0.8630606654558749, 0.8250136363908819, 0.7890345435255615]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 1) => 0.9380068691445936
finished with 17
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 17)
[0.9380068691445936, 0.9300168431904958, 0.9279878681076287, 0.9229918541295786, 0.9229738720756685, 0.919017820215425, 0.9159758560956165, 0.9139858421295548, 0.9119898341455227, 0.9099968231704759, 0.8889937842033651, 0.887992783202364, 0.879061696426966, 0.8779917642193092, 0.8630606654558749, 0.8250136363908819, 0.7890345435255615]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 1) => 0.9380068691445936
finished with 17
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.21164774177456275] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21164774177456275, 0.15346978156268595] ***
*** starting iteration: 2; err: [Inf, 0.21164774177456275, 0.15346978156268595] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21164774177456275, 0.15346978156268595, 0.14853448685421608] ***
*** starting iteration: 3; err: [Inf, 0.21164774177456275, 0.15346978156268595, 0.14853448685421608] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21164774177456275, 0.15346978156268595, 0.14853448685421608, 0.1480566864348948] ***
*** finished computation of 7 references, err: [Inf, 0.21164774177456275, 0.15346978156268595, 0.14853448685421608, 0.1480566864348948] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [13, 139, 0]]
** centroid: 1, normalized-entropy: 0.4213582670988374, [(1, 13), (2, 139)]
*** center 2: selecting labels [1] (freq >= 1) [from [103, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [95, 83, 0]]
** centroid: 3, normalized-entropy: 0.9967190737010337, [(1, 95), (2, 83)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [114, 36, 0]]
** centroid: 4, normalized-entropy: 0.7950402793845225, [(1, 114), (2, 36)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 110, 36]]
** centroid: 5, normalized-entropy: 0.8058049113482652, [(2, 110), (3, 36)]
*** center 6: selecting labels [1] (freq >= 1) [from [123, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [146, 2, 0]]
** centroid: 7, normalized-entropy: 0.10327508457163559, [(1, 146), (2, 2)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19373944917693733] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19373944917693733, 0.15276591731794179] ***
*** starting iteration: 2; err: [Inf, 0.19373944917693733, 0.15276591731794179] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19373944917693733, 0.15276591731794179, 0.1487303636088036] ***
*** starting iteration: 3; err: [Inf, 0.19373944917693733, 0.15276591731794179, 0.1487303636088036] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19373944917693733, 0.15276591731794179, 0.1487303636088036, 0.14757184649724514] ***
*** starting iteration: 4; err: [Inf, 0.19373944917693733, 0.15276591731794179, 0.1487303636088036, 0.14757184649724514] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19373944917693733, 0.15276591731794179, 0.1487303636088036, 0.14757184649724514, 0.14683762009069323] ***
*** finished computation of 7 references, err: [Inf, 0.19373944917693733, 0.15276591731794179, 0.1487303636088036, 0.14757184649724514, 0.14683762009069323] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [53, 42, 0]]
** centroid: 1, normalized-entropy: 0.9903070204513952, [(1, 53), (2, 42)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [68, 4, 0]]
** centroid: 2, normalized-entropy: 0.3095434291503252, [(1, 68), (2, 4)]
*** center 3: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 61, 16]]
** centroid: 4, normalized-entropy: 0.7372413771710565, [(2, 61), (3, 16)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [45, 15, 0]]
** centroid: 5, normalized-entropy: 0.8112781244591328, [(1, 45), (2, 15)]
*** center 6: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 64, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19536662820726633] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19536662820726633, 0.14981453834846617] ***
*** starting iteration: 2; err: [Inf, 0.19536662820726633, 0.14981453834846617] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19536662820726633, 0.14981453834846617, 0.14643644414842127] ***
*** starting iteration: 3; err: [Inf, 0.19536662820726633, 0.14981453834846617, 0.14643644414842127] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19536662820726633, 0.14981453834846617, 0.14643644414842127, 0.1451858668264467] ***
*** starting iteration: 4; err: [Inf, 0.19536662820726633, 0.14981453834846617, 0.14643644414842127, 0.1451858668264467] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19536662820726633, 0.14981453834846617, 0.14643644414842127, 0.1451858668264467, 0.14480568678490818] ***
*** finished computation of 7 references, err: [Inf, 0.19536662820726633, 0.14981453834846617, 0.14643644414842127, 0.1451858668264467, 0.14480568678490818] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [82, 2, 0]]
** centroid: 1, normalized-entropy: 0.1623261801753929, [(1, 82), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [59, 23, 0]]
** centroid: 2, normalized-entropy: 0.8561146277685725, [(1, 59), (2, 23)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 64, 19]]
** centroid: 3, normalized-entropy: 0.776116265618875, [(2, 64), (3, 19)]
*** center 4: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [34, 31, 0]]
** centroid: 5, normalized-entropy: 0.9984628557283827, [(1, 34), (2, 31)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 54, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19781707501225174] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19781707501225174, 0.1541690430250019] ***
*** starting iteration: 2; err: [Inf, 0.19781707501225174, 0.1541690430250019] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19781707501225174, 0.1541690430250019, 0.14983736104751005] ***
*** starting iteration: 3; err: [Inf, 0.19781707501225174, 0.1541690430250019, 0.14983736104751005] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19781707501225174, 0.1541690430250019, 0.14983736104751005, 0.14864397625392303] ***
*** starting iteration: 4; err: [Inf, 0.19781707501225174, 0.1541690430250019, 0.14983736104751005, 0.14864397625392303] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19781707501225174, 0.1541690430250019, 0.14983736104751005, 0.14864397625392303, 0.1477095236852765] ***
*** finished computation of 7 references, err: [Inf, 0.19781707501225174, 0.1541690430250019, 0.14983736104751005, 0.14864397625392303, 0.1477095236852765] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [50, 45, 0]]
** centroid: 1, normalized-entropy: 0.9980008838722993, [(1, 50), (2, 45)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [74, 4, 0]]
** centroid: 2, normalized-entropy: 0.29181825659888555, [(1, 74), (2, 4)]
*** center 3: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 52, 21]]
** centroid: 4, normalized-entropy: 0.8656939941993219, [(2, 52), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [37, 20, 0]]
** centroid: 5, normalized-entropy: 0.9348490242345946, [(1, 37), (2, 20)]
*** center 6: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 52, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1759997615236789] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1759997615236789, 0.14712102724611759] ***
*** starting iteration: 2; err: [Inf, 0.1759997615236789, 0.14712102724611759] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1759997615236789, 0.14712102724611759, 0.14429408036731184] ***
*** starting iteration: 3; err: [Inf, 0.1759997615236789, 0.14712102724611759, 0.14429408036731184] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1759997615236789, 0.14712102724611759, 0.14429408036731184, 0.14362131821922958] ***
*** finished computation of 7 references, err: [Inf, 0.1759997615236789, 0.14712102724611759, 0.14429408036731184, 0.14362131821922958] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [85, 7, 0]]
** centroid: 1, normalized-entropy: 0.3882389775123619, [(1, 85), (2, 7)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [69, 1, 0]]
** centroid: 2, normalized-entropy: 0.10802319526362848, [(1, 69), (2, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 27, 20]]
** centroid: 4, normalized-entropy: 0.9839393951635759, [(2, 27), (3, 20)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [67, 9, 0]]
** centroid: 5, normalized-entropy: 0.524805134842907, [(1, 67), (2, 9)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 68, 0]]
** centroid: 6, normalized-entropy: 0.18717625687320805, [(1, 2), (2, 68)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [3, 77, 0]]
** centroid: 7, normalized-entropy: 0.2307099556914763, [(1, 3), (2, 77)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18340058330167086] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18340058330167086, 0.15105676604341717] ***
*** starting iteration: 2; err: [Inf, 0.18340058330167086, 0.15105676604341717] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18340058330167086, 0.15105676604341717, 0.145786484034732] ***
*** starting iteration: 3; err: [Inf, 0.18340058330167086, 0.15105676604341717, 0.145786484034732] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18340058330167086, 0.15105676604341717, 0.145786484034732, 0.1441845336817205] ***
*** starting iteration: 4; err: [Inf, 0.18340058330167086, 0.15105676604341717, 0.145786484034732, 0.1441845336817205] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18340058330167086, 0.15105676604341717, 0.145786484034732, 0.1441845336817205, 0.14334343637898564] ***
*** finished computation of 7 references, err: [Inf, 0.18340058330167086, 0.15105676604341717, 0.145786484034732, 0.1441845336817205, 0.14334343637898564] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [48, 55, 0]]
** centroid: 1, normalized-entropy: 0.9966657283631041, [(1, 48), (2, 55)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [71, 4, 0]]
** centroid: 2, normalized-entropy: 0.3003914173647818, [(1, 71), (2, 4)]
*** center 3: selecting labels [1] (freq >= 1) [from [40, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 54, 18]]
** centroid: 4, normalized-entropy: 0.8112781244591328, [(2, 54), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [62, 1, 0]]
** centroid: 5, normalized-entropy: 0.11759466565886466, [(1, 62), (2, 1)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 68, 0]]
** centroid: 6, normalized-entropy: 0.10928571467638523, [(1, 1), (2, 68)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [75, 3, 0]]
** centroid: 7, normalized-entropy: 0.23519338181924157, [(1, 75), (2, 3)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18967958174459637] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18967958174459637, 0.15104948527365922] ***
*** starting iteration: 2; err: [Inf, 0.18967958174459637, 0.15104948527365922] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18967958174459637, 0.15104948527365922, 0.14861432372033595] ***
*** starting iteration: 3; err: [Inf, 0.18967958174459637, 0.15104948527365922, 0.14861432372033595] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18967958174459637, 0.15104948527365922, 0.14861432372033595, 0.1479602654837072] ***
*** finished computation of 7 references, err: [Inf, 0.18967958174459637, 0.15104948527365922, 0.14861432372033595, 0.1479602654837072] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 72, 20]]
** centroid: 1, normalized-entropy: 0.7553754125614286, [(2, 72), (3, 20)]
*** center 2: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [48, 7, 0]]
** centroid: 3, normalized-entropy: 0.54991090463341, [(1, 48), (2, 7)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [92, 18, 0]]
** centroid: 4, normalized-entropy: 0.6429383500409613, [(1, 92), (2, 18)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [34, 23, 0]]
** centroid: 5, normalized-entropy: 0.9729661265889024, [(1, 34), (2, 23)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 72, 0]]
** centroid: 6, normalized-entropy: 0.1044190780054077, [(1, 1), (2, 72)]
*** center 7: selecting labels [1] (freq >= 1) [from [48, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19252047575451434] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19252047575451434, 0.15214296369999647] ***
*** starting iteration: 2; err: [Inf, 0.19252047575451434, 0.15214296369999647] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19252047575451434, 0.15214296369999647, 0.1479747172901407] ***
*** starting iteration: 3; err: [Inf, 0.19252047575451434, 0.15214296369999647, 0.1479747172901407] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19252047575451434, 0.15214296369999647, 0.1479747172901407, 0.14652318126056343] ***
*** starting iteration: 4; err: [Inf, 0.19252047575451434, 0.15214296369999647, 0.1479747172901407, 0.14652318126056343] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19252047575451434, 0.15214296369999647, 0.1479747172901407, 0.14652318126056343, 0.14635934893228114] ***
*** finished computation of 7 references, err: [Inf, 0.19252047575451434, 0.15214296369999647, 0.1479747172901407, 0.14652318126056343, 0.14635934893228114] ***
*** center 1: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 59, 17]]
** centroid: 3, normalized-entropy: 0.7668379316856329, [(2, 59), (3, 17)]
*** center 4: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [40, 29, 0]]
** centroid: 5, normalized-entropy: 0.9815886212101388, [(1, 40), (2, 29)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [46, 42, 0]]
** centroid: 6, normalized-entropy: 0.9985090989176322, [(1, 46), (2, 42)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 51, 0]]
** centroid: 7, normalized-entropy: 0.13709947889981755, [(1, 1), (2, 51)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19941889659594744] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19941889659594744, 0.15165927229449153] ***
*** starting iteration: 2; err: [Inf, 0.19941889659594744, 0.15165927229449153] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19941889659594744, 0.15165927229449153, 0.14717435163236223] ***
*** starting iteration: 3; err: [Inf, 0.19941889659594744, 0.15165927229449153, 0.14717435163236223] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19941889659594744, 0.15165927229449153, 0.14717435163236223, 0.14673456112295388] ***
*** finished computation of 7 references, err: [Inf, 0.19941889659594744, 0.15165927229449153, 0.14717435163236223, 0.14673456112295388] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [62, 5, 0]]
** centroid: 1, normalized-entropy: 0.3829576722723533, [(1, 62), (2, 5)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 36, 21]]
** centroid: 2, normalized-entropy: 0.9494520153879484, [(2, 36), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [86, 3, 0]]
** centroid: 3, normalized-entropy: 0.21265863988163503, [(1, 86), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [82, 8, 0]]
** centroid: 4, normalized-entropy: 0.43275015878875417, [(1, 82), (2, 8)]
*** center 5: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 70, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 59, 0]]
** centroid: 7, normalized-entropy: 0.12229159706937456, [(1, 1), (2, 59)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18464481318742038] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18464481318742038, 0.1485403415504843] ***
*** starting iteration: 2; err: [Inf, 0.18464481318742038, 0.1485403415504843] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18464481318742038, 0.1485403415504843, 0.1434812965542078] ***
*** starting iteration: 3; err: [Inf, 0.18464481318742038, 0.1485403415504843, 0.1434812965542078] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18464481318742038, 0.1485403415504843, 0.1434812965542078, 0.14272823304496707] ***
*** finished computation of 7 references, err: [Inf, 0.18464481318742038, 0.1485403415504843, 0.1434812965542078, 0.14272823304496707] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [98, 9, 0]]
** centroid: 1, normalized-entropy: 0.4165054000808552, [(1, 98), (2, 9)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [54, 8, 0]]
** centroid: 2, normalized-entropy: 0.5547781633412736, [(1, 54), (2, 8)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 42, 21]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(2, 42), (3, 21)]
*** center 4: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [4, 63, 0]]
** centroid: 5, normalized-entropy: 0.32625881462949274, [(1, 4), (2, 63)]
*** center 6: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 61, 0]]
** centroid: 7, normalized-entropy: 0.11911602665564841, [(1, 1), (2, 61)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1930029646269977] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1930029646269977, 0.15337815767386928] ***
*** starting iteration: 2; err: [Inf, 0.1930029646269977, 0.15337815767386928] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1930029646269977, 0.15337815767386928, 0.14926006413903087] ***
*** starting iteration: 3; err: [Inf, 0.1930029646269977, 0.15337815767386928, 0.14926006413903087] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1930029646269977, 0.15337815767386928, 0.14926006413903087, 0.14824018423771484] ***
*** starting iteration: 4; err: [Inf, 0.1930029646269977, 0.15337815767386928, 0.14926006413903087, 0.14824018423771484] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1930029646269977, 0.15337815767386928, 0.14926006413903087, 0.14824018423771484, 0.1475521009415388] ***
*** finished computation of 7 references, err: [Inf, 0.1930029646269977, 0.15337815767386928, 0.14926006413903087, 0.14824018423771484, 0.1475521009415388] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [50, 24, 0]]
** centroid: 1, normalized-entropy: 0.9090221560878149, [(1, 50), (2, 24)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [63, 20, 0]]
** centroid: 2, normalized-entropy: 0.7966394665488286, [(1, 63), (2, 20)]
*** center 3: selecting labels [1] (freq >= 1) [from [49, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 67, 4]]
** centroid: 4, normalized-entropy: 0.3127333763966432, [(2, 67), (3, 4)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [64, 8, 0]]
** centroid: 5, normalized-entropy: 0.5032583347756457, [(1, 64), (2, 8)]
*** center 6: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 78, 14]]
** centroid: 7, normalized-entropy: 0.6152538910563409, [(2, 78), (3, 14)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1864671738035977] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1864671738035977, 0.1509246103260666] ***
*** starting iteration: 2; err: [Inf, 0.1864671738035977, 0.1509246103260666] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1864671738035977, 0.1509246103260666, 0.1464019685080275] ***
*** starting iteration: 3; err: [Inf, 0.1864671738035977, 0.1509246103260666, 0.1464019685080275] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1864671738035977, 0.1509246103260666, 0.1464019685080275, 0.14548745844233782] ***
*** finished computation of 7 references, err: [Inf, 0.1864671738035977, 0.1509246103260666, 0.1464019685080275, 0.14548745844233782] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 77, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [49, 30, 0]]
** centroid: 2, normalized-entropy: 0.9578630237479795, [(1, 49), (2, 30)]
*** center 3: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [51, 6, 0]]
** centroid: 4, normalized-entropy: 0.48546076074591343, [(1, 51), (2, 6)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 70, 18]]
** centroid: 5, normalized-entropy: 0.7309263775906009, [(2, 70), (3, 18)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [67, 10, 0]]
** centroid: 6, normalized-entropy: 0.557081908103416, [(1, 67), (2, 10)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [66, 1, 0]]
** centroid: 7, normalized-entropy: 0.11190990870168394, [(1, 66), (2, 1)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20137193177919835] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20137193177919835, 0.14867624559253453] ***
*** starting iteration: 2; err: [Inf, 0.20137193177919835, 0.14867624559253453] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20137193177919835, 0.14867624559253453, 0.14356705161370337] ***
*** starting iteration: 3; err: [Inf, 0.20137193177919835, 0.14867624559253453, 0.14356705161370337] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20137193177919835, 0.14867624559253453, 0.14356705161370337, 0.14210765797831118] ***
*** starting iteration: 4; err: [Inf, 0.20137193177919835, 0.14867624559253453, 0.14356705161370337, 0.14210765797831118] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20137193177919835, 0.14867624559253453, 0.14356705161370337, 0.14210765797831118, 0.14173049144260585] ***
*** finished computation of 7 references, err: [Inf, 0.20137193177919835, 0.14867624559253453, 0.14356705161370337, 0.14210765797831118, 0.14173049144260585] ***
*** center 1: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [84, 6, 0]]
** centroid: 2, normalized-entropy: 0.3533593350214213, [(1, 84), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 48, 18]]
** centroid: 3, normalized-entropy: 0.8453509366224364, [(2, 48), (3, 18)]
*** center 4: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [59, 13, 0]]
** centroid: 5, normalized-entropy: 0.6812908868842175, [(1, 59), (2, 13)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [8, 59, 0]]
** centroid: 6, normalized-entropy: 0.52764232609436, [(1, 8), (2, 59)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 60, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20815819570422173] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20815819570422173, 0.15500626263953746] ***
*** starting iteration: 2; err: [Inf, 0.20815819570422173, 0.15500626263953746] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20815819570422173, 0.15500626263953746, 0.15035427821893246] ***
*** starting iteration: 3; err: [Inf, 0.20815819570422173, 0.15500626263953746, 0.15035427821893246] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20815819570422173, 0.15500626263953746, 0.15035427821893246, 0.15003828674554825] ***
*** finished computation of 7 references, err: [Inf, 0.20815819570422173, 0.15500626263953746, 0.15035427821893246, 0.15003828674554825] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [62, 33, 0]]
** centroid: 1, normalized-entropy: 0.9316958485118404, [(1, 62), (2, 33)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [55, 32, 0]]
** centroid: 2, normalized-entropy: 0.9489804585630239, [(1, 55), (2, 32)]
*** center 3: selecting labels [1] (freq >= 1) [from [46, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 44, 21]]
** centroid: 4, normalized-entropy: 0.9076961653608385, [(2, 44), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [5, 74, 0]]
** centroid: 5, normalized-entropy: 0.340373285759646, [(1, 5), (2, 74)]
*** center 6: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2002367807375267] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2002367807375267, 0.1503867112863809] ***
*** starting iteration: 2; err: [Inf, 0.2002367807375267, 0.1503867112863809] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2002367807375267, 0.1503867112863809, 0.14559654224663973] ***
*** starting iteration: 3; err: [Inf, 0.2002367807375267, 0.1503867112863809, 0.14559654224663973] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2002367807375267, 0.1503867112863809, 0.14559654224663973, 0.1442936305217445] ***
*** starting iteration: 4; err: [Inf, 0.2002367807375267, 0.1503867112863809, 0.14559654224663973, 0.1442936305217445] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2002367807375267, 0.1503867112863809, 0.14559654224663973, 0.1442936305217445, 0.1438585484046489] ***
*** finished computation of 7 references, err: [Inf, 0.2002367807375267, 0.1503867112863809, 0.14559654224663973, 0.1442936305217445, 0.1438585484046489] ***
*** center 1: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 56, 16]]
** centroid: 2, normalized-entropy: 0.7642045065086204, [(2, 56), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [74, 4, 0]]
** centroid: 3, normalized-entropy: 0.29181825659888555, [(1, 74), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [61, 30, 0]]
** centroid: 4, normalized-entropy: 0.9145891955877994, [(1, 61), (2, 30)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [21, 41, 0]]
** centroid: 5, normalized-entropy: 0.9235785996175947, [(1, 21), (2, 41)]
*** center 6: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 59, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19211983045749367] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19211983045749367, 0.15107879455108195] ***
*** starting iteration: 2; err: [Inf, 0.19211983045749367, 0.15107879455108195] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19211983045749367, 0.15107879455108195, 0.14670957696065307] ***
*** starting iteration: 3; err: [Inf, 0.19211983045749367, 0.15107879455108195, 0.14670957696065307] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19211983045749367, 0.15107879455108195, 0.14670957696065307, 0.1460517126210034] ***
*** finished computation of 7 references, err: [Inf, 0.19211983045749367, 0.15107879455108195, 0.14670957696065307, 0.1460517126210034] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [10, 71, 0]]
** centroid: 1, normalized-entropy: 0.5392163432092415, [(1, 10), (2, 71)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [50, 31, 0]]
** centroid: 2, normalized-entropy: 0.9599377175669783, [(1, 50), (2, 31)]
*** center 3: selecting labels [1] (freq >= 1) [from [48, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 68, 18]]
** centroid: 4, normalized-entropy: 0.7401470427139037, [(2, 68), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [72, 12, 0]]
** centroid: 5, normalized-entropy: 0.5916727785823274, [(1, 72), (2, 12)]
*** center 6: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [53, 4, 0]]
** centroid: 7, normalized-entropy: 0.36657801255334593, [(1, 53), (2, 4)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18283726912830026] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18283726912830026, 0.1508657748680562] ***
*** starting iteration: 2; err: [Inf, 0.18283726912830026, 0.1508657748680562] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18283726912830026, 0.1508657748680562, 0.14529491840768605] ***
*** starting iteration: 3; err: [Inf, 0.18283726912830026, 0.1508657748680562, 0.14529491840768605] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18283726912830026, 0.1508657748680562, 0.14529491840768605, 0.14430859822384082] ***
*** finished computation of 7 references, err: [Inf, 0.18283726912830026, 0.1508657748680562, 0.14529491840768605, 0.14430859822384082] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [110, 6, 0]]
** centroid: 1, normalized-entropy: 0.29367630985136944, [(1, 110), (2, 6)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [40, 14, 0]]
** centroid: 2, normalized-entropy: 0.8256265261578954, [(1, 40), (2, 14)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 42, 13]]
** centroid: 3, normalized-entropy: 0.7889406572966208, [(2, 42), (3, 13)]
*** center 4: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [7, 55, 0]]
** centroid: 5, normalized-entropy: 0.5086113313826895, [(1, 7), (2, 55)]
*** center 6: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [3, 64, 0]]
** centroid: 7, normalized-entropy: 0.26377743669413856, [(1, 3), (2, 64)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18703292485326528] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18703292485326528, 0.14995175370178185] ***
*** starting iteration: 2; err: [Inf, 0.18703292485326528, 0.14995175370178185] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18703292485326528, 0.14995175370178185, 0.1437936934948666] ***
*** starting iteration: 3; err: [Inf, 0.18703292485326528, 0.14995175370178185, 0.1437936934948666] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18703292485326528, 0.14995175370178185, 0.1437936934948666, 0.14268605562672018] ***
*** starting iteration: 4; err: [Inf, 0.18703292485326528, 0.14995175370178185, 0.1437936934948666, 0.14268605562672018] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18703292485326528, 0.14995175370178185, 0.1437936934948666, 0.14268605562672018, 0.1422683337572962] ***
*** finished computation of 7 references, err: [Inf, 0.18703292485326528, 0.14995175370178185, 0.1437936934948666, 0.14268605562672018, 0.1422683337572962] ***
*** center 1: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [86, 3, 0]]
** centroid: 2, normalized-entropy: 0.21265863988163503, [(1, 86), (2, 3)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 45, 16]]
** centroid: 3, normalized-entropy: 0.8301899714180444, [(2, 45), (3, 16)]
*** center 4: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [6, 65, 0]]
** centroid: 5, normalized-entropy: 0.4178642624458583, [(1, 6), (2, 65)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 67, 0]]
** centroid: 6, normalized-entropy: 0.18927843126120178, [(1, 2), (2, 67)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [43, 8, 0]]
** centroid: 7, normalized-entropy: 0.6267511370265896, [(1, 43), (2, 8)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18562845960911364] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18562845960911364, 0.15616058655967935] ***
*** starting iteration: 2; err: [Inf, 0.18562845960911364, 0.15616058655967935] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18562845960911364, 0.15616058655967935, 0.1507962383045815] ***
*** starting iteration: 3; err: [Inf, 0.18562845960911364, 0.15616058655967935, 0.1507962383045815] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18562845960911364, 0.15616058655967935, 0.1507962383045815, 0.149081247581169] ***
*** starting iteration: 4; err: [Inf, 0.18562845960911364, 0.15616058655967935, 0.1507962383045815, 0.149081247581169] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18562845960911364, 0.15616058655967935, 0.1507962383045815, 0.149081247581169, 0.1480778803061694] ***
*** starting iteration: 5; err: [Inf, 0.18562845960911364, 0.15616058655967935, 0.1507962383045815, 0.149081247581169, 0.1480778803061694] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18562845960911364, 0.15616058655967935, 0.1507962383045815, 0.149081247581169, 0.1480778803061694, 0.14775679200515152] ***
*** finished computation of 7 references, err: [Inf, 0.18562845960911364, 0.15616058655967935, 0.1507962383045815, 0.149081247581169, 0.1480778803061694, 0.14775679200515152] ***
*** center 1: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 45, 19]]
** centroid: 2, normalized-entropy: 0.877437311089633, [(2, 45), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [77, 5, 0]]
** centroid: 3, normalized-entropy: 0.3313056130577883, [(1, 77), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [72, 4, 0]]
** centroid: 4, normalized-entropy: 0.2974722489192896, [(1, 72), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [13, 53, 0]]
** centroid: 5, normalized-entropy: 0.7158259310602146, [(1, 13), (2, 53)]
*** center 6: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [6, 66, 0]]
** centroid: 7, normalized-entropy: 0.4138168503036336, [(1, 6), (2, 66)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19047993098851293] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19047993098851293, 0.15287347233388573] ***
*** starting iteration: 2; err: [Inf, 0.19047993098851293, 0.15287347233388573] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19047993098851293, 0.15287347233388573, 0.1480922777093947] ***
*** starting iteration: 3; err: [Inf, 0.19047993098851293, 0.15287347233388573, 0.1480922777093947] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19047993098851293, 0.15287347233388573, 0.1480922777093947, 0.14718809352070092] ***
*** finished computation of 7 references, err: [Inf, 0.19047993098851293, 0.15287347233388573, 0.1480922777093947, 0.14718809352070092] ***
*** center 1: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 47, 14]]
** centroid: 2, normalized-entropy: 0.7771529943226336, [(2, 47), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [66, 15, 0]]
** centroid: 3, normalized-entropy: 0.6912898694057888, [(1, 66), (2, 15)]
*** center 4: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [14, 65, 0]]
** centroid: 5, normalized-entropy: 0.6739468651941155, [(1, 14), (2, 65)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [5, 55, 0]]
** centroid: 6, normalized-entropy: 0.4138168503036336, [(1, 5), (2, 55)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [58, 4, 0]]
** centroid: 7, normalized-entropy: 0.3451173149449528, [(1, 58), (2, 4)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19762997500784696] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19762997500784696, 0.14830813405150547] ***
*** starting iteration: 2; err: [Inf, 0.19762997500784696, 0.14830813405150547] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19762997500784696, 0.14830813405150547, 0.14547981567215174] ***
*** starting iteration: 3; err: [Inf, 0.19762997500784696, 0.14830813405150547, 0.14547981567215174] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19762997500784696, 0.14830813405150547, 0.14547981567215174, 0.14493174094334244] ***
*** finished computation of 7 references, err: [Inf, 0.19762997500784696, 0.14830813405150547, 0.14547981567215174, 0.14493174094334244] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [53, 7, 0]]
** centroid: 1, normalized-entropy: 0.5197027865043053, [(1, 53), (2, 7)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [60, 18, 0]]
** centroid: 2, normalized-entropy: 0.7793498372920851, [(1, 60), (2, 18)]
*** center 3: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 56, 20]]
** centroid: 4, normalized-entropy: 0.8314743880097292, [(2, 56), (3, 20)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [34, 42, 0]]
** centroid: 5, normalized-entropy: 0.9919924034538556, [(1, 34), (2, 42)]
*** center 6: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 64, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1871479501184076] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1871479501184076, 0.14583013541158288] ***
*** starting iteration: 2; err: [Inf, 0.1871479501184076, 0.14583013541158288] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1871479501184076, 0.14583013541158288, 0.14189332851208747] ***
*** starting iteration: 3; err: [Inf, 0.1871479501184076, 0.14583013541158288, 0.14189332851208747] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1871479501184076, 0.14583013541158288, 0.14189332851208747, 0.14111087392270566] ***
*** finished computation of 7 references, err: [Inf, 0.1871479501184076, 0.14583013541158288, 0.14189332851208747, 0.14111087392270566] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [86, 3, 0]]
** centroid: 1, normalized-entropy: 0.21265863988163503, [(1, 86), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [65, 13, 0]]
** centroid: 2, normalized-entropy: 0.6500224216483541, [(1, 65), (2, 13)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 42, 17]]
** centroid: 3, normalized-entropy: 0.8663006754980497, [(2, 42), (3, 17)]
*** center 4: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [12, 52, 0]]
** centroid: 5, normalized-entropy: 0.6962122601251459, [(1, 12), (2, 52)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 68, 0]]
** centroid: 6, normalized-entropy: 0.18717625687320805, [(1, 2), (2, 68)]
*** center 7: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20724342905078083] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20724342905078083, 0.14745249551767484] ***
*** starting iteration: 2; err: [Inf, 0.20724342905078083, 0.14745249551767484] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20724342905078083, 0.14745249551767484, 0.1420857310964493] ***
*** starting iteration: 3; err: [Inf, 0.20724342905078083, 0.14745249551767484, 0.1420857310964493] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20724342905078083, 0.14745249551767484, 0.1420857310964493, 0.14137548449542373] ***
*** finished computation of 7 references, err: [Inf, 0.20724342905078083, 0.14745249551767484, 0.1420857310964493, 0.14137548449542373] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [68, 10, 0]]
** centroid: 1, normalized-entropy: 0.552495114325111, [(1, 68), (2, 10)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [92, 8, 0]]
** centroid: 2, normalized-entropy: 0.4021791902022729, [(1, 92), (2, 8)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 28, 23]]
** centroid: 3, normalized-entropy: 0.9930554830121975, [(2, 28), (3, 23)]
*** center 4: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [63, 20, 0]]
** centroid: 5, normalized-entropy: 0.7966394665488286, [(1, 63), (2, 20)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 65, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 60, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19582102959230543] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19582102959230543, 0.1488797368509695] ***
*** starting iteration: 2; err: [Inf, 0.19582102959230543, 0.1488797368509695] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19582102959230543, 0.1488797368509695, 0.14443144360836596] ***
*** starting iteration: 3; err: [Inf, 0.19582102959230543, 0.1488797368509695, 0.14443144360836596] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19582102959230543, 0.1488797368509695, 0.14443144360836596, 0.1438104499685578] ***
*** finished computation of 7 references, err: [Inf, 0.19582102959230543, 0.1488797368509695, 0.14443144360836596, 0.1438104499685578] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [73, 4, 0]]
** centroid: 1, normalized-entropy: 0.29461520565280713, [(1, 73), (2, 4)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 57, 24]]
** centroid: 2, normalized-entropy: 0.876716288999464, [(2, 57), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [53, 4, 0]]
** centroid: 3, normalized-entropy: 0.36657801255334593, [(1, 53), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [54, 50, 0]]
** centroid: 4, normalized-entropy: 0.9989326546260583, [(1, 54), (2, 50)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [10, 63, 0]]
** centroid: 5, normalized-entropy: 0.576291461217437, [(1, 10), (2, 63)]
*** center 6: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [48, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19146457208506762] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19146457208506762, 0.15442304649110883] ***
*** starting iteration: 2; err: [Inf, 0.19146457208506762, 0.15442304649110883] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19146457208506762, 0.15442304649110883, 0.15004100385494532] ***
*** starting iteration: 3; err: [Inf, 0.19146457208506762, 0.15442304649110883, 0.15004100385494532] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19146457208506762, 0.15442304649110883, 0.15004100385494532, 0.14858704301342368] ***
*** starting iteration: 4; err: [Inf, 0.19146457208506762, 0.15442304649110883, 0.15004100385494532, 0.14858704301342368] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19146457208506762, 0.15442304649110883, 0.15004100385494532, 0.14858704301342368, 0.1479794735647738] ***
*** finished computation of 7 references, err: [Inf, 0.19146457208506762, 0.15442304649110883, 0.15004100385494532, 0.14858704301342368, 0.1479794735647738] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [87, 9, 0]]
** centroid: 1, normalized-entropy: 0.44886448872302936, [(1, 87), (2, 9)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [63, 3, 0]]
** centroid: 2, normalized-entropy: 0.2667649878030262, [(1, 63), (2, 3)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 45, 19]]
** centroid: 3, normalized-entropy: 0.877437311089633, [(2, 45), (3, 19)]
*** center 4: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [15, 70, 0]]
** centroid: 5, normalized-entropy: 0.6722948170756378, [(1, 15), (2, 70)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 52, 0]]
** centroid: 6, normalized-entropy: 0.22853814395352806, [(1, 2), (2, 52)]
*** center 7: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18404455408547074] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18404455408547074, 0.1514598825071007] ***
*** starting iteration: 2; err: [Inf, 0.18404455408547074, 0.1514598825071007] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18404455408547074, 0.1514598825071007, 0.14708672178722917] ***
*** starting iteration: 3; err: [Inf, 0.18404455408547074, 0.1514598825071007, 0.14708672178722917] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18404455408547074, 0.1514598825071007, 0.14708672178722917, 0.1459071694649756] ***
*** starting iteration: 4; err: [Inf, 0.18404455408547074, 0.1514598825071007, 0.14708672178722917, 0.1459071694649756] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18404455408547074, 0.1514598825071007, 0.14708672178722917, 0.1459071694649756, 0.1454885459654033] ***
*** finished computation of 7 references, err: [Inf, 0.18404455408547074, 0.1514598825071007, 0.14708672178722917, 0.1459071694649756, 0.1454885459654033] ***
*** center 1: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 39, 18]]
** centroid: 2, normalized-entropy: 0.8997437586982626, [(2, 39), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [59, 5, 0]]
** centroid: 3, normalized-entropy: 0.3955378064564774, [(1, 59), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [68, 7, 0]]
** centroid: 4, normalized-entropy: 0.44749925503686355, [(1, 68), (2, 7)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [9, 63, 0]]
** centroid: 5, normalized-entropy: 0.5435644431995963, [(1, 9), (2, 63)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [4, 68, 0]]
** centroid: 6, normalized-entropy: 0.3095434291503252, [(1, 4), (2, 68)]
*** center 7: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19754249554127454] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19754249554127454, 0.151795375790447] ***
*** starting iteration: 2; err: [Inf, 0.19754249554127454, 0.151795375790447] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19754249554127454, 0.151795375790447, 0.1467494871993549] ***
*** starting iteration: 3; err: [Inf, 0.19754249554127454, 0.151795375790447, 0.1467494871993549] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19754249554127454, 0.151795375790447, 0.1467494871993549, 0.14581600169744344] ***
*** finished computation of 7 references, err: [Inf, 0.19754249554127454, 0.151795375790447, 0.1467494871993549, 0.14581600169744344] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [71, 5, 0]]
** centroid: 1, normalized-entropy: 0.35001059292688486, [(1, 71), (2, 5)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 33, 17]]
** centroid: 2, normalized-entropy: 0.9248187049730301, [(2, 33), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [90, 2, 0]]
** centroid: 3, normalized-entropy: 0.1510969705171136, [(1, 90), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [82, 3, 0]]
** centroid: 4, normalized-entropy: 0.22028326695127437, [(1, 82), (2, 3)]
*** center 5: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 60, 0]]
** centroid: 6, normalized-entropy: 0.2055925081850832, [(1, 2), (2, 60)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 70, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20725335010886192] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20725335010886192, 0.15241134655103086] ***
*** starting iteration: 2; err: [Inf, 0.20725335010886192, 0.15241134655103086] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20725335010886192, 0.15241134655103086, 0.14668458660878242] ***
*** starting iteration: 3; err: [Inf, 0.20725335010886192, 0.15241134655103086, 0.14668458660878242] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20725335010886192, 0.15241134655103086, 0.14668458660878242, 0.14588817968778311] ***
*** finished computation of 7 references, err: [Inf, 0.20725335010886192, 0.15241134655103086, 0.14668458660878242, 0.14588817968778311] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [56, 48, 0]]
** centroid: 1, normalized-entropy: 0.9957274520849256, [(1, 56), (2, 48)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [51, 21, 0]]
** centroid: 2, normalized-entropy: 0.8708644692353648, [(1, 51), (2, 21)]
*** center 3: selecting labels [1] (freq >= 1) [from [40, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 61, 15]]
** centroid: 4, normalized-entropy: 0.7166336117927455, [(2, 61), (3, 15)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [15, 64, 0]]
** centroid: 5, normalized-entropy: 0.7012065844539666, [(1, 15), (2, 64)]
*** center 6: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19820843547210099] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19820843547210099, 0.15622044770792126] ***
*** starting iteration: 2; err: [Inf, 0.19820843547210099, 0.15622044770792126] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19820843547210099, 0.15622044770792126, 0.15117702351789922] ***
*** starting iteration: 3; err: [Inf, 0.19820843547210099, 0.15622044770792126, 0.15117702351789922] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19820843547210099, 0.15622044770792126, 0.15117702351789922, 0.14915821470879018] ***
*** starting iteration: 4; err: [Inf, 0.19820843547210099, 0.15622044770792126, 0.15117702351789922, 0.14915821470879018] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19820843547210099, 0.15622044770792126, 0.15117702351789922, 0.14915821470879018, 0.1480488059539348] ***
*** starting iteration: 5; err: [Inf, 0.19820843547210099, 0.15622044770792126, 0.15117702351789922, 0.14915821470879018, 0.1480488059539348] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19820843547210099, 0.15622044770792126, 0.15117702351789922, 0.14915821470879018, 0.1480488059539348, 0.14766456250287593] ***
*** finished computation of 7 references, err: [Inf, 0.19820843547210099, 0.15622044770792126, 0.15117702351789922, 0.14915821470879018, 0.1480488059539348, 0.14766456250287593] ***
*** center 1: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [61, 17, 0]]
** centroid: 2, normalized-entropy: 0.7564041945982506, [(1, 61), (2, 17)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 60, 18]]
** centroid: 3, normalized-entropy: 0.7793498372920851, [(2, 60), (3, 18)]
*** center 4: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [42, 43, 0]]
** centroid: 5, normalized-entropy: 0.9999001572094882, [(1, 42), (2, 43)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [10, 53, 0]]
** centroid: 6, normalized-entropy: 0.6312630180916119, [(1, 10), (2, 53)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [64, 6, 0]]
** centroid: 7, normalized-entropy: 0.4220005168831531, [(1, 64), (2, 6)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19642888448014856] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19642888448014856, 0.14805280156061054] ***
*** starting iteration: 2; err: [Inf, 0.19642888448014856, 0.14805280156061054] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19642888448014856, 0.14805280156061054, 0.14386859858594836] ***
*** starting iteration: 3; err: [Inf, 0.19642888448014856, 0.14805280156061054, 0.14386859858594836] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19642888448014856, 0.14805280156061054, 0.14386859858594836, 0.14336304377764464] ***
*** finished computation of 7 references, err: [Inf, 0.19642888448014856, 0.14805280156061054, 0.14386859858594836, 0.14336304377764464] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [56, 18, 0]]
** centroid: 1, normalized-entropy: 0.8003922080453356, [(1, 56), (2, 18)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [61, 5, 0]]
** centroid: 2, normalized-entropy: 0.38705142139219795, [(1, 61), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 66, 18]]
** centroid: 3, normalized-entropy: 0.7495952572594798, [(2, 66), (3, 18)]
*** center 4: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [55, 28, 0]]
** centroid: 5, normalized-entropy: 0.9222596474738021, [(1, 55), (2, 28)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [4, 66, 0]]
** centroid: 6, normalized-entropy: 0.3159971329784246, [(1, 4), (2, 66)]
*** center 7: selecting labels [1] (freq >= 1) [from [54, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19271880870871247] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19271880870871247, 0.15424154199846088] ***
*** starting iteration: 2; err: [Inf, 0.19271880870871247, 0.15424154199846088] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19271880870871247, 0.15424154199846088, 0.1508716429376509] ***
*** starting iteration: 3; err: [Inf, 0.19271880870871247, 0.15424154199846088, 0.1508716429376509] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19271880870871247, 0.15424154199846088, 0.1508716429376509, 0.15025117400940508] ***
*** finished computation of 7 references, err: [Inf, 0.19271880870871247, 0.15424154199846088, 0.1508716429376509, 0.15025117400940508] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [44, 44, 0]]
** centroid: 1, normalized-entropy: 1.0, [(1, 44), (2, 44)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [63, 22, 0]]
** centroid: 2, normalized-entropy: 0.8249658680139929, [(1, 63), (2, 22)]
*** center 3: selecting labels [1] (freq >= 1) [from [39, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 74, 19]]
** centroid: 4, normalized-entropy: 0.7304472862481346, [(2, 74), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [19, 44, 0]]
** centroid: 5, normalized-entropy: 0.8832225588099292, [(1, 19), (2, 44)]
*** center 6: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
finished with 11 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 370,3 => 36,1 => 594), Dict(2 => 386,3 => 48,1 => 566))
[ Info: ===== scores for single classifier: {"micro_f1":0.9500000000000001,"precision":0.95,"recall":0.95,"macro_recall":0.9578815928929901,"macro_f1":0.9068803599242473,"accuracy":0.95,"class_f1":{"2":0.9355670103092784,"3":0.8103448275862069,"1":0.9747292418772564},"class_precision":{"2":0.9307692307692308,"3":0.6911764705882353,"1":0.996309963099631},"class_recall":{"2":0.9404145077720207,"3":0.9791666666666666,"1":0.9540636042402827}}
[ Info: ===== scores for 1: {"micro_f1":0.963,"precision":0.963,"recall":0.963,"macro_recall":0.9660869182681647,"macro_f1":0.96671466977189,"accuracy":0.963,"class_f1":{"2":0.9517601043024773,"3":0.9791666666666666,"1":0.969217238346526},"class_precision":{"2":0.958005249343832,"3":0.9791666666666666,"1":0.9649737302977233},"class_recall":{"2":0.9455958549222798,"3":0.9791666666666666,"1":0.9734982332155477}}
[ Info: ===== scores for 5: {"micro_f1":0.97,"precision":0.97,"recall":0.97,"macro_recall":0.9715825638615785,"macro_f1":0.9571200065723389,"accuracy":0.97,"class_f1":{"2":0.961038961038961,"3":0.9306930693069307,"1":0.9796279893711248},"class_precision":{"2":0.9635416666666666,"3":0.8867924528301887,"1":0.9822380106571936},"class_recall":{"2":0.9585492227979274,"3":0.9791666666666666,"1":0.9770318021201413}}
[ Info: ===== scores for 7: {"micro_f1":0.979,"precision":0.979,"recall":0.979,"macro_recall":0.9782560657565235,"macro_f1":0.9636814559011991,"accuracy":0.979,"class_f1":{"2":0.9727626459143968,"3":0.9306930693069307,"1":0.9875886524822696},"class_precision":{"2":0.974025974025974,"3":0.8867924528301887,"1":0.9911032028469751},"class_recall":{"2":0.9715025906735751,"3":0.9791666666666666,"1":0.9840989399293286}}
[ Info: ===== scores for 9: {"micro_f1":0.982,"precision":0.982,"recall":0.982,"macro_recall":0.9805721096240422,"macro_f1":0.9658721937404237,"accuracy":0.982,"class_f1":{"2":0.9766839378238342,"3":0.9306930693069307,"1":0.9902395740905058},"class_precision":{"2":0.9766839378238342,"3":0.8867924528301887,"1":0.9946524064171123},"class_recall":{"2":0.9766839378238342,"3":0.9791666666666666,"1":0.9858657243816255}}
[ Info: ===== scores for 11: {"micro_f1":0.978,"precision":0.978,"recall":0.978,"macro_recall":0.9771178781905361,"macro_f1":0.9629282121680339,"accuracy":0.978,"class_f1":{"2":0.9713541666666667,"3":0.9306930693069307,"1":0.986737400530504},"class_precision":{"2":0.9764397905759162,"3":0.8867924528301887,"1":0.9876106194690265},"class_recall":{"2":0.966321243523316,"3":0.9791666666666666,"1":0.9858657243816255}}
(score = 0.959, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.959, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.963, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.963, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.96, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.96, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.962, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.962, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.967, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.967, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.97, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.97, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.969, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.969, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.979, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.979, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.979,"k":7,"kernel":"direct_kernel","dist":"l2_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.979,"precision":0.979,"recall":0.979,"macro_recall":0.9782560657565235,"macro_f1":0.9636814559011991,"accuracy":0.979,"class_f1":{"2":0.9727626459143968,"3":0.9306930693069307,"1":0.9875886524822696},"class_precision":{"2":0.974025974025974,"3":0.8867924528301887,"1":0.9911032028469751},"class_recall":{"2":0.9715025906735751,"3":0.9791666666666666,"1":0.9840989399293286}}
Test Summary: | Pass  Total
AKNC          |    8      8
[43, 1, 2, 2, 3, 7, 1, 1, 11, 4, 6, 4, 16, 3, 1, 22, 5, 18, 6, 2, 3, 29, 9, 5, 18, 2, 1, 21, 4, 3, 11, 4, 5, 7, 1, 12, 6, 11, 21, 3, 11, 13, 1, 13, 3, 21, 6, 11, 3, 36, 6, 26, 22, 3, 13, 3, 13, 5, 4, 22, 44, 9, 3, 38, 34, 10, 8, 39, 25, 11, 10, 2, 65, 71, 2, 5, 5, 17, 4, 11, 15, 14, 27, 12, 14, 15, 19, 11, 1215, 22, 3, 41, 27, 20, 22, 9, 2, 87, 16, 2, 7, 30, 13, 24, 94, 2, 11, 8, 2, 114, 8, 9, 36, 2, 39, 16, 61, 12, 4, 7, 43, 7, 44, 20, 7, 20, 14, 6, 2, 28, 96, 75, 17, 27, 3, 5, 16, 5, 8, 17, 43, 17, 125, 40, 13, 143, 50, 83, 5, 11, 83, 38, 21, 21, 1, 20, 20, 8, 150, 61, 282, 10, 67, 15, 25, 4, 8, 55, 95, 13, 251, 2, 5, 1, 14, 27, 5, 76, 37, 30, 26, 28, 49, 9, 12, 2, 206, 12, 19, 54, 1, 24, 26, 11, 13, 59, 22, 14, 132, 38, 20, 11, 84, 21, 4, 3, 9, 24, 4, 27, 38, 16, 47, 39, 23, 2, 25, 26, 33, 31, 38, 10, 8, 179, 18, 26, 20, 40, 82, 5, 5, 6, 2, 52, 30, 32, 48, 6, 43, 25, 224, 20, 2, 80, 52, 5, 9, 5, 30, 28, 2, 14, 166, 43, 6, 4, 32, 120, 150, 2, 3, 22, 6, 227, 7, 5, 14, 14, 43, 43, 42, 3, 66, 37, 125, 13, 18, 25, 28, 41, 48, 2, 89, 16, 46, 31, 6, 304, 6, 16, 17, 14, 10, 49, 4, 97, 9, 6, 18, 8]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6629999999999998, speedup = 0.2641992078088827, eval_ratio = 0.075187)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.4293619791666667,"recall":0.4157986111111111,"f1":null,"seconds":0.0003569014370441437,"exhaustive_search_seconds":0.00038925744593143463,"evaluations":529.3046875,"distances_sum":1797.395780435202}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5789930555555555,"recall":0.5772569444444444,"f1":0.5779513888888889,"seconds":0.00027757324278354645,"exhaustive_search_seconds":0.00038925744593143463,"evaluations":658.5625,"distances_sum":1701.9833017226213}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6710069444444441,"recall":0.6710069444444441,"f1":0.6710069444444441,"seconds":0.00037454068660736084,"exhaustive_search_seconds":0.00038925744593143463,"evaluations":803.265625,"distances_sum":1660.2053449549985}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7395833333333326,"recall":0.7395833333333326,"f1":0.7395833333333326,"seconds":0.0004394426941871643,"exhaustive_search_seconds":0.00038925744593143463,"evaluations":896.1875,"distances_sum":1634.547508754405}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7925347222222214,"recall":0.7925347222222214,"f1":0.7925347222222214,"seconds":0.000488748773932457,"exhaustive_search_seconds":0.00038925744593143463,"evaluations":964.734375,"distances_sum":1617.861838654568}
KCenters.DeloneInvIndex> reached performance {"precision":0.8246527777777769,"recall":0.8246527777777769,"f1":0.8246527777777769,"seconds":0.0005589742213487625,"exhaustive_search_seconds":0.00038925744593143463,"evaluations":1056.125,"distances_sum":1606.4943637326137}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8310000000000001, speedup = 0.6167715952226646, eval_ratio = 0.111417)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
