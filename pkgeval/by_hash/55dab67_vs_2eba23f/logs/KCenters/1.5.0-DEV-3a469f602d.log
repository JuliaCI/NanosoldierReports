Julia Version 1.5.0-DEV.278
Commit 3a469f602d (2020-02-17 02:20 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed Missings ──────────────────── v0.4.3
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed OrderedCollections ────────── v1.1.0
  Installed KCenters ──────────────────── v0.2.1
  Installed Tables ────────────────────── v1.0.1
  Installed MLDataUtils ───────────────── v0.5.0
  Installed MLDataPattern ─────────────── v0.5.0
  Installed StatsBase ─────────────────── v0.32.1
  Installed MappedArrays ──────────────── v0.2.2
  Installed Reexport ──────────────────── v0.2.0
  Installed PooledArrays ──────────────── v0.5.3
  Installed JSON ──────────────────────── v0.21.0
  Installed MLLabelUtils ──────────────── v0.5.1
  Installed CategoricalArrays ─────────── v0.7.7
  Installed InvertedIndices ───────────── v1.0.0
  Installed LearnBase ─────────────────── v0.2.2
  Installed DataAPI ───────────────────── v1.1.0
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed Parsers ───────────────────── v0.3.11
  Installed Compat ────────────────────── v3.5.0
  Installed TableTraits ───────────────── v1.0.0
  Installed DataValueInterfaces ───────── v1.0.0
  Installed DataFrames ────────────────── v0.20.2
  Installed DataStructures ────────────── v0.17.9
  Installed SimilaritySearch ──────────── v0.3.19
   Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.1
   Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.5.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.9
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.1
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.0
  [cc2ba9b6] + MLDataUtils v0.5.0
  [66a33bbf] + MLLabelUtils v0.5.1
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.11
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.1
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.1
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
    Testing KCenters
Status `/tmp/jl_YAzZ6X/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.5.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.9
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.1
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.0
  [cc2ba9b6] MLDataUtils v0.5.0
  [66a33bbf] MLLabelUtils v0.5.1
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v0.3.11
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.1
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.1
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.9326678744951884
[ Info: 0.8326150393486023
[ Info: 0.5539093809823196
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.33725063150127726
mean(cdnet.distances) = 0.40274141922593115
mean(crand.distances) = 0.3440931696196397
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6875,"f1":0.8050522394272402,"seconds":3.4458935260772705e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":7.8515625,"distances_sum":2019.869389582369}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4443359375, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.4443359375,"f1":null,"seconds":2.909451723098755e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":6.6015625,"distances_sum":1192.7282303918976}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78515625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.78515625,"f1":0.8735379204129211,"seconds":3.6135315895080566e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.3828125,"distances_sum":2366.361370646241}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.78515625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.78515625,"f1":0.8735379204129211,"seconds":3.6135315895080566e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.3828125,"distances_sum":2366.361370646241}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9620020604395609,"seconds":7.202848792076111e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.90625,"distances_sum":3091.278896880214}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.9278788919413927,"seconds":6.726011633872986e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.7890625,"distances_sum":2813.8948969976154}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9326171875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9620020604395609,"seconds":7.202848792076111e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.90625,"distances_sum":3091.278896880214}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9740728021978027,"seconds":6.996095180511475e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.984375,"distances_sum":3179.880568157059}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9625972985347993,"seconds":6.342306733131409e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.90625,"distances_sum":3116.927270887084}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.953125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9740728021978027,"seconds":6.996095180511475e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.984375,"distances_sum":3179.880568157059}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.953125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9740728021978027,"seconds":6.996095180511475e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.984375,"distances_sum":3179.880568157059}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.564453125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.564453125,"f1":0.7054174991674997,"seconds":4.438683390617371e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":7.4609375,"distances_sum":1454.390371798292}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6513671875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6513671875,"f1":0.7787478146853154,"seconds":5.206093192100525e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.359375,"distances_sum":1729.8542941540038}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.560546875, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.560546875,"f1":0.7068591131091135,"seconds":4.6193599700927734e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":7.4453125,"distances_sum":1450.12111872416}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6513671875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6513671875,"f1":0.7787478146853154,"seconds":5.206093192100525e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.359375,"distances_sum":1729.8542941540038}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.845703125, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.845703125,"f1":0.9101622335997344,"seconds":5.807727575302124e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.71875,"distances_sum":2476.9471604310397}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9515567765567772,"seconds":6.1318278312683105e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.9375,"distances_sum":2797.4348948747456}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.849609375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.849609375,"f1":0.9132986804861813,"seconds":5.641952157020569e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.6953125,"distances_sum":2492.73406865264}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.9289408508158513,"seconds":6.036832928657532e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.84375,"distances_sum":2614.1658217403096}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9150390625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9150390625,"f1":0.9515567765567772,"seconds":6.1318278312683105e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.9375,"distances_sum":2797.4348948747456}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.964548992673993,"seconds":5.736947059631348e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.96875,"distances_sum":2908.6985567891443}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9734775641025644,"seconds":6.8694353103637695e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.984375,"distances_sum":2975.0778217930942}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9706673534798539,"seconds":5.688518285751343e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.9765625,"distances_sum":2933.406744624287}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9521484375,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9734775641025644,"seconds":6.8694353103637695e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.984375,"distances_sum":2975.0778217930942}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9521484375,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9734775641025644,"seconds":6.8694353103637695e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.984375,"distances_sum":2975.0778217930942}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2392578125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2392578125,"f1":null,"seconds":3.1944364309310913e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":5.96875,"distances_sum":637.5359037357442}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4287109375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4287109375,"f1":null,"seconds":4.652887582778931e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":6.171875,"distances_sum":1001.1390464220084}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.248046875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.248046875,"f1":null,"seconds":3.460794687271118e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":6.1484375,"distances_sum":661.1804099791696}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.671875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.671875,"f1":0.7945762570762579,"seconds":4.621222615242004e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":7.828125,"distances_sum":1745.5885975309252}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.671875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.671875,"f1":0.7945762570762579,"seconds":4.621222615242004e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":7.828125,"distances_sum":1745.5885975309252}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6806640625, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6806640625,"f1":0.7981643356643363,"seconds":4.544854164123535e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":7.859375,"distances_sum":1803.864147928614}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7763671875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7763671875,"f1":0.8671193389943398,"seconds":4.978850483894348e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.265625,"distances_sum":2112.0612617756665}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7666015625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7666015625,"f1":0.8594478438228448,"seconds":4.718080163002014e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.2890625,"distances_sum":2095.8713944717274}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.763671875,"f1":0.8577073967698977,"seconds":4.893168807029724e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.28125,"distances_sum":2077.2004082480867}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7763671875,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7763671875,"f1":0.8671193389943398,"seconds":4.978850483894348e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.265625,"distances_sum":2112.0612617756665}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8173828125, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8173828125,"f1":0.8936417748917757,"seconds":5.299225449562073e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.578125,"distances_sum":2262.1650553350482}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9675824175824181,"seconds":5.763024091720581e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.90625,"distances_sum":2859.7570041879007}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.841796875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.841796875,"f1":0.9066168206793215,"seconds":5.418434739112854e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.59375,"distances_sum":2417.7958981811107}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.948034257409258,"seconds":5.33275306224823e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.8046875,"distances_sum":2735.0973349775945}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8349609375, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.8349609375,"f1":0.904704670329671,"seconds":5.299225449562073e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.640625,"distances_sum":2357.025803370876}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84765625, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.84765625,"f1":0.9120566933066939,"seconds":5.465000867843628e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.65625,"distances_sum":2411.811000417695}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94140625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9675824175824181,"seconds":5.763024091720581e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.90625,"distances_sum":2859.7570041879007}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94140625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9675824175824181,"seconds":5.763024091720581e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.90625,"distances_sum":2859.7570041879007}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2685546875,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2685546875,"f1":null,"seconds":3.5427510738372803e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":6.4921875,"distances_sum":689.4840062299304}}, beam: 2, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.2685546875,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2685546875,"f1":null,"seconds":3.5427510738372803e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":6.4921875,"distances_sum":689.4840062299304}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.654296875, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.654296875,"f1":0.7765824453324461,"seconds":4.82611358165741e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":7.8359375,"distances_sum":1198.7410481495492}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2314453125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2314453125,"f1":null,"seconds":3.8035213947296143e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":6.4140625,"distances_sum":458.84664285099524}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7255859375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.7255859375,"f1":0.8323723151848161,"seconds":4.706904292106628e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.1640625,"distances_sum":1411.408867330718}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7255859375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.7255859375,"f1":0.8323723151848161,"seconds":4.706904292106628e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.1640625,"distances_sum":1411.408867330718}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9441105769230776,"seconds":5.54695725440979e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.9453125,"distances_sum":1934.8034989716782}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7587890625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7587890625,"f1":0.8513333888333896,"seconds":4.8764050006866455e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.296875,"distances_sum":1491.5190493046352}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9625400641025648,"seconds":5.4817646741867065e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.921875,"distances_sum":2070.6767203847503}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9503777472527479,"seconds":5.684792995452881e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.9296875,"distances_sum":1994.1026249348179}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9326171875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9625400641025648,"seconds":5.4817646741867065e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.921875,"distances_sum":2070.6767203847503}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9638671875, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9638671875,"f1":0.9802827380952384,"seconds":6.230548024177551e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.9921875,"distances_sum":2174.6751432732617}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9696116383616389,"seconds":5.945563316345215e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.9453125,"distances_sum":2117.8772937781937}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9638671875,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9638671875,"f1":0.9802827380952384,"seconds":6.230548024177551e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.9921875,"distances_sum":2174.6751432732617}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9638671875,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9638671875,"f1":0.9802827380952384,"seconds":6.230548024177551e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.9921875,"distances_sum":2174.6751432732617}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7841796875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7841796875,"f1":0.8690366924741932,"seconds":5.302950739860535e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.703125,"distances_sum":1676.591241651808}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.21484375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.21484375,"f1":null,"seconds":3.2614916563034058e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":6.59375,"distances_sum":427.1988295523351}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7841796875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7841796875,"f1":0.8690366924741932,"seconds":5.302950739860535e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.703125,"distances_sum":1676.591241651808}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9579670329670334,"seconds":5.925074219703674e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.921875,"distances_sum":2177.1188983211487}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8076171875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.8076171875,"f1":0.8856268731268739,"seconds":5.252659320831299e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.84375,"distances_sum":1759.276808123041}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.92578125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.92578125,"f1":0.9579670329670334,"seconds":5.925074219703674e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.921875,"distances_sum":2177.1188983211487}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9610691391941397,"seconds":5.68293035030365e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.9453125,"distances_sum":2208.8298700662717}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9746680402930408,"seconds":3.834255039691925e-5,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.984375,"distances_sum":2273.9797443994485}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9708161630036635,"seconds":5.95487654209137e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.9375,"distances_sum":2266.265295132103}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9541015625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9746680402930408,"seconds":3.834255039691925e-5,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.984375,"distances_sum":2273.9797443994485}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9541015625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9746680402930408,"seconds":3.834255039691925e-5,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.984375,"distances_sum":2273.9797443994485}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5078125, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5078125,"f1":null,"seconds":4.30084764957428e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":6.671875,"distances_sum":1055.505515623988}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5078125,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.5078125,"f1":null,"seconds":4.30084764957428e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":6.671875,"distances_sum":1055.505515623988}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.853515625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.853515625,"f1":0.915994422244423,"seconds":5.982816219329834e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.59375,"distances_sum":1923.7678010872187}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7451171875, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.7451171875,"f1":0.843645417082918,"seconds":5.338340997695923e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":7.9921875,"distances_sum":1606.3641357332533}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.853515625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.853515625,"f1":0.915994422244423,"seconds":5.982816219329834e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.59375,"distances_sum":1923.7678010872187}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9636561355311359,"seconds":6.187707185745239e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.921875,"distances_sum":2212.626360707979}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.9357600732600736,"seconds":6.116926670074463e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.6484375,"distances_sum":2075.9818255142254}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9345703125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9345703125,"f1":0.9636561355311359,"seconds":6.187707185745239e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.921875,"distances_sum":2212.626360707979}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9345703125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9345703125,"f1":0.9636561355311359,"seconds":6.187707185745239e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.921875,"distances_sum":2212.626360707979}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7890625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7890625,"f1":0.8729858682983692,"seconds":5.45009970664978e-6,"exhaustive_search_seconds":1.1790543794631958e-6,"evaluations":8.640625,"distances_sum":1772.147942960545}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.533203125, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.533203125,"f1":null,"seconds":4.636123776435852e-6,"exhaustive_search_seconds":1.1790543794631958e-6,"evaluations":7.6796875,"distances_sum":1116.1628552466757}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7890625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7890625,"f1":0.8729858682983692,"seconds":5.45009970664978e-6,"exhaustive_search_seconds":1.1790543794631958e-6,"evaluations":8.640625,"distances_sum":1772.147942960545}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9434268856143859,"seconds":6.098300218582153e-6,"exhaustive_search_seconds":1.1790543794631958e-6,"evaluations":8.8046875,"distances_sum":2261.0461322868623}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9464400183150192,"seconds":6.211921572685242e-6,"exhaustive_search_seconds":1.1790543794631958e-6,"evaluations":8.8828125,"distances_sum":2254.175781216399}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9072265625,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.9072265625,"f1":0.9464400183150192,"seconds":6.211921572685242e-6,"exhaustive_search_seconds":1.1790543794631958e-6,"evaluations":8.8828125,"distances_sum":2254.175781216399}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.967788461538462,"seconds":6.984919309616089e-6,"exhaustive_search_seconds":1.1790543794631958e-6,"evaluations":8.9375,"distances_sum":2372.2966516276597}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9710393772893777,"seconds":6.24731183052063e-6,"exhaustive_search_seconds":1.1790543794631958e-6,"evaluations":8.9140625,"distances_sum":2385.304209973897}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9693853021978025,"seconds":6.187707185745239e-6,"exhaustive_search_seconds":1.1790543794631958e-6,"evaluations":8.9609375,"distances_sum":2373.1583954169723}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9468635531135539,"seconds":5.945563316345215e-6,"exhaustive_search_seconds":1.1790543794631958e-6,"evaluations":8.8359375,"distances_sum":2267.0797882543693}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9710393772893777,"seconds":6.24731183052063e-6,"exhaustive_search_seconds":1.1790543794631958e-6,"evaluations":8.9140625,"distances_sum":2385.304209973897}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9710393772893777,"seconds":6.24731183052063e-6,"exhaustive_search_seconds":1.1790543794631958e-6,"evaluations":8.9140625,"distances_sum":2385.304209973897}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7548828125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7548828125,"f1":0.8494260947385956,"seconds":5.114823579788208e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.328125,"distances_sum":1692.8851607334734}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7548828125,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7548828125,"f1":0.8494260947385956,"seconds":5.114823579788208e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.328125,"distances_sum":1692.8851607334734}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9568853021978028,"seconds":6.010755896568298e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.90625,"distances_sum":2305.666384683927}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.923828125,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.9568853021978028,"seconds":6.010755896568298e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.90625,"distances_sum":2305.666384683927}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":6,"bsize":11}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9653331043956048,"seconds":6.463378667831421e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.9375,"distances_sum":2364.4174762553}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9651442307692311,"seconds":5.817040801048279e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.8828125,"distances_sum":2370.976650161089}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.958984375, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.958984375,"f1":0.9773637820512826,"seconds":6.537884473800659e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.953125,"distances_sum":2442.7522838985024}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9567021520146524,"seconds":5.580484867095947e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.8359375,"distances_sum":2325.8721138549513}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.958984375,"state":{"ssize":7,"bsize":11},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9773637820512826,"seconds":6.537884473800659e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.953125,"distances_sum":2442.7522838985024}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.958984375,"state":{"ssize":7,"bsize":11},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9773637820512826,"seconds":6.537884473800659e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.953125,"distances_sum":2442.7522838985024}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.765625,"f1":0.8586486430236439,"seconds":5.23589551448822e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.2734375,"distances_sum":1748.1111463828224}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.765625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.765625,"f1":0.8586486430236439,"seconds":5.23589551448822e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.2734375,"distances_sum":1748.1111463828224}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.765625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.765625,"f1":0.8586486430236439,"seconds":5.23589551448822e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.2734375,"distances_sum":1748.1111463828224}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.765625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.765625,"f1":0.8586486430236439,"seconds":5.23589551448822e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.2734375,"distances_sum":1748.1111463828224}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1630859375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1630859375,"f1":null,"seconds":3.077089786529541e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":4.5234375,"distances_sum":409.8306487912236}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.775390625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.775390625,"f1":0.8614638833388841,"seconds":5.453824996948242e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.75,"distances_sum":1833.7024899513704}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.775390625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.775390625,"f1":0.8614638833388841,"seconds":5.453824996948242e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.75,"distances_sum":1833.7024899513704}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8291015625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8291015625,"f1":0.8950981310356316,"seconds":5.660578608512878e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.6484375,"distances_sum":2066.3504610901914}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9674908424908428,"seconds":5.731359124183655e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.8671875,"distances_sum":2500.752660639228}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9314133782883788,"seconds":5.822628736495972e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.7734375,"distances_sum":2265.5994589648617}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9423828125,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9674908424908428,"seconds":5.731359124183655e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.8671875,"distances_sum":2500.752660639228}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.958984375, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.958984375,"f1":0.9777529761904766,"seconds":6.021931767463684e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.9609375,"distances_sum":2547.567814061118}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":6,"bsize":12}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9725274725274728,"seconds":6.012618541717529e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.9453125,"distances_sum":2497.65804038787}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.958984375,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9777529761904766,"seconds":6.021931767463684e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.9609375,"distances_sum":2547.567814061118}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.958984375,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9777529761904766,"seconds":6.021931767463684e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.9609375,"distances_sum":2547.567814061118}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.1455078125,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.1455078125,"f1":null,"seconds":2.86102294921875e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":4.5859375,"distances_sum":353.32854269913327}}, beam: 2, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.1455078125,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.1455078125,"f1":null,"seconds":2.86102294921875e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":4.5859375,"distances_sum":353.32854269913327}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5693359375, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.5693359375,"f1":0.7094544344544351,"seconds":4.45730984210968e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":7.203125,"distances_sum":1356.1352216218504}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2421875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2421875,"f1":null,"seconds":4.47593629360199e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":6.75,"distances_sum":563.2777301400597}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.240234375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.240234375,"f1":null,"seconds":3.5688281059265137e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":6.828125,"distances_sum":566.0906568259346}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5693359375,"state":{"ssize":4,"bsize":3},"perf":{"precision":1.0,"recall":0.5693359375,"f1":0.7094544344544351,"seconds":4.45730984210968e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":7.203125,"distances_sum":1356.1352216218504}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.642578125, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.642578125,"f1":0.7726330960705969,"seconds":5.0514936447143555e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.203125,"distances_sum":1582.4925650155917}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8505859375, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8505859375,"f1":0.9144974816849825,"seconds":6.459653377532959e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.578125,"distances_sum":2330.5823420329425}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.763671875,"f1":0.8574899059274067,"seconds":4.947185516357422e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.3671875,"distances_sum":1964.9739531172008}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8505859375,"state":{"ssize":2,"bsize":6},"perf":{"precision":1.0,"recall":0.8505859375,"f1":0.9144974816849825,"seconds":6.459653377532959e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.578125,"distances_sum":2330.5823420329425}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.96229967948718,"seconds":6.768852472305298e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.9140625,"distances_sum":2735.4863265682834}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8857421875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8857421875,"f1":0.9345326548451556,"seconds":5.727633833885193e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.9140625,"distances_sum":2527.2772289272}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9621165293040298,"seconds":5.7853758335113525e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.8828125,"distances_sum":2749.0385487369167}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9428857600732607,"seconds":5.770474672317505e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.859375,"distances_sum":2587.951345193361}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.955196886446887,"seconds":5.764886736869812e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.8125,"distances_sum":2704.8370981419407}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.93359375,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9621165293040298,"seconds":5.7853758335113525e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.8828125,"distances_sum":2749.0385487369167}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.93359375,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9621165293040298,"seconds":5.7853758335113525e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.8828125,"distances_sum":2749.0385487369167}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.572265625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.572265625,"f1":0.7139065795315802,"seconds":4.492700099945068e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":7.296875,"distances_sum":1376.662485053373}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7783203125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7783203125,"f1":0.8684294871794881,"seconds":5.1818788051605225e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.4296875,"distances_sum":2030.8195710679995}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4716796875, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.4716796875,"f1":null,"seconds":4.082918167114258e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":6.765625,"distances_sum":1095.0507653248958}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7783203125,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7783203125,"f1":0.8684294871794881,"seconds":5.1818788051605225e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.4296875,"distances_sum":2030.8195710679995}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8740234375,"f1":0.9280422702297708,"seconds":5.8300793170928955e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.859375,"distances_sum":2488.1910256957926}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8330078125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8330078125,"f1":0.9041468947718955,"seconds":5.6140124797821045e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.609375,"distances_sum":2290.4706885767046}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9495967574092581,"seconds":6.116926670074463e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.9453125,"distances_sum":2630.0263177103025}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.779296875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.779296875,"f1":0.8676661879786888,"seconds":5.278736352920532e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.359375,"distances_sum":2065.078106014478}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9140625,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.9495967574092581,"seconds":6.116926670074463e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.9453125,"distances_sum":2630.0263177103025}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9586595695970699,"seconds":6.148591637611389e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.9140625,"distances_sum":2725.2136837541934}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9707245879120883,"seconds":6.44288957118988e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.984375,"distances_sum":2802.9693621219767}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9710596694971698,"seconds":6.32554292678833e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.9453125,"distances_sum":2796.93276307846}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":8,"bsize":10}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9695169413919418,"seconds":6.3050538301467896e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.953125,"distances_sum":2800.5088878171173}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9649381868131872,"seconds":6.269663572311401e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.9609375,"distances_sum":2740.33344359358}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9765453296703301,"seconds":6.252899765968323e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.984375,"distances_sum":2836.1572727751436}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9526671245421249,"seconds":5.967915058135986e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.9609375,"distances_sum":2674.8172978129783}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9598614926739932,"seconds":6.9141387939453125e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.9296875,"distances_sum":2723.563265458868}, best_list's length: 15, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.95703125,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9765453296703301,"seconds":6.252899765968323e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.984375,"distances_sum":2836.1572727751436}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.95703125,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9765453296703301,"seconds":6.252899765968323e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.984375,"distances_sum":2836.1572727751436}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.361328125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.361328125,"f1":null,"seconds":3.87243926525116e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":6.3515625,"distances_sum":856.5313555328694}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6640625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6640625,"f1":0.7842693764568772,"seconds":4.8782676458358765e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":7.9296875,"distances_sum":1605.2917940519483}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2080078125, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2080078125,"f1":null,"seconds":3.4403055906295776e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":6.171875,"distances_sum":482.38624445064414}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.78125,"f1":0.8689487595737603,"seconds":5.1353126764297485e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.234375,"distances_sum":1962.0340782635485}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.78125,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.78125,"f1":0.8689487595737603,"seconds":5.1353126764297485e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.234375,"distances_sum":1962.0340782635485}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9519803113553118,"seconds":5.790963768959045e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.875,"distances_sum":2547.9578005258304}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9452323717948726,"seconds":5.8766454458236694e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.7578125,"distances_sum":2529.74529490003}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7890625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7890625,"f1":0.8739983974358982,"seconds":5.286186933517456e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.3046875,"distances_sum":2009.0587073114104}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9150390625,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.9150390625,"f1":0.9519803113553118,"seconds":5.790963768959045e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.875,"distances_sum":2547.9578005258304}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9604395604395609,"seconds":5.854293704032898e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.890625,"distances_sum":2606.9113703609664}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9644574175824181,"seconds":5.953013896942139e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.8515625,"distances_sum":2655.9571266536964}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":8,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9661458333333335,"seconds":5.867332220077515e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.890625,"distances_sum":2673.952002595516}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9656307234432239,"seconds":5.8282166719436646e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.84375,"distances_sum":2668.6183076650136}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":8,"bsize":10},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9661458333333335,"seconds":5.867332220077515e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.890625,"distances_sum":2673.952002595516}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.939453125,"state":{"ssize":8,"bsize":10},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9661458333333335,"seconds":5.867332220077515e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.890625,"distances_sum":2673.952002595516}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5517578125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5517578125,"f1":0.6967192529692535,"seconds":4.680827260017395e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":7.4453125,"distances_sum":1265.5755815887048}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4189453125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4189453125,"f1":null,"seconds":3.814697265625e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":6.6328125,"distances_sum":920.7189319475023}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2353515625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2353515625,"f1":null,"seconds":3.430992364883423e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":6.7265625,"distances_sum":576.0958559232494}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5517578125,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5517578125,"f1":0.6967192529692535,"seconds":4.680827260017395e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":7.4453125,"distances_sum":1265.5755815887048}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8720703125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8720703125,"f1":0.9254407051282055,"seconds":5.869194865226746e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.875,"distances_sum":2374.3655276981667}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6728515625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6728515625,"f1":0.7959238677988685,"seconds":4.820525646209717e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":7.953125,"distances_sum":1636.3376874010019}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7861328125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7861328125,"f1":0.871521187146188,"seconds":5.1781535148620605e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.21875,"distances_sum":2000.0122189979015}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5888671875, conf: {"ssize":6,"bsize":3}, perf: {"precision":1.0,"recall":0.5888671875,"f1":0.7267550158175166,"seconds":4.4871121644973755e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":7.6171875,"distances_sum":1404.963522883547}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8720703125,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.8720703125,"f1":0.9254407051282055,"seconds":5.869194865226746e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.875,"distances_sum":2374.3655276981667}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.969700091575092,"seconds":6.295740604400635e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.96875,"distances_sum":2711.7376809010616}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9679887820512824,"seconds":6.1746686697006226e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.9453125,"distances_sum":2710.603603442054}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9624313186813191,"seconds":6.0461461544036865e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.9375,"distances_sum":2648.7525169546857}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9537087912087916,"seconds":5.712732672691345e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.921875,"distances_sum":2561.8590933543633}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.93927738927739,"seconds":5.729496479034424e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.8984375,"distances_sum":2494.0988125078175}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9392971611721618,"seconds":5.768612027168274e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.9140625,"distances_sum":2476.704846976287}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9453125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9453125,"f1":0.969700091575092,"seconds":6.295740604400635e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.96875,"distances_sum":2711.7376809010616}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9453125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9453125,"f1":0.969700091575092,"seconds":6.295740604400635e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.96875,"distances_sum":2711.7376809010616}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7548828125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7548828125,"f1":0.8487049408924419,"seconds":4.939734935760498e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.9140625,"distances_sum":1929.1420577501906}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6728515625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6728515625,"f1":0.7926708707958715,"seconds":4.738569259643555e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.828125,"distances_sum":1641.379151414648}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3935546875, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.3935546875,"f1":null,"seconds":3.4086406230926514e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":6.1171875,"distances_sum":863.1693424692527}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7548828125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7548828125,"f1":0.8487049408924419,"seconds":4.939734935760498e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.9140625,"distances_sum":1929.1420577501906}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9360035797535803,"seconds":5.451962351799011e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.6640625,"distances_sum":2484.782609504574}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.822265625, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.822265625,"f1":0.8950356934731943,"seconds":5.194917321205139e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.2421875,"distances_sum":2158.9424106267475}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7822265625, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7822265625,"f1":0.8683582042957051,"seconds":4.762783646583557e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.1796875,"distances_sum":2000.809732276701}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8310546875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8310546875,"f1":0.9001290376290384,"seconds":5.032867193222046e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.3359375,"distances_sum":2179.1497586808086}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8896484375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.8896484375,"f1":0.9360035797535803,"seconds":5.451962351799011e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.6640625,"distances_sum":2484.782609504574}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9609375, conf: {"ssize":2,"bsize":12}, perf: {"precision":1.0,"recall":0.9609375,"f1":0.9785714285714289,"seconds":5.636364221572876e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9609375,"distances_sum":2789.4583434308183}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9698489010989013,"seconds":5.686655640602112e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.890625,"distances_sum":2730.2020599378675}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.962093635531136,"seconds":5.517154932022095e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.84375,"distances_sum":2666.3056168532653}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9495421245421252,"seconds":5.360692739486694e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.765625,"distances_sum":2618.388008244357}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":10,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9608459249084254,"seconds":5.628913640975952e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.828125,"distances_sum":2661.660065777523}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9609375,"state":{"ssize":2,"bsize":12},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9785714285714289,"seconds":5.636364221572876e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9609375,"distances_sum":2789.4583434308183}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9609375,"state":{"ssize":2,"bsize":12},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9785714285714289,"seconds":5.636364221572876e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9609375,"distances_sum":2789.4583434308183}}, n: 9
mean(cfft.distances) = 0.6843023022228708
mean(cdnet.distances) = 0.7347937164095959
mean(crand.distances) = 0.3306683631101331
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8799999999999999
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8844444444444445
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8844444444444445
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.9311111111111111
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8866666666666667
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9288888888888889
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.94
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.94
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.84
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8755555555555555
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8911111111111111
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8688888888888888
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8755555555555556
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9400000000000001
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9155555555555556
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9222222222222222
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9288888888888889
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8533333333333332
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8755555555555556
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.9088888888888889
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8711111111111111
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9244444444444445
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9333333333333332
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8755555555555556
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.8866666666666667
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9044444444444445
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8755555555555556
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.9155555555555556
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8977777777777778
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9222222222222222
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9044444444444445
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9044444444444445
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 4, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
*** center 5: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 22, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 8: selecting labels [1] (freq >= 1) [from [24, 0, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 9, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 16, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 2, 10]]
** centroid: 12, normalized-entropy: 0.6500224216483541, [(2, 2), (3, 10)]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 1, 2, 3, 1, 2, 3, 3, 2, 2, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 4, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
*** center 5: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 22, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 8: selecting labels [1] (freq >= 1) [from [24, 0, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 9, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 16, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 2, 10]]
** centroid: 12, normalized-entropy: 0.6500224216483541, [(2, 2), (3, 10)]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 1, 2, 3, 1, 2, 3, 3, 2, 2, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 4, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
*** center 5: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 22, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 8: selecting labels [1] (freq >= 1) [from [24, 0, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 9, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 16, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 2, 10]]
** centroid: 12, normalized-entropy: 0.6500224216483541, [(2, 2), (3, 10)]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 1, 2, 3, 1, 2, 3, 3, 2, 2, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 4, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
*** center 5: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 22, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 8: selecting labels [1] (freq >= 1) [from [24, 0, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 9, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 16, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 2, 10]]
** centroid: 12, normalized-entropy: 0.6500224216483541, [(2, 2), (3, 10)]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 1, 2, 3, 1, 2, 3, 3, 2, 2, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 4, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
*** center 5: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 22, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 8: selecting labels [1] (freq >= 1) [from [24, 0, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 9, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 16, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 2, 10]]
** centroid: 12, normalized-entropy: 0.6500224216483541, [(2, 2), (3, 10)]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 1, 2, 3, 1, 2, 3, 3, 2, 2, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 4, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
*** center 5: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 22, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 8: selecting labels [1] (freq >= 1) [from [24, 0, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 9, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 16, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 2, 10]]
** centroid: 12, normalized-entropy: 0.6500224216483541, [(2, 2), (3, 10)]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 1, 2, 3, 1, 2, 3, 3, 2, 2, 3]
acc = 0.9333333333333333
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 4, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
*** center 5: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 22, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 8: selecting labels [1] (freq >= 1) [from [24, 0, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 9, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 16, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 2, 10]]
** centroid: 12, normalized-entropy: 0.6500224216483541, [(2, 2), (3, 10)]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 1, 2, 3, 1, 2, 3, 3, 2, 2, 3]
acc = 0.9666666666666667
*** finished computation of 12 references, err: [Inf, 0.5327527217070261] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 32, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [5, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [2, 0, 0]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 14]]
** centroid: 10, normalized-entropy: 0.6722948170756378, [(2, 3), (3, 14)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 13]]
*** center 12: selecting labels [1] (freq >= 1) [from [30, 0, 0]]
finished with 13 centroids; started with 12
acc = 0.9533333333333334
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.281318583136967] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.281318583136967, 0.20480267956360682] ***
*** finished computation of 7 references, err: [Inf, 0.281318583136967, 0.20480267956360682] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [75, 26, 0]]
** centroid: 1, normalized-entropy: 0.8228368841492258, [(1, 75), (2, 26)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 72, 1]]
** centroid: 2, normalized-entropy: 0.1044190780054077, [(2, 72), (3, 1)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [3, 79, 0]]
** centroid: 3, normalized-entropy: 0.22641094842107634, [(1, 3), (2, 79)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [113, 43, 0]]
** centroid: 4, normalized-entropy: 0.8494431983166942, [(1, 113), (2, 43)]
*** center 5: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [116, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 32, 27]]
** centroid: 7, normalized-entropy: 0.9948131754904235, [(2, 32), (3, 27)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24648765090300045] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24648765090300045, 0.19832073837501937] ***
*** finished computation of 7 references, err: [Inf, 0.24648765090300045, 0.19832073837501937] ***
*** center 1: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [38, 112, 0]]
** centroid: 3, normalized-entropy: 0.8165187119538281, [(1, 38), (2, 112)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [61, 9, 0]]
** centroid: 4, normalized-entropy: 0.5535072654547254, [(1, 61), (2, 9)]
*** center 5: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [47, 49, 0]]
** centroid: 6, normalized-entropy: 0.999686892486842, [(1, 47), (2, 49)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 87, 34]]
** centroid: 7, normalized-entropy: 0.8567986030485539, [(2, 87), (3, 34)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2875379259087916] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2875379259087916, 0.21620154077385453] ***
*** finished computation of 7 references, err: [Inf, 0.2875379259087916, 0.21620154077385453] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [87, 59, 0]]
** centroid: 1, normalized-entropy: 0.9733038462006476, [(1, 87), (2, 59)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [15, 36, 0]]
** centroid: 2, normalized-entropy: 0.8739810481273581, [(1, 15), (2, 36)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [96, 9, 0]]
** centroid: 3, normalized-entropy: 0.4220005168831531, [(1, 96), (2, 9)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 81, 1]]
** centroid: 4, normalized-entropy: 0.09501724567107643, [(2, 81), (3, 1)]
*** center 5: selecting labels [1] (freq >= 1) [from [108, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [80, 3, 0]]
** centroid: 6, normalized-entropy: 0.2243269603450881, [(1, 80), (2, 3)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 67, 25]]
** centroid: 7, normalized-entropy: 0.8439491244805034, [(2, 67), (3, 25)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24023700417117314] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24023700417117314, 0.1709165140271869] ***
*** starting iteration: 2; err: [Inf, 0.24023700417117314, 0.1709165140271869] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24023700417117314, 0.1709165140271869, 0.15582176981292464] ***
*** starting iteration: 3; err: [Inf, 0.24023700417117314, 0.1709165140271869, 0.15582176981292464] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24023700417117314, 0.1709165140271869, 0.15582176981292464, 0.1492802058780068] ***
*** finished computation of 7 references, err: [Inf, 0.24023700417117314, 0.1709165140271869, 0.15582176981292464, 0.1492802058780068] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [64, 6, 0]]
** centroid: 1, normalized-entropy: 0.4220005168831531, [(1, 64), (2, 6)]
*** center 2: selecting labels [1] (freq >= 1) [from [123, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [76, 16, 0]]
** centroid: 3, normalized-entropy: 0.6665783579949205, [(1, 76), (2, 16)]
*** center 4: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 98, 28]]
** centroid: 5, normalized-entropy: 0.7642045065086204, [(2, 98), (3, 28)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [12, 90, 0]]
** centroid: 6, normalized-entropy: 0.5225593745369407, [(1, 12), (2, 90)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [38, 42, 0]]
** centroid: 7, normalized-entropy: 0.99819587904281, [(1, 38), (2, 42)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23027395143982085] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23027395143982085, 0.16291843924456384] ***
*** starting iteration: 2; err: [Inf, 0.23027395143982085, 0.16291843924456384] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23027395143982085, 0.16291843924456384, 0.1591111063465722] ***
*** starting iteration: 3; err: [Inf, 0.23027395143982085, 0.16291843924456384, 0.1591111063465722] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23027395143982085, 0.16291843924456384, 0.1591111063465722, 0.15790082750397957] ***
*** finished computation of 7 references, err: [Inf, 0.23027395143982085, 0.16291843924456384, 0.1591111063465722, 0.15790082750397957] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [70, 1, 0]]
** centroid: 1, normalized-entropy: 0.10679203237584184, [(1, 70), (2, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [40, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [64, 63, 0]]
** centroid: 3, normalized-entropy: 0.9999552759021285, [(1, 64), (2, 63)]
*** center 4: selecting labels [1] (freq >= 1) [from [44, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 124, 34]]
** centroid: 5, normalized-entropy: 0.751286576718343, [(2, 124), (3, 34)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [78, 11, 0]]
** centroid: 6, normalized-entropy: 0.5396084773004918, [(1, 78), (2, 11)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [80, 58, 0]]
** centroid: 7, normalized-entropy: 0.9815886212101388, [(1, 80), (2, 58)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19797115361197912] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19797115361197912, 0.15172042256371973] ***
*** starting iteration: 2; err: [Inf, 0.19797115361197912, 0.15172042256371973] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19797115361197912, 0.15172042256371973, 0.1509047811439001] ***
*** finished computation of 7 references, err: [Inf, 0.19797115361197912, 0.15172042256371973, 0.1509047811439001] ***
*** center 1: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 53, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [3, 80, 0]]
** centroid: 3, normalized-entropy: 0.2243269603450881, [(1, 3), (2, 80)]
*** center 4: selecting labels [1] (freq >= 1) [from [137, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [40, 72, 0]]
** centroid: 5, normalized-entropy: 0.940285958670631, [(1, 40), (2, 72)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [108, 13, 0]]
** centroid: 6, normalized-entropy: 0.4921395466176624, [(1, 108), (2, 13)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 37, 26]]
** centroid: 7, normalized-entropy: 0.9778956822310348, [(2, 37), (3, 26)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26560343058909885] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26560343058909885, 0.21895799090279625] ***
*** starting iteration: 2; err: [Inf, 0.26560343058909885, 0.21895799090279625] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26560343058909885, 0.21895799090279625, 0.20026310724863508] ***
*** starting iteration: 3; err: [Inf, 0.26560343058909885, 0.21895799090279625, 0.20026310724863508] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26560343058909885, 0.21895799090279625, 0.20026310724863508, 0.19794697203469258] ***
*** starting iteration: 4; err: [Inf, 0.26560343058909885, 0.21895799090279625, 0.20026310724863508, 0.19794697203469258] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26560343058909885, 0.21895799090279625, 0.20026310724863508, 0.19794697203469258, 0.19641130286137443] ***
*** starting iteration: 5; err: [Inf, 0.26560343058909885, 0.21895799090279625, 0.20026310724863508, 0.19794697203469258, 0.19641130286137443] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26560343058909885, 0.21895799090279625, 0.20026310724863508, 0.19794697203469258, 0.19641130286137443, 0.19582745258265677] ***
*** finished computation of 7 references, err: [Inf, 0.26560343058909885, 0.21895799090279625, 0.20026310724863508, 0.19794697203469258, 0.19641130286137443, 0.19582745258265677] ***
*** center 1: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [94, 4, 0]]
** centroid: 3, normalized-entropy: 0.2460225782203316, [(1, 94), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [52, 44, 0]]
** centroid: 4, normalized-entropy: 0.9949848281859699, [(1, 52), (2, 44)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [64, 54, 0]]
** centroid: 5, normalized-entropy: 0.9948131754904235, [(1, 64), (2, 54)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 108, 28]]
** centroid: 6, normalized-entropy: 0.7335379291086666, [(2, 108), (3, 28)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [33, 42, 0]]
** centroid: 7, normalized-entropy: 0.9895875212220558, [(1, 33), (2, 42)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20851685251549132] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20851685251549132, 0.19054350354171162] ***
*** starting iteration: 2; err: [Inf, 0.20851685251549132, 0.19054350354171162] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20851685251549132, 0.19054350354171162, 0.18681241412726657] ***
*** starting iteration: 3; err: [Inf, 0.20851685251549132, 0.19054350354171162, 0.18681241412726657] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20851685251549132, 0.19054350354171162, 0.18681241412726657, 0.1857329515874319] ***
*** starting iteration: 4; err: [Inf, 0.20851685251549132, 0.19054350354171162, 0.18681241412726657, 0.1857329515874319] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20851685251549132, 0.19054350354171162, 0.18681241412726657, 0.1857329515874319, 0.18500328027801044] ***
*** finished computation of 7 references, err: [Inf, 0.20851685251549132, 0.19054350354171162, 0.18681241412726657, 0.1857329515874319, 0.18500328027801044] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [68, 24, 0]]
** centroid: 1, normalized-entropy: 0.828055725379504, [(1, 68), (2, 24)]
*** center 2: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [3, 104, 0]]
** centroid: 4, normalized-entropy: 0.18445186314098744, [(1, 3), (2, 104)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [46, 46, 0]]
** centroid: 5, normalized-entropy: 1.0, [(1, 46), (2, 46)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [81, 7, 0]]
** centroid: 6, normalized-entropy: 0.40057554263664, [(1, 81), (2, 7)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 76, 34]]
** centroid: 7, normalized-entropy: 0.8921212805771683, [(2, 76), (3, 34)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21611841023526807] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21611841023526807, 0.1862355667142675] ***
*** starting iteration: 2; err: [Inf, 0.21611841023526807, 0.1862355667142675] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21611841023526807, 0.1862355667142675, 0.18334463742216756] ***
*** starting iteration: 3; err: [Inf, 0.21611841023526807, 0.1862355667142675, 0.18334463742216756] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21611841023526807, 0.1862355667142675, 0.18334463742216756, 0.1823626557697376] ***
*** finished computation of 7 references, err: [Inf, 0.21611841023526807, 0.1862355667142675, 0.18334463742216756, 0.1823626557697376] ***
*** center 1: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 70, 26]]
** centroid: 2, normalized-entropy: 0.842657877202239, [(2, 70), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [68, 3, 0]]
** centroid: 3, normalized-entropy: 0.25253077151613923, [(1, 68), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [12, 88, 0]]
** centroid: 4, normalized-entropy: 0.5293608652873645, [(1, 12), (2, 88)]
*** center 5: selecting labels [1] (freq >= 1) [from [114, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [6, 94, 0]]
** centroid: 6, normalized-entropy: 0.3274449191544762, [(1, 6), (2, 94)]
*** center 7: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.40419536532537714] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40419536532537714, 0.31041782971907844] ***
*** starting iteration: 2; err: [Inf, 0.40419536532537714, 0.31041782971907844] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40419536532537714, 0.31041782971907844, 0.3010010452348146] ***
*** starting iteration: 3; err: [Inf, 0.40419536532537714, 0.31041782971907844, 0.3010010452348146] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40419536532537714, 0.31041782971907844, 0.3010010452348146, 0.29969551602473576] ***
*** starting iteration: 4; err: [Inf, 0.40419536532537714, 0.31041782971907844, 0.3010010452348146, 0.29969551602473576] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40419536532537714, 0.31041782971907844, 0.3010010452348146, 0.29969551602473576, 0.29927463274918964] ***
*** finished computation of 3 references, err: [Inf, 0.40419536532537714, 0.31041782971907844, 0.3010010452348146, 0.29969551602473576, 0.29927463274918964] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 173, 28]]
** centroid: 1, normalized-entropy: 0.5824117847174047, [(2, 173), (3, 28)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [150, 52, 0]]
** centroid: 2, normalized-entropy: 0.8228368841492258, [(1, 150), (2, 52)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [236, 27, 0]]
** centroid: 3, normalized-entropy: 0.47737631930063623, [(1, 236), (2, 27)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3838450482640153] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3838450482640153, 0.3309451680891551] ***
*** starting iteration: 2; err: [Inf, 0.3838450482640153, 0.3309451680891551] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3838450482640153, 0.3309451680891551, 0.32330350549905557] ***
*** starting iteration: 3; err: [Inf, 0.3838450482640153, 0.3309451680891551, 0.32330350549905557] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3838450482640153, 0.3309451680891551, 0.32330350549905557, 0.31778530171629726] ***
*** starting iteration: 4; err: [Inf, 0.3838450482640153, 0.3309451680891551, 0.32330350549905557, 0.31778530171629726] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3838450482640153, 0.3309451680891551, 0.32330350549905557, 0.31778530171629726, 0.30706568705155396] ***
*** starting iteration: 5; err: [Inf, 0.3838450482640153, 0.3309451680891551, 0.32330350549905557, 0.31778530171629726, 0.30706568705155396] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3838450482640153, 0.3309451680891551, 0.32330350549905557, 0.31778530171629726, 0.30706568705155396, 0.29082852261311287] ***
*** starting iteration: 6; err: [Inf, 0.3838450482640153, 0.3309451680891551, 0.32330350549905557, 0.31778530171629726, 0.30706568705155396, 0.29082852261311287] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3838450482640153, 0.3309451680891551, 0.32330350549905557, 0.31778530171629726, 0.30706568705155396, 0.29082852261311287, 0.29075048468180414] ***
*** finished computation of 3 references, err: [Inf, 0.3838450482640153, 0.3309451680891551, 0.32330350549905557, 0.31778530171629726, 0.30706568705155396, 0.29082852261311287, 0.29075048468180414] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [114, 94, 0]]
** centroid: 1, normalized-entropy: 0.993320421638792, [(1, 114), (2, 94)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [58, 163, 34]]
** centroid: 2, normalized-entropy: 0.8115013614695875, [(1, 58), (2, 163), (3, 34)]
*** center 3: selecting labels [1] (freq >= 1) [from [204, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3653327140934777] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3653327140934777, 0.33232181710002573] ***
*** starting iteration: 2; err: [Inf, 0.3653327140934777, 0.33232181710002573] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3653327140934777, 0.33232181710002573, 0.32668647282048946] ***
*** starting iteration: 3; err: [Inf, 0.3653327140934777, 0.33232181710002573, 0.32668647282048946] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3653327140934777, 0.33232181710002573, 0.32668647282048946, 0.32588210143707413] ***
*** finished computation of 3 references, err: [Inf, 0.3653327140934777, 0.33232181710002573, 0.32668647282048946, 0.32588210143707413] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [90, 145, 26]]
** centroid: 1, normalized-entropy: 0.840559030481005, [(1, 90), (2, 145), (3, 26)]
*** center 2: selecting labels [1] (freq >= 1) [from [195, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [101, 110, 0]]
** centroid: 3, normalized-entropy: 0.9986872065003425, [(1, 101), (2, 110)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3471934681942871] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3471934681942871, 0.307264346138549] ***
*** finished computation of 3 references, err: [Inf, 0.3471934681942871, 0.307264346138549] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [58, 128, 28]]
** centroid: 1, normalized-entropy: 0.8441047005064606, [(1, 58), (2, 128), (3, 28)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [262, 6, 0]]
** centroid: 2, normalized-entropy: 0.15464664789382115, [(1, 262), (2, 6)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [66, 118, 0]]
** centroid: 3, normalized-entropy: 0.9415951533268216, [(1, 66), (2, 118)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4205255014361113] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4205255014361113, 0.3346657743579757] ***
*** finished computation of 3 references, err: [Inf, 0.4205255014361113, 0.3346657743579757] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [52, 167, 34]]
** centroid: 1, normalized-entropy: 0.7910865472947397, [(1, 52), (2, 167), (3, 34)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [153, 87, 0]]
** centroid: 2, normalized-entropy: 0.9447388286467892, [(1, 153), (2, 87)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [171, 3, 0]]
** centroid: 3, normalized-entropy: 0.12565805017256745, [(1, 171), (2, 3)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3570569059930217] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3570569059930217, 0.32582678732139686] ***
*** finished computation of 3 references, err: [Inf, 0.3570569059930217, 0.32582678732139686] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [140, 77, 0]]
** centroid: 1, normalized-entropy: 0.9383153522334071, [(1, 140), (2, 77)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [200, 39, 0]]
** centroid: 2, normalized-entropy: 0.6418629398193569, [(1, 200), (2, 39)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [46, 139, 26]]
** centroid: 3, normalized-entropy: 0.7873878844773466, [(1, 46), (2, 139), (3, 26)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.35139844954075355] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35139844954075355, 0.28728384382228506] ***
*** finished computation of 3 references, err: [Inf, 0.35139844954075355, 0.28728384382228506] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [347, 50, 0]]
** centroid: 1, normalized-entropy: 0.5462103549933539, [(1, 347), (2, 50)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [34, 108, 6]]
** centroid: 2, normalized-entropy: 0.6351405117002396, [(1, 34), (2, 108), (3, 6)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [5, 94, 22]]
** centroid: 3, normalized-entropy: 0.580528183455673, [(1, 5), (2, 94), (3, 22)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3560484478510553] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3560484478510553, 0.27035426061650714] ***
*** finished computation of 3 references, err: [Inf, 0.3560484478510553, 0.27035426061650714] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [87, 104, 0]]
** centroid: 1, normalized-entropy: 0.9942779650749478, [(1, 87), (2, 104)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 82, 34]]
** centroid: 2, normalized-entropy: 0.8726965039103788, [(2, 82), (3, 34)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [289, 71, 0]]
** centroid: 3, normalized-entropy: 0.716337630419873, [(1, 289), (2, 71)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2827165394482472] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2827165394482472, 0.27367773538139806] ***
*** finished computation of 3 references, err: [Inf, 0.2827165394482472, 0.27367773538139806] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [135, 123, 26]]
** centroid: 1, normalized-entropy: 0.8509050994670757, [(1, 135), (2, 123), (3, 26)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [117, 60, 0]]
** centroid: 2, normalized-entropy: 0.9238422284571813, [(1, 117), (2, 60)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [134, 72, 0]]
** centroid: 3, normalized-entropy: 0.9336337717211408, [(1, 134), (2, 72)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2394087268598937] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2394087268598937, 0.16490428169137678] ***
*** starting iteration: 2; err: [Inf, 0.2394087268598937, 0.16490428169137678] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2394087268598937, 0.16490428169137678, 0.1573838980843288] ***
*** starting iteration: 3; err: [Inf, 0.2394087268598937, 0.16490428169137678, 0.1573838980843288] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2394087268598937, 0.16490428169137678, 0.1573838980843288, 0.15255728186605996] ***
*** finished computation of 7 references, err: [Inf, 0.2394087268598937, 0.16490428169137678, 0.1573838980843288, 0.15255728186605996] ***
*** center 1: selecting labels [1] (freq >= 1) [from [148, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [112, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [20, 53, 0]]
** centroid: 3, normalized-entropy: 0.847107490529376, [(1, 20), (2, 53)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 51, 17]]
** centroid: 4, normalized-entropy: 0.8112781244591328, [(2, 51), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [70, 49, 0]]
** centroid: 5, normalized-entropy: 0.9774178175281716, [(1, 70), (2, 49)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [36, 47, 0]]
** centroid: 6, normalized-entropy: 0.9872927315785851, [(1, 36), (2, 47)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 52, 11]]
** centroid: 7, normalized-entropy: 0.6681273338436138, [(2, 52), (3, 11)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24274404359649102] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24274404359649102, 0.16617410606879188] ***
*** starting iteration: 2; err: [Inf, 0.24274404359649102, 0.16617410606879188] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24274404359649102, 0.16617410606879188, 0.15644551218854547] ***
*** starting iteration: 3; err: [Inf, 0.24274404359649102, 0.16617410606879188, 0.15644551218854547] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24274404359649102, 0.16617410606879188, 0.15644551218854547, 0.1533130226654002] ***
*** finished computation of 7 references, err: [Inf, 0.24274404359649102, 0.16617410606879188, 0.15644551218854547, 0.1533130226654002] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 62, 29]]
** centroid: 1, normalized-entropy: 0.9029416720373132, [(2, 62), (3, 29)]
*** center 2: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [120, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [15, 64, 0]]
** centroid: 4, normalized-entropy: 0.7012065844539666, [(1, 15), (2, 64)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [70, 74, 0]]
** centroid: 5, normalized-entropy: 0.9994433330902989, [(1, 70), (2, 74)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 57, 5]]
** centroid: 6, normalized-entropy: 0.4044483864864384, [(2, 57), (3, 5)]
*** center 7: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23131924224570616] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23131924224570616, 0.1749200397834316] ***
*** starting iteration: 2; err: [Inf, 0.23131924224570616, 0.1749200397834316] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23131924224570616, 0.1749200397834316, 0.1566824723185896] ***
*** starting iteration: 3; err: [Inf, 0.23131924224570616, 0.1749200397834316, 0.1566824723185896] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23131924224570616, 0.1749200397834316, 0.1566824723185896, 0.15009641129177237] ***
*** finished computation of 7 references, err: [Inf, 0.23131924224570616, 0.1749200397834316, 0.1566824723185896, 0.15009641129177237] ***
*** center 1: selecting labels [1] (freq >= 1) [from [126, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [121, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [80, 16, 0]]
** centroid: 3, normalized-entropy: 0.6500224216483541, [(1, 80), (2, 16)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 65, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [8, 104, 0]]
** centroid: 5, normalized-entropy: 0.3712323266408756, [(1, 8), (2, 104)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 49, 26]]
** centroid: 6, normalized-entropy: 0.9310558233850329, [(2, 49), (3, 26)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [51, 21, 0]]
** centroid: 7, normalized-entropy: 0.8708644692353648, [(1, 51), (2, 21)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4473200198626509] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4473200198626509, 0.3028731008840574] ***
*** starting iteration: 2; err: [Inf, 0.4473200198626509, 0.3028731008840574] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4473200198626509, 0.3028731008840574, 0.2994481402256333] ***
*** starting iteration: 3; err: [Inf, 0.4473200198626509, 0.3028731008840574, 0.2994481402256333] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4473200198626509, 0.3028731008840574, 0.2994481402256333, 0.29874693190220286] ***
*** finished computation of 3 references, err: [Inf, 0.4473200198626509, 0.3028731008840574, 0.2994481402256333, 0.29874693190220286] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [102, 131, 28]]
** centroid: 1, normalized-entropy: 0.8671337276255461, [(1, 102), (2, 131), (3, 28)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [73, 121, 0]]
** centroid: 2, normalized-entropy: 0.9553785921434824, [(1, 73), (2, 121)]
*** center 3: selecting labels [1] (freq >= 1) [from [211, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4040543649518776] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4040543649518776, 0.2987814144729853] ***
*** starting iteration: 2; err: [Inf, 0.4040543649518776, 0.2987814144729853] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4040543649518776, 0.2987814144729853, 0.29262002725070385] ***
*** starting iteration: 3; err: [Inf, 0.4040543649518776, 0.2987814144729853, 0.29262002725070385] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4040543649518776, 0.2987814144729853, 0.29262002725070385, 0.2906197086856261] ***
*** starting iteration: 4; err: [Inf, 0.4040543649518776, 0.2987814144729853, 0.29262002725070385, 0.2906197086856261] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4040543649518776, 0.2987814144729853, 0.29262002725070385, 0.2906197086856261, 0.28960830759469314] ***
*** starting iteration: 5; err: [Inf, 0.4040543649518776, 0.2987814144729853, 0.29262002725070385, 0.2906197086856261, 0.28960830759469314] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4040543649518776, 0.2987814144729853, 0.29262002725070385, 0.2906197086856261, 0.28960830759469314, 0.2894639630524115] ***
*** finished computation of 3 references, err: [Inf, 0.4040543649518776, 0.2987814144729853, 0.29262002725070385, 0.2906197086856261, 0.28960830759469314, 0.2894639630524115] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [221, 10, 0]]
** centroid: 1, normalized-entropy: 0.2571787099252351, [(1, 221), (2, 10)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 190, 34]]
** centroid: 2, normalized-entropy: 0.6142910730156771, [(2, 190), (3, 34)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [155, 57, 0]]
** centroid: 3, normalized-entropy: 0.8398354846344392, [(1, 155), (2, 57)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4416763398669258] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4416763398669258, 0.28974747604996276] ***
*** starting iteration: 2; err: [Inf, 0.4416763398669258, 0.28974747604996276] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4416763398669258, 0.28974747604996276, 0.2872575192476275] ***
*** starting iteration: 3; err: [Inf, 0.4416763398669258, 0.28974747604996276, 0.2872575192476275] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4416763398669258, 0.28974747604996276, 0.2872575192476275, 0.2863974232133059] ***
*** finished computation of 3 references, err: [Inf, 0.4416763398669258, 0.28974747604996276, 0.2872575192476275, 0.2863974232133059] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [62, 168, 26]]
** centroid: 1, normalized-entropy: 0.7756469714245918, [(1, 62), (2, 168), (3, 26)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [112, 87, 0]]
** centroid: 2, normalized-entropy: 0.9885852466276136, [(1, 112), (2, 87)]
*** center 3: selecting labels [1] (freq >= 1) [from [212, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.19158374645408835] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19158374645408835, 0.15557292110759308] ***
*** starting iteration: 2; err: [Inf, 0.19158374645408835, 0.15557292110759308] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19158374645408835, 0.15557292110759308, 0.14991121440035132] ***
*** starting iteration: 3; err: [Inf, 0.19158374645408835, 0.15557292110759308, 0.14991121440035132] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19158374645408835, 0.15557292110759308, 0.14991121440035132, 0.1484257713010585] ***
*** starting iteration: 4; err: [Inf, 0.19158374645408835, 0.15557292110759308, 0.14991121440035132, 0.1484257713010585] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19158374645408835, 0.15557292110759308, 0.14991121440035132, 0.1484257713010585, 0.1477258644352021] ***
*** finished computation of 7 references, err: [Inf, 0.19158374645408835, 0.15557292110759308, 0.14991121440035132, 0.1484257713010585, 0.1477258644352021] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [55, 52, 0]]
** centroid: 1, normalized-entropy: 0.9994328781096228, [(1, 55), (2, 52)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [64, 3, 0]]
** centroid: 2, normalized-entropy: 0.26377743669413856, [(1, 64), (2, 3)]
*** center 3: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 90, 28]]
** centroid: 4, normalized-entropy: 0.7905013842153699, [(2, 90), (3, 28)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [84, 7, 0]]
** centroid: 5, normalized-entropy: 0.3912435636292556, [(1, 84), (2, 7)]
*** center 6: selecting labels [1] (freq >= 2) [from [99, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 100, 0]]
** centroid: 7, normalized-entropy: 0.13923299905509884, [(1, 2), (2, 100)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1833953759653949] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1833953759653949, 0.151344432376152] ***
*** starting iteration: 2; err: [Inf, 0.1833953759653949, 0.151344432376152] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1833953759653949, 0.151344432376152, 0.14831550757510997] ***
*** starting iteration: 3; err: [Inf, 0.1833953759653949, 0.151344432376152, 0.14831550757510997] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1833953759653949, 0.151344432376152, 0.14831550757510997, 0.14758838723920498] ***
*** finished computation of 7 references, err: [Inf, 0.1833953759653949, 0.151344432376152, 0.14831550757510997, 0.14758838723920498] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [64, 66, 0]]
** centroid: 1, normalized-entropy: 0.9998292601233937, [(1, 64), (2, 66)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [81, 11, 0]]
** centroid: 2, normalized-entropy: 0.5281098034628294, [(1, 81), (2, 11)]
*** center 3: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 85, 34]]
** centroid: 4, normalized-entropy: 0.8631205685666311, [(2, 85), (3, 34)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [4, 93, 0]]
** centroid: 5, normalized-entropy: 0.24793583772272637, [(1, 4), (2, 93)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [95, 2, 0]]
** centroid: 6, normalized-entropy: 0.14489961753310668, [(1, 95), (2, 2)]
*** center 7: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18957981690652725] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18957981690652725, 0.14732658957875427] ***
*** starting iteration: 2; err: [Inf, 0.18957981690652725, 0.14732658957875427] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18957981690652725, 0.14732658957875427, 0.1436452578880295] ***
*** starting iteration: 3; err: [Inf, 0.18957981690652725, 0.14732658957875427, 0.1436452578880295] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18957981690652725, 0.14732658957875427, 0.1436452578880295, 0.14261266756509577] ***
*** starting iteration: 4; err: [Inf, 0.18957981690652725, 0.14732658957875427, 0.1436452578880295, 0.14261266756509577] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18957981690652725, 0.14732658957875427, 0.1436452578880295, 0.14261266756509577, 0.14244624492300414] ***
*** finished computation of 7 references, err: [Inf, 0.18957981690652725, 0.14732658957875427, 0.1436452578880295, 0.14261266756509577, 0.14244624492300414] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 79, 26]]
** centroid: 1, normalized-entropy: 0.8074825483550796, [(2, 79), (3, 26)]
*** center 2: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [81, 1, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [98, 2, 0]]
** centroid: 5, normalized-entropy: 0.14144054254182067, [(1, 98), (2, 2)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [4, 95, 0]]
** centroid: 6, normalized-entropy: 0.24414164238829597, [(1, 4), (2, 95)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [26, 78, 0]]
** centroid: 7, normalized-entropy: 0.8112781244591328, [(1, 26), (2, 78)]
finished with 9 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 11)
[0.9490028951106796, 0.9399818980657305, 0.9350488212763661, 0.932033830237423, 0.9279878681076287, 0.9050008091924259, 0.8990397583211954, 0.8860267453081825, 0.8740327153500806, 0.8569467671264079, 0.7830045614476752]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9490028951106796
finished with 11
iteration 2 finished
generating 4 configurations using top 12 configurations, starting with 11)
[0.9490028951106796, 0.9399818980657305, 0.9350488212763661, 0.932033830237423, 0.9279878681076287, 0.9050008091924259, 0.8990397583211954, 0.8860267453081825, 0.8740327153500806, 0.8569467671264079, 0.7830045614476752]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9490028951106796
finished with 12
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.22644622049325178] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22644622049325178, 0.19018413597583636] ***
*** starting iteration: 2; err: [Inf, 0.22644622049325178, 0.19018413597583636] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22644622049325178, 0.19018413597583636, 0.18835439619415248] ***
*** starting iteration: 3; err: [Inf, 0.22644622049325178, 0.19018413597583636, 0.18835439619415248] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22644622049325178, 0.19018413597583636, 0.18835439619415248, 0.18817265833764374] ***
*** finished computation of 7 references, err: [Inf, 0.22644622049325178, 0.19018413597583636, 0.18835439619415248, 0.18817265833764374] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [77, 45, 0]]
** centroid: 1, normalized-entropy: 0.9497869033961424, [(1, 77), (2, 45)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [63, 17, 0]]
** centroid: 2, normalized-entropy: 0.7462343013654809, [(1, 63), (2, 17)]
*** center 3: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 89, 28]]
** centroid: 4, normalized-entropy: 0.7939013591250944, [(2, 89), (3, 28)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [4, 99, 0]]
** centroid: 5, normalized-entropy: 0.23692474671835093, [(1, 4), (2, 99)]
*** center 6: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [89, 2, 0]]
** centroid: 7, normalized-entropy: 0.15240699892386778, [(1, 89), (2, 2)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2433400612039634] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2433400612039634, 0.1880891905068469] ***
*** starting iteration: 2; err: [Inf, 0.2433400612039634, 0.1880891905068469] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2433400612039634, 0.1880891905068469, 0.18447150496941903] ***
*** starting iteration: 3; err: [Inf, 0.2433400612039634, 0.1880891905068469, 0.18447150496941903] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2433400612039634, 0.1880891905068469, 0.18447150496941903, 0.18326117305400624] ***
*** starting iteration: 4; err: [Inf, 0.2433400612039634, 0.1880891905068469, 0.18447150496941903, 0.18326117305400624] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2433400612039634, 0.1880891905068469, 0.18447150496941903, 0.18326117305400624, 0.1822291358892081] ***
*** starting iteration: 5; err: [Inf, 0.2433400612039634, 0.1880891905068469, 0.18447150496941903, 0.18326117305400624, 0.1822291358892081] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2433400612039634, 0.1880891905068469, 0.18447150496941903, 0.18326117305400624, 0.1822291358892081, 0.1818597900291634] ***
*** finished computation of 7 references, err: [Inf, 0.2433400612039634, 0.1880891905068469, 0.18447150496941903, 0.18326117305400624, 0.1822291358892081, 0.1818597900291634] ***
*** center 1: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [92, 2, 0]]
** centroid: 2, normalized-entropy: 0.14854949043034832, [(1, 92), (2, 2)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 58, 34]]
** centroid: 3, normalized-entropy: 0.9503376699710269, [(2, 58), (3, 34)]
*** center 4: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [80, 10, 0]]
** centroid: 5, normalized-entropy: 0.5032583347756457, [(1, 80), (2, 10)]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 101, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 86, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23286211698956932] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23286211698956932, 0.18779540232856057] ***
*** starting iteration: 2; err: [Inf, 0.23286211698956932, 0.18779540232856057] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23286211698956932, 0.18779540232856057, 0.18433189618008874] ***
*** starting iteration: 3; err: [Inf, 0.23286211698956932, 0.18779540232856057, 0.18433189618008874] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23286211698956932, 0.18779540232856057, 0.18433189618008874, 0.18321437816899352] ***
*** starting iteration: 4; err: [Inf, 0.23286211698956932, 0.18779540232856057, 0.18433189618008874, 0.18321437816899352] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23286211698956932, 0.18779540232856057, 0.18433189618008874, 0.18321437816899352, 0.18273701097863704] ***
*** finished computation of 7 references, err: [Inf, 0.23286211698956932, 0.18779540232856057, 0.18433189618008874, 0.18321437816899352, 0.18273701097863704] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [25, 76, 0]]
** centroid: 1, normalized-entropy: 0.8073313266519867, [(1, 25), (2, 76)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [71, 5, 0]]
** centroid: 2, normalized-entropy: 0.35001059292688486, [(1, 71), (2, 5)]
*** center 3: selecting labels [1] (freq >= 2) [from [107, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 81, 26]]
** centroid: 4, normalized-entropy: 0.7999783611177544, [(2, 81), (3, 26)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [5, 92, 0]]
** centroid: 5, normalized-entropy: 0.29292995113885967, [(1, 5), (2, 92)]
*** center 6: selecting labels [1] (freq >= 2) [from [86, 1, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
finished with 9 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 12)
[0.9490028951106796, 0.9399818980657305, 0.9350488212763661, 0.932033830237423, 0.9279878681076287, 0.9260128391864919, 0.9050008091924259, 0.8990397583211954, 0.8860267453081825, 0.8740327153500806, 0.8569467671264079, 0.7830045614476752]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9490028951106796
finished with 13
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.2936753383767721] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2936753383767721, 0.2334448817995721] ***
*** starting iteration: 2; err: [Inf, 0.2936753383767721, 0.2334448817995721] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2936753383767721, 0.2334448817995721, 0.22864625269865935] ***
*** starting iteration: 3; err: [Inf, 0.2936753383767721, 0.2334448817995721, 0.22864625269865935] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2936753383767721, 0.2334448817995721, 0.22864625269865935, 0.22495337448980626] ***
*** finished computation of 7 references, err: [Inf, 0.2936753383767721, 0.2334448817995721, 0.22864625269865935, 0.22495337448980626] ***
*** center 1: selecting labels [1] (freq >= 1) [from [129, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [67, 7, 0]]
** centroid: 2, normalized-entropy: 0.45162282218200417, [(1, 67), (2, 7)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [11, 62, 0]]
** centroid: 3, normalized-entropy: 0.6115516951951333, [(1, 11), (2, 62)]
*** center 4: selecting labels [1] (freq >= 1) [from [143, 0, 0]]
*** center 5: selecting labels [1, 2, 3] (freq >= 1) [from [31, 75, 2]]
** centroid: 5, normalized-entropy: 0.6238397553855124, [(1, 31), (2, 75), (3, 2)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 44, 0]]
** centroid: 6, normalized-entropy: 0.2580186686648155, [(1, 2), (2, 44)]
*** center 7: selecting labels [1, 2, 3] (freq >= 1) [from [3, 64, 26]]
** centroid: 7, normalized-entropy: 0.6592567984334647, [(1, 3), (2, 64), (3, 26)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3090558580166173] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3090558580166173, 0.23433620968311356] ***
*** starting iteration: 2; err: [Inf, 0.3090558580166173, 0.23433620968311356] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3090558580166173, 0.23433620968311356, 0.21200140071662793] ***
*** starting iteration: 3; err: [Inf, 0.3090558580166173, 0.23433620968311356, 0.21200140071662793] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3090558580166173, 0.23433620968311356, 0.21200140071662793, 0.19856060821405225] ***
*** finished computation of 7 references, err: [Inf, 0.3090558580166173, 0.23433620968311356, 0.21200140071662793, 0.19856060821405225] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [64, 57, 0]]
** centroid: 1, normalized-entropy: 0.9975844702713692, [(1, 64), (2, 57)]
*** center 2: selecting labels [1] (freq >= 1) [from [158, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 63, 34]]
** centroid: 3, normalized-entropy: 0.9345275660736609, [(2, 63), (3, 34)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [114, 2, 0]]
** centroid: 4, normalized-entropy: 0.12565805017256745, [(1, 114), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [13, 57, 0]]
** centroid: 5, normalized-entropy: 0.6924194863274741, [(1, 13), (2, 57)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 43, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [27, 35, 0]]
** centroid: 7, normalized-entropy: 0.9879565014919159, [(1, 27), (2, 35)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25895439499829975] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25895439499829975, 0.21397109370053127] ***
*** starting iteration: 2; err: [Inf, 0.25895439499829975, 0.21397109370053127] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25895439499829975, 0.21397109370053127, 0.20489535721736601] ***
*** starting iteration: 3; err: [Inf, 0.25895439499829975, 0.21397109370053127, 0.20489535721736601] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25895439499829975, 0.21397109370053127, 0.20489535721736601, 0.1983578629642334] ***
*** finished computation of 7 references, err: [Inf, 0.25895439499829975, 0.21397109370053127, 0.20489535721736601, 0.1983578629642334] ***
*** center 1: selecting labels [1] (freq >= 1) [from [136, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [112, 29, 0]]
** centroid: 2, normalized-entropy: 0.7331314933267987, [(1, 112), (2, 29)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [24, 41, 0]]
** centroid: 3, normalized-entropy: 0.9500796252338518, [(1, 24), (2, 41)]
*** center 4: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 50, 5]]
** centroid: 5, normalized-entropy: 0.43949698692151346, [(2, 50), (3, 5)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [40, 39, 0]]
** centroid: 6, normalized-entropy: 0.9998844148717589, [(1, 40), (2, 39)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 96, 21]]
** centroid: 7, normalized-entropy: 0.6789538995185759, [(2, 96), (3, 21)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 13)
[0.9490028951106796, 0.9399818980657305, 0.9350488212763661, 0.932033830237423, 0.9279878681076287, 0.9260128391864919, 0.9050008091924259, 0.8990397583211954, 0.8960337583092075, 0.8860267453081825, 0.8740327153500806, 0.8569467671264079, 0.7830045614476752]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9490028951106796
finished with 15
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.3330198620046089] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3330198620046089, 0.22161516896239272] ***
*** starting iteration: 2; err: [Inf, 0.3330198620046089, 0.22161516896239272] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3330198620046089, 0.22161516896239272, 0.20302953283154257] ***
*** starting iteration: 3; err: [Inf, 0.3330198620046089, 0.22161516896239272, 0.20302953283154257] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3330198620046089, 0.22161516896239272, 0.20302953283154257, 0.191062913049018] ***
*** finished computation of 7 references, err: [Inf, 0.3330198620046089, 0.22161516896239272, 0.20302953283154257, 0.191062913049018] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [70, 12, 0]]
** centroid: 1, normalized-entropy: 0.6006085754131871, [(1, 70), (2, 12)]
*** center 2: selecting labels [1] (freq >= 2) [from [110, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [10, 65, 0]]
** centroid: 3, normalized-entropy: 0.5665095065529052, [(1, 10), (2, 65)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 52, 28]]
** centroid: 4, normalized-entropy: 0.9340680553754911, [(2, 52), (3, 28)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [68, 53, 0]]
** centroid: 5, normalized-entropy: 0.9888859042425894, [(1, 68), (2, 53)]
*** center 6: selecting labels [1] (freq >= 2) [from [128, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 70, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26429985662450317] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26429985662450317, 0.21692152455382083] ***
*** starting iteration: 2; err: [Inf, 0.26429985662450317, 0.21692152455382083] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26429985662450317, 0.21692152455382083, 0.20942444944645333] ***
*** starting iteration: 3; err: [Inf, 0.26429985662450317, 0.21692152455382083, 0.20942444944645333] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26429985662450317, 0.21692152455382083, 0.20942444944645333, 0.20664985813032918] ***
*** finished computation of 7 references, err: [Inf, 0.26429985662450317, 0.21692152455382083, 0.20942444944645333, 0.20664985813032918] ***
*** center 1: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [124, 35, 0]]
** centroid: 2, normalized-entropy: 0.7603971182966424, [(1, 124), (2, 35)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [3, 49, 0]]
** centroid: 3, normalized-entropy: 0.3182152976832332, [(1, 3), (2, 49)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 85, 31]]
** centroid: 4, normalized-entropy: 0.8374782779405223, [(2, 85), (3, 31)]
*** center 5: selecting labels [1] (freq >= 2) [from [138, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 58, 3]]
** centroid: 6, normalized-entropy: 0.28290479297989196, [(2, 58), (3, 3)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [32, 30, 0]]
** centroid: 7, normalized-entropy: 0.9992492479956566, [(1, 32), (2, 30)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2592288492857639] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2592288492857639, 0.22661661509441203] ***
*** starting iteration: 2; err: [Inf, 0.2592288492857639, 0.22661661509441203] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2592288492857639, 0.22661661509441203, 0.20536186114774607] ***
*** starting iteration: 3; err: [Inf, 0.2592288492857639, 0.22661661509441203, 0.20536186114774607] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2592288492857639, 0.22661661509441203, 0.20536186114774607, 0.19673355584875143] ***
*** finished computation of 7 references, err: [Inf, 0.2592288492857639, 0.22661661509441203, 0.20536186114774607, 0.19673355584875143] ***
*** center 1: selecting labels [1] (freq >= 2) [from [153, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 70, 26]]
** centroid: 2, normalized-entropy: 0.842657877202239, [(2, 70), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [22, 47, 0]]
** centroid: 3, normalized-entropy: 0.903116172156872, [(1, 22), (2, 47)]
*** center 4: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [67, 65, 0]]
** centroid: 5, normalized-entropy: 0.9998343950590572, [(1, 67), (2, 65)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [11, 55, 0]]
** centroid: 6, normalized-entropy: 0.6500224216483541, [(1, 11), (2, 55)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [40, 18, 0]]
** centroid: 7, normalized-entropy: 0.8935711016541908, [(1, 40), (2, 18)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20318194579293913] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20318194579293913, 0.15917243699434105] ***
*** starting iteration: 2; err: [Inf, 0.20318194579293913, 0.15917243699434105] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20318194579293913, 0.15917243699434105, 0.1499773935448412] ***
*** starting iteration: 3; err: [Inf, 0.20318194579293913, 0.15917243699434105, 0.1499773935448412] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20318194579293913, 0.15917243699434105, 0.1499773935448412, 0.1464512476364749] ***
*** finished computation of 7 references, err: [Inf, 0.20318194579293913, 0.15917243699434105, 0.1499773935448412, 0.1464512476364749] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [13, 61, 0]]
** centroid: 1, normalized-entropy: 0.6705250693158382, [(1, 13), (2, 61)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 59, 28]]
** centroid: 2, normalized-entropy: 0.9063701886077911, [(2, 59), (3, 28)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [86, 5, 0]]
** centroid: 3, normalized-entropy: 0.30704288878312236, [(1, 86), (2, 5)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 72, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [126, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [63, 55, 0]]
** centroid: 7, normalized-entropy: 0.9966818677995445, [(1, 63), (2, 55)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21679232801056594] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21679232801056594, 0.15374359307388985] ***
*** starting iteration: 2; err: [Inf, 0.21679232801056594, 0.15374359307388985] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21679232801056594, 0.15374359307388985, 0.1498947579831142] ***
*** starting iteration: 3; err: [Inf, 0.21679232801056594, 0.15374359307388985, 0.1498947579831142] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21679232801056594, 0.15374359307388985, 0.1498947579831142, 0.14911219113781446] ***
*** finished computation of 7 references, err: [Inf, 0.21679232801056594, 0.15374359307388985, 0.1498947579831142, 0.14911219113781446] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 104, 34]]
** centroid: 1, normalized-entropy: 0.8054848387405957, [(2, 104), (3, 34)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [77, 38, 0]]
** centroid: 2, normalized-entropy: 0.9153699714281696, [(1, 77), (2, 38)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [85, 5, 0]]
** centroid: 3, normalized-entropy: 0.3095434291503252, [(1, 85), (2, 5)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 90, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [48, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [85, 20, 0]]
** centroid: 7, normalized-entropy: 0.7024665512903904, [(1, 85), (2, 20)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26321435352505324] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26321435352505324, 0.20866166670824857] ***
*** starting iteration: 2; err: [Inf, 0.26321435352505324, 0.20866166670824857] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26321435352505324, 0.20866166670824857, 0.1835337043425691] ***
*** starting iteration: 3; err: [Inf, 0.26321435352505324, 0.20866166670824857, 0.1835337043425691] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26321435352505324, 0.20866166670824857, 0.1835337043425691, 0.1698784502418614] ***
*** finished computation of 7 references, err: [Inf, 0.26321435352505324, 0.20866166670824857, 0.1835337043425691, 0.1698784502418614] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [31, 42, 0]]
** centroid: 1, normalized-entropy: 0.9835585673909616, [(1, 31), (2, 42)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [143, 41, 0]]
** centroid: 2, normalized-entropy: 0.765294383509996, [(1, 143), (2, 41)]
*** center 3: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [20, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [1, 58, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 114, 26]]
** centroid: 6, normalized-entropy: 0.6924194863274741, [(2, 114), (3, 26)]
*** center 7: selecting labels [1] (freq >= 2) [from [134, 0, 0]]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 15)
[0.9490028951106796, 0.9399818980657305, 0.9350488212763661, 0.932033830237423, 0.9279878681076287, 0.9260128391864919, 0.9209988431545318, 0.9179808551066037, 0.9050008091924259, 0.8990397583211954, 0.8960337583092075, 0.8860267453081825, 0.8740327153500806, 0.8569467671264079, 0.7830045614476752]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9490028951106796
finished with 15
iteration 6 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9490028951106796, 0.9399818980657305, 0.9350488212763661, 0.932033830237423, 0.9279878681076287, 0.9260128391864919, 0.9209988431545318, 0.9179808551066037, 0.9050008091924259, 0.8990397583211954, 0.8960337583092075, 0.8860267453081825, 0.8740327153500806, 0.8569467671264079, 0.7830045614476752]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9490028951106796
finished with 15
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9490028951106796, 0.9399818980657305, 0.9350488212763661, 0.932033830237423, 0.9279878681076287, 0.9260128391864919, 0.9209988431545318, 0.9179808551066037, 0.9050008091924259, 0.8990397583211954, 0.8960337583092075, 0.8860267453081825, 0.8740327153500806, 0.8569467671264079, 0.7830045614476752]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9490028951106796
finished with 16
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.26232631248911403] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26232631248911403, 0.16498998585772384] ***
*** finished computation of 7 references, err: [Inf, 0.26232631248911403, 0.16498998585772384] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [84, 30, 0]]
** centroid: 1, normalized-entropy: 0.8314743880097292, [(1, 84), (2, 30)]
*** center 2: selecting labels [1] (freq >= 1) [from [31, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [79, 16, 0]]
** centroid: 3, normalized-entropy: 0.6540800387941991, [(1, 79), (2, 16)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 77, 17]]
** centroid: 4, normalized-entropy: 0.6819353204567525, [(2, 77), (3, 17)]
*** center 5: selecting labels [1, 2, 3] (freq >= 1) [from [2, 119, 11]]
** centroid: 5, normalized-entropy: 0.33134787428112095, [(1, 2), (2, 119), (3, 11)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [30, 10, 0]]
** centroid: 6, normalized-entropy: 0.8112781244591328, [(1, 30), (2, 10)]
*** center 7: selecting labels [1] (freq >= 1) [from [160, 0, 0]]
finished with 13 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22025408770161578] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22025408770161578, 0.15476970825444858] ***
*** finished computation of 7 references, err: [Inf, 0.22025408770161578, 0.15476970825444858] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [59, 8, 0]]
** centroid: 1, normalized-entropy: 0.52764232609436, [(1, 59), (2, 8)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [3, 60, 0]]
** centroid: 2, normalized-entropy: 0.2761954276479391, [(1, 3), (2, 60)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 64, 34]]
** centroid: 3, normalized-entropy: 0.9313043685793762, [(2, 64), (3, 34)]
*** center 4: selecting labels [1] (freq >= 1) [from [108, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [95, 1, 0]]
** centroid: 5, normalized-entropy: 0.08354288831032243, [(1, 95), (2, 1)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [103, 44, 0]]
** centroid: 6, normalized-entropy: 0.8804577494628094, [(1, 103), (2, 44)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [8, 80, 0]]
** centroid: 7, normalized-entropy: 0.43949698692151346, [(1, 8), (2, 80)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21647213525774106] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21647213525774106, 0.15646596125507173] ***
*** finished computation of 7 references, err: [Inf, 0.21647213525774106, 0.15646596125507173] ***
*** center 1: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [25, 59, 0]]
** centroid: 3, normalized-entropy: 0.8783609387702275, [(1, 25), (2, 59)]
*** center 4: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [82, 68, 0]]
** centroid: 5, normalized-entropy: 0.9937071066045081, [(1, 82), (2, 68)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 116, 26]]
** centroid: 6, normalized-entropy: 0.6868088934028034, [(2, 116), (3, 26)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [74, 12, 0]]
** centroid: 7, normalized-entropy: 0.5830194167347007, [(1, 74), (2, 12)]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 16)
[0.9490028951106796, 0.9399818980657305, 0.9350488212763661, 0.932033830237423, 0.9279878681076287, 0.9260128391864919, 0.9209988431545318, 0.9179808551066037, 0.9050008091924259, 0.8990397583211954, 0.8960337583092075, 0.8920627214040387, 0.8860267453081825, 0.8740327153500806, 0.8569467671264079, 0.7830045614476752]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9490028951106796
finished with 16
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.18292638266598807] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18292638266598807, 0.15104632318543737] ***
*** starting iteration: 2; err: [Inf, 0.18292638266598807, 0.15104632318543737] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18292638266598807, 0.15104632318543737, 0.14584183046687393] ***
*** starting iteration: 3; err: [Inf, 0.18292638266598807, 0.15104632318543737, 0.14584183046687393] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18292638266598807, 0.15104632318543737, 0.14584183046687393, 0.1441462031493429] ***
*** starting iteration: 4; err: [Inf, 0.18292638266598807, 0.15104632318543737, 0.14584183046687393, 0.1441462031493429] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18292638266598807, 0.15104632318543737, 0.14584183046687393, 0.1441462031493429, 0.14300562474457548] ***
*** starting iteration: 5; err: [Inf, 0.18292638266598807, 0.15104632318543737, 0.14584183046687393, 0.1441462031493429, 0.14300562474457548] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18292638266598807, 0.15104632318543737, 0.14584183046687393, 0.1441462031493429, 0.14300562474457548, 0.14234884347766638] ***
*** finished computation of 7 references, err: [Inf, 0.18292638266598807, 0.15104632318543737, 0.14584183046687393, 0.1441462031493429, 0.14300562474457548, 0.14234884347766638] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [134, 6, 0]]
** centroid: 1, normalized-entropy: 0.25524211319019174, [(1, 134), (2, 6)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [125, 13, 0]]
** centroid: 2, normalized-entropy: 0.45034509504921927, [(1, 125), (2, 13)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 88, 44]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(2, 88), (3, 44)]
*** center 4: selecting labels [1] (freq >= 2) [from [159, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [4, 130, 0]]
** centroid: 5, normalized-entropy: 0.19364280468389852, [(1, 4), (2, 130)]
*** center 6: selecting labels [1] (freq >= 2) [from [147, 1, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [5, 144, 0]]
** centroid: 7, normalized-entropy: 0.21192797897135776, [(1, 5), (2, 144)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18456798182800413] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18456798182800413, 0.14681298624724148] ***
*** starting iteration: 2; err: [Inf, 0.18456798182800413, 0.14681298624724148] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18456798182800413, 0.14681298624724148, 0.1442390631083399] ***
*** starting iteration: 3; err: [Inf, 0.18456798182800413, 0.14681298624724148, 0.1442390631083399] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18456798182800413, 0.14681298624724148, 0.1442390631083399, 0.1434357286952436] ***
*** finished computation of 7 references, err: [Inf, 0.18456798182800413, 0.14681298624724148, 0.1442390631083399, 0.1434357286952436] ***
*** center 1: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 50, 24]]
** centroid: 2, normalized-entropy: 0.9090221560878149, [(2, 50), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [50, 7, 0]]
** centroid: 3, normalized-entropy: 0.5373760853377334, [(1, 50), (2, 7)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [6, 65, 0]]
** centroid: 4, normalized-entropy: 0.4178642624458583, [(1, 6), (2, 65)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [7, 58, 0]]
** centroid: 5, normalized-entropy: 0.49291577961610966, [(1, 7), (2, 58)]
*** center 6: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17657324008084835] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17657324008084835, 0.1478162353900261] ***
*** starting iteration: 2; err: [Inf, 0.17657324008084835, 0.1478162353900261] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17657324008084835, 0.1478162353900261, 0.1431282453406602] ***
*** starting iteration: 3; err: [Inf, 0.17657324008084835, 0.1478162353900261, 0.1431282453406602] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17657324008084835, 0.1478162353900261, 0.1431282453406602, 0.1416656373925507] ***
*** starting iteration: 4; err: [Inf, 0.17657324008084835, 0.1478162353900261, 0.1431282453406602, 0.1416656373925507] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17657324008084835, 0.1478162353900261, 0.1431282453406602, 0.1416656373925507, 0.14091321215219796] ***
*** finished computation of 7 references, err: [Inf, 0.17657324008084835, 0.1478162353900261, 0.1431282453406602, 0.1416656373925507, 0.14091321215219796] ***
*** center 1: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 41, 27]]
** centroid: 2, normalized-entropy: 0.9692040949598235, [(2, 41), (3, 27)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [48, 8, 0]]
** centroid: 3, normalized-entropy: 0.5916727785823274, [(1, 48), (2, 8)]
*** center 4: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [11, 62, 0]]
** centroid: 5, normalized-entropy: 0.6115516951951333, [(1, 11), (2, 62)]
*** center 6: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 75, 0]]
** centroid: 7, normalized-entropy: 0.23519338181924157, [(1, 3), (2, 75)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19078608351200818] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19078608351200818, 0.14682073542848229] ***
*** starting iteration: 2; err: [Inf, 0.19078608351200818, 0.14682073542848229] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19078608351200818, 0.14682073542848229, 0.14412001899909227] ***
*** starting iteration: 3; err: [Inf, 0.19078608351200818, 0.14682073542848229, 0.14412001899909227] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19078608351200818, 0.14682073542848229, 0.14412001899909227, 0.1436610927064903] ***
*** finished computation of 7 references, err: [Inf, 0.19078608351200818, 0.14682073542848229, 0.14412001899909227, 0.1436610927064903] ***
*** center 1: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [51, 13, 0]]
** centroid: 2, normalized-entropy: 0.7281342378690551, [(1, 51), (2, 13)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 48, 24]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(2, 48), (3, 24)]
*** center 4: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [17, 50, 0]]
** centroid: 5, normalized-entropy: 0.8171387756817725, [(1, 17), (2, 50)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [6, 75, 0]]
** centroid: 6, normalized-entropy: 0.38094658570539014, [(1, 6), (2, 75)]
*** center 7: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1969274595733732] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1969274595733732, 0.14833277008682488] ***
*** starting iteration: 2; err: [Inf, 0.1969274595733732, 0.14833277008682488] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1969274595733732, 0.14833277008682488, 0.14520127443037928] ***
*** starting iteration: 3; err: [Inf, 0.1969274595733732, 0.14833277008682488, 0.14520127443037928] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1969274595733732, 0.14833277008682488, 0.14520127443037928, 0.14482783384155481] ***
*** finished computation of 7 references, err: [Inf, 0.1969274595733732, 0.14833277008682488, 0.14520127443037928, 0.14482783384155481] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 44, 25]]
** centroid: 1, normalized-entropy: 0.9445911819316588, [(2, 44), (3, 25)]
*** center 2: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [67, 24, 0]]
** centroid: 3, normalized-entropy: 0.8323322690121193, [(1, 67), (2, 24)]
*** center 4: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [48, 13, 0]]
** centroid: 5, normalized-entropy: 0.7473944462440388, [(1, 48), (2, 13)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 52, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [26, 53, 0]]
** centroid: 7, normalized-entropy: 0.9140185106642174, [(1, 26), (2, 53)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19192389412596822] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19192389412596822, 0.14841782144829632] ***
*** starting iteration: 2; err: [Inf, 0.19192389412596822, 0.14841782144829632] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19192389412596822, 0.14841782144829632, 0.14367129036411644] ***
*** starting iteration: 3; err: [Inf, 0.19192389412596822, 0.14841782144829632, 0.14367129036411644] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19192389412596822, 0.14841782144829632, 0.14367129036411644, 0.14190583657287062] ***
*** starting iteration: 4; err: [Inf, 0.19192389412596822, 0.14841782144829632, 0.14367129036411644, 0.14190583657287062] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19192389412596822, 0.14841782144829632, 0.14367129036411644, 0.14190583657287062, 0.14086461137607695] ***
*** starting iteration: 5; err: [Inf, 0.19192389412596822, 0.14841782144829632, 0.14367129036411644, 0.14190583657287062, 0.14086461137607695] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19192389412596822, 0.14841782144829632, 0.14367129036411644, 0.14190583657287062, 0.14086461137607695, 0.1402514514438808] ***
*** finished computation of 7 references, err: [Inf, 0.19192389412596822, 0.14841782144829632, 0.14367129036411644, 0.14190583657287062, 0.14086461137607695, 0.1402514514438808] ***
*** center 1: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [64, 2, 0]]
** centroid: 2, normalized-entropy: 0.19590927087360496, [(1, 64), (2, 2)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 46, 16]]
** centroid: 3, normalized-entropy: 0.8238116333123173, [(2, 46), (3, 16)]
*** center 4: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [2, 72, 0]]
** centroid: 5, normalized-entropy: 0.1792560669283214, [(1, 2), (2, 72)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [4, 64, 0]]
** centroid: 6, normalized-entropy: 0.32275695889739825, [(1, 4), (2, 64)]
*** center 7: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20466681070253254] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20466681070253254, 0.15023911465331913] ***
*** starting iteration: 2; err: [Inf, 0.20466681070253254, 0.15023911465331913] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20466681070253254, 0.15023911465331913, 0.1475394350932911] ***
*** starting iteration: 3; err: [Inf, 0.20466681070253254, 0.15023911465331913, 0.1475394350932911] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20466681070253254, 0.15023911465331913, 0.1475394350932911, 0.1469966426352039] ***
*** finished computation of 7 references, err: [Inf, 0.20466681070253254, 0.15023911465331913, 0.1475394350932911, 0.1469966426352039] ***
*** center 1: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 67, 27]]
** centroid: 2, normalized-entropy: 0.8651214227512075, [(2, 67), (3, 27)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [46, 6, 0]]
** centroid: 3, normalized-entropy: 0.5159469300074472, [(1, 46), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [75, 27, 0]]
** centroid: 4, normalized-entropy: 0.8337649072106652, [(1, 75), (2, 27)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [29, 27, 0]]
** centroid: 5, normalized-entropy: 0.9990797181805819, [(1, 29), (2, 27)]
*** center 6: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 66, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1778549219323322] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1778549219323322, 0.14892132443003356] ***
*** starting iteration: 2; err: [Inf, 0.1778549219323322, 0.14892132443003356] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1778549219323322, 0.14892132443003356, 0.14592035335209222] ***
*** starting iteration: 3; err: [Inf, 0.1778549219323322, 0.14892132443003356, 0.14592035335209222] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1778549219323322, 0.14892132443003356, 0.14592035335209222, 0.14464637234201655] ***
*** starting iteration: 4; err: [Inf, 0.1778549219323322, 0.14892132443003356, 0.14592035335209222, 0.14464637234201655] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1778549219323322, 0.14892132443003356, 0.14592035335209222, 0.14464637234201655, 0.14409580796677618] ***
*** finished computation of 7 references, err: [Inf, 0.1778549219323322, 0.14892132443003356, 0.14592035335209222, 0.14464637234201655, 0.14409580796677618] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 75, 20]]
** centroid: 1, normalized-entropy: 0.7424875695421234, [(2, 75), (3, 20)]
*** center 2: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [60, 2, 0]]
** centroid: 3, normalized-entropy: 0.2055925081850832, [(1, 60), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [48, 26, 0]]
** centroid: 4, normalized-entropy: 0.9352691398683568, [(1, 48), (2, 26)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [52, 21, 0]]
** centroid: 5, normalized-entropy: 0.8656939941993219, [(1, 52), (2, 21)]
*** center 6: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [4, 63, 0]]
** centroid: 7, normalized-entropy: 0.32625881462949274, [(1, 4), (2, 63)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19393538358621298] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19393538358621298, 0.15042775774374603] ***
*** starting iteration: 2; err: [Inf, 0.19393538358621298, 0.15042775774374603] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19393538358621298, 0.15042775774374603, 0.14626894644182176] ***
*** starting iteration: 3; err: [Inf, 0.19393538358621298, 0.15042775774374603, 0.14626894644182176] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19393538358621298, 0.15042775774374603, 0.14626894644182176, 0.145304833217524] ***
*** finished computation of 7 references, err: [Inf, 0.19393538358621298, 0.15042775774374603, 0.14626894644182176, 0.145304833217524] ***
*** center 1: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 66, 23]]
** centroid: 2, normalized-entropy: 0.8243633538094403, [(2, 66), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [48, 46, 0]]
** centroid: 3, normalized-entropy: 0.9996734260048917, [(1, 48), (2, 46)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [27, 34, 0]]
** centroid: 4, normalized-entropy: 0.9904799742690307, [(1, 27), (2, 34)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [19, 42, 0]]
** centroid: 5, normalized-entropy: 0.8948692308065576, [(1, 19), (2, 42)]
*** center 6: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18990486943908036] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18990486943908036, 0.14456893180217595] ***
*** starting iteration: 2; err: [Inf, 0.18990486943908036, 0.14456893180217595] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18990486943908036, 0.14456893180217595, 0.14108714678883552] ***
*** starting iteration: 3; err: [Inf, 0.18990486943908036, 0.14456893180217595, 0.14108714678883552] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18990486943908036, 0.14456893180217595, 0.14108714678883552, 0.14020574987772852] ***
*** finished computation of 7 references, err: [Inf, 0.18990486943908036, 0.14456893180217595, 0.14108714678883552, 0.14020574987772852] ***
*** center 1: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 51, 25]]
** centroid: 2, normalized-entropy: 0.9138472873262908, [(2, 51), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [62, 8, 0]]
** centroid: 3, normalized-entropy: 0.5127091420308771, [(1, 62), (2, 8)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [6, 71, 0]]
** centroid: 4, normalized-entropy: 0.39481484603049416, [(1, 6), (2, 71)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [6, 67, 0]]
** centroid: 5, normalized-entropy: 0.4098553703184051, [(1, 6), (2, 67)]
*** center 6: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1938133858218789] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1938133858218789, 0.1489981549885124] ***
*** starting iteration: 2; err: [Inf, 0.1938133858218789, 0.1489981549885124] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1938133858218789, 0.1489981549885124, 0.14520539005845784] ***
*** starting iteration: 3; err: [Inf, 0.1938133858218789, 0.1489981549885124, 0.14520539005845784] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1938133858218789, 0.1489981549885124, 0.14520539005845784, 0.14443264076719062] ***
*** finished computation of 7 references, err: [Inf, 0.1938133858218789, 0.1489981549885124, 0.14520539005845784, 0.14443264076719062] ***
*** center 1: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 53, 20]]
** centroid: 2, normalized-entropy: 0.847107490529376, [(2, 53), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [83, 4, 0]]
** centroid: 3, normalized-entropy: 0.2690553027246505, [(1, 83), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [8, 72, 0]]
** centroid: 4, normalized-entropy: 0.46899559358928133, [(1, 8), (2, 72)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [6, 62, 0]]
** centroid: 5, normalized-entropy: 0.43055186701043935, [(1, 6), (2, 62)]
*** center 6: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [40, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19912459370307625] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19912459370307625, 0.14885092236660422] ***
*** starting iteration: 2; err: [Inf, 0.19912459370307625, 0.14885092236660422] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19912459370307625, 0.14885092236660422, 0.14577657360758167] ***
*** starting iteration: 3; err: [Inf, 0.19912459370307625, 0.14885092236660422, 0.14577657360758167] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19912459370307625, 0.14885092236660422, 0.14577657360758167, 0.14549360919278115] ***
*** finished computation of 7 references, err: [Inf, 0.19912459370307625, 0.14885092236660422, 0.14577657360758167, 0.14549360919278115] ***
*** center 1: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 49, 17]]
** centroid: 2, normalized-entropy: 0.8230660790114689, [(2, 49), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [54, 4, 0]]
** centroid: 3, normalized-entropy: 0.36205125173399805, [(1, 54), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [82, 26, 0]]
** centroid: 4, normalized-entropy: 0.7962699368824384, [(1, 82), (2, 26)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [20, 37, 0]]
** centroid: 5, normalized-entropy: 0.9348490242345946, [(1, 20), (2, 37)]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 65, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1768636410739273] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1768636410739273, 0.144347043402493] ***
*** starting iteration: 2; err: [Inf, 0.1768636410739273, 0.144347043402493] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1768636410739273, 0.144347043402493, 0.14216341107152403] ***
*** starting iteration: 3; err: [Inf, 0.1768636410739273, 0.144347043402493, 0.14216341107152403] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1768636410739273, 0.144347043402493, 0.14216341107152403, 0.1416734551899135] ***
*** finished computation of 7 references, err: [Inf, 0.1768636410739273, 0.144347043402493, 0.14216341107152403, 0.1416734551899135] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [85, 7, 0]]
** centroid: 1, normalized-entropy: 0.3882389775123619, [(1, 85), (2, 7)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [50, 15, 0]]
** centroid: 2, normalized-entropy: 0.7793498372920851, [(1, 50), (2, 15)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 44, 24]]
** centroid: 3, normalized-entropy: 0.9366673818775627, [(2, 44), (3, 24)]
*** center 4: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [12, 55, 0]]
** centroid: 5, normalized-entropy: 0.678114052360606, [(1, 12), (2, 55)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 62, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20441690871492027] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20441690871492027, 0.1453369455570355] ***
*** starting iteration: 2; err: [Inf, 0.20441690871492027, 0.1453369455570355] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20441690871492027, 0.1453369455570355, 0.1413673501620069] ***
*** starting iteration: 3; err: [Inf, 0.20441690871492027, 0.1453369455570355, 0.1413673501620069] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20441690871492027, 0.1453369455570355, 0.1413673501620069, 0.14082784016150982] ***
*** finished computation of 7 references, err: [Inf, 0.20441690871492027, 0.1453369455570355, 0.1413673501620069, 0.14082784016150982] ***
*** center 1: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 60, 23]]
** centroid: 2, normalized-entropy: 0.8514808683852091, [(2, 60), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [43, 12, 0]]
** centroid: 3, normalized-entropy: 0.7568336324184036, [(1, 43), (2, 12)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [71, 28, 0]]
** centroid: 4, normalized-entropy: 0.8592759806609698, [(1, 71), (2, 28)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [51, 15, 0]]
** centroid: 5, normalized-entropy: 0.7732266742876346, [(1, 51), (2, 15)]
*** center 6: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 64, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17576343703456224] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17576343703456224, 0.148287831177935] ***
*** starting iteration: 2; err: [Inf, 0.17576343703456224, 0.148287831177935] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17576343703456224, 0.148287831177935, 0.14369306667894124] ***
*** starting iteration: 3; err: [Inf, 0.17576343703456224, 0.148287831177935, 0.14369306667894124] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17576343703456224, 0.148287831177935, 0.14369306667894124, 0.14292591279558836] ***
*** finished computation of 7 references, err: [Inf, 0.17576343703456224, 0.148287831177935, 0.14369306667894124, 0.14292591279558836] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [18, 76, 0]]
** centroid: 1, normalized-entropy: 0.7045767128725937, [(1, 18), (2, 76)]
*** center 2: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [58, 6, 0]]
** centroid: 3, normalized-entropy: 0.44886448872302936, [(1, 58), (2, 6)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 54, 26]]
** centroid: 4, normalized-entropy: 0.9097361225311661, [(2, 54), (3, 26)]
*** center 5: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 70, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1962990382593125] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1962990382593125, 0.14808502269536256] ***
*** starting iteration: 2; err: [Inf, 0.1962990382593125, 0.14808502269536256] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1962990382593125, 0.14808502269536256, 0.14508012611139565] ***
*** starting iteration: 3; err: [Inf, 0.1962990382593125, 0.14808502269536256, 0.14508012611139565] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1962990382593125, 0.14808502269536256, 0.14508012611139565, 0.1444647521590814] ***
*** finished computation of 7 references, err: [Inf, 0.1962990382593125, 0.14808502269536256, 0.14508012611139565, 0.1444647521590814] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 67, 24]]
** centroid: 1, normalized-entropy: 0.8323322690121193, [(2, 67), (3, 24)]
*** center 2: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [72, 2, 0]]
** centroid: 3, normalized-entropy: 0.1792560669283214, [(1, 72), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [57, 27, 0]]
** centroid: 4, normalized-entropy: 0.9059282160429994, [(1, 57), (2, 27)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [44, 22, 0]]
** centroid: 5, normalized-entropy: 0.9182958340544894, [(1, 44), (2, 22)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 58, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.16860327249485998] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16860327249485998, 0.14494382583908735] ***
*** starting iteration: 2; err: [Inf, 0.16860327249485998, 0.14494382583908735] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16860327249485998, 0.14494382583908735, 0.14254544134764] ***
*** starting iteration: 3; err: [Inf, 0.16860327249485998, 0.14494382583908735, 0.14254544134764] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16860327249485998, 0.14494382583908735, 0.14254544134764, 0.14228777472069487] ***
*** finished computation of 7 references, err: [Inf, 0.16860327249485998, 0.14494382583908735, 0.14254544134764, 0.14228777472069487] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [27, 71, 0]]
** centroid: 1, normalized-entropy: 0.8492607824494318, [(1, 27), (2, 71)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [51, 3, 0]]
** centroid: 2, normalized-entropy: 0.3095434291503252, [(1, 51), (2, 3)]
*** center 3: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 42, 24]]
** centroid: 4, normalized-entropy: 0.9456603046006401, [(2, 42), (3, 24)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [70, 4, 0]]
** centroid: 5, normalized-entropy: 0.30337483608641397, [(1, 70), (2, 4)]
*** center 6: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 67, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19431613405793904] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19431613405793904, 0.1486721776165068] ***
*** starting iteration: 2; err: [Inf, 0.19431613405793904, 0.1486721776165068] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19431613405793904, 0.1486721776165068, 0.14478022733330725] ***
*** starting iteration: 3; err: [Inf, 0.19431613405793904, 0.1486721776165068, 0.14478022733330725] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19431613405793904, 0.1486721776165068, 0.14478022733330725, 0.14438366318121554] ***
*** finished computation of 7 references, err: [Inf, 0.19431613405793904, 0.1486721776165068, 0.14478022733330725, 0.14438366318121554] ***
*** center 1: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 46, 23]]
** centroid: 2, normalized-entropy: 0.9182958340544894, [(2, 46), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [70, 4, 0]]
** centroid: 3, normalized-entropy: 0.30337483608641397, [(1, 70), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [4, 77, 0]]
** centroid: 4, normalized-entropy: 0.2837689703721877, [(1, 4), (2, 77)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [10, 60, 0]]
** centroid: 5, normalized-entropy: 0.5916727785823274, [(1, 10), (2, 60)]
*** center 6: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [51, 4, 0]]
** centroid: 7, normalized-entropy: 0.37601985096927276, [(1, 51), (2, 4)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1803676991276443] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1803676991276443, 0.14677558463532478] ***
*** starting iteration: 2; err: [Inf, 0.1803676991276443, 0.14677558463532478] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1803676991276443, 0.14677558463532478, 0.14219311601854862] ***
*** starting iteration: 3; err: [Inf, 0.1803676991276443, 0.14677558463532478, 0.14219311601854862] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1803676991276443, 0.14677558463532478, 0.14219311601854862, 0.14189446780318393] ***
*** finished computation of 7 references, err: [Inf, 0.1803676991276443, 0.14677558463532478, 0.14219311601854862, 0.14189446780318393] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [20, 65, 0]]
** centroid: 1, normalized-entropy: 0.787126586201269, [(1, 20), (2, 65)]
*** center 2: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 48, 18]]
** centroid: 4, normalized-entropy: 0.8453509366224364, [(2, 48), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [3, 67, 0]]
** centroid: 5, normalized-entropy: 0.25524211319019174, [(1, 3), (2, 67)]
*** center 6: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [71, 2, 0]]
** centroid: 7, normalized-entropy: 0.18116640155354563, [(1, 71), (2, 2)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18271803898736835] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18271803898736835, 0.1487698582764715] ***
*** starting iteration: 2; err: [Inf, 0.18271803898736835, 0.1487698582764715] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18271803898736835, 0.1487698582764715, 0.14670561270415783] ***
*** starting iteration: 3; err: [Inf, 0.18271803898736835, 0.1487698582764715, 0.14670561270415783] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18271803898736835, 0.1487698582764715, 0.14670561270415783, 0.14630282463878394] ***
*** finished computation of 7 references, err: [Inf, 0.18271803898736835, 0.1487698582764715, 0.14670561270415783, 0.14630282463878394] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [85, 19, 0]]
** centroid: 1, normalized-entropy: 0.6859315226878925, [(1, 85), (2, 19)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [40, 8, 0]]
** centroid: 2, normalized-entropy: 0.6500224216483541, [(1, 40), (2, 8)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 46, 24]]
** centroid: 3, normalized-entropy: 0.927526588431676, [(2, 46), (3, 24)]
*** center 4: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [5, 70, 0]]
** centroid: 5, normalized-entropy: 0.3533593350214213, [(1, 5), (2, 70)]
*** center 6: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 51, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18220951507613062] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18220951507613062, 0.14921213595289737] ***
*** starting iteration: 2; err: [Inf, 0.18220951507613062, 0.14921213595289737] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18220951507613062, 0.14921213595289737, 0.14542888217978178] ***
*** starting iteration: 3; err: [Inf, 0.18220951507613062, 0.14921213595289737, 0.14542888217978178] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18220951507613062, 0.14921213595289737, 0.14542888217978178, 0.1439731545932591] ***
*** starting iteration: 4; err: [Inf, 0.18220951507613062, 0.14921213595289737, 0.14542888217978178, 0.1439731545932591] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18220951507613062, 0.14921213595289737, 0.14542888217978178, 0.1439731545932591, 0.1433111488018185] ***
*** finished computation of 7 references, err: [Inf, 0.18220951507613062, 0.14921213595289737, 0.14542888217978178, 0.1439731545932591, 0.1433111488018185] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 73, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [36, 31, 0]]
** centroid: 3, normalized-entropy: 0.995978956518722, [(1, 36), (2, 31)]
*** center 4: selecting labels [1] (freq >= 2) [from [86, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [32, 29, 0]]
** centroid: 5, normalized-entropy: 0.9982545693874832, [(1, 32), (2, 29)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 63, 22]]
** centroid: 6, normalized-entropy: 0.8249658680139929, [(2, 63), (3, 22)]
*** center 7: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19743274894915522] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19743274894915522, 0.14568891336699016] ***
*** starting iteration: 2; err: [Inf, 0.19743274894915522, 0.14568891336699016] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19743274894915522, 0.14568891336699016, 0.14305712360329925] ***
*** starting iteration: 3; err: [Inf, 0.19743274894915522, 0.14568891336699016, 0.14305712360329925] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19743274894915522, 0.14568891336699016, 0.14305712360329925, 0.14255346797779203] ***
*** finished computation of 7 references, err: [Inf, 0.19743274894915522, 0.14568891336699016, 0.14305712360329925, 0.14255346797779203] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [84, 6, 0]]
** centroid: 1, normalized-entropy: 0.3533593350214213, [(1, 84), (2, 6)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 32, 22]]
** centroid: 2, normalized-entropy: 0.975119064940866, [(2, 32), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [58, 2, 0]]
** centroid: 3, normalized-entropy: 0.2108423003185322, [(1, 58), (2, 2)]
*** center 4: selecting labels [1] (freq >= 2) [from [72, 1, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [2, 67, 0]]
** centroid: 6, normalized-entropy: 0.18927843126120178, [(1, 2), (2, 67)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 86, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1925345795257017] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1925345795257017, 0.14977919830009342] ***
*** starting iteration: 2; err: [Inf, 0.1925345795257017, 0.14977919830009342] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1925345795257017, 0.14977919830009342, 0.14619302954617888] ***
*** starting iteration: 3; err: [Inf, 0.1925345795257017, 0.14977919830009342, 0.14619302954617888] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1925345795257017, 0.14977919830009342, 0.14619302954617888, 0.1452223249031231] ***
*** finished computation of 7 references, err: [Inf, 0.1925345795257017, 0.14977919830009342, 0.14619302954617888, 0.1452223249031231] ***
*** center 1: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [49, 24, 0]]
** centroid: 2, normalized-entropy: 0.9136617865655933, [(1, 49), (2, 24)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 57, 21]]
** centroid: 3, normalized-entropy: 0.8403586716091169, [(2, 57), (3, 21)]
*** center 4: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [15, 45, 0]]
** centroid: 5, normalized-entropy: 0.8112781244591328, [(1, 15), (2, 45)]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 68, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19514521034434437] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19514521034434437, 0.1527451923303306] ***
*** starting iteration: 2; err: [Inf, 0.19514521034434437, 0.1527451923303306] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19514521034434437, 0.1527451923303306, 0.14847633214481176] ***
*** starting iteration: 3; err: [Inf, 0.19514521034434437, 0.1527451923303306, 0.14847633214481176] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19514521034434437, 0.1527451923303306, 0.14847633214481176, 0.1478028413276188] ***
*** finished computation of 7 references, err: [Inf, 0.19514521034434437, 0.1527451923303306, 0.14847633214481176, 0.1478028413276188] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [2, 69, 0]]
** centroid: 1, normalized-entropy: 0.18512476010054582, [(1, 2), (2, 69)]
*** center 2: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [44, 45, 0]]
** centroid: 3, normalized-entropy: 0.9999089303498087, [(1, 44), (2, 45)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 53, 25]]
** centroid: 4, normalized-entropy: 0.9049382594235603, [(2, 53), (3, 25)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [57, 10, 0]]
** centroid: 5, normalized-entropy: 0.6079696120060726, [(1, 57), (2, 10)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [66, 10, 0]]
** centroid: 6, normalized-entropy: 0.5617526078313283, [(1, 66), (2, 10)]
*** center 7: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1872593395318836] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1872593395318836, 0.1462133854739368] ***
*** starting iteration: 2; err: [Inf, 0.1872593395318836, 0.1462133854739368] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1872593395318836, 0.1462133854739368, 0.14345509985461832] ***
*** starting iteration: 3; err: [Inf, 0.1872593395318836, 0.1462133854739368, 0.14345509985461832] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1872593395318836, 0.1462133854739368, 0.14345509985461832, 0.14319330870918928] ***
*** finished computation of 7 references, err: [Inf, 0.1872593395318836, 0.1462133854739368, 0.14345509985461832, 0.14319330870918928] ***
*** center 1: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 45, 21]]
** centroid: 2, normalized-entropy: 0.9023932827949788, [(2, 45), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [49, 10, 0]]
** centroid: 3, normalized-entropy: 0.656540281386946, [(1, 49), (2, 10)]
*** center 4: selecting labels [1] (freq >= 2) [from [77, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [9, 66, 0]]
** centroid: 5, normalized-entropy: 0.5293608652873645, [(1, 9), (2, 66)]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 65, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1951522715315223] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1951522715315223, 0.14934781681606546] ***
*** starting iteration: 2; err: [Inf, 0.1951522715315223, 0.14934781681606546] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1951522715315223, 0.14934781681606546, 0.1454862984996289] ***
*** starting iteration: 3; err: [Inf, 0.1951522715315223, 0.14934781681606546, 0.1454862984996289] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1951522715315223, 0.14934781681606546, 0.1454862984996289, 0.14417049790918826] ***
*** starting iteration: 4; err: [Inf, 0.1951522715315223, 0.14934781681606546, 0.1454862984996289, 0.14417049790918826] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1951522715315223, 0.14934781681606546, 0.1454862984996289, 0.14417049790918826, 0.14343153515458107] ***
*** finished computation of 7 references, err: [Inf, 0.1951522715315223, 0.14934781681606546, 0.1454862984996289, 0.14417049790918826, 0.14343153515458107] ***
*** center 1: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [58, 10, 0]]
** centroid: 2, normalized-entropy: 0.6024308020404452, [(1, 58), (2, 10)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 40, 20]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(2, 40), (3, 20)]
*** center 4: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [4, 75, 0]]
** centroid: 5, normalized-entropy: 0.2890794597316462, [(1, 4), (2, 75)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [9, 75, 0]]
** centroid: 6, normalized-entropy: 0.4912373418243334, [(1, 9), (2, 75)]
*** center 7: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1937321749497205] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1937321749497205, 0.1462066616648808] ***
*** starting iteration: 2; err: [Inf, 0.1937321749497205, 0.1462066616648808] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1937321749497205, 0.1462066616648808, 0.14176179037196562] ***
*** starting iteration: 3; err: [Inf, 0.1937321749497205, 0.1462066616648808, 0.14176179037196562] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1937321749497205, 0.1462066616648808, 0.14176179037196562, 0.14099047439545392] ***
*** finished computation of 7 references, err: [Inf, 0.1937321749497205, 0.1462066616648808, 0.14176179037196562, 0.14099047439545392] ***
*** center 1: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 42, 25]]
** centroid: 2, normalized-entropy: 0.9530483471581301, [(2, 42), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [66, 7, 0]]
** centroid: 3, normalized-entropy: 0.4558314584408233, [(1, 66), (2, 7)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [3, 78, 0]]
** centroid: 4, normalized-entropy: 0.22853814395352806, [(1, 3), (2, 78)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [5, 65, 0]]
** centroid: 5, normalized-entropy: 0.3712323266408756, [(1, 5), (2, 65)]
*** center 6: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [58, 1, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19555154271796346] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19555154271796346, 0.14805425731837749] ***
*** starting iteration: 2; err: [Inf, 0.19555154271796346, 0.14805425731837749] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19555154271796346, 0.14805425731837749, 0.1435559331472032] ***
*** starting iteration: 3; err: [Inf, 0.19555154271796346, 0.14805425731837749, 0.1435559331472032] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19555154271796346, 0.14805425731837749, 0.1435559331472032, 0.14278106562048196] ***
*** finished computation of 7 references, err: [Inf, 0.19555154271796346, 0.14805425731837749, 0.1435559331472032, 0.14278106562048196] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 57, 23]]
** centroid: 1, normalized-entropy: 0.8654698974285927, [(2, 57), (3, 23)]
*** center 2: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [59, 9, 0]]
** centroid: 3, normalized-entropy: 0.5638560041131417, [(1, 59), (2, 9)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [42, 36, 0]]
** centroid: 4, normalized-entropy: 0.9957274520849256, [(1, 42), (2, 36)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [48, 16, 0]]
** centroid: 5, normalized-entropy: 0.8112781244591328, [(1, 48), (2, 16)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 67, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18392925428319723] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18392925428319723, 0.15259715911746025] ***
*** starting iteration: 2; err: [Inf, 0.18392925428319723, 0.15259715911746025] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18392925428319723, 0.15259715911746025, 0.14956728538870812] ***
*** starting iteration: 3; err: [Inf, 0.18392925428319723, 0.15259715911746025, 0.14956728538870812] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18392925428319723, 0.15259715911746025, 0.14956728538870812, 0.14847925355657934] ***
*** starting iteration: 4; err: [Inf, 0.18392925428319723, 0.15259715911746025, 0.14956728538870812, 0.14847925355657934] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18392925428319723, 0.15259715911746025, 0.14956728538870812, 0.14847925355657934, 0.14779409195668997] ***
*** finished computation of 7 references, err: [Inf, 0.18392925428319723, 0.15259715911746025, 0.14956728538870812, 0.14847925355657934, 0.14779409195668997] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 64, 26]]
** centroid: 1, normalized-entropy: 0.8672816222000259, [(2, 64), (3, 26)]
*** center 2: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [48, 2, 0]]
** centroid: 3, normalized-entropy: 0.24229218908241482, [(1, 48), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [54, 33, 0]]
** centroid: 4, normalized-entropy: 0.9575534837147484, [(1, 54), (2, 33)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [36, 28, 0]]
** centroid: 5, normalized-entropy: 0.9886994082884974, [(1, 36), (2, 28)]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 64, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.186305887456052] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.186305887456052, 0.14964511992316692] ***
*** starting iteration: 2; err: [Inf, 0.186305887456052, 0.14964511992316692] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.186305887456052, 0.14964511992316692, 0.14637547115981578] ***
*** starting iteration: 3; err: [Inf, 0.186305887456052, 0.14964511992316692, 0.14637547115981578] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.186305887456052, 0.14964511992316692, 0.14637547115981578, 0.1450818976685405] ***
*** starting iteration: 4; err: [Inf, 0.186305887456052, 0.14964511992316692, 0.14637547115981578, 0.1450818976685405] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.186305887456052, 0.14964511992316692, 0.14637547115981578, 0.1450818976685405, 0.14459611465223132] ***
*** finished computation of 7 references, err: [Inf, 0.186305887456052, 0.14964511992316692, 0.14637547115981578, 0.1450818976685405, 0.14459611465223132] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 56, 2]]
** centroid: 1, normalized-entropy: 0.21639693245126485, [(2, 56), (3, 2)]
*** center 2: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [48, 26, 0]]
** centroid: 3, normalized-entropy: 0.9352691398683568, [(1, 48), (2, 26)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [76, 23, 0]]
** centroid: 4, normalized-entropy: 0.7820392866349247, [(1, 76), (2, 23)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [36, 26, 0]]
** centroid: 5, normalized-entropy: 0.9811522341999134, [(1, 36), (2, 26)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 63, 16]]
** centroid: 6, normalized-entropy: 0.7269625813353975, [(2, 63), (3, 16)]
*** center 7: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19161975753679872] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19161975753679872, 0.1520375626422465] ***
*** starting iteration: 2; err: [Inf, 0.19161975753679872, 0.1520375626422465] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19161975753679872, 0.1520375626422465, 0.14689254061318935] ***
*** starting iteration: 3; err: [Inf, 0.19161975753679872, 0.1520375626422465, 0.14689254061318935] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19161975753679872, 0.1520375626422465, 0.14689254061318935, 0.1448928756341338] ***
*** starting iteration: 4; err: [Inf, 0.19161975753679872, 0.1520375626422465, 0.14689254061318935, 0.1448928756341338] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19161975753679872, 0.1520375626422465, 0.14689254061318935, 0.1448928756341338, 0.14415409649629146] ***
*** finished computation of 7 references, err: [Inf, 0.19161975753679872, 0.1520375626422465, 0.14689254061318935, 0.1448928756341338, 0.14415409649629146] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [10, 78, 0]]
** centroid: 1, normalized-entropy: 0.5107878229540133, [(1, 10), (2, 78)]
*** center 2: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [62, 1, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [71, 2, 0]]
** centroid: 5, normalized-entropy: 0.18116640155354563, [(1, 71), (2, 2)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [2, 65, 0]]
** centroid: 6, normalized-entropy: 0.19364280468389852, [(1, 2), (2, 65)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 43, 23]]
** centroid: 7, normalized-entropy: 0.9327076126690367, [(2, 43), (3, 23)]
finished with 8 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 382,3 => 44,1 => 574), Dict(2 => 338,3 => 35,1 => 627))
[ Info: ===== scores for single classifier: {"micro_f1":0.956,"precision":0.956,"recall":0.956,"macro_recall":0.9553428577720076,"macro_f1":0.933351307964311,"accuracy":0.956,"class_f1":{"2":0.933933933933934,"3":0.8947368421052632,"1":0.971383147853736},"class_precision":{"2":0.948170731707317,"3":0.8292682926829268,"1":0.9683042789223455},"class_recall":{"2":0.9201183431952663,"3":0.9714285714285714,"1":0.9744816586921851}}
[ Info: ===== scores for 1: {"micro_f1":0.973,"precision":0.973,"recall":0.973,"macro_recall":0.9730172661346751,"macro_f1":0.9706715435509347,"accuracy":0.973,"class_f1":{"2":0.9606986899563319,"3":0.9714285714285714,"1":0.9798873692679002},"class_precision":{"2":0.9455587392550143,"3":0.9714285714285714,"1":0.9886363636363636},"class_recall":{"2":0.9763313609467456,"3":0.9714285714285714,"1":0.9712918660287081}}
[ Info: ===== scores for 5: {"micro_f1":0.973,"precision":0.973,"recall":0.973,"macro_recall":0.9662978946379756,"macro_f1":0.9618220021575382,"accuracy":0.973,"class_f1":{"2":0.9612625538020085,"3":0.9428571428571428,"1":0.9813463098134632},"class_precision":{"2":0.9331476323119777,"3":0.9428571428571428,"1":0.9983498349834984},"class_recall":{"2":0.9911242603550295,"3":0.9428571428571428,"1":0.9649122807017544}}
[ Info: ===== scores for 7: {"micro_f1":0.978,"precision":0.978,"recall":0.978,"macro_recall":0.9784027937874091,"macro_f1":0.9702205251013954,"accuracy":0.978,"class_f1":{"2":0.9682997118155621,"3":0.9577464788732395,"1":0.9846153846153847},"class_precision":{"2":0.9438202247191011,"3":0.9444444444444444,"1":1.0},"class_recall":{"2":0.9940828402366864,"3":0.9714285714285714,"1":0.9696969696969697}}
[ Info: ===== scores for 9: {"micro_f1":0.979,"precision":0.979,"recall":0.979,"macro_recall":0.9874720421279126,"macro_f1":0.9754905809506069,"accuracy":0.979,"class_f1":{"2":0.9696092619392186,"3":0.9722222222222222,"1":0.9846402586903799},"class_precision":{"2":0.9490084985835694,"3":0.9459459459459459,"1":0.9983606557377049},"class_recall":{"2":0.9911242603550295,"3":1.0,"1":0.9712918660287081}}
[ Info: ===== scores for 11: {"micro_f1":0.978,"precision":0.978,"recall":0.978,"macro_recall":0.9869404100173331,"macro_f1":0.9747496949781027,"accuracy":0.978,"class_f1":{"2":0.968208092485549,"3":0.9722222222222222,"1":0.9838187702265372},"class_precision":{"2":0.9463276836158192,"3":0.9459459459459459,"1":0.9983579638752053},"class_recall":{"2":0.9911242603550295,"3":1.0,"1":0.9696969696969697}}
(score = 0.969, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.969, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.973, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.973, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.972, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.972, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.973, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.973, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.973, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.973, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.973, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.973, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.974, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.974, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.978, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.978, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.978,"k":7,"kernel":"direct_kernel","dist":"l2_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.978,"precision":0.978,"recall":0.978,"macro_recall":0.9784027937874091,"macro_f1":0.9702205251013954,"accuracy":0.978,"class_f1":{"2":0.9682997118155621,"3":0.9577464788732395,"1":0.9846153846153847},"class_precision":{"2":0.9438202247191011,"3":0.9444444444444444,"1":1.0},"class_recall":{"2":0.9940828402366864,"3":0.9714285714285714,"1":0.9696969696969697}}
Test Summary: | Pass  Total
AKNC          |    8      8
[114, 2, 3, 1, 2, 1, 2, 2, 1, 1, 1, 4, 12, 6, 12, 6, 31, 13, 11, 3, 18, 21, 6, 10, 2, 6, 1, 58, 11, 9, 4, 13, 27, 25, 48, 4, 33, 14, 20, 26, 4, 40, 4, 3, 4, 22, 6, 41, 3, 4, 29, 7, 32, 6, 2, 11, 5, 4, 27, 2, 58, 11, 26, 3, 12, 4, 20, 22, 3, 8, 61, 9, 12, 19, 37, 11, 14, 2, 52, 17, 39, 7, 14, 7, 8, 12, 43, 53, 11, 44, 52, 9, 10, 9, 35, 23, 2, 269, 5, 20, 3, 6, 9, 17, 115, 12, 10, 21, 30, 4, 11, 47, 10, 45, 7, 36, 19, 2, 6, 1, 77, 9, 45, 5, 15, 7, 4, 4, 53, 13, 29, 24, 38, 5, 25, 9, 55, 5, 10, 9, 8, 14, 45, 55, 13, 24, 18, 1, 1161, 17, 9, 36, 15, 7, 19, 10, 20, 6, 6, 75, 10, 1, 17, 67, 14, 95, 29, 44, 9, 6, 6, 71, 18, 47, 6, 23, 33, 49, 16, 10, 52, 37, 5, 29, 68, 16, 257, 34, 5, 15, 13, 58, 45, 8, 39, 81, 6, 31, 3, 33, 57, 15, 12, 2, 23, 65, 16, 14, 7, 20, 9, 33, 20, 38, 21, 80, 45, 14, 20, 24, 74, 8, 28, 12, 122, 28, 57, 12, 23, 6, 129, 24, 18, 13, 7, 23, 6, 6, 20, 16, 21, 11, 1, 13, 28, 15, 2, 27, 67, 83, 76, 44, 16, 48, 139, 35, 20, 11, 14, 8, 230, 5, 63, 7, 20, 643, 6, 324, 207, 12, 33, 5, 7, 4, 7, 7, 23, 8, 22, 8, 48, 32, 5, 48, 117, 18, 10, 6, 142, 61, 7, 76, 23, 2, 27, 8, 18, 40, 3, 92]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.621, speedup = 0.2319424126320678, eval_ratio = 0.082576)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.42907986111111107,"recall":0.41666666666666663,"f1":null,"seconds":0.00022251345217227936,"exhaustive_search_seconds":0.0003606099635362625,"evaluations":551.9296875,"distances_sum":1665.1442430372936}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5763888888888891,"recall":0.5763888888888891,"f1":null,"seconds":0.0003617946058511734,"exhaustive_search_seconds":0.0003606099635362625,"evaluations":731.90625,"distances_sum":1653.7020559008804}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6701388888888884,"recall":0.6701388888888884,"f1":null,"seconds":0.0004955194890499115,"exhaustive_search_seconds":0.0003606099635362625,"evaluations":883.8984375,"distances_sum":1602.7437314426033}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7456597222222219,"recall":0.7456597222222219,"f1":0.7456597222222219,"seconds":0.0007892623543739319,"exhaustive_search_seconds":0.0003606099635362625,"evaluations":1034.2578125,"distances_sum":1572.12429696353}
KCenters.DeloneInvIndex> reached performance {"precision":0.8055555555555551,"recall":0.8055555555555551,"f1":0.8055555555555551,"seconds":0.0006557907909154892,"exhaustive_search_seconds":0.0003606099635362625,"evaluations":1161.1953125,"distances_sum":1550.2218443041422}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.7609999999999997, speedup = 0.5559290715406792, eval_ratio = 0.116138)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
