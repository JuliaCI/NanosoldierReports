Julia Version 1.5.0-DEV.275
Commit 2eba23f58f (2020-02-17 02:20 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed Missings ──────────────────── v0.4.3
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed DataAPI ───────────────────── v1.1.0
  Installed OrderedCollections ────────── v1.1.0
  Installed TableTraits ───────────────── v1.0.0
  Installed KCenters ──────────────────── v0.2.1
  Installed Tables ────────────────────── v1.0.1
  Installed DataStructures ────────────── v0.17.9
  Installed InvertedIndices ───────────── v1.0.0
  Installed LearnBase ─────────────────── v0.2.2
  Installed Compat ────────────────────── v3.5.0
  Installed PooledArrays ──────────────── v0.5.3
  Installed DataValueInterfaces ───────── v1.0.0
  Installed StatsBase ─────────────────── v0.32.1
  Installed Reexport ──────────────────── v0.2.0
  Installed MLLabelUtils ──────────────── v0.5.1
  Installed MappedArrays ──────────────── v0.2.2
  Installed MLDataUtils ───────────────── v0.5.0
  Installed MLDataPattern ─────────────── v0.5.0
  Installed JSON ──────────────────────── v0.21.0
  Installed SimilaritySearch ──────────── v0.3.19
  Installed DataFrames ────────────────── v0.20.2
  Installed CategoricalArrays ─────────── v0.7.7
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed Parsers ───────────────────── v0.3.11
   Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.1
   Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.5.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.9
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.1
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.0
  [cc2ba9b6] + MLDataUtils v0.5.0
  [66a33bbf] + MLLabelUtils v0.5.1
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.11
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.1
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.1
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
    Testing KCenters
Status `/tmp/jl_DAQh11/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.5.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.9
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.1
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.0
  [cc2ba9b6] MLDataUtils v0.5.0
  [66a33bbf] MLLabelUtils v0.5.1
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v0.3.11
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.1
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.1
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0723782532413801
[ Info: 0.9364293802777927
[ Info: 0.8321307849884033
[ Info: 0.5556202241281668
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.33252118043601514
mean(cdnet.distances) = 0.39940276679893333
mean(crand.distances) = 0.34209479679663973
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7783203125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7783203125,"f1":0.8681349900099908,"seconds":6.530433893203735e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.4140625,"distances_sum":2092.120233401921}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3369140625, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.3369140625,"f1":null,"seconds":4.287809133529663e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":6.015625,"distances_sum":881.9637907020863}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6904296875, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6904296875,"f1":0.8007126554001561,"seconds":5.513429641723633e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.125,"distances_sum":1827.203304009322}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7783203125,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7783203125,"f1":0.8681349900099908,"seconds":6.530433893203735e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.4140625,"distances_sum":2092.120233401921}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9507497710622713,"seconds":6.094574928283691e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.8515625,"distances_sum":2611.633982552759}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9596211080586085,"seconds":6.3478946685791016e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.875,"distances_sum":2689.1940849313264}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9501945970695976,"seconds":6.284564733505249e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.7890625,"distances_sum":2651.0024461318644}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9370109057609061,"seconds":5.766749382019043e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.78125,"distances_sum":2540.389124683916}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.927734375,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.9596211080586085,"seconds":6.3478946685791016e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.875,"distances_sum":2689.1940849313264}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9636217948717954,"seconds":6.51925802230835e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.8359375,"distances_sum":2737.6338961360098}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.958984375, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.958984375,"f1":0.9772149725274727,"seconds":6.791204214096069e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.9765625,"distances_sum":2788.666341645495}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9596783424908428,"seconds":6.562098860740662e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.875,"distances_sum":2691.7385464455206}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":10,"bsize":10}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9647149725274731,"seconds":6.465241312980652e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.9453125,"distances_sum":2701.7867308250416}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.958984375,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9772149725274727,"seconds":6.791204214096069e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.9765625,"distances_sum":2788.666341645495}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.958984375,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9772149725274727,"seconds":6.791204214096069e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.9765625,"distances_sum":2788.666341645495}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.666015625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.666015625,"f1":0.7878943972693979,"seconds":4.800036549568176e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":7.4140625,"distances_sum":1532.5519270020131}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.73046875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.73046875,"f1":0.8343484640359647,"seconds":6.029382348060608e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.0,"distances_sum":1745.6206241219197}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.73046875,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.73046875,"f1":0.8343484640359647,"seconds":6.029382348060608e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.0,"distances_sum":1745.6206241219197}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9311469780219789,"seconds":6.187707185745239e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.8046875,"distances_sum":2208.7328753037514}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9315762362637368,"seconds":6.185844540596008e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.8359375,"distances_sum":2217.760599358224}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8798828125,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.8798828125,"f1":0.9311469780219789,"seconds":6.187707185745239e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.8046875,"distances_sum":2208.7328753037514}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9548420329670333,"seconds":6.062909960746765e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.84375,"distances_sum":2362.258916046412}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9621909340659347,"seconds":5.707144737243652e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.890625,"distances_sum":2410.4126200458095}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9689961080586085,"seconds":7.923692464828491e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.9296875,"distances_sum":2453.6375199338904}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9453983516483521,"seconds":7.975846529006958e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.828125,"distances_sum":2298.51029160953}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9689961080586085,"seconds":7.923692464828491e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.9296875,"distances_sum":2453.6375199338904}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9443359375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9689961080586085,"seconds":7.923692464828491e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.9296875,"distances_sum":2453.6375199338904}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3642578125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3642578125,"f1":null,"seconds":3.4794211387634277e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":5.2890625,"distances_sum":833.260477535545}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5390625, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.5390625,"f1":0.6843815906315911,"seconds":4.1387975215911865e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":6.7421875,"distances_sum":1248.0513459876868}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7197265625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7197265625,"f1":0.8265989219114226,"seconds":5.012378096580505e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":7.828125,"distances_sum":1768.6431862981212}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7197265625,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7197265625,"f1":0.8265989219114226,"seconds":5.012378096580505e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":7.828125,"distances_sum":1768.6431862981212}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8486328125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8486328125,"f1":0.9110061813186819,"seconds":5.425885319709778e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.484375,"distances_sum":2185.1813883774203}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8046875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8046875,"f1":0.8827786796536801,"seconds":5.3085386753082275e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.328125,"distances_sum":2020.9942957969315}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.80078125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.80078125,"f1":0.88086652930403,"seconds":5.2209943532943726e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.3125,"distances_sum":1993.727521078369}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8486328125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8486328125,"f1":0.9110061813186819,"seconds":5.425885319709778e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.484375,"distances_sum":2185.1813883774203}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9440190018315024,"seconds":5.498528480529785e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.734375,"distances_sum":2391.3558906679386}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8642578125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.8642578125,"f1":0.9191678113553121,"seconds":5.5264681577682495e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.6328125,"distances_sum":2233.105299010181}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8701171875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8701171875,"f1":0.9244765651015658,"seconds":5.692243576049805e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.578125,"distances_sum":2254.3151415352672}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9650157134532138,"seconds":5.941838026046753e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.8671875,"distances_sum":2493.791003409177}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9613152472527478,"seconds":5.9176236391067505e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.8515625,"distances_sum":2444.7591535807132}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9650157134532138,"seconds":5.941838026046753e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.8671875,"distances_sum":2493.791003409177}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.939453125,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9650157134532138,"seconds":5.941838026046753e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.8671875,"distances_sum":2493.791003409177}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.703125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.703125,"f1":0.8139126498501507,"seconds":4.757195711135864e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.125,"distances_sum":1682.241115318169}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1806640625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.1806640625,"f1":null,"seconds":3.073364496231079e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":5.28125,"distances_sum":409.7599115776741}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1640625, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.1640625,"f1":null,"seconds":5.710870027542114e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":5.2421875,"distances_sum":389.8467324627976}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.376953125, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.376953125,"f1":null,"seconds":3.691762685775757e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":6.234375,"distances_sum":887.6765226438417}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.703125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.703125,"f1":0.8139126498501507,"seconds":4.757195711135864e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.125,"distances_sum":1682.241115318169}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87109375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.87109375,"f1":0.9262534340659349,"seconds":5.8282166719436646e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.84375,"distances_sum":2170.0805416923095}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7802734375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7802734375,"f1":0.8688337703962712,"seconds":5.446374416351318e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.65625,"distances_sum":1865.2175705208704}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.857421875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.857421875,"f1":0.9164007867132874,"seconds":5.725771188735962e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.7578125,"distances_sum":2142.316693805204}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.87109375,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.87109375,"f1":0.9262534340659349,"seconds":5.8282166719436646e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.84375,"distances_sum":2170.0805416923095}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9732543498168503,"seconds":6.116926670074463e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.9375,"distances_sum":2523.40788230975}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9373626373626379,"seconds":5.76116144657135e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.8203125,"distances_sum":2266.6858856658746}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9521484375,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9732543498168503,"seconds":6.116926670074463e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.9375,"distances_sum":2523.40788230975}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9521484375,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9732543498168503,"seconds":6.116926670074463e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.9375,"distances_sum":2523.40788230975}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.69921875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.69921875,"f1":0.8125702422577431,"seconds":5.062669515609741e-6,"exhaustive_search_seconds":2.171844244003296e-6,"evaluations":8.0625,"distances_sum":1652.5236222893298}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.69921875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.69921875,"f1":0.8125702422577431,"seconds":5.062669515609741e-6,"exhaustive_search_seconds":2.171844244003296e-6,"evaluations":8.0625,"distances_sum":1652.5236222893298}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7646484375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7646484375,"f1":0.8562708125208133,"seconds":5.466863512992859e-6,"exhaustive_search_seconds":2.171844244003296e-6,"evaluations":8.2109375,"distances_sum":1885.890126292784}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9526671245421252,"seconds":5.820766091346741e-6,"exhaustive_search_seconds":2.171844244003296e-6,"evaluations":8.84375,"distances_sum":2369.848326002271}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.916015625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.9526671245421252,"seconds":5.820766091346741e-6,"exhaustive_search_seconds":2.171844244003296e-6,"evaluations":8.84375,"distances_sum":2369.848326002271}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9714285714285718,"seconds":6.062909960746765e-6,"exhaustive_search_seconds":2.171844244003296e-6,"evaluations":8.9140625,"distances_sum":2520.892138582587}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9482421875,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9714285714285718,"seconds":6.062909960746765e-6,"exhaustive_search_seconds":2.171844244003296e-6,"evaluations":8.9140625,"distances_sum":2520.892138582587}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9482421875,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9714285714285718,"seconds":6.062909960746765e-6,"exhaustive_search_seconds":2.171844244003296e-6,"evaluations":8.9140625,"distances_sum":2520.892138582587}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6826171875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6826171875,"f1":0.8002710830835839,"seconds":4.855915904045105e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.8203125,"distances_sum":1642.6112864700578}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.685546875, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.685546875,"f1":0.8021020646020655,"seconds":4.7460198402404785e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.5625,"distances_sum":1664.179063334111}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.685546875,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.685546875,"f1":0.8021020646020655,"seconds":4.7460198402404785e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.5625,"distances_sum":1664.179063334111}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8525390625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8525390625,"f1":0.9144865551115559,"seconds":5.77978789806366e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.5234375,"distances_sum":2169.378236851187}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7001953125, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.7001953125,"f1":0.8115093240093247,"seconds":5.422160029411316e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.8515625,"distances_sum":1667.634642714093}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.806640625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.806640625,"f1":0.8821839618714626,"seconds":5.470588803291321e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.2421875,"distances_sum":1995.683482587343}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75390625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.75390625,"f1":0.8460315725940735,"seconds":5.595386028289795e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.046875,"distances_sum":1835.2036178440403}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8525390625,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.8525390625,"f1":0.9144865551115559,"seconds":5.77978789806366e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.5234375,"distances_sum":2169.378236851187}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.85546875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.85546875,"f1":0.9145833333333342,"seconds":5.798414349555969e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.5,"distances_sum":2193.787846029743}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":6,"bsize":11}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9697573260073264,"seconds":6.416812539100647e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.875,"distances_sum":2493.8778297482736}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9541354478854484,"seconds":6.122514605522156e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8203125,"distances_sum":2381.269729815243}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9413435522810527,"seconds":5.966052412986755e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.7109375,"distances_sum":2334.76757978556}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9328957500832505,"seconds":5.772337317466736e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.625,"distances_sum":2308.265346973867}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87109375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.87109375,"f1":0.926035943223444,"seconds":5.846843123435974e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.5546875,"distances_sum":2225.3609123761435}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9453125,"state":{"ssize":6,"bsize":11},"perf":{"precision":1.0,"recall":0.9453125,"f1":0.9697573260073264,"seconds":6.416812539100647e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.875,"distances_sum":2493.8778297482736}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9453125,"state":{"ssize":6,"bsize":11},"perf":{"precision":1.0,"recall":0.9453125,"f1":0.9697573260073264,"seconds":6.416812539100647e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.875,"distances_sum":2493.8778297482736}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6767578125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6767578125,"f1":0.7959306318681328,"seconds":4.692003130912781e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.15625,"distances_sum":1597.854198244851}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1484375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.1484375,"f1":null,"seconds":3.127381205558777e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":5.015625,"distances_sum":394.4491539930457}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.658203125, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.658203125,"f1":0.7775273337773345,"seconds":4.753470420837402e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":7.859375,"distances_sum":1611.0820266566488}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6767578125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6767578125,"f1":0.7959306318681328,"seconds":4.692003130912781e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.15625,"distances_sum":1597.854198244851}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.791015625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.791015625,"f1":0.8728235306360314,"seconds":5.541369318962097e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.578125,"distances_sum":1917.8718121507695}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.78125,"f1":0.8672140359640368,"seconds":5.8319419622421265e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.6953125,"distances_sum":1882.089348453606}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8857421875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.8857421875,"f1":0.9334712162837171,"seconds":6.115064024925232e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.7265625,"distances_sum":2287.1239127844133}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9358173076923084,"seconds":5.7462602853775024e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.7734375,"distances_sum":2275.9862803276324}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.888671875,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.888671875,"f1":0.9358173076923084,"seconds":5.7462602853775024e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.7734375,"distances_sum":2275.9862803276324}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9612954753579758,"seconds":5.982816219329834e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.8125,"distances_sum":2469.4947981611485}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9522924991674996,"seconds":5.8002769947052e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.7890625,"distances_sum":2393.2619497977}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":4,"bsize":12}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9739983974358978,"seconds":6.144866347312927e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.921875,"distances_sum":2539.287991981328}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":7,"bsize":12}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.9765625000000004,"seconds":6.074085831642151e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.9140625,"distances_sum":2563.71366083307}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9569597069597074,"seconds":5.8282166719436646e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.890625,"distances_sum":2398.3743921884616}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.95761217948718,"seconds":5.833804607391357e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.828125,"distances_sum":2446.6896940911706}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.943129266566767,"seconds":5.5730342864990234e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.8828125,"distances_sum":2309.820733078898}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9580078125,"state":{"ssize":7,"bsize":12},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9765625000000004,"seconds":6.074085831642151e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.9140625,"distances_sum":2563.71366083307}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9580078125,"state":{"ssize":7,"bsize":12},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9765625000000004,"seconds":6.074085831642151e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.9140625,"distances_sum":2563.71366083307}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.537109375, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.537109375,"f1":0.6828551656676661,"seconds":4.215165972709656e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":7.1953125,"distances_sum":1212.421071594755}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7666015625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7666015625,"f1":0.8539552461427469,"seconds":5.194917321205139e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.2578125,"distances_sum":1824.4307472319774}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7578125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7578125,"f1":0.8527394480519489,"seconds":5.280598998069763e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.234375,"distances_sum":1849.5732962835782}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7666015625,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7666015625,"f1":0.8539552461427469,"seconds":5.194917321205139e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.2578125,"distances_sum":1824.4307472319774}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.861328125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.861328125,"f1":0.9194284881784889,"seconds":5.446374416351318e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.65625,"distances_sum":2151.1877351081466}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8740234375,"f1":0.9261446886446894,"seconds":5.749985575675964e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.703125,"distances_sum":2193.202406382041}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8740234375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8740234375,"f1":0.9261446886446894,"seconds":5.749985575675964e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.703125,"distances_sum":2193.202406382041}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9681032509157511,"seconds":6.213784217834473e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.8828125,"distances_sum":2473.643869867957}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9709649725274729,"seconds":6.1318278312683105e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.890625,"distances_sum":2494.4538342261426}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9564992299367304,"seconds":5.990266799926758e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.8984375,"distances_sum":2375.3590104201335}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9709649725274729,"seconds":6.1318278312683105e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.890625,"distances_sum":2494.4538342261426}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9709649725274729,"seconds":6.1318278312683105e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.890625,"distances_sum":2494.4538342261426}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6474609375, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6474609375,"f1":0.775002081252082,"seconds":4.779547452926636e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":7.421875,"distances_sum":1276.5908298566637}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6474609375,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.6474609375,"f1":0.775002081252082,"seconds":4.779547452926636e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":7.421875,"distances_sum":1276.5908298566637}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.828125, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.828125,"f1":0.8990332584082592,"seconds":5.645677447319031e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.484375,"distances_sum":1866.3988363679446}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6484375, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6484375,"f1":0.7755687021312028,"seconds":4.732981324195862e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":7.4375,"distances_sum":1302.914338352294}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8232421875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8232421875,"f1":0.8959025349650356,"seconds":6.144866347312927e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.5234375,"distances_sum":1844.0703580295196}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.861976565101566,"seconds":5.2228569984436035e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.1796875,"distances_sum":1640.2289313323845}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78515625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.78515625,"f1":0.8749656593406602,"seconds":5.042180418968201e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.21875,"distances_sum":1674.7364375570346}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.828125,"state":{"ssize":3,"bsize":6},"perf":{"precision":1.0,"recall":0.828125,"f1":0.8990332584082592,"seconds":5.645677447319031e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.484375,"distances_sum":1866.3988363679446}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8525390625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8525390625,"f1":0.9137654012654023,"seconds":6.105750799179077e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.65625,"distances_sum":1980.3670261371833}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9531510156510162,"seconds":5.673617124557495e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.8515625,"distances_sum":2202.6697266582646}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9716174450549453,"seconds":5.7443976402282715e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.921875,"distances_sum":2308.4886321667277}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.966666666666667,"seconds":5.967915058135986e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.890625,"distances_sum":2300.809919484456}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9744448260073264,"seconds":6.079673767089844e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.921875,"distances_sum":2335.925569183611}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9541015625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9744448260073264,"seconds":6.079673767089844e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.921875,"distances_sum":2335.925569183611}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9541015625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9744448260073264,"seconds":6.079673767089844e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.921875,"distances_sum":2335.925569183611}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2431640625,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2431640625,"f1":null,"seconds":3.1515955924987793e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":5.4765625,"distances_sum":517.5734244670094}}, beam: 3, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.2431640625,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2431640625,"f1":null,"seconds":3.1515955924987793e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":5.4765625,"distances_sum":517.5734244670094}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6337890625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6337890625,"f1":0.7637064324564331,"seconds":4.6510249376297e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.578125,"distances_sum":1553.0833665593254}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.51171875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.51171875,"f1":0.6623591686091691,"seconds":4.254281520843506e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.1015625,"distances_sum":1265.949135853188}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.388671875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.388671875,"f1":null,"seconds":3.7029385566711426e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":6.203125,"distances_sum":920.4532560474818}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6337890625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6337890625,"f1":0.7637064324564331,"seconds":4.6510249376297e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.578125,"distances_sum":1553.0833665593254}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9401161338661345,"seconds":5.505979061126709e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.6328125,"distances_sum":2490.414267643108}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78515625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.78515625,"f1":0.8726825258075266,"seconds":5.189329385757446e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.2109375,"distances_sum":2006.223393052201}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87109375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.87109375,"f1":0.9255900349650358,"seconds":5.535781383514404e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.328125,"distances_sum":2296.8710439868773}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8525390625, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8525390625,"f1":0.9147295412920421,"seconds":5.297362804412842e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.21875,"distances_sum":2214.9648146964264}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8974609375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.8974609375,"f1":0.9401161338661345,"seconds":5.505979061126709e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.6328125,"distances_sum":2490.414267643108}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.974479166666667,"seconds":5.926936864852905e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.890625,"distances_sum":2687.485864008339}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9649381868131872,"seconds":5.859881639480591e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8203125,"distances_sum":2638.651687152812}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9705357142857145,"seconds":5.934387445449829e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.859375,"distances_sum":2667.358934041447}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9541015625,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.974479166666667,"seconds":5.926936864852905e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.890625,"distances_sum":2687.485864008339}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9541015625,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.974479166666667,"seconds":5.926936864852905e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.890625,"distances_sum":2687.485864008339}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7744140625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7744140625,"f1":0.862174804362305,"seconds":5.511566996574402e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.5625,"distances_sum":2043.6512923725497}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7744140625,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7744140625,"f1":0.862174804362305,"seconds":5.511566996574402e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.5625,"distances_sum":2043.6512923725497}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.942273351648352,"seconds":5.947425961494446e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.703125,"distances_sum":2565.38994736278}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9582303113553119,"seconds":5.951151251792908e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.8671875,"distances_sum":2663.890346885114}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.92578125,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.92578125,"f1":0.9582303113553119,"seconds":5.951151251792908e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.8671875,"distances_sum":2663.890346885114}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9735519688644692,"seconds":6.2659382820129395e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.9453125,"distances_sum":2767.238958905171}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9716746794871797,"seconds":6.01448118686676e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.921875,"distances_sum":2772.6691481578196}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9521484375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9735519688644692,"seconds":6.2659382820129395e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.9453125,"distances_sum":2767.238958905171}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9521484375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9735519688644692,"seconds":6.2659382820129395e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.9453125,"distances_sum":2767.238958905171}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4990234375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.4990234375,"f1":0.6499632312132316,"seconds":4.3101608753204346e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":6.5,"distances_sum":1247.9692270021528}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7744140625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7744140625,"f1":0.8624927156177163,"seconds":5.228444933891296e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.4296875,"distances_sum":2114.5556484922095}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2900390625, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.2900390625,"f1":null,"seconds":3.339722752571106e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":4.734375,"distances_sum":750.0139348966868}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.791015625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.791015625,"f1":0.8737418831168839,"seconds":5.634501576423645e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.5859375,"distances_sum":2151.63427725429}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.791015625,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.791015625,"f1":0.8737418831168839,"seconds":5.634501576423645e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.5859375,"distances_sum":2151.63427725429}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9309471778221785,"seconds":8.682720363140106e-5,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.640625,"distances_sum":2561.5914744875986}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8544921875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8544921875,"f1":0.9138049450549458,"seconds":5.6438148021698e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.5546875,"distances_sum":2437.2233894821256}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8828125,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.8828125,"f1":0.9309471778221785,"seconds":8.682720363140106e-5,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.640625,"distances_sum":2561.5914744875986}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9715029761904765,"seconds":5.863606929779053e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.8984375,"distances_sum":2827.57409887048}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9490618756243757,"seconds":5.854293704032898e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.796875,"distances_sum":2679.2969413762357}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9672275641025646,"seconds":5.688518285751343e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.8203125,"distances_sum":2826.3849824908366}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9495993589743598,"seconds":5.763024091720581e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.7421875,"distances_sum":2692.8234366773613}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.967931547619048,"seconds":5.967915058135986e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.9140625,"distances_sum":2795.807343588285}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9482421875,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9715029761904765,"seconds":5.863606929779053e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.8984375,"distances_sum":2827.57409887048}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9482421875,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9715029761904765,"seconds":5.863606929779053e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.8984375,"distances_sum":2827.57409887048}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7568359375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7568359375,"f1":0.8489357864357874,"seconds":5.457550287246704e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.3046875,"distances_sum":2011.4705352739104}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.638671875, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.638671875,"f1":0.7654328310578318,"seconds":4.7497451305389404e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.7109375,"distances_sum":1647.423470809154}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.173828125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.173828125,"f1":null,"seconds":4.032626748085022e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":4.984375,"distances_sum":532.3506613037146}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6591796875, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6591796875,"f1":0.7803149975024982,"seconds":4.757195711135864e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.609375,"distances_sum":1756.9265984791264}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7568359375,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7568359375,"f1":0.8489357864357874,"seconds":5.457550287246704e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.3046875,"distances_sum":2011.4705352739104}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8671875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8671875,"f1":0.9230826465201472,"seconds":5.548819899559021e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.6796875,"distances_sum":2496.129329908561}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.944894688644689,"seconds":5.498528480529785e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.7578125,"distances_sum":2659.0224992221047}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9480025183150188,"seconds":5.6587159633636475e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.7890625,"distances_sum":2662.7034824507996}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8564453125, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.8564453125,"f1":0.913971965534466,"seconds":5.589798092842102e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.6875,"distances_sum":2396.051177854902}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9393315018315025,"seconds":5.7015568017959595e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.734375,"distances_sum":2608.5088109192575}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9091796875,"state":{"ssize":6,"bsize":8},"perf":{"precision":1.0,"recall":0.9091796875,"f1":0.9480025183150188,"seconds":5.6587159633636475e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.7890625,"distances_sum":2662.7034824507996}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9690132783882786,"seconds":5.651265382766724e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.84375,"distances_sum":2828.4030790991296}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":13,"bsize":12}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9752976190476195,"seconds":5.869194865226746e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.9375,"distances_sum":2843.6392739712237}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.955078125,"state":{"ssize":13,"bsize":12},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9752976190476195,"seconds":5.869194865226746e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.9375,"distances_sum":2843.6392739712237}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.955078125,"state":{"ssize":13,"bsize":12},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9752976190476195,"seconds":5.869194865226746e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.9375,"distances_sum":2843.6392739712237}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.736328125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.736328125,"f1":0.8389896561771569,"seconds":5.9157609939575195e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.1171875,"distances_sum":1945.2299809256676}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.736328125,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.736328125,"f1":0.8389896561771569,"seconds":5.9157609939575195e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.1171875,"distances_sum":1945.2299809256676}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9413976648351654,"seconds":6.029382348060608e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.65625,"distances_sum":2621.3331199848853}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.896484375,"state":{"ssize":6,"bsize":7},"perf":{"precision":1.0,"recall":0.896484375,"f1":0.9413976648351654,"seconds":6.029382348060608e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.65625,"distances_sum":2621.3331199848853}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9556204212454219,"seconds":5.729496479034424e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.7578125,"distances_sum":2732.256057011756}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9574233058608063,"seconds":5.677342414855957e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.703125,"distances_sum":2770.3808660980662}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.923828125,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.9574233058608063,"seconds":5.677342414855957e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.703125,"distances_sum":2770.3808660980662}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.923828125,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.9574233058608063,"seconds":5.677342414855957e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.703125,"distances_sum":2770.3808660980662}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6748046875, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6748046875,"f1":0.793402951215452,"seconds":4.936009645462036e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.1328125,"distances_sum":1759.5416123636887}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6748046875,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.6748046875,"f1":0.793402951215452,"seconds":4.936009645462036e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.1328125,"distances_sum":1759.5416123636887}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.759765625, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.759765625,"f1":0.8546925296925306,"seconds":5.360692739486694e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.46875,"distances_sum":2044.225367151124}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9409486346986353,"seconds":5.815178155899048e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.71875,"distances_sum":2647.1171373471675}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.896484375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.896484375,"f1":0.9409486346986353,"seconds":5.815178155899048e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.71875,"distances_sum":2647.1171373471675}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9596554487179491,"seconds":6.165355443954468e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.8359375,"distances_sum":2791.914891573736}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9658711080586084,"seconds":7.009133696556091e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.9296875,"distances_sum":2812.0990441527465}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9588770604395606,"seconds":6.0461461544036865e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.890625,"distances_sum":2758.7993643630625}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9384765625,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9658711080586084,"seconds":7.009133696556091e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.9296875,"distances_sum":2812.0990441527465}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9384765625,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9658711080586084,"seconds":7.009133696556091e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.9296875,"distances_sum":2812.0990441527465}}, n: 9
mean(cfft.distances) = 0.3325211797910535
mean(cdnet.distances) = 0.9905998759277325
mean(crand.distances) = 0.3362432403237348
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8622222222222223
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.9
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.9
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8533333333333334
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8955555555555555
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8755555555555555
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.9
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.8844444444444445
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9355555555555556
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9377777777777778
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8799999999999999
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.9
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8911111111111111
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8688888888888888
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8933333333333334
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8844444444444445
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.8666666666666667
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9288888888888889
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9288888888888889
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.86
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.9311111111111111
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8755555555555555
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8755555555555555
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.8822222222222221
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9333333333333332
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8844444444444445
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.8955555555555555
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.8888888888888888
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8955555555555555
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8333333333333334
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8933333333333334
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9044444444444445
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9111111111111111
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 2, 2, 3, 3, 1, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 2, 2, 3, 3, 1, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 2, 2, 3, 3, 1, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 2, 2, 3, 3, 1, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 2, 2, 3, 3, 1, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 2, 2, 3, 3, 1, 1, 3]
acc = 0.9266666666666666
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 2, 2, 3, 3, 1, 1, 3]
acc = 0.9666666666666667
*** finished computation of 12 references, err: [Inf, 0.5628811813394229] ***
*** center 1: selecting labels [1] (freq >= 1) [from [43, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 15, 2]]
** centroid: 4, normalized-entropy: 0.5225593745369407, [(2, 15), (3, 2)]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 7]]
** centroid: 9, normalized-entropy: 0.8812908992306927, [(2, 3), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 13]]
** centroid: 12, normalized-entropy: 0.3712323266408756, [(2, 1), (3, 13)]
finished with 15 centroids; started with 12
acc = 0.9333333333333333
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.40340083376462527] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40340083376462527, 0.24836600461258768] ***
*** finished computation of 3 references, err: [Inf, 0.40340083376462527, 0.24836600461258768] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [250, 8, 0]]
** centroid: 1, normalized-entropy: 0.19942077803751093, [(1, 250), (2, 8)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [65, 76, 0]]
** centroid: 2, normalized-entropy: 0.9956052611323962, [(1, 65), (2, 76)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [87, 164, 16]]
** centroid: 3, normalized-entropy: 0.7586072526221243, [(1, 87), (2, 164), (3, 16)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2270293873902578] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2270293873902578, 0.19587951151559035] ***
*** starting iteration: 2; err: [Inf, 0.2270293873902578, 0.19587951151559035] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2270293873902578, 0.19587951151559035, 0.19223212012769403] ***
*** starting iteration: 3; err: [Inf, 0.2270293873902578, 0.19587951151559035, 0.19223212012769403] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2270293873902578, 0.19587951151559035, 0.19223212012769403, 0.18975993311144523] ***
*** starting iteration: 4; err: [Inf, 0.2270293873902578, 0.19587951151559035, 0.19223212012769403, 0.18975993311144523] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2270293873902578, 0.19587951151559035, 0.19223212012769403, 0.18975993311144523, 0.18849268354693646] ***
*** starting iteration: 5; err: [Inf, 0.2270293873902578, 0.19587951151559035, 0.19223212012769403, 0.18975993311144523, 0.18849268354693646] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2270293873902578, 0.19587951151559035, 0.19223212012769403, 0.18975993311144523, 0.18849268354693646, 0.18808290417174678] ***
*** finished computation of 7 references, err: [Inf, 0.2270293873902578, 0.19587951151559035, 0.19223212012769403, 0.18975993311144523, 0.18849268354693646, 0.18808290417174678] ***
*** center 1: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [74, 6, 0]]
** centroid: 2, normalized-entropy: 0.3843115441264972, [(1, 74), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 69, 16]]
** centroid: 3, normalized-entropy: 0.6977652006354232, [(2, 69), (3, 16)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [113, 4, 0]]
** centroid: 4, normalized-entropy: 0.2149782003277105, [(1, 113), (2, 4)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 98, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [102, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [16, 71, 0]]
** centroid: 7, normalized-entropy: 0.6885521684368613, [(1, 16), (2, 71)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23250999589586097] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23250999589586097, 0.18660155598826797] ***
*** starting iteration: 2; err: [Inf, 0.23250999589586097, 0.18660155598826797] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23250999589586097, 0.18660155598826797, 0.18505338259666845] ***
*** starting iteration: 3; err: [Inf, 0.23250999589586097, 0.18660155598826797, 0.18505338259666845] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23250999589586097, 0.18660155598826797, 0.18505338259666845, 0.18512607066936768] ***
*** finished computation of 7 references, err: [Inf, 0.23250999589586097, 0.18660155598826797, 0.18505338259666845, 0.18512607066936768] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 80, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [46, 57, 0]]
** centroid: 3, normalized-entropy: 0.9917570244063947, [(1, 46), (2, 57)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [95, 8, 0]]
** centroid: 4, normalized-entropy: 0.3939152573634121, [(1, 95), (2, 8)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [74, 12, 0]]
** centroid: 5, normalized-entropy: 0.5830194167347007, [(1, 74), (2, 12)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 91, 18]]
** centroid: 6, normalized-entropy: 0.6464599001526788, [(2, 91), (3, 18)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [91, 1, 0]]
** centroid: 7, normalized-entropy: 0.08650421412134586, [(1, 91), (2, 1)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24622314078475013] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24622314078475013, 0.1899750661537766] ***
*** starting iteration: 2; err: [Inf, 0.24622314078475013, 0.1899750661537766] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24622314078475013, 0.1899750661537766, 0.18470134386845838] ***
*** starting iteration: 3; err: [Inf, 0.24622314078475013, 0.1899750661537766, 0.18470134386845838] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24622314078475013, 0.1899750661537766, 0.18470134386845838, 0.18437592965596797] ***
*** finished computation of 7 references, err: [Inf, 0.24622314078475013, 0.1899750661537766, 0.18470134386845838, 0.18437592965596797] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [92, 4, 0]]
** centroid: 1, normalized-entropy: 0.24988229283318547, [(1, 92), (2, 4)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 44, 14]]
** centroid: 2, normalized-entropy: 0.7973265101474423, [(2, 44), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [90, 27, 0]]
** centroid: 3, normalized-entropy: 0.7793498372920851, [(1, 90), (2, 27)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [104, 3, 0]]
** centroid: 4, normalized-entropy: 0.18445186314098744, [(1, 104), (2, 3)]
*** center 5: selecting labels [1] (freq >= 1) [from [108, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 81, 0]]
** centroid: 6, normalized-entropy: 0.09501724567107643, [(1, 1), (2, 81)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 98, 0]]
** centroid: 7, normalized-entropy: 0.08146202691505994, [(1, 1), (2, 98)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.37237398475184813] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37237398475184813, 0.23555444352686764] ***
*** starting iteration: 2; err: [Inf, 0.37237398475184813, 0.23555444352686764] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37237398475184813, 0.23555444352686764, 0.2346339578832592] ***
*** finished computation of 3 references, err: [Inf, 0.37237398475184813, 0.23555444352686764, 0.2346339578832592] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [96, 142, 11]]
** centroid: 1, normalized-entropy: 0.751455687288178, [(1, 96), (2, 142), (3, 11)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [101, 106, 5]]
** centroid: 2, normalized-entropy: 0.7174461982587952, [(1, 101), (2, 106), (3, 5)]
*** center 3: selecting labels [1] (freq >= 2) [from [205, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3345392178436895] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3345392178436895, 0.24619947595597208] ***
*** starting iteration: 2; err: [Inf, 0.3345392178436895, 0.24619947595597208] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3345392178436895, 0.24619947595597208, 0.24191108195465813] ***
*** starting iteration: 3; err: [Inf, 0.3345392178436895, 0.24619947595597208, 0.24191108195465813] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3345392178436895, 0.24619947595597208, 0.24191108195465813, 0.24087896137295858] ***
*** starting iteration: 4; err: [Inf, 0.3345392178436895, 0.24619947595597208, 0.24191108195465813, 0.24087896137295858] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3345392178436895, 0.24619947595597208, 0.24191108195465813, 0.24087896137295858, 0.24034008869937604] ***
*** finished computation of 3 references, err: [Inf, 0.3345392178436895, 0.24619947595597208, 0.24191108195465813, 0.24087896137295858, 0.24034008869937604] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [254, 3, 0]]
** centroid: 1, normalized-entropy: 0.0916914832705567, [(1, 254), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [142, 57, 0]]
** centroid: 2, normalized-entropy: 0.864067727191613, [(1, 142), (2, 57)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [4, 189, 18]]
** centroid: 3, normalized-entropy: 0.3493420985532891, [(1, 4), (2, 189), (3, 18)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3678601762975218] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3678601762975218, 0.2303332697980265] ***
*** starting iteration: 2; err: [Inf, 0.3678601762975218, 0.2303332697980265] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3678601762975218, 0.2303332697980265, 0.22822877438808756] ***
*** starting iteration: 3; err: [Inf, 0.3678601762975218, 0.2303332697980265, 0.22822877438808756] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3678601762975218, 0.2303332697980265, 0.22822877438808756, 0.22800706136927032] ***
*** finished computation of 3 references, err: [Inf, 0.3678601762975218, 0.2303332697980265, 0.22822877438808756, 0.22800706136927032] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [94, 135, 9]]
** centroid: 1, normalized-entropy: 0.7394492602722001, [(1, 94), (2, 135), (3, 9)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [94, 122, 5]]
** centroid: 2, normalized-entropy: 0.7075420915911862, [(1, 94), (2, 122), (3, 5)]
*** center 3: selecting labels [1] (freq >= 2) [from [208, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.35301756570479265] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35301756570479265, 0.23641584435891774] ***
*** starting iteration: 2; err: [Inf, 0.35301756570479265, 0.23641584435891774] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35301756570479265, 0.23641584435891774, 0.23532702709204173] ***
*** starting iteration: 3; err: [Inf, 0.35301756570479265, 0.23641584435891774, 0.23532702709204173] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35301756570479265, 0.23641584435891774, 0.23532702709204173, 0.23504330261258055] ***
*** finished computation of 3 references, err: [Inf, 0.35301756570479265, 0.23641584435891774, 0.23532702709204173, 0.23504330261258055] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [89, 147, 14]]
** centroid: 1, normalized-entropy: 0.7658250389436733, [(1, 89), (2, 147), (3, 14)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [103, 101, 2]]
** centroid: 2, normalized-entropy: 0.6745135066569925, [(1, 103), (2, 101), (3, 2)]
*** center 3: selecting labels [1] (freq >= 2) [from [210, 0, 0]]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3623756534717363] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3623756534717363, 0.23482814571377578] ***
*** starting iteration: 2; err: [Inf, 0.3623756534717363, 0.23482814571377578] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3623756534717363, 0.23482814571377578, 0.23160747693002648] ***
*** starting iteration: 3; err: [Inf, 0.3623756534717363, 0.23482814571377578, 0.23160747693002648] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3623756534717363, 0.23482814571377578, 0.23160747693002648, 0.2303568613638674] ***
*** starting iteration: 4; err: [Inf, 0.3623756534717363, 0.23482814571377578, 0.23160747693002648, 0.2303568613638674] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3623756534717363, 0.23482814571377578, 0.23160747693002648, 0.2303568613638674, 0.23009474438125047] ***
*** finished computation of 3 references, err: [Inf, 0.3623756534717363, 0.23482814571377578, 0.23160747693002648, 0.2303568613638674, 0.23009474438125047] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [77, 146, 18]]
** centroid: 1, normalized-entropy: 0.7845800784888661, [(1, 77), (2, 146), (3, 18)]
*** center 2: selecting labels [1] (freq >= 2) [from [219, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [104, 103, 0]]
** centroid: 3, normalized-entropy: 0.9999831652937935, [(1, 104), (2, 103)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3519218952340567] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3519218952340567, 0.23581988724490358] ***
*** starting iteration: 2; err: [Inf, 0.3519218952340567, 0.23581988724490358] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3519218952340567, 0.23581988724490358, 0.23472289967551727] ***
*** starting iteration: 3; err: [Inf, 0.3519218952340567, 0.23581988724490358, 0.23472289967551727] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3519218952340567, 0.23581988724490358, 0.23472289967551727, 0.233934564152914] ***
*** finished computation of 3 references, err: [Inf, 0.3519218952340567, 0.23581988724490358, 0.23472289967551727, 0.233934564152914] ***
*** center 1: selecting labels [1] (freq >= 2) [from [266, 1, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [121, 62, 0]]
** centroid: 2, normalized-entropy: 0.9236636472774185, [(1, 121), (2, 62)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [9, 194, 14]]
** centroid: 3, normalized-entropy: 0.37228121215446436, [(1, 9), (2, 194), (3, 14)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.34659089121235903] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34659089121235903, 0.2738095652284115] ***
*** finished computation of 3 references, err: [Inf, 0.34659089121235903, 0.2738095652284115] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [22, 154, 14]]
** centroid: 1, normalized-entropy: 0.5571341301722644, [(1, 22), (2, 154), (3, 14)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [310, 24, 0]]
** centroid: 2, normalized-entropy: 0.3728130779461438, [(1, 310), (2, 24)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [68, 71, 4]]
** centroid: 3, normalized-entropy: 0.7292404444911191, [(1, 68), (2, 71), (3, 4)]
finished with 8 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.27946827687585596] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27946827687585596, 0.23286270937216336] ***
*** finished computation of 3 references, err: [Inf, 0.27946827687585596, 0.23286270937216336] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [121, 150, 10]]
** centroid: 1, normalized-entropy: 0.7433054372711625, [(1, 121), (2, 150), (3, 10)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [110, 107, 4]]
** centroid: 2, normalized-entropy: 0.7018449149142741, [(1, 110), (2, 107), (3, 4)]
*** center 3: selecting labels [1] (freq >= 1) [from [165, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3799125893844163] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3799125893844163, 0.33362655295198923] ***
*** starting iteration: 2; err: [Inf, 0.3799125893844163, 0.33362655295198923] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3799125893844163, 0.33362655295198923, 0.3323015396821651] ***
*** starting iteration: 3; err: [Inf, 0.3799125893844163, 0.33362655295198923, 0.3323015396821651] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3799125893844163, 0.33362655295198923, 0.3323015396821651, 0.3306279975624459] ***
*** starting iteration: 4; err: [Inf, 0.3799125893844163, 0.33362655295198923, 0.3323015396821651, 0.3306279975624459] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3799125893844163, 0.33362655295198923, 0.3323015396821651, 0.3306279975624459, 0.32753844927386705] ***
*** starting iteration: 5; err: [Inf, 0.3799125893844163, 0.33362655295198923, 0.3323015396821651, 0.3306279975624459, 0.32753844927386705] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3799125893844163, 0.33362655295198923, 0.3323015396821651, 0.3306279975624459, 0.32753844927386705, 0.3247068842688391] ***
*** starting iteration: 6; err: [Inf, 0.3799125893844163, 0.33362655295198923, 0.3323015396821651, 0.3306279975624459, 0.32753844927386705, 0.3247068842688391] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3799125893844163, 0.33362655295198923, 0.3323015396821651, 0.3306279975624459, 0.32753844927386705, 0.3247068842688391, 0.3223686597055501] ***
*** starting iteration: 7; err: [Inf, 0.3799125893844163, 0.33362655295198923, 0.3323015396821651, 0.3306279975624459, 0.32753844927386705, 0.3247068842688391, 0.3223686597055501] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3799125893844163, 0.33362655295198923, 0.3323015396821651, 0.3306279975624459, 0.32753844927386705, 0.3247068842688391, 0.3223686597055501, 0.31549041570016034] ***
*** starting iteration: 8; err: [Inf, 0.3799125893844163, 0.33362655295198923, 0.3323015396821651, 0.3306279975624459, 0.32753844927386705, 0.3247068842688391, 0.3223686597055501, 0.31549041570016034] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3799125893844163, 0.33362655295198923, 0.3323015396821651, 0.3306279975624459, 0.32753844927386705, 0.3247068842688391, 0.3223686597055501, 0.31549041570016034, 0.299726752754491] ***
*** starting iteration: 9; err: [Inf, 0.3799125893844163, 0.33362655295198923, 0.3323015396821651, 0.3306279975624459, 0.32753844927386705, 0.3247068842688391, 0.3223686597055501, 0.31549041570016034, 0.299726752754491] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3799125893844163, 0.33362655295198923, 0.3323015396821651, 0.3306279975624459, 0.32753844927386705, 0.3247068842688391, 0.3223686597055501, 0.31549041570016034, 0.299726752754491, 0.29852086139700235] ***
*** starting iteration: 10; err: [Inf, 0.3799125893844163, 0.33362655295198923, 0.3323015396821651, 0.3306279975624459, 0.32753844927386705, 0.3247068842688391, 0.3223686597055501, 0.31549041570016034, 0.299726752754491, 0.29852086139700235] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3799125893844163, 0.33362655295198923, 0.3323015396821651, 0.3306279975624459, 0.32753844927386705, 0.3247068842688391, 0.3223686597055501, 0.31549041570016034, 0.299726752754491, 0.29852086139700235, 0.2983030976822695] ***
*** finished computation of 3 references, err: [Inf, 0.3799125893844163, 0.33362655295198923, 0.3323015396821651, 0.3306279975624459, 0.32753844927386705, 0.3247068842688391, 0.3223686597055501, 0.31549041570016034, 0.299726752754491, 0.29852086139700235, 0.2983030976822695] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [280, 2, 0]]
** centroid: 1, normalized-entropy: 0.06083062635414598, [(1, 280), (2, 2)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [3, 186, 16]]
** centroid: 2, normalized-entropy: 0.3177885265297403, [(1, 3), (2, 186), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [119, 60, 0]]
** centroid: 3, normalized-entropy: 0.9201467852522095, [(1, 119), (2, 60)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.39138899273706834] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39138899273706834, 0.3018784757656069] ***
*** starting iteration: 2; err: [Inf, 0.39138899273706834, 0.3018784757656069] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39138899273706834, 0.3018784757656069, 0.2937287395216826] ***
*** starting iteration: 3; err: [Inf, 0.39138899273706834, 0.3018784757656069, 0.2937287395216826] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39138899273706834, 0.3018784757656069, 0.2937287395216826, 0.2921180765589942] ***
*** starting iteration: 4; err: [Inf, 0.39138899273706834, 0.3018784757656069, 0.2937287395216826, 0.2921180765589942] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39138899273706834, 0.3018784757656069, 0.2937287395216826, 0.2921180765589942, 0.29156599607862493] ***
*** finished computation of 3 references, err: [Inf, 0.39138899273706834, 0.3018784757656069, 0.2937287395216826, 0.2921180765589942, 0.29156599607862493] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [99, 110, 0]]
** centroid: 1, normalized-entropy: 0.9980008838722993, [(1, 99), (2, 110)]
*** center 2: selecting labels [1] (freq >= 2) [from [224, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [77, 139, 18]]
** centroid: 3, normalized-entropy: 0.7941392058346135, [(1, 77), (2, 139), (3, 18)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.5519017518136365] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5519017518136365, 0.33310629511489415] ***
*** starting iteration: 2; err: [Inf, 0.5519017518136365, 0.33310629511489415] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5519017518136365, 0.33310629511489415, 0.31154951549413007] ***
*** starting iteration: 3; err: [Inf, 0.5519017518136365, 0.33310629511489415, 0.31154951549413007] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5519017518136365, 0.33310629511489415, 0.31154951549413007, 0.3035734509434858] ***
*** starting iteration: 4; err: [Inf, 0.5519017518136365, 0.33310629511489415, 0.31154951549413007, 0.3035734509434858] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5519017518136365, 0.33310629511489415, 0.31154951549413007, 0.3035734509434858, 0.30222100564390364] ***
*** starting iteration: 5; err: [Inf, 0.5519017518136365, 0.33310629511489415, 0.31154951549413007, 0.3035734509434858, 0.30222100564390364] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5519017518136365, 0.33310629511489415, 0.31154951549413007, 0.3035734509434858, 0.30222100564390364, 0.30188166755328383] ***
*** finished computation of 3 references, err: [Inf, 0.5519017518136365, 0.33310629511489415, 0.31154951549413007, 0.3035734509434858, 0.30222100564390364, 0.30188166755328383] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [5, 196, 14]]
** centroid: 1, normalized-entropy: 0.31829884841031, [(1, 5), (2, 196), (3, 14)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [148, 60, 0]]
** centroid: 2, normalized-entropy: 0.8667256130949592, [(1, 148), (2, 60)]
*** center 3: selecting labels [1] (freq >= 2) [from [243, 1, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.27987626707041496] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27987626707041496, 0.2078800557744787] ***
*** finished computation of 7 references, err: [Inf, 0.27987626707041496, 0.2078800557744787] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [109, 30, 0]]
** centroid: 1, normalized-entropy: 0.7524748189901224, [(1, 109), (2, 30)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [122, 5, 0]]
** centroid: 2, normalized-entropy: 0.2393965319917804, [(1, 122), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 36, 16]]
** centroid: 3, normalized-entropy: 0.8904916402194913, [(2, 36), (3, 16)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [36, 100, 0]]
** centroid: 4, normalized-entropy: 0.8337649072106652, [(1, 36), (2, 100)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 77, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23256948163015195] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23256948163015195, 0.1989883516232359] ***
*** finished computation of 7 references, err: [Inf, 0.23256948163015195, 0.1989883516232359] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [36, 58, 0]]
** centroid: 1, normalized-entropy: 0.9601186626422924, [(1, 36), (2, 58)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [55, 39, 0]]
** centroid: 2, normalized-entropy: 0.978998737002276, [(1, 55), (2, 39)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [38, 52, 0]]
** centroid: 3, normalized-entropy: 0.9824740868386409, [(1, 38), (2, 52)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [92, 5, 0]]
** centroid: 4, normalized-entropy: 0.29292995113885967, [(1, 92), (2, 5)]
*** center 5: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 95, 18]]
** centroid: 6, normalized-entropy: 0.6326131852700402, [(2, 95), (3, 18)]
*** center 7: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23494822310417823] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23494822310417823, 0.2017689280341431] ***
*** finished computation of 7 references, err: [Inf, 0.23494822310417823, 0.2017689280341431] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 48, 14]]
** centroid: 1, normalized-entropy: 0.7706290693639406, [(2, 48), (3, 14)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [66, 11, 0]]
** centroid: 2, normalized-entropy: 0.5916727785823274, [(1, 66), (2, 11)]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 91, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [25, 59, 0]]
** centroid: 4, normalized-entropy: 0.8783609387702275, [(1, 25), (2, 59)]
*** center 5: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [78, 48, 0]]
** centroid: 6, normalized-entropy: 0.9587118829771317, [(1, 78), (2, 48)]
*** center 7: selecting labels [1] (freq >= 1) [from [121, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3922866259704347] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3922866259704347, 0.3055048994664047] ***
*** finished computation of 3 references, err: [Inf, 0.3922866259704347, 0.3055048994664047] ***
*** center 1: selecting labels [1] (freq >= 2) [from [223, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [135, 85, 0]]
** centroid: 2, normalized-entropy: 0.9624127354629922, [(1, 135), (2, 85)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [44, 163, 16]]
** centroid: 3, normalized-entropy: 0.6720759854857564, [(1, 44), (2, 163), (3, 16)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.38708169327426084] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38708169327426084, 0.3143922568353331] ***
*** finished computation of 3 references, err: [Inf, 0.38708169327426084, 0.3143922568353331] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [115, 82, 0]]
** centroid: 1, normalized-entropy: 0.9796628842417265, [(1, 115), (2, 82)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [285, 39, 0]]
** centroid: 2, normalized-entropy: 0.5304245472812997, [(1, 285), (2, 39)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 128, 18]]
** centroid: 3, normalized-entropy: 0.5387379148665815, [(2, 128), (3, 18)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4287174895093001] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4287174895093001, 0.33865469185889574] ***
*** finished computation of 3 references, err: [Inf, 0.4287174895093001, 0.33865469185889574] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [110, 229, 14]]
** centroid: 1, normalized-entropy: 0.7027697726203871, [(1, 110), (2, 229), (3, 14)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [182, 28, 0]]
** centroid: 2, normalized-entropy: 0.5665095065529052, [(1, 182), (2, 28)]
*** center 3: selecting labels [1] (freq >= 2) [from [104, 0, 0]]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.25710002955092276] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25710002955092276, 0.20961850031220294] ***
*** finished computation of 7 references, err: [Inf, 0.25710002955092276, 0.20961850031220294] ***
*** center 1: selecting labels [1] (freq >= 2) [from [119, 1, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [40, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [33, 86, 0]]
** centroid: 3, normalized-entropy: 0.8517608318524026, [(1, 33), (2, 86)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [49, 8, 0]]
** centroid: 4, normalized-entropy: 0.5851569902762294, [(1, 49), (2, 8)]
*** center 5: selecting labels [1] (freq >= 2) [from [125, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [36, 84, 0]]
** centroid: 6, normalized-entropy: 0.8812908992306927, [(1, 36), (2, 84)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 69, 16]]
** centroid: 7, normalized-entropy: 0.6977652006354232, [(2, 69), (3, 16)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2720428607950191] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2720428607950191, 0.2057639842642111] ***
*** finished computation of 7 references, err: [Inf, 0.2720428607950191, 0.2057639842642111] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [101, 47, 0]]
** centroid: 1, normalized-entropy: 0.901716637339894, [(1, 101), (2, 47)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [27, 64, 0]]
** centroid: 2, normalized-entropy: 0.8772236230732716, [(1, 27), (2, 64)]
*** center 3: selecting labels [1] (freq >= 2) [from [43, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 61, 18]]
** centroid: 4, normalized-entropy: 0.7742411580847273, [(2, 61), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [16, 77, 0]]
** centroid: 5, normalized-entropy: 0.6623570516079519, [(1, 16), (2, 77)]
*** center 6: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [115, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22447992354698446] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22447992354698446, 0.19991848331413928] ***
*** finished computation of 7 references, err: [Inf, 0.22447992354698446, 0.19991848331413928] ***
*** center 1: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [70, 23, 0]]
** centroid: 2, normalized-entropy: 0.8069896049203007, [(1, 70), (2, 23)]
*** center 3: selecting labels [1] (freq >= 2) [from [61, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [68, 56, 0]]
** centroid: 4, normalized-entropy: 0.9932338197397066, [(1, 68), (2, 56)]
*** center 5: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 84, 14]]
** centroid: 6, normalized-entropy: 0.5916727785823274, [(2, 84), (3, 14)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [7, 93, 0]]
** centroid: 7, normalized-entropy: 0.36592365090022316, [(1, 7), (2, 93)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 10)
[0.9370058681435927, 0.9320008631385877, 0.9279818740896585, 0.9210138281994569, 0.8929768091444737, 0.8879568190945436, 0.8840277403151654, 0.8789597981214747, 0.8161334987682293, 0.790991590392788]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.6, 1) => 0.9370058681435927
finished with 10
iteration 2 finished
generating 4 configurations using top 12 configurations, starting with 10)
[0.9370058681435927, 0.9320008631385877, 0.9279818740896585, 0.9210138281994569, 0.8929768091444737, 0.8879568190945436, 0.8840277403151654, 0.8789597981214747, 0.8161334987682293, 0.790991590392788]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.6, 1) => 0.9370058681435927
finished with 11
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.3846180288753173] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3846180288753173, 0.30439062543666445] ***
*** starting iteration: 2; err: [Inf, 0.3846180288753173, 0.30439062543666445] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3846180288753173, 0.30439062543666445, 0.2992530494240356] ***
*** starting iteration: 3; err: [Inf, 0.3846180288753173, 0.30439062543666445, 0.2992530494240356] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3846180288753173, 0.30439062543666445, 0.2992530494240356, 0.29771406195118083] ***
*** starting iteration: 4; err: [Inf, 0.3846180288753173, 0.30439062543666445, 0.2992530494240356, 0.29771406195118083] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3846180288753173, 0.30439062543666445, 0.2992530494240356, 0.29771406195118083, 0.2971908708044269] ***
*** finished computation of 3 references, err: [Inf, 0.3846180288753173, 0.30439062543666445, 0.2992530494240356, 0.29771406195118083, 0.2971908708044269] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [98, 145, 16]]
** centroid: 1, normalized-entropy: 0.7868959875172997, [(1, 98), (2, 145), (3, 16)]
*** center 2: selecting labels [1] (freq >= 2) [from [202, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [102, 103, 0]]
** centroid: 3, normalized-entropy: 0.9999828352080604, [(1, 102), (2, 103)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.38374142539149886] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38374142539149886, 0.30811586667542] ***
*** starting iteration: 2; err: [Inf, 0.38374142539149886, 0.30811586667542] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38374142539149886, 0.30811586667542, 0.29270331311211367] ***
*** starting iteration: 3; err: [Inf, 0.38374142539149886, 0.30811586667542, 0.29270331311211367] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38374142539149886, 0.30811586667542, 0.29270331311211367, 0.28889365821401] ***
*** starting iteration: 4; err: [Inf, 0.38374142539149886, 0.30811586667542, 0.29270331311211367, 0.28889365821401] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38374142539149886, 0.30811586667542, 0.29270331311211367, 0.28889365821401, 0.2878552419105559] ***
*** starting iteration: 5; err: [Inf, 0.38374142539149886, 0.30811586667542, 0.29270331311211367, 0.28889365821401, 0.2878552419105559] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38374142539149886, 0.30811586667542, 0.29270331311211367, 0.28889365821401, 0.2878552419105559, 0.28776703039330825] ***
*** finished computation of 3 references, err: [Inf, 0.38374142539149886, 0.30811586667542, 0.29270331311211367, 0.28889365821401, 0.2878552419105559, 0.28776703039330825] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [67, 156, 18]]
** centroid: 1, normalized-entropy: 0.7565841475451072, [(1, 67), (2, 156), (3, 18)]
*** center 2: selecting labels [1] (freq >= 2) [from [227, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [106, 93, 0]]
** centroid: 3, normalized-entropy: 0.9969194063891462, [(1, 106), (2, 93)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.37914560443960477] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37914560443960477, 0.2969397463384776] ***
*** starting iteration: 2; err: [Inf, 0.37914560443960477, 0.2969397463384776] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37914560443960477, 0.2969397463384776, 0.2908860567811949] ***
*** starting iteration: 3; err: [Inf, 0.37914560443960477, 0.2969397463384776, 0.2908860567811949] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37914560443960477, 0.2969397463384776, 0.2908860567811949, 0.28872363745183244] ***
*** starting iteration: 4; err: [Inf, 0.37914560443960477, 0.2969397463384776, 0.2908860567811949, 0.28872363745183244] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37914560443960477, 0.2969397463384776, 0.2908860567811949, 0.28872363745183244, 0.288012550169158] ***
*** finished computation of 3 references, err: [Inf, 0.37914560443960477, 0.2969397463384776, 0.2908860567811949, 0.28872363745183244, 0.288012550169158] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [83, 154, 14]]
** centroid: 1, normalized-entropy: 0.7524429607681478, [(1, 83), (2, 154), (3, 14)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [104, 103, 0]]
** centroid: 2, normalized-entropy: 0.9999831652937935, [(1, 104), (2, 103)]
*** center 3: selecting labels [1] (freq >= 2) [from [209, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 11)
[0.9370058681435927, 0.9320008631385877, 0.9279818740896585, 0.9210138281994569, 0.8929768091444737, 0.8879568190945436, 0.8840277403151654, 0.8789597981214747, 0.8250226274178369, 0.8161334987682293, 0.790991590392788]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.6, 1) => 0.9370058681435927
finished with 11
iteration 4 finished
generating 4 configurations using top 12 configurations, starting with 11)
[0.9370058681435927, 0.9320008631385877, 0.9279818740896585, 0.9210138281994569, 0.8929768091444737, 0.8879568190945436, 0.8840277403151654, 0.8789597981214747, 0.8250226274178369, 0.8161334987682293, 0.790991590392788]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.6, 1) => 0.9370058681435927
finished with 11
iteration 5 finished
generating 4 configurations using top 12 configurations, starting with 11)
[0.9370058681435927, 0.9320008631385877, 0.9279818740896585, 0.9210138281994569, 0.8929768091444737, 0.8879568190945436, 0.8840277403151654, 0.8789597981214747, 0.8250226274178369, 0.8161334987682293, 0.790991590392788]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.6, 1) => 0.9370058681435927
finished with 12
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.39111800339945535] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39111800339945535, 0.318263640733542] ***
*** starting iteration: 2; err: [Inf, 0.39111800339945535, 0.318263640733542] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39111800339945535, 0.318263640733542, 0.3037586019656903] ***
*** starting iteration: 3; err: [Inf, 0.39111800339945535, 0.318263640733542, 0.3037586019656903] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39111800339945535, 0.318263640733542, 0.3037586019656903, 0.29986532932908105] ***
*** finished computation of 3 references, err: [Inf, 0.39111800339945535, 0.318263640733542, 0.3037586019656903, 0.29986532932908105] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [266, 13, 0]]
** centroid: 1, normalized-entropy: 0.27175269469961544, [(1, 266), (2, 13)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 184, 16]]
** centroid: 2, normalized-entropy: 0.4021791902022729, [(2, 184), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [136, 51, 0]]
** centroid: 3, normalized-entropy: 0.8453509366224364, [(1, 136), (2, 51)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.42959427080121354] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42959427080121354, 0.29857701305830586] ***
*** starting iteration: 2; err: [Inf, 0.42959427080121354, 0.29857701305830586] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42959427080121354, 0.29857701305830586, 0.29426404826532954] ***
*** starting iteration: 3; err: [Inf, 0.42959427080121354, 0.29857701305830586, 0.29426404826532954] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42959427080121354, 0.29857701305830586, 0.29426404826532954, 0.29229375405301306] ***
*** finished computation of 3 references, err: [Inf, 0.42959427080121354, 0.29857701305830586, 0.29426404826532954, 0.29229375405301306] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [79, 141, 18]]
** centroid: 1, normalized-entropy: 0.7932551427858514, [(1, 79), (2, 141), (3, 18)]
*** center 2: selecting labels [1] (freq >= 2) [from [219, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [102, 108, 0]]
** centroid: 3, normalized-entropy: 0.9994110647387552, [(1, 102), (2, 108)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3869721926190238] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3869721926190238, 0.30789251049186034] ***
*** starting iteration: 2; err: [Inf, 0.3869721926190238, 0.30789251049186034] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3869721926190238, 0.30789251049186034, 0.3060545265909167] ***
*** starting iteration: 3; err: [Inf, 0.3869721926190238, 0.30789251049186034, 0.3060545265909167] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3869721926190238, 0.30789251049186034, 0.3060545265909167, 0.304894656085338] ***
*** finished computation of 3 references, err: [Inf, 0.3869721926190238, 0.30789251049186034, 0.3060545265909167, 0.304894656085338] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [249, 26, 0]]
** centroid: 1, normalized-entropy: 0.45146266747885627, [(1, 249), (2, 26)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [147, 53, 0]]
** centroid: 2, normalized-entropy: 0.834198095860749, [(1, 147), (2, 53)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 178, 14]]
** centroid: 3, normalized-entropy: 0.3767150026960246, [(2, 178), (3, 14)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 12)
[0.9370058681435927, 0.9320008631385877, 0.9279818740896585, 0.9210138281994569, 0.8929768091444737, 0.8879568190945436, 0.8849538160915406, 0.8840277403151654, 0.8789597981214747, 0.8250226274178369, 0.8161334987682293, 0.790991590392788]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.6, 1) => 0.9370058681435927
finished with 12
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 12)
[0.9370058681435927, 0.9320008631385877, 0.9279818740896585, 0.9210138281994569, 0.8929768091444737, 0.8879568190945436, 0.8849538160915406, 0.8840277403151654, 0.8789597981214747, 0.8250226274178369, 0.8161334987682293, 0.790991590392788]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.6, 1) => 0.9370058681435927
finished with 13
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.3335624679016906] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3335624679016906, 0.2556619902809819] ***
*** finished computation of 3 references, err: [Inf, 0.3335624679016906, 0.2556619902809819] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [240, 43, 0]]
** centroid: 1, normalized-entropy: 0.6146825276437741, [(1, 240), (2, 43)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [162, 69, 0]]
** centroid: 2, normalized-entropy: 0.8796975782775168, [(1, 162), (2, 69)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 136, 16]]
** centroid: 3, normalized-entropy: 0.48546076074591343, [(2, 136), (3, 16)]
finished with 5 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3478126095906682] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3478126095906682, 0.2505352189303606] ***
*** finished computation of 3 references, err: [Inf, 0.3478126095906682, 0.2505352189303606] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 141, 18]]
** centroid: 1, normalized-entropy: 0.5095157180881823, [(2, 141), (3, 18)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [259, 67, 0]]
** centroid: 2, normalized-entropy: 0.7328345276314204, [(1, 259), (2, 67)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [141, 41, 0]]
** centroid: 3, normalized-entropy: 0.7696827013109419, [(1, 141), (2, 41)]
finished with 5 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.34613844278970846] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34613844278970846, 0.285032546406017] ***
*** finished computation of 3 references, err: [Inf, 0.34613844278970846, 0.285032546406017] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [126, 257, 14]]
** centroid: 1, normalized-entropy: 0.6951564077507637, [(1, 126), (2, 257), (3, 14)]
*** center 2: selecting labels [1] (freq >= 2) [from [131, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [139, 0, 0]]
finished with 5 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 13)
[0.9370058681435927, 0.9320008631385877, 0.9279818740896585, 0.9210138281994569, 0.8929768091444737, 0.8879568190945436, 0.8849538160915406, 0.8840277403151654, 0.8789597981214747, 0.8769907632183082, 0.8250226274178369, 0.8161334987682293, 0.790991590392788]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.6, 1) => 0.9370058681435927
finished with 14
iteration 9 finished
*** starting iteration: 1; err: [Inf, 0.3181780274235853] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3181780274235853, 0.2513359204010182] ***
*** starting iteration: 2; err: [Inf, 0.3181780274235853, 0.2513359204010182] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3181780274235853, 0.2513359204010182, 0.2428729564703822] ***
*** starting iteration: 3; err: [Inf, 0.3181780274235853, 0.2513359204010182, 0.2428729564703822] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3181780274235853, 0.2513359204010182, 0.2428729564703822, 0.2417099500248382] ***
*** finished computation of 3 references, err: [Inf, 0.3181780274235853, 0.2513359204010182, 0.2428729564703822, 0.2417099500248382] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [268, 11, 0]]
** centroid: 1, normalized-entropy: 0.23965661345035866, [(1, 268), (2, 11)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [1, 186, 16]]
** centroid: 2, normalized-entropy: 0.39938208242459744, [(2, 186), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [133, 51, 0]]
** centroid: 3, normalized-entropy: 0.8515714323493798, [(1, 133), (2, 51)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.36852905533319785] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36852905533319785, 0.23348915029311557] ***
*** starting iteration: 2; err: [Inf, 0.36852905533319785, 0.23348915029311557] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36852905533319785, 0.23348915029311557, 0.2308920901240795] ***
*** starting iteration: 3; err: [Inf, 0.36852905533319785, 0.23348915029311557, 0.2308920901240795] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36852905533319785, 0.23348915029311557, 0.2308920901240795, 0.23027902293665478] ***
*** finished computation of 3 references, err: [Inf, 0.36852905533319785, 0.23348915029311557, 0.2308920901240795, 0.23027902293665478] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [75, 148, 18]]
** centroid: 1, normalized-entropy: 0.7795966479688905, [(1, 75), (2, 148), (3, 18)]
*** center 2: selecting labels [1] (freq >= 2) [from [221, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [104, 101, 0]]
** centroid: 3, normalized-entropy: 0.9998455119707883, [(1, 104), (2, 101)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3074805283251552] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3074805283251552, 0.2488518429367148] ***
*** starting iteration: 2; err: [Inf, 0.3074805283251552, 0.2488518429367148] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3074805283251552, 0.2488518429367148, 0.24159510565762488] ***
*** starting iteration: 3; err: [Inf, 0.3074805283251552, 0.2488518429367148, 0.24159510565762488] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3074805283251552, 0.2488518429367148, 0.24159510565762488, 0.23963425494730473] ***
*** finished computation of 3 references, err: [Inf, 0.3074805283251552, 0.2488518429367148, 0.24159510565762488, 0.23963425494730473] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [258, 8, 0]]
** centroid: 1, normalized-entropy: 0.19476878174480033, [(1, 258), (2, 8)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 192, 14]]
** centroid: 2, normalized-entropy: 0.35826863860424546, [(2, 192), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [138, 57, 0]]
** centroid: 3, normalized-entropy: 0.871683617119982, [(1, 138), (2, 57)]
finished with 5 centroids; started with 3
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.20900444849394262] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20900444849394262, 0.1896487453947775] ***
*** finished computation of 7 references, err: [Inf, 0.20900444849394262, 0.1896487453947775] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [156, 3, 0]]
** centroid: 1, normalized-entropy: 0.13503620280212753, [(1, 156), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [19, 135, 0]]
** centroid: 2, normalized-entropy: 0.5389896033098995, [(1, 19), (2, 135)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [148, 1, 0]]
** centroid: 3, normalized-entropy: 0.05810074789112426, [(1, 148), (2, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 81, 24]]
** centroid: 4, normalized-entropy: 0.775512658133148, [(2, 81), (3, 24)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 147, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [155, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [121, 10, 0]]
** centroid: 7, normalized-entropy: 0.38913496597180475, [(1, 121), (2, 10)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23643191332928837] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23643191332928837, 0.19510014920309185] ***
*** finished computation of 7 references, err: [Inf, 0.23643191332928837, 0.19510014920309185] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [38, 22, 0]]
** centroid: 1, normalized-entropy: 0.9480782435939054, [(1, 38), (2, 22)]
*** center 2: selecting labels [1] (freq >= 1) [from [26, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 83, 13]]
** centroid: 3, normalized-entropy: 0.572108447204188, [(2, 83), (3, 13)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [53, 9, 0]]
** centroid: 4, normalized-entropy: 0.5975977764379984, [(1, 53), (2, 9)]
*** center 5: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [11, 86, 0]]
** centroid: 6, normalized-entropy: 0.5100930822965021, [(1, 11), (2, 86)]
*** center 7: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2469048592671752] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2469048592671752, 0.20468673182465136] ***
*** finished computation of 7 references, err: [Inf, 0.2469048592671752, 0.20468673182465136] ***
*** center 1: selecting labels [1] (freq >= 1) [from [37, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [59, 15, 0]]
** centroid: 2, normalized-entropy: 0.7273006785144036, [(1, 59), (2, 15)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [75, 53, 0]]
** centroid: 3, normalized-entropy: 0.9785844853199952, [(1, 75), (2, 53)]
*** center 4: selecting labels [1] (freq >= 1) [from [38, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [3, 39, 0]]
** centroid: 6, normalized-entropy: 0.3712323266408756, [(1, 3), (2, 39)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 78, 13]]
** centroid: 7, normalized-entropy: 0.5916727785823274, [(2, 78), (3, 13)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2368096746839583] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2368096746839583, 0.19711903052031993] ***
*** finished computation of 7 references, err: [Inf, 0.2368096746839583, 0.19711903052031993] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [16, 18, 0]]
** centroid: 1, normalized-entropy: 0.9975025463691153, [(1, 16), (2, 18)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [39, 60, 0]]
** centroid: 2, normalized-entropy: 0.9672947789468944, [(1, 39), (2, 60)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [70, 3, 0]]
** centroid: 3, normalized-entropy: 0.24729443986205674, [(1, 70), (2, 3)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 94, 11]]
** centroid: 4, normalized-entropy: 0.4839112332593779, [(2, 94), (3, 11)]
*** center 5: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [44, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [74, 5, 0]]
** centroid: 7, normalized-entropy: 0.340373285759646, [(1, 74), (2, 5)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3212510510031134] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3212510510031134, 0.22642333343997598] ***
*** finished computation of 7 references, err: [Inf, 0.3212510510031134, 0.22642333343997598] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 82, 8]]
** centroid: 1, normalized-entropy: 0.43275015878875417, [(2, 82), (3, 8)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [48, 4, 0]]
** centroid: 2, normalized-entropy: 0.3912435636292556, [(1, 48), (2, 4)]
*** center 3: selecting labels [1] (freq >= 1) [from [110, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [17, 19, 0]]
** centroid: 4, normalized-entropy: 0.9977724720899819, [(1, 17), (2, 19)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [26, 19, 0]]
** centroid: 5, normalized-entropy: 0.9824740868386409, [(1, 26), (2, 19)]
*** center 6: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [50, 59, 0]]
** centroid: 7, normalized-entropy: 0.995076532106423, [(1, 50), (2, 59)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3017580024972558] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3017580024972558, 0.20964498363621534] ***
*** finished computation of 7 references, err: [Inf, 0.3017580024972558, 0.20964498363621534] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [17, 14, 0]]
** centroid: 1, normalized-entropy: 0.9932338197397066, [(1, 17), (2, 14)]
*** center 2: selecting labels [1] (freq >= 1) [from [51, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [33, 3, 0]]
** centroid: 3, normalized-entropy: 0.4138168503036336, [(1, 33), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [53, 75, 0]]
** centroid: 4, normalized-entropy: 0.9785844853199952, [(1, 53), (2, 75)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 85, 10]]
** centroid: 5, normalized-entropy: 0.48546076074591343, [(2, 85), (3, 10)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [50, 12, 0]]
** centroid: 6, normalized-entropy: 0.708835673332196, [(1, 50), (2, 12)]
*** center 7: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25365536512434483] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25365536512434483, 0.20511969814263284] ***
*** finished computation of 7 references, err: [Inf, 0.25365536512434483, 0.20511969814263284] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [79, 5, 0]]
** centroid: 1, normalized-entropy: 0.3255517134879513, [(1, 79), (2, 5)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [7, 60, 0]]
** centroid: 2, normalized-entropy: 0.4830306801456181, [(1, 7), (2, 60)]
*** center 3: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 59, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 35, 14]]
** centroid: 5, normalized-entropy: 0.8631205685666311, [(2, 35), (3, 14)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [52, 34, 0]]
** centroid: 6, normalized-entropy: 0.9681647320759545, [(1, 52), (2, 34)]
*** center 7: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2408766940807691] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2408766940807691, 0.20641195013932884] ***
*** finished computation of 7 references, err: [Inf, 0.2408766940807691, 0.20641195013932884] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [45, 63, 0]]
** centroid: 1, normalized-entropy: 0.9798687566511527, [(1, 45), (2, 63)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [69, 11, 0]]
** centroid: 2, normalized-entropy: 0.5776539033535634, [(1, 69), (2, 11)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 80, 10]]
** centroid: 3, normalized-entropy: 0.5032583347756457, [(2, 80), (3, 10)]
*** center 4: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [63, 1, 0]]
** centroid: 5, normalized-entropy: 0.11611507530476962, [(1, 63), (2, 1)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [20, 33, 0]]
** centroid: 6, normalized-entropy: 0.9561550236844027, [(1, 20), (2, 33)]
*** center 7: selecting labels [1] (freq >= 1) [from [30, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2293043529521674] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2293043529521674, 0.1993742393143475] ***
*** finished computation of 7 references, err: [Inf, 0.2293043529521674, 0.1993742393143475] ***
*** center 1: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 58, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [125, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [12, 59, 0]]
** centroid: 4, normalized-entropy: 0.6554444445609846, [(1, 12), (2, 59)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 41, 13]]
** centroid: 5, normalized-entropy: 0.7962699368824384, [(2, 41), (3, 13)]
*** center 6: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [17, 34, 0]]
** centroid: 7, normalized-entropy: 0.9182958340544894, [(1, 17), (2, 34)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2936454964899458] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2936454964899458, 0.20848659177869558] ***
*** finished computation of 7 references, err: [Inf, 0.2936454964899458, 0.20848659177869558] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [89, 1, 0]]
** centroid: 1, normalized-entropy: 0.08807225904068142, [(1, 89), (2, 1)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [32, 31, 0]]
** centroid: 2, normalized-entropy: 0.9998182469603427, [(1, 32), (2, 31)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [46, 36, 0]]
** centroid: 3, normalized-entropy: 0.9892452969285004, [(1, 46), (2, 36)]
*** center 4: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 5: selecting labels [1, 2, 3] (freq >= 1) [from [18, 55, 11]]
** centroid: 5, normalized-entropy: 0.7951779044676069, [(1, 18), (2, 55), (3, 11)]
*** center 6: selecting labels [1, 2, 3] (freq >= 1) [from [1, 66, 3]]
** centroid: 6, normalized-entropy: 0.2286211079332453, [(1, 1), (2, 66), (3, 3)]
*** center 7: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2688000946547836] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2688000946547836, 0.21170485295541586] ***
*** finished computation of 7 references, err: [Inf, 0.2688000946547836, 0.21170485295541586] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [68, 10, 0]]
** centroid: 1, normalized-entropy: 0.552495114325111, [(1, 68), (2, 10)]
*** center 2: selecting labels [1] (freq >= 1) [from [26, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [8, 57, 0]]
** centroid: 3, normalized-entropy: 0.5381411852224502, [(1, 8), (2, 57)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 60, 14]]
** centroid: 4, normalized-entropy: 0.699772221773307, [(2, 60), (3, 14)]
*** center 5: selecting labels [1] (freq >= 1) [from [39, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [145, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [2, 71, 0]]
** centroid: 7, normalized-entropy: 0.18116640155354563, [(1, 2), (2, 71)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2830660117566586] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2830660117566586, 0.20336413212149637] ***
*** finished computation of 7 references, err: [Inf, 0.2830660117566586, 0.20336413212149637] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [55, 22, 0]]
** centroid: 1, normalized-entropy: 0.8631205685666311, [(1, 55), (2, 22)]
*** center 2: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [2, 56, 0]]
** centroid: 3, normalized-entropy: 0.21639693245126485, [(1, 2), (2, 56)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 55, 9]]
** centroid: 4, normalized-entropy: 0.5858732928619204, [(2, 55), (3, 9)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [109, 13, 0]]
** centroid: 5, normalized-entropy: 0.48944383152584386, [(1, 109), (2, 13)]
*** center 6: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 40, 3]]
** centroid: 7, normalized-entropy: 0.3650551896402848, [(2, 40), (3, 3)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.27018839950487017] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27018839950487017, 0.2037081947401166] ***
*** finished computation of 7 references, err: [Inf, 0.27018839950487017, 0.2037081947401166] ***
*** center 1: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [2, 68, 0]]
** centroid: 2, normalized-entropy: 0.18717625687320805, [(1, 2), (2, 68)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [74, 4, 0]]
** centroid: 3, normalized-entropy: 0.29181825659888555, [(1, 74), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [26, 69, 0]]
** centroid: 4, normalized-entropy: 0.846701711600821, [(1, 26), (2, 69)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 36, 9]]
** centroid: 5, normalized-entropy: 0.7219280948873623, [(2, 36), (3, 9)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [48, 17, 0]]
** centroid: 6, normalized-entropy: 0.829059069399666, [(1, 48), (2, 17)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [64, 1, 0]]
** centroid: 7, normalized-entropy: 0.11467550533614682, [(1, 64), (2, 1)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21815398104861378] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21815398104861378, 0.20202392333745955] ***
*** finished computation of 7 references, err: [Inf, 0.21815398104861378, 0.20202392333745955] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 85, 14]]
** centroid: 1, normalized-entropy: 0.5879303728017198, [(2, 85), (3, 14)]
*** center 2: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [71, 4, 0]]
** centroid: 3, normalized-entropy: 0.3003914173647818, [(1, 71), (2, 4)]
*** center 4: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [21, 72, 0]]
** centroid: 5, normalized-entropy: 0.7706290693639406, [(1, 21), (2, 72)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [49, 34, 0]]
** centroid: 6, normalized-entropy: 0.9763102872004581, [(1, 49), (2, 34)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [35, 2, 0]]
** centroid: 7, normalized-entropy: 0.30337483608641397, [(1, 35), (2, 2)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2939386389977299] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2939386389977299, 0.20262837618030607] ***
*** finished computation of 7 references, err: [Inf, 0.2939386389977299, 0.20262837618030607] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [19, 43, 0]]
** centroid: 1, normalized-entropy: 0.8890349038123858, [(1, 19), (2, 43)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [42, 11, 0]]
** centroid: 2, normalized-entropy: 0.7367680100024784, [(1, 42), (2, 11)]
*** center 3: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [6, 61, 0]]
** centroid: 5, normalized-entropy: 0.43497348007474274, [(1, 6), (2, 61)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [69, 17, 0]]
** centroid: 6, normalized-entropy: 0.7172524777375696, [(1, 69), (2, 17)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 55, 12]]
** centroid: 7, normalized-entropy: 0.678114052360606, [(2, 55), (3, 12)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2607450739853084] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2607450739853084, 0.21746116225421427] ***
*** finished computation of 7 references, err: [Inf, 0.2607450739853084, 0.21746116225421427] ***
*** center 1: selecting labels [1] (freq >= 1) [from [104, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [3, 61, 11]]
** centroid: 2, normalized-entropy: 0.5264291856344314, [(1, 3), (2, 61), (3, 11)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [89, 1, 0]]
** centroid: 3, normalized-entropy: 0.08807225904068142, [(1, 89), (2, 1)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [65, 5, 0]]
** centroid: 4, normalized-entropy: 0.3712323266408756, [(1, 65), (2, 5)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 48, 1]]
** centroid: 5, normalized-entropy: 0.14372616993938164, [(2, 48), (3, 1)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 54, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23848694142326712] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23848694142326712, 0.2012643632972613] ***
*** finished computation of 7 references, err: [Inf, 0.23848694142326712, 0.2012643632972613] ***
*** center 1: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [37, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [15, 35, 0]]
** centroid: 3, normalized-entropy: 0.8812908992306927, [(1, 15), (2, 35)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 64, 14]]
** centroid: 4, normalized-entropy: 0.6789538995185759, [(2, 64), (3, 14)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [62, 10, 0]]
** centroid: 5, normalized-entropy: 0.581321498763703, [(1, 62), (2, 10)]
*** center 6: selecting labels [1] (freq >= 1) [from [46, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [53, 81, 0]]
** centroid: 7, normalized-entropy: 0.9682710238495323, [(1, 53), (2, 81)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22165810333937405] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22165810333937405, 0.1998620486408472] ***
*** finished computation of 7 references, err: [Inf, 0.22165810333937405, 0.1998620486408472] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 56, 3]]
** centroid: 1, normalized-entropy: 0.2899860470332091, [(2, 56), (3, 3)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 50, 7]]
** centroid: 2, normalized-entropy: 0.5373760853377334, [(2, 50), (3, 7)]
*** center 3: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [22, 37, 0]]
** centroid: 4, normalized-entropy: 0.9528588097297789, [(1, 22), (2, 37)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [35, 56, 0]]
** centroid: 5, normalized-entropy: 0.961236604722876, [(1, 35), (2, 56)]
*** center 6: selecting labels [1] (freq >= 1) [from [119, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [49, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24202073926012962] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24202073926012962, 0.2037186486236751] ***
*** finished computation of 7 references, err: [Inf, 0.24202073926012962, 0.2037186486236751] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 62, 14]]
** centroid: 1, normalized-entropy: 0.6892019851173655, [(2, 62), (3, 14)]
*** center 2: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [44, 31, 0]]
** centroid: 5, normalized-entropy: 0.9782176659354249, [(1, 44), (2, 31)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [38, 34, 0]]
** centroid: 6, normalized-entropy: 0.9977724720899819, [(1, 38), (2, 34)]
*** center 7: selecting labels [1, 2, 3] (freq >= 1) [from [22, 57, 1]]
** centroid: 7, normalized-entropy: 0.5928533099314257, [(1, 22), (2, 57), (3, 1)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2531000507771969] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2531000507771969, 0.18597261078283192] ***
*** finished computation of 7 references, err: [Inf, 0.2531000507771969, 0.18597261078283192] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [62, 46, 0]]
** centroid: 1, normalized-entropy: 0.9841095278800533, [(1, 62), (2, 46)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 40, 11]]
** centroid: 2, normalized-entropy: 0.7522121733341471, [(2, 40), (3, 11)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [56, 15, 0]]
** centroid: 3, normalized-entropy: 0.743898745288434, [(1, 56), (2, 15)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 73, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [58, 20, 0]]
** centroid: 6, normalized-entropy: 0.8212809417449864, [(1, 58), (2, 20)]
*** center 7: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2594804386710748] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2594804386710748, 0.19957325539551676] ***
*** finished computation of 7 references, err: [Inf, 0.2594804386710748, 0.19957325539551676] ***
*** center 1: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [72, 2, 0]]
** centroid: 2, normalized-entropy: 0.1792560669283214, [(1, 72), (2, 2)]
*** center 3: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 4: selecting labels [1, 2, 3] (freq >= 1) [from [1, 86, 3]]
** centroid: 4, normalized-entropy: 0.18824926457887595, [(1, 1), (2, 86), (3, 3)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [25, 46, 0]]
** centroid: 5, normalized-entropy: 0.935940714955517, [(1, 25), (2, 46)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 54, 8]]
** centroid: 6, normalized-entropy: 0.5547781633412736, [(2, 54), (3, 8)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [47, 3, 0]]
** centroid: 7, normalized-entropy: 0.3274449191544762, [(1, 47), (2, 3)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24903429521247744] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24903429521247744, 0.19629754799045623] ***
*** finished computation of 7 references, err: [Inf, 0.24903429521247744, 0.19629754799045623] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [68, 38, 0]]
** centroid: 1, normalized-entropy: 0.9414231081869789, [(1, 68), (2, 38)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [50, 3, 0]]
** centroid: 2, normalized-entropy: 0.3138129641688652, [(1, 50), (2, 3)]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 61, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [42, 25, 0]]
** centroid: 4, normalized-entropy: 0.9530483471581301, [(1, 42), (2, 25)]
*** center 5: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 58, 13]]
** centroid: 6, normalized-entropy: 0.6868088934028034, [(2, 58), (3, 13)]
*** center 7: selecting labels [1] (freq >= 1) [from [48, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23894950855895877] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23894950855895877, 0.20545678133843467] ***
*** finished computation of 7 references, err: [Inf, 0.23894950855895877, 0.20545678133843467] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [49, 32, 0]]
** centroid: 1, normalized-entropy: 0.9679884922470298, [(1, 49), (2, 32)]
*** center 2: selecting labels [1] (freq >= 1) [from [37, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [47, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [49, 32, 0]]
** centroid: 4, normalized-entropy: 0.9679884922470298, [(1, 49), (2, 32)]
*** center 5: selecting labels [1] (freq >= 1) [from [39, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 110, 13]]
** centroid: 6, normalized-entropy: 0.4867804823835752, [(2, 110), (3, 13)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [69, 23, 0]]
** centroid: 7, normalized-entropy: 0.8112781244591328, [(1, 69), (2, 23)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23279718662425875] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23279718662425875, 0.19642936272732914] ***
*** finished computation of 7 references, err: [Inf, 0.23279718662425875, 0.19642936272732914] ***
*** center 1: selecting labels [1] (freq >= 1) [from [51, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 59, 13]]
** centroid: 3, normalized-entropy: 0.6812908868842175, [(2, 59), (3, 13)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [1, 65, 0]]
** centroid: 4, normalized-entropy: 0.11327430349709665, [(1, 1), (2, 65)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [34, 38, 0]]
** centroid: 5, normalized-entropy: 0.9977724720899819, [(1, 34), (2, 38)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [67, 4, 0]]
** centroid: 6, normalized-entropy: 0.3127333763966432, [(1, 67), (2, 4)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [81, 22, 0]]
** centroid: 7, normalized-entropy: 0.7482932859824888, [(1, 81), (2, 22)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2830171358827501] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2830171358827501, 0.2159521310729906] ***
*** finished computation of 7 references, err: [Inf, 0.2830171358827501, 0.2159521310729906] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [97, 20, 0]]
** centroid: 1, normalized-entropy: 0.6598509794988008, [(1, 97), (2, 20)]
*** center 2: selecting labels [1] (freq >= 1) [from [37, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 96, 12]]
** centroid: 3, normalized-entropy: 0.5032583347756457, [(2, 96), (3, 12)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [48, 13, 0]]
** centroid: 4, normalized-entropy: 0.7473944462440388, [(1, 48), (2, 13)]
*** center 5: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [14, 54, 0]]
** centroid: 6, normalized-entropy: 0.7335379291086666, [(1, 14), (2, 54)]
*** center 7: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2357961267605424] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2357961267605424, 0.192561098407954] ***
*** finished computation of 7 references, err: [Inf, 0.2357961267605424, 0.192561098407954] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [4, 73, 0]]
** centroid: 1, normalized-entropy: 0.29461520565280713, [(1, 4), (2, 73)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [49, 10, 0]]
** centroid: 2, normalized-entropy: 0.656540281386946, [(1, 49), (2, 10)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [1, 48, 0]]
** centroid: 3, normalized-entropy: 0.14372616993938164, [(1, 1), (2, 48)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [83, 2, 0]]
** centroid: 4, normalized-entropy: 0.16082302082246946, [(1, 83), (2, 2)]
*** center 5: selecting labels [1] (freq >= 1) [from [99, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [70, 2, 0]]
** centroid: 6, normalized-entropy: 0.18312206830137262, [(1, 70), (2, 2)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 48, 11]]
** centroid: 7, normalized-entropy: 0.693965967334286, [(2, 48), (3, 11)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2800700934547931] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2800700934547931, 0.22440684291161597] ***
*** finished computation of 7 references, err: [Inf, 0.2800700934547931, 0.22440684291161597] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 75, 3]]
** centroid: 1, normalized-entropy: 0.23519338181924157, [(2, 75), (3, 3)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [40, 23, 0]]
** centroid: 2, normalized-entropy: 0.9468188316776024, [(1, 40), (2, 23)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 36, 8]]
** centroid: 3, normalized-entropy: 0.6840384356390419, [(2, 36), (3, 8)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [14, 10, 0]]
** centroid: 4, normalized-entropy: 0.9798687566511527, [(1, 14), (2, 10)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [92, 9, 0]]
** centroid: 5, normalized-entropy: 0.43348846324460666, [(1, 92), (2, 9)]
*** center 6: selecting labels [1] (freq >= 1) [from [107, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [35, 48, 0]]
** centroid: 7, normalized-entropy: 0.9822309298084991, [(1, 35), (2, 48)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2852268316540867] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2852268316540867, 0.20894502202793955] ***
*** finished computation of 7 references, err: [Inf, 0.2852268316540867, 0.20894502202793955] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [56, 1, 0]]
** centroid: 1, normalized-entropy: 0.1274185117923586, [(1, 56), (2, 1)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [102, 15, 0]]
** centroid: 2, normalized-entropy: 0.552495114325111, [(1, 102), (2, 15)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [8, 74, 0]]
** centroid: 3, normalized-entropy: 0.4612160405139095, [(1, 8), (2, 74)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [17, 23, 0]]
** centroid: 4, normalized-entropy: 0.9837082626231858, [(1, 17), (2, 23)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 74, 14]]
** centroid: 5, normalized-entropy: 0.6321302781219708, [(2, 74), (3, 14)]
*** center 6: selecting labels [1] (freq >= 1) [from [45, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2048893417157233] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2048893417157233, 0.18355915873870254] ***
*** finished computation of 7 references, err: [Inf, 0.2048893417157233, 0.18355915873870254] ***
*** center 1: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 58, 13]]
** centroid: 2, normalized-entropy: 0.6868088934028034, [(2, 58), (3, 13)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [47, 21, 0]]
** centroid: 3, normalized-entropy: 0.8918107543797084, [(1, 47), (2, 21)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [66, 15, 0]]
** centroid: 4, normalized-entropy: 0.6912898694057888, [(1, 66), (2, 15)]
*** center 5: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [57, 30, 0]]
** centroid: 6, normalized-entropy: 0.9293636260137188, [(1, 57), (2, 30)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 67, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22669135122746228] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22669135122746228, 0.19025654830411076] ***
*** finished computation of 7 references, err: [Inf, 0.22669135122746228, 0.19025654830411076] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [53, 24, 0]]
** centroid: 1, normalized-entropy: 0.8951127210954559, [(1, 53), (2, 24)]
*** center 2: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [40, 2, 0]]
** centroid: 4, normalized-entropy: 0.2761954276479391, [(1, 40), (2, 2)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 36, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [40, 74, 0]]
** centroid: 6, normalized-entropy: 0.9348490242345946, [(1, 40), (2, 74)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 58, 9]]
** centroid: 7, normalized-entropy: 0.569190343735683, [(2, 58), (3, 9)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.352378214687109] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.352378214687109, 0.2366408130005002] ***
*** finished computation of 7 references, err: [Inf, 0.352378214687109, 0.2366408130005002] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [51, 81, 0]]
** centroid: 1, normalized-entropy: 0.9624127354629922, [(1, 51), (2, 81)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 83, 14]]
** centroid: 2, normalized-entropy: 0.5954670513561874, [(2, 83), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [54, 4, 0]]
** centroid: 3, normalized-entropy: 0.36205125173399805, [(1, 54), (2, 4)]
*** center 4: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [101, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [29, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [25, 3, 0]]
** centroid: 7, normalized-entropy: 0.4912373418243334, [(1, 25), (2, 3)]
finished with 8 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 377,3 => 24,1 => 599), Dict(2 => 352,3 => 34,1 => 614))
[ Info: ===== scores for single classifier: {"micro_f1":0.938,"precision":0.938,"recall":0.938,"macro_recall":0.910709049684428,"macro_f1":0.8452915331118112,"accuracy":0.938,"class_f1":{"2":0.9080118694362017,"3":0.6521739130434783,"1":0.9756888168557536},"class_precision":{"2":0.9503105590062112,"3":0.5172413793103449,"1":0.9709677419354839},"class_recall":{"2":0.8693181818181818,"3":0.8823529411764706,"1":0.9804560260586319}}
[ Info: ===== scores for 1: {"micro_f1":0.97,"precision":0.97,"recall":0.97,"macro_recall":0.9418202430513217,"macro_f1":0.9218985038048405,"accuracy":0.97,"class_f1":{"2":0.9577464788732395,"3":0.8219178082191781,"1":0.9860312243221035},"class_precision":{"2":0.9497206703910615,"3":0.7692307692307693,"1":0.9950248756218906},"class_recall":{"2":0.9659090909090909,"3":0.8823529411764706,"1":0.9771986970684039}}
[ Info: ===== scores for 5: {"micro_f1":0.958,"precision":0.958,"recall":0.958,"macro_recall":0.9292443620918904,"macro_f1":0.8876440615656053,"accuracy":0.958,"class_f1":{"2":0.9393063583815029,"3":0.7407407407407407,"1":0.9828850855745722},"class_precision":{"2":0.9558823529411765,"3":0.6382978723404256,"1":0.9836867862969005},"class_recall":{"2":0.9232954545454546,"3":0.8823529411764706,"1":0.9820846905537459}}
[ Info: ===== scores for 7: {"micro_f1":0.96,"precision":0.96,"recall":0.96,"macro_recall":0.930734219953898,"macro_f1":0.8891507833190871,"accuracy":0.96,"class_f1":{"2":0.9421965317919075,"3":0.7407407407407407,"1":0.9845150774246129},"class_precision":{"2":0.9588235294117647,"3":0.6382978723404256,"1":0.9853181076672104},"class_recall":{"2":0.9261363636363636,"3":0.8823529411764706,"1":0.9837133550488599}}
[ Info: ===== scores for 9: {"micro_f1":0.957,"precision":0.957,"recall":0.957,"macro_recall":0.9379625073304417,"macro_f1":0.8889883445163389,"accuracy":0.957,"class_f1":{"2":0.937950937950938,"3":0.746987951807229,"1":0.9820261437908496},"class_precision":{"2":0.9530791788856305,"3":0.6326530612244898,"1":0.9852459016393442},"class_recall":{"2":0.9232954545454546,"3":0.9117647058823529,"1":0.9788273615635179}}
[ Info: ===== scores for 11: {"micro_f1":0.955,"precision":0.955,"recall":0.955,"macro_recall":0.936472649468434,"macro_f1":0.8847846529776211,"accuracy":0.955,"class_f1":{"2":0.935064935064935,"3":0.7380952380952381,"1":0.9811937857726901},"class_precision":{"2":0.9501466275659824,"3":0.62,"1":0.9852216748768473},"class_recall":{"2":0.9204545454545454,"3":0.9117647058823529,"1":0.9771986970684039}}
(score = 0.97, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.97, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.969, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.969, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.963, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.963, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.961, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.961, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.958, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.958, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.962, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.962, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.96, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.96, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.961, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.961, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.97,"k":1,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.97,"precision":0.97,"recall":0.97,"macro_recall":0.9418202430513217,"macro_f1":0.9218985038048405,"accuracy":0.97,"class_f1":{"2":0.9577464788732395,"3":0.8219178082191781,"1":0.9860312243221035},"class_precision":{"2":0.9497206703910615,"3":0.7692307692307693,"1":0.9950248756218906},"class_recall":{"2":0.9659090909090909,"3":0.8823529411764706,"1":0.9771986970684039}}
Test Summary: | Pass  Total
AKNC          |    8      8
[225, 5, 3, 13, 6, 3, 5, 9, 1, 5, 10, 3, 4, 11, 7, 10, 5, 2, 6, 4, 3, 4, 48, 8, 1, 7, 2, 9, 12, 12, 3, 16, 10, 59, 15, 4, 18, 1, 10, 11, 30, 1, 2, 13, 3, 12, 5, 5, 9, 12, 7, 14, 6, 1, 6, 11, 2, 13, 12, 11, 10, 2, 28, 6, 7, 1, 23, 4, 16, 9, 53, 20, 20, 6, 6, 17, 19, 12, 23, 61, 79, 13, 2, 12, 34, 23, 11, 9, 108, 230, 8, 4, 11, 9, 5, 100, 4, 76, 25, 1, 21, 3, 11, 12, 17, 15, 14, 32, 3, 14, 37, 5, 9, 15, 28, 7, 5, 94, 6, 60, 27, 13, 29, 14, 122, 8, 92, 34, 11, 28, 7, 48, 2, 16, 25, 35, 8, 27, 114, 3, 6, 25, 89, 378, 35, 20, 141, 7, 1, 39, 28, 78, 9, 18, 5, 23, 12, 4, 3, 2, 19, 99, 19, 37, 13, 3, 13, 47, 22, 12, 16, 13, 11, 2, 5, 89, 86, 18, 4, 127, 29, 6, 2, 24, 21, 18, 22, 21, 6, 30, 40, 13, 38, 919, 17, 35, 13, 25, 25, 27, 9, 8, 6, 17, 2, 61, 25, 83, 10, 22, 5, 9, 28, 175, 11, 5, 4, 17, 3, 20, 21, 14, 2, 31, 32, 39, 4, 19, 16, 2, 53, 73, 15, 12, 245, 28, 18, 76, 3, 5, 19, 7, 21, 4, 292, 107, 28, 37, 42, 42, 4, 14, 8, 85, 1, 10, 31, 24, 12, 4, 5, 74, 24, 41, 69, 4, 6, 29, 4, 10, 24, 625, 75, 86, 44, 1, 41, 8, 15, 10, 19, 207, 73, 57, 29, 8, 15, 14, 34, 15, 8, 20, 4, 197, 5, 12, 126, 34, 3, 53]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6519999999999997, speedup = 0.29626475195242347, eval_ratio = 0.079547)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.39150545634920647,"recall":0.38541666666666674,"f1":null,"seconds":0.00016964226961135864,"exhaustive_search_seconds":0.0003699306398630142,"evaluations":483.046875,"distances_sum":1721.361508232739}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.568576388888889,"recall":0.568576388888889,"f1":null,"seconds":0.00032617710530757904,"exhaustive_search_seconds":0.0003699306398630142,"evaluations":697.4296875,"distances_sum":1609.9522152970403}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6857638888888883,"recall":0.6857638888888883,"f1":0.6857638888888883,"seconds":0.00045778788626194,"exhaustive_search_seconds":0.0003699306398630142,"evaluations":871.8671875,"distances_sum":1549.573698695339}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7465277777777772,"recall":0.7465277777777772,"f1":0.7465277777777772,"seconds":0.0005538277328014374,"exhaustive_search_seconds":0.0003699306398630142,"evaluations":1021.59375,"distances_sum":1526.3673192477152}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7977430555555552,"recall":0.7977430555555552,"f1":0.7977430555555552,"seconds":0.0006374884396791458,"exhaustive_search_seconds":0.0003699306398630142,"evaluations":1111.4375,"distances_sum":1511.663753856378}
KCenters.DeloneInvIndex> reached performance {"precision":0.8428819444444439,"recall":0.8428819444444439,"f1":0.8428819444444439,"seconds":0.0008711554110050201,"exhaustive_search_seconds":0.0003699306398630142,"evaluations":1228.6875,"distances_sum":1498.0674978762368}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8350000000000002, speedup = 0.5356390866699472, eval_ratio = 0.11873399999999999)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
