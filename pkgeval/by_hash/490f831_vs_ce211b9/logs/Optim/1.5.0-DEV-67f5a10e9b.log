Julia Version 1.5.0-DEV.82
Commit 67f5a10e9b (2020-01-16 22:11 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-8.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

 Resolving package versions...
 Installed NaNMath ──────────────── v0.3.3
 Installed OpenSpecFun_jll ──────── v0.5.3+1
 Installed SortingAlgorithms ────── v0.3.1
 Installed OrderedCollections ───── v1.1.0
 Installed Parameters ───────────── v0.12.0
 Installed DataStructures ───────── v0.17.9
 Installed ForwardDiff ──────────── v0.10.9
 Installed Optim ────────────────── v0.19.7
 Installed ArrayInterface ───────── v2.3.1
 Installed NLSolversBase ────────── v7.5.0
 Installed StaticArrays ─────────── v0.12.1
 Installed SpecialFunctions ─────── v0.9.0
 Installed CommonSubexpressions ─── v0.2.0
 Installed DiffRules ────────────── v1.0.0
 Installed DataAPI ──────────────── v1.1.0
 Installed PositiveFactorizations ─ v0.2.3
 Installed FillArrays ───────────── v0.8.4
 Installed DiffResults ──────────── v1.0.2
 Installed Missings ─────────────── v0.4.3
 Installed Calculus ─────────────── v0.5.1
 Installed Requires ─────────────── v1.0.0
 Installed DiffEqDiffTools ──────── v1.7.0
 Installed LineSearches ─────────── v7.0.1
 Installed StatsBase ────────────── v0.32.0
  Updating `~/.julia/environments/v1.5/Project.toml`
  [429524aa] + Optim v0.19.7
  Updating `~/.julia/environments/v1.5/Manifest.toml`
  [4fba245c] + ArrayInterface v2.3.1
  [49dc2e85] + Calculus v0.5.1
  [bbf7d656] + CommonSubexpressions v0.2.0
  [9a962f9c] + DataAPI v1.1.0
  [864edb3b] + DataStructures v0.17.9
  [01453d9d] + DiffEqDiffTools v1.7.0
  [163ba53b] + DiffResults v1.0.2
  [b552c78f] + DiffRules v1.0.0
  [1a297f60] + FillArrays v0.8.4
  [f6369f11] + ForwardDiff v0.10.9
  [d3d80556] + LineSearches v7.0.1
  [e1d29d7a] + Missings v0.4.3
  [d41bc354] + NLSolversBase v7.5.0
  [77ba4419] + NaNMath v0.3.3
  [efe28fd5] + OpenSpecFun_jll v0.5.3+1
  [429524aa] + Optim v0.19.7
  [bac558e1] + OrderedCollections v1.1.0
  [d96e819e] + Parameters v0.12.0
  [85a6dd25] + PositiveFactorizations v0.2.3
  [ae029012] + Requires v1.0.0
  [a2af1166] + SortingAlgorithms v0.3.1
  [276daf66] + SpecialFunctions v0.9.0
  [90137ffa] + StaticArrays v0.12.1
  [2913bbd2] + StatsBase v0.32.0
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8ba89e20] + Distributed 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
   Testing Optim
 Installed RecipesBase ───────── v0.7.0
 Installed RecursiveArrayTools ─ v2.0.0
 Installed Suppressor ────────── v0.1.1
 Installed OptimTestProblems ─── v2.0.2
 Installed Compat ────────────── v2.2.0
  Updating `/tmp/jl_6Dgqkn/Project.toml`
  [cec144fc] + OptimTestProblems v2.0.2
  [731186ca] + RecursiveArrayTools v2.0.0
  [fd094767] + Suppressor v0.1.1
  Updating `/tmp/jl_6Dgqkn/Manifest.toml`
  [34da2185] + Compat v2.2.0
  [cec144fc] + OptimTestProblems v2.0.2
  [3cdcf5f2] + RecipesBase v0.7.0
  [731186ca] + RecursiveArrayTools v2.0.0
  [fd094767] + Suppressor v0.1.1
  [8bb1440f] + DelimitedFiles 
  [a63ad114] + Mmap 
  [1a1011a3] + SharedArrays 
Running sandbox
Status `/tmp/jl_6Dgqkn/Project.toml`
  [49dc2e85] Calculus v0.5.1
  [01453d9d] DiffEqDiffTools v1.7.0
  [1a297f60] FillArrays v0.8.4
  [f6369f11] ForwardDiff v0.10.9
  [d3d80556] LineSearches v7.0.1
  [d41bc354] NLSolversBase v7.5.0
  [77ba4419] NaNMath v0.3.3
  [429524aa] Optim v0.19.7
  [cec144fc] OptimTestProblems v2.0.2
  [d96e819e] Parameters v0.12.0
  [85a6dd25] PositiveFactorizations v0.2.3
  [731186ca] RecursiveArrayTools v2.0.0
  [2913bbd2] StatsBase v0.32.0
  [fd094767] Suppressor v0.1.1
  [37e2e46d] LinearAlgebra 
  [de0858da] Printf 
  [9a3f8284] Random 
  [2f01184e] SparseArrays 
  [8dfed614] Test 
./special/bigfloat/initial_convergence.jl
 18.057524 seconds (20.45 M allocations: 1.008 GiB, 5.36% gc time)
Test Summary: |
special       | No tests
./general/api.jl
 20.217069 seconds (18.49 M allocations: 926.447 MiB, 4.15% gc time)
./general/callables.jl
  0.235815 seconds (159.44 k allocations: 8.494 MiB)
./general/callbacks.jl
  5.990821 seconds (4.04 M allocations: 212.152 MiB, 1.19% gc time)
./general/convergence.jl
  0.461485 seconds (282.76 k allocations: 14.798 MiB)
./general/default_solvers.jl
  0.567500 seconds (307.84 k allocations: 16.088 MiB)
./general/deprecate.jl
  0.000195 seconds (94 allocations: 4.688 KiB)
./general/initial_convergence.jl
  3.489783 seconds (3.07 M allocations: 155.112 MiB, 2.42% gc time)
./general/objective_types.jl
  5.158880 seconds (4.36 M allocations: 228.673 MiB, 1.35% gc time)
./general/Optim.jl
  0.686127 seconds (547.77 k allocations: 27.100 MiB, 2.27% gc time)
./general/optimize.jl
  1.745426 seconds (1.65 M allocations: 84.695 MiB, 1.96% gc time)
./general/type_stability.jl
 18.038840 seconds (18.92 M allocations: 917.067 MiB, 2.55% gc time)
./general/counter.jl
 14.881117 seconds (13.36 M allocations: 658.632 MiB, 4.86% gc time)
./general/maximize.jl
  1.123331 seconds (1.15 M allocations: 60.721 MiB, 1.46% gc time)
Test Summary: | Pass  Total
general       | 2217   2217
./univariate/optimize/interface.jl
  0.000131 seconds (101 allocations: 5.031 KiB)
./univariate/optimize/optimize.jl
  0.192466 seconds (134.90 k allocations: 6.945 MiB)
./univariate/solvers/golden_section.jl
  1.824721 seconds (1.37 M allocations: 72.218 MiB, 1.28% gc time)
./univariate/solvers/brent.jl
  1.858717 seconds (1.42 M allocations: 73.954 MiB, 2.14% gc time)
./univariate/dual.jl
  2.092574 seconds (1.15 M allocations: 60.828 MiB, 0.88% gc time)
Test Summary: | Pass  Total
univariate    |   48     48
./multivariate/optimize/interface.jl
  3.817400 seconds (3.85 M allocations: 195.936 MiB, 2.34% gc time)
./multivariate/optimize/optimize.jl
  1.499458 seconds (815.56 k allocations: 42.003 MiB)
./multivariate/optimize/inplace.jl
  0.782648 seconds (499.48 k allocations: 23.778 MiB, 2.65% gc time)
./multivariate/solvers/constrained/fminbox.jl
 18.380691 seconds (15.37 M allocations: 773.743 MiB, 2.59% gc time)
./multivariate/solvers/constrained/ipnewton/constraints.jl
 51.004735 seconds (31.89 M allocations: 1.535 GiB, 2.38% gc time)
./multivariate/solvers/constrained/ipnewton/counter.jl
  0.531170 seconds (409.10 k allocations: 22.022 MiB)
./multivariate/solvers/constrained/ipnewton/ipnewton_unconstrained.jl
  9.748581 seconds (8.82 M allocations: 594.783 MiB, 4.18% gc time)
./multivariate/solvers/constrained/samin.jl
================================================================================
SAMIN results
==> Normal convergence <==
total number of objective function evaluations: 21701

     Obj. value:      0.0000000000

       parameter      search width
        -2.80512           0.00000 
         3.13131           0.00000 
================================================================================

  2.654709 seconds (2.98 M allocations: 149.943 MiB, 1.86% gc time)
./multivariate/solvers/first_order/accelerated_gradient_descent.jl
  4.747744 seconds (5.43 M allocations: 1.217 GiB, 4.56% gc time)
./multivariate/solvers/first_order/bfgs.jl
 97.436535 seconds (16.29 M allocations: 1.732 GiB, 3.38% gc time)
./multivariate/solvers/first_order/cg.jl
 22.545167 seconds (5.67 M allocations: 985.058 MiB, 2.33% gc time)
./multivariate/solvers/first_order/gradient_descent.jl
283.906401 seconds (56.80 M allocations: 12.391 GiB, 2.58% gc time)
./multivariate/solvers/first_order/l_bfgs.jl
 20.245264 seconds (5.13 M allocations: 1.136 GiB, 3.44% gc time)
./multivariate/solvers/first_order/momentum_gradient_descent.jl
Momentum Gradient Descent: Test Failed at /home/pkgeval/.julia/packages/Optim/cJRng/test/runtests.jl:151
  Expression: Optim.converged(results)
Stacktrace:
 [1] run_optim_tests(::MomentumGradientDescent{Float64,LineSearches.InitialPrevious{Float64},LineSearches.HagerZhang{Float64,Base.RefValue{Bool}}}; convergence_exceptions::NTuple{5,Tuple{String,Int64}}, minimizer_exceptions::Tuple{}, minimum_exceptions::Tuple{Tuple{String,Int64},Tuple{String,Int64}}, f_increase_exceptions::NTuple{4,String}, iteration_exceptions::Tuple{Tuple{String,Int64},Tuple{String,Int64},Tuple{String,Int64}}, skip::NTuple{6,String}, show_name::Bool, show_trace::Bool, show_res::Bool, show_itcalls::Bool) at /home/pkgeval/.julia/packages/Optim/cJRng/test/runtests.jl:151
 [2] macro expansion at /home/pkgeval/.julia/packages/Optim/cJRng/test/multivariate/solvers/first_order/momentum_gradient_descent.jl:5 [inlined]
 [3] macro expansion at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1116 [inlined]
 [4] top-level scope at /home/pkgeval/.julia/packages/Optim/cJRng/test/multivariate/solvers/first_order/momentum_gradient_descent.jl:3
Paraboloid Random Matrix did not converge with i = 1
 * Status: failure (reached maximum number of iterations) (line search failed)

 * Candidate solution
    Minimizer: [8.88e-01, 1.12e+00, 1.15e+00,  ...]
    Minimum:   1.912726e-01

 * Found with
    Algorithm:     Momentum Gradient Descent
    Initial Point: [0.00e+00, 0.00e+00, 0.00e+00,  ...]

 * Convergence measures
    |x - x'|               = 3.01e-05 ≰ 0.0e+00
    |x - x'|/|x'|          = 2.54e-05 ≰ 0.0e+00
    |f(x) - f(x')|         = 1.19e-05 ≰ 0.0e+00
    |f(x) - f(x')|/|f(x')| = 6.20e-05 ≰ 0.0e+00
    |g(x)|                 = 2.40e-02 ≰ 1.0e-08

 * Work counters
    Seconds run:   1902  (vs limit Inf)
    Iterations:    10000
    f(x) calls:    39493
    ∇f(x) calls:   39493

Momentum Gradient Descent: Test Failed at /home/pkgeval/.julia/packages/Optim/cJRng/test/runtests.jl:159
  Expression: Optim.minimum(results) < prob.minimum + sqrt(eps(typeof(prob.minimum)))
   Evaluated: 0.1912725814045097 < 1.4901161193847656e-8
Stacktrace:
 [1] run_optim_tests(::MomentumGradientDescent{Float64,LineSearches.InitialPrevious{Float64},LineSearches.HagerZhang{Float64,Base.RefValue{Bool}}}; convergence_exceptions::NTuple{5,Tuple{String,Int64}}, minimizer_exceptions::Tuple{}, minimum_exceptions::Tuple{Tuple{String,Int64},Tuple{String,Int64}}, f_increase_exceptions::NTuple{4,String}, iteration_exceptions::Tuple{Tuple{String,Int64},Tuple{String,Int64},Tuple{String,Int64}}, skip::NTuple{6,String}, show_name::Bool, show_trace::Bool, show_res::Bool, show_itcalls::Bool) at /home/pkgeval/.julia/packages/Optim/cJRng/test/runtests.jl:159
 [2] macro expansion at /home/pkgeval/.julia/packages/Optim/cJRng/test/multivariate/solvers/first_order/momentum_gradient_descent.jl:5 [inlined]
 [3] macro expansion at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1116 [inlined]
 [4] top-level scope at /home/pkgeval/.julia/packages/Optim/cJRng/test/multivariate/solvers/first_order/momentum_gradient_descent.jl:3
Momentum Gradient Descent: Test Failed at /home/pkgeval/.julia/packages/Optim/cJRng/test/runtests.jl:162
  Expression: norm(Optim.minimizer(results) - prob.solutions) < 0.01
   Evaluated: 1.281446679711507 < 0.01
Stacktrace:
 [1] run_optim_tests(::MomentumGradientDescent{Float64,LineSearches.InitialPrevious{Float64},LineSearches.HagerZhang{Float64,Base.RefValue{Bool}}}; convergence_exceptions::NTuple{5,Tuple{String,Int64}}, minimizer_exceptions::Tuple{}, minimum_exceptions::Tuple{Tuple{String,Int64},Tuple{String,Int64}}, f_increase_exceptions::NTuple{4,String}, iteration_exceptions::Tuple{Tuple{String,Int64},Tuple{String,Int64},Tuple{String,Int64}}, skip::NTuple{6,String}, show_name::Bool, show_trace::Bool, show_res::Bool, show_itcalls::Bool) at /home/pkgeval/.julia/packages/Optim/cJRng/test/runtests.jl:162
 [2] macro expansion at /home/pkgeval/.julia/packages/Optim/cJRng/test/multivariate/solvers/first_order/momentum_gradient_descent.jl:5 [inlined]
 [3] macro expansion at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1116 [inlined]
 [4] top-level scope at /home/pkgeval/.julia/packages/Optim/cJRng/test/multivariate/solvers/first_order/momentum_gradient_descent.jl:3
1913.696017 seconds (46.83 M allocations: 15.749 GiB, 1.20% gc time)
./multivariate/solvers/first_order/ngmres.jl
┌ Warning: Use caution. N-GMRES/O-ACCEL has only been tested with Gradient Descent and L-BFGS preconditioning.
└ @ Optim ~/.julia/packages/Optim/cJRng/src/multivariate/solvers/first_order/ngmres.jl:210
 81.743303 seconds (27.24 M allocations: 2.780 GiB, 3.60% gc time)
./multivariate/solvers/second_order/newton.jl
330.862930 seconds (42.23 M allocations: 10.435 GiB, 2.09% gc time)
./multivariate/solvers/second_order/newton_trust_region.jl
260.675365 seconds (28.52 M allocations: 7.130 GiB, 3.48% gc time)
./multivariate/solvers/second_order/krylov_trust_region.jl
  0.949005 seconds (172.93 k allocations: 46.566 MiB, 17.25% gc time)
./multivariate/solvers/zeroth_order/grid_search.jl
  0.445314 seconds (322.82 k allocations: 16.369 MiB)
./multivariate/solvers/zeroth_order/nelder_mead.jl
  3.912698 seconds (4.51 M allocations: 232.794 MiB, 5.62% gc time)
./multivariate/solvers/zeroth_order/particle_swarm.jl
  3.585988 seconds (2.87 M allocations: 135.021 MiB, 3.46% gc time)
./multivariate/solvers/zeroth_order/simulated_annealing.jl
  0.527255 seconds (599.29 k allocations: 16.603 MiB)
./multivariate/array.jl
 65.759455 seconds (52.76 M allocations: 2.421 GiB, 4.19% gc time)
./multivariate/extrapolate.jl
Extrapolation: Error During Test at /home/pkgeval/.julia/packages/Optim/cJRng/test/multivariate/extrapolate.jl:3
  Got exception outside of a @test
  MethodError: no method matching ldiv!(::SparseArrays.SparseMatrixCSC{Float64,Int64}, ::Array{Float64,1})
  Closest candidates are:
    ldiv!(!Matched::Number, ::AbstractArray) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/LinearAlgebra/src/generic.jl:239
    ldiv!(::AbstractArray, !Matched::Number, !Matched::AbstractArray) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/LinearAlgebra/src/generic.jl:244
    ldiv!(!Matched::LinearAlgebra.LowerTriangular{T,#s631} where #s631<:(Union{DenseArray{T,2}, Base.ReinterpretArray{T,2,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray}, Base.ReshapedArray{T,2,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{Base.ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray}, SubArray{T,2,A,I,L} where L where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, Base.AbstractCartesianIndex},N} where N} where A<:Union{Base.ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, Base.ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{Base.ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, DenseArray}} where T), ::Union{DenseArray{T,1}, DenseArray{T,2}, Base.ReinterpretArray{T,1,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray}, Base.ReinterpretArray{T,2,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray}, Base.ReshapedArray{T,1,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{Base.ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray}, Base.ReshapedArray{T,2,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{Base.ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray}, SubArray{T,1,A,I,L} where L where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, Base.AbstractCartesianIndex},N} where N} where A<:Union{Base.ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, Base.ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{Base.ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, DenseArray}, SubArray{T,2,A,I,L} where L where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, Base.AbstractCartesianIndex},N} where N} where A<:Union{Base.ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, Base.ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{Base.ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, DenseArray}}) where T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64} at /workspace/srcdir/usr/share/julia/stdlib/v1.5/LinearAlgebra/src/triangular.jl:750
    ...
  Stacktrace:
   [1] ldiv!(::Array{Float64,1}, ::SparseArrays.SparseMatrixCSC{Float64,Int64}, ::Array{Float64,1}) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/LinearAlgebra/src/generic.jl:247
   [2] twoloop!(::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Array{Float64,1},1}, ::Array{Array{Float64,1},1}, ::Int64, ::Int64, ::Array{Float64,1}, ::Array{Float64,1}, ::Bool, ::SparseArrays.SparseMatrixCSC{Float64,Int64}) at /home/pkgeval/.julia/packages/Optim/cJRng/src/multivariate/solvers/first_order/l_bfgs.jl:60
   [3] update_state!(::OnceDifferentiable{Float64,Array{Float64,1},Array{Float64,1}}, ::Optim.LBFGSState{Array{Float64,1},Array{Array{Float64,1},1},Array{Array{Float64,1},1},Float64,Array{Float64,1}}, ::LBFGS{SparseArrays.SparseMatrixCSC{Float64,Int64},LineSearches.InitialStatic{Float64},LineSearches.HagerZhang{Float64,Base.RefValue{Bool}},Optim.var"#20#22"}) at /home/pkgeval/.julia/packages/Optim/cJRng/src/multivariate/solvers/first_order/l_bfgs.jl:189
   [4] optimize(::OnceDifferentiable{Float64,Array{Float64,1},Array{Float64,1}}, ::Array{Float64,1}, ::LBFGS{SparseArrays.SparseMatrixCSC{Float64,Int64},LineSearches.InitialStatic{Float64},LineSearches.HagerZhang{Float64,Base.RefValue{Bool}},Optim.var"#20#22"}, ::Optim.Options{Float64,Nothing}, ::Optim.LBFGSState{Array{Float64,1},Array{Array{Float64,1},1},Array{Array{Float64,1},1},Float64,Array{Float64,1}}) at /home/pkgeval/.julia/packages/Optim/cJRng/src/multivariate/optimize/optimize.jl:57
   [5] optimize(::OnceDifferentiable{Float64,Array{Float64,1},Array{Float64,1}}, ::Array{Float64,1}, ::LBFGS{SparseArrays.SparseMatrixCSC{Float64,Int64},LineSearches.InitialStatic{Float64},LineSearches.HagerZhang{Float64,Base.RefValue{Bool}},Optim.var"#20#22"}, ::Optim.Options{Float64,Nothing}) at /home/pkgeval/.julia/packages/Optim/cJRng/src/multivariate/optimize/optimize.jl:33
   [6] optimize(::Function, ::Function, ::Array{Float64,1}, ::LBFGS{SparseArrays.SparseMatrixCSC{Float64,Int64},LineSearches.InitialStatic{Float64},LineSearches.HagerZhang{Float64,Base.RefValue{Bool}},Optim.var"#20#22"}, ::Optim.Options{Float64,Nothing}; inplace::Bool, autodiff::Symbol) at /home/pkgeval/.julia/packages/Optim/cJRng/src/multivariate/optimize/interface.jl:123
   [7] optimize(::Function, ::Function, ::Array{Float64,1}, ::LBFGS{SparseArrays.SparseMatrixCSC{Float64,Int64},LineSearches.InitialStatic{Float64},LineSearches.HagerZhang{Float64,Base.RefValue{Bool}},Optim.var"#20#22"}, ::Optim.Options{Float64,Nothing}) at /home/pkgeval/.julia/packages/Optim/cJRng/src/multivariate/optimize/interface.jl:121 (repeats 2 times)
   [8] top-level scope at /home/pkgeval/.julia/packages/Optim/cJRng/test/multivariate/extrapolate.jl:44
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1116
   [10] top-level scope at /home/pkgeval/.julia/packages/Optim/cJRng/test/multivariate/extrapolate.jl:4
   [11] include(::String) at ./client.jl:439
   [12] macro expansion at ./util.jl:175 [inlined]
   [13] macro expansion at /home/pkgeval/.julia/packages/Optim/cJRng/test/runtests.jl:253 [inlined]
   [14] macro expansion at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1116 [inlined]
   [15] top-level scope at /home/pkgeval/.julia/packages/Optim/cJRng/test/runtests.jl:251
   [16] include(::String) at ./client.jl:439
   [17] top-level scope at none:6
   [18] eval(::Module, ::Any) at ./boot.jl:331
   [19] exec_options(::Base.JLOptions) at ./client.jl:264
   [20] _start() at ./client.jl:484
  
 22.343173 seconds (21.28 M allocations: 1.080 GiB, 3.18% gc time)
./multivariate/lsthrow.jl
  4.025397 seconds (3.03 M allocations: 157.369 MiB, 4.53% gc time)
./multivariate/precon.jl
Preconditioning: Error During Test at /home/pkgeval/.julia/packages/Optim/cJRng/test/multivariate/precon.jl:8
  Got exception outside of a @test
  MethodError: no method matching ldiv!(::SparseArrays.SparseMatrixCSC{Float64,Int64}, ::Array{Float64,1})
  Closest candidates are:
    ldiv!(!Matched::Number, ::AbstractArray) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/LinearAlgebra/src/generic.jl:239
    ldiv!(::AbstractArray, !Matched::Number, !Matched::AbstractArray) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/LinearAlgebra/src/generic.jl:244
    ldiv!(!Matched::LinearAlgebra.LowerTriangular{T,#s631} where #s631<:(Union{DenseArray{T,2}, Base.ReinterpretArray{T,2,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray}, Base.ReshapedArray{T,2,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{Base.ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray}, SubArray{T,2,A,I,L} where L where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, Base.AbstractCartesianIndex},N} where N} where A<:Union{Base.ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, Base.ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{Base.ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, DenseArray}} where T), ::Union{DenseArray{T,1}, DenseArray{T,2}, Base.ReinterpretArray{T,1,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray}, Base.ReinterpretArray{T,2,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray}, Base.ReshapedArray{T,1,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{Base.ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray}, Base.ReshapedArray{T,2,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{Base.ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray}, SubArray{T,1,A,I,L} where L where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, Base.AbstractCartesianIndex},N} where N} where A<:Union{Base.ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, Base.ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{Base.ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, DenseArray}, SubArray{T,2,A,I,L} where L where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, Base.AbstractCartesianIndex},N} where N} where A<:Union{Base.ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, Base.ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{Base.ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, DenseArray}}) where T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64} at /workspace/srcdir/usr/share/julia/stdlib/v1.5/LinearAlgebra/src/triangular.jl:750
    ...
  Stacktrace:
   [1] ldiv!(::Array{Float64,1}, ::SparseArrays.SparseMatrixCSC{Float64,Int64}, ::Array{Float64,1}) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/LinearAlgebra/src/generic.jl:247
   [2] update_state!(::OnceDifferentiable{Float64,Array{Float64,1},Array{Float64,1}}, ::Optim.GradientDescentState{Array{Float64,1},Float64}, ::GradientDescent{LineSearches.InitialPrevious{Float64},LineSearches.HagerZhang{Float64,Base.RefValue{Bool}},SparseArrays.SparseMatrixCSC{Float64,Int64},Optim.var"#14#16"}) at /home/pkgeval/.julia/packages/Optim/cJRng/src/multivariate/solvers/first_order/gradient_descent.jl:67
   [3] optimize(::OnceDifferentiable{Float64,Array{Float64,1},Array{Float64,1}}, ::Array{Float64,1}, ::GradientDescent{LineSearches.InitialPrevious{Float64},LineSearches.HagerZhang{Float64,Base.RefValue{Bool}},SparseArrays.SparseMatrixCSC{Float64,Int64},Optim.var"#14#16"}, ::Optim.Options{Float64,Nothing}, ::Optim.GradientDescentState{Array{Float64,1},Float64}) at /home/pkgeval/.julia/packages/Optim/cJRng/src/multivariate/optimize/optimize.jl:57
   [4] optimize at /home/pkgeval/.julia/packages/Optim/cJRng/src/multivariate/optimize/optimize.jl:33 [inlined]
   [5] optimize(::Function, ::Function, ::Array{Float64,1}, ::GradientDescent{LineSearches.InitialPrevious{Float64},LineSearches.HagerZhang{Float64,Base.RefValue{Bool}},SparseArrays.SparseMatrixCSC{Float64,Int64},Optim.var"#14#16"}, ::Optim.Options{Float64,Nothing}; inplace::Bool, autodiff::Symbol) at /home/pkgeval/.julia/packages/Optim/cJRng/src/multivariate/optimize/interface.jl:123
   [6] optimize(::Function, ::Function, ::Array{Float64,1}, ::GradientDescent{LineSearches.InitialPrevious{Float64},LineSearches.HagerZhang{Float64,Base.RefValue{Bool}},SparseArrays.SparseMatrixCSC{Float64,Int64},Optim.var"#14#16"}, ::Optim.Options{Float64,Nothing}) at /home/pkgeval/.julia/packages/Optim/cJRng/src/multivariate/optimize/interface.jl:121
   [7] top-level scope at /home/pkgeval/.julia/packages/Optim/cJRng/test/multivariate/precon.jl:27
   [8] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1116
   [9] top-level scope at /home/pkgeval/.julia/packages/Optim/cJRng/test/multivariate/precon.jl:9
   [10] include(::String) at ./client.jl:439
   [11] macro expansion at ./util.jl:175 [inlined]
   [12] macro expansion at /home/pkgeval/.julia/packages/Optim/cJRng/test/runtests.jl:253 [inlined]
   [13] macro expansion at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1116 [inlined]
   [14] top-level scope at /home/pkgeval/.julia/packages/Optim/cJRng/test/runtests.jl:251
   [15] include(::String) at ./client.jl:439
   [16] top-level scope at none:6
   [17] eval(::Module, ::Any) at ./boot.jl:331
   [18] exec_options(::Base.JLOptions) at ./client.jl:264
   [19] _start() at ./client.jl:484
  
  4.010437 seconds (3.61 M allocations: 203.008 MiB, 3.56% gc time)
./multivariate/manifolds.jl
 53.634226 seconds (41.77 M allocations: 1.975 GiB, 3.01% gc time)
./multivariate/complex.jl
 14.645482 seconds (12.90 M allocations: 641.321 MiB, 2.94% gc time)
./multivariate/fdtime.jl
