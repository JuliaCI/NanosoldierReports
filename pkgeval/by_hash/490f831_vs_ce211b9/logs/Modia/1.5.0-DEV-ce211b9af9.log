Julia Version 1.5.0-DEV.80
Commit ce211b9af9 (2020-01-16 21:59 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-8.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

 Resolving package versions...
 Installed TreeViews ─────────────────── v0.3.0
 Installed SortingAlgorithms ─────────── v0.3.1
 Installed ConstructionBase ──────────── v1.0.0
 Installed DataStructures ────────────── v0.17.9
 Installed IterativeSolvers ──────────── v0.8.1
 Installed DiffEqBase ────────────────── v6.12.2
 Installed DataFrames ────────────────── v0.20.0
 Installed Modia ─────────────────────── v0.3.0
 Installed TableTraits ───────────────── v1.0.0
 Installed Compat ────────────────────── v2.2.0
 Installed RecipesBase ───────────────── v0.7.0
 Installed DataAPI ───────────────────── v1.1.0
 Installed PooledArrays ──────────────── v0.5.3
 Installed BinaryProvider ────────────── v0.5.8
 Installed InvertedIndices ───────────── v1.0.0
 Installed Parsers ───────────────────── v0.3.10
 Installed Unitful ───────────────────── v0.18.0
 Installed Sundials ──────────────────── v3.8.1
 Installed CategoricalArrays ─────────── v0.7.7
 Installed DataValueInterfaces ───────── v1.0.0
 Installed JSON ──────────────────────── v0.21.0
 Installed ChainRulesCore ────────────── v0.4.0
 Installed StaticArrays ──────────────── v0.12.1
 Installed RecursiveArrayTools ───────── v2.0.0
 Installed MuladdMacro ───────────────── v0.2.2
 Installed OrderedCollections ────────── v1.1.0
 Installed DocStringExtensions ───────── v0.8.1
 Installed MacroTools ────────────────── v0.5.3
 Installed IteratorInterfaceExtensions ─ v1.0.0
 Installed Tables ────────────────────── v0.2.11
 Installed ModiaMath ─────────────────── v0.5.2
 Installed Requires ──────────────────── v1.0.0
 Installed DiffEqDiffTools ───────────── v1.7.0
 Installed FunctionWrappers ──────────── v1.0.0
 Installed ArrayInterface ────────────── v2.3.1
 Installed RecursiveFactorization ────── v0.1.0
 Installed Missings ──────────────────── v0.4.3
 Installed ZygoteRules ───────────────── v0.2.0
 Installed Parameters ────────────────── v0.12.0
 Installed Roots ─────────────────────── v0.8.4
 Installed Reexport ──────────────────── v0.2.0
  Updating `~/.julia/environments/v1.5/Project.toml`
  [cb905087] + Modia v0.3.0
  Updating `~/.julia/environments/v1.5/Manifest.toml`
  [4fba245c] + ArrayInterface v2.3.1
  [b99e7846] + BinaryProvider v0.5.8
  [324d7699] + CategoricalArrays v0.7.7
  [d360d2e6] + ChainRulesCore v0.4.0
  [34da2185] + Compat v2.2.0
  [187b0558] + ConstructionBase v1.0.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.0
  [864edb3b] + DataStructures v0.17.9
  [e2d170a0] + DataValueInterfaces v1.0.0
  [2b5f629d] + DiffEqBase v6.12.2
  [01453d9d] + DiffEqDiffTools v1.7.0
  [ffbed154] + DocStringExtensions v0.8.1
  [069b7b12] + FunctionWrappers v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [42fd0dbc] + IterativeSolvers v0.8.1
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [1914dd2f] + MacroTools v0.5.3
  [e1d29d7a] + Missings v0.4.3
  [cb905087] + Modia v0.3.0
  [67ccffd1] + ModiaMath v0.5.2
  [46d2c3a1] + MuladdMacro v0.2.2
  [bac558e1] + OrderedCollections v1.1.0
  [d96e819e] + Parameters v0.12.0
  [69de0a69] + Parsers v0.3.10
  [2dfb63ee] + PooledArrays v0.5.3
  [3cdcf5f2] + RecipesBase v0.7.0
  [731186ca] + RecursiveArrayTools v2.0.0
  [f2c3362d] + RecursiveFactorization v0.1.0
  [189a3867] + Reexport v0.2.0
  [ae029012] + Requires v1.0.0
  [f2b01f46] + Roots v0.8.4
  [a2af1166] + SortingAlgorithms v0.3.1
  [90137ffa] + StaticArrays v0.12.1
  [c3572dad] + Sundials v3.8.1
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v0.2.11
  [a2a6695c] + TreeViews v0.3.0
  [1986cc42] + Unitful v0.18.0
  [700de1a5] + ZygoteRules v0.2.0
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [4607b0f0] + SuiteSparse 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
  Building Sundials → `~/.julia/packages/Sundials/MllUG/deps/build.log`
  Updating `/tmp/jl_AqNBDP/Project.toml`
 [no changes]
  Updating `/tmp/jl_AqNBDP/Manifest.toml`
 [no changes]
   Testing Modia
  Updating `/tmp/jl_1P5AQD/Project.toml`
 [no changes]
  Updating `/tmp/jl_1P5AQD/Manifest.toml`
 [no changes]
Running sandbox
Status `/tmp/jl_1P5AQD/Project.toml`
  [864edb3b] DataStructures v0.17.9
  [682c06a0] JSON v0.21.0
  [cb905087] Modia v0.3.0
  [67ccffd1] ModiaMath v0.5.2
  [90137ffa] StaticArrays v0.12.1
  [1986cc42] Unitful v0.18.0
  [ade2ca70] Dates 
  [37e2e46d] LinearAlgebra 
  [d6f4376e] Markdown 
  [de0858da] Printf 
  [2f01184e] SparseArrays 
  [8dfed614] Test 
 

Welcome to Modia - Dynamic Modeling and Simulation with Julia
Version 0.3.0 (2019-04-07)
Type "?Modia" for help.


 
Importing ModiaMath Version 0.5.2 (2019-07-10)
    PyPlot not available (plot commands will be ignored).
    Try to install PyPlot. See hints here:
    https://github.com/ModiaSim/ModiaMath.jl/wiki/Installing-PyPlot-in-a-robust-way.

Test match
assign = [8, 1, 2, 7, 4, 5, 3, 0]

Singular system
assign = [0, 3, 1, 0]
(invAssign, unAssignedVariables) = ([3, 0, 2], [1, 4])
(ass, unAssignedEquations) = ([0, 3, 1, 0], [2])

Test Tarjans strong connect
components = Any[Any[6], Any[7, 5, 4, 3], Any[8, 2, 1]]

Fixed-length pendulum
assign = [5, 4, 1, 2, 0, 0, 3, 0, 0]

Assigned original equations:

Test diagnostics for too many equations
Gbig = Any[[3, 5], [4, 6], [1, 7, 9], [2, 8, 9], [1, 2], [1, 10], [2, 10]]
EGbig = Any[[3, 5, 11], [4, 6, 11], [1, 7, 9, 11], [2, 8, 9, 11], [1, 2, 11], [1, 10, 11], [2, 10, 11], [1, 5, 11], [2, 6, 11], [3, 7, 11], [4, 8, 11]]
componentsBig = Any[Any[5, 10, 3, 4, 11, 2, 9, 7, 6, 8, 1]]

Test diagnostics for too many variables
Gbig = Any[[3, 5], [4, 6], [1, 7, 9], [10, 8, 9], [1, 10]]
EGbig = Any[[3, 5], [4, 6], [1, 7, 9], [10, 8, 9], [1, 10], [1, 5], [2, 6], [3, 7], [4, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]
componentsBig = Any[Any[5, 4, 9, 2, 7, 10, 6, 3, 8, 1]]

Test diagnostics for too few equations
Gbig = Any[[3, 5], [4, 6], [1, 7, 9], [2, 8, 9]]
EGbig = Any[[3, 5], [4, 6], [1, 7, 9], [2, 8, 9], [1, 5], [2, 6], [3, 7], [4, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9]]
componentsBig = Any[Any[6, 2, 8, 4, 9, 7, 3, 5, 1]]

Check consistency of equations by matching extended equation set
EG = Any[[3, 5], [4, 6], [1, 7, 9], [2, 8, 9], [1, 2], [1, 5], [2, 6], [3, 7], [4, 8]]
assign = [5, 7, 1, 9, 6, 2, 8, 4, 3]

Perform index reduction
G = Any[[3, 5], [4, 6], [1, 7, 9], [2, 8, 9], [1, 2], [1, 2, 5, 6], [3, 5, 7, 10], [4, 6, 8, 11], [1, 2, 5, 6, 10, 11]]
assign = [0, 0, 0, 0, 1, 2, 7, 4, 3, 9, 8]
A = [5, 6, 7, 8, 10, 11, 0, 0, 0, 0, 0]
B = [7, 8, 0, 0, 6, 9, 0, 0, 0]
------------------------------------------------------

vActive = Bool[0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1]
assign = [0, 5, 0, 2, 1, 6, 7, 4, 3, 9, 8]
components = Any[Any[1], Any[5], Any[6], Any[2], Any[4, 8, 9, 7, 3]]
------------------------------------------------------


All unknowns:

All equations:

Assigned equations:

Sorted equations:

Build augmented system.
AG = Any[[3, 5], [4, 6], [1, 7, 9], [2, 8, 9], [1, 2], [1, 2, 5, 6], [3, 5, 7, 10], [4, 6, 8, 11], [1, 2, 5, 6, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]]
assignAG = [5, 4, 1, 2, 6, 8, 3, 10, 11, 7, 9]
componentsAG = Any[Any[11, 3, 7, 9, 8, 2, 10, 4, 5, 6, 1]]

Assigned augmented equations:

Sorted augmented equations:

Set initial conditions on x and y. Should fail.
IG1 = Any[[3, 5], [4, 6], [1, 7, 9], [2, 8, 9], [1, 2], [1, 2, 5, 6], [3, 5, 7, 10], [4, 6, 8, 11], [1, 2, 5, 6, 10, 11], [1], [2]]
assignIG1 = [10, 5, 1, 2, 6, 8, 3, 4, 0, 7, 9]
componentsIG1 = Any[Any[10], Any[5], Any[4], Any[3], Any[7, 9, 2, 8, 6, 1], Any[11]]

Set initial conditions on x and w.
IG2 = Any[[3, 5], [4, 6], [1, 7, 9], [2, 8, 9], [1, 2], [1, 2, 5, 6], [3, 5, 7, 10], [4, 6, 8, 11], [1, 2, 5, 6, 10, 11], [1], [3]]
assignIG2 = [10, 5, 11, 2, 1, 6, 3, 8, 4, 7, 9]
componentsIG2 = Any[Any[11], Any[1], Any[10], Any[5], Any[6], Any[2], Any[7, 9, 8, 4, 3]]

Sorted IG2 equations:

Set initial conditions on w and z.
IG3 = Any[[3, 5], [4, 6], [1, 7, 9], [2, 8, 9], [1, 2], [1, 2, 5, 6], [3, 5, 7, 10], [4, 6, 8, 11], [1, 2, 5, 6, 10, 11], [3], [4]]
assignIG3 = [6, 5, 10, 11, 1, 2, 3, 8, 4, 7, 9]
componentsIG3 = Any[Any[10], Any[1], Any[11], Any[2], Any[5, 6], Any[7, 9, 8, 4, 3]]

Sorted IG3 equations:

Fixed-length pendulum

Perform index reduction

Set initial conditions on x and w.
IG = Any[[3, 5], [4, 6], [1, 7, 9], [2, 8, 9], [1, 2], [1, 2, 5, 6], [3, 5, 7, 10], [4, 6, 8, 11], [1, 2, 5, 6, 10, 11], [1], [3]]
assignIG = [10, 5, 11, 2, 1, 6, 3, 8, 4, 7, 9]
componentsIG = Any[Any[11], Any[1], Any[10], Any[5], Any[6], Any[2], Any[7, 9, 8, 4, 3]]

Exothermic Reactor Model
assign = [0, 0, 1, 7, 3, 2, 8, 6]
A = [3, 4, 7, 0, 8, 0, 0, 0]
B = [6, 0, 7, 5, 8, 0, 0, 0]
components = Any[Any[3], Any[1], Any[8], Any[6], Any[7], Any[2], Any[4], Any[5]]


----------------------


----------------------


Big tests, n = 5000

Big test: diagonal
  0.041576 seconds (76.44 k allocations: 51.765 MiB, 21.98% gc time)

Big test: band
  0.043260 seconds (108.39 k allocations: 52.149 MiB, 14.99% gc time)

Big test: full, n=1000
  1.042719 seconds (4.80 M allocations: 105.997 MiB, 11.69% gc time)

Test solve

Solve: x from: y = x
x = y

Solve: x from: y = x + z
x = y - z

Solve: x from: y = x + z + v + w
x = y - (z + v + w)

Solve: z from: y = x + z + v + w
z = (y - x) - (v + w)

Solve: v from: y = x + z + v + w
v = ((y - x) - z) - w

Solve: w from: y = x + z + v + w
w = ((y - x) - z) - v

Solve: x from: y = x - z
x = y + z

Solve: x from: y = (x - z) - w
x = (y + w) + z

Solve: x from: y = -(x, z, v, w)
x = y + (z + v + w)

Solve: v from: y = -(x, z, v, w)
v = ((x - y) - z) - w

Solve: x from: y = z - x
x = z - y

Solve: x from: y = x * z
x = y / z

Solve: x from: y = x * z * z * z
x = y / (z * z * z)

Solve: x from: y = /(x, z, w)
x = y * (z * w)

Solve: z from: y = /(x, z, w)
z = (x / y) / w

Solve: x from: y = x / z
x = y * z

Solve: z from: y = x / z
z = x / y

Solve: x from: y = x \ z
NOT SOLVED
x \ z = y


----------------------


Test differentiate

Equation: x + 5 + z = w
Differentiated: der(x) + der(z) = der(w)

Equation: der(x) + der(z) = der(w)
Differentiated: der(der(x)) + der(der(z)) = der(der(w))

Equation: +x = w
Differentiated: der(x) = der(w)

Equation: 2 + 3 = w
Differentiated: 0.0 = der(w)

Equation: -x = w
Differentiated: -(der(x)) = der(w)

Equation: (x - 5) - z = w
Differentiated: der(x) - der(z) = der(w)

Equation: 5x = w
Differentiated: 5 * der(x) = der(w)

Equation: x * 5 * z = w
Differentiated: der(x) * 5 * z + x * 5 * der(z) = der(w)

Equation: 4 * 5 * 6 = w
Differentiated: 0.0 = der(w)

Equation: y = x / y
Differentiated: der(y) = der(x) / y + (x / y ^ 2) * der(y)

Equation: y = x / 5
Differentiated: der(y) = der(x) / 5

Equation: y = 5 / y
Differentiated: der(y) = (5 / y ^ 2) * der(y)

Equation: y = [1, x]
Differentiated: der(y) = [0.0, der(x)]

Equation: y = [2x 3x; 4x 5x]
Differentiated: der(y) = [2 * der(x) 3 * der(x); 4 * der(x) 5 * der(x)]

Equation: y = [2x 3x; 4x 5x] * [1, x]
Differentiated: der(y) = [2 * der(x) 3 * der(x); 4 * der(x) 5 * der(x)] * [1, x] + [2x 3x; 4x 5x] * [0.0, der(x)]

Equation: y = transpose(B) + B´
Differentiated: der(y) = transpose(der(B)) + der(B´)

Equation: y = x[5, 6]
Differentiated: der(y) = (der(x))[5, 6]

Equation: y = x[5:7]
Differentiated: der(y) = (der(x))[5:7]

Equation: y = sin(x)
Differentiated: der(y) = cos(x) * der(x)

Equation: y = cos(x)
Differentiated: der(y) = -(sin(x)) * der(x)

Equation: y = tan(x)
Differentiated: der(y) = (1 / cos(x) ^ 2) * der(x)

Equation: y = exp(x)
Differentiated: der(y) = exp(x) * der(x)

Equation: y = x ^ y
Differentiated: der(y) = y * x ^ (y - 1) * der(x) + x ^ y * log(x) * der(y)

Equation: y = log(x)
Differentiated: der(y) = (1 / x) * der(x)

Equation: y = asin(x)
Differentiated: der(y) = (1 / sqrt(1 - x ^ 2)) * der(x)

Equation: y = acos(x)
Differentiated: der(y) = (-1 / sqrt(1 - x ^ 2)) * der(x)

Equation: y = atan(x)
Differentiated: der(y) = (1 / (1 + x ^ 2)) * der(x)

Equation: y = f(x, 5, z)
Derivative function f_der_1 not found.
Derivative function f_der_3 not found.
Differentiated: der(y) = f_der_1(x, 5, z) * der(x) + f_der_3(x, 5, z) * der(z)

Equation: y = f(x, 5, g(z))
Derivative function f_der_1 not found.
Derivative function g_der_1 not found.
Derivative function f_der_3 not found.
Differentiated: der(y) = f_der_1(x, 5, g(z)) * der(x) + f_der_3(x, 5, g(z)) * (g_der_1(z) * der(z))

Equation: y = if true
        x
    else
        y
    end
Differentiated: der(y) = if true
        der(x)
    else
        der(y)
    end

Equation: y = time
Differentiated: der(y) = 1.0

Equation: y = a * x
Differentiated: der(y) = a * der(x)


----------------------



... Test two coupled inertias (all unknowns can be solved for)

  Variables of _x vector (length=2):
     _x[1]: J1_phi
     _x[2]: der(J1_phi)      # = der(_x[1])

  Variables of _der_x vector (length=2):
     _der_x[1]: ---      # = _x[2] = der(J1_phi)
     _der_x[2]: der2(J1_phi)

  Sorted equations (length(_r) = 2, nc = 0):
     _r[1]   = _der_x[1] - _x[2]
     J2_phi   = < solved from eq.5 >
     der(J2_phi)   = < solved from eq.7 = der(eq.5) >
     J1_w   = < solved from eq.1 >
     J2_w   = < solved from eq.3 >
     der2(J2_phi)   = < solved from eq.10 = der2(eq.5) >
     der(J1_w)   = < solved from eq.8 = der(eq.1) >
     der(J2_w)   = < solved from eq.9 = der(eq.3) >
     J2_tau   = < solved from eq.4 >
     J1_tau   = < solved from eq.6 >
     _r[2]   = < residue of eq.2 >


... Test two coupled inertias (only a subset of unknowns can be solved for)

  Variables of _x vector (length=2):
     _x[1]: J2_phi
     _x[2]: der(J2_phi)      # = der(_x[1])

  Variables of _der_x vector (length=2):
     _der_x[1]: ---      # = _x[2] = der(J2_phi)
     _der_x[2]: der2(J2_phi)

  Sorted equations (length(_r) = 2, nc = 0):
     _r[1]   = _der_x[1] - _x[2]
     J1_phi   = < solved from eq.5 >
     der(J1_phi)   = < solved from eq.7 = der(eq.5) >
     J1_w   = < solved from eq.1 >
     J2_w   = < solved from eq.3 >
     der2(J1_phi)   = < solved from eq.10 = der2(eq.5) >
     der(J1_w)   = < solved from eq.8 = der(eq.1) >
     der(J2_w)   = < solved from eq.9 = der(eq.3) >
     J2_tau   = < solved from eq.4 >
     J1_tau   = < solved from eq.6 >
     _r[2]   = < residue of eq.2 >


... Test two coupled inertias (no unknowns can be solved for)

  Variables of _x vector (length=9):
     _x[1]: J1_phi
     _x[2]: J2_phi
     _x[3]: der(J1_phi)      # = der(_x[1])
     _x[4]: der(J2_phi)      # = der(_x[2])
     _x[5]: J2_w
     _x[6]: J1_w
     _x[7]: ---      # integral of lambda variable
     _x[8]: ---      # integral of lambda variable
     _x[9]: ---      # integral of mue variable

  Variables of _der_x vector (length=9):
     _der_x[1]: ---      # = _x[3] = der(J1_phi)
     _der_x[2]: ---      # = _x[4] = der(J2_phi)
     _der_x[3]: der2(J1_phi)
     _der_x[4]: der2(J2_phi)
     _der_x[5]: der(J2_w)
     _der_x[6]: der(J1_w)
     _der_x[7]: J2_tau     # lambda variable
     _der_x[8]: J1_tau     # lambda variable
     _der_x[9]: ---      # mue variable associated with equation eq.7 = der(eq.5)

  Sorted equations (length(_r) = 9, nc = 4):
     _r[1]   = _der_x[1] - _x[3]
     _r[2]   = _der_x[2] - _x[4]
     _r[6]   = < residue of eq.5 >
     _r[7]   = < residue of eq.1 >
     _r[9]   = < residue of eq.7 = der(eq.5) >
     _r[8]   = < residue of eq.3 >
     _r[3]   = < residue of eq.4 >
     _r[4]   = < residue of eq.6 >
     _r[5]   = < residue of eq.2 >


... Test simple sliding mass model with Tearing

  Variables of _x vector (length=3):
     _x[1]: s
     _x[2]: der(s)      # = der(_x[1])
     _x[3]: sf

  Variables of _der_x vector (length=3):
     _der_x[1]: ---      # = _x[2] = der(s)
     _der_x[2]: der2(s)
     _der_x[3]: der(sf)

  Sorted equations (length(_r) = 3, nc = 0):
     _r[1]   = _der_x[1] - _x[2]
     r   = < solved from eq.1 >
     der(r)   = < solved from eq.6 = der(eq.1) >
     v   = < solved from eq.2 >
     der2(r)   = < solved from eq.7 = der2(eq.1) >
     der(v)   = < solved from eq.8 = der(eq.2) >
     u   = < solved from eq.5 >
     _r[2]   = < residue of eq.9 >
     f   = < solved from eq.3 >
     _r[3]   = < residue of eq.4 >


... Test Multi-Index DAE without tearing

  Variables of _x vector (length=21):
     _x[1]: x7
     _x[2]: x6
     _x[3]: der(x7)      # = der(_x[1])
     _x[4]: der(x6)      # = der(_x[2])
     _x[5]: der2(x7)      # = der(_x[3])
     _x[6]: der2(x6)      # = der(_x[4])
     _x[7]: x1
     _x[8]: x2
     _x[9]: x3
     _x[10]: der(x1)      # = der(_x[7])
     _x[11]: der(x2)      # = der(_x[8])
     _x[12]: der(x3)      # = der(_x[9])
     _x[13]: x4
     _x[14]: x8      # algebraic variable
     _x[15]: ---      # integral of lambda variable
     _x[16]: ---      # integral of mue variable
     _x[17]: ---      # integral of mue variable
     _x[18]: ---      # integral of mue variable
     _x[19]: ---      # integral of mue variable
     _x[20]: ---      # integral of mue variable
     _x[21]: ---      # integral of mue variable

  Variables of _der_x vector (length=21):
     _der_x[1]: ---      # = _x[3] = der(x7)
     _der_x[2]: ---      # = _x[4] = der(x6)
     _der_x[3]: ---      # = _x[5] = der2(x7)
     _der_x[4]: ---      # = _x[6] = der2(x6)
     _der_x[5]: der3(x7)
     _der_x[6]: der3(x6)
     _der_x[7]: ---      # = _x[10] = der(x1)
     _der_x[8]: ---      # = _x[11] = der(x2)
     _der_x[9]: ---      # = _x[12] = der(x3)
     _der_x[10]: der2(x1)
     _der_x[11]: der2(x2)
     _der_x[12]: der2(x3)
     _der_x[13]: der(x4)
     _der_x[14]: ---      # derivative of algebraic variable
     _der_x[15]: x5     # lambda variable
     _der_x[16]: ---      # mue variable associated with equation eq.14 = der(eq.6)
     _der_x[17]: ---      # mue variable associated with equation eq.15 = der(eq.7)
     _der_x[18]: ---      # mue variable associated with equation eq.16 = der2(eq.6)
     _der_x[19]: ---      # mue variable associated with equation eq.17 = der2(eq.7)
     _der_x[20]: ---      # mue variable associated with equation eq.9 = der(eq.1)
     _der_x[21]: ---      # mue variable associated with equation eq.11 = der(eq.2)

  Sorted equations (length(_r) = 21, nc = 12):
     _r[1]   = _der_x[1] - _x[3]
     _r[2]   = _der_x[2] - _x[4]
     _r[3]   = _der_x[3] - _x[5]
     _r[4]   = _der_x[4] - _x[6]
     _r[5]   = _der_x[7] - _x[10]
     _r[6]   = _der_x[8] - _x[11]
     _r[7]   = _der_x[9] - _x[12]
     _r[11]   = < residue of eq.6 >
     _r[12]   = < residue of eq.7 >
     _r[16]   = < residue of eq.14 = der(eq.6) >
     _r[17]   = < residue of eq.15 = der(eq.7) >
     _r[18]   = < residue of eq.16 = der2(eq.6) >
     _r[19]   = < residue of eq.17 = der2(eq.7) >
     _r[13]   = < residue of eq.1 >
     _r[14]   = < residue of eq.2 >
     _r[20]   = < residue of eq.9 = der(eq.1) >
     _r[21]   = < residue of eq.11 = der(eq.2) >
     _r[15]   = < residue of eq.3 >
     _r[10]   = < residue of eq.8 >
     _r[8]   = < residue of eq.4 >
     _r[9]   = < residue of eq.5 >


... Test Multi-Index DAE WITH tearing

  Variables of _x vector (length=8):
     _x[1]: x7
     _x[2]: der(x7)      # = der(_x[1])
     _x[3]: der2(x7)      # = der(_x[2])
     _x[4]: x2
     _x[5]: der(x2)      # = der(_x[4])
     _x[6]: x8      # algebraic variable
     _x[7]: ---      # integral of mue variable
     _x[8]: ---      # integral of mue variable

  Variables of _der_x vector (length=8):
     _der_x[1]: ---      # = _x[2] = der(x7)
     _der_x[2]: ---      # = _x[3] = der2(x7)
     _der_x[3]: der3(x7)
     _der_x[4]: ---      # = _x[5] = der(x2)
     _der_x[5]: der2(x2)
     _der_x[6]: ---      # derivative of algebraic variable
     _der_x[7]: ---      # mue variable associated with equation eq.15 = der(eq.7)
     _der_x[8]: ---      # mue variable associated with equation eq.17 = der2(eq.7)

  Sorted equations (length(_r) = 8, nc = 4):
     _r[1]   = _der_x[1] - _x[2]
     _r[2]   = _der_x[2] - _x[3]
     _r[3]   = _der_x[4] - _x[5]
     x6   = < solved from eq.6 >
     _r[6]   = < residue of eq.7 >
     der(x6)   = < solved from eq.14 = der(eq.6) >
     _r[7]   = < residue of eq.15 = der(eq.7) >
     der2(x6)   = < solved from eq.16 = der2(eq.6) >
     _r[8]   = < residue of eq.17 = der2(eq.7) >
     x1   = < solved from eq.1 >
     x3   = < solved from eq.2 >
     der(x1)   = < solved from eq.9 = der(eq.1) >
     der(x3)   = < solved from eq.11 = der(eq.2) >
     x4   = < solved from eq.3 >
     der3(x6)   = < solved from eq.18 = der3(eq.6) >
     der2(x1)   = < solved from eq.10 = der2(eq.1) >
     der2(x3)   = < solved from eq.12 = der2(eq.2) >
     der(x4)   = < solved from eq.13 = der(eq.3) >
     x5   = < solved from eq.5 >
     _r[5]   = < residue of eq.8 >
     _r[4]   = < residue of eq.4 >

TestVariableTypes: Demonstrating the handling of various variable types

Simulating model: TestVariableTypes1
Number of equations: 9
Number of variables: 11
Number of continuous states: 2
final i = 1
Simulation OK

(result["f"])[end] = 1.0
(result["b"])[end] = true
(result["i"])[end] = 1
(result["s"])[end] = "asdf"
(result["c"])[end] = 2.0 + 3.0im
(result["re"])[end] = 2.0
(result["im"])[end] = 3.0

Simulating model: TestArrays1
Number of equations: 5
Number of variables: 7
Number of continuous states: 2
final i = [1, 2]
Simulation OK

keys(result) = AbstractString["f", "c1", "time", "der(f)", "der(c1)", "b", "s", "i"]
(result["f"])[end, :] = [2.999999999999999, 5.999999999999998, 8.999999999999996]
(result["der(f)"])[end, :] = [2.0, 4.0, 6.0]
(result["b"])[end] = Bool[0, 1]
(result["i"])[end] = [1, 2]
(result["s"])[end] = ["asdf", "qwerty"]
(result["c1"])[end, :] = [2.999999999999999, 5.999999999999998]
(result["der(c1)"])[end, :] = [2.0, 4.0]

storeEliminated = false

Simulating model: TestVariableTypes2
Number of equations: 10
Number of variables: 10
Number of continuous states: 0
Variable(T=Array{Float64,1}; args...) does not work with storeEliminated=true!
logTranslation = true
removeSingularities = false
storeEliminated = false
Log file: /home/pkgeval/ModiaResults/Test.txt

Simulating model: Test
Number of equations: 9
Number of variables: 10
Number of continuous states: 1
 Time=0.0:  size of u: (10, 10)
 Time=0.0:  size of u: (10, 10)
 Time=0.0:  size of u: (10, 10)
 Time=0.0:  size of u: (10, 10)
 Time=0.0:  size of u: (10, 10)
 Time=0.0:  size of u: (10, 10)
 Time=5.005005005005005e-6:  size of u: (10, 10)
 Time=5.005005005005005e-6:  size of u: (10, 10)
 Time=1.991991991991992:  size of u: ()
 Time=1.996996996996997:  size of u: ()
 Time=2.002002002002002:  size of u: ()
 Time=2.007007007007007:  size of u: ()
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.

Simulating model: Resistor
Number of equations: 6
Number of variables: 6
Number of continuous states: 0

Simulating model: ParallelResistors
Number of equations: 12
Number of variables: 12
Number of continuous states: 0

Simulating model: ParallelCapacitors
Number of equations: 15
Number of variables: 16
Number of continuous states: 1
Number of non states: 2
TestFilter: Tests various features of the symbolic handling.

Simulating model: LPfilter
Number of equations: 20
Number of variables: 21
Number of continuous states: 1
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
logTranslation = true
storeEliminated = false
logSimulation = true
Log file: /home/pkgeval/ModiaResults/LPfilter.txt

Simulating model: LPfilter
Number of equations: 20
Number of variables: 21
Number of continuous states: 1
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: LPfilter
      Initialization at time = 0.0 s
        initial values:
          │ x │ name   │ start   │ fixed │ nominal │
          ├───┼────────┼─────────┼───────┼─────────┤
          │ 1 │ C.v    │ 0.0     │ 1     │ 1.0     │

        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
      Simulation started

      Simulation is terminated at time = 2.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_NoSpecialStructure
        cpuTime        = 0.51 s (init: 0.51 s, integration: 0.0026 s)
        startTime      = 0.0 s
        stopTime       = 2.0 s
        interval       = 0.002002002002002002 s
        tolerance      = 0.0001
        nEquations     = 1
        nResults       = 1000
        nSteps         = 58
        nResidues      = 92 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 22
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 1
        h0             = 1.3e-07 s
        hMin           = 1.3e-07 s
        hMax           = 0.24 s
        orderMax       = 5
        sparseSolver   = false
final C.v = 9.996843043929996
Simulation OK

aliasElimination = true

Simulating model: LPfilter
Number of equations: 12
Number of variables: 13
Number of continuous states: 1
logName = "LPfilter aliasElimination"
aliasElimination = true

Simulating model: LPfilter
Number of equations: 12
Number of variables: 13
Number of continuous states: 1
final C.v = 9.996843043929996
Simulation OK

logName = "LPfilter aliasElimination removeSingularities"
aliasElimination = true
removeSingularities = true

Simulating model: LPfilter
Number of equations: 12
Number of variables: 13
Number of continuous states: 1
final C.v = 9.996843043929996
Simulation OK

logName = "LPfilter aliasElimination removeSingularities"
aliasElimination = true
removeSingularities = true

Simulating model: LPfilter
Number of equations: 12
Number of variables: 13
Number of continuous states: 1
removeSingularities = true

Simulating model: LPfilterWithoutGround
Number of equations: 18
Number of variables: 19
Number of continuous states: 1
final C.v = 9.996843043929996
Simulation OK


Simulating model: LPfilterAndSineSource
Number of equations: 20
Number of variables: 22
Number of continuous states: 2
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
removeSingularities = true

Simulating model: HPfilter
Number of equations: 20
Number of variables: 21
Number of continuous states: 1
final C.v = 7.16540372163548
Simulation OK

removeSingularities = true

Simulating model: NewFilter
Number of equations: 20
Number of variables: 21
Number of continuous states: 1
final C.v = 9.999596486913553
Simulation OK

removeSingularities = true

Simulating model: CondFilter
Number of equations: 20
Number of variables: 21
Number of continuous states: 1
final C.v = 3.6787780967777772
Simulation OK

removeSingularities = true

Simulating model: CondFilter2
Number of equations: 20
Number of variables: 21
Number of continuous states: 1
final C.v = 3.6787780967777772
Simulation OK

removeSingularities = true

Simulating model: FilterModels
Number of equations: 20
Number of variables: 21
Number of continuous states: 1
final C.v = 3.6787780967777772
Simulation OK


Simulating model: FilterComponents
Number of equations: 20
Number of variables: 21
Number of continuous states: 1
final C.v = 3.6787780967777772
Simulation OK


Simulating model: TenCoupledFilters
Number of equations: 188
Number of variables: 198
Number of continuous states: 10
final F10.C.v = 1.232726022885834e-5
Simulation OK

aliasElimination = true

Simulating model: TenCoupledFilters
Number of equations: 115
Number of variables: 125
Number of continuous states: 10
final F10.C.v = 1.232726022885834e-5
Simulation OK


TestArrayOfComponents: Demonstrating the handling of arrays of components

Simulating model: TwoFilters
Number of equations: 40
Number of variables: 42
Number of continuous states: 2
final F[2].C.v = 3.2967996078157973
Simulation OK


Simulating model: ManyFilters
Number of equations: 200
Number of variables: 210
Number of continuous states: 10
final F[1].C.v = 9.816758325302478
Simulation OK


Simulating model: ManyDifferentFilters
Number of equations: 200
Number of variables: 210
Number of continuous states: 10
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.

Simulating model: AdvancedLPfilter
Number of equations: 20
Number of variables: 21
Number of continuous states: 1

Rectifier: Demonstrating conditional components
logTranslation = true
Log file: /home/pkgeval/ModiaResults/ConditionalLoad.txt

Simulating model: ConditionalLoad
Number of equations: 39
Number of variables: 41
Number of continuous states: 2
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.

Simulating model: NoExtraLoad
Number of equations: 33
Number of variables: 35
Number of continuous states: 2
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.

Demonstrating conditional equations
logTranslation = true
removeSingularities = false
Log file: /home/pkgeval/ModiaResults/Conditional.txt

Simulating model: Conditional
Conditional equation:
if !steadyState
    var"der(x)" + 2x = u
else
    0 + 2x = u
end
condition = true
Conditional equation:
if !cond
    y = 1
else
    y = 2
end
condition = true
Number of equations: 3
Number of variables: 4
Number of continuous states: 1
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
logTranslation = true
removeSingularities = false
Log file: /home/pkgeval/ModiaResults/ConditionalInstance1.txt

Simulating model: ConditionalInstance1
Conditional equation:
if !steadyState
    var"der(x)" + 2x = u
else
    0 + 2x = u
end
condition = false
Conditional equation:
if !cond
    y = 1
else
    y = 2
end
condition = false
Number of equations: 3
Number of variables: 3
Number of continuous states: 0
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
logTranslation = true
removeSingularities = false
Log file: /home/pkgeval/ModiaResults/ConditionalInstance2.txt

Simulating model: ConditionalInstance2
Conditional equation:
if !steadyState
    var"der(x)" + 2x = u
else
    0 + 2x = u
end
condition = true
Conditional equation:
if !cond
    y = 1
else
    y = 2
end
condition = true
Number of equations: 3
Number of variables: 4
Number of continuous states: 1
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
logTranslation = false
removeSingularities = false

Simulating model: Conditional2
Conditional equation:
if !steadyState
    var"der(x)" + 2x = u
else
    0 + 2x = u
end
condition = true
Conditional equation:
if cond
    y = 1
end
condition = false
Number of equations: 2
Number of variables: 3
Number of continuous states: 1
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.

Simulating model: SpatialDiscretization
Number of equations: 1
Number of variables: 2
Number of continuous states: 1
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
logTranslation = true
storeEliminated = false
Log file: /home/pkgeval/ModiaResults/SpatialDiscretization2.txt

Simulating model: SpatialDiscretization2
Number of equations: 3
Number of variables: 4
Number of continuous states: 1
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
WARNING: redefining constant n
logTranslation = true
storeEliminated = false
Log file: /home/pkgeval/ModiaResults/SpatialDiscretization4.txt

Simulating model: SpatialDiscretization4
Number of equations: 3
Number of variables: 4
Number of continuous states: 1
  1.040994 seconds (565.60 k allocations: 47.293 MiB, 3.54% gc time)
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.

Demonstrating merging modifiers
logTranslation = true
removeSingularities = false
Log file: /home/pkgeval/ModiaResults/M.txt

Simulating model: M
Number of equations: 1
Number of variables: 2
Number of continuous states: 1
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
logTranslation = true
removeSingularities = false
Log file: /home/pkgeval/ModiaResults/MInstance.txt

Simulating model: MInstance
Number of equations: 1
Number of variables: 2
Number of continuous states: 1
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
logTranslation = true
removeSingularities = false
Log file: /home/pkgeval/ModiaResults/MInstance2.txt

Simulating model: MInstance2
Number of equations: 1
Number of variables: 2
Number of continuous states: 1
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
WARNING: replacing module TestTearing.
TestTearing: Tests tearing algorithm of the symbolic handling.
logTranslation = true
removeSingularities = true
tearing = true
logSimulation = true
Log file: /home/pkgeval/ModiaResults/Tearing1.txt

Simulating model: Tearing1
Number of equations: 3
Number of variables: 4
Number of continuous states: 1
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: Tearing1
      Initialization at time = 0.0 s
        initial values:
          │ x │ name   │ start   │ fixed │ nominal │
          ├───┼────────┼─────────┼───────┼─────────┤
          │ 1 │ x1     │ 0.0     │ 0     │ 1.0     │
          │ 2 │ x2     │ 0.0     │ 0     │ 1.0     │
          │ 3 │ x3     │ 1.0     │ 1     │ 1.0     │

        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
            x1 = 0.0 changed to -0.07042253512258778
            x2 = 0.0 changed to 0.3802816900817252
      Simulation started

      Simulation is terminated at time = 1.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_NoSpecialStructure
        cpuTime        = 0.039 s (init: 0.036 s, integration: 0.0027 s)
        startTime      = 0.0 s
        stopTime       = 1.0 s
        interval       = 0.001001001001001001 s
        tolerance      = 0.0001
        nEquations     = 3
        nResults       = 1000
        nSteps         = 52
        nResidues      = 168 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 35
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 0
        h0             = 9.7e-13 s
        hMin           = 9.7e-13 s
        hMax           = 0.11 s
        orderMax       = 3
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
logTranslation = true
removeSingularities = true
tearing = true
logSimulation = true
Log file: /home/pkgeval/ModiaResults/Tearing1B.txt

Simulating model: Tearing1B
Number of equations: 3
Number of variables: 4
Number of continuous states: 1
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: Tearing1B
      Initialization at time = 0.0 s
        initial values:
          │ x │ name   │ start   │ fixed │ nominal │
          ├───┼────────┼─────────┼───────┼─────────┤
          │ 1 │ x1     │ 0.0     │ 0     │ 1.0     │
          │ 2 │ x3     │ 1.0     │ 1     │ 1.0     │

        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
            x1 = 0.0 changed to 0.2631578952872082
      Simulation started

      Simulation is terminated at time = 1.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_NoSpecialStructure
        cpuTime        = 0.038 s (init: 0.034 s, integration: 0.0034 s)
        startTime      = 0.0 s
        stopTime       = 1.0 s
        interval       = 0.001001001001001001 s
        tolerance      = 0.0001
        nEquations     = 2
        nResults       = 1000
        nSteps         = 54
        nResidues      = 138 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 36
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 1
        h0             = 9.8e-13 s
        hMin           = 9.8e-13 s
        hMax           = 0.095 s
        orderMax       = 4
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
logTranslation = true
removeSingularities = true
tearing = true
logSimulation = true
Log file: /home/pkgeval/ModiaResults/Tearing2.txt

Simulating model: Tearing2
Number of equations: 3
Number of variables: 4
Number of continuous states: 1
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: Tearing2
      Initialization at time = 0.0 s
        initial values:
          │ x │ name   │ start   │ fixed │ nominal │
          ├───┼────────┼─────────┼───────┼─────────┤
          │ 1 │ x1     │ 0.0     │ 0     │ 1.0     │
          │ 2 │ x3     │ 1.0     │ 1     │ 1.0     │

        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
            x1 = 0.0 changed to -2.3941317512897893
      Simulation started

      Simulation is terminated at time = 0.3 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_NoSpecialStructure
        cpuTime        = 0.039 s (init: 0.036 s, integration: 0.003 s)
        startTime      = 0.0 s
        stopTime       = 0.3 s
        interval       = 0.0003003003003003003 s
        tolerance      = 0.0001
        nEquations     = 2
        nResults       = 1000
        nSteps         = 46
        nResidues      = 122 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 34
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 0
        h0             = 7.4e-13 s
        hMin           = 7.4e-13 s
        hMax           = 0.051 s
        orderMax       = 3
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
logTranslation = true
removeSingularities = true
tearing = true
logSimulation = true
Log file: /home/pkgeval/ModiaResults/Tearing3.txt

Simulating model: Tearing3
Number of equations: 4
Number of variables: 5
Number of continuous states: 1
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: Tearing3
      Initialization at time = 0.0 s
        initial values:
          │ x │ name   │ start   │ fixed │ nominal │
          ├───┼────────┼─────────┼───────┼─────────┤
          │ 1 │ x3     │ 0.0     │ 0     │ 1.0     │
          │ 2 │ x4     │ 1.0     │ 1     │ 1.0     │

        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
            x3 = 0.0 changed to 0.2933845009458145
      Simulation started

      Simulation is terminated at time = 0.3 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_NoSpecialStructure
        cpuTime        = 0.039 s (init: 0.035 s, integration: 0.004 s)
        startTime      = 0.0 s
        stopTime       = 0.3 s
        interval       = 0.0003003003003003003 s
        tolerance      = 0.0001
        nEquations     = 2
        nResults       = 1000
        nSteps         = 45
        nResidues      = 129 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 36
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 0
        h0             = 9.5e-13 s
        hMin           = 9.5e-13 s
        hMax           = 0.065 s
        orderMax       = 2
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
logTranslation = true
removeSingularities = true
tearing = true
logSimulation = true
Log file: /home/pkgeval/ModiaResults/Tearing4.txt

Simulating model: Tearing4
Number of equations: 5
Number of variables: 6
Number of continuous states: 1
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: Tearing4
      Initialization at time = 0.0 s
        initial values:
          │ x │ name   │ start   │ fixed │ nominal │
          ├───┼────────┼─────────┼───────┼─────────┤
          │ 1 │ x3     │ 0.0     │ 0     │ 1.0     │
          │ 2 │ x4     │ 0.0     │ 0     │ 1.0     │
          │ 3 │ x5     │ 1.0     │ 1     │ 1.0     │

        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
            x3 = 0.0 changed to 0.20486182844879683
            x4 = 0.0 changed to 1.4702013267955072
      Simulation started

      Simulation is terminated at time = 0.3 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_NoSpecialStructure
        cpuTime        = 0.054 s (init: 0.049 s, integration: 0.0053 s)
        startTime      = 0.0 s
        stopTime       = 0.3 s
        interval       = 0.0003003003003003003 s
        tolerance      = 0.0001
        nEquations     = 3
        nResults       = 1000
        nSteps         = 47
        nResidues      = 164 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 36
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 0
        h0             = 7.5e-13 s
        hMin           = 7.5e-13 s
        hMax           = 0.046 s
        orderMax       = 2
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
logTranslation = true
removeSingularities = true
tearing = true
logSimulation = true
Log file: /home/pkgeval/ModiaResults/TearingCombined.txt

Simulating model: TearingCombined
Number of equations: 14
Number of variables: 18
Number of continuous states: 4
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: TearingCombined
      Initialization at time = 0.0 s
        initial values:
          │ x  │ name   │ start   │ fixed │ nominal │
          ├────┼────────┼─────────┼───────┼─────────┤
          │ 1  │ x1     │ 0.0     │ 0     │ 1.0     │
          │ 2  │ x2     │ 0.0     │ 0     │ 1.0     │
          │ 3  │ x3     │ 1.0     │ 1     │ 1.0     │
          │ 4  │ x11    │ 0.0     │ 0     │ 1.0     │
          │ 5  │ x13    │ 1.0     │ 1     │ 1.0     │
          │ 6  │ x21    │ 0.0     │ 0     │ 1.0     │
          │ 7  │ x23    │ 1.0     │ 1     │ 1.0     │
          │ 8  │ x31    │ 0.0     │ 0     │ 1.0     │
          │ 9  │ x33    │ 1.0     │ 1     │ 1.0     │
          │ 10 │ x35    │ 0.0     │ 0     │ 1.0     │

        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
            x1 = 0.0 changed to -0.0704225352112676
            x2 = 0.0 changed to 0.38028169014084506
            x11 = 0.0 changed to 0.26315789473684215
            x21 = 0.0 changed to 0.523777476412269
            x31 = 0.0 changed to 0.523777476412269
            x35 = 0.0 changed to 0.523777476412269
      Simulation started

      Simulation is terminated at time = 1.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_NoSpecialStructure
        cpuTime        = 0.099 s (init: 0.091 s, integration: 0.0084 s)
        startTime      = 0.0 s
        stopTime       = 1.0 s
        interval       = 0.001001001001001001 s
        tolerance      = 0.0001
        nEquations     = 10
        nResults       = 1000
        nSteps         = 53
        nResidues      = 415 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 35
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 0
        h0             = 8.5e-13 s
        hMin           = 8.5e-13 s
        hMax           = 0.11 s
        orderMax       = 3
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
logTranslation = true
removeSingularities = true
tearing = true
logSimulation = true
Log file: /home/pkgeval/ModiaResults/Tearing5.txt

Simulating model: Tearing5
Number of equations: 4
Number of variables: 5
Number of continuous states: 1
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: Tearing5
      Initialization at time = 0.0 s
        initial values:
          │ x │ name   │ start   │ fixed │ nominal │
          ├───┼────────┼─────────┼───────┼─────────┤
          │ 1 │ x2     │ 0.0     │ 0     │ 1.0     │
          │ 2 │ x3     │ 0.0     │ 0     │ 1.0     │
          │ 3 │ x4     │ 1.0     │ 1     │ 1.0     │

        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
            x2 = 0.0 changed to -0.014925372682878572
            x3 = 0.0 changed to -1.044776118048636
      Simulation started

      Simulation is terminated at time = 0.3 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_NoSpecialStructure
        cpuTime        = 0.039 s (init: 0.036 s, integration: 0.0029 s)
        startTime      = 0.0 s
        stopTime       = 0.3 s
        interval       = 0.0003003003003003003 s
        tolerance      = 0.0001
        nEquations     = 3
        nResults       = 1000
        nSteps         = 45
        nResidues      = 162 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 36
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 0
        h0             = 9.4e-13 s
        hMin           = 9.4e-13 s
        hMax           = 0.065 s
        orderMax       = 2
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
logTranslation = true
removeSingularities = true
tearing = true
logSimulation = true
Log file: /home/pkgeval/ModiaResults/Tearing6.txt

Simulating model: Tearing6
Number of equations: 6
Number of variables: 7
Number of continuous states: 1
Number of non states: 2
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: Tearing6
      Initialization at time = 0.0 s
        initial values:
          │ x │ name   │ start   │ fixed │ nominal │
          ├───┼────────┼─────────┼───────┼─────────┤
          │ 1 │ u1     │ 1.0     │ 1     │ 1.0     │
          │ 2 │ der_u2 │ 0.0     │ 0     │ 1.0     │

        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
      Simulation started

      Simulation is terminated at time = 1.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_NoSpecialStructure
        cpuTime        = 0.037 s (init: 0.035 s, integration: 0.0024 s)
        startTime      = 0.0 s
        stopTime       = 1.0 s
        interval       = 0.001001001001001001 s
        tolerance      = 0.0001
        nEquations     = 2
        nResults       = 1000
        nSteps         = 21
        nResidues      = 59 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 19
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 0
        h0             = 1e-06 s
        hMin           = 1e-06 s
        hMax           = 0.48 s
        orderMax       = 2
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
logTranslation = true
removeSingularities = false
tearing = true
automaticStateSelection = true
logSimulation = true
Log file: /home/pkgeval/ModiaResults/TwoConnectedInertias.txt

Simulating model: TwoConnectedInertias
startValues = Any[1.0, 1.0, 0.0, 0.0]
fixedFlags = Any[false, false, false, false]
names = Any[:w1, :w2, :tau, :t, "der(t)", "der(w1)", "der(w2)"]
Avar = [6, 7, 0, 5, 0, 0, 0]
stateIndices = [2, 4]
Gsolvable = Any[Any[5], Any[3], Any[3], Any[1, 2], Any[]]
stateIndices = [2, 4]
stateNames = ["w2", "t"]
realStates = Any[this.t, this.w1, this.w2]
Number of equations: 5
Number of variables: 7
Number of continuous states: 2
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: TwoConnectedInertias
      Initialization at time = 0.0 s
        initial values:
          │ x │ name   │ start   │ fixed │ nominal │
          ├───┼────────┼─────────┼───────┼─────────┤
          │ 1 │ w2     │ 1.0     │ 1     │ 1.0     │
          │ 2 │ t      │ 0.0     │ 1     │ 1.0     │
          │ 3 │ der_w1 │ 0.0     │ 0     │ 1.0     │

        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
      Simulation started

      Simulation is terminated at time = 3.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_NoSpecialStructure
        cpuTime        = 0.034 s (init: 0.032 s, integration: 0.0019 s)
        startTime      = 0.0 s
        stopTime       = 3.0 s
        interval       = 0.003003003003003003 s
        tolerance      = 0.0001
        nEquations     = 3
        nResults       = 1000
        nSteps         = 37
        nResidues      = 96 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 16
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 2
        h0             = 3e-06 s
        hMin           = 3e-06 s
        hMax           = 0.27 s
        orderMax       = 4
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
logTranslation = true
removeSingularities = true
tearing = true
automaticStateSelection = true
logSimulation = true
Log file: /home/pkgeval/ModiaResults/TwoInertiasConnectedViaIdealGear.txt

Simulating model: TwoInertiasConnectedViaIdealGear
startValues = Any[1.0, 1.0, 0.0, 0.0]
fixedFlags = Any[false, false, false, false]
names = Any[:w1, :w2, :tau, :t, "der(t)", "der(w1)", "der(w2)"]
Avar = [6, 7, 0, 5, 0, 0, 0]
stateIndices = [2, 4]
Gsolvable = [[5], [], [3], [1], []]
stateIndices = [2, 4]
stateNames = ["w2", "t"]
realStates = Any[this.t, this.w1, this.w2]
Number of equations: 5
Number of variables: 7
Number of continuous states: 2
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: TwoInertiasConnectedViaIdealGear
      Initialization at time = 0.0 s
        initial values:
          │ x │ name   │ start   │ fixed │ nominal │
          ├───┼────────┼─────────┼───────┼─────────┤
          │ 1 │ w2     │ 1.0     │ 1     │ 1.0     │
          │ 2 │ t      │ 0.0     │ 1     │ 1.0     │
          │ 3 │ der_w1 │ 0.0     │ 0     │ 1.0     │

        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
      Simulation started

      Simulation is terminated at time = 3.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_NoSpecialStructure
        cpuTime        = 0.028 s (init: 0.027 s, integration: 0.0013 s)
        startTime      = 0.0 s
        stopTime       = 3.0 s
        interval       = 0.003003003003003003 s
        tolerance      = 0.0001
        nEquations     = 3
        nResults       = 1000
        nSteps         = 36
        nResidues      = 101 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 17
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 3
        h0             = 3e-06 s
        hMin           = 3e-06 s
        hMax           = 0.39 s
        orderMax       = 4
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
logTranslation = true
removeSingularities = true
tearing = true
automaticStateSelection = false
logSimulation = true
Log file: /home/pkgeval/ModiaResults/ParallelCapacitors1.txt

Simulating model: ParallelCapacitors1
Number of equations: 15
Number of variables: 16
Number of continuous states: 1
Number of non states: 2
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: ParallelCapacitors1
      Initialization at time = 0.0 s
        initial values:
          │ x │ name     │ start   │ fixed │ nominal │
          ├───┼──────────┼─────────┼───────┼─────────┤
          │ 1 │ C1.v     │ 1.0     │ 1     │ 1.0     │
          │ 2 │ C2.p.i   │ 0.0     │ 0     │ 1.0     │
          │ 3 │ der_C2.v │ 0.0     │ 0     │ 1.0     │

        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
      Simulation started

      Simulation is terminated at time = 1.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_NoSpecialStructure
        cpuTime        = 0.043 s (init: 0.04 s, integration: 0.003 s)
        startTime      = 0.0 s
        stopTime       = 1.0 s
        interval       = 0.001001001001001001 s
        tolerance      = 0.0001
        nEquations     = 3
        nResults       = 1000
        nSteps         = 21
        nResidues      = 78 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 19
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 0
        h0             = 1e-06 s
        hMin           = 1e-06 s
        hMax           = 0.48 s
        orderMax       = 2
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
logTranslation = true
removeSingularities = false
tearing = true
automaticStateSelection = true
logSimulation = true
Log file: /home/pkgeval/ModiaResults/ParallelCapacitors2.txt

Simulating model: ParallelCapacitors2
startValues = Any[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
fixedFlags = Any[false, false, false, false, false, false, false, false, false, false, false, false, false, false]
names = Any[Symbol("C1.v"), Symbol("C1.i"), Symbol("C1.p.v"), Symbol("C1.p.i"), Symbol("C1.n.v"), Symbol("C1.n.i"), Symbol("C2.v"), Symbol("C2.i"), Symbol("C2.p.v"), Symbol("C2.p.i"), Symbol("C2.n.v"), Symbol("C2.n.i"), Symbol("ground.p.v"), Symbol("ground.p.i"), "der(C1.v)", "der(C2.v)"]
Avar = [15, 0, 17, 0, 18, 0, 16, 0, 19, 0, 20, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0]
stateIndices = [9]
Gsolvable = Any[Any[1, 3, 5], Any[4, 6], Any[2, 4], Any[2], Any[7, 9, 11], Any[10, 12], Any[8, 10], Any[8], Any[13], Any[5, 13], Any[5, 11], Any[6, 12, 14], Any[3, 9], Any[4, 10], Any[], Any[], Any[], Any[], Any[], Any[]]
stateIndices = [9]
stateNames = ["C2.p.v"]
realStates = Any[this.C1.v, this.C2.v]
Number of equations: 20
Number of variables: 21
Number of continuous states: 1
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: ParallelCapacitors2
      Initialization at time = 0.0 s
        initial values:
          │ x │ name       │ start   │ fixed │ nominal │
          ├───┼────────────┼─────────┼───────┼─────────┤
          │ 1 │ C2.p.v     │ 0.0     │ 1     │ 1.0     │
          │ 2 │ der_C1.v   │ 0.0     │ 0     │ 1.0     │
          │ 3 │ der_C1.p.v │ 0.0     │ 0     │ 1.0     │
          │ 4 │ der_C2.v   │ 0.0     │ 0     │ 1.0     │

        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
      Simulation started

      Simulation is terminated at time = 1.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_NoSpecialStructure
        cpuTime        = 0.046 s (init: 0.043 s, integration: 0.003 s)
        startTime      = 0.0 s
        stopTime       = 1.0 s
        interval       = 0.001001001001001001 s
        tolerance      = 0.0001
        nEquations     = 4
        nResults       = 1000
        nSteps         = 21
        nResidues      = 97 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 19
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 0
        h0             = 1e-06 s
        hMin           = 1e-06 s
        hMax           = 0.48 s
        orderMax       = 2
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
logTranslation = true
removeSingularities = true
tearing = true
automaticStateSelection = false
logSimulation = true
Log file: /home/pkgeval/ModiaResults/ParallelCapacitors2b.txt

Simulating model: ParallelCapacitors2b
Number of equations: 6
Number of variables: 7
Number of continuous states: 1
Number of non states: 2
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: ParallelCapacitors2b
      Initialization at time = 0.0 s
        initial values:
          │ x │ name   │ start   │ fixed │ nominal │
          ├───┼────────┼─────────┼───────┼─────────┤
          │ 1 │ u1     │ 1.0     │ 1     │ 1.0     │
          │ 2 │ der_u2 │ 0.0     │ 0     │ 1.0     │

        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
      Simulation started

      Simulation is terminated at time = 1.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_NoSpecialStructure
        cpuTime        = 0.031 s (init: 0.029 s, integration: 0.0021 s)
        startTime      = 0.0 s
        stopTime       = 1.0 s
        interval       = 0.001001001001001001 s
        tolerance      = 0.0001
        nEquations     = 2
        nResults       = 1000
        nSteps         = 21
        nResidues      = 59 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 19
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 0
        h0             = 1e-06 s
        hMin           = 1e-06 s
        hMax           = 0.48 s
        orderMax       = 2
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
logTranslation = true
removeSingularities = false
tearing = true
automaticStateSelection = true
logSimulation = true
Log file: /home/pkgeval/ModiaResults/TwoInertiasConnectedViaIdealGearWithPositionConstraints.txt

Simulating model: TwoInertiasConnectedViaIdealGearWithPositionConstraints
startValues = Any[1.0, 1.0, 1.0, 1.0, 0.0, 0.0]
fixedFlags = Any[true, false, true, true, false, false]
names = Any[:phi1, :phi2, :w1, :w2, :tau, :t, "der(t)", "der(phi1)", "der(phi2)", "der(w1)", "der(w2)"]
Avar = [8, 9, 10, 11, 0, 7, 0, 12, 13, 0, 0, 0, 0]
stateIndices = [2, 9, 6]
Gsolvable = Any[Any[7], Any[3, 8], Any[4, 9], Any[], Any[5], Any[1], Any[], Any[], Any[], Any[]]
alias = 4
i = 2
stateIndices = [2, 4, 6]
stateNames = ["phi2", "w2", "t"]
realStates = Any[this.t, this.phi1, this.phi2, this.w1, this.w2]
Number of equations: 10
Number of variables: 13
Number of continuous states: 3
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: TwoInertiasConnectedViaIdealGearWithPositionConstraints
      Initialization at time = 0.0 s
        initial values:
          │ x │ name         │ start   │ fixed │ nominal │
          ├───┼──────────────┼─────────┼───────┼─────────┤
          │ 1 │ phi2         │ 1.0     │ 1     │ 1.0     │
          │ 2 │ w2           │ 1.0     │ 1     │ 1.0     │
          │ 3 │ t            │ 0.0     │ 1     │ 1.0     │
          │ 4 │ der_der_phi2 │ 0.0     │ 0     │ 1.0     │
          │ 5 │ der_der_phi1 │ 0.0     │ 0     │ 1.0     │
          │ 6 │ der_w1       │ 0.0     │ 0     │ 1.0     │

        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
      Simulation started

      Simulation is terminated at time = 3.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_NoSpecialStructure
        cpuTime        = 0.078 s (init: 0.076 s, integration: 0.0024 s)
        startTime      = 0.0 s
        stopTime       = 3.0 s
        interval       = 0.003003003003003003 s
        tolerance      = 0.0001
        nEquations     = 6
        nResults       = 1000
        nSteps         = 37
        nResidues      = 145 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 16
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 2
        h0             = 3e-06 s
        hMin           = 3e-06 s
        hMax           = 0.28 s
        orderMax       = 4
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
after plot


----------------------


Number of simulations OK    : 16
Number of simulations NOT OK: 0

Log category statistics:
StaticModel: 3
DynamicModel: 50
CalculatedResult: 16

----------------------



CurrentController: Demonstrating the ability to simulate mixed domain models
removeSingularities = false
tearing = true

Simulating model: CurrentController
Number of equations: 83
Number of variables: 91
Number of continuous states: 8
Number of non states: 2
final load.w = 0.07929150274932795
Simulation OK


Simulating model: CurrentController
Number of equations: 81
Number of variables: 89
Number of continuous states: 8
Number of non states: 3
final load.w = 0.07927277295604353
Simulation OK

... ModiaMath.plot(..): Call is ignored, since PyPlot not available.

Rectifier: Demonstrating the ability to simulate models with state events
logTranslation = true
Log file: /home/pkgeval/ModiaResults/Rectifier.txt

Simulating model: Rectifier
Number of equations: 33
Number of variables: 35
Number of continuous states: 2
final C.v = 0.47739155081386353
Simulation OK

... ModiaMath.plot(..): Call is ignored, since PyPlot not available.

TestCauerLowPassFilter: Demonstrating the ability to simulate an electrical model translated from Modelica Standar Library
logTranslation = false
removeSingularities = false
logTiming = true

Simulating model: CauerLowPassOPV
Instantiate:            15.184475 seconds (14.37 M allocations: 690.815 MiB, 2.29% gc time)
Flatten:                 0.003531 seconds (9.43 k allocations: 513.812 KiB)
Consistency check:       0.000152 seconds (436 allocations: 131.125 KiB)
Pantelides:              0.001042 seconds (2.00 k allocations: 244.141 KiB)
Matching:                0.000148 seconds (469 allocations: 155.547 KiB)
Number of equations: 234
Number of variables: 240
Number of continuous states: 6
Number of non states: 4
BLT:                     0.000181 seconds (1.13 k allocations: 69.391 KiB)
Symbolic processing:     0.092867 seconds (135.23 k allocations: 8.328 MiB, 41.67% gc time)
Code generation and simulation:         
  ModiaMath:             0.346735 seconds (710.24 k allocations: 16.381 MiB)
  ModiaMath:             0.075449 seconds (606.78 k allocations: 9.957 MiB)
  2.602527 seconds (2.09 M allocations: 66.434 MiB)
Total time: 18.033 seconds
final C9.v = -0.5003269853778406
Simulation OK


LinearSystems: Demonstrates type and size deduction.
logTranslation = true
Log file: /home/pkgeval/ModiaResults/MySISOABCD.txt

Simulating model: MySISOABCD
Number of equations: 2
Number of variables: 3
Number of continuous states: 1
final x = 0.5000001198147007
Simulation OK

storeEliminated = false

Simulating model: MyMIMOABCD
Number of equations: 5
Number of variables: 6
Number of continuous states: 1
final x = 0.004778441608750007
Simulation OK

... ModiaMath.plot(..): Call is ignored, since PyPlot not available.

SynchronousExamples: Demonstrating the ability to simulate models with synchronous semantics
storeEliminated = false
logSimulation = true

Simulating model: SpeedControl
Number of equations: 6
Number of variables: 9
Number of continuous states: 3
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: SpeedControl
      Initialization at time = 0.0 s
        initial values:
          │ x │ name   │ start   │ fixed │ nominal │
          ├───┼────────┼─────────┼───────┼─────────┤
          │ 1 │ x      │ 0.0     │ 1     │ 1.0     │
          │ 2 │ v      │ 0.0     │ 1     │ 1.0     │
          │ 3 │ fobs   │ 0.0     │ 1     │ 1.0     │

        in Clock, nr = 1 (isInitial)
        nextEventTime = 0 s, integrateToEvent = true
        in sample, nr = 1 (initialize sample store)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
      Simulation started

      Time event at time = 0.0 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 0.1 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
            fobs = 0.0 changed to 4.9504950495049505
        restart = Restart

      Time event at time = 0.1 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 0.2 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
            fobs = 499.99999999999994 changed to 497.53708727326847
        restart = Restart

      Time event at time = 0.2 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 0.3 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
            fobs = 251.24581460012237 changed to 250.0327282685336
        restart = Restart

      Time event at time = 0.30000000000000004 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 0.4 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
            fobs = 128.7240951096561 changed to 128.1266042418583
        restart = Restart

      Time event at time = 0.4 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 0.5 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
            fobs = 68.37751746207857 changed to 68.08325834556372
        restart = Restart

      Time event at time = 0.5 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 0.6 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
            fobs = 38.657346694078356 changed to 38.512391609218206
        restart = Restart

      Time event at time = 0.6 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 0.7 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
            fobs = 24.016883123203456 changed to 23.945525114776522
        restart = Restart

      Time event at time = 0.7 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 0.8 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
            fobs = 16.809724272083102 changed to 16.774558695741685
        restart = Restart

      Time event at time = 0.7999999999999999 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 0.9 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
            fobs = 13.258001061599884 changed to 13.240670823454916
        restart = Restart

      Time event at time = 0.8999999999999999 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 1 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
            fobs = 11.507647008958202 changed to 11.499100919972314
        restart = Restart

      Time event at time = 0.9999999999999999 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 1.1 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
            fobs = 10.644492021383485 changed to 10.64027421898659
        restart = Restart

      Time event at time = 1.0999999999999999 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 1.2 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
            fobs = 10.218493979297065 changed to 10.216413738546947
        restart = Restart

      Time event at time = 1.2 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 1.3 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
            fobs = 10.008389663535127 changed to 10.00736376269226
        restart = Restart

      Time event at time = 1.3 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 1.4 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
        restart = Restart

      Time event at time = 1.4000000000000001 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 1.5 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
        restart = Restart

      Time event at time = 1.5000000000000002 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 1.6 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
        restart = Restart

      Time event at time = 1.6000000000000003 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 1.7 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
        restart = Restart

      Time event at time = 1.7000000000000004 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 1.8 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
        restart = Restart

      Time event at time = 1.8000000000000005 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 1.9 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
        restart = Restart

      Time event at time = 1.9000000000000006 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 2 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
        restart = Restart

      Time event at time = 2.0000000000000004 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 2.1 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
        restart = Restart

      Time event at time = 2.1000000000000005 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 2.2 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
        restart = Restart

      Time event at time = 2.2000000000000006 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 2.3 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
        restart = Restart

      Time event at time = 2.3000000000000007 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 2.4 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
        restart = Restart

      Time event at time = 2.400000000000001 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 2.5 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
        restart = Restart

      Time event at time = 2.500000000000001 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 2.6 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
        restart = Restart

      Time event at time = 2.600000000000001 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 2.7 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
        restart = Restart

      Time event at time = 2.700000000000001 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 2.8 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
        restart = Restart

      Time event at time = 2.800000000000001 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 2.9 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
        restart = Restart

      Time event at time = 2.9000000000000012 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 3 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
        restart = Restart

      Time event at time = 3.0000000000000013 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 3.1 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
        restart = Restart

      Time event at time = 3.1000000000000014 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 3.2 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
        restart = Restart

      Time event at time = 3.2000000000000015 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 3.3 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
        restart = Restart

      Time event at time = 3.3000000000000016 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 3.4 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
        restart = Restart

      Time event at time = 3.4000000000000017 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 3.5 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
        restart = Restart

      Time event at time = 3.5000000000000018 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 3.6 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
        restart = Restart

      Time event at time = 3.600000000000002 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 3.7 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
        restart = Restart

      Time event at time = 3.700000000000002 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 3.8 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
        restart = Restart

      Time event at time = 3.800000000000002 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 3.9 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
        restart = Restart

      Time event at time = 3.900000000000002 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 4 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
        restart = Restart

      Time event at time = 4.000000000000002 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 4.1 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
        restart = Restart

      Time event at time = 4.100000000000001 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 4.2 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
        restart = Restart

      Time event at time = 4.200000000000001 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 4.3 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
        restart = Restart

      Time event at time = 4.300000000000001 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 4.4 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
        restart = Restart

      Time event at time = 4.4 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 4.5 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
        restart = Restart

      Time event at time = 4.5 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 4.6 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
        restart = Restart

      Time event at time = 4.6 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 4.7 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
        restart = Restart

      Time event at time = 4.699999999999999 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 4.8 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
        restart = Restart

      Time event at time = 4.799999999999999 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 4.9 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
        restart = Restart

      Time event at time = 4.899999999999999 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 5 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
        restart = Restart

      Time event at time = 5.0 s
        in Clock, nr = 1 (isEvent; clock is active)
        nextEventTime = 5.1 s, integrateToEvent = true
        in sample, nr = 1 (clock is active)
        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
        restart = Restart

      Simulation is terminated at time = 5.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_NoSpecialStructure
        cpuTime        = 0.11 s (init: 0.078 s, integration: 0.028 s)
        startTime      = 0.0 s
        stopTime       = 5.0 s
        interval       = 0.005005005005005005 s
        tolerance      = 0.0001
        nEquations     = 3
        nResults       = 1100
        nSteps         = 1408
        nResidues      = 4419 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 904
        nTimeEvents    = 51
        nStateEvents   = 0
        nRestartEvents = 51
        nErrTestFails  = 20
        h0             = 8.8e-13 s
        hMin           = 8.8e-13 s
        hMax           = 0.049 s
        orderMax       = 5
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
storeEliminated = false
logSimulation = false

Simulating model: SpeedControlPI
Number of equations: 8
Number of variables: 11
Number of continuous states: 3
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
(result["v"])[end] = 100.28482401529581
ElectricalVehicleAndCharger: Demonstrates the ability to change models from Julia.

Simulating model: Charger
Number of equations: 17
Number of variables: 17
Number of continuous states: 0

Simulating model: ElectricVehicle
Number of equations: 17
Number of variables: 18
Number of continuous states: 1

Simulating model: ElectricalVehicleWithCharger
Standard Charger
Number of equations: 34
Number of variables: 35
Number of continuous states: 1

Connecting Electric Vehicle to Charger
logStatistics = false
Standard Charger
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.

Disconnect
logStatistics = false
Standard Charger
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.

Connecting Electric Vehicle to Charger
logStatistics = false
Standard Charger
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.

Disconnect
logStatistics = false
Super Charger
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.

Connecting Electric Vehicle to Charger
logStatistics = false
Standard Charger
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.

Disconnect
logStatistics = false
Standard Charger
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.

Connecting Electric Vehicle to Charger
logStatistics = false
Super Charger
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.

Disconnect
logStatistics = false
Standard Charger
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.

Connecting Electric Vehicle to Charger
logStatistics = false
Super Charger
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.

Disconnect
logStatistics = false
Standard Charger
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.

CollidingBalls: Demonstrating the use of allInstances to set up contact force between any number of balls
expandArrayIncidence = true
storeEliminated = false

Simulating model: Balls3
Number of equations: 24
Number of variables: 36
Number of continuous states: 12


... ModiaMath.plot(..): Call is ignored, since PyPlot not available.

Simulating model: HeatTransfer
Number of equations: 1
Number of variables: 2
Number of continuous states: 1
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.


----------------------


Number of simulations OK    : 6
Number of simulations NOT OK: 0

Log category statistics:
StaticModel: 1
DynamicModel: 22
CalculatedResult: 6

----------------------


Test Summary: | Pass  Total
RunTests      |  320    320
   Testing Modia tests passed 
