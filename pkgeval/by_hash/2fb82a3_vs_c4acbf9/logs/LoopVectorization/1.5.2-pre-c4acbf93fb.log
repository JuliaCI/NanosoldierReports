Julia Version 1.5.2-pre.0
Commit c4acbf93fb (2020-08-26 10:58 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed UnPack ────────────── v1.0.2
  Installed SIMDPirates ───────── v0.8.25
  Installed VectorizationBase ─── v0.12.33
  Installed OffsetArrays ──────── v1.1.3
  Installed DocStringExtensions ─ v0.8.3
  Installed LoopVectorization ─── v0.8.26
  Installed SLEEFPirates ──────── v0.5.5
  Installed CpuId ─────────────── v0.2.2
Updating `~/.julia/environments/v1.5/Project.toml`
  [bdcacae8] + LoopVectorization v0.8.26
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [adafc99b] + CpuId v0.2.2
  [ffbed154] + DocStringExtensions v0.8.3
  [bdcacae8] + LoopVectorization v0.8.26
  [6fe1bfb0] + OffsetArrays v1.1.3
  [21efa798] + SIMDPirates v0.8.25
  [476501e8] + SLEEFPirates v0.5.5
  [3a884ed6] + UnPack v1.0.2
  [3d5dd08c] + VectorizationBase v0.12.33
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
   Building SLEEFPirates → `~/.julia/packages/SLEEFPirates/jGsib/deps/build.log`
    Testing LoopVectorization
Status `/tmp/jl_9x0xGI/Project.toml`
  [ffbed154] DocStringExtensions v0.8.3
  [bdcacae8] LoopVectorization v0.8.26
  [6fe1bfb0] OffsetArrays v1.1.3
  [21efa798] SIMDPirates v0.8.25
  [476501e8] SLEEFPirates v0.5.5
  [3a884ed6] UnPack v1.0.2
  [3d5dd08c] VectorizationBase v0.12.33
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [8dfed614] Test
Status `/tmp/jl_9x0xGI/Manifest.toml`
  [adafc99b] CpuId v0.2.2
  [ffbed154] DocStringExtensions v0.8.3
  [bdcacae8] LoopVectorization v0.8.26
  [6fe1bfb0] OffsetArrays v1.1.3
  [21efa798] SIMDPirates v0.8.25
  [476501e8] SLEEFPirates v0.5.5
  [3a884ed6] UnPack v1.0.2
  [3d5dd08c] VectorizationBase v0.12.33
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
LoopVectorization.REGISTER_COUNT = 32
#= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/printmethods.jl:2 =# @__LINE__() = 2
  8.095034 seconds (4.98 M allocations: 254.492 MiB, 1.57% gc time)
(Float64, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/fallback.jl:4 =# @__LINE__()) = (Float64, 4)
 24.209705 seconds (12.43 M allocations: 627.414 MiB, 2.77% gc time)
  0.125315 seconds (69.38 k allocations: 3.810 MiB)
  9.014911 seconds (8.74 M allocations: 446.917 MiB, 1.81% gc time)
  1.952857 seconds (2.19 M allocations: 110.438 MiB, 2.30% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/offsetarrays.jl:204 =# @__LINE__()) = (Float32, 204)
r = -1:1
r = -2:2
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/offsetarrays.jl:204 =# @__LINE__()) = (Float64, 204)
r = -1:1
r = -2:2
735.829243 seconds (323.31 M allocations: 24.436 GiB, 4.07% gc time)
(Float64, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/tensors.jl:51 =# @__LINE__()) = (Float64, 51)
 20.519382 seconds (13.65 M allocations: 746.114 MiB, 6.44% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/map.jl:4 =# @__LINE__()) = (Float32, 4)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/map.jl:4 =# @__LINE__()) = (Float64, 4)
  7.748516 seconds (7.38 M allocations: 375.845 MiB, 5.32% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/filter.jl:4 =# @__LINE__()) = (Float32, 4)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/filter.jl:4 =# @__LINE__()) = (Float64, 4)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/filter.jl:4 =# @__LINE__()) = (Int32, 4)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/filter.jl:4 =# @__LINE__()) = (Int64, 4)
  1.141902 seconds (710.45 k allocations: 37.165 MiB, 1.58% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:19 =# @__LINE__()) = (Int32, 19)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:19 =# @__LINE__()) = (Int64, 19)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:19 =# @__LINE__()) = (Float32, 19)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:19 =# @__LINE__()) = (Float64, 19)
185.976049 seconds (448.33 M allocations: 29.100 GiB, 6.11% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/ifelsemasks.jl:366 =# @__LINE__()) = (Float32, 366)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/ifelsemasks.jl:366 =# @__LINE__()) = (Float64, 366)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/ifelsemasks.jl:366 =# @__LINE__()) = (Int32, 366)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/ifelsemasks.jl:366 =# @__LINE__()) = (Int64, 366)
 79.248150 seconds (56.05 M allocations: 2.809 GiB, 4.56% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:234 =# @__LINE__()) = (Float32, 234)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:234 =# @__LINE__()) = (Float64, 234)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:234 =# @__LINE__()) = (Int32, 234)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:234 =# @__LINE__()) = (Int64, 234)
 48.883991 seconds (44.40 M allocations: 2.262 GiB, 2.94% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/special.jl:339 =# @__LINE__()) = (Float32, 339)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/special.jl:339 =# @__LINE__()) = (Float64, 339)
 16.819136 seconds (13.14 M allocations: 634.560 MiB, 1.87% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/gemv.jl:211 =# @__LINE__()) = (Float32, 211)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/gemv.jl:211 =# @__LINE__()) = (Float64, 211)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/gemv.jl:211 =# @__LINE__()) = (Int32, 211)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/gemv.jl:211 =# @__LINE__()) = (Int64, 211)
 64.430694 seconds (52.63 M allocations: 2.396 GiB, 2.07% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:789 =# @__LINE__()) = (Float32, 789)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:789 =# @__LINE__()) = (Float64, 789)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1070 =# @__LINE__()) = (Float32, 1070)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1070 =# @__LINE__()) = (Float64, 1070)
117.760518 seconds (127.87 M allocations: 6.812 GiB, 5.44% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/copy.jl:129 =# @__LINE__()) = (Float32, 129)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/copy.jl:129 =# @__LINE__()) = (Float64, 129)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/copy.jl:129 =# @__LINE__()) = (Int32, 129)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/copy.jl:129 =# @__LINE__()) = (Int64, 129)
 11.790265 seconds (9.11 M allocations: 447.852 MiB, 2.38% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/broadcast.jl:5 =# @__LINE__()) = (Float32, 5)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/broadcast.jl:5 =# @__LINE__()) = (Float64, 5)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/broadcast.jl:5 =# @__LINE__()) = (Int32, 5)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/broadcast.jl:5 =# @__LINE__()) = (Int64, 5)
362.566620 seconds (140.45 M allocations: 7.893 GiB, 2.92% gc time)
OPS = Tuple{:numericconstant,Symbol("##zero#14162"),LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x01, 0x02),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000032, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x03),:LoopVectorization,:vfmadd_fast,LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000020301, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:identity,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000004, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x04),:LoopVectorization,:vadd,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000605, LoopVectorization.compute, 0x00, 0x04),:LoopVectorization,:setindex!,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000007, LoopVectorization.memstore, 0x03, 0x05)}
ARF = Tuple{LoopVectorization.ArrayRefStruct{:A,Symbol("##vptr##_A")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:B,Symbol("##vptr##_B")}(0x0000000000000101, 0x0000000000000302, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:C,Symbol("##vptr##_C")}(0x0000000000000101, 0x0000000000000102, 0x0000000000000000)}
AM = Tuple{0,Tuple{},Tuple{},Tuple{},Tuple{},Tuple{(1, LoopVectorization.IntOrFloat)},Tuple{}}
LPSYM = Tuple{:m,:n,:k}
LB = Tuple{VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1}}
vargs = (VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007f047d7abe70, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007f047d7bc0c0, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007f047d7bc130, (16,)))
OPS = Tuple{:numericconstant,Symbol("##zero#14162"),LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x01, 0x02),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000032, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x03),:LoopVectorization,:vfmadd_fast,LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000020301, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:identity,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000004, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x04),:LoopVectorization,:vadd,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000605, LoopVectorization.compute, 0x00, 0x04),:LoopVectorization,:setindex!,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000007, LoopVectorization.memstore, 0x03, 0x05)}
ARF = Tuple{LoopVectorization.ArrayRefStruct{:A,Symbol("##vptr##_A")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:B,Symbol("##vptr##_B")}(0x0000000000000101, 0x0000000000000302, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:C,Symbol("##vptr##_C")}(0x0000000000000101, 0x0000000000000102, 0x0000000000000000)}
AM = Tuple{0,Tuple{},Tuple{},Tuple{},Tuple{},Tuple{(1, LoopVectorization.IntOrFloat)},Tuple{}}
LPSYM = Tuple{:m,:n,:k}
LB = Tuple{VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1}}
vargs = (VectorizationBase.RowMajorStridedPointer{Float64,1}(Ptr{Float64} @0x00007f047dd41470, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007f047dd414e0, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007f047dd55a20, (16,)))
OPS = Tuple{:numericconstant,Symbol("##zero#14162"),LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x01, 0x02),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000032, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x03),:LoopVectorization,:vfmadd_fast,LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000020301, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:identity,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000004, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x04),:LoopVectorization,:vadd,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000605, LoopVectorization.compute, 0x00, 0x04),:LoopVectorization,:setindex!,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000007, LoopVectorization.memstore, 0x03, 0x05)}
ARF = Tuple{LoopVectorization.ArrayRefStruct{:A,Symbol("##vptr##_A")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:B,Symbol("##vptr##_B")}(0x0000000000000101, 0x0000000000000302, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:C,Symbol("##vptr##_C")}(0x0000000000000101, 0x0000000000000102, 0x0000000000000000)}
AM = Tuple{0,Tuple{},Tuple{},Tuple{},Tuple{},Tuple{(1, LoopVectorization.IntOrFloat)},Tuple{}}
LPSYM = Tuple{:m,:n,:k}
LB = Tuple{VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1}}
vargs = (VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007f04d3c66430, (16,)), VectorizationBase.RowMajorStridedPointer{Float64,1}(Ptr{Float64} @0x00007f04d3c664a0, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007f04d3c66510, (16,)))
OPS = Tuple{:numericconstant,Symbol("##zero#14162"),LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x01, 0x02),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000032, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x03),:LoopVectorization,:vfmadd_fast,LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000020301, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:identity,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000004, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x04),:LoopVectorization,:vadd,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000605, LoopVectorization.compute, 0x00, 0x04),:LoopVectorization,:setindex!,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000007, LoopVectorization.memstore, 0x03, 0x05)}
ARF = Tuple{LoopVectorization.ArrayRefStruct{:A,Symbol("##vptr##_A")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:B,Symbol("##vptr##_B")}(0x0000000000000101, 0x0000000000000302, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:C,Symbol("##vptr##_C")}(0x0000000000000101, 0x0000000000000102, 0x0000000000000000)}
AM = Tuple{0,Tuple{},Tuple{},Tuple{},Tuple{},Tuple{(1, LoopVectorization.IntOrFloat)},Tuple{}}
LPSYM = Tuple{:m,:n,:k}
LB = Tuple{VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1}}
vargs = (VectorizationBase.RowMajorStridedPointer{Float64,1}(Ptr{Float64} @0x00007f04fd922120, (16,)), VectorizationBase.RowMajorStridedPointer{Float64,1}(Ptr{Float64} @0x00007f04fd922190, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007f04fd922200, (16,)))
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/gemm.jl:650 =# @__LINE__()) = (Float32, 650)
 90.205005 seconds (49.36 M allocations: 3.369 GiB, 4.31% gc time)
 11.609688 seconds (9.38 M allocations: 461.638 MiB)
 18.682600 seconds (12.22 M allocations: 668.504 MiB, 4.74% gc time)
 10.854875 seconds (8.95 M allocations: 467.609 MiB, 4.40% gc time)
 23.204534 seconds (14.26 M allocations: 877.663 MiB, 4.85% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/gemm.jl:650 =# @__LINE__()) = (Float64, 650)
100.894303 seconds (48.89 M allocations: 3.347 GiB, 5.42% gc time)
 11.326239 seconds (9.31 M allocations: 459.030 MiB)
 18.143936 seconds (12.11 M allocations: 663.518 MiB)
 10.044149 seconds (8.91 M allocations: 465.725 MiB)
 23.088872 seconds (14.13 M allocations: 871.003 MiB, 6.17% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/gemm.jl:650 =# @__LINE__()) = (Int32, 650)
130.444470 seconds (54.24 M allocations: 3.568 GiB, 4.16% gc time)
 14.607075 seconds (9.87 M allocations: 477.957 MiB)
 19.014648 seconds (11.22 M allocations: 607.683 MiB)
 15.268036 seconds (9.42 M allocations: 483.124 MiB, 7.81% gc time)
 25.693267 seconds (14.56 M allocations: 882.809 MiB, 5.76% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/gemm.jl:650 =# @__LINE__()) = (Int64, 650)
140.913593 seconds (54.16 M allocations: 3.565 GiB, 4.81% gc time)
 13.432824 seconds (9.83 M allocations: 477.113 MiB)
 19.638732 seconds (11.18 M allocations: 606.385 MiB)
 14.959548 seconds (9.40 M allocations: 482.084 MiB, 9.41% gc time)
 27.410928 seconds (14.56 M allocations: 882.725 MiB, 4.84% gc time)
747.602096 seconds (388.33 M allocations: 23.587 GiB, 4.18% gc time)
Test Summary:        | Pass  Total
LoopVectorization.jl | 1724   1724
2444.801523 seconds (1.66 G allocations: 102.958 GiB, 4.07% gc time)
    Testing LoopVectorization tests passed 
