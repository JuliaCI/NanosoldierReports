Julia Version 1.4.0-DEV.661
Commit 50bc3ea150 (2019-12-23 18:40 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-8.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia

 Resolving package versions...
 Installed SIMD ─ v2.8.0
  Updating `~/.julia/environments/v1.4/Project.toml`
  [fdea26ae] + SIMD v2.8.0
  Updating `~/.julia/environments/v1.4/Manifest.toml`
  [fdea26ae] + SIMD v2.8.0
  [2a0f44e3] + Base64 
  [b77e0a4c] + InteractiveUtils 
  [d6f4376e] + Markdown 
   Testing SIMD
Path `/home/pkgeval/.julia/packages/SIMD/Am38N` exists and looks like the correct package. Using existing path.
  Updating `/tmp/jl_9zkyNf/Project.toml`
  [fdea26ae] + SIMD v2.8.0 [`~/.julia/packages/SIMD/Am38N`]
  [8dfed614] + Test 
  Updating `/tmp/jl_9zkyNf/Manifest.toml`
  [fdea26ae] ~ SIMD v2.8.0 ⇒ v2.8.0 [`~/.julia/packages/SIMD/Am38N`]
  [8ba89e20] + Distributed 
  [56ddb016] + Logging 
  [9a3f8284] + Random 
  [9e88b42a] + Serialization 
  [6462fe0b] + Sockets 
  [8dfed614] + Test 
Running sandbox
Status `/tmp/jl_9zkyNf/Project.toml`
  [fdea26ae] SIMD v2.8.0 [`~/.julia/packages/SIMD/Am38N`]
  [b77e0a4c] InteractiveUtils 
  [8dfed614] Test 

;  @ /home/pkgeval/.julia/packages/SIMD/Am38N/test/runtests.jl:569 within `vsum'
define double @julia_vsum_20048({ %jl_value_t addrspace(10)*, [1 x [2 x i64]], i64, i64 } addrspace(11)* nocapture nonnull readonly dereferenceable(40), %jl_value_t addrspace(10)*) {
top:
  %gcframe = alloca %jl_value_t addrspace(10)*, i32 3, align 16
  %2 = bitcast %jl_value_t addrspace(10)** %gcframe to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %2, i8 0, i32 24, i1 false)
  %3 = alloca [1 x [1 x i64]], align 8
  %thread_ptr = call i8* asm "movq %fs:0, $0", "=r"()
  %ptls_i8 = getelementptr i8, i8* %thread_ptr, i64 -15712
  %ptls = bitcast i8* %ptls_i8 to %jl_value_t***
; ┌ @ abstractarray.jl:206 within `length'
; │┌ @ subarray.jl:71 within `size'
; ││┌ @ subarray.jl:404 within `axes'
; │││┌ @ subarray.jl:409 within `_indices_sub'
; ││││┌ @ abstractarray.jl:99 within `unsafe_indices'
; │││││┌ @ range.jl:516 within `unsafe_length'
; ││││││┌ @ range.jl:570 within `last'
; │││││││┌ @ Base.jl:33 within `getproperty'
          %4 = getelementptr %jl_value_t addrspace(10)*, %jl_value_t addrspace(10)** %gcframe, i32 0
          %5 = bitcast %jl_value_t addrspace(10)** %4 to i64*
          store i64 4, i64* %5
          %6 = getelementptr %jl_value_t**, %jl_value_t*** %ptls, i32 0
          %7 = getelementptr %jl_value_t addrspace(10)*, %jl_value_t addrspace(10)** %gcframe, i32 1
          %8 = bitcast %jl_value_t addrspace(10)** %7 to %jl_value_t***
          %9 = load %jl_value_t**, %jl_value_t*** %6
          store %jl_value_t** %9, %jl_value_t*** %8
          %10 = bitcast %jl_value_t*** %6 to %jl_value_t addrspace(10)***
          store %jl_value_t addrspace(10)** %gcframe, %jl_value_t addrspace(10)*** %10
          %11 = getelementptr inbounds { %jl_value_t addrspace(10)*, [1 x [2 x i64]], i64, i64 }, { %jl_value_t addrspace(10)*, [1 x [2 x i64]], i64, i64 } addrspace(11)* %0, i64 0, i32 1, i64 0, i64 1
; ││││││└└
; ││││││┌ @ range.jl:565 within `first'
; │││││││┌ @ Base.jl:33 within `getproperty'
          %12 = getelementptr inbounds { %jl_value_t addrspace(10)*, [1 x [2 x i64]], i64, i64 }, { %jl_value_t addrspace(10)*, [1 x [2 x i64]], i64, i64 } addrspace(11)* %0, i64 0, i32 1, i64 0, i64 0
; ││││││└└
; ││││││┌ @ int.jl:52 within `-'
         %13 = load i64, i64 addrspace(11)* %11, align 8
         %14 = load i64, i64 addrspace(11)* %12, align 8
         %15 = sub i64 %13, %14
; ││││││└
; ││││││┌ @ int.jl:53 within `+'
         %16 = add i64 %15, 1
; │││││└└
; │││││┌ @ range.jl:320 within `OneTo' @ range.jl:311
; ││││││┌ @ promotion.jl:409 within `max'
         %17 = icmp sgt i64 %16, 0
         %18 = select i1 %17, i64 %16, i64 0
; └└└└└└└
; ┌ @ int.jl:231 within `rem'
   %19 = and i64 %18, 3
; └
; ┌ @ promotion.jl:398 within `=='
   %20 = icmp eq i64 %19, 0
; └
  br i1 %20, label %L14, label %L117

L14:                                              ; preds = %top
;  @ /home/pkgeval/.julia/packages/SIMD/Am38N/test/runtests.jl:572 within `vsum'
; ┌ @ range.jl:22 within `Colon'
; │┌ @ range.jl:24 within `_colon'
; ││┌ @ range.jl:253 within `StepRange' @ range.jl:202
     %21 = call i64 @julia_steprange_last_12652(i64 1, i64 4, i64 %18)
; └└└
; ┌ @ range.jl:593 within `iterate'
; │┌ @ range.jl:475 within `isempty'
; ││┌ @ bool.jl:40 within `&'
     %22 = icmp sgt i64 %21, 0
; └└└
  br i1 %22, label %L40.preheader, label %L113

L40.preheader:                                    ; preds = %L14
  %23 = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %3, i64 0, i64 0, i64 0
  %24 = getelementptr inbounds { %jl_value_t addrspace(10)*, [1 x [2 x i64]], i64, i64 }, { %jl_value_t addrspace(10)*, [1 x [2 x i64]], i64, i64 } addrspace(11)* %0, i64 0, i32 2
  %25 = getelementptr inbounds { %jl_value_t addrspace(10)*, [1 x [2 x i64]], i64, i64 }, { %jl_value_t addrspace(10)*, [1 x [2 x i64]], i64, i64 } addrspace(11)* %0, i64 0, i32 3
  %26 = load i64, i64 addrspace(11)* %24, align 8
  %27 = load i64, i64 addrspace(11)* %25, align 8
  %28 = getelementptr inbounds { %jl_value_t addrspace(10)*, [1 x [2 x i64]], i64, i64 }, { %jl_value_t addrspace(10)*, [1 x [2 x i64]], i64, i64 } addrspace(11)* %0, i64 0, i32 0
  %29 = load %jl_value_t addrspace(10)*, %jl_value_t addrspace(10)* addrspace(11)* %28, align 8
  %30 = addrspacecast %jl_value_t addrspace(10)* %29 to %jl_value_t addrspace(11)*
;  @ /home/pkgeval/.julia/packages/SIMD/Am38N/test/runtests.jl:573 within `vsum'
; ┌ @ /home/pkgeval/.julia/packages/SIMD/Am38N/src/SIMD.jl:1943 within `getindex'
; │┌ @ /home/pkgeval/.julia/packages/SIMD/Am38N/src/SIMD.jl:1922 within `_preprocessindices'
    br label %L40

L40:                                              ; preds = %L40.preheader, %L76
    %value_phi3 = phi <4 x double> [ %res.i15, %L76 ], [ zeroinitializer, %L40.preheader ]
    %value_phi4 = phi i64 [ %48, %L76 ], [ 1, %L40.preheader ]
; ││┌ @ abstractarray.jl:502 within `checkbounds' @ abstractarray.jl:487
; │││┌ @ /home/pkgeval/.julia/packages/SIMD/Am38N/src/SIMD.jl:1871 within `checkindex'
; ││││┌ @ int.jl:410 within `<='
       %31 = icmp slt i64 %value_phi4, 1
; ││││└
; ││││┌ @ /home/pkgeval/.julia/packages/SIMD/Am38N/src/SIMD.jl:1865 within `last'
; │││││┌ @ int.jl:52 within `-'
        %32 = add nuw i64 %value_phi4, 3
; ││││└└
; ││││┌ @ int.jl:410 within `<='
       %33 = icmp sgt i64 %32, %18
; ││││└
      %or.cond = or i1 %31, %33
      br i1 %or.cond, label %L66, label %L76

L66:                                              ; preds = %L40
; ││└└
    store i64 %value_phi4, i64* %23, align 8
; ││┌ @ abstractarray.jl:502 within `checkbounds'
; │││┌ @ subarray.jl:49 within `throw_boundserror'
; ││││┌ @ Base.jl:33 within `getproperty'
       %34 = getelementptr inbounds { %jl_value_t addrspace(10)*, [1 x [2 x i64]], i64, i64 }, { %jl_value_t addrspace(10)*, [1 x [2 x i64]], i64, i64 } addrspace(11)* %0, i64 0, i32 1
; ││││└
      %35 = addrspacecast [1 x [1 x i64]]* %3 to [1 x [1 x i64]] addrspace(11)*
      %36 = getelementptr %jl_value_t addrspace(10)*, %jl_value_t addrspace(10)** %gcframe, i32 2
      store %jl_value_t addrspace(10)* %29, %jl_value_t addrspace(10)** %36
      %37 = call nonnull %jl_value_t addrspace(10)* @julia___subarray_throw_boundserror_19920(%jl_value_t addrspace(10)* addrspacecast (%jl_value_t* inttoptr (i64 139998512178720 to %jl_value_t*) to %jl_value_t addrspace(10)*), %jl_value_t addrspace(10)* nonnull %29, [1 x [2 x i64]] addrspace(11)* nocapture readonly %34, i64 %26, i64 %27, [1 x [1 x i64]] addrspace(11)* nocapture readonly %35)
      call void @llvm.trap()
      unreachable

L76:                                              ; preds = %L40
; │└└└
; │ @ /home/pkgeval/.julia/packages/SIMD/Am38N/src/SIMD.jl:1944 within `getindex'
; │┌ @ /home/pkgeval/.julia/packages/SIMD/Am38N/src/SIMD.jl:1935 within `_pointer'
; ││┌ @ subarray.jl:393 within `pointer'
; │││┌ @ subarray.jl:336 within `first_index'
; ││││┌ @ int.jl:53 within `+'
       %38 = add nuw i64 %value_phi4, 2305843009213693951
; │││└└
; │││ @ subarray.jl:396 within `pointer'
; │││┌ @ int.jl:52 within `-'
      %39 = add i64 %38, %26
; │││└
; │││┌ @ int.jl:53 within `+'
      %40 = add i64 %39, %27
      %41 = addrspacecast %jl_value_t addrspace(11)* %30 to %jl_value_t*
; │││└
; │││ @ subarray.jl:398 within `pointer' @ abstractarray.jl:936
; │││┌ @ pointer.jl:65 within `unsafe_convert'
      %42 = bitcast %jl_value_t* %41 to i8**
      %43 = load i8*, i8** %42, align 8
; │││└
; │││┌ @ int.jl:54 within `*'
      %44 = shl i64 %40, 3
      %45 = add i64 %44, -8
; │││└
; │││┌ @ pointer.jl:159 within `+'
      %46 = getelementptr i8, i8* %43, i64 %45
; │└└└
; │┌ @ /home/pkgeval/.julia/packages/SIMD/Am38N/src/SIMD.jl:1426 within `vload' @ /home/pkgeval/.julia/packages/SIMD/Am38N/src/SIMD.jl:1426 @ /home/pkgeval/.julia/packages/SIMD/Am38N/src/SIMD.jl:1356 @ /home/pkgeval/.julia/packages/SIMD/Am38N/src/SIMD.jl:1356
; ││┌ @ /home/pkgeval/.julia/packages/SIMD/Am38N/src/SIMD.jl:1383 within `macro expansion'
     %ptr.i = bitcast i8* %46 to <4 x double>*
     %res.i = load <4 x double>, <4 x double>* %ptr.i, align 8
; └└└
; ┌ @ /home/pkgeval/.julia/packages/SIMD/Am38N/src/SIMD.jl:1083 within `+'
; │┌ @ /home/pkgeval/.julia/packages/SIMD/Am38N/src/SIMD.jl:604 within `llvmwrap' @ /home/pkgeval/.julia/packages/SIMD/Am38N/src/SIMD.jl:604
; ││┌ @ /home/pkgeval/.julia/packages/SIMD/Am38N/src/SIMD.jl:623 within `macro expansion'
     %res.i15 = fadd <4 x double> %value_phi3, %res.i
; └└└
; ┌ @ range.jl:597 within `iterate'
; │┌ @ promotion.jl:398 within `=='
    %47 = icmp eq i64 %value_phi4, %21
; │└
   %48 = add nuw i64 %value_phi4, 4
; └
  br i1 %47, label %L113.loopexit, label %L40

L113.loopexit:                                    ; preds = %L76
; ┌ @ /home/pkgeval/.julia/packages/SIMD/Am38N/src/SIMD.jl:1943 within `getindex'
; │┌ @ /home/pkgeval/.julia/packages/SIMD/Am38N/src/SIMD.jl:1922 within `_preprocessindices'
    store i64 %21, i64* %23, align 8
; └└
;  @ /home/pkgeval/.julia/packages/SIMD/Am38N/test/runtests.jl:575 within `vsum'
; ┌ @ /home/pkgeval/.julia/packages/SIMD/Am38N/src/SIMD.jl:1286 within `sum'
; │┌ @ /home/pkgeval/.julia/packages/SIMD/Am38N/src/SIMD.jl:1241 within `llvmwrapreduce'
; ││┌ @ /home/pkgeval/.julia/packages/SIMD/Am38N/src/SIMD.jl:1274 within `macro expansion'
     br label %L113

L113:                                             ; preds = %L113.loopexit, %L14
     %value_phi11 = phi <4 x double> [ zeroinitializer, %L14 ], [ %res.i15, %L113.loopexit ]
     %vec_2_1.i = shufflevector <4 x double> %value_phi11, <4 x double> undef, <2 x i32> <i32 0, i32 1>
     %vec_2_2.i = shufflevector <4 x double> %value_phi11, <4 x double> undef, <2 x i32> <i32 2, i32 3>
     %vec_2.i = fadd <2 x double> %vec_2_1.i, %vec_2_2.i
     %vec_1_1.i = shufflevector <2 x double> %vec_2.i, <2 x double> undef, <1 x i32> zeroinitializer
     %vec_1_2.i = shufflevector <2 x double> %vec_2.i, <2 x double> undef, <1 x i32> <i32 1>
     %vec_1.i = fadd <1 x double> %vec_1_1.i, %vec_1_2.i
     %res.i14 = extractelement <1 x double> %vec_1.i, i32 0
     %49 = getelementptr %jl_value_t addrspace(10)*, %jl_value_t addrspace(10)** %gcframe, i32 1
     %50 = load %jl_value_t addrspace(10)*, %jl_value_t addrspace(10)** %49
     %51 = getelementptr %jl_value_t**, %jl_value_t*** %ptls, i32 0
     %52 = bitcast %jl_value_t*** %51 to %jl_value_t addrspace(10)**
     store %jl_value_t addrspace(10)* %50, %jl_value_t addrspace(10)** %52
; └└└
  ret double %res.i14

L117:                                             ; preds = %top
;  @ /home/pkgeval/.julia/packages/SIMD/Am38N/test/runtests.jl:569 within `vsum'
  %53 = bitcast %jl_value_t*** %ptls to i8*
  %54 = call noalias nonnull %jl_value_t addrspace(10)* @jl_gc_pool_alloc(i8* %53, i32 1400, i32 16) #1
  %55 = bitcast %jl_value_t addrspace(10)* %54 to %jl_value_t addrspace(10)* addrspace(10)*
  %56 = getelementptr %jl_value_t addrspace(10)*, %jl_value_t addrspace(10)* addrspace(10)* %55, i64 -1
  store %jl_value_t addrspace(10)* addrspacecast (%jl_value_t* inttoptr (i64 139998508384560 to %jl_value_t*) to %jl_value_t addrspace(10)*), %jl_value_t addrspace(10)* addrspace(10)* %56
  %57 = bitcast %jl_value_t addrspace(10)* %54 to %jl_value_t addrspace(10)* addrspace(10)*
  store %jl_value_t addrspace(10)* addrspacecast (%jl_value_t* inttoptr (i64 139998417538704 to %jl_value_t*) to %jl_value_t addrspace(10)*), %jl_value_t addrspace(10)* addrspace(10)* %57, align 8
  %58 = addrspacecast %jl_value_t addrspace(10)* %54 to %jl_value_t addrspace(12)*
  %59 = getelementptr %jl_value_t addrspace(10)*, %jl_value_t addrspace(10)** %gcframe, i32 2
  store %jl_value_t addrspace(10)* %54, %jl_value_t addrspace(10)** %59
  call void @jl_throw(%jl_value_t addrspace(12)* %58)
  unreachable
}
	.text
; ┌ @ runtests.jl:569 within `vsum'
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	subq	$40, %rsp
	vxorpd	%xmm0, %xmm0, %xmm0
	vmovapd	%xmm0, 16(%rsp)
	movq	$0, 32(%rsp)
	movq	%fs:0, %rax
; │┌ @ abstractarray.jl:206 within `length'
; ││┌ @ subarray.jl:71 within `size'
; │││┌ @ subarray.jl:404 within `axes'
; ││││┌ @ subarray.jl:409 within `_indices_sub'
; │││││┌ @ abstractarray.jl:99 within `unsafe_indices'
; ││││││┌ @ range.jl:516 within `unsafe_length'
; │││││││┌ @ range.jl:570 within `last'
; ││││││││┌ @ Base.jl:33 within `getproperty'
	movq	$4, 16(%rsp)
	movq	-15712(%rax), %rcx
	movq	%rcx, 24(%rsp)
	leaq	16(%rsp), %rcx
	movq	%rcx, -15712(%rax)
	leaq	-15712(%rax), %r14
; │││││││└└
; │││││││┌ @ int.jl:52 within `-'
	movq	16(%rdi), %rax
	subq	8(%rdi), %rax
; │││││││└
; │││││││┌ @ int.jl:53 within `+'
	addq	$1, %rax
; ││││││└└
; ││││││┌ @ range.jl:320 within `OneTo' @ range.jl:311
; │││││││┌ @ promotion.jl:409 within `max'
	movq	%rax, %rcx
	sarq	$63, %rcx
	andnq	%rax, %rcx, %r12
; │└└└└└└└
; │┌ @ promotion.jl:398 within `=='
	testb	$3, %r12b
; │└
	jne	L339
	movq	%rdi, %r15
; │ @ runtests.jl:572 within `vsum'
; │┌ @ range.jl:22 within `Colon'
; ││┌ @ range.jl:24 within `_colon'
; │││┌ @ range.jl:253 within `StepRange' @ range.jl:202
	movabsq	$steprange_last, %rax
	movl	$4, %ebx
	movl	$1, %edi
	movl	$4, %esi
	movq	%r12, %rdx
	callq	*%rax
; │└└└
; │┌ @ range.jl:593 within `iterate'
; ││┌ @ range.jl:475 within `isempty'
; │││┌ @ bool.jl:40 within `&'
	testq	%rax, %rax
; │└└└
	jle	L243
	movq	(%r15), %rsi
	movq	24(%r15), %rcx
	movq	32(%r15), %r8
; │ @ runtests.jl:573 within `vsum'
; │┌ @ SIMD.jl:1943 within `getindex'
; ││┌ @ SIMD.jl:1922 within `_preprocessindices'
	leaq	(,%r8,8), %rdx
	leaq	(%rdx,%rcx,8), %r9
	addq	$-8, %r9
	movq	$-3, %rdi
	subq	%rax, %rdi
	vxorpd	%xmm0, %xmm0, %xmm0
; │││┌ @ abstractarray.jl:502 within `checkbounds' @ abstractarray.jl:487
; ││││┌ @ SIMD.jl:1871 within `checkindex'
; │││││┌ @ int.jl:410 within `<='
L192:
	leaq	-3(%rbx), %rdx
	testq	%rdx, %rdx
; │││││└
	jle	L290
	cmpq	%r12, %rbx
	jg	L290
; ││└└└
	movq	(%rsi), %rdx
; ││ @ SIMD.jl:1944 within `getindex'
; ││┌ @ SIMD.jl:1426 within `vload' @ SIMD.jl:1426 @ SIMD.jl:1356 @ SIMD.jl:1356
; │││┌ @ SIMD.jl:1383 within `macro expansion'
	addq	%r9, %rdx
; │└└└
; │┌ @ SIMD.jl:1083 within `+'
; ││┌ @ SIMD.jl:604 within `llvmwrap' @ SIMD.jl:604
; │││┌ @ SIMD.jl:623 within `macro expansion'
	vaddpd	-32(%rdx,%rbx,8), %ymm0, %ymm0
; │└└└
; │┌ @ range.jl:597 within `iterate'
; ││┌ @ promotion.jl:398 within `=='
	leaq	(%rdi,%rbx), %rdx
	addq	$4, %rdx
	addq	$4, %rbx
	cmpq	$4, %rdx
; │└└
	jne	L192
; │┌ @ SIMD.jl:1943 within `getindex'
; ││┌ @ SIMD.jl:1922 within `_preprocessindices'
	movq	%rax, 8(%rsp)
	jmp	L247
; └└└
; ┌ @ SIMD.jl within `vsum'
L243:
	vxorpd	%xmm0, %xmm0, %xmm0
; └
; ┌ @ runtests.jl:575 within `vsum'
; │┌ @ SIMD.jl:1286 within `sum'
; ││┌ @ SIMD.jl:1241 within `llvmwrapreduce'
; │││┌ @ SIMD.jl:1274 within `macro expansion'
L247:
	vextractf128	$1, %ymm0, %xmm1
	vaddpd	%xmm1, %xmm0, %xmm0
	vpermilpd	$1, %xmm0, %xmm1 # xmm1 = xmm0[1,0]
	vaddsd	%xmm1, %xmm0, %xmm0
	movq	24(%rsp), %rax
	movq	%rax, (%r14)
; │└└└
	addq	$40, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	vzeroupper
	retq
; │ @ runtests.jl:573 within `vsum'
; │┌ @ SIMD.jl:1943 within `getindex'
; ││┌ @ SIMD.jl:1922 within `_preprocessindices'
L290:
	movq	%rdx, 8(%rsp)
; │││┌ @ abstractarray.jl:502 within `checkbounds'
; ││││┌ @ subarray.jl:49 within `throw_boundserror'
; │││││┌ @ Base.jl:33 within `getproperty'
	addq	$8, %r15
	movq	%rsi, 32(%rsp)
; │││││└
	movabsq	$__subarray_throw_boundserror, %rax
	movabsq	$jl_system_image_data, %rdi
	leaq	8(%rsp), %r9
	movq	%r15, %rdx
	vzeroupper
	callq	*%rax
	ud2
; │└└└└
; │ @ runtests.jl:569 within `vsum'
L339:
	movabsq	$jl_gc_pool_alloc, %rax
	movq	%r14, %rdi
	movl	$1400, %esi             # imm = 0x578
	movl	$16, %edx
	callq	*%rax
	movabsq	$jl_system_image_data, %rcx
	movq	%rcx, -8(%rax)
	movabsq	$139998417538704, %rcx  # imm = 0x7F53EBF24E90
	movq	%rcx, (%rax)
	movq	%rax, 32(%rsp)
	movabsq	$jl_throw, %rcx
	movq	%rax, %rdi
	callq	*%rcx
	nopl	(%rax,%rax)
; └
Test Summary: | Pass  Total
SIMD          |  817    817
   Testing SIMD tests passed 
