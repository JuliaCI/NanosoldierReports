Julia Version 1.4.0-DEV.661
Commit 50bc3ea150 (2019-12-23 18:40 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-8.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia

 Resolving package versions...
 Installed Requires ─────────────────── v1.0.0
 Installed LinearDynamicsModels ─────── v1.0.1
 Installed OpenSpecFun_jll ──────────── v0.5.3+1
 Installed DifferentialDynamicsModels ─ v1.0.1
 Installed OrderedCollections ───────── v1.1.0
 Installed DiffResults ──────────────── v1.0.2
 Installed SpecialFunctions ─────────── v0.9.0
 Installed MacroTools ───────────────── v0.5.3
 Installed DiffRules ────────────────── v1.0.0
 Installed NaNMath ──────────────────── v0.3.3
 Installed StaticArrays ─────────────── v0.12.1
 Installed CommonSubexpressions ─────── v0.2.0
 Installed DataStructures ───────────── v0.17.6
 Installed ForwardDiff ──────────────── v0.10.8
  Updating `~/.julia/environments/v1.4/Project.toml`
  [93c30095] + LinearDynamicsModels v1.0.1
  Updating `~/.julia/environments/v1.4/Manifest.toml`
  [bbf7d656] + CommonSubexpressions v0.2.0
  [864edb3b] + DataStructures v0.17.6
  [163ba53b] + DiffResults v1.0.2
  [b552c78f] + DiffRules v1.0.0
  [cb52cc87] + DifferentialDynamicsModels v1.0.1
  [f6369f11] + ForwardDiff v0.10.8
  [93c30095] + LinearDynamicsModels v1.0.1
  [1914dd2f] + MacroTools v0.5.3
  [77ba4419] + NaNMath v0.3.3
  [efe28fd5] + OpenSpecFun_jll v0.5.3+1
  [bac558e1] + OrderedCollections v1.1.0
  [ae029012] + Requires v1.0.0
  [276daf66] + SpecialFunctions v0.9.0
  [90137ffa] + StaticArrays v0.12.1
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8ba89e20] + Distributed 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
   Testing LinearDynamicsModels
Path `/home/pkgeval/.julia/packages/LinearDynamicsModels/zCSBW` exists and looks like the correct package. Using existing path.
 Installed RecipesBase ──── v0.7.0
 Installed VersionParsing ─ v1.2.0
 Installed JSON ─────────── v0.21.0
 Installed Parsers ──────── v0.3.10
 Installed PyCall ───────── v1.91.2
 Installed Conda ────────── v1.3.0
 Installed SymPy ────────── v1.0.10
  Updating `/tmp/jl_SzhvQG/Project.toml`
  [93c30095] + LinearDynamicsModels v1.0.1 [`~/.julia/packages/LinearDynamicsModels/zCSBW`]
  [24249f21] + SymPy v1.0.10
  Updating `/tmp/jl_SzhvQG/Manifest.toml`
  [8f4d0f93] + Conda v1.3.0
  [682c06a0] + JSON v0.21.0
  [93c30095] ~ LinearDynamicsModels v1.0.1 ⇒ v1.0.1 [`~/.julia/packages/LinearDynamicsModels/zCSBW`]
  [69de0a69] + Parsers v0.3.10
  [438e738f] + PyCall v1.91.2
  [3cdcf5f2] + RecipesBase v0.7.0
  [24249f21] + SymPy v1.0.10
  [81def892] + VersionParsing v1.2.0
  [a63ad114] + Mmap 
  Building Conda ─→ `~/.julia/packages/Conda/kLXeC/deps/build.log`
Path `/home/pkgeval/.julia/packages/Conda/kLXeC` exists and looks like the correct package. Using existing path.
  Updating `/tmp/jl_Wzumlo/Project.toml`
  [8f4d0f93] + Conda v1.3.0 [`~/.julia/packages/Conda/kLXeC`]
  Updating `/tmp/jl_Wzumlo/Manifest.toml`
  [8f4d0f93] ~ Conda v1.3.0 ⇒ v1.3.0 [`~/.julia/packages/Conda/kLXeC`]
  Building PyCall → `~/.julia/packages/PyCall/ttONZ/deps/build.log`
Path `/home/pkgeval/.julia/packages/PyCall/ttONZ` exists and looks like the correct package. Using existing path.
  Updating `/tmp/jl_9eehq3/Project.toml`
  [438e738f] + PyCall v1.91.2 [`~/.julia/packages/PyCall/ttONZ`]
  Updating `/tmp/jl_9eehq3/Manifest.toml`
  [438e738f] ~ PyCall v1.91.2 ⇒ v1.91.2 [`~/.julia/packages/PyCall/ttONZ`]
Running sandbox
Status `/tmp/jl_SzhvQG/Project.toml`
  [cb52cc87] DifferentialDynamicsModels v1.0.1
  [f6369f11] ForwardDiff v0.10.8
  [93c30095] LinearDynamicsModels v1.0.1 [`~/.julia/packages/LinearDynamicsModels/zCSBW`]
  [1914dd2f] MacroTools v0.5.3
  [ae029012] Requires v1.0.0
  [90137ffa] StaticArrays v0.12.1
  [24249f21] SymPy v1.0.10
  [37e2e46d] LinearAlgebra 
  [8dfed614] Test 
ERROR: LoadError: InitError: PyError (PyImport_ImportModule

The Python package sympy could not be found by pyimport. Usually this means
that you did not install sympy in the Python version being used by PyCall.

PyCall is currently configured to use the Python version at:

/usr/bin/python3

and you should use whatever mechanism you usually use (apt-get, pip, conda,
etcetera) to install the Python package containing the sympy module.

One alternative is to re-configure PyCall to use a different Python
version on your system: set ENV["PYTHON"] to the path/name of the python
executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.

Another alternative is to configure PyCall to use a Julia-specific Python
distribution via the Conda.jl package (which installs a private Anaconda
Python distribution), which has the advantage that packages can be installed
and kept up-to-date via Julia.  As explained in the PyCall documentation,
set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
To install the sympy module, you can use `pyimport_conda("sympy", PKG)`,
where PKG is the Anaconda package the contains the module sympy,
or alternatively you can use the Conda package directly (via
`using Conda` followed by `Conda.add` etcetera).

) <class 'ModuleNotFoundError'>
ModuleNotFoundError("No module named 'sympy'",)

Stacktrace:
 [1] pyimport(::String) at /home/pkgeval/.julia/packages/PyCall/ttONZ/src/PyCall.jl:544
 [2] pyimport_conda(::String, ::String, ::String) at /home/pkgeval/.julia/packages/PyCall/ttONZ/src/PyCall.jl:702
 [3] pyimport_conda at /home/pkgeval/.julia/packages/PyCall/ttONZ/src/PyCall.jl:701 [inlined]
 [4] __init__() at /home/pkgeval/.julia/packages/SymPy/Xp6GQ/src/SymPy.jl:99
 [5] _include_from_serialized(::String, ::Array{Any,1}) at ./loading.jl:697
 [6] _require_from_serialized(::String) at ./loading.jl:748
 [7] _require(::Base.PkgId) at ./loading.jl:1039
 [8] require(::Base.PkgId) at ./loading.jl:927
 [9] require(::Module, ::Symbol) at ./loading.jl:922
 [10] include(::String) at ./client.jl:439
 [11] top-level scope at none:6
during initialization of module SymPy
in expression starting at /home/pkgeval/.julia/packages/LinearDynamicsModels/zCSBW/test/runtests.jl:24
err = ProcessFailedException(Base.Process[Process(`/opt/julia/bin/julia -Cnative -J/opt/julia/lib/julia/sys.so -g1 --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --inline=yes --startup-file=no --track-allocation=none --eval 'append!(empty!(Base.DEPOT_PATH), ["/home/pkgeval/.julia", "/opt/julia/local/share/julia", "/opt/julia/share/julia", "/usr/local/share/julia"])
append!(empty!(Base.DL_LOAD_PATH), String[])

cd("/home/pkgeval/.julia/packages/LinearDynamicsModels/zCSBW/test")
append!(empty!(ARGS), String[])
include("/home/pkgeval/.julia/packages/LinearDynamicsModels/zCSBW/test/runtests.jl")
'`, ProcessExited(1))])
ERROR: Package LinearDynamicsModels errored during testing
Stacktrace:
 [1] pkgerror(::String, ::Vararg{String,N} where N) at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/Types.jl:54
 [2] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/Operations.jl:1475
 [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:313
 [4] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:300
 [5] #test#66 at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:294 [inlined]
 [6] test at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:294 [inlined]
 [7] #test#65 at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:293 [inlined]
 [8] test at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:293 [inlined]
 [9] test(::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:292
 [10] test(::String) at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:292
 [11] top-level scope at none:12
