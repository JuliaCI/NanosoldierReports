Julia Version 1.5.1-pre.0
Commit f0b8c76f6f (2020-08-02 04:55 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed CpuId ─────────────── v0.2.2
  Installed SIMDPirates ───────── v0.8.24
  Installed UnPack ────────────── v1.0.2
  Installed VectorizationBase ─── v0.12.32
  Installed OffsetArrays ──────── v1.1.2
  Installed SLEEFPirates ──────── v0.5.5
  Installed DocStringExtensions ─ v0.8.2
  Installed LoopVectorization ─── v0.8.24
Updating `~/.julia/environments/v1.5/Project.toml`
  [bdcacae8] + LoopVectorization v0.8.24
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [adafc99b] + CpuId v0.2.2
  [ffbed154] + DocStringExtensions v0.8.2
  [bdcacae8] + LoopVectorization v0.8.24
  [6fe1bfb0] + OffsetArrays v1.1.2
  [21efa798] + SIMDPirates v0.8.24
  [476501e8] + SLEEFPirates v0.5.5
  [3a884ed6] + UnPack v1.0.2
  [3d5dd08c] + VectorizationBase v0.12.32
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
   Building SLEEFPirates → `~/.julia/packages/SLEEFPirates/jGsib/deps/build.log`
    Testing LoopVectorization
Status `/tmp/jl_sP2vjJ/Project.toml`
  [ffbed154] DocStringExtensions v0.8.2
  [bdcacae8] LoopVectorization v0.8.24
  [6fe1bfb0] OffsetArrays v1.1.2
  [21efa798] SIMDPirates v0.8.24
  [476501e8] SLEEFPirates v0.5.5
  [3a884ed6] UnPack v1.0.2
  [3d5dd08c] VectorizationBase v0.12.32
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [8dfed614] Test
Status `/tmp/jl_sP2vjJ/Manifest.toml`
  [adafc99b] CpuId v0.2.2
  [ffbed154] DocStringExtensions v0.8.2
  [bdcacae8] LoopVectorization v0.8.24
  [6fe1bfb0] OffsetArrays v1.1.2
  [21efa798] SIMDPirates v0.8.24
  [476501e8] SLEEFPirates v0.5.5
  [3a884ed6] UnPack v1.0.2
  [3d5dd08c] VectorizationBase v0.12.32
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
LoopVectorization.REGISTER_COUNT = 32
#= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/printmethods.jl:2 =# @__LINE__() = 2
 10.031585 seconds (4.96 M allocations: 253.370 MiB, 4.69% gc time)
(Float64, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/fallback.jl:4 =# @__LINE__()) = (Float64, 4)
 25.252776 seconds (12.28 M allocations: 620.344 MiB, 2.59% gc time)
  0.203053 seconds (69.39 k allocations: 3.810 MiB)
 10.333838 seconds (8.75 M allocations: 447.238 MiB, 1.66% gc time)
  1.973154 seconds (2.19 M allocations: 110.441 MiB, 2.20% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/offsetarrays.jl:204 =# @__LINE__()) = (Float32, 204)
r = -1:1
r = -2:2
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/offsetarrays.jl:204 =# @__LINE__()) = (Float64, 204)
r = -1:1
r = -2:2
743.309921 seconds (324.05 M allocations: 24.470 GiB, 3.31% gc time)
(Float64, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/tensors.jl:51 =# @__LINE__()) = (Float64, 51)
 21.287232 seconds (13.75 M allocations: 750.933 MiB, 3.85% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/map.jl:4 =# @__LINE__()) = (Float32, 4)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/map.jl:4 =# @__LINE__()) = (Float64, 4)
  7.924855 seconds (7.86 M allocations: 398.678 MiB, 2.63% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/filter.jl:4 =# @__LINE__()) = (Float32, 4)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/filter.jl:4 =# @__LINE__()) = (Float64, 4)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/filter.jl:4 =# @__LINE__()) = (Int32, 4)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/filter.jl:4 =# @__LINE__()) = (Int64, 4)
  1.096844 seconds (709.61 k allocations: 37.115 MiB, 1.75% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/mapreduce.jl:19 =# @__LINE__()) = (Int32, 19)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/mapreduce.jl:19 =# @__LINE__()) = (Int64, 19)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/mapreduce.jl:19 =# @__LINE__()) = (Float32, 19)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/mapreduce.jl:19 =# @__LINE__()) = (Float64, 19)
198.356591 seconds (449.29 M allocations: 29.146 GiB, 6.43% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/ifelsemasks.jl:352 =# @__LINE__()) = (Float32, 352)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/ifelsemasks.jl:352 =# @__LINE__()) = (Float64, 352)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/ifelsemasks.jl:352 =# @__LINE__()) = (Int32, 352)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/ifelsemasks.jl:352 =# @__LINE__()) = (Int64, 352)
 84.662594 seconds (55.81 M allocations: 2.797 GiB, 5.84% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/dot.jl:234 =# @__LINE__()) = (Float32, 234)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/dot.jl:234 =# @__LINE__()) = (Float64, 234)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/dot.jl:234 =# @__LINE__()) = (Int32, 234)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/dot.jl:234 =# @__LINE__()) = (Int64, 234)
 53.734146 seconds (44.66 M allocations: 2.274 GiB, 3.74% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/special.jl:339 =# @__LINE__()) = (Float32, 339)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/special.jl:339 =# @__LINE__()) = (Float64, 339)
 18.500475 seconds (13.12 M allocations: 633.680 MiB, 3.51% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/gemv.jl:211 =# @__LINE__()) = (Float32, 211)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/gemv.jl:211 =# @__LINE__()) = (Float64, 211)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/gemv.jl:211 =# @__LINE__()) = (Int32, 211)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/gemv.jl:211 =# @__LINE__()) = (Int64, 211)
 66.168494 seconds (52.30 M allocations: 2.383 GiB, 2.21% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/miscellaneous.jl:789 =# @__LINE__()) = (Float32, 789)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/miscellaneous.jl:789 =# @__LINE__()) = (Float64, 789)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/miscellaneous.jl:1066 =# @__LINE__()) = (Float32, 1066)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/miscellaneous.jl:1066 =# @__LINE__()) = (Float64, 1066)
130.658934 seconds (127.90 M allocations: 6.813 GiB, 7.30% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/copy.jl:129 =# @__LINE__()) = (Float32, 129)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/copy.jl:129 =# @__LINE__()) = (Float64, 129)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/copy.jl:129 =# @__LINE__()) = (Int32, 129)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/copy.jl:129 =# @__LINE__()) = (Int64, 129)
 12.064953 seconds (9.12 M allocations: 448.401 MiB, 2.62% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/broadcast.jl:5 =# @__LINE__()) = (Float32, 5)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/broadcast.jl:5 =# @__LINE__()) = (Float64, 5)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/broadcast.jl:5 =# @__LINE__()) = (Int32, 5)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/broadcast.jl:5 =# @__LINE__()) = (Int64, 5)
395.688546 seconds (140.81 M allocations: 7.910 GiB, 2.96% gc time)
OPS = Tuple{:numericconstant,Symbol("##zero#14131"),LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x01, 0x02),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000032, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x03),:LoopVectorization,:vfmadd_fast,LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000020301, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:identity,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000004, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x04),:LoopVectorization,:vadd,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000605, LoopVectorization.compute, 0x00, 0x04),:LoopVectorization,:setindex!,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000007, LoopVectorization.memstore, 0x03, 0x05)}
ARF = Tuple{LoopVectorization.ArrayRefStruct{:A,Symbol("##vptr##_A")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:B,Symbol("##vptr##_B")}(0x0000000000000101, 0x0000000000000302, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:C,Symbol("##vptr##_C")}(0x0000000000000101, 0x0000000000000102, 0x0000000000000000)}
AM = Tuple{0,Tuple{},Tuple{},Tuple{},Tuple{},Tuple{(1, LoopVectorization.IntOrFloat)},Tuple{}}
LPSYM = Tuple{:m,:n,:k}
LB = Tuple{VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1}}
vargs = (VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007f1f6878bbd0, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007f1f6878be00, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007f1f6878be70, (16,)))
OPS = Tuple{:numericconstant,Symbol("##zero#14131"),LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x01, 0x02),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000032, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x03),:LoopVectorization,:vfmadd_fast,LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000020301, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:identity,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000004, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x04),:LoopVectorization,:vadd,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000605, LoopVectorization.compute, 0x00, 0x04),:LoopVectorization,:setindex!,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000007, LoopVectorization.memstore, 0x03, 0x05)}
ARF = Tuple{LoopVectorization.ArrayRefStruct{:A,Symbol("##vptr##_A")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:B,Symbol("##vptr##_B")}(0x0000000000000101, 0x0000000000000302, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:C,Symbol("##vptr##_C")}(0x0000000000000101, 0x0000000000000102, 0x0000000000000000)}
AM = Tuple{0,Tuple{},Tuple{},Tuple{},Tuple{},Tuple{(1, LoopVectorization.IntOrFloat)},Tuple{}}
LPSYM = Tuple{:m,:n,:k}
LB = Tuple{VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1}}
vargs = (VectorizationBase.RowMajorStridedPointer{Float64,1}(Ptr{Float64} @0x00007f1ef21c37e0, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007f1ef21c3850, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007f1ef21d3d20, (16,)))
OPS = Tuple{:numericconstant,Symbol("##zero#14131"),LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x01, 0x02),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000032, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x03),:LoopVectorization,:vfmadd_fast,LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000020301, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:identity,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000004, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x04),:LoopVectorization,:vadd,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000605, LoopVectorization.compute, 0x00, 0x04),:LoopVectorization,:setindex!,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000007, LoopVectorization.memstore, 0x03, 0x05)}
ARF = Tuple{LoopVectorization.ArrayRefStruct{:A,Symbol("##vptr##_A")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:B,Symbol("##vptr##_B")}(0x0000000000000101, 0x0000000000000302, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:C,Symbol("##vptr##_C")}(0x0000000000000101, 0x0000000000000102, 0x0000000000000000)}
AM = Tuple{0,Tuple{},Tuple{},Tuple{},Tuple{},Tuple{(1, LoopVectorization.IntOrFloat)},Tuple{}}
LPSYM = Tuple{:m,:n,:k}
LB = Tuple{VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1}}
vargs = (VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007f1ef2f0e200, (16,)), VectorizationBase.RowMajorStridedPointer{Float64,1}(Ptr{Float64} @0x00007f1ef2f0e270, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007f1ef2f0e2e0, (16,)))
OPS = Tuple{:numericconstant,Symbol("##zero#14131"),LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x01, 0x02),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000032, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x03),:LoopVectorization,:vfmadd_fast,LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000020301, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:identity,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000004, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x04),:LoopVectorization,:vadd,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000605, LoopVectorization.compute, 0x00, 0x04),:LoopVectorization,:setindex!,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000007, LoopVectorization.memstore, 0x03, 0x05)}
ARF = Tuple{LoopVectorization.ArrayRefStruct{:A,Symbol("##vptr##_A")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:B,Symbol("##vptr##_B")}(0x0000000000000101, 0x0000000000000302, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:C,Symbol("##vptr##_C")}(0x0000000000000101, 0x0000000000000102, 0x0000000000000000)}
AM = Tuple{0,Tuple{},Tuple{},Tuple{},Tuple{},Tuple{(1, LoopVectorization.IntOrFloat)},Tuple{}}
LPSYM = Tuple{:m,:n,:k}
LB = Tuple{VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1}}
vargs = (VectorizationBase.RowMajorStridedPointer{Float64,1}(Ptr{Float64} @0x00007f1ef276b620, (16,)), VectorizationBase.RowMajorStridedPointer{Float64,1}(Ptr{Float64} @0x00007f1ef276b690, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007f1ef276b700, (16,)))
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/gemm.jl:650 =# @__LINE__()) = (Float32, 650)
100.424936 seconds (49.39 M allocations: 3.371 GiB, 5.86% gc time)
 12.510626 seconds (9.39 M allocations: 462.084 MiB)
 18.331979 seconds (12.35 M allocations: 675.013 MiB)
 11.752790 seconds (8.96 M allocations: 467.747 MiB, 8.40% gc time)
 21.497979 seconds (14.27 M allocations: 878.211 MiB, 5.66% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/gemm.jl:650 =# @__LINE__()) = (Float64, 650)
101.115078 seconds (48.91 M allocations: 3.348 GiB, 5.17% gc time)
 12.462359 seconds (9.32 M allocations: 459.497 MiB, 6.35% gc time)
 17.638320 seconds (12.24 M allocations: 670.031 MiB, 2.18% gc time)
  9.502270 seconds (8.91 M allocations: 465.877 MiB, 3.54% gc time)
 21.111082 seconds (14.15 M allocations: 871.547 MiB, 5.49% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/gemm.jl:650 =# @__LINE__()) = (Int32, 650)
126.486395 seconds (54.24 M allocations: 3.568 GiB, 3.95% gc time)
 13.305621 seconds (9.87 M allocations: 477.899 MiB, 4.77% gc time)
 19.057768 seconds (11.21 M allocations: 607.531 MiB, 2.02% gc time)
 11.939142 seconds (9.42 M allocations: 482.956 MiB, 2.48% gc time)
 25.001452 seconds (14.56 M allocations: 882.940 MiB, 4.56% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/OZUlx/test/gemm.jl:650 =# @__LINE__()) = (Int64, 650)
130.519514 seconds (54.16 M allocations: 3.565 GiB, 3.44% gc time)
 14.027719 seconds (9.83 M allocations: 477.109 MiB, 2.78% gc time)
 20.308400 seconds (11.18 M allocations: 606.163 MiB, 3.99% gc time)
 13.887100 seconds (9.40 M allocations: 481.907 MiB, 2.82% gc time)
 24.795894 seconds (14.56 M allocations: 882.856 MiB, 5.36% gc time)
734.093164 seconds (388.68 M allocations: 23.604 GiB, 4.21% gc time)
Test Summary:        | Pass  Total
LoopVectorization.jl | 1723   1723
2516.609465 seconds (1.66 G allocations: 103.077 GiB, 4.03% gc time)
    Testing LoopVectorization tests passed 
