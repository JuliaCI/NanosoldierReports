Julia Version 1.5.1-pre.0
Commit f0b8c76f6f (2020-08-02 04:55 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed YaoAPI ─────── v0.1.0
  Installed TimerOutputs ─ v0.5.6
  Installed ExprTools ──── v0.1.1
  Installed MacroTools ─── v0.5.5
  Installed LuxurySparse ─ v0.6.4
  Installed IRTools ────── v0.3.3
  Installed StaticArrays ─ v0.12.4
  Installed YaoLang ────── v0.2.1
Updating `~/.julia/environments/v1.5/Project.toml`
  [77e32715] + YaoLang v0.2.1
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [e2ba6199] + ExprTools v0.1.1
  [7869d1d1] + IRTools v0.3.3
  [d05aeea4] + LuxurySparse v0.6.4
  [1914dd2f] + MacroTools v0.5.5
  [90137ffa] + StaticArrays v0.12.4
  [a759f4b9] + TimerOutputs v0.5.6
  [0843a435] + YaoAPI v0.1.0
  [77e32715] + YaoLang v0.2.1
  [2a0f44e3] + Base64
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [de0858da] + Printf
  [9a3f8284] + Random
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [4ec0a83e] + Unicode
    Testing YaoLang
Status `/tmp/jl_P6UEL5/Project.toml`
  [e2ba6199] ExprTools v0.1.1
  [7a1cc6ca] FFTW v1.2.2
  [7869d1d1] IRTools v0.3.3
  [d05aeea4] LuxurySparse v0.6.4
  [a759f4b9] TimerOutputs v0.5.6
  [0843a435] YaoAPI v0.1.0
  [e600142f] YaoArrayRegister v0.7.1
  [77e32715] YaoLang v0.2.1
  [37e2e46d] LinearAlgebra
  [8dfed614] Test
Status `/tmp/jl_P6UEL5/Manifest.toml`
  [621f4979] AbstractFFTs v0.5.0
  [50ba71b6] BitBasis v0.7.0
  [9a962f9c] DataAPI v1.3.0
  [864edb3b] DataStructures v0.17.20
  [e2ba6199] ExprTools v0.1.1
  [7a1cc6ca] FFTW v1.2.2
  [f5851436] FFTW_jll v3.3.9+5
  [7869d1d1] IRTools v0.3.3
  [1d5cc7b8] IntelOpenMP_jll v2018.0.3+0
  [f1f30506] LegibleLambdas v0.2.0
  [d05aeea4] LuxurySparse v0.6.4
  [856f044c] MKL_jll v2020.2.254+0
  [d8e11817] MLStyle v0.4.6
  [1914dd2f] MacroTools v0.5.5
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.3.0
  [189a3867] Reexport v0.2.0
  [a2af1166] SortingAlgorithms v0.3.1
  [90137ffa] StaticArrays v0.12.4
  [2913bbd2] StatsBase v0.33.0
  [a759f4b9] TimerOutputs v0.5.6
  [9d95972d] TupleTools v1.2.0
  [0843a435] YaoAPI v0.1.0
  [e600142f] YaoArrayRegister v0.7.1
  [a8f54c17] YaoBase v0.14.1
  [77e32715] YaoLang v0.2.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
WARNING: could not import Compiler.just_construct_ssa into Wrap
Test Summary: | Pass  Total
runtime       |   29     29
circuit qft(n::Int)
1:
  %1 = %new%(##register#253)
  %2 = gate(H, 1)
  %3 = 2:@n
  %4 = Base.iterate(%3)
  %5 = @_1 = %4
  %6 = @_1 === nothing
  %7 = Base.not_int(%6)
  br 3 unless %7
2:
  %8 = @_1
  %9 = Core.getfield(%8, 1)
  %10 = @_2 = %9
  %11 = Core.getfield(%8, 2)
  %12 = 2π
  %13 = 2 ^ @_2
  %14 = %12 / %13
  %15 = shift(%14)
  %16 = ctrl(%15, 1, @_2)
  %17 = Base.iterate(%3, %11)
  %18 = @_1 = %17
  %19 = @_1 === nothing
  %20 = Base.not_int(%19)
  br 3 unless %20
  br 2
3:
  %21 = @n > 1
  br 5 unless %21
4:
  %22 = @n - 1
  %23 = qft(%22)
  %24 = 2:@n
  %25 = gate(%23, %24)
5:
  return nothing
circuit single_qubit_layer(configs::AbstractVector, gateset=(X, Y, Z))
1:
  %1 = %new%(##register#284)
  %2 = $(Expr(:inbounds, true))
  %3 = size(@configs, 1)
  %4 = 1:%3
  %5 = Base.iterate(%4)
  %6 = @_2 = %5
  %7 = @_2 === nothing
  %8 = Base.not_int(%7)
  br 5 unless %8
2:
  %9 = @_2
  %10 = Core.getfield(%9, 1)
  %11 = @_3 = %10
  %12 = Core.getfield(%9, 2)
  %13 = Base.getindex(@configs, @_3)
  %14 = @_4 = %13
  %15 = @_4 > 0
  br 4 unless %15
3:
  %16 = Base.getindex(@gateset, @_4)
  %17 = gate(%16, @_3)
4:
  %18 = Base.iterate(%4, %12)
  %19 = @_2 = %18
  %20 = @_2 === nothing
  %21 = Base.not_int(%20)
  br 5 unless %21
  br 2
5:
  %22 = @_1 = nothing
  %23 = $(Expr(:inbounds, :pop))
  %24 = @_1
  return nothing
Test Summary: | Pass  Total
compiler      |   11     11
    Testing YaoLang tests passed 
