Julia Version 1.5.0-DEV.355
Commit f0636b2b47 (2020-02-27 13:55 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed Parsers ──────────── v0.3.11
  Installed ASDF ─────────────── v1.1.3
  Installed OrderedCollections ─ v1.1.0
  Installed Conda ────────────── v1.4.1
  Installed MacroTools ───────── v0.5.4
  Installed PyCall ───────────── v1.91.3
  Installed JSON ─────────────── v0.21.0
  Installed DataStructures ───── v0.17.10
  Installed URIParser ────────── v0.4.0
  Installed VersionParsing ───── v1.2.0
   Updating `~/.julia/environments/v1.5/Project.toml`
  [686f71d1] + ASDF v1.1.3
   Updating `~/.julia/environments/v1.5/Manifest.toml`
  [686f71d1] + ASDF v1.1.3
  [8f4d0f93] + Conda v1.4.1
  [864edb3b] + DataStructures v0.17.10
  [682c06a0] + JSON v0.21.0
  [1914dd2f] + MacroTools v0.5.4
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.11
  [438e738f] + PyCall v1.91.3
  [30578b45] + URIParser v0.4.0
  [81def892] + VersionParsing v1.2.0
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8ba89e20] + Distributed 
  [b77e0a4c] + InteractiveUtils 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [de0858da] + Printf 
  [9a3f8284] + Random 
  [9e88b42a] + Serialization 
  [6462fe0b] + Sockets 
  [8dfed614] + Test 
  [4ec0a83e] + Unicode 
   Building Conda ─→ `~/.julia/packages/Conda/3rPhK/deps/build.log`
   Building PyCall → `~/.julia/packages/PyCall/kAhnQ/deps/build.log`
   Building ASDF ──→ `~/.julia/packages/ASDF/0SzlD/deps/build.log`
┌ Error: Error building `ASDF`: 
│ ERROR: LoadError: PyError (PyImport_ImportModule
│ 
│ The Python package asdf could not be found by pyimport. Usually this means
│ that you did not install asdf in the Python version being used by PyCall.
│ 
│ PyCall is currently configured to use the Python version at:
│ 
│ /usr/bin/python3
│ 
│ and you should use whatever mechanism you usually use (apt-get, pip, conda,
│ etcetera) to install the Python package containing the asdf module.
│ 
│ One alternative is to re-configure PyCall to use a different Python
│ version on your system: set ENV["PYTHON"] to the path/name of the python
│ executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.
│ 
│ Another alternative is to configure PyCall to use a Julia-specific Python
│ distribution via the Conda.jl package (which installs a private Anaconda
│ Python distribution), which has the advantage that packages can be installed
│ and kept up-to-date via Julia.  As explained in the PyCall documentation,
│ set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
│ To install the asdf module, you can use `pyimport_conda("asdf", PKG)`,
│ where PKG is the Anaconda package the contains the module asdf,
│ or alternatively you can use the Conda package directly (via
│ `using Conda` followed by `Conda.add` etcetera).
│ 
│ ) <class 'ModuleNotFoundError'>
│ ModuleNotFoundError("No module named 'asdf'",)
│ 
│ Stacktrace:
│  [1] pyimport(::String) at /home/pkgeval/.julia/packages/PyCall/kAhnQ/src/PyCall.jl:536
│  [2] pyimport_conda(::String, ::String, ::String) at /home/pkgeval/.julia/packages/PyCall/kAhnQ/src/PyCall.jl:694
│  [3] top-level scope at /home/pkgeval/.julia/packages/ASDF/0SzlD/deps/build.jl:6
│  [4] include(::String) at ./client.jl:441
│  [5] top-level scope at none:5
│ in expression starting at /home/pkgeval/.julia/packages/ASDF/0SzlD/deps/build.jl:6
└ @ Pkg.Operations /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Operations.jl:892
    Testing ASDF
Status `/tmp/jl_cNpjcb/Manifest.toml`
  [686f71d1] ASDF v1.1.3
  [8f4d0f93] Conda v1.4.1
  [864edb3b] DataStructures v0.17.10
  [682c06a0] JSON v0.21.0
  [1914dd2f] MacroTools v0.5.4
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v0.3.11
  [438e738f] PyCall v1.91.3
  [30578b45] URIParser v0.4.0
  [81def892] VersionParsing v1.2.0
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8ba89e20] Distributed 
  [b77e0a4c] InteractiveUtils 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [de0858da] Printf 
  [9a3f8284] Random 
  [9e88b42a] Serialization 
  [6462fe0b] Sockets 
  [8dfed614] Test 
  [4ec0a83e] Unicode 
ERROR: LoadError: InitError: PyError (PyImport_ImportModule

The Python package asdf could not be found by pyimport. Usually this means
that you did not install asdf in the Python version being used by PyCall.

PyCall is currently configured to use the Python version at:

/usr/bin/python3

and you should use whatever mechanism you usually use (apt-get, pip, conda,
etcetera) to install the Python package containing the asdf module.

One alternative is to re-configure PyCall to use a different Python
version on your system: set ENV["PYTHON"] to the path/name of the python
executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.

Another alternative is to configure PyCall to use a Julia-specific Python
distribution via the Conda.jl package (which installs a private Anaconda
Python distribution), which has the advantage that packages can be installed
and kept up-to-date via Julia.  As explained in the PyCall documentation,
set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
To install the asdf module, you can use `pyimport_conda("asdf", PKG)`,
where PKG is the Anaconda package the contains the module asdf,
or alternatively you can use the Conda package directly (via
`using Conda` followed by `Conda.add` etcetera).

) <class 'ModuleNotFoundError'>
ModuleNotFoundError("No module named 'asdf'",)

Stacktrace:
 [1] pyimport(::String) at /home/pkgeval/.julia/packages/PyCall/kAhnQ/src/PyCall.jl:536
 [2] __init__() at /home/pkgeval/.julia/packages/ASDF/0SzlD/src/ASDF.jl:10
 [3] _include_from_serialized(::String, ::Array{Any,1}) at ./loading.jl:697
 [4] _require_from_serialized(::String) at ./loading.jl:748
 [5] _require(::Base.PkgId) at ./loading.jl:1039
 [6] require(::Base.PkgId) at ./loading.jl:927
 [7] require(::Module, ::Symbol) at ./loading.jl:922
 [8] include(::String) at ./client.jl:441
 [9] top-level scope at none:6
during initialization of module ASDF
in expression starting at /home/pkgeval/.julia/packages/ASDF/0SzlD/test/runtests.jl:4
ERROR: Package ASDF errored during testing
Stacktrace:
 [1] pkgerror(::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Types.jl:53
 [2] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Operations.jl:1503
 [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:316
 [4] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:303
 [5] #test#68 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:297 [inlined]
 [6] test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:297 [inlined]
 [7] #test#67 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:296 [inlined]
 [8] test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:296 [inlined]
 [9] test(::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:295
 [10] test(::String) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:295
 [11] top-level scope at none:13
