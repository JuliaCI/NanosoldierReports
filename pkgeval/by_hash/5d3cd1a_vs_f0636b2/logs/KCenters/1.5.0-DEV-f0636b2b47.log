Julia Version 1.5.0-DEV.355
Commit f0636b2b47 (2020-02-27 13:55 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed Missings ──────────────────── v0.4.3
  Installed DataValueInterfaces ───────── v1.0.0
  Installed DataAPI ───────────────────── v1.1.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed Compat ────────────────────── v3.6.0
  Installed KCenters ──────────────────── v0.2.2
  Installed MLDataUtils ───────────────── v0.5.0
  Installed CategoricalArrays ─────────── v0.7.7
  Installed Parsers ───────────────────── v0.3.11
  Installed MappedArrays ──────────────── v0.2.2
  Installed Reexport ──────────────────── v0.2.0
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed MLDataPattern ─────────────── v0.5.0
  Installed StatsBase ─────────────────── v0.32.1
  Installed DataFrames ────────────────── v0.20.2
  Installed InvertedIndices ───────────── v1.0.0
  Installed Tables ────────────────────── v1.0.2
  Installed PooledArrays ──────────────── v0.5.3
  Installed DataStructures ────────────── v0.17.10
  Installed OrderedCollections ────────── v1.1.0
  Installed SimilaritySearch ──────────── v0.3.19
  Installed LearnBase ─────────────────── v0.2.2
  Installed JSON ──────────────────────── v0.21.0
  Installed MLLabelUtils ──────────────── v0.5.1
  Installed TableTraits ───────────────── v1.0.0
   Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.2
   Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.6.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.10
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.0
  [cc2ba9b6] + MLDataUtils v0.5.0
  [66a33bbf] + MLLabelUtils v0.5.1
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.11
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.1
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.2
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
    Testing KCenters
Status `/tmp/jl_339ACs/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.6.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.10
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.0
  [cc2ba9b6] MLDataUtils v0.5.0
  [66a33bbf] MLLabelUtils v0.5.1
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v0.3.11
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.1
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.2
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0723782532413801
[ Info: 0.9323044313987097
[ Info: 0.8302954188982645
[ Info: 0.5559340282777945
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.3300985757261515
mean(cdnet.distances) = 0.3907185691098372
mean(crand.distances) = 0.35427756562829016
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.50390625, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.50390625,"f1":0.6524822399822404,"seconds":4.328787326812744e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":6.640625,"distances_sum":1555.6742390553572}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3642578125, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.3642578125,"f1":null,"seconds":3.4067779779434204e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":5.6015625,"distances_sum":1114.413022861566}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3466796875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3466796875,"f1":null,"seconds":3.2763928174972534e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":5.6328125,"distances_sum":1059.307347273261}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6416015625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6416015625,"f1":0.7668624777999786,"seconds":4.464760422706604e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":7.390625,"distances_sum":1937.1349076265603}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6416015625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6416015625,"f1":0.7668624777999786,"seconds":4.464760422706604e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":7.390625,"distances_sum":1937.1349076265603}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9352995962370968,"seconds":6.239861249923706e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.796875,"distances_sum":2847.569279308294}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9591346153846158,"seconds":6.018206477165222e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.8828125,"distances_sum":3031.718407137576}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.845703125, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.845703125,"f1":0.9087261696636703,"seconds":5.4854899644851685e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.6640625,"distances_sum":2642.468930089032}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.85546875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.85546875,"f1":0.9156223984348992,"seconds":5.634501576423645e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.796875,"distances_sum":2645.16976568143}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7802734375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7802734375,"f1":0.8652342449217457,"seconds":5.349516868591309e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.609375,"distances_sum":2390.568301489278}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.654296875, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.654296875,"f1":0.7791083916083925,"seconds":4.680827260017395e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":7.5390625,"distances_sum":2026.6421506211755}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9267578125,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9591346153846158,"seconds":6.018206477165222e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.8828125,"distances_sum":3031.718407137576}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9742559523809526,"seconds":6.144866347312927e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.9609375,"distances_sum":3124.3001280998915}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.9375,"f1":0.965218635531136,"seconds":6.109476089477539e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.921875,"distances_sum":3055.000242705863}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9663347069597074,"seconds":6.0442835092544556e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.890625,"distances_sum":3106.567311820018}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9628777472527477,"seconds":6.034970283508301e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.859375,"distances_sum":3081.470864383055}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.953125,"state":{"ssize":7,"bsize":11},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9742559523809526,"seconds":6.144866347312927e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.9609375,"distances_sum":3124.3001280998915}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.953125,"state":{"ssize":7,"bsize":11},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9742559523809526,"seconds":6.144866347312927e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.9609375,"distances_sum":3124.3001280998915}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.23828125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.23828125,"f1":null,"seconds":3.2316893339157104e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":5.828125,"distances_sum":586.6429780048692}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.705078125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.705078125,"f1":0.8160648379398387,"seconds":4.7497451305389404e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":7.703125,"distances_sum":1950.4654845129542}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5390625, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5390625,"f1":null,"seconds":4.198402166366577e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":7.2734375,"distances_sum":1389.5219493324485}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.705078125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.705078125,"f1":0.8160648379398387,"seconds":4.7497451305389404e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":7.703125,"distances_sum":1950.4654845129542}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78515625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.78515625,"f1":0.871815684315685,"seconds":5.111098289489746e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.125,"distances_sum":2238.865311054209}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8603515625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8603515625,"f1":0.9184154387279395,"seconds":5.925074219703674e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.40625,"distances_sum":2536.9302479984694}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76953125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.76953125,"f1":0.8627924159174166,"seconds":6.6086649894714355e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.078125,"distances_sum":2144.0326039171296}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9404647435897441,"seconds":6.798654794692993e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.5546875,"distances_sum":2734.235648042901}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7607421875, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.7607421875,"f1":0.8563394938394947,"seconds":5.8282166719436646e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":7.9140625,"distances_sum":2131.43825895525}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.89453125,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.89453125,"f1":0.9404647435897441,"seconds":6.798654794692993e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.5546875,"distances_sum":2734.235648042901}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9599609375, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.9599609375,"f1":0.97810782967033,"seconds":6.634742021560669e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.9375,"distances_sum":3023.041903793628}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.953125,"f1":0.973717948717949,"seconds":6.24731183052063e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.90625,"distances_sum":2979.0798051415068}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9679544413919418,"seconds":7.078051567077637e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.875,"distances_sum":2941.6785440535746}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9485576923076928,"seconds":6.329268217086792e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.7578125,"distances_sum":2802.6562428428574}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9532483141858149,"seconds":7.310882210731506e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.734375,"distances_sum":2849.226459262761}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9599609375,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9599609375,"f1":0.97810782967033,"seconds":6.634742021560669e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.9375,"distances_sum":3023.041903793628}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9599609375,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9599609375,"f1":0.97810782967033,"seconds":6.634742021560669e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.9375,"distances_sum":3023.041903793628}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.53515625, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.53515625,"f1":0.6804827117327124,"seconds":4.3567270040512085e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":7.1015625,"distances_sum":1411.9734179456284}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.751953125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.751953125,"f1":0.8497949966699976,"seconds":5.256384611129761e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":7.8671875,"distances_sum":2155.161463966829}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.751953125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.751953125,"f1":0.8497949966699976,"seconds":5.256384611129761e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":7.8671875,"distances_sum":2155.161463966829}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9537087912087919,"seconds":5.992129445075989e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.8125,"distances_sum":2773.3293458857934}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9603823260073265,"seconds":6.040558218955994e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.859375,"distances_sum":2827.1309504306105}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9296875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9296875,"f1":0.9603823260073265,"seconds":6.040558218955994e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.859375,"distances_sum":2827.1309504306105}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9619140625, conf: {"ssize":4,"bsize":12}, perf: {"precision":1.0,"recall":0.9619140625,"f1":0.9790006868131871,"seconds":8.402392268180847e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.953125,"distances_sum":2964.093708242048}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":5,"bsize":12}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9736435439560442,"seconds":7.554888725280762e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.8671875,"distances_sum":2944.670240975717}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9711137820512824,"seconds":6.925314664840698e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.890625,"distances_sum":2920.2407624388165}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9719551282051285,"seconds":6.288290023803711e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.859375,"distances_sum":2930.827283888474}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9619140625,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9790006868131871,"seconds":8.402392268180847e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.953125,"distances_sum":2964.093708242048}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9619140625,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9790006868131871,"seconds":8.402392268180847e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.953125,"distances_sum":2964.093708242048}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7763671875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7763671875,"f1":0.8680064726939736,"seconds":5.556270480155945e-6,"exhaustive_search_seconds":1.7657876014709473e-6,"evaluations":7.9296875,"distances_sum":2133.1815662284384}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7626953125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7626953125,"f1":0.8543825965700974,"seconds":3.974884748458862e-6,"exhaustive_search_seconds":1.7657876014709473e-6,"evaluations":7.90625,"distances_sum":2105.569514854994}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.673828125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.673828125,"f1":0.7939321095571104,"seconds":3.471970558166504e-6,"exhaustive_search_seconds":1.7657876014709473e-6,"evaluations":7.546875,"distances_sum":1769.6116286421818}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7763671875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7763671875,"f1":0.8680064726939736,"seconds":5.556270480155945e-6,"exhaustive_search_seconds":1.7657876014709473e-6,"evaluations":7.9296875,"distances_sum":2133.1815662284384}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9515510531135537,"seconds":5.418434739112854e-6,"exhaustive_search_seconds":1.7657876014709473e-6,"evaluations":8.734375,"distances_sum":2774.3838983002843}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9622424450549456,"seconds":6.204470992088318e-6,"exhaustive_search_seconds":1.7657876014709473e-6,"evaluations":8.828125,"distances_sum":2832.701168104367}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84765625, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.84765625,"f1":0.9116446053946062,"seconds":5.710870027542114e-6,"exhaustive_search_seconds":1.7657876014709473e-6,"evaluations":8.3125,"distances_sum":2462.750125206073}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9557864010989017,"seconds":6.346032023429871e-6,"exhaustive_search_seconds":1.7657876014709473e-6,"evaluations":8.765625,"distances_sum":2804.2396471658744}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83203125, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.83203125,"f1":0.9020776098901104,"seconds":5.68293035030365e-6,"exhaustive_search_seconds":1.7657876014709473e-6,"evaluations":8.28125,"distances_sum":2403.0887415786765}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.796875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.796875,"f1":0.8800454753579762,"seconds":5.258247256278992e-6,"exhaustive_search_seconds":1.7657876014709473e-6,"evaluations":8.0078125,"distances_sum":2236.9851566480147}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.931640625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9622424450549456,"seconds":6.204470992088318e-6,"exhaustive_search_seconds":1.7657876014709473e-6,"evaluations":8.828125,"distances_sum":2832.701168104367}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9657967032967036,"seconds":6.245449185371399e-6,"exhaustive_search_seconds":1.7657876014709473e-6,"evaluations":8.8203125,"distances_sum":2894.9273757214}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9758756868131873,"seconds":6.556510925292969e-6,"exhaustive_search_seconds":1.7657876014709473e-6,"evaluations":8.9140625,"distances_sum":2948.41186536247}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9716346153846158,"seconds":6.4801424741744995e-6,"exhaustive_search_seconds":1.7657876014709473e-6,"evaluations":8.8671875,"distances_sum":2924.3261586029516}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.958984375, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.958984375,"f1":0.9775869963369965,"seconds":6.314367055892944e-6,"exhaustive_search_seconds":1.7657876014709473e-6,"evaluations":8.9453125,"distances_sum":2946.139308303778}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.964755036630037,"seconds":6.1765313148498535e-6,"exhaustive_search_seconds":1.7657876014709473e-6,"evaluations":8.859375,"distances_sum":2858.8533257741697}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.958984375,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9775869963369965,"seconds":6.314367055892944e-6,"exhaustive_search_seconds":1.7657876014709473e-6,"evaluations":8.9453125,"distances_sum":2946.139308303778}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.958984375,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9775869963369965,"seconds":6.314367055892944e-6,"exhaustive_search_seconds":1.7657876014709473e-6,"evaluations":8.9453125,"distances_sum":2946.139308303778}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.154296875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.154296875,"f1":null,"seconds":3.1385570764541626e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":4.390625,"distances_sum":393.2880757329227}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7314453125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7314453125,"f1":0.8333638583638592,"seconds":5.129724740982056e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":7.59375,"distances_sum":1942.9909004165938}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7314453125,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7314453125,"f1":0.8333638583638592,"seconds":5.129724740982056e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":7.59375,"distances_sum":1942.9909004165938}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8388671875, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.8388671875,"f1":0.9056204212454221,"seconds":5.299225449562073e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.203125,"distances_sum":2332.0601187278107}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9608344780219783,"seconds":5.580484867095947e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.7734375,"distances_sum":2718.906036309623}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9306640625,"state":{"ssize":7,"bsize":9},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.9608344780219783,"seconds":5.580484867095947e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.7734375,"distances_sum":2718.906036309623}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.958984375, conf: {"ssize":9,"bsize":13}, perf: {"precision":1.0,"recall":0.958984375,"f1":0.9771978021978025,"seconds":6.016343832015991e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.890625,"distances_sum":2856.653646216831}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":7,"bsize":13}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9750572344322344,"seconds":5.902722477912903e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.8828125,"distances_sum":2834.964636478098}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":11,"bsize":11}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9714114010989015,"seconds":6.0889869928359985e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.8359375,"distances_sum":2816.1959298308057}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.958984375,"state":{"ssize":9,"bsize":13},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9771978021978025,"seconds":6.016343832015991e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.890625,"distances_sum":2856.653646216831}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.958984375,"state":{"ssize":9,"bsize":13},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9771978021978025,"seconds":6.016343832015991e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.890625,"distances_sum":2856.653646216831}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5009765625, conf: {"ssize":1,"bsize":3}, perf: {"precision":0.9817708333333334,"recall":0.5009765625,"f1":0.6492054820179823,"seconds":2.4810433387756348e-6,"exhaustive_search_seconds":9.052455425262451e-7,"evaluations":6.6875,"distances_sum":858.6212648379709}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5009765625,"state":{"ssize":1,"bsize":3},"perf":{"precision":0.9817708333333334,"recall":0.5009765625,"f1":0.6492054820179823,"seconds":2.4810433387756348e-6,"exhaustive_search_seconds":9.052455425262451e-7,"evaluations":6.6875,"distances_sum":858.6212648379709}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5048828125, conf: {"ssize":3,"bsize":3}, perf: {"precision":0.986328125,"recall":0.5048828125,"f1":0.653151622682873,"seconds":2.47173011302948e-6,"exhaustive_search_seconds":9.052455425262451e-7,"evaluations":6.6875,"distances_sum":859.4538990085567}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5048828125,"state":{"ssize":3,"bsize":3},"perf":{"precision":0.986328125,"recall":0.5048828125,"f1":0.653151622682873,"seconds":2.47173011302948e-6,"exhaustive_search_seconds":9.052455425262451e-7,"evaluations":6.6875,"distances_sum":859.4538990085567}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.5048828125,"state":{"ssize":3,"bsize":3},"perf":{"precision":0.986328125,"recall":0.5048828125,"f1":0.653151622682873,"seconds":2.47173011302948e-6,"exhaustive_search_seconds":9.052455425262451e-7,"evaluations":6.6875,"distances_sum":859.4538990085567}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.318359375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.318359375,"f1":null,"seconds":1.9688159227371216e-6,"exhaustive_search_seconds":9.145587682723999e-7,"evaluations":5.515625,"distances_sum":625.3179107845184}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5029296875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5029296875,"f1":0.6515461968586972,"seconds":2.7455389499664307e-6,"exhaustive_search_seconds":9.145587682723999e-7,"evaluations":7.2578125,"distances_sum":1032.4230513878592}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2333984375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2333984375,"f1":null,"seconds":1.8794089555740356e-6,"exhaustive_search_seconds":9.145587682723999e-7,"evaluations":5.703125,"distances_sum":406.63803875612575}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5029296875,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5029296875,"f1":0.6515461968586972,"seconds":2.7455389499664307e-6,"exhaustive_search_seconds":9.145587682723999e-7,"evaluations":7.2578125,"distances_sum":1032.4230513878592}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8857421875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8857421875,"f1":0.9345581501831511,"seconds":3.6638230085372925e-6,"exhaustive_search_seconds":9.145587682723999e-7,"evaluations":8.875,"distances_sum":2025.5779085909169}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6884765625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6884765625,"f1":0.803111992174493,"seconds":3.037974238395691e-6,"exhaustive_search_seconds":9.145587682723999e-7,"evaluations":8.09375,"distances_sum":1479.9563465192882}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8857421875,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.8857421875,"f1":0.9345581501831511,"seconds":3.6638230085372925e-6,"exhaustive_search_seconds":9.145587682723999e-7,"evaluations":8.875,"distances_sum":2025.5779085909169}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9468463827838831,"seconds":3.647059202194214e-6,"exhaustive_search_seconds":9.145587682723999e-7,"evaluations":8.796875,"distances_sum":2120.21250514212}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":6,"bsize":11}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9733459249084253,"seconds":3.8035213947296143e-6,"exhaustive_search_seconds":9.145587682723999e-7,"evaluations":8.9375,"distances_sum":2272.684350196607}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9521484375,"state":{"ssize":6,"bsize":11},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9733459249084253,"seconds":3.8035213947296143e-6,"exhaustive_search_seconds":9.145587682723999e-7,"evaluations":8.9375,"distances_sum":2272.684350196607}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9521484375,"state":{"ssize":6,"bsize":11},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9733459249084253,"seconds":3.8035213947296143e-6,"exhaustive_search_seconds":9.145587682723999e-7,"evaluations":8.9375,"distances_sum":2272.684350196607}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7685546875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7685546875,"f1":0.8576959498834505,"seconds":3.3676624298095703e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.4921875,"distances_sum":1745.0980418138254}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.669921875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.669921875,"f1":0.7898157398157405,"seconds":2.9671937227249146e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":7.8203125,"distances_sum":1482.2724477275729}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7685546875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7685546875,"f1":0.8576959498834505,"seconds":3.3676624298095703e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.4921875,"distances_sum":1745.0980418138254}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83984375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.83984375,"f1":0.9060871420246428,"seconds":3.5371631383895874e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.6953125,"distances_sum":1903.2285900749653}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7822265625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7822265625,"f1":0.8691058941058948,"seconds":3.4794211387634277e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.6640625,"distances_sum":1768.852461486917}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9506753663003669,"seconds":3.7867575883865356e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.7890625,"distances_sum":2193.414308523314}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9130859375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9506753663003669,"seconds":3.7867575883865356e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.7890625,"distances_sum":2193.414308523314}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.961796016483517,"seconds":3.6712735891342163e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.7890625,"distances_sum":2303.1966443908263}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9677655677655681,"seconds":3.688037395477295e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.828125,"distances_sum":2328.8343834920297}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9625972985347989,"seconds":3.6582350730895996e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.84375,"distances_sum":2275.484892179494}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94140625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9677655677655681,"seconds":3.688037395477295e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.828125,"distances_sum":2328.8343834920297}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94140625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9677655677655681,"seconds":3.688037395477295e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.828125,"distances_sum":2328.8343834920297}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6826171875, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6826171875,"f1":0.7979322760572767,"seconds":3.1944364309310913e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.15625,"distances_sum":1573.2270173270815}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2431640625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2431640625,"f1":null,"seconds":2.1960586309432983e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":6.359375,"distances_sum":511.73314826879044}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.228515625, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.228515625,"f1":null,"seconds":2.0135194063186646e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":6.0703125,"distances_sum":484.9604573595117}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6826171875,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.6826171875,"f1":0.7979322760572767,"seconds":3.1944364309310913e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.15625,"distances_sum":1573.2270173270815}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8369140625, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8369140625,"f1":0.9056662087912096,"seconds":3.641471266746521e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.703125,"distances_sum":2003.5573663046312}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.952964743589744,"seconds":3.727152943611145e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.890625,"distances_sum":2344.441098292338}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.78125,"f1":0.8704758782883791,"seconds":3.6191195249557495e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.640625,"distances_sum":1866.8696491338908}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7607421875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7607421875,"f1":0.8531260406260418,"seconds":3.3210963010787964e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.53125,"distances_sum":1785.546626891614}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.791015625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.791015625,"f1":0.8760161713286722,"seconds":3.4980475902557373e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.6484375,"distances_sum":1892.7669637037625}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9189453125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9189453125,"f1":0.952964743589744,"seconds":3.727152943611145e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.890625,"distances_sum":2344.441098292338}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.966796875, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.966796875,"f1":0.9820684523809526,"seconds":4.025176167488098e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.96875,"distances_sum":2505.513354447937}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9569253663003668,"seconds":3.9637088775634766e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.875,"distances_sum":2344.851368172131}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9618704212454219,"seconds":3.827735781669617e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.90625,"distances_sum":2350.1705160218485}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.966796875,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.966796875,"f1":0.9820684523809526,"seconds":4.025176167488098e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.96875,"distances_sum":2505.513354447937}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.966796875,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.966796875,"f1":0.9820684523809526,"seconds":4.025176167488098e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.96875,"distances_sum":2505.513354447937}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.53515625, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.53515625,"f1":0.6809763153513158,"seconds":3.507360816001892e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":6.9609375,"distances_sum":1172.7327817983314}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5322265625, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5322265625,"f1":0.6788751179376186,"seconds":3.1981617212295532e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":6.9921875,"distances_sum":1161.4925558687812}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.205078125, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.205078125,"f1":null,"seconds":2.2854655981063843e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":5.1484375,"distances_sum":436.7880657052525}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.53515625,"state":{"ssize":4,"bsize":3},"perf":{"precision":1.0,"recall":0.53515625,"f1":0.6809763153513158,"seconds":3.507360816001892e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":6.9609375,"distances_sum":1172.7327817983314}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7978515625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.7978515625,"f1":0.8767612595737599,"seconds":3.9227306842803955e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":8.3046875,"distances_sum":1928.748150210485}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5537109375, conf: {"ssize":6,"bsize":3}, perf: {"precision":1.0,"recall":0.5537109375,"f1":0.6953262015762022,"seconds":3.170222043991089e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":7.0234375,"distances_sum":1258.1419027084291}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6591796875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6591796875,"f1":0.7834117271617278,"seconds":3.1441450119018555e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":7.6328125,"distances_sum":1499.2062746569745}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8779296875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8779296875,"f1":0.928626061438562,"seconds":3.827735781669617e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":8.7109375,"distances_sum":2169.212946117958}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.734375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.734375,"f1":0.8381993006993015,"seconds":3.3229589462280273e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":7.8984375,"distances_sum":1730.5990416536729}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.869140625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.869140625,"f1":0.9225477647352655,"seconds":3.682449460029602e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":8.6015625,"distances_sum":2135.8355566804225}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8779296875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8779296875,"f1":0.928626061438562,"seconds":3.827735781669617e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":8.7109375,"distances_sum":2169.212946117958}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.97498282967033,"seconds":3.909692168235779e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":8.90625,"distances_sum":2462.277882729823}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9616529304029307,"seconds":3.635883331298828e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":8.84375,"distances_sum":2388.025580366389}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.959695512820513,"seconds":3.6228448152542114e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":8.8515625,"distances_sum":2365.7214408344294}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.951476648351649,"seconds":3.6153942346572876e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":8.765625,"distances_sum":2310.660996678088}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9579498626373631,"seconds":3.7420541048049927e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":8.796875,"distances_sum":2361.4073654713116}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9541015625,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.97498282967033,"seconds":3.909692168235779e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":8.90625,"distances_sum":2462.277882729823}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9541015625,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.97498282967033,"seconds":3.909692168235779e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":8.90625,"distances_sum":2462.277882729823}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.646484375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.646484375,"f1":0.7744254009879018,"seconds":3.1478703022003174e-6,"exhaustive_search_seconds":8.977949619293213e-7,"evaluations":7.8203125,"distances_sum":1449.7624640624078}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.646484375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.646484375,"f1":0.7744254009879018,"seconds":3.1478703022003174e-6,"exhaustive_search_seconds":8.977949619293213e-7,"evaluations":7.8203125,"distances_sum":1449.7624640624078}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6572265625, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6572265625,"f1":0.7778525294150302,"seconds":3.032386302947998e-6,"exhaustive_search_seconds":8.977949619293213e-7,"evaluations":7.8125,"distances_sum":1452.601539651966}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.751953125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.751953125,"f1":0.8499203921078929,"seconds":3.2782554626464844e-6,"exhaustive_search_seconds":8.977949619293213e-7,"evaluations":8.2578125,"distances_sum":1758.9088948024064}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.751953125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.751953125,"f1":0.8499203921078929,"seconds":3.2782554626464844e-6,"exhaustive_search_seconds":8.977949619293213e-7,"evaluations":8.2578125,"distances_sum":1758.9088948024064}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8369140625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8369140625,"f1":0.9055434149184157,"seconds":3.507360816001892e-6,"exhaustive_search_seconds":8.977949619293213e-7,"evaluations":8.4609375,"distances_sum":1987.5620409670587}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.875,"f1":0.9257726648351656,"seconds":3.7029385566711426e-6,"exhaustive_search_seconds":8.977949619293213e-7,"evaluations":8.6796875,"distances_sum":2138.9186976656247}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9497882326007331,"seconds":3.7029385566711426e-6,"exhaustive_search_seconds":8.977949619293213e-7,"evaluations":8.7890625,"distances_sum":2299.861219813586}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.890625,"f1":0.937156593406594,"seconds":3.6191195249557495e-6,"exhaustive_search_seconds":8.977949619293213e-7,"evaluations":8.7109375,"distances_sum":2182.742942533175}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.841796875, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.841796875,"f1":0.907555465367966,"seconds":3.5855919122695923e-6,"exhaustive_search_seconds":8.977949619293213e-7,"evaluations":8.5859375,"distances_sum":1990.742647729005}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.830078125, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.830078125,"f1":0.9002034423909435,"seconds":3.376975655555725e-6,"exhaustive_search_seconds":8.977949619293213e-7,"evaluations":8.390625,"distances_sum":2014.5824640720675}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.912109375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.912109375,"f1":0.9497882326007331,"seconds":3.7029385566711426e-6,"exhaustive_search_seconds":8.977949619293213e-7,"evaluations":8.7890625,"distances_sum":2299.861219813586}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.912109375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.912109375,"f1":0.9497882326007331,"seconds":3.7029385566711426e-6,"exhaustive_search_seconds":8.977949619293213e-7,"evaluations":8.7890625,"distances_sum":2299.861219813586}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.357421875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.357421875,"f1":null,"seconds":2.4382025003433228e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":6.09375,"distances_sum":842.3128845549891}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6630859375, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6630859375,"f1":0.7838907620157629,"seconds":2.9746443033218384e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":7.5390625,"distances_sum":1558.2020558286904}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6630859375,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.6630859375,"f1":0.7838907620157629,"seconds":2.9746443033218384e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":7.5390625,"distances_sum":1558.2020558286904}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9457532051282054,"seconds":3.7178397178649902e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.7265625,"distances_sum":2353.433721860227}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9052734375,"state":{"ssize":6,"bsize":8},"perf":{"precision":1.0,"recall":0.9052734375,"f1":0.9457532051282054,"seconds":3.7178397178649902e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.7265625,"distances_sum":2353.433721860227}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":10,"bsize":11}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9622424450549454,"seconds":4.112720489501953e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.84375,"distances_sum":2455.285545484937}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9701121794871796,"seconds":4.388391971588135e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.9140625,"distances_sum":2497.4290571886577}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9462890625,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.9701121794871796,"seconds":4.388391971588135e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.9140625,"distances_sum":2497.4290571886577}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9462890625,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.9701121794871796,"seconds":4.388391971588135e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.9140625,"distances_sum":2497.4290571886577}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2451171875,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2451171875,"f1":null,"seconds":2.2314488887786865e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":6.6796875,"distances_sum":530.2223539680364}}, beam: 2, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.2451171875,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2451171875,"f1":null,"seconds":2.2314488887786865e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":6.6796875,"distances_sum":530.2223539680364}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2138671875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2138671875,"f1":null,"seconds":1.7974525690078735e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":5.4765625,"distances_sum":498.32582378357034}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2138671875,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.2138671875,"f1":null,"seconds":1.7974525690078735e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":5.4765625,"distances_sum":498.32582378357034}}, beam: 3, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.2138671875,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.2138671875,"f1":null,"seconds":1.7974525690078735e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":5.4765625,"distances_sum":498.32582378357034}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.8612840284715294,"seconds":3.300607204437256e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.1484375,"distances_sum":1687.8403678119041}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5322265625, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.5322265625,"f1":0.6801778083028088,"seconds":2.551823854446411e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":7.046875,"distances_sum":1124.0513116919844}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3544921875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3544921875,"f1":null,"seconds":2.1085143089294434e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":5.5390625,"distances_sum":740.7738831219935}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.767578125,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.767578125,"f1":0.8612840284715294,"seconds":3.300607204437256e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.1484375,"distances_sum":1687.8403678119041}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8173828125, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8173828125,"f1":0.8925626456876464,"seconds":3.2242387533187866e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.40625,"distances_sum":1875.9700468304536}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8173828125,"state":{"ssize":2,"bsize":6},"perf":{"precision":1.0,"recall":0.8173828125,"f1":0.8925626456876464,"seconds":3.2242387533187866e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.40625,"distances_sum":1875.9700468304536}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.950641025641026,"seconds":3.550201654434204e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.71875,"distances_sum":2269.1359643166443}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.830078125, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.830078125,"f1":0.9007502913752921,"seconds":3.6172568798065186e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.4140625,"distances_sum":1900.219976090693}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9446314102564106,"seconds":5.522742867469788e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.6484375,"distances_sum":2248.6554132488973}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9438873626373631,"seconds":5.392357707023621e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.515625,"distances_sum":2211.2111227359296}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9316506410256418,"seconds":5.39049506187439e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.4375,"distances_sum":2154.7429057093614}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8623046875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8623046875,"f1":0.9192135989010995,"seconds":5.284324288368225e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.4296875,"distances_sum":2038.648765500094}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9140625,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.950641025641026,"seconds":3.550201654434204e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.71875,"distances_sum":2269.1359643166443}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9140625,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.950641025641026,"seconds":3.550201654434204e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.71875,"distances_sum":2269.1359643166443}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.759765625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.759765625,"f1":0.852327360139861,"seconds":5.213543772697449e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.515625,"distances_sum":1899.4537880972787}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7724609375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7724609375,"f1":0.8647670038295047,"seconds":5.129724740982056e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.6171875,"distances_sum":1960.5662628498865}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7724609375,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7724609375,"f1":0.8647670038295047,"seconds":5.129724740982056e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.6171875,"distances_sum":1960.5662628498865}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9604426823176828,"seconds":5.774199962615967e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.8359375,"distances_sum":2593.8387438040845}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9306640625,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.9604426823176828,"seconds":5.774199962615967e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.8359375,"distances_sum":2593.8387438040845}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9723214285714287,"seconds":5.749985575675964e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.9296875,"distances_sum":2654.2474028579622}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9658203125, conf: {"ssize":2,"bsize":13}, perf: {"precision":1.0,"recall":0.9658203125,"f1":0.9812156593406596,"seconds":5.9176236391067505e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.96875,"distances_sum":2738.718520558488}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9658203125,"state":{"ssize":2,"bsize":13},"perf":{"precision":1.0,"recall":0.9658203125,"f1":0.9812156593406596,"seconds":5.9176236391067505e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.96875,"distances_sum":2738.718520558488}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9658203125,"state":{"ssize":2,"bsize":13},"perf":{"precision":1.0,"recall":0.9658203125,"f1":0.9812156593406596,"seconds":5.9176236391067505e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.96875,"distances_sum":2738.718520558488}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76171875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.76171875,"f1":0.8586829836829846,"seconds":5.07943332195282e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.3984375,"distances_sum":1829.0143740659196}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.76171875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.76171875,"f1":0.8586829836829846,"seconds":5.07943332195282e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.3984375,"distances_sum":1829.0143740659196}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9555465367965372,"seconds":5.511566996574402e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.8125,"distances_sum":2539.3956269883456}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9657967032967041,"seconds":5.930662155151367e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.8828125,"distances_sum":2599.903189146578}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9384765625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9657967032967041,"seconds":5.930662155151367e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.8828125,"distances_sum":2599.903189146578}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":2,"bsize":12}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9722298534798537,"seconds":5.617737770080566e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.921875,"distances_sum":2636.5010478736294}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9599609375, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9599609375,"f1":0.9783482142857145,"seconds":6.012618541717529e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.9609375,"distances_sum":2674.834785084903}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9599609375,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9599609375,"f1":0.9783482142857145,"seconds":6.012618541717529e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.9609375,"distances_sum":2674.834785084903}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9599609375,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9599609375,"f1":0.9783482142857145,"seconds":6.012618541717529e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.9609375,"distances_sum":2674.834785084903}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.216796875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.216796875,"f1":null,"seconds":3.471970558166504e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":5.9140625,"distances_sum":477.45365176041724}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6796875, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6796875,"f1":0.7966564685314693,"seconds":4.90434467792511e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":7.953125,"distances_sum":1580.3345259652228}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.513671875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.513671875,"f1":0.6637008824508829,"seconds":4.071742296218872e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":6.9765625,"distances_sum":1135.2258208786523}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6796875,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.6796875,"f1":0.7966564685314693,"seconds":4.90434467792511e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":7.953125,"distances_sum":1580.3345259652228}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":9,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.8599166458541468,"seconds":4.950910806655884e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.3984375,"distances_sum":1866.4986771093847}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9542296245421248,"seconds":5.5693089962005615e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.734375,"distances_sum":2518.028113874143}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8359375, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8359375,"f1":0.9043097527472534,"seconds":5.327165126800537e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.53125,"distances_sum":2093.595760342873}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8291015625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8291015625,"f1":0.9013049450549458,"seconds":4.902482032775879e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.53125,"distances_sum":2073.900939859094}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.950486492673993,"seconds":5.414709448814392e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.8046875,"distances_sum":2398.068056998714}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76953125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.76953125,"f1":0.8620863511488521,"seconds":4.947185516357422e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.4140625,"distances_sum":1829.0608068984022}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.69140625, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.69140625,"f1":0.8079462204462212,"seconds":4.563480615615845e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.125,"distances_sum":1608.8191769826656}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.919921875,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.9542296245421248,"seconds":5.5693089962005615e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.734375,"distances_sum":2518.028113874143}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9619140625, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.9619140625,"f1":0.9792410714285718,"seconds":5.805864930152893e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.90625,"distances_sum":2637.6588612885826}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":3,"bsize":12}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9739812271062274,"seconds":5.608424544334412e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.890625,"distances_sum":2601.382849443072}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9738095238095241,"seconds":5.889683961868286e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.921875,"distances_sum":2582.4605976305374}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":10,"bsize":10}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9607200091575097,"seconds":5.600973963737488e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.828125,"distances_sum":2510.9318477598945}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9619140625,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9792410714285718,"seconds":5.805864930152893e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.90625,"distances_sum":2637.6588612885826}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9619140625,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9792410714285718,"seconds":5.805864930152893e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.90625,"distances_sum":2637.6588612885826}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4306640625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4306640625,"f1":null,"seconds":3.555789589881897e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":6.4375,"distances_sum":998.8427304121515}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4052734375, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.4052734375,"f1":null,"seconds":3.4980475902557373e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":6.0859375,"distances_sum":912.6206246645805}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4091796875, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.4091796875,"f1":null,"seconds":3.6694109439849854e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":6.1171875,"distances_sum":911.2412303850346}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4306640625,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.4306640625,"f1":null,"seconds":3.555789589881897e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":6.4375,"distances_sum":998.8427304121515}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.80859375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.80859375,"f1":0.8853084415584423,"seconds":5.1781535148620605e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.3828125,"distances_sum":2069.1074452786884}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6640625, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.6640625,"f1":0.7859281343656351,"seconds":4.520639777183533e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":7.984375,"distances_sum":1560.4823677892766}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.80859375,"state":{"ssize":3,"bsize":6},"perf":{"precision":1.0,"recall":0.80859375,"f1":0.8853084415584423,"seconds":5.1781535148620605e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.3828125,"distances_sum":2069.1074452786884}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8310546875, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.8310546875,"f1":0.9023237179487188,"seconds":5.088746547698975e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.515625,"distances_sum":2094.972074599719}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8115234375, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8115234375,"f1":0.8883418664668672,"seconds":5.109235644340515e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.421875,"distances_sum":2053.586331921989}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8310546875,"state":{"ssize":8,"bsize":6},"perf":{"precision":1.0,"recall":0.8310546875,"f1":0.9023237179487188,"seconds":5.088746547698975e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.515625,"distances_sum":2094.972074599719}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8310546875,"state":{"ssize":8,"bsize":6},"perf":{"precision":1.0,"recall":0.8310546875,"f1":0.9023237179487188,"seconds":5.088746547698975e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.515625,"distances_sum":2094.972074599719}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4052734375, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.4052734375,"f1":null,"seconds":3.6116689443588257e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":6.4375,"distances_sum":939.4519290020019}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6845703125, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6845703125,"f1":0.8041448135198144,"seconds":4.375353455543518e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.0859375,"distances_sum":1645.9390235630472}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6845703125,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.6845703125,"f1":0.8041448135198144,"seconds":4.375353455543518e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.0859375,"distances_sum":1645.9390235630472}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8310546875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8310546875,"f1":0.9009844322344331,"seconds":5.194917321205139e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.6640625,"distances_sum":2165.357086054977}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7021484375, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.7021484375,"f1":0.8161468739593748,"seconds":4.641711711883545e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.171875,"distances_sum":1734.1966529438519}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8310546875,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8310546875,"f1":0.9009844322344331,"seconds":5.194917321205139e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.6640625,"distances_sum":2165.357086054977}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9722470238095243,"seconds":5.910173058509827e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.9140625,"distances_sum":2674.4110184539345}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8701171875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8701171875,"f1":0.9228370587745592,"seconds":5.420297384262085e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.59375,"distances_sum":2330.8516535330396}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9542639652014655,"seconds":5.587935447692871e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.7890625,"distances_sum":2567.1217329456417}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.833984375, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.833984375,"f1":0.9041838369963376,"seconds":5.3979456424713135e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.7578125,"distances_sum":2153.560126363953}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9501953125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9722470238095243,"seconds":5.910173058509827e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.9140625,"distances_sum":2674.4110184539345}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9501953125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9722470238095243,"seconds":5.910173058509827e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.9140625,"distances_sum":2674.4110184539345}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5673828125, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5673828125,"f1":0.7116681929181935,"seconds":4.241243004798889e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":7.765625,"distances_sum":1307.6239854689704}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.546875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.546875,"f1":0.6913008866133872,"seconds":4.131346940994263e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":7.671875,"distances_sum":1256.4394785875595}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5673828125,"state":{"ssize":5,"bsize":3},"perf":{"precision":1.0,"recall":0.5673828125,"f1":0.7116681929181935,"seconds":4.241243004798889e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":7.765625,"distances_sum":1307.6239854689704}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8154296875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8154296875,"f1":0.8929690101565111,"seconds":5.278736352920532e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.6328125,"distances_sum":2013.5510727980834}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9315190018315024,"seconds":5.325302481651306e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.71875,"distances_sum":2287.138450027396}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6630859375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6630859375,"f1":0.7882430069930076,"seconds":4.449859261512756e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.0078125,"distances_sum":1526.9780631064136}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.875,"f1":0.9269090284715291,"seconds":5.258247256278992e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.5703125,"distances_sum":2284.4985610957065}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8818359375,"state":{"ssize":9,"bsize":7},"perf":{"precision":1.0,"recall":0.8818359375,"f1":0.9315190018315024,"seconds":5.325302481651306e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.71875,"distances_sum":2287.138450027396}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.937772123709624,"seconds":5.163252353668213e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.703125,"distances_sum":2362.6976043051573}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9386649808524814,"seconds":5.392357707023621e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.7109375,"distances_sum":2317.453299974479}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":12,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9688072344322347,"seconds":5.887821316719055e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.828125,"distances_sum":2571.148174151452}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9446314102564106,"seconds":5.628913640975952e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.65625,"distances_sum":2449.624781179706}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9686584249084255,"seconds":5.709007382392883e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.8671875,"distances_sum":2553.0467385714837}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9485061813186817,"seconds":5.455687642097473e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.796875,"distances_sum":2429.8459241381524}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9600274725274729,"seconds":5.4426491260528564e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.8515625,"distances_sum":2489.431360515675}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":7,"bsize":11},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9686584249084255,"seconds":5.709007382392883e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.8671875,"distances_sum":2553.0467385714837}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9443359375,"state":{"ssize":7,"bsize":11},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9686584249084255,"seconds":5.709007382392883e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.8671875,"distances_sum":2553.0467385714837}}, n: 9
mean(cfft.distances) = 0.33529483918504077
mean(cdnet.distances) = 0.3540308118070749
mean(crand.distances) = 0.35504540199466383
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.9
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8866666666666667
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8955555555555555
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8377777777777778
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8844444444444445
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.88
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8955555555555555
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.9022222222222221
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.8866666666666667
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.94
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8644444444444445
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8911111111111111
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8955555555555555
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8733333333333334
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9155555555555556
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8888888888888888
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9044444444444445
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9333333333333332
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.928888888888889
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.9111111111111111
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8755555555555556
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8755555555555555
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8555555555555556
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.8777777777777778
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.8755555555555556
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8844444444444445
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.8977777777777778
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9022222222222221
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8977777777777778
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8688888888888888
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8844444444444445
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8555555555555555
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9022222222222221
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 4, 1]]
** centroid: 8, normalized-entropy: 0.7219280948873623, [(2, 4), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 1, 2, 3, 2, 3, 2, 3, 3, 1, 2]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 4, 1]]
** centroid: 8, normalized-entropy: 0.7219280948873623, [(2, 4), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 1, 2, 3, 2, 3, 2, 3, 3, 1, 2]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 4, 1]]
** centroid: 8, normalized-entropy: 0.7219280948873623, [(2, 4), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 1, 2, 3, 2, 3, 2, 3, 3, 1, 2]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 4, 1]]
** centroid: 8, normalized-entropy: 0.7219280948873623, [(2, 4), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 1, 2, 3, 2, 3, 2, 3, 3, 1, 2]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 4, 1]]
** centroid: 8, normalized-entropy: 0.7219280948873623, [(2, 4), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 1, 2, 3, 2, 3, 2, 3, 3, 1, 2]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 4, 1]]
** centroid: 8, normalized-entropy: 0.7219280948873623, [(2, 4), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 1, 2, 3, 2, 3, 2, 3, 3, 1, 2]
acc = 0.94
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 4, 1]]
** centroid: 8, normalized-entropy: 0.7219280948873623, [(2, 4), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 1, 2, 3, 2, 3, 2, 3, 3, 1, 2]
acc = 0.9666666666666667
*** finished computation of 12 references, err: [Inf, 0.521907840470473] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 4, 28]]
** centroid: 1, normalized-entropy: 0.5435644431995963, [(2, 4), (3, 28)]
*** center 2: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 29, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [5, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 7, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
*** center 8: selecting labels [1] (freq >= 1) [from [2, 0, 0]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 10, 0]]
*** center 12: selecting labels [1] (freq >= 1) [from [30, 0, 0]]
finished with 14 centroids; started with 12
acc = 0.9133333333333333
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.3838869870239002] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3838869870239002, 0.3187136178117458] ***
*** starting iteration: 2; err: [Inf, 0.3838869870239002, 0.3187136178117458] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3838869870239002, 0.3187136178117458, 0.3054897213444203] ***
*** starting iteration: 3; err: [Inf, 0.3838869870239002, 0.3187136178117458, 0.3054897213444203] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3838869870239002, 0.3187136178117458, 0.3054897213444203, 0.3026894026606514] ***
*** starting iteration: 4; err: [Inf, 0.3838869870239002, 0.3187136178117458, 0.3054897213444203, 0.3026894026606514] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3838869870239002, 0.3187136178117458, 0.3054897213444203, 0.3026894026606514, 0.3018717592101063] ***
*** finished computation of 3 references, err: [Inf, 0.3838869870239002, 0.3187136178117458, 0.3054897213444203, 0.3026894026606514, 0.3018717592101063] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [146, 56, 0]]
** centroid: 1, normalized-entropy: 0.8516458330898723, [(1, 146), (2, 56)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [3, 183, 30]]
** centroid: 2, normalized-entropy: 0.4314888412294411, [(1, 3), (2, 183), (3, 30)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [239, 9, 0]]
** centroid: 3, normalized-entropy: 0.22501690667566673, [(1, 239), (2, 9)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.23959179512592316] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23959179512592316, 0.19199138579155686] ***
*** finished computation of 7 references, err: [Inf, 0.23959179512592316, 0.19199138579155686] ***
*** center 1: selecting labels [1] (freq >= 1) [from [140, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 56, 23]]
** centroid: 2, normalized-entropy: 0.8701883352082787, [(2, 56), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [45, 32, 0]]
** centroid: 3, normalized-entropy: 0.9793399259567798, [(1, 45), (2, 32)]
*** center 4: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [34, 79, 0]]
** centroid: 5, normalized-entropy: 0.8823699738443678, [(1, 34), (2, 79)]
*** center 6: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [22, 70, 0]]
** centroid: 7, normalized-entropy: 0.7935912300117066, [(1, 22), (2, 70)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24901090823281724] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24901090823281724, 0.19501363568416274] ***
*** finished computation of 7 references, err: [Inf, 0.24901090823281724, 0.19501363568416274] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [4, 112, 0]]
** centroid: 1, normalized-entropy: 0.21639693245126485, [(1, 4), (2, 112)]
*** center 2: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [47, 46, 0]]
** centroid: 3, normalized-entropy: 0.9999165959739288, [(1, 47), (2, 46)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [94, 32, 0]]
** centroid: 4, normalized-entropy: 0.8175072881213616, [(1, 94), (2, 32)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [107, 1, 0]]
** centroid: 5, normalized-entropy: 0.07584150637714687, [(1, 107), (2, 1)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 57, 30]]
** centroid: 6, normalized-entropy: 0.9293636260137188, [(2, 57), (3, 30)]
*** center 7: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23163615543858848] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23163615543858848, 0.19463797256691212] ***
*** finished computation of 7 references, err: [Inf, 0.23163615543858848, 0.19463797256691212] ***
*** center 1: selecting labels [1] (freq >= 1) [from [137, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 48, 29]]
** centroid: 2, normalized-entropy: 0.9556222693531471, [(2, 48), (3, 29)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [55, 6, 0]]
** centroid: 3, normalized-entropy: 0.4637773498877517, [(1, 55), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [74, 33, 0]]
** centroid: 4, normalized-entropy: 0.891330958407023, [(1, 74), (2, 33)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [37, 67, 0]]
** centroid: 5, normalized-entropy: 0.9391151961320356, [(1, 37), (2, 67)]
*** center 6: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [7, 85, 0]]
** centroid: 7, normalized-entropy: 0.3882389775123619, [(1, 7), (2, 85)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23743680752869667] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23743680752869667, 0.19734471877743637] ***
*** finished computation of 7 references, err: [Inf, 0.23743680752869667, 0.19734471877743637] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [103, 25, 0]]
** centroid: 1, normalized-entropy: 0.7124534449668779, [(1, 103), (2, 25)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [62, 10, 0]]
** centroid: 2, normalized-entropy: 0.581321498763703, [(1, 62), (2, 10)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 77, 23]]
** centroid: 3, normalized-entropy: 0.7780113035465377, [(2, 77), (3, 23)]
*** center 4: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [30, 75, 0]]
** centroid: 5, normalized-entropy: 0.8631205685666311, [(1, 30), (2, 75)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [38, 50, 0]]
** centroid: 6, normalized-entropy: 0.9865446300055647, [(1, 38), (2, 50)]
*** center 7: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.37194320499930567] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37194320499930567, 0.23887992370454175] ***
*** starting iteration: 2; err: [Inf, 0.37194320499930567, 0.23887992370454175] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37194320499930567, 0.23887992370454175, 0.23656125842277576] ***
*** starting iteration: 3; err: [Inf, 0.37194320499930567, 0.23887992370454175, 0.23656125842277576] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37194320499930567, 0.23887992370454175, 0.23656125842277576, 0.23582075451369267] ***
*** finished computation of 3 references, err: [Inf, 0.37194320499930567, 0.23887992370454175, 0.23656125842277576, 0.23582075451369267] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [94, 143, 22]]
** centroid: 1, normalized-entropy: 0.8239915728975465, [(1, 94), (2, 143), (3, 22)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [93, 105, 8]]
** centroid: 2, normalized-entropy: 0.7543027370933183, [(1, 93), (2, 105), (3, 8)]
*** center 3: selecting labels [1] (freq >= 2) [from [201, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.30458530184646687] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30458530184646687, 0.25528443007655943] ***
*** starting iteration: 2; err: [Inf, 0.30458530184646687, 0.25528443007655943] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30458530184646687, 0.25528443007655943, 0.24449840789406688] ***
*** starting iteration: 3; err: [Inf, 0.30458530184646687, 0.25528443007655943, 0.24449840789406688] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30458530184646687, 0.25528443007655943, 0.24449840789406688, 0.2415454322346549] ***
*** finished computation of 3 references, err: [Inf, 0.30458530184646687, 0.25528443007655943, 0.24449840789406688, 0.2415454322346549] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [254, 17, 0]]
** centroid: 1, normalized-entropy: 0.3381904482122263, [(1, 254), (2, 17)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [145, 50, 0]]
** centroid: 2, normalized-entropy: 0.8212809417449864, [(1, 145), (2, 50)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 172, 29]]
** centroid: 3, normalized-entropy: 0.5953353395995236, [(2, 172), (3, 29)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3584982662292748] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3584982662292748, 0.30531811615036075] ***
*** starting iteration: 2; err: [Inf, 0.3584982662292748, 0.30531811615036075] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3584982662292748, 0.30531811615036075, 0.3006329637501149] ***
*** starting iteration: 3; err: [Inf, 0.3584982662292748, 0.30531811615036075, 0.3006329637501149] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3584982662292748, 0.30531811615036075, 0.3006329637501149, 0.2990195221132201] ***
*** starting iteration: 4; err: [Inf, 0.3584982662292748, 0.30531811615036075, 0.3006329637501149, 0.2990195221132201] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3584982662292748, 0.30531811615036075, 0.3006329637501149, 0.2990195221132201, 0.2985514336442952] ***
*** finished computation of 3 references, err: [Inf, 0.3584982662292748, 0.30531811615036075, 0.3006329637501149, 0.2990195221132201, 0.2985514336442952] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [98, 86, 0]]
** centroid: 1, normalized-entropy: 0.996929708080541, [(1, 98), (2, 86)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [85, 153, 29]]
** centroid: 2, normalized-entropy: 0.8415841907344384, [(1, 85), (2, 153), (3, 29)]
*** center 3: selecting labels [1] (freq >= 2) [from [216, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.5348311900754629] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5348311900754629, 0.3350254429037916] ***
*** starting iteration: 2; err: [Inf, 0.5348311900754629, 0.3350254429037916] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5348311900754629, 0.3350254429037916, 0.31150019109651245] ***
*** starting iteration: 3; err: [Inf, 0.5348311900754629, 0.3350254429037916, 0.31150019109651245] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5348311900754629, 0.3350254429037916, 0.31150019109651245, 0.30615698189839075] ***
*** starting iteration: 4; err: [Inf, 0.5348311900754629, 0.3350254429037916, 0.31150019109651245, 0.30615698189839075] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5348311900754629, 0.3350254429037916, 0.31150019109651245, 0.30615698189839075, 0.3055493981455979] ***
*** finished computation of 3 references, err: [Inf, 0.5348311900754629, 0.3350254429037916, 0.31150019109651245, 0.30615698189839075, 0.3055493981455979] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [240, 5, 0]]
** centroid: 1, normalized-entropy: 0.14372616993938164, [(1, 240), (2, 5)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [159, 58, 0]]
** centroid: 2, normalized-entropy: 0.8375360821789878, [(1, 159), (2, 58)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [8, 174, 23]]
** centroid: 3, normalized-entropy: 0.46528553957197943, [(1, 8), (2, 174), (3, 23)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.28720887314861043] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28720887314861043, 0.24201276236949293] ***
*** finished computation of 3 references, err: [Inf, 0.28720887314861043, 0.24201276236949293] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [198, 3, 0]]
** centroid: 1, normalized-entropy: 0.11190990870168394, [(1, 198), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [136, 81, 0]]
** centroid: 2, normalized-entropy: 0.953151247911296, [(1, 136), (2, 81)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [54, 164, 30]]
** centroid: 3, normalized-entropy: 0.7836542207123106, [(1, 54), (2, 164), (3, 30)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.49850794822019506] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.49850794822019506, 0.26667849059220866] ***
*** finished computation of 3 references, err: [Inf, 0.49850794822019506, 0.26667849059220866] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [96, 210, 29]]
** centroid: 1, normalized-entropy: 0.7852841431237575, [(1, 96), (2, 210), (3, 29)]
*** center 2: selecting labels [1] (freq >= 2) [from [224, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [79, 29, 0]]
** centroid: 3, normalized-entropy: 0.8393307617496655, [(1, 79), (2, 29)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4737591371376548] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4737591371376548, 0.2587960803458213] ***
*** finished computation of 3 references, err: [Inf, 0.4737591371376548, 0.2587960803458213] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [314, 53, 0]]
** centroid: 1, normalized-entropy: 0.5956833938682253, [(1, 314), (2, 53)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [93, 52, 0]]
** centroid: 2, normalized-entropy: 0.9415322984536674, [(1, 93), (2, 52)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 132, 23]]
** centroid: 3, normalized-entropy: 0.6057892520830948, [(2, 132), (3, 23)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.30028188010179874] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30028188010179874, 0.21397838439350506] ***
*** starting iteration: 2; err: [Inf, 0.30028188010179874, 0.21397838439350506] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30028188010179874, 0.21397838439350506, 0.2021417731877875] ***
*** starting iteration: 3; err: [Inf, 0.30028188010179874, 0.21397838439350506, 0.2021417731877875] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30028188010179874, 0.21397838439350506, 0.2021417731877875, 0.19785706412925333] ***
*** starting iteration: 4; err: [Inf, 0.30028188010179874, 0.21397838439350506, 0.2021417731877875, 0.19785706412925333] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30028188010179874, 0.21397838439350506, 0.2021417731877875, 0.19785706412925333, 0.19559499029176416] ***
*** starting iteration: 5; err: [Inf, 0.30028188010179874, 0.21397838439350506, 0.2021417731877875, 0.19785706412925333, 0.19559499029176416] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30028188010179874, 0.21397838439350506, 0.2021417731877875, 0.19785706412925333, 0.19559499029176416, 0.19396628768465765] ***
*** starting iteration: 6; err: [Inf, 0.30028188010179874, 0.21397838439350506, 0.2021417731877875, 0.19785706412925333, 0.19559499029176416, 0.19396628768465765] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30028188010179874, 0.21397838439350506, 0.2021417731877875, 0.19785706412925333, 0.19559499029176416, 0.19396628768465765, 0.19312086960653196] ***
*** finished computation of 7 references, err: [Inf, 0.30028188010179874, 0.21397838439350506, 0.2021417731877875, 0.19785706412925333, 0.19559499029176416, 0.19396628768465765, 0.19312086960653196] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [12, 84, 0]]
** centroid: 1, normalized-entropy: 0.5435644431995963, [(1, 12), (2, 84)]
*** center 2: selecting labels [1] (freq >= 2) [from [104, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [71, 17, 0]]
** centroid: 4, normalized-entropy: 0.7080803256135676, [(1, 71), (2, 17)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 51, 30]]
** centroid: 5, normalized-entropy: 0.9509560484549724, [(2, 51), (3, 30)]
*** center 6: selecting labels [1] (freq >= 2) [from [111, 1, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 95, 0]]
** centroid: 7, normalized-entropy: 0.19745300438456026, [(1, 3), (2, 95)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2417238774580945] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2417238774580945, 0.2026374001876972] ***
*** starting iteration: 2; err: [Inf, 0.2417238774580945, 0.2026374001876972] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2417238774580945, 0.2026374001876972, 0.1972020162518012] ***
*** starting iteration: 3; err: [Inf, 0.2417238774580945, 0.2026374001876972, 0.1972020162518012] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2417238774580945, 0.2026374001876972, 0.1972020162518012, 0.19403588004561065] ***
*** starting iteration: 4; err: [Inf, 0.2417238774580945, 0.2026374001876972, 0.1972020162518012, 0.19403588004561065] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2417238774580945, 0.2026374001876972, 0.1972020162518012, 0.19403588004561065, 0.19266560689352083] ***
*** starting iteration: 5; err: [Inf, 0.2417238774580945, 0.2026374001876972, 0.1972020162518012, 0.19403588004561065, 0.19266560689352083] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2417238774580945, 0.2026374001876972, 0.1972020162518012, 0.19403588004561065, 0.19266560689352083, 0.19217499752872452] ***
*** finished computation of 7 references, err: [Inf, 0.2417238774580945, 0.2026374001876972, 0.1972020162518012, 0.19403588004561065, 0.19266560689352083, 0.19217499752872452] ***
*** center 1: selecting labels [1] (freq >= 2) [from [99, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 90, 29]]
** centroid: 2, normalized-entropy: 0.8011351790359241, [(2, 90), (3, 29)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [64, 33, 0]]
** centroid: 3, normalized-entropy: 0.925015873745592, [(1, 64), (2, 33)]
*** center 4: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [64, 35, 0]]
** centroid: 5, normalized-entropy: 0.9371858565132074, [(1, 64), (2, 35)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [53, 29, 0]]
** centroid: 6, normalized-entropy: 0.9372930661967526, [(1, 53), (2, 29)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [46, 52, 0]]
** centroid: 7, normalized-entropy: 0.9972943816462351, [(1, 46), (2, 52)]
finished with 11 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.30186994448639287] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30186994448639287, 0.21698069905602502] ***
*** starting iteration: 2; err: [Inf, 0.30186994448639287, 0.21698069905602502] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30186994448639287, 0.21698069905602502, 0.19791501725994531] ***
*** starting iteration: 3; err: [Inf, 0.30186994448639287, 0.21698069905602502, 0.19791501725994531] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30186994448639287, 0.21698069905602502, 0.19791501725994531, 0.1907723692219252] ***
*** starting iteration: 4; err: [Inf, 0.30186994448639287, 0.21698069905602502, 0.19791501725994531, 0.1907723692219252] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30186994448639287, 0.21698069905602502, 0.19791501725994531, 0.1907723692219252, 0.18781810005738594] ***
*** starting iteration: 5; err: [Inf, 0.30186994448639287, 0.21698069905602502, 0.19791501725994531, 0.1907723692219252, 0.18781810005738594] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30186994448639287, 0.21698069905602502, 0.19791501725994531, 0.1907723692219252, 0.18781810005738594, 0.18662152444836272] ***
*** starting iteration: 6; err: [Inf, 0.30186994448639287, 0.21698069905602502, 0.19791501725994531, 0.1907723692219252, 0.18781810005738594, 0.18662152444836272] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30186994448639287, 0.21698069905602502, 0.19791501725994531, 0.1907723692219252, 0.18781810005738594, 0.18662152444836272, 0.185822199192317] ***
*** finished computation of 7 references, err: [Inf, 0.30186994448639287, 0.21698069905602502, 0.19791501725994531, 0.1907723692219252, 0.18781810005738594, 0.18662152444836272, 0.185822199192317] ***
*** center 1: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [52, 45, 0]]
** centroid: 2, normalized-entropy: 0.9962401135461777, [(1, 52), (2, 45)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [113, 7, 0]]
** centroid: 3, normalized-entropy: 0.32079303554752336, [(1, 113), (2, 7)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [3, 76, 0]]
** centroid: 4, normalized-entropy: 0.23292785546981223, [(1, 3), (2, 76)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [57, 49, 0]]
** centroid: 5, normalized-entropy: 0.9958873114590912, [(1, 57), (2, 49)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 60, 23]]
** centroid: 6, normalized-entropy: 0.8514808683852091, [(2, 60), (3, 23)]
*** center 7: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3297519655492683] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3297519655492683, 0.2477742094943697] ***
*** finished computation of 7 references, err: [Inf, 0.3297519655492683, 0.2477742094943697] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [237, 5, 0]]
** centroid: 1, normalized-entropy: 0.1451368304013539, [(1, 237), (2, 5)]
*** center 2: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [17, 42, 15]]
** centroid: 3, normalized-entropy: 0.8946583058530616, [(1, 17), (2, 42), (3, 15)]
*** center 4: selecting labels [1, 2, 3] (freq >= 2) [from [16, 57, 13]]
** centroid: 4, normalized-entropy: 0.7929049873858466, [(1, 16), (2, 57), (3, 13)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 90, 2]]
** centroid: 5, normalized-entropy: 0.1510969705171136, [(2, 90), (3, 2)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [49, 17, 0]]
** centroid: 6, normalized-entropy: 0.8230660790114689, [(1, 49), (2, 17)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 37, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.29209268707754105] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29209268707754105, 0.2065688040612944] ***
*** finished computation of 7 references, err: [Inf, 0.29209268707754105, 0.2065688040612944] ***
*** center 1: selecting labels [1] (freq >= 2) [from [159, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [30, 7, 0]]
** centroid: 2, normalized-entropy: 0.699772221773307, [(1, 30), (2, 7)]
*** center 3: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [92, 53, 0]]
** centroid: 4, normalized-entropy: 0.9471678207108329, [(1, 92), (2, 53)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 56, 29]]
** centroid: 5, normalized-entropy: 0.9259400597385792, [(2, 56), (3, 29)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [4, 107, 0]]
** centroid: 6, normalized-entropy: 0.22381255513458592, [(1, 4), (2, 107)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [50, 16, 0]]
** centroid: 7, normalized-entropy: 0.7990485210442682, [(1, 50), (2, 16)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2358880042261828] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2358880042261828, 0.21654070863664998] ***
*** finished computation of 7 references, err: [Inf, 0.2358880042261828, 0.21654070863664998] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [2, 93, 9]]
** centroid: 1, normalized-entropy: 0.35292412410980634, [(1, 2), (2, 93), (3, 9)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [91, 9, 0]]
** centroid: 2, normalized-entropy: 0.4364698170641031, [(1, 91), (2, 9)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [50, 40, 0]]
** centroid: 3, normalized-entropy: 0.9910760598382222, [(1, 50), (2, 40)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 64, 14]]
** centroid: 4, normalized-entropy: 0.6789538995185759, [(2, 64), (3, 14)]
*** center 5: selecting labels [1] (freq >= 2) [from [127, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [43, 31, 0]]
** centroid: 6, normalized-entropy: 0.9809470132751208, [(1, 43), (2, 31)]
*** center 7: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20181880039970498] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20181880039970498, 0.1657415317936434] ***
*** starting iteration: 2; err: [Inf, 0.20181880039970498, 0.1657415317936434] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20181880039970498, 0.1657415317936434, 0.1574102044706834] ***
*** starting iteration: 3; err: [Inf, 0.20181880039970498, 0.1657415317936434, 0.1574102044706834] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20181880039970498, 0.1657415317936434, 0.1574102044706834, 0.15321270742365536] ***
*** starting iteration: 4; err: [Inf, 0.20181880039970498, 0.1657415317936434, 0.1574102044706834, 0.15321270742365536] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20181880039970498, 0.1657415317936434, 0.1574102044706834, 0.15321270742365536, 0.15032817611216312] ***
*** starting iteration: 5; err: [Inf, 0.20181880039970498, 0.1657415317936434, 0.1574102044706834, 0.15321270742365536, 0.15032817611216312] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20181880039970498, 0.1657415317936434, 0.1574102044706834, 0.15321270742365536, 0.15032817611216312, 0.14867005550006107] ***
*** starting iteration: 6; err: [Inf, 0.20181880039970498, 0.1657415317936434, 0.1574102044706834, 0.15321270742365536, 0.15032817611216312, 0.14867005550006107] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20181880039970498, 0.1657415317936434, 0.1574102044706834, 0.15321270742365536, 0.15032817611216312, 0.14867005550006107, 0.147347544011934] ***
*** starting iteration: 7; err: [Inf, 0.20181880039970498, 0.1657415317936434, 0.1574102044706834, 0.15321270742365536, 0.15032817611216312, 0.14867005550006107, 0.147347544011934] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20181880039970498, 0.1657415317936434, 0.1574102044706834, 0.15321270742365536, 0.15032817611216312, 0.14867005550006107, 0.147347544011934, 0.1467821158086965] ***
*** finished computation of 7 references, err: [Inf, 0.20181880039970498, 0.1657415317936434, 0.1574102044706834, 0.15321270742365536, 0.15032817611216312, 0.14867005550006107, 0.147347544011934, 0.1467821158086965] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [86, 52, 0]]
** centroid: 1, normalized-entropy: 0.9557589912150007, [(1, 86), (2, 52)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 82, 30]]
** centroid: 2, normalized-entropy: 0.8383729377099398, [(2, 82), (3, 30)]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 67, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [37, 47, 0]]
** centroid: 5, normalized-entropy: 0.9897525351939971, [(1, 37), (2, 47)]
*** center 6: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17651043143584164] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17651043143584164, 0.15856710225944107] ***
*** starting iteration: 2; err: [Inf, 0.17651043143584164, 0.15856710225944107] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17651043143584164, 0.15856710225944107, 0.1562367369887884] ***
*** starting iteration: 3; err: [Inf, 0.17651043143584164, 0.15856710225944107, 0.1562367369887884] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17651043143584164, 0.15856710225944107, 0.1562367369887884, 0.1543934227693812] ***
*** starting iteration: 4; err: [Inf, 0.17651043143584164, 0.15856710225944107, 0.1562367369887884, 0.1543934227693812] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17651043143584164, 0.15856710225944107, 0.1562367369887884, 0.1543934227693812, 0.15218235627151858] ***
*** starting iteration: 5; err: [Inf, 0.17651043143584164, 0.15856710225944107, 0.1562367369887884, 0.1543934227693812, 0.15218235627151858] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17651043143584164, 0.15856710225944107, 0.1562367369887884, 0.1543934227693812, 0.15218235627151858, 0.14987665591719582] ***
*** starting iteration: 6; err: [Inf, 0.17651043143584164, 0.15856710225944107, 0.1562367369887884, 0.1543934227693812, 0.15218235627151858, 0.14987665591719582] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17651043143584164, 0.15856710225944107, 0.1562367369887884, 0.1543934227693812, 0.15218235627151858, 0.14987665591719582, 0.14728206869792834] ***
*** starting iteration: 7; err: [Inf, 0.17651043143584164, 0.15856710225944107, 0.1562367369887884, 0.1543934227693812, 0.15218235627151858, 0.14987665591719582, 0.14728206869792834] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17651043143584164, 0.15856710225944107, 0.1562367369887884, 0.1543934227693812, 0.15218235627151858, 0.14987665591719582, 0.14728206869792834, 0.14606410894763547] ***
*** starting iteration: 8; err: [Inf, 0.17651043143584164, 0.15856710225944107, 0.1562367369887884, 0.1543934227693812, 0.15218235627151858, 0.14987665591719582, 0.14728206869792834, 0.14606410894763547] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17651043143584164, 0.15856710225944107, 0.1562367369887884, 0.1543934227693812, 0.15218235627151858, 0.14987665591719582, 0.14728206869792834, 0.14606410894763547, 0.14569138477568974] ***
*** finished computation of 7 references, err: [Inf, 0.17651043143584164, 0.15856710225944107, 0.1562367369887884, 0.1543934227693812, 0.15218235627151858, 0.14987665591719582, 0.14728206869792834, 0.14606410894763547, 0.14569138477568974] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [80, 39, 0]]
** centroid: 1, normalized-entropy: 0.9125914261094841, [(1, 80), (2, 39)]
*** center 2: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [49, 48, 0]]
** centroid: 3, normalized-entropy: 0.9999233329473267, [(1, 49), (2, 48)]
*** center 4: selecting labels [1] (freq >= 1) [from [104, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 59, 28]]
** centroid: 5, normalized-entropy: 0.9063701886077911, [(2, 59), (3, 28)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [78, 13, 0]]
** centroid: 6, normalized-entropy: 0.5916727785823274, [(1, 78), (2, 13)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 80, 1]]
** centroid: 7, normalized-entropy: 0.09597040299587173, [(2, 80), (3, 1)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19009999060553723] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19009999060553723, 0.16136140897143994] ***
*** starting iteration: 2; err: [Inf, 0.19009999060553723, 0.16136140897143994] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19009999060553723, 0.16136140897143994, 0.15488782098078388] ***
*** starting iteration: 3; err: [Inf, 0.19009999060553723, 0.16136140897143994, 0.15488782098078388] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19009999060553723, 0.16136140897143994, 0.15488782098078388, 0.15196232641788796] ***
*** starting iteration: 4; err: [Inf, 0.19009999060553723, 0.16136140897143994, 0.15488782098078388, 0.15196232641788796] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19009999060553723, 0.16136140897143994, 0.15488782098078388, 0.15196232641788796, 0.15119145170407094] ***
*** finished computation of 7 references, err: [Inf, 0.19009999060553723, 0.16136140897143994, 0.15488782098078388, 0.15196232641788796, 0.15119145170407094] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 86, 23]]
** centroid: 1, normalized-entropy: 0.7434073165779199, [(2, 86), (3, 23)]
*** center 2: selecting labels [1] (freq >= 1) [from [48, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [100, 2, 0]]
** centroid: 3, normalized-entropy: 0.13923299905509884, [(1, 100), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [3, 79, 0]]
** centroid: 4, normalized-entropy: 0.22641094842107634, [(1, 3), (2, 79)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [56, 43, 0]]
** centroid: 5, normalized-entropy: 0.9875257101057102, [(1, 56), (2, 43)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [84, 27, 0]]
** centroid: 6, normalized-entropy: 0.8003922080453356, [(1, 84), (2, 27)]
*** center 7: selecting labels [1] (freq >= 1) [from [116, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26420457380007134] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26420457380007134, 0.16837493347440352] ***
*** starting iteration: 2; err: [Inf, 0.26420457380007134, 0.16837493347440352] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26420457380007134, 0.16837493347440352, 0.15782572598232925] ***
*** starting iteration: 3; err: [Inf, 0.26420457380007134, 0.16837493347440352, 0.15782572598232925] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26420457380007134, 0.16837493347440352, 0.15782572598232925, 0.15408716030634223] ***
*** finished computation of 7 references, err: [Inf, 0.26420457380007134, 0.16837493347440352, 0.15782572598232925, 0.15408716030634223] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [36, 23, 0]]
** centroid: 1, normalized-entropy: 0.9646900825612559, [(1, 36), (2, 23)]
*** center 2: selecting labels [1] (freq >= 1) [from [133, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [98, 36, 0]]
** centroid: 3, normalized-entropy: 0.8395304981054318, [(1, 98), (2, 36)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [39, 41, 0]]
** centroid: 4, normalized-entropy: 0.9995491108252483, [(1, 39), (2, 41)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 74, 30]]
** centroid: 5, normalized-entropy: 0.8667256130949592, [(2, 74), (3, 30)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 74, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.17694774970574223] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17694774970574223, 0.15327346837846212] ***
*** starting iteration: 2; err: [Inf, 0.17694774970574223, 0.15327346837846212] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17694774970574223, 0.15327346837846212, 0.15098394793800374] ***
*** starting iteration: 3; err: [Inf, 0.17694774970574223, 0.15327346837846212, 0.15098394793800374] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17694774970574223, 0.15327346837846212, 0.15098394793800374, 0.15005382359714836] ***
*** finished computation of 7 references, err: [Inf, 0.17694774970574223, 0.15327346837846212, 0.15098394793800374, 0.15005382359714836] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [92, 2, 0]]
** centroid: 1, normalized-entropy: 0.14854949043034832, [(1, 92), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [76, 26, 0]]
** centroid: 2, normalized-entropy: 0.8189555018403103, [(1, 76), (2, 26)]
*** center 3: selecting labels [1] (freq >= 1) [from [113, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [78, 12, 0]]
** centroid: 4, normalized-entropy: 0.5665095065529052, [(1, 78), (2, 12)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 95, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 59, 29]]
** centroid: 6, normalized-entropy: 0.9144612916935675, [(2, 59), (3, 29)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [40, 45, 0]]
** centroid: 7, normalized-entropy: 0.9975025463691153, [(1, 40), (2, 45)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22278951009459] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22278951009459, 0.17006984556574134] ***
*** starting iteration: 2; err: [Inf, 0.22278951009459, 0.17006984556574134] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22278951009459, 0.17006984556574134, 0.15989165423759796] ***
*** starting iteration: 3; err: [Inf, 0.22278951009459, 0.17006984556574134, 0.15989165423759796] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22278951009459, 0.17006984556574134, 0.15989165423759796, 0.15545461948184686] ***
*** finished computation of 7 references, err: [Inf, 0.22278951009459, 0.17006984556574134, 0.15989165423759796, 0.15545461948184686] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [10, 90, 0]]
** centroid: 1, normalized-entropy: 0.46899559358928133, [(1, 10), (2, 90)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [47, 70, 0]]
** centroid: 2, normalized-entropy: 0.971941751933861, [(1, 47), (2, 70)]
*** center 3: selecting labels [1] (freq >= 1) [from [110, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 67, 23]]
** centroid: 4, normalized-entropy: 0.8199653102187632, [(2, 67), (3, 23)]
*** center 5: selecting labels [1] (freq >= 1) [from [102, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [53, 10, 0]]
** centroid: 7, normalized-entropy: 0.6312630180916119, [(1, 53), (2, 10)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3680125382091212] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3680125382091212, 0.3033106449163622] ***
*** finished computation of 3 references, err: [Inf, 0.3680125382091212, 0.3033106449163622] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [137, 92, 0]]
** centroid: 1, normalized-entropy: 0.9719631971675233, [(1, 137), (2, 92)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [250, 10, 0]]
** centroid: 2, normalized-entropy: 0.23519338181924157, [(1, 250), (2, 10)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [1, 146, 30]]
** centroid: 3, normalized-entropy: 0.6587435307694671, [(2, 146), (3, 30)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4125410388216845] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4125410388216845, 0.337156367588738] ***
*** finished computation of 3 references, err: [Inf, 0.4125410388216845, 0.337156367588738] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [30, 111, 29]]
** centroid: 1, normalized-entropy: 0.8065810840865442, [(1, 30), (2, 111), (3, 29)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [269, 42, 0]]
** centroid: 2, normalized-entropy: 0.5711221936533042, [(1, 269), (2, 42)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [100, 86, 0]]
** centroid: 3, normalized-entropy: 0.9959094138937685, [(1, 100), (2, 86)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.34068068436094223] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34068068436094223, 0.3016372079956813] ***
*** finished computation of 3 references, err: [Inf, 0.34068068436094223, 0.3016372079956813] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [12, 137, 23]]
** centroid: 1, normalized-entropy: 0.5789355201654247, [(1, 12), (2, 137), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [169, 100, 0]]
** centroid: 2, normalized-entropy: 0.9520042075039787, [(1, 169), (2, 100)]
*** center 3: selecting labels [1] (freq >= 2) [from [226, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.36678637830154587] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36678637830154587, 0.30621725700686575] ***
*** finished computation of 3 references, err: [Inf, 0.36678637830154587, 0.30621725700686575] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [115, 134, 4]]
** centroid: 1, normalized-entropy: 0.6923021785472063, [(1, 115), (2, 134), (3, 4)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [87, 114, 26]]
** centroid: 2, normalized-entropy: 0.8753233903662286, [(1, 87), (2, 114), (3, 26)]
*** center 3: selecting labels [1] (freq >= 1) [from [186, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3461064046620206] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3461064046620206, 0.3078225831371331] ***
*** finished computation of 3 references, err: [Inf, 0.3461064046620206, 0.3078225831371331] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 147, 29]]
** centroid: 1, normalized-entropy: 0.6456061439234043, [(2, 147), (3, 29)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [138, 77, 0]]
** centroid: 2, normalized-entropy: 0.9411280185713452, [(1, 138), (2, 77)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [261, 15, 0]]
** centroid: 3, normalized-entropy: 0.30458668852140236, [(1, 261), (2, 15)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.490401824869249] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.490401824869249, 0.3305276510971731] ***
*** finished computation of 3 references, err: [Inf, 0.490401824869249, 0.3305276510971731] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [252, 85, 0]]
** centroid: 1, normalized-entropy: 0.8147864717050526, [(1, 252), (2, 85)]
*** center 2: selecting labels [1] (freq >= 1) [from [146, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [9, 152, 23]]
** centroid: 3, normalized-entropy: 0.5146163717372528, [(1, 9), (2, 152), (3, 23)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3231612135966153] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3231612135966153, 0.24029698758490797] ***
*** starting iteration: 2; err: [Inf, 0.3231612135966153, 0.24029698758490797] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3231612135966153, 0.24029698758490797, 0.23721770749104837] ***
*** starting iteration: 3; err: [Inf, 0.3231612135966153, 0.24029698758490797, 0.23721770749104837] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3231612135966153, 0.24029698758490797, 0.23721770749104837, 0.23653571470116994] ***
*** finished computation of 3 references, err: [Inf, 0.3231612135966153, 0.24029698758490797, 0.23721770749104837, 0.23653571470116994] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [87, 143, 22]]
** centroid: 1, normalized-entropy: 0.8206327040301631, [(1, 87), (2, 143), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [115, 94, 1]]
** centroid: 2, normalized-entropy: 0.9927050272181983, [(1, 115), (2, 94)]
*** center 3: selecting labels [1] (freq >= 2) [from [205, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.38718983349767894] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38718983349767894, 0.3147578391445068] ***
*** starting iteration: 2; err: [Inf, 0.38718983349767894, 0.3147578391445068] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38718983349767894, 0.3147578391445068, 0.30607095490246117] ***
*** starting iteration: 3; err: [Inf, 0.38718983349767894, 0.3147578391445068, 0.30607095490246117] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38718983349767894, 0.3147578391445068, 0.30607095490246117, 0.3036779829583413] ***
*** finished computation of 3 references, err: [Inf, 0.38718983349767894, 0.3147578391445068, 0.30607095490246117, 0.3036779829583413] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [239, 35, 0]]
** centroid: 1, normalized-entropy: 0.5511997008420131, [(1, 239), (2, 35)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [149, 34, 0]]
** centroid: 2, normalized-entropy: 0.6925859248885583, [(1, 149), (2, 34)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 179, 30]]
** centroid: 3, normalized-entropy: 0.5934369215614691, [(2, 179), (3, 30)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3861163925809571] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3861163925809571, 0.32442466788429547] ***
*** starting iteration: 2; err: [Inf, 0.3861163925809571, 0.32442466788429547] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3861163925809571, 0.32442466788429547, 0.31014479142285584] ***
*** starting iteration: 3; err: [Inf, 0.3861163925809571, 0.32442466788429547, 0.31014479142285584] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3861163925809571, 0.32442466788429547, 0.31014479142285584, 0.30679482296025423] ***
*** finished computation of 3 references, err: [Inf, 0.3861163925809571, 0.32442466788429547, 0.31014479142285584, 0.30679482296025423] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [262, 27, 0]]
** centroid: 1, normalized-entropy: 0.447801845264604, [(1, 262), (2, 27)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 152, 29]]
** centroid: 2, normalized-entropy: 0.6348379815466055, [(2, 152), (3, 29)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [137, 60, 0]]
** centroid: 3, normalized-entropy: 0.8868039458416388, [(1, 137), (2, 60)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.38730295815657284] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38730295815657284, 0.3153546789836982] ***
*** starting iteration: 2; err: [Inf, 0.38730295815657284, 0.3153546789836982] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38730295815657284, 0.3153546789836982, 0.30116206501656656] ***
*** starting iteration: 3; err: [Inf, 0.38730295815657284, 0.3153546789836982, 0.30116206501656656] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38730295815657284, 0.3153546789836982, 0.30116206501656656, 0.29926240998229525] ***
*** finished computation of 3 references, err: [Inf, 0.38730295815657284, 0.3153546789836982, 0.30116206501656656, 0.29926240998229525] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [96, 148, 23]]
** centroid: 1, normalized-entropy: 0.8247182691710007, [(1, 96), (2, 148), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [117, 89, 0]]
** centroid: 2, normalized-entropy: 0.9866318497692973, [(1, 117), (2, 89)]
*** center 3: selecting labels [1] (freq >= 2) [from [194, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.34241559336716365] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34241559336716365, 0.2421377694329342] ***
*** finished computation of 3 references, err: [Inf, 0.34241559336716365, 0.2421377694329342] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [245, 45, 0]]
** centroid: 1, normalized-entropy: 0.6226343162547099, [(1, 245), (2, 45)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [143, 46, 0]]
** centroid: 2, normalized-entropy: 0.8006262806341293, [(1, 143), (2, 46)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 157, 30]]
** centroid: 3, normalized-entropy: 0.635332024356936, [(2, 157), (3, 30)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3245586475610141] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3245586475610141, 0.2461673454779467] ***
*** finished computation of 3 references, err: [Inf, 0.3245586475610141, 0.2461673454779467] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [290, 24, 0]]
** centroid: 1, normalized-entropy: 0.38948464659341436, [(1, 290), (2, 24)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 165, 29]]
** centroid: 2, normalized-entropy: 0.6085488514177504, [(2, 165), (3, 29)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [109, 50, 0]]
** centroid: 3, normalized-entropy: 0.8982609371118948, [(1, 109), (2, 50)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.40942757720521455] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40942757720521455, 0.23827738181242478] ***
*** finished computation of 3 references, err: [Inf, 0.40942757720521455, 0.23827738181242478] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [197, 71, 0]]
** centroid: 1, normalized-entropy: 0.8340882430035244, [(1, 197), (2, 71)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [210, 39, 0]]
** centroid: 2, normalized-entropy: 0.6261776539736496, [(1, 210), (2, 39)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 127, 23]]
** centroid: 3, normalized-entropy: 0.6181194891000383, [(2, 127), (3, 23)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2640290486027819] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2640290486027819, 0.1901166683941095] ***
*** finished computation of 7 references, err: [Inf, 0.2640290486027819, 0.1901166683941095] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [89, 6, 0]]
** centroid: 1, normalized-entropy: 0.3398550782221443, [(1, 89), (2, 6)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [76, 45, 0]]
** centroid: 2, normalized-entropy: 0.9521204244105628, [(1, 76), (2, 45)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 69, 30]]
** centroid: 3, normalized-entropy: 0.8849636363831529, [(2, 69), (3, 30)]
*** center 4: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [52, 46, 0]]
** centroid: 5, normalized-entropy: 0.9972943816462351, [(1, 52), (2, 46)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 82, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.250951007944064] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.250951007944064, 0.19838829406060982] ***
*** finished computation of 7 references, err: [Inf, 0.250951007944064, 0.19838829406060982] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [92, 17, 0]]
** centroid: 1, normalized-entropy: 0.6245644324971011, [(1, 92), (2, 17)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [65, 8, 0]]
** centroid: 2, normalized-entropy: 0.4986751363204345, [(1, 65), (2, 8)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 82, 23]]
** centroid: 3, normalized-entropy: 0.7584246665423688, [(2, 82), (3, 23)]
*** center 4: selecting labels [1] (freq >= 1) [from [114, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [84, 32, 0]]
** centroid: 5, normalized-entropy: 0.8497511372532974, [(1, 84), (2, 32)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [44, 30, 0]]
** centroid: 6, normalized-entropy: 0.9740248644357521, [(1, 44), (2, 30)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 70, 6]]
** centroid: 7, normalized-entropy: 0.39845927409523557, [(2, 70), (3, 6)]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 14)
[0.9439888990787194, 0.9330108551665438, 0.9280058501615388, 0.9260038481595368, 0.9190058321794848, 0.9139588690486894, 0.908006809204414, 0.9010387633142125, 0.9009938081794369, 0.8979788171404938, 0.8800147452842063, 0.8759627891364419, 0.86897676119233, 0.8429657202112292]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.6, 1) => 0.9439888990787194
finished with 15
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.2444776701480472] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2444776701480472, 0.16482309874443635] ***
*** finished computation of 7 references, err: [Inf, 0.2444776701480472, 0.16482309874443635] ***
*** center 1: selecting labels [1] (freq >= 2) [from [137, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [84, 1, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [119, 42, 0]]
** centroid: 3, normalized-entropy: 0.828055725379504, [(1, 119), (2, 42)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 84, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 74, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 29, 30]]
** centroid: 6, normalized-entropy: 0.9997927658541268, [(2, 29), (3, 30)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [48, 18, 0]]
** centroid: 7, normalized-entropy: 0.8453509366224364, [(1, 48), (2, 18)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20385513660767446] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20385513660767446, 0.1624133995743929] ***
*** finished computation of 7 references, err: [Inf, 0.20385513660767446, 0.1624133995743929] ***
*** center 1: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [56, 14, 0]]
** centroid: 2, normalized-entropy: 0.7219280948873623, [(1, 56), (2, 14)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 46, 29]]
** centroid: 3, normalized-entropy: 0.9626147059982517, [(2, 46), (3, 29)]
*** center 4: selecting labels [1] (freq >= 2) [from [182, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 49, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [6, 87, 0]]
** centroid: 6, normalized-entropy: 0.3451173149449528, [(1, 6), (2, 87)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [94, 43, 0]]
** centroid: 7, normalized-entropy: 0.8975887507715623, [(1, 94), (2, 43)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25808804438797117] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25808804438797117, 0.19046458579471398] ***
*** finished computation of 7 references, err: [Inf, 0.25808804438797117, 0.19046458579471398] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [81, 102, 8]]
** centroid: 1, normalized-entropy: 0.7570287319077719, [(1, 81), (2, 102), (3, 8)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [12, 121, 15]]
** centroid: 2, normalized-entropy: 0.5464948863857465, [(1, 12), (2, 121), (3, 15)]
*** center 3: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [143, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [32, 14, 0]]
** centroid: 5, normalized-entropy: 0.8865408928220899, [(1, 32), (2, 14)]
*** center 6: selecting labels [1] (freq >= 2) [from [41, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [17, 0, 0]]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 15)
[0.9439888990787194, 0.9330108551665438, 0.9319768870667074, 0.9280058501615388, 0.9260038481595368, 0.9190058321794848, 0.9139588690486894, 0.908006809204414, 0.9010387633142125, 0.9009938081794369, 0.8979788171404938, 0.8800147452842063, 0.8759627891364419, 0.86897676119233, 0.8429657202112292]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.6, 1) => 0.9439888990787194
finished with 16
iteration 3 finished
generating 4 configurations using top 12 configurations, starting with 16)
[0.9439888990787194, 0.9330108551665438, 0.9319768870667074, 0.9280058501615388, 0.9260038481595368, 0.9190058321794848, 0.9139588690486894, 0.908006809204414, 0.9010387633142125, 0.9009938081794369, 0.8979788171404938, 0.8800147452842063, 0.8759627891364419, 0.86897676119233, 0.8429657202112292, 0.786978595361829]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.6, 1) => 0.9439888990787194
finished with 17
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.24275151980123497] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24275151980123497, 0.19785588086299025] ***
*** starting iteration: 2; err: [Inf, 0.24275151980123497, 0.19785588086299025] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24275151980123497, 0.19785588086299025, 0.19316978631653003] ***
*** starting iteration: 3; err: [Inf, 0.24275151980123497, 0.19785588086299025, 0.19316978631653003] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24275151980123497, 0.19785588086299025, 0.19316978631653003, 0.19165502271444365] ***
*** finished computation of 7 references, err: [Inf, 0.24275151980123497, 0.19785588086299025, 0.19316978631653003, 0.19165502271444365] ***
*** center 1: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [68, 34, 0]]
** centroid: 2, normalized-entropy: 0.9182958340544894, [(1, 68), (2, 34)]
*** center 3: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [42, 40, 0]]
** centroid: 4, normalized-entropy: 0.9995708393473225, [(1, 42), (2, 40)]
*** center 5: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 84, 30]]
** centroid: 6, normalized-entropy: 0.8314743880097292, [(2, 84), (3, 30)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [7, 90, 0]]
** centroid: 7, normalized-entropy: 0.37395136668121054, [(1, 7), (2, 90)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22930422512956825] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22930422512956825, 0.2027436301043757] ***
*** starting iteration: 2; err: [Inf, 0.22930422512956825, 0.2027436301043757] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22930422512956825, 0.2027436301043757, 0.19809521415698128] ***
*** starting iteration: 3; err: [Inf, 0.22930422512956825, 0.2027436301043757, 0.19809521415698128] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22930422512956825, 0.2027436301043757, 0.19809521415698128, 0.19554969861564495] ***
*** finished computation of 7 references, err: [Inf, 0.22930422512956825, 0.2027436301043757, 0.19809521415698128, 0.19554969861564495] ***
*** center 1: selecting labels [1] (freq >= 1) [from [115, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [7, 62, 0]]
** centroid: 2, normalized-entropy: 0.47357292491745173, [(1, 7), (2, 62)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 83, 29]]
** centroid: 3, normalized-entropy: 0.8251252643746189, [(2, 83), (3, 29)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [94, 4, 0]]
** centroid: 4, normalized-entropy: 0.2460225782203316, [(1, 94), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [69, 41, 0]]
** centroid: 5, normalized-entropy: 0.9527431707334316, [(1, 69), (2, 41)]
*** center 6: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [52, 49, 0]]
** centroid: 7, normalized-entropy: 0.999363485672765, [(1, 52), (2, 49)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.27542216974244954] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27542216974244954, 0.22941343318266066] ***
*** starting iteration: 2; err: [Inf, 0.27542216974244954, 0.22941343318266066] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27542216974244954, 0.22941343318266066, 0.20938299079404687] ***
*** starting iteration: 3; err: [Inf, 0.27542216974244954, 0.22941343318266066, 0.20938299079404687] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27542216974244954, 0.22941343318266066, 0.20938299079404687, 0.19705964035439727] ***
*** finished computation of 7 references, err: [Inf, 0.27542216974244954, 0.22941343318266066, 0.20938299079404687, 0.19705964035439727] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [59, 15, 0]]
** centroid: 1, normalized-entropy: 0.7273006785144036, [(1, 59), (2, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [61, 34, 0]]
** centroid: 3, normalized-entropy: 0.9409217747114994, [(1, 61), (2, 34)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 117, 23]]
** centroid: 4, normalized-entropy: 0.6444644656551834, [(2, 117), (3, 23)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [108, 2, 0]]
** centroid: 5, normalized-entropy: 0.13110652958234514, [(1, 108), (2, 2)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [34, 69, 0]]
** centroid: 6, normalized-entropy: 0.9150255357249155, [(1, 34), (2, 69)]
*** center 7: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 17)
[0.9439888990787194, 0.9330108551665438, 0.9319768870667074, 0.9280058501615388, 0.9269958581335827, 0.9260038481595368, 0.9190058321794848, 0.9139588690486894, 0.908006809204414, 0.9010387633142125, 0.9009938081794369, 0.8979788171404938, 0.8800147452842063, 0.8759627891364419, 0.86897676119233, 0.8429657202112292, 0.786978595361829]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.6, 1) => 0.9439888990787194
finished with 17
iteration 5 finished
generating 4 configurations using top 12 configurations, starting with 17)
[0.9439888990787194, 0.9330108551665438, 0.9319768870667074, 0.9280058501615388, 0.9269958581335827, 0.9260038481595368, 0.9190058321794848, 0.9139588690486894, 0.908006809204414, 0.9010387633142125, 0.9009938081794369, 0.8979788171404938, 0.8800147452842063, 0.8759627891364419, 0.86897676119233, 0.8429657202112292, 0.786978595361829]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.6, 1) => 0.9439888990787194
finished with 17
iteration 6 finished
generating 4 configurations using top 12 configurations, starting with 17)
[0.9439888990787194, 0.9330108551665438, 0.9319768870667074, 0.9280058501615388, 0.9269958581335827, 0.9260038481595368, 0.9190058321794848, 0.9139588690486894, 0.908006809204414, 0.9010387633142125, 0.9009938081794369, 0.8979788171404938, 0.8800147452842063, 0.8759627891364419, 0.86897676119233, 0.8429657202112292, 0.786978595361829]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.6, 1) => 0.9439888990787194
finished with 17
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 17)
[0.9439888990787194, 0.9330108551665438, 0.9319768870667074, 0.9280058501615388, 0.9269958581335827, 0.9260038481595368, 0.9190058321794848, 0.9139588690486894, 0.908006809204414, 0.9010387633142125, 0.9009938081794369, 0.8979788171404938, 0.8800147452842063, 0.8759627891364419, 0.86897676119233, 0.8429657202112292, 0.786978595361829]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.6, 1) => 0.9439888990787194
finished with 19
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.1807773018692125] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1807773018692125, 0.15225053463755567] ***
*** finished computation of 7 references, err: [Inf, 0.1807773018692125, 0.15225053463755567] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [124, 4, 0]]
** centroid: 1, normalized-entropy: 0.2006223243127146, [(1, 124), (2, 4)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [69, 13, 0]]
** centroid: 2, normalized-entropy: 0.6307970795750609, [(1, 69), (2, 13)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 38, 30]]
** centroid: 3, normalized-entropy: 0.9899927915575186, [(2, 38), (3, 30)]
*** center 4: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [9, 109, 0]]
** centroid: 5, normalized-entropy: 0.388902232296877, [(1, 9), (2, 109)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [12, 84, 0]]
** centroid: 6, normalized-entropy: 0.5435644431995963, [(1, 12), (2, 84)]
*** center 7: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19599855593314905] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19599855593314905, 0.1578488438187734] ***
*** finished computation of 7 references, err: [Inf, 0.19599855593314905, 0.1578488438187734] ***
*** center 1: selecting labels [2] (freq >= 2) [from [1, 124, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [54, 36, 0]]
** centroid: 3, normalized-entropy: 0.9709505944546688, [(1, 54), (2, 36)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [65, 39, 0]]
** centroid: 4, normalized-entropy: 0.954434002924965, [(1, 65), (2, 39)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [111, 5, 0]]
** centroid: 5, normalized-entropy: 0.25634477409913614, [(1, 111), (2, 5)]
*** center 6: selecting labels [1] (freq >= 2) [from [99, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 35, 29]]
** centroid: 7, normalized-entropy: 0.9936507116910402, [(2, 35), (3, 29)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20245243530829382] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20245243530829382, 0.1558992115437225] ***
*** finished computation of 7 references, err: [Inf, 0.20245243530829382, 0.1558992115437225] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [50, 54, 0]]
** centroid: 1, normalized-entropy: 0.9989326546260583, [(1, 50), (2, 54)]
*** center 2: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 76, 23]]
** centroid: 4, normalized-entropy: 0.7820392866349247, [(2, 76), (3, 23)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [88, 34, 0]]
** centroid: 5, normalized-entropy: 0.8536576732793314, [(1, 88), (2, 34)]
*** center 6: selecting labels [1] (freq >= 2) [from [107, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [8, 73, 0]]
** centroid: 7, normalized-entropy: 0.46506984488164627, [(1, 8), (2, 73)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23957322425608923] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23957322425608923, 0.19869025749806035] ***
*** finished computation of 7 references, err: [Inf, 0.23957322425608923, 0.19869025749806035] ***
*** center 1: selecting labels [1] (freq >= 2) [from [120, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 49, 30]]
** centroid: 2, normalized-entropy: 0.9578630237479795, [(2, 49), (3, 30)]
*** center 3: selecting labels [1] (freq >= 2) [from [116, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [12, 78, 0]]
** centroid: 4, normalized-entropy: 0.5665095065529052, [(1, 12), (2, 78)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [46, 54, 0]]
** centroid: 5, normalized-entropy: 0.9953784388202258, [(1, 46), (2, 54)]
*** center 6: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [15, 67, 0]]
** centroid: 7, normalized-entropy: 0.6864381668766382, [(1, 15), (2, 67)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22313127331044721] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22313127331044721, 0.1927075112295076] ***
*** finished computation of 7 references, err: [Inf, 0.22313127331044721, 0.1927075112295076] ***
*** center 1: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 52, 29]]
** centroid: 2, normalized-entropy: 0.9410313090323237, [(2, 52), (3, 29)]
*** center 3: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [58, 46, 0]]
** centroid: 4, normalized-entropy: 0.990374836448575, [(1, 58), (2, 46)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [29, 86, 0]]
** centroid: 5, normalized-entropy: 0.814705548656723, [(1, 29), (2, 86)]
*** center 6: selecting labels [1] (freq >= 2) [from [128, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [15, 55, 0]]
** centroid: 7, normalized-entropy: 0.7495952572594798, [(1, 15), (2, 55)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22783592059273508] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22783592059273508, 0.19328892636538736] ***
*** finished computation of 7 references, err: [Inf, 0.22783592059273508, 0.19328892636538736] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 89, 4]]
** centroid: 1, normalized-entropy: 0.2559300438391133, [(2, 89), (3, 4)]
*** center 2: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [48, 37, 0]]
** centroid: 3, normalized-entropy: 0.9878853530449176, [(1, 48), (2, 37)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [108, 11, 0]]
** centroid: 4, normalized-entropy: 0.444552233571264, [(1, 108), (2, 11)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [87, 34, 0]]
** centroid: 5, normalized-entropy: 0.8567986030485539, [(1, 87), (2, 34)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 66, 19]]
** centroid: 6, normalized-entropy: 0.7665599404543365, [(2, 66), (3, 19)]
*** center 7: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 19)
[0.9460088831346316, 0.9439888990787194, 0.9330108551665438, 0.9319768870667074, 0.9309938681196166, 0.9280058501615388, 0.9269958581335827, 0.9260038481595368, 0.9190058321794848, 0.9139588690486894, 0.908006809204414, 0.9010387633142125, 0.9009938081794369, 0.8979788171404938, 0.8800147452842063, 0.8759627891364419, 0.86897676119233, 0.8429657202112292, 0.786978595361829]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9460088831346316
finished with 19
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.20516747271781788] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20516747271781788, 0.15292639240738937] ***
*** finished computation of 7 references, err: [Inf, 0.20516747271781788, 0.15292639240738937] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [92, 86, 0]]
** centroid: 1, normalized-entropy: 0.9991802351145687, [(1, 92), (2, 86)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [131, 5, 0]]
** centroid: 2, normalized-entropy: 0.22725656422208346, [(1, 131), (2, 5)]
*** center 3: selecting labels [1] (freq >= 2) [from [140, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 98, 41]]
** centroid: 4, normalized-entropy: 0.8750475697549329, [(2, 98), (3, 41)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [110, 61, 0]]
** centroid: 5, normalized-entropy: 0.9399311927861982, [(1, 110), (2, 61)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 112, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [124, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18690295908320695] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18690295908320695, 0.1500093176169321] ***
*** finished computation of 7 references, err: [Inf, 0.18690295908320695, 0.1500093176169321] ***
*** center 1: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 26, 19]]
** centroid: 2, normalized-entropy: 0.9824740868386409, [(2, 26), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [48, 18, 0]]
** centroid: 3, normalized-entropy: 0.8453509366224364, [(1, 48), (2, 18)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [58, 13, 0]]
** centroid: 4, normalized-entropy: 0.6868088934028034, [(1, 58), (2, 13)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [25, 59, 0]]
** centroid: 5, normalized-entropy: 0.8783609387702275, [(1, 25), (2, 59)]
*** center 6: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 55, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19590488582663237] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19590488582663237, 0.15226276144664735] ***
*** finished computation of 7 references, err: [Inf, 0.19590488582663237, 0.15226276144664735] ***
*** center 1: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 37, 17]]
** centroid: 2, normalized-entropy: 0.8986533756907481, [(2, 37), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [71, 9, 0]]
** centroid: 3, normalized-entropy: 0.5074109636646968, [(1, 71), (2, 9)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [14, 65, 0]]
** centroid: 4, normalized-entropy: 0.6739468651941155, [(1, 14), (2, 65)]
*** center 5: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [13, 71, 0]]
** centroid: 6, normalized-entropy: 0.6216297820565386, [(1, 13), (2, 71)]
*** center 7: selecting labels [1] (freq >= 2) [from [45, 1, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18952271870337425] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18952271870337425, 0.15469073303323239] ***
*** finished computation of 7 references, err: [Inf, 0.18952271870337425, 0.15469073303323239] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [65, 25, 0]]
** centroid: 1, normalized-entropy: 0.8524051786494784, [(1, 65), (2, 25)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [46, 5, 0]]
** centroid: 2, normalized-entropy: 0.462749058578174, [(1, 46), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 41, 17]]
** centroid: 3, normalized-entropy: 0.8726965039103788, [(2, 41), (3, 17)]
*** center 4: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [7, 70, 0]]
** centroid: 5, normalized-entropy: 0.43949698692151346, [(1, 7), (2, 70)]
*** center 6: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [43, 23, 0]]
** centroid: 7, normalized-entropy: 0.9327076126690367, [(1, 43), (2, 23)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1921401638817042] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1921401638817042, 0.15247784676216541] ***
*** finished computation of 7 references, err: [Inf, 0.1921401638817042, 0.15247784676216541] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [11, 53, 0]]
** centroid: 1, normalized-entropy: 0.6619760641115651, [(1, 11), (2, 53)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [53, 15, 0]]
** centroid: 2, normalized-entropy: 0.7612401496918493, [(1, 53), (2, 15)]
*** center 3: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 70, 2]]
** centroid: 4, normalized-entropy: 0.18312206830137262, [(2, 70), (3, 2)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [84, 15, 0]]
** centroid: 5, normalized-entropy: 0.6136190195993708, [(1, 84), (2, 15)]
*** center 6: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 32, 21]]
** centroid: 7, normalized-entropy: 0.9687003436508602, [(2, 32), (3, 21)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19123384092375637] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19123384092375637, 0.15775691629759966] ***
*** finished computation of 7 references, err: [Inf, 0.19123384092375637, 0.15775691629759966] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 81, 12]]
** centroid: 1, normalized-entropy: 0.5547781633412736, [(2, 81), (3, 12)]
*** center 2: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [43, 12, 0]]
** centroid: 3, normalized-entropy: 0.7568336324184036, [(1, 43), (2, 12)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [74, 11, 0]]
** centroid: 4, normalized-entropy: 0.5558227377664954, [(1, 74), (2, 11)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [56, 24, 0]]
** centroid: 5, normalized-entropy: 0.8812908992306927, [(1, 56), (2, 24)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 50, 13]]
** centroid: 6, normalized-entropy: 0.7344461802527668, [(2, 50), (3, 13)]
*** center 7: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20436357187200338] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20436357187200338, 0.1563818085808307] ***
*** finished computation of 7 references, err: [Inf, 0.20436357187200338, 0.1563818085808307] ***
*** center 1: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 27, 21]]
** centroid: 3, normalized-entropy: 0.9886994082884974, [(2, 27), (3, 21)]
*** center 4: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [61, 18, 0]]
** centroid: 5, normalized-entropy: 0.7742411580847273, [(1, 61), (2, 18)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [3, 63, 0]]
** centroid: 6, normalized-entropy: 0.2667649878030262, [(1, 3), (2, 63)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 71, 0]]
** centroid: 7, normalized-entropy: 0.2447650820208971, [(1, 3), (2, 71)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18529947971366345] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18529947971366345, 0.15417900620959699] ***
*** finished computation of 7 references, err: [Inf, 0.18529947971366345, 0.15417900620959699] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [7, 80, 0]]
** centroid: 1, normalized-entropy: 0.40379715049939235, [(1, 7), (2, 80)]
*** center 2: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [51, 18, 0]]
** centroid: 3, normalized-entropy: 0.828055725379504, [(1, 51), (2, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [90, 12, 0]]
** centroid: 5, normalized-entropy: 0.5225593745369407, [(1, 90), (2, 12)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 49, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 19, 26]]
** centroid: 7, normalized-entropy: 0.9824740868386409, [(2, 19), (3, 26)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19499405015446244] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19499405015446244, 0.15503011309867726] ***
*** finished computation of 7 references, err: [Inf, 0.19499405015446244, 0.15503011309867726] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [88, 9, 0]]
** centroid: 1, normalized-entropy: 0.44569317772256106, [(1, 88), (2, 9)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [69, 2, 0]]
** centroid: 2, normalized-entropy: 0.18512476010054582, [(1, 69), (2, 2)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 33, 17]]
** centroid: 3, normalized-entropy: 0.9248187049730301, [(2, 33), (3, 17)]
*** center 4: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [55, 3, 0]]
** centroid: 5, normalized-entropy: 0.29367630985136944, [(1, 55), (2, 3)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [12, 73, 0]]
** centroid: 6, normalized-entropy: 0.5873116089977589, [(1, 12), (2, 73)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 64, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18674815909843892] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18674815909843892, 0.1564204697869718] ***
*** finished computation of 7 references, err: [Inf, 0.18674815909843892, 0.1564204697869718] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [17, 76, 0]]
** centroid: 1, normalized-entropy: 0.6861549474202007, [(1, 17), (2, 76)]
*** center 2: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [51, 4, 0]]
** centroid: 3, normalized-entropy: 0.37601985096927276, [(1, 51), (2, 4)]
*** center 4: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 61, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [80, 15, 0]]
** centroid: 6, normalized-entropy: 0.6292492238560344, [(1, 80), (2, 15)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 16, 20]]
** centroid: 7, normalized-entropy: 0.9910760598382222, [(2, 16), (3, 20)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17935147186368705] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17935147186368705, 0.15671167803648858] ***
*** finished computation of 7 references, err: [Inf, 0.17935147186368705, 0.15671167803648858] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [64, 63, 0]]
** centroid: 1, normalized-entropy: 0.9999552759021285, [(1, 64), (2, 63)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [41, 6, 0]]
** centroid: 2, normalized-entropy: 0.5509844433017146, [(1, 41), (2, 6)]
*** center 3: selecting labels [1] (freq >= 2) [from [43, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 41, 17]]
** centroid: 4, normalized-entropy: 0.8726965039103788, [(2, 41), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [6, 78, 0]]
** centroid: 5, normalized-entropy: 0.3712323266408756, [(1, 6), (2, 78)]
*** center 6: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20956445915903896] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20956445915903896, 0.1574566709427163] ***
*** finished computation of 7 references, err: [Inf, 0.20956445915903896, 0.1574566709427163] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [85, 18, 0]]
** centroid: 1, normalized-entropy: 0.6684725699243225, [(1, 85), (2, 18)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 28, 22]]
** centroid: 2, normalized-entropy: 0.9895875212220558, [(2, 28), (3, 22)]
*** center 3: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [63, 4, 0]]
** centroid: 5, normalized-entropy: 0.32625881462949274, [(1, 63), (2, 4)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [3, 59, 0]]
** centroid: 6, normalized-entropy: 0.2795055456366802, [(1, 3), (2, 59)]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 73, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19068187152035534] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19068187152035534, 0.15633325993083416] ***
*** finished computation of 7 references, err: [Inf, 0.19068187152035534, 0.15633325993083416] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [108, 3, 0]]
** centroid: 1, normalized-entropy: 0.1792560669283214, [(1, 108), (2, 3)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 29, 21]]
** centroid: 2, normalized-entropy: 0.9814538950336533, [(2, 29), (3, 21)]
*** center 3: selecting labels [1] (freq >= 2) [from [66, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [69, 11, 0]]
** centroid: 4, normalized-entropy: 0.5776539033535634, [(1, 69), (2, 11)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [5, 78, 0]]
** centroid: 5, normalized-entropy: 0.32840071392894665, [(1, 5), (2, 78)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [2, 62, 0]]
** centroid: 6, normalized-entropy: 0.2006223243127146, [(1, 2), (2, 62)]
*** center 7: selecting labels [1] (freq >= 2) [from [45, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18599932970292865] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18599932970292865, 0.15095257081184535] ***
*** finished computation of 7 references, err: [Inf, 0.18599932970292865, 0.15095257081184535] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 75, 18]]
** centroid: 1, normalized-entropy: 0.708835673332196, [(2, 75), (3, 18)]
*** center 2: selecting labels [1] (freq >= 2) [from [44, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [50, 30, 0]]
** centroid: 4, normalized-entropy: 0.954434002924965, [(1, 50), (2, 30)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [74, 18, 0]]
** centroid: 5, normalized-entropy: 0.7131467486384921, [(1, 74), (2, 18)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [6, 62, 0]]
** centroid: 6, normalized-entropy: 0.43055186701043935, [(1, 6), (2, 62)]
*** center 7: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18068443090096117] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18068443090096117, 0.1513431067559868] ***
*** finished computation of 7 references, err: [Inf, 0.18068443090096117, 0.1513431067559868] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [103, 4, 0]]
** centroid: 1, normalized-entropy: 0.2301627406079554, [(1, 103), (2, 4)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [43, 24, 0]]
** centroid: 2, normalized-entropy: 0.9411864371816836, [(1, 43), (2, 24)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 27, 22]]
** centroid: 3, normalized-entropy: 0.9924760039430819, [(2, 27), (3, 22)]
*** center 4: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [17, 68, 0]]
** centroid: 5, normalized-entropy: 0.7219280948873623, [(1, 17), (2, 68)]
*** center 6: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [4, 63, 0]]
** centroid: 7, normalized-entropy: 0.32625881462949274, [(1, 4), (2, 63)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1997295346185565] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1997295346185565, 0.15470860789343716] ***
*** finished computation of 7 references, err: [Inf, 0.1997295346185565, 0.15470860789343716] ***
*** center 1: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [61, 14, 0]]
** centroid: 2, normalized-entropy: 0.6944460704939805, [(1, 61), (2, 14)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 28, 24]]
** centroid: 3, normalized-entropy: 0.9957274520849256, [(2, 28), (3, 24)]
*** center 4: selecting labels [1] (freq >= 2) [from [99, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [42, 26, 0]]
** centroid: 5, normalized-entropy: 0.9596868937742168, [(1, 42), (2, 26)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [12, 57, 0]]
** centroid: 6, normalized-entropy: 0.6665783579949205, [(1, 12), (2, 57)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 56, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2011577372327447] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2011577372327447, 0.15176039845682682] ***
*** finished computation of 7 references, err: [Inf, 0.2011577372327447, 0.15176039845682682] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 61, 27]]
** centroid: 1, normalized-entropy: 0.8894663896628687, [(2, 61), (3, 27)]
*** center 2: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [42, 4, 0]]
** centroid: 3, normalized-entropy: 0.42622865699814483, [(1, 42), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [65, 18, 0]]
** centroid: 4, normalized-entropy: 0.7544062039636575, [(1, 65), (2, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [60, 25, 0]]
** centroid: 5, normalized-entropy: 0.8739810481273581, [(1, 60), (2, 25)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [4, 65, 1]]
** centroid: 6, normalized-entropy: 0.3193373865339728, [(1, 4), (2, 65)]
*** center 7: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18763830091059208] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18763830091059208, 0.15309286801330746] ***
*** finished computation of 7 references, err: [Inf, 0.18763830091059208, 0.15309286801330746] ***
*** center 1: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 37, 17]]
** centroid: 2, normalized-entropy: 0.8986533756907481, [(2, 37), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [50, 11, 0]]
** centroid: 3, normalized-entropy: 0.6807937753703207, [(1, 50), (2, 11)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [10, 70, 0]]
** centroid: 4, normalized-entropy: 0.5435644431995963, [(1, 10), (2, 70)]
*** center 5: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [22, 65, 0]]
** centroid: 6, normalized-entropy: 0.8158009273789572, [(1, 22), (2, 65)]
*** center 7: selecting labels [1] (freq >= 2) [from [45, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17772693388909103] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17772693388909103, 0.14988826370239258] ***
*** finished computation of 7 references, err: [Inf, 0.17772693388909103, 0.14988826370239258] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [43, 64, 0]]
** centroid: 1, normalized-entropy: 0.9720334868479672, [(1, 43), (2, 64)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [51, 5, 0]]
** centroid: 2, normalized-entropy: 0.4340811200043348, [(1, 51), (2, 5)]
*** center 3: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 39, 22]]
** centroid: 4, normalized-entropy: 0.9432261548473416, [(2, 39), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [88, 5, 0]]
** centroid: 5, normalized-entropy: 0.30217361847879526, [(1, 88), (2, 5)]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 66, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19563340892829] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19563340892829, 0.1553370274398476] ***
*** finished computation of 7 references, err: [Inf, 0.19563340892829, 0.1553370274398476] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [6, 61, 0]]
** centroid: 1, normalized-entropy: 0.43497348007474274, [(1, 6), (2, 61)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [58, 13, 0]]
** centroid: 2, normalized-entropy: 0.6868088934028034, [(1, 58), (2, 13)]
*** center 3: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 66, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [86, 10, 0]]
** centroid: 5, normalized-entropy: 0.4820661480830933, [(1, 86), (2, 10)]
*** center 6: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 21, 25]]
** centroid: 7, normalized-entropy: 0.9945386816500111, [(2, 21), (3, 25)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19927940114587545] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19927940114587545, 0.154332634170074] ***
*** finished computation of 7 references, err: [Inf, 0.19927940114587545, 0.154332634170074] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [82, 11, 0]]
** centroid: 1, normalized-entropy: 0.5243952392403632, [(1, 82), (2, 11)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [80, 3, 0]]
** centroid: 2, normalized-entropy: 0.2243269603450881, [(1, 80), (2, 3)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 25, 16]]
** centroid: 3, normalized-entropy: 0.9649567669505686, [(2, 25), (3, 16)]
*** center 4: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [48, 4, 0]]
** centroid: 5, normalized-entropy: 0.3912435636292556, [(1, 48), (2, 4)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [10, 63, 0]]
** centroid: 6, normalized-entropy: 0.576291461217437, [(1, 10), (2, 63)]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 76, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18529274786170571] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18529274786170571, 0.15218114679306746] ***
*** finished computation of 7 references, err: [Inf, 0.18529274786170571, 0.15218114679306746] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [96, 2, 0]]
** centroid: 1, normalized-entropy: 0.14372616993938164, [(1, 96), (2, 2)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 36, 26]]
** centroid: 2, normalized-entropy: 0.9811522341999134, [(2, 36), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [43, 8, 0]]
** centroid: 3, normalized-entropy: 0.6267511370265896, [(1, 43), (2, 8)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [38, 64, 0]]
** centroid: 4, normalized-entropy: 0.9526092095121206, [(1, 38), (2, 64)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [8, 68, 0]]
** centroid: 5, normalized-entropy: 0.48546076074591343, [(1, 8), (2, 68)]
*** center 6: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [46, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18986970934271813] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18986970934271813, 0.15261269327253102] ***
*** finished computation of 7 references, err: [Inf, 0.18986970934271813, 0.15261269327253102] ***
*** center 1: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [59, 10, 0]]
** centroid: 2, normalized-entropy: 0.5969995167604553, [(1, 59), (2, 10)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 37, 25]]
** centroid: 3, normalized-entropy: 0.9728063221185002, [(2, 37), (3, 25)]
*** center 4: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [23, 65, 0]]
** centroid: 5, normalized-entropy: 0.828797154590015, [(1, 23), (2, 65)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [6, 64, 0]]
** centroid: 6, normalized-entropy: 0.4220005168831531, [(1, 6), (2, 64)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [40, 2, 0]]
** centroid: 7, normalized-entropy: 0.2761954276479391, [(1, 40), (2, 2)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1879235722180456] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1879235722180456, 0.16115131679177283] ***
*** finished computation of 7 references, err: [Inf, 0.1879235722180456, 0.16115131679177283] ***
*** center 1: selecting labels [1] (freq >= 2) [from [128, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 23, 21]]
** centroid: 2, normalized-entropy: 0.9985090989176322, [(2, 23), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [32, 17, 0]]
** centroid: 3, normalized-entropy: 0.9313043685793762, [(1, 32), (2, 17)]
*** center 4: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [5, 69, 0]]
** centroid: 5, normalized-entropy: 0.35678001438394347, [(1, 5), (2, 69)]
*** center 6: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [4, 73, 0]]
** centroid: 7, normalized-entropy: 0.29461520565280713, [(1, 4), (2, 73)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19076964644901453] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19076964644901453, 0.15975164356827737] ***
*** finished computation of 7 references, err: [Inf, 0.19076964644901453, 0.15975164356827737] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [28, 68, 0]]
** centroid: 1, normalized-entropy: 0.8708644692353648, [(1, 28), (2, 68)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [53, 12, 0]]
** centroid: 2, normalized-entropy: 0.6900703653284017, [(1, 53), (2, 12)]
*** center 3: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 58, 1]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [75, 17, 0]]
** centroid: 5, normalized-entropy: 0.6904285855304167, [(1, 75), (2, 17)]
*** center 6: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 26, 24]]
** centroid: 7, normalized-entropy: 0.998845535995202, [(2, 26), (3, 24)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18348662545531988] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18348662545531988, 0.15419687187485398] ***
*** finished computation of 7 references, err: [Inf, 0.18348662545531988, 0.15419687187485398] ***
*** center 1: selecting labels [1] (freq >= 2) [from [123, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 18, 26]]
** centroid: 2, normalized-entropy: 0.976020648236615, [(2, 18), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [40, 22, 0]]
** centroid: 3, normalized-entropy: 0.9383153522334071, [(1, 40), (2, 22)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [60, 11, 0]]
** centroid: 4, normalized-entropy: 0.6220403090607189, [(1, 60), (2, 11)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [6, 75, 0]]
** centroid: 5, normalized-entropy: 0.38094658570539014, [(1, 6), (2, 75)]
*** center 6: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 46, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18515306061692535] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18515306061692535, 0.15382059635035694] ***
*** finished computation of 7 references, err: [Inf, 0.18515306061692535, 0.15382059635035694] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [58, 55, 0]]
** centroid: 1, normalized-entropy: 0.9994915114306262, [(1, 58), (2, 55)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [53, 8, 0]]
** centroid: 2, normalized-entropy: 0.5605769426145328, [(1, 53), (2, 8)]
*** center 3: selecting labels [1] (freq >= 2) [from [38, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 52, 17]]
** centroid: 4, normalized-entropy: 0.8054848387405957, [(2, 52), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [15, 69, 0]]
** centroid: 5, normalized-entropy: 0.6769418697808861, [(1, 15), (2, 69)]
*** center 6: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1874232733696699] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1874232733696699, 0.1543338002488017] ***
*** finished computation of 7 references, err: [Inf, 0.1874232733696699, 0.1543338002488017] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [45, 51, 0]]
** centroid: 1, normalized-entropy: 0.9971803988942641, [(1, 45), (2, 51)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [44, 29, 0]]
** centroid: 2, normalized-entropy: 0.9693253797191861, [(1, 44), (2, 29)]
*** center 3: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 53, 23]]
** centroid: 4, normalized-entropy: 0.8844839729019952, [(2, 53), (3, 23)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [54, 34, 0]]
** centroid: 5, normalized-entropy: 0.9624127354629922, [(1, 54), (2, 34)]
*** center 6: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19563665337301792] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19563665337301792, 0.15394417788926512] ***
*** finished computation of 7 references, err: [Inf, 0.19563665337301792, 0.15394417788926512] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [12, 95, 0]]
** centroid: 1, normalized-entropy: 0.5063657452787739, [(1, 12), (2, 95)]
*** center 2: selecting labels [1] (freq >= 2) [from [38, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [54, 31, 0]]
** centroid: 3, normalized-entropy: 0.9465202215633438, [(1, 54), (2, 31)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [46, 18, 0]]
** centroid: 4, normalized-entropy: 0.8571484374283717, [(1, 46), (2, 18)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 52, 23]]
** centroid: 5, normalized-entropy: 0.8892881527272397, [(2, 52), (3, 23)]
*** center 6: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18234181151911616] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18234181151911616, 0.15558577200956641] ***
*** finished computation of 7 references, err: [Inf, 0.18234181151911616, 0.15558577200956641] ***
*** center 1: selecting labels [1] (freq >= 2) [from [108, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 25, 17]]
** centroid: 2, normalized-entropy: 0.9736680645496202, [(2, 25), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [41, 12, 0]]
** centroid: 3, normalized-entropy: 0.7717094696953635, [(1, 41), (2, 12)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [61, 9, 0]]
** centroid: 4, normalized-entropy: 0.5535072654547254, [(1, 61), (2, 9)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [21, 75, 0]]
** centroid: 5, normalized-entropy: 0.7578784625383954, [(1, 21), (2, 75)]
*** center 6: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 58, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19298689208552242] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19298689208552242, 0.1558597369340714] ***
*** finished computation of 7 references, err: [Inf, 0.19298689208552242, 0.1558597369340714] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 54, 25]]
** centroid: 1, normalized-entropy: 0.9004854334784268, [(2, 54), (3, 25)]
*** center 2: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [39, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [69, 22, 0]]
** centroid: 4, normalized-entropy: 0.7979519684655734, [(1, 69), (2, 22)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [62, 27, 0]]
** centroid: 5, normalized-entropy: 0.8853723770068483, [(1, 62), (2, 27)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [5, 77, 0]]
** centroid: 6, normalized-entropy: 0.3313056130577883, [(1, 5), (2, 77)]
*** center 7: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
finished with 10 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 362,3 => 41,1 => 597), Dict(2 => 363,3 => 42,1 => 595))
[ Info: ===== scores for single classifier: {"micro_f1":0.946,"precision":0.946,"recall":0.946,"macro_recall":0.9575742142587064,"macro_f1":0.8840161532777905,"accuracy":0.946,"class_f1":{"2":0.9241573033707865,"3":0.7499999999999999,"1":0.9778911564625851},"class_precision":{"2":0.9426934097421203,"3":0.6,"1":0.9896729776247849},"class_recall":{"2":0.90633608815427,"3":1.0,"1":0.9663865546218487}}
[ Info: ===== scores for 1: {"micro_f1":0.963,"precision":0.963,"recall":0.963,"macro_recall":0.9566420507596978,"macro_f1":0.9382528340288734,"accuracy":0.963,"class_f1":{"2":0.9485396383866481,"3":0.888888888888889,"1":0.9773299748110831},"class_precision":{"2":0.9578651685393258,"3":0.8333333333333334,"1":0.9765100671140939},"class_recall":{"2":0.9393939393939394,"3":0.9523809523809523,"1":0.9781512605042016}}
[ Info: ===== scores for 5: {"micro_f1":0.958,"precision":0.958,"recall":0.958,"macro_recall":0.9559892276469816,"macro_f1":0.9509095752103991,"accuracy":0.958,"class_f1":{"2":0.9429347826086956,"3":0.9411764705882352,"1":0.9686174724342663},"class_precision":{"2":0.9302949061662198,"3":0.9302325581395349,"1":0.9777397260273972},"class_recall":{"2":0.9559228650137741,"3":0.9523809523809523,"1":0.9596638655462185}}
[ Info: ===== scores for 7: {"micro_f1":0.962,"precision":0.962,"recall":0.962,"macro_recall":0.9593042726732567,"macro_f1":0.9538828575018387,"accuracy":0.962,"class_f1":{"2":0.9485094850948509,"3":0.9411764705882352,"1":0.9719626168224299},"class_precision":{"2":0.9333333333333333,"3":0.9302325581395349,"1":0.9828178694158075},"class_recall":{"2":0.9641873278236914,"3":0.9523809523809523,"1":0.9613445378151261}}
[ Info: ===== scores for 9: {"micro_f1":0.965,"precision":0.965,"recall":0.965,"macro_recall":0.9697934270126783,"macro_f1":0.9599696488239418,"accuracy":0.965,"class_f1":{"2":0.9528936742934051,"3":0.9534883720930233,"1":0.9735269000853971},"class_precision":{"2":0.9315789473684211,"3":0.9318181818181818,"1":0.9895833333333334},"class_recall":{"2":0.9752066115702479,"3":0.9761904761904762,"1":0.957983193277311}}
[ Info: ===== scores for 11: {"micro_f1":0.965,"precision":0.965,"recall":0.965,"macro_recall":0.9705095261244994,"macro_f1":0.9600234833970639,"accuracy":0.965,"class_f1":{"2":0.9531459170013388,"3":0.9534883720930233,"1":0.9734361610968295},"class_precision":{"2":0.9270833333333334,"3":0.9318181818181818,"1":0.993006993006993},"class_recall":{"2":0.9807162534435262,"3":0.9761904761904762,"1":0.9546218487394958}}
(score = 0.964, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.964, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.963, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.963, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.97, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.97, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.963, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.963, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.961, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.961, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.958, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.958, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.965, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.965, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.962, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.962, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.97,"k":3,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.97,"precision":0.97,"recall":0.97,"macro_recall":0.9778225339722666,"macro_f1":0.9706176161426338,"accuracy":0.97,"class_f1":{"2":0.9586776859504132,"3":0.9767441860465117,"1":0.9764309764309764},"class_precision":{"2":0.9586776859504132,"3":0.9545454545454546,"1":0.9780775716694773},"class_recall":{"2":0.9586776859504132,"3":1.0,"1":0.9747899159663865}}
Test Summary: | Pass  Total
AKNC          |    8      8
[59, 1, 3, 1, 5, 1, 1, 1, 2, 5, 21, 3, 2, 1, 1, 32, 1, 1, 5, 11, 16, 15, 2, 17, 1, 3, 9, 6, 4, 9, 44, 6, 11, 18, 23, 1, 7, 22, 7, 3, 17, 1, 21, 27, 15, 12, 13, 41, 8, 7, 5, 2, 34, 13, 31, 16, 10, 108, 36, 1, 9, 5, 30, 34, 7, 50, 2, 17, 15, 19, 57, 13, 26, 5, 4, 19, 3, 6, 4, 8, 20, 57, 3, 51, 35, 14, 44, 7, 30, 4, 37, 23, 2, 19, 12, 1, 7, 3, 12, 12, 10, 67, 2, 18, 23, 5, 53, 237, 17, 30, 71, 29, 55, 5, 7, 4, 2, 5, 13, 8, 39, 9, 11, 26, 8, 51, 5, 44, 39, 2, 21, 16, 19, 3, 2, 19, 104, 17, 15, 15, 8, 50, 22, 4, 47, 4, 10, 83, 41, 3, 1602, 9, 12, 13, 26, 11, 82, 68, 12, 8, 40, 5, 131, 9, 78, 215, 10, 4, 4, 37, 4, 8, 4, 53, 4, 57, 5, 12, 18, 12, 41, 72, 10, 52, 83, 22, 12, 5, 61, 9, 28, 21, 8, 2, 47, 46, 14, 3, 13, 21, 188, 25, 54, 36, 173, 41, 16, 53, 9, 10, 48, 2, 82, 12, 11, 1, 37, 3, 14, 27, 9, 1, 48, 16, 3, 52, 15, 6, 31, 1, 7, 24, 37, 68, 39, 8, 17, 4, 12, 54, 6, 14, 206, 19, 36, 28, 2, 23, 10, 32, 26, 4, 13, 12, 10, 38, 8, 10, 298, 14, 14, 10, 12, 48, 17, 85, 58, 41, 16, 20, 28, 38, 70, 68, 8, 30, 55, 101, 66, 17, 38, 32, 121, 115, 41, 2, 4, 93, 107, 47, 18, 12, 7, 74, 19, 43, 28, 140, 22, 86]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6759999999999998, speedup = 0.23868968885123004, eval_ratio = 0.11413499999999999)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":null,"recall":0.3940972222222226,"f1":null,"seconds":0.00022561103105545044,"exhaustive_search_seconds":0.0003511402755975723,"evaluations":600.265625,"distances_sum":1727.0766016882446}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5590277777777773,"recall":0.5590277777777773,"f1":null,"seconds":0.00034215301275253296,"exhaustive_search_seconds":0.0003511402755975723,"evaluations":786.4765625,"distances_sum":1710.5886269819157}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6736111111111108,"recall":0.6736111111111108,"f1":null,"seconds":0.0004380512982606888,"exhaustive_search_seconds":0.0003511402755975723,"evaluations":927.5625,"distances_sum":1643.7926740206074}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7404513888888886,"recall":0.7404513888888886,"f1":null,"seconds":0.0005536545068025589,"exhaustive_search_seconds":0.0003511402755975723,"evaluations":1076.4765625,"distances_sum":1617.3087073416655}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7925347222222219,"recall":0.7925347222222219,"f1":0.7925347222222219,"seconds":0.0006465651094913483,"exhaustive_search_seconds":0.0003511402755975723,"evaluations":1195.6875,"distances_sum":1598.437981702693}
KCenters.DeloneInvIndex> reached performance {"precision":0.8350694444444436,"recall":0.8350694444444436,"f1":0.8350694444444436,"seconds":0.0008619148284196854,"exhaustive_search_seconds":0.0003511402755975723,"evaluations":1325.8125,"distances_sum":1586.1821623870126}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8379999999999996, speedup = 0.4111069334781579, eval_ratio = 0.158895)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
