Julia Version 1.4.0
Commit 571c4c41f7 (2020-04-07 06:24 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-8.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed SortingAlgorithms ──────────── v0.3.1
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed Rmath ──────────────────────── v0.6.1
  Installed OrderedCollections ─────────── v1.1.0
  Installed SpecialFunctions ───────────── v0.10.0
  Installed DataStructures ─────────────── v0.17.11
  Installed StatsBase ──────────────────── v0.33.0
  Installed Distributions ──────────────── v0.23.2
  Installed QuadGK ─────────────────────── v2.3.1
  Installed Missings ───────────────────── v0.4.3
  Installed Rmath_jll ──────────────────── v0.2.2+0
  Installed Arpack ─────────────────────── v0.4.0
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed OpenBLAS_jll ───────────────── v0.3.9+2
  Installed DataAPI ────────────────────── v1.1.0
  Installed FillArrays ─────────────────── v0.8.7
  Installed StatsFuns ──────────────────── v0.9.4
  Installed PDMats ─────────────────────── v0.9.12
  Installed Arpack_jll ─────────────────── v3.5.0+3
   Updating `~/.julia/environments/v1.4/Project.toml`
  [31c24e10] + Distributions v0.23.2
   Updating `~/.julia/environments/v1.4/Manifest.toml`
  [7d9fca2a] + Arpack v0.4.0
  [68821587] + Arpack_jll v3.5.0+3
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [9a962f9c] + DataAPI v1.1.0
  [864edb3b] + DataStructures v0.17.11
  [31c24e10] + Distributions v0.23.2
  [1a297f60] + FillArrays v0.8.7
  [e1d29d7a] + Missings v0.4.3
  [4536629a] + OpenBLAS_jll v0.3.9+2
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [bac558e1] + OrderedCollections v1.1.0
  [90014a1f] + PDMats v0.9.12
  [1fd47b50] + QuadGK v2.3.1
  [79098fc4] + Rmath v0.6.1
  [f50d1b31] + Rmath_jll v0.2.2+0
  [a2af1166] + SortingAlgorithms v0.3.1
  [276daf66] + SpecialFunctions v0.10.0
  [2913bbd2] + StatsBase v0.33.0
  [4c63d2b9] + StatsFuns v0.9.4
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8ba89e20] + Distributed 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [4607b0f0] + SuiteSparse 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
    Testing Distributions
Status `/tmp/jl_fIFDQG/Manifest.toml`
  [7d9fca2a] Arpack v0.4.0
  [68821587] Arpack_jll v3.5.0+3
  [49dc2e85] Calculus v0.5.1
  [861a8166] Combinatorics v1.0.0
  [bbf7d656] CommonSubexpressions v0.2.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [9a962f9c] DataAPI v1.1.0
  [864edb3b] DataStructures v0.17.11
  [163ba53b] DiffResults v1.0.2
  [b552c78f] DiffRules v1.0.1
  [31c24e10] Distributions v0.23.2
  [1a297f60] FillArrays v0.8.7
  [26cc04aa] FiniteDifferences v0.9.3
  [f6369f11] ForwardDiff v0.10.10
  [09f84164] HypothesisTests v0.9.2
  [682c06a0] JSON v0.21.0
  [e1d29d7a] Missings v0.4.3
  [77ba4419] NaNMath v0.3.3
  [4536629a] OpenBLAS_jll v0.3.9+2
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [bac558e1] OrderedCollections v1.1.0
  [90014a1f] PDMats v0.9.12
  [69de0a69] Parsers v1.0.1
  [f27b6e38] Polynomials v0.6.1
  [1fd47b50] QuadGK v2.3.1
  [3cdcf5f2] RecipesBase v0.8.0
  [79098fc4] Rmath v0.6.1
  [f50d1b31] Rmath_jll v0.2.2+0
  [f2b01f46] Roots v1.0.1
  [a2af1166] SortingAlgorithms v0.3.1
  [276daf66] SpecialFunctions v0.10.0
  [90137ffa] StaticArrays v0.12.1
  [2913bbd2] StatsBase v0.33.0
  [4c63d2b9] StatsFuns v0.9.4
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8ba89e20] Distributed 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [4607b0f0] SuiteSparse 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
Running tests:
Test Summary: | Pass  Total
Test arcsine  |   28     28
    [Discrete]
    ------------
    testing Truncated(BetaBinomial(10, 0.2, 0.25),3,5)
    testing Truncated(BetaBinomial(10, 2, 2.5),3,5)
    testing Truncated(BetaBinomial(10, 60, 40),3,5)
    testing Truncated(Binomial(5, 0.4),3,5)
    testing Truncated(Binomial(6, 0.8),3,5)
    testing Truncated(Binomial(100, 0.1),3,5)
    testing Truncated(Binomial(100, 0.9),3,5)
    testing Truncated(Binomial(10, 0.0),3,5)
    testing Truncated(Binomial(10, 1.0),3,5)
    testing Truncated(DiscreteUniform(6),3,5)
    testing Truncated(DiscreteUniform(7),3,5)
    testing Truncated(DiscreteUniform(2, 8),3,5)
    testing Truncated(Geometric(),3,5)
    testing Truncated(Geometric(0.02),3,5)
    testing Truncated(Geometric(0.1),3,5)
    testing Truncated(Geometric(0.5),3,5)
    testing Truncated(Geometric(0.9),3,5)
    testing Truncated(NegativeBinomial(),3,5)
    testing Truncated(NegativeBinomial(6),3,5)
    testing Truncated(NegativeBinomial(1, 0.5),3,5)
    testing Truncated(NegativeBinomial(5, 0.6),3,5)
    testing Truncated(NegativeBinomial(0.5, 0.5),3,5)
    testing Truncated(Poisson(),3,5)
    testing Truncated(Poisson(0.5),3,5)
    testing Truncated(Poisson(2.0),3,5)
    testing Truncated(Poisson(10.0),3,5)
    testing Truncated(Poisson(80.0),3,5)

    [Continuous]
    ------------
    testing Truncated(BetaPrime(),3,5)
    testing Truncated(BetaPrime(3.0),3,5)
    testing Truncated(BetaPrime(3.0, 5.0),3,5)
    testing Truncated(BetaPrime(5.0, 3.0),3,5)
    testing Truncated(Cauchy(),3,5)
    testing Truncated(Cauchy(2.0),3,5)
    testing Truncated(Cauchy(0.0, 1.0),3,5)
    testing Truncated(Cauchy(10.0, 1.0),3,5)
    testing Truncated(Cauchy(2.0, 10.0),3,5)
    testing Truncated(Chi(1),3,5)
    testing Truncated(Chi(2),3,5)
    testing Truncated(Chi(3),3,5)
    testing Truncated(Chi(12),3,5)
    testing Truncated(Chisq(1),3,5)
    testing Truncated(Chisq(8),3,5)
    testing Truncated(Chisq(20),3,5)
    testing Truncated(Erlang(),3,5)
    testing Truncated(Erlang(3),3,5)
    testing Truncated(Erlang(3, 1.0),3,5)
    testing Truncated(Erlang(5, 2.0),3,5)
    testing Truncated(Exponential(),3,5)
    testing Truncated(Exponential(2.0),3,5)
    testing Truncated(Exponential(6.5),3,5)
    testing Truncated(FDist(6.0, 8.0),3,5)
    testing Truncated(FDist(8.0, 6.0),3,5)
    testing Truncated(FDist(30, 40),3,5)
    testing Truncated(Frechet(),3,5)
    testing Truncated(Frechet(0.5),3,5)
    testing Truncated(Frechet(3.0),3,5)
    testing Truncated(Frechet(20.0),3,5)
    testing Truncated(Frechet(60.0),3,5)
    testing Truncated(Frechet(0.5, 2.0),3,5)
    testing Truncated(Frechet(3.0, 2.0),3,5)
    testing Truncated(Gamma(),3,5)
    testing Truncated(Gamma(2.0),3,5)
    testing Truncated(Gamma(1.0, 1.0),3,5)
    testing Truncated(Gamma(3.0, 1.0),3,5)
    testing Truncated(Gamma(3.0, 2.0),3,5)
    testing Truncated(GeneralizedExtremeValue(1.0, 1.0, 1.0),3,5)
    testing Truncated(GeneralizedExtremeValue(0.0, 1.0, 0.0),3,5)
    testing Truncated(GeneralizedExtremeValue(0.0, 1.0, 1.1),3,5)
    testing Truncated(GeneralizedExtremeValue(0.0, 1.0, 0.6),3,5)
    testing Truncated(GeneralizedExtremeValue(0.0, 1.0, 0.3),3,5)
    testing Truncated(GeneralizedExtremeValue(-1.0, 0.5, 0.6),3,5)
    testing Truncated(GeneralizedPareto(),3,5)
    testing Truncated(GeneralizedPareto(1.0, 1.0),3,5)
    testing Truncated(GeneralizedPareto(0.1, 2.0),3,5)
    testing Truncated(GeneralizedPareto(1.0, 1.0, 1.0),3,5)
    testing Truncated(GeneralizedPareto(-1.5, 0.5, 2.0),3,5)
    testing Truncated(Gumbel(),3,5)
    testing Truncated(Gumbel(3.0),3,5)
    testing Truncated(Gumbel(3.0, 5.0),3,5)
    testing Truncated(Gumbel(5.0, 3.0),3,5)
    testing Truncated(InverseGamma(),3,5)
    testing Truncated(InverseGamma(2.0),3,5)
    testing Truncated(InverseGamma(1.0, 1.0),3,5)
    testing Truncated(InverseGamma(1.0, 2.0),3,5)
    testing Truncated(InverseGamma(2.0, 1.0),3,5)
    testing Truncated(InverseGamma(2.0, 3.0),3,5)
    testing Truncated(InverseGaussian(),3,5)
    testing Truncated(InverseGaussian(0.8),3,5)
    testing Truncated(InverseGaussian(2.0),3,5)
    testing Truncated(InverseGaussian(1.0, 1.0),3,5)
    testing Truncated(InverseGaussian(2.0, 1.5),3,5)
    testing Truncated(InverseGaussian(2.0, 7.0),3,5)
    testing Truncated(Laplace(),3,5)
    testing Truncated(Laplace(2.0),3,5)
    testing Truncated(Laplace(0.0, 1.0),3,5)
    testing Truncated(Laplace(5.0, 1.0),3,5)
    testing Truncated(Laplace(5.0, 1.5),3,5)
    testing Truncated(Levy(),3,5)
    testing Truncated(Levy(2),3,5)
    testing Truncated(Levy(2, 8),3,5)
    testing Truncated(Levy(3.0, 3),3,5)
    testing Truncated(Logistic(),3,5)
    testing Truncated(Logistic(2.0),3,5)
    testing Truncated(Logistic(0.0, 1.0),3,5)
    testing Truncated(Logistic(5.0, 1.0),3,5)
    testing Truncated(Logistic(2.0, 1.5),3,5)
    testing Truncated(Logistic(5.0, 1.5),3,5)
    testing Truncated(LogNormal(),3,5)
    testing Truncated(LogNormal(1.0),3,5)
    testing Truncated(LogNormal(0.0, 2.0),3,5)
    testing Truncated(LogNormal(1.0, 2.0),3,5)
    testing Truncated(LogNormal(3.0, 0.5),3,5)
    testing Truncated(LogNormal(3.0, 1.0),3,5)
    testing Truncated(LogNormal(3.0, 2.0),3,5)
    testing Truncated(NoncentralChisq(2, 2),3,5)
    testing Truncated(NoncentralChisq(2, 5),3,5)
    testing Truncated(NoncentralF(2, 2, 2),3,5)
    testing Truncated(NoncentralF(8, 10, 5),3,5)
    testing Truncated(NoncentralT(2, 2),3,5)
    testing Truncated(NoncentralT(10, 2),3,5)
    testing Truncated(Normal(),3,5)
    testing Truncated(Normal(2.0),3,5)
    testing Truncated(Normal(-3.0, 2.0),3,5)
    testing Truncated(Normal(1.0, 10.0),3,5)
    testing Truncated(NormalCanon(),3,5)
    testing Truncated(NormalCanon(0.0, 1.0),3,5)
    testing Truncated(NormalCanon(-1.0, 2.5),3,5)
    testing Truncated(NormalCanon(2.0, 0.8),3,5)
    testing Truncated(Pareto(),3,5)
    testing Truncated(Pareto(2.0),3,5)
    testing Truncated(Pareto(2.0, 1.5),3,5)
    testing Truncated(Pareto(3.0, 2.0),3,5)
    testing Truncated(Rayleigh(),3,5)
    testing Truncated(Rayleigh(3.0),3,5)
    testing Truncated(Rayleigh(8.0),3,5)
    testing Truncated(StudentizedRange(2.0, 2.0),3,5)
    testing Truncated(StudentizedRange(5.0, 10.0),3,5)
    testing Truncated(StudentizedRange(10.0, 5.0),3,5)
    testing Truncated(SymTriangularDist(3.0, 2.0),3,5)
    testing Truncated(SymTriangularDist(10.0, 8.0),3,5)
    testing Truncated(TDist(1.2),3,5)
    testing Truncated(TDist(5.0),3,5)
    testing Truncated(TDist(28.0),3,5)
    testing Truncated(TriangularDist(0, 5),3,5)
    testing Truncated(TriangularDist(-4, 14, 3),3,5)
    testing Truncated(TriangularDist(2, 2000, 500),3,5)
    testing Truncated(truncated(Normal(27, 3), 0, Inf),3,5)
    testing Truncated(Uniform(3.0, 17.0),3,5)
    testing Truncated(Weibull(),3,5)
    testing Truncated(Weibull(0.5),3,5)
    testing Truncated(Weibull(5.0),3,5)
    testing Truncated(Weibull(20.0, 1.0),3,5)
    testing Truncated(Weibull(1.0, 2.0),3,5)
    testing Truncated(Weibull(5.0, 2.0),3,5)

Test Summary: | Pass  Total
Test truncate | 5078   5078
Test Summary:    | Pass  Total
Test truncnormal |   26     26
Test Summary:              | Pass  Total
Test truncated_exponential |    8      8
Test Summary: | Pass  Total
Test normal   |  136    136
Test Summary:  | Pass  Total
Test lognormal |  225    225
Test Summary: | Pass  Total
Test mvnormal | 5763   5763
Test Summary:    | Pass  Total
Test mvlognormal | 1415   1415
Test Summary: | Pass  Total
Test types    |   30     30
Test Summary: | Pass  Total
Test utils    |   14     14
    testing CategoricalDirectSampler
    testing AliasTable
    testing BinomialGeomSampler
    testing BinomialTPESampler
    testing BinomialPolySampler
    testing BinomialAliasSampler
    testing PoissonCountSampler
    testing PoissonADSampler
    testing PoissBinAliasSampler
    testing ExponentialSampler
    testing GammaGDSampler
    testing GammaMTSampler
    testing GammaGSSampler
    testing GammaIPSampler
Test Summary: | Pass  Total
Test samplers |    2      2
    testing DiscreteNonParametric{Int64,Float64,Base.OneTo{Int64},Array{Float64,1}}(support=Base.OneTo(2), p=[0.5, 0.5]) as Categorical
    testing DiscreteNonParametric{Int64,Float32,Base.OneTo{Int64},Array{Float32,1}}(support=Base.OneTo(2), p=Float32[0.5, 0.5]) as Categorical
    testing DiscreteNonParametric{Int64,Rational{Int64},Base.OneTo{Int64},Array{Rational{Int64},1}}(support=Base.OneTo(2), p=Rational{Int64}[1//2, 1//2]) as Categorical
    testing DiscreteNonParametric{Int64,Float64,Base.OneTo{Int64},Array{Float64,1}}(support=Base.OneTo(4), p=[0.1, 0.3, 0.2, 0.4]) as Categorical
    testing DiscreteNonParametric{Int64,Float64,Base.OneTo{Int64},Array{Float64,1}}(support=Base.OneTo(3), p=[0.15, 0.25, 0.6]) as Categorical
    testing DiscreteNonParametric{Int64,Float64,Base.OneTo{Int64},Array{Float64,1}}(support=Base.OneTo(4), p=[0.25, 0.25, 0.25, 0.25]) as Categorical
Test Summary:    | Pass  Total
Test categorical |  350    350
    [Discrete]
    ------------
    testing Bernoulli()
    testing Bernoulli(0.25)
    testing Bernoulli(0.75)
    testing Bernoulli(0.0)
    testing Bernoulli(1.0)
    testing BetaBinomial(2, 0.2, 0.25)
    testing BetaBinomial(10, 0.2, 0.25)
    testing BetaBinomial(10, 2, 2.5)
    testing BetaBinomial(10, 60, 40)
    testing Binomial()
    testing Binomial(3)
    testing Binomial(5, 0.4)
    testing Binomial(6, 0.8)
    testing Binomial(100, 0.1)
    testing Binomial(100, 0.9)
    testing Binomial(10, 0.0)
    testing Binomial(10, 1.0)
    testing DiscreteUniform()
    testing DiscreteUniform(6)
    testing DiscreteUniform(7)
    testing DiscreteUniform(0, 4)
    testing DiscreteUniform(2, 8)
    testing Geometric()
    testing Geometric(0.02)
    testing Geometric(0.1)
    testing Geometric(0.5)
    testing Geometric(0.9)
    testing Hypergeometric(2, 2, 2)
    testing Hypergeometric(3, 2, 2)
    testing Hypergeometric(3, 2, 0)
    testing Hypergeometric(3, 2, 5)
    testing Hypergeometric(4, 5, 6)
    testing Hypergeometric(60, 80, 100)
    testing NegativeBinomial()
    testing NegativeBinomial(6)
    testing NegativeBinomial(1, 0.5)
    testing NegativeBinomial(5, 0.6)
    testing NegativeBinomial(0.5, 0.5)
    testing Poisson()
    testing Poisson(0.0)
    testing Poisson(0.5)
    testing Poisson(2.0)
    testing Poisson(10.0)
    testing Poisson(80.0)
    testing Skellam()
    testing Skellam(2.0)
    testing Skellam(2.0, 3.0)
    testing Skellam(3.2, 1.8)
    testing FisherNoncentralHypergeometric(8, 6, 10, 1)
    testing FisherNoncentralHypergeometric(8, 6, 10, 10)
    testing FisherNoncentralHypergeometric(8, 6, 10, 0.1)
    testing FisherNoncentralHypergeometric(80, 60, 100, 1)
    testing FisherNoncentralHypergeometric(80, 60, 100, 10)
    testing FisherNoncentralHypergeometric(80, 60, 100, 0.1)
    testing WalleniusNoncentralHypergeometric(8, 6, 10, 1)
    testing WalleniusNoncentralHypergeometric(8, 6, 10, 10)
    testing WalleniusNoncentralHypergeometric(8, 6, 10, 0.1)
    testing WalleniusNoncentralHypergeometric(40, 30, 50, 1)
    testing WalleniusNoncentralHypergeometric(40, 30, 50, 0.5)
    testing WalleniusNoncentralHypergeometric(40, 30, 50, 2)

    [Continuous]
    ------------
    testing Arcsine()
    testing Arcsine(2.0)
    testing Arcsine(1.0, 2.5)
    testing Arcsine(-1.0, 1.0)
    testing Beta(2.0, 2.0)
    testing Beta(3.0, 4.0)
    testing Beta(17.0, 13.0)
    testing BetaPrime()
    testing BetaPrime(3.0)
    testing BetaPrime(3.0, 5.0)
    testing BetaPrime(5.0, 3.0)
    testing Cauchy()
    testing Cauchy(2.0)
    testing Cauchy(0.0, 1.0)
    testing Cauchy(10.0, 1.0)
    testing Cauchy(2.0, 10.0)
    testing Chi(1)
    testing Chi(2)
    testing Chi(3)
    testing Chi(12)
    testing Chisq(1)
    testing Chisq(8)
    testing Chisq(20)
    testing Cosine()
    testing Cosine(1.5)
    testing Cosine(2.0, 2.8)
    testing Erlang()
    testing Erlang(3)
    testing Erlang(3, 1.0)
    testing Erlang(5, 2.0)
    testing Exponential()
    testing Exponential(2.0)
    testing Exponential(6.5)
    testing FDist(6.0, 8.0)
    testing FDist(8.0, 6.0)
    testing FDist(30, 40)
    testing Frechet()
    testing Frechet(0.5)
    testing Frechet(3.0)
    testing Frechet(20.0)
    testing Frechet(60.0)
    testing Frechet(0.5, 2.0)
    testing Frechet(3.0, 2.0)
    testing Gamma()
    testing Gamma(2.0)
    testing Gamma(1.0, 1.0)
    testing Gamma(3.0, 1.0)
    testing Gamma(3.0, 2.0)
    testing GeneralizedExtremeValue(1.0, 1.0, 1.0)
    testing GeneralizedExtremeValue(0.0, 1.0, 0.0)
    testing GeneralizedExtremeValue(0.0, 1.0, 1.1)
    testing GeneralizedExtremeValue(0.0, 1.0, 0.6)
    testing GeneralizedExtremeValue(0.0, 1.0, 0.3)
    testing GeneralizedExtremeValue(1.0, 1.0, -1.0)
    testing GeneralizedExtremeValue(-1.0, 0.5, 0.6)
    testing GeneralizedPareto()
    testing GeneralizedPareto(1.0, 1.0)
    testing GeneralizedPareto(0.1, 2.0)
    testing GeneralizedPareto(1.0, 1.0, 1.0)
    testing GeneralizedPareto(-1.5, 0.5, 2.0)
    testing Gumbel()
    testing Gumbel(3.0)
    testing Gumbel(3.0, 5.0)
    testing Gumbel(5.0, 3.0)
    testing InverseGamma()
    testing InverseGamma(2.0)
    testing InverseGamma(1.0, 1.0)
    testing InverseGamma(1.0, 2.0)
    testing InverseGamma(2.0, 1.0)
    testing InverseGamma(2.0, 3.0)
    testing InverseGaussian()
    testing InverseGaussian(0.8)
    testing InverseGaussian(2.0)
    testing InverseGaussian(1.0, 1.0)
    testing InverseGaussian(2.0, 1.5)
    testing InverseGaussian(2.0, 7.0)
    testing Laplace()
    testing Laplace(2.0)
    testing Laplace(0.0, 1.0)
    testing Laplace(5.0, 1.0)
    testing Laplace(5.0, 1.5)
    testing Levy()
    testing Levy(2)
    testing Levy(2, 8)
    testing Levy(3.0, 3)
    testing Logistic()
    testing Logistic(2.0)
    testing Logistic(0.0, 1.0)
    testing Logistic(5.0, 1.0)
    testing Logistic(2.0, 1.5)
    testing Logistic(5.0, 1.5)
    testing LogNormal()
    testing LogNormal(1.0)
    testing LogNormal(0.0, 2.0)
    testing LogNormal(1.0, 2.0)
    testing LogNormal(3.0, 0.5)
    testing LogNormal(3.0, 1.0)
    testing LogNormal(3.0, 2.0)
    testing NoncentralBeta(2, 2, 0)
    testing NoncentralBeta(2, 6, 5)
    testing NoncentralChisq(2, 2)
    testing NoncentralChisq(2, 5)
    testing NoncentralF(2, 2, 2)
    testing NoncentralF(8, 10, 5)
    testing NoncentralT(2, 2)
    testing NoncentralT(10, 2)
    testing Normal()
    testing Normal(2.0)
    testing Normal(-3.0, 2.0)
    testing Normal(1.0, 10.0)
    testing NormalInverseGaussian(1.7, 1.8, 1.2, 2.3)
    testing NormalCanon()
    testing NormalCanon(0.0, 1.0)
    testing NormalCanon(-1.0, 2.5)
    testing NormalCanon(2.0, 0.8)
    testing Pareto()
    testing Pareto(2.0)
    testing Pareto(2.0, 1.5)
    testing Pareto(3.0, 2.0)
    testing Rayleigh()
    testing Rayleigh(3.0)
    testing Rayleigh(8.0)
    testing StudentizedRange(2.0, 2.0)
    testing StudentizedRange(5.0, 10.0)
    testing StudentizedRange(10.0, 5.0)
    testing SymTriangularDist()
    testing SymTriangularDist(3.0)
    testing SymTriangularDist(3.0, 0.5)
    testing SymTriangularDist(3.0, 2.0)
    testing SymTriangularDist(10.0, 8.0)
    testing TDist(1.2)
    testing TDist(5.0)
    testing TDist(28.0)
    testing TriangularDist(0, 5)
    testing TriangularDist(-7, 2)
    testing TriangularDist(-4, 14, 3)
    testing TriangularDist(2, 2000, 500)
    testing TriangularDist(1, 3, 2)
    testing truncated(Normal(0, 1), -2, 2)
    testing truncated(Normal(3, 10), 7, 8)
    testing truncated(Normal(27, 3), 0, Inf)
    testing truncated(Normal(-5, 1), -Inf, -10)
    testing truncated(Normal(1.8, 1.2), -Inf, 0)
    testing Uniform()
    testing Uniform(0.0, 2.0)
    testing Uniform(3.0, 17.0)
    testing Uniform(3.0, 3.1)
    testing VonMises()
    testing VonMises(4.0)
    testing VonMises(1.1, 2.5)
    testing Weibull()
    testing Weibull(0.5)
    testing Weibull(5.0)
    testing Weibull(20.0, 1.0)
    testing Weibull(1.0, 2.0)
    testing Weibull(5.0, 2.0)

Test Summary:    |    Pass    Total
Test univariates | 2972935  2972935
Test Summary:   |  Pass  Total
Test continuous | 96189  96189
Test Summary:  | Pass  Total
Test edgecases |   12     12
Test Summary: | Pass  Total
Test fit      |  606    606
Test Summary:    | Pass  Total
Test multinomial |  958    958
Test Summary: | Pass  Total
Test binomial | 3410   3410
   testing PoissonBinomial p=0.8, n=6
   testing PoissonBinomial p=0.5, n=10
   testing PoissonBinomial p=0.04, n=20
   testing PoissonBinomial [10 × 0.1, 10 × 0.5, 10 × 0.9]
   testing PoissonBinomial [1 × 0.99, 10 × 0.1, 100 × 0.05]
   testing PoissonBinomial [5 × 0.01, 1 × 0.99, 3 × 0.999]
   testing PoissonBinomial [10 × 0.0, 7 × 0.9, 10 × 0.5]
Test Summary:        | Pass  Total
Test poissonbinomial |  413    413
Test Summary:  | Pass  Total
Test dirichlet |  864    864
Test Summary:             | Pass  Total
Test dirichletmultinomial |   82     82
Test Summary:    | Pass  Total
Test logitnormal |  241    241
Test Summary: | Pass  Total
Test mvtdist  |   54     54
Test Summary:   | Pass  Total
Test kolmogorov |    9      9
Test Summary:  | Pass  Total
Test edgeworth | 1485   1485
Test Summary: | Pass  Total
Test wisharts |  156    156
Test Summary:   | Pass  Total
Test matrixbeta |   36     36
Test Summary:    | Pass  Total
Test matrixfdist |   39     39
Test Summary:     | Pass  Total
Test matrixnormal |   92     92
Test Summary:    | Pass  Total
Test matrixtdist |   82     82
Test Summary: | Pass  Total
Test lkj      |   70     70
Test Summary:       |  Pass  Total
Test vonmisesfisher | 24220  24220
Test Summary:   | Pass  Total
Test conversion |    3      3
Test Summary:    | Pass  Total
Test convolution |  289    289
Test Summary: |  Pass  Total
Test mixture  | 38154  38154
Test Summary:   | Pass  Total
Test gradlogpdf |   14     14
Test Summary:    | Pass  Total
Test noncentralt |    5      5
Test Summary:      | Pass  Total
Test locationscale |  308    308
Test Summary:        | Pass  Total
Test quantile_newton |    2      2
Test Summary:   | Pass  Total
Test semicircle |   28     28
Test Summary: | Pass  Total
Test qq       |    6      6
Test Summary:             | Pass  Total
Test pgeneralizedgaussian |  212    212
Test Summary: | Pass  Total
Test product  |   16     16
Test Summary:              | Pass  Total
Test discretenonparametric |  232    232
Test Summary:    | Pass  Total
Test functionals |    2      2
Test Summary: | Pass  Total
Test chernoff |  141    141
Test Summary:          | Pass  Total
Test univariate_bounds |  156    156
Test Summary:         | Pass  Total
Test negativebinomial | 3302   3302
Test Summary:  | Pass  Total
Test bernoulli |    2      2
Potentially stale exports: 
61-element Array{Tuple{Method,Method},1}:
 ((::Type{DiffResults.DiffResult})(value::Number, derivs::Tuple{Vararg{Number,N} where N}) in DiffResults at /home/pkgeval/.julia/packages/DiffResults/qEJ0G/src/DiffResults.jl:47, (::Type{DiffResults.DiffResult})(value::Number, derivs::Tuple{Vararg{AbstractArray,N} where N}) in DiffResults at /home/pkgeval/.julia/packages/DiffResults/qEJ0G/src/DiffResults.jl:50)
 ((::Type{SArray{Tuple{S},T,1,S} where T})(x::T) where {S, T<:Tuple} in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/SVector.jl:20, (::Type{SA})(x::Tuple{Tuple{Tuple{#s162} where #s162<:Tuple}}) where SA<:StaticArray in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/convert.jl:1)
 ((::Type{SArray{S,T,N,L} where L})(x::Tuple) where {S<:Tuple, T, N} in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/SArray.jl:33, (::Type{SA})(x::Tuple{Tuple{Tuple{#s162} where #s162<:Tuple}}) where SA<:StaticArray in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/convert.jl:1)
 ((::Type{Dual{T,V,N} where N})(x) where {T, V} in ForwardDiff at /home/pkgeval/.julia/packages/ForwardDiff/cXTw0/src/dual.jl:74, (::Type{T})(x::AbstractChar) where T<:Union{AbstractChar, Number} in Base at char.jl:50)
 ((::Type{Dual{T,V,N}})(x) where {T, V, N} in ForwardDiff at /home/pkgeval/.julia/packages/ForwardDiff/cXTw0/src/dual.jl:72, (::Type{T})(x::AbstractChar) where T<:Union{AbstractChar, Number} in Base at char.jl:50)
 ((::Type{SizedArray{S,T,N,M} where M})(x::Tuple) where {S, T, N} in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/SizedArray.jl:57, (::Type{SA})(x::Tuple{Tuple{Tuple{#s162} where #s162<:Tuple}}) where SA<:StaticArray in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/convert.jl:1)
 ((::Type{Dual{T,V,N}})(x) where {T, V, N} in ForwardDiff at /home/pkgeval/.julia/packages/ForwardDiff/cXTw0/src/dual.jl:72, (::Type{T})(x::Base.TwicePrecision) where T<:Number in Base at twiceprecision.jl:243)
 ((::Type{MArray{S,T,N,L} where L where N where T})(x::T) where {S, T<:Tuple} in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/MArray.jl:54, (::Type{SA})(x::Tuple{Tuple{Tuple{#s162} where #s162<:Tuple}}) where SA<:StaticArray in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/convert.jl:1)
 ((::Type{Scalar{T} where T})(x::Tuple{T}) where T in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/Scalar.jl:9, (::Type{SA})(x::Tuple{Tuple{Tuple{#s162} where #s162<:Tuple}}) where SA<:StaticArray in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/convert.jl:1)
 ((::Type{SArray{Tuple{S1,S2},T,2,L} where L})(x::Tuple{Vararg{Any,L}}) where {S1, S2, T, L} in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/SMatrix.jl:49, (::Type{SA})(x::Tuple{Tuple{Tuple{#s162} where #s162<:Tuple}}) where SA<:StaticArray in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/convert.jl:1)
 ((::Type{SSC})(a::AbstractArray{T,1} where T) where SSC<:SHermitianCompact in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/SHermitianCompact.jl:87, (::Type{SA})(a::StaticArray) where SA<:StaticArray in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/convert.jl:5)
 ((::Type{Dual})(args...) in ForwardDiff at /home/pkgeval/.julia/packages/ForwardDiff/cXTw0/src/dual.jl:68, (::Type{T})(x::Base.TwicePrecision) where T<:Number in Base at twiceprecision.jl:243)
 ((::Type{MArray{S,T,N,L} where L})(x::Tuple) where {S, T, N} in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/MArray.jl:40, (::Type{SA})(x::Tuple{Tuple{Tuple{#s162} where #s162<:Tuple}}) where SA<:StaticArray in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/convert.jl:1)
 ((::Type{SArray{Tuple{S1,S2},T,2,L} where L where T})(x::Tuple{Vararg{Any,L}}) where {S1, S2, L} in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/SMatrix.jl:33, (::Type{SA})(x::Tuple{Tuple{Tuple{#s162} where #s162<:Tuple}}) where SA<:StaticArray in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/convert.jl:1)
 ((::Type{Dual})(args...) in ForwardDiff at /home/pkgeval/.julia/packages/ForwardDiff/cXTw0/src/dual.jl:68, (::Type{T})(z::Complex) where T<:Real in Base at complex.jl:37)
 ((::Type{SizedArray{S,T,N,M} where M where N where T})(x::Tuple{Vararg{T,L}}) where {S, T, L} in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/SizedArray.jl:59, (::Type{SA})(x::Tuple{Tuple{Tuple{#s162} where #s162<:Tuple}}) where SA<:StaticArray in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/convert.jl:1)
 ((::Type{SArray{Tuple{S1,S2},T,2,L} where T})(x::Tuple{Vararg{Any,L}}) where {S1, S2, L} in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/SMatrix.jl:41, (::Type{SA})(x::Tuple{Tuple{Tuple{#s162} where #s162<:Tuple}}) where SA<:StaticArray in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/convert.jl:1)
 (StatsBase.TestStat(v) in StatsBase at /home/pkgeval/.julia/packages/StatsBase/unDUx/src/statmodels.jl:445, (::Type{T})(z::Complex) where T<:Real in Base at complex.jl:37)
 ((::Type{SArray{Tuple{S},T,1,S} where T})(x::Tuple{Vararg{T,S}}) where {S, T} in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/SVector.jl:19, (::Type{SA})(x::Tuple{Tuple{Tuple{#s162} where #s162<:Tuple}}) where SA<:StaticArray in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/convert.jl:1)
 ((::Type{Dual{T,V,N} where N where V})(value) where T in ForwardDiff at /home/pkgeval/.julia/packages/ForwardDiff/cXTw0/src/dual.jl:64, (::Type{T})(z::Complex) where T<:Real in Base at complex.jl:37)
 ((::Type{SHermitianCompact})(a::StaticArray{Tuple{N,N},T,2}) where {N, T} in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/SHermitianCompact.jl:82, (::Type{SSC})(a::SSC) where SSC<:SHermitianCompact in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/SHermitianCompact.jl:85)
 ((::Type{Dual{T,V,N}})(x) where {T, V, N} in ForwardDiff at /home/pkgeval/.julia/packages/ForwardDiff/cXTw0/src/dual.jl:72, (::Type{T})(z::Complex) where T<:Real in Base at complex.jl:37)
 ((::Type{MArray{Tuple{S},T,1,S} where T where S})(x::Tuple{Vararg{Any,S}}) where S in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/MVector.jl:19, (::Type{SA})(x::Tuple{Tuple{Tuple{#s162} where #s162<:Tuple}}) where SA<:StaticArray in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/convert.jl:1)
 (StatsBase.TestStat(v) in StatsBase at /home/pkgeval/.julia/packages/StatsBase/unDUx/src/statmodels.jl:445, (::Type{T})(x::AbstractChar) where T<:Union{AbstractChar, Number} in Base at char.jl:50)
 ((::Type{MArray{Tuple{S},T,1,S} where T})(x::Tuple{Vararg{Any,S}}) where S in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/MVector.jl:21, (::Type{SA})(x::Tuple{Tuple{Tuple{#s162} where #s162<:Tuple}}) where SA<:StaticArray in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/convert.jl:1)
 ((::Type{MArray{Tuple{S},T,1,S} where T})(x::Tuple{Vararg{T,S}}) where {S, T} in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/MVector.jl:20, (::Type{SA})(x::Tuple{Tuple{Tuple{#s162} where #s162<:Tuple}}) where SA<:StaticArray in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/convert.jl:1)
 ((::Type{SArray{Tuple{S},T,1,S} where T where S})(x::Tuple{Vararg{Any,S}}) where S in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/SVector.jl:18, (::Type{SA})(x::Tuple{Tuple{Tuple{#s162} where #s162<:Tuple}}) where SA<:StaticArray in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/convert.jl:1)
 ((::Type{Dual})(args...) in ForwardDiff at /home/pkgeval/.julia/packages/ForwardDiff/cXTw0/src/dual.jl:68, (::Type{T})(x::AbstractChar) where T<:Union{AbstractChar, Number} in Base at char.jl:50)
 (StatsBase.TestStat(v) in StatsBase at /home/pkgeval/.julia/packages/StatsBase/unDUx/src/statmodels.jl:445, (::Type{T})(x::Base.TwicePrecision) where T<:Number in Base at twiceprecision.jl:243)
 ((::Type{MArray{Tuple{S1,S2},T,2,L} where L where T})(x::Tuple{Vararg{T,L}} where T) where {S1, S2, L} in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/MMatrix.jl:33, (::Type{SA})(x::Tuple{Tuple{Tuple{#s162} where #s162<:Tuple}}) where SA<:StaticArray in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/convert.jl:1)
 ((::Type{MArray{S,T,N,L}})(x::Tuple{Vararg{Any,L}}) where {S, T, N, L} in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/MArray.jl:29, (::Type{SA})(x::Tuple{Tuple{Tuple{#s162} where #s162<:Tuple}}) where SA<:StaticArray in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/convert.jl:1)
 ((::Type{SizedArray{S,T,N,M} where M where N})(x::Tuple) where {S, T} in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/SizedArray.jl:58, (::Type{SA})(x::Tuple{Tuple{Tuple{#s162} where #s162<:Tuple}}) where SA<:StaticArray in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/convert.jl:1)
 ((::Type{Fill{T,N,Axes} where Axes})(x, sz::Axes) where {T, N, Axes<:Tuple{Vararg{AbstractUnitRange,N}}} in FillArrays at /home/pkgeval/.julia/packages/FillArrays/OhEYG/src/FillArrays.jl:66, (::Type{Fill{T,N,Axes} where Axes})(x, sz::SZ) where {T, N, SZ<:Tuple{Vararg{Integer,N}}} in FillArrays at /home/pkgeval/.julia/packages/FillArrays/OhEYG/src/FillArrays.jl:69)
 ((::Type{SArray{S,T,N,L} where L where N where T})(x::T) where {S<:Tuple, T<:Tuple} in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/SArray.jl:47, (::Type{SA})(x::Tuple{Tuple{Tuple{#s162} where #s162<:Tuple}}) where SA<:StaticArray in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/convert.jl:1)
 ((::Type{Dual{T,V,N}})(x::Number) where {T, V, N} in ForwardDiff at /home/pkgeval/.julia/packages/ForwardDiff/cXTw0/src/dual.jl:73, (::Type{T})(z::Complex) where T<:Real in Base at complex.jl:37)
 ((::Type{Dual{T,V,N} where N where V})(value) where T in ForwardDiff at /home/pkgeval/.julia/packages/ForwardDiff/cXTw0/src/dual.jl:64, (::Type{T})(x::AbstractChar) where T<:Union{AbstractChar, Number} in Base at char.jl:50)
 ((::Type{SHermitianCompact{N,T,L} where L where T})(a::Tuple{Vararg{T,M}}) where {N, T, M} in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/SHermitianCompact.jl:81, (::Type{SA})(x::Tuple{Tuple{Tuple{#s162} where #s162<:Tuple}}) where SA<:StaticArray in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/convert.jl:1)
 ((::Type{SHermitianCompact{N,T,L} where L})(a::Tuple) where {N, T} in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/SHermitianCompact.jl:76, (::Type{SA})(x::Tuple{Tuple{Tuple{#s162} where #s162<:Tuple}}) where SA<:StaticArray in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/convert.jl:1)
 ((::Type{SArray{S,T,N,L}})(x::Tuple{Vararg{T,L}}) where {S, T, N, L} in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/SArray.jl:22, (::Type{SA})(x::Tuple{Tuple{Tuple{#s162} where #s162<:Tuple}}) where SA<:StaticArray in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/convert.jl:1)
 ((::Type{SizedArray{S,T,N,M}})(x::Tuple{Vararg{Any,L}}) where {S, T, N, M, L} in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/SizedArray.jl:45, (::Type{SA})(x::Tuple{Tuple{Tuple{#s162} where #s162<:Tuple}}) where SA<:StaticArray in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/convert.jl:1)
 ((::Type{SArray{S,T,N,L}})(x::Tuple{Vararg{Any,L}}) where {S, T, N, L} in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/SArray.jl:27, (::Type{SA})(x::Tuple{Tuple{Tuple{#s162} where #s162<:Tuple}}) where SA<:StaticArray in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/convert.jl:1)
 ((::Type{Dual{T,V,N} where N})(x) where {T, V} in ForwardDiff at /home/pkgeval/.julia/packages/ForwardDiff/cXTw0/src/dual.jl:74, (::Type{T})(x::Base.TwicePrecision) where T<:Number in Base at twiceprecision.jl:243)
 ((::Type{SArray{Tuple{S1,S2},T,2,L} where L where T where S2})(x::Tuple{Vararg{Any,L}}) where {S1, L} in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/SMatrix.jl:20, (::Type{SA})(x::Tuple{Tuple{Tuple{#s162} where #s162<:Tuple}}) where SA<:StaticArray in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/convert.jl:1)
 ((::Type{Scalar{T} where T})(a::AbstractArray) in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/Scalar.jl:10, (::Type{SA})(a::StaticArray) where SA<:StaticArray in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/convert.jl:5)
 ((::Type{FA})(x::Tuple{Vararg{Any,N}}) where {N, FA<:FieldArray} in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/FieldArray.jl:99, (::Type{SA})(x::Tuple{Tuple{Tuple{#s162} where #s162<:Tuple}}) where SA<:StaticArray in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/convert.jl:1)
 ((::Type{Dual{T,V,N} where N})(x) where {T, V} in ForwardDiff at /home/pkgeval/.julia/packages/ForwardDiff/cXTw0/src/dual.jl:74, (::Type{T})(z::Complex) where T<:Real in Base at complex.jl:37)
 ((::Type{MArray{S,T,N,L} where L where N})(x::Tuple) where {S, T} in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/MArray.jl:47, (::Type{SA})(x::Tuple{Tuple{Tuple{#s162} where #s162<:Tuple}}) where SA<:StaticArray in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/convert.jl:1)
 ((::Type{DiffResults.DiffResult})(value::Number, derivs::Tuple{Vararg{Number,N} where N}) in DiffResults at /home/pkgeval/.julia/packages/DiffResults/qEJ0G/src/DiffResults.jl:47, (::Type{DiffResults.DiffResult})(value::Number, derivs::Tuple{Vararg{StaticArray,N} where N}) in DiffResults at /home/pkgeval/.julia/packages/DiffResults/qEJ0G/src/DiffResults.jl:48)
 ((::Type{MArray{S,T,N,L}})(x::Tuple{Vararg{T,L}}) where {S, T, N, L} in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/MArray.jl:24, (::Type{SA})(x::Tuple{Tuple{Tuple{#s162} where #s162<:Tuple}}) where SA<:StaticArray in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/convert.jl:1)
 ((::Type{SArray{S,T,N,L} where L where N})(x::Tuple) where {S<:Tuple, T} in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/SArray.jl:40, (::Type{SA})(x::Tuple{Tuple{Tuple{#s162} where #s162<:Tuple}}) where SA<:StaticArray in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/convert.jl:1)
 ((::Type{Dual})(args...) in ForwardDiff at /home/pkgeval/.julia/packages/ForwardDiff/cXTw0/src/dual.jl:68, (::Type{T})(x::T) where T<:Number in Core at boot.jl:715)
 ((::Type{Dual{T,V,N} where N where V})(value) where T in ForwardDiff at /home/pkgeval/.julia/packages/ForwardDiff/cXTw0/src/dual.jl:64, (::Type{T})(x::Base.TwicePrecision) where T<:Number in Base at twiceprecision.jl:243)
 ((::Type{Dual{T,V,N} where N})(x) where {T, V} in ForwardDiff at /home/pkgeval/.julia/packages/ForwardDiff/cXTw0/src/dual.jl:74, (::Type{T})(x::T) where T<:Number in Core at boot.jl:715)
 ((::Type{MArray{Tuple{S1,S2},T,2,L} where L where T where S2})(x::Tuple{Vararg{T,L}} where T) where {S1, L} in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/MMatrix.jl:21, (::Type{SA})(x::Tuple{Tuple{Tuple{#s162} where #s162<:Tuple}}) where SA<:StaticArray in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/convert.jl:1)
 ((::Type{Scalar{T} where T})(a::AbstractArray{T,0} where T) in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/Scalar.jl:11, (::Type{SA})(a::StaticArray) where SA<:StaticArray in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/convert.jl:5)
 ((::Type{SHermitianCompact{N,T,L}})(a::Tuple) where {N, T, L} in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/SHermitianCompact.jl:63, (::Type{SA})(x::Tuple{Tuple{Tuple{#s162} where #s162<:Tuple}}) where SA<:StaticArray in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/convert.jl:1)
 ((::Type{MArray{Tuple{S1,S2},T,2,L} where L})(x::Tuple{Vararg{T,L}} where T) where {S1, S2, T, L} in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/MMatrix.jl:41, (::Type{SA})(x::Tuple{Tuple{Tuple{#s162} where #s162<:Tuple}}) where SA<:StaticArray in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/convert.jl:1)
 ((::Type{SizedArray{Tuple{S1,S2},T,2,M} where M where T})(x::Tuple{Vararg{T,L}}) where {S1, S2, T, L} in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/SizedArray.jl:83, (::Type{SA})(x::Tuple{Tuple{Tuple{#s162} where #s162<:Tuple}}) where SA<:StaticArray in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/convert.jl:1)
 ((::Type{SizedArray{Tuple{S},T,1,M} where M where T})(x::Tuple{Vararg{T,L}}) where {S, T, L} in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/SizedArray.jl:79, (::Type{SA})(x::Tuple{Tuple{Tuple{#s162} where #s162<:Tuple}}) where SA<:StaticArray in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/convert.jl:1)
 ((::Type{SHermitianCompact{N,T,L} where L where T})(a::Tuple) where N in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/SHermitianCompact.jl:80, (::Type{SA})(x::Tuple{Tuple{Tuple{#s162} where #s162<:Tuple}}) where SA<:StaticArray in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/convert.jl:1)
 ((::Type{SHermitianCompact})(a::StaticArray{Tuple{N,N},T,2}) where {N, T} in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/SHermitianCompact.jl:82, (::Type{SSC})(a::SHermitianCompact) where SSC<:SHermitianCompact in StaticArrays at /home/pkgeval/.julia/packages/StaticArrays/1g9bq/src/SHermitianCompact.jl:84)
    Testing Distributions tests passed 
