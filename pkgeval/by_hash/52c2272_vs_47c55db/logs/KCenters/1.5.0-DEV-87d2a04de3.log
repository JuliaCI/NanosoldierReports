Julia Version 1.5.0-DEV.732
Commit 87d2a04de3 (2020-04-30 10:44 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed DataValueInterfaces ───────── v1.0.0
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed Missings ──────────────────── v0.4.3
  Installed DataAPI ───────────────────── v1.3.0
  Installed Parsers ───────────────────── v1.0.2
  Installed KCenters ──────────────────── v0.2.2
  Installed DataStructures ────────────── v0.17.15
  Installed SimilaritySearch ──────────── v0.3.19
  Installed Compat ────────────────────── v3.8.0
  Installed InvertedIndices ───────────── v1.0.0
  Installed LearnBase ─────────────────── v0.2.2
  Installed Reexport ──────────────────── v0.2.0
  Installed OrderedCollections ────────── v1.1.0
  Installed MLDataUtils ───────────────── v0.5.1
  Installed StatsBase ─────────────────── v0.32.2
  Installed MappedArrays ──────────────── v0.2.2
  Installed MLDataPattern ─────────────── v0.5.3
  Installed PooledArrays ──────────────── v0.5.3
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed TableTraits ───────────────── v1.0.0
  Installed CategoricalArrays ─────────── v0.7.7
  Installed JSON ──────────────────────── v0.21.0
  Installed Tables ────────────────────── v1.0.4
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed DataFrames ────────────────── v0.20.2
Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.8.0
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.15
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v1.0.2
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_XWSZa2/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_XWSZa2/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.8.0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.15
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v1.0.2
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0723782532413801
[ Info: 0.9323044313987097
[ Info: 0.8302954188982645
[ Info: 0.5538560461501281
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.33106788565715156
mean(cdnet.distances) = 0.3485881580164035
mean(crand.distances) = 0.33944904456535974
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.1650390625,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.1650390625,"f1":null,"seconds":0.0009273141622543335,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":6.0625,"distances_sum":484.76723674968713}}, beam: 2, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.1650390625,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.1650390625,"f1":null,"seconds":0.0009273141622543335,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":6.0625,"distances_sum":484.76723674968713}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2001953125,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2001953125,"f1":null,"seconds":2.263113856315613e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":4.9453125,"distances_sum":534.9892678088447}}, beam: 3, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.2001953125,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2001953125,"f1":null,"seconds":2.263113856315613e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":4.9453125,"distances_sum":534.9892678088447}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.53515625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.53515625,"f1":0.6808113761238767,"seconds":3.0212104320526123e-6,"exhaustive_search_seconds":1.0784715414047241e-6,"evaluations":7.1015625,"distances_sum":1352.5349638448888}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2109375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2109375,"f1":null,"seconds":3.635883331298828e-6,"exhaustive_search_seconds":1.0784715414047241e-6,"evaluations":5.421875,"distances_sum":591.3233848609318}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7568359375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7568359375,"f1":0.8500291375291383,"seconds":5.3104013204574585e-6,"exhaustive_search_seconds":1.0784715414047241e-6,"evaluations":7.8359375,"distances_sum":2041.7866961033626}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7568359375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7568359375,"f1":0.8500291375291383,"seconds":5.3104013204574585e-6,"exhaustive_search_seconds":1.0784715414047241e-6,"evaluations":7.8359375,"distances_sum":2041.7866961033626}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.945283882783883,"seconds":5.837529897689819e-6,"exhaustive_search_seconds":1.0784715414047241e-6,"evaluations":8.8359375,"distances_sum":2622.1798520827306}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.802734375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.802734375,"f1":0.8843208874458883,"seconds":5.323439836502075e-6,"exhaustive_search_seconds":1.0784715414047241e-6,"evaluations":8.3515625,"distances_sum":2230.0413491330423}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8154296875, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8154296875,"f1":0.8922051906426914,"seconds":5.165114998817444e-6,"exhaustive_search_seconds":1.0784715414047241e-6,"evaluations":8.4921875,"distances_sum":2242.498333105097}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9033203125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9033203125,"f1":0.945283882783883,"seconds":5.837529897689819e-6,"exhaustive_search_seconds":1.0784715414047241e-6,"evaluations":8.8359375,"distances_sum":2622.1798520827306}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.974519230769231,"seconds":3.7420541048049927e-6,"exhaustive_search_seconds":1.0784715414047241e-6,"evaluations":8.9296875,"distances_sum":2880.9662300558084}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9463827838827845,"seconds":3.846362233161926e-6,"exhaustive_search_seconds":1.0784715414047241e-6,"evaluations":8.6484375,"distances_sum":2728.896810126771}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":8,"bsize":10}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9570398351648356,"seconds":4.0512531995773315e-6,"exhaustive_search_seconds":1.0784715414047241e-6,"evaluations":8.828125,"distances_sum":2761.8749407407518}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.963953754578755,"seconds":3.7122517824172974e-6,"exhaustive_search_seconds":1.0784715414047241e-6,"evaluations":8.8515625,"distances_sum":2821.531666683384}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9458390567765576,"seconds":3.941357135772705e-6,"exhaustive_search_seconds":1.0784715414047241e-6,"evaluations":8.703125,"distances_sum":2709.9418243330197}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9541015625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.974519230769231,"seconds":3.7420541048049927e-6,"exhaustive_search_seconds":1.0784715414047241e-6,"evaluations":8.9296875,"distances_sum":2880.9662300558084}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9541015625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.974519230769231,"seconds":3.7420541048049927e-6,"exhaustive_search_seconds":1.0784715414047241e-6,"evaluations":8.9296875,"distances_sum":2880.9662300558084}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5625, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.5625,"f1":0.705422355422356,"seconds":3.03611159324646e-6,"exhaustive_search_seconds":1.0319054126739502e-6,"evaluations":7.3671875,"distances_sum":1309.0614524324367}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.681640625, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.681640625,"f1":0.8002981393606402,"seconds":5.101785063743591e-6,"exhaustive_search_seconds":1.0319054126739502e-6,"evaluations":7.9609375,"distances_sum":1685.8254030459188}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.427734375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.427734375,"f1":null,"seconds":4.481524229049683e-6,"exhaustive_search_seconds":1.0319054126739502e-6,"evaluations":6.6953125,"distances_sum":955.0108053901388}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.681640625,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.681640625,"f1":0.8002981393606402,"seconds":5.101785063743591e-6,"exhaustive_search_seconds":1.0319054126739502e-6,"evaluations":7.9609375,"distances_sum":1685.8254030459188}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9452438186813189,"seconds":6.88992440700531e-6,"exhaustive_search_seconds":1.0319054126739502e-6,"evaluations":8.7734375,"distances_sum":2642.2158774700365}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.857421875, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.857421875,"f1":0.9175397519147525,"seconds":7.208436727523804e-6,"exhaustive_search_seconds":1.0319054126739502e-6,"evaluations":8.671875,"distances_sum":2425.3256463600856}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.841796875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.841796875,"f1":0.9080877455877466,"seconds":4.416331648826599e-6,"exhaustive_search_seconds":1.0319054126739502e-6,"evaluations":8.515625,"distances_sum":2306.074905611787}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.904296875,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.904296875,"f1":0.9452438186813189,"seconds":6.88992440700531e-6,"exhaustive_search_seconds":1.0319054126739502e-6,"evaluations":8.7734375,"distances_sum":2642.2158774700365}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9472184065934072,"seconds":5.908310413360596e-6,"exhaustive_search_seconds":1.0319054126739502e-6,"evaluations":8.765625,"distances_sum":2641.3784200237596}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9508985805860811,"seconds":5.8282166719436646e-6,"exhaustive_search_seconds":1.0319054126739502e-6,"evaluations":8.8203125,"distances_sum":2673.091490393485}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9683092948717953,"seconds":6.113201379776001e-6,"exhaustive_search_seconds":1.0319054126739502e-6,"evaluations":8.8984375,"distances_sum":2794.1221317283157}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":9,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9669127747252754,"seconds":6.299465894699097e-6,"exhaustive_search_seconds":1.0319054126739502e-6,"evaluations":8.9140625,"distances_sum":2779.5136438131776}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.973511904761905,"seconds":6.860122084617615e-6,"exhaustive_search_seconds":1.0319054126739502e-6,"evaluations":8.953125,"distances_sum":2801.007805764258}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9675995879120882,"seconds":5.7462602853775024e-6,"exhaustive_search_seconds":1.0319054126739502e-6,"evaluations":8.9296875,"distances_sum":2766.1996560623884}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.951171875,"state":{"ssize":7,"bsize":11},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.973511904761905,"seconds":6.860122084617615e-6,"exhaustive_search_seconds":1.0319054126739502e-6,"evaluations":8.953125,"distances_sum":2801.007805764258}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.951171875,"state":{"ssize":7,"bsize":11},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.973511904761905,"seconds":6.860122084617615e-6,"exhaustive_search_seconds":1.0319054126739502e-6,"evaluations":8.953125,"distances_sum":2801.007805764258}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4267578125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4267578125,"f1":null,"seconds":4.064291715621948e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":6.796875,"distances_sum":1013.4322083164593}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.57421875, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.57421875,"f1":0.7183399933399939,"seconds":4.425644874572754e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":7.5078125,"distances_sum":1394.6530909922728}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.57421875,"state":{"ssize":5,"bsize":3},"perf":{"precision":1.0,"recall":0.57421875,"f1":0.7183399933399939,"seconds":4.425644874572754e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":7.5078125,"distances_sum":1394.6530909922728}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6728515625, conf: {"ssize":9,"bsize":4}, perf: {"precision":1.0,"recall":0.6728515625,"f1":0.7935569638694646,"seconds":4.688277840614319e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":7.875,"distances_sum":1712.3580745392953}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.576171875, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.576171875,"f1":0.7113657176157183,"seconds":4.3101608753204346e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":7.4765625,"distances_sum":1473.0771250244795}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6728515625, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6728515625,"f1":0.7942162004662013,"seconds":4.295259714126587e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":7.8203125,"distances_sum":1746.0907771426794}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6728515625,"state":{"ssize":9,"bsize":4},"perf":{"precision":1.0,"recall":0.6728515625,"f1":0.7935569638694646,"seconds":4.688277840614319e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":7.875,"distances_sum":1712.3580745392953}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9346268315018319,"seconds":6.008893251419067e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.859375,"distances_sum":2618.1164073947884}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8310546875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8310546875,"f1":0.901488095238096,"seconds":5.846843123435974e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.359375,"distances_sum":2396.9946186116126}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.845703125, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.845703125,"f1":0.9123111263736272,"seconds":6.068497896194458e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.5234375,"distances_sum":2423.5302364844215}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8193359375, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.8193359375,"f1":0.8940876831501837,"seconds":5.966052412986755e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.4140625,"distances_sum":2303.6550351759106}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.673828125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.673828125,"f1":0.7925236222111227,"seconds":5.315989255905151e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":7.75,"distances_sum":1755.3566925613507}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8837890625,"state":{"ssize":9,"bsize":7},"perf":{"precision":1.0,"recall":0.8837890625,"f1":0.9346268315018319,"seconds":6.008893251419067e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.859375,"distances_sum":2618.1164073947884}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8837890625,"state":{"ssize":9,"bsize":7},"perf":{"precision":1.0,"recall":0.8837890625,"f1":0.9346268315018319,"seconds":6.008893251419067e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.859375,"distances_sum":2618.1164073947884}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.626953125, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.626953125,"f1":0.7575148809523818,"seconds":5.39049506187439e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":7.8125,"distances_sum":1666.9557476468913}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7421875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7421875,"f1":0.8396181943056951,"seconds":5.7853758335113525e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.0546875,"distances_sum":2088.4318724906025}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1513671875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.1513671875,"f1":null,"seconds":3.635883331298828e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":5.1796875,"distances_sum":396.9116967798667}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.49609375, conf: {"ssize":3,"bsize":3}, perf: {"precision":null,"recall":0.49609375,"f1":null,"seconds":4.69014048576355e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":7.1171875,"distances_sum":1327.4068015842881}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7421875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7421875,"f1":0.8396181943056951,"seconds":5.7853758335113525e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.0546875,"distances_sum":2088.4318724906025}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9501545329670333,"seconds":6.373971700668335e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.703125,"distances_sum":2789.2047219216815}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9515109890109895,"seconds":6.3497573137283325e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.6640625,"distances_sum":2826.3883397010995}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9379349816849821,"seconds":6.232410669326782e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.6484375,"distances_sum":2724.421884628258}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.783203125, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.783203125,"f1":0.8699123792873803,"seconds":6.120651960372925e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.296875,"distances_sum":2269.310801482809}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9169921875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9169921875,"f1":0.9515109890109895,"seconds":6.3497573137283325e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.6640625,"distances_sum":2826.3883397010995}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9743704212454214,"seconds":6.835907697677612e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.8828125,"distances_sum":2937.464170079366}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9563129578754582,"seconds":6.541609764099121e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.8046875,"distances_sum":2840.6658438152285}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.9766025641025644,"seconds":6.735324859619141e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.9453125,"distances_sum":2945.0684744138816}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9594582500832506,"seconds":6.418675184249878e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.828125,"distances_sum":2819.0200771688887}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":8,"bsize":12}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9745936355311359,"seconds":6.660819053649902e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.9375,"distances_sum":2925.014687003176}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9660542582417586,"seconds":6.603077054023743e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.890625,"distances_sum":2861.0463021327323}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9580078125,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9766025641025644,"seconds":6.735324859619141e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.9453125,"distances_sum":2945.0684744138816}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9580078125,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9766025641025644,"seconds":6.735324859619141e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.9453125,"distances_sum":2945.0684744138816}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7763671875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7763671875,"f1":0.865877872127873,"seconds":5.764886736869812e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.0859375,"distances_sum":2102.813012840912}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6611328125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6611328125,"f1":0.7817940739815746,"seconds":5.159527063369751e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":7.4296875,"distances_sum":1660.4963213639146}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7763671875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7763671875,"f1":0.865877872127873,"seconds":5.764886736869812e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.0859375,"distances_sum":2102.813012840912}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9494333791208796,"seconds":6.517395377159119e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.8125,"distances_sum":2746.0691987849896}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.912109375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.912109375,"f1":0.9494333791208796,"seconds":6.517395377159119e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.8125,"distances_sum":2746.0691987849896}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9695169413919416,"seconds":6.094574928283691e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.9375,"distances_sum":2874.0455488648986}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9677734375, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.9677734375,"f1":0.9823660714285716,"seconds":6.314367055892944e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.96875,"distances_sum":2995.263542580388}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9677734375,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.9677734375,"f1":0.9823660714285716,"seconds":6.314367055892944e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.96875,"distances_sum":2995.263542580388}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9677734375,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.9677734375,"f1":0.9823660714285716,"seconds":6.314367055892944e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.96875,"distances_sum":2995.263542580388}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1689453125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.1689453125,"f1":null,"seconds":3.3266842365264893e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":5.09375,"distances_sum":419.96191173827236}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.1689453125,"state":{"ssize":3,"bsize":1},"perf":{"precision":null,"recall":0.1689453125,"f1":null,"seconds":3.3266842365264893e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":5.09375,"distances_sum":419.96191173827236}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7412109375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7412109375,"f1":0.8398903180153189,"seconds":5.193054676055908e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":7.84375,"distances_sum":2059.4638784611075}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7412109375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7412109375,"f1":0.8398903180153189,"seconds":5.193054676055908e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":7.84375,"distances_sum":2059.4638784611075}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8701171875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8701171875,"f1":0.9255926365301372,"seconds":5.999580025672913e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.6875,"distances_sum":2631.681451814062}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9327323717948722,"seconds":5.809590220451355e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.578125,"distances_sum":2725.970983930381}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8837890625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.8837890625,"f1":0.9327323717948722,"seconds":5.809590220451355e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.578125,"distances_sum":2725.970983930381}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8837890625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.8837890625,"f1":0.9327323717948722,"seconds":5.809590220451355e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.578125,"distances_sum":2725.970983930381}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.681640625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.681640625,"f1":0.7939673174048181,"seconds":4.9658119678497314e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":7.5078125,"distances_sum":1819.9143013318767}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.376953125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.376953125,"f1":null,"seconds":4.118308424949646e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":6.8046875,"distances_sum":901.5637642030998}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.681640625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.681640625,"f1":0.7939673174048181,"seconds":4.9658119678497314e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":7.5078125,"distances_sum":1819.9143013318767}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.775390625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.775390625,"f1":0.8651359057609066,"seconds":5.2656978368759155e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":7.9140625,"distances_sum":2141.0344924503943}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.849609375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.849609375,"f1":0.9111357392607399,"seconds":5.7015568017959595e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":8.484375,"distances_sum":2439.5091186426907}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7001953125, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.7001953125,"f1":0.8123418248418256,"seconds":5.319714546203613e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":7.8046875,"distances_sum":1852.8838534727881}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.849609375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.849609375,"f1":0.9111357392607399,"seconds":5.7015568017959595e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":8.484375,"distances_sum":2439.5091186426907}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9408914002664007,"seconds":8.231960237026215e-5,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":8.8515625,"distances_sum":2641.317730079864}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9662831959706962,"seconds":5.5301934480667114e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":8.8671875,"distances_sum":2878.6170556724364}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.9271494130869137,"seconds":5.619600415229797e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":8.7109375,"distances_sum":2583.3471876729595}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9497309981684987,"seconds":5.435198545455933e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":8.796875,"distances_sum":2761.760362528994}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94140625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9662831959706962,"seconds":5.5301934480667114e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":8.8671875,"distances_sum":2878.6170556724364}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94140625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9662831959706962,"seconds":5.5301934480667114e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":8.8671875,"distances_sum":2878.6170556724364}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.353515625, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.353515625,"f1":null,"seconds":3.6265701055526733e-6,"exhaustive_search_seconds":1.125037670135498e-6,"evaluations":5.4453125,"distances_sum":798.1693484436013}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3642578125, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.3642578125,"f1":null,"seconds":3.3937394618988037e-6,"exhaustive_search_seconds":1.125037670135498e-6,"evaluations":5.453125,"distances_sum":844.4701253512409}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3642578125,"state":{"ssize":4,"bsize":2},"perf":{"precision":null,"recall":0.3642578125,"f1":null,"seconds":3.3937394618988037e-6,"exhaustive_search_seconds":1.125037670135498e-6,"evaluations":5.453125,"distances_sum":844.4701253512409}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.513671875, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.513671875,"f1":0.662506937506938,"seconds":4.259869456291199e-6,"exhaustive_search_seconds":1.125037670135498e-6,"evaluations":6.671875,"distances_sum":1180.218840290531}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8681640625, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8681640625,"f1":0.9207334332334337,"seconds":5.509704351425171e-6,"exhaustive_search_seconds":1.125037670135498e-6,"evaluations":8.5859375,"distances_sum":2174.3179380297065}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.85546875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.85546875,"f1":0.9143096486846495,"seconds":5.4854899644851685e-6,"exhaustive_search_seconds":1.125037670135498e-6,"evaluations":8.5390625,"distances_sum":2100.9774807351873}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8681640625,"state":{"ssize":6,"bsize":6},"perf":{"precision":1.0,"recall":0.8681640625,"f1":0.9207334332334337,"seconds":5.509704351425171e-6,"exhaustive_search_seconds":1.125037670135498e-6,"evaluations":8.5859375,"distances_sum":2174.3179380297065}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9620592948717952,"seconds":5.8282166719436646e-6,"exhaustive_search_seconds":1.125037670135498e-6,"evaluations":8.8828125,"distances_sum":2356.701745737438}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9625629578754582,"seconds":5.891546607017517e-6,"exhaustive_search_seconds":1.125037670135498e-6,"evaluations":8.890625,"distances_sum":2381.09334847598}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.93359375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9625629578754582,"seconds":5.891546607017517e-6,"exhaustive_search_seconds":1.125037670135498e-6,"evaluations":8.890625,"distances_sum":2381.09334847598}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.93359375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9625629578754582,"seconds":5.891546607017517e-6,"exhaustive_search_seconds":1.125037670135498e-6,"evaluations":8.890625,"distances_sum":2381.09334847598}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7626953125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7626953125,"f1":0.8560418747918758,"seconds":4.852190613746643e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":7.9765625,"distances_sum":1880.7897441343384}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7626953125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7626953125,"f1":0.8560418747918758,"seconds":4.852190613746643e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":7.9765625,"distances_sum":1880.7897441343384}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8642578125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8642578125,"f1":0.9215347152847159,"seconds":5.4389238357543945e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.5,"distances_sum":2204.4033117749645}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8642578125,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8642578125,"f1":0.9215347152847159,"seconds":5.4389238357543945e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.5,"distances_sum":2204.4033117749645}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9673592032967039,"seconds":6.051734089851379e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.8515625,"distances_sum":2540.352601523175}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9447287087912093,"seconds":5.653128027915955e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.734375,"distances_sum":2380.286131166255}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94140625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9673592032967039,"seconds":6.051734089851379e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.8515625,"distances_sum":2540.352601523175}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94140625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9673592032967039,"seconds":6.051734089851379e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.8515625,"distances_sum":2540.352601523175}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3974609375, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.3974609375,"f1":null,"seconds":3.21120023727417e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":5.453125,"distances_sum":941.4654973406857}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.212890625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.212890625,"f1":null,"seconds":3.0025839805603027e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":5.515625,"distances_sum":500.46764074853377}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.58984375, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.58984375,"f1":null,"seconds":4.123896360397339e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":7.125,"distances_sum":1363.3734203085558}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7646484375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7646484375,"f1":0.8593583499833508,"seconds":4.7031790018081665e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":7.7734375,"distances_sum":1847.828629506842}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7646484375,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7646484375,"f1":0.8593583499833508,"seconds":4.7031790018081665e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":7.7734375,"distances_sum":1847.828629506842}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.876953125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.876953125,"f1":0.9274329836829844,"seconds":5.317851901054382e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":8.625,"distances_sum":2341.2460569362406}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9361149267399275,"seconds":5.120411515235901e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":8.65625,"distances_sum":2329.1695589085675}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8408203125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8408203125,"f1":0.9067765567765574,"seconds":5.144625902175903e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":8.3671875,"distances_sum":2180.636507836431}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8525390625, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8525390625,"f1":0.9153991841491848,"seconds":5.435198545455933e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":8.34375,"distances_sum":2210.33634981951}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.888671875,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.888671875,"f1":0.9361149267399275,"seconds":5.120411515235901e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":8.65625,"distances_sum":2329.1695589085675}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9475675366300373,"seconds":6.36465847492218e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":8.7734375,"distances_sum":2431.357960030716}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9545589826839831,"seconds":6.124377250671387e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":8.75,"distances_sum":2511.776999549741}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9365670787545795,"seconds":5.906447768211365e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":8.6328125,"distances_sum":2394.253519616789}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9585794413919417,"seconds":6.083399057388306e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":8.84375,"distances_sum":2511.4692553805885}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9537233599733604,"seconds":6.100162863731384e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":8.71875,"distances_sum":2547.3107596115638}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9267578125,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9585794413919417,"seconds":6.083399057388306e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":8.84375,"distances_sum":2511.4692553805885}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9267578125,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9585794413919417,"seconds":6.083399057388306e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":8.84375,"distances_sum":2511.4692553805885}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7666015625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7666015625,"f1":0.8585487429237438,"seconds":5.5655837059021e-6,"exhaustive_search_seconds":1.3764947652816772e-6,"evaluations":7.9140625,"distances_sum":1912.0931940543846}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6689453125, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6689453125,"f1":0.7890425546675555,"seconds":5.3085386753082275e-6,"exhaustive_search_seconds":1.3764947652816772e-6,"evaluations":7.421875,"distances_sum":1598.9934766799593}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5615234375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5615234375,"f1":0.7064067876567881,"seconds":4.949048161506653e-6,"exhaustive_search_seconds":1.3764947652816772e-6,"evaluations":6.9765625,"distances_sum":1278.397328584341}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7666015625,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7666015625,"f1":0.8585487429237438,"seconds":5.5655837059021e-6,"exhaustive_search_seconds":1.3764947652816772e-6,"evaluations":7.9140625,"distances_sum":1912.0931940543846}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.853515625, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.853515625,"f1":0.9146952006327013,"seconds":6.124377250671387e-6,"exhaustive_search_seconds":1.3764947652816772e-6,"evaluations":8.390625,"distances_sum":2264.409587695698}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.837890625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.837890625,"f1":0.9052999084249091,"seconds":6.0461461544036865e-6,"exhaustive_search_seconds":1.3764947652816772e-6,"evaluations":8.28125,"distances_sum":2186.934928956263}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.853515625,"state":{"ssize":5,"bsize":6},"perf":{"precision":1.0,"recall":0.853515625,"f1":0.9146952006327013,"seconds":6.124377250671387e-6,"exhaustive_search_seconds":1.3764947652816772e-6,"evaluations":8.390625,"distances_sum":2264.409587695698}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9470638736263743,"seconds":6.468966603279114e-6,"exhaustive_search_seconds":1.3764947652816772e-6,"evaluations":8.7265625,"distances_sum":2514.1919477345737}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9495764652014657,"seconds":6.156042218208313e-6,"exhaustive_search_seconds":1.3764947652816772e-6,"evaluations":8.6875,"distances_sum":2525.5946349266137}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9352767024642034,"seconds":5.7443976402282715e-6,"exhaustive_search_seconds":1.3764947652816772e-6,"evaluations":8.6953125,"distances_sum":2425.8045014446643}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9111328125,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.9111328125,"f1":0.9495764652014657,"seconds":6.156042218208313e-6,"exhaustive_search_seconds":1.3764947652816772e-6,"evaluations":8.6875,"distances_sum":2525.5946349266137}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9111328125,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.9111328125,"f1":0.9495764652014657,"seconds":6.156042218208313e-6,"exhaustive_search_seconds":1.3764947652816772e-6,"evaluations":8.6875,"distances_sum":2525.5946349266137}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.220703125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.220703125,"f1":null,"seconds":2.8386712074279785e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":5.46875,"distances_sum":507.32587751120064}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6923828125, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6923828125,"f1":0.8063493797868807,"seconds":4.524365067481995e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":7.546875,"distances_sum":1681.2060156835491}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6923828125,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.6923828125,"f1":0.8063493797868807,"seconds":4.524365067481995e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":7.546875,"distances_sum":1681.2060156835491}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7822265625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7822265625,"f1":0.8668851981351987,"seconds":4.967674612998962e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":7.984375,"distances_sum":1967.4701584911525}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7822265625,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7822265625,"f1":0.8668851981351987,"seconds":4.967674612998962e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":7.984375,"distances_sum":1967.4701584911525}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.948534798534799,"seconds":5.621463060379028e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.71875,"distances_sum":2489.4990485963217}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9328385156510159,"seconds":5.250796675682068e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.7109375,"distances_sum":2358.991761935042}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8427734375, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8427734375,"f1":0.9089800824175832,"seconds":5.15766441822052e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.265625,"distances_sum":2175.8871719300514}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9520146520146525,"seconds":3.7401914596557617e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.7578125,"distances_sum":2501.399588044573}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.933384844322345,"seconds":3.4421682357788086e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.6796875,"distances_sum":2335.3595818092654}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9140625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.9520146520146525,"seconds":3.7401914596557617e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.7578125,"distances_sum":2501.399588044573}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9140625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.9520146520146525,"seconds":3.7401914596557617e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.7578125,"distances_sum":2501.399588044573}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4443359375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4443359375,"f1":null,"seconds":4.002824425697327e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":6.5703125,"distances_sum":1008.3145647326983}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.751953125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.751953125,"f1":0.8484473859473868,"seconds":5.487352609634399e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.2109375,"distances_sum":1927.986364011628}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.751953125,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.751953125,"f1":0.8484473859473868,"seconds":5.487352609634399e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.2109375,"distances_sum":1927.986364011628}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8212890625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8212890625,"f1":0.8932811979686988,"seconds":5.900859832763672e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.4375,"distances_sum":2094.818587248183}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9660542582417586,"seconds":6.182119250297546e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.8671875,"distances_sum":2601.346009655592}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9384765625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9660542582417586,"seconds":6.182119250297546e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.8671875,"distances_sum":2601.346009655592}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9658203125, conf: {"ssize":3,"bsize":12}, perf: {"precision":1.0,"recall":0.9658203125,"f1":0.981307234432235,"seconds":6.722286343574524e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.96875,"distances_sum":2715.85088405636}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.970703125, conf: {"ssize":4,"bsize":13}, perf: {"precision":1.0,"recall":0.970703125,"f1":0.9840029761904765,"seconds":6.59748911857605e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.9609375,"distances_sum":2749.2703173269856}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9706101190476195,"seconds":6.2659382820129395e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.8984375,"distances_sum":2648.0949629966854}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.970703125,"state":{"ssize":4,"bsize":13},"perf":{"precision":1.0,"recall":0.970703125,"f1":0.9840029761904765,"seconds":6.59748911857605e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.9609375,"distances_sum":2749.2703173269856}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.970703125,"state":{"ssize":4,"bsize":13},"perf":{"precision":1.0,"recall":0.970703125,"f1":0.9840029761904765,"seconds":6.59748911857605e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.9609375,"distances_sum":2749.2703173269856}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6689453125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6689453125,"f1":0.7896216630591638,"seconds":4.950910806655884e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":7.6875,"distances_sum":1371.4028409486928}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.416015625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.416015625,"f1":null,"seconds":4.014000296592712e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":6.4375,"distances_sum":857.981672516432}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6689453125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6689453125,"f1":0.7896216630591638,"seconds":4.950910806655884e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":7.6875,"distances_sum":1371.4028409486928}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9560496794871798,"seconds":6.245449185371399e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.8828125,"distances_sum":2319.320808681461}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9460196053946058,"seconds":4.785135388374329e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.703125,"distances_sum":2294.089795173123}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9208984375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9208984375,"f1":0.9560496794871798,"seconds":6.245449185371399e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.8828125,"distances_sum":2319.320808681461}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.971171016483517,"seconds":3.591179847717285e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.90625,"distances_sum":2439.6888741709795}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9560382326007333,"seconds":5.651265382766724e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.8671875,"distances_sum":2330.9909149608607}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9482421875,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.971171016483517,"seconds":3.591179847717285e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.90625,"distances_sum":2439.6888741709795}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9482421875,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.971171016483517,"seconds":3.591179847717285e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.90625,"distances_sum":2439.6888741709795}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6845703125, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6845703125,"f1":0.7992739898989905,"seconds":5.155801773071289e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.2421875,"distances_sum":1473.8736787737716}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.681640625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.681640625,"f1":0.8021624209124216,"seconds":4.887580871582031e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.3203125,"distances_sum":1456.913959951307}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2021484375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2021484375,"f1":null,"seconds":3.2838433980941772e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":6.984375,"distances_sum":451.92616755772934}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6865234375, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6865234375,"f1":0.8011743464868474,"seconds":4.602596163749695e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.21875,"distances_sum":1505.2882142870235}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6865234375,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.6865234375,"f1":0.8011743464868474,"seconds":4.602596163749695e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.21875,"distances_sum":1505.2882142870235}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9390510531135537,"seconds":5.593523383140564e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.9140625,"distances_sum":2293.9849621887297}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8330078125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8330078125,"f1":0.9022321428571437,"seconds":6.077811121940613e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.796875,"distances_sum":2087.676803185098}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6923828125, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.6923828125,"f1":0.8084207459207468,"seconds":5.0943344831466675e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.3515625,"distances_sum":1468.3763119223563}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7451171875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7451171875,"f1":0.8440106768231778,"seconds":5.574896931648254e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.6875,"distances_sum":1735.7726444738357}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8369140625, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8369140625,"f1":0.9056490384615393,"seconds":5.705282092094421e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.875,"distances_sum":2070.3965003655508}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.70703125, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.70703125,"f1":0.8177811771561778,"seconds":5.206093192100525e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.203125,"distances_sum":1550.2775870436126}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84375, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.84375,"f1":0.9078671328671336,"seconds":5.465000867843628e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.8984375,"distances_sum":2102.164058321483}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7646484375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7646484375,"f1":0.8574014527139535,"seconds":5.347654223442078e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.8046875,"distances_sum":1807.2563796604015}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.892578125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.892578125,"f1":0.9390510531135537,"seconds":5.593523383140564e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.9140625,"distances_sum":2293.9849621887297}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9454930486180488,"seconds":6.139278411865234e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.9296875,"distances_sum":2373.57223729172}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9688816391941395,"seconds":6.241723895072937e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.984375,"distances_sum":2527.5955810961873}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9656307234432238,"seconds":6.0461461544036865e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.96875,"distances_sum":2505.9287005153346}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9688816391941395,"seconds":6.241723895072937e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.984375,"distances_sum":2527.5955810961873}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9443359375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9688816391941395,"seconds":6.241723895072937e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.984375,"distances_sum":2527.5955810961873}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.25,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.25,"f1":null,"seconds":2.9373914003372192e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":5.640625,"distances_sum":596.0378076339967}}, beam: 2, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.25,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.25,"f1":null,"seconds":2.9373914003372192e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":5.640625,"distances_sum":596.0378076339967}}, n: 9
mean(cfft.distances) = 0.3360098222381032
mean(cdnet.distances) = 0.3787943474047703
mean(crand.distances) = 1.0005502391652297
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8911111111111111
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8066666666666666
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8844444444444445
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8688888888888888
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.9044444444444445
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.9466666666666667
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9155555555555556
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9466666666666667
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.8911111111111111
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8844444444444445
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8955555555555555
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8888888888888888
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.9422222222222222
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9511111111111111
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8911111111111111
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.8822222222222221
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9266666666666666
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9177777777777778
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8866666666666667
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.9111111111111111
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8799999999999999
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.86
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9355555555555556
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9155555555555556
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8866666666666667
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9044444444444445
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9088888888888889
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.84
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.9044444444444445
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8866666666666667
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9044444444444445
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.8644444444444445
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.8977777777777778
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 18, 1]]
** centroid: 8, normalized-entropy: 0.2974722489192896, [(2, 18), (3, 1)]
*** center 9: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 2, 3, 1, 2, 3, 2, 1, 2, 3, 3, 3]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 18, 1]]
** centroid: 8, normalized-entropy: 0.2974722489192896, [(2, 18), (3, 1)]
*** center 9: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 2, 3, 1, 2, 3, 2, 1, 2, 3, 3, 3]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 18, 1]]
** centroid: 8, normalized-entropy: 0.2974722489192896, [(2, 18), (3, 1)]
*** center 9: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 2, 3, 1, 2, 3, 2, 1, 2, 3, 3, 3]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 18, 1]]
** centroid: 8, normalized-entropy: 0.2974722489192896, [(2, 18), (3, 1)]
*** center 9: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 2, 3, 1, 2, 3, 2, 1, 2, 3, 3, 3]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 18, 1]]
** centroid: 8, normalized-entropy: 0.2974722489192896, [(2, 18), (3, 1)]
*** center 9: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 2, 3, 1, 2, 3, 2, 1, 2, 3, 3, 3]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 18, 1]]
** centroid: 8, normalized-entropy: 0.2974722489192896, [(2, 18), (3, 1)]
*** center 9: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 2, 3, 1, 2, 3, 2, 1, 2, 3, 3, 3]
acc = 0.9266666666666666
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 18, 1]]
** centroid: 8, normalized-entropy: 0.2974722489192896, [(2, 18), (3, 1)]
*** center 9: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 2, 3, 1, 2, 3, 2, 1, 2, 3, 3, 3]
acc = 0.96
*** finished computation of 12 references, err: [Inf, 0.5147623486320178] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 26]]
*** center 2: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 24, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 8, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
*** center 9: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 6]]
** centroid: 10, normalized-entropy: 0.9182958340544894, [(2, 3), (3, 6)]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 16, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 8]]
** centroid: 12, normalized-entropy: 0.5032583347756457, [(2, 1), (3, 8)]
finished with 15 centroids; started with 12
acc = 0.98
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.19945867985064672] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19945867985064672, 0.1603992964258535] ***
*** starting iteration: 2; err: [Inf, 0.19945867985064672, 0.1603992964258535] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19945867985064672, 0.1603992964258535, 0.15368276923704702] ***
*** starting iteration: 3; err: [Inf, 0.19945867985064672, 0.1603992964258535, 0.15368276923704702] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19945867985064672, 0.1603992964258535, 0.15368276923704702, 0.1519333821121469] ***
*** starting iteration: 4; err: [Inf, 0.19945867985064672, 0.1603992964258535, 0.15368276923704702, 0.1519333821121469] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19945867985064672, 0.1603992964258535, 0.15368276923704702, 0.1519333821121469, 0.15087753899644377] ***
*** starting iteration: 5; err: [Inf, 0.19945867985064672, 0.1603992964258535, 0.15368276923704702, 0.1519333821121469, 0.15087753899644377] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19945867985064672, 0.1603992964258535, 0.15368276923704702, 0.1519333821121469, 0.15087753899644377, 0.1503752387994369] ***
*** finished computation of 7 references, err: [Inf, 0.19945867985064672, 0.1603992964258535, 0.15368276923704702, 0.1519333821121469, 0.15087753899644377, 0.1503752387994369] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [1, 116, 3]]
** centroid: 1, normalized-entropy: 0.16977000753515514, [(2, 116), (3, 3)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [1, 88, 6]]
** centroid: 2, normalized-entropy: 0.3424637724817958, [(2, 88), (3, 6)]
*** center 3: selecting labels [1] (freq >= 2) [from [69, 1, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [101, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [42, 16, 0]]
** centroid: 6, normalized-entropy: 0.8497511372532974, [(1, 42), (2, 16)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [119, 7, 0]]
** centroid: 7, normalized-entropy: 0.3095434291503252, [(1, 119), (2, 7)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4415000249901186] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4415000249901186, 0.30072905298607283] ***
*** starting iteration: 2; err: [Inf, 0.4415000249901186, 0.30072905298607283] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4415000249901186, 0.30072905298607283, 0.29954145973788454] ***
*** starting iteration: 3; err: [Inf, 0.4415000249901186, 0.30072905298607283, 0.29954145973788454] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4415000249901186, 0.30072905298607283, 0.29954145973788454, 0.29923283717489624] ***
*** finished computation of 3 references, err: [Inf, 0.4415000249901186, 0.30072905298607283, 0.29954145973788454, 0.29923283717489624] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [82, 158, 17]]
** centroid: 1, normalized-entropy: 0.7675297724946578, [(1, 82), (2, 158), (3, 17)]
*** center 2: selecting labels [1] (freq >= 2) [from [212, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [132, 66, 0]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(1, 132), (2, 66)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.42887532473101964] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42887532473101964, 0.30335621710872274] ***
*** starting iteration: 2; err: [Inf, 0.42887532473101964, 0.30335621710872274] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42887532473101964, 0.30335621710872274, 0.2995405480058967] ***
*** starting iteration: 3; err: [Inf, 0.42887532473101964, 0.30335621710872274, 0.2995405480058967] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42887532473101964, 0.30335621710872274, 0.2995405480058967, 0.29795166624450253] ***
*** starting iteration: 4; err: [Inf, 0.42887532473101964, 0.30335621710872274, 0.2995405480058967, 0.29795166624450253] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42887532473101964, 0.30335621710872274, 0.2995405480058967, 0.29795166624450253, 0.2966378722507423] ***
*** starting iteration: 5; err: [Inf, 0.42887532473101964, 0.30335621710872274, 0.2995405480058967, 0.29795166624450253, 0.2966378722507423] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42887532473101964, 0.30335621710872274, 0.2995405480058967, 0.29795166624450253, 0.2966378722507423, 0.2962513806164332] ***
*** finished computation of 3 references, err: [Inf, 0.42887532473101964, 0.30335621710872274, 0.2995405480058967, 0.29795166624450253, 0.2966378722507423, 0.2962513806164332] ***
*** center 1: selecting labels [1] (freq >= 2) [from [259, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [4, 176, 16]]
** centroid: 2, normalized-entropy: 0.3464421260125997, [(1, 4), (2, 176), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [150, 62, 0]]
** centroid: 3, normalized-entropy: 0.8718686865520275, [(1, 150), (2, 62)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24760805504505468] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24760805504505468, 0.16084994636392264] ***
*** starting iteration: 2; err: [Inf, 0.24760805504505468, 0.16084994636392264] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24760805504505468, 0.16084994636392264, 0.15753522284525814] ***
*** starting iteration: 3; err: [Inf, 0.24760805504505468, 0.16084994636392264, 0.15753522284525814] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24760805504505468, 0.16084994636392264, 0.15753522284525814, 0.15582499550055082] ***
*** starting iteration: 4; err: [Inf, 0.24760805504505468, 0.16084994636392264, 0.15753522284525814, 0.15582499550055082] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24760805504505468, 0.16084994636392264, 0.15753522284525814, 0.15582499550055082, 0.15452531937403657] ***
*** starting iteration: 5; err: [Inf, 0.24760805504505468, 0.16084994636392264, 0.15753522284525814, 0.15582499550055082, 0.15452531937403657] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24760805504505468, 0.16084994636392264, 0.15753522284525814, 0.15582499550055082, 0.15452531937403657, 0.15337172633656923] ***
*** starting iteration: 6; err: [Inf, 0.24760805504505468, 0.16084994636392264, 0.15753522284525814, 0.15582499550055082, 0.15452531937403657, 0.15337172633656923] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24760805504505468, 0.16084994636392264, 0.15753522284525814, 0.15582499550055082, 0.15452531937403657, 0.15337172633656923, 0.1522714374866197] ***
*** starting iteration: 7; err: [Inf, 0.24760805504505468, 0.16084994636392264, 0.15753522284525814, 0.15582499550055082, 0.15452531937403657, 0.15337172633656923, 0.1522714374866197] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24760805504505468, 0.16084994636392264, 0.15753522284525814, 0.15582499550055082, 0.15452531937403657, 0.15337172633656923, 0.1522714374866197, 0.15091364646841515] ***
*** starting iteration: 8; err: [Inf, 0.24760805504505468, 0.16084994636392264, 0.15753522284525814, 0.15582499550055082, 0.15452531937403657, 0.15337172633656923, 0.1522714374866197, 0.15091364646841515] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24760805504505468, 0.16084994636392264, 0.15753522284525814, 0.15582499550055082, 0.15452531937403657, 0.15337172633656923, 0.1522714374866197, 0.15091364646841515, 0.14979582799897379] ***
*** starting iteration: 9; err: [Inf, 0.24760805504505468, 0.16084994636392264, 0.15753522284525814, 0.15582499550055082, 0.15452531937403657, 0.15337172633656923, 0.1522714374866197, 0.15091364646841515, 0.14979582799897379] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24760805504505468, 0.16084994636392264, 0.15753522284525814, 0.15582499550055082, 0.15452531937403657, 0.15337172633656923, 0.1522714374866197, 0.15091364646841515, 0.14979582799897379, 0.1492869597377962] ***
*** finished computation of 7 references, err: [Inf, 0.24760805504505468, 0.16084994636392264, 0.15753522284525814, 0.15582499550055082, 0.15452531937403657, 0.15337172633656923, 0.1522714374866197, 0.15091364646841515, 0.14979582799897379, 0.1492869597377962] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [3, 73, 0]]
** centroid: 1, normalized-entropy: 0.23987382528036535, [(1, 3), (2, 73)]
*** center 2: selecting labels [1] (freq >= 2) [from [115, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [71, 2, 0]]
** centroid: 3, normalized-entropy: 0.18116640155354563, [(1, 71), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [31, 79, 0]]
** centroid: 4, normalized-entropy: 0.8579163978157118, [(1, 31), (2, 79)]
*** center 5: selecting labels [1] (freq >= 2) [from [119, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 64, 17]]
** centroid: 6, normalized-entropy: 0.7412466905234424, [(2, 64), (3, 17)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [87, 6, 0]]
** centroid: 7, normalized-entropy: 0.3451173149449528, [(1, 87), (2, 6)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19775458979608862] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19775458979608862, 0.15781282717215436] ***
*** starting iteration: 2; err: [Inf, 0.19775458979608862, 0.15781282717215436] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19775458979608862, 0.15781282717215436, 0.1530607913629846] ***
*** starting iteration: 3; err: [Inf, 0.19775458979608862, 0.15781282717215436, 0.1530607913629846] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19775458979608862, 0.15781282717215436, 0.1530607913629846, 0.1505385769288177] ***
*** starting iteration: 4; err: [Inf, 0.19775458979608862, 0.15781282717215436, 0.1530607913629846, 0.1505385769288177] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19775458979608862, 0.15781282717215436, 0.1530607913629846, 0.1505385769288177, 0.14975440091728562] ***
*** finished computation of 7 references, err: [Inf, 0.19775458979608862, 0.15781282717215436, 0.1530607913629846, 0.1505385769288177, 0.14975440091728562] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [51, 41, 0]]
** centroid: 1, normalized-entropy: 0.9914606013843205, [(1, 51), (2, 41)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [90, 38, 0]]
** centroid: 2, normalized-entropy: 0.877437311089633, [(1, 90), (2, 38)]
*** center 3: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 67, 16]]
** centroid: 4, normalized-entropy: 0.7072324944713736, [(2, 67), (3, 16)]
*** center 5: selecting labels [1] (freq >= 2) [from [134, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [48, 10, 0]]
** centroid: 6, normalized-entropy: 0.6631968402398286, [(1, 48), (2, 10)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 82, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.35661361485372883] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35661361485372883, 0.24369651963934302] ***
*** starting iteration: 2; err: [Inf, 0.35661361485372883, 0.24369651963934302] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35661361485372883, 0.24369651963934302, 0.2324958511662471] ***
*** starting iteration: 3; err: [Inf, 0.35661361485372883, 0.24369651963934302, 0.2324958511662471] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35661361485372883, 0.24369651963934302, 0.2324958511662471, 0.23120698081357433] ***
*** finished computation of 3 references, err: [Inf, 0.35661361485372883, 0.24369651963934302, 0.2324958511662471, 0.23120698081357433] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [83, 150, 9]]
** centroid: 1, normalized-entropy: 0.7153609349191384, [(1, 83), (2, 150), (3, 9)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [137, 78, 0]]
** centroid: 2, normalized-entropy: 0.9449753219762159, [(1, 137), (2, 78)]
*** center 3: selecting labels [1] (freq >= 2) [from [209, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3749536036571692] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3749536036571692, 0.23677448794871256] ***
*** starting iteration: 2; err: [Inf, 0.3749536036571692, 0.23677448794871256] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3749536036571692, 0.23677448794871256, 0.23599659892935668] ***
*** finished computation of 3 references, err: [Inf, 0.3749536036571692, 0.23677448794871256, 0.23599659892935668] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [183, 34, 0]]
** centroid: 1, normalized-entropy: 0.6263124904698649, [(1, 183), (2, 34)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 183, 17]]
** centroid: 2, normalized-entropy: 0.4195564962385472, [(2, 183), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [243, 7, 0]]
** centroid: 3, normalized-entropy: 0.18426059333965505, [(1, 243), (2, 7)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.29194235819708864] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29194235819708864, 0.24746524061130798] ***
*** starting iteration: 2; err: [Inf, 0.29194235819708864, 0.24746524061130798] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29194235819708864, 0.24746524061130798, 0.23468879873604642] ***
*** starting iteration: 3; err: [Inf, 0.29194235819708864, 0.24746524061130798, 0.23468879873604642] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29194235819708864, 0.24746524061130798, 0.23468879873604642, 0.2319177527090945] ***
*** finished computation of 3 references, err: [Inf, 0.29194235819708864, 0.24746524061130798, 0.23468879873604642, 0.2319177527090945] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [122, 103, 1]]
** centroid: 1, normalized-entropy: 0.9948500379612878, [(1, 122), (2, 103)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [77, 135, 15]]
** centroid: 2, normalized-entropy: 0.7785464103014442, [(1, 77), (2, 135), (3, 15)]
*** center 3: selecting labels [1] (freq >= 2) [from [214, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.35786026789927045] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35786026789927045, 0.258696555369219] ***
*** starting iteration: 2; err: [Inf, 0.35786026789927045, 0.258696555369219] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35786026789927045, 0.258696555369219, 0.23408160343704684] ***
*** starting iteration: 3; err: [Inf, 0.35786026789927045, 0.258696555369219, 0.23408160343704684] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35786026789927045, 0.258696555369219, 0.23408160343704684, 0.23161066742334235] ***
*** starting iteration: 4; err: [Inf, 0.35786026789927045, 0.258696555369219, 0.23408160343704684, 0.23161066742334235] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35786026789927045, 0.258696555369219, 0.23408160343704684, 0.23161066742334235, 0.23141222192931013] ***
*** finished computation of 3 references, err: [Inf, 0.35786026789927045, 0.258696555369219, 0.23408160343704684, 0.23161066742334235, 0.23141222192931013] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [77, 143, 9]]
** centroid: 1, normalized-entropy: 0.7170122047368194, [(1, 77), (2, 143), (3, 9)]
*** center 2: selecting labels [1] (freq >= 2) [from [221, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [131, 85, 0]]
** centroid: 3, normalized-entropy: 0.9670326745101786, [(1, 131), (2, 85)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.35915233433034377] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35915233433034377, 0.23491825042585696] ***
*** starting iteration: 2; err: [Inf, 0.35915233433034377, 0.23491825042585696] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35915233433034377, 0.23491825042585696, 0.234139002329702] ***
*** finished computation of 3 references, err: [Inf, 0.35915233433034377, 0.23491825042585696, 0.234139002329702] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [17, 173, 17]]
** centroid: 1, normalized-entropy: 0.5101916838277939, [(1, 17), (2, 173), (3, 17)]
*** center 2: selecting labels [1] (freq >= 2) [from [264, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [145, 51, 0]]
** centroid: 3, normalized-entropy: 0.8270541783360665, [(1, 145), (2, 51)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.33977193114832266] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33977193114832266, 0.28378175224164975] ***
*** starting iteration: 2; err: [Inf, 0.33977193114832266, 0.28378175224164975] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33977193114832266, 0.28378175224164975, 0.27657935066034145] ***
*** starting iteration: 3; err: [Inf, 0.33977193114832266, 0.28378175224164975, 0.27657935066034145] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33977193114832266, 0.28378175224164975, 0.27657935066034145, 0.25344353814705695] ***
*** starting iteration: 4; err: [Inf, 0.33977193114832266, 0.28378175224164975, 0.27657935066034145, 0.25344353814705695] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33977193114832266, 0.28378175224164975, 0.27657935066034145, 0.25344353814705695, 0.2391542399970946] ***
*** starting iteration: 5; err: [Inf, 0.33977193114832266, 0.28378175224164975, 0.27657935066034145, 0.25344353814705695, 0.2391542399970946] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33977193114832266, 0.28378175224164975, 0.27657935066034145, 0.25344353814705695, 0.2391542399970946, 0.23653820611716625] ***
*** starting iteration: 6; err: [Inf, 0.33977193114832266, 0.28378175224164975, 0.27657935066034145, 0.25344353814705695, 0.2391542399970946, 0.23653820611716625] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33977193114832266, 0.28378175224164975, 0.27657935066034145, 0.25344353814705695, 0.2391542399970946, 0.23653820611716625, 0.23593013069621738] ***
*** finished computation of 3 references, err: [Inf, 0.33977193114832266, 0.28378175224164975, 0.27657935066034145, 0.25344353814705695, 0.2391542399970946, 0.23653820611716625, 0.23593013069621738] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [153, 55, 0]]
** centroid: 1, normalized-entropy: 0.8333477749880537, [(1, 153), (2, 55)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [3, 182, 16]]
** centroid: 2, normalized-entropy: 0.3223325248938964, [(1, 3), (2, 182), (3, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [257, 1, 0]]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.44203727362766954] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44203727362766954, 0.33183707379912203] ***
*** starting iteration: 2; err: [Inf, 0.44203727362766954, 0.33183707379912203] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44203727362766954, 0.33183707379912203, 0.33071992154772933] ***
*** starting iteration: 3; err: [Inf, 0.44203727362766954, 0.33183707379912203, 0.33071992154772933] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44203727362766954, 0.33183707379912203, 0.33071992154772933, 0.32999824280445056] ***
*** finished computation of 3 references, err: [Inf, 0.44203727362766954, 0.33183707379912203, 0.33071992154772933, 0.32999824280445056] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [143, 70, 0]]
** centroid: 1, normalized-entropy: 0.9135292805758038, [(1, 143), (2, 70)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [210, 12, 0]]
** centroid: 2, normalized-entropy: 0.30337483608641397, [(1, 210), (2, 12)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [76, 146, 9]]
** centroid: 3, normalized-entropy: 0.7119614191025793, [(1, 76), (2, 146), (3, 9)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4763180722065013] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4763180722065013, 0.32026230679431195] ***
*** starting iteration: 2; err: [Inf, 0.4763180722065013, 0.32026230679431195] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4763180722065013, 0.32026230679431195, 0.30215265384401896] ***
*** starting iteration: 3; err: [Inf, 0.4763180722065013, 0.32026230679431195, 0.30215265384401896] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4763180722065013, 0.32026230679431195, 0.30215265384401896, 0.2991205802448429] ***
*** finished computation of 3 references, err: [Inf, 0.4763180722065013, 0.32026230679431195, 0.30215265384401896, 0.2991205802448429] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [98, 167, 17]]
** centroid: 1, normalized-entropy: 0.7708673586019104, [(1, 98), (2, 167), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [137, 57, 0]]
** centroid: 2, normalized-entropy: 0.8735977588212388, [(1, 137), (2, 57)]
*** center 3: selecting labels [1] (freq >= 1) [from [191, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.38663082887771827] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38663082887771827, 0.29690655432585655] ***
*** starting iteration: 2; err: [Inf, 0.38663082887771827, 0.29690655432585655] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38663082887771827, 0.29690655432585655, 0.29269242857902616] ***
*** starting iteration: 3; err: [Inf, 0.38663082887771827, 0.29690655432585655, 0.29269242857902616] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38663082887771827, 0.29690655432585655, 0.29269242857902616, 0.292080645813192] ***
*** finished computation of 3 references, err: [Inf, 0.38663082887771827, 0.29690655432585655, 0.29269242857902616, 0.292080645813192] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [118, 91, 0]]
** centroid: 1, normalized-entropy: 0.9879275910149561, [(1, 118), (2, 91)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [76, 147, 16]]
** centroid: 2, normalized-entropy: 0.7685010597601281, [(1, 76), (2, 147), (3, 16)]
*** center 3: selecting labels [1] (freq >= 1) [from [219, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.30479486430114183] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30479486430114183, 0.19626444315309874] ***
*** finished computation of 7 references, err: [Inf, 0.30479486430114183, 0.19626444315309874] ***
*** center 1: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [126, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [52, 5, 0]]
** centroid: 3, normalized-entropy: 0.4288109647301171, [(1, 52), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [50, 29, 0]]
** centroid: 4, normalized-entropy: 0.9484103893488014, [(1, 50), (2, 29)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [1, 99, 8]]
** centroid: 5, normalized-entropy: 0.3834641323087979, [(2, 99), (3, 8)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [13, 95, 1]]
** centroid: 6, normalized-entropy: 0.5304245472812997, [(1, 13), (2, 95)]
*** center 7: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.32593903395262125] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.32593903395262125, 0.22188650486317799] ***
*** finished computation of 7 references, err: [Inf, 0.32593903395262125, 0.22188650486317799] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [60, 93, 0]]
** centroid: 1, normalized-entropy: 0.9661773513883509, [(1, 60), (2, 93)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 89, 17]]
** centroid: 2, normalized-entropy: 0.6352115521361693, [(2, 89), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [66, 19, 0]]
** centroid: 3, normalized-entropy: 0.7665599404543365, [(1, 66), (2, 19)]
*** center 4: selecting labels [1] (freq >= 2) [from [140, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [67, 23, 0]]
** centroid: 7, normalized-entropy: 0.8199653102187632, [(1, 67), (2, 23)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2321508656359924] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2321508656359924, 0.206593781230745] ***
*** finished computation of 7 references, err: [Inf, 0.2321508656359924, 0.206593781230745] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 135, 2]]
** centroid: 1, normalized-entropy: 0.10992912236299265, [(2, 135), (3, 2)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [72, 7, 0]]
** centroid: 2, normalized-entropy: 0.43180499427520785, [(1, 72), (2, 7)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [127, 7, 0]]
** centroid: 3, normalized-entropy: 0.2958321779617403, [(1, 127), (2, 7)]
*** center 4: selecting labels [1] (freq >= 2) [from [99, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 74, 14]]
** centroid: 6, normalized-entropy: 0.6321302781219708, [(2, 74), (3, 14)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [30, 15, 0]]
** centroid: 7, normalized-entropy: 0.9182958340544894, [(1, 30), (2, 15)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2561185458428912] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2561185458428912, 0.19436499973138174] ***
*** starting iteration: 2; err: [Inf, 0.2561185458428912, 0.19436499973138174] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2561185458428912, 0.19436499973138174, 0.1729956510352312] ***
*** starting iteration: 3; err: [Inf, 0.2561185458428912, 0.19436499973138174, 0.1729956510352312] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2561185458428912, 0.19436499973138174, 0.1729956510352312, 0.1656158297719831] ***
*** finished computation of 7 references, err: [Inf, 0.2561185458428912, 0.19436499973138174, 0.1729956510352312, 0.1656158297719831] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [89, 1, 0]]
** centroid: 1, normalized-entropy: 0.08807225904068142, [(1, 89), (2, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [111, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 140, 9]]
** centroid: 4, normalized-entropy: 0.32904135680259033, [(2, 140), (3, 9)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [28, 23, 0]]
** centroid: 5, normalized-entropy: 0.9930554830121975, [(1, 28), (2, 23)]
*** center 6: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [124, 64, 0]]
** centroid: 7, normalized-entropy: 0.9252253278054431, [(1, 124), (2, 64)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.21629258644846694] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21629258644846694, 0.16817815930651] ***
*** starting iteration: 2; err: [Inf, 0.21629258644846694, 0.16817815930651] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21629258644846694, 0.16817815930651, 0.1610948780587856] ***
*** starting iteration: 3; err: [Inf, 0.21629258644846694, 0.16817815930651, 0.1610948780587856] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21629258644846694, 0.16817815930651, 0.1610948780587856, 0.15767624294678534] ***
*** finished computation of 7 references, err: [Inf, 0.21629258644846694, 0.16817815930651, 0.1610948780587856, 0.15767624294678534] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [32, 74, 0]]
** centroid: 1, normalized-entropy: 0.8835850861052531, [(1, 32), (2, 74)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [25, 58, 0]]
** centroid: 2, normalized-entropy: 0.8827586787955116, [(1, 25), (2, 58)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [85, 4, 0]]
** centroid: 3, normalized-entropy: 0.2645173683629748, [(1, 85), (2, 4)]
*** center 4: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 88, 17]]
** centroid: 6, normalized-entropy: 0.6388469391771899, [(2, 88), (3, 17)]
*** center 7: selecting labels [1] (freq >= 1) [from [108, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.196562905936548] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.196562905936548, 0.15692455884532772] ***
*** starting iteration: 2; err: [Inf, 0.196562905936548, 0.15692455884532772] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.196562905936548, 0.15692455884532772, 0.1541370740258086] ***
*** starting iteration: 3; err: [Inf, 0.196562905936548, 0.15692455884532772, 0.1541370740258086] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.196562905936548, 0.15692455884532772, 0.1541370740258086, 0.15319164031194984] ***
*** finished computation of 7 references, err: [Inf, 0.196562905936548, 0.15692455884532772, 0.1541370740258086, 0.15319164031194984] ***
*** center 1: selecting labels [1] (freq >= 1) [from [142, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [61, 48, 0]]
** centroid: 2, normalized-entropy: 0.9897148052727835, [(1, 61), (2, 48)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 70, 16]]
** centroid: 3, normalized-entropy: 0.6931274153282881, [(2, 70), (3, 16)]
*** center 4: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [94, 2, 0]]
** centroid: 5, normalized-entropy: 0.14609425012013613, [(1, 94), (2, 2)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [24, 37, 0]]
** centroid: 6, normalized-entropy: 0.9669852958320848, [(1, 24), (2, 37)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [4, 81, 0]]
** centroid: 7, normalized-entropy: 0.2737691686829417, [(1, 4), (2, 81)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3940882867386749] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3940882867386749, 0.30702700577228814] ***
*** finished computation of 3 references, err: [Inf, 0.3940882867386749, 0.30702700577228814] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [11, 211, 9]]
** centroid: 1, normalized-entropy: 0.32234508908609627, [(1, 11), (2, 211), (3, 9)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [200, 16, 0]]
** centroid: 2, normalized-entropy: 0.38094658570539014, [(1, 200), (2, 16)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [218, 1, 0]]
** centroid: 3, normalized-entropy: 0.042073896124598435, [(1, 218), (2, 1)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.49864816308479526] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.49864816308479526, 0.3355706401024086] ***
*** finished computation of 3 references, err: [Inf, 0.49864816308479526, 0.3355706401024086] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [130, 190, 17]]
** centroid: 1, normalized-entropy: 0.7657063870462669, [(1, 130), (2, 190), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [154, 34, 0]]
** centroid: 2, normalized-entropy: 0.6819353204567525, [(1, 154), (2, 34)]
*** center 3: selecting labels [1] (freq >= 1) [from [142, 0, 0]]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4461831141715643] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4461831141715643, 0.3301425613714256] ***
*** finished computation of 3 references, err: [Inf, 0.4461831141715643, 0.3301425613714256] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [141, 76, 0]]
** centroid: 1, normalized-entropy: 0.9342736669608739, [(1, 141), (2, 76)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [74, 141, 16]]
** centroid: 2, normalized-entropy: 0.7745352072447109, [(1, 74), (2, 141), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [198, 21, 0]]
** centroid: 3, normalized-entropy: 0.4558314584408233, [(1, 198), (2, 21)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2302530877887867] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2302530877887867, 0.16185420482208276] ***
*** starting iteration: 2; err: [Inf, 0.2302530877887867, 0.16185420482208276] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2302530877887867, 0.16185420482208276, 0.1533101055436899] ***
*** starting iteration: 3; err: [Inf, 0.2302530877887867, 0.16185420482208276, 0.1533101055436899] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2302530877887867, 0.16185420482208276, 0.1533101055436899, 0.14993970811243978] ***
*** finished computation of 7 references, err: [Inf, 0.2302530877887867, 0.16185420482208276, 0.1533101055436899, 0.14993970811243978] ***
*** center 1: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 131, 9]]
** centroid: 2, normalized-entropy: 0.34422774398506073, [(2, 131), (3, 9)]
*** center 3: selecting labels [1] (freq >= 1) [from [103, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [54, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [71, 32, 0]]
** centroid: 5, normalized-entropy: 0.8939563962625153, [(1, 71), (2, 32)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [38, 65, 0]]
** centroid: 6, normalized-entropy: 0.9498485528365604, [(1, 38), (2, 65)]
*** center 7: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2610987737213542] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2610987737213542, 0.16269542062529427] ***
*** starting iteration: 2; err: [Inf, 0.2610987737213542, 0.16269542062529427] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2610987737213542, 0.16269542062529427, 0.15685653985049325] ***
*** starting iteration: 3; err: [Inf, 0.2610987737213542, 0.16269542062529427, 0.15685653985049325] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2610987737213542, 0.16269542062529427, 0.15685653985049325, 0.15543656810040193] ***
*** finished computation of 7 references, err: [Inf, 0.2610987737213542, 0.16269542062529427, 0.15685653985049325, 0.15543656810040193] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [65, 23, 0]]
** centroid: 1, normalized-entropy: 0.828797154590015, [(1, 65), (2, 23)]
*** center 2: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 142, 17]]
** centroid: 3, normalized-entropy: 0.49054987810875406, [(2, 142), (3, 17)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [111, 2, 0]]
** centroid: 4, normalized-entropy: 0.12831912909782706, [(1, 111), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [62, 56, 0]]
** centroid: 5, normalized-entropy: 0.9981341775041118, [(1, 62), (2, 56)]
*** center 6: selecting labels [1] (freq >= 1) [from [36, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [88, 1, 0]]
** centroid: 7, normalized-entropy: 0.08887969568457589, [(1, 88), (2, 1)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23020515518648357] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23020515518648357, 0.19217576215363413] ***
*** starting iteration: 2; err: [Inf, 0.23020515518648357, 0.19217576215363413] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23020515518648357, 0.19217576215363413, 0.1670540155426807] ***
*** starting iteration: 3; err: [Inf, 0.23020515518648357, 0.19217576215363413, 0.1670540155426807] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23020515518648357, 0.19217576215363413, 0.1670540155426807, 0.15532925162978214] ***
*** finished computation of 7 references, err: [Inf, 0.23020515518648357, 0.19217576215363413, 0.1670540155426807, 0.15532925162978214] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [5, 69, 0]]
** centroid: 1, normalized-entropy: 0.35678001438394347, [(1, 5), (2, 69)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [111, 6, 0]]
** centroid: 2, normalized-entropy: 0.29181825659888555, [(1, 111), (2, 6)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [60, 10, 0]]
** centroid: 3, normalized-entropy: 0.5916727785823274, [(1, 60), (2, 10)]
*** center 4: selecting labels [1] (freq >= 1) [from [136, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [101, 14, 0]]
** centroid: 5, normalized-entropy: 0.5343393668857862, [(1, 101), (2, 14)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 77, 3]]
** centroid: 6, normalized-entropy: 0.2307099556914763, [(2, 77), (3, 3)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 62, 13]]
** centroid: 7, normalized-entropy: 0.6652735227649414, [(2, 62), (3, 13)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2025522717474694] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2025522717474694, 0.16631177668501665] ***
*** finished computation of 7 references, err: [Inf, 0.2025522717474694, 0.16631177668501665] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [88, 1, 0]]
** centroid: 1, normalized-entropy: 0.08887969568457589, [(1, 88), (2, 1)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [4, 85, 0]]
** centroid: 2, normalized-entropy: 0.2645173683629748, [(1, 4), (2, 85)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [23, 41, 0]]
** centroid: 3, normalized-entropy: 0.9421631690835511, [(1, 23), (2, 41)]
*** center 4: selecting labels [1] (freq >= 1) [from [127, 0, 0]]
*** center 5: selecting labels [1, 2, 3] (freq >= 1) [from [12, 101, 9]]
** centroid: 5, normalized-entropy: 0.525025197017067, [(1, 12), (2, 101), (3, 9)]
*** center 6: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.18257915520149728] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18257915520149728, 0.15602785441465955] ***
*** finished computation of 7 references, err: [Inf, 0.18257915520149728, 0.15602785441465955] ***
*** center 1: selecting labels [1] (freq >= 1) [from [49, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [66, 43, 0]]
** centroid: 2, normalized-entropy: 0.967639404319604, [(1, 66), (2, 43)]
*** center 3: selecting labels [1] (freq >= 1) [from [129, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 80, 17]]
** centroid: 4, normalized-entropy: 0.6695920597928519, [(2, 80), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [22, 81, 0]]
** centroid: 5, normalized-entropy: 0.7482932859824888, [(1, 22), (2, 81)]
*** center 6: selecting labels [1] (freq >= 1) [from [111, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [49, 20, 0]]
** centroid: 7, normalized-entropy: 0.868533960265235, [(1, 49), (2, 20)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.25553767365086516] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25553767365086516, 0.1710175104422503] ***
*** finished computation of 7 references, err: [Inf, 0.25553767365086516, 0.1710175104422503] ***
*** center 1: selecting labels [1] (freq >= 1) [from [52, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [114, 60, 0]]
** centroid: 2, normalized-entropy: 0.9293636260137188, [(1, 114), (2, 60)]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 37, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 55, 16]]
** centroid: 4, normalized-entropy: 0.7698205808588191, [(2, 55), (3, 16)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [21, 56, 0]]
** centroid: 5, normalized-entropy: 0.8453509366224364, [(1, 21), (2, 56)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [28, 30, 0]]
** centroid: 6, normalized-entropy: 0.999142103991909, [(1, 28), (2, 30)]
*** center 7: selecting labels [1] (freq >= 1) [from [198, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.39213207916023807] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39213207916023807, 0.30283034998817265] ***
*** starting iteration: 2; err: [Inf, 0.39213207916023807, 0.30283034998817265] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39213207916023807, 0.30283034998817265, 0.2990451594241321] ***
*** starting iteration: 3; err: [Inf, 0.39213207916023807, 0.30283034998817265, 0.2990451594241321] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39213207916023807, 0.30283034998817265, 0.2990451594241321, 0.2984591789778557] ***
*** finished computation of 3 references, err: [Inf, 0.39213207916023807, 0.30283034998817265, 0.2990451594241321, 0.2984591789778557] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [262, 7, 0]]
** centroid: 1, normalized-entropy: 0.1740336976599135, [(1, 262), (2, 7)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [1, 192, 9]]
** centroid: 2, normalized-entropy: 0.26377743669413856, [(2, 192), (3, 9)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [166, 29, 0]]
** centroid: 3, normalized-entropy: 0.6066226498404358, [(1, 166), (2, 29)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 11)
[0.9359808910707114, 0.9330168491845138, 0.9329838820856785, 0.9319798840756924, 0.9289948631265997, 0.9080158002313691, 0.8820467173760588, 0.881983780187373, 0.8759687831544118, 0.8680506854159549, 0.8479257700814588]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.3, 1) => 0.9359808910707114
finished with 12
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.3033714474055793] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3033714474055793, 0.21019592238646057] ***
*** starting iteration: 2; err: [Inf, 0.3033714474055793, 0.21019592238646057] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3033714474055793, 0.21019592238646057, 0.19517161890126025] ***
*** starting iteration: 3; err: [Inf, 0.3033714474055793, 0.21019592238646057, 0.19517161890126025] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3033714474055793, 0.21019592238646057, 0.19517161890126025, 0.1911920681302142] ***
*** starting iteration: 4; err: [Inf, 0.3033714474055793, 0.21019592238646057, 0.19517161890126025, 0.1911920681302142] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3033714474055793, 0.21019592238646057, 0.19517161890126025, 0.1911920681302142, 0.18958719060742282] ***
*** starting iteration: 5; err: [Inf, 0.3033714474055793, 0.21019592238646057, 0.19517161890126025, 0.1911920681302142, 0.18958719060742282] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3033714474055793, 0.21019592238646057, 0.19517161890126025, 0.1911920681302142, 0.18958719060742282, 0.18910054367926396] ***
*** finished computation of 7 references, err: [Inf, 0.3033714474055793, 0.21019592238646057, 0.19517161890126025, 0.1911920681302142, 0.18958719060742282, 0.18910054367926396] ***
*** center 1: selecting labels [1] (freq >= 2) [from [86, 1, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 89, 9]]
** centroid: 2, normalized-entropy: 0.442571064839798, [(2, 89), (3, 9)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [7, 97, 0]]
** centroid: 3, normalized-entropy: 0.3557951975011439, [(1, 7), (2, 97)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [58, 15, 0]]
** centroid: 4, normalized-entropy: 0.7327525499549903, [(1, 58), (2, 15)]
*** center 5: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [109, 26, 0]]
** centroid: 7, normalized-entropy: 0.7068635668852503, [(1, 109), (2, 26)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.28355594730630207] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28355594730630207, 0.23391131854251676] ***
*** starting iteration: 2; err: [Inf, 0.28355594730630207, 0.23391131854251676] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28355594730630207, 0.23391131854251676, 0.2228616621454192] ***
*** starting iteration: 3; err: [Inf, 0.28355594730630207, 0.23391131854251676, 0.2228616621454192] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28355594730630207, 0.23391131854251676, 0.2228616621454192, 0.2106713056491026] ***
*** starting iteration: 4; err: [Inf, 0.28355594730630207, 0.23391131854251676, 0.2228616621454192, 0.2106713056491026] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28355594730630207, 0.23391131854251676, 0.2228616621454192, 0.2106713056491026, 0.20185463980044135] ***
*** starting iteration: 5; err: [Inf, 0.28355594730630207, 0.23391131854251676, 0.2228616621454192, 0.2106713056491026, 0.20185463980044135] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28355594730630207, 0.23391131854251676, 0.2228616621454192, 0.2106713056491026, 0.20185463980044135, 0.19805648585856855] ***
*** starting iteration: 6; err: [Inf, 0.28355594730630207, 0.23391131854251676, 0.2228616621454192, 0.2106713056491026, 0.20185463980044135, 0.19805648585856855] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28355594730630207, 0.23391131854251676, 0.2228616621454192, 0.2106713056491026, 0.20185463980044135, 0.19805648585856855, 0.1962700639718744] ***
*** starting iteration: 7; err: [Inf, 0.28355594730630207, 0.23391131854251676, 0.2228616621454192, 0.2106713056491026, 0.20185463980044135, 0.19805648585856855, 0.1962700639718744] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28355594730630207, 0.23391131854251676, 0.2228616621454192, 0.2106713056491026, 0.20185463980044135, 0.19805648585856855, 0.1962700639718744, 0.19453176792509955] ***
*** starting iteration: 8; err: [Inf, 0.28355594730630207, 0.23391131854251676, 0.2228616621454192, 0.2106713056491026, 0.20185463980044135, 0.19805648585856855, 0.1962700639718744, 0.19453176792509955] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28355594730630207, 0.23391131854251676, 0.2228616621454192, 0.2106713056491026, 0.20185463980044135, 0.19805648585856855, 0.1962700639718744, 0.19453176792509955, 0.19372897379301388] ***
*** finished computation of 7 references, err: [Inf, 0.28355594730630207, 0.23391131854251676, 0.2228616621454192, 0.2106713056491026, 0.20185463980044135, 0.19805648585856855, 0.1962700639718744, 0.19453176792509955, 0.19372897379301388] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [44, 56, 0]]
** centroid: 1, normalized-entropy: 0.9895875212220558, [(1, 44), (2, 56)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [68, 19, 0]]
** centroid: 2, normalized-entropy: 0.7572182549240017, [(1, 68), (2, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [98, 9, 0]]
** centroid: 3, normalized-entropy: 0.4165054000808552, [(1, 98), (2, 9)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [62, 8, 0]]
** centroid: 4, normalized-entropy: 0.5127091420308771, [(1, 62), (2, 8)]
*** center 5: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 132, 17]]
** centroid: 7, normalized-entropy: 0.5121423992771172, [(2, 132), (3, 17)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24304588515076903] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24304588515076903, 0.20478331007767117] ***
*** starting iteration: 2; err: [Inf, 0.24304588515076903, 0.20478331007767117] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24304588515076903, 0.20478331007767117, 0.19528131426006243] ***
*** starting iteration: 3; err: [Inf, 0.24304588515076903, 0.20478331007767117, 0.19528131426006243] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24304588515076903, 0.20478331007767117, 0.19528131426006243, 0.1908258012554579] ***
*** starting iteration: 4; err: [Inf, 0.24304588515076903, 0.20478331007767117, 0.19528131426006243, 0.1908258012554579] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24304588515076903, 0.20478331007767117, 0.19528131426006243, 0.1908258012554579, 0.18951598484337195] ***
*** starting iteration: 5; err: [Inf, 0.24304588515076903, 0.20478331007767117, 0.19528131426006243, 0.1908258012554579, 0.18951598484337195] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24304588515076903, 0.20478331007767117, 0.19528131426006243, 0.1908258012554579, 0.18951598484337195, 0.18882611271544084] ***
*** finished computation of 7 references, err: [Inf, 0.24304588515076903, 0.20478331007767117, 0.19528131426006243, 0.1908258012554579, 0.18951598484337195, 0.18882611271544084] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [57, 47, 0]]
** centroid: 1, normalized-entropy: 0.993320421638792, [(1, 57), (2, 47)]
*** center 2: selecting labels [1] (freq >= 2) [from [127, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [79, 4, 0]]
** centroid: 4, normalized-entropy: 0.27866980356389914, [(1, 79), (2, 4)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 88, 16]]
** centroid: 5, normalized-entropy: 0.6193821946787638, [(2, 88), (3, 16)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [6, 60, 0]]
** centroid: 6, normalized-entropy: 0.43949698692151346, [(1, 6), (2, 60)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [42, 39, 0]]
** centroid: 7, normalized-entropy: 0.9990102708804813, [(1, 42), (2, 39)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 12)
[0.9359808910707114, 0.9330168491845138, 0.9329838820856785, 0.9319798840756924, 0.9289948631265997, 0.9230547913182644, 0.9080158002313691, 0.8820467173760588, 0.881983780187373, 0.8759687831544118, 0.8680506854159549, 0.8479257700814588]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.3, 1) => 0.9359808910707114
finished with 14
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.23770133718322436] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23770133718322436, 0.17482126750857443] ***
*** starting iteration: 2; err: [Inf, 0.23770133718322436, 0.17482126750857443] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23770133718322436, 0.17482126750857443, 0.15461112762586] ***
*** starting iteration: 3; err: [Inf, 0.23770133718322436, 0.17482126750857443, 0.15461112762586] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23770133718322436, 0.17482126750857443, 0.15461112762586, 0.1497688484853609] ***
*** finished computation of 7 references, err: [Inf, 0.23770133718322436, 0.17482126750857443, 0.15461112762586, 0.1497688484853609] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 115, 9]]
** centroid: 1, normalized-entropy: 0.37548114206764976, [(2, 115), (3, 9)]
*** center 2: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [70, 14, 0]]
** centroid: 3, normalized-entropy: 0.6500224216483541, [(1, 70), (2, 14)]
*** center 4: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [32, 54, 0]]
** centroid: 5, normalized-entropy: 0.9522656254366643, [(1, 32), (2, 54)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [98, 45, 0]]
** centroid: 6, normalized-entropy: 0.8985080216866009, [(1, 98), (2, 45)]
*** center 7: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2588334407230121] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2588334407230121, 0.16184006600795703] ***
*** starting iteration: 2; err: [Inf, 0.2588334407230121, 0.16184006600795703] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2588334407230121, 0.16184006600795703, 0.15183164199850505] ***
*** starting iteration: 3; err: [Inf, 0.2588334407230121, 0.16184006600795703, 0.15183164199850505] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2588334407230121, 0.16184006600795703, 0.15183164199850505, 0.14804991170962242] ***
*** finished computation of 7 references, err: [Inf, 0.2588334407230121, 0.16184006600795703, 0.15183164199850505, 0.14804991170962242] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [7, 67, 0]]
** centroid: 1, normalized-entropy: 0.45162282218200417, [(1, 7), (2, 67)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [65, 41, 0]]
** centroid: 2, normalized-entropy: 0.9626983787500768, [(1, 65), (2, 41)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [63, 3, 0]]
** centroid: 3, normalized-entropy: 0.2667649878030262, [(1, 63), (2, 3)]
*** center 4: selecting labels [1] (freq >= 1) [from [109, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 112, 17]]
** centroid: 5, normalized-entropy: 0.5623077238596306, [(2, 112), (3, 17)]
*** center 6: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [96, 1, 0]]
** centroid: 7, normalized-entropy: 0.0828365528136124, [(1, 96), (2, 1)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2075058193025605] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2075058193025605, 0.16080820731814488] ***
*** starting iteration: 2; err: [Inf, 0.2075058193025605, 0.16080820731814488] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2075058193025605, 0.16080820731814488, 0.15360494468827499] ***
*** starting iteration: 3; err: [Inf, 0.2075058193025605, 0.16080820731814488, 0.15360494468827499] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2075058193025605, 0.16080820731814488, 0.15360494468827499, 0.15154816558782844] ***
*** finished computation of 7 references, err: [Inf, 0.2075058193025605, 0.16080820731814488, 0.15360494468827499, 0.15154816558782844] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [107, 42, 0]]
** centroid: 1, normalized-entropy: 0.857998726491486, [(1, 107), (2, 42)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [57, 5, 0]]
** centroid: 2, normalized-entropy: 0.4044483864864384, [(1, 57), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 57, 16]]
** centroid: 3, normalized-entropy: 0.7586638628883696, [(2, 57), (3, 16)]
*** center 4: selecting labels [1] (freq >= 1) [from [136, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [94, 1, 0]]
** centroid: 5, normalized-entropy: 0.08426242877623306, [(1, 94), (2, 1)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 66, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [19, 67, 0]]
** centroid: 7, normalized-entropy: 0.7618624463753669, [(1, 19), (2, 67)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.31528104544832586] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.31528104544832586, 0.23577942343305675] ***
*** starting iteration: 2; err: [Inf, 0.31528104544832586, 0.23577942343305675] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.31528104544832586, 0.23577942343305675, 0.2230422564547274] ***
*** starting iteration: 3; err: [Inf, 0.31528104544832586, 0.23577942343305675, 0.2230422564547274] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.31528104544832586, 0.23577942343305675, 0.2230422564547274, 0.20809198182926433] ***
*** finished computation of 7 references, err: [Inf, 0.31528104544832586, 0.23577942343305675, 0.2230422564547274, 0.20809198182926433] ***
*** center 1: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [80, 22, 0]]
** centroid: 2, normalized-entropy: 0.7522121733341471, [(1, 80), (2, 22)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [5, 115, 9]]
** centroid: 3, normalized-entropy: 0.37698294682959865, [(1, 5), (2, 115), (3, 9)]
*** center 4: selecting labels [1] (freq >= 1) [from [52, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [36, 91, 0]]
** centroid: 6, normalized-entropy: 0.8601286843311847, [(1, 36), (2, 91)]
*** center 7: selecting labels [1] (freq >= 1) [from [113, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2866383270881344] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2866383270881344, 0.22333281842651015] ***
*** starting iteration: 2; err: [Inf, 0.2866383270881344, 0.22333281842651015] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2866383270881344, 0.22333281842651015, 0.20892970735623292] ***
*** starting iteration: 3; err: [Inf, 0.2866383270881344, 0.22333281842651015, 0.20892970735623292] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2866383270881344, 0.22333281842651015, 0.20892970735623292, 0.199400972954739] ***
*** finished computation of 7 references, err: [Inf, 0.2866383270881344, 0.22333281842651015, 0.20892970735623292, 0.199400972954739] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 72, 17]]
** centroid: 1, normalized-entropy: 0.7035821005719904, [(2, 72), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [94, 11, 0]]
** centroid: 2, normalized-entropy: 0.4839112332593779, [(1, 94), (2, 11)]
*** center 3: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [14, 111, 0]]
** centroid: 6, normalized-entropy: 0.5059192440727414, [(1, 14), (2, 111)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [80, 30, 0]]
** centroid: 7, normalized-entropy: 0.8453509366224364, [(1, 80), (2, 30)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.41548047895296136] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.41548047895296136, 0.2871371982353872] ***
*** starting iteration: 2; err: [Inf, 0.41548047895296136, 0.2871371982353872] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.41548047895296136, 0.2871371982353872, 0.25163393173606946] ***
*** starting iteration: 3; err: [Inf, 0.41548047895296136, 0.2871371982353872, 0.25163393173606946] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.41548047895296136, 0.2871371982353872, 0.25163393173606946, 0.21924524791636454] ***
*** finished computation of 7 references, err: [Inf, 0.41548047895296136, 0.2871371982353872, 0.25163393173606946, 0.21924524791636454] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [4, 56, 0]]
** centroid: 1, normalized-entropy: 0.3533593350214213, [(1, 4), (2, 56)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [161, 6, 0]]
** centroid: 2, normalized-entropy: 0.22330074528375127, [(1, 161), (2, 6)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [45, 31, 0]]
** centroid: 3, normalized-entropy: 0.9753817903274211, [(1, 45), (2, 31)]
*** center 4: selecting labels [1] (freq >= 1) [from [111, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 142, 16]]
** centroid: 5, normalized-entropy: 0.47299536229314826, [(2, 142), (3, 16)]
*** center 6: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [29, 3, 0]]
** centroid: 7, normalized-entropy: 0.44886448872302936, [(1, 29), (2, 3)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 14)
[0.9359808910707114, 0.9330168491845138, 0.9329838820856785, 0.9319798840756924, 0.9289948631265997, 0.9230547913182644, 0.9090467713222204, 0.9080158002313691, 0.9040507573441706, 0.8820467173760588, 0.881983780187373, 0.8759687831544118, 0.8680506854159549, 0.8479257700814588]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.3, 1) => 0.9359808910707114
finished with 14
iteration 4 finished
generating 4 configurations using top 12 configurations, starting with 14)
[0.9359808910707114, 0.9330168491845138, 0.9329838820856785, 0.9319798840756924, 0.9289948631265997, 0.9230547913182644, 0.9090467713222204, 0.9080158002313691, 0.9040507573441706, 0.8820467173760588, 0.881983780187373, 0.8759687831544118, 0.8680506854159549, 0.8479257700814588]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.3, 1) => 0.9359808910707114
finished with 16
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.22440708103252704] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22440708103252704, 0.1881642465062954] ***
*** finished computation of 7 references, err: [Inf, 0.22440708103252704, 0.1881642465062954] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [44, 88, 3]]
** centroid: 1, normalized-entropy: 0.6635055654721551, [(1, 44), (2, 88), (3, 3)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [73, 129, 6]]
** centroid: 2, normalized-entropy: 0.6972871158580729, [(1, 73), (2, 129), (3, 6)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [69, 11, 0]]
** centroid: 3, normalized-entropy: 0.5776539033535634, [(1, 69), (2, 11)]
*** center 4: selecting labels [1] (freq >= 1) [from [125, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [49, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [47, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4234389568116332] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4234389568116332, 0.19486410299810333] ***
*** finished computation of 7 references, err: [Inf, 0.4234389568116332, 0.19486410299810333] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [24, 13, 0]]
** centroid: 1, normalized-entropy: 0.9352691398683568, [(1, 24), (2, 13)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [5, 145, 17]]
** centroid: 2, normalized-entropy: 0.41896489821313765, [(1, 5), (2, 145), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [34, 18, 0]]
** centroid: 3, normalized-entropy: 0.9305861291319927, [(1, 34), (2, 18)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [132, 48, 0]]
** centroid: 4, normalized-entropy: 0.8366407419411671, [(1, 132), (2, 48)]
*** center 5: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [125, 0, 0]]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.1941161853745803] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1941161853745803, 0.1601318915331292] ***
*** finished computation of 7 references, err: [Inf, 0.1941161853745803, 0.1601318915331292] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [78, 5, 0]]
** centroid: 1, normalized-entropy: 0.32840071392894665, [(1, 78), (2, 5)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [121, 46, 0]]
** centroid: 2, normalized-entropy: 0.8491755398462169, [(1, 121), (2, 46)]
*** center 3: selecting labels [1] (freq >= 1) [from [42, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [40, 54, 0]]
** centroid: 4, normalized-entropy: 0.9839393951635759, [(1, 40), (2, 54)]
*** center 5: selecting labels [1] (freq >= 1) [from [132, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 78, 16]]
** centroid: 6, normalized-entropy: 0.6581912658132184, [(2, 78), (3, 16)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 55, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25423839815274196] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25423839815274196, 0.20443031545546655] ***
*** finished computation of 7 references, err: [Inf, 0.25423839815274196, 0.20443031545546655] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [64, 28, 0]]
** centroid: 1, normalized-entropy: 0.8865408928220899, [(1, 64), (2, 28)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 145, 9]]
** centroid: 2, normalized-entropy: 0.32122717014200314, [(2, 145), (3, 9)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [74, 25, 0]]
** centroid: 3, normalized-entropy: 0.8152560766360704, [(1, 74), (2, 25)]
*** center 4: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [102, 30, 0]]
** centroid: 5, normalized-entropy: 0.7732266742876346, [(1, 102), (2, 30)]
*** center 6: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [46, 0, 0]]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.34754124286862415] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34754124286862415, 0.21982817664446458] ***
*** finished computation of 7 references, err: [Inf, 0.34754124286862415, 0.21982817664446458] ***
*** center 1: selecting labels [1] (freq >= 1) [from [44, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [111, 1, 0]]
** centroid: 2, normalized-entropy: 0.07360348308562395, [(1, 111), (2, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 4: selecting labels [1, 2, 3] (freq >= 1) [from [10, 153, 17]]
** centroid: 4, normalized-entropy: 0.4747643629690084, [(1, 10), (2, 153), (3, 17)]
*** center 5: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [51, 70, 0]]
** centroid: 7, normalized-entropy: 0.9821400668060496, [(1, 51), (2, 70)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3775335210019435] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3775335210019435, 0.227890784096118] ***
*** finished computation of 7 references, err: [Inf, 0.3775335210019435, 0.227890784096118] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [108, 100, 0]]
** centroid: 1, normalized-entropy: 0.9989326546260583, [(1, 108), (2, 100)]
*** center 2: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [172, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [17, 2, 0]]
** centroid: 4, normalized-entropy: 0.48546076074591343, [(1, 17), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [81, 13, 0]]
** centroid: 5, normalized-entropy: 0.57976367540648, [(1, 81), (2, 13)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 78, 16]]
** centroid: 6, normalized-entropy: 0.6581912658132184, [(2, 78), (3, 16)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [3, 45, 0]]
** centroid: 7, normalized-entropy: 0.3372900666170139, [(1, 3), (2, 45)]
finished with 9 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 16)
[0.9359808910707114, 0.9330168491845138, 0.9329838820856785, 0.9319798840756924, 0.9290158421894948, 0.9289948631265997, 0.92401683120246, 0.9230547913182644, 0.9090467713222204, 0.9080158002313691, 0.9040507573441706, 0.8820467173760588, 0.881983780187373, 0.8759687831544118, 0.8680506854159549, 0.8479257700814588]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.3, 1) => 0.9359808910707114
finished with 17
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.43175085753135317] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43175085753135317, 0.3053994499840536] ***
*** starting iteration: 2; err: [Inf, 0.43175085753135317, 0.3053994499840536] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43175085753135317, 0.3053994499840536, 0.29916465852700463] ***
*** starting iteration: 3; err: [Inf, 0.43175085753135317, 0.3053994499840536, 0.29916465852700463] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43175085753135317, 0.3053994499840536, 0.29916465852700463, 0.29835017931972024] ***
*** finished computation of 3 references, err: [Inf, 0.43175085753135317, 0.3053994499840536, 0.29916465852700463, 0.29835017931972024] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [164, 26, 0]]
** centroid: 1, normalized-entropy: 0.5759084429149787, [(1, 164), (2, 26)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [1, 196, 9]]
** centroid: 2, normalized-entropy: 0.2599071509222186, [(2, 196), (3, 9)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [264, 6, 0]]
** centroid: 3, normalized-entropy: 0.1537421803287618, [(1, 264), (2, 6)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.37839457696175266] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37839457696175266, 0.3062791663027931] ***
*** starting iteration: 2; err: [Inf, 0.37839457696175266, 0.3062791663027931] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37839457696175266, 0.3062791663027931, 0.30001815074197447] ***
*** starting iteration: 3; err: [Inf, 0.37839457696175266, 0.3062791663027931, 0.30001815074197447] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37839457696175266, 0.3062791663027931, 0.30001815074197447, 0.2983247621900875] ***
*** finished computation of 3 references, err: [Inf, 0.37839457696175266, 0.3062791663027931, 0.30001815074197447, 0.2983247621900875] ***
*** center 1: selecting labels [1] (freq >= 2) [from [226, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [119, 104, 0]]
** centroid: 2, normalized-entropy: 0.9967337809951079, [(1, 119), (2, 104)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [81, 120, 17]]
** centroid: 3, normalized-entropy: 0.8150645553730198, [(1, 81), (2, 120), (3, 17)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.38730778330671733] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38730778330671733, 0.30324938515204003] ***
*** starting iteration: 2; err: [Inf, 0.38730778330671733, 0.30324938515204003] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38730778330671733, 0.30324938515204003, 0.29434960140571603] ***
*** starting iteration: 3; err: [Inf, 0.38730778330671733, 0.30324938515204003, 0.29434960140571603] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38730778330671733, 0.30324938515204003, 0.29434960140571603, 0.2927828082058026] ***
*** finished computation of 3 references, err: [Inf, 0.38730778330671733, 0.30324938515204003, 0.29434960140571603, 0.2927828082058026] ***
*** center 1: selecting labels [1] (freq >= 2) [from [205, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [117, 101, 0]]
** centroid: 2, normalized-entropy: 0.996110783725598, [(1, 117), (2, 101)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [91, 137, 16]]
** centroid: 3, normalized-entropy: 0.7924379516199229, [(1, 91), (2, 137), (3, 16)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 17)
[0.9359808910707114, 0.9330168491845138, 0.9329838820856785, 0.9319798840756924, 0.9290158421894948, 0.9289948631265997, 0.92401683120246, 0.9230547913182644, 0.9109978241714769, 0.9090467713222204, 0.9080158002313691, 0.9040507573441706, 0.8820467173760588, 0.881983780187373, 0.8759687831544118, 0.8680506854159549, 0.8479257700814588]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.3, 1) => 0.9359808910707114
finished with 17
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 17)
[0.9359808910707114, 0.9330168491845138, 0.9329838820856785, 0.9319798840756924, 0.9290158421894948, 0.9289948631265997, 0.92401683120246, 0.9230547913182644, 0.9109978241714769, 0.9090467713222204, 0.9080158002313691, 0.9040507573441706, 0.8820467173760588, 0.881983780187373, 0.8759687831544118, 0.8680506854159549, 0.8479257700814588]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.3, 1) => 0.9359808910707114
finished with 17
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 17)
[0.9359808910707114, 0.9330168491845138, 0.9329838820856785, 0.9319798840756924, 0.9290158421894948, 0.9289948631265997, 0.92401683120246, 0.9230547913182644, 0.9109978241714769, 0.9090467713222204, 0.9080158002313691, 0.9040507573441706, 0.8820467173760588, 0.881983780187373, 0.8759687831544118, 0.8680506854159549, 0.8479257700814588]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.3, 1) => 0.9359808910707114
finished with 18
iteration 9 finished
*** starting iteration: 1; err: [Inf, 0.2280934880109708] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2280934880109708, 0.20207752820591] ***
*** starting iteration: 2; err: [Inf, 0.2280934880109708, 0.20207752820591] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2280934880109708, 0.20207752820591, 0.1942078981579312] ***
*** starting iteration: 3; err: [Inf, 0.2280934880109708, 0.20207752820591, 0.1942078981579312] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2280934880109708, 0.20207752820591, 0.1942078981579312, 0.19091747786574256] ***
*** finished computation of 7 references, err: [Inf, 0.2280934880109708, 0.20207752820591, 0.1942078981579312, 0.19091747786574256] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [19, 66, 0]]
** centroid: 1, normalized-entropy: 0.7665599404543365, [(1, 19), (2, 66)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [102, 10, 0]]
** centroid: 2, normalized-entropy: 0.4340811200043348, [(1, 102), (2, 10)]
*** center 3: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [102, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [108, 14, 0]]
** centroid: 5, normalized-entropy: 0.5140912790181233, [(1, 108), (2, 14)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 70, 9]]
** centroid: 6, normalized-entropy: 0.511639783631173, [(2, 70), (3, 9)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 68, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2351804382322744] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2351804382322744, 0.19768954612415235] ***
*** starting iteration: 2; err: [Inf, 0.2351804382322744, 0.19768954612415235] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2351804382322744, 0.19768954612415235, 0.19175326441745574] ***
*** starting iteration: 3; err: [Inf, 0.2351804382322744, 0.19768954612415235, 0.19175326441745574] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2351804382322744, 0.19768954612415235, 0.19175326441745574, 0.18752874057136779] ***
*** finished computation of 7 references, err: [Inf, 0.2351804382322744, 0.19768954612415235, 0.19175326441745574, 0.18752874057136779] ***
*** center 1: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 88, 17]]
** centroid: 2, normalized-entropy: 0.6388469391771899, [(2, 88), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [66, 47, 0]]
** centroid: 3, normalized-entropy: 0.9795091579328259, [(1, 66), (2, 47)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [41, 63, 0]]
** centroid: 4, normalized-entropy: 0.9674756088157442, [(1, 41), (2, 63)]
*** center 5: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [77, 26, 0]]
** centroid: 6, normalized-entropy: 0.8151025048028707, [(1, 77), (2, 26)]
*** center 7: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.27898348133272394] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27898348133272394, 0.21195007274534716] ***
*** starting iteration: 2; err: [Inf, 0.27898348133272394, 0.21195007274534716] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27898348133272394, 0.21195007274534716, 0.19743172044417578] ***
*** starting iteration: 3; err: [Inf, 0.27898348133272394, 0.21195007274534716, 0.19743172044417578] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27898348133272394, 0.21195007274534716, 0.19743172044417578, 0.1931327897077915] ***
*** finished computation of 7 references, err: [Inf, 0.27898348133272394, 0.21195007274534716, 0.19743172044417578, 0.1931327897077915] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [73, 21, 0]]
** centroid: 1, normalized-entropy: 0.7663350359691776, [(1, 73), (2, 21)]
*** center 2: selecting labels [1] (freq >= 1) [from [103, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [24, 75, 0]]
** centroid: 3, normalized-entropy: 0.7990485210442682, [(1, 24), (2, 75)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 102, 16]]
** centroid: 4, normalized-entropy: 0.572580465623769, [(2, 102), (3, 16)]
*** center 5: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [52, 35, 0]]
** centroid: 6, normalized-entropy: 0.9722794620968822, [(1, 52), (2, 35)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [69, 5, 0]]
** centroid: 7, normalized-entropy: 0.35678001438394347, [(1, 69), (2, 5)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.2185342215159908] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2185342215159908, 0.1658856889740564] ***
*** starting iteration: 2; err: [Inf, 0.2185342215159908, 0.1658856889740564] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2185342215159908, 0.1658856889740564, 0.15238053381163627] ***
*** starting iteration: 3; err: [Inf, 0.2185342215159908, 0.1658856889740564, 0.15238053381163627] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2185342215159908, 0.1658856889740564, 0.15238053381163627, 0.14853749665850774] ***
*** finished computation of 7 references, err: [Inf, 0.2185342215159908, 0.1658856889740564, 0.15238053381163627, 0.14853749665850774] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 126, 6]]
** centroid: 1, normalized-entropy: 0.2667649878030262, [(2, 126), (3, 6)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [99, 30, 0]]
** centroid: 2, normalized-entropy: 0.7824441294066888, [(1, 99), (2, 30)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [110, 18, 0]]
** centroid: 3, normalized-entropy: 0.5858732928619204, [(1, 110), (2, 18)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 143, 15]]
** centroid: 4, normalized-entropy: 0.45273669695281504, [(2, 143), (3, 15)]
*** center 5: selecting labels [1] (freq >= 1) [from [121, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [152, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [152, 28, 0]]
** centroid: 7, normalized-entropy: 0.6235702082127973, [(1, 152), (2, 28)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2304512189719826] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2304512189719826, 0.15924081377871335] ***
*** starting iteration: 2; err: [Inf, 0.2304512189719826, 0.15924081377871335] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2304512189719826, 0.15924081377871335, 0.15568365501239895] ***
*** starting iteration: 3; err: [Inf, 0.2304512189719826, 0.15924081377871335, 0.15568365501239895] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2304512189719826, 0.15924081377871335, 0.15568365501239895, 0.15277322706766427] ***
*** finished computation of 7 references, err: [Inf, 0.2304512189719826, 0.15924081377871335, 0.15568365501239895, 0.15277322706766427] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [19, 51, 0]]
** centroid: 1, normalized-entropy: 0.8435070855739035, [(1, 19), (2, 51)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [63, 2, 0]]
** centroid: 2, normalized-entropy: 0.19823496409776642, [(1, 63), (2, 2)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [38, 35, 0]]
** centroid: 3, normalized-entropy: 0.998781393072756, [(1, 38), (2, 35)]
*** center 4: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 78, 10]]
** centroid: 5, normalized-entropy: 0.5107878229540133, [(2, 78), (3, 10)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [51, 10, 0]]
** centroid: 6, normalized-entropy: 0.6436394131461666, [(1, 51), (2, 10)]
*** center 7: selecting labels [1] (freq >= 1) [from [45, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22056024132110177] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22056024132110177, 0.16563264443911613] ***
*** starting iteration: 2; err: [Inf, 0.22056024132110177, 0.16563264443911613] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22056024132110177, 0.16563264443911613, 0.1509414515160024] ***
*** starting iteration: 3; err: [Inf, 0.22056024132110177, 0.16563264443911613, 0.1509414515160024] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22056024132110177, 0.16563264443911613, 0.1509414515160024, 0.1468154133912176] ***
*** finished computation of 7 references, err: [Inf, 0.22056024132110177, 0.16563264443911613, 0.1509414515160024, 0.1468154133912176] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [72, 5, 0]]
** centroid: 1, normalized-entropy: 0.34673146824966367, [(1, 72), (2, 5)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 75, 10]]
** centroid: 2, normalized-entropy: 0.5225593745369407, [(2, 75), (3, 10)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [18, 30, 0]]
** centroid: 3, normalized-entropy: 0.954434002924965, [(1, 18), (2, 30)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [57, 20, 0]]
** centroid: 4, normalized-entropy: 0.8263541679009075, [(1, 57), (2, 20)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 56, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24752308310382068] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24752308310382068, 0.16810032678302378] ***
*** starting iteration: 2; err: [Inf, 0.24752308310382068, 0.16810032678302378] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24752308310382068, 0.16810032678302378, 0.15505680482462048] ***
*** starting iteration: 3; err: [Inf, 0.24752308310382068, 0.16810032678302378, 0.15505680482462048] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24752308310382068, 0.16810032678302378, 0.15505680482462048, 0.15091669613029807] ***
*** finished computation of 7 references, err: [Inf, 0.24752308310382068, 0.16810032678302378, 0.15505680482462048, 0.15091669613029807] ***
*** center 1: selecting labels [1] (freq >= 1) [from [99, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [43, 2, 0]]
** centroid: 2, normalized-entropy: 0.2623112196143368, [(1, 43), (2, 2)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [4, 50, 0]]
** centroid: 3, normalized-entropy: 0.38094658570539014, [(1, 4), (2, 50)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [1, 76, 0]]
** centroid: 4, normalized-entropy: 0.1000009430103234, [(1, 1), (2, 76)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [77, 24, 0]]
** centroid: 5, normalized-entropy: 0.7910662980902586, [(1, 77), (2, 24)]
*** center 6: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 22, 11]]
** centroid: 7, normalized-entropy: 0.9182958340544894, [(2, 22), (3, 11)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24593717426992953] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24593717426992953, 0.18892433975823222] ***
*** starting iteration: 2; err: [Inf, 0.24593717426992953, 0.18892433975823222] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24593717426992953, 0.18892433975823222, 0.16789189516101033] ***
*** starting iteration: 3; err: [Inf, 0.24593717426992953, 0.18892433975823222, 0.16789189516101033] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24593717426992953, 0.18892433975823222, 0.16789189516101033, 0.15719887155480683] ***
*** finished computation of 7 references, err: [Inf, 0.24593717426992953, 0.18892433975823222, 0.16789189516101033, 0.15719887155480683] ***
*** center 1: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [18, 70, 0]]
** centroid: 4, normalized-entropy: 0.7309263775906009, [(1, 18), (2, 70)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [63, 1, 0]]
** centroid: 5, normalized-entropy: 0.11611507530476962, [(1, 63), (2, 1)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [48, 12, 0]]
** centroid: 6, normalized-entropy: 0.7219280948873623, [(1, 48), (2, 12)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 93, 11]]
** centroid: 7, normalized-entropy: 0.48702128315977294, [(2, 93), (3, 11)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21870095651969312] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21870095651969312, 0.18494520013593138] ***
*** starting iteration: 2; err: [Inf, 0.21870095651969312, 0.18494520013593138] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21870095651969312, 0.18494520013593138, 0.17173119260184466] ***
*** starting iteration: 3; err: [Inf, 0.21870095651969312, 0.18494520013593138, 0.17173119260184466] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21870095651969312, 0.18494520013593138, 0.17173119260184466, 0.16096531085669993] ***
*** finished computation of 7 references, err: [Inf, 0.21870095651969312, 0.18494520013593138, 0.17173119260184466, 0.16096531085669993] ***
*** center 1: selecting labels [1] (freq >= 1) [from [115, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 61, 10]]
** centroid: 2, normalized-entropy: 0.5864477034453907, [(2, 61), (3, 10)]
*** center 3: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 4: selecting labels [1, 2, 3] (freq >= 1) [from [8, 87, 1]]
** centroid: 4, normalized-entropy: 0.3129695228641348, [(1, 8), (2, 87), (3, 1)]
*** center 5: selecting labels [1] (freq >= 1) [from [40, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [34, 7, 0]]
** centroid: 6, normalized-entropy: 0.6593758812786991, [(1, 34), (2, 7)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [38, 17, 0]]
** centroid: 7, normalized-entropy: 0.8921212805771683, [(1, 38), (2, 17)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.27290882405731826] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27290882405731826, 0.17657361086178572] ***
*** starting iteration: 2; err: [Inf, 0.27290882405731826, 0.17657361086178572] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27290882405731826, 0.17657361086178572, 0.16050252422131597] ***
*** starting iteration: 3; err: [Inf, 0.27290882405731826, 0.17657361086178572, 0.16050252422131597] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27290882405731826, 0.17657361086178572, 0.16050252422131597, 0.15501064575929194] ***
*** finished computation of 7 references, err: [Inf, 0.27290882405731826, 0.17657361086178572, 0.16050252422131597, 0.15501064575929194] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 74, 1]]
** centroid: 1, normalized-entropy: 0.10215803640865054, [(2, 74), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [111, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [61, 18, 0]]
** centroid: 3, normalized-entropy: 0.7742411580847273, [(1, 61), (2, 18)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [52, 12, 0]]
** centroid: 4, normalized-entropy: 0.6962122601251459, [(1, 52), (2, 12)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [63, 10, 0]]
** centroid: 5, normalized-entropy: 0.576291461217437, [(1, 63), (2, 10)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [29, 6, 0]]
** centroid: 6, normalized-entropy: 0.6609623351442084, [(1, 29), (2, 6)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 50, 13]]
** centroid: 7, normalized-entropy: 0.7344461802527668, [(2, 50), (3, 13)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.29959987725038084] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29959987725038084, 0.17882497949758544] ***
*** starting iteration: 2; err: [Inf, 0.29959987725038084, 0.17882497949758544] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29959987725038084, 0.17882497949758544, 0.1514395644813776] ***
*** starting iteration: 3; err: [Inf, 0.29959987725038084, 0.17882497949758544, 0.1514395644813776] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29959987725038084, 0.17882497949758544, 0.1514395644813776, 0.14779362037964167] ***
*** finished computation of 7 references, err: [Inf, 0.29959987725038084, 0.17882497949758544, 0.1514395644813776, 0.14779362037964167] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [20, 22, 0]]
** centroid: 1, normalized-entropy: 0.998363672593813, [(1, 20), (2, 22)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [72, 24, 0]]
** centroid: 2, normalized-entropy: 0.8112781244591328, [(1, 72), (2, 24)]
*** center 3: selecting labels [1] (freq >= 1) [from [108, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [24, 50, 0]]
** centroid: 4, normalized-entropy: 0.9090221560878149, [(1, 24), (2, 50)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [44, 1, 0]]
** centroid: 5, normalized-entropy: 0.1537421803287618, [(1, 44), (2, 1)]
*** center 6: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 66, 10]]
** centroid: 7, normalized-entropy: 0.5617526078313283, [(2, 66), (3, 10)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2686802966389805] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2686802966389805, 0.17088487008027733] ***
*** starting iteration: 2; err: [Inf, 0.2686802966389805, 0.17088487008027733] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2686802966389805, 0.17088487008027733, 0.15111549678072334] ***
*** starting iteration: 3; err: [Inf, 0.2686802966389805, 0.17088487008027733, 0.15111549678072334] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2686802966389805, 0.17088487008027733, 0.15111549678072334, 0.14729393194429577] ***
*** finished computation of 7 references, err: [Inf, 0.2686802966389805, 0.17088487008027733, 0.15111549678072334, 0.14729393194429577] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 69, 7]]
** centroid: 1, normalized-entropy: 0.4434581453896789, [(2, 69), (3, 7)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [50, 38, 0]]
** centroid: 2, normalized-entropy: 0.9865446300055647, [(1, 50), (2, 38)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [32, 26, 0]]
** centroid: 3, normalized-entropy: 0.9922666387194963, [(1, 32), (2, 26)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [3, 48, 0]]
** centroid: 4, normalized-entropy: 0.32275695889739825, [(1, 3), (2, 48)]
*** center 5: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.33142732477840037] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33142732477840037, 0.17272445929981767] ***
*** starting iteration: 2; err: [Inf, 0.33142732477840037, 0.17272445929981767] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33142732477840037, 0.17272445929981767, 0.15272177927568556] ***
*** starting iteration: 3; err: [Inf, 0.33142732477840037, 0.17272445929981767, 0.15272177927568556] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33142732477840037, 0.17272445929981767, 0.15272177927568556, 0.1483531720302999] ***
*** finished computation of 7 references, err: [Inf, 0.33142732477840037, 0.17272445929981767, 0.15272177927568556, 0.1483531720302999] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [35, 24, 0]]
** centroid: 1, normalized-entropy: 0.9747785474909672, [(1, 35), (2, 24)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [48, 43, 0]]
** centroid: 2, normalized-entropy: 0.9978211842997324, [(1, 48), (2, 43)]
*** center 3: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [67, 5, 0]]
** centroid: 5, normalized-entropy: 0.3638469981769295, [(1, 67), (2, 5)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 88, 5]]
** centroid: 6, normalized-entropy: 0.30217361847879526, [(2, 88), (3, 5)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [28, 12, 0]]
** centroid: 7, normalized-entropy: 0.8812908992306927, [(1, 28), (2, 12)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22111085740756242] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22111085740756242, 0.1739625721713528] ***
*** starting iteration: 2; err: [Inf, 0.22111085740756242, 0.1739625721713528] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22111085740756242, 0.1739625721713528, 0.1639461568556726] ***
*** starting iteration: 3; err: [Inf, 0.22111085740756242, 0.1739625721713528, 0.1639461568556726] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22111085740756242, 0.1739625721713528, 0.1639461568556726, 0.15734040632098914] ***
*** finished computation of 7 references, err: [Inf, 0.22111085740756242, 0.1739625721713528, 0.1639461568556726, 0.15734040632098914] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 67, 1]]
** centroid: 1, normalized-entropy: 0.11058084476988722, [(2, 67), (3, 1)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [84, 35, 0]]
** centroid: 2, normalized-entropy: 0.8739810481273581, [(1, 84), (2, 35)]
*** center 3: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 29, 9]]
** centroid: 5, normalized-entropy: 0.7897492536625221, [(2, 29), (3, 9)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [20, 44, 0]]
** centroid: 6, normalized-entropy: 0.8960382325345574, [(1, 20), (2, 44)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [70, 2, 0]]
** centroid: 7, normalized-entropy: 0.18312206830137262, [(1, 70), (2, 2)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21656328709051012] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21656328709051012, 0.1663671471513808] ***
*** starting iteration: 2; err: [Inf, 0.21656328709051012, 0.1663671471513808] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21656328709051012, 0.1663671471513808, 0.15854978709481657] ***
*** starting iteration: 3; err: [Inf, 0.21656328709051012, 0.1663671471513808, 0.15854978709481657] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21656328709051012, 0.1663671471513808, 0.15854978709481657, 0.1538175912518054] ***
*** finished computation of 7 references, err: [Inf, 0.21656328709051012, 0.1663671471513808, 0.15854978709481657, 0.1538175912518054] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 62, 11]]
** centroid: 1, normalized-entropy: 0.6115516951951333, [(2, 62), (3, 11)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [7, 72, 0]]
** centroid: 2, normalized-entropy: 0.43180499427520785, [(1, 7), (2, 72)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [78, 29, 0]]
** centroid: 3, normalized-entropy: 0.8429359403268015, [(1, 78), (2, 29)]
*** center 4: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [16, 14, 0]]
** centroid: 5, normalized-entropy: 0.9967916319816367, [(1, 16), (2, 14)]
*** center 6: selecting labels [1] (freq >= 1) [from [29, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22204776822589337] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22204776822589337, 0.1870394268836826] ***
*** starting iteration: 2; err: [Inf, 0.22204776822589337, 0.1870394268836826] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22204776822589337, 0.1870394268836826, 0.1665516699841246] ***
*** starting iteration: 3; err: [Inf, 0.22204776822589337, 0.1870394268836826, 0.1665516699841246] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22204776822589337, 0.1870394268836826, 0.1665516699841246, 0.15243181436322628] ***
*** finished computation of 7 references, err: [Inf, 0.22204776822589337, 0.1870394268836826, 0.1665516699841246, 0.15243181436322628] ***
*** center 1: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [33, 43, 0]]
** centroid: 2, normalized-entropy: 0.9874750082985965, [(1, 33), (2, 43)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [49, 3, 0]]
** centroid: 3, normalized-entropy: 0.3182152976832332, [(1, 49), (2, 3)]
*** center 4: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [67, 39, 0]]
** centroid: 5, normalized-entropy: 0.9490651498811383, [(1, 67), (2, 39)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 40, 13]]
** centroid: 6, normalized-entropy: 0.8037159237834126, [(2, 40), (3, 13)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 42, 0]]
** centroid: 7, normalized-entropy: 0.15935006268563429, [(1, 1), (2, 42)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1917195252198726] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1917195252198726, 0.1516009008344263] ***
*** starting iteration: 2; err: [Inf, 0.1917195252198726, 0.1516009008344263] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1917195252198726, 0.1516009008344263, 0.14691461500548758] ***
*** starting iteration: 3; err: [Inf, 0.1917195252198726, 0.1516009008344263, 0.14691461500548758] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1917195252198726, 0.1516009008344263, 0.14691461500548758, 0.14507765797432512] ***
*** finished computation of 7 references, err: [Inf, 0.1917195252198726, 0.1516009008344263, 0.14691461500548758, 0.14507765797432512] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [73, 10, 0]]
** centroid: 1, normalized-entropy: 0.530744566923854, [(1, 73), (2, 10)]
*** center 2: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [76, 5, 0]]
** centroid: 3, normalized-entropy: 0.33426813256179383, [(1, 76), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [2, 71, 0]]
** centroid: 4, normalized-entropy: 0.18116640155354563, [(1, 2), (2, 71)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [28, 35, 0]]
** centroid: 5, normalized-entropy: 0.9910760598382222, [(1, 28), (2, 35)]
*** center 6: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 38, 16]]
** centroid: 7, normalized-entropy: 0.876716288999464, [(2, 38), (3, 16)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25809851346956564] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25809851346956564, 0.1896750528216362] ***
*** starting iteration: 2; err: [Inf, 0.25809851346956564, 0.1896750528216362] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25809851346956564, 0.1896750528216362, 0.1761841392321512] ***
*** starting iteration: 3; err: [Inf, 0.25809851346956564, 0.1896750528216362, 0.1761841392321512] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25809851346956564, 0.1896750528216362, 0.1761841392321512, 0.16725329786911608] ***
*** finished computation of 7 references, err: [Inf, 0.25809851346956564, 0.1896750528216362, 0.1761841392321512, 0.16725329786911608] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 56, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [40, 10, 0]]
** centroid: 2, normalized-entropy: 0.7219280948873623, [(1, 40), (2, 10)]
*** center 3: selecting labels [1] (freq >= 1) [from [31, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 85, 6]]
** centroid: 4, normalized-entropy: 0.35056382068186565, [(2, 85), (3, 6)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [130, 8, 0]]
** centroid: 5, normalized-entropy: 0.3193373865339728, [(1, 130), (2, 8)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [19, 15, 0]]
** centroid: 6, normalized-entropy: 0.9899927915575186, [(1, 19), (2, 15)]
*** center 7: selecting labels [1] (freq >= 1) [from [100, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19481819600891323] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19481819600891323, 0.16605952258221804] ***
*** starting iteration: 2; err: [Inf, 0.19481819600891323, 0.16605952258221804] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19481819600891323, 0.16605952258221804, 0.15826452412176878] ***
*** starting iteration: 3; err: [Inf, 0.19481819600891323, 0.16605952258221804, 0.15826452412176878] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19481819600891323, 0.16605952258221804, 0.15826452412176878, 0.15426533913332968] ***
*** finished computation of 7 references, err: [Inf, 0.19481819600891323, 0.16605952258221804, 0.15826452412176878, 0.15426533913332968] ***
*** center 1: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [63, 49, 0]]
** centroid: 2, normalized-entropy: 0.9886994082884974, [(1, 63), (2, 49)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [28, 16, 0]]
** centroid: 3, normalized-entropy: 0.9456603046006401, [(1, 28), (2, 16)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [45, 7, 0]]
** centroid: 4, normalized-entropy: 0.5699613760403499, [(1, 45), (2, 7)]
*** center 5: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 86, 13]]
** centroid: 6, normalized-entropy: 0.5610284863400681, [(2, 86), (3, 13)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [44, 16, 0]]
** centroid: 7, normalized-entropy: 0.8366407419411671, [(1, 44), (2, 16)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26204881200939417] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26204881200939417, 0.17387600204162298] ***
*** starting iteration: 2; err: [Inf, 0.26204881200939417, 0.17387600204162298] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26204881200939417, 0.17387600204162298, 0.15982367558963598] ***
*** starting iteration: 3; err: [Inf, 0.26204881200939417, 0.17387600204162298, 0.15982367558963598] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26204881200939417, 0.17387600204162298, 0.15982367558963598, 0.15243514675367623] ***
*** finished computation of 7 references, err: [Inf, 0.26204881200939417, 0.17387600204162298, 0.15982367558963598, 0.15243514675367623] ***
*** center 1: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [71, 14, 0]]
** centroid: 2, normalized-entropy: 0.6454495903301855, [(1, 71), (2, 14)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [1, 82, 0]]
** centroid: 3, normalized-entropy: 0.09408443883267342, [(1, 1), (2, 82)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 48, 14]]
** centroid: 4, normalized-entropy: 0.7706290693639406, [(2, 48), (3, 14)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [45, 19, 0]]
** centroid: 5, normalized-entropy: 0.877437311089633, [(1, 45), (2, 19)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [64, 3, 0]]
** centroid: 6, normalized-entropy: 0.26377743669413856, [(1, 64), (2, 3)]
*** center 7: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.32316560370870867] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.32316560370870867, 0.20520657980628312] ***
*** starting iteration: 2; err: [Inf, 0.32316560370870867, 0.20520657980628312] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.32316560370870867, 0.20520657980628312, 0.18053168482519685] ***
*** starting iteration: 3; err: [Inf, 0.32316560370870867, 0.20520657980628312, 0.18053168482519685] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.32316560370870867, 0.20520657980628312, 0.18053168482519685, 0.1603968806816265] ***
*** finished computation of 7 references, err: [Inf, 0.32316560370870867, 0.20520657980628312, 0.18053168482519685, 0.1603968806816265] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [44, 2, 0]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(1, 44), (2, 2)]
*** center 2: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [1, 62, 0]]
** centroid: 3, normalized-entropy: 0.11759466565886466, [(1, 1), (2, 62)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [105, 4, 0]]
** centroid: 4, normalized-entropy: 0.22693864262148727, [(1, 105), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [23, 30, 0]]
** centroid: 5, normalized-entropy: 0.987380023288353, [(1, 23), (2, 30)]
*** center 6: selecting labels [1] (freq >= 1) [from [48, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 85, 14]]
** centroid: 7, normalized-entropy: 0.5879303728017198, [(2, 85), (3, 14)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22098102015070617] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22098102015070617, 0.17694981748238206] ***
*** starting iteration: 2; err: [Inf, 0.22098102015070617, 0.17694981748238206] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22098102015070617, 0.17694981748238206, 0.15915404780395329] ***
*** starting iteration: 3; err: [Inf, 0.22098102015070617, 0.17694981748238206, 0.15915404780395329] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22098102015070617, 0.17694981748238206, 0.15915404780395329, 0.15102566246129573] ***
*** finished computation of 7 references, err: [Inf, 0.22098102015070617, 0.17694981748238206, 0.15915404780395329, 0.15102566246129573] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [60, 15, 0]]
** centroid: 1, normalized-entropy: 0.7219280948873623, [(1, 60), (2, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [104, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 40, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [14, 45, 0]]
** centroid: 4, normalized-entropy: 0.7905013842153699, [(1, 14), (2, 45)]
*** center 5: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [56, 39, 0]]
** centroid: 6, normalized-entropy: 0.9767760065324896, [(1, 56), (2, 39)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 39, 7]]
** centroid: 7, normalized-entropy: 0.6152538910563409, [(2, 39), (3, 7)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21896337264589966] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21896337264589966, 0.16618754394818097] ***
*** starting iteration: 2; err: [Inf, 0.21896337264589966, 0.16618754394818097] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21896337264589966, 0.16618754394818097, 0.1580188755095005] ***
*** starting iteration: 3; err: [Inf, 0.21896337264589966, 0.16618754394818097, 0.1580188755095005] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21896337264589966, 0.16618754394818097, 0.1580188755095005, 0.15456541412696242] ***
*** finished computation of 7 references, err: [Inf, 0.21896337264589966, 0.16618754394818097, 0.1580188755095005, 0.15456541412696242] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [70, 14, 0]]
** centroid: 1, normalized-entropy: 0.6500224216483541, [(1, 70), (2, 14)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [21, 51, 0]]
** centroid: 2, normalized-entropy: 0.8708644692353648, [(1, 21), (2, 51)]
*** center 3: selecting labels [1] (freq >= 1) [from [122, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [23, 34, 0]]
** centroid: 5, normalized-entropy: 0.9729661265889024, [(1, 23), (2, 34)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 46, 8]]
** centroid: 6, normalized-entropy: 0.6051865766334207, [(2, 46), (3, 8)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 37, 4]]
** centroid: 7, normalized-entropy: 0.4612160405139095, [(2, 37), (3, 4)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1959848801009357] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1959848801009357, 0.15819383544661106] ***
*** starting iteration: 2; err: [Inf, 0.1959848801009357, 0.15819383544661106] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1959848801009357, 0.15819383544661106, 0.15518740717694163] ***
*** starting iteration: 3; err: [Inf, 0.1959848801009357, 0.15819383544661106, 0.15518740717694163] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1959848801009357, 0.15819383544661106, 0.15518740717694163, 0.1534247872531414] ***
*** finished computation of 7 references, err: [Inf, 0.1959848801009357, 0.15819383544661106, 0.15518740717694163, 0.1534247872531414] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [42, 31, 0]]
** centroid: 1, normalized-entropy: 0.9835585673909616, [(1, 42), (2, 31)]
*** center 2: selecting labels [1] (freq >= 1) [from [36, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 111, 12]]
** centroid: 3, normalized-entropy: 0.4612160405139095, [(2, 111), (3, 12)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [61, 2, 0]]
** centroid: 4, normalized-entropy: 0.20307392998664567, [(1, 61), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [49, 27, 0]]
** centroid: 5, normalized-entropy: 0.9386808697586004, [(1, 49), (2, 27)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [68, 5, 0]]
** centroid: 6, normalized-entropy: 0.3602750564216625, [(1, 68), (2, 5)]
*** center 7: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21467469695582986] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21467469695582986, 0.1672813573293388] ***
*** starting iteration: 2; err: [Inf, 0.21467469695582986, 0.1672813573293388] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21467469695582986, 0.1672813573293388, 0.158077029209584] ***
*** starting iteration: 3; err: [Inf, 0.21467469695582986, 0.1672813573293388, 0.158077029209584] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21467469695582986, 0.1672813573293388, 0.158077029209584, 0.1546037740111351] ***
*** finished computation of 7 references, err: [Inf, 0.21467469695582986, 0.1672813573293388, 0.158077029209584, 0.1546037740111351] ***
*** center 1: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [3, 42, 0]]
** centroid: 3, normalized-entropy: 0.3533593350214213, [(1, 3), (2, 42)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 68, 13]]
** centroid: 4, normalized-entropy: 0.635489638182683, [(2, 68), (3, 13)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [95, 18, 0]]
** centroid: 5, normalized-entropy: 0.6326131852700402, [(1, 95), (2, 18)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [36, 28, 0]]
** centroid: 6, normalized-entropy: 0.9886994082884974, [(1, 36), (2, 28)]
*** center 7: selecting labels [1] (freq >= 1) [from [47, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2305740049900487] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2305740049900487, 0.1581672714203596] ***
*** starting iteration: 2; err: [Inf, 0.2305740049900487, 0.1581672714203596] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2305740049900487, 0.1581672714203596, 0.15307017713040114] ***
*** starting iteration: 3; err: [Inf, 0.2305740049900487, 0.1581672714203596, 0.15307017713040114] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2305740049900487, 0.1581672714203596, 0.15307017713040114, 0.15072528476268052] ***
*** finished computation of 7 references, err: [Inf, 0.2305740049900487, 0.1581672714203596, 0.15307017713040114, 0.15072528476268052] ***
*** center 1: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [73, 18, 0]]
** centroid: 2, normalized-entropy: 0.7175106531195438, [(1, 73), (2, 18)]
*** center 3: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 4: selecting labels [1, 2, 3] (freq >= 1) [from [5, 69, 2]]
** centroid: 4, normalized-entropy: 0.32994855856624733, [(1, 5), (2, 69), (3, 2)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 65, 9]]
** centroid: 5, normalized-entropy: 0.5340042729285396, [(2, 65), (3, 9)]
*** center 6: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [10, 30, 0]]
** centroid: 7, normalized-entropy: 0.8112781244591328, [(1, 10), (2, 30)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24557085781940258] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24557085781940258, 0.1764448419250548] ***
*** starting iteration: 2; err: [Inf, 0.24557085781940258, 0.1764448419250548] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24557085781940258, 0.1764448419250548, 0.16033390236040576] ***
*** starting iteration: 3; err: [Inf, 0.24557085781940258, 0.1764448419250548, 0.16033390236040576] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24557085781940258, 0.1764448419250548, 0.16033390236040576, 0.1548299703123048] ***
*** finished computation of 7 references, err: [Inf, 0.24557085781940258, 0.1764448419250548, 0.16033390236040576, 0.1548299703123048] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [67, 26, 0]]
** centroid: 1, normalized-entropy: 0.8548640967818041, [(1, 67), (2, 26)]
*** center 2: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [21, 40, 0]]
** centroid: 3, normalized-entropy: 0.9288391461883213, [(1, 21), (2, 40)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [56, 28, 0]]
** centroid: 4, normalized-entropy: 0.9182958340544894, [(1, 56), (2, 28)]
*** center 5: selecting labels [1] (freq >= 1) [from [26, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 71, 9]]
** centroid: 6, normalized-entropy: 0.5074109636646968, [(2, 71), (3, 9)]
*** center 7: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2592038999898359] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2592038999898359, 0.17045780507847666] ***
*** starting iteration: 2; err: [Inf, 0.2592038999898359, 0.17045780507847666] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2592038999898359, 0.17045780507847666, 0.15739687921851872] ***
*** starting iteration: 3; err: [Inf, 0.2592038999898359, 0.17045780507847666, 0.15739687921851872] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2592038999898359, 0.17045780507847666, 0.15739687921851872, 0.15365657717548312] ***
*** finished computation of 7 references, err: [Inf, 0.2592038999898359, 0.17045780507847666, 0.15739687921851872, 0.15365657717548312] ***
*** center 1: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [39, 50, 0]]
** centroid: 2, normalized-entropy: 0.9889525767600615, [(1, 39), (2, 50)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 70, 9]]
** centroid: 3, normalized-entropy: 0.511639783631173, [(2, 70), (3, 9)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [46, 29, 0]]
** centroid: 4, normalized-entropy: 0.9626147059982517, [(1, 46), (2, 29)]
*** center 5: selecting labels [1] (freq >= 1) [from [40, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [102, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [23, 24, 0]]
** centroid: 7, normalized-entropy: 0.9996734260048917, [(1, 23), (2, 24)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.28390987956523894] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28390987956523894, 0.17814211262203752] ***
*** starting iteration: 2; err: [Inf, 0.28390987956523894, 0.17814211262203752] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28390987956523894, 0.17814211262203752, 0.15739263890311123] ***
*** starting iteration: 3; err: [Inf, 0.28390987956523894, 0.17814211262203752, 0.15739263890311123] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28390987956523894, 0.17814211262203752, 0.15739263890311123, 0.14917691679112613] ***
*** finished computation of 7 references, err: [Inf, 0.28390987956523894, 0.17814211262203752, 0.15739263890311123, 0.14917691679112613] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 61, 8]]
** centroid: 1, normalized-entropy: 0.5175827525559071, [(2, 61), (3, 8)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [61, 10, 0]]
** centroid: 2, normalized-entropy: 0.5864477034453907, [(1, 61), (2, 10)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [31, 32, 0]]
** centroid: 3, normalized-entropy: 0.9998182469603427, [(1, 31), (2, 32)]
*** center 4: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 5: selecting labels [1, 2, 3] (freq >= 1) [from [1, 53, 1]]
** centroid: 5, normalized-entropy: 0.1651315254284853, [(1, 1), (2, 53), (3, 1)]
*** center 6: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [49, 18, 0]]
** centroid: 7, normalized-entropy: 0.8395304981054318, [(1, 49), (2, 18)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21769229816272856] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21769229816272856, 0.1697152172960341] ***
*** starting iteration: 2; err: [Inf, 0.21769229816272856, 0.1697152172960341] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21769229816272856, 0.1697152172960341, 0.15492117243260145] ***
*** starting iteration: 3; err: [Inf, 0.21769229816272856, 0.1697152172960341, 0.15492117243260145] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21769229816272856, 0.1697152172960341, 0.15492117243260145, 0.15097476411238311] ***
*** finished computation of 7 references, err: [Inf, 0.21769229816272856, 0.1697152172960341, 0.15492117243260145, 0.15097476411238311] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [31, 46, 0]]
** centroid: 1, normalized-entropy: 0.9724497147128791, [(1, 31), (2, 46)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 88, 13]]
** centroid: 2, normalized-entropy: 0.5538976334852961, [(2, 88), (3, 13)]
*** center 3: selecting labels [1] (freq >= 1) [from [48, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [64, 23, 0]]
** centroid: 4, normalized-entropy: 0.8332661971210122, [(1, 64), (2, 23)]
*** center 5: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [52, 2, 0]]
** centroid: 6, normalized-entropy: 0.22853814395352806, [(1, 52), (2, 2)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [79, 1, 0]]
** centroid: 7, normalized-entropy: 0.09694460606247329, [(1, 79), (2, 1)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.29042388310283423] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29042388310283423, 0.23259526290744542] ***
*** starting iteration: 2; err: [Inf, 0.29042388310283423, 0.23259526290744542] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29042388310283423, 0.23259526290744542, 0.21184860479086637] ***
*** starting iteration: 3; err: [Inf, 0.29042388310283423, 0.23259526290744542, 0.21184860479086637] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29042388310283423, 0.23259526290744542, 0.21184860479086637, 0.19491794116795064] ***
*** finished computation of 7 references, err: [Inf, 0.29042388310283423, 0.23259526290744542, 0.21184860479086637, 0.19491794116795064] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [60, 84, 7]]
** centroid: 1, normalized-entropy: 0.7603728558808892, [(1, 60), (2, 84), (3, 7)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [5, 73, 4]]
** centroid: 2, normalized-entropy: 0.3835778301542642, [(1, 5), (2, 73), (3, 4)]
*** center 3: selecting labels [1] (freq >= 1) [from [128, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [13, 5, 0]]
** centroid: 6, normalized-entropy: 0.8524051786494784, [(1, 13), (2, 5)]
*** center 7: selecting labels [1] (freq >= 1) [from [5, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24567426752950997] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24567426752950997, 0.1745438500456512] ***
*** starting iteration: 2; err: [Inf, 0.24567426752950997, 0.1745438500456512] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24567426752950997, 0.1745438500456512, 0.15783542877901346] ***
*** starting iteration: 3; err: [Inf, 0.24567426752950997, 0.1745438500456512, 0.15783542877901346] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24567426752950997, 0.1745438500456512, 0.15783542877901346, 0.15239082410559057] ***
*** finished computation of 7 references, err: [Inf, 0.24567426752950997, 0.1745438500456512, 0.15783542877901346, 0.15239082410559057] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [3, 81, 3]]
** centroid: 1, normalized-entropy: 0.27194130383480064, [(1, 3), (2, 81), (3, 3)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 65, 5]]
** centroid: 2, normalized-entropy: 0.3712323266408756, [(2, 65), (3, 5)]
*** center 3: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [43, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [31, 13, 0]]
** centroid: 6, normalized-entropy: 0.8756633923230399, [(1, 31), (2, 13)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [89, 11, 0]]
** centroid: 7, normalized-entropy: 0.49991595816452816, [(1, 89), (2, 11)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23563631660863757] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23563631660863757, 0.18248866289481522] ***
*** starting iteration: 2; err: [Inf, 0.23563631660863757, 0.18248866289481522] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23563631660863757, 0.18248866289481522, 0.17221689261682332] ***
*** starting iteration: 3; err: [Inf, 0.23563631660863757, 0.18248866289481522, 0.17221689261682332] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23563631660863757, 0.18248866289481522, 0.17221689261682332, 0.1647350444206968] ***
*** finished computation of 7 references, err: [Inf, 0.23563631660863757, 0.18248866289481522, 0.17221689261682332, 0.1647350444206968] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [1, 79, 8]]
** centroid: 1, normalized-entropy: 0.3328964860293141, [(1, 1), (2, 79), (3, 8)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [120, 1, 0]]
** centroid: 2, normalized-entropy: 0.06905438212565047, [(1, 120), (2, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [29, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [30, 15, 0]]
** centroid: 4, normalized-entropy: 0.9182958340544894, [(1, 30), (2, 15)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 68, 3]]
** centroid: 5, normalized-entropy: 0.25253077151613923, [(2, 68), (3, 3)]
*** center 6: selecting labels [1] (freq >= 1) [from [123, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [20, 3, 0]]
** centroid: 7, normalized-entropy: 0.5586293734521991, [(1, 20), (2, 3)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23122239260189234] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23122239260189234, 0.1685776097662747] ***
*** starting iteration: 2; err: [Inf, 0.23122239260189234, 0.1685776097662747] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23122239260189234, 0.1685776097662747, 0.16191067170724271] ***
*** starting iteration: 3; err: [Inf, 0.23122239260189234, 0.1685776097662747, 0.16191067170724271] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23122239260189234, 0.1685776097662747, 0.16191067170724271, 0.158500177109614] ***
*** finished computation of 7 references, err: [Inf, 0.23122239260189234, 0.1685776097662747, 0.16191067170724271, 0.158500177109614] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [78, 10, 0]]
** centroid: 1, normalized-entropy: 0.5107878229540133, [(1, 78), (2, 10)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [72, 17, 0]]
** centroid: 2, normalized-entropy: 0.7035821005719904, [(1, 72), (2, 17)]
*** center 3: selecting labels [1] (freq >= 1) [from [134, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [31, 34, 0]]
** centroid: 4, normalized-entropy: 0.9984628557283827, [(1, 31), (2, 34)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 43, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 57, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 12, 12]]
** centroid: 7, normalized-entropy: 1.0, [(2, 12), (3, 12)]
finished with 11 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 345,3 => 21,1 => 634), Dict(2 => 373,3 => 36,1 => 591))
[ Info: ===== scores for single classifier: {"micro_f1":0.907,"precision":0.907,"recall":0.907,"macro_recall":0.9350202395479407,"macro_f1":0.8296725938732575,"accuracy":0.907,"class_f1":{"2":0.8781127129750983,"3":0.6605504587155963,"1":0.9503546099290779},"class_precision":{"2":0.8589743589743589,"3":0.4931506849315068,"1":0.9981378026070763},"class_recall":{"2":0.8981233243967829,"3":1.0,"1":0.9069373942470389}}
[ Info: ===== scores for 1: {"micro_f1":0.969,"precision":0.969,"recall":0.969,"macro_recall":0.9665682033198806,"macro_f1":0.922567027286442,"accuracy":0.969,"class_f1":{"2":0.9577080491132332,"3":0.8235294117647058,"1":0.9864636209813875},"class_precision":{"2":0.975,"3":0.7142857142857143,"1":0.9864636209813875},"class_recall":{"2":0.9410187667560321,"3":0.9722222222222222,"1":0.9864636209813875}}
[ Info: ===== scores for 5: {"micro_f1":0.965,"precision":0.965,"recall":0.965,"macro_recall":0.9723481051035113,"macro_f1":0.9126025075891838,"accuracy":0.965,"class_f1":{"2":0.9522510231923601,"3":0.8,"1":0.9855564995751912},"class_precision":{"2":0.9694444444444444,"3":0.6666666666666666,"1":0.9897610921501706},"class_recall":{"2":0.935656836461126,"3":1.0,"1":0.9813874788494078}}
[ Info: ===== scores for 7: {"micro_f1":0.964,"precision":0.964,"recall":0.964,"macro_recall":0.9717840893110691,"macro_f1":0.9173858559877445,"accuracy":0.964,"class_f1":{"2":0.9509536784741145,"3":0.8181818181818181,"1":0.9830220713073006},"class_precision":{"2":0.9667590027700831,"3":0.6923076923076923,"1":0.9863713798977853},"class_recall":{"2":0.935656836461126,"3":1.0,"1":0.9796954314720813}}
[ Info: ===== scores for 9: {"micro_f1":0.958,"precision":0.958,"recall":0.958,"macro_recall":0.9664221590161629,"macro_f1":0.9046804874493275,"accuracy":0.958,"class_f1":{"2":0.9423076923076923,"3":0.7912087912087912,"1":0.9805249788314988},"class_precision":{"2":0.9661971830985916,"3":0.6545454545454545,"1":0.9813559322033898},"class_recall":{"2":0.9195710455764075,"3":1.0,"1":0.9796954314720813}}
[ Info: ===== scores for 11: {"micro_f1":0.958,"precision":0.958,"recall":0.958,"macro_recall":0.9667517982728717,"macro_f1":0.9073755901246034,"accuracy":0.958,"class_f1":{"2":0.9424657534246577,"3":0.8,"1":0.9796610169491526},"class_precision":{"2":0.9635854341736695,"3":0.6666666666666666,"1":0.9813242784380306},"class_recall":{"2":0.9222520107238605,"3":1.0,"1":0.9780033840947546}}
(score = 0.967, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.967, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.969, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.969, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.97, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.97, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.971, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.971, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.968, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.968, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.965, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.965, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.961, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.961, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.964, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.964, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.971,"k":3,"kernel":"direct_kernel","dist":"l2_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.971,"precision":0.971,"recall":0.971,"macro_recall":0.976391478371582,"macro_f1":0.9169994589152702,"accuracy":0.971,"class_f1":{"2":0.960328317373461,"3":0.8,"1":0.9906700593723494},"class_precision":{"2":0.9804469273743017,"3":0.6666666666666666,"1":0.9931972789115646},"class_recall":{"2":0.9410187667560321,"3":1.0,"1":0.988155668358714}}
Test Summary: | Pass  Total
AKNC          |    8      8
[28, 1, 1, 1, 6, 1, 3, 1, 4, 4, 2, 10, 11, 13, 42, 6, 9, 2, 6, 8, 1, 20, 2, 3, 31, 4, 10, 20, 35, 1, 1, 1, 7, 7, 130, 6, 56, 3, 48, 3, 26, 1, 7, 18, 4, 1, 16, 2, 8, 2, 1, 5, 9, 6, 15, 52, 13, 5, 6, 8, 53, 9, 10, 7, 4, 142, 23, 28, 9, 6, 14, 3, 71, 7, 2, 16, 21, 8, 5, 8, 12, 112, 41, 4, 8, 11, 31, 103, 26, 4, 7, 29, 9, 27, 1498, 7, 3, 13, 31, 18, 9, 4, 77, 6, 11, 17, 61, 11, 85, 16, 31, 44, 34, 1, 12, 31, 28, 10, 7, 8, 29, 11, 10, 24, 6, 5, 46, 5, 4, 12, 71, 52, 43, 14, 48, 64, 4, 21, 7, 24, 14, 72, 5, 23, 65, 12, 20, 8, 9, 51, 20, 17, 7, 4, 2, 63, 52, 23, 3, 55, 8, 3, 5, 69, 93, 4, 225, 15, 74, 12, 10, 6, 6, 55, 16, 1, 27, 39, 7, 9, 32, 39, 19, 59, 28, 9, 22, 34, 46, 11, 43, 20, 2, 8, 128, 17, 98, 16, 2, 19, 31, 20, 15, 83, 19, 53, 24, 12, 9, 58, 13, 133, 29, 17, 31, 66, 70, 17, 112, 77, 21, 7, 12, 29, 23, 76, 19, 24, 12, 78, 37, 1, 57, 12, 32, 93, 322, 22, 25, 7, 133, 3, 37, 8, 25, 5, 1, 125, 6, 11, 16, 23, 66, 6, 160, 11, 23, 40, 6, 16, 23, 8, 7, 6, 47, 21, 105, 30, 1, 37, 21, 7, 24, 20, 31, 23, 10, 150, 47, 162, 23, 152, 8, 2, 24, 12, 6, 20, 6, 50, 4, 22, 9, 12, 65, 9, 166, 11, 19, 24]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6640000000000001, speedup = 0.31639583870690396, eval_ratio = 0.095389)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.40378224206349217,"recall":0.40104166666666674,"f1":null,"seconds":0.00013985857367515564,"exhaustive_search_seconds":0.00032038241624832153,"evaluations":571.203125,"distances_sum":1737.8293746346174}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5824652777777778,"recall":0.5824652777777778,"f1":null,"seconds":0.00023730844259262085,"exhaustive_search_seconds":0.00032038241624832153,"evaluations":789.1328125,"distances_sum":1648.3595438521215}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6883680555555552,"recall":0.6883680555555552,"f1":null,"seconds":0.0003979932516813278,"exhaustive_search_seconds":0.00032038241624832153,"evaluations":944.0390625,"distances_sum":1596.0937374341354}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.764756944444444,"recall":0.764756944444444,"f1":0.764756944444444,"seconds":0.000545356422662735,"exhaustive_search_seconds":0.00032038241624832153,"evaluations":1070.1484375,"distances_sum":1569.523194937121}
KCenters.DeloneInvIndex> reached performance {"precision":0.8177083333333325,"recall":0.8177083333333325,"f1":0.8177083333333325,"seconds":0.00043838098645210266,"exhaustive_search_seconds":0.00032038241624832153,"evaluations":1197.015625,"distances_sum":1553.0664726592265}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.7980000000000002, speedup = 0.5713792806003622, eval_ratio = 0.12426300000000001)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
