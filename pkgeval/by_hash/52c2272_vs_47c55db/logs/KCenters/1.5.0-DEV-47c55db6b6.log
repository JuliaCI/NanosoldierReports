Julia Version 1.5.0-DEV.725
Commit 47c55db6b6 (2020-04-30 08:05 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed PooledArrays ──────────────── v0.5.3
  Installed Reexport ──────────────────── v0.2.0
  Installed MappedArrays ──────────────── v0.2.2
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed Compat ────────────────────── v3.8.0
  Installed KCenters ──────────────────── v0.2.2
  Installed MLDataPattern ─────────────── v0.5.3
  Installed DataFrames ────────────────── v0.20.2
  Installed Tables ────────────────────── v1.0.4
  Installed DataValueInterfaces ───────── v1.0.0
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed InvertedIndices ───────────── v1.0.0
  Installed OrderedCollections ────────── v1.1.0
  Installed Parsers ───────────────────── v1.0.2
  Installed TableTraits ───────────────── v1.0.0
  Installed DataAPI ───────────────────── v1.3.0
  Installed DataStructures ────────────── v0.17.15
  Installed LearnBase ─────────────────── v0.2.2
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed Missings ──────────────────── v0.4.3
  Installed JSON ──────────────────────── v0.21.0
  Installed CategoricalArrays ─────────── v0.7.7
  Installed StatsBase ─────────────────── v0.32.2
  Installed MLDataUtils ───────────────── v0.5.1
  Installed SimilaritySearch ──────────── v0.3.19
Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.8.0
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.15
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v1.0.2
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_eFd9rd/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_eFd9rd/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.8.0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.15
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v1.0.2
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.9316620069742203
[ Info: 0.8321307849884033
[ Info: 0.5546774150431156
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.3260770692676306
mean(cdnet.distances) = 0.33844356166819733
mean(crand.distances) = 0.32979436847070853
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.22265625, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.22265625,"f1":null,"seconds":4.585832357406616e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":7.0,"distances_sum":608.8750630174646}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6806640625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6806640625,"f1":0.8005359224109231,"seconds":5.027279257774353e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":7.6640625,"distances_sum":1945.3308155191407}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.8599905303030312,"seconds":5.451962351799011e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.6328125,"distances_sum":2284.3817404373576}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.767578125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.767578125,"f1":0.8599905303030312,"seconds":5.451962351799011e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.6328125,"distances_sum":2284.3817404373576}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.954507471694972,"seconds":6.726011633872986e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.9140625,"distances_sum":2954.5678525620533}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9555860805860812,"seconds":6.822869181632996e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.9296875,"distances_sum":2959.1718190382035}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8369140625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8369140625,"f1":0.904890942390943,"seconds":6.44288957118988e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.7890625,"distances_sum":2550.1790439429724}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9228515625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9228515625,"f1":0.9555860805860812,"seconds":6.822869181632996e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.9296875,"distances_sum":2959.1718190382035}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9599988553113556,"seconds":6.631016731262207e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.96875,"distances_sum":3007.611529268283}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":5,"bsize":12}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9742387820512826,"seconds":6.735324859619141e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":9.0,"distances_sum":3087.6734834414474}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9677734375, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.9677734375,"f1":0.9823660714285718,"seconds":6.495043635368347e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.9765625,"distances_sum":3172.0005423516814}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9764709249084252,"seconds":6.16908073425293e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.9609375,"distances_sum":3125.094329745894}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9709306318681321,"seconds":5.714595317840576e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.96875,"distances_sum":3069.433502028715}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9677734375,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.9677734375,"f1":0.9823660714285718,"seconds":6.495043635368347e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.9765625,"distances_sum":3172.0005423516814}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9677734375,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.9677734375,"f1":0.9823660714285718,"seconds":6.495043635368347e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.9765625,"distances_sum":3172.0005423516814}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.455078125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.455078125,"f1":null,"seconds":4.438683390617371e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":6.671875,"distances_sum":1101.001411139207}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.455078125,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.455078125,"f1":null,"seconds":4.438683390617371e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":6.671875,"distances_sum":1101.001411139207}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.595703125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.595703125,"f1":0.7296665140415147,"seconds":4.366040229797363e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.8828125,"distances_sum":1540.3342942635663}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6650390625, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6650390625,"f1":0.7848909770784779,"seconds":4.522502422332764e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.8046875,"distances_sum":1743.5892059229013}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.8618594946719956,"seconds":5.219131708145142e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.7265625,"distances_sum":2084.1382426985574}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.767578125,"state":{"ssize":8,"bsize":5},"perf":{"precision":1.0,"recall":0.767578125,"f1":0.8618594946719956,"seconds":5.219131708145142e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.7265625,"distances_sum":2084.1382426985574}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9326381951381959,"seconds":5.686655640602112e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.875,"distances_sum":2512.5162125944453}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8662109375, conf: {"ssize":12,"bsize":7}, perf: {"precision":1.0,"recall":0.8662109375,"f1":0.9231742216117219,"seconds":5.591660737991333e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.9296875,"distances_sum":2447.421988019909}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9672275641025644,"seconds":5.861744284629822e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.953125,"distances_sum":2822.424755310005}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9593463827838831,"seconds":5.735084414482117e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.90625,"distances_sum":2736.9189014207936}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.936129495504496,"seconds":5.584210157394409e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8984375,"distances_sum":2562.564796673114}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8564453125, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8564453125,"f1":0.9157342657342665,"seconds":5.360692739486694e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.7578125,"distances_sum":2438.9098102136704}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94140625,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9672275641025644,"seconds":5.861744284629822e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.953125,"distances_sum":2822.424755310005}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94140625,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9672275641025644,"seconds":5.861744284629822e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.953125,"distances_sum":2822.424755310005}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.212890625, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.212890625,"f1":null,"seconds":6.3497573137283325e-6,"exhaustive_search_seconds":2.5779008865356445e-6,"evaluations":6.3359375,"distances_sum":523.3586913430341}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.40625, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.40625,"f1":null,"seconds":4.017725586891174e-6,"exhaustive_search_seconds":2.5779008865356445e-6,"evaluations":6.03125,"distances_sum":1007.9210272684339}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.40625,"state":{"ssize":3,"bsize":2},"perf":{"precision":null,"recall":0.40625,"f1":null,"seconds":4.017725586891174e-6,"exhaustive_search_seconds":2.5779008865356445e-6,"evaluations":6.03125,"distances_sum":1007.9210272684339}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.798828125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.798828125,"f1":0.8811303280053289,"seconds":0.00010626949369907379,"exhaustive_search_seconds":2.5779008865356445e-6,"evaluations":8.734375,"distances_sum":2313.7822600185536}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.798828125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.798828125,"f1":0.8811303280053289,"seconds":0.00010626949369907379,"exhaustive_search_seconds":2.5779008865356445e-6,"evaluations":8.734375,"distances_sum":2313.7822600185536}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.947979624542125,"seconds":6.141141057014465e-6,"exhaustive_search_seconds":2.5779008865356445e-6,"evaluations":8.859375,"distances_sum":2796.235530176573}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9543383699633704,"seconds":6.185844540596008e-6,"exhaustive_search_seconds":2.5779008865356445e-6,"evaluations":8.9609375,"distances_sum":2810.8138284703255}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91796875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9543383699633704,"seconds":6.185844540596008e-6,"exhaustive_search_seconds":2.5779008865356445e-6,"evaluations":8.9609375,"distances_sum":2810.8138284703255}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.91796875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9543383699633704,"seconds":6.185844540596008e-6,"exhaustive_search_seconds":2.5779008865356445e-6,"evaluations":8.9609375,"distances_sum":2810.8138284703255}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7724609375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7724609375,"f1":0.8638169122544131,"seconds":4.719942808151245e-6,"exhaustive_search_seconds":1.1101365089416504e-6,"evaluations":8.078125,"distances_sum":2109.892265337944}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3681640625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3681640625,"f1":null,"seconds":4.580244421958923e-6,"exhaustive_search_seconds":1.1101365089416504e-6,"evaluations":6.0859375,"distances_sum":925.3680987459742}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7724609375,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7724609375,"f1":0.8638169122544131,"seconds":4.719942808151245e-6,"exhaustive_search_seconds":1.1101365089416504e-6,"evaluations":8.078125,"distances_sum":2109.892265337944}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9493532509157513,"seconds":7.2177499532699585e-6,"exhaustive_search_seconds":1.1101365089416504e-6,"evaluations":8.828125,"distances_sum":2676.5729324634317}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9541354478854484,"seconds":6.701797246932983e-6,"exhaustive_search_seconds":1.1101365089416504e-6,"evaluations":8.828125,"distances_sum":2679.023867596629}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.779296875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.779296875,"f1":0.8708192848817858,"seconds":5.366280674934387e-6,"exhaustive_search_seconds":1.1101365089416504e-6,"evaluations":8.15625,"distances_sum":2141.9200327266026}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9189453125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9189453125,"f1":0.9541354478854484,"seconds":6.701797246932983e-6,"exhaustive_search_seconds":1.1101365089416504e-6,"evaluations":8.828125,"distances_sum":2679.023867596629}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9638671875, conf: {"ssize":4,"bsize":13}, perf: {"precision":1.0,"recall":0.9638671875,"f1":0.9801167582417585,"seconds":6.321817636489868e-6,"exhaustive_search_seconds":1.1101365089416504e-6,"evaluations":8.953125,"distances_sum":2875.577511829919}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.9769001831501835,"seconds":6.115064024925232e-6,"exhaustive_search_seconds":1.1101365089416504e-6,"evaluations":8.859375,"distances_sum":2877.445047784581}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9722298534798538,"seconds":6.143003702163696e-6,"exhaustive_search_seconds":1.1101365089416504e-6,"evaluations":8.8828125,"distances_sum":2826.716318518386}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":12,"bsize":10}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9612809065934068,"seconds":7.063150405883789e-6,"exhaustive_search_seconds":1.1101365089416504e-6,"evaluations":8.875,"distances_sum":2747.700278474483}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9632268772893774,"seconds":6.239861249923706e-6,"exhaustive_search_seconds":1.1101365089416504e-6,"evaluations":8.8828125,"distances_sum":2733.072931646633}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.955070970695971,"seconds":5.884096026420593e-6,"exhaustive_search_seconds":1.1101365089416504e-6,"evaluations":8.7734375,"distances_sum":2714.7197841005013}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9638671875,"state":{"ssize":4,"bsize":13},"perf":{"precision":1.0,"recall":0.9638671875,"f1":0.9801167582417585,"seconds":6.321817636489868e-6,"exhaustive_search_seconds":1.1101365089416504e-6,"evaluations":8.953125,"distances_sum":2875.577511829919}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9638671875,"state":{"ssize":4,"bsize":13},"perf":{"precision":1.0,"recall":0.9638671875,"f1":0.9801167582417585,"seconds":6.321817636489868e-6,"exhaustive_search_seconds":1.1101365089416504e-6,"evaluations":8.953125,"distances_sum":2875.577511829919}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4111328125, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.4111328125,"f1":null,"seconds":4.06801700592041e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":6.5859375,"distances_sum":978.0664553172812}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6787109375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6787109375,"f1":0.7965985403485412,"seconds":5.187466740608215e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":7.9453125,"distances_sum":1751.1029261811354}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6787109375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6787109375,"f1":0.7965985403485412,"seconds":5.187466740608215e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":7.9453125,"distances_sum":1751.1029261811354}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9638049450549454,"seconds":6.379559636116028e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.9375,"distances_sum":2677.17757691339}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7802734375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7802734375,"f1":0.8662944694194702,"seconds":5.4854899644851685e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.453125,"distances_sum":2083.6566845301613}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.935546875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9638049450549454,"seconds":6.379559636116028e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.9375,"distances_sum":2677.17757691339}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9740384615384619,"seconds":6.226822733879089e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.96875,"distances_sum":2733.728568454621}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9541015625,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9740384615384619,"seconds":6.226822733879089e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.96875,"distances_sum":2733.728568454621}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9541015625,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9740384615384619,"seconds":6.226822733879089e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.96875,"distances_sum":2733.728568454621}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4013671875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4013671875,"f1":null,"seconds":8.404254913330078e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":6.046875,"distances_sum":692.8414411413629}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.26953125, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.26953125,"f1":null,"seconds":4.129484295845032e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":5.984375,"distances_sum":537.6636179335651}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.611328125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.611328125,"f1":0.745102640415141,"seconds":5.356967449188232e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":7.546875,"distances_sum":1147.8483586202817}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.611328125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.611328125,"f1":0.745102640415141,"seconds":5.356967449188232e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":7.546875,"distances_sum":1147.8483586202817}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.950303342490843,"seconds":6.837770342826843e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.828125,"distances_sum":2041.756968844341}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.875,"f1":0.926539606227107,"seconds":7.588416337966919e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.6953125,"distances_sum":1921.0294648268375}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.783203125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.783203125,"f1":0.871684045121546,"seconds":6.722286343574524e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.1484375,"distances_sum":1581.6583931376936}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6357421875, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.6357421875,"f1":0.763261391386392,"seconds":1.0402873158454895e-5,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":7.65625,"distances_sum":1201.663701763529}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9130859375,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.950303342490843,"seconds":6.837770342826843e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.828125,"distances_sum":2041.756968844341}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.958984375, conf: {"ssize":5,"bsize":12}, perf: {"precision":1.0,"recall":0.958984375,"f1":0.977438186813187,"seconds":4.1190534830093384e-5,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.9765625,"distances_sum":2160.4912085813803}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9673992673992677,"seconds":7.072463631629944e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.9375,"distances_sum":2108.5520713606593}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9618163086913092,"seconds":7.016584277153015e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.8671875,"distances_sum":2093.1354026382287}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.958984375,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.977438186813187,"seconds":4.1190534830093384e-5,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.9765625,"distances_sum":2160.4912085813803}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.958984375,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.977438186813187,"seconds":4.1190534830093384e-5,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.9765625,"distances_sum":2160.4912085813803}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7626953125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7626953125,"f1":0.8575206043956053,"seconds":7.214024662971497e-6,"exhaustive_search_seconds":1.993030309677124e-6,"evaluations":8.2890625,"distances_sum":1609.2314527505687}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7646484375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7646484375,"f1":0.8579019938394945,"seconds":6.226822733879089e-6,"exhaustive_search_seconds":1.993030309677124e-6,"evaluations":8.1875,"distances_sum":1609.7910603608877}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7646484375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7646484375,"f1":0.8579019938394945,"seconds":6.226822733879089e-6,"exhaustive_search_seconds":1.993030309677124e-6,"evaluations":8.1875,"distances_sum":1609.7910603608877}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9489125457875465,"seconds":7.243826985359192e-6,"exhaustive_search_seconds":1.993030309677124e-6,"evaluations":8.859375,"distances_sum":2141.639478828828}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.873046875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.873046875,"f1":0.9270489926739934,"seconds":6.530433893203735e-6,"exhaustive_search_seconds":1.993030309677124e-6,"evaluations":8.8828125,"distances_sum":2003.3765754056203}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.912109375,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.912109375,"f1":0.9489125457875465,"seconds":7.243826985359192e-6,"exhaustive_search_seconds":1.993030309677124e-6,"evaluations":8.859375,"distances_sum":2141.639478828828}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9641426282051289,"seconds":6.118789315223694e-6,"exhaustive_search_seconds":1.993030309677124e-6,"evaluations":8.9453125,"distances_sum":2234.9716158729416}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9679143772893777,"seconds":6.236135959625244e-6,"exhaustive_search_seconds":1.993030309677124e-6,"evaluations":8.9453125,"distances_sum":2246.1824315288522}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9423828125,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9679143772893777,"seconds":6.236135959625244e-6,"exhaustive_search_seconds":1.993030309677124e-6,"evaluations":8.9453125,"distances_sum":2246.1824315288522}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9423828125,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9679143772893777,"seconds":6.236135959625244e-6,"exhaustive_search_seconds":1.993030309677124e-6,"evaluations":8.9453125,"distances_sum":2246.1824315288522}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4150390625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4150390625,"f1":null,"seconds":3.827735781669617e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":6.1328125,"distances_sum":801.5375539240846}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.26171875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.26171875,"f1":null,"seconds":3.559514880180359e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":6.328125,"distances_sum":558.3667416079096}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4150390625,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.4150390625,"f1":null,"seconds":3.827735781669617e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":6.1328125,"distances_sum":801.5375539240846}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.65625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.65625,"f1":0.782954025141526,"seconds":5.057081580162048e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.9453125,"distances_sum":1352.190055359672}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.662109375, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.662109375,"f1":0.7862115315240323,"seconds":5.027279257774353e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.0,"distances_sum":1368.5229233591908}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.662109375,"state":{"ssize":6,"bsize":4},"perf":{"precision":1.0,"recall":0.662109375,"f1":0.7862115315240323,"seconds":5.027279257774353e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.0,"distances_sum":1368.5229233591908}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9542353479853485,"seconds":6.0461461544036865e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8671875,"distances_sum":2227.4945384198577}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76953125, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.76953125,"f1":0.8614187895437903,"seconds":5.7015568017959595e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.2734375,"distances_sum":1654.2079233408883}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.845703125, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.845703125,"f1":0.9110061813186822,"seconds":5.925074219703674e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.921875,"distances_sum":1924.3471531289547}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9528674450549456,"seconds":6.105750799179077e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8125,"distances_sum":2242.5720243483634}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.919921875,"state":{"ssize":9,"bsize":8},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.9542353479853485,"seconds":6.0461461544036865e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8671875,"distances_sum":2227.4945384198577}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.919921875,"state":{"ssize":9,"bsize":8},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.9542353479853485,"seconds":6.0461461544036865e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8671875,"distances_sum":2227.4945384198577}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.244140625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.244140625,"f1":null,"seconds":3.552064299583435e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":6.6328125,"distances_sum":532.9394310611949}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7802734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7802734375,"f1":0.8696459790209798,"seconds":5.329027771949768e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":7.8828125,"distances_sum":1716.1100194699668}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7802734375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7802734375,"f1":0.8696459790209798,"seconds":5.329027771949768e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":7.8828125,"distances_sum":1716.1100194699668}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8701171875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8701171875,"f1":0.9249287171162176,"seconds":6.0498714447021484e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.8828125,"distances_sum":2056.7671140062143}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8701171875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8701171875,"f1":0.9249287171162176,"seconds":6.0498714447021484e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.8828125,"distances_sum":2056.7671140062143}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9527014652014658,"seconds":6.098300218582153e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.9453125,"distances_sum":2230.162494661103}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9655334249084253,"seconds":6.157904863357544e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.984375,"distances_sum":2309.4323350773097}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.957469093406594,"seconds":6.357207894325256e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.9453125,"distances_sum":2277.639039164295}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9375,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9655334249084253,"seconds":6.157904863357544e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.984375,"distances_sum":2309.4323350773097}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9375,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9655334249084253,"seconds":6.157904863357544e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.984375,"distances_sum":2309.4323350773097}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.650390625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.650390625,"f1":0.7740431443556453,"seconds":4.736706614494324e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":7.1484375,"distances_sum":1450.341855909029}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.669921875, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.669921875,"f1":0.7913674866799872,"seconds":4.636123776435852e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":7.1796875,"distances_sum":1495.555680133387}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.669921875,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.669921875,"f1":0.7913674866799872,"seconds":4.636123776435852e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":7.1796875,"distances_sum":1495.555680133387}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9330070970695976,"seconds":5.982816219329834e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.8125,"distances_sum":2192.2187197402463}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76171875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.76171875,"f1":0.8566719738594747,"seconds":5.27501106262207e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":7.8515625,"distances_sum":1757.6306284404668}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.810546875, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.810546875,"f1":0.8867195304695313,"seconds":5.636364221572876e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.3515625,"distances_sum":1951.0901562069641}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8818359375,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.8818359375,"f1":0.9330070970695976,"seconds":5.982816219329834e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.8125,"distances_sum":2192.2187197402463}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.958671016483517,"seconds":6.094574928283691e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.828125,"distances_sum":2379.8563201721176}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9603136446886451,"seconds":6.081536412239075e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.8828125,"distances_sum":2390.317877358645}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9296875,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.9296875,"f1":0.9603136446886451,"seconds":6.081536412239075e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.8828125,"distances_sum":2390.317877358645}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9296875,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.9296875,"f1":0.9603136446886451,"seconds":6.081536412239075e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.8828125,"distances_sum":2390.317877358645}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.556640625, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.556640625,"f1":0.7012574231324237,"seconds":4.470348358154297e-6,"exhaustive_search_seconds":1.6186386346817017e-6,"evaluations":6.8984375,"distances_sum":1176.6370923970048}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.455078125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.455078125,"f1":null,"seconds":4.073604941368103e-6,"exhaustive_search_seconds":1.6186386346817017e-6,"evaluations":6.3515625,"distances_sum":934.884852724426}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.556640625,"state":{"ssize":2,"bsize":3},"perf":{"precision":1.0,"recall":0.556640625,"f1":0.7012574231324237,"seconds":4.470348358154297e-6,"exhaustive_search_seconds":1.6186386346817017e-6,"evaluations":6.8984375,"distances_sum":1176.6370923970048}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7578125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7578125,"f1":0.8530943015318022,"seconds":5.248934030532837e-6,"exhaustive_search_seconds":1.6186386346817017e-6,"evaluations":7.796875,"distances_sum":1711.6702451403296}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6669921875, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6669921875,"f1":0.7910896395271404,"seconds":5.012378096580505e-6,"exhaustive_search_seconds":1.6186386346817017e-6,"evaluations":7.65625,"distances_sum":1513.8825943308564}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7734375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7734375,"f1":0.8640031843156851,"seconds":5.2209943532943726e-6,"exhaustive_search_seconds":1.6186386346817017e-6,"evaluations":7.8828125,"distances_sum":1803.5080737790242}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5576171875, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.5576171875,"f1":0.7003661269286274,"seconds":4.4442713260650635e-6,"exhaustive_search_seconds":1.6186386346817017e-6,"evaluations":6.890625,"distances_sum":1180.1970356019422}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7734375,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7734375,"f1":0.8640031843156851,"seconds":5.2209943532943726e-6,"exhaustive_search_seconds":1.6186386346817017e-6,"evaluations":7.8828125,"distances_sum":1803.5080737790242}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9746108058608061,"seconds":6.3069164752960205e-6,"exhaustive_search_seconds":1.6186386346817017e-6,"evaluations":8.9921875,"distances_sum":2509.704802558326}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.818359375, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.818359375,"f1":0.8945658508158516,"seconds":5.714595317840576e-6,"exhaustive_search_seconds":1.6186386346817017e-6,"evaluations":8.640625,"distances_sum":1991.7645742368582}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9541015625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9746108058608061,"seconds":6.3069164752960205e-6,"exhaustive_search_seconds":1.6186386346817017e-6,"evaluations":8.9921875,"distances_sum":2509.704802558326}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9541015625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9746108058608061,"seconds":6.3069164752960205e-6,"exhaustive_search_seconds":1.6186386346817017e-6,"evaluations":8.9921875,"distances_sum":2509.704802558326}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7783203125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7783203125,"f1":0.8702469405594413,"seconds":5.412846803665161e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.3046875,"distances_sum":1792.5151335497296}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.537109375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.537109375,"f1":0.6844775016650022,"seconds":4.410743713378906e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":6.7265625,"distances_sum":1125.1703291713861}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.677734375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.677734375,"f1":0.7974260114885122,"seconds":4.939734935760498e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":7.6796875,"distances_sum":1528.5099519262553}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7783203125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7783203125,"f1":0.8702469405594413,"seconds":5.412846803665161e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.3046875,"distances_sum":1792.5151335497296}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9665038086913087,"seconds":6.2175095081329346e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.8828125,"distances_sum":2503.603152313567}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9513679029304033,"seconds":6.096437573432922e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.8359375,"distances_sum":2396.3448695301063}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8466796875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8466796875,"f1":0.911564477189478,"seconds":5.772337317466736e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.828125,"distances_sum":2082.922512310211}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94140625,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9665038086913087,"seconds":6.2175095081329346e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.8828125,"distances_sum":2503.603152313567}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9707989926739929,"seconds":6.385147571563721e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.9609375,"distances_sum":2491.1921691938423}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9717662545787547,"seconds":6.277114152908325e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.9296875,"distances_sum":2523.9871034373605}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94921875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9717662545787547,"seconds":6.277114152908325e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.9296875,"distances_sum":2523.9871034373605}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94921875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9717662545787547,"seconds":6.277114152908325e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.9296875,"distances_sum":2523.9871034373605}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5478515625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5478515625,"f1":0.6949252136752142,"seconds":4.569068551063538e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":6.484375,"distances_sum":1226.8261580713054}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.546875, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.546875,"f1":0.6925579628704633,"seconds":4.582107067108154e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":6.46875,"distances_sum":1234.6798532947062}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.63671875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.63671875,"f1":0.7674917096792104,"seconds":4.837289452552795e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":7.1640625,"distances_sum":1483.8868834606203}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.63671875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.63671875,"f1":0.7674917096792104,"seconds":4.837289452552795e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":7.1640625,"distances_sum":1483.8868834606203}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.66796875, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.66796875,"f1":0.7921401515151524,"seconds":4.947185516357422e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":7.3125,"distances_sum":1544.5849619204498}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.932770354645355,"seconds":5.967915058135986e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.828125,"distances_sum":2310.475404649059}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8232421875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8232421875,"f1":0.8965347152847161,"seconds":5.4854899644851685e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.4609375,"distances_sum":2068.9903635841597}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.65234375, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.65234375,"f1":0.776008193195694,"seconds":4.775822162628174e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":7.1953125,"distances_sum":1493.41236392497}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.884765625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.884765625,"f1":0.932770354645355,"seconds":5.967915058135986e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.828125,"distances_sum":2310.475404649059}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9352277930402936,"seconds":5.908310413360596e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.8515625,"distances_sum":2332.0537607472534}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9705586080586083,"seconds":6.211921572685242e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.9296875,"distances_sum":2583.558392926984}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9545844780219783,"seconds":6.105750799179077e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.84375,"distances_sum":2488.8380227347056}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9466059981684988,"seconds":6.051734089851379e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.9296875,"distances_sum":2423.791262879068}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9705586080586083,"seconds":6.211921572685242e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.9296875,"distances_sum":2583.558392926984}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9705586080586083,"seconds":6.211921572685242e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.9296875,"distances_sum":2583.558392926984}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2890625, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2890625,"f1":null,"seconds":3.602355718612671e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":5.8828125,"distances_sum":722.4505129589264}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4296875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4296875,"f1":null,"seconds":3.820285201072693e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":5.8671875,"distances_sum":952.0345787906451}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4296875,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.4296875,"f1":null,"seconds":3.820285201072693e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":5.8671875,"distances_sum":952.0345787906451}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4580078125, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.4580078125,"f1":null,"seconds":3.851950168609619e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":6.0234375,"distances_sum":1083.119215687289}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5537109375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5537109375,"f1":0.6979040057165063,"seconds":4.429370164871216e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":6.7109375,"distances_sum":1291.2012835527269}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4365234375, conf: {"ssize":6,"bsize":2}, perf: {"precision":null,"recall":0.4365234375,"f1":null,"seconds":3.859400749206543e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":5.9609375,"distances_sum":947.9731084717821}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7734375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7734375,"f1":0.8661692474192482,"seconds":5.3085386753082275e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":7.78125,"distances_sum":1946.9432970047426}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7734375,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7734375,"f1":0.8661692474192482,"seconds":5.3085386753082275e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":7.78125,"distances_sum":1946.9432970047426}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8115234375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8115234375,"f1":0.8889745670995679,"seconds":5.723908543586731e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.453125,"distances_sum":2093.6803753761346}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9646062271062276,"seconds":6.042420864105225e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.8984375,"distances_sum":2622.61620407382}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.798828125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.798828125,"f1":0.8826121794871805,"seconds":5.736947059631348e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.3203125,"distances_sum":2055.54048431496}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9365234375,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9646062271062276,"seconds":6.042420864105225e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.8984375,"distances_sum":2622.61620407382}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9365234375,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9646062271062276,"seconds":6.042420864105225e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.8984375,"distances_sum":2622.61620407382}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.736328125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.736328125,"f1":0.8338990870240879,"seconds":5.317851901054382e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":7.8359375,"distances_sum":1763.1038497289808}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.38671875, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.38671875,"f1":null,"seconds":3.954395651817322e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":5.984375,"distances_sum":828.7975607151438}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.736328125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.736328125,"f1":0.8338990870240879,"seconds":5.317851901054382e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":7.8359375,"distances_sum":1763.1038497289808}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8642578125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8642578125,"f1":0.9214634324009333,"seconds":6.075948476791382e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":8.7421875,"distances_sum":2220.730214260541}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8291015625, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8291015625,"f1":0.9006327006327014,"seconds":5.716457962989807e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":8.453125,"distances_sum":2070.356229093944}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87109375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.87109375,"f1":0.9241394022644032,"seconds":6.07222318649292e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":8.6875,"distances_sum":2282.3509872448717}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.87109375,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.87109375,"f1":0.9241394022644032,"seconds":6.07222318649292e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":8.6875,"distances_sum":2282.3509872448717}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9518715659340664,"seconds":6.051734089851379e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":8.875,"distances_sum":2432.0948773159735}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9506753663003669,"seconds":6.254762411117554e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":8.859375,"distances_sum":2412.537378912395}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9336054570429577,"seconds":5.820766091346741e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":8.7578125,"distances_sum":2280.5230427985316}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9544356684981687,"seconds":6.3534826040267944e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":8.9140625,"distances_sum":2420.5891966687504}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9586569680319686,"seconds":6.258487701416016e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":8.84375,"distances_sum":2501.68194693823}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9479452838827843,"seconds":5.945563316345215e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":8.78125,"distances_sum":2431.3624123212257}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.927734375,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.9586569680319686,"seconds":6.258487701416016e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":8.84375,"distances_sum":2501.68194693823}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.927734375,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.9586569680319686,"seconds":6.258487701416016e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":8.84375,"distances_sum":2501.68194693823}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.615234375, conf: {"ssize":3,"bsize":4}, perf: {"precision":0.9878906249999999,"recall":0.615234375,"f1":0.7485470258907767,"seconds":4.7050416469573975e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":6.9609375,"distances_sum":1696.820157483377}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5048828125, conf: {"ssize":3,"bsize":3}, perf: {"precision":0.9798177083333334,"recall":0.5048828125,"f1":0.6531261273448777,"seconds":4.259869456291199e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":6.3671875,"distances_sum":1314.8110841663752}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.353515625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.353515625,"f1":null,"seconds":3.848224878311157e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":5.7578125,"distances_sum":1003.257385560454}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.615234375,"state":{"ssize":3,"bsize":4},"perf":{"precision":0.9878906249999999,"recall":0.615234375,"f1":0.7485470258907767,"seconds":4.7050416469573975e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":6.9609375,"distances_sum":1696.820157483377}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":1,"bsize":7}, perf: {"precision":0.9921409970238096,"recall":0.8818359375,"f1":0.9289773377664007,"seconds":5.953013896942139e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.8203125,"distances_sum":2897.411118276019}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":1,"bsize":8}, perf: {"precision":0.9893043154761905,"recall":0.8935546875,"f1":0.9339185554029308,"seconds":6.113201379776001e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.734375,"distances_sum":3035.6429305354172}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.865234375, conf: {"ssize":7,"bsize":7}, perf: {"precision":0.9893973214285715,"recall":0.865234375,"f1":0.9186484088827843,"seconds":5.887821316719055e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.8125,"distances_sum":2819.228425314649}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8935546875,"state":{"ssize":1,"bsize":8},"perf":{"precision":0.9893043154761905,"recall":0.8935546875,"f1":0.9339185554029308,"seconds":6.113201379776001e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.734375,"distances_sum":3035.6429305354172}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":3,"bsize":8}, perf: {"precision":0.991396949404762,"recall":0.9287109375,"f1":0.956375200320513,"seconds":6.183981895446777e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.96875,"distances_sum":3118.6266205699753}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":3,"bsize":11}, perf: {"precision":0.986700148809524,"recall":0.9326171875,"f1":0.956028476731602,"seconds":6.644055247306824e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.9453125,"distances_sum":3153.0040530059186}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":2,"bsize":12}, perf: {"precision":0.9909319196428572,"recall":0.955078125,"f1":0.9713634672619049,"seconds":6.562098860740662e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.984375,"distances_sum":3259.192230458772}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":3,"bsize":10}, perf: {"precision":0.9899553571428572,"recall":0.939453125,"f1":0.962276785714286,"seconds":6.185844540596008e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.9375,"distances_sum":3188.608759162657}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":6,"bsize":10}, perf: {"precision":0.9899553571428572,"recall":0.9365234375,"f1":0.9600675366300369,"seconds":6.070360541343689e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.953125,"distances_sum":3175.757513987582}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.955078125,"state":{"ssize":2,"bsize":12},"perf":{"precision":0.9909319196428572,"recall":0.955078125,"f1":0.9713634672619049,"seconds":6.562098860740662e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.984375,"distances_sum":3259.192230458772}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.955078125,"state":{"ssize":2,"bsize":12},"perf":{"precision":0.9909319196428572,"recall":0.955078125,"f1":0.9713634672619049,"seconds":6.562098860740662e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.984375,"distances_sum":3259.192230458772}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5146484375, conf: {"ssize":3,"bsize":3}, perf: {"precision":null,"recall":0.5146484375,"f1":null,"seconds":4.230067133903503e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":6.375,"distances_sum":1390.7192168403317}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7236328125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7236328125,"f1":0.8318004911754918,"seconds":5.250796675682068e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":7.8203125,"distances_sum":2045.5890011784}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7236328125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7236328125,"f1":0.8318004911754918,"seconds":5.250796675682068e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":7.8203125,"distances_sum":2045.5890011784}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9420615842490848,"seconds":5.848705768585205e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.6171875,"distances_sum":2938.585835186671}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.896484375,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.896484375,"f1":0.9420615842490848,"seconds":5.848705768585205e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.6171875,"distances_sum":2938.585835186671}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":3,"bsize":12}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.976934523809524,"seconds":6.260350346565247e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.890625,"distances_sum":3140.101784506726}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9681032509157516,"seconds":6.1355531215667725e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.875,"distances_sum":3069.908525486812}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9580078125,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.976934523809524,"seconds":6.260350346565247e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.890625,"distances_sum":3140.101784506726}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9580078125,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.976934523809524,"seconds":6.260350346565247e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.890625,"distances_sum":3140.101784506726}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.771484375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.771484375,"f1":0.8619307775557784,"seconds":5.412846803665161e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.9609375,"distances_sum":2246.109326165879}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.771484375,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.771484375,"f1":0.8619307775557784,"seconds":5.412846803665161e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.9609375,"distances_sum":2246.109326165879}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.873046875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.873046875,"f1":0.9260390651015656,"seconds":5.949288606643677e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.7421875,"distances_sum":2738.427124387249}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9470867673992681,"seconds":5.835667252540588e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.8125,"distances_sum":2899.5592071441197}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.875, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.875,"f1":0.9283825549450555,"seconds":5.666166543960571e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.5625,"distances_sum":2861.58544520313}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9072265625,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.9072265625,"f1":0.9470867673992681,"seconds":5.835667252540588e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.8125,"distances_sum":2899.5592071441197}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":6,"bsize":11}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9735119047619051,"seconds":6.2175095081329346e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.890625,"distances_sum":3104.9779274340804}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.967599587912088,"seconds":5.951151251792908e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.90625,"distances_sum":3064.6218215630324}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9521484375,"state":{"ssize":6,"bsize":11},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9735119047619051,"seconds":6.2175095081329346e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.890625,"distances_sum":3104.9779274340804}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9521484375,"state":{"ssize":6,"bsize":11},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9735119047619051,"seconds":6.2175095081329346e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.890625,"distances_sum":3104.9779274340804}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.580078125, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.580078125,"f1":0.7174020424020429,"seconds":4.557892680168152e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":7.359375,"distances_sum":1438.5413863351914}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.580078125,"state":{"ssize":5,"bsize":3},"perf":{"precision":1.0,"recall":0.580078125,"f1":0.7174020424020429,"seconds":4.557892680168152e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":7.359375,"distances_sum":1438.5413863351914}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7314453125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7314453125,"f1":0.8313559704184712,"seconds":5.153939127922058e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":7.8984375,"distances_sum":2066.330072582887}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7783203125, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.7783203125,"f1":0.8689019314019323,"seconds":5.388632416725159e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":8.265625,"distances_sum":2184.8923876866997}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9384417665667668,"seconds":5.9157609939575195e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":8.7890625,"distances_sum":2829.6137150236573}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8935546875,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.8935546875,"f1":0.9384417665667668,"seconds":5.9157609939575195e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":8.7890625,"distances_sum":2829.6137150236573}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9427712912087918,"seconds":5.837529897689819e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":8.78125,"distances_sum":2855.031008384918}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.900390625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.900390625,"f1":0.9427712912087918,"seconds":5.837529897689819e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":8.78125,"distances_sum":2855.031008384918}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.900390625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.900390625,"f1":0.9427712912087918,"seconds":5.837529897689819e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":8.78125,"distances_sum":2855.031008384918}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.69140625, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.69140625,"f1":0.8022416819291828,"seconds":5.48921525478363e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":7.6640625,"distances_sum":1829.1783325493104}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6064453125, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.6064453125,"f1":0.7384499181374187,"seconds":4.7441571950912476e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":7.484375,"distances_sum":1490.6256731891542}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.69140625,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.69140625,"f1":0.8022416819291828,"seconds":5.48921525478363e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":7.6640625,"distances_sum":1829.1783325493104}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.810546875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.810546875,"f1":0.8873948967698976,"seconds":5.766749382019043e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.6875,"distances_sum":2415.2918456560847}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.810546875,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.810546875,"f1":0.8873948967698976,"seconds":5.766749382019043e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.6875,"distances_sum":2415.2918456560847}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9719322344322348,"seconds":6.621703505516052e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.921875,"distances_sum":3079.1786352133713}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8310546875, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8310546875,"f1":0.9034886988011998,"seconds":5.796551704406738e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.9296875,"distances_sum":2449.4033016424255}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9740155677655679,"seconds":6.418675184249878e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.8984375,"distances_sum":3108.1677285680807}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.953125,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9740155677655679,"seconds":6.418675184249878e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.8984375,"distances_sum":3108.1677285680807}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.953125,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9740155677655679,"seconds":6.418675184249878e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.8984375,"distances_sum":3108.1677285680807}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.130859375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.130859375,"f1":null,"seconds":3.25031578540802e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":4.078125,"distances_sum":375.4233597703527}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.314453125, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.314453125,"f1":null,"seconds":3.5781413316726685e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":4.8671875,"distances_sum":868.5540344896592}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.314453125,"state":{"ssize":5,"bsize":2},"perf":{"precision":null,"recall":0.314453125,"f1":null,"seconds":3.5781413316726685e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":4.8671875,"distances_sum":868.5540344896592}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.509765625, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.509765625,"f1":0.6586378898878905,"seconds":4.1816383600234985e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":6.4453125,"distances_sum":1444.2940364693084}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6708984375, conf: {"ssize":4,"bsize":4}, perf: {"precision":null,"recall":0.6708984375,"f1":null,"seconds":4.800036549568176e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.546875,"distances_sum":1910.9106697734512}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7734375,"f1":0.862530178155179,"seconds":5.470588803291321e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.09375,"distances_sum":2219.541897699383}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7734375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7734375,"f1":0.862530178155179,"seconds":5.470588803291321e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.09375,"distances_sum":2219.541897699383}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.931599650349651,"seconds":6.776303052902222e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.59375,"distances_sum":2764.782826975174}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.932706876456877,"seconds":5.852431058883667e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.5625,"distances_sum":2828.0768639338044}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8837890625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8837890625,"f1":0.931599650349651,"seconds":6.776303052902222e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.59375,"distances_sum":2764.782826975174}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8837890625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8837890625,"f1":0.931599650349651,"seconds":6.776303052902222e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.59375,"distances_sum":2764.782826975174}}, n: 9
mean(cfft.distances) = 0.32607706864027086
mean(cdnet.distances) = 0.3551283087080772
mean(crand.distances) = 0.3477414757735126
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8755555555555556
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.9577777777777778
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8422222222222221
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8844444444444445
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.9266666666666666
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9022222222222221
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9377777777777778
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9422222222222222
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8644444444444446
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.9400000000000001
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8866666666666667
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8622222222222221
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9355555555555556
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9088888888888889
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9133333333333334
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9288888888888889
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9111111111111111
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.9
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.9311111111111111
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.9066666666666666
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8577777777777778
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9244444444444445
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.8844444444444445
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.9044444444444445
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.8933333333333334
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9088888888888889
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.9044444444444445
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.9
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9199999999999999
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9111111111111111
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.888888888888889
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 8, 6]]
** centroid: 6, normalized-entropy: 0.9852281360342514, [(2, 8), (3, 6)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 14, 1]]
** centroid: 9, normalized-entropy: 0.3533593350214213, [(2, 14), (3, 1)]
*** center 10: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 1, 8]]
** centroid: 11, normalized-entropy: 0.5032583347756457, [(2, 1), (3, 8)]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 3, 2, 3, 2, 3, 2, 1, 2, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 8, 6]]
** centroid: 6, normalized-entropy: 0.9852281360342514, [(2, 8), (3, 6)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 14, 1]]
** centroid: 9, normalized-entropy: 0.3533593350214213, [(2, 14), (3, 1)]
*** center 10: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 1, 8]]
** centroid: 11, normalized-entropy: 0.5032583347756457, [(2, 1), (3, 8)]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 3, 2, 3, 2, 3, 2, 1, 2, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 8, 6]]
** centroid: 6, normalized-entropy: 0.9852281360342514, [(2, 8), (3, 6)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 14, 1]]
** centroid: 9, normalized-entropy: 0.3533593350214213, [(2, 14), (3, 1)]
*** center 10: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 1, 8]]
** centroid: 11, normalized-entropy: 0.5032583347756457, [(2, 1), (3, 8)]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 3, 2, 3, 2, 3, 2, 1, 2, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 8, 6]]
** centroid: 6, normalized-entropy: 0.9852281360342514, [(2, 8), (3, 6)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 14, 1]]
** centroid: 9, normalized-entropy: 0.3533593350214213, [(2, 14), (3, 1)]
*** center 10: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 1, 8]]
** centroid: 11, normalized-entropy: 0.5032583347756457, [(2, 1), (3, 8)]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 3, 2, 3, 2, 3, 2, 1, 2, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 8, 6]]
** centroid: 6, normalized-entropy: 0.9852281360342514, [(2, 8), (3, 6)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 14, 1]]
** centroid: 9, normalized-entropy: 0.3533593350214213, [(2, 14), (3, 1)]
*** center 10: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 1, 8]]
** centroid: 11, normalized-entropy: 0.5032583347756457, [(2, 1), (3, 8)]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 3, 2, 3, 2, 3, 2, 1, 2, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 8, 6]]
** centroid: 6, normalized-entropy: 0.9852281360342514, [(2, 8), (3, 6)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 14, 1]]
** centroid: 9, normalized-entropy: 0.3533593350214213, [(2, 14), (3, 1)]
*** center 10: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 1, 8]]
** centroid: 11, normalized-entropy: 0.5032583347756457, [(2, 1), (3, 8)]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 3, 2, 3, 2, 3, 2, 1, 2, 3, 3]
acc = 0.9666666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 8, 6]]
** centroid: 6, normalized-entropy: 0.9852281360342514, [(2, 8), (3, 6)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 14, 1]]
** centroid: 9, normalized-entropy: 0.3533593350214213, [(2, 14), (3, 1)]
*** center 10: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 1, 8]]
** centroid: 11, normalized-entropy: 0.5032583347756457, [(2, 1), (3, 8)]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 3, 2, 3, 2, 3, 2, 1, 2, 3, 3]
acc = 0.9666666666666667
*** finished computation of 12 references, err: [Inf, 0.6121674924095472] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 1, 25]]
** centroid: 1, normalized-entropy: 0.23519338181924157, [(2, 1), (3, 25)]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 12, 3]]
** centroid: 6, normalized-entropy: 0.7219280948873623, [(2, 12), (3, 3)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 2]]
** centroid: 8, normalized-entropy: 0.9709505944546688, [(2, 3), (3, 2)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 1, 7]]
** centroid: 10, normalized-entropy: 0.5435644431995963, [(2, 1), (3, 7)]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 15 centroids; started with 12
acc = 0.9733333333333334
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.18069647112721438] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18069647112721438, 0.15098176545997685] ***
*** starting iteration: 2; err: [Inf, 0.18069647112721438, 0.15098176545997685] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18069647112721438, 0.15098176545997685, 0.14740682560777468] ***
*** starting iteration: 3; err: [Inf, 0.18069647112721438, 0.15098176545997685, 0.14740682560777468] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18069647112721438, 0.15098176545997685, 0.14740682560777468, 0.14621644480469953] ***
*** starting iteration: 4; err: [Inf, 0.18069647112721438, 0.15098176545997685, 0.14740682560777468, 0.14621644480469953] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18069647112721438, 0.15098176545997685, 0.14740682560777468, 0.14621644480469953, 0.14530266127227484] ***
*** finished computation of 7 references, err: [Inf, 0.18069647112721438, 0.15098176545997685, 0.14740682560777468, 0.14621644480469953, 0.14530266127227484] ***
*** center 1: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [37, 62, 0]]
** centroid: 2, normalized-entropy: 0.9534985819759996, [(1, 37), (2, 62)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 93, 17]]
** centroid: 3, normalized-entropy: 0.6210993704855443, [(2, 93), (3, 17)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [75, 29, 0]]
** centroid: 4, normalized-entropy: 0.8538738465459897, [(1, 75), (2, 29)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [1, 70, 0]]
** centroid: 5, normalized-entropy: 0.10679203237584184, [(1, 1), (2, 70)]
*** center 6: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [111, 1, 0]]
** centroid: 7, normalized-entropy: 0.07360348308562395, [(1, 111), (2, 1)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23442394563833158] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23442394563833158, 0.19319339599404428] ***
*** finished computation of 7 references, err: [Inf, 0.23442394563833158, 0.19319339599404428] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [73, 69, 0]]
** centroid: 1, normalized-entropy: 0.9994275398149994, [(1, 73), (2, 69)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [63, 13, 0]]
** centroid: 2, normalized-entropy: 0.6601070987550468, [(1, 63), (2, 13)]
*** center 3: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 82, 17]]
** centroid: 4, normalized-entropy: 0.6616179061408356, [(2, 82), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [43, 91, 0]]
** centroid: 5, normalized-entropy: 0.9053526478438054, [(1, 43), (2, 91)]
*** center 6: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2294270519119711] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2294270519119711, 0.20022021593858322] ***
*** finished computation of 7 references, err: [Inf, 0.2294270519119711, 0.20022021593858322] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 119, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [62, 50, 0]]
** centroid: 3, normalized-entropy: 0.9917033083725819, [(1, 62), (2, 50)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [56, 35, 0]]
** centroid: 4, normalized-entropy: 0.961236604722876, [(1, 56), (2, 35)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [104, 4, 0]]
** centroid: 5, normalized-entropy: 0.22853814395352806, [(1, 104), (2, 4)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 41, 20]]
** centroid: 6, normalized-entropy: 0.9127341558073343, [(2, 41), (3, 20)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [103, 5, 0]]
** centroid: 7, normalized-entropy: 0.2704505135124657, [(1, 103), (2, 5)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24031731416785468] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24031731416785468, 0.19787231992477777] ***
*** finished computation of 7 references, err: [Inf, 0.24031731416785468, 0.19787231992477777] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [50, 64, 0]]
** centroid: 1, normalized-entropy: 0.9890934397021431, [(1, 50), (2, 64)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [52, 30, 0]]
** centroid: 2, normalized-entropy: 0.9474351361840305, [(1, 52), (2, 30)]
*** center 3: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 123, 17]]
** centroid: 4, normalized-entropy: 0.5334533565308073, [(2, 123), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [79, 42, 0]]
** centroid: 5, normalized-entropy: 0.9314581888225363, [(1, 79), (2, 42)]
*** center 6: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.30756181569395213] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30756181569395213, 0.24406841683953823] ***
*** starting iteration: 2; err: [Inf, 0.30756181569395213, 0.24406841683953823] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30756181569395213, 0.24406841683953823, 0.23387870379771153] ***
*** starting iteration: 3; err: [Inf, 0.30756181569395213, 0.24406841683953823, 0.23387870379771153] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30756181569395213, 0.24406841683953823, 0.23387870379771153, 0.23203363368922547] ***
*** finished computation of 3 references, err: [Inf, 0.30756181569395213, 0.24406841683953823, 0.23387870379771153, 0.23203363368922547] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [237, 21, 0]]
** centroid: 1, normalized-entropy: 0.40707680632541937, [(1, 237), (2, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [157, 49, 0]]
** centroid: 2, normalized-entropy: 0.7914702362238462, [(1, 157), (2, 49)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 185, 17]]
** centroid: 3, normalized-entropy: 0.4166647575202427, [(2, 185), (3, 17)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.312110203441171] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.312110203441171, 0.24535353996998993] ***
*** starting iteration: 2; err: [Inf, 0.312110203441171, 0.24535353996998993] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.312110203441171, 0.24535353996998993, 0.2366836775775658] ***
*** starting iteration: 3; err: [Inf, 0.312110203441171, 0.24535353996998993, 0.2366836775775658] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.312110203441171, 0.24535353996998993, 0.2366836775775658, 0.23390905820447644] ***
*** finished computation of 3 references, err: [Inf, 0.312110203441171, 0.24535353996998993, 0.2366836775775658, 0.23390905820447644] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [98, 148, 20]]
** centroid: 1, normalized-entropy: 0.8088849210908556, [(1, 98), (2, 148), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [110, 106, 0]]
** centroid: 2, normalized-entropy: 0.9997526101661924, [(1, 110), (2, 106)]
*** center 3: selecting labels [1] (freq >= 1) [from [185, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2976316669620741] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2976316669620741, 0.24243125829962955] ***
*** starting iteration: 2; err: [Inf, 0.2976316669620741, 0.24243125829962955] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2976316669620741, 0.24243125829962955, 0.2333656257853426] ***
*** starting iteration: 3; err: [Inf, 0.2976316669620741, 0.24243125829962955, 0.2333656257853426] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2976316669620741, 0.24243125829962955, 0.2333656257853426, 0.23084094869796706] ***
*** finished computation of 3 references, err: [Inf, 0.2976316669620741, 0.24243125829962955, 0.2333656257853426, 0.23084094869796706] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [85, 165, 15]]
** centroid: 1, normalized-entropy: 0.7484615188174851, [(1, 85), (2, 165), (3, 15)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [99, 94, 2]]
** centroid: 2, normalized-entropy: 0.6762005932454643, [(1, 99), (2, 94), (3, 2)]
*** center 3: selecting labels [1] (freq >= 1) [from [207, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.21085978502669822] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21085978502669822, 0.16216916976583148] ***
*** starting iteration: 2; err: [Inf, 0.21085978502669822, 0.16216916976583148] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21085978502669822, 0.16216916976583148, 0.15595891584001337] ***
*** starting iteration: 3; err: [Inf, 0.21085978502669822, 0.16216916976583148, 0.15595891584001337] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21085978502669822, 0.16216916976583148, 0.15595891584001337, 0.15136405658270086] ***
*** starting iteration: 4; err: [Inf, 0.21085978502669822, 0.16216916976583148, 0.15595891584001337, 0.15136405658270086] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21085978502669822, 0.16216916976583148, 0.15595891584001337, 0.15136405658270086, 0.1490001592720891] ***
*** starting iteration: 5; err: [Inf, 0.21085978502669822, 0.16216916976583148, 0.15595891584001337, 0.15136405658270086, 0.1490001592720891] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21085978502669822, 0.16216916976583148, 0.15595891584001337, 0.15136405658270086, 0.1490001592720891, 0.14819182623163804] ***
*** finished computation of 7 references, err: [Inf, 0.21085978502669822, 0.16216916976583148, 0.15595891584001337, 0.15136405658270086, 0.1490001592720891, 0.14819182623163804] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [6, 86, 0]]
** centroid: 1, normalized-entropy: 0.3478169135710632, [(1, 6), (2, 86)]
*** center 2: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 56, 20]]
** centroid: 3, normalized-entropy: 0.8314743880097292, [(2, 56), (3, 20)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [54, 5, 0]]
** centroid: 4, normalized-entropy: 0.4186843105268563, [(1, 54), (2, 5)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [94, 15, 0]]
** centroid: 5, normalized-entropy: 0.5779576184299016, [(1, 94), (2, 15)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [22, 92, 0]]
** centroid: 6, normalized-entropy: 0.7076690004167966, [(1, 22), (2, 92)]
*** center 7: selecting labels [1] (freq >= 1) [from [123, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25165920677236] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25165920677236, 0.1980377132997386] ***
*** starting iteration: 2; err: [Inf, 0.25165920677236, 0.1980377132997386] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25165920677236, 0.1980377132997386, 0.16147670309538248] ***
*** starting iteration: 3; err: [Inf, 0.25165920677236, 0.1980377132997386, 0.16147670309538248] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25165920677236, 0.1980377132997386, 0.16147670309538248, 0.15453392097822807] ***
*** starting iteration: 4; err: [Inf, 0.25165920677236, 0.1980377132997386, 0.16147670309538248, 0.15453392097822807] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25165920677236, 0.1980377132997386, 0.16147670309538248, 0.15453392097822807, 0.1517924238115024] ***
*** starting iteration: 5; err: [Inf, 0.25165920677236, 0.1980377132997386, 0.16147670309538248, 0.15453392097822807, 0.1517924238115024] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25165920677236, 0.1980377132997386, 0.16147670309538248, 0.15453392097822807, 0.1517924238115024, 0.14894992362908918] ***
*** starting iteration: 6; err: [Inf, 0.25165920677236, 0.1980377132997386, 0.16147670309538248, 0.15453392097822807, 0.1517924238115024, 0.14894992362908918] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25165920677236, 0.1980377132997386, 0.16147670309538248, 0.15453392097822807, 0.1517924238115024, 0.14894992362908918, 0.14749690602677337] ***
*** starting iteration: 7; err: [Inf, 0.25165920677236, 0.1980377132997386, 0.16147670309538248, 0.15453392097822807, 0.1517924238115024, 0.14894992362908918, 0.14749690602677337] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25165920677236, 0.1980377132997386, 0.16147670309538248, 0.15453392097822807, 0.1517924238115024, 0.14894992362908918, 0.14749690602677337, 0.1467914540687858] ***
*** finished computation of 7 references, err: [Inf, 0.25165920677236, 0.1980377132997386, 0.16147670309538248, 0.15453392097822807, 0.1517924238115024, 0.14894992362908918, 0.14749690602677337, 0.1467914540687858] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [12, 82, 0]]
** centroid: 1, normalized-entropy: 0.5509844433017146, [(1, 12), (2, 82)]
*** center 2: selecting labels [1] (freq >= 1) [from [105, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [52, 46, 0]]
** centroid: 3, normalized-entropy: 0.9972943816462351, [(1, 52), (2, 46)]
*** center 4: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [50, 41, 0]]
** centroid: 5, normalized-entropy: 0.9929326437363045, [(1, 50), (2, 41)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 90, 17]]
** centroid: 6, normalized-entropy: 0.6316198184485629, [(2, 90), (3, 17)]
*** center 7: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.29120170462501793] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29120170462501793, 0.2588493307988095] ***
*** finished computation of 3 references, err: [Inf, 0.29120170462501793, 0.2588493307988095] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [225, 63, 0]]
** centroid: 1, normalized-entropy: 0.7578784625383954, [(1, 225), (2, 63)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [57, 177, 17]]
** centroid: 2, normalized-entropy: 0.6966109248621758, [(1, 57), (2, 177), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [112, 15, 0]]
** centroid: 3, normalized-entropy: 0.5239042914605166, [(1, 112), (2, 15)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.27866989744735] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27866989744735, 0.2333590668281247] ***
*** finished computation of 3 references, err: [Inf, 0.27866989744735, 0.2333590668281247] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [65, 159, 20]]
** centroid: 1, normalized-entropy: 0.761405640632384, [(1, 65), (2, 159), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [111, 95, 0]]
** centroid: 2, normalized-entropy: 0.9956440031235009, [(1, 111), (2, 95)]
*** center 3: selecting labels [1] (freq >= 2) [from [217, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.24869863913049628] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.24869863913049628, 0.23340824943572014] ***
*** finished computation of 3 references, err: [Inf, 0.24869863913049628, 0.23340824943572014] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [126, 53, 0]]
** centroid: 1, normalized-entropy: 0.8764579311590105, [(1, 126), (2, 53)]
*** center 2: selecting labels [1] (freq >= 2) [from [255, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [10, 206, 17]]
** centroid: 3, normalized-entropy: 0.3959696553604854, [(1, 10), (2, 206), (3, 17)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2578957237375973] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2578957237375973, 0.19043573943056255] ***
*** finished computation of 7 references, err: [Inf, 0.2578957237375973, 0.19043573943056255] ***
*** center 1: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [19, 127, 9]]
** centroid: 3, normalized-entropy: 0.5332226686728047, [(1, 19), (2, 127), (3, 9)]
*** center 4: selecting labels [1, 2, 3] (freq >= 2) [from [86, 128, 8]]
** centroid: 4, normalized-entropy: 0.7323944936830338, [(1, 86), (2, 128), (3, 8)]
*** center 5: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [48, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2276748410552444] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2276748410552444, 0.16085738628178367] ***
*** finished computation of 7 references, err: [Inf, 0.2276748410552444, 0.16085738628178367] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [74, 2, 0]]
** centroid: 1, normalized-entropy: 0.17556502585750275, [(1, 74), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [82, 6, 0]]
** centroid: 2, normalized-entropy: 0.3591016256485496, [(1, 82), (2, 6)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [71, 22, 0]]
** centroid: 3, normalized-entropy: 0.7892712724536985, [(1, 71), (2, 22)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [96, 64, 0]]
** centroid: 4, normalized-entropy: 0.9709505944546688, [(1, 96), (2, 64)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 109, 13]]
** centroid: 5, normalized-entropy: 0.48944383152584386, [(2, 109), (3, 13)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 51, 7]]
** centroid: 6, normalized-entropy: 0.5313400141801669, [(2, 51), (3, 7)]
*** center 7: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19591588486890787] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19591588486890787, 0.16931563646377606] ***
*** finished computation of 7 references, err: [Inf, 0.19591588486890787, 0.16931563646377606] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [135, 18, 0]]
** centroid: 1, normalized-entropy: 0.5225593745369407, [(1, 135), (2, 18)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [43, 78, 0]]
** centroid: 2, normalized-entropy: 0.9387743321221517, [(1, 43), (2, 78)]
*** center 3: selecting labels [1] (freq >= 2) [from [122, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 101, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [65, 8, 0]]
** centroid: 5, normalized-entropy: 0.4986751363204345, [(1, 65), (2, 8)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [26, 19, 0]]
** centroid: 6, normalized-entropy: 0.9824740868386409, [(1, 26), (2, 19)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 35, 17]]
** centroid: 7, normalized-entropy: 0.9117517586347538, [(2, 35), (3, 17)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4324068798118637] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4324068798118637, 0.30834818209099163] ***
*** starting iteration: 2; err: [Inf, 0.4324068798118637, 0.30834818209099163] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4324068798118637, 0.30834818209099163, 0.2928203797882406] ***
*** starting iteration: 3; err: [Inf, 0.4324068798118637, 0.30834818209099163, 0.2928203797882406] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4324068798118637, 0.30834818209099163, 0.2928203797882406, 0.28965703916229735] ***
*** starting iteration: 4; err: [Inf, 0.4324068798118637, 0.30834818209099163, 0.2928203797882406, 0.28965703916229735] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4324068798118637, 0.30834818209099163, 0.2928203797882406, 0.28965703916229735, 0.28912919498252887] ***
*** finished computation of 3 references, err: [Inf, 0.4324068798118637, 0.30834818209099163, 0.2928203797882406, 0.28965703916229735, 0.28912919498252887] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [105, 104, 0]]
** centroid: 1, normalized-entropy: 0.9999834859487465, [(1, 105), (2, 104)]
*** center 2: selecting labels [1] (freq >= 1) [from [183, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [106, 151, 17]]
** centroid: 3, normalized-entropy: 0.7903091456824975, [(1, 106), (2, 151), (3, 17)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3365414976554251] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3365414976554251, 0.3026734194767171] ***
*** starting iteration: 2; err: [Inf, 0.3365414976554251, 0.3026734194767171] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3365414976554251, 0.3026734194767171, 0.2971437350641573] ***
*** starting iteration: 3; err: [Inf, 0.3365414976554251, 0.3026734194767171, 0.2971437350641573] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3365414976554251, 0.3026734194767171, 0.2971437350641573, 0.2965239766521611] ***
*** finished computation of 3 references, err: [Inf, 0.3365414976554251, 0.3026734194767171, 0.2971437350641573, 0.2965239766521611] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [96, 137, 20]]
** centroid: 1, normalized-entropy: 0.8196401372834431, [(1, 96), (2, 137), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [108, 117, 0]]
** centroid: 2, normalized-entropy: 0.998845535995202, [(1, 108), (2, 117)]
*** center 3: selecting labels [1] (freq >= 1) [from [189, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4111860723889571] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4111860723889571, 0.34902488973656337] ***
*** starting iteration: 2; err: [Inf, 0.4111860723889571, 0.34902488973656337] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4111860723889571, 0.34902488973656337, 0.3295402228469211] ***
*** starting iteration: 3; err: [Inf, 0.4111860723889571, 0.34902488973656337, 0.3295402228469211] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4111860723889571, 0.34902488973656337, 0.3295402228469211, 0.2999615658331534] ***
*** starting iteration: 4; err: [Inf, 0.4111860723889571, 0.34902488973656337, 0.3295402228469211, 0.2999615658331534] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4111860723889571, 0.34902488973656337, 0.3295402228469211, 0.2999615658331534, 0.29389741886658466] ***
*** starting iteration: 5; err: [Inf, 0.4111860723889571, 0.34902488973656337, 0.3295402228469211, 0.2999615658331534, 0.29389741886658466] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4111860723889571, 0.34902488973656337, 0.3295402228469211, 0.2999615658331534, 0.29389741886658466, 0.2915650477054818] ***
*** starting iteration: 6; err: [Inf, 0.4111860723889571, 0.34902488973656337, 0.3295402228469211, 0.2999615658331534, 0.29389741886658466, 0.2915650477054818] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4111860723889571, 0.34902488973656337, 0.3295402228469211, 0.2999615658331534, 0.29389741886658466, 0.2915650477054818, 0.2905974587931045] ***
*** finished computation of 3 references, err: [Inf, 0.4111860723889571, 0.34902488973656337, 0.3295402228469211, 0.2999615658331534, 0.29389741886658466, 0.2915650477054818, 0.2905974587931045] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [97, 99, 0]]
** centroid: 1, normalized-entropy: 0.9999248896252452, [(1, 97), (2, 99)]
*** center 2: selecting labels [1] (freq >= 1) [from [215, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [79, 160, 17]]
** centroid: 3, normalized-entropy: 0.7615666115675492, [(1, 79), (2, 160), (3, 17)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3199597896194203] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3199597896194203, 0.26089910797316124] ***
*** starting iteration: 2; err: [Inf, 0.3199597896194203, 0.26089910797316124] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3199597896194203, 0.26089910797316124, 0.2426991679400832] ***
*** starting iteration: 3; err: [Inf, 0.3199597896194203, 0.26089910797316124, 0.2426991679400832] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3199597896194203, 0.26089910797316124, 0.2426991679400832, 0.2362121792507355] ***
*** starting iteration: 4; err: [Inf, 0.3199597896194203, 0.26089910797316124, 0.2426991679400832, 0.2362121792507355] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3199597896194203, 0.26089910797316124, 0.2426991679400832, 0.2362121792507355, 0.23376645783295255] ***
*** starting iteration: 5; err: [Inf, 0.3199597896194203, 0.26089910797316124, 0.2426991679400832, 0.2362121792507355, 0.23376645783295255] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3199597896194203, 0.26089910797316124, 0.2426991679400832, 0.2362121792507355, 0.23376645783295255, 0.23284728449137249] ***
*** finished computation of 3 references, err: [Inf, 0.3199597896194203, 0.26089910797316124, 0.2426991679400832, 0.2362121792507355, 0.23376645783295255, 0.23284728449137249] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [130, 82, 0]]
** centroid: 1, normalized-entropy: 0.9626983787500768, [(1, 130), (2, 82)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [59, 173, 17]]
** centroid: 2, normalized-entropy: 0.7076725761235445, [(1, 59), (2, 173), (3, 17)]
*** center 3: selecting labels [1] (freq >= 2) [from [205, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3403313862190567] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3403313862190567, 0.2721282475567918] ***
*** starting iteration: 2; err: [Inf, 0.3403313862190567, 0.2721282475567918] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3403313862190567, 0.2721282475567918, 0.24809393410276304] ***
*** starting iteration: 3; err: [Inf, 0.3403313862190567, 0.2721282475567918, 0.24809393410276304] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3403313862190567, 0.2721282475567918, 0.24809393410276304, 0.2360912809159601] ***
*** starting iteration: 4; err: [Inf, 0.3403313862190567, 0.2721282475567918, 0.24809393410276304, 0.2360912809159601] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3403313862190567, 0.2721282475567918, 0.24809393410276304, 0.2360912809159601, 0.23363474928222408] ***
*** starting iteration: 5; err: [Inf, 0.3403313862190567, 0.2721282475567918, 0.24809393410276304, 0.2360912809159601, 0.23363474928222408] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3403313862190567, 0.2721282475567918, 0.24809393410276304, 0.2360912809159601, 0.23363474928222408, 0.23262499908971107] ***
*** starting iteration: 6; err: [Inf, 0.3403313862190567, 0.2721282475567918, 0.24809393410276304, 0.2360912809159601, 0.23363474928222408, 0.23262499908971107] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3403313862190567, 0.2721282475567918, 0.24809393410276304, 0.2360912809159601, 0.23363474928222408, 0.23262499908971107, 0.23246248839269468] ***
*** finished computation of 3 references, err: [Inf, 0.3403313862190567, 0.2721282475567918, 0.24809393410276304, 0.2360912809159601, 0.23363474928222408, 0.23262499908971107, 0.23246248839269468] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [58, 160, 20]]
** centroid: 1, normalized-entropy: 0.7456016945558905, [(1, 58), (2, 160), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [127, 94, 0]]
** centroid: 2, normalized-entropy: 0.9838559201255357, [(1, 127), (2, 94)]
*** center 3: selecting labels [1] (freq >= 2) [from [208, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3036469680171968] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3036469680171968, 0.24769520194645317] ***
*** starting iteration: 2; err: [Inf, 0.3036469680171968, 0.24769520194645317] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3036469680171968, 0.24769520194645317, 0.2362526872417313] ***
*** starting iteration: 3; err: [Inf, 0.3036469680171968, 0.24769520194645317, 0.2362526872417313] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3036469680171968, 0.24769520194645317, 0.2362526872417313, 0.23338911171117308] ***
*** starting iteration: 4; err: [Inf, 0.3036469680171968, 0.24769520194645317, 0.2362526872417313, 0.23338911171117308] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3036469680171968, 0.24769520194645317, 0.2362526872417313, 0.23338911171117308, 0.2325850356777926] ***
*** finished computation of 3 references, err: [Inf, 0.3036469680171968, 0.24769520194645317, 0.2362526872417313, 0.23338911171117308, 0.2325850356777926] ***
*** center 1: selecting labels [1] (freq >= 2) [from [218, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [51, 171, 17]]
** centroid: 2, normalized-entropy: 0.6892018615234453, [(1, 51), (2, 171), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [122, 88, 0]]
** centroid: 3, normalized-entropy: 0.9810077194625308, [(1, 122), (2, 88)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.47490773948228304] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.47490773948228304, 0.3164914727026412] ***
*** starting iteration: 2; err: [Inf, 0.47490773948228304, 0.3164914727026412] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.47490773948228304, 0.3164914727026412, 0.29183808198148337] ***
*** starting iteration: 3; err: [Inf, 0.47490773948228304, 0.3164914727026412, 0.29183808198148337] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.47490773948228304, 0.3164914727026412, 0.29183808198148337, 0.2906670887358822] ***
*** starting iteration: 4; err: [Inf, 0.47490773948228304, 0.3164914727026412, 0.29183808198148337, 0.2906670887358822] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.47490773948228304, 0.3164914727026412, 0.29183808198148337, 0.2906670887358822, 0.29063194789699986] ***
*** finished computation of 3 references, err: [Inf, 0.47490773948228304, 0.3164914727026412, 0.29183808198148337, 0.2906670887358822, 0.29063194789699986] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [138, 61, 0]]
** centroid: 1, normalized-entropy: 0.8891303862385062, [(1, 138), (2, 61)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [255, 5, 0]]
** centroid: 2, normalized-entropy: 0.13709947889981755, [(1, 255), (2, 5)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [1, 189, 17]]
** centroid: 3, normalized-entropy: 0.285902964087844, [(1, 1), (2, 189), (3, 17)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.6148027257967288] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6148027257967288, 0.3188070368316343] ***
*** starting iteration: 2; err: [Inf, 0.6148027257967288, 0.3188070368316343] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6148027257967288, 0.3188070368316343, 0.29989104784153836] ***
*** starting iteration: 3; err: [Inf, 0.6148027257967288, 0.3188070368316343, 0.29989104784153836] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6148027257967288, 0.3188070368316343, 0.29989104784153836, 0.29676651205124704] ***
*** starting iteration: 4; err: [Inf, 0.6148027257967288, 0.3188070368316343, 0.29989104784153836, 0.29676651205124704] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6148027257967288, 0.3188070368316343, 0.29989104784153836, 0.29676651205124704, 0.29612643238592673] ***
*** finished computation of 3 references, err: [Inf, 0.6148027257967288, 0.3188070368316343, 0.29989104784153836, 0.29676651205124704, 0.29612643238592673] ***
*** center 1: selecting labels [1] (freq >= 1) [from [204, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [94, 135, 20]]
** centroid: 2, normalized-entropy: 0.8212233908595684, [(1, 94), (2, 135), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [95, 119, 0]]
** centroid: 3, normalized-entropy: 0.9909081236671033, [(1, 95), (2, 119)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.41606243686663963] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41606243686663963, 0.3364043663042239] ***
*** starting iteration: 2; err: [Inf, 0.41606243686663963, 0.3364043663042239] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41606243686663963, 0.3364043663042239, 0.3188168317822368] ***
*** starting iteration: 3; err: [Inf, 0.41606243686663963, 0.3364043663042239, 0.3188168317822368] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41606243686663963, 0.3364043663042239, 0.3188168317822368, 0.2956535363000171] ***
*** starting iteration: 4; err: [Inf, 0.41606243686663963, 0.3364043663042239, 0.3188168317822368, 0.2956535363000171] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41606243686663963, 0.3364043663042239, 0.3188168317822368, 0.2956535363000171, 0.2945257052472015] ***
*** starting iteration: 5; err: [Inf, 0.41606243686663963, 0.3364043663042239, 0.3188168317822368, 0.2956535363000171, 0.2945257052472015] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41606243686663963, 0.3364043663042239, 0.3188168317822368, 0.2956535363000171, 0.2945257052472015, 0.29429538760926277] ***
*** finished computation of 3 references, err: [Inf, 0.41606243686663963, 0.3364043663042239, 0.3188168317822368, 0.2956535363000171, 0.2945257052472015, 0.29429538760926277] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [87, 154, 17]]
** centroid: 1, normalized-entropy: 0.7771405152030438, [(1, 87), (2, 154), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [97, 105, 0]]
** centroid: 2, normalized-entropy: 0.998868289449348, [(1, 97), (2, 105)]
*** center 3: selecting labels [1] (freq >= 1) [from [207, 0, 0]]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 10)
[0.9429789070507634, 0.9349858840876806, 0.927031822241403, 0.9179988371605138, 0.9140188092283901, 0.9070207932483382, 0.8900577223930517, 0.8860117602632572, 0.8330096563629498, 0.7670245095394795]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.3, 1) => 0.9429789070507634
finished with 11
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.27797024546529503] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27797024546529503, 0.2328907992556557] ***
*** starting iteration: 2; err: [Inf, 0.27797024546529503, 0.2328907992556557] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27797024546529503, 0.2328907992556557, 0.23196919937198562] ***
*** finished computation of 3 references, err: [Inf, 0.27797024546529503, 0.2328907992556557, 0.23196919937198562] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 172, 17]]
** centroid: 1, normalized-entropy: 0.436293185543736, [(2, 172), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [231, 20, 0]]
** centroid: 2, normalized-entropy: 0.4010551457242519, [(1, 231), (2, 20)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [163, 63, 0]]
** centroid: 3, normalized-entropy: 0.8537571733879294, [(1, 163), (2, 63)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3154541461559563] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3154541461559563, 0.24446245534638728] ***
*** starting iteration: 2; err: [Inf, 0.3154541461559563, 0.24446245534638728] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3154541461559563, 0.24446245534638728, 0.23546237519256646] ***
*** starting iteration: 3; err: [Inf, 0.3154541461559563, 0.24446245534638728, 0.23546237519256646] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3154541461559563, 0.24446245534638728, 0.23546237519256646, 0.23404885049856294] ***
*** starting iteration: 4; err: [Inf, 0.3154541461559563, 0.24446245534638728, 0.23546237519256646, 0.23404885049856294] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3154541461559563, 0.24446245534638728, 0.23546237519256646, 0.23404885049856294, 0.2337380347080875] ***
*** finished computation of 3 references, err: [Inf, 0.3154541461559563, 0.24446245534638728, 0.23546237519256646, 0.23404885049856294, 0.2337380347080875] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [56, 148, 20]]
** centroid: 1, normalized-entropy: 0.7610532886985436, [(1, 56), (2, 148), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [115, 106, 0]]
** centroid: 2, normalized-entropy: 0.9988033555801091, [(1, 115), (2, 106)]
*** center 3: selecting labels [1] (freq >= 1) [from [222, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.25269724674993427] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.25269724674993427, 0.2392381534505373] ***
*** starting iteration: 2; err: [Inf, 0.25269724674993427, 0.2392381534505373] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.25269724674993427, 0.2392381534505373, 0.23597694408480843] ***
*** starting iteration: 3; err: [Inf, 0.25269724674993427, 0.2392381534505373, 0.23597694408480843] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.25269724674993427, 0.2392381534505373, 0.23597694408480843, 0.23545356994882963] ***
*** finished computation of 3 references, err: [Inf, 0.25269724674993427, 0.2392381534505373, 0.23597694408480843, 0.23545356994882963] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [214, 19, 0]]
** centroid: 1, normalized-entropy: 0.4076000594814323, [(1, 214), (2, 19)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [177, 41, 0]]
** centroid: 2, normalized-entropy: 0.6974237075565963, [(1, 177), (2, 41)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 199, 17]]
** centroid: 3, normalized-entropy: 0.3975950586938302, [(2, 199), (3, 17)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 11)
[0.9429789070507634, 0.9349858840876806, 0.927031822241403, 0.9179988371605138, 0.9140188092283901, 0.9099908291525058, 0.9070207932483382, 0.8900577223930517, 0.8860117602632572, 0.8330096563629498, 0.7670245095394795]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.3, 1) => 0.9429789070507634
finished with 12
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.2647139269029358] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2647139269029358, 0.22187308553017554] ***
*** starting iteration: 2; err: [Inf, 0.2647139269029358, 0.22187308553017554] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2647139269029358, 0.22187308553017554, 0.2002545429013289] ***
*** starting iteration: 3; err: [Inf, 0.2647139269029358, 0.22187308553017554, 0.2002545429013289] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2647139269029358, 0.22187308553017554, 0.2002545429013289, 0.19035543379438175] ***
*** starting iteration: 4; err: [Inf, 0.2647139269029358, 0.22187308553017554, 0.2002545429013289, 0.19035543379438175] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2647139269029358, 0.22187308553017554, 0.2002545429013289, 0.19035543379438175, 0.18659811090487796] ***
*** starting iteration: 5; err: [Inf, 0.2647139269029358, 0.22187308553017554, 0.2002545429013289, 0.19035543379438175, 0.18659811090487796] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2647139269029358, 0.22187308553017554, 0.2002545429013289, 0.19035543379438175, 0.18659811090487796, 0.18445674970734854] ***
*** starting iteration: 6; err: [Inf, 0.2647139269029358, 0.22187308553017554, 0.2002545429013289, 0.19035543379438175, 0.18659811090487796, 0.18445674970734854] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2647139269029358, 0.22187308553017554, 0.2002545429013289, 0.19035543379438175, 0.18659811090487796, 0.18445674970734854, 0.18329712732725809] ***
*** starting iteration: 7; err: [Inf, 0.2647139269029358, 0.22187308553017554, 0.2002545429013289, 0.19035543379438175, 0.18659811090487796, 0.18445674970734854, 0.18329712732725809] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2647139269029358, 0.22187308553017554, 0.2002545429013289, 0.19035543379438175, 0.18659811090487796, 0.18445674970734854, 0.18329712732725809, 0.183132724102318] ***
*** finished computation of 7 references, err: [Inf, 0.2647139269029358, 0.22187308553017554, 0.2002545429013289, 0.19035543379438175, 0.18659811090487796, 0.18445674970734854, 0.18329712732725809, 0.183132724102318] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [88, 7, 0]]
** centroid: 1, normalized-entropy: 0.3795243778626806, [(1, 88), (2, 7)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [89, 36, 0]]
** centroid: 2, normalized-entropy: 0.866123681398626, [(1, 89), (2, 36)]
*** center 3: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 78, 1]]
** centroid: 4, normalized-entropy: 0.09794058271817412, [(2, 78), (3, 1)]
*** center 5: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [57, 52, 0]]
** centroid: 6, normalized-entropy: 0.9984816077977791, [(1, 57), (2, 52)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 82, 16]]
** centroid: 7, normalized-entropy: 0.6420642892306891, [(2, 82), (3, 16)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23785189547502006] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23785189547502006, 0.2026706900883248] ***
*** starting iteration: 2; err: [Inf, 0.23785189547502006, 0.2026706900883248] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23785189547502006, 0.2026706900883248, 0.19773534034006018] ***
*** starting iteration: 3; err: [Inf, 0.23785189547502006, 0.2026706900883248, 0.19773534034006018] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23785189547502006, 0.2026706900883248, 0.19773534034006018, 0.19343648272925343] ***
*** starting iteration: 4; err: [Inf, 0.23785189547502006, 0.2026706900883248, 0.19773534034006018, 0.19343648272925343] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23785189547502006, 0.2026706900883248, 0.19773534034006018, 0.19343648272925343, 0.1892392463804777] ***
*** starting iteration: 5; err: [Inf, 0.23785189547502006, 0.2026706900883248, 0.19773534034006018, 0.19343648272925343, 0.1892392463804777] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23785189547502006, 0.2026706900883248, 0.19773534034006018, 0.19343648272925343, 0.1892392463804777, 0.18573993797982294] ***
*** starting iteration: 6; err: [Inf, 0.23785189547502006, 0.2026706900883248, 0.19773534034006018, 0.19343648272925343, 0.1892392463804777, 0.18573993797982294] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23785189547502006, 0.2026706900883248, 0.19773534034006018, 0.19343648272925343, 0.1892392463804777, 0.18573993797982294, 0.18465218800811217] ***
*** starting iteration: 7; err: [Inf, 0.23785189547502006, 0.2026706900883248, 0.19773534034006018, 0.19343648272925343, 0.1892392463804777, 0.18573993797982294, 0.18465218800811217] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23785189547502006, 0.2026706900883248, 0.19773534034006018, 0.19343648272925343, 0.1892392463804777, 0.18573993797982294, 0.18465218800811217, 0.18404756993686464] ***
*** finished computation of 7 references, err: [Inf, 0.23785189547502006, 0.2026706900883248, 0.19773534034006018, 0.19343648272925343, 0.1892392463804777, 0.18573993797982294, 0.18465218800811217, 0.18404756993686464] ***
*** center 1: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [62, 42, 0]]
** centroid: 2, normalized-entropy: 0.9731560354421095, [(1, 62), (2, 42)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [61, 50, 0]]
** centroid: 3, normalized-entropy: 0.9929042710341395, [(1, 61), (2, 50)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [96, 6, 0]]
** centroid: 4, normalized-entropy: 0.32275695889739825, [(1, 96), (2, 6)]
*** center 5: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 75, 20]]
** centroid: 6, normalized-entropy: 0.7424875695421234, [(2, 75), (3, 20)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 81, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22378455433537947] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22378455433537947, 0.19700866735315528] ***
*** starting iteration: 2; err: [Inf, 0.22378455433537947, 0.19700866735315528] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22378455433537947, 0.19700866735315528, 0.19415308993010932] ***
*** starting iteration: 3; err: [Inf, 0.22378455433537947, 0.19700866735315528, 0.19415308993010932] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22378455433537947, 0.19700866735315528, 0.19415308993010932, 0.19327766774710955] ***
*** finished computation of 7 references, err: [Inf, 0.22378455433537947, 0.19700866735315528, 0.19415308993010932, 0.19327766774710955] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [68, 40, 0]]
** centroid: 1, normalized-entropy: 0.9509560484549724, [(1, 68), (2, 40)]
*** center 2: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [5, 98, 0]]
** centroid: 3, normalized-entropy: 0.28017814662275986, [(1, 5), (2, 98)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [59, 19, 0]]
** centroid: 4, normalized-entropy: 0.8009591077369054, [(1, 59), (2, 19)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [100, 1, 0]]
** centroid: 5, normalized-entropy: 0.08013604733127526, [(1, 100), (2, 1)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 97, 17]]
** centroid: 6, normalized-entropy: 0.6076407686085387, [(2, 97), (3, 17)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [90, 4, 0]]
** centroid: 7, normalized-entropy: 0.2538784402981617, [(1, 90), (2, 4)]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 12)
[0.9429789070507634, 0.9349858840876806, 0.9289918661176145, 0.927031822241403, 0.9179988371605138, 0.9140188092283901, 0.9099908291525058, 0.9070207932483382, 0.8900577223930517, 0.8860117602632572, 0.8330096563629498, 0.7670245095394795]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.3, 1) => 0.9429789070507634
finished with 14
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.16522019243779573] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16522019243779573, 0.15410347124589635] ***
*** starting iteration: 2; err: [Inf, 0.16522019243779573, 0.15410347124589635] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16522019243779573, 0.15410347124589635, 0.15095461712305522] ***
*** starting iteration: 3; err: [Inf, 0.16522019243779573, 0.15410347124589635, 0.15095461712305522] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16522019243779573, 0.15410347124589635, 0.15095461712305522, 0.1492525821886593] ***
*** finished computation of 7 references, err: [Inf, 0.16522019243779573, 0.15410347124589635, 0.15095461712305522, 0.1492525821886593] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 91, 17]]
** centroid: 1, normalized-entropy: 0.6280710155029396, [(2, 91), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [71, 21, 0]]
** centroid: 2, normalized-entropy: 0.7749672673267259, [(1, 71), (2, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [74, 20, 0]]
** centroid: 3, normalized-entropy: 0.7467366074830678, [(1, 74), (2, 20)]
*** center 4: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [58, 25, 0]]
** centroid: 6, normalized-entropy: 0.8827586787955116, [(1, 58), (2, 25)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [26, 98, 0]]
** centroid: 7, normalized-entropy: 0.7408656862339816, [(1, 26), (2, 98)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19380202262754506] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19380202262754506, 0.15176615142717265] ***
*** starting iteration: 2; err: [Inf, 0.19380202262754506, 0.15176615142717265] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19380202262754506, 0.15176615142717265, 0.14887518166652372] ***
*** starting iteration: 3; err: [Inf, 0.19380202262754506, 0.15176615142717265, 0.14887518166652372] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19380202262754506, 0.15176615142717265, 0.14887518166652372, 0.14830834186158381] ***
*** finished computation of 7 references, err: [Inf, 0.19380202262754506, 0.15176615142717265, 0.14887518166652372, 0.14830834186158381] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [36, 42, 0]]
** centroid: 1, normalized-entropy: 0.9957274520849256, [(1, 36), (2, 42)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [55, 48, 0]]
** centroid: 2, normalized-entropy: 0.9966657283631041, [(1, 55), (2, 48)]
*** center 3: selecting labels [1] (freq >= 2) [from [105, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [112, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [6, 85, 0]]
** centroid: 6, normalized-entropy: 0.35056382068186565, [(1, 6), (2, 85)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 79, 20]]
** centroid: 7, normalized-entropy: 0.7259501452943735, [(2, 79), (3, 20)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2350718134342563] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2350718134342563, 0.1629132596612524] ***
*** starting iteration: 2; err: [Inf, 0.2350718134342563, 0.1629132596612524] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2350718134342563, 0.1629132596612524, 0.15745842602694576] ***
*** starting iteration: 3; err: [Inf, 0.2350718134342563, 0.1629132596612524, 0.15745842602694576] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2350718134342563, 0.1629132596612524, 0.15745842602694576, 0.1557450683953623] ***
*** finished computation of 7 references, err: [Inf, 0.2350718134342563, 0.1629132596612524, 0.15745842602694576, 0.1557450683953623] ***
*** center 1: selecting labels [1] (freq >= 2) [from [116, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [85, 1, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [6, 95, 5]]
** centroid: 3, normalized-entropy: 0.36846220178906747, [(1, 6), (2, 95), (3, 5)]
*** center 4: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [85, 31, 0]]
** centroid: 5, normalized-entropy: 0.8374782779405223, [(1, 85), (2, 31)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [4, 63, 0]]
** centroid: 6, normalized-entropy: 0.32625881462949274, [(1, 4), (2, 63)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 69, 12]]
** centroid: 7, normalized-entropy: 0.6051865766334207, [(2, 69), (3, 12)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24862893995082191] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24862893995082191, 0.19952566365434513] ***
*** starting iteration: 2; err: [Inf, 0.24862893995082191, 0.19952566365434513] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24862893995082191, 0.19952566365434513, 0.19128904967112942] ***
*** starting iteration: 3; err: [Inf, 0.24862893995082191, 0.19952566365434513, 0.19128904967112942] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24862893995082191, 0.19952566365434513, 0.19128904967112942, 0.19037419332711547] ***
*** finished computation of 7 references, err: [Inf, 0.24862893995082191, 0.19952566365434513, 0.19128904967112942, 0.19037419332711547] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [63, 33, 0]]
** centroid: 1, normalized-entropy: 0.9283620723948678, [(1, 63), (2, 33)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [37, 67, 0]]
** centroid: 2, normalized-entropy: 0.9391151961320356, [(1, 37), (2, 67)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 74, 17]]
** centroid: 3, normalized-entropy: 0.6947570868163001, [(2, 74), (3, 17)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 67, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [84, 6, 0]]
** centroid: 5, normalized-entropy: 0.3533593350214213, [(1, 84), (2, 6)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [99, 8, 0]]
** centroid: 6, normalized-entropy: 0.3834641323087979, [(1, 99), (2, 8)]
*** center 7: selecting labels [1] (freq >= 2) [from [111, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2303430008408062] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2303430008408062, 0.2052256495857994] ***
*** starting iteration: 2; err: [Inf, 0.2303430008408062, 0.2052256495857994] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2303430008408062, 0.2052256495857994, 0.19650790599248802] ***
*** starting iteration: 3; err: [Inf, 0.2303430008408062, 0.2052256495857994, 0.19650790599248802] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2303430008408062, 0.2052256495857994, 0.19650790599248802, 0.19313689776608298] ***
*** finished computation of 7 references, err: [Inf, 0.2303430008408062, 0.2052256495857994, 0.19650790599248802, 0.19313689776608298] ***
*** center 1: selecting labels [1] (freq >= 2) [from [99, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [96, 10, 0]]
** centroid: 2, normalized-entropy: 0.4507913883546652, [(1, 96), (2, 10)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 109, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [39, 36, 0]]
** centroid: 4, normalized-entropy: 0.998845535995202, [(1, 39), (2, 36)]
*** center 5: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [90, 20, 0]]
** centroid: 6, normalized-entropy: 0.6840384356390419, [(1, 90), (2, 20)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 79, 20]]
** centroid: 7, normalized-entropy: 0.7259501452943735, [(2, 79), (3, 20)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21978635735938262] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21978635735938262, 0.19529362156571098] ***
*** starting iteration: 2; err: [Inf, 0.21978635735938262, 0.19529362156571098] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21978635735938262, 0.19529362156571098, 0.19104673530741678] ***
*** starting iteration: 3; err: [Inf, 0.21978635735938262, 0.19529362156571098, 0.19104673530741678] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21978635735938262, 0.19529362156571098, 0.19104673530741678, 0.18971127640132024] ***
*** finished computation of 7 references, err: [Inf, 0.21978635735938262, 0.19529362156571098, 0.19104673530741678, 0.18971127640132024] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [94, 20, 0]]
** centroid: 1, normalized-entropy: 0.6699960320994334, [(1, 94), (2, 20)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [4, 88, 0]]
** centroid: 2, normalized-entropy: 0.2580186686648155, [(1, 4), (2, 88)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [43, 55, 0]]
** centroid: 3, normalized-entropy: 0.9891571023188154, [(1, 43), (2, 55)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 86, 17]]
** centroid: 4, normalized-entropy: 0.646251622274129, [(2, 86), (3, 17)]
*** center 5: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [75, 10, 0]]
** centroid: 7, normalized-entropy: 0.5225593745369407, [(1, 75), (2, 10)]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 14)
[0.9450138761516006, 0.9429998861136587, 0.9429789070507634, 0.9349858840876806, 0.9289918661176145, 0.927031822241403, 0.9179988371605138, 0.9140188092283901, 0.9099908291525058, 0.9070207932483382, 0.8900577223930517, 0.8860117602632572, 0.8330096563629498, 0.7670245095394795]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.6, 2) => 0.9450138761516006
finished with 15
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.41400654150547833] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41400654150547833, 0.307738364714704] ***
*** starting iteration: 2; err: [Inf, 0.41400654150547833, 0.307738364714704] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41400654150547833, 0.307738364714704, 0.3007022435091682] ***
*** starting iteration: 3; err: [Inf, 0.41400654150547833, 0.307738364714704, 0.3007022435091682] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41400654150547833, 0.307738364714704, 0.3007022435091682, 0.29877209853011744] ***
*** finished computation of 3 references, err: [Inf, 0.41400654150547833, 0.307738364714704, 0.3007022435091682, 0.29877209853011744] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [242, 9, 0]]
** centroid: 1, normalized-entropy: 0.2229609705506418, [(1, 242), (2, 9)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [3, 173, 17]]
** centroid: 2, normalized-entropy: 0.3429635055288518, [(1, 3), (2, 173), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [149, 73, 0]]
** centroid: 3, normalized-entropy: 0.9137253152370282, [(1, 149), (2, 73)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3823983780474219] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3823983780474219, 0.30098087402204443] ***
*** starting iteration: 2; err: [Inf, 0.3823983780474219, 0.30098087402204443] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3823983780474219, 0.30098087402204443, 0.29368096489509543] ***
*** starting iteration: 3; err: [Inf, 0.3823983780474219, 0.30098087402204443, 0.29368096489509543] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3823983780474219, 0.30098087402204443, 0.29368096489509543, 0.29181425680714973] ***
*** finished computation of 3 references, err: [Inf, 0.3823983780474219, 0.30098087402204443, 0.29368096489509543, 0.29181425680714973] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [72, 157, 20]]
** centroid: 1, normalized-entropy: 0.7756428969724776, [(1, 72), (2, 157), (3, 20)]
*** center 2: selecting labels [1] (freq >= 1) [from [205, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [116, 97, 0]]
** centroid: 3, normalized-entropy: 0.9942526196298301, [(1, 116), (2, 97)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.43381774314082994] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43381774314082994, 0.29708497892825053] ***
*** starting iteration: 2; err: [Inf, 0.43381774314082994, 0.29708497892825053] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43381774314082994, 0.29708497892825053, 0.29685542188693714] ***
*** finished computation of 3 references, err: [Inf, 0.43381774314082994, 0.29708497892825053, 0.29685542188693714] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [243, 18, 0]]
** centroid: 1, normalized-entropy: 0.36205125173399805, [(1, 243), (2, 18)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 187, 17]]
** centroid: 2, normalized-entropy: 0.4138168503036336, [(2, 187), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [148, 54, 0]]
** centroid: 3, normalized-entropy: 0.837602456861142, [(1, 148), (2, 54)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 15)
[0.9450138761516006, 0.9429998861136587, 0.9429789070507634, 0.9349858840876806, 0.9289918661176145, 0.927031822241403, 0.9269868671066276, 0.9179988371605138, 0.9140188092283901, 0.9099908291525058, 0.9070207932483382, 0.8900577223930517, 0.8860117602632572, 0.8330096563629498, 0.7670245095394795]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.6, 2) => 0.9450138761516006
finished with 16
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.2136474080871813] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2136474080871813, 0.158847882854962] ***
*** starting iteration: 2; err: [Inf, 0.2136474080871813, 0.158847882854962] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2136474080871813, 0.158847882854962, 0.15300810289381817] ***
*** starting iteration: 3; err: [Inf, 0.2136474080871813, 0.158847882854962, 0.15300810289381817] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2136474080871813, 0.158847882854962, 0.15300810289381817, 0.15187115078881472] ***
*** starting iteration: 4; err: [Inf, 0.2136474080871813, 0.158847882854962, 0.15300810289381817, 0.15187115078881472] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2136474080871813, 0.158847882854962, 0.15300810289381817, 0.15187115078881472, 0.151148617916458] ***
*** finished computation of 7 references, err: [Inf, 0.2136474080871813, 0.158847882854962, 0.15300810289381817, 0.15187115078881472, 0.151148617916458] ***
*** center 1: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [98, 28, 0]]
** centroid: 2, normalized-entropy: 0.7642045065086204, [(1, 98), (2, 28)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [33, 64, 0]]
** centroid: 3, normalized-entropy: 0.925015873745592, [(1, 33), (2, 64)]
*** center 4: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 92, 17]]
** centroid: 5, normalized-entropy: 0.6245644324971011, [(2, 92), (3, 17)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [43, 70, 0]]
** centroid: 6, normalized-entropy: 0.9584161691555605, [(1, 43), (2, 70)]
*** center 7: selecting labels [1] (freq >= 2) [from [83, 1, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.18469338599631543] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18469338599631543, 0.16351674961811422] ***
*** starting iteration: 2; err: [Inf, 0.18469338599631543, 0.16351674961811422] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18469338599631543, 0.16351674961811422, 0.15521856753163968] ***
*** starting iteration: 3; err: [Inf, 0.18469338599631543, 0.16351674961811422, 0.15521856753163968] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18469338599631543, 0.16351674961811422, 0.15521856753163968, 0.14944790996683724] ***
*** starting iteration: 4; err: [Inf, 0.18469338599631543, 0.16351674961811422, 0.15521856753163968, 0.14944790996683724] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18469338599631543, 0.16351674961811422, 0.15521856753163968, 0.14944790996683724, 0.1471194068369256] ***
*** starting iteration: 5; err: [Inf, 0.18469338599631543, 0.16351674961811422, 0.15521856753163968, 0.14944790996683724, 0.1471194068369256] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18469338599631543, 0.16351674961811422, 0.15521856753163968, 0.14944790996683724, 0.1471194068369256, 0.14658413975320847] ***
*** finished computation of 7 references, err: [Inf, 0.18469338599631543, 0.16351674961811422, 0.15521856753163968, 0.14944790996683724, 0.1471194068369256, 0.14658413975320847] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [7, 92, 0]]
** centroid: 1, normalized-entropy: 0.3685567775377064, [(1, 7), (2, 92)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [89, 6, 0]]
** centroid: 2, normalized-entropy: 0.3398550782221443, [(1, 89), (2, 6)]
*** center 3: selecting labels [1] (freq >= 2) [from [104, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 57, 20]]
** centroid: 5, normalized-entropy: 0.8263541679009075, [(2, 57), (3, 20)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [11, 99, 0]]
** centroid: 6, normalized-entropy: 0.46899559358928133, [(1, 11), (2, 99)]
*** center 7: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.23264543272728014] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23264543272728014, 0.17158835074086598] ***
*** starting iteration: 2; err: [Inf, 0.23264543272728014, 0.17158835074086598] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23264543272728014, 0.17158835074086598, 0.16112687894962785] ***
*** starting iteration: 3; err: [Inf, 0.23264543272728014, 0.17158835074086598, 0.16112687894962785] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23264543272728014, 0.17158835074086598, 0.16112687894962785, 0.15665317351184227] ***
*** starting iteration: 4; err: [Inf, 0.23264543272728014, 0.17158835074086598, 0.16112687894962785, 0.15665317351184227] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23264543272728014, 0.17158835074086598, 0.16112687894962785, 0.15665317351184227, 0.15397981722801476] ***
*** starting iteration: 5; err: [Inf, 0.23264543272728014, 0.17158835074086598, 0.16112687894962785, 0.15665317351184227, 0.15397981722801476] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23264543272728014, 0.17158835074086598, 0.16112687894962785, 0.15665317351184227, 0.15397981722801476, 0.1515310875739137] ***
*** starting iteration: 6; err: [Inf, 0.23264543272728014, 0.17158835074086598, 0.16112687894962785, 0.15665317351184227, 0.15397981722801476, 0.1515310875739137] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23264543272728014, 0.17158835074086598, 0.16112687894962785, 0.15665317351184227, 0.15397981722801476, 0.1515310875739137, 0.1496150043194016] ***
*** starting iteration: 7; err: [Inf, 0.23264543272728014, 0.17158835074086598, 0.16112687894962785, 0.15665317351184227, 0.15397981722801476, 0.1515310875739137, 0.1496150043194016] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23264543272728014, 0.17158835074086598, 0.16112687894962785, 0.15665317351184227, 0.15397981722801476, 0.1515310875739137, 0.1496150043194016, 0.14886284029220176] ***
*** finished computation of 7 references, err: [Inf, 0.23264543272728014, 0.17158835074086598, 0.16112687894962785, 0.15665317351184227, 0.15397981722801476, 0.1515310875739137, 0.1496150043194016, 0.14886284029220176] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [53, 6, 0]]
** centroid: 1, normalized-entropy: 0.4743454375622396, [(1, 53), (2, 6)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 98, 17]]
** centroid: 2, normalized-entropy: 0.6043732420352782, [(2, 98), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [74, 41, 0]]
** centroid: 3, normalized-entropy: 0.9397580401106037, [(1, 74), (2, 41)]
*** center 4: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [86, 16, 0]]
** centroid: 6, normalized-entropy: 0.6267511370265896, [(1, 86), (2, 16)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [12, 98, 0]]
** centroid: 7, normalized-entropy: 0.4971677614160751, [(1, 12), (2, 98)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 16)
[0.9450138761516006, 0.9429998861136587, 0.9429789070507634, 0.9349858840876806, 0.9289918661176145, 0.927031822241403, 0.927022831214448, 0.9269868671066276, 0.9179988371605138, 0.9140188092283901, 0.9099908291525058, 0.9070207932483382, 0.8900577223930517, 0.8860117602632572, 0.8330096563629498, 0.7670245095394795]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.6, 2) => 0.9450138761516006
finished with 16
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 16)
[0.9450138761516006, 0.9429998861136587, 0.9429789070507634, 0.9349858840876806, 0.9289918661176145, 0.927031822241403, 0.927022831214448, 0.9269868671066276, 0.9179988371605138, 0.9140188092283901, 0.9099908291525058, 0.9070207932483382, 0.8900577223930517, 0.8860117602632572, 0.8330096563629498, 0.7670245095394795]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.6, 2) => 0.9450138761516006
finished with 18
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.36725311952030604] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36725311952030604, 0.2955351256004705] ***
*** starting iteration: 2; err: [Inf, 0.36725311952030604, 0.2955351256004705] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36725311952030604, 0.2955351256004705, 0.2910621396934351] ***
*** starting iteration: 3; err: [Inf, 0.36725311952030604, 0.2955351256004705, 0.2910621396934351] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36725311952030604, 0.2955351256004705, 0.2910621396934351, 0.29009648679609495] ***
*** finished computation of 3 references, err: [Inf, 0.36725311952030604, 0.2955351256004705, 0.2910621396934351, 0.29009648679609495] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [17, 176, 17]]
** centroid: 1, normalized-entropy: 0.5052180734355612, [(1, 17), (2, 176), (3, 17)]
*** center 2: selecting labels [1] (freq >= 1) [from [240, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [137, 79, 0]]
** centroid: 3, normalized-entropy: 0.9473454907209535, [(1, 137), (2, 79)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3823236288458131] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3823236288458131, 0.3112590693299012] ***
*** starting iteration: 2; err: [Inf, 0.3823236288458131, 0.3112590693299012] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3823236288458131, 0.3112590693299012, 0.29627652411004235] ***
*** starting iteration: 3; err: [Inf, 0.3823236288458131, 0.3112590693299012, 0.29627652411004235] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3823236288458131, 0.3112590693299012, 0.29627652411004235, 0.29195883566013786] ***
*** finished computation of 3 references, err: [Inf, 0.3823236288458131, 0.3112590693299012, 0.29627652411004235, 0.29195883566013786] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [59, 158, 20]]
** centroid: 1, normalized-entropy: 0.7510467722627303, [(1, 59), (2, 158), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [131, 96, 0]]
** centroid: 2, normalized-entropy: 0.9827827900634394, [(1, 131), (2, 96)]
*** center 3: selecting labels [1] (freq >= 1) [from [203, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.39569788515941984] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39569788515941984, 0.3030211915313706] ***
*** starting iteration: 2; err: [Inf, 0.39569788515941984, 0.3030211915313706] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39569788515941984, 0.3030211915313706, 0.29766890857050354] ***
*** starting iteration: 3; err: [Inf, 0.39569788515941984, 0.3030211915313706, 0.29766890857050354] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39569788515941984, 0.3030211915313706, 0.29766890857050354, 0.29654666026034904] ***
*** finished computation of 3 references, err: [Inf, 0.39569788515941984, 0.3030211915313706, 0.29766890857050354, 0.29654666026034904] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 194, 17]]
** centroid: 1, normalized-entropy: 0.40417994849126776, [(2, 194), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [162, 50, 0]]
** centroid: 2, normalized-entropy: 0.7880689925063812, [(1, 162), (2, 50)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [229, 15, 0]]
** centroid: 3, normalized-entropy: 0.33327411457793576, [(1, 229), (2, 15)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4370491072932655] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4370491072932655, 0.25465502165392173] ***
*** starting iteration: 2; err: [Inf, 0.4370491072932655, 0.25465502165392173] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4370491072932655, 0.25465502165392173, 0.23192405732706547] ***
*** starting iteration: 3; err: [Inf, 0.4370491072932655, 0.25465502165392173, 0.23192405732706547] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4370491072932655, 0.25465502165392173, 0.23192405732706547, 0.22649103914619656] ***
*** finished computation of 3 references, err: [Inf, 0.4370491072932655, 0.25465502165392173, 0.23192405732706547, 0.22649103914619656] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [87, 157, 17]]
** centroid: 1, normalized-entropy: 0.7735659407996492, [(1, 87), (2, 157), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [126, 98, 0]]
** centroid: 2, normalized-entropy: 0.9886994082884974, [(1, 126), (2, 98)]
*** center 3: selecting labels [1] (freq >= 1) [from [181, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.29953518451220806] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29953518451220806, 0.23228630692889352] ***
*** starting iteration: 2; err: [Inf, 0.29953518451220806, 0.23228630692889352] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29953518451220806, 0.23228630692889352, 0.23205810533264007] ***
*** finished computation of 3 references, err: [Inf, 0.29953518451220806, 0.23228630692889352, 0.23205810533264007] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [79, 153, 19]]
** centroid: 1, normalized-entropy: 0.7836795819635277, [(1, 79), (2, 153), (3, 19)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [113, 101, 1]]
** centroid: 2, normalized-entropy: 0.6535313598302283, [(1, 113), (2, 101), (3, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [201, 0, 0]]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3070650118203468] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3070650118203468, 0.255873751180104] ***
*** starting iteration: 2; err: [Inf, 0.3070650118203468, 0.255873751180104] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3070650118203468, 0.255873751180104, 0.2383861653590533] ***
*** starting iteration: 3; err: [Inf, 0.3070650118203468, 0.255873751180104, 0.2383861653590533] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3070650118203468, 0.255873751180104, 0.2383861653590533, 0.2347079623124745] ***
*** finished computation of 3 references, err: [Inf, 0.3070650118203468, 0.255873751180104, 0.2383861653590533, 0.2347079623124745] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [138, 71, 0]]
** centroid: 1, normalized-entropy: 0.9245437228932285, [(1, 138), (2, 71)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [18, 188, 17]]
** centroid: 2, normalized-entropy: 0.4945370435447539, [(1, 18), (2, 188), (3, 17)]
*** center 3: selecting labels [1] (freq >= 1) [from [235, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 18)
[0.9450138761516006, 0.9429998861136587, 0.9429789070507634, 0.9349858840876806, 0.9289918661176145, 0.927031822241403, 0.927022831214448, 0.9269868671066276, 0.9179988371605138, 0.9140188092283901, 0.9099908291525058, 0.9070207932483382, 0.8959558360755966, 0.8900577223930517, 0.8860117602632572, 0.8330096563629498, 0.8179736622850395, 0.7670245095394795]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.6, 2) => 0.9450138761516006
finished with 18
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.2089926837561652] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2089926837561652, 0.15794142880523576] ***
*** starting iteration: 2; err: [Inf, 0.2089926837561652, 0.15794142880523576] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2089926837561652, 0.15794142880523576, 0.1503528862942476] ***
*** starting iteration: 3; err: [Inf, 0.2089926837561652, 0.15794142880523576, 0.1503528862942476] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2089926837561652, 0.15794142880523576, 0.1503528862942476, 0.14795391563000157] ***
*** finished computation of 7 references, err: [Inf, 0.2089926837561652, 0.15794142880523576, 0.1503528862942476, 0.14795391563000157] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 129, 27]]
** centroid: 1, normalized-entropy: 0.6646953053493416, [(2, 129), (3, 27)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [68, 4, 0]]
** centroid: 2, normalized-entropy: 0.3095434291503252, [(1, 68), (2, 4)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [135, 41, 0]]
** centroid: 3, normalized-entropy: 0.7831262902781859, [(1, 135), (2, 41)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [3, 119, 0]]
** centroid: 4, normalized-entropy: 0.16648978563002756, [(1, 3), (2, 119)]
*** center 5: selecting labels [1] (freq >= 2) [from [192, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [128, 2, 0]]
** centroid: 6, normalized-entropy: 0.11467550533614682, [(1, 128), (2, 2)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [63, 89, 0]]
** centroid: 7, normalized-entropy: 0.9787899441244793, [(1, 63), (2, 89)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18826121619623154] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18826121619623154, 0.16235795352235435] ***
*** starting iteration: 2; err: [Inf, 0.18826121619623154, 0.16235795352235435] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18826121619623154, 0.16235795352235435, 0.1601793977729976] ***
*** starting iteration: 3; err: [Inf, 0.18826121619623154, 0.16235795352235435, 0.1601793977729976] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18826121619623154, 0.16235795352235435, 0.1601793977729976, 0.15907944360747933] ***
*** finished computation of 7 references, err: [Inf, 0.18826121619623154, 0.16235795352235435, 0.1601793977729976, 0.15907944360747933] ***
*** center 1: selecting labels [1] (freq >= 2) [from [45, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [101, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 68, 12]]
** centroid: 3, normalized-entropy: 0.6098403047164005, [(2, 68), (3, 12)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [12, 74, 0]]
** centroid: 4, normalized-entropy: 0.5830194167347007, [(1, 12), (2, 74)]
*** center 5: selecting labels [1] (freq >= 2) [from [32, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [91, 27, 0]]
** centroid: 6, normalized-entropy: 0.7759373305779853, [(1, 91), (2, 27)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [16, 22, 0]]
** centroid: 7, normalized-entropy: 0.9819407868640977, [(1, 16), (2, 22)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26207137690950183] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26207137690950183, 0.16592840162850916] ***
*** starting iteration: 2; err: [Inf, 0.26207137690950183, 0.16592840162850916] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26207137690950183, 0.16592840162850916, 0.15873632169142365] ***
*** starting iteration: 3; err: [Inf, 0.26207137690950183, 0.16592840162850916, 0.15873632169142365] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26207137690950183, 0.16592840162850916, 0.15873632169142365, 0.15593623286113142] ***
*** finished computation of 7 references, err: [Inf, 0.26207137690950183, 0.16592840162850916, 0.15873632169142365, 0.15593623286113142] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 99, 6]]
** centroid: 1, normalized-entropy: 0.3159971329784246, [(2, 99), (3, 6)]
*** center 2: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [69, 5, 0]]
** centroid: 3, normalized-entropy: 0.35678001438394347, [(1, 69), (2, 5)]
*** center 4: selecting labels [1] (freq >= 2) [from [28, 0, 0]]
*** center 5: selecting labels [1, 2, 3] (freq >= 2) [from [3, 86, 6]]
** centroid: 5, normalized-entropy: 0.34012328106562323, [(1, 3), (2, 86), (3, 6)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [85, 8, 0]]
** centroid: 6, normalized-entropy: 0.42304881571335795, [(1, 85), (2, 8)]
*** center 7: selecting labels [1] (freq >= 2) [from [37, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22035962173715234] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22035962173715234, 0.1973737909682095] ***
*** starting iteration: 2; err: [Inf, 0.22035962173715234, 0.1973737909682095] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22035962173715234, 0.1973737909682095, 0.16873777884617447] ***
*** starting iteration: 3; err: [Inf, 0.22035962173715234, 0.1973737909682095, 0.16873777884617447] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22035962173715234, 0.1973737909682095, 0.16873777884617447, 0.15885072337742895] ***
*** finished computation of 7 references, err: [Inf, 0.22035962173715234, 0.1973737909682095, 0.16873777884617447, 0.15885072337742895] ***
*** center 1: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [52, 55, 0]]
** centroid: 2, normalized-entropy: 0.9994328781096228, [(1, 52), (2, 55)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [2, 78, 0]]
** centroid: 3, normalized-entropy: 0.1686609314966701, [(1, 2), (2, 78)]
*** center 4: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 31, 16]]
** centroid: 5, normalized-entropy: 0.9252253278054431, [(2, 31), (3, 16)]
*** center 6: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [7, 37, 0]]
** centroid: 7, normalized-entropy: 0.6321302781219708, [(1, 7), (2, 37)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20495296533592045] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20495296533592045, 0.16391721089743078] ***
*** starting iteration: 2; err: [Inf, 0.20495296533592045, 0.16391721089743078] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20495296533592045, 0.16391721089743078, 0.15872848707670345] ***
*** starting iteration: 3; err: [Inf, 0.20495296533592045, 0.16391721089743078, 0.15872848707670345] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20495296533592045, 0.16391721089743078, 0.15872848707670345, 0.15611110320780427] ***
*** finished computation of 7 references, err: [Inf, 0.20495296533592045, 0.16391721089743078, 0.15872848707670345, 0.15611110320780427] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 69, 14]]
** centroid: 1, normalized-entropy: 0.6546640527143932, [(2, 69), (3, 14)]
*** center 2: selecting labels [1] (freq >= 2) [from [38, 1, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [21, 3, 0]]
** centroid: 4, normalized-entropy: 0.5435644431995963, [(1, 21), (2, 3)]
*** center 5: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [70, 38, 0]]
** centroid: 6, normalized-entropy: 0.9357110512652843, [(1, 70), (2, 38)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 85, 0]]
** centroid: 7, normalized-entropy: 0.15790637433488164, [(1, 2), (2, 85)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2243048281809315] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2243048281809315, 0.16079396515525876] ***
*** starting iteration: 2; err: [Inf, 0.2243048281809315, 0.16079396515525876] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2243048281809315, 0.16079396515525876, 0.14926085845567286] ***
*** starting iteration: 3; err: [Inf, 0.2243048281809315, 0.16079396515525876, 0.14926085845567286] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2243048281809315, 0.16079396515525876, 0.14926085845567286, 0.1470237162094563] ***
*** finished computation of 7 references, err: [Inf, 0.2243048281809315, 0.16079396515525876, 0.14926085845567286, 0.1470237162094563] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [1, 85, 2]]
** centroid: 1, normalized-entropy: 0.15790637433488164, [(2, 85), (3, 2)]
*** center 2: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 72, 12]]
** centroid: 3, normalized-entropy: 0.5916727785823274, [(2, 72), (3, 12)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [65, 5, 0]]
** centroid: 4, normalized-entropy: 0.3712323266408756, [(1, 65), (2, 5)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [63, 18, 0]]
** centroid: 5, normalized-entropy: 0.7642045065086204, [(1, 63), (2, 18)]
*** center 6: selecting labels [1] (freq >= 2) [from [40, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [57, 16, 0]]
** centroid: 7, normalized-entropy: 0.7586638628883696, [(1, 57), (2, 16)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1705444778893143] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1705444778893143, 0.1522695439532399] ***
*** starting iteration: 2; err: [Inf, 0.1705444778893143, 0.1522695439532399] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1705444778893143, 0.1522695439532399, 0.14818555462919175] ***
*** starting iteration: 3; err: [Inf, 0.1705444778893143, 0.1522695439532399, 0.14818555462919175] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1705444778893143, 0.1522695439532399, 0.14818555462919175, 0.1453419254925102] ***
*** finished computation of 7 references, err: [Inf, 0.1705444778893143, 0.1522695439532399, 0.14818555462919175, 0.1453419254925102] ***
*** center 1: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [62, 5, 0]]
** centroid: 2, normalized-entropy: 0.3829576722723533, [(1, 62), (2, 5)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [94, 4, 0]]
** centroid: 3, normalized-entropy: 0.2460225782203316, [(1, 94), (2, 4)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 72, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [6, 61, 0]]
** centroid: 5, normalized-entropy: 0.43497348007474274, [(1, 6), (2, 61)]
*** center 6: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 55, 8]]
** centroid: 7, normalized-entropy: 0.5491087450260074, [(2, 55), (3, 8)]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19638538980018347] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19638538980018347, 0.15330723378993572] ***
*** starting iteration: 2; err: [Inf, 0.19638538980018347, 0.15330723378993572] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19638538980018347, 0.15330723378993572, 0.14848681925982238] ***
*** starting iteration: 3; err: [Inf, 0.19638538980018347, 0.15330723378993572, 0.14848681925982238] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19638538980018347, 0.15330723378993572, 0.14848681925982238, 0.14763033914752305] ***
*** finished computation of 7 references, err: [Inf, 0.19638538980018347, 0.15330723378993572, 0.14848681925982238, 0.14763033914752305] ***
*** center 1: selecting labels [1] (freq >= 2) [from [88, 1, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [75, 3, 0]]
** centroid: 2, normalized-entropy: 0.23519338181924157, [(1, 75), (2, 3)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [58, 2, 0]]
** centroid: 3, normalized-entropy: 0.2108423003185322, [(1, 58), (2, 2)]
*** center 4: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 55, 12]]
** centroid: 5, normalized-entropy: 0.678114052360606, [(2, 55), (3, 12)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [9, 64, 0]]
** centroid: 6, normalized-entropy: 0.5387379148665815, [(1, 9), (2, 64)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [4, 75, 0]]
** centroid: 7, normalized-entropy: 0.2890794597316462, [(1, 4), (2, 75)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1986913148313761] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1986913148313761, 0.1605909887505695] ***
*** starting iteration: 2; err: [Inf, 0.1986913148313761, 0.1605909887505695] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1986913148313761, 0.1605909887505695, 0.15554668396525084] ***
*** starting iteration: 3; err: [Inf, 0.1986913148313761, 0.1605909887505695, 0.15554668396525084] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1986913148313761, 0.1605909887505695, 0.15554668396525084, 0.15456704054307194] ***
*** finished computation of 7 references, err: [Inf, 0.1986913148313761, 0.1605909887505695, 0.15554668396525084, 0.15456704054307194] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [33, 42, 0]]
** centroid: 1, normalized-entropy: 0.9895875212220558, [(1, 33), (2, 42)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [68, 30, 0]]
** centroid: 2, normalized-entropy: 0.8886466698980794, [(1, 68), (2, 30)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [64, 19, 0]]
** centroid: 3, normalized-entropy: 0.776116265618875, [(1, 64), (2, 19)]
*** center 4: selecting labels [1] (freq >= 2) [from [43, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [45, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 89, 12]]
** centroid: 6, normalized-entropy: 0.5259359840917625, [(2, 89), (3, 12)]
*** center 7: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.16861011211574078] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16861011211574078, 0.15485850798152387] ***
*** starting iteration: 2; err: [Inf, 0.16861011211574078, 0.15485850798152387] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16861011211574078, 0.15485850798152387, 0.15189816485904156] ***
*** starting iteration: 3; err: [Inf, 0.16861011211574078, 0.15485850798152387, 0.15189816485904156] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16861011211574078, 0.15485850798152387, 0.15189816485904156, 0.14918513535894454] ***
*** finished computation of 7 references, err: [Inf, 0.16861011211574078, 0.15485850798152387, 0.15189816485904156, 0.14918513535894454] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [41, 5, 0]]
** centroid: 1, normalized-entropy: 0.49596907206183377, [(1, 41), (2, 5)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [57, 5, 0]]
** centroid: 2, normalized-entropy: 0.4044483864864384, [(1, 57), (2, 5)]
*** center 3: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 79, 12]]
** centroid: 4, normalized-entropy: 0.5625393752025972, [(2, 79), (3, 12)]
*** center 5: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [64, 26, 0]]
** centroid: 6, normalized-entropy: 0.8672816222000259, [(1, 64), (2, 26)]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 78, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2265855820765719] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2265855820765719, 0.17255258104763926] ***
*** starting iteration: 2; err: [Inf, 0.2265855820765719, 0.17255258104763926] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2265855820765719, 0.17255258104763926, 0.1634264796897769] ***
*** starting iteration: 3; err: [Inf, 0.2265855820765719, 0.17255258104763926, 0.1634264796897769] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2265855820765719, 0.17255258104763926, 0.1634264796897769, 0.15852616281807422] ***
*** finished computation of 7 references, err: [Inf, 0.2265855820765719, 0.17255258104763926, 0.1634264796897769, 0.15852616281807422] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [13, 85, 0]]
** centroid: 1, normalized-entropy: 0.5646695797525669, [(1, 13), (2, 85)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [40, 60, 0]]
** centroid: 2, normalized-entropy: 0.9709505944546688, [(1, 40), (2, 60)]
*** center 3: selecting labels [1] (freq >= 2) [from [40, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 47, 19]]
** centroid: 4, normalized-entropy: 0.8659653498997099, [(2, 47), (3, 19)]
*** center 5: selecting labels [1] (freq >= 2) [from [42, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2175220853611827] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2175220853611827, 0.16778967764787375] ***
*** starting iteration: 2; err: [Inf, 0.2175220853611827, 0.16778967764787375] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2175220853611827, 0.16778967764787375, 0.1559403213839978] ***
*** starting iteration: 3; err: [Inf, 0.2175220853611827, 0.16778967764787375, 0.1559403213839978] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2175220853611827, 0.16778967764787375, 0.1559403213839978, 0.15137369731254877] ***
*** finished computation of 7 references, err: [Inf, 0.2175220853611827, 0.16778967764787375, 0.1559403213839978, 0.15137369731254877] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [47, 17, 0]]
** centroid: 1, normalized-entropy: 0.8351164948421137, [(1, 47), (2, 17)]
*** center 2: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 103, 18]]
** centroid: 3, normalized-entropy: 0.6067293172263869, [(2, 103), (3, 18)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [16, 47, 0]]
** centroid: 4, normalized-entropy: 0.8175072881213616, [(1, 16), (2, 47)]
*** center 5: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [47, 21, 0]]
** centroid: 6, normalized-entropy: 0.8918107543797084, [(1, 47), (2, 21)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [66, 12, 0]]
** centroid: 7, normalized-entropy: 0.6193821946787638, [(1, 66), (2, 12)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.231715437496081] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.231715437496081, 0.1630476142736152] ***
*** starting iteration: 2; err: [Inf, 0.231715437496081, 0.1630476142736152] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.231715437496081, 0.1630476142736152, 0.1538397863060236] ***
*** starting iteration: 3; err: [Inf, 0.231715437496081, 0.1630476142736152, 0.1538397863060236] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.231715437496081, 0.1630476142736152, 0.1538397863060236, 0.15023230480169877] ***
*** finished computation of 7 references, err: [Inf, 0.231715437496081, 0.1630476142736152, 0.1538397863060236, 0.15023230480169877] ***
*** center 1: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [42, 33, 0]]
** centroid: 2, normalized-entropy: 0.9895875212220558, [(1, 42), (2, 33)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 75, 11]]
** centroid: 3, normalized-entropy: 0.5516699920020824, [(2, 75), (3, 11)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [12, 54, 0]]
** centroid: 4, normalized-entropy: 0.6840384356390419, [(1, 12), (2, 54)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [45, 32, 0]]
** centroid: 5, normalized-entropy: 0.9793399259567798, [(1, 45), (2, 32)]
*** center 6: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23591148541867732] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23591148541867732, 0.17281630302174017] ***
*** starting iteration: 2; err: [Inf, 0.23591148541867732, 0.17281630302174017] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23591148541867732, 0.17281630302174017, 0.15361507637053728] ***
*** starting iteration: 3; err: [Inf, 0.23591148541867732, 0.17281630302174017, 0.15361507637053728] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23591148541867732, 0.17281630302174017, 0.15361507637053728, 0.14564991202671082] ***
*** finished computation of 7 references, err: [Inf, 0.23591148541867732, 0.17281630302174017, 0.15361507637053728, 0.14564991202671082] ***
*** center 1: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [38, 38, 0]]
** centroid: 2, normalized-entropy: 1.0, [(1, 38), (2, 38)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [62, 11, 0]]
** centroid: 3, normalized-entropy: 0.6115516951951333, [(1, 62), (2, 11)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [32, 44, 0]]
** centroid: 4, normalized-entropy: 0.9819407868640977, [(1, 32), (2, 44)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 52, 1]]
*** center 6: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 53, 9]]
** centroid: 7, normalized-entropy: 0.5975977764379984, [(2, 53), (3, 9)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1873479404943064] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1873479404943064, 0.157997174303513] ***
*** starting iteration: 2; err: [Inf, 0.1873479404943064, 0.157997174303513] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1873479404943064, 0.157997174303513, 0.15059983421117068] ***
*** starting iteration: 3; err: [Inf, 0.1873479404943064, 0.157997174303513, 0.15059983421117068] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1873479404943064, 0.157997174303513, 0.15059983421117068, 0.14679901678860188] ***
*** finished computation of 7 references, err: [Inf, 0.1873479404943064, 0.157997174303513, 0.15059983421117068, 0.14679901678860188] ***
*** center 1: selecting labels [1] (freq >= 2) [from [48, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [66, 11, 0]]
** centroid: 2, normalized-entropy: 0.5916727785823274, [(1, 66), (2, 11)]
*** center 3: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 73, 12]]
** centroid: 4, normalized-entropy: 0.5873116089977589, [(2, 73), (3, 12)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [63, 4, 0]]
** centroid: 5, normalized-entropy: 0.32625881462949274, [(1, 63), (2, 4)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 86, 4]]
** centroid: 6, normalized-entropy: 0.2623112196143368, [(2, 86), (3, 4)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [47, 24, 0]]
** centroid: 7, normalized-entropy: 0.9229192878686723, [(1, 47), (2, 24)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20887744275666772] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20887744275666772, 0.1656495244204998] ***
*** starting iteration: 2; err: [Inf, 0.20887744275666772, 0.1656495244204998] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20887744275666772, 0.1656495244204998, 0.1590206328611821] ***
*** starting iteration: 3; err: [Inf, 0.20887744275666772, 0.1656495244204998, 0.1590206328611821] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20887744275666772, 0.1656495244204998, 0.1590206328611821, 0.1562874120315537] ***
*** finished computation of 7 references, err: [Inf, 0.20887744275666772, 0.1656495244204998, 0.1590206328611821, 0.1562874120315537] ***
*** center 1: selecting labels [1] (freq >= 2) [from [46, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [49, 4, 0]]
** centroid: 2, normalized-entropy: 0.3860189005698936, [(1, 49), (2, 4)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [38, 61, 0]]
** centroid: 3, normalized-entropy: 0.9607079018756469, [(1, 38), (2, 61)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [60, 21, 0]]
** centroid: 4, normalized-entropy: 0.8256265261578954, [(1, 60), (2, 21)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 109, 14]]
** centroid: 5, normalized-entropy: 0.5113351532295534, [(2, 109), (3, 14)]
*** center 6: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [46, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.186724365609698] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.186724365609698, 0.15602530117565766] ***
*** starting iteration: 2; err: [Inf, 0.186724365609698, 0.15602530117565766] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.186724365609698, 0.15602530117565766, 0.15117431365512313] ***
*** starting iteration: 3; err: [Inf, 0.186724365609698, 0.15602530117565766, 0.15117431365512313] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.186724365609698, 0.15602530117565766, 0.15117431365512313, 0.1490735236769542] ***
*** finished computation of 7 references, err: [Inf, 0.186724365609698, 0.15602530117565766, 0.15117431365512313, 0.1490735236769542] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [13, 49, 0]]
** centroid: 1, normalized-entropy: 0.7408656862339816, [(1, 13), (2, 49)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [82, 3, 0]]
** centroid: 2, normalized-entropy: 0.22028326695127437, [(1, 82), (2, 3)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [24, 45, 0]]
** centroid: 3, normalized-entropy: 0.9321115676166747, [(1, 24), (2, 45)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 37, 16]]
** centroid: 4, normalized-entropy: 0.8835850861052531, [(2, 37), (3, 16)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [2, 62, 0]]
** centroid: 5, normalized-entropy: 0.2006223243127146, [(1, 2), (2, 62)]
*** center 6: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20199468135926874] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20199468135926874, 0.16204480588808656] ***
*** starting iteration: 2; err: [Inf, 0.20199468135926874, 0.16204480588808656] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20199468135926874, 0.16204480588808656, 0.1592162378448993] ***
*** starting iteration: 3; err: [Inf, 0.20199468135926874, 0.16204480588808656, 0.1592162378448993] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20199468135926874, 0.16204480588808656, 0.1592162378448993, 0.15778901425376535] ***
*** finished computation of 7 references, err: [Inf, 0.20199468135926874, 0.16204480588808656, 0.1592162378448993, 0.15778901425376535] ***
*** center 1: selecting labels [1] (freq >= 2) [from [38, 1, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [59, 10, 0]]
** centroid: 2, normalized-entropy: 0.5969995167604553, [(1, 59), (2, 10)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [89, 24, 0]]
** centroid: 3, normalized-entropy: 0.7460251980495494, [(1, 89), (2, 24)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 52, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 92, 18]]
** centroid: 6, normalized-entropy: 0.6429383500409613, [(2, 92), (3, 18)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [31, 14, 0]]
** centroid: 7, normalized-entropy: 0.8944518845341284, [(1, 31), (2, 14)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2147837005155161] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2147837005155161, 0.18347678876423743] ***
*** starting iteration: 2; err: [Inf, 0.2147837005155161, 0.18347678876423743] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2147837005155161, 0.18347678876423743, 0.1629420780222863] ***
*** starting iteration: 3; err: [Inf, 0.2147837005155161, 0.18347678876423743, 0.1629420780222863] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2147837005155161, 0.18347678876423743, 0.1629420780222863, 0.15651901676133276] ***
*** finished computation of 7 references, err: [Inf, 0.2147837005155161, 0.18347678876423743, 0.1629420780222863, 0.15651901676133276] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [4, 60, 3]]
** centroid: 1, normalized-entropy: 0.36970272971647894, [(1, 4), (2, 60), (3, 3)]
*** center 2: selecting labels [1] (freq >= 2) [from [61, 1, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [5, 34, 0]]
** centroid: 3, normalized-entropy: 0.552495114325111, [(1, 5), (2, 34)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [82, 5, 0]]
** centroid: 4, normalized-entropy: 0.3173238998358585, [(1, 82), (2, 5)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [44, 27, 0]]
** centroid: 5, normalized-entropy: 0.9582407282588409, [(1, 44), (2, 27)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 74, 7]]
** centroid: 6, normalized-entropy: 0.42440514472480345, [(2, 74), (3, 7)]
*** center 7: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.211116912540514] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.211116912540514, 0.16352872388623654] ***
*** starting iteration: 2; err: [Inf, 0.211116912540514, 0.16352872388623654] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.211116912540514, 0.16352872388623654, 0.1552212672419846] ***
*** starting iteration: 3; err: [Inf, 0.211116912540514, 0.16352872388623654, 0.1552212672419846] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.211116912540514, 0.16352872388623654, 0.1552212672419846, 0.15200686892075463] ***
*** finished computation of 7 references, err: [Inf, 0.211116912540514, 0.16352872388623654, 0.1552212672419846, 0.15200686892075463] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 54, 1]]
*** center 2: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [41, 6, 0]]
** centroid: 3, normalized-entropy: 0.5509844433017146, [(1, 41), (2, 6)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 76, 11]]
** centroid: 4, normalized-entropy: 0.5475844288749033, [(2, 76), (3, 11)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [43, 21, 0]]
** centroid: 5, normalized-entropy: 0.912999213585247, [(1, 43), (2, 21)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [96, 26, 0]]
** centroid: 6, normalized-entropy: 0.7473944462440388, [(1, 96), (2, 26)]
*** center 7: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20928513470466714] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20928513470466714, 0.16479722767695784] ***
*** starting iteration: 2; err: [Inf, 0.20928513470466714, 0.16479722767695784] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20928513470466714, 0.16479722767695784, 0.15609709229879082] ***
*** starting iteration: 3; err: [Inf, 0.20928513470466714, 0.16479722767695784, 0.15609709229879082] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20928513470466714, 0.16479722767695784, 0.15609709229879082, 0.15348891097679734] ***
*** finished computation of 7 references, err: [Inf, 0.20928513470466714, 0.16479722767695784, 0.15609709229879082, 0.15348891097679734] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [85, 9, 0]]
** centroid: 1, normalized-entropy: 0.45535954758523894, [(1, 85), (2, 9)]
*** center 2: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 77, 12]]
** centroid: 4, normalized-entropy: 0.5705411428522262, [(2, 77), (3, 12)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [36, 2, 0]]
** centroid: 5, normalized-entropy: 0.2974722489192896, [(1, 36), (2, 2)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [50, 39, 0]]
** centroid: 6, normalized-entropy: 0.9889525767600615, [(1, 50), (2, 39)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [28, 46, 0]]
** centroid: 7, normalized-entropy: 0.9568886656798214, [(1, 28), (2, 46)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2565273380000144] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2565273380000144, 0.16372519388794898] ***
*** starting iteration: 2; err: [Inf, 0.2565273380000144, 0.16372519388794898] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2565273380000144, 0.16372519388794898, 0.15469682684354485] ***
*** starting iteration: 3; err: [Inf, 0.2565273380000144, 0.16372519388794898, 0.15469682684354485] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2565273380000144, 0.16372519388794898, 0.15469682684354485, 0.15260380167141557] ***
*** finished computation of 7 references, err: [Inf, 0.2565273380000144, 0.16372519388794898, 0.15469682684354485, 0.15260380167141557] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [63, 14, 0]]
** centroid: 1, normalized-entropy: 0.6840384356390419, [(1, 63), (2, 14)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 65, 9]]
** centroid: 2, normalized-entropy: 0.5340042729285396, [(2, 65), (3, 9)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [52, 9, 0]]
** centroid: 3, normalized-entropy: 0.603652249754401, [(1, 52), (2, 9)]
*** center 4: selecting labels [1] (freq >= 2) [from [40, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [96, 3, 0]]
** centroid: 5, normalized-entropy: 0.19590927087360496, [(1, 96), (2, 3)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 88, 3]]
** centroid: 6, normalized-entropy: 0.20905980566852464, [(2, 88), (3, 3)]
*** center 7: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21342926263622938] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21342926263622938, 0.16758967598387972] ***
*** starting iteration: 2; err: [Inf, 0.21342926263622938, 0.16758967598387972] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21342926263622938, 0.16758967598387972, 0.15961013415269554] ***
*** starting iteration: 3; err: [Inf, 0.21342926263622938, 0.16758967598387972, 0.15961013415269554] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21342926263622938, 0.16758967598387972, 0.15961013415269554, 0.154202193741221] ***
*** finished computation of 7 references, err: [Inf, 0.21342926263622938, 0.16758967598387972, 0.15961013415269554, 0.154202193741221] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [10, 61, 0]]
** centroid: 1, normalized-entropy: 0.5864477034453907, [(1, 10), (2, 61)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [36, 36, 0]]
** centroid: 2, normalized-entropy: 1.0, [(1, 36), (2, 36)]
*** center 3: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 77, 18]]
** centroid: 4, normalized-entropy: 0.7003691487575897, [(2, 77), (3, 18)]
*** center 5: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [70, 2, 0]]
** centroid: 6, normalized-entropy: 0.18312206830137262, [(1, 70), (2, 2)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [45, 24, 0]]
** centroid: 7, normalized-entropy: 0.9321115676166747, [(1, 45), (2, 24)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20578069697506726] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20578069697506726, 0.16204470964707435] ***
*** starting iteration: 2; err: [Inf, 0.20578069697506726, 0.16204470964707435] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20578069697506726, 0.16204470964707435, 0.14702057377249003] ***
*** starting iteration: 3; err: [Inf, 0.20578069697506726, 0.16204470964707435, 0.14702057377249003] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20578069697506726, 0.16204470964707435, 0.14702057377249003, 0.14381321788439527] ***
*** finished computation of 7 references, err: [Inf, 0.20578069697506726, 0.16204470964707435, 0.14702057377249003, 0.14381321788439527] ***
*** center 1: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [60, 45, 0]]
** centroid: 2, normalized-entropy: 0.9852281360342514, [(1, 60), (2, 45)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [45, 29, 0]]
** centroid: 3, normalized-entropy: 0.966009606256856, [(1, 45), (2, 29)]
*** center 4: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 61, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 56, 15]]
** centroid: 6, normalized-entropy: 0.743898745288434, [(2, 56), (3, 15)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [61, 2, 0]]
** centroid: 7, normalized-entropy: 0.20307392998664567, [(1, 61), (2, 2)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1924834902556613] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1924834902556613, 0.15407075347565113] ***
*** starting iteration: 2; err: [Inf, 0.1924834902556613, 0.15407075347565113] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1924834902556613, 0.15407075347565113, 0.1500822075083852] ***
*** starting iteration: 3; err: [Inf, 0.1924834902556613, 0.15407075347565113, 0.1500822075083852] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1924834902556613, 0.15407075347565113, 0.1500822075083852, 0.14795294040162116] ***
*** finished computation of 7 references, err: [Inf, 0.1924834902556613, 0.15407075347565113, 0.1500822075083852, 0.14795294040162116] ***
*** center 1: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [29, 16, 0]]
** centroid: 2, normalized-entropy: 0.9389320105807949, [(1, 29), (2, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [68, 16, 0]]
** centroid: 3, normalized-entropy: 0.7024665512903904, [(1, 68), (2, 16)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 83, 12]]
** centroid: 4, normalized-entropy: 0.5472469471683307, [(2, 83), (3, 12)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [52, 25, 0]]
** centroid: 5, normalized-entropy: 0.9093934226727598, [(1, 52), (2, 25)]
*** center 6: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 68, 1]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1958731687478721] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1958731687478721, 0.16198452276503666] ***
*** starting iteration: 2; err: [Inf, 0.1958731687478721, 0.16198452276503666] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1958731687478721, 0.16198452276503666, 0.1549809370879084] ***
*** starting iteration: 3; err: [Inf, 0.1958731687478721, 0.16198452276503666, 0.1549809370879084] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1958731687478721, 0.16198452276503666, 0.1549809370879084, 0.15237080979347228] ***
*** finished computation of 7 references, err: [Inf, 0.1958731687478721, 0.16198452276503666, 0.1549809370879084, 0.15237080979347228] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 79, 12]]
** centroid: 1, normalized-entropy: 0.5625393752025972, [(2, 79), (3, 12)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [66, 3, 0]]
** centroid: 2, normalized-entropy: 0.2580186686648155, [(1, 66), (2, 3)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [29, 35, 0]]
** centroid: 3, normalized-entropy: 0.9936507116910402, [(1, 29), (2, 35)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [37, 5, 0]]
** centroid: 4, normalized-entropy: 0.5266170655714281, [(1, 37), (2, 5)]
*** center 5: selecting labels [1] (freq >= 2) [from [74, 1, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 65, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18536674762237818] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18536674762237818, 0.15528336498839782] ***
*** starting iteration: 2; err: [Inf, 0.18536674762237818, 0.15528336498839782] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18536674762237818, 0.15528336498839782, 0.1517478055022657] ***
*** starting iteration: 3; err: [Inf, 0.18536674762237818, 0.15528336498839782, 0.1517478055022657] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18536674762237818, 0.15528336498839782, 0.1517478055022657, 0.14884679704066367] ***
*** finished computation of 7 references, err: [Inf, 0.18536674762237818, 0.15528336498839782, 0.1517478055022657, 0.14884679704066367] ***
*** center 1: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [71, 28, 0]]
** centroid: 2, normalized-entropy: 0.8592759806609698, [(1, 71), (2, 28)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 79, 12]]
** centroid: 3, normalized-entropy: 0.5625393752025972, [(2, 79), (3, 12)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [13, 44, 0]]
** centroid: 4, normalized-entropy: 0.7746319868686841, [(1, 13), (2, 44)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [23, 44, 0]]
** centroid: 5, normalized-entropy: 0.9279262619599757, [(1, 23), (2, 44)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [51, 2, 0]]
** centroid: 6, normalized-entropy: 0.23181305002459035, [(1, 51), (2, 2)]
*** center 7: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20069019467569887] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20069019467569887, 0.16312306054215878] ***
*** starting iteration: 2; err: [Inf, 0.20069019467569887, 0.16312306054215878] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20069019467569887, 0.16312306054215878, 0.15563425823114813] ***
*** starting iteration: 3; err: [Inf, 0.20069019467569887, 0.16312306054215878, 0.15563425823114813] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20069019467569887, 0.16312306054215878, 0.15563425823114813, 0.15321358868852258] ***
*** finished computation of 7 references, err: [Inf, 0.20069019467569887, 0.16312306054215878, 0.15563425823114813, 0.15321358868852258] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [19, 8, 0]]
** centroid: 1, normalized-entropy: 0.876716288999464, [(1, 19), (2, 8)]
*** center 2: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [12, 73, 0]]
** centroid: 4, normalized-entropy: 0.5873116089977589, [(1, 12), (2, 73)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [70, 45, 0]]
** centroid: 5, normalized-entropy: 0.9656361333706099, [(1, 70), (2, 45)]
*** center 6: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 67, 14]]
** centroid: 7, normalized-entropy: 0.6641593279528072, [(2, 67), (3, 14)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18736739476397635] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18736739476397635, 0.15382816922292114] ***
*** starting iteration: 2; err: [Inf, 0.18736739476397635, 0.15382816922292114] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18736739476397635, 0.15382816922292114, 0.1517911190725863] ***
*** starting iteration: 3; err: [Inf, 0.18736739476397635, 0.15382816922292114, 0.1517911190725863] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18736739476397635, 0.15382816922292114, 0.1517911190725863, 0.1500265997154638] ***
*** finished computation of 7 references, err: [Inf, 0.18736739476397635, 0.15382816922292114, 0.1517911190725863, 0.1500265997154638] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [48, 27, 0]]
** centroid: 1, normalized-entropy: 0.9426831892554921, [(1, 48), (2, 27)]
*** center 2: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [4, 77, 0]]
** centroid: 3, normalized-entropy: 0.2837689703721877, [(1, 4), (2, 77)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 85, 10]]
** centroid: 4, normalized-entropy: 0.48546076074591343, [(2, 85), (3, 10)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [69, 21, 0]]
** centroid: 5, normalized-entropy: 0.7837769474847011, [(1, 69), (2, 21)]
*** center 6: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [46, 4, 0]]
** centroid: 7, normalized-entropy: 0.4021791902022729, [(1, 46), (2, 4)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2095774720609188] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2095774720609188, 0.1614353619776666] ***
*** starting iteration: 2; err: [Inf, 0.2095774720609188, 0.1614353619776666] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2095774720609188, 0.1614353619776666, 0.15618287064880132] ***
*** starting iteration: 3; err: [Inf, 0.2095774720609188, 0.1614353619776666, 0.15618287064880132] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2095774720609188, 0.1614353619776666, 0.15618287064880132, 0.1539136721342802] ***
*** finished computation of 7 references, err: [Inf, 0.2095774720609188, 0.1614353619776666, 0.15618287064880132, 0.1539136721342802] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 53, 11]]
** centroid: 1, normalized-entropy: 0.6619760641115651, [(2, 53), (3, 11)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 33, 8]]
** centroid: 2, normalized-entropy: 0.7120640548905481, [(2, 33), (3, 8)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [60, 18, 0]]
** centroid: 3, normalized-entropy: 0.7793498372920851, [(1, 60), (2, 18)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [74, 13, 0]]
** centroid: 4, normalized-entropy: 0.6084002154765848, [(1, 74), (2, 13)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [4, 56, 0]]
** centroid: 5, normalized-entropy: 0.3533593350214213, [(1, 4), (2, 56)]
*** center 6: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [77, 9, 0]]
** centroid: 7, normalized-entropy: 0.48356837509176975, [(1, 77), (2, 9)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20876278884336352] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20876278884336352, 0.15854669972322882] ***
*** starting iteration: 2; err: [Inf, 0.20876278884336352, 0.15854669972322882] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20876278884336352, 0.15854669972322882, 0.15189106201566754] ***
*** starting iteration: 3; err: [Inf, 0.20876278884336352, 0.15854669972322882, 0.15189106201566754] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20876278884336352, 0.15854669972322882, 0.15189106201566754, 0.14849440842866898] ***
*** finished computation of 7 references, err: [Inf, 0.20876278884336352, 0.15854669972322882, 0.15189106201566754, 0.14849440842866898] ***
*** center 1: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [78, 26, 0]]
** centroid: 2, normalized-entropy: 0.8112781244591328, [(1, 78), (2, 26)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 57, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 53, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 21, 15]]
** centroid: 5, normalized-entropy: 0.9798687566511527, [(2, 21), (3, 15)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [64, 19, 0]]
** centroid: 6, normalized-entropy: 0.776116265618875, [(1, 64), (2, 19)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [72, 4, 0]]
** centroid: 7, normalized-entropy: 0.2974722489192896, [(1, 72), (2, 4)]
finished with 10 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 384,3 => 27,1 => 589), Dict(2 => 359,3 => 34,1 => 607))
[ Info: ===== scores for single classifier: {"micro_f1":0.944,"precision":0.944,"recall":0.944,"macro_recall":0.954832127194492,"macro_f1":0.882424507971332,"accuracy":0.944,"class_f1":{"2":0.9197707736389685,"3":0.7555555555555554,"1":0.9719471947194719},"class_precision":{"2":0.9469026548672567,"3":0.6071428571428571,"1":0.9735537190082645},"class_recall":{"2":0.8941504178272981,"3":1.0,"1":0.9703459637561779}}
[ Info: ===== scores for 1: {"micro_f1":0.978,"precision":0.978,"recall":0.978,"macro_recall":0.9826077379504664,"macro_f1":0.962205401121083,"accuracy":0.978,"class_f1":{"2":0.9691011235955056,"3":0.9315068493150686,"1":0.9860082304526749},"class_precision":{"2":0.9773371104815864,"3":0.8717948717948718,"1":0.9851973684210527},"class_recall":{"2":0.9610027855153204,"3":1.0,"1":0.9868204283360791}}
[ Info: ===== scores for 5: {"micro_f1":0.982,"precision":0.982,"recall":0.982,"macro_recall":0.9878391835273711,"macro_f1":0.9693182196715538,"accuracy":0.982,"class_f1":{"2":0.9751381215469613,"3":0.9444444444444444,"1":0.9883720930232558},"class_precision":{"2":0.9671232876712329,"3":0.8947368421052632,"1":0.9966499162479062},"class_recall":{"2":0.9832869080779945,"3":1.0,"1":0.9802306425041186}}
[ Info: ===== scores for 7: {"micro_f1":0.9810000000000001,"precision":0.981,"recall":0.981,"macro_recall":0.9869106784205929,"macro_f1":0.9645331836379016,"accuracy":0.981,"class_f1":{"2":0.9737206085753803,"3":0.9315068493150686,"1":0.9883720930232558},"class_precision":{"2":0.967032967032967,"3":0.8717948717948718,"1":0.9966499162479062},"class_recall":{"2":0.9805013927576601,"3":1.0,"1":0.9802306425041186}}
[ Info: ===== scores for 9: {"micro_f1":0.978,"precision":0.978,"recall":0.978,"macro_recall":0.9856425882500508,"macro_f1":0.9623695290089659,"accuracy":0.978,"class_f1":{"2":0.9697802197802198,"3":0.9315068493150686,"1":0.9858215179316097},"class_precision":{"2":0.9566395663956639,"3":0.8717948717948718,"1":0.9983108108108109},"class_recall":{"2":0.9832869080779945,"3":1.0,"1":0.9736408566721582}}
[ Info: ===== scores for 11: {"micro_f1":0.977,"precision":0.977,"recall":0.977,"macro_recall":0.9835760142809287,"macro_f1":0.9465231632816402,"accuracy":0.977,"class_f1":{"2":0.9680998613037447,"3":0.8831168831168831,"1":0.9883527454242929},"class_precision":{"2":0.9640883977900553,"3":0.7906976744186046,"1":0.9983193277310924},"class_recall":{"2":0.9721448467966574,"3":1.0,"1":0.9785831960461285}}
(score = 0.974, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.974, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.978, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.978, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.982, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.982, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.981, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.981, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.976, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.976, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.982, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.982, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.975, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.975, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.981, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.981, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.982,"k":3,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.982,"precision":0.982,"recall":0.982,"macro_recall":0.9870804709524749,"macro_f1":0.9692850134903116,"accuracy":0.982,"class_f1":{"2":0.975,"3":0.9444444444444444,"1":0.9884105960264902},"class_precision":{"2":0.9722991689750693,"3":0.8947368421052632,"1":0.9933444259567388},"class_recall":{"2":0.9777158774373259,"3":1.0,"1":0.9835255354200988}}
Test Summary: | Pass  Total
AKNC          |    8      8
[47, 1, 1, 1, 1, 2, 6, 2, 1, 4, 3, 7, 39, 4, 14, 3, 1, 13, 14, 5, 17, 4, 69, 6, 1, 1, 14, 6, 3, 26, 1, 7, 11, 13, 3, 31, 7, 7, 5, 27, 3, 3, 1, 13, 2, 9, 8, 2, 6, 10, 2, 7, 6, 11, 18, 12, 15, 5, 11, 6, 24, 21, 35, 62, 14, 4, 17, 12, 32, 15, 9, 11, 10, 76, 29, 1, 46, 1, 23, 11, 35, 68, 3, 15, 31, 69, 13, 36, 49, 95, 18, 77, 18, 28, 27, 87, 3, 6, 4, 6, 35, 7, 10, 10, 13, 12, 31, 14, 30, 6, 26, 17, 4, 20, 17, 91, 12, 5, 51, 23, 16, 5, 24, 50, 9, 2, 34, 21, 57, 52, 21, 11, 7, 1635, 20, 1, 4, 5, 7, 4, 33, 7, 2, 101, 80, 16, 3, 15, 3, 19, 2, 12, 18, 8, 130, 45, 11, 65, 53, 21, 23, 18, 29, 161, 79, 22, 16, 10, 17, 63, 9, 16, 19, 45, 45, 24, 20, 17, 8, 6, 4, 2, 2, 162, 55, 8, 31, 1, 8, 25, 31, 17, 153, 5, 112, 5, 8, 1, 15, 35, 8, 5, 24, 53, 24, 26, 2, 17, 6, 17, 56, 53, 5, 8, 40, 9, 34, 7, 16, 67, 14, 44, 2, 39, 72, 5, 5, 15, 3, 286, 15, 209, 17, 95, 25, 45, 63, 76, 6, 65, 88, 58, 7, 5, 9, 14, 40, 42, 14, 17, 23, 23, 37, 28, 45, 88, 7, 8, 68, 19, 2, 18, 2, 24, 49, 52, 3, 9, 243, 61, 23, 11, 9, 289, 11, 13, 16, 10, 49, 14, 54, 12, 16, 37, 38, 6, 6, 72, 6, 64, 60, 9, 32, 6, 40, 68, 19, 34, 179, 7]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6329999999999997, speedup = 0.22598706453035428, eval_ratio = 0.10431900000000001)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.42070312500000007,"recall":0.4071180555555556,"f1":null,"seconds":0.00026525743305683136,"exhaustive_search_seconds":0.00035905465483665466,"evaluations":651.5625,"distances_sum":1685.5799701507945}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5715060763888886,"recall":0.5711805555555554,"f1":null,"seconds":0.0004359297454357147,"exhaustive_search_seconds":0.00035905465483665466,"evaluations":881.859375,"distances_sum":1655.169830017836}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6640624999999997,"recall":0.6640624999999997,"f1":null,"seconds":0.0005343295633792877,"exhaustive_search_seconds":0.00035905465483665466,"evaluations":1007.7421875,"distances_sum":1621.0767921496818}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7352430555555549,"recall":0.7352430555555549,"f1":0.7352430555555549,"seconds":0.0007465239614248276,"exhaustive_search_seconds":0.00035905465483665466,"evaluations":1140.984375,"distances_sum":1589.6054739677845}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7942708333333326,"recall":0.7942708333333326,"f1":0.7942708333333326,"seconds":0.0007175356149673462,"exhaustive_search_seconds":0.00035905465483665466,"evaluations":1264.3359375,"distances_sum":1570.3524754643222}
KCenters.DeloneInvIndex> reached performance {"precision":0.8385416666666659,"recall":0.8385416666666659,"f1":0.8385416666666659,"seconds":0.0008154138922691345,"exhaustive_search_seconds":0.00035905465483665466,"evaluations":1380.296875,"distances_sum":1557.163952146431}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8099999999999998, speedup = 0.34344722821048396, eval_ratio = 0.149554)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
