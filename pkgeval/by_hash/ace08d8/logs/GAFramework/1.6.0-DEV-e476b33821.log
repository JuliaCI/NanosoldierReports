Julia Version 1.6.0-DEV.970
Commit e476b33821 (2020-09-18 18:06 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.3
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_qCX8Wz/Project.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_qCX8Wz/Manifest.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21722496933680827
curgen: 20 fitness: 0.21723362761458906
curgen: 30 fitness: 0.21723362761458906
curgen: 40 fitness: 0.21723362761458906
curgen: 50 fitness: 0.21723362761458906
CoordinateCreature{Vector{Float64}}([-0.22254448775158495], -0.21723362761458906) -0.22254448775158495 -0.21723362761458906
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.2576527016236803
curgen: 100 fitness: 3.258211152297829
curgen: 150 fitness: 3.2582468005918224
curgen: 200 fitness: 3.2583052596390725
curgen: 250 fitness: 3.258329890098259
curgen: 300 fitness: 3.258378888278376
curgen: 350 fitness: 3.2583803012249763
curgen: 400 fitness: 3.2583803012249763
curgen: 450 fitness: 3.258418597482722
curgen: 500 fitness: 3.2584496755822783
CoordinateCreature{Vector{Float64}}([0.22219128579238134, 0.2223596649227649, 0.2231359848195918, 0.22249581520446793, 0.22250400336695977, -0.22286795935959255, -0.22251949707280103, 0.222498389763297, -0.2222508583986592, -0.22211816908927046, -0.22200502541886555, 0.2224871551379194, 0.22236824008076195, 0.2226068938094531, 0.2224513264556607], -3.2584496755822783) [0.22219128579238134, 0.2223596649227649, 0.2231359848195918, 0.22249581520446793, 0.22250400336695977, -0.22286795935959255, -0.22251949707280103, 0.222498389763297, -0.2222508583986592, -0.22211816908927046, -0.22200502541886555, 0.2224871551379194, 0.22236824008076195, 0.2226068938094531, 0.2224513264556607] -3.2584496755822783
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.0017643621684442223
curgen: 100 fitness: -0.0017619896816540859
curgen: 150 fitness: -0.0017447461902406758
curgen: 200 fitness: -0.0016692540109488618
curgen: 250 fitness: -0.0016692540109488618
curgen: 300 fitness: -0.00045169504045361464
curgen: 350 fitness: -0.00045169504045361464
curgen: 400 fitness: -0.00041013669533640496
curgen: 450 fitness: -0.00041013669533640496
curgen: 500 fitness: -0.00041013669533640496
CoordinateCreature{Vector{Float64}}([-0.0001600294815702107, -0.00034818374069041694, 0.00021534242344255976, -0.00027155387604182687, 8.735266487963383e-5, 0.00016015366470747776, -9.66971955492958e-5, -0.0002538516596347901, 0.0002848610785419704, 0.000840621988231433, 0.0006596463636214916, 0.00037664335168896394, -3.727314934740457e-5, -0.0005437844912539156, -0.0001772143715842589], 0.00041013669533640496) [-0.0001600294815702107, -0.00034818374069041694, 0.00021534242344255976, -0.00027155387604182687, 8.735266487963383e-5, 0.00016015366470747776, -9.66971955492958e-5, -0.0002538516596347901, 0.0002848610785419704, 0.000840621988231433, 0.0006596463636214916, 0.00037664335168896394, -3.727314934740457e-5, -0.0005437844912539156, -0.0001772143715842589] 0.00041013669533640496
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
