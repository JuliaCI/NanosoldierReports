Julia Version 1.5.0-DEV.162
Commit 9b10ee2f26 (2020-01-27 13:16 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

 Resolving package versions...
 Installed OceanGrids ─────── v0.1.5
 Installed Unitful ────────── v0.18.0
 Installed ConstructionBase ─ v1.0.0
  Updating `~/.julia/environments/v1.5/Project.toml`
  [cfe838f4] + OceanGrids v0.1.5
  Updating `~/.julia/environments/v1.5/Manifest.toml`
  [187b0558] + ConstructionBase v1.0.0
  [cfe838f4] + OceanGrids v0.1.5
  [1986cc42] + Unitful v0.18.0
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [9a3f8284] + Random 
  [9e88b42a] + Serialization 
   Testing OceanGrids
  Updating `/tmp/jl_Hnx1mT/Project.toml`
  [8dfed614] + Test 
  Updating `/tmp/jl_Hnx1mT/Manifest.toml`
  [2a0f44e3] + Base64 
  [8ba89e20] + Distributed 
  [b77e0a4c] + InteractiveUtils 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [6462fe0b] + Sockets 
  [8dfed614] + Test 
Running sandbox
Status `/tmp/jl_Hnx1mT/Project.toml`
  [cfe838f4] OceanGrids v0.1.5
  [1986cc42] Unitful v0.18.0
  [8dfed614] Test 
Small grid tests: Error During Test at /home/pkgeval/.julia/packages/OceanGrids/ncnJE/test/runtests.jl:3
  Got exception outside of a @test
  MethodError: no method matching length(::Base.TwicePrecision{Quantity{Float64,NoDims,Unitful.FreeUnits{(°,),NoDims,nothing}}})
  Closest candidates are:
    length(!Matched::Core.SimpleVector) at essentials.jl:594
    length(!Matched::Base.MethodList) at reflection.jl:852
    length(!Matched::Core.MethodTable) at reflection.jl:938
    ...
  Stacktrace:
   [1] _similar_for(::UnitRange{Int64}, ::Type{Quantity{Float64,NoDims,Unitful.FreeUnits{(°,),NoDims,nothing}}}, ::Base.TwicePrecision{Quantity{Float64,NoDims,Unitful.FreeUnits{(°,),NoDims,nothing}}}, ::Base.HasLength) at ./array.jl:576
   [2] _collect(::UnitRange{Int64}, ::Base.TwicePrecision{Quantity{Float64,NoDims,Unitful.FreeUnits{(°,),NoDims,nothing}}}, ::Base.HasEltype, ::Base.HasLength) at ./array.jl:609
   [3] collect(::Base.TwicePrecision{Quantity{Float64,NoDims,Unitful.FreeUnits{(°,),NoDims,nothing}}}) at ./array.jl:603
   [4] broadcastable(::Base.TwicePrecision{Quantity{Float64,NoDims,Unitful.FreeUnits{(°,),NoDims,nothing}}}) at ./broadcast.jl:665
   [5] broadcasted at ./broadcast.jl:1236 [inlined]
   [6] edges_to_centers(::StepRangeLen{Quantity{Float64,NoDims,Unitful.FreeUnits{(°,),NoDims,nothing}},Base.TwicePrecision{Quantity{Float64,NoDims,Unitful.FreeUnits{(°,),NoDims,nothing}}},Base.TwicePrecision{Quantity{Float64,NoDims,Unitful.FreeUnits{(°,),NoDims,nothing}}}}) at /home/pkgeval/.julia/packages/OceanGrids/ncnJE/src/OceanGrids.jl:169
   [7] generate_grid_data_no_wet3D(::StepRangeLen{Quantity{Float64,NoDims,Unitful.FreeUnits{(°,),NoDims,nothing}},Base.TwicePrecision{Quantity{Float64,NoDims,Unitful.FreeUnits{(°,),NoDims,nothing}}},Base.TwicePrecision{Quantity{Float64,NoDims,Unitful.FreeUnits{(°,),NoDims,nothing}}}}, ::StepRangeLen{Quantity{Float64,NoDims,Unitful.FreeUnits{(°,),NoDims,nothing}},Base.TwicePrecision{Quantity{Float64,NoDims,Unitful.FreeUnits{(°,),NoDims,nothing}}},Base.TwicePrecision{Quantity{Float64,NoDims,Unitful.FreeUnits{(°,),NoDims,nothing}}}}, ::StepRangeLen{Quantity{Float64,𝐋,Unitful.FreeUnits{(m,),𝐋,nothing}},Base.TwicePrecision{Quantity{Float64,𝐋,Unitful.FreeUnits{(m,),𝐋,nothing}}},Base.TwicePrecision{Quantity{Float64,𝐋,Unitful.FreeUnits{(m,),𝐋,nothing}}}}, ::Quantity{Float64,𝐋,Unitful.FreeUnits{(km,),𝐋,nothing}}) at /home/pkgeval/.julia/packages/OceanGrids/ncnJE/src/OceanGrids.jl:111
   [8] OceanGrid(::StepRangeLen{Quantity{Float64,NoDims,Unitful.FreeUnits{(°,),NoDims,nothing}},Base.TwicePrecision{Quantity{Float64,NoDims,Unitful.FreeUnits{(°,),NoDims,nothing}}},Base.TwicePrecision{Quantity{Float64,NoDims,Unitful.FreeUnits{(°,),NoDims,nothing}}}}, ::StepRangeLen{Quantity{Float64,NoDims,Unitful.FreeUnits{(°,),NoDims,nothing}},Base.TwicePrecision{Quantity{Float64,NoDims,Unitful.FreeUnits{(°,),NoDims,nothing}}},Base.TwicePrecision{Quantity{Float64,NoDims,Unitful.FreeUnits{(°,),NoDims,nothing}}}}, ::StepRangeLen{Quantity{Float64,𝐋,Unitful.FreeUnits{(m,),𝐋,nothing}},Base.TwicePrecision{Quantity{Float64,𝐋,Unitful.FreeUnits{(m,),𝐋,nothing}}},Base.TwicePrecision{Quantity{Float64,𝐋,Unitful.FreeUnits{(m,),𝐋,nothing}}}}; R::Quantity{Float64,𝐋,Unitful.FreeUnits{(km,),𝐋,nothing}}) at /home/pkgeval/.julia/packages/OceanGrids/ncnJE/src/OceanGrids.jl:86
   [9] OceanGrid(::StepRangeLen{Quantity{Float64,NoDims,Unitful.FreeUnits{(°,),NoDims,nothing}},Base.TwicePrecision{Quantity{Float64,NoDims,Unitful.FreeUnits{(°,),NoDims,nothing}}},Base.TwicePrecision{Quantity{Float64,NoDims,Unitful.FreeUnits{(°,),NoDims,nothing}}}}, ::StepRangeLen{Quantity{Float64,NoDims,Unitful.FreeUnits{(°,),NoDims,nothing}},Base.TwicePrecision{Quantity{Float64,NoDims,Unitful.FreeUnits{(°,),NoDims,nothing}}},Base.TwicePrecision{Quantity{Float64,NoDims,Unitful.FreeUnits{(°,),NoDims,nothing}}}}, ::StepRangeLen{Quantity{Float64,𝐋,Unitful.FreeUnits{(m,),𝐋,nothing}},Base.TwicePrecision{Quantity{Float64,𝐋,Unitful.FreeUnits{(m,),𝐋,nothing}}},Base.TwicePrecision{Quantity{Float64,𝐋,Unitful.FreeUnits{(m,),𝐋,nothing}}}}) at /home/pkgeval/.julia/packages/OceanGrids/ncnJE/src/OceanGrids.jl:86
   [10] OceanGrid(::Int64, ::Int64, ::Int64) at /home/pkgeval/.julia/packages/OceanGrids/ncnJE/src/OceanGrids.jl:180
   [11] macro expansion at /home/pkgeval/.julia/packages/OceanGrids/ncnJE/test/runtests.jl:5 [inlined]
   [12] macro expansion at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1113 [inlined]
   [13] top-level scope at /home/pkgeval/.julia/packages/OceanGrids/ncnJE/test/runtests.jl:4
   [14] include(::String) at ./client.jl:439
   [15] top-level scope at none:6
   [16] eval(::Module, ::Any) at ./boot.jl:331
   [17] exec_options(::Base.JLOptions) at ./client.jl:264
   [18] _start() at ./client.jl:484
  
Test Summary:    | Error  Total
Small grid tests |     1      1
ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 1 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/OceanGrids/ncnJE/test/runtests.jl:3
err = ProcessFailedException(Base.Process[Process(`/opt/julia/bin/julia -Cnative -J/opt/julia/lib/julia/sys.so -g1 --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --inline=yes --startup-file=no --track-allocation=none --eval 'append!(empty!(Base.DEPOT_PATH), ["/home/pkgeval/.julia", "/opt/julia/local/share/julia", "/opt/julia/share/julia", "/usr/local/share/julia"])
append!(empty!(Base.DL_LOAD_PATH), String[])

cd("/home/pkgeval/.julia/packages/OceanGrids/ncnJE/test")
append!(empty!(ARGS), String[])
include("/home/pkgeval/.julia/packages/OceanGrids/ncnJE/test/runtests.jl")
'`, ProcessExited(1))])
ERROR: Package OceanGrids errored during testing
Stacktrace:
 [1] pkgerror(::String, ::Vararg{String,N} where N) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/Types.jl:54
 [2] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/Operations.jl:1471
 [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:313
 [4] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:300
 [5] #test#66 at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:294 [inlined]
 [6] test at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:294 [inlined]
 [7] #test#65 at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:293 [inlined]
 [8] test at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:293 [inlined]
 [9] test(::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:292
 [10] test(::String) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:292
 [11] top-level scope at none:13
