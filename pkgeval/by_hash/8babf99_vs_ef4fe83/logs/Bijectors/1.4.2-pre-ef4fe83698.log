Julia Version 1.4.2-pre.0
Commit ef4fe83698 (2020-04-15 16:24 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-8.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed Requires ───────────────────── v1.0.1
  Installed PDMats ─────────────────────── v0.9.12
  Installed SortingAlgorithms ──────────── v0.3.1
  Installed ArgCheck ───────────────────── v2.0.0
  Installed Rmath ──────────────────────── v0.6.1
  Installed BinaryProvider ─────────────── v0.5.9
  Installed Bijectors ──────────────────── v0.7.1
  Installed OpenBLAS_jll ───────────────── v0.3.9+4
  Installed Reexport ───────────────────── v0.2.0
  Installed Missings ───────────────────── v0.4.3
  Installed Arpack_jll ─────────────────── v3.5.0+3
  Installed DataAPI ────────────────────── v1.3.0
  Installed Roots ──────────────────────── v1.0.1
  Installed StatsFuns ──────────────────── v0.9.4
  Installed NNlib ──────────────────────── v0.6.6
  Installed Arpack ─────────────────────── v0.4.0
  Installed SpecialFunctions ───────────── v0.10.0
  Installed DataStructures ─────────────── v0.17.15
  Installed OrderedCollections ─────────── v1.2.0
  Installed MappedArrays ───────────────── v0.2.2
  Installed StatsBase ──────────────────── v0.33.0
  Installed Rmath_jll ──────────────────── v0.2.2+0
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed Compat ─────────────────────── v3.9.1
  Installed QuadGK ─────────────────────── v2.3.1
  Installed FillArrays ─────────────────── v0.8.9
  Installed Distributions ──────────────── v0.23.2
   Updating `~/.julia/environments/v1.4/Project.toml`
  [76274a88] + Bijectors v0.7.1
   Updating `~/.julia/environments/v1.4/Manifest.toml`
  [dce04be8] + ArgCheck v2.0.0
  [7d9fca2a] + Arpack v0.4.0
  [68821587] + Arpack_jll v3.5.0+3
  [76274a88] + Bijectors v0.7.1
  [b99e7846] + BinaryProvider v0.5.9
  [34da2185] + Compat v3.9.1
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [9a962f9c] + DataAPI v1.3.0
  [864edb3b] + DataStructures v0.17.15
  [31c24e10] + Distributions v0.23.2
  [1a297f60] + FillArrays v0.8.9
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [872c559c] + NNlib v0.6.6
  [4536629a] + OpenBLAS_jll v0.3.9+4
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [bac558e1] + OrderedCollections v1.2.0
  [90014a1f] + PDMats v0.9.12
  [1fd47b50] + QuadGK v2.3.1
  [189a3867] + Reexport v0.2.0
  [ae029012] + Requires v1.0.1
  [79098fc4] + Rmath v0.6.1
  [f50d1b31] + Rmath_jll v0.2.2+0
  [f2b01f46] + Roots v1.0.1
  [a2af1166] + SortingAlgorithms v0.3.1
  [276daf66] + SpecialFunctions v0.10.0
  [2913bbd2] + StatsBase v0.33.0
  [4c63d2b9] + StatsFuns v0.9.4
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [4607b0f0] + SuiteSparse 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
   Building NNlib → `~/.julia/packages/NNlib/FAI3o/deps/build.log`
    Testing Bijectors
Status `/tmp/jl_VuaMC8/Manifest.toml`
  [621f4979] AbstractFFTs v0.5.0
  [79e6a3ab] Adapt v1.0.1
  [dce04be8] ArgCheck v2.0.0
  [7d9fca2a] Arpack v0.4.0
  [68821587] Arpack_jll v3.5.0+3
  [4c555306] ArrayLayouts v0.2.6
  [76274a88] Bijectors v0.7.1
  [b99e7846] BinaryProvider v0.5.9
  [861a8166] Combinatorics v1.0.1
  [bbf7d656] CommonSubexpressions v0.2.0
  [34da2185] Compat v3.9.1
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [9a962f9c] DataAPI v1.3.0
  [864edb3b] DataStructures v0.17.15
  [163ba53b] DiffResults v1.0.2
  [b552c78f] DiffRules v1.0.1
  [31c24e10] Distributions v0.23.2
  [ced4e74d] DistributionsAD v0.5.2
  [e2ba6199] ExprTools v0.1.1
  [8f5d6c58] EzXML v1.1.0
  [1a297f60] FillArrays v0.8.9
  [f6369f11] ForwardDiff v0.10.10
  [069b7b12] FunctionWrappers v1.1.1
  [7869d1d1] IRTools v0.3.2
  [d8418881] Intervals v1.1.0
  [94ce4f54] Libiconv_jll v1.16.0+2
  [1914dd2f] MacroTools v0.5.5
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [78c3b35d] Mocking v0.7.1
  [872c559c] NNlib v0.6.6
  [77ba4419] NaNMath v0.3.3
  [4536629a] OpenBLAS_jll v0.3.9+4
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [bac558e1] OrderedCollections v1.2.0
  [90014a1f] PDMats v0.9.12
  [f27b6e38] Polynomials v0.8.0
  [1fd47b50] QuadGK v2.3.1
  [3cdcf5f2] RecipesBase v1.0.1
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v1.0.1
  [37e2e3b7] ReverseDiff v1.2.0
  [79098fc4] Rmath v0.6.1
  [f50d1b31] Rmath_jll v0.2.2+0
  [f2b01f46] Roots v1.0.1
  [a2af1166] SortingAlgorithms v0.3.1
  [276daf66] SpecialFunctions v0.10.0
  [90137ffa] StaticArrays v0.12.3
  [2913bbd2] StatsBase v0.33.0
  [4c63d2b9] StatsFuns v0.9.4
  [f269a46b] TimeZones v1.2.0
  [9f7883ad] Tracker v0.2.6
  [02c8fc9c] XML2_jll v2.9.9+4
  [83775a58] Zlib_jll v1.2.11+9
  [e88e6eb3] Zygote v0.4.20
  [700de1a5] ZygoteRules v0.2.0
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [4607b0f0] SuiteSparse 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
Test Summary: | Pass  Total
Interface     | 1260   1260
Test Summary: | Pass  Total
scalar        |  275    275
Test Summary: | Pass  Total
vector        |   82     82
Test Summary: | Pass  Total
matrix        |   22     22
Test Summary:       | Pass  Total
Dirichlet Jacobians |   20     20
Test Summary:       | Pass  Total
InvertibleBatchNorm |    7      7
Test Summary: | Pass  Total
PlanarLayer   |   13     13
Test Summary: | Pass  Total
RadialLayer   |   13     13
Test Summary: | Pass  Total
Flows         |    5      5
Test Summary: | Pass  Total
Permute       |   20     20

==================================================

Testing: Univariate discrete distributions

[ Info: Testing: Bernoulli
┌ Info: Testing: (a, b)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:96 =#
│         BetaBinomial(10, a, b)
└     end
┌ Info: Testing: (a, b)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:97 =#
│         BetaBinomial(10, a, b)
└     end
┌ Info: Testing: p->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:99 =#
│         Binomial(10, p)
└     end
┌ Info: Testing: p->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:100 =#
│         Binomial(10, p)
└     end
┌ Info: Testing: p->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:102 =#
│         Categorical(p / sum(p))
└     end
┌ Info: Testing: p->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:103 =#
│         Categorical(p / sum(p))
└     end
[ Info: Testing: Geometric
[ Info: Testing: NegativeBinomial
[ Info: Testing: Poisson
[ Info: Testing: Skellam
[ Info: Testing: PoissonBinomial
[ Info: Testing: TuringPoissonBinomial

==================================================

Testing: Univariate continuous distributions

[ Info: Testing: Arcsine
[ Info: Testing: Beta
[ Info: Testing: BetaPrime
[ Info: Testing: Biweight
[ Info: Testing: Cauchy
[ Info: Testing: Chi
[ Info: Testing: Chisq
[ Info: Testing: Cosine
[ Info: Testing: Epanechnikov
┌ Info: Testing: s->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:172 =#
│         Erlang(1, s)
└     end
[ Info: Testing: Exponential
[ Info: Testing: FDist
[ Info: Testing: Frechet
[ Info: Testing: Gamma
[ Info: Testing: GeneralizedExtremeValue
[ Info: Testing: GeneralizedPareto
[ Info: Testing: Gumbel
[ Info: Testing: InverseGamma
[ Info: Testing: InverseGaussian
[ Info: Testing: Kolmogorov
[ Info: Testing: Laplace
[ Info: Testing: Levy
┌ Info: Testing: (a, b)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:243 =#
│         LocationScale(a, b, Normal())
└     end
[ Info: Testing: Logistic
[ Info: Testing: LogitNormal
[ Info: Testing: LogNormal
[ Info: Testing: Normal
[ Info: Testing: NormalCanon
[ Info: Testing: NormalInverseGaussian
[ Info: Testing: Pareto
[ Info: Testing: PGeneralizedGaussian
[ Info: Testing: Rayleigh
[ Info: Testing: Semicircle
[ Info: Testing: SymTriangularDist
[ Info: Testing: TDist
[ Info: Testing: TriangularDist
[ Info: Testing: Triweight
┌ Info: Testing: (mu, sigma, l, u)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:318 =#
│         truncated(Normal(mu, sigma), l, u)
└     end
[ Info: Testing: Uniform
[ Info: Testing: TuringUniform
[ Info: Testing: VonMises
[ Info: Testing: Weibull

==================================================

Testing: Multivariate discrete distributions

┌ Info: Testing: p->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:363 =#
│         Multinomial(2, p / sum(p))
└     end
┌ Info: Testing: (var"##x#617",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Bernoulli(var"##x#617"), 2)
└     end
┌ Info: Testing: (var"##x#618",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Bernoulli(var"##x#618"), 2)
└     end
┌ Info: Testing: (var"##x#619", var"##x#620")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist((((a, b)->begin
│                     #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:96 =#
│                     BetaBinomial(10, a, b)
│                 end))(var"##x#619", var"##x#620"), 2)
└     end
┌ Info: Testing: (var"##x#621",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(((p->begin
│                     #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:99 =#
│                     Binomial(10, p)
│                 end))(var"##x#621"), 2)
└     end
┌ Info: Testing: (var"##x#622",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(((p->begin
│                     #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:102 =#
│                     Categorical(p / sum(p))
│                 end))(var"##x#622"), 2)
└     end
┌ Info: Testing: (var"##x#623",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Geometric(var"##x#623"), 2)
└     end
┌ Info: Testing: (var"##x#624", var"##x#625")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(NegativeBinomial(var"##x#624", var"##x#625"), 2)
└     end
┌ Info: Testing: (var"##x#626",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Poisson(var"##x#626"), 2)
└     end
┌ Info: Testing: (var"##x#627", var"##x#628")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Skellam(var"##x#627", var"##x#628"), 2)
└     end
┌ Info: Testing: (var"##x#629",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(PoissonBinomial(var"##x#629"), 2)
└     end
┌ Info: Testing: (var"##x#630",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(TuringPoissonBinomial(var"##x#630"), 2)
└     end
┌ Info: Testing: (var"##x#631",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:29 =#
│         arraydist(reshape(fill(Bernoulli(var"##x#631"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#632",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:29 =#
│         arraydist(reshape(fill(Bernoulli(var"##x#632"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#633", var"##x#634")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:29 =#
│         arraydist(reshape(fill((((a, b)->begin
│                             #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:96 =#
│                             BetaBinomial(10, a, b)
│                         end))(var"##x#633", var"##x#634"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#635",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:29 =#
│         arraydist(reshape(fill(((p->begin
│                             #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:99 =#
│                             Binomial(10, p)
│                         end))(var"##x#635"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#636",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:29 =#
│         arraydist(reshape(fill(((p->begin
│                             #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:102 =#
│                             Categorical(p / sum(p))
│                         end))(var"##x#636"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#637",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:29 =#
│         arraydist(reshape(fill(Geometric(var"##x#637"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#638", var"##x#639")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:29 =#
│         arraydist(reshape(fill(NegativeBinomial(var"##x#638", var"##x#639"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#640",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:29 =#
│         arraydist(reshape(fill(Poisson(var"##x#640"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#641", var"##x#642")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:29 =#
│         arraydist(reshape(fill(Skellam(var"##x#641", var"##x#642"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#643",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:29 =#
│         arraydist(reshape(fill(PoissonBinomial(var"##x#643"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#644",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:29 =#
│         arraydist(reshape(fill(TuringPoissonBinomial(var"##x#644"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#645",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Bernoulli(var"##x#645"), 2)
└     end
┌ Info: Testing: (var"##x#646",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Bernoulli(var"##x#646"), 2)
└     end
┌ Info: Testing: (var"##x#647", var"##x#648")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist((((a, b)->begin
│                     #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:96 =#
│                     BetaBinomial(10, a, b)
│                 end))(var"##x#647", var"##x#648"), 2)
└     end
┌ Info: Testing: (var"##x#649",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(((p->begin
│                     #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:99 =#
│                     Binomial(10, p)
│                 end))(var"##x#649"), 2)
└     end
┌ Info: Testing: (var"##x#650",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(((p->begin
│                     #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:102 =#
│                     Categorical(p / sum(p))
│                 end))(var"##x#650"), 2)
└     end
┌ Info: Testing: (var"##x#651",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Geometric(var"##x#651"), 2)
└     end
┌ Info: Testing: (var"##x#652", var"##x#653")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(NegativeBinomial(var"##x#652", var"##x#653"), 2)
└     end
┌ Info: Testing: (var"##x#654",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Poisson(var"##x#654"), 2)
└     end
┌ Info: Testing: (var"##x#655", var"##x#656")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Skellam(var"##x#655", var"##x#656"), 2)
└     end
┌ Info: Testing: (var"##x#657",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(PoissonBinomial(var"##x#657"), 2)
└     end
┌ Info: Testing: (var"##x#658",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(TuringPoissonBinomial(var"##x#658"), 2)
└     end
┌ Info: Testing: (var"##x#659",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:29 =#
│         arraydist(reshape(fill(Bernoulli(var"##x#659"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#660",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:29 =#
│         arraydist(reshape(fill(Bernoulli(var"##x#660"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#661", var"##x#662")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:29 =#
│         arraydist(reshape(fill((((a, b)->begin
│                             #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:96 =#
│                             BetaBinomial(10, a, b)
│                         end))(var"##x#661", var"##x#662"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#663",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:29 =#
│         arraydist(reshape(fill(((p->begin
│                             #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:99 =#
│                             Binomial(10, p)
│                         end))(var"##x#663"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#664",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:29 =#
│         arraydist(reshape(fill(((p->begin
│                             #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:102 =#
│                             Categorical(p / sum(p))
│                         end))(var"##x#664"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#665",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:29 =#
│         arraydist(reshape(fill(Geometric(var"##x#665"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#666", var"##x#667")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:29 =#
│         arraydist(reshape(fill(NegativeBinomial(var"##x#666", var"##x#667"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#668",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:29 =#
│         arraydist(reshape(fill(Poisson(var"##x#668"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#669", var"##x#670")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:29 =#
│         arraydist(reshape(fill(Skellam(var"##x#669", var"##x#670"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#671",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:29 =#
│         arraydist(reshape(fill(PoissonBinomial(var"##x#671"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#672",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:29 =#
│         arraydist(reshape(fill(TuringPoissonBinomial(var"##x#672"), prod((2,))), 2))
└     end

==================================================

Testing: Multivariate continuous distributions

┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Arcsine(), 2)
└     end
┌ Info: Testing: (var"##x#673",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Arcsine(var"##x#673"), 2)
└     end
┌ Info: Testing: (var"##x#674", var"##x#675")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Arcsine(var"##x#674", var"##x#675"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Beta(), 2)
└     end
┌ Info: Testing: (var"##x#676",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Beta(var"##x#676"), 2)
└     end
┌ Info: Testing: (var"##x#677", var"##x#678")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Beta(var"##x#677", var"##x#678"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(BetaPrime(), 2)
└     end
┌ Info: Testing: (var"##x#679",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(BetaPrime(var"##x#679"), 2)
└     end
┌ Info: Testing: (var"##x#680", var"##x#681")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(BetaPrime(var"##x#680", var"##x#681"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Biweight(), 2)
└     end
┌ Info: Testing: (var"##x#682",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Biweight(var"##x#682"), 2)
└     end
┌ Info: Testing: (var"##x#683", var"##x#684")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Biweight(var"##x#683", var"##x#684"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Cauchy(), 2)
└     end
┌ Info: Testing: (var"##x#685",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Cauchy(var"##x#685"), 2)
└     end
┌ Info: Testing: (var"##x#686", var"##x#687")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Cauchy(var"##x#686", var"##x#687"), 2)
└     end
┌ Info: Testing: (var"##x#688",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Chi(var"##x#688"), 2)
└     end
┌ Info: Testing: (var"##x#689",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Chisq(var"##x#689"), 2)
└     end
┌ Info: Testing: (var"##x#690", var"##x#691")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Cosine(var"##x#690", var"##x#691"), 2)
└     end
┌ Info: Testing: (var"##x#692", var"##x#693")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Epanechnikov(var"##x#692", var"##x#693"), 2)
└     end
┌ Info: Testing: (var"##x#694",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(((s->begin
│                     #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:172 =#
│                     Erlang(1, s)
│                 end))(var"##x#694"), 2)
└     end
┌ Info: Testing: (var"##x#695",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Exponential(var"##x#695"), 2)
└     end
┌ Info: Testing: (var"##x#696", var"##x#697")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(FDist(var"##x#696", var"##x#697"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Frechet(), 2)
└     end
┌ Info: Testing: (var"##x#698",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Frechet(var"##x#698"), 2)
└     end
┌ Info: Testing: (var"##x#699", var"##x#700")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Frechet(var"##x#699", var"##x#700"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Gamma(), 2)
└     end
┌ Info: Testing: (var"##x#701",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Gamma(var"##x#701"), 2)
└     end
┌ Info: Testing: (var"##x#702", var"##x#703")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Gamma(var"##x#702", var"##x#703"), 2)
└     end
┌ Info: Testing: (var"##x#704", var"##x#705", var"##x#706")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(GeneralizedExtremeValue(var"##x#704", var"##x#705", var"##x#706"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(GeneralizedPareto(), 2)
└     end
┌ Info: Testing: (var"##x#707", var"##x#708")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(GeneralizedPareto(var"##x#707", var"##x#708"), 2)
└     end
┌ Info: Testing: (var"##x#709", var"##x#710", var"##x#711")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(GeneralizedPareto(var"##x#709", var"##x#710", var"##x#711"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Gumbel(), 2)
└     end
┌ Info: Testing: (var"##x#712",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Gumbel(var"##x#712"), 2)
└     end
┌ Info: Testing: (var"##x#713", var"##x#714")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Gumbel(var"##x#713", var"##x#714"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(InverseGamma(), 2)
└     end
┌ Info: Testing: (var"##x#715",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(InverseGamma(var"##x#715"), 2)
└     end
┌ Info: Testing: (var"##x#716", var"##x#717")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(InverseGamma(var"##x#716", var"##x#717"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(InverseGaussian(), 2)
└     end
┌ Info: Testing: (var"##x#718",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(InverseGaussian(var"##x#718"), 2)
└     end
┌ Info: Testing: (var"##x#719", var"##x#720")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(InverseGaussian(var"##x#719", var"##x#720"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Kolmogorov(), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Laplace(), 2)
└     end
┌ Info: Testing: (var"##x#721",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Laplace(var"##x#721"), 2)
└     end
┌ Info: Testing: (var"##x#722", var"##x#723")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Laplace(var"##x#722", var"##x#723"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Levy(), 2)
└     end
┌ Info: Testing: (var"##x#724",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Levy(var"##x#724"), 2)
└     end
┌ Info: Testing: (var"##x#725", var"##x#726")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Levy(var"##x#725", var"##x#726"), 2)
└     end
┌ Info: Testing: (var"##x#727", var"##x#728")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist((((a, b)->begin
│                     #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:243 =#
│                     LocationScale(a, b, Normal())
│                 end))(var"##x#727", var"##x#728"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Logistic(), 2)
└     end
┌ Info: Testing: (var"##x#729",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Logistic(var"##x#729"), 2)
└     end
┌ Info: Testing: (var"##x#730", var"##x#731")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Logistic(var"##x#730", var"##x#731"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(LogitNormal(), 2)
└     end
┌ Info: Testing: (var"##x#732",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(LogitNormal(var"##x#732"), 2)
└     end
┌ Info: Testing: (var"##x#733", var"##x#734")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(LogitNormal(var"##x#733", var"##x#734"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(LogNormal(), 2)
└     end
┌ Info: Testing: (var"##x#735",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(LogNormal(var"##x#735"), 2)
└     end
┌ Info: Testing: (var"##x#736", var"##x#737")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(LogNormal(var"##x#736", var"##x#737"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Normal(), 2)
└     end
┌ Info: Testing: (var"##x#738",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Normal(var"##x#738"), 2)
└     end
┌ Info: Testing: (var"##x#739", var"##x#740")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Normal(var"##x#739", var"##x#740"), 2)
└     end
┌ Info: Testing: (var"##x#741", var"##x#742")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(NormalCanon(var"##x#741", var"##x#742"), 2)
└     end
┌ Info: Testing: (var"##x#743", var"##x#744", var"##x#745", var"##x#746")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(NormalInverseGaussian(var"##x#743", var"##x#744", var"##x#745", var"##x#746"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Pareto(), 2)
└     end
┌ Info: Testing: (var"##x#747",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Pareto(var"##x#747"), 2)
└     end
┌ Info: Testing: (var"##x#748", var"##x#749")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Pareto(var"##x#748", var"##x#749"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(PGeneralizedGaussian(), 2)
└     end
┌ Info: Testing: (var"##x#750", var"##x#751", var"##x#752")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(PGeneralizedGaussian(var"##x#750", var"##x#751", var"##x#752"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Rayleigh(), 2)
└     end
┌ Info: Testing: (var"##x#753",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Rayleigh(var"##x#753"), 2)
└     end
┌ Info: Testing: (var"##x#754",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Semicircle(var"##x#754"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(SymTriangularDist(), 2)
└     end
┌ Info: Testing: (var"##x#755",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(SymTriangularDist(var"##x#755"), 2)
└     end
┌ Info: Testing: (var"##x#756", var"##x#757")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(SymTriangularDist(var"##x#756", var"##x#757"), 2)
└     end
┌ Info: Testing: (var"##x#758",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(TDist(var"##x#758"), 2)
└     end
┌ Info: Testing: (var"##x#759", var"##x#760")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Triweight(var"##x#759", var"##x#760"), 2)
└     end
┌ Info: Testing: (var"##x#761", var"##x#762", var"##x#763", var"##x#764")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist((((mu, sigma, l, u)->begin
│                     #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:318 =#
│                     truncated(Normal(mu, sigma), l, u)
│                 end))(var"##x#761", var"##x#762", var"##x#763", var"##x#764"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Uniform(), 2)
└     end
┌ Info: Testing: (var"##x#765", var"##x#766")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Uniform(var"##x#765", var"##x#766"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(TuringUniform(), 2)
└     end
┌ Info: Testing: (var"##x#767", var"##x#768")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(TuringUniform(var"##x#767", var"##x#768"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Weibull(), 2)
└     end
┌ Info: Testing: (var"##x#769",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Weibull(var"##x#769"), 2)
└     end
┌ Info: Testing: (var"##x#770", var"##x#771")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:25 =#
│         filldist(Weibull(var"##x#770", var"##x#771"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/eapex/test/ad/distributions.jl:29 =#
│         arraydist(reshape(fill(Arcsine(), prod((2,))), 2))
└     end
