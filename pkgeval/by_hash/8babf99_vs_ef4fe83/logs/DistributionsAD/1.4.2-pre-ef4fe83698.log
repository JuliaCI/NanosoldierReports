Julia Version 1.4.2-pre.0
Commit ef4fe83698 (2020-04-15 16:24 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-8.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed Requires ───────────────────── v1.0.1
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed ZygoteRules ────────────────── v0.2.0
  Installed PDMats ─────────────────────── v0.9.12
  Installed DistributionsAD ────────────── v0.5.2
  Installed DiffResults ────────────────── v1.0.2
  Installed RecipesBase ────────────────── v1.0.1
  Installed BinaryProvider ─────────────── v0.5.9
  Installed Adapt ──────────────────────── v1.0.1
  Installed EzXML ──────────────────────── v1.1.0
  Installed Missings ───────────────────── v0.4.3
  Installed ExprTools ──────────────────── v0.1.1
  Installed Rmath ──────────────────────── v0.6.1
  Installed SortingAlgorithms ──────────── v0.3.1
  Installed Intervals ──────────────────── v1.1.0
  Installed DiffRules ──────────────────── v1.0.1
  Installed OpenBLAS_jll ───────────────── v0.3.9+4
  Installed Zlib_jll ───────────────────── v1.2.11+9
  Installed Arpack_jll ─────────────────── v3.5.0+3
  Installed ForwardDiff ────────────────── v0.10.10
  Installed DataAPI ────────────────────── v1.3.0
  Installed StatsFuns ──────────────────── v0.9.4
  Installed MacroTools ─────────────────── v0.5.5
  Installed NNlib ──────────────────────── v0.6.6
  Installed Polynomials ────────────────── v0.8.0
  Installed Arpack ─────────────────────── v0.4.0
  Installed NaNMath ────────────────────── v0.3.3
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed SpecialFunctions ───────────── v0.10.0
  Installed Combinatorics ──────────────── v1.0.1
  Installed CommonSubexpressions ───────── v0.2.0
  Installed DataStructures ─────────────── v0.17.15
  Installed StaticArrays ───────────────── v0.12.3
  Installed TimeZones ──────────────────── v1.2.0
  Installed Mocking ────────────────────── v0.7.1
  Installed Rmath_jll ──────────────────── v0.2.2+0
  Installed Libiconv_jll ───────────────── v1.16.0+2
  Installed Compat ─────────────────────── v3.9.1
  Installed QuadGK ─────────────────────── v2.3.1
  Installed Tracker ────────────────────── v0.2.6
  Installed OrderedCollections ─────────── v1.2.0
  Installed StatsBase ──────────────────── v0.33.0
  Installed XML2_jll ───────────────────── v2.9.9+4
  Installed Distributions ──────────────── v0.23.2
  Installed FillArrays ─────────────────── v0.8.9
   Updating `~/.julia/environments/v1.4/Project.toml`
  [ced4e74d] + DistributionsAD v0.5.2
   Updating `~/.julia/environments/v1.4/Manifest.toml`
  [79e6a3ab] + Adapt v1.0.1
  [7d9fca2a] + Arpack v0.4.0
  [68821587] + Arpack_jll v3.5.0+3
  [b99e7846] + BinaryProvider v0.5.9
  [861a8166] + Combinatorics v1.0.1
  [bbf7d656] + CommonSubexpressions v0.2.0
  [34da2185] + Compat v3.9.1
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [9a962f9c] + DataAPI v1.3.0
  [864edb3b] + DataStructures v0.17.15
  [163ba53b] + DiffResults v1.0.2
  [b552c78f] + DiffRules v1.0.1
  [31c24e10] + Distributions v0.23.2
  [ced4e74d] + DistributionsAD v0.5.2
  [e2ba6199] + ExprTools v0.1.1
  [8f5d6c58] + EzXML v1.1.0
  [1a297f60] + FillArrays v0.8.9
  [f6369f11] + ForwardDiff v0.10.10
  [d8418881] + Intervals v1.1.0
  [94ce4f54] + Libiconv_jll v1.16.0+2
  [1914dd2f] + MacroTools v0.5.5
  [e1d29d7a] + Missings v0.4.3
  [78c3b35d] + Mocking v0.7.1
  [872c559c] + NNlib v0.6.6
  [77ba4419] + NaNMath v0.3.3
  [4536629a] + OpenBLAS_jll v0.3.9+4
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [bac558e1] + OrderedCollections v1.2.0
  [90014a1f] + PDMats v0.9.12
  [f27b6e38] + Polynomials v0.8.0
  [1fd47b50] + QuadGK v2.3.1
  [3cdcf5f2] + RecipesBase v1.0.1
  [ae029012] + Requires v1.0.1
  [79098fc4] + Rmath v0.6.1
  [f50d1b31] + Rmath_jll v0.2.2+0
  [a2af1166] + SortingAlgorithms v0.3.1
  [276daf66] + SpecialFunctions v0.10.0
  [90137ffa] + StaticArrays v0.12.3
  [2913bbd2] + StatsBase v0.33.0
  [4c63d2b9] + StatsFuns v0.9.4
  [f269a46b] + TimeZones v1.2.0
  [9f7883ad] + Tracker v0.2.6
  [02c8fc9c] + XML2_jll v2.9.9+4
  [83775a58] + Zlib_jll v1.2.11+9
  [700de1a5] + ZygoteRules v0.2.0
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [4607b0f0] + SuiteSparse 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
   Building NNlib ────→ `~/.julia/packages/NNlib/FAI3o/deps/build.log`
   Building TimeZones → `~/.julia/packages/TimeZones/OjMoF/deps/build.log`
    Testing DistributionsAD
Status `/tmp/jl_gRENBZ/Manifest.toml`
  [621f4979] AbstractFFTs v0.5.0
  [79e6a3ab] Adapt v1.0.1
  [7d9fca2a] Arpack v0.4.0
  [68821587] Arpack_jll v3.5.0+3
  [4c555306] ArrayLayouts v0.2.6
  [b99e7846] BinaryProvider v0.5.9
  [861a8166] Combinatorics v1.0.1
  [bbf7d656] CommonSubexpressions v0.2.0
  [34da2185] Compat v3.9.1
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [9a962f9c] DataAPI v1.3.0
  [864edb3b] DataStructures v0.17.15
  [163ba53b] DiffResults v1.0.2
  [b552c78f] DiffRules v1.0.1
  [31c24e10] Distributions v0.23.2
  [ced4e74d] DistributionsAD v0.5.2
  [e2ba6199] ExprTools v0.1.1
  [8f5d6c58] EzXML v1.1.0
  [1a297f60] FillArrays v0.8.9
  [26cc04aa] FiniteDifferences v0.10.0
  [f6369f11] ForwardDiff v0.10.10
  [069b7b12] FunctionWrappers v1.1.1
  [7869d1d1] IRTools v0.3.2
  [d8418881] Intervals v1.1.0
  [94ce4f54] Libiconv_jll v1.16.0+2
  [1914dd2f] MacroTools v0.5.5
  [e1d29d7a] Missings v0.4.3
  [78c3b35d] Mocking v0.7.1
  [872c559c] NNlib v0.6.6
  [77ba4419] NaNMath v0.3.3
  [4536629a] OpenBLAS_jll v0.3.9+4
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [bac558e1] OrderedCollections v1.2.0
  [90014a1f] PDMats v0.9.12
  [f27b6e38] Polynomials v0.8.0
  [1fd47b50] QuadGK v2.3.1
  [3cdcf5f2] RecipesBase v1.0.1
  [ae029012] Requires v1.0.1
  [37e2e3b7] ReverseDiff v1.2.0
  [79098fc4] Rmath v0.6.1
  [f50d1b31] Rmath_jll v0.2.2+0
  [a2af1166] SortingAlgorithms v0.3.1
  [276daf66] SpecialFunctions v0.10.0
  [90137ffa] StaticArrays v0.12.3
  [2913bbd2] StatsBase v0.33.0
  [4c63d2b9] StatsFuns v0.9.4
  [f269a46b] TimeZones v1.2.0
  [9f7883ad] Tracker v0.2.6
  [02c8fc9c] XML2_jll v2.9.9+4
  [83775a58] Zlib_jll v1.2.11+9
  [e88e6eb3] Zygote v0.4.20
  [700de1a5] ZygoteRules v0.2.0
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [4607b0f0] SuiteSparse 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 

==================================================

Testing: Univariate discrete distributions

[ Info: Testing: Bernoulli
┌ Info: Testing: (a, b)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:86 =#
│         BetaBinomial(10, a, b)
└     end
┌ Info: Testing: (a, b)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:87 =#
│         BetaBinomial(10, a, b)
└     end
┌ Info: Testing: p->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:89 =#
│         Binomial(10, p)
└     end
┌ Info: Testing: p->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:90 =#
│         Binomial(10, p)
└     end
┌ Info: Testing: p->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:92 =#
│         Categorical(p / sum(p))
└     end
┌ Info: Testing: p->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:93 =#
│         Categorical(p / sum(p))
└     end
[ Info: Testing: Geometric
[ Info: Testing: NegativeBinomial
[ Info: Testing: Poisson
[ Info: Testing: Skellam
[ Info: Testing: PoissonBinomial
[ Info: Testing: TuringPoissonBinomial
Test Summary:                     | Pass  Total
Univariate discrete distributions |  102    102

==================================================

Testing: Univariate continuous distributions

[ Info: Testing: Arcsine
[ Info: Testing: Beta
[ Info: Testing: BetaPrime
[ Info: Testing: Biweight
[ Info: Testing: Cauchy
[ Info: Testing: Chi
[ Info: Testing: Chisq
[ Info: Testing: Cosine
[ Info: Testing: Epanechnikov
┌ Info: Testing: s->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:162 =#
│         Erlang(1, s)
└     end
[ Info: Testing: Exponential
[ Info: Testing: FDist
[ Info: Testing: Frechet
[ Info: Testing: Gamma
[ Info: Testing: GeneralizedExtremeValue
[ Info: Testing: GeneralizedPareto
[ Info: Testing: Gumbel
[ Info: Testing: InverseGamma
[ Info: Testing: InverseGaussian
[ Info: Testing: Kolmogorov
[ Info: Testing: Laplace
[ Info: Testing: Levy
┌ Info: Testing: (a, b)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:233 =#
│         LocationScale(a, b, Normal())
└     end
[ Info: Testing: Logistic
[ Info: Testing: LogitNormal
[ Info: Testing: LogNormal
[ Info: Testing: Normal
[ Info: Testing: NormalCanon
[ Info: Testing: NormalInverseGaussian
[ Info: Testing: Pareto
[ Info: Testing: PGeneralizedGaussian
[ Info: Testing: Rayleigh
[ Info: Testing: Semicircle
[ Info: Testing: SymTriangularDist
[ Info: Testing: TDist
[ Info: Testing: TriangularDist
[ Info: Testing: Triweight
┌ Info: Testing: (mu, sigma, l, u)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:308 =#
│         truncated(Normal(mu, sigma), l, u)
└     end
[ Info: Testing: Uniform
[ Info: Testing: TuringUniform
[ Info: Testing: VonMises
[ Info: Testing: Weibull
Test Summary:                       | Pass  Total
Univariate continuous distributions | 1107   1107

==================================================

Testing: Multivariate discrete distributions

┌ Info: Testing: p->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:350 =#
│         Multinomial(2, p / sum(p))
└     end
┌ Info: Testing: (var"##x#437",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Bernoulli(var"##x#437"), 2)
└     end
┌ Info: Testing: (var"##x#438",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Bernoulli(var"##x#438"), 2)
└     end
┌ Info: Testing: (var"##x#439", var"##x#440")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist((((a, b)->begin
│                     #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:86 =#
│                     BetaBinomial(10, a, b)
│                 end))(var"##x#439", var"##x#440"), 2)
└     end
┌ Info: Testing: (var"##x#441",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(((p->begin
│                     #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:89 =#
│                     Binomial(10, p)
│                 end))(var"##x#441"), 2)
└     end
┌ Info: Testing: (var"##x#442",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(((p->begin
│                     #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:92 =#
│                     Categorical(p / sum(p))
│                 end))(var"##x#442"), 2)
└     end
┌ Info: Testing: (var"##x#443",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Geometric(var"##x#443"), 2)
└     end
┌ Info: Testing: (var"##x#444", var"##x#445")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(NegativeBinomial(var"##x#444", var"##x#445"), 2)
└     end
┌ Info: Testing: (var"##x#446",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Poisson(var"##x#446"), 2)
└     end
┌ Info: Testing: (var"##x#447", var"##x#448")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Skellam(var"##x#447", var"##x#448"), 2)
└     end
┌ Info: Testing: (var"##x#449",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(PoissonBinomial(var"##x#449"), 2)
└     end
┌ Info: Testing: (var"##x#450",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(TuringPoissonBinomial(var"##x#450"), 2)
└     end
┌ Info: Testing: (var"##x#451",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Bernoulli(var"##x#451"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#452",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Bernoulli(var"##x#452"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#453", var"##x#454")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill((((a, b)->begin
│                             #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:86 =#
│                             BetaBinomial(10, a, b)
│                         end))(var"##x#453", var"##x#454"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#455",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(((p->begin
│                             #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:89 =#
│                             Binomial(10, p)
│                         end))(var"##x#455"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#456",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(((p->begin
│                             #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:92 =#
│                             Categorical(p / sum(p))
│                         end))(var"##x#456"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#457",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Geometric(var"##x#457"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#458", var"##x#459")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(NegativeBinomial(var"##x#458", var"##x#459"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#460",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Poisson(var"##x#460"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#461", var"##x#462")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Skellam(var"##x#461", var"##x#462"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#463",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(PoissonBinomial(var"##x#463"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#464",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(TuringPoissonBinomial(var"##x#464"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#465",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Bernoulli(var"##x#465"), 2)
└     end
┌ Info: Testing: (var"##x#466",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Bernoulli(var"##x#466"), 2)
└     end
┌ Info: Testing: (var"##x#467", var"##x#468")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist((((a, b)->begin
│                     #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:86 =#
│                     BetaBinomial(10, a, b)
│                 end))(var"##x#467", var"##x#468"), 2)
└     end
┌ Info: Testing: (var"##x#469",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(((p->begin
│                     #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:89 =#
│                     Binomial(10, p)
│                 end))(var"##x#469"), 2)
└     end
┌ Info: Testing: (var"##x#470",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(((p->begin
│                     #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:92 =#
│                     Categorical(p / sum(p))
│                 end))(var"##x#470"), 2)
└     end
┌ Info: Testing: (var"##x#471",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Geometric(var"##x#471"), 2)
└     end
┌ Info: Testing: (var"##x#472", var"##x#473")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(NegativeBinomial(var"##x#472", var"##x#473"), 2)
└     end
┌ Info: Testing: (var"##x#474",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Poisson(var"##x#474"), 2)
└     end
┌ Info: Testing: (var"##x#475", var"##x#476")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Skellam(var"##x#475", var"##x#476"), 2)
└     end
┌ Info: Testing: (var"##x#477",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(PoissonBinomial(var"##x#477"), 2)
└     end
┌ Info: Testing: (var"##x#478",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(TuringPoissonBinomial(var"##x#478"), 2)
└     end
┌ Info: Testing: (var"##x#479",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Bernoulli(var"##x#479"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#480",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Bernoulli(var"##x#480"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#481", var"##x#482")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill((((a, b)->begin
│                             #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:86 =#
│                             BetaBinomial(10, a, b)
│                         end))(var"##x#481", var"##x#482"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#483",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(((p->begin
│                             #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:89 =#
│                             Binomial(10, p)
│                         end))(var"##x#483"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#484",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(((p->begin
│                             #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:92 =#
│                             Categorical(p / sum(p))
│                         end))(var"##x#484"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#485",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Geometric(var"##x#485"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#486", var"##x#487")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(NegativeBinomial(var"##x#486", var"##x#487"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#488",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Poisson(var"##x#488"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#489", var"##x#490")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Skellam(var"##x#489", var"##x#490"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#491",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(PoissonBinomial(var"##x#491"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#492",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(TuringPoissonBinomial(var"##x#492"), prod((2,))), 2))
└     end
Test Summary:                       | Pass  Total
Multivariate discrete distributions |  207    207

==================================================

Testing: Multivariate continuous distributions

┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Arcsine(), 2)
└     end
┌ Info: Testing: (var"##x#493",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Arcsine(var"##x#493"), 2)
└     end
┌ Info: Testing: (var"##x#494", var"##x#495")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Arcsine(var"##x#494", var"##x#495"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Beta(), 2)
└     end
┌ Info: Testing: (var"##x#496",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Beta(var"##x#496"), 2)
└     end
┌ Info: Testing: (var"##x#497", var"##x#498")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Beta(var"##x#497", var"##x#498"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(BetaPrime(), 2)
└     end
┌ Info: Testing: (var"##x#499",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(BetaPrime(var"##x#499"), 2)
└     end
┌ Info: Testing: (var"##x#500", var"##x#501")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(BetaPrime(var"##x#500", var"##x#501"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Biweight(), 2)
└     end
┌ Info: Testing: (var"##x#502",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Biweight(var"##x#502"), 2)
└     end
┌ Info: Testing: (var"##x#503", var"##x#504")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Biweight(var"##x#503", var"##x#504"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Cauchy(), 2)
└     end
┌ Info: Testing: (var"##x#505",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Cauchy(var"##x#505"), 2)
└     end
┌ Info: Testing: (var"##x#506", var"##x#507")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Cauchy(var"##x#506", var"##x#507"), 2)
└     end
┌ Info: Testing: (var"##x#508",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Chi(var"##x#508"), 2)
└     end
┌ Info: Testing: (var"##x#509",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Chisq(var"##x#509"), 2)
└     end
┌ Info: Testing: (var"##x#510", var"##x#511")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Cosine(var"##x#510", var"##x#511"), 2)
└     end
┌ Info: Testing: (var"##x#512", var"##x#513")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Epanechnikov(var"##x#512", var"##x#513"), 2)
└     end
┌ Info: Testing: (var"##x#514",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(((s->begin
│                     #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:162 =#
│                     Erlang(1, s)
│                 end))(var"##x#514"), 2)
└     end
┌ Info: Testing: (var"##x#515",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Exponential(var"##x#515"), 2)
└     end
┌ Info: Testing: (var"##x#516", var"##x#517")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(FDist(var"##x#516", var"##x#517"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Frechet(), 2)
└     end
┌ Info: Testing: (var"##x#518",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Frechet(var"##x#518"), 2)
└     end
┌ Info: Testing: (var"##x#519", var"##x#520")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Frechet(var"##x#519", var"##x#520"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Gamma(), 2)
└     end
┌ Info: Testing: (var"##x#521",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Gamma(var"##x#521"), 2)
└     end
┌ Info: Testing: (var"##x#522", var"##x#523")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Gamma(var"##x#522", var"##x#523"), 2)
└     end
┌ Info: Testing: (var"##x#524", var"##x#525", var"##x#526")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(GeneralizedExtremeValue(var"##x#524", var"##x#525", var"##x#526"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(GeneralizedPareto(), 2)
└     end
┌ Info: Testing: (var"##x#527", var"##x#528")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(GeneralizedPareto(var"##x#527", var"##x#528"), 2)
└     end
┌ Info: Testing: (var"##x#529", var"##x#530", var"##x#531")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(GeneralizedPareto(var"##x#529", var"##x#530", var"##x#531"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Gumbel(), 2)
└     end
┌ Info: Testing: (var"##x#532",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Gumbel(var"##x#532"), 2)
└     end
┌ Info: Testing: (var"##x#533", var"##x#534")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Gumbel(var"##x#533", var"##x#534"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(InverseGamma(), 2)
└     end
┌ Info: Testing: (var"##x#535",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(InverseGamma(var"##x#535"), 2)
└     end
┌ Info: Testing: (var"##x#536", var"##x#537")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(InverseGamma(var"##x#536", var"##x#537"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(InverseGaussian(), 2)
└     end
┌ Info: Testing: (var"##x#538",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(InverseGaussian(var"##x#538"), 2)
└     end
┌ Info: Testing: (var"##x#539", var"##x#540")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(InverseGaussian(var"##x#539", var"##x#540"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Kolmogorov(), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Laplace(), 2)
└     end
┌ Info: Testing: (var"##x#541",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Laplace(var"##x#541"), 2)
└     end
┌ Info: Testing: (var"##x#542", var"##x#543")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Laplace(var"##x#542", var"##x#543"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Levy(), 2)
└     end
┌ Info: Testing: (var"##x#544",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Levy(var"##x#544"), 2)
└     end
┌ Info: Testing: (var"##x#545", var"##x#546")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Levy(var"##x#545", var"##x#546"), 2)
└     end
┌ Info: Testing: (var"##x#547", var"##x#548")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist((((a, b)->begin
│                     #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:233 =#
│                     LocationScale(a, b, Normal())
│                 end))(var"##x#547", var"##x#548"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Logistic(), 2)
└     end
┌ Info: Testing: (var"##x#549",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Logistic(var"##x#549"), 2)
└     end
┌ Info: Testing: (var"##x#550", var"##x#551")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Logistic(var"##x#550", var"##x#551"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(LogitNormal(), 2)
└     end
┌ Info: Testing: (var"##x#552",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(LogitNormal(var"##x#552"), 2)
└     end
┌ Info: Testing: (var"##x#553", var"##x#554")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(LogitNormal(var"##x#553", var"##x#554"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(LogNormal(), 2)
└     end
┌ Info: Testing: (var"##x#555",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(LogNormal(var"##x#555"), 2)
└     end
┌ Info: Testing: (var"##x#556", var"##x#557")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(LogNormal(var"##x#556", var"##x#557"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Normal(), 2)
└     end
┌ Info: Testing: (var"##x#558",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Normal(var"##x#558"), 2)
└     end
┌ Info: Testing: (var"##x#559", var"##x#560")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Normal(var"##x#559", var"##x#560"), 2)
└     end
┌ Info: Testing: (var"##x#561", var"##x#562")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(NormalCanon(var"##x#561", var"##x#562"), 2)
└     end
┌ Info: Testing: (var"##x#563", var"##x#564", var"##x#565", var"##x#566")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(NormalInverseGaussian(var"##x#563", var"##x#564", var"##x#565", var"##x#566"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Pareto(), 2)
└     end
┌ Info: Testing: (var"##x#567",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Pareto(var"##x#567"), 2)
└     end
┌ Info: Testing: (var"##x#568", var"##x#569")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Pareto(var"##x#568", var"##x#569"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(PGeneralizedGaussian(), 2)
└     end
┌ Info: Testing: (var"##x#570", var"##x#571", var"##x#572")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(PGeneralizedGaussian(var"##x#570", var"##x#571", var"##x#572"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Rayleigh(), 2)
└     end
┌ Info: Testing: (var"##x#573",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Rayleigh(var"##x#573"), 2)
└     end
┌ Info: Testing: (var"##x#574",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Semicircle(var"##x#574"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(SymTriangularDist(), 2)
└     end
┌ Info: Testing: (var"##x#575",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(SymTriangularDist(var"##x#575"), 2)
└     end
┌ Info: Testing: (var"##x#576", var"##x#577")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(SymTriangularDist(var"##x#576", var"##x#577"), 2)
└     end
┌ Info: Testing: (var"##x#578",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(TDist(var"##x#578"), 2)
└     end
┌ Info: Testing: (var"##x#579", var"##x#580")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Triweight(var"##x#579", var"##x#580"), 2)
└     end
┌ Info: Testing: (var"##x#581", var"##x#582", var"##x#583", var"##x#584")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist((((mu, sigma, l, u)->begin
│                     #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:308 =#
│                     truncated(Normal(mu, sigma), l, u)
│                 end))(var"##x#581", var"##x#582", var"##x#583", var"##x#584"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Uniform(), 2)
└     end
┌ Info: Testing: (var"##x#585", var"##x#586")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Uniform(var"##x#585", var"##x#586"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(TuringUniform(), 2)
└     end
┌ Info: Testing: (var"##x#587", var"##x#588")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(TuringUniform(var"##x#587", var"##x#588"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Weibull(), 2)
└     end
┌ Info: Testing: (var"##x#589",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Weibull(var"##x#589"), 2)
└     end
┌ Info: Testing: (var"##x#590", var"##x#591")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:22 =#
│         filldist(Weibull(var"##x#590", var"##x#591"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Arcsine(), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#592",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Arcsine(var"##x#592"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#593", var"##x#594")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Arcsine(var"##x#593", var"##x#594"), prod((2,))), 2))
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Beta(), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#595",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Beta(var"##x#595"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#596", var"##x#597")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Beta(var"##x#596", var"##x#597"), prod((2,))), 2))
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(BetaPrime(), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#598",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(BetaPrime(var"##x#598"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#599", var"##x#600")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(BetaPrime(var"##x#599", var"##x#600"), prod((2,))), 2))
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Biweight(), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#601",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Biweight(var"##x#601"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#602", var"##x#603")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Biweight(var"##x#602", var"##x#603"), prod((2,))), 2))
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Cauchy(), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#604",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Cauchy(var"##x#604"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#605", var"##x#606")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Cauchy(var"##x#605", var"##x#606"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#607",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Chi(var"##x#607"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#608",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Chisq(var"##x#608"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#609", var"##x#610")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Cosine(var"##x#609", var"##x#610"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#611", var"##x#612")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Epanechnikov(var"##x#611", var"##x#612"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#613",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(((s->begin
│                             #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:162 =#
│                             Erlang(1, s)
│                         end))(var"##x#613"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#614",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Exponential(var"##x#614"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#615", var"##x#616")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(FDist(var"##x#615", var"##x#616"), prod((2,))), 2))
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Frechet(), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#617",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Frechet(var"##x#617"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#618", var"##x#619")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Frechet(var"##x#618", var"##x#619"), prod((2,))), 2))
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Gamma(), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#620",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Gamma(var"##x#620"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#621", var"##x#622")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Gamma(var"##x#621", var"##x#622"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#623", var"##x#624", var"##x#625")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(GeneralizedExtremeValue(var"##x#623", var"##x#624", var"##x#625"), prod((2,))), 2))
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(GeneralizedPareto(), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#626", var"##x#627")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(GeneralizedPareto(var"##x#626", var"##x#627"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#628", var"##x#629", var"##x#630")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(GeneralizedPareto(var"##x#628", var"##x#629", var"##x#630"), prod((2,))), 2))
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Gumbel(), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#631",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Gumbel(var"##x#631"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#632", var"##x#633")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Gumbel(var"##x#632", var"##x#633"), prod((2,))), 2))
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(InverseGamma(), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#634",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(InverseGamma(var"##x#634"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#635", var"##x#636")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(InverseGamma(var"##x#635", var"##x#636"), prod((2,))), 2))
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(InverseGaussian(), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#637",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(InverseGaussian(var"##x#637"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#638", var"##x#639")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(InverseGaussian(var"##x#638", var"##x#639"), prod((2,))), 2))
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Kolmogorov(), prod((2,))), 2))
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Laplace(), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#640",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Laplace(var"##x#640"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#641", var"##x#642")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Laplace(var"##x#641", var"##x#642"), prod((2,))), 2))
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Levy(), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#643",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Levy(var"##x#643"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#644", var"##x#645")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Levy(var"##x#644", var"##x#645"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#646", var"##x#647")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill((((a, b)->begin
│                             #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:233 =#
│                             LocationScale(a, b, Normal())
│                         end))(var"##x#646", var"##x#647"), prod((2,))), 2))
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Logistic(), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#648",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Logistic(var"##x#648"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#649", var"##x#650")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Logistic(var"##x#649", var"##x#650"), prod((2,))), 2))
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(LogitNormal(), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#651",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(LogitNormal(var"##x#651"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#652", var"##x#653")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(LogitNormal(var"##x#652", var"##x#653"), prod((2,))), 2))
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(LogNormal(), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#654",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(LogNormal(var"##x#654"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#655", var"##x#656")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(LogNormal(var"##x#655", var"##x#656"), prod((2,))), 2))
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Normal(), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#657",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Normal(var"##x#657"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#658", var"##x#659")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Normal(var"##x#658", var"##x#659"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#660", var"##x#661")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(NormalCanon(var"##x#660", var"##x#661"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#662", var"##x#663", var"##x#664", var"##x#665")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(NormalInverseGaussian(var"##x#662", var"##x#663", var"##x#664", var"##x#665"), prod((2,))), 2))
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Pareto(), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#666",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Pareto(var"##x#666"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#667", var"##x#668")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Pareto(var"##x#667", var"##x#668"), prod((2,))), 2))
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(PGeneralizedGaussian(), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#669", var"##x#670", var"##x#671")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(PGeneralizedGaussian(var"##x#669", var"##x#670", var"##x#671"), prod((2,))), 2))
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Rayleigh(), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#672",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Rayleigh(var"##x#672"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#673",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Semicircle(var"##x#673"), prod((2,))), 2))
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(SymTriangularDist(), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#674",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(SymTriangularDist(var"##x#674"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#675", var"##x#676")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(SymTriangularDist(var"##x#675", var"##x#676"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#677",)->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(TDist(var"##x#677"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#678", var"##x#679")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill(Triweight(var"##x#678", var"##x#679"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#680", var"##x#681", var"##x#682", var"##x#683")->begin
│         #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:26 =#
│         arraydist(reshape(fill((((mu, sigma, l, u)->begin
│                             #= /home/pkgeval/.julia/packages/DistributionsAD/smVQD/test/distributions.jl:308 =#
│                             truncated(Normal(mu, sigma), l, u)
│                         end))(var"##x#680", var"##x#681", var"##x#682", var"##x#683"), prod((2,))), 2))
└     end

signal (15): Terminated
in expression starting at none:16
pthread_cond_wait at /lib/x86_64-linux-gnu/libpthread.so.0 (unknown line)
