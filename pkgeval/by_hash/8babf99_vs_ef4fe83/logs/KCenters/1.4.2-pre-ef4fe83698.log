Julia Version 1.4.2-pre.0
Commit ef4fe83698 (2020-04-15 16:24 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-8.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed Reexport ──────────────────── v0.2.0
  Installed InvertedIndices ───────────── v1.0.0
  Installed LearnBase ─────────────────── v0.2.2
  Installed KCenters ──────────────────── v0.2.2
  Installed JSON ──────────────────────── v0.21.0
  Installed MLDataUtils ───────────────── v0.5.1
  Installed DataFrames ────────────────── v0.20.2
  Installed SimilaritySearch ──────────── v0.3.19
  Installed Parsers ───────────────────── v1.0.3
  Installed DataAPI ───────────────────── v1.3.0
  Installed Compat ────────────────────── v3.9.1
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed OrderedCollections ────────── v1.2.0
  Installed DataStructures ────────────── v0.17.15
  Installed DataValueInterfaces ───────── v1.0.0
  Installed Tables ────────────────────── v1.0.4
  Installed StatsBase ─────────────────── v0.32.2
  Installed MLDataPattern ─────────────── v0.5.3
  Installed PooledArrays ──────────────── v0.5.3
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed MappedArrays ──────────────── v0.2.2
  Installed TableTraits ───────────────── v1.0.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed Missings ──────────────────── v0.4.3
  Installed CategoricalArrays ─────────── v0.7.7
   Updating `~/.julia/environments/v1.4/Project.toml`
  [5d8de97f] + KCenters v0.2.2
   Updating `~/.julia/environments/v1.4/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.9.1
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.15
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.2.0
  [69de0a69] + Parsers v1.0.3
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
    Testing KCenters
Status `/tmp/jl_zV9GKn/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.9.1
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.15
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.2.0
  [69de0a69] Parsers v1.0.3
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.932025450070699
[ Info: 0.8307796732584636
[ Info: 0.5553847705821197
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.3300985757261515
mean(cdnet.distances) = 0.37638827942311764
mean(crand.distances) = 0.36787314708034197
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.529296875, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.529296875,"f1":null,"seconds":4.794448614120483e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":7.375,"distances_sum":1541.7939685967278}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.529296875,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.529296875,"f1":null,"seconds":4.794448614120483e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":7.375,"distances_sum":1541.7939685967278}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8359375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8359375,"f1":0.9031853563103572,"seconds":6.705522537231445e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.5234375,"distances_sum":2726.2990702514003}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8359375,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.8359375,"f1":0.9031853563103572,"seconds":6.705522537231445e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.5234375,"distances_sum":2726.2990702514003}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9654418498168503,"seconds":5.824491381645203e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.84375,"distances_sum":3201.5718000661323}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8486328125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8486328125,"f1":0.912408945221446,"seconds":5.6140124797821045e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.484375,"distances_sum":2780.3102090426983}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9384765625,"state":{"ssize":7,"bsize":9},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9654418498168503,"seconds":5.824491381645203e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.84375,"distances_sum":3201.5718000661323}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9384765625,"state":{"ssize":7,"bsize":9},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9654418498168503,"seconds":5.824491381645203e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.84375,"distances_sum":3201.5718000661323}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.205078125, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.205078125,"f1":null,"seconds":3.693625330924988e-6,"exhaustive_search_seconds":1.5329569578170776e-6,"evaluations":6.796875,"distances_sum":509.1466845469888}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.234375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.234375,"f1":null,"seconds":3.846362233161926e-6,"exhaustive_search_seconds":1.5329569578170776e-6,"evaluations":7.3515625,"distances_sum":624.8435834306641}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7841796875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7841796875,"f1":0.8714290917415928,"seconds":5.416572093963623e-6,"exhaustive_search_seconds":1.5329569578170776e-6,"evaluations":8.671875,"distances_sum":2292.77721860307}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7841796875,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7841796875,"f1":0.8714290917415928,"seconds":5.416572093963623e-6,"exhaustive_search_seconds":1.5329569578170776e-6,"evaluations":8.671875,"distances_sum":2292.77721860307}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9635817307692313,"seconds":6.103888154029846e-6,"exhaustive_search_seconds":1.5329569578170776e-6,"evaluations":8.9296875,"distances_sum":2962.1101934437784}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.798828125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.798828125,"f1":0.8820346320346328,"seconds":5.379319190979004e-6,"exhaustive_search_seconds":1.5329569578170776e-6,"evaluations":8.6796875,"distances_sum":2332.56734834295}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.935546875,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9635817307692313,"seconds":6.103888154029846e-6,"exhaustive_search_seconds":1.5329569578170776e-6,"evaluations":8.9296875,"distances_sum":2962.1101934437784}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9725675366300369,"seconds":6.3050538301467896e-6,"exhaustive_search_seconds":1.5329569578170776e-6,"evaluations":9.0,"distances_sum":3043.782531933621}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":10,"bsize":9}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9746852106227109,"seconds":6.167218089103699e-6,"exhaustive_search_seconds":1.5329569578170776e-6,"evaluations":8.984375,"distances_sum":3068.710640929332}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.958984375, conf: {"ssize":4,"bsize":13}, perf: {"precision":1.0,"recall":0.958984375,"f1":0.9772321428571431,"seconds":6.5267086029052734e-6,"exhaustive_search_seconds":1.5329569578170776e-6,"evaluations":8.984375,"distances_sum":3072.388449908489}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":6,"bsize":13}, perf: {"precision":1.0,"recall":0.953125,"f1":0.974313186813187,"seconds":6.6570937633514404e-6,"exhaustive_search_seconds":1.5329569578170776e-6,"evaluations":9.0,"distances_sum":3054.2372729701115}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.958984375,"state":{"ssize":4,"bsize":13},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9772321428571431,"seconds":6.5267086029052734e-6,"exhaustive_search_seconds":1.5329569578170776e-6,"evaluations":8.984375,"distances_sum":3072.388449908489}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.958984375,"state":{"ssize":4,"bsize":13},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9772321428571431,"seconds":6.5267086029052734e-6,"exhaustive_search_seconds":1.5329569578170776e-6,"evaluations":8.984375,"distances_sum":3072.388449908489}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6767578125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6767578125,"f1":0.7960943570318577,"seconds":5.081295967102051e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":7.6171875,"distances_sum":1807.9634168857742}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.345703125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.345703125,"f1":null,"seconds":3.635883331298828e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":5.4921875,"distances_sum":850.2037086737045}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7412109375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7412109375,"f1":0.8414273226773233,"seconds":5.388632416725159e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":7.953125,"distances_sum":2044.3358203426853}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7412109375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7412109375,"f1":0.8414273226773233,"seconds":5.388632416725159e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":7.953125,"distances_sum":2044.3358203426853}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.822265625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.822265625,"f1":0.8951324716949725,"seconds":5.593523383140564e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.4140625,"distances_sum":2296.096584413068}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.9290350274725282,"seconds":5.548819899559021e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.5078125,"distances_sum":2557.4853459396986}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8291015625, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8291015625,"f1":0.9010187728937736,"seconds":5.522742867469788e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.2734375,"distances_sum":2338.161783589764}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8759765625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8759765625,"f1":0.9290350274725282,"seconds":5.548819899559021e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.5078125,"distances_sum":2557.4853459396986}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9570741758241762,"seconds":5.89713454246521e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.8125,"distances_sum":2771.0738038058803}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9549882409257417,"seconds":6.075948476791382e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.75,"distances_sum":2778.0829070891264}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9399095695970701,"seconds":5.895271897315979e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.609375,"distances_sum":2693.662482931586}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9248046875,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.9570741758241762,"seconds":5.89713454246521e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.8125,"distances_sum":2771.0738038058803}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9248046875,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.9570741758241762,"seconds":5.89713454246521e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.8125,"distances_sum":2771.0738038058803}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.57421875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.57421875,"f1":0.7148974289599294,"seconds":4.7907233238220215e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.3984375,"distances_sum":1388.2429044084247}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4462890625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4462890625,"f1":null,"seconds":4.071742296218872e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":6.6875,"distances_sum":1064.9668295653314}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6767578125, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6767578125,"f1":0.7956777597402604,"seconds":5.003064870834351e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.734375,"distances_sum":1734.946292617671}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6767578125,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.6767578125,"f1":0.7956777597402604,"seconds":5.003064870834351e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.734375,"distances_sum":1734.946292617671}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.8611810064935073,"seconds":5.334615707397461e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.0234375,"distances_sum":2054.1923625934587}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7607421875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7607421875,"f1":0.8560241841491851,"seconds":5.409121513366699e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.0625,"distances_sum":2033.2917719890318}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8427734375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8427734375,"f1":0.9070091366966374,"seconds":5.833804607391357e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.515625,"distances_sum":2347.75579094646}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.69921875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.69921875,"f1":0.8133600774225782,"seconds":5.0906091928482056e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.7890625,"distances_sum":1786.2594786391408}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8427734375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8427734375,"f1":0.9070091366966374,"seconds":5.833804607391357e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.515625,"distances_sum":2347.75579094646}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9600331959706963,"seconds":6.2175095081329346e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.875,"distances_sum":2717.934480117764}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.961589972527473,"seconds":6.4820051193237305e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8046875,"distances_sum":2735.8589684287645}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.965813873626374,"seconds":6.2640756368637085e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8984375,"distances_sum":2754.2336058763044}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.85546875, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.85546875,"f1":0.9162348068598074,"seconds":5.776062607765198e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.5546875,"distances_sum":2423.01112743192}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9343463827838834,"seconds":5.939975380897522e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.6953125,"distances_sum":2502.137758873446}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9384765625,"state":{"ssize":9,"bsize":9},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.965813873626374,"seconds":6.2640756368637085e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8984375,"distances_sum":2754.2336058763044}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9384765625,"state":{"ssize":9,"bsize":9},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.965813873626374,"seconds":6.2640756368637085e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8984375,"distances_sum":2754.2336058763044}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3603515625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3603515625,"f1":null,"seconds":3.8817524909973145e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":5.6796875,"distances_sum":974.6607779223185}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7685546875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7685546875,"f1":0.8602517274392283,"seconds":5.597248673439026e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.3359375,"distances_sum":2174.0359676144953}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7685546875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7685546875,"f1":0.8602517274392283,"seconds":5.597248673439026e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.3359375,"distances_sum":2174.0359676144953}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9564419955044957,"seconds":6.251037120819092e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.859375,"distances_sum":2809.9821205266985}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8369140625, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8369140625,"f1":0.9038066100566108,"seconds":5.7425349950790405e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.5859375,"distances_sum":2406.1741453198015}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9572401556776563,"seconds":6.055459380149841e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.8203125,"distances_sum":2798.3402986905676}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.828125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.828125,"f1":0.8982319763569773,"seconds":6.031244993209839e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.7109375,"distances_sum":2329.0579375765365}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.92578125,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.92578125,"f1":0.9564419955044957,"seconds":6.251037120819092e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.859375,"distances_sum":2809.9821205266985}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.958984375, conf: {"ssize":2,"bsize":13}, perf: {"precision":1.0,"recall":0.958984375,"f1":0.9775869963369963,"seconds":6.427988409996033e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.96875,"distances_sum":2921.519840139936}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.962890625, conf: {"ssize":3,"bsize":12}, perf: {"precision":1.0,"recall":0.962890625,"f1":0.9799851190476196,"seconds":6.360933184623718e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.953125,"distances_sum":2952.5068115607028}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9641941391941397,"seconds":6.318092346191406e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.8828125,"distances_sum":2836.1124667914114}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.969236492673993,"seconds":6.124377250671387e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.9453125,"distances_sum":2863.61999925275}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9708333333333338,"seconds":6.210058927536011e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.8984375,"distances_sum":2907.41869860731}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9606971153846156,"seconds":6.16908073425293e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.8828125,"distances_sum":2815.7852059084084}, best_list's length: 16, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.962890625,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9799851190476196,"seconds":6.360933184623718e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.953125,"distances_sum":2952.5068115607028}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.962890625,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9799851190476196,"seconds":6.360933184623718e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.953125,"distances_sum":2952.5068115607028}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.515625, conf: {"ssize":4,"bsize":3}, perf: {"precision":null,"recall":0.515625,"f1":null,"seconds":4.336237907409668e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":7.1328125,"distances_sum":1213.344111685842}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1943359375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.1943359375,"f1":null,"seconds":7.225386798381805e-5,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":5.5859375,"distances_sum":434.7122235009477}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.515625,"state":{"ssize":4,"bsize":3},"perf":{"precision":null,"recall":0.515625,"f1":null,"seconds":4.336237907409668e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":7.1328125,"distances_sum":1213.344111685842}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8544921875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8544921875,"f1":0.9161947427572437,"seconds":5.554407835006714e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.359375,"distances_sum":2378.007945372768}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.873046875, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.873046875,"f1":0.9264802905427912,"seconds":5.3122639656066895e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.390625,"distances_sum":2444.671443409658}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.873046875,"state":{"ssize":6,"bsize":7},"perf":{"precision":1.0,"recall":0.873046875,"f1":0.9264802905427912,"seconds":5.3122639656066895e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.390625,"distances_sum":2444.671443409658}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9632669413919418,"seconds":5.727633833885193e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.796875,"distances_sum":2733.4147437441684}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9617616758241765,"seconds":5.554407835006714e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.796875,"distances_sum":2718.271338898229}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.96073717948718,"seconds":5.539506673812866e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.828125,"distances_sum":2684.8673140275805}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.962374084249085,"seconds":5.85801899433136e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.7734375,"distances_sum":2746.9375960328734}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.935546875,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9632669413919418,"seconds":5.727633833885193e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.796875,"distances_sum":2733.4147437441684}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.935546875,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9632669413919418,"seconds":5.727633833885193e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.796875,"distances_sum":2733.4147437441684}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.787109375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.787109375,"f1":0.8740556318681327,"seconds":5.27501106262207e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.3984375,"distances_sum":2240.508730693851}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5283203125, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5283203125,"f1":null,"seconds":4.073604941368103e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":7.046875,"distances_sum":1380.1155169497886}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5517578125, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.5517578125,"f1":0.6950556388056395,"seconds":4.082918167114258e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":7.1015625,"distances_sum":1463.9092842767031}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.787109375,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.787109375,"f1":0.8740556318681327,"seconds":5.27501106262207e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.3984375,"distances_sum":2240.508730693851}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9559409340659346,"seconds":6.50063157081604e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.8046875,"distances_sum":2749.380626327214}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8623046875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8623046875,"f1":0.9194545038295046,"seconds":5.37186861038208e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.53125,"distances_sum":2536.2126278246465}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8740234375,"f1":0.9287545787545796,"seconds":5.638226866722107e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.578125,"distances_sum":2605.4086994050062}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.921875,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.921875,"f1":0.9559409340659346,"seconds":6.50063157081604e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.8046875,"distances_sum":2749.380626327214}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":3,"bsize":13}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9739239926739931,"seconds":5.932524800300598e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.9140625,"distances_sum":2898.7063401534433}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9701293498168502,"seconds":5.982816219329834e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.9140625,"distances_sum":2867.883948098897}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9588598901098906,"seconds":5.7220458984375e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.828125,"distances_sum":2823.976242984077}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9742960164835166,"seconds":5.669891834259033e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.8671875,"distances_sum":2909.0542710007426}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9615041208791213,"seconds":5.770474672317505e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.84375,"distances_sum":2802.233146715423}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9689388736263741,"seconds":5.932524800300598e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.8359375,"distances_sum":2876.3639633830817}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9541015625,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9742960164835166,"seconds":5.669891834259033e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.8671875,"distances_sum":2909.0542710007426}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9541015625,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9742960164835166,"seconds":5.669891834259033e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.8671875,"distances_sum":2909.0542710007426}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.380859375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.380859375,"f1":null,"seconds":4.306435585021973e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":5.515625,"distances_sum":625.2764887530933}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6689453125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6689453125,"f1":0.7889076201576208,"seconds":4.939734935760498e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":7.46875,"distances_sum":1135.006830255163}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6689453125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6689453125,"f1":0.7889076201576208,"seconds":4.939734935760498e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":7.46875,"distances_sum":1135.006830255163}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7666015625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7666015625,"f1":0.8591757201132211,"seconds":4.915520548820496e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":7.9921875,"distances_sum":1358.0252353458895}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8564453125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8564453125,"f1":0.9166266025641033,"seconds":5.802139639854431e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.609375,"distances_sum":1593.5914191764004}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8203125, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8203125,"f1":0.8939992299367309,"seconds":6.042420864105225e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.3828125,"distances_sum":1512.5377204046943}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8330078125, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8330078125,"f1":0.9032222985347994,"seconds":5.3085386753082275e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.53125,"distances_sum":1535.048406721865}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8564453125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8564453125,"f1":0.9166266025641033,"seconds":5.802139639854431e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.609375,"distances_sum":1593.5914191764004}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9743875915750919,"seconds":5.967915058135986e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.890625,"distances_sum":1886.785042007788}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9425080128205132,"seconds":5.6587159633636475e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.6796875,"distances_sum":1734.0257529486923}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9307520604395613,"seconds":5.247071385383606e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.65625,"distances_sum":1666.879725425727}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.953125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9743875915750919,"seconds":5.967915058135986e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.890625,"distances_sum":1886.785042007788}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.953125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9743875915750919,"seconds":5.967915058135986e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.890625,"distances_sum":1886.785042007788}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.701171875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.701171875,"f1":0.8125886266511274,"seconds":4.6193599700927734e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":7.8671875,"distances_sum":1311.4563479675396}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6943359375, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6943359375,"f1":0.8059069402819411,"seconds":4.772096872329712e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":7.8828125,"distances_sum":1306.9973602980428}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2177734375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2177734375,"f1":null,"seconds":3.164634108543396e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":5.2421875,"distances_sum":408.24892513838}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.701171875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.701171875,"f1":0.8125886266511274,"seconds":4.6193599700927734e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":7.8671875,"distances_sum":1311.4563479675396}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9474587912087916,"seconds":5.81890344619751e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.6328125,"distances_sum":1945.0637993419246}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7724609375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7724609375,"f1":0.8630550005550015,"seconds":4.98257577419281e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.25,"distances_sum":1489.8063608754192}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7958984375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7958984375,"f1":0.8784434315684325,"seconds":5.738809704780579e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.375,"distances_sum":1526.2208035090343}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9072265625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9072265625,"f1":0.9474587912087916,"seconds":5.81890344619751e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.6328125,"distances_sum":1945.0637993419246}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9673191391941397,"seconds":5.718320608139038e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.84375,"distances_sum":2023.717722320957}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9737007783882786,"seconds":5.736947059631348e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.8671875,"distances_sum":2078.175087534762}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9560668498168504,"seconds":5.291774868965149e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.71875,"distances_sum":1982.4121059534145}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.953125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9737007783882786,"seconds":5.736947059631348e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.8671875,"distances_sum":2078.175087534762}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.953125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9737007783882786,"seconds":5.736947059631348e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.8671875,"distances_sum":2078.175087534762}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5537109375, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.5537109375,"f1":0.6923456751581756,"seconds":4.775822162628174e-6,"exhaustive_search_seconds":1.3299286365509033e-6,"evaluations":7.0625,"distances_sum":1001.8884683288566}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.779296875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.779296875,"f1":0.8674450549450559,"seconds":5.058944225311279e-6,"exhaustive_search_seconds":1.3299286365509033e-6,"evaluations":8.359375,"distances_sum":1510.3306209086493}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3466796875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3466796875,"f1":null,"seconds":3.773719072341919e-6,"exhaustive_search_seconds":1.3299286365509033e-6,"evaluations":5.578125,"distances_sum":613.133027305462}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.779296875,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.779296875,"f1":0.8674450549450559,"seconds":5.058944225311279e-6,"exhaustive_search_seconds":1.3299286365509033e-6,"evaluations":8.359375,"distances_sum":1510.3306209086493}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.954229624542125,"seconds":5.472451448440552e-6,"exhaustive_search_seconds":1.3299286365509033e-6,"evaluations":8.7734375,"distances_sum":1926.4127735235593}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9410230394605402,"seconds":5.505979061126709e-6,"exhaustive_search_seconds":1.3299286365509033e-6,"evaluations":8.671875,"distances_sum":1856.3122360911557}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8125, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8125,"f1":0.8889943389943401,"seconds":5.1781535148620605e-6,"exhaustive_search_seconds":1.3299286365509033e-6,"evaluations":8.5390625,"distances_sum":1588.222063750346}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8291015625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8291015625,"f1":0.9004266566766573,"seconds":5.289912223815918e-6,"exhaustive_search_seconds":1.3299286365509033e-6,"evaluations":8.578125,"distances_sum":1600.693135152051}, best_list's length: 15, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.919921875,"state":{"ssize":7,"bsize":9},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.954229624542125,"seconds":5.472451448440552e-6,"exhaustive_search_seconds":1.3299286365509033e-6,"evaluations":8.7734375,"distances_sum":1926.4127735235593}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":8,"bsize":11}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9678571428571433,"seconds":6.256625056266785e-6,"exhaustive_search_seconds":1.3299286365509033e-6,"evaluations":8.90625,"distances_sum":1961.055455555928}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":10,"bsize":10}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9645661630036636,"seconds":6.098300218582153e-6,"exhaustive_search_seconds":1.3299286365509033e-6,"evaluations":8.8515625,"distances_sum":1963.4996087180305}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":6,"bsize":12}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9720638736263741,"seconds":7.1711838245391846e-6,"exhaustive_search_seconds":1.3299286365509033e-6,"evaluations":8.9296875,"distances_sum":1981.5537355204458}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9734375000000006,"seconds":6.543472409248352e-6,"exhaustive_search_seconds":1.3299286365509033e-6,"evaluations":8.921875,"distances_sum":1997.4955165938445}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.961796016483517,"seconds":5.9194862842559814e-6,"exhaustive_search_seconds":1.3299286365509033e-6,"evaluations":8.8671875,"distances_sum":1939.1751698158864}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.951171875,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9734375000000006,"seconds":6.543472409248352e-6,"exhaustive_search_seconds":1.3299286365509033e-6,"evaluations":8.921875,"distances_sum":1997.4955165938445}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.951171875,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9734375000000006,"seconds":6.543472409248352e-6,"exhaustive_search_seconds":1.3299286365509033e-6,"evaluations":8.921875,"distances_sum":1997.4955165938445}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.44140625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.44140625,"f1":null,"seconds":3.7997961044311523e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":6.578125,"distances_sum":869.3352885346164}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.44140625,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.44140625,"f1":null,"seconds":3.7997961044311523e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":6.578125,"distances_sum":869.3352885346164}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.66796875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.66796875,"f1":0.7908745768120776,"seconds":4.936009645462036e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":7.75,"distances_sum":1329.967040939584}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5625,"f1":0.7050567488067493,"seconds":4.1816383600234985e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":6.9921875,"distances_sum":1158.2193040070208}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.759765625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.759765625,"f1":0.8577037545787553,"seconds":5.375593900680542e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":8.5078125,"distances_sum":1585.4300449194986}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5703125, conf: {"ssize":6,"bsize":3}, perf: {"precision":1.0,"recall":0.5703125,"f1":0.7110434704184709,"seconds":4.2729079723358154e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":7.0390625,"distances_sum":1143.1135653079161}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.755859375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.755859375,"f1":0.8535698676323683,"seconds":5.120411515235901e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":8.390625,"distances_sum":1572.5589592302344}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.759765625,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.759765625,"f1":0.8577037545787553,"seconds":5.375593900680542e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":8.5078125,"distances_sum":1585.4300449194986}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.93399152930403,"seconds":5.841255187988281e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":8.8203125,"distances_sum":1953.8635919473822}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.833984375, conf: {"ssize":9,"bsize":6}, perf: {"precision":1.0,"recall":0.833984375,"f1":0.903228542291043,"seconds":5.599111318588257e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":8.625,"distances_sum":1796.6430383450263}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7607421875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7607421875,"f1":0.8563306485181492,"seconds":5.25452196598053e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":8.453125,"distances_sum":1628.7612287735726}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8486328125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8486328125,"f1":0.9136249167499175,"seconds":5.649402737617493e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":8.6640625,"distances_sum":1817.540869074627}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8642578125, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8642578125,"f1":0.9211970321345327,"seconds":5.545094609260559e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":8.7578125,"distances_sum":1879.865322112703}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.873046875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.873046875,"f1":0.9272435897435903,"seconds":5.424022674560547e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":8.7578125,"distances_sum":1931.4423612031044}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7685546875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7685546875,"f1":0.8627320596070606,"seconds":5.111098289489746e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":8.46875,"distances_sum":1636.637544507428}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.884765625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.884765625,"f1":0.93399152930403,"seconds":5.841255187988281e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":8.8203125,"distances_sum":1953.8635919473822}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.884765625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.884765625,"f1":0.93399152930403,"seconds":5.841255187988281e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":8.8203125,"distances_sum":1953.8635919473822}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4208984375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4208984375,"f1":null,"seconds":3.7401914596557617e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":6.578125,"distances_sum":727.0317459491383}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4208984375,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.4208984375,"f1":null,"seconds":3.7401914596557617e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":6.578125,"distances_sum":727.0317459491383}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7490234375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7490234375,"f1":0.8468390984015992,"seconds":4.9602240324020386e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.25,"distances_sum":1395.2591208289039}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7529296875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7529296875,"f1":0.8484562312687318,"seconds":5.127862095832825e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.484375,"distances_sum":1410.021830086907}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7529296875,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7529296875,"f1":0.8484562312687318,"seconds":5.127862095832825e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.484375,"distances_sum":1410.021830086907}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8720703125, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8720703125,"f1":0.926282051282052,"seconds":5.673617124557495e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.8359375,"distances_sum":1729.1753812489026}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.968475274725275,"seconds":5.7891011238098145e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.8828125,"distances_sum":1966.778651309295}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.942994505494506,"seconds":5.668029189109802e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.828125,"distances_sum":1848.3192789991313}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87109375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.87109375,"f1":0.9260218947718957,"seconds":5.608424544334412e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.7890625,"distances_sum":1720.4005003476923}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.943359375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.968475274725275,"seconds":5.7891011238098145e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.8828125,"distances_sum":1966.778651309295}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.943359375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.968475274725275,"seconds":5.7891011238098145e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.8828125,"distances_sum":1966.778651309295}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4091796875, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.4091796875,"f1":null,"seconds":3.5744160413742065e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":6.109375,"distances_sum":710.4353421370497}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5712890625, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.5712890625,"f1":0.7086500305250312,"seconds":3.987923264503479e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":6.828125,"distances_sum":1036.4312964827302}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7451171875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7451171875,"f1":0.8458166833166842,"seconds":4.941597580909729e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.1953125,"distances_sum":1377.3508436277411}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7451171875,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7451171875,"f1":0.8458166833166842,"seconds":4.941597580909729e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.1953125,"distances_sum":1377.3508436277411}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7548828125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7548828125,"f1":0.8524444305694315,"seconds":5.025416612625122e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.2890625,"distances_sum":1418.8119297980897}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9537603021978027,"seconds":5.638226866722107e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.7890625,"distances_sum":1888.6008363034666}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8310546875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8310546875,"f1":0.9003350815850824,"seconds":5.42961061000824e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.5,"distances_sum":1629.7976183631836}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9169921875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9169921875,"f1":0.9537603021978027,"seconds":5.638226866722107e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.7890625,"distances_sum":1888.6008363034666}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.96875, conf: {"ssize":3,"bsize":13}, perf: {"precision":1.0,"recall":0.96875,"f1":0.983092948717949,"seconds":5.843117833137512e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.9921875,"distances_sum":2029.0118034454115}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.96875,"state":{"ssize":3,"bsize":13},"perf":{"precision":1.0,"recall":0.96875,"f1":0.983092948717949,"seconds":5.843117833137512e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.9921875,"distances_sum":2029.0118034454115}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.96875,"state":{"ssize":3,"bsize":13},"perf":{"precision":1.0,"recall":0.96875,"f1":0.983092948717949,"seconds":5.843117833137512e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.9921875,"distances_sum":2029.0118034454115}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3623046875, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.3623046875,"f1":null,"seconds":3.5669654607772827e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":5.6796875,"distances_sum":651.1145191411681}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3623046875,"state":{"ssize":3,"bsize":2},"perf":{"precision":null,"recall":0.3623046875,"f1":null,"seconds":3.5669654607772827e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":5.6796875,"distances_sum":651.1145191411681}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7998046875, conf: {"ssize":1,"bsize":6}, perf: {"precision":0.9816034226190474,"recall":0.7998046875,"f1":0.8753663003663009,"seconds":5.533918738365173e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.3125,"distances_sum":1600.353328049598}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7998046875,"state":{"ssize":1,"bsize":6},"perf":{"precision":0.9816034226190474,"recall":0.7998046875,"f1":0.8753663003663009,"seconds":5.533918738365173e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.3125,"distances_sum":1600.353328049598}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8701171875, conf: {"ssize":1,"bsize":7}, perf: {"precision":0.9882812500000002,"recall":0.8701171875,"f1":0.9187075944888448,"seconds":5.645677447319031e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.5546875,"distances_sum":1798.7345191765403}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8037109375, conf: {"ssize":4,"bsize":6}, perf: {"precision":0.9832961309523809,"recall":0.8037109375,"f1":0.8770936095154851,"seconds":5.3979456424713135e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.25,"distances_sum":1602.59553292119}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":3,"bsize":10}, perf: {"precision":0.9835565476190478,"recall":0.9052734375,"f1":0.9388163919413924,"seconds":5.776062607765198e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.7734375,"distances_sum":1915.352818016584}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9052734375,"state":{"ssize":3,"bsize":10},"perf":{"precision":0.9835565476190478,"recall":0.9052734375,"f1":0.9388163919413924,"seconds":5.776062607765198e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.7734375,"distances_sum":1915.352818016584}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9052734375,"state":{"ssize":3,"bsize":10},"perf":{"precision":0.9835565476190478,"recall":0.9052734375,"f1":0.9388163919413924,"seconds":5.776062607765198e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.7734375,"distances_sum":1915.352818016584}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2275390625,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2275390625,"f1":null,"seconds":3.3527612686157227e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":4.84375,"distances_sum":472.9561762156926}}, beam: 2, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.2275390625,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2275390625,"f1":null,"seconds":3.3527612686157227e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":4.84375,"distances_sum":472.9561762156926}}, n: 9
mean(cfft.distances) = 0.3300985745154768
mean(cdnet.distances) = 0.34670591118907046
mean(crand.distances) = 0.8803499478545643
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8711111111111111
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8911111111111111
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8644444444444445
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8844444444444445
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8955555555555555
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8644444444444445
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8977777777777778
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9044444444444445
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.94
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.8866666666666667
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8888888888888888
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8955555555555555
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8888888888888888
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8644444444444445
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9422222222222222
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9333333333333332
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9022222222222224
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9266666666666666
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9355555555555556
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8688888888888888
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.9133333333333334
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8955555555555555
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.9044444444444445
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.8688888888888888
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.8777777777777778
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8888888888888888
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.8977777777777778
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9022222222222221
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8711111111111111
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.9044444444444445
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8955555555555555
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.8755555555555556
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9088888888888889
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 4, 1]]
** centroid: 8, normalized-entropy: 0.7219280948873623, [(2, 4), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 1, 2, 3, 2, 3, 2, 3, 3, 1, 2]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 4, 1]]
** centroid: 8, normalized-entropy: 0.7219280948873623, [(2, 4), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 1, 2, 3, 2, 3, 2, 3, 3, 1, 2]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 4, 1]]
** centroid: 8, normalized-entropy: 0.7219280948873623, [(2, 4), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 1, 2, 3, 2, 3, 2, 3, 3, 1, 2]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 4, 1]]
** centroid: 8, normalized-entropy: 0.7219280948873623, [(2, 4), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 1, 2, 3, 2, 3, 2, 3, 3, 1, 2]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 4, 1]]
** centroid: 8, normalized-entropy: 0.7219280948873623, [(2, 4), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 1, 2, 3, 2, 3, 2, 3, 3, 1, 2]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 4, 1]]
** centroid: 8, normalized-entropy: 0.7219280948873623, [(2, 4), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 1, 2, 3, 2, 3, 2, 3, 3, 1, 2]
acc = 0.94
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 4, 1]]
** centroid: 8, normalized-entropy: 0.7219280948873623, [(2, 4), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 1, 2, 3, 2, 3, 2, 3, 3, 1, 2]
acc = 0.9666666666666667
*** finished computation of 12 references, err: [Inf, 0.544849649767081] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 2: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 9, 7]]
** centroid: 6, normalized-entropy: 0.9886994082884974, [(2, 9), (3, 7)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 9, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 10: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 1, 8]]
** centroid: 11, normalized-entropy: 0.5032583347756457, [(2, 1), (3, 8)]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
finished with 15 centroids; started with 12
acc = 0.9733333333333334
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.2544510560194114] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2544510560194114, 0.2045850791414646] ***
*** starting iteration: 2; err: [Inf, 0.2544510560194114, 0.2045850791414646] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2544510560194114, 0.2045850791414646, 0.19921404421651126] ***
*** starting iteration: 3; err: [Inf, 0.2544510560194114, 0.2045850791414646, 0.19921404421651126] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2544510560194114, 0.2045850791414646, 0.19921404421651126, 0.19581809221534757] ***
*** finished computation of 7 references, err: [Inf, 0.2544510560194114, 0.2045850791414646, 0.19921404421651126, 0.19581809221534757] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [57, 43, 0]]
** centroid: 1, normalized-entropy: 0.9858150371789197, [(1, 57), (2, 43)]
*** center 2: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 94, 14]]
** centroid: 3, normalized-entropy: 0.5564215672884282, [(2, 94), (3, 14)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [35, 59, 0]]
** centroid: 4, normalized-entropy: 0.9524521973646323, [(1, 35), (2, 59)]
*** center 5: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 75, 0]]
** centroid: 6, normalized-entropy: 0.17378132267943294, [(1, 2), (2, 75)]
*** center 7: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24458993376250834] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24458993376250834, 0.19664863949886632] ***
*** starting iteration: 2; err: [Inf, 0.24458993376250834, 0.19664863949886632] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24458993376250834, 0.19664863949886632, 0.1914881547002577] ***
*** starting iteration: 3; err: [Inf, 0.24458993376250834, 0.19664863949886632, 0.1914881547002577] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24458993376250834, 0.19664863949886632, 0.1914881547002577, 0.19041282486455371] ***
*** finished computation of 7 references, err: [Inf, 0.24458993376250834, 0.19664863949886632, 0.1914881547002577, 0.19041282486455371] ***
*** center 1: selecting labels [1] (freq >= 2) [from [109, 1, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 60, 24]]
** centroid: 2, normalized-entropy: 0.8631205685666311, [(2, 60), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [111, 14, 0]]
** centroid: 3, normalized-entropy: 0.5059192440727414, [(1, 111), (2, 14)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [67, 4, 0]]
** centroid: 4, normalized-entropy: 0.3127333763966432, [(1, 67), (2, 4)]
*** center 5: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 106, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [4, 82, 0]]
** centroid: 7, normalized-entropy: 0.2713895875081112, [(1, 4), (2, 82)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24362008051731732] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24362008051731732, 0.19164917416412613] ***
*** starting iteration: 2; err: [Inf, 0.24362008051731732, 0.19164917416412613] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24362008051731732, 0.19164917416412613, 0.18842794139055477] ***
*** starting iteration: 3; err: [Inf, 0.24362008051731732, 0.19164917416412613, 0.18842794139055477] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24362008051731732, 0.19164917416412613, 0.18842794139055477, 0.18740644135597584] ***
*** finished computation of 7 references, err: [Inf, 0.24362008051731732, 0.19164917416412613, 0.18842794139055477, 0.18740644135597584] ***
*** center 1: selecting labels [1] (freq >= 2) [from [109, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 90, 22]]
** centroid: 2, normalized-entropy: 0.7147274731317893, [(2, 90), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [64, 27, 0]]
** centroid: 3, normalized-entropy: 0.8772236230732716, [(1, 64), (2, 27)]
*** center 4: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [31, 56, 0]]
** centroid: 5, normalized-entropy: 0.9395876193289702, [(1, 31), (2, 56)]
*** center 6: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [14, 79, 0]]
** centroid: 7, normalized-entropy: 0.6111841012714984, [(1, 14), (2, 79)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.193889234697463] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.193889234697463, 0.1577153831284057] ***
*** starting iteration: 2; err: [Inf, 0.193889234697463, 0.1577153831284057] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.193889234697463, 0.1577153831284057, 0.15237361275347638] ***
*** starting iteration: 3; err: [Inf, 0.193889234697463, 0.1577153831284057, 0.15237361275347638] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.193889234697463, 0.1577153831284057, 0.15237361275347638, 0.15123324102215893] ***
*** starting iteration: 4; err: [Inf, 0.193889234697463, 0.1577153831284057, 0.15237361275347638, 0.15123324102215893] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.193889234697463, 0.1577153831284057, 0.15237361275347638, 0.15123324102215893, 0.15058219228317407] ***
*** finished computation of 7 references, err: [Inf, 0.193889234697463, 0.1577153831284057, 0.15237361275347638, 0.15123324102215893, 0.15058219228317407] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [115, 8, 0]]
** centroid: 1, normalized-entropy: 0.3471376284400274, [(1, 115), (2, 8)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [69, 19, 0]]
** centroid: 2, normalized-entropy: 0.7526269564427315, [(1, 69), (2, 19)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 72, 14]]
** centroid: 3, normalized-entropy: 0.6409441847875289, [(2, 72), (3, 14)]
*** center 4: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [3, 76, 0]]
** centroid: 5, normalized-entropy: 0.23292785546981223, [(1, 3), (2, 76)]
*** center 6: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [2, 96, 0]]
** centroid: 7, normalized-entropy: 0.14372616993938164, [(1, 2), (2, 96)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18703234578291517] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18703234578291517, 0.1549577465409349] ***
*** starting iteration: 2; err: [Inf, 0.18703234578291517, 0.1549577465409349] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18703234578291517, 0.1549577465409349, 0.15016843077225395] ***
*** starting iteration: 3; err: [Inf, 0.18703234578291517, 0.1549577465409349, 0.15016843077225395] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18703234578291517, 0.1549577465409349, 0.15016843077225395, 0.14871810738805744] ***
*** starting iteration: 4; err: [Inf, 0.18703234578291517, 0.1549577465409349, 0.15016843077225395, 0.14871810738805744] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18703234578291517, 0.1549577465409349, 0.15016843077225395, 0.14871810738805744, 0.1470673444190075] ***
*** starting iteration: 5; err: [Inf, 0.18703234578291517, 0.1549577465409349, 0.15016843077225395, 0.14871810738805744, 0.1470673444190075] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18703234578291517, 0.1549577465409349, 0.15016843077225395, 0.14871810738805744, 0.1470673444190075, 0.14658994875768705] ***
*** finished computation of 7 references, err: [Inf, 0.18703234578291517, 0.1549577465409349, 0.15016843077225395, 0.14871810738805744, 0.1470673444190075, 0.14658994875768705] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [107, 2, 0]]
** centroid: 1, normalized-entropy: 0.13206535647488304, [(1, 107), (2, 2)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 66, 24]]
** centroid: 2, normalized-entropy: 0.8366407419411671, [(2, 66), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [113, 2, 0]]
** centroid: 3, normalized-entropy: 0.12653159222336474, [(1, 113), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [63, 15, 0]]
** centroid: 4, normalized-entropy: 0.7062740891876008, [(1, 63), (2, 15)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [3, 100, 0]]
** centroid: 5, normalized-entropy: 0.18999075553626757, [(1, 3), (2, 100)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [5, 82, 0]]
** centroid: 6, normalized-entropy: 0.3173238998358585, [(1, 5), (2, 82)]
*** center 7: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.203752432031085] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.203752432031085, 0.15349064240262827] ***
*** starting iteration: 2; err: [Inf, 0.203752432031085, 0.15349064240262827] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.203752432031085, 0.15349064240262827, 0.14909203514886804] ***
*** starting iteration: 3; err: [Inf, 0.203752432031085, 0.15349064240262827, 0.14909203514886804] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.203752432031085, 0.15349064240262827, 0.14909203514886804, 0.1486842462540265] ***
*** finished computation of 7 references, err: [Inf, 0.203752432031085, 0.15349064240262827, 0.14909203514886804, 0.1486842462540265] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [103, 6, 0]]
** centroid: 1, normalized-entropy: 0.30745653299528936, [(1, 103), (2, 6)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 58, 22]]
** centroid: 2, normalized-entropy: 0.8485481782946159, [(2, 58), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [104, 10, 0]]
** centroid: 3, normalized-entropy: 0.4288109647301171, [(1, 104), (2, 10)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [99, 7, 0]]
** centroid: 4, normalized-entropy: 0.3509601730322126, [(1, 99), (2, 7)]
*** center 5: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [5, 78, 0]]
** centroid: 6, normalized-entropy: 0.32840071392894665, [(1, 5), (2, 78)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [5, 93, 0]]
** centroid: 7, normalized-entropy: 0.290715865467415, [(1, 5), (2, 93)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.288155319581068] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.288155319581068, 0.22167312293809124] ***
*** starting iteration: 2; err: [Inf, 0.288155319581068, 0.22167312293809124] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.288155319581068, 0.22167312293809124, 0.2057794077765906] ***
*** starting iteration: 3; err: [Inf, 0.288155319581068, 0.22167312293809124, 0.2057794077765906] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.288155319581068, 0.22167312293809124, 0.2057794077765906, 0.19854580920616882] ***
*** finished computation of 7 references, err: [Inf, 0.288155319581068, 0.22167312293809124, 0.2057794077765906, 0.19854580920616882] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [74, 27, 0]]
** centroid: 1, normalized-entropy: 0.837602456861142, [(1, 74), (2, 27)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [62, 13, 0]]
** centroid: 2, normalized-entropy: 0.6652735227649414, [(1, 62), (2, 13)]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 92, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [111, 35, 0]]
** centroid: 4, normalized-entropy: 0.7945843756064859, [(1, 111), (2, 35)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 62, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [129, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 38, 24]]
** centroid: 7, normalized-entropy: 0.9629004147713269, [(2, 38), (3, 24)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.28874809241740557] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28874809241740557, 0.22384104991786885] ***
*** starting iteration: 2; err: [Inf, 0.28874809241740557, 0.22384104991786885] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28874809241740557, 0.22384104991786885, 0.20243984569740975] ***
*** starting iteration: 3; err: [Inf, 0.28874809241740557, 0.22384104991786885, 0.20243984569740975] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28874809241740557, 0.22384104991786885, 0.20243984569740975, 0.19987186754884748] ***
*** finished computation of 7 references, err: [Inf, 0.28874809241740557, 0.22384104991786885, 0.20243984569740975, 0.19987186754884748] ***
*** center 1: selecting labels [1] (freq >= 1) [from [115, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [50, 19, 0]]
** centroid: 2, normalized-entropy: 0.849054424254048, [(1, 50), (2, 19)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [42, 54, 0]]
** centroid: 3, normalized-entropy: 0.9886994082884974, [(1, 42), (2, 54)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [122, 20, 0]]
** centroid: 4, normalized-entropy: 0.5864477034453907, [(1, 122), (2, 20)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [6, 87, 0]]
** centroid: 5, normalized-entropy: 0.3451173149449528, [(1, 6), (2, 87)]
*** center 6: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 72, 22]]
** centroid: 7, normalized-entropy: 0.7849920887641585, [(2, 72), (3, 22)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26299178664497025] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26299178664497025, 0.2113312134049363] ***
*** finished computation of 7 references, err: [Inf, 0.26299178664497025, 0.2113312134049363] ***
*** center 1: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [8, 116, 0]]
** centroid: 2, normalized-entropy: 0.3451173149449528, [(1, 8), (2, 116)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 101, 14]]
** centroid: 3, normalized-entropy: 0.5343393668857862, [(2, 101), (3, 14)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [138, 27, 0]]
** centroid: 4, normalized-entropy: 0.6429383500409613, [(1, 138), (2, 27)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [45, 25, 0]]
** centroid: 5, normalized-entropy: 0.940285958670631, [(1, 45), (2, 25)]
*** center 6: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [55, 2, 0]]
** centroid: 7, normalized-entropy: 0.2192973081321754, [(1, 55), (2, 2)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.28307518541514093] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28307518541514093, 0.21078750092781956] ***
*** finished computation of 7 references, err: [Inf, 0.28307518541514093, 0.21078750092781956] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [123, 60, 0]]
** centroid: 1, normalized-entropy: 0.9127341558073343, [(1, 123), (2, 60)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [6, 95, 0]]
** centroid: 2, normalized-entropy: 0.3250821976451909, [(1, 6), (2, 95)]
*** center 3: selecting labels [1] (freq >= 2) [from [30, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 112, 24]]
** centroid: 4, normalized-entropy: 0.6722948170756378, [(2, 112), (3, 24)]
*** center 5: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3015177000489929] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3015177000489929, 0.2117312372671901] ***
*** finished computation of 7 references, err: [Inf, 0.3015177000489929, 0.2117312372671901] ***
*** center 1: selecting labels [1] (freq >= 2) [from [133, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [5, 72, 0]]
** centroid: 2, normalized-entropy: 0.34673146824966367, [(1, 5), (2, 72)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [160, 30, 0]]
** centroid: 3, normalized-entropy: 0.6292492238560344, [(1, 160), (2, 30)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 52, 3]]
** centroid: 4, normalized-entropy: 0.30540057087920036, [(2, 52), (3, 3)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [50, 21, 0]]
** centroid: 5, normalized-entropy: 0.8760643678555242, [(1, 50), (2, 21)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 77, 19]]
** centroid: 6, normalized-entropy: 0.7177418091697444, [(2, 77), (3, 19)]
*** center 7: selecting labels [1] (freq >= 2) [from [45, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2328278093218423] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2328278093218423, 0.17838221693421258] ***
*** finished computation of 7 references, err: [Inf, 0.2328278093218423, 0.17838221693421258] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [70, 113, 1]]
** centroid: 1, normalized-entropy: 0.6330055329502421, [(1, 70), (2, 113), (3, 1)]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 47, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 111, 13]]
** centroid: 3, normalized-entropy: 0.48414891118771425, [(2, 111), (3, 13)]
*** center 4: selecting labels [1] (freq >= 1) [from [129, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2440382573625137] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2440382573625137, 0.16271626011285556] ***
*** finished computation of 7 references, err: [Inf, 0.2440382573625137, 0.16271626011285556] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [57, 24, 0]]
** centroid: 1, normalized-entropy: 0.876716288999464, [(1, 57), (2, 24)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [29, 98, 0]]
** centroid: 2, normalized-entropy: 0.7751176506935044, [(1, 29), (2, 98)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [38, 72, 0]]
** centroid: 3, normalized-entropy: 0.9299429352091801, [(1, 38), (2, 72)]
*** center 4: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [102, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 73, 24]]
** centroid: 7, normalized-entropy: 0.8071675554288905, [(2, 73), (3, 24)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2913777023460297] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2913777023460297, 0.18881227245841964] ***
*** finished computation of 7 references, err: [Inf, 0.2913777023460297, 0.18881227245841964] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [159, 57, 0]]
** centroid: 1, normalized-entropy: 0.8325582396745668, [(1, 159), (2, 57)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 158, 22]]
** centroid: 2, normalized-entropy: 0.5357150195407704, [(2, 158), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [36, 29, 0]]
** centroid: 3, normalized-entropy: 0.9916178297881032, [(1, 36), (2, 29)]
*** center 4: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [43, 7, 0]]
** centroid: 5, normalized-entropy: 0.5842388116428561, [(1, 43), (2, 7)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [59, 1, 0]]
** centroid: 6, normalized-entropy: 0.12229159706937456, [(1, 59), (2, 1)]
*** center 7: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4090183075550977] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4090183075550977, 0.3202798562445999] ***
*** starting iteration: 2; err: [Inf, 0.4090183075550977, 0.3202798562445999] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4090183075550977, 0.3202798562445999, 0.3072370043690051] ***
*** starting iteration: 3; err: [Inf, 0.4090183075550977, 0.3202798562445999, 0.3072370043690051] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4090183075550977, 0.3202798562445999, 0.3072370043690051, 0.30516208406795076] ***
*** starting iteration: 4; err: [Inf, 0.4090183075550977, 0.3202798562445999, 0.3072370043690051, 0.30516208406795076] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4090183075550977, 0.3202798562445999, 0.3072370043690051, 0.30516208406795076, 0.30469807334714105] ***
*** finished computation of 3 references, err: [Inf, 0.4090183075550977, 0.3202798562445999, 0.3072370043690051, 0.30516208406795076, 0.30469807334714105] ***
*** center 1: selecting labels [1] (freq >= 1) [from [205, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [72, 160, 14]]
** centroid: 2, normalized-entropy: 0.7304743212916995, [(1, 72), (2, 160), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [104, 111, 0]]
** centroid: 3, normalized-entropy: 0.9992352130706913, [(1, 104), (2, 111)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4380359469090534] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4380359469090534, 0.3443039076394406] ***
*** starting iteration: 2; err: [Inf, 0.4380359469090534, 0.3443039076394406] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4380359469090534, 0.3443039076394406, 0.3090536818271321] ***
*** starting iteration: 3; err: [Inf, 0.4380359469090534, 0.3443039076394406, 0.3090536818271321] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4380359469090534, 0.3443039076394406, 0.3090536818271321, 0.29938165963706986] ***
*** starting iteration: 4; err: [Inf, 0.4380359469090534, 0.3443039076394406, 0.3090536818271321, 0.29938165963706986] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4380359469090534, 0.3443039076394406, 0.3090536818271321, 0.29938165963706986, 0.2968421212496652] ***
*** starting iteration: 5; err: [Inf, 0.4380359469090534, 0.3443039076394406, 0.3090536818271321, 0.29938165963706986, 0.2968421212496652] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4380359469090534, 0.3443039076394406, 0.3090536818271321, 0.29938165963706986, 0.2968421212496652, 0.2964827695168901] ***
*** finished computation of 3 references, err: [Inf, 0.4380359469090534, 0.3443039076394406, 0.3090536818271321, 0.29938165963706986, 0.2968421212496652, 0.2964827695168901] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [216, 38, 0]]
** centroid: 1, normalized-entropy: 0.6088541907951365, [(1, 216), (2, 38)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 182, 24]]
** centroid: 2, normalized-entropy: 0.519230019739187, [(2, 182), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [160, 47, 0]]
** centroid: 3, normalized-entropy: 0.772838787398712, [(1, 160), (2, 47)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.35246230557566505] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35246230557566505, 0.29957995386417213] ***
*** starting iteration: 2; err: [Inf, 0.35246230557566505, 0.29957995386417213] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35246230557566505, 0.29957995386417213, 0.2955346476674817] ***
*** starting iteration: 3; err: [Inf, 0.35246230557566505, 0.29957995386417213, 0.2955346476674817] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35246230557566505, 0.29957995386417213, 0.2955346476674817, 0.2947258472196881] ***
*** finished computation of 3 references, err: [Inf, 0.35246230557566505, 0.29957995386417213, 0.2955346476674817, 0.2947258472196881] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [234, 43, 0]]
** centroid: 1, normalized-entropy: 0.6227864662849038, [(1, 234), (2, 43)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 151, 22]]
** centroid: 2, normalized-entropy: 0.5496189140638493, [(2, 151), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [159, 58, 0]]
** centroid: 3, normalized-entropy: 0.8375360821789878, [(1, 159), (2, 58)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.1991678226079132] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1991678226079132, 0.1652675468597684] ***
*** starting iteration: 2; err: [Inf, 0.1991678226079132, 0.1652675468597684] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1991678226079132, 0.1652675468597684, 0.1599703691130666] ***
*** starting iteration: 3; err: [Inf, 0.1991678226079132, 0.1652675468597684, 0.1599703691130666] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1991678226079132, 0.1652675468597684, 0.1599703691130666, 0.15858040249965213] ***
*** finished computation of 7 references, err: [Inf, 0.1991678226079132, 0.1652675468597684, 0.1599703691130666, 0.15858040249965213] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 97, 3]]
** centroid: 1, normalized-entropy: 0.19439185783157603, [(2, 97), (3, 3)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [125, 19, 0]]
** centroid: 2, normalized-entropy: 0.562746818538222, [(1, 125), (2, 19)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 112, 11]]
** centroid: 3, normalized-entropy: 0.4345673583842649, [(2, 112), (3, 11)]
*** center 4: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [72, 14, 0]]
** centroid: 5, normalized-entropy: 0.6409441847875289, [(1, 72), (2, 14)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [40, 29, 0]]
** centroid: 6, normalized-entropy: 0.9815886212101388, [(1, 40), (2, 29)]
*** center 7: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2949147666671845] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2949147666671845, 0.20402885424224534] ***
*** starting iteration: 2; err: [Inf, 0.2949147666671845, 0.20402885424224534] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2949147666671845, 0.20402885424224534, 0.17638477586165094] ***
*** starting iteration: 3; err: [Inf, 0.2949147666671845, 0.20402885424224534, 0.17638477586165094] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2949147666671845, 0.20402885424224534, 0.17638477586165094, 0.16363171670192117] ***
*** finished computation of 7 references, err: [Inf, 0.2949147666671845, 0.20402885424224534, 0.17638477586165094, 0.16363171670192117] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [55, 80, 0]]
** centroid: 1, normalized-entropy: 0.975119064940866, [(1, 55), (2, 80)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [19, 30, 0]]
** centroid: 2, normalized-entropy: 0.9633355456726842, [(1, 19), (2, 30)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 119, 24]]
** centroid: 3, normalized-entropy: 0.6527215895689277, [(2, 119), (3, 24)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [47, 33, 0]]
** centroid: 4, normalized-entropy: 0.9777945702913884, [(1, 47), (2, 33)]
*** center 5: selecting labels [1] (freq >= 2) [from [46, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [117, 5, 0]]
** centroid: 6, normalized-entropy: 0.2467839550571885, [(1, 117), (2, 5)]
*** center 7: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22471516000489514] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22471516000489514, 0.15829423012008062] ***
*** starting iteration: 2; err: [Inf, 0.22471516000489514, 0.15829423012008062] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22471516000489514, 0.15829423012008062, 0.1528465455199691] ***
*** starting iteration: 3; err: [Inf, 0.22471516000489514, 0.15829423012008062, 0.1528465455199691] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22471516000489514, 0.15829423012008062, 0.1528465455199691, 0.15101423416415166] ***
*** finished computation of 7 references, err: [Inf, 0.22471516000489514, 0.15829423012008062, 0.1528465455199691, 0.15101423416415166] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [97, 23, 0]]
** centroid: 1, normalized-entropy: 0.7049450065963296, [(1, 97), (2, 23)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [3, 78, 0]]
** centroid: 2, normalized-entropy: 0.22853814395352806, [(1, 3), (2, 78)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 47, 22]]
** centroid: 3, normalized-entropy: 0.903116172156872, [(2, 47), (3, 22)]
*** center 4: selecting labels [1] (freq >= 2) [from [101, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [95, 10, 0]]
** centroid: 6, normalized-entropy: 0.45371633918694493, [(1, 95), (2, 10)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 94, 0]]
** centroid: 7, normalized-entropy: 0.19902377455969078, [(1, 3), (2, 94)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5163726984542815] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5163726984542815, 0.3469685017391368] ***
*** starting iteration: 2; err: [Inf, 0.5163726984542815, 0.3469685017391368] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5163726984542815, 0.3469685017391368, 0.3430078489812197] ***
*** starting iteration: 3; err: [Inf, 0.5163726984542815, 0.3469685017391368, 0.3430078489812197] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5163726984542815, 0.3469685017391368, 0.3430078489812197, 0.34051809873566163] ***
*** finished computation of 3 references, err: [Inf, 0.5163726984542815, 0.3469685017391368, 0.3430078489812197, 0.34051809873566163] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [120, 104, 0]]
** centroid: 1, normalized-entropy: 0.9963165195589622, [(1, 120), (2, 104)]
*** center 2: selecting labels [1] (freq >= 2) [from [165, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [96, 167, 14]]
** centroid: 3, normalized-entropy: 0.7492999063365205, [(1, 96), (2, 167), (3, 14)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3723132019901629] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3723132019901629, 0.30284254594651544] ***
*** starting iteration: 2; err: [Inf, 0.3723132019901629, 0.30284254594651544] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3723132019901629, 0.30284254594651544, 0.29900837774253053] ***
*** starting iteration: 3; err: [Inf, 0.3723132019901629, 0.30284254594651544, 0.29900837774253053] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3723132019901629, 0.30284254594651544, 0.29900837774253053, 0.298804120726135] ***
*** finished computation of 3 references, err: [Inf, 0.3723132019901629, 0.30284254594651544, 0.29900837774253053, 0.298804120726135] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [62, 161, 24]]
** centroid: 1, normalized-entropy: 0.7759409560238527, [(1, 62), (2, 161), (3, 24)]
*** center 2: selecting labels [1] (freq >= 2) [from [198, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [116, 106, 0]]
** centroid: 3, normalized-entropy: 0.9985358500505679, [(1, 116), (2, 106)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.34046964878788866] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34046964878788866, 0.307739562780849] ***
*** starting iteration: 2; err: [Inf, 0.34046964878788866, 0.307739562780849] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34046964878788866, 0.307739562780849, 0.3052840325534567] ***
*** starting iteration: 3; err: [Inf, 0.34046964878788866, 0.307739562780849, 0.3052840325534567] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34046964878788866, 0.307739562780849, 0.3052840325534567, 0.3038424233915745] ***
*** finished computation of 3 references, err: [Inf, 0.34046964878788866, 0.307739562780849, 0.3052840325534567, 0.3038424233915745] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [89, 158, 22]]
** centroid: 1, normalized-entropy: 0.8039739572456689, [(1, 89), (2, 158), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [124, 94, 0]]
** centroid: 2, normalized-entropy: 0.9862958176866949, [(1, 124), (2, 94)]
*** center 3: selecting labels [1] (freq >= 2) [from [180, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.5720312989235774] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5720312989235774, 0.35934710547932097] ***
*** finished computation of 3 references, err: [Inf, 0.5720312989235774, 0.35934710547932097] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [148, 45, 0]]
** centroid: 1, normalized-entropy: 0.7834804183669409, [(1, 148), (2, 45)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [128, 226, 14]]
** centroid: 2, normalized-entropy: 0.7200955330914751, [(1, 128), (2, 226), (3, 14)]
*** center 3: selecting labels [1] (freq >= 2) [from [105, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3231648542685085] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3231648542685085, 0.30282791821855765] ***
*** finished computation of 3 references, err: [Inf, 0.3231648542685085, 0.30282791821855765] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [121, 103, 0]]
** centroid: 1, normalized-entropy: 0.9953370380839549, [(1, 121), (2, 103)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [208, 3, 0]]
** centroid: 2, normalized-entropy: 0.10760938360997824, [(1, 208), (2, 3)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [47, 161, 24]]
** centroid: 3, normalized-entropy: 0.7388111198197539, [(1, 47), (2, 161), (3, 24)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4408707698127129] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4408707698127129, 0.3226404716337527] ***
*** finished computation of 3 references, err: [Inf, 0.4408707698127129, 0.3226404716337527] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [26, 212, 22]]
** centroid: 1, normalized-entropy: 0.5512811007660227, [(1, 26), (2, 212), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [189, 4, 0]]
** centroid: 2, normalized-entropy: 0.14549424878215955, [(1, 189), (2, 4)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [178, 36, 0]]
** centroid: 3, normalized-entropy: 0.6536265622705767, [(1, 178), (2, 36)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.25606735647367956] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25606735647367956, 0.21641744221434803] ***
*** starting iteration: 2; err: [Inf, 0.25606735647367956, 0.21641744221434803] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25606735647367956, 0.21641744221434803, 0.21122312138707297] ***
*** starting iteration: 3; err: [Inf, 0.25606735647367956, 0.21641744221434803, 0.21122312138707297] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25606735647367956, 0.21641744221434803, 0.21122312138707297, 0.20914728813958508] ***
*** finished computation of 7 references, err: [Inf, 0.25606735647367956, 0.21641744221434803, 0.21122312138707297, 0.20914728813958508] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [6, 103, 0]]
** centroid: 1, normalized-entropy: 0.30745653299528936, [(1, 6), (2, 103)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 103, 14]]
** centroid: 2, normalized-entropy: 0.5283773417314562, [(2, 103), (3, 14)]
*** center 3: selecting labels [1] (freq >= 1) [from [102, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [133, 4, 0]]
** centroid: 4, normalized-entropy: 0.19034913462725508, [(1, 133), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [31, 18, 0]]
** centroid: 5, normalized-entropy: 0.9486131982385807, [(1, 31), (2, 18)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [40, 21, 0]]
** centroid: 6, normalized-entropy: 0.9288391461883213, [(1, 40), (2, 21)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [69, 22, 0]]
** centroid: 7, normalized-entropy: 0.7979519684655734, [(1, 69), (2, 22)]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.31273432951029584] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.31273432951029584, 0.21350941020224629] ***
*** starting iteration: 2; err: [Inf, 0.31273432951029584, 0.21350941020224629] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.31273432951029584, 0.21350941020224629, 0.19951469666286856] ***
*** starting iteration: 3; err: [Inf, 0.31273432951029584, 0.21350941020224629, 0.19951469666286856] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.31273432951029584, 0.21350941020224629, 0.19951469666286856, 0.1974230486008784] ***
*** finished computation of 7 references, err: [Inf, 0.31273432951029584, 0.21350941020224629, 0.19951469666286856, 0.1974230486008784] ***
*** center 1: selecting labels [1] (freq >= 1) [from [121, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [19, 55, 0]]
** centroid: 2, normalized-entropy: 0.8218127305034848, [(1, 19), (2, 55)]
*** center 3: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [4, 89, 0]]
** centroid: 4, normalized-entropy: 0.2559300438391133, [(1, 4), (2, 89)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [46, 36, 0]]
** centroid: 5, normalized-entropy: 0.9892452969285004, [(1, 46), (2, 36)]
*** center 6: selecting labels [1] (freq >= 1) [from [111, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 87, 24]]
** centroid: 7, normalized-entropy: 0.7531979910695015, [(2, 87), (3, 24)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2824583093173567] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2824583093173567, 0.23158178262753243] ***
*** starting iteration: 2; err: [Inf, 0.2824583093173567, 0.23158178262753243] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2824583093173567, 0.23158178262753243, 0.19763971444476267] ***
*** starting iteration: 3; err: [Inf, 0.2824583093173567, 0.23158178262753243, 0.19763971444476267] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2824583093173567, 0.23158178262753243, 0.19763971444476267, 0.1943333624782546] ***
*** finished computation of 7 references, err: [Inf, 0.2824583093173567, 0.23158178262753243, 0.19763971444476267, 0.1943333624782546] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [98, 39, 0]]
** centroid: 1, normalized-entropy: 0.8617382781509058, [(1, 98), (2, 39)]
*** center 2: selecting labels [1] (freq >= 1) [from [116, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 78, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 72, 22]]
** centroid: 4, normalized-entropy: 0.7849920887641585, [(2, 72), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [52, 45, 0]]
** centroid: 5, normalized-entropy: 0.9962401135461777, [(1, 52), (2, 45)]
*** center 6: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [58, 18, 0]]
** centroid: 7, normalized-entropy: 0.7897492536625221, [(1, 58), (2, 18)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3998866307719781] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3998866307719781, 0.31102889193593897] ***
*** finished computation of 3 references, err: [Inf, 0.3998866307719781, 0.31102889193593897] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [111, 109, 0]]
** centroid: 1, normalized-entropy: 0.9999403836812653, [(1, 111), (2, 109)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [61, 162, 14]]
** centroid: 2, normalized-entropy: 0.7067970678687986, [(1, 61), (2, 162), (3, 14)]
*** center 3: selecting labels [1] (freq >= 1) [from [209, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.5882621437179921] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5882621437179921, 0.3700449375918825] ***
*** finished computation of 3 references, err: [Inf, 0.5882621437179921, 0.3700449375918825] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [312, 95, 0]]
** centroid: 1, normalized-entropy: 0.7839174779358747, [(1, 312), (2, 95)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [64, 58, 0]]
** centroid: 2, normalized-entropy: 0.9982545693874832, [(1, 64), (2, 58)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 114, 24]]
** centroid: 3, normalized-entropy: 0.6665783579949205, [(2, 114), (3, 24)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3612079168579121] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3612079168579121, 0.30931957410941685] ***
*** finished computation of 3 references, err: [Inf, 0.3612079168579121, 0.30931957410941685] ***
*** center 1: selecting labels [1] (freq >= 1) [from [180, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [101, 116, 16]]
** centroid: 2, normalized-entropy: 0.8133042407247721, [(1, 101), (2, 116), (3, 16)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [112, 136, 6]]
** centroid: 3, normalized-entropy: 0.7136397700971099, [(1, 112), (2, 136), (3, 6)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.24543496464482611] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24543496464482611, 0.19774478403767487] ***
*** starting iteration: 2; err: [Inf, 0.24543496464482611, 0.19774478403767487] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24543496464482611, 0.19774478403767487, 0.19506527695667794] ***
*** starting iteration: 3; err: [Inf, 0.24543496464482611, 0.19774478403767487, 0.19506527695667794] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24543496464482611, 0.19774478403767487, 0.19506527695667794, 0.19456274917645677] ***
*** finished computation of 7 references, err: [Inf, 0.24543496464482611, 0.19774478403767487, 0.19506527695667794, 0.19456274917645677] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [115, 2, 0]]
** centroid: 1, normalized-entropy: 0.1247975754927792, [(1, 115), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [65, 30, 0]]
** centroid: 2, normalized-entropy: 0.8997437586982626, [(1, 65), (2, 30)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 90, 14]]
** centroid: 3, normalized-entropy: 0.5699613760403499, [(2, 90), (3, 14)]
*** center 4: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [28, 66, 0]]
** centroid: 5, normalized-entropy: 0.8786744932173094, [(1, 28), (2, 66)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [11, 83, 0]]
** centroid: 6, normalized-entropy: 0.5207375686265202, [(1, 11), (2, 83)]
*** center 7: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 13)
[0.9250328172483862, 0.9129968291644938, 0.912010813208418, 0.9079648510786235, 0.907008805212398, 0.8990397583211954, 0.8970347593102085, 0.8950237662812514, 0.8820287353221485, 0.8719617821414228, 0.8549927172681664, 0.8399357441273608, 0.7479905054755355]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.3, 2) => 0.9250328172483862
finished with 14
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.270513854957222] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.270513854957222, 0.23651333678270448] ***
*** starting iteration: 2; err: [Inf, 0.270513854957222, 0.23651333678270448] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.270513854957222, 0.23651333678270448, 0.23646300872396286] ***
*** finished computation of 3 references, err: [Inf, 0.270513854957222, 0.23651333678270448, 0.23646300872396286] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [169, 44, 0]]
** centroid: 1, normalized-entropy: 0.7348804373538654, [(1, 169), (2, 44)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 208, 14]]
** centroid: 2, normalized-entropy: 0.33948600021427877, [(2, 208), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [212, 19, 0]]
** centroid: 3, normalized-entropy: 0.41006177248607334, [(1, 212), (2, 19)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4289286438266801] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4289286438266801, 0.2664750649941446] ***
*** starting iteration: 2; err: [Inf, 0.4289286438266801, 0.2664750649941446] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4289286438266801, 0.2664750649941446, 0.2421010291284841] ***
*** starting iteration: 3; err: [Inf, 0.4289286438266801, 0.2664750649941446, 0.2421010291284841] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4289286438266801, 0.2664750649941446, 0.2421010291284841, 0.23932194717597033] ***
*** finished computation of 3 references, err: [Inf, 0.4289286438266801, 0.2664750649941446, 0.2421010291284841, 0.23932194717597033] ***
*** center 1: selecting labels [1] (freq >= 2) [from [208, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [133, 84, 0]]
** centroid: 2, normalized-entropy: 0.9629004147713269, [(1, 133), (2, 84)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [35, 183, 24]]
** centroid: 3, normalized-entropy: 0.6555094925002882, [(1, 35), (2, 183), (3, 24)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2936651685067091] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2936651685067091, 0.23468954410163806] ***
*** starting iteration: 2; err: [Inf, 0.2936651685067091, 0.23468954410163806] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2936651685067091, 0.23468954410163806, 0.2345251580239504] ***
*** finished computation of 3 references, err: [Inf, 0.2936651685067091, 0.23468954410163806, 0.2345251580239504] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 161, 22]]
** centroid: 1, normalized-entropy: 0.5299888383579557, [(2, 161), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [245, 25, 0]]
** centroid: 2, normalized-entropy: 0.44506485705083854, [(1, 245), (2, 25)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [148, 66, 0]]
** centroid: 3, normalized-entropy: 0.891330958407023, [(1, 148), (2, 66)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 14)
[0.9250328172483862, 0.9129968291644938, 0.912010813208418, 0.9079648510786235, 0.907008805212398, 0.8990397583211954, 0.8970347593102085, 0.8950237662812514, 0.8820287353221485, 0.8719617821414228, 0.8549927172681664, 0.8480276683869498, 0.8399357441273608, 0.7479905054755355]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.3, 2) => 0.9250328172483862
finished with 16
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.22210039409833984] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22210039409833984, 0.1969517372931737] ***
*** starting iteration: 2; err: [Inf, 0.22210039409833984, 0.1969517372931737] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22210039409833984, 0.1969517372931737, 0.19354150600887993] ***
*** starting iteration: 3; err: [Inf, 0.22210039409833984, 0.1969517372931737, 0.19354150600887993] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22210039409833984, 0.1969517372931737, 0.19354150600887993, 0.19238862379834437] ***
*** starting iteration: 4; err: [Inf, 0.22210039409833984, 0.1969517372931737, 0.19354150600887993, 0.19238862379834437] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22210039409833984, 0.1969517372931737, 0.19354150600887993, 0.19238862379834437, 0.1919057304948546] ***
*** finished computation of 7 references, err: [Inf, 0.22210039409833984, 0.1969517372931737, 0.19354150600887993, 0.19238862379834437, 0.1919057304948546] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [83, 3, 0]]
** centroid: 1, normalized-entropy: 0.21832103023746746, [(1, 83), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [68, 19, 0]]
** centroid: 2, normalized-entropy: 0.7572182549240017, [(1, 68), (2, 19)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 98, 14]]
** centroid: 3, normalized-entropy: 0.5435644431995963, [(2, 98), (3, 14)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [93, 22, 0]]
** centroid: 4, normalized-entropy: 0.7041920940481365, [(1, 93), (2, 22)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [67, 47, 0]]
** centroid: 5, normalized-entropy: 0.9776825423268496, [(1, 67), (2, 47)]
*** center 6: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 82, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23383394362351884] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23383394362351884, 0.19234846304610617] ***
*** starting iteration: 2; err: [Inf, 0.23383394362351884, 0.19234846304610617] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23383394362351884, 0.19234846304610617, 0.18825704604806168] ***
*** starting iteration: 3; err: [Inf, 0.23383394362351884, 0.19234846304610617, 0.18825704604806168] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23383394362351884, 0.19234846304610617, 0.18825704604806168, 0.1872483035996333] ***
*** starting iteration: 4; err: [Inf, 0.23383394362351884, 0.19234846304610617, 0.18825704604806168, 0.1872483035996333] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23383394362351884, 0.19234846304610617, 0.18825704604806168, 0.1872483035996333, 0.1869058832917167] ***
*** finished computation of 7 references, err: [Inf, 0.23383394362351884, 0.19234846304610617, 0.18825704604806168, 0.1872483035996333, 0.1869058832917167] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 111, 24]]
** centroid: 1, normalized-entropy: 0.6751914401458716, [(2, 111), (3, 24)]
*** center 2: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [86, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [56, 37, 0]]
** centroid: 4, normalized-entropy: 0.9696787018231177, [(1, 56), (2, 37)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [73, 12, 0]]
** centroid: 5, normalized-entropy: 0.5873116089977589, [(1, 73), (2, 12)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [88, 6, 0]]
** centroid: 6, normalized-entropy: 0.3424637724817958, [(1, 88), (2, 6)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 100, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24323343897637711] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24323343897637711, 0.1934834063678667] ***
*** starting iteration: 2; err: [Inf, 0.24323343897637711, 0.1934834063678667] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24323343897637711, 0.1934834063678667, 0.19021102281027602] ***
*** starting iteration: 3; err: [Inf, 0.24323343897637711, 0.1934834063678667, 0.19021102281027602] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24323343897637711, 0.1934834063678667, 0.19021102281027602, 0.1891743426463906] ***
*** starting iteration: 4; err: [Inf, 0.24323343897637711, 0.1934834063678667, 0.19021102281027602, 0.1891743426463906] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24323343897637711, 0.1934834063678667, 0.19021102281027602, 0.1891743426463906, 0.18852112917550679] ***
*** finished computation of 7 references, err: [Inf, 0.24323343897637711, 0.1934834063678667, 0.19021102281027602, 0.1891743426463906, 0.18852112917550679] ***
*** center 1: selecting labels [2] (freq >= 2) [from [1, 97, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [72, 40, 0]]
** centroid: 3, normalized-entropy: 0.940285958670631, [(1, 72), (2, 40)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [71, 28, 0]]
** centroid: 4, normalized-entropy: 0.8592759806609698, [(1, 71), (2, 28)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 83, 22]]
** centroid: 5, normalized-entropy: 0.7405715327916912, [(2, 83), (3, 22)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [102, 4, 0]]
** centroid: 6, normalized-entropy: 0.23181305002459035, [(1, 102), (2, 4)]
*** center 7: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20538342882831534] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20538342882831534, 0.15639757656830702] ***
*** starting iteration: 2; err: [Inf, 0.20538342882831534, 0.15639757656830702] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20538342882831534, 0.15639757656830702, 0.1520535608266925] ***
*** starting iteration: 3; err: [Inf, 0.20538342882831534, 0.15639757656830702, 0.1520535608266925] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20538342882831534, 0.15639757656830702, 0.1520535608266925, 0.15086293631224884] ***
*** starting iteration: 4; err: [Inf, 0.20538342882831534, 0.15639757656830702, 0.1520535608266925, 0.15086293631224884] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20538342882831534, 0.15639757656830702, 0.1520535608266925, 0.15086293631224884, 0.14989782833597726] ***
*** finished computation of 7 references, err: [Inf, 0.20538342882831534, 0.15639757656830702, 0.1520535608266925, 0.15086293631224884, 0.14989782833597726] ***
*** center 1: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 89, 14]]
** centroid: 2, normalized-entropy: 0.5734593207286953, [(2, 89), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [73, 15, 0]]
** centroid: 3, normalized-entropy: 0.6587435307694671, [(1, 73), (2, 15)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [89, 32, 0]]
** centroid: 4, normalized-entropy: 0.8334064161505499, [(1, 89), (2, 32)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [24, 58, 0]]
** centroid: 5, normalized-entropy: 0.8721617883411698, [(1, 24), (2, 58)]
*** center 6: selecting labels [1] (freq >= 2) [from [104, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 77, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19023587827248195] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19023587827248195, 0.15100468781523999] ***
*** starting iteration: 2; err: [Inf, 0.19023587827248195, 0.15100468781523999] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19023587827248195, 0.15100468781523999, 0.14764982031175178] ***
*** starting iteration: 3; err: [Inf, 0.19023587827248195, 0.15100468781523999, 0.14764982031175178] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19023587827248195, 0.15100468781523999, 0.14764982031175178, 0.1471526203020804] ***
*** finished computation of 7 references, err: [Inf, 0.19023587827248195, 0.15100468781523999, 0.14764982031175178, 0.1471526203020804] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [97, 2, 0]]
** centroid: 1, normalized-entropy: 0.14257333025989857, [(1, 97), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [92, 14, 0]]
** centroid: 2, normalized-entropy: 0.5631028237513912, [(1, 92), (2, 14)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 73, 24]]
** centroid: 3, normalized-entropy: 0.8071675554288905, [(2, 73), (3, 24)]
*** center 4: selecting labels [1] (freq >= 2) [from [116, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [3, 77, 0]]
** centroid: 5, normalized-entropy: 0.2307099556914763, [(1, 3), (2, 77)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [9, 88, 0]]
** centroid: 6, normalized-entropy: 0.44569317772256106, [(1, 9), (2, 88)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [59, 13, 0]]
** centroid: 7, normalized-entropy: 0.6812908868842175, [(1, 59), (2, 13)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20732900296160575] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20732900296160575, 0.15696210965285193] ***
*** starting iteration: 2; err: [Inf, 0.20732900296160575, 0.15696210965285193] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20732900296160575, 0.15696210965285193, 0.15311383638800452] ***
*** starting iteration: 3; err: [Inf, 0.20732900296160575, 0.15696210965285193, 0.15311383638800452] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20732900296160575, 0.15696210965285193, 0.15311383638800452, 0.15247693311456575] ***
*** finished computation of 7 references, err: [Inf, 0.20732900296160575, 0.15696210965285193, 0.15311383638800452, 0.15247693311456575] ***
*** center 1: selecting labels [1] (freq >= 2) [from [116, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 68, 22]]
** centroid: 2, normalized-entropy: 0.80235344282919, [(2, 68), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [70, 31, 0]]
** centroid: 3, normalized-entropy: 0.8895986430672326, [(1, 70), (2, 31)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [105, 11, 0]]
** centroid: 4, normalized-entropy: 0.4523816230590106, [(1, 105), (2, 11)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [21, 71, 0]]
** centroid: 5, normalized-entropy: 0.7749672673267259, [(1, 21), (2, 71)]
*** center 6: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 71, 0]]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 16)
[0.9250328172483862, 0.9129968291644938, 0.912010813208418, 0.9119988251724779, 0.9109828391265516, 0.9079648510786235, 0.907008805212398, 0.8990397583211954, 0.8970347593102085, 0.8950237662812514, 0.8820287353221485, 0.8719617821414228, 0.8549927172681664, 0.8480276683869498, 0.8399357441273608, 0.7479905054755355]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.3, 2) => 0.9250328172483862
finished with 16
iteration 4 finished
generating 4 configurations using top 12 configurations, starting with 16)
[0.9250328172483862, 0.9129968291644938, 0.912010813208418, 0.9119988251724779, 0.9109828391265516, 0.9079648510786235, 0.907008805212398, 0.8990397583211954, 0.8970347593102085, 0.8950237662812514, 0.8820287353221485, 0.8719617821414228, 0.8549927172681664, 0.8480276683869498, 0.8399357441273608, 0.7479905054755355]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.3, 2) => 0.9250328172483862
finished with 17
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.2264023774552408] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2264023774552408, 0.2055995526385155] ***
*** starting iteration: 2; err: [Inf, 0.2264023774552408, 0.2055995526385155] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2264023774552408, 0.2055995526385155, 0.2001773461268784] ***
*** starting iteration: 3; err: [Inf, 0.2264023774552408, 0.2055995526385155, 0.2001773461268784] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2264023774552408, 0.2055995526385155, 0.2001773461268784, 0.19760079992244262] ***
*** finished computation of 7 references, err: [Inf, 0.2264023774552408, 0.2055995526385155, 0.2001773461268784, 0.19760079992244262] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [13, 73, 0]]
** centroid: 1, normalized-entropy: 0.6127425554686624, [(1, 13), (2, 73)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [39, 82, 0]]
** centroid: 2, normalized-entropy: 0.9068801718670692, [(1, 39), (2, 82)]
*** center 3: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 93, 14]]
** centroid: 4, normalized-entropy: 0.5597404598417697, [(2, 93), (3, 14)]
*** center 5: selecting labels [1] (freq >= 2) [from [111, 1, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [80, 22, 0]]
** centroid: 7, normalized-entropy: 0.7522121733341471, [(1, 80), (2, 22)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3169705839674065] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3169705839674065, 0.2301058476229479] ***
*** starting iteration: 2; err: [Inf, 0.3169705839674065, 0.2301058476229479] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3169705839674065, 0.2301058476229479, 0.22120297812707332] ***
*** starting iteration: 3; err: [Inf, 0.3169705839674065, 0.2301058476229479, 0.22120297812707332] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3169705839674065, 0.2301058476229479, 0.22120297812707332, 0.21048090494107985] ***
*** finished computation of 7 references, err: [Inf, 0.3169705839674065, 0.2301058476229479, 0.22120297812707332, 0.21048090494107985] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [8, 54, 0]]
** centroid: 1, normalized-entropy: 0.5547781633412736, [(1, 8), (2, 54)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 70, 13]]
** centroid: 2, normalized-entropy: 0.6261776539736496, [(2, 70), (3, 13)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [62, 23, 0]]
** centroid: 3, normalized-entropy: 0.8423074510400833, [(1, 62), (2, 23)]
*** center 4: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [126, 0, 0]]
*** center 6: selecting labels [1, 2, 3] (freq >= 2) [from [11, 98, 11]]
** centroid: 6, normalized-entropy: 0.5493179969671942, [(1, 11), (2, 98), (3, 11)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [66, 22, 0]]
** centroid: 7, normalized-entropy: 0.8112781244591328, [(1, 66), (2, 22)]
finished with 13 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.43385712104965407] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.43385712104965407, 0.28881958059860446] ***
*** starting iteration: 2; err: [Inf, 0.43385712104965407, 0.28881958059860446] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.43385712104965407, 0.28881958059860446, 0.2510187339381143] ***
*** starting iteration: 3; err: [Inf, 0.43385712104965407, 0.28881958059860446, 0.2510187339381143] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.43385712104965407, 0.28881958059860446, 0.2510187339381143, 0.23120664872474844] ***
*** finished computation of 7 references, err: [Inf, 0.43385712104965407, 0.28881958059860446, 0.2510187339381143, 0.23120664872474844] ***
*** center 1: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [2, 121, 2]]
** centroid: 2, normalized-entropy: 0.14910426642444344, [(1, 2), (2, 121), (3, 2)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [137, 4, 0]]
** centroid: 3, normalized-entropy: 0.18614429306835265, [(1, 137), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [30, 7, 0]]
** centroid: 4, normalized-entropy: 0.699772221773307, [(1, 30), (2, 7)]
*** center 5: selecting labels [1, 2, 3] (freq >= 2) [from [60, 120, 20]]
** centroid: 5, normalized-entropy: 0.8173454221465101, [(1, 60), (2, 120), (3, 20)]
*** center 6: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [28, 0, 0]]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 17)
[0.9250328172483862, 0.9129968291644938, 0.912010813208418, 0.9119988251724779, 0.9109828391265516, 0.9079648510786235, 0.907008805212398, 0.8990397583211954, 0.8970347593102085, 0.8960007912103721, 0.8950237662812514, 0.8820287353221485, 0.8719617821414228, 0.8549927172681664, 0.8480276683869498, 0.8399357441273608, 0.7479905054755355]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.3, 2) => 0.9250328172483862
finished with 19
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.3949065713048283] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3949065713048283, 0.3186922679059543] ***
*** starting iteration: 2; err: [Inf, 0.3949065713048283, 0.3186922679059543] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3949065713048283, 0.3186922679059543, 0.30996059621796124] ***
*** starting iteration: 3; err: [Inf, 0.3949065713048283, 0.3186922679059543, 0.30996059621796124] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3949065713048283, 0.3186922679059543, 0.30996059621796124, 0.30786676871640656] ***
*** finished computation of 3 references, err: [Inf, 0.3949065713048283, 0.3186922679059543, 0.30996059621796124, 0.30786676871640656] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [96, 134, 1]]
** centroid: 1, normalized-entropy: 0.980218957072321, [(1, 96), (2, 134)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [85, 137, 13]]
** centroid: 2, normalized-entropy: 0.766907576112999, [(1, 85), (2, 137), (3, 13)]
*** center 3: selecting labels [1] (freq >= 2) [from [200, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3525344696387403] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3525344696387403, 0.3072120049323278] ***
*** starting iteration: 2; err: [Inf, 0.3525344696387403, 0.3072120049323278] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3525344696387403, 0.3072120049323278, 0.29972365348023183] ***
*** starting iteration: 3; err: [Inf, 0.3525344696387403, 0.3072120049323278, 0.29972365348023183] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3525344696387403, 0.3072120049323278, 0.29972365348023183, 0.2984643497935746] ***
*** finished computation of 3 references, err: [Inf, 0.3525344696387403, 0.3072120049323278, 0.29972365348023183, 0.2984643497935746] ***
*** center 1: selecting labels [1] (freq >= 2) [from [204, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [64, 157, 24]]
** centroid: 2, normalized-entropy: 0.7859111771902908, [(1, 64), (2, 157), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [108, 110, 0]]
** centroid: 3, normalized-entropy: 0.9999392847706552, [(1, 108), (2, 110)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4232902108193159] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4232902108193159, 0.34056961879055986] ***
*** starting iteration: 2; err: [Inf, 0.4232902108193159, 0.34056961879055986] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4232902108193159, 0.34056961879055986, 0.30699255199882314] ***
*** starting iteration: 3; err: [Inf, 0.4232902108193159, 0.34056961879055986, 0.30699255199882314] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4232902108193159, 0.34056961879055986, 0.30699255199882314, 0.30262776477628206] ***
*** finished computation of 3 references, err: [Inf, 0.4232902108193159, 0.34056961879055986, 0.30699255199882314, 0.30262776477628206] ***
*** center 1: selecting labels [1] (freq >= 2) [from [195, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [102, 94, 0]]
** centroid: 2, normalized-entropy: 0.9987979209581141, [(1, 102), (2, 94)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [96, 158, 22]]
** centroid: 3, normalized-entropy: 0.8085307555249194, [(1, 96), (2, 158), (3, 22)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.30764099733705436] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30764099733705436, 0.23974102054786933] ***
*** starting iteration: 2; err: [Inf, 0.30764099733705436, 0.23974102054786933] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30764099733705436, 0.23974102054786933, 0.23739412970709484] ***
*** starting iteration: 3; err: [Inf, 0.30764099733705436, 0.23974102054786933, 0.23739412970709484] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30764099733705436, 0.23974102054786933, 0.23739412970709484, 0.2370878056309804] ***
*** finished computation of 3 references, err: [Inf, 0.30764099733705436, 0.23974102054786933, 0.23739412970709484, 0.2370878056309804] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [232, 10, 0]]
** centroid: 1, normalized-entropy: 0.24832244463628733, [(1, 232), (2, 10)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [10, 187, 14]]
** centroid: 2, normalized-entropy: 0.3927923897635209, [(1, 10), (2, 187), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [139, 74, 0]]
** centroid: 3, normalized-entropy: 0.9317408025492665, [(1, 139), (2, 74)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3016004417981042] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3016004417981042, 0.2700962292217556] ***
*** starting iteration: 2; err: [Inf, 0.3016004417981042, 0.2700962292217556] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3016004417981042, 0.2700962292217556, 0.24291911799421553] ***
*** starting iteration: 3; err: [Inf, 0.3016004417981042, 0.2700962292217556, 0.24291911799421553] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3016004417981042, 0.2700962292217556, 0.24291911799421553, 0.2393492145681645] ***
*** finished computation of 3 references, err: [Inf, 0.3016004417981042, 0.2700962292217556, 0.24291911799421553, 0.2393492145681645] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [89, 123, 9]]
** centroid: 1, normalized-entropy: 0.7489152764628362, [(1, 89), (2, 123), (3, 9)]
*** center 2: selecting labels [1] (freq >= 2) [from [205, 1, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [82, 143, 15]]
** centroid: 3, normalized-entropy: 0.7725459286371492, [(1, 82), (2, 143), (3, 15)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2838663831115819] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2838663831115819, 0.23847461304162396] ***
*** starting iteration: 2; err: [Inf, 0.2838663831115819, 0.23847461304162396] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2838663831115819, 0.23847461304162396, 0.23649803651538656] ***
*** starting iteration: 3; err: [Inf, 0.2838663831115819, 0.23847461304162396, 0.23649803651538656] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2838663831115819, 0.23847461304162396, 0.23649803651538656, 0.2362089087709092] ***
*** finished computation of 3 references, err: [Inf, 0.2838663831115819, 0.23847461304162396, 0.23649803651538656, 0.2362089087709092] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [236, 3, 0]]
** centroid: 1, normalized-entropy: 0.09727414207464807, [(1, 236), (2, 3)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [19, 182, 22]]
** centroid: 2, normalized-entropy: 0.5499102667575418, [(1, 19), (2, 182), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [138, 67, 0]]
** centroid: 3, normalized-entropy: 0.9116539980612604, [(1, 138), (2, 67)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 19)
[0.9250328172483862, 0.9140008271744798, 0.9129968291644938, 0.912010813208418, 0.9119988251724779, 0.9109828391265516, 0.9079648510786235, 0.907008805212398, 0.90400280520041, 0.8990397583211954, 0.8970347593102085, 0.8960007912103721, 0.8950237662812514, 0.8820287353221485, 0.8719617821414228, 0.8549927172681664, 0.8480276683869498, 0.8399357441273608, 0.7479905054755355]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.3, 2) => 0.9250328172483862
finished with 19
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 19)
[0.9250328172483862, 0.9140008271744798, 0.9129968291644938, 0.912010813208418, 0.9119988251724779, 0.9109828391265516, 0.9079648510786235, 0.907008805212398, 0.90400280520041, 0.8990397583211954, 0.8970347593102085, 0.8960007912103721, 0.8950237662812514, 0.8820287353221485, 0.8719617821414228, 0.8549927172681664, 0.8480276683869498, 0.8399357441273608, 0.7479905054755355]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.3, 2) => 0.9250328172483862
finished with 19
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 19)
[0.9250328172483862, 0.9140008271744798, 0.9129968291644938, 0.912010813208418, 0.9119988251724779, 0.9109828391265516, 0.9079648510786235, 0.907008805212398, 0.90400280520041, 0.8990397583211954, 0.8970347593102085, 0.8960007912103721, 0.8950237662812514, 0.8820287353221485, 0.8719617821414228, 0.8549927172681664, 0.8480276683869498, 0.8399357441273608, 0.7479905054755355]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.3, 2) => 0.9250328172483862
finished with 19
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.2635096469308483] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2635096469308483, 0.16831404891051352] ***
*** starting iteration: 2; err: [Inf, 0.2635096469308483, 0.16831404891051352] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2635096469308483, 0.16831404891051352, 0.1588655592640862] ***
*** starting iteration: 3; err: [Inf, 0.2635096469308483, 0.16831404891051352, 0.1588655592640862] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2635096469308483, 0.16831404891051352, 0.1588655592640862, 0.15684058499988168] ***
*** finished computation of 7 references, err: [Inf, 0.2635096469308483, 0.16831404891051352, 0.1588655592640862, 0.15684058499988168] ***
*** center 1: selecting labels [1] (freq >= 2) [from [182, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [35, 47, 0]]
** centroid: 2, normalized-entropy: 0.9844961311800012, [(1, 35), (2, 47)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [150, 92, 0]]
** centroid: 3, normalized-entropy: 0.9581586772265479, [(1, 150), (2, 92)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [2, 143, 0]]
** centroid: 4, normalized-entropy: 0.10500149581279865, [(1, 2), (2, 143)]
*** center 5: selecting labels [1] (freq >= 2) [from [137, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 113, 30]]
** centroid: 6, normalized-entropy: 0.7410815422247408, [(2, 113), (3, 30)]
*** center 7: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2860066423639655] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2860066423639655, 0.17779694004543126] ***
*** starting iteration: 2; err: [Inf, 0.2860066423639655, 0.17779694004543126] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2860066423639655, 0.17779694004543126, 0.15649936881661414] ***
*** starting iteration: 3; err: [Inf, 0.2860066423639655, 0.17779694004543126, 0.15649936881661414] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2860066423639655, 0.17779694004543126, 0.15649936881661414, 0.15004957281984388] ***
*** finished computation of 7 references, err: [Inf, 0.2860066423639655, 0.17779694004543126, 0.15649936881661414, 0.15004957281984388] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [89, 21, 0]]
** centroid: 1, normalized-entropy: 0.7033693386668108, [(1, 89), (2, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [77, 16, 0]]
** centroid: 2, normalized-entropy: 0.6623570516079519, [(1, 77), (2, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [70, 4, 0]]
** centroid: 3, normalized-entropy: 0.30337483608641397, [(1, 70), (2, 4)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 66, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 60, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 13, 16]]
** centroid: 7, normalized-entropy: 0.9922666387194963, [(2, 13), (3, 16)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21088722689449788] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21088722689449788, 0.15926066539809108] ***
*** starting iteration: 2; err: [Inf, 0.21088722689449788, 0.15926066539809108] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21088722689449788, 0.15926066539809108, 0.151902934236452] ***
*** starting iteration: 3; err: [Inf, 0.21088722689449788, 0.15926066539809108, 0.151902934236452] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21088722689449788, 0.15926066539809108, 0.151902934236452, 0.14916650492791086] ***
*** finished computation of 7 references, err: [Inf, 0.21088722689449788, 0.15926066539809108, 0.151902934236452, 0.14916650492791086] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 56, 12]]
** centroid: 1, normalized-entropy: 0.6722948170756378, [(2, 56), (3, 12)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [50, 8, 0]]
** centroid: 2, normalized-entropy: 0.5787946246321198, [(1, 50), (2, 8)]
*** center 3: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 88, 2]]
** centroid: 4, normalized-entropy: 0.1537421803287618, [(2, 88), (3, 2)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [77, 2, 0]]
** centroid: 5, normalized-entropy: 0.17033057560105982, [(1, 77), (2, 2)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [33, 20, 0]]
** centroid: 6, normalized-entropy: 0.9561550236844027, [(1, 33), (2, 20)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [28, 41, 0]]
** centroid: 7, normalized-entropy: 0.9742408334889756, [(1, 28), (2, 41)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26312215119227766] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26312215119227766, 0.18417471951711922] ***
*** starting iteration: 2; err: [Inf, 0.26312215119227766, 0.18417471951711922] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26312215119227766, 0.18417471951711922, 0.16359771230071782] ***
*** starting iteration: 3; err: [Inf, 0.26312215119227766, 0.18417471951711922, 0.16359771230071782] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26312215119227766, 0.18417471951711922, 0.16359771230071782, 0.1579646069519222] ***
*** finished computation of 7 references, err: [Inf, 0.26312215119227766, 0.18417471951711922, 0.16359771230071782, 0.1579646069519222] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [13, 37, 0]]
** centroid: 1, normalized-entropy: 0.8267463724926181, [(1, 13), (2, 37)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [86, 8, 0]]
** centroid: 2, normalized-entropy: 0.4199210973757179, [(1, 86), (2, 8)]
*** center 3: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 53, 12]]
** centroid: 4, normalized-entropy: 0.6900703653284017, [(2, 53), (3, 12)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [14, 39, 0]]
** centroid: 5, normalized-entropy: 0.8329458235361399, [(1, 14), (2, 39)]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 66, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2385455623883754] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2385455623883754, 0.17070095985941589] ***
*** starting iteration: 2; err: [Inf, 0.2385455623883754, 0.17070095985941589] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2385455623883754, 0.17070095985941589, 0.15918576921708882] ***
*** starting iteration: 3; err: [Inf, 0.2385455623883754, 0.17070095985941589, 0.15918576921708882] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2385455623883754, 0.17070095985941589, 0.15918576921708882, 0.15448561520501972] ***
*** finished computation of 7 references, err: [Inf, 0.2385455623883754, 0.17070095985941589, 0.15918576921708882, 0.15448561520501972] ***
*** center 1: selecting labels [1] (freq >= 2) [from [99, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [18, 54, 0]]
** centroid: 2, normalized-entropy: 0.8112781244591328, [(1, 18), (2, 54)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [60, 23, 0]]
** centroid: 3, normalized-entropy: 0.8514808683852091, [(1, 60), (2, 23)]
*** center 4: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 58, 12]]
** centroid: 5, normalized-entropy: 0.6609623351442084, [(2, 58), (3, 12)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [36, 9, 0]]
** centroid: 6, normalized-entropy: 0.7219280948873623, [(1, 36), (2, 9)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 65, 1]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24171243907138706] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24171243907138706, 0.1827431170269847] ***
*** starting iteration: 2; err: [Inf, 0.24171243907138706, 0.1827431170269847] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24171243907138706, 0.1827431170269847, 0.16394215225614608] ***
*** starting iteration: 3; err: [Inf, 0.24171243907138706, 0.1827431170269847, 0.16394215225614608] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24171243907138706, 0.1827431170269847, 0.16394215225614608, 0.1540886005051434] ***
*** finished computation of 7 references, err: [Inf, 0.24171243907138706, 0.1827431170269847, 0.16394215225614608, 0.1540886005051434] ***
*** center 1: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [46, 54, 0]]
** centroid: 2, normalized-entropy: 0.9953784388202258, [(1, 46), (2, 54)]
*** center 3: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [75, 5, 0]]
** centroid: 4, normalized-entropy: 0.3372900666170139, [(1, 75), (2, 5)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 85, 15]]
** centroid: 5, normalized-entropy: 0.6098403047164005, [(2, 85), (3, 15)]
*** center 6: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [10, 71, 0]]
** centroid: 7, normalized-entropy: 0.5392163432092415, [(1, 10), (2, 71)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21870846279710532] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21870846279710532, 0.1671054685842246] ***
*** starting iteration: 2; err: [Inf, 0.21870846279710532, 0.1671054685842246] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21870846279710532, 0.1671054685842246, 0.15634729977604] ***
*** starting iteration: 3; err: [Inf, 0.21870846279710532, 0.1671054685842246, 0.15634729977604] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21870846279710532, 0.1671054685842246, 0.15634729977604, 0.15357747608982025] ***
*** finished computation of 7 references, err: [Inf, 0.21870846279710532, 0.1671054685842246, 0.15634729977604, 0.15357747608982025] ***
*** center 1: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [90, 25, 0]]
** centroid: 2, normalized-entropy: 0.7553754125614286, [(1, 90), (2, 25)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [3, 67, 0]]
** centroid: 3, normalized-entropy: 0.25524211319019174, [(1, 3), (2, 67)]
*** center 4: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 29, 5]]
** centroid: 5, normalized-entropy: 0.6024308020404452, [(2, 29), (3, 5)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [64, 9, 0]]
** centroid: 6, normalized-entropy: 0.5387379148665815, [(1, 64), (2, 9)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 71, 15]]
** centroid: 7, normalized-entropy: 0.6677135405281421, [(2, 71), (3, 15)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3131722234180197] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3131722234180197, 0.18567999709770083] ***
*** starting iteration: 2; err: [Inf, 0.3131722234180197, 0.18567999709770083] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3131722234180197, 0.18567999709770083, 0.16374164190329613] ***
*** starting iteration: 3; err: [Inf, 0.3131722234180197, 0.18567999709770083, 0.16374164190329613] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3131722234180197, 0.18567999709770083, 0.16374164190329613, 0.15441611934453248] ***
*** finished computation of 7 references, err: [Inf, 0.3131722234180197, 0.18567999709770083, 0.16374164190329613, 0.15441611934453248] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [49, 39, 0]]
** centroid: 1, normalized-entropy: 0.9906649266228326, [(1, 49), (2, 39)]
*** center 2: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 90, 13]]
** centroid: 3, normalized-entropy: 0.5469617407220055, [(2, 90), (3, 13)]
*** center 4: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [25, 42, 0]]
** centroid: 5, normalized-entropy: 0.9530483471581301, [(1, 25), (2, 42)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [40, 33, 0]]
** centroid: 6, normalized-entropy: 0.9933570282728464, [(1, 40), (2, 33)]
*** center 7: selecting labels [1] (freq >= 2) [from [42, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21068875544611365] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21068875544611365, 0.1702753197271377] ***
*** starting iteration: 2; err: [Inf, 0.21068875544611365, 0.1702753197271377] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21068875544611365, 0.1702753197271377, 0.16135015488602222] ***
*** starting iteration: 3; err: [Inf, 0.21068875544611365, 0.1702753197271377, 0.16135015488602222] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21068875544611365, 0.1702753197271377, 0.16135015488602222, 0.1567016357704997] ***
*** finished computation of 7 references, err: [Inf, 0.21068875544611365, 0.1702753197271377, 0.16135015488602222, 0.1567016357704997] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [42, 24, 0]]
** centroid: 1, normalized-entropy: 0.9456603046006401, [(1, 42), (2, 24)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [95, 2, 0]]
** centroid: 2, normalized-entropy: 0.14489961753310668, [(1, 95), (2, 2)]
*** center 3: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [63, 3, 0]]
** centroid: 4, normalized-entropy: 0.2667649878030262, [(1, 63), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [48, 3, 0]]
** centroid: 5, normalized-entropy: 0.32275695889739825, [(1, 48), (2, 3)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [25, 51, 0]]
** centroid: 6, normalized-entropy: 0.9138472873262908, [(1, 25), (2, 51)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 93, 17]]
** centroid: 7, normalized-entropy: 0.6210993704855443, [(2, 93), (3, 17)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22541509261727333] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22541509261727333, 0.16543324866332113] ***
*** starting iteration: 2; err: [Inf, 0.22541509261727333, 0.16543324866332113] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22541509261727333, 0.16543324866332113, 0.1581240139589645] ***
*** starting iteration: 3; err: [Inf, 0.22541509261727333, 0.16543324866332113, 0.1581240139589645] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22541509261727333, 0.16543324866332113, 0.1581240139589645, 0.15557675051270053] ***
*** finished computation of 7 references, err: [Inf, 0.22541509261727333, 0.16543324866332113, 0.1581240139589645, 0.15557675051270053] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 31, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [121, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [77, 11, 0]]
** centroid: 3, normalized-entropy: 0.5435644431995963, [(1, 77), (2, 11)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [6, 63, 0]]
** centroid: 4, normalized-entropy: 0.42622865699814483, [(1, 6), (2, 63)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 15, 20]]
** centroid: 5, normalized-entropy: 0.9852281360342514, [(2, 15), (3, 20)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 66, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [72, 18, 0]]
** centroid: 7, normalized-entropy: 0.7219280948873623, [(1, 72), (2, 18)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21730649732239543] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21730649732239543, 0.17799836440943181] ***
*** starting iteration: 2; err: [Inf, 0.21730649732239543, 0.17799836440943181] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21730649732239543, 0.17799836440943181, 0.1665009264294058] ***
*** starting iteration: 3; err: [Inf, 0.21730649732239543, 0.17799836440943181, 0.1665009264294058] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21730649732239543, 0.17799836440943181, 0.1665009264294058, 0.15948099195118995] ***
*** finished computation of 7 references, err: [Inf, 0.21730649732239543, 0.17799836440943181, 0.1665009264294058, 0.15948099195118995] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 41, 2]]
** centroid: 1, normalized-entropy: 0.2713895875081112, [(2, 41), (3, 2)]
*** center 2: selecting labels [1] (freq >= 2) [from [110, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [6, 55, 0]]
** centroid: 3, normalized-entropy: 0.4637773498877517, [(1, 6), (2, 55)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 46, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [85, 7, 0]]
** centroid: 5, normalized-entropy: 0.3882389775123619, [(1, 85), (2, 7)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [78, 28, 0]]
** centroid: 6, normalized-entropy: 0.8329458235361399, [(1, 78), (2, 28)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 29, 13]]
** centroid: 7, normalized-entropy: 0.8926230133850988, [(2, 29), (3, 13)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.28748038500337864] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28748038500337864, 0.17695270973816515] ***
*** starting iteration: 2; err: [Inf, 0.28748038500337864, 0.17695270973816515] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28748038500337864, 0.17695270973816515, 0.16296767324302344] ***
*** starting iteration: 3; err: [Inf, 0.28748038500337864, 0.17695270973816515, 0.16296767324302344] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28748038500337864, 0.17695270973816515, 0.16296767324302344, 0.15847187666920945] ***
*** finished computation of 7 references, err: [Inf, 0.28748038500337864, 0.17695270973816515, 0.16296767324302344, 0.15847187666920945] ***
*** center 1: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 40, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [43, 2, 0]]
** centroid: 3, normalized-entropy: 0.2623112196143368, [(1, 43), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [76, 5, 0]]
** centroid: 4, normalized-entropy: 0.33426813256179383, [(1, 76), (2, 5)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [74, 38, 0]]
** centroid: 5, normalized-entropy: 0.9241335419915458, [(1, 74), (2, 38)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 89, 19]]
** centroid: 6, normalized-entropy: 0.6710828900205286, [(2, 89), (3, 19)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [18, 16, 0]]
** centroid: 7, normalized-entropy: 0.9975025463691153, [(1, 18), (2, 16)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19992988741770387] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19992988741770387, 0.1717106835283339] ***
*** starting iteration: 2; err: [Inf, 0.19992988741770387, 0.1717106835283339] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19992988741770387, 0.1717106835283339, 0.15854607653431593] ***
*** starting iteration: 3; err: [Inf, 0.19992988741770387, 0.1717106835283339, 0.15854607653431593] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19992988741770387, 0.1717106835283339, 0.15854607653431593, 0.1540514656426385] ***
*** finished computation of 7 references, err: [Inf, 0.19992988741770387, 0.1717106835283339, 0.15854607653431593, 0.1540514656426385] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [45, 46, 0]]
** centroid: 1, normalized-entropy: 0.999912889501356, [(1, 45), (2, 46)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 77, 1]]
*** center 3: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [51, 14, 0]]
** centroid: 4, normalized-entropy: 0.7516499461153354, [(1, 51), (2, 14)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 51, 6]]
** centroid: 5, normalized-entropy: 0.48546076074591343, [(2, 51), (3, 6)]
*** center 6: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [26, 10, 0]]
** centroid: 7, normalized-entropy: 0.8524051786494784, [(1, 26), (2, 10)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24222305681556464] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24222305681556464, 0.16921619596332313] ***
*** starting iteration: 2; err: [Inf, 0.24222305681556464, 0.16921619596332313] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24222305681556464, 0.16921619596332313, 0.1554355777055025] ***
*** starting iteration: 3; err: [Inf, 0.24222305681556464, 0.16921619596332313, 0.1554355777055025] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24222305681556464, 0.16921619596332313, 0.1554355777055025, 0.1506625969610177] ***
*** finished computation of 7 references, err: [Inf, 0.24222305681556464, 0.16921619596332313, 0.1554355777055025, 0.1506625969610177] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [39, 46, 0]]
** centroid: 1, normalized-entropy: 0.9951022712641691, [(1, 39), (2, 46)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [43, 9, 0]]
** centroid: 2, normalized-entropy: 0.6646953053493416, [(1, 43), (2, 9)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 61, 20]]
** centroid: 3, normalized-entropy: 0.8063495153650776, [(2, 61), (3, 20)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [6, 74, 0]]
** centroid: 4, normalized-entropy: 0.3843115441264972, [(1, 6), (2, 74)]
*** center 5: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20985283758118747] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20985283758118747, 0.1720802500685677] ***
*** starting iteration: 2; err: [Inf, 0.20985283758118747, 0.1720802500685677] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20985283758118747, 0.1720802500685677, 0.1618518021237105] ***
*** starting iteration: 3; err: [Inf, 0.20985283758118747, 0.1720802500685677, 0.1618518021237105] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20985283758118747, 0.1720802500685677, 0.1618518021237105, 0.15697825001273305] ***
*** finished computation of 7 references, err: [Inf, 0.20985283758118747, 0.1720802500685677, 0.1618518021237105, 0.15697825001273305] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [93, 19, 0]]
** centroid: 1, normalized-entropy: 0.6568871346605055, [(1, 93), (2, 19)]
*** center 2: selecting labels [1] (freq >= 2) [from [114, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [66, 4, 0]]
** centroid: 3, normalized-entropy: 0.3159971329784246, [(1, 66), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [5, 42, 0]]
** centroid: 4, normalized-entropy: 0.48890859144051524, [(1, 5), (2, 42)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 36, 11]]
** centroid: 5, normalized-entropy: 0.7849920887641585, [(2, 36), (3, 11)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [10, 49, 0]]
** centroid: 6, normalized-entropy: 0.656540281386946, [(1, 10), (2, 49)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 49, 2]]
** centroid: 7, normalized-entropy: 0.23868451135100152, [(2, 49), (3, 2)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24655467298813163] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24655467298813163, 0.16471948361769317] ***
*** starting iteration: 2; err: [Inf, 0.24655467298813163, 0.16471948361769317] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24655467298813163, 0.16471948361769317, 0.1555638013035059] ***
*** starting iteration: 3; err: [Inf, 0.24655467298813163, 0.16471948361769317, 0.1555638013035059] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24655467298813163, 0.16471948361769317, 0.1555638013035059, 0.15311353410128503] ***
*** finished computation of 7 references, err: [Inf, 0.24655467298813163, 0.16471948361769317, 0.1555638013035059, 0.15311353410128503] ***
*** center 1: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [15, 42, 0]]
** centroid: 2, normalized-entropy: 0.8314743880097292, [(1, 15), (2, 42)]
*** center 3: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [32, 28, 0]]
** centroid: 4, normalized-entropy: 0.9967916319816367, [(1, 32), (2, 28)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [46, 35, 0]]
** centroid: 5, normalized-entropy: 0.9866554896538049, [(1, 46), (2, 35)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 90, 17]]
** centroid: 6, normalized-entropy: 0.6316198184485629, [(2, 90), (3, 17)]
*** center 7: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1876551674734801] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1876551674734801, 0.15657019115239382] ***
*** starting iteration: 2; err: [Inf, 0.1876551674734801, 0.15657019115239382] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1876551674734801, 0.15657019115239382, 0.1527669981108047] ***
*** starting iteration: 3; err: [Inf, 0.1876551674734801, 0.15657019115239382, 0.1527669981108047] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1876551674734801, 0.15657019115239382, 0.1527669981108047, 0.1501563729047775] ***
*** finished computation of 7 references, err: [Inf, 0.1876551674734801, 0.15657019115239382, 0.1527669981108047, 0.1501563729047775] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [62, 22, 0]]
** centroid: 1, normalized-entropy: 0.8296071030882032, [(1, 62), (2, 22)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 32, 17]]
** centroid: 2, normalized-entropy: 0.9313043685793762, [(2, 32), (3, 17)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 74, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [74, 8, 0]]
** centroid: 4, normalized-entropy: 0.4612160405139095, [(1, 74), (2, 8)]
*** center 5: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [7, 57, 0]]
** centroid: 6, normalized-entropy: 0.49802788653447644, [(1, 7), (2, 57)]
*** center 7: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19390582905244083] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19390582905244083, 0.16260856453329325] ***
*** starting iteration: 2; err: [Inf, 0.19390582905244083, 0.16260856453329325] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19390582905244083, 0.16260856453329325, 0.15709060511551798] ***
*** starting iteration: 3; err: [Inf, 0.19390582905244083, 0.16260856453329325, 0.15709060511551798] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19390582905244083, 0.16260856453329325, 0.15709060511551798, 0.15544805960170924] ***
*** finished computation of 7 references, err: [Inf, 0.19390582905244083, 0.16260856453329325, 0.15709060511551798, 0.15544805960170924] ***
*** center 1: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [43, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [69, 29, 0]]
** centroid: 3, normalized-entropy: 0.8762441668050731, [(1, 69), (2, 29)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [49, 18, 0]]
** centroid: 4, normalized-entropy: 0.8395304981054318, [(1, 49), (2, 18)]
*** center 5: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [3, 58, 0]]
** centroid: 6, normalized-entropy: 0.28290479297989196, [(1, 3), (2, 58)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 94, 13]]
** centroid: 7, normalized-entropy: 0.5336439173027161, [(2, 94), (3, 13)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1775209592692554] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1775209592692554, 0.15686959282215684] ***
*** starting iteration: 2; err: [Inf, 0.1775209592692554, 0.15686959282215684] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1775209592692554, 0.15686959282215684, 0.15402090207114816] ***
*** starting iteration: 3; err: [Inf, 0.1775209592692554, 0.15686959282215684, 0.15402090207114816] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1775209592692554, 0.15686959282215684, 0.15402090207114816, 0.15310689026489854] ***
*** finished computation of 7 references, err: [Inf, 0.1775209592692554, 0.15686959282215684, 0.15402090207114816, 0.15310689026489854] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [97, 17, 0]]
** centroid: 1, normalized-entropy: 0.6076407686085387, [(1, 97), (2, 17)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [4, 61, 0]]
** centroid: 2, normalized-entropy: 0.33352200393097675, [(1, 4), (2, 61)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [65, 5, 0]]
** centroid: 3, normalized-entropy: 0.3712323266408756, [(1, 65), (2, 5)]
*** center 4: selecting labels [1] (freq >= 2) [from [46, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 66, 1]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 44, 13]]
** centroid: 7, normalized-entropy: 0.7746319868686841, [(2, 44), (3, 13)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2625757408514619] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2625757408514619, 0.18876709023490548] ***
*** starting iteration: 2; err: [Inf, 0.2625757408514619, 0.18876709023490548] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2625757408514619, 0.18876709023490548, 0.170410080794245] ***
*** starting iteration: 3; err: [Inf, 0.2625757408514619, 0.18876709023490548, 0.170410080794245] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2625757408514619, 0.18876709023490548, 0.170410080794245, 0.16172575828805566] ***
*** finished computation of 7 references, err: [Inf, 0.2625757408514619, 0.18876709023490548, 0.170410080794245, 0.16172575828805566] ***
*** center 1: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [13, 41, 0]]
** centroid: 2, normalized-entropy: 0.7962699368824384, [(1, 13), (2, 41)]
*** center 3: selecting labels [1] (freq >= 2) [from [120, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [5, 54, 0]]
** centroid: 4, normalized-entropy: 0.4186843105268563, [(1, 5), (2, 54)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [50, 31, 0]]
** centroid: 5, normalized-entropy: 0.9599377175669783, [(1, 50), (2, 31)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 43, 1]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 28, 11]]
** centroid: 7, normalized-entropy: 0.8582307926411409, [(2, 28), (3, 11)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21235764627158643] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21235764627158643, 0.1616953214854002] ***
*** starting iteration: 2; err: [Inf, 0.21235764627158643, 0.1616953214854002] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21235764627158643, 0.1616953214854002, 0.15258209399413317] ***
*** starting iteration: 3; err: [Inf, 0.21235764627158643, 0.1616953214854002, 0.15258209399413317] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21235764627158643, 0.1616953214854002, 0.15258209399413317, 0.14999549830891193] ***
*** finished computation of 7 references, err: [Inf, 0.21235764627158643, 0.1616953214854002, 0.15258209399413317, 0.14999549830891193] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 51, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 73, 18]]
** centroid: 2, normalized-entropy: 0.7175106531195438, [(2, 73), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [33, 8, 0]]
** centroid: 3, normalized-entropy: 0.7120640548905481, [(1, 33), (2, 8)]
*** center 4: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [89, 38, 0]]
** centroid: 5, normalized-entropy: 0.8803262547496017, [(1, 89), (2, 38)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [29, 27, 0]]
** centroid: 6, normalized-entropy: 0.9990797181805819, [(1, 29), (2, 27)]
*** center 7: selecting labels [1] (freq >= 2) [from [45, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26313799420371653] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26313799420371653, 0.1723426895365119] ***
*** starting iteration: 2; err: [Inf, 0.26313799420371653, 0.1723426895365119] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26313799420371653, 0.1723426895365119, 0.16107657469063996] ***
*** starting iteration: 3; err: [Inf, 0.26313799420371653, 0.1723426895365119, 0.16107657469063996] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26313799420371653, 0.1723426895365119, 0.16107657469063996, 0.15716031788662077] ***
*** finished computation of 7 references, err: [Inf, 0.26313799420371653, 0.1723426895365119, 0.16107657469063996, 0.15716031788662077] ***
*** center 1: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 79, 9]]
** centroid: 2, normalized-entropy: 0.4761588445580706, [(2, 79), (3, 9)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [13, 34, 0]]
** centroid: 3, normalized-entropy: 0.8507707040532602, [(1, 13), (2, 34)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [97, 25, 0]]
** centroid: 4, normalized-entropy: 0.7316557766078085, [(1, 97), (2, 25)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 51, 10]]
** centroid: 5, normalized-entropy: 0.6436394131461666, [(2, 51), (3, 10)]
*** center 6: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [40, 13, 0]]
** centroid: 7, normalized-entropy: 0.8037159237834126, [(1, 40), (2, 13)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21587953068129717] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21587953068129717, 0.17859357456490396] ***
*** starting iteration: 2; err: [Inf, 0.21587953068129717, 0.17859357456490396] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21587953068129717, 0.17859357456490396, 0.16037884495127946] ***
*** starting iteration: 3; err: [Inf, 0.21587953068129717, 0.17859357456490396, 0.16037884495127946] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21587953068129717, 0.17859357456490396, 0.16037884495127946, 0.1560937482379377] ***
*** finished computation of 7 references, err: [Inf, 0.21587953068129717, 0.17859357456490396, 0.16037884495127946, 0.1560937482379377] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [83, 34, 0]]
** centroid: 1, normalized-entropy: 0.8694928443329235, [(1, 83), (2, 34)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [44, 17, 0]]
** centroid: 2, normalized-entropy: 0.8536576732793314, [(1, 44), (2, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [31, 7, 0]]
** centroid: 3, normalized-entropy: 0.6892019851173655, [(1, 31), (2, 7)]
*** center 4: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [47, 31, 0]]
** centroid: 5, normalized-entropy: 0.9694309156463241, [(1, 47), (2, 31)]
*** center 6: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 103, 19]]
** centroid: 7, normalized-entropy: 0.6240145748145288, [(2, 103), (3, 19)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2794487771876156] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2794487771876156, 0.20125963237322866] ***
*** starting iteration: 2; err: [Inf, 0.2794487771876156, 0.20125963237322866] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2794487771876156, 0.20125963237322866, 0.17903496805019678] ***
*** starting iteration: 3; err: [Inf, 0.2794487771876156, 0.20125963237322866, 0.17903496805019678] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2794487771876156, 0.20125963237322866, 0.17903496805019678, 0.16764841741323472] ***
*** finished computation of 7 references, err: [Inf, 0.2794487771876156, 0.20125963237322866, 0.17903496805019678, 0.16764841741323472] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [4, 81, 8]]
** centroid: 1, normalized-entropy: 0.42478478075930903, [(1, 4), (2, 81), (3, 8)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [16, 28, 0]]
** centroid: 2, normalized-entropy: 0.9456603046006401, [(1, 16), (2, 28)]
*** center 3: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 4: selecting labels [1, 2, 3] (freq >= 2) [from [10, 80, 10]]
** centroid: 4, normalized-entropy: 0.5816718657178868, [(1, 10), (2, 80), (3, 10)]
*** center 5: selecting labels [1] (freq >= 2) [from [37, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [94, 4, 0]]
** centroid: 6, normalized-entropy: 0.2460225782203316, [(1, 94), (2, 4)]
*** center 7: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24299231835408136] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24299231835408136, 0.16861284657754003] ***
*** starting iteration: 2; err: [Inf, 0.24299231835408136, 0.16861284657754003] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24299231835408136, 0.16861284657754003, 0.16014964091219008] ***
*** starting iteration: 3; err: [Inf, 0.24299231835408136, 0.16861284657754003, 0.16014964091219008] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24299231835408136, 0.16861284657754003, 0.16014964091219008, 0.15751238217018546] ***
*** finished computation of 7 references, err: [Inf, 0.24299231835408136, 0.16861284657754003, 0.16014964091219008, 0.15751238217018546] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 85, 4]]
** centroid: 1, normalized-entropy: 0.2645173683629748, [(2, 85), (3, 4)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 53, 14]]
** centroid: 2, normalized-entropy: 0.7394809367166378, [(2, 53), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [88, 21, 0]]
** centroid: 3, normalized-entropy: 0.70700406497476, [(1, 88), (2, 21)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [11, 38, 0]]
** centroid: 4, normalized-entropy: 0.7682814090975241, [(1, 11), (2, 38)]
*** center 5: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [55, 2, 0]]
** centroid: 6, normalized-entropy: 0.2192973081321754, [(1, 55), (2, 2)]
*** center 7: selecting labels [1] (freq >= 2) [from [39, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18048721431940795] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18048721431940795, 0.1544382591433823] ***
*** starting iteration: 2; err: [Inf, 0.18048721431940795, 0.1544382591433823] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18048721431940795, 0.1544382591433823, 0.15185139570944012] ***
*** starting iteration: 3; err: [Inf, 0.18048721431940795, 0.1544382591433823, 0.15185139570944012] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18048721431940795, 0.1544382591433823, 0.15185139570944012, 0.1500842245062813] ***
*** finished computation of 7 references, err: [Inf, 0.18048721431940795, 0.1544382591433823, 0.15185139570944012, 0.1500842245062813] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [6, 63, 0]]
** centroid: 1, normalized-entropy: 0.42622865699814483, [(1, 6), (2, 63)]
*** center 2: selecting labels [1] (freq >= 2) [from [64, 1, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 97, 18]]
** centroid: 3, normalized-entropy: 0.6259231316564361, [(2, 97), (3, 18)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [63, 21, 0]]
** centroid: 4, normalized-entropy: 0.8112781244591328, [(1, 63), (2, 21)]
*** center 5: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [57, 14, 0]]
** centroid: 6, normalized-entropy: 0.7162583911075451, [(1, 57), (2, 14)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [43, 4, 0]]
** centroid: 7, normalized-entropy: 0.4199210973757179, [(1, 43), (2, 4)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25966969854198396] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25966969854198396, 0.20481369840819388] ***
*** starting iteration: 2; err: [Inf, 0.25966969854198396, 0.20481369840819388] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25966969854198396, 0.20481369840819388, 0.1788446772173047] ***
*** starting iteration: 3; err: [Inf, 0.25966969854198396, 0.20481369840819388, 0.1788446772173047] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25966969854198396, 0.20481369840819388, 0.1788446772173047, 0.1577483371803537] ***
*** finished computation of 7 references, err: [Inf, 0.25966969854198396, 0.20481369840819388, 0.1788446772173047, 0.1577483371803537] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [55, 9, 0]]
** centroid: 1, normalized-entropy: 0.5858732928619204, [(1, 55), (2, 9)]
*** center 2: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [95, 19, 0]]
** centroid: 3, normalized-entropy: 0.6500224216483541, [(1, 95), (2, 19)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [5, 50, 0]]
** centroid: 4, normalized-entropy: 0.43949698692151346, [(1, 5), (2, 50)]
*** center 5: selecting labels [1] (freq >= 2) [from [47, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [39, 12, 0]]
** centroid: 6, normalized-entropy: 0.787126586201269, [(1, 39), (2, 12)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 94, 18]]
** centroid: 7, normalized-entropy: 0.6360156177392153, [(2, 94), (3, 18)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21227605404704808] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21227605404704808, 0.18269631716236473] ***
*** starting iteration: 2; err: [Inf, 0.21227605404704808, 0.18269631716236473] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21227605404704808, 0.18269631716236473, 0.17375488586351276] ***
*** starting iteration: 3; err: [Inf, 0.21227605404704808, 0.18269631716236473, 0.17375488586351276] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21227605404704808, 0.18269631716236473, 0.17375488586351276, 0.16428257070854307] ***
*** finished computation of 7 references, err: [Inf, 0.21227605404704808, 0.18269631716236473, 0.17375488586351276, 0.16428257070854307] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 89, 13]]
** centroid: 1, normalized-entropy: 0.550405815580872, [(2, 89), (3, 13)]
*** center 2: selecting labels [1] (freq >= 2) [from [100, 1, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [48, 12, 0]]
** centroid: 3, normalized-entropy: 0.7219280948873623, [(1, 48), (2, 12)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [28, 11, 0]]
** centroid: 4, normalized-entropy: 0.8582307926411409, [(1, 28), (2, 11)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 60, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [77, 32, 0]]
** centroid: 6, normalized-entropy: 0.8732984198823629, [(1, 77), (2, 32)]
*** center 7: selecting labels [1] (freq >= 2) [from [29, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23327706029266118] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23327706029266118, 0.17188711474556476] ***
*** starting iteration: 2; err: [Inf, 0.23327706029266118, 0.17188711474556476] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23327706029266118, 0.17188711474556476, 0.15704511368088425] ***
*** starting iteration: 3; err: [Inf, 0.23327706029266118, 0.17188711474556476, 0.15704511368088425] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23327706029266118, 0.17188711474556476, 0.15704511368088425, 0.15280675714090466] ***
*** finished computation of 7 references, err: [Inf, 0.23327706029266118, 0.17188711474556476, 0.15704511368088425, 0.15280675714090466] ***
*** center 1: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [36, 24, 0]]
** centroid: 2, normalized-entropy: 0.9709505944546688, [(1, 36), (2, 24)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [28, 52, 0]]
** centroid: 3, normalized-entropy: 0.9340680553754911, [(1, 28), (2, 52)]
*** center 4: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [2, 64, 0]]
** centroid: 5, normalized-entropy: 0.19590927087360496, [(1, 2), (2, 64)]
*** center 6: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 47, 17]]
** centroid: 7, normalized-entropy: 0.8351164948421137, [(2, 47), (3, 17)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2441612377539277] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2441612377539277, 0.17776800081320107] ***
*** starting iteration: 2; err: [Inf, 0.2441612377539277, 0.17776800081320107] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2441612377539277, 0.17776800081320107, 0.15884477530419827] ***
*** starting iteration: 3; err: [Inf, 0.2441612377539277, 0.17776800081320107, 0.15884477530419827] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2441612377539277, 0.17776800081320107, 0.15884477530419827, 0.15171042985888197] ***
*** finished computation of 7 references, err: [Inf, 0.2441612377539277, 0.17776800081320107, 0.15884477530419827, 0.15171042985888197] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [9, 48, 0]]
** centroid: 1, normalized-entropy: 0.6292492238560344, [(1, 9), (2, 48)]
*** center 2: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [72, 5, 0]]
** centroid: 3, normalized-entropy: 0.34673146824966367, [(1, 72), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [50, 32, 0]]
** centroid: 4, normalized-entropy: 0.9649567669505686, [(1, 50), (2, 32)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 69, 13]]
** centroid: 5, normalized-entropy: 0.6307970795750609, [(2, 69), (3, 13)]
*** center 6: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 37, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19803843498020432] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19803843498020432, 0.16529298944212495] ***
*** starting iteration: 2; err: [Inf, 0.19803843498020432, 0.16529298944212495] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19803843498020432, 0.16529298944212495, 0.15769777033943683] ***
*** starting iteration: 3; err: [Inf, 0.19803843498020432, 0.16529298944212495, 0.15769777033943683] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19803843498020432, 0.16529298944212495, 0.15769777033943683, 0.15361915648635477] ***
*** finished computation of 7 references, err: [Inf, 0.19803843498020432, 0.16529298944212495, 0.15769777033943683, 0.15361915648635477] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [44, 6, 0]]
** centroid: 1, normalized-entropy: 0.5293608652873645, [(1, 44), (2, 6)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 97, 15]]
** centroid: 2, normalized-entropy: 0.5681147021801115, [(2, 97), (3, 15)]
*** center 3: selecting labels [1] (freq >= 2) [from [47, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [75, 38, 0]]
** centroid: 4, normalized-entropy: 0.9212174819014947, [(1, 75), (2, 38)]
*** center 5: selecting labels [1] (freq >= 2) [from [51, 1, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [14, 55, 0]]
** centroid: 7, normalized-entropy: 0.7276874545656657, [(1, 14), (2, 55)]
finished with 11 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 395,3 => 30,1 => 575), Dict(2 => 368,3 => 34,1 => 598))
[ Info: ===== scores for single classifier: {"micro_f1":0.94,"precision":0.94,"recall":0.94,"macro_recall":0.9468571709620303,"macro_f1":0.8787217785664989,"accuracy":0.94,"class_f1":{"2":0.9184782608695652,"3":0.7499999999999999,"1":0.967687074829932},"class_precision":{"2":0.9184782608695652,"3":0.6111111111111112,"1":0.9844290657439446},"class_recall":{"2":0.9184782608695652,"3":0.9705882352941176,"1":0.9515050167224081}}
[ Info: ===== scores for 1: {"micro_f1":0.978,"precision":0.978,"recall":0.978,"macro_recall":0.9839046822742475,"macro_f1":0.9664841563185597,"accuracy":0.978,"class_f1":{"2":0.970108695652174,"3":0.9444444444444444,"1":0.9848993288590604},"class_precision":{"2":0.970108695652174,"3":0.8947368421052632,"1":0.9882154882154882},"class_recall":{"2":0.970108695652174,"3":1.0,"1":0.9816053511705686}}
[ Info: ===== scores for 5: {"micro_f1":0.956,"precision":0.956,"recall":0.956,"macro_recall":0.9705964325529542,"macro_f1":0.9426801026260957,"accuracy":0.956,"class_f1":{"2":0.9414893617021277,"3":0.9189189189189189,"1":0.9676320272572403},"class_precision":{"2":0.921875,"3":0.85,"1":0.9861111111111112},"class_recall":{"2":0.9619565217391305,"3":1.0,"1":0.9498327759197325}}
[ Info: ===== scores for 7: {"micro_f1":0.952,"precision":0.952,"recall":0.952,"macro_recall":0.9680183946488294,"macro_f1":0.9322961101545494,"accuracy":0.952,"class_f1":{"2":0.9363395225464192,"3":0.8947368421052632,"1":0.9658119658119658},"class_precision":{"2":0.9145077720207254,"3":0.8095238095238095,"1":0.9877622377622378},"class_recall":{"2":0.9592391304347826,"3":1.0,"1":0.9448160535117057}}
[ Info: ===== scores for 9: {"micro_f1":0.948,"precision":0.948,"recall":0.948,"macro_recall":0.9654403567447046,"macro_f1":0.9258290663603431,"accuracy":0.948,"class_f1":{"2":0.9312169312169312,"3":0.8831168831168831,"1":0.963153384747215},"class_precision":{"2":0.9072164948453608,"3":0.7906976744186046,"1":0.9876977152899824},"class_recall":{"2":0.9565217391304348,"3":1.0,"1":0.939799331103679}}
[ Info: ===== scores for 11: {"micro_f1":0.9469999999999998,"precision":0.947,"recall":0.947,"macro_recall":0.9652313266443701,"macro_f1":0.9216642683314333,"accuracy":0.947,"class_f1":{"2":0.9301712779973649,"3":0.8717948717948718,"1":0.9630266552020637},"class_precision":{"2":0.9028132992327366,"3":0.7727272727272727,"1":0.9911504424778761},"class_recall":{"2":0.9592391304347826,"3":1.0,"1":0.9364548494983278}}
(score = 0.981, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.981, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.978, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.978, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.966, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.966, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.966, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.966, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.955, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.955, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.956, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.956, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.95, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.95, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.952, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.952, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.981,"k":1,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.9810000000000001,"precision":0.981,"recall":0.981,"macro_recall":0.986273690078038,"macro_f1":0.9728478233739996,"accuracy":0.981,"class_f1":{"2":0.9742198100407055,"3":0.9577464788732395,"1":0.9865771812080537},"class_precision":{"2":0.9728997289972899,"3":0.918918918918919,"1":0.98989898989899},"class_recall":{"2":0.9755434782608695,"3":1.0,"1":0.9832775919732442}}
Test Summary: | Pass  Total
AKNC          |    8      8
[266, 1, 2, 1, 1, 1, 5, 11, 3, 1, 10, 12, 13, 3, 10, 3, 15, 2, 1, 5, 9, 16, 4, 20, 10, 2, 5, 16, 1, 6, 7, 15, 1, 21, 2, 1, 10, 6, 11, 8, 38, 6, 4, 8, 7, 7, 13, 1, 39, 2, 17, 4, 13, 9, 7, 2, 4, 40, 7, 2, 25, 42, 14, 41, 16, 10, 5, 8, 9, 6, 117, 28, 47, 11, 13, 14, 31, 9, 5, 20, 11, 19, 27, 18, 11, 6, 7, 2, 8, 85, 52, 3, 4, 94, 26, 5, 52, 10, 92, 14, 58, 5, 137, 2, 10, 4, 18, 100, 8, 5, 29, 7, 7, 5, 6, 46, 14, 24, 16, 34, 6, 40, 23, 32, 93, 19, 75, 29, 14, 4, 31, 27, 11, 17, 16, 17, 170, 52, 19, 18, 31, 45, 14, 34, 3, 73, 49, 7, 35, 5, 157, 10, 129, 50, 10, 11, 3, 142, 169, 8, 18, 30, 35, 89, 20, 19, 27, 14, 833, 27, 38, 17, 17, 64, 29, 9, 181, 22, 3, 371, 3, 30, 83, 51, 22, 13, 11, 4, 12, 20, 18, 12, 36, 49, 52, 30, 50, 37, 24, 4, 1, 18, 68, 14, 17, 41, 18, 8, 15, 79, 15, 4, 24, 117, 12, 13, 2, 9, 40, 12, 25, 3, 67, 1, 51, 39, 64, 5, 17, 60, 11, 310, 13, 3, 204, 6, 2, 56, 35, 37, 20, 36, 35, 11, 2, 13, 22, 16, 10, 38, 94, 107, 18, 4, 44, 1, 66, 94, 9, 66, 48, 44, 28, 32, 42, 30, 24, 6, 50, 63, 51, 19, 27, 15, 5, 16, 19, 27, 6, 12, 12, 128, 45, 5, 63, 33, 231, 10, 6, 20, 23, 6, 26, 9, 13, 11, 34, 54, 8, 16]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6459999999999999, speedup = 0.3571361206493735, eval_ratio = 0.06526)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.3656994047619047,"recall":0.3619791666666666,"f1":null,"seconds":0.00030985288321971893,"exhaustive_search_seconds":0.0003783516585826874,"evaluations":437.9296875,"distances_sum":1817.8159774085168}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5295138888888888,"recall":0.5295138888888888,"f1":null,"seconds":0.00021474063396453857,"exhaustive_search_seconds":0.0003783516585826874,"evaluations":541.4453125,"distances_sum":1693.8908809929474}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6354166666666667,"recall":0.6354166666666667,"f1":0.6354166666666667,"seconds":0.0002942793071269989,"exhaustive_search_seconds":0.0003783516585826874,"evaluations":651.7578125,"distances_sum":1642.0914787945994}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7109374999999992,"recall":0.7109374999999992,"f1":0.7109374999999992,"seconds":0.0003791041672229767,"exhaustive_search_seconds":0.0003783516585826874,"evaluations":761.9140625,"distances_sum":1614.1607534827103}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.764756944444444,"recall":0.764756944444444,"f1":0.764756944444444,"seconds":0.0004756823182106018,"exhaustive_search_seconds":0.0003783516585826874,"evaluations":887.234375,"distances_sum":1598.120263828223}
KCenters.DeloneInvIndex> reached performance {"precision":0.8081597222222213,"recall":0.8081597222222213,"f1":0.8081597222222213,"seconds":0.0005487482994794846,"exhaustive_search_seconds":0.0003783516585826874,"evaluations":972.3125,"distances_sum":1585.9600274180102}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8200000000000003, speedup = 0.7519993861929521, eval_ratio = 0.09603300000000001)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
