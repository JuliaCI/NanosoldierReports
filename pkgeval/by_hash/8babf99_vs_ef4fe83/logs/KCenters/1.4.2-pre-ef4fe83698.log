Julia Version 1.4.2-pre.0
Commit ef4fe83698 (2020-04-15 16:24 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-8.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed Reexport ──────────────────── v0.2.0
  Installed Missings ──────────────────── v0.4.3
  Installed LearnBase ─────────────────── v0.2.2
  Installed DataAPI ───────────────────── v1.3.0
  Installed KCenters ──────────────────── v0.2.2
  Installed CategoricalArrays ─────────── v0.7.7
  Installed SimilaritySearch ──────────── v0.3.19
  Installed DataValueInterfaces ───────── v1.0.0
  Installed PooledArrays ──────────────── v0.5.3
  Installed MappedArrays ──────────────── v0.2.2
  Installed InvertedIndices ───────────── v1.0.0
  Installed Parsers ───────────────────── v1.0.3
  Installed Tables ────────────────────── v1.0.4
  Installed OrderedCollections ────────── v1.2.0
  Installed DataStructures ────────────── v0.17.15
  Installed StatsBase ─────────────────── v0.32.2
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed Compat ────────────────────── v3.9.1
  Installed JSON ──────────────────────── v0.21.0
  Installed MLDataUtils ───────────────── v0.5.1
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed TableTraits ───────────────── v1.0.0
  Installed MLDataPattern ─────────────── v0.5.3
  Installed DataFrames ────────────────── v0.20.2
   Updating `~/.julia/environments/v1.4/Project.toml`
  [5d8de97f] + KCenters v0.2.2
   Updating `~/.julia/environments/v1.4/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.9.1
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.15
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.2.0
  [69de0a69] + Parsers v1.0.3
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
    Testing KCenters
Status `/tmp/jl_AXpqyK/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.9.1
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.15
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.2.0
  [69de0a69] Parsers v1.0.3
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0723782532413801
[ Info: 0.9370718047022819
[ Info: 0.8302954188982645
[ Info: 0.555438105414311
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.33956977538764477
mean(cdnet.distances) = 0.3955245827386777
mean(crand.distances) = 0.34675356683631736
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6484375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6484375,"f1":0.7762574231324239,"seconds":5.010515451431274e-6,"exhaustive_search_seconds":1.780688762664795e-6,"evaluations":7.5234375,"distances_sum":1871.4835701859067}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6484375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6484375,"f1":0.7762574231324239,"seconds":5.010515451431274e-6,"exhaustive_search_seconds":1.780688762664795e-6,"evaluations":7.5234375,"distances_sum":1871.4835701859067}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.9351362179487185,"seconds":5.465000867843628e-6,"exhaustive_search_seconds":1.780688762664795e-6,"evaluations":8.609375,"distances_sum":2715.0666777630904}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8876953125,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.8876953125,"f1":0.9351362179487185,"seconds":5.465000867843628e-6,"exhaustive_search_seconds":1.780688762664795e-6,"evaluations":8.609375,"distances_sum":2715.0666777630904}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9374713827838833,"seconds":5.690380930900574e-6,"exhaustive_search_seconds":1.780688762664795e-6,"evaluations":8.6015625,"distances_sum":2712.761576534458}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9432380119880126,"seconds":5.8729201555252075e-6,"exhaustive_search_seconds":1.780688762664795e-6,"evaluations":8.6953125,"distances_sum":2726.4252789466886}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9402300824175829,"seconds":5.738809704780579e-6,"exhaustive_search_seconds":1.780688762664795e-6,"evaluations":8.703125,"distances_sum":2703.563816900092}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9033203125,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.9033203125,"f1":0.9432380119880126,"seconds":5.8729201555252075e-6,"exhaustive_search_seconds":1.780688762664795e-6,"evaluations":8.6953125,"distances_sum":2726.4252789466886}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9033203125,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.9033203125,"f1":0.9432380119880126,"seconds":5.8729201555252075e-6,"exhaustive_search_seconds":1.780688762664795e-6,"evaluations":8.6953125,"distances_sum":2726.4252789466886}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2041015625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2041015625,"f1":null,"seconds":3.2279640436172485e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":6.109375,"distances_sum":460.70678538015113}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4140625, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.4140625,"f1":null,"seconds":4.077330231666565e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":6.75,"distances_sum":889.2340270126193}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78515625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.78515625,"f1":0.8716471028971038,"seconds":5.541369318962097e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.4609375,"distances_sum":1838.4969043318165}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.78515625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.78515625,"f1":0.8716471028971038,"seconds":5.541369318962097e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.4609375,"distances_sum":1838.4969043318165}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7861328125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7861328125,"f1":0.8739619755244765,"seconds":5.241483449935913e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.390625,"distances_sum":1849.6923703989207}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8564453125, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8564453125,"f1":0.916529824342325,"seconds":5.58607280254364e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.640625,"distances_sum":2102.74277372971}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9597126831501835,"seconds":6.074085831642151e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.8671875,"distances_sum":2386.179293588804}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.927734375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.9597126831501835,"seconds":6.074085831642151e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.8671875,"distances_sum":2386.179293588804}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.968011675824176,"seconds":6.064772605895996e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.90625,"distances_sum":2433.813384991312}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9609375, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.9609375,"f1":0.9781822344322346,"seconds":6.621703505516052e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.96875,"distances_sum":2505.026381938717}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9652415293040297,"seconds":6.163492798805237e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.8984375,"distances_sum":2433.684636149409}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9609375,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9781822344322346,"seconds":6.621703505516052e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.96875,"distances_sum":2505.026381938717}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9609375,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9781822344322346,"seconds":6.621703505516052e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.96875,"distances_sum":2505.026381938717}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.439453125, conf: {"ssize":3,"bsize":2}, perf: {"precision":1.0,"recall":0.439453125,"f1":0.5897893772893775,"seconds":4.066154360771179e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":6.6953125,"distances_sum":994.2517145320836}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7802734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7802734375,"f1":0.8683649683649693,"seconds":5.498528480529785e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.375,"distances_sum":1916.1154340997205}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7802734375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7802734375,"f1":0.8683649683649693,"seconds":5.498528480529785e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.375,"distances_sum":1916.1154340997205}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8251953125, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8251953125,"f1":0.8970586704961712,"seconds":5.539506673812866e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.4921875,"distances_sum":2047.04256449787}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8251953125,"state":{"ssize":2,"bsize":6},"perf":{"precision":1.0,"recall":0.8251953125,"f1":0.8970586704961712,"seconds":5.539506673812866e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.4921875,"distances_sum":2047.04256449787}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9342204670329673,"seconds":5.6140124797821045e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.7578125,"distances_sum":2272.9389205239186}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.961051968864469,"seconds":6.292015314102173e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.84375,"distances_sum":2507.7036571255494}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9596211080586085,"seconds":5.885958671569824e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.875,"distances_sum":2510.413466211349}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9478708791208794,"seconds":5.731359124183655e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.78125,"distances_sum":2403.994007915045}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9518486721611727,"seconds":6.01448118686676e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.84375,"distances_sum":2433.308921635201}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9296875,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.9296875,"f1":0.961051968864469,"seconds":6.292015314102173e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.84375,"distances_sum":2507.7036571255494}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9296875,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.9296875,"f1":0.961051968864469,"seconds":6.292015314102173e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.84375,"distances_sum":2507.7036571255494}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78515625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.78515625,"f1":0.8727741008991019,"seconds":5.580484867095947e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.3515625,"distances_sum":1971.658906773425}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.78515625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.78515625,"f1":0.8727741008991019,"seconds":5.580484867095947e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.3515625,"distances_sum":1971.658906773425}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9444513819513827,"seconds":6.288290023803711e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.8046875,"distances_sum":2423.9542279447996}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.904296875,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.904296875,"f1":0.9444513819513827,"seconds":6.288290023803711e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.8046875,"distances_sum":2423.9542279447996}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9744448260073264,"seconds":6.441026926040649e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.9453125,"distances_sum":2627.1889472372995}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9511790293040299,"seconds":6.0014426708221436e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.8515625,"distances_sum":2446.7616033069926}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9541015625,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9744448260073264,"seconds":6.441026926040649e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.9453125,"distances_sum":2627.1889472372995}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9541015625,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9744448260073264,"seconds":6.441026926040649e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.9453125,"distances_sum":2627.1889472372995}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6826171875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6826171875,"f1":0.8060299075924086,"seconds":4.976987838745117e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":7.7265625,"distances_sum":1666.998696665689}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6826171875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6826171875,"f1":0.8060299075924086,"seconds":4.976987838745117e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":7.7265625,"distances_sum":1666.998696665689}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6826171875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6826171875,"f1":0.8060299075924086,"seconds":4.976987838745117e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":7.7265625,"distances_sum":1666.998696665689}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.6826171875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6826171875,"f1":0.8060299075924086,"seconds":4.976987838745117e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":7.7265625,"distances_sum":1666.998696665689}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4873046875, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.4873046875,"f1":null,"seconds":3.7606805562973022e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":6.5390625,"distances_sum":914.6180061240339}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4873046875,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.4873046875,"f1":null,"seconds":3.7606805562973022e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":6.5390625,"distances_sum":914.6180061240339}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7421875, conf: {"ssize":1,"bsize":5}, perf: {"precision":0.977734375,"recall":0.7421875,"f1":0.8378608370795877,"seconds":5.031004548072815e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":7.8359375,"distances_sum":1474.386365210391}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8193359375, conf: {"ssize":3,"bsize":6}, perf: {"precision":0.981631324404762,"recall":0.8193359375,"f1":0.8859542150557779,"seconds":5.2228569984436035e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.296875,"distances_sum":1756.868393584708}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8779296875, conf: {"ssize":1,"bsize":7}, perf: {"precision":0.9811197916666667,"recall":0.8779296875,"f1":0.9215273008241759,"seconds":5.461275577545166e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.546875,"distances_sum":1933.7266290305788}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8779296875,"state":{"ssize":1,"bsize":7},"perf":{"precision":0.9811197916666667,"recall":0.8779296875,"f1":0.9215273008241759,"seconds":5.461275577545166e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.546875,"distances_sum":1933.7266290305788}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":1,"bsize":9}, perf: {"precision":0.9841424851190477,"recall":0.896484375,"f1":0.9344286572802198,"seconds":5.941838026046753e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.7265625,"distances_sum":2012.8278596960918}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":2,"bsize":8}, perf: {"precision":0.9821428571428573,"recall":0.8955078125,"f1":0.9327667124542129,"seconds":5.645677447319031e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.703125,"distances_sum":2035.0892060027338}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.896484375,"state":{"ssize":1,"bsize":9},"perf":{"precision":0.9841424851190477,"recall":0.896484375,"f1":0.9344286572802198,"seconds":5.941838026046753e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.7265625,"distances_sum":2012.8278596960918}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.896484375,"state":{"ssize":1,"bsize":9},"perf":{"precision":0.9841424851190477,"recall":0.896484375,"f1":0.9344286572802198,"seconds":5.941838026046753e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.7265625,"distances_sum":2012.8278596960918}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3984375, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.3984375,"f1":null,"seconds":3.7066638469696045e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":6.0625,"distances_sum":722.8440713104977}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3984375,"state":{"ssize":4,"bsize":2},"perf":{"precision":null,"recall":0.3984375,"f1":null,"seconds":3.7066638469696045e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":6.0625,"distances_sum":722.8440713104977}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7763671875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7763671875,"f1":0.8669991466866476,"seconds":7.126294076442719e-5,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.078125,"distances_sum":1604.6460609777084}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.73828125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.73828125,"f1":0.8421765734265743,"seconds":5.042180418968201e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":7.84375,"distances_sum":1467.8444980370073}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.69140625, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.69140625,"f1":0.806255550005551,"seconds":4.667788743972778e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":7.6875,"distances_sum":1317.448458649459}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5751953125, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5751953125,"f1":null,"seconds":3.978610038757324e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":6.484375,"distances_sum":1003.5731154172918}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7763671875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7763671875,"f1":0.8669991466866476,"seconds":7.126294076442719e-5,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.078125,"distances_sum":1604.6460609777084}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9511790293040298,"seconds":5.5246055126190186e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.7734375,"distances_sum":2072.093049057735}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9526842948717951,"seconds":5.882233381271362e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.7578125,"distances_sum":2094.9736764235067}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9447318306693313,"seconds":5.582347512245178e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.7421875,"distances_sum":2032.8446201515453}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8720703125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8720703125,"f1":0.9261847527472536,"seconds":5.783513188362122e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.640625,"distances_sum":1909.6419275480746}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8271484375, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.8271484375,"f1":0.899925595238096,"seconds":5.11854887008667e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.1875,"distances_sum":1758.9850716378162}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8740234375,"f1":0.927155136530137,"seconds":5.301088094711304e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.5859375,"distances_sum":1921.3754610730539}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91796875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9526842948717951,"seconds":5.882233381271362e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.7578125,"distances_sum":2094.9736764235067}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.91796875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9526842948717951,"seconds":5.882233381271362e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.7578125,"distances_sum":2094.9736764235067}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.568359375, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.568359375,"f1":0.7103469447219454,"seconds":3.855675458908081e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":6.3515625,"distances_sum":1123.2194837430472}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.666015625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.666015625,"f1":0.7904007450882459,"seconds":4.284083843231201e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":7.171875,"distances_sum":1311.9943758480467}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3740234375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3740234375,"f1":null,"seconds":3.512948751449585e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":5.5234375,"distances_sum":698.2043402693222}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.666015625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.666015625,"f1":0.7904007450882459,"seconds":4.284083843231201e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":7.171875,"distances_sum":1311.9943758480467}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.73046875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.73046875,"f1":0.8336574883449892,"seconds":4.887580871582031e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":7.6484375,"distances_sum":1549.4886475422081}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7333984375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7333984375,"f1":0.838464660339661,"seconds":4.913657903671265e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":7.546875,"distances_sum":1591.122846338466}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8017578125, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8017578125,"f1":0.8787608225108233,"seconds":5.388632416725159e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.09375,"distances_sum":1765.610081791554}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8017578125,"state":{"ssize":6,"bsize":6},"perf":{"precision":1.0,"recall":0.8017578125,"f1":0.8787608225108233,"seconds":5.388632416725159e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.09375,"distances_sum":1765.610081791554}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.944350961538462,"seconds":5.3551048040390015e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.53125,"distances_sum":2177.666558599752}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9442994505494513,"seconds":5.669891834259033e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.6796875,"distances_sum":2138.8011463496805}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8505859375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8505859375,"f1":0.9119047619047624,"seconds":5.27501106262207e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.3984375,"distances_sum":1974.5751833586214}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.90234375,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.90234375,"f1":0.9442994505494513,"seconds":5.669891834259033e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.6796875,"distances_sum":2138.8011463496805}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.90234375,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.90234375,"f1":0.9442994505494513,"seconds":5.669891834259033e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.6796875,"distances_sum":2138.8011463496805}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.412109375, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.412109375,"f1":null,"seconds":3.874301910400391e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":6.03125,"distances_sum":747.7463377399365}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.212890625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.212890625,"f1":null,"seconds":3.3471733331680298e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":5.703125,"distances_sum":426.2058876806453}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.412109375,"state":{"ssize":5,"bsize":2},"perf":{"precision":null,"recall":0.412109375,"f1":null,"seconds":3.874301910400391e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":6.03125,"distances_sum":747.7463377399365}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.708984375, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.708984375,"f1":0.8224796037296045,"seconds":4.673376679420471e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.40625,"distances_sum":1378.847392369744}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5888671875, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5888671875,"f1":0.72659475940726,"seconds":4.278495907783508e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":6.7578125,"distances_sum":1083.957181207492}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.708984375,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.708984375,"f1":0.8224796037296045,"seconds":4.673376679420471e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.40625,"distances_sum":1378.847392369744}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9370821886446895,"seconds":5.608424544334412e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.671875,"distances_sum":2035.1122410052785}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9395177738927746,"seconds":5.451962351799011e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.7109375,"distances_sum":2044.0763059267094}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8232421875, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8232421875,"f1":0.8977907509157518,"seconds":5.364418029785156e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.2578125,"distances_sum":1763.3255228611117}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8935546875,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.8935546875,"f1":0.9395177738927746,"seconds":5.451962351799011e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.7109375,"distances_sum":2044.0763059267094}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8935546875,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.8935546875,"f1":0.9395177738927746,"seconds":5.451962351799011e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.7109375,"distances_sum":2044.0763059267094}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6767578125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6767578125,"f1":0.7924858127983134,"seconds":4.477798938751221e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":7.2265625,"distances_sum":1444.9339915450876}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.20703125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.20703125,"f1":null,"seconds":3.335997462272644e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":4.828125,"distances_sum":462.3839619687812}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7607421875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7607421875,"f1":0.8537176365301373,"seconds":5.17629086971283e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":7.9453125,"distances_sum":1726.8552334133788}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7607421875,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7607421875,"f1":0.8537176365301373,"seconds":5.17629086971283e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":7.9453125,"distances_sum":1726.8552334133788}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8720703125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8720703125,"f1":0.9253865925740931,"seconds":5.496665835380554e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.453125,"distances_sum":2153.3999303055066}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9455242673992675,"seconds":5.731359124183655e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.65625,"distances_sum":2248.977911804323}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.876953125, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.876953125,"f1":0.9286572802197808,"seconds":5.621463060379028e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.578125,"distances_sum":2144.1730938603837}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9519230769230776,"seconds":5.805864930152893e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.703125,"distances_sum":2271.2296490048284}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8525390625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8525390625,"f1":0.9124916749916757,"seconds":5.466863512992859e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.4453125,"distances_sum":2055.94060787207}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7685546875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7685546875,"f1":0.8612731018981027,"seconds":5.098059773445129e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":7.9453125,"distances_sum":1740.61605371831}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9150390625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9150390625,"f1":0.9519230769230776,"seconds":5.805864930152893e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.703125,"distances_sum":2271.2296490048284}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9638221153846158,"seconds":5.979090929031372e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.828125,"distances_sum":2333.1646188250256}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.970703125, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.970703125,"f1":0.9840029761904765,"seconds":6.2230974435806274e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.953125,"distances_sum":2457.1333596439767}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9688644688644692,"seconds":5.934387445449829e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.8515625,"distances_sum":2368.6142753464733}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":11,"bsize":11}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9602163461538468,"seconds":5.97536563873291e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.8046875,"distances_sum":2308.925499630173}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.970703125,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.970703125,"f1":0.9840029761904765,"seconds":6.2230974435806274e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.953125,"distances_sum":2457.1333596439767}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.970703125,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.970703125,"f1":0.9840029761904765,"seconds":6.2230974435806274e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.953125,"distances_sum":2457.1333596439767}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6650390625, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6650390625,"f1":0.7893184940059946,"seconds":4.278495907783508e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.2421875,"distances_sum":1334.8619913046011}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4033203125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4033203125,"f1":null,"seconds":3.3136457204818726e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":5.9609375,"distances_sum":771.9761405739856}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6650390625,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.6650390625,"f1":0.7893184940059946,"seconds":4.278495907783508e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.2421875,"distances_sum":1334.8619913046011}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6650390625,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.6650390625,"f1":0.7893184940059946,"seconds":4.278495907783508e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.2421875,"distances_sum":1334.8619913046011}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.6650390625,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.6650390625,"f1":0.7893184940059946,"seconds":4.278495907783508e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.2421875,"distances_sum":1334.8619913046011}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4169921875, conf: {"ssize":3,"bsize":2}, perf: {"precision":0.97265625,"recall":0.4169921875,"f1":0.5644052128427129,"seconds":3.5781413316726685e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":6.1640625,"distances_sum":894.728399244546}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.25, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.25,"f1":null,"seconds":3.5818666219711304e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":6.4296875,"distances_sum":622.453627379235}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.384765625, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.384765625,"f1":null,"seconds":3.6209821701049805e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":5.921875,"distances_sum":797.1532238171989}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4169921875,"state":{"ssize":3,"bsize":2},"perf":{"precision":0.97265625,"recall":0.4169921875,"f1":0.5644052128427129,"seconds":3.5781413316726685e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":6.1640625,"distances_sum":894.728399244546}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6640625, conf: {"ssize":3,"bsize":4}, perf: {"precision":0.9866443452380952,"recall":0.6640625,"f1":0.7824527902652912,"seconds":4.7013163566589355e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":7.4140625,"distances_sum":1504.7264287050903}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.814453125, conf: {"ssize":7,"bsize":6}, perf: {"precision":0.9906994047619047,"recall":0.814453125,"f1":0.887835081585082,"seconds":5.37186861038208e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.3203125,"distances_sum":2019.14980255028}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5107421875, conf: {"ssize":8,"bsize":3}, perf: {"precision":0.9778645833333334,"recall":0.5107421875,"f1":0.6555010961260965,"seconds":4.4014304876327515e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":6.96875,"distances_sum":1114.113661955573}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7451171875, conf: {"ssize":4,"bsize":5}, perf: {"precision":0.9893043154761904,"recall":0.7451171875,"f1":0.8414562000499506,"seconds":4.950910806655884e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":7.515625,"distances_sum":1744.600039342147}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.814453125,"state":{"ssize":7,"bsize":6},"perf":{"precision":0.9906994047619047,"recall":0.814453125,"f1":0.887835081585082,"seconds":5.37186861038208e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.3203125,"distances_sum":2019.14980255028}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":9,"bsize":8}, perf: {"precision":0.9892950148809523,"recall":0.8876953125,"f1":0.9306700460997339,"seconds":6.194226443767548e-5,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.7109375,"distances_sum":2328.2001117466084}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":2,"bsize":9}, perf: {"precision":0.9847935267857144,"recall":0.91796875,"f1":0.9477971897893777,"seconds":5.77978789806366e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.8671875,"distances_sum":2433.347074728978}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8701171875, conf: {"ssize":4,"bsize":7}, perf: {"precision":0.9860026041666666,"recall":0.8701171875,"f1":0.9203878803488185,"seconds":5.4817646741867065e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.7421875,"distances_sum":2224.8392521834353}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.818359375, conf: {"ssize":10,"bsize":6}, perf: {"precision":0.9852027529761905,"recall":0.818359375,"f1":0.8896627461080594,"seconds":5.433335900306702e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.390625,"distances_sum":2008.9498474229654}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91796875,"state":{"ssize":2,"bsize":9},"perf":{"precision":0.9847935267857144,"recall":0.91796875,"f1":0.9477971897893777,"seconds":5.77978789806366e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.8671875,"distances_sum":2433.347074728978}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.91796875,"state":{"ssize":2,"bsize":9},"perf":{"precision":0.9847935267857144,"recall":0.91796875,"f1":0.9477971897893777,"seconds":5.77978789806366e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.8671875,"distances_sum":2433.347074728978}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.234375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.234375,"f1":null,"seconds":3.4086406230926514e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":5.9296875,"distances_sum":552.9248326069446}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.705078125, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.705078125,"f1":0.8152132589632597,"seconds":4.721805453300476e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":7.59375,"distances_sum":1686.955764360579}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4013671875, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.4013671875,"f1":null,"seconds":3.984197974205017e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":6.234375,"distances_sum":903.2216314205058}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.705078125,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.705078125,"f1":0.8152132589632597,"seconds":4.721805453300476e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":7.59375,"distances_sum":1686.955764360579}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.705078125,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.705078125,"f1":0.8152132589632597,"seconds":4.721805453300476e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":7.59375,"distances_sum":1686.955764360579}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.705078125,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.705078125,"f1":0.8152132589632597,"seconds":4.721805453300476e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":7.59375,"distances_sum":1686.955764360579}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2294921875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2294921875,"f1":null,"seconds":3.4086406230926514e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":5.9921875,"distances_sum":555.9453814901684}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7880859375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7880859375,"f1":0.8710721570096579,"seconds":4.950910806655884e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.046875,"distances_sum":1987.5279725137311}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7880859375,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7880859375,"f1":0.8710721570096579,"seconds":4.950910806655884e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.046875,"distances_sum":1987.5279725137311}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9306870213120216,"seconds":5.559995770454407e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.515625,"distances_sum":2381.6264452308487}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8828125,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.8828125,"f1":0.9306870213120216,"seconds":5.559995770454407e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.515625,"distances_sum":2381.6264452308487}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9453754578754585,"seconds":5.6158751249313354e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.6953125,"distances_sum":2502.1723287958666}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9710565476190482,"seconds":6.245449185371399e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.8828125,"distances_sum":2630.421292665955}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9705013736263739,"seconds":5.7872384786605835e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.8671875,"distances_sum":2670.67106234194}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9710565476190482,"seconds":6.245449185371399e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.8828125,"distances_sum":2630.421292665955}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9710565476190482,"seconds":6.245449185371399e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.8828125,"distances_sum":2630.421292665955}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5771484375, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.5771484375,"f1":0.7211059773559778,"seconds":4.33996319770813e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.40625,"distances_sum":1296.6680682239976}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5478515625, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5478515625,"f1":null,"seconds":4.233792424201965e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.375,"distances_sum":1243.8603266600678}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7041015625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.7041015625,"f1":0.8165454337329346,"seconds":4.971399903297424e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.9921875,"distances_sum":1700.8245303493259}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7041015625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.7041015625,"f1":0.8165454337329346,"seconds":4.971399903297424e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.9921875,"distances_sum":1700.8245303493259}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9457474816849822,"seconds":5.725771188735962e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8671875,"distances_sum":2486.1341878873554}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.873046875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.873046875,"f1":0.9272836538461545,"seconds":5.7406723499298096e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.7578125,"distances_sum":2348.8006611090614}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.841796875, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.841796875,"f1":0.9073634698634707,"seconds":5.5283308029174805e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.7109375,"distances_sum":2211.2611117757274}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8203125, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8203125,"f1":0.8944342116217122,"seconds":5.7406723499298096e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.6953125,"distances_sum":2107.8798416130653}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8544921875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8544921875,"f1":0.9169700091575097,"seconds":5.496665835380554e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8125,"distances_sum":2257.6268726938347}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9033203125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9033203125,"f1":0.9457474816849822,"seconds":5.725771188735962e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8671875,"distances_sum":2486.1341878873554}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9600847069597076,"seconds":5.988404154777527e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8671875,"distances_sum":2585.8744858255764}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9508616383616387,"seconds":5.8300793170928955e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8203125,"distances_sum":2562.6806353205266}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9685496794871797,"seconds":5.770474672317505e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8828125,"distances_sum":2668.4572484767978}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9667639652014653,"seconds":5.5711716413497925e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8828125,"distances_sum":2655.8710091132366}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.943359375,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9685496794871797,"seconds":5.770474672317505e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8828125,"distances_sum":2668.4572484767978}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.943359375,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9685496794871797,"seconds":5.770474672317505e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8828125,"distances_sum":2668.4572484767978}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.66796875, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.66796875,"f1":0.7870542651792659,"seconds":4.302710294723511e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.5546875,"distances_sum":1570.1956664332884}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.572265625, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.572265625,"f1":0.7129443473193481,"seconds":3.95067036151886e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.109375,"distances_sum":1315.1635966535139}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.66796875,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.66796875,"f1":0.7870542651792659,"seconds":4.302710294723511e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.5546875,"distances_sum":1570.1956664332884}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76171875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.76171875,"f1":0.8534299034299042,"seconds":4.937872290611267e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.65625,"distances_sum":1930.9890175274047}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83984375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.83984375,"f1":0.9062130577755585,"seconds":5.356967449188232e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.421875,"distances_sum":2223.322212875139}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8427734375, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.8427734375,"f1":0.9096814643689651,"seconds":5.46872615814209e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.5625,"distances_sum":2216.0448809323266}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8427734375,"state":{"ssize":7,"bsize":6},"perf":{"precision":1.0,"recall":0.8427734375,"f1":0.9096814643689651,"seconds":5.46872615814209e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.5625,"distances_sum":2216.0448809323266}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":11,"bsize":7}, perf: {"precision":1.0,"recall":0.8740234375,"f1":0.9269288003663009,"seconds":5.794689059257507e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.5390625,"distances_sum":2373.6100717835257}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9642742673992677,"seconds":5.984678864479065e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.8515625,"distances_sum":2610.967974862633}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.890625,"f1":0.936446886446887,"seconds":5.751848220825195e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.625,"distances_sum":2446.2625683195056}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9527930402930409,"seconds":5.6996941566467285e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.7734375,"distances_sum":2556.4539419960074}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9528331043956051,"seconds":6.066635251045227e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.7734375,"distances_sum":2568.3133285917975}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9681204212454217,"seconds":5.8319419622421265e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.8515625,"distances_sum":2649.4512948700594}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9678972069597074,"seconds":5.882233381271362e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.8984375,"distances_sum":2623.608757037315}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9423828125,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9681204212454217,"seconds":5.8319419622421265e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.8515625,"distances_sum":2649.4512948700594}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9423828125,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9681204212454217,"seconds":5.8319419622421265e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.8515625,"distances_sum":2649.4512948700594}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.568359375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.568359375,"f1":0.7124053030303035,"seconds":3.9692968130111694e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":7.265625,"distances_sum":1353.5804515933944}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7998046875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7998046875,"f1":0.8803951257076266,"seconds":5.064532160758972e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.3359375,"distances_sum":2107.4559716258696}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7998046875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7998046875,"f1":0.8803951257076266,"seconds":5.064532160758972e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.3359375,"distances_sum":2107.4559716258696}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8505859375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8505859375,"f1":0.913773726273727,"seconds":5.435198545455933e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.8203125,"distances_sum":2310.8863039368034}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8505859375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8505859375,"f1":0.913773726273727,"seconds":5.435198545455933e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.8203125,"distances_sum":2310.8863039368034}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9642342032967035,"seconds":5.941838026046753e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.8984375,"distances_sum":2699.886271334562}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8857421875, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8857421875,"f1":0.935557151182152,"seconds":5.435198545455933e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.7890625,"distances_sum":2456.324740017065}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8662109375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8662109375,"f1":0.9226591117216125,"seconds":5.628913640975952e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.78125,"distances_sum":2363.7918041766325}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9365234375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9642342032967035,"seconds":5.941838026046753e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.8984375,"distances_sum":2699.886271334562}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9365234375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9642342032967035,"seconds":5.941838026046753e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.8984375,"distances_sum":2699.886271334562}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7841796875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7841796875,"f1":0.8724390193140201,"seconds":5.055218935012817e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.078125,"distances_sum":2076.8553931579513}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5810546875, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.5810546875,"f1":0.7210811757686765,"seconds":4.040077328681946e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":7.03125,"distances_sum":1407.5394924389836}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6796875, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6796875,"f1":0.7978927322677329,"seconds":4.332512617111206e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":7.5,"distances_sum":1708.619852011972}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7841796875,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7841796875,"f1":0.8724390193140201,"seconds":5.055218935012817e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.078125,"distances_sum":2076.8553931579513}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9525526556776561,"seconds":5.705282092094421e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.703125,"distances_sum":2676.968630518539}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8466796875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8466796875,"f1":0.9081678737928743,"seconds":5.349516868591309e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.4453125,"distances_sum":2345.578324023913}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8173828125, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8173828125,"f1":0.89014162920413,"seconds":4.990026354789734e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.296875,"distances_sum":2221.5054726184394}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9345212079587087,"seconds":5.3122639656066895e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.546875,"distances_sum":2503.8261869895523}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.869140625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.869140625,"f1":0.9229686979686986,"seconds":5.273148417472839e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.546875,"distances_sum":2451.4222320624963}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.916015625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.9525526556776561,"seconds":5.705282092094421e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.703125,"distances_sum":2676.968630518539}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9761561355311359,"seconds":5.723908543586731e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.875,"distances_sum":2815.1949214873666}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":4,"bsize":12}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.971056547619048,"seconds":5.6140124797821045e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.8984375,"distances_sum":2775.2708189634186}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9527186355311362,"seconds":5.3513795137405396e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.75,"distances_sum":2657.5390844710164}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9692765567765571,"seconds":5.7406723499298096e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.828125,"distances_sum":2800.6230639572527}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9764709249084255,"seconds":6.01448118686676e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.8671875,"distances_sum":2830.849623334622}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.95703125,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9761561355311359,"seconds":5.723908543586731e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.875,"distances_sum":2815.1949214873666}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.95703125,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9761561355311359,"seconds":5.723908543586731e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.875,"distances_sum":2815.1949214873666}}, n: 9
mean(cfft.distances) = 0.3557017515253915
mean(cdnet.distances) = 0.4176908482300905
mean(crand.distances) = 0.3525381621736081
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8933333333333332
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.9444444444444445
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.9266666666666667
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.9111111111111111
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.9022222222222221
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8822222222222221
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.8688888888888889
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.94
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9422222222222222
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.88
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.9177777777777777
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8866666666666667
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.9177777777777778
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8888888888888888
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8844444444444445
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9088888888888889
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9377777777777778
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9222222222222222
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.9
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8866666666666667
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8866666666666667
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.888888888888889
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.8822222222222221
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9355555555555556
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8933333333333334
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.8977777777777778
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.8866666666666667
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.82
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8688888888888888
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9044444444444445
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8977777777777778
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.8955555555555555
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9088888888888889
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.92
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.9733333333333334
*** finished computation of 12 references, err: [Inf, 0.5285758327444394] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 5: selecting labels [1] (freq >= 1) [from [5, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 9, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [2, 0, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 12]]
** centroid: 9, normalized-entropy: 0.5916727785823274, [(2, 2), (3, 12)]
*** center 10: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [30, 0, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 13, 5]]
** centroid: 12, normalized-entropy: 0.8524051786494784, [(2, 13), (3, 5)]
finished with 14 centroids; started with 12
acc = 0.9733333333333334
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.3416088127724088] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3416088127724088, 0.30427737750515743] ***
*** starting iteration: 2; err: [Inf, 0.3416088127724088, 0.30427737750515743] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3416088127724088, 0.30427737750515743, 0.30338750385984153] ***
*** finished computation of 3 references, err: [Inf, 0.3416088127724088, 0.30427737750515743, 0.30338750385984153] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [129, 97, 0]]
** centroid: 1, normalized-entropy: 0.9854893091331028, [(1, 129), (2, 97)]
*** center 2: selecting labels [1] (freq >= 1) [from [211, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [64, 139, 26]]
** centroid: 3, normalized-entropy: 0.8249845304984723, [(1, 64), (2, 139), (3, 26)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.5035066362889274] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5035066362889274, 0.3339981371097021] ***
*** starting iteration: 2; err: [Inf, 0.5035066362889274, 0.3339981371097021] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5035066362889274, 0.3339981371097021, 0.3300040113171381] ***
*** starting iteration: 3; err: [Inf, 0.5035066362889274, 0.3339981371097021, 0.3300040113171381] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5035066362889274, 0.3339981371097021, 0.3300040113171381, 0.3257837988816012] ***
*** finished computation of 3 references, err: [Inf, 0.5035066362889274, 0.3339981371097021, 0.3300040113171381, 0.3257837988816012] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [60, 184, 20]]
** centroid: 1, normalized-entropy: 0.7134588305813825, [(1, 60), (2, 184), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [152, 65, 0]]
** centroid: 2, normalized-entropy: 0.8807268550699422, [(1, 152), (2, 65)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [178, 8, 0]]
** centroid: 3, normalized-entropy: 0.2559300438391133, [(1, 178), (2, 8)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.44386035490311915] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44386035490311915, 0.332653588982581] ***
*** starting iteration: 2; err: [Inf, 0.44386035490311915, 0.332653588982581] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44386035490311915, 0.332653588982581, 0.3281661655064086] ***
*** starting iteration: 3; err: [Inf, 0.44386035490311915, 0.332653588982581, 0.3281661655064086] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44386035490311915, 0.332653588982581, 0.3281661655064086, 0.32580765301425907] ***
*** finished computation of 3 references, err: [Inf, 0.44386035490311915, 0.332653588982581, 0.3281661655064086, 0.32580765301425907] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [67, 93, 20]]
** centroid: 1, normalized-entropy: 0.8676169174533672, [(1, 67), (2, 93), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [256, 2, 0]]
** centroid: 2, normalized-entropy: 0.06549082131472699, [(1, 256), (2, 2)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [67, 160, 2]]
** centroid: 3, normalized-entropy: 0.5930221619479362, [(1, 67), (2, 160), (3, 2)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2404050119724628] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2404050119724628, 0.2052376997956374] ***
*** starting iteration: 2; err: [Inf, 0.2404050119724628, 0.2052376997956374] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2404050119724628, 0.2052376997956374, 0.19897534235802902] ***
*** starting iteration: 3; err: [Inf, 0.2404050119724628, 0.2052376997956374, 0.19897534235802902] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2404050119724628, 0.2052376997956374, 0.19897534235802902, 0.19569564005499845] ***
*** starting iteration: 4; err: [Inf, 0.2404050119724628, 0.2052376997956374, 0.19897534235802902, 0.19569564005499845] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2404050119724628, 0.2052376997956374, 0.19897534235802902, 0.19569564005499845, 0.19394170463871066] ***
*** starting iteration: 5; err: [Inf, 0.2404050119724628, 0.2052376997956374, 0.19897534235802902, 0.19569564005499845, 0.19394170463871066] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2404050119724628, 0.2052376997956374, 0.19897534235802902, 0.19569564005499845, 0.19394170463871066, 0.1922370599171667] ***
*** starting iteration: 6; err: [Inf, 0.2404050119724628, 0.2052376997956374, 0.19897534235802902, 0.19569564005499845, 0.19394170463871066, 0.1922370599171667] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2404050119724628, 0.2052376997956374, 0.19897534235802902, 0.19569564005499845, 0.19394170463871066, 0.1922370599171667, 0.19135721912887227] ***
*** finished computation of 7 references, err: [Inf, 0.2404050119724628, 0.2052376997956374, 0.19897534235802902, 0.19569564005499845, 0.19394170463871066, 0.1922370599171667, 0.19135721912887227] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [76, 42, 0]]
** centroid: 1, normalized-entropy: 0.9392547207311595, [(1, 76), (2, 42)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [27, 56, 0]]
** centroid: 2, normalized-entropy: 0.9100534290139191, [(1, 27), (2, 56)]
*** center 3: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [57, 36, 0]]
** centroid: 4, normalized-entropy: 0.9629004147713269, [(1, 57), (2, 36)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [61, 4, 0]]
** centroid: 5, normalized-entropy: 0.33352200393097675, [(1, 61), (2, 4)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 98, 26]]
** centroid: 6, normalized-entropy: 0.7408656862339816, [(2, 98), (3, 26)]
*** center 7: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24627952957372257] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24627952957372257, 0.2062336491131834] ***
*** starting iteration: 2; err: [Inf, 0.24627952957372257, 0.2062336491131834] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24627952957372257, 0.2062336491131834, 0.19490030626982807] ***
*** starting iteration: 3; err: [Inf, 0.24627952957372257, 0.2062336491131834, 0.19490030626982807] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24627952957372257, 0.2062336491131834, 0.19490030626982807, 0.1892252043587738] ***
*** starting iteration: 4; err: [Inf, 0.24627952957372257, 0.2062336491131834, 0.19490030626982807, 0.1892252043587738] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24627952957372257, 0.2062336491131834, 0.19490030626982807, 0.1892252043587738, 0.18761812863002966] ***
*** starting iteration: 5; err: [Inf, 0.24627952957372257, 0.2062336491131834, 0.19490030626982807, 0.1892252043587738, 0.18761812863002966] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24627952957372257, 0.2062336491131834, 0.19490030626982807, 0.1892252043587738, 0.18761812863002966, 0.18745395855774274] ***
*** finished computation of 7 references, err: [Inf, 0.24627952957372257, 0.2062336491131834, 0.19490030626982807, 0.1892252043587738, 0.18761812863002966, 0.18745395855774274] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [67, 43, 0]]
** centroid: 1, normalized-entropy: 0.96538371158956, [(1, 67), (2, 43)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 87, 20]]
** centroid: 2, normalized-entropy: 0.6949749673676271, [(2, 87), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [77, 14, 0]]
** centroid: 3, normalized-entropy: 0.6193821946787638, [(1, 77), (2, 14)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [36, 46, 0]]
** centroid: 4, normalized-entropy: 0.9892452969285004, [(1, 36), (2, 46)]
*** center 5: selecting labels [1] (freq >= 2) [from [111, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 67, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [99, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.259587601564456] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.259587601564456, 0.20587705974529932] ***
*** starting iteration: 2; err: [Inf, 0.259587601564456, 0.20587705974529932] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.259587601564456, 0.20587705974529932, 0.1984817528380905] ***
*** starting iteration: 3; err: [Inf, 0.259587601564456, 0.20587705974529932, 0.1984817528380905] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.259587601564456, 0.20587705974529932, 0.1984817528380905, 0.19317215483292177] ***
*** starting iteration: 4; err: [Inf, 0.259587601564456, 0.20587705974529932, 0.1984817528380905, 0.19317215483292177] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.259587601564456, 0.20587705974529932, 0.1984817528380905, 0.19317215483292177, 0.18870906390646275] ***
*** starting iteration: 5; err: [Inf, 0.259587601564456, 0.20587705974529932, 0.1984817528380905, 0.19317215483292177, 0.18870906390646275] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.259587601564456, 0.20587705974529932, 0.1984817528380905, 0.19317215483292177, 0.18870906390646275, 0.18599901172455338] ***
*** starting iteration: 6; err: [Inf, 0.259587601564456, 0.20587705974529932, 0.1984817528380905, 0.19317215483292177, 0.18870906390646275, 0.18599901172455338] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.259587601564456, 0.20587705974529932, 0.1984817528380905, 0.19317215483292177, 0.18870906390646275, 0.18599901172455338, 0.18436252405850226] ***
*** starting iteration: 7; err: [Inf, 0.259587601564456, 0.20587705974529932, 0.1984817528380905, 0.19317215483292177, 0.18870906390646275, 0.18599901172455338, 0.18436252405850226] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.259587601564456, 0.20587705974529932, 0.1984817528380905, 0.19317215483292177, 0.18870906390646275, 0.18599901172455338, 0.18436252405850226, 0.18397926172099147] ***
*** finished computation of 7 references, err: [Inf, 0.259587601564456, 0.20587705974529932, 0.1984817528380905, 0.19317215483292177, 0.18870906390646275, 0.18599901172455338, 0.18436252405850226, 0.18397926172099147] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [3, 72, 0]]
** centroid: 1, normalized-entropy: 0.24229218908241482, [(1, 3), (2, 72)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 98, 22]]
** centroid: 2, normalized-entropy: 0.6873150928309273, [(2, 98), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [104, 2, 0]]
** centroid: 3, normalized-entropy: 0.13503620280212753, [(1, 104), (2, 2)]
*** center 4: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [62, 42, 0]]
** centroid: 5, normalized-entropy: 0.9731560354421095, [(1, 62), (2, 42)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [39, 41, 0]]
** centroid: 6, normalized-entropy: 0.9995491108252483, [(1, 39), (2, 41)]
*** center 7: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.27378029163924045] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27378029163924045, 0.19912948489521962] ***
*** starting iteration: 2; err: [Inf, 0.27378029163924045, 0.19912948489521962] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27378029163924045, 0.19912948489521962, 0.19374080757853818] ***
*** starting iteration: 3; err: [Inf, 0.27378029163924045, 0.19912948489521962, 0.19374080757853818] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27378029163924045, 0.19912948489521962, 0.19374080757853818, 0.19105357093549147] ***
*** finished computation of 7 references, err: [Inf, 0.27378029163924045, 0.19912948489521962, 0.19374080757853818, 0.19105357093549147] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [62, 50, 0]]
** centroid: 1, normalized-entropy: 0.9917033083725819, [(1, 62), (2, 50)]
*** center 2: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [28, 48, 0]]
** centroid: 3, normalized-entropy: 0.9494520153879484, [(1, 28), (2, 48)]
*** center 4: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [89, 32, 0]]
** centroid: 5, normalized-entropy: 0.8334064161505499, [(1, 89), (2, 32)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 106, 26]]
** centroid: 6, normalized-entropy: 0.7158259310602146, [(2, 106), (3, 26)]
*** center 7: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2334725608800662] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2334725608800662, 0.20976582287588733] ***
*** starting iteration: 2; err: [Inf, 0.2334725608800662, 0.20976582287588733] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2334725608800662, 0.20976582287588733, 0.2052632688141164] ***
*** starting iteration: 3; err: [Inf, 0.2334725608800662, 0.20976582287588733, 0.2052632688141164] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2334725608800662, 0.20976582287588733, 0.2052632688141164, 0.20120353069201088] ***
*** finished computation of 7 references, err: [Inf, 0.2334725608800662, 0.20976582287588733, 0.2052632688141164, 0.20120353069201088] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 50, 3]]
** centroid: 1, normalized-entropy: 0.3138129641688652, [(2, 50), (3, 3)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [29, 72, 0]]
** centroid: 2, normalized-entropy: 0.8649832752018335, [(1, 29), (2, 72)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 57, 17]]
** centroid: 3, normalized-entropy: 0.77753986416076, [(2, 57), (3, 17)]
*** center 4: selecting labels [1] (freq >= 2) [from [132, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [13, 61, 0]]
** centroid: 5, normalized-entropy: 0.6705250693158382, [(1, 13), (2, 61)]
*** center 6: selecting labels [1] (freq >= 2) [from [120, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [96, 17, 0]]
** centroid: 7, normalized-entropy: 0.6109464989595527, [(1, 96), (2, 17)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.23158323050880136] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23158323050880136, 0.20140144516290842] ***
*** starting iteration: 2; err: [Inf, 0.23158323050880136, 0.20140144516290842] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23158323050880136, 0.20140144516290842, 0.19397224890168707] ***
*** starting iteration: 3; err: [Inf, 0.23158323050880136, 0.20140144516290842, 0.19397224890168707] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23158323050880136, 0.20140144516290842, 0.19397224890168707, 0.19033125025601402] ***
*** finished computation of 7 references, err: [Inf, 0.23158323050880136, 0.20140144516290842, 0.19397224890168707, 0.19033125025601402] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [6, 78, 0]]
** centroid: 1, normalized-entropy: 0.3712323266408756, [(1, 6), (2, 78)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [53, 29, 0]]
** centroid: 2, normalized-entropy: 0.9372930661967526, [(1, 53), (2, 29)]
*** center 3: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 97, 22]]
** centroid: 5, normalized-entropy: 0.6906241389199443, [(2, 97), (3, 22)]
*** center 6: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [71, 51, 0]]
** centroid: 7, normalized-entropy: 0.9805263709614215, [(1, 71), (2, 51)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3984016555979535] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3984016555979535, 0.3028410995230862] ***
*** starting iteration: 2; err: [Inf, 0.3984016555979535, 0.3028410995230862] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3984016555979535, 0.3028410995230862, 0.299067213932785] ***
*** starting iteration: 3; err: [Inf, 0.3984016555979535, 0.3028410995230862, 0.299067213932785] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3984016555979535, 0.3028410995230862, 0.299067213932785, 0.2976712173853607] ***
*** finished computation of 3 references, err: [Inf, 0.3984016555979535, 0.3028410995230862, 0.299067213932785, 0.2976712173853607] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [85, 161, 26]]
** centroid: 1, normalized-entropy: 0.8176631870578623, [(1, 85), (2, 161), (3, 26)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [120, 75, 0]]
** centroid: 2, normalized-entropy: 0.961236604722876, [(1, 120), (2, 75)]
*** center 3: selecting labels [1] (freq >= 2) [from [199, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.5801056849084671] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5801056849084671, 0.34125450130334234] ***
*** starting iteration: 2; err: [Inf, 0.5801056849084671, 0.34125450130334234] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5801056849084671, 0.34125450130334234, 0.30523058915066753] ***
*** starting iteration: 3; err: [Inf, 0.5801056849084671, 0.34125450130334234, 0.30523058915066753] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5801056849084671, 0.34125450130334234, 0.30523058915066753, 0.29839801538604377] ***
*** finished computation of 3 references, err: [Inf, 0.5801056849084671, 0.34125450130334234, 0.30523058915066753, 0.29839801538604377] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [134, 69, 0]]
** centroid: 1, normalized-entropy: 0.9247243948253971, [(1, 134), (2, 69)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [65, 188, 20]]
** centroid: 2, normalized-entropy: 0.7191386456163684, [(1, 65), (2, 188), (3, 20)]
*** center 3: selecting labels [1] (freq >= 2) [from [191, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.49108026002713856] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.49108026002713856, 0.34101534680347484] ***
*** starting iteration: 2; err: [Inf, 0.49108026002713856, 0.34101534680347484] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.49108026002713856, 0.34101534680347484, 0.3296930484900969] ***
*** starting iteration: 3; err: [Inf, 0.49108026002713856, 0.34101534680347484, 0.3296930484900969] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.49108026002713856, 0.34101534680347484, 0.3296930484900969, 0.32151628571466123] ***
*** finished computation of 3 references, err: [Inf, 0.49108026002713856, 0.34101534680347484, 0.3296930484900969, 0.32151628571466123] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [173, 12, 0]]
** centroid: 1, normalized-entropy: 0.34646128003086757, [(1, 173), (2, 12)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [56, 234, 22]]
** centroid: 2, normalized-entropy: 0.6472303427700428, [(1, 56), (2, 234), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [161, 9, 0]]
** centroid: 3, normalized-entropy: 0.2987618632586774, [(1, 161), (2, 9)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.21810671462545972] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21810671462545972, 0.1880523778089845] ***
*** finished computation of 7 references, err: [Inf, 0.21810671462545972, 0.1880523778089845] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [2, 81, 1]]
** centroid: 1, normalized-entropy: 0.16093826217168333, [(1, 2), (2, 81), (3, 1)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [51, 14, 0]]
** centroid: 2, normalized-entropy: 0.7516499461153354, [(1, 51), (2, 14)]
*** center 3: selecting labels [1] (freq >= 1) [from [105, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 111, 25]]
** centroid: 4, normalized-entropy: 0.6883704448589432, [(2, 111), (3, 25)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [101, 7, 0]]
** centroid: 5, normalized-entropy: 0.34626857427148255, [(1, 101), (2, 7)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [76, 2, 0]]
** centroid: 6, normalized-entropy: 0.17203694935311387, [(1, 76), (2, 2)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [69, 21, 0]]
** centroid: 7, normalized-entropy: 0.7837769474847011, [(1, 69), (2, 21)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2405111917529836] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2405111917529836, 0.19072549329404587] ***
*** finished computation of 7 references, err: [Inf, 0.2405111917529836, 0.19072549329404587] ***
*** center 1: selecting labels [1] (freq >= 1) [from [142, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 62, 20]]
** centroid: 2, normalized-entropy: 0.8014698931335286, [(2, 62), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [47, 35, 0]]
** centroid: 3, normalized-entropy: 0.9844961311800012, [(1, 47), (2, 35)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [79, 2, 0]]
** centroid: 4, normalized-entropy: 0.16702680404522793, [(1, 79), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [18, 85, 0]]
** centroid: 5, normalized-entropy: 0.6684725699243225, [(1, 18), (2, 85)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [4, 73, 0]]
** centroid: 6, normalized-entropy: 0.29461520565280713, [(1, 4), (2, 73)]
*** center 7: selecting labels [1] (freq >= 1) [from [100, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24705424792841188] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24705424792841188, 0.2005424732579731] ***
*** finished computation of 7 references, err: [Inf, 0.24705424792841188, 0.2005424732579731] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [20, 93, 0]]
** centroid: 1, normalized-entropy: 0.6734503665674518, [(1, 20), (2, 93)]
*** center 2: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 86, 22]]
** centroid: 4, normalized-entropy: 0.7292739418449411, [(2, 86), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [60, 14, 0]]
** centroid: 5, normalized-entropy: 0.699772221773307, [(1, 60), (2, 14)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [45, 62, 0]]
** centroid: 6, normalized-entropy: 0.9817140837953373, [(1, 45), (2, 62)]
*** center 7: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21976068114733194] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21976068114733194, 0.19413197057897802] ***
*** starting iteration: 2; err: [Inf, 0.21976068114733194, 0.19413197057897802] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21976068114733194, 0.19413197057897802, 0.19098401915662372] ***
*** starting iteration: 3; err: [Inf, 0.21976068114733194, 0.19413197057897802, 0.19098401915662372] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21976068114733194, 0.19413197057897802, 0.19098401915662372, 0.1905149392484388] ***
*** finished computation of 7 references, err: [Inf, 0.21976068114733194, 0.19413197057897802, 0.19098401915662372, 0.1905149392484388] ***
*** center 1: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [70, 7, 0]]
** centroid: 2, normalized-entropy: 0.43949698692151346, [(1, 70), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 67, 26]]
** centroid: 3, normalized-entropy: 0.8548640967818041, [(2, 67), (3, 26)]
*** center 4: selecting labels [1] (freq >= 1) [from [114, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [32, 56, 0]]
** centroid: 5, normalized-entropy: 0.9456603046006401, [(1, 32), (2, 56)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [77, 13, 0]]
** centroid: 6, normalized-entropy: 0.5957610966703235, [(1, 77), (2, 13)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [14, 93, 0]]
** centroid: 7, normalized-entropy: 0.5597404598417697, [(1, 14), (2, 93)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24109612864608326] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24109612864608326, 0.1894342907490781] ***
*** starting iteration: 2; err: [Inf, 0.24109612864608326, 0.1894342907490781] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24109612864608326, 0.1894342907490781, 0.18602851515836913] ***
*** starting iteration: 3; err: [Inf, 0.24109612864608326, 0.1894342907490781, 0.18602851515836913] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24109612864608326, 0.1894342907490781, 0.18602851515836913, 0.18472221412003387] ***
*** starting iteration: 4; err: [Inf, 0.24109612864608326, 0.1894342907490781, 0.18602851515836913, 0.18472221412003387] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24109612864608326, 0.1894342907490781, 0.18602851515836913, 0.18472221412003387, 0.18417170312747114] ***
*** finished computation of 7 references, err: [Inf, 0.24109612864608326, 0.1894342907490781, 0.18602851515836913, 0.18472221412003387, 0.18417170312747114] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [43, 56, 0]]
** centroid: 1, normalized-entropy: 0.9875257101057102, [(1, 43), (2, 56)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [60, 33, 0]]
** centroid: 2, normalized-entropy: 0.9383153522334071, [(1, 60), (2, 33)]
*** center 3: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 100, 20]]
** centroid: 4, normalized-entropy: 0.6500224216483541, [(2, 100), (3, 20)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [24, 68, 0]]
** centroid: 5, normalized-entropy: 0.828055725379504, [(1, 24), (2, 68)]
*** center 6: selecting labels [1] (freq >= 1) [from [93, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24929901825981787] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24929901825981787, 0.19574495080322296] ***
*** starting iteration: 2; err: [Inf, 0.24929901825981787, 0.19574495080322296] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24929901825981787, 0.19574495080322296, 0.19005985790235305] ***
*** starting iteration: 3; err: [Inf, 0.24929901825981787, 0.19574495080322296, 0.19005985790235305] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24929901825981787, 0.19574495080322296, 0.19005985790235305, 0.1895419546672474] ***
*** finished computation of 7 references, err: [Inf, 0.24929901825981787, 0.19574495080322296, 0.19005985790235305, 0.1895419546672474] ***
*** center 1: selecting labels [1] (freq >= 1) [from [111, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 59, 22]]
** centroid: 2, normalized-entropy: 0.8437582063121657, [(2, 59), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [102, 6, 0]]
** centroid: 3, normalized-entropy: 0.3095434291503252, [(1, 102), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [74, 12, 0]]
** centroid: 4, normalized-entropy: 0.5830194167347007, [(1, 74), (2, 12)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [1, 89, 0]]
** centroid: 5, normalized-entropy: 0.08807225904068142, [(1, 1), (2, 89)]
*** center 6: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [4, 89, 0]]
** centroid: 7, normalized-entropy: 0.2559300438391133, [(1, 4), (2, 89)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24483005707250075] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24483005707250075, 0.19478000914845783] ***
*** starting iteration: 2; err: [Inf, 0.24483005707250075, 0.19478000914845783] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24483005707250075, 0.19478000914845783, 0.18983354802836325] ***
*** starting iteration: 3; err: [Inf, 0.24483005707250075, 0.19478000914845783, 0.18983354802836325] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24483005707250075, 0.19478000914845783, 0.18983354802836325, 0.18962554669485907] ***
*** finished computation of 7 references, err: [Inf, 0.24483005707250075, 0.19478000914845783, 0.18983354802836325, 0.18962554669485907] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [94, 2, 0]]
** centroid: 1, normalized-entropy: 0.14609425012013613, [(1, 94), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [93, 3, 0]]
** centroid: 2, normalized-entropy: 0.2006223243127146, [(1, 93), (2, 3)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 65, 26]]
** centroid: 3, normalized-entropy: 0.8631205685666311, [(2, 65), (3, 26)]
*** center 4: selecting labels [1] (freq >= 2) [from [109, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [34, 54, 0]]
** centroid: 5, normalized-entropy: 0.9624127354629922, [(1, 34), (2, 54)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [71, 12, 0]]
** centroid: 6, normalized-entropy: 0.5961045458832345, [(1, 71), (2, 12)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 100, 0]]
** centroid: 7, normalized-entropy: 0.18999075553626757, [(1, 3), (2, 100)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21181864115532426] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21181864115532426, 0.18888089027481972] ***
*** starting iteration: 2; err: [Inf, 0.21181864115532426, 0.18888089027481972] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21181864115532426, 0.18888089027481972, 0.18618147267165525] ***
*** starting iteration: 3; err: [Inf, 0.21181864115532426, 0.18888089027481972, 0.18618147267165525] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21181864115532426, 0.18888089027481972, 0.18618147267165525, 0.1851310236344597] ***
*** starting iteration: 4; err: [Inf, 0.21181864115532426, 0.18888089027481972, 0.18618147267165525, 0.1851310236344597] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21181864115532426, 0.18888089027481972, 0.18618147267165525, 0.1851310236344597, 0.18453260771322832] ***
*** finished computation of 7 references, err: [Inf, 0.21181864115532426, 0.18888089027481972, 0.18618147267165525, 0.1851310236344597, 0.18453260771322832] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [49, 54, 0]]
** centroid: 1, normalized-entropy: 0.9982994837029028, [(1, 49), (2, 54)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [55, 38, 0]]
** centroid: 2, normalized-entropy: 0.9757606417025202, [(1, 55), (2, 38)]
*** center 3: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [2, 97, 0]]
** centroid: 4, normalized-entropy: 0.14257333025989857, [(1, 2), (2, 97)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 65, 20]]
** centroid: 5, normalized-entropy: 0.787126586201269, [(2, 65), (3, 20)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [103, 2, 0]]
** centroid: 6, normalized-entropy: 0.1360592862387751, [(1, 103), (2, 2)]
*** center 7: selecting labels [1] (freq >= 2) [from [105, 1, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2555302295127305] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2555302295127305, 0.19518413393991418] ***
*** starting iteration: 2; err: [Inf, 0.2555302295127305, 0.19518413393991418] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2555302295127305, 0.19518413393991418, 0.1869594096715773] ***
*** starting iteration: 3; err: [Inf, 0.2555302295127305, 0.19518413393991418, 0.1869594096715773] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2555302295127305, 0.19518413393991418, 0.1869594096715773, 0.1861401272168302] ***
*** finished computation of 7 references, err: [Inf, 0.2555302295127305, 0.19518413393991418, 0.1869594096715773, 0.1861401272168302] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [97, 3, 0]]
** centroid: 1, normalized-entropy: 0.19439185783157603, [(1, 97), (2, 3)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 48, 22]]
** centroid: 2, normalized-entropy: 0.8980587934501658, [(2, 48), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [89, 22, 0]]
** centroid: 3, normalized-entropy: 0.7183098216110975, [(1, 89), (2, 22)]
*** center 4: selecting labels [1] (freq >= 2) [from [94, 1, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 99, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [4, 82, 0]]
** centroid: 7, normalized-entropy: 0.2713895875081112, [(1, 4), (2, 82)]
finished with 9 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 9)
[0.9380218541895188, 0.9310358262454071, 0.9260368152583721, 0.921019822217427, 0.8960187732642823, 0.8720157283031534, 0.8559817302332272, 0.8319696942451434, 0.7880065694436952]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.3, 2) => 0.9380218541895188
finished with 11
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.28056489835198206] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28056489835198206, 0.18900020999062034] ***
*** starting iteration: 2; err: [Inf, 0.28056489835198206, 0.18900020999062034] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28056489835198206, 0.18900020999062034, 0.16899825606282587] ***
*** starting iteration: 3; err: [Inf, 0.28056489835198206, 0.18900020999062034, 0.16899825606282587] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28056489835198206, 0.18900020999062034, 0.16899825606282587, 0.159253008988079] ***
*** starting iteration: 4; err: [Inf, 0.28056489835198206, 0.18900020999062034, 0.16899825606282587, 0.159253008988079] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28056489835198206, 0.18900020999062034, 0.16899825606282587, 0.159253008988079, 0.1544243624872967] ***
*** starting iteration: 5; err: [Inf, 0.28056489835198206, 0.18900020999062034, 0.16899825606282587, 0.159253008988079, 0.1544243624872967] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28056489835198206, 0.18900020999062034, 0.16899825606282587, 0.159253008988079, 0.1544243624872967, 0.1516182370688039] ***
*** starting iteration: 6; err: [Inf, 0.28056489835198206, 0.18900020999062034, 0.16899825606282587, 0.159253008988079, 0.1544243624872967, 0.1516182370688039] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28056489835198206, 0.18900020999062034, 0.16899825606282587, 0.159253008988079, 0.1544243624872967, 0.1516182370688039, 0.1501175690919172] ***
*** starting iteration: 7; err: [Inf, 0.28056489835198206, 0.18900020999062034, 0.16899825606282587, 0.159253008988079, 0.1544243624872967, 0.1516182370688039, 0.1501175690919172] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28056489835198206, 0.18900020999062034, 0.16899825606282587, 0.159253008988079, 0.1544243624872967, 0.1516182370688039, 0.1501175690919172, 0.1493378816166887] ***
*** finished computation of 7 references, err: [Inf, 0.28056489835198206, 0.18900020999062034, 0.16899825606282587, 0.159253008988079, 0.1544243624872967, 0.1516182370688039, 0.1501175690919172, 0.1493378816166887] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [86, 13, 0]]
** centroid: 1, normalized-entropy: 0.5610284863400681, [(1, 86), (2, 13)]
*** center 2: selecting labels [1] (freq >= 2) [from [108, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 88, 26]]
** centroid: 3, normalized-entropy: 0.7746319868686841, [(2, 88), (3, 26)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [6, 70, 0]]
** centroid: 4, normalized-entropy: 0.39845927409523557, [(1, 6), (2, 70)]
*** center 5: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [7, 65, 0]]
** centroid: 6, normalized-entropy: 0.460127886147135, [(1, 7), (2, 65)]
*** center 7: selecting labels [1] (freq >= 2) [from [130, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1856664021665613] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1856664021665613, 0.1563504657134235] ***
*** starting iteration: 2; err: [Inf, 0.1856664021665613, 0.1563504657134235] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1856664021665613, 0.1563504657134235, 0.15125824735050314] ***
*** starting iteration: 3; err: [Inf, 0.1856664021665613, 0.1563504657134235, 0.15125824735050314] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1856664021665613, 0.1563504657134235, 0.15125824735050314, 0.14924475749343008] ***
*** starting iteration: 4; err: [Inf, 0.1856664021665613, 0.1563504657134235, 0.15125824735050314, 0.14924475749343008] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1856664021665613, 0.1563504657134235, 0.15125824735050314, 0.14924475749343008, 0.1483704584756813] ***
*** finished computation of 7 references, err: [Inf, 0.1856664021665613, 0.1563504657134235, 0.15125824735050314, 0.14924475749343008, 0.1483704584756813] ***
*** center 1: selecting labels [1] (freq >= 2) [from [126, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [22, 62, 0]]
** centroid: 2, normalized-entropy: 0.8296071030882032, [(1, 22), (2, 62)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [60, 27, 0]]
** centroid: 3, normalized-entropy: 0.8935711016541908, [(1, 60), (2, 27)]
*** center 4: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [5, 97, 0]]
** centroid: 6, normalized-entropy: 0.28221763445592507, [(1, 5), (2, 97)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 71, 20]]
** centroid: 7, normalized-entropy: 0.7597659876428757, [(2, 71), (3, 20)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2641303273856171] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2641303273856171, 0.16887142880494405] ***
*** starting iteration: 2; err: [Inf, 0.2641303273856171, 0.16887142880494405] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2641303273856171, 0.16887142880494405, 0.16071180132639384] ***
*** starting iteration: 3; err: [Inf, 0.2641303273856171, 0.16887142880494405, 0.16071180132639384] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2641303273856171, 0.16887142880494405, 0.16071180132639384, 0.15610531007806802] ***
*** starting iteration: 4; err: [Inf, 0.2641303273856171, 0.16887142880494405, 0.16071180132639384, 0.15610531007806802] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2641303273856171, 0.16887142880494405, 0.16071180132639384, 0.15610531007806802, 0.15364249276117362] ***
*** starting iteration: 5; err: [Inf, 0.2641303273856171, 0.16887142880494405, 0.16071180132639384, 0.15610531007806802, 0.15364249276117362] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2641303273856171, 0.16887142880494405, 0.16071180132639384, 0.15610531007806802, 0.15364249276117362, 0.15178794592110695] ***
*** starting iteration: 6; err: [Inf, 0.2641303273856171, 0.16887142880494405, 0.16071180132639384, 0.15610531007806802, 0.15364249276117362, 0.15178794592110695] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2641303273856171, 0.16887142880494405, 0.16071180132639384, 0.15610531007806802, 0.15364249276117362, 0.15178794592110695, 0.15075144047654795] ***
*** starting iteration: 7; err: [Inf, 0.2641303273856171, 0.16887142880494405, 0.16071180132639384, 0.15610531007806802, 0.15364249276117362, 0.15178794592110695, 0.15075144047654795] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2641303273856171, 0.16887142880494405, 0.16071180132639384, 0.15610531007806802, 0.15364249276117362, 0.15178794592110695, 0.15075144047654795, 0.15002342735345978] ***
*** finished computation of 7 references, err: [Inf, 0.2641303273856171, 0.16887142880494405, 0.16071180132639384, 0.15610531007806802, 0.15364249276117362, 0.15178794592110695, 0.15075144047654795, 0.15002342735345978] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [26, 58, 0]]
** centroid: 1, normalized-entropy: 0.8926230133850988, [(1, 26), (2, 58)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 91, 22]]
** centroid: 2, normalized-entropy: 0.7111806626974718, [(2, 91), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [104, 27, 0]]
** centroid: 3, normalized-entropy: 0.7339749614986165, [(1, 104), (2, 27)]
*** center 4: selecting labels [1] (freq >= 2) [from [129, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 73, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [55, 6, 0]]
** centroid: 7, normalized-entropy: 0.4637773498877517, [(1, 55), (2, 6)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24969290519082868] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24969290519082868, 0.1986038839561982] ***
*** starting iteration: 2; err: [Inf, 0.24969290519082868, 0.1986038839561982] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24969290519082868, 0.1986038839561982, 0.19556257354414408] ***
*** starting iteration: 3; err: [Inf, 0.24969290519082868, 0.1986038839561982, 0.19556257354414408] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24969290519082868, 0.1986038839561982, 0.19556257354414408, 0.1936374084028351] ***
*** starting iteration: 4; err: [Inf, 0.24969290519082868, 0.1986038839561982, 0.19556257354414408, 0.1936374084028351] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24969290519082868, 0.1986038839561982, 0.19556257354414408, 0.1936374084028351, 0.19228671453809282] ***
*** starting iteration: 5; err: [Inf, 0.24969290519082868, 0.1986038839561982, 0.19556257354414408, 0.1936374084028351, 0.19228671453809282] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24969290519082868, 0.1986038839561982, 0.19556257354414408, 0.1936374084028351, 0.19228671453809282, 0.19163671934448584] ***
*** finished computation of 7 references, err: [Inf, 0.24969290519082868, 0.1986038839561982, 0.19556257354414408, 0.1936374084028351, 0.19228671453809282, 0.19163671934448584] ***
*** center 1: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [22, 58, 0]]
** centroid: 2, normalized-entropy: 0.8485481782946159, [(1, 22), (2, 58)]
*** center 3: selecting labels [1] (freq >= 2) [from [121, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 86, 26]]
** centroid: 4, normalized-entropy: 0.7817281222714539, [(2, 86), (3, 26)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [88, 39, 0]]
** centroid: 5, normalized-entropy: 0.889781781451616, [(1, 88), (2, 39)]
*** center 6: selecting labels [1] (freq >= 2) [from [57, 1, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [32, 52, 0]]
** centroid: 7, normalized-entropy: 0.9587118829771317, [(1, 32), (2, 52)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26601681059346477] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26601681059346477, 0.19317673608476388] ***
*** starting iteration: 2; err: [Inf, 0.26601681059346477, 0.19317673608476388] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26601681059346477, 0.19317673608476388, 0.18791922978286085] ***
*** starting iteration: 3; err: [Inf, 0.26601681059346477, 0.19317673608476388, 0.18791922978286085] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26601681059346477, 0.19317673608476388, 0.18791922978286085, 0.1868897233216994] ***
*** starting iteration: 4; err: [Inf, 0.26601681059346477, 0.19317673608476388, 0.18791922978286085, 0.1868897233216994] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26601681059346477, 0.19317673608476388, 0.18791922978286085, 0.1868897233216994, 0.18650622217395138] ***
*** finished computation of 7 references, err: [Inf, 0.26601681059346477, 0.19317673608476388, 0.18791922978286085, 0.1868897233216994, 0.18650622217395138] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [55, 39, 0]]
** centroid: 1, normalized-entropy: 0.978998737002276, [(1, 55), (2, 39)]
*** center 2: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [120, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [2, 74, 0]]
** centroid: 4, normalized-entropy: 0.17556502585750275, [(1, 2), (2, 74)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [33, 52, 0]]
** centroid: 5, normalized-entropy: 0.9636512739945752, [(1, 33), (2, 52)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 86, 20]]
** centroid: 6, normalized-entropy: 0.6987003526563345, [(2, 86), (3, 20)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [87, 6, 0]]
** centroid: 7, normalized-entropy: 0.3451173149449528, [(1, 87), (2, 6)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2771123595217402] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2771123595217402, 0.2216550525336497] ***
*** starting iteration: 2; err: [Inf, 0.2771123595217402, 0.2216550525336497] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2771123595217402, 0.2216550525336497, 0.20547976013345606] ***
*** starting iteration: 3; err: [Inf, 0.2771123595217402, 0.2216550525336497, 0.20547976013345606] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2771123595217402, 0.2216550525336497, 0.20547976013345606, 0.20054747440085663] ***
*** starting iteration: 4; err: [Inf, 0.2771123595217402, 0.2216550525336497, 0.20547976013345606, 0.20054747440085663] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2771123595217402, 0.2216550525336497, 0.20547976013345606, 0.20054747440085663, 0.19741318683730608] ***
*** starting iteration: 5; err: [Inf, 0.2771123595217402, 0.2216550525336497, 0.20547976013345606, 0.20054747440085663, 0.19741318683730608] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2771123595217402, 0.2216550525336497, 0.20547976013345606, 0.20054747440085663, 0.19741318683730608, 0.19513028749855404] ***
*** starting iteration: 6; err: [Inf, 0.2771123595217402, 0.2216550525336497, 0.20547976013345606, 0.20054747440085663, 0.19741318683730608, 0.19513028749855404] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2771123595217402, 0.2216550525336497, 0.20547976013345606, 0.20054747440085663, 0.19741318683730608, 0.19513028749855404, 0.19305805689089747] ***
*** starting iteration: 7; err: [Inf, 0.2771123595217402, 0.2216550525336497, 0.20547976013345606, 0.20054747440085663, 0.19741318683730608, 0.19513028749855404, 0.19305805689089747] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2771123595217402, 0.2216550525336497, 0.20547976013345606, 0.20054747440085663, 0.19741318683730608, 0.19513028749855404, 0.19305805689089747, 0.19111960488713642] ***
*** starting iteration: 8; err: [Inf, 0.2771123595217402, 0.2216550525336497, 0.20547976013345606, 0.20054747440085663, 0.19741318683730608, 0.19513028749855404, 0.19305805689089747, 0.19111960488713642] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2771123595217402, 0.2216550525336497, 0.20547976013345606, 0.20054747440085663, 0.19741318683730608, 0.19513028749855404, 0.19305805689089747, 0.19111960488713642, 0.19020528996759828] ***
*** finished computation of 7 references, err: [Inf, 0.2771123595217402, 0.2216550525336497, 0.20547976013345606, 0.20054747440085663, 0.19741318683730608, 0.19513028749855404, 0.19305805689089747, 0.19111960488713642, 0.19020528996759828] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 136, 22]]
** centroid: 1, normalized-entropy: 0.5822463050121238, [(2, 136), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [40, 52, 0]]
** centroid: 2, normalized-entropy: 0.9876925088958032, [(1, 40), (2, 52)]
*** center 3: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [80, 8, 0]]
** centroid: 4, normalized-entropy: 0.43949698692151346, [(1, 80), (2, 8)]
*** center 5: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [42, 44, 0]]
** centroid: 6, normalized-entropy: 0.9996098363678071, [(1, 42), (2, 44)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [77, 15, 0]]
** centroid: 7, normalized-entropy: 0.6415410585827175, [(1, 77), (2, 15)]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 11)
[0.9380218541895188, 0.9319918721116326, 0.9310358262454071, 0.928014841188494, 0.9260368152583721, 0.921019822217427, 0.8960187732642823, 0.8720157283031534, 0.8559817302332272, 0.8319696942451434, 0.7880065694436952]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.3, 2) => 0.9380218541895188
finished with 12
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.19182934305370525] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19182934305370525, 0.15054965226396402] ***
*** starting iteration: 2; err: [Inf, 0.19182934305370525, 0.15054965226396402] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19182934305370525, 0.15054965226396402, 0.14601021601892616] ***
*** starting iteration: 3; err: [Inf, 0.19182934305370525, 0.15054965226396402, 0.14601021601892616] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19182934305370525, 0.15054965226396402, 0.14601021601892616, 0.14519900843702457] ***
*** finished computation of 7 references, err: [Inf, 0.19182934305370525, 0.15054965226396402, 0.14601021601892616, 0.14519900843702457] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 92, 24]]
** centroid: 1, normalized-entropy: 0.7355085815538399, [(2, 92), (3, 24)]
*** center 2: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [75, 11, 0]]
** centroid: 3, normalized-entropy: 0.5516699920020824, [(1, 75), (2, 11)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [69, 24, 0]]
** centroid: 4, normalized-entropy: 0.8238116333123173, [(1, 69), (2, 24)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [93, 8, 0]]
** centroid: 5, normalized-entropy: 0.39938208242459744, [(1, 93), (2, 8)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 98, 2]]
** centroid: 6, normalized-entropy: 0.14144054254182067, [(2, 98), (3, 2)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [91, 3, 0]]
** centroid: 7, normalized-entropy: 0.2039058755048202, [(1, 91), (2, 3)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1969997047906046] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1969997047906046, 0.1520412975120759] ***
*** starting iteration: 2; err: [Inf, 0.1969997047906046, 0.1520412975120759] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1969997047906046, 0.1520412975120759, 0.14724395919843916] ***
*** starting iteration: 3; err: [Inf, 0.1969997047906046, 0.1520412975120759, 0.14724395919843916] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1969997047906046, 0.1520412975120759, 0.14724395919843916, 0.14657729386590768] ***
*** finished computation of 7 references, err: [Inf, 0.1969997047906046, 0.1520412975120759, 0.14724395919843916, 0.14657729386590768] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [106, 7, 0]]
** centroid: 1, normalized-entropy: 0.3351253992461406, [(1, 106), (2, 7)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 94, 20]]
** centroid: 2, normalized-entropy: 0.6699960320994334, [(2, 94), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [61, 21, 0]]
** centroid: 3, normalized-entropy: 0.8208002549877175, [(1, 61), (2, 21)]
*** center 4: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [5, 96, 0]]
** centroid: 5, normalized-entropy: 0.2842902892501332, [(1, 5), (2, 96)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [53, 39, 0]]
** centroid: 6, normalized-entropy: 0.9832307535844343, [(1, 53), (2, 39)]
*** center 7: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1931704322093989] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1931704322093989, 0.15095930396281798] ***
*** starting iteration: 2; err: [Inf, 0.1931704322093989, 0.15095930396281798] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1931704322093989, 0.15095930396281798, 0.14613149873074563] ***
*** starting iteration: 3; err: [Inf, 0.1931704322093989, 0.15095930396281798, 0.14613149873074563] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1931704322093989, 0.15095930396281798, 0.14613149873074563, 0.14501553712583062] ***
*** starting iteration: 4; err: [Inf, 0.1931704322093989, 0.15095930396281798, 0.14613149873074563, 0.14501553712583062] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1931704322093989, 0.15095930396281798, 0.14613149873074563, 0.14501553712583062, 0.144608783937266] ***
*** finished computation of 7 references, err: [Inf, 0.1931704322093989, 0.15095930396281798, 0.14613149873074563, 0.14501553712583062, 0.144608783937266] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [37, 67, 0]]
** centroid: 1, normalized-entropy: 0.9391151961320356, [(1, 37), (2, 67)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [66, 16, 0]]
** centroid: 2, normalized-entropy: 0.7120640548905481, [(1, 66), (2, 16)]
*** center 3: selecting labels [1] (freq >= 1) [from [99, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 74, 22]]
** centroid: 4, normalized-entropy: 0.7765557854444601, [(2, 74), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [91, 7, 0]]
** centroid: 5, normalized-entropy: 0.3712323266408756, [(1, 91), (2, 7)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 91, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 12)
[0.9390138641635648, 0.9380218541895188, 0.9319918721116326, 0.9310358262454071, 0.928014841188494, 0.9260368152583721, 0.921019822217427, 0.8960187732642823, 0.8720157283031534, 0.8559817302332272, 0.8319696942451434, 0.7880065694436952]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 1) => 0.9390138641635648
finished with 12
iteration 4 finished
generating 4 configurations using top 12 configurations, starting with 12)
[0.9390138641635648, 0.9380218541895188, 0.9319918721116326, 0.9310358262454071, 0.928014841188494, 0.9260368152583721, 0.921019822217427, 0.8960187732642823, 0.8720157283031534, 0.8559817302332272, 0.8319696942451434, 0.7880065694436952]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 1) => 0.9390138641635648
finished with 13
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.19434408436867748] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19434408436867748, 0.15791063543056716] ***
*** starting iteration: 2; err: [Inf, 0.19434408436867748, 0.15791063543056716] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19434408436867748, 0.15791063543056716, 0.1518921965164029] ***
*** starting iteration: 3; err: [Inf, 0.19434408436867748, 0.15791063543056716, 0.1518921965164029] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19434408436867748, 0.15791063543056716, 0.1518921965164029, 0.15031834649112266] ***
*** finished computation of 7 references, err: [Inf, 0.19434408436867748, 0.15791063543056716, 0.1518921965164029, 0.15031834649112266] ***
*** center 1: selecting labels [1] (freq >= 2) [from [132, 0, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 76, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 81, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [99, 10, 0]]
** centroid: 4, normalized-entropy: 0.4422615143479816, [(1, 99), (2, 10)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 34, 26]]
** centroid: 5, normalized-entropy: 0.9871377743721862, [(2, 34), (3, 26)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [53, 19, 0]]
** centroid: 6, normalized-entropy: 0.8325582396745668, [(1, 53), (2, 19)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [120, 16, 0]]
** centroid: 7, normalized-entropy: 0.5225593745369407, [(1, 120), (2, 16)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21425931482831354] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21425931482831354, 0.16248096933524156] ***
*** starting iteration: 2; err: [Inf, 0.21425931482831354, 0.16248096933524156] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21425931482831354, 0.16248096933524156, 0.1502674627524481] ***
*** starting iteration: 3; err: [Inf, 0.21425931482831354, 0.16248096933524156, 0.1502674627524481] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21425931482831354, 0.16248096933524156, 0.1502674627524481, 0.14690855599247266] ***
*** finished computation of 7 references, err: [Inf, 0.21425931482831354, 0.16248096933524156, 0.1502674627524481, 0.14690855599247266] ***
*** center 1: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [66, 50, 0]]
** centroid: 2, normalized-entropy: 0.9862325350724501, [(1, 66), (2, 50)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [107, 3, 0]]
** centroid: 3, normalized-entropy: 0.1805246676420577, [(1, 107), (2, 3)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 52, 20]]
** centroid: 4, normalized-entropy: 0.8524051786494784, [(2, 52), (3, 20)]
*** center 5: selecting labels [1] (freq >= 2) [from [101, 1, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [51, 43, 0]]
** centroid: 6, normalized-entropy: 0.9947688847336321, [(1, 51), (2, 43)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 108, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22535949016466034] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22535949016466034, 0.16260380383770817] ***
*** starting iteration: 2; err: [Inf, 0.22535949016466034, 0.16260380383770817] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22535949016466034, 0.16260380383770817, 0.15330423065984825] ***
*** starting iteration: 3; err: [Inf, 0.22535949016466034, 0.16260380383770817, 0.15330423065984825] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22535949016466034, 0.16260380383770817, 0.15330423065984825, 0.15034009344216764] ***
*** finished computation of 7 references, err: [Inf, 0.22535949016466034, 0.16260380383770817, 0.15330423065984825, 0.15034009344216764] ***
*** center 1: selecting labels [1] (freq >= 2) [from [107, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 74, 6]]
** centroid: 2, normalized-entropy: 0.3843115441264972, [(2, 74), (3, 6)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [35, 67, 0]]
** centroid: 3, normalized-entropy: 0.9277892502681174, [(1, 35), (2, 67)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [74, 16, 0]]
** centroid: 4, normalized-entropy: 0.6751914401458716, [(1, 74), (2, 16)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [33, 56, 0]]
** centroid: 5, normalized-entropy: 0.951274087437692, [(1, 33), (2, 56)]
*** center 6: selecting labels [1] (freq >= 2) [from [141, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 42, 16]]
** centroid: 7, normalized-entropy: 0.8497511372532974, [(2, 42), (3, 16)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 13)
[0.9390138641635648, 0.9380218541895188, 0.9319918721116326, 0.9310358262454071, 0.928014841188494, 0.9260368152583721, 0.921019822217427, 0.9149988311664958, 0.8960187732642823, 0.8720157283031534, 0.8559817302332272, 0.8319696942451434, 0.7880065694436952]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 1) => 0.9390138641635648
finished with 15
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.34483174436694913] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34483174436694913, 0.25028433707786035] ***
*** finished computation of 3 references, err: [Inf, 0.34483174436694913, 0.25028433707786035] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [216, 39, 0]]
** centroid: 1, normalized-entropy: 0.617151919200282, [(1, 216), (2, 39)]
*** center 2: selecting labels [1] (freq >= 2) [from [169, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [19, 197, 26]]
** centroid: 3, normalized-entropy: 0.5524510596694269, [(1, 19), (2, 197), (3, 26)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3552677629367522] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3552677629367522, 0.250277527679188] ***
*** finished computation of 3 references, err: [Inf, 0.3552677629367522, 0.250277527679188] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [161, 51, 0]]
** centroid: 1, normalized-entropy: 0.7959803139169748, [(1, 161), (2, 51)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [92, 206, 20]]
** centroid: 2, normalized-entropy: 0.7409881265781201, [(1, 92), (2, 206), (3, 20)]
*** center 3: selecting labels [1] (freq >= 2) [from [137, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3154982474808493] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3154982474808493, 0.286139540178799] ***
*** finished computation of 3 references, err: [Inf, 0.3154982474808493, 0.286139540178799] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [85, 51, 0]]
** centroid: 1, normalized-entropy: 0.954434002924965, [(1, 85), (2, 51)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [166, 149, 22]]
** centroid: 2, normalized-entropy: 0.8081061748049772, [(1, 166), (2, 149), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [139, 55, 0]]
** centroid: 3, normalized-entropy: 0.8601829795457678, [(1, 139), (2, 55)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3780907196364737] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3780907196364737, 0.31758379023354333] ***
*** finished computation of 3 references, err: [Inf, 0.3780907196364737, 0.31758379023354333] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [135, 164, 26]]
** centroid: 1, normalized-entropy: 0.8302571640016274, [(1, 135), (2, 164), (3, 26)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [84, 72, 0]]
** centroid: 2, normalized-entropy: 0.9957274520849256, [(1, 84), (2, 72)]
*** center 3: selecting labels [1] (freq >= 2) [from [185, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4554586375838724] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4554586375838724, 0.31478785951182] ***
*** finished computation of 3 references, err: [Inf, 0.4554586375838724, 0.31478785951182] ***
*** center 1: selecting labels [1] (freq >= 2) [from [183, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [116, 197, 20]]
** centroid: 2, normalized-entropy: 0.7708037167051964, [(1, 116), (2, 197), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [91, 60, 0]]
** centroid: 3, normalized-entropy: 0.9693799181688374, [(1, 91), (2, 60)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3729469521415198] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3729469521415198, 0.31142587235931873] ***
*** finished computation of 3 references, err: [Inf, 0.3729469521415198, 0.31142587235931873] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 149, 22]]
** centroid: 1, normalized-entropy: 0.5537378648339526, [(2, 149), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [102, 75, 0]]
** centroid: 2, normalized-entropy: 0.9831491282282879, [(1, 102), (2, 75)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [288, 31, 0]]
** centroid: 3, normalized-entropy: 0.4599878926445587, [(1, 288), (2, 31)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 15)
[0.9390138641635648, 0.9380218541895188, 0.9319918721116326, 0.9310358262454071, 0.928014841188494, 0.9260368152583721, 0.921019822217427, 0.9149988311664958, 0.8960187732642823, 0.8810457163750577, 0.8720157283031534, 0.8699987412562263, 0.8559817302332272, 0.8319696942451434, 0.7880065694436952]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 1) => 0.9390138641635648
finished with 15
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9390138641635648, 0.9380218541895188, 0.9319918721116326, 0.9310358262454071, 0.928014841188494, 0.9260368152583721, 0.921019822217427, 0.9149988311664958, 0.8960187732642823, 0.8810457163750577, 0.8720157283031534, 0.8699987412562263, 0.8559817302332272, 0.8319696942451434, 0.7880065694436952]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 1) => 0.9390138641635648
finished with 17
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.3272688279834551] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3272688279834551, 0.24063523889689878] ***
*** finished computation of 3 references, err: [Inf, 0.3272688279834551, 0.24063523889689878] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 189, 26]]
** centroid: 1, normalized-entropy: 0.5320288921501529, [(2, 189), (3, 26)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [226, 36, 0]]
** centroid: 2, normalized-entropy: 0.577401071927696, [(1, 226), (2, 36)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [178, 11, 0]]
** centroid: 3, normalized-entropy: 0.32026200878705646, [(1, 178), (2, 11)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.36079476745149913] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36079476745149913, 0.27504264310454724] ***
*** finished computation of 3 references, err: [Inf, 0.36079476745149913, 0.27504264310454724] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [54, 215, 20]]
** centroid: 1, normalized-entropy: 0.6538300422717374, [(1, 54), (2, 215), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [202, 42, 0]]
** centroid: 2, normalized-entropy: 0.6625567995605484, [(1, 202), (2, 42)]
*** center 3: selecting labels [1] (freq >= 2) [from [134, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4217164449901997] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4217164449901997, 0.24644989046795962] ***
*** finished computation of 3 references, err: [Inf, 0.4217164449901997, 0.24644989046795962] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [217, 27, 0]]
** centroid: 1, normalized-entropy: 0.5018906982232728, [(1, 217), (2, 27)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [171, 2, 0]]
** centroid: 2, normalized-entropy: 0.09097053951251362, [(1, 171), (2, 2)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [2, 226, 22]]
** centroid: 3, normalized-entropy: 0.3128859641619504, [(1, 2), (2, 226), (3, 22)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.40342613779198566] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40342613779198566, 0.3061164381281772] ***
*** finished computation of 3 references, err: [Inf, 0.40342613779198566, 0.3061164381281772] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [18, 200, 26]]
** centroid: 1, normalized-entropy: 0.540579034792926, [(1, 18), (2, 200), (3, 26)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [145, 34, 0]]
** centroid: 2, normalized-entropy: 0.7013545780761166, [(1, 145), (2, 34)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [241, 2, 0]]
** centroid: 3, normalized-entropy: 0.06881937590446091, [(1, 241), (2, 2)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4402785138234027] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4402785138234027, 0.30834895397803147] ***
*** finished computation of 3 references, err: [Inf, 0.4402785138234027, 0.30834895397803147] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [50, 157, 20]]
** centroid: 1, normalized-entropy: 0.7302655509902174, [(1, 50), (2, 157), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [167, 100, 0]]
** centroid: 2, normalized-entropy: 0.9540883068911525, [(1, 167), (2, 100)]
*** center 3: selecting labels [1] (freq >= 2) [from [173, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.40335593054928387] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40335593054928387, 0.305370247161862] ***
*** finished computation of 3 references, err: [Inf, 0.40335593054928387, 0.305370247161862] ***
*** center 1: selecting labels [1] (freq >= 2) [from [191, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [169, 48, 0]]
** centroid: 2, normalized-entropy: 0.7623492749960707, [(1, 169), (2, 48)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [30, 207, 22]]
** centroid: 3, normalized-entropy: 0.5809604406658697, [(1, 30), (2, 207), (3, 22)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 17)
[0.9390138641635648, 0.9380218541895188, 0.9319918721116326, 0.9310358262454071, 0.928014841188494, 0.9260368152583721, 0.921019822217427, 0.9149988311664958, 0.8960187732642823, 0.8889728051404697, 0.8810457163750577, 0.8720157283031534, 0.8699987412562263, 0.866965768163373, 0.8559817302332272, 0.8319696942451434, 0.7880065694436952]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 1) => 0.9390138641635648
finished with 17
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.19976295608654618] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19976295608654618, 0.1563655110304244] ***
*** starting iteration: 2; err: [Inf, 0.19976295608654618, 0.1563655110304244] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19976295608654618, 0.1563655110304244, 0.1493082175295276] ***
*** starting iteration: 3; err: [Inf, 0.19976295608654618, 0.1563655110304244, 0.1493082175295276] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19976295608654618, 0.1563655110304244, 0.1493082175295276, 0.14713719596341251] ***
*** starting iteration: 4; err: [Inf, 0.19976295608654618, 0.1563655110304244, 0.1493082175295276, 0.14713719596341251] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19976295608654618, 0.1563655110304244, 0.1493082175295276, 0.14713719596341251, 0.14642501616757364] ***
*** finished computation of 7 references, err: [Inf, 0.19976295608654618, 0.1563655110304244, 0.1493082175295276, 0.14713719596341251, 0.14642501616757364] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [107, 36, 0]]
** centroid: 1, normalized-entropy: 0.8140372976396064, [(1, 107), (2, 36)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [95, 17, 0]]
** centroid: 2, normalized-entropy: 0.6142910730156771, [(1, 95), (2, 17)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 142, 34]]
** centroid: 3, normalized-entropy: 0.7080803256135676, [(2, 142), (3, 34)]
*** center 4: selecting labels [1] (freq >= 1) [from [146, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [148, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 127, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [96, 52, 0]]
** centroid: 7, normalized-entropy: 0.9352691398683568, [(1, 96), (2, 52)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1982042520493269] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1982042520493269, 0.15428571579791606] ***
*** starting iteration: 2; err: [Inf, 0.1982042520493269, 0.15428571579791606] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1982042520493269, 0.15428571579791606, 0.14847755721677094] ***
*** starting iteration: 3; err: [Inf, 0.1982042520493269, 0.15428571579791606, 0.14847755721677094] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1982042520493269, 0.15428571579791606, 0.14847755721677094, 0.14709286217205225] ***
*** starting iteration: 4; err: [Inf, 0.1982042520493269, 0.15428571579791606, 0.14847755721677094, 0.14709286217205225] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1982042520493269, 0.15428571579791606, 0.14847755721677094, 0.14709286217205225, 0.14602942075394093] ***
*** starting iteration: 5; err: [Inf, 0.1982042520493269, 0.15428571579791606, 0.14847755721677094, 0.14709286217205225, 0.14602942075394093] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1982042520493269, 0.15428571579791606, 0.14847755721677094, 0.14709286217205225, 0.14602942075394093, 0.1453314107172191] ***
*** finished computation of 7 references, err: [Inf, 0.1982042520493269, 0.15428571579791606, 0.14847755721677094, 0.14709286217205225, 0.14602942075394093, 0.1453314107172191] ***
*** center 1: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [48, 9, 0]]
** centroid: 2, normalized-entropy: 0.6292492238560344, [(1, 48), (2, 9)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 58, 16]]
** centroid: 3, normalized-entropy: 0.7531979910695015, [(2, 58), (3, 16)]
*** center 4: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [3, 63, 0]]
** centroid: 5, normalized-entropy: 0.2667649878030262, [(1, 3), (2, 63)]
*** center 6: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 53, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1959110837839544] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1959110837839544, 0.15280494828149677] ***
*** starting iteration: 2; err: [Inf, 0.1959110837839544, 0.15280494828149677] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1959110837839544, 0.15280494828149677, 0.14847495257109403] ***
*** starting iteration: 3; err: [Inf, 0.1959110837839544, 0.15280494828149677, 0.14847495257109403] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1959110837839544, 0.15280494828149677, 0.14847495257109403, 0.1475354258492589] ***
*** finished computation of 7 references, err: [Inf, 0.1959110837839544, 0.15280494828149677, 0.14847495257109403, 0.1475354258492589] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 66, 18]]
** centroid: 1, normalized-entropy: 0.7495952572594798, [(2, 66), (3, 18)]
*** center 2: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [42, 33, 0]]
** centroid: 4, normalized-entropy: 0.9895875212220558, [(1, 42), (2, 33)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [41, 20, 0]]
** centroid: 5, normalized-entropy: 0.9127341558073343, [(1, 41), (2, 20)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 63, 0]]
** centroid: 6, normalized-entropy: 0.11611507530476962, [(1, 1), (2, 63)]
*** center 7: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20296141865476966] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20296141865476966, 0.15389134900458157] ***
*** starting iteration: 2; err: [Inf, 0.20296141865476966, 0.15389134900458157] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20296141865476966, 0.15389134900458157, 0.14902695763669907] ***
*** starting iteration: 3; err: [Inf, 0.20296141865476966, 0.15389134900458157, 0.14902695763669907] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20296141865476966, 0.15389134900458157, 0.14902695763669907, 0.14838248967006804] ***
*** finished computation of 7 references, err: [Inf, 0.20296141865476966, 0.15389134900458157, 0.14902695763669907, 0.14838248967006804] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [43, 38, 0]]
** centroid: 1, normalized-entropy: 0.9972496329704711, [(1, 43), (2, 38)]
*** center 2: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 75, 19]]
** centroid: 4, normalized-entropy: 0.7261630586710504, [(2, 75), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [44, 21, 0]]
** centroid: 5, normalized-entropy: 0.9076961653608385, [(1, 44), (2, 21)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [3, 55, 0]]
** centroid: 6, normalized-entropy: 0.29367630985136944, [(1, 3), (2, 55)]
*** center 7: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18939590511471033] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18939590511471033, 0.14949023767374456] ***
*** starting iteration: 2; err: [Inf, 0.18939590511471033, 0.14949023767374456] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18939590511471033, 0.14949023767374456, 0.1455520164575428] ***
*** starting iteration: 3; err: [Inf, 0.18939590511471033, 0.14949023767374456, 0.1455520164575428] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18939590511471033, 0.14949023767374456, 0.1455520164575428, 0.14443256139755248] ***
*** starting iteration: 4; err: [Inf, 0.18939590511471033, 0.14949023767374456, 0.1455520164575428, 0.14443256139755248] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18939590511471033, 0.14949023767374456, 0.1455520164575428, 0.14443256139755248, 0.14390157805010675] ***
*** finished computation of 7 references, err: [Inf, 0.18939590511471033, 0.14949023767374456, 0.1455520164575428, 0.14443256139755248, 0.14390157805010675] ***
*** center 1: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 49, 16]]
** centroid: 2, normalized-entropy: 0.8051250074646822, [(2, 49), (3, 16)]
*** center 3: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [44, 38, 0]]
** centroid: 4, normalized-entropy: 0.9961344835095798, [(1, 44), (2, 38)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [21, 49, 0]]
** centroid: 5, normalized-entropy: 0.8812908992306927, [(1, 21), (2, 49)]
*** center 6: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 55, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18452759811282157] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18452759811282157, 0.14907935220561921] ***
*** starting iteration: 2; err: [Inf, 0.18452759811282157, 0.14907935220561921] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18452759811282157, 0.14907935220561921, 0.1454858970157802] ***
*** starting iteration: 3; err: [Inf, 0.18452759811282157, 0.14907935220561921, 0.1454858970157802] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18452759811282157, 0.14907935220561921, 0.1454858970157802, 0.14323577642720192] ***
*** starting iteration: 4; err: [Inf, 0.18452759811282157, 0.14907935220561921, 0.1454858970157802, 0.14323577642720192] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18452759811282157, 0.14907935220561921, 0.1454858970157802, 0.14323577642720192, 0.1421513970270753] ***
*** starting iteration: 5; err: [Inf, 0.18452759811282157, 0.14907935220561921, 0.1454858970157802, 0.14323577642720192, 0.1421513970270753] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18452759811282157, 0.14907935220561921, 0.1454858970157802, 0.14323577642720192, 0.1421513970270753, 0.14153149075061083] ***
*** finished computation of 7 references, err: [Inf, 0.18452759811282157, 0.14907935220561921, 0.1454858970157802, 0.14323577642720192, 0.1421513970270753, 0.14153149075061083] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [38, 45, 0]]
** centroid: 1, normalized-entropy: 0.9948631079048572, [(1, 38), (2, 45)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [51, 24, 0]]
** centroid: 2, normalized-entropy: 0.9043814577244941, [(1, 51), (2, 24)]
*** center 3: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 93, 10]]
** centroid: 4, normalized-entropy: 0.4596942127956402, [(2, 93), (3, 10)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [21, 27, 0]]
** centroid: 5, normalized-entropy: 0.9886994082884974, [(1, 21), (2, 27)]
*** center 6: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1999536413885653] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1999536413885653, 0.14591944712214172] ***
*** starting iteration: 2; err: [Inf, 0.1999536413885653, 0.14591944712214172] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1999536413885653, 0.14591944712214172, 0.14262378262728453] ***
*** starting iteration: 3; err: [Inf, 0.1999536413885653, 0.14591944712214172, 0.14262378262728453] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1999536413885653, 0.14591944712214172, 0.14262378262728453, 0.14245501762069762] ***
*** finished computation of 7 references, err: [Inf, 0.1999536413885653, 0.14591944712214172, 0.14262378262728453, 0.14245501762069762] ***
*** center 1: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 56, 18]]
** centroid: 2, normalized-entropy: 0.8003922080453356, [(2, 56), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [42, 9, 0]]
** centroid: 3, normalized-entropy: 0.6722948170756378, [(1, 42), (2, 9)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [63, 24, 0]]
** centroid: 4, normalized-entropy: 0.8497511372532974, [(1, 63), (2, 24)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [26, 41, 0]]
** centroid: 5, normalized-entropy: 0.9635359835770286, [(1, 26), (2, 41)]
*** center 6: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 53, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1852890574876219] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1852890574876219, 0.1507570772692561] ***
*** starting iteration: 2; err: [Inf, 0.1852890574876219, 0.1507570772692561] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1852890574876219, 0.1507570772692561, 0.14478802579035982] ***
*** starting iteration: 3; err: [Inf, 0.1852890574876219, 0.1507570772692561, 0.14478802579035982] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1852890574876219, 0.1507570772692561, 0.14478802579035982, 0.14366591435112058] ***
*** starting iteration: 4; err: [Inf, 0.1852890574876219, 0.1507570772692561, 0.14478802579035982, 0.14366591435112058] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1852890574876219, 0.1507570772692561, 0.14478802579035982, 0.14366591435112058, 0.14315003915317356] ***
*** finished computation of 7 references, err: [Inf, 0.1852890574876219, 0.1507570772692561, 0.14478802579035982, 0.14366591435112058, 0.14315003915317356] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [76, 4, 0]]
** centroid: 1, normalized-entropy: 0.2863969571159561, [(1, 76), (2, 4)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [53, 10, 0]]
** centroid: 2, normalized-entropy: 0.6312630180916119, [(1, 53), (2, 10)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 56, 16]]
** centroid: 3, normalized-entropy: 0.7642045065086204, [(2, 56), (3, 16)]
*** center 4: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [4, 72, 0]]
** centroid: 5, normalized-entropy: 0.2974722489192896, [(1, 4), (2, 72)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [35, 47, 0]]
** centroid: 6, normalized-entropy: 0.9844961311800012, [(1, 35), (2, 47)]
*** center 7: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19322422283515334] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19322422283515334, 0.14836835069488735] ***
*** starting iteration: 2; err: [Inf, 0.19322422283515334, 0.14836835069488735] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19322422283515334, 0.14836835069488735, 0.14543713615834714] ***
*** starting iteration: 3; err: [Inf, 0.19322422283515334, 0.14836835069488735, 0.14543713615834714] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19322422283515334, 0.14836835069488735, 0.14543713615834714, 0.14408361428184435] ***
*** starting iteration: 4; err: [Inf, 0.19322422283515334, 0.14836835069488735, 0.14543713615834714, 0.14408361428184435] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19322422283515334, 0.14836835069488735, 0.14543713615834714, 0.14408361428184435, 0.14329506235942244] ***
*** finished computation of 7 references, err: [Inf, 0.19322422283515334, 0.14836835069488735, 0.14543713615834714, 0.14408361428184435, 0.14329506235942244] ***
*** center 1: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 51, 24]]
** centroid: 2, normalized-entropy: 0.9043814577244941, [(2, 51), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [45, 34, 0]]
** centroid: 3, normalized-entropy: 0.985969027451193, [(1, 45), (2, 34)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [21, 50, 0]]
** centroid: 4, normalized-entropy: 0.8760643678555242, [(1, 21), (2, 50)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [15, 61, 0]]
** centroid: 5, normalized-entropy: 0.7166336117927455, [(1, 15), (2, 61)]
*** center 6: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19464668853767217] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19464668853767217, 0.15610228030383586] ***
*** starting iteration: 2; err: [Inf, 0.19464668853767217, 0.15610228030383586] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19464668853767217, 0.15610228030383586, 0.15154701210185886] ***
*** starting iteration: 3; err: [Inf, 0.19464668853767217, 0.15610228030383586, 0.15154701210185886] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19464668853767217, 0.15610228030383586, 0.15154701210185886, 0.15094075499568135] ***
*** finished computation of 7 references, err: [Inf, 0.19464668853767217, 0.15610228030383586, 0.15154701210185886, 0.15094075499568135] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [103, 13, 0]]
** centroid: 1, normalized-entropy: 0.5061252137852816, [(1, 103), (2, 13)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [45, 14, 0]]
** centroid: 2, normalized-entropy: 0.7905013842153699, [(1, 45), (2, 14)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 30, 21]]
** centroid: 3, normalized-entropy: 0.9774178175281716, [(2, 30), (3, 21)]
*** center 4: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [8, 49, 0]]
** centroid: 5, normalized-entropy: 0.5851569902762294, [(1, 8), (2, 49)]
*** center 6: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 69, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1888051333911717] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1888051333911717, 0.1504347854712978] ***
*** starting iteration: 2; err: [Inf, 0.1888051333911717, 0.1504347854712978] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1888051333911717, 0.1504347854712978, 0.14741997216874733] ***
*** starting iteration: 3; err: [Inf, 0.1888051333911717, 0.1504347854712978, 0.14741997216874733] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1888051333911717, 0.1504347854712978, 0.14741997216874733, 0.1470173610560596] ***
*** finished computation of 7 references, err: [Inf, 0.1888051333911717, 0.1504347854712978, 0.14741997216874733, 0.1470173610560596] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 63, 8]]
** centroid: 1, normalized-entropy: 0.5079353563991225, [(2, 63), (3, 8)]
*** center 2: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [52, 22, 0]]
** centroid: 3, normalized-entropy: 0.8779620013943914, [(1, 52), (2, 22)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [74, 2, 0]]
** centroid: 4, normalized-entropy: 0.17556502585750275, [(1, 74), (2, 2)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 65, 6]]
** centroid: 5, normalized-entropy: 0.4178642624458583, [(2, 65), (3, 6)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [80, 7, 0]]
** centroid: 6, normalized-entropy: 0.40379715049939235, [(1, 80), (2, 7)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [36, 14, 0]]
** centroid: 7, normalized-entropy: 0.8554508105601307, [(1, 36), (2, 14)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18701795925199985] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18701795925199985, 0.15123815743252636] ***
*** starting iteration: 2; err: [Inf, 0.18701795925199985, 0.15123815743252636] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18701795925199985, 0.15123815743252636, 0.14721000749617816] ***
*** starting iteration: 3; err: [Inf, 0.18701795925199985, 0.15123815743252636, 0.14721000749617816] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18701795925199985, 0.15123815743252636, 0.14721000749617816, 0.1464059757720679] ***
*** finished computation of 7 references, err: [Inf, 0.18701795925199985, 0.15123815743252636, 0.14721000749617816, 0.1464059757720679] ***
*** center 1: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 65, 14]]
** centroid: 2, normalized-entropy: 0.6739468651941155, [(2, 65), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [54, 19, 0]]
** centroid: 3, normalized-entropy: 0.8271595195340525, [(1, 54), (2, 19)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [7, 56, 0]]
** centroid: 4, normalized-entropy: 0.5032583347756457, [(1, 7), (2, 56)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [28, 44, 0]]
** centroid: 5, normalized-entropy: 0.9640787648082293, [(1, 28), (2, 44)]
*** center 6: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [51, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1998378645144403] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1998378645144403, 0.15336572217848152] ***
*** starting iteration: 2; err: [Inf, 0.1998378645144403, 0.15336572217848152] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1998378645144403, 0.15336572217848152, 0.1504268168937415] ***
*** starting iteration: 3; err: [Inf, 0.1998378645144403, 0.15336572217848152, 0.1504268168937415] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1998378645144403, 0.15336572217848152, 0.1504268168937415, 0.15023806660622357] ***
*** finished computation of 7 references, err: [Inf, 0.1998378645144403, 0.15336572217848152, 0.1504268168937415, 0.15023806660622357] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 69, 23]]
** centroid: 1, normalized-entropy: 0.8112781244591328, [(2, 69), (3, 23)]
*** center 2: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [47, 11, 0]]
** centroid: 3, normalized-entropy: 0.7007495497162061, [(1, 47), (2, 11)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [64, 18, 0]]
** centroid: 4, normalized-entropy: 0.7592757847892834, [(1, 64), (2, 18)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [39, 18, 0]]
** centroid: 5, normalized-entropy: 0.8997437586982626, [(1, 39), (2, 18)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 68, 0]]
** centroid: 6, normalized-entropy: 0.18717625687320805, [(1, 2), (2, 68)]
*** center 7: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1947540514729917] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1947540514729917, 0.1511691140900366] ***
*** starting iteration: 2; err: [Inf, 0.1947540514729917, 0.1511691140900366] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1947540514729917, 0.1511691140900366, 0.14642891372181474] ***
*** starting iteration: 3; err: [Inf, 0.1947540514729917, 0.1511691140900366, 0.14642891372181474] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1947540514729917, 0.1511691140900366, 0.14642891372181474, 0.14552331448346376] ***
*** finished computation of 7 references, err: [Inf, 0.1947540514729917, 0.1511691140900366, 0.14642891372181474, 0.14552331448346376] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [31, 58, 0]]
** centroid: 1, normalized-entropy: 0.9325538428833382, [(1, 31), (2, 58)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [45, 7, 0]]
** centroid: 2, normalized-entropy: 0.5699613760403499, [(1, 45), (2, 7)]
*** center 3: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 66, 16]]
** centroid: 4, normalized-entropy: 0.7120640548905481, [(2, 66), (3, 16)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [46, 9, 0]]
** centroid: 5, normalized-entropy: 0.6429383500409613, [(1, 46), (2, 9)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 71, 0]]
** centroid: 6, normalized-entropy: 0.1055910363751953, [(1, 1), (2, 71)]
*** center 7: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2027391501776874] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2027391501776874, 0.15340295502729714] ***
*** starting iteration: 2; err: [Inf, 0.2027391501776874, 0.15340295502729714] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2027391501776874, 0.15340295502729714, 0.1494596017068252] ***
*** starting iteration: 3; err: [Inf, 0.2027391501776874, 0.15340295502729714, 0.1494596017068252] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2027391501776874, 0.15340295502729714, 0.1494596017068252, 0.1488050261195749] ***
*** finished computation of 7 references, err: [Inf, 0.2027391501776874, 0.15340295502729714, 0.1494596017068252, 0.1488050261195749] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [82, 12, 0]]
** centroid: 1, normalized-entropy: 0.5509844433017146, [(1, 82), (2, 12)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [65, 1, 0]]
** centroid: 2, normalized-entropy: 0.11327430349709665, [(1, 65), (2, 1)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 37, 19]]
** centroid: 3, normalized-entropy: 0.9241335419915458, [(2, 37), (3, 19)]
*** center 4: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [77, 6, 0]]
** centroid: 5, normalized-entropy: 0.3744088453489206, [(1, 77), (2, 6)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 68, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 48, 0]]
** centroid: 7, normalized-entropy: 0.14372616993938164, [(1, 1), (2, 48)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19325170843489467] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19325170843489467, 0.15239406169578434] ***
*** starting iteration: 2; err: [Inf, 0.19325170843489467, 0.15239406169578434] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19325170843489467, 0.15239406169578434, 0.1484714535586536] ***
*** starting iteration: 3; err: [Inf, 0.19325170843489467, 0.15239406169578434, 0.1484714535586536] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19325170843489467, 0.15239406169578434, 0.1484714535586536, 0.14750168295018376] ***
*** finished computation of 7 references, err: [Inf, 0.19325170843489467, 0.15239406169578434, 0.1484714535586536, 0.14750168295018376] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [5, 68, 0]]
** centroid: 1, normalized-entropy: 0.3602750564216625, [(1, 5), (2, 68)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [53, 25, 0]]
** centroid: 2, normalized-entropy: 0.9049382594235603, [(1, 53), (2, 25)]
*** center 3: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 68, 15]]
** centroid: 4, normalized-entropy: 0.6816559115981193, [(2, 68), (3, 15)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [48, 23, 0]]
** centroid: 5, normalized-entropy: 0.9086185980409245, [(1, 48), (2, 23)]
*** center 6: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19526134016364813] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19526134016364813, 0.15615749190934003] ***
*** starting iteration: 2; err: [Inf, 0.19526134016364813, 0.15615749190934003] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19526134016364813, 0.15615749190934003, 0.1493156525939703] ***
*** starting iteration: 3; err: [Inf, 0.19526134016364813, 0.15615749190934003, 0.1493156525939703] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19526134016364813, 0.15615749190934003, 0.1493156525939703, 0.1469370212412905] ***
*** starting iteration: 4; err: [Inf, 0.19526134016364813, 0.15615749190934003, 0.1493156525939703, 0.1469370212412905] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19526134016364813, 0.15615749190934003, 0.1493156525939703, 0.1469370212412905, 0.14563449322618544] ***
*** starting iteration: 5; err: [Inf, 0.19526134016364813, 0.15615749190934003, 0.1493156525939703, 0.1469370212412905, 0.14563449322618544] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19526134016364813, 0.15615749190934003, 0.1493156525939703, 0.1469370212412905, 0.14563449322618544, 0.144994969651103] ***
*** finished computation of 7 references, err: [Inf, 0.19526134016364813, 0.15615749190934003, 0.1493156525939703, 0.1469370212412905, 0.14563449322618544, 0.144994969651103] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 79, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [38, 29, 0]]
** centroid: 2, normalized-entropy: 0.9869444983748495, [(1, 38), (2, 29)]
*** center 3: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 68, 15]]
** centroid: 4, normalized-entropy: 0.6816559115981193, [(2, 68), (3, 15)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [73, 5, 0]]
** centroid: 5, normalized-entropy: 0.34351974100740135, [(1, 73), (2, 5)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [63, 1, 0]]
** centroid: 6, normalized-entropy: 0.11611507530476962, [(1, 63), (2, 1)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [49, 15, 0]]
** centroid: 7, normalized-entropy: 0.7855602922535471, [(1, 49), (2, 15)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1850843339394778] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1850843339394778, 0.15866465185396372] ***
*** starting iteration: 2; err: [Inf, 0.1850843339394778, 0.15866465185396372] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1850843339394778, 0.15866465185396372, 0.15450783162564038] ***
*** starting iteration: 3; err: [Inf, 0.1850843339394778, 0.15866465185396372, 0.15450783162564038] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1850843339394778, 0.15866465185396372, 0.15450783162564038, 0.1531505101658404] ***
*** starting iteration: 4; err: [Inf, 0.1850843339394778, 0.15866465185396372, 0.15450783162564038, 0.1531505101658404] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1850843339394778, 0.15866465185396372, 0.15450783162564038, 0.1531505101658404, 0.15245999457733705] ***
*** finished computation of 7 references, err: [Inf, 0.1850843339394778, 0.15866465185396372, 0.15450783162564038, 0.1531505101658404, 0.15245999457733705] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 95, 18]]
** centroid: 1, normalized-entropy: 0.6326131852700402, [(2, 95), (3, 18)]
*** center 2: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [50, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [45, 23, 0]]
** centroid: 4, normalized-entropy: 0.9231199835423002, [(1, 45), (2, 23)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [70, 4, 0]]
** centroid: 5, normalized-entropy: 0.30337483608641397, [(1, 70), (2, 4)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [69, 6, 0]]
** centroid: 6, normalized-entropy: 0.4021791902022729, [(1, 69), (2, 6)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [4, 61, 0]]
** centroid: 7, normalized-entropy: 0.33352200393097675, [(1, 4), (2, 61)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19580093909241258] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19580093909241258, 0.15157965890970082] ***
*** starting iteration: 2; err: [Inf, 0.19580093909241258, 0.15157965890970082] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19580093909241258, 0.15157965890970082, 0.14634905913472177] ***
*** starting iteration: 3; err: [Inf, 0.19580093909241258, 0.15157965890970082, 0.14634905913472177] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19580093909241258, 0.15157965890970082, 0.14634905913472177, 0.1443744855709374] ***
*** starting iteration: 4; err: [Inf, 0.19580093909241258, 0.15157965890970082, 0.14634905913472177, 0.1443744855709374] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19580093909241258, 0.15157965890970082, 0.14634905913472177, 0.1443744855709374, 0.14356805138196796] ***
*** finished computation of 7 references, err: [Inf, 0.19580093909241258, 0.15157965890970082, 0.14634905913472177, 0.1443744855709374, 0.14356805138196796] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 57, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [47, 28, 0]]
** centroid: 3, normalized-entropy: 0.9531971725430559, [(1, 47), (2, 28)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [72, 8, 0]]
** centroid: 4, normalized-entropy: 0.46899559358928133, [(1, 72), (2, 8)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [45, 22, 0]]
** centroid: 5, normalized-entropy: 0.9132401614300725, [(1, 45), (2, 22)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 61, 18]]
** centroid: 6, normalized-entropy: 0.7742411580847273, [(2, 61), (3, 18)]
*** center 7: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20910442959144712] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20910442959144712, 0.1483001888198778] ***
*** starting iteration: 2; err: [Inf, 0.20910442959144712, 0.1483001888198778] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20910442959144712, 0.1483001888198778, 0.14373235106654464] ***
*** starting iteration: 3; err: [Inf, 0.20910442959144712, 0.1483001888198778, 0.14373235106654464] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20910442959144712, 0.1483001888198778, 0.14373235106654464, 0.1433389902189374] ***
*** finished computation of 7 references, err: [Inf, 0.20910442959144712, 0.1483001888198778, 0.14373235106654464, 0.1433389902189374] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [55, 4, 0]]
** centroid: 1, normalized-entropy: 0.3576467062456333, [(1, 55), (2, 4)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [60, 32, 0]]
** centroid: 2, normalized-entropy: 0.9321115676166747, [(1, 60), (2, 32)]
*** center 3: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 66, 9]]
** centroid: 4, normalized-entropy: 0.5293608652873645, [(2, 66), (3, 9)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [36, 35, 0]]
** centroid: 5, normalized-entropy: 0.9998568991526107, [(1, 36), (2, 35)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 53, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18876079067774118] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18876079067774118, 0.1475948817532044] ***
*** starting iteration: 2; err: [Inf, 0.18876079067774118, 0.1475948817532044] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18876079067774118, 0.1475948817532044, 0.14371645640558564] ***
*** starting iteration: 3; err: [Inf, 0.18876079067774118, 0.1475948817532044, 0.14371645640558564] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18876079067774118, 0.1475948817532044, 0.14371645640558564, 0.14321423070225864] ***
*** finished computation of 7 references, err: [Inf, 0.18876079067774118, 0.1475948817532044, 0.14371645640558564, 0.14321423070225864] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 65, 10]]
** centroid: 1, normalized-entropy: 0.5665095065529052, [(2, 65), (3, 10)]
*** center 2: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [60, 18, 0]]
** centroid: 3, normalized-entropy: 0.7793498372920851, [(1, 60), (2, 18)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [73, 2, 0]]
** centroid: 4, normalized-entropy: 0.1773894531859976, [(1, 73), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [69, 12, 0]]
** centroid: 5, normalized-entropy: 0.6051865766334207, [(1, 69), (2, 12)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 70, 6]]
** centroid: 6, normalized-entropy: 0.39845927409523557, [(2, 70), (3, 6)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [43, 8, 0]]
** centroid: 7, normalized-entropy: 0.6267511370265896, [(1, 43), (2, 8)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19579010427370666] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19579010427370666, 0.15526950981933624] ***
*** starting iteration: 2; err: [Inf, 0.19579010427370666, 0.15526950981933624] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19579010427370666, 0.15526950981933624, 0.14950896509550513] ***
*** starting iteration: 3; err: [Inf, 0.19579010427370666, 0.15526950981933624, 0.14950896509550513] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19579010427370666, 0.15526950981933624, 0.14950896509550513, 0.14793900067266078] ***
*** starting iteration: 4; err: [Inf, 0.19579010427370666, 0.15526950981933624, 0.14950896509550513, 0.14793900067266078] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19579010427370666, 0.15526950981933624, 0.14950896509550513, 0.14793900067266078, 0.14730017962493003] ***
*** finished computation of 7 references, err: [Inf, 0.19579010427370666, 0.15526950981933624, 0.14950896509550513, 0.14793900067266078, 0.14730017962493003] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 64, 10]]
** centroid: 1, normalized-entropy: 0.5713549744279549, [(2, 64), (3, 10)]
*** center 2: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [51, 24, 0]]
** centroid: 3, normalized-entropy: 0.9043814577244941, [(1, 51), (2, 24)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [51, 17, 0]]
** centroid: 4, normalized-entropy: 0.8112781244591328, [(1, 51), (2, 17)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [63, 9, 0]]
** centroid: 5, normalized-entropy: 0.5435644431995963, [(1, 63), (2, 9)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 69, 8]]
** centroid: 6, normalized-entropy: 0.481225663841737, [(2, 69), (3, 8)]
*** center 7: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19537330094352365] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19537330094352365, 0.14718684684392064] ***
*** starting iteration: 2; err: [Inf, 0.19537330094352365, 0.14718684684392064] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19537330094352365, 0.14718684684392064, 0.1441896384488791] ***
*** starting iteration: 3; err: [Inf, 0.19537330094352365, 0.14718684684392064, 0.1441896384488791] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19537330094352365, 0.14718684684392064, 0.1441896384488791, 0.14363529851846396] ***
*** finished computation of 7 references, err: [Inf, 0.19537330094352365, 0.14718684684392064, 0.1441896384488791, 0.14363529851846396] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 66, 19]]
** centroid: 1, normalized-entropy: 0.7665599404543365, [(2, 66), (3, 19)]
*** center 2: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [53, 2, 0]]
** centroid: 3, normalized-entropy: 0.22536363912739493, [(1, 53), (2, 2)]
*** center 4: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [60, 9, 0]]
** centroid: 5, normalized-entropy: 0.5586293734521991, [(1, 60), (2, 9)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 64, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [23, 55, 0]]
** centroid: 7, normalized-entropy: 0.8749315876677922, [(1, 23), (2, 55)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19296697647124528] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19296697647124528, 0.147965854967013] ***
*** starting iteration: 2; err: [Inf, 0.19296697647124528, 0.147965854967013] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19296697647124528, 0.147965854967013, 0.14516049006022513] ***
*** starting iteration: 3; err: [Inf, 0.19296697647124528, 0.147965854967013, 0.14516049006022513] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19296697647124528, 0.147965854967013, 0.14516049006022513, 0.14468262880854307] ***
*** finished computation of 7 references, err: [Inf, 0.19296697647124528, 0.147965854967013, 0.14516049006022513, 0.14468262880854307] ***
*** center 1: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 40, 19]]
** centroid: 2, normalized-entropy: 0.9065795484987461, [(2, 40), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [52, 16, 0]]
** centroid: 3, normalized-entropy: 0.787126586201269, [(1, 52), (2, 16)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [81, 12, 0]]
** centroid: 4, normalized-entropy: 0.5547781633412736, [(1, 81), (2, 12)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [11, 53, 0]]
** centroid: 5, normalized-entropy: 0.6619760641115651, [(1, 11), (2, 53)]
*** center 6: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 52, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2206891710832715] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2206891710832715, 0.15548466707020997] ***
*** starting iteration: 2; err: [Inf, 0.2206891710832715, 0.15548466707020997] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2206891710832715, 0.15548466707020997, 0.14927680394425988] ***
*** starting iteration: 3; err: [Inf, 0.2206891710832715, 0.15548466707020997, 0.14927680394425988] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2206891710832715, 0.15548466707020997, 0.14927680394425988, 0.14878288939967751] ***
*** finished computation of 7 references, err: [Inf, 0.2206891710832715, 0.15548466707020997, 0.14927680394425988, 0.14878288939967751] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [34, 30, 0]]
** centroid: 1, normalized-entropy: 0.9971803988942641, [(1, 34), (2, 30)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [43, 4, 0]]
** centroid: 2, normalized-entropy: 0.4199210973757179, [(1, 43), (2, 4)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 67, 18]]
** centroid: 3, normalized-entropy: 0.7448423974714387, [(2, 67), (3, 18)]
*** center 4: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [60, 31, 0]]
** centroid: 5, normalized-entropy: 0.9254482516437047, [(1, 60), (2, 31)]
*** center 6: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 65, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19455635622516274] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19455635622516274, 0.14971676101628692] ***
*** starting iteration: 2; err: [Inf, 0.19455635622516274, 0.14971676101628692] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19455635622516274, 0.14971676101628692, 0.14343321707285941] ***
*** starting iteration: 3; err: [Inf, 0.19455635622516274, 0.14971676101628692, 0.14343321707285941] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19455635622516274, 0.14971676101628692, 0.14343321707285941, 0.1422141536511481] ***
*** starting iteration: 4; err: [Inf, 0.19455635622516274, 0.14971676101628692, 0.14343321707285941, 0.1422141536511481] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19455635622516274, 0.14971676101628692, 0.14343321707285941, 0.1422141536511481, 0.14153651536162942] ***
*** finished computation of 7 references, err: [Inf, 0.19455635622516274, 0.14971676101628692, 0.14343321707285941, 0.1422141536511481, 0.14153651536162942] ***
*** center 1: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 62, 21]]
** centroid: 2, normalized-entropy: 0.8160172973428256, [(2, 62), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [39, 28, 0]]
** centroid: 3, normalized-entropy: 0.9804679314541813, [(1, 39), (2, 28)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [50, 35, 0]]
** centroid: 4, normalized-entropy: 0.9774178175281716, [(1, 50), (2, 35)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [2, 63, 0]]
** centroid: 5, normalized-entropy: 0.19823496409776642, [(1, 2), (2, 63)]
*** center 6: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [52, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19620301903039217] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19620301903039217, 0.15702364011481404] ***
*** starting iteration: 2; err: [Inf, 0.19620301903039217, 0.15702364011481404] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19620301903039217, 0.15702364011481404, 0.1522623585704714] ***
*** starting iteration: 3; err: [Inf, 0.19620301903039217, 0.15702364011481404, 0.1522623585704714] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19620301903039217, 0.15702364011481404, 0.1522623585704714, 0.15129317681863905] ***
*** finished computation of 7 references, err: [Inf, 0.19620301903039217, 0.15702364011481404, 0.1522623585704714, 0.15129317681863905] ***
*** center 1: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 44, 22]]
** centroid: 2, normalized-entropy: 0.9182958340544894, [(2, 44), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [48, 10, 0]]
** centroid: 3, normalized-entropy: 0.6631968402398286, [(1, 48), (2, 10)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [76, 8, 0]]
** centroid: 4, normalized-entropy: 0.45371633918694493, [(1, 76), (2, 8)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [10, 68, 0]]
** centroid: 5, normalized-entropy: 0.552495114325111, [(1, 10), (2, 68)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 60, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19287708664312958] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19287708664312958, 0.1482704168856144] ***
*** starting iteration: 2; err: [Inf, 0.19287708664312958, 0.1482704168856144] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19287708664312958, 0.1482704168856144, 0.14399434951134027] ***
*** starting iteration: 3; err: [Inf, 0.19287708664312958, 0.1482704168856144, 0.14399434951134027] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19287708664312958, 0.1482704168856144, 0.14399434951134027, 0.14353826574597042] ***
*** finished computation of 7 references, err: [Inf, 0.19287708664312958, 0.1482704168856144, 0.14399434951134027, 0.14353826574597042] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 65, 5]]
** centroid: 1, normalized-entropy: 0.3712323266408756, [(2, 65), (3, 5)]
*** center 2: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [50, 18, 0]]
** centroid: 3, normalized-entropy: 0.8337649072106652, [(1, 50), (2, 18)]
*** center 4: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 84, 10]]
** centroid: 5, normalized-entropy: 0.48890859144051524, [(2, 84), (3, 10)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [63, 8, 0]]
** centroid: 6, normalized-entropy: 0.5079353563991225, [(1, 63), (2, 8)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [49, 14, 0]]
** centroid: 7, normalized-entropy: 0.7642045065086204, [(1, 49), (2, 14)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1918380522588268] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1918380522588268, 0.14912169323675334] ***
*** starting iteration: 2; err: [Inf, 0.1918380522588268, 0.14912169323675334] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1918380522588268, 0.14912169323675334, 0.14556275479495526] ***
*** starting iteration: 3; err: [Inf, 0.1918380522588268, 0.14912169323675334, 0.14556275479495526] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1918380522588268, 0.14912169323675334, 0.14556275479495526, 0.14497993425559252] ***
*** finished computation of 7 references, err: [Inf, 0.1918380522588268, 0.14912169323675334, 0.14556275479495526, 0.14497993425559252] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [50, 40, 0]]
** centroid: 1, normalized-entropy: 0.9910760598382222, [(1, 50), (2, 40)]
*** center 2: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 87, 12]]
** centroid: 4, normalized-entropy: 0.5328350630342235, [(2, 87), (3, 12)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [58, 6, 0]]
** centroid: 5, normalized-entropy: 0.44886448872302936, [(1, 58), (2, 6)]
*** center 6: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [7, 55, 0]]
** centroid: 7, normalized-entropy: 0.5086113313826895, [(1, 7), (2, 55)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1853292115330696] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1853292115330696, 0.15073897714912893] ***
*** starting iteration: 2; err: [Inf, 0.1853292115330696, 0.15073897714912893] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1853292115330696, 0.15073897714912893, 0.14515366806602106] ***
*** starting iteration: 3; err: [Inf, 0.1853292115330696, 0.15073897714912893, 0.14515366806602106] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1853292115330696, 0.15073897714912893, 0.14515366806602106, 0.14462996843643486] ***
*** finished computation of 7 references, err: [Inf, 0.1853292115330696, 0.15073897714912893, 0.14515366806602106, 0.14462996843643486] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [5, 66, 0]]
** centroid: 1, normalized-entropy: 0.3674984948272913, [(1, 5), (2, 66)]
*** center 2: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [55, 7, 0]]
** centroid: 3, normalized-entropy: 0.5086113313826895, [(1, 55), (2, 7)]
*** center 4: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 46, 18]]
** centroid: 5, normalized-entropy: 0.8571484374283717, [(2, 46), (3, 18)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [81, 2, 0]]
** centroid: 6, normalized-entropy: 0.1638605128691586, [(1, 81), (2, 2)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 63, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19827159189805388] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19827159189805388, 0.1526347460858524] ***
*** starting iteration: 2; err: [Inf, 0.19827159189805388, 0.1526347460858524] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19827159189805388, 0.1526347460858524, 0.14643289623782038] ***
*** starting iteration: 3; err: [Inf, 0.19827159189805388, 0.1526347460858524, 0.14643289623782038] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19827159189805388, 0.1526347460858524, 0.14643289623782038, 0.14398201340995728] ***
*** starting iteration: 4; err: [Inf, 0.19827159189805388, 0.1526347460858524, 0.14643289623782038, 0.14398201340995728] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19827159189805388, 0.1526347460858524, 0.14643289623782038, 0.14398201340995728, 0.14312479649111629] ***
*** finished computation of 7 references, err: [Inf, 0.19827159189805388, 0.1526347460858524, 0.14643289623782038, 0.14398201340995728, 0.14312479649111629] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [45, 19, 0]]
** centroid: 1, normalized-entropy: 0.877437311089633, [(1, 45), (2, 19)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [47, 19, 0]]
** centroid: 2, normalized-entropy: 0.8659653498997099, [(1, 47), (2, 19)]
*** center 3: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 62, 18]]
** centroid: 4, normalized-entropy: 0.7691928290130138, [(2, 62), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [85, 2, 0]]
** centroid: 5, normalized-entropy: 0.15790637433488164, [(1, 85), (2, 2)]
*** center 6: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [2, 78, 0]]
** centroid: 7, normalized-entropy: 0.1686609314966701, [(1, 2), (2, 78)]
finished with 10 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 374,3 => 34,1 => 592), Dict(2 => 364,3 => 31,1 => 605))
[ Info: ===== scores for single classifier: {"micro_f1":0.941,"precision":0.941,"recall":0.941,"macro_recall":0.9601973783791965,"macro_f1":0.8812700320954076,"accuracy":0.941,"class_f1":{"2":0.9210174029451138,"3":0.7560975609756097,"1":0.9666951323654995},"class_precision":{"2":0.8981723237597912,"3":0.6078431372549019,"1":1.0},"class_recall":{"2":0.945054945054945,"3":1.0,"1":0.9355371900826446}}
[ Info: ===== scores for 1: {"micro_f1":0.968,"precision":0.968,"recall":0.968,"macro_recall":0.9707082751071021,"macro_f1":0.9617850623506428,"accuracy":0.968,"class_f1":{"2":0.9574468085106383,"3":0.9523809523809523,"1":0.9755274261603375},"class_precision":{"2":0.9278350515463918,"3":0.9375,"1":0.996551724137931},"class_recall":{"2":0.989010989010989,"3":0.967741935483871,"1":0.9553719008264463}}
[ Info: ===== scores for 5: {"micro_f1":0.975,"precision":0.975,"recall":0.975,"macro_recall":0.9840371749462659,"macro_f1":0.9719216488141283,"accuracy":0.975,"class_f1":{"2":0.9662618083670715,"3":0.96875,"1":0.9807531380753138},"class_precision":{"2":0.9496021220159151,"3":0.9393939393939394,"1":0.9932203389830508},"class_recall":{"2":0.9835164835164835,"3":1.0,"1":0.968595041322314}}
[ Info: ===== scores for 7: {"micro_f1":0.976,"precision":0.976,"recall":0.976,"macro_recall":0.9849529258620168,"macro_f1":0.9679661526851898,"accuracy":0.976,"class_f1":{"2":0.9676549865229112,"3":0.9538461538461539,"1":0.9823973176865045},"class_precision":{"2":0.9497354497354498,"3":0.9117647058823529,"1":0.9965986394557823},"class_recall":{"2":0.9862637362637363,"3":1.0,"1":0.968595041322314}}
[ Info: ===== scores for 9: {"micro_f1":0.979,"precision":0.979,"recall":0.979,"macro_recall":0.9873353918808464,"macro_f1":0.9701605624270858,"accuracy":0.979,"class_f1":{"2":0.971736204576043,"3":0.9538461538461539,"1":0.9848993288590604},"class_precision":{"2":0.9525065963060686,"3":0.9117647058823529,"1":1.0},"class_recall":{"2":0.9917582417582418,"3":1.0,"1":0.9702479338842975}}
[ Info: ===== scores for 11: {"micro_f1":0.98,"precision":0.98,"recall":0.98,"macro_recall":0.987156782611328,"macro_f1":0.9663052473232748,"accuracy":0.98,"class_f1":{"2":0.9728997289972898,"3":0.9393939393939393,"1":0.9866220735785952},"class_precision":{"2":0.9598930481283422,"3":0.8857142857142857,"1":0.9983079526226735},"class_recall":{"2":0.9862637362637363,"3":1.0,"1":0.9752066115702479}}
(score = 0.967, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.967, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.968, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.968, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.965, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.965, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.973, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.973, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.966, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.966, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.975, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.975, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.973, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.973, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.976, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.976, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.976,"k":7,"kernel":"direct_kernel","dist":"l2_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.976,"precision":0.976,"recall":0.976,"macro_recall":0.9849529258620168,"macro_f1":0.9679661526851898,"accuracy":0.976,"class_f1":{"2":0.9676549865229112,"3":0.9538461538461539,"1":0.9823973176865045},"class_precision":{"2":0.9497354497354498,"3":0.9117647058823529,"1":0.9965986394557823},"class_recall":{"2":0.9862637362637363,"3":1.0,"1":0.968595041322314}}
Test Summary: | Pass  Total
AKNC          |    8      8
[237, 2, 1, 1, 2, 2, 2, 4, 7, 2, 8, 1, 15, 7, 1, 3, 13, 4, 25, 5, 7, 5, 37, 8, 21, 5, 2, 5, 5, 2, 16, 2, 11, 6, 5, 2, 19, 19, 8, 14, 18, 5, 15, 51, 29, 12, 21, 9, 219, 11, 6, 2, 81, 16, 15, 9, 4, 2, 2, 6, 9, 6, 19, 1, 32, 71, 1, 9, 4, 38, 3, 2, 8, 335, 1, 3, 4, 3, 12, 13, 9, 19, 18, 53, 3, 10, 4, 11, 3, 14, 12, 17, 14, 18, 62, 18, 17, 142, 36, 8, 17, 95, 15, 39, 13, 11, 47, 4, 33, 11, 2, 14, 9, 19, 9, 11, 18, 26, 26, 63, 13, 223, 21, 72, 13, 6, 18, 20, 293, 12, 4, 22, 2, 9, 66, 3, 30, 21, 14, 115, 30, 15, 2, 10, 35, 5, 43, 4, 10, 57, 13, 20, 36, 13, 21, 3, 13, 3, 19, 2, 4, 6, 8, 91, 240, 8, 32, 6, 76, 8, 20, 13, 14, 7, 3, 5, 62, 35, 20, 6, 7, 1, 8, 18, 352, 23, 19, 9, 44, 11, 14, 40, 11, 8, 140, 7, 47, 644, 22, 5, 5, 36, 30, 78, 42, 19, 16, 20, 21, 4, 4, 266, 25, 10, 13, 2, 76, 1, 30, 56, 12, 6, 7, 19, 226, 6, 13, 50, 29, 6, 21, 92, 39, 5, 11, 21, 13, 20, 8, 8, 2, 4, 61, 8, 37, 17, 30, 17, 6, 41, 7, 2, 129, 26, 10, 49, 13, 12, 19, 34, 24, 360, 20, 9, 8, 4, 25, 20, 34, 10, 48, 148, 25, 171, 1, 71, 52, 46, 6, 442, 17, 21, 11, 51, 55, 13, 8, 38, 20, 4, 23, 14, 62, 17, 19, 33, 78, 9, 18, 32]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.652, speedup = 0.27624750174013213, eval_ratio = 0.076998)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.376953125,"recall":0.3654513888888889,"f1":null,"seconds":0.00015508197247982025,"exhaustive_search_seconds":0.0003892183303833008,"evaluations":470.7890625,"distances_sum":1701.1800283609814}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5338541666666666,"recall":0.5338541666666666,"f1":null,"seconds":0.0002573598176240921,"exhaustive_search_seconds":0.0003892183303833008,"evaluations":618.828125,"distances_sum":1658.5432493149656}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6328124999999997,"recall":0.6328124999999997,"f1":null,"seconds":0.00033605657517910004,"exhaustive_search_seconds":0.0003892183303833008,"evaluations":730.7421875,"distances_sum":1599.8181608568873}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7065972222222221,"recall":0.7065972222222221,"f1":null,"seconds":0.0004206020385026932,"exhaustive_search_seconds":0.0003892183303833008,"evaluations":850.765625,"distances_sum":1574.3085750587452}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7621527777777776,"recall":0.7621527777777776,"f1":null,"seconds":0.0004866030067205429,"exhaustive_search_seconds":0.0003892183303833008,"evaluations":957.9453125,"distances_sum":1555.4347723976516}
KCenters.DeloneInvIndex> reached performance {"precision":0.8046874999999997,"recall":0.8046874999999997,"f1":0.8046874999999997,"seconds":0.0006665084511041641,"exhaustive_search_seconds":0.0003892183303833008,"evaluations":1067.578125,"distances_sum":1545.0768242386662}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8310000000000001, speedup = 0.8014217897546113, eval_ratio = 0.112535)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
