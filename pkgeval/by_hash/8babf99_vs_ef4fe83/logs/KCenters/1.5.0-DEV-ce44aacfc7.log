Julia Version 1.5.0-DEV.881
Commit ce44aacfc7 (2020-05-13 14:26 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed PooledArrays ──────────────── v0.5.3
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed KCenters ──────────────────── v0.2.2
  Installed Tables ────────────────────── v1.0.4
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed JSON ──────────────────────── v0.21.0
  Installed DataFrames ────────────────── v0.20.2
  Installed MappedArrays ──────────────── v0.2.2
  Installed DataValueInterfaces ───────── v1.0.0
  Installed Reexport ──────────────────── v0.2.0
  Installed Compat ────────────────────── v3.9.1
  Installed DataAPI ───────────────────── v1.3.0
  Installed TableTraits ───────────────── v1.0.0
  Installed Parsers ───────────────────── v1.0.3
  Installed SimilaritySearch ──────────── v0.3.19
  Installed LearnBase ─────────────────── v0.2.2
  Installed Missings ──────────────────── v0.4.3
  Installed InvertedIndices ───────────── v1.0.0
  Installed OrderedCollections ────────── v1.2.0
  Installed DataStructures ────────────── v0.17.15
  Installed CategoricalArrays ─────────── v0.7.7
  Installed MLDataUtils ───────────────── v0.5.1
  Installed MLDataPattern ─────────────── v0.5.3
  Installed StatsBase ─────────────────── v0.32.2
Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.9.1
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.15
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.2.0
  [69de0a69] + Parsers v1.0.3
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_Mdsq7q/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_Mdsq7q/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.9.1
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.15
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.2.0
  [69de0a69] Parsers v1.0.3
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.932025450070699
[ Info: 0.8326150393486023
[ Info: 0.5563809144993623
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.33097409474352996
mean(cdnet.distances) = 0.39060941204428673
mean(crand.distances) = 0.33802706718444825
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7451171875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7451171875,"f1":0.8419601232101241,"seconds":4.235655069351196e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.2890625,"distances_sum":2266.7271227749675}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6435546875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6435546875,"f1":0.7655934343434352,"seconds":9.22568142414093e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":7.734375,"distances_sum":1875.8924244079278}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1708984375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.1708984375,"f1":null,"seconds":3.1795352697372437e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":4.8515625,"distances_sum":517.2100589096493}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7451171875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7451171875,"f1":0.8419601232101241,"seconds":4.235655069351196e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.2890625,"distances_sum":2266.7271227749675}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8466796875, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8466796875,"f1":0.9105285339660348,"seconds":1.0410323739051819e-5,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.6796875,"distances_sum":2681.865078314889}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.9292759324009329,"seconds":4.248693585395813e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.625,"distances_sum":2885.7517265879196}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.880859375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.880859375,"f1":0.9292759324009329,"seconds":4.248693585395813e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.625,"distances_sum":2885.7517265879196}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9751144688644691,"seconds":7.074326276779175e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.8828125,"distances_sum":3241.7183179197586}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9656307234432241,"seconds":5.45009970664978e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.859375,"distances_sum":3159.020199702579}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9618506493506498,"seconds":6.278976798057556e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.828125,"distances_sum":3131.5719879307726}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9501373626373631,"seconds":5.17629086971283e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.765625,"distances_sum":3049.865661416154}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9443681318681321,"seconds":4.63239848613739e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.6953125,"distances_sum":3005.504131833909}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9560546875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9751144688644691,"seconds":7.074326276779175e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.8828125,"distances_sum":3241.7183179197586}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9560546875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9751144688644691,"seconds":7.074326276779175e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.8828125,"distances_sum":3241.7183179197586}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6865234375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6865234375,"f1":0.8032613220113228,"seconds":6.224960088729858e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.4375,"distances_sum":1872.0399790396475}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7529296875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7529296875,"f1":0.8496144480519489,"seconds":3.980472683906555e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.6640625,"distances_sum":2064.057636174664}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7529296875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7529296875,"f1":0.8496144480519489,"seconds":3.980472683906555e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.6640625,"distances_sum":2064.057636174664}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.787109375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.787109375,"f1":0.8716268106893118,"seconds":3.999099135398865e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.6875,"distances_sum":2253.2108566909583}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.787109375,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.787109375,"f1":0.8716268106893118,"seconds":3.999099135398865e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.6875,"distances_sum":2253.2108566909583}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.833984375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.833984375,"f1":0.8999495296370303,"seconds":4.3101608753204346e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.671875,"distances_sum":2457.966575887298}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9524610805860811,"seconds":4.209578037261963e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.8671875,"distances_sum":2804.2201466460615}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9287009865134869,"seconds":6.398186087608337e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.859375,"distances_sum":2607.0457804232396}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8544921875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8544921875,"f1":0.9150672244422252,"seconds":4.2263418436050415e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.859375,"distances_sum":2490.054902288059}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.916015625,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.9524610805860811,"seconds":4.209578037261963e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.8671875,"distances_sum":2804.2201466460615}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.916015625,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.9524610805860811,"seconds":4.209578037261963e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.8671875,"distances_sum":2804.2201466460615}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3974609375, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.3974609375,"f1":null,"seconds":5.835667252540588e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":7.0546875,"distances_sum":999.2349288859593}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3974609375,"state":{"ssize":5,"bsize":2},"perf":{"precision":null,"recall":0.3974609375,"f1":null,"seconds":5.835667252540588e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":7.0546875,"distances_sum":999.2349288859593}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.693359375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.693359375,"f1":0.8090019355644364,"seconds":3.7439167499542236e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.34375,"distances_sum":1819.9447259859267}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4013671875, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.4013671875,"f1":null,"seconds":2.991408109664917e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":7.078125,"distances_sum":988.3221657440045}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.560546875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.560546875,"f1":0.6992989649239654,"seconds":3.343448042869568e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":7.4609375,"distances_sum":1430.5257745847728}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.693359375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.693359375,"f1":0.8090019355644364,"seconds":3.7439167499542236e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.34375,"distances_sum":1819.9447259859267}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9304601648351652,"seconds":1.0970979928970337e-5,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.6953125,"distances_sum":2659.0770410146106}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8681640625, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8681640625,"f1":0.9222272519147525,"seconds":4.386529326438904e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.65625,"distances_sum":2537.399729460928}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.853515625, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.853515625,"f1":0.9135536338661345,"seconds":4.304572939872742e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.6328125,"distances_sum":2501.187756604531}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8408203125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8408203125,"f1":0.905208333333334,"seconds":4.230067133903503e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.5546875,"distances_sum":2470.9690958466454}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8837890625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.8837890625,"f1":0.9304601648351652,"seconds":1.0970979928970337e-5,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.6953125,"distances_sum":2659.0770410146106}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8837890625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.8837890625,"f1":0.9304601648351652,"seconds":1.0970979928970337e-5,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.6953125,"distances_sum":2659.0770410146106}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1826171875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.1826171875,"f1":null,"seconds":2.7567148208618164e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":6.7109375,"distances_sum":481.2480443122359}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.404296875, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.404296875,"f1":null,"seconds":3.1813979148864746e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":7.0,"distances_sum":977.4500421400709}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1904296875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.1904296875,"f1":null,"seconds":2.6281923055648804e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":6.7265625,"distances_sum":484.4101589123158}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.404296875,"state":{"ssize":5,"bsize":2},"perf":{"precision":null,"recall":0.404296875,"f1":null,"seconds":3.1813979148864746e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":7.0,"distances_sum":977.4500421400709}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.552734375, conf: {"ssize":4,"bsize":3}, perf: {"precision":null,"recall":0.552734375,"f1":null,"seconds":3.511086106300354e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":7.6875,"distances_sum":1404.943752793816}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.55078125, conf: {"ssize":6,"bsize":3}, perf: {"precision":1.0,"recall":0.55078125,"f1":0.6900061743811746,"seconds":3.589317202568054e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":7.5625,"distances_sum":1374.2144887629831}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.69140625, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.69140625,"f1":0.8050616050616058,"seconds":3.764405846595764e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.2578125,"distances_sum":1840.3105391633273}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.69140625,"state":{"ssize":6,"bsize":4},"perf":{"precision":1.0,"recall":0.69140625,"f1":0.8050616050616058,"seconds":3.764405846595764e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.2578125,"distances_sum":1840.3105391633273}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8544921875, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.8544921875,"f1":0.9123974983349992,"seconds":4.794448614120483e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.5859375,"distances_sum":2465.408794056778}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9407680860805865,"seconds":4.5709311962127686e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.6328125,"distances_sum":2678.7622792433267}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.853515625, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.853515625,"f1":0.9131644397269405,"seconds":4.438683390617371e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.671875,"distances_sum":2450.4527888081707}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7568359375, conf: {"ssize":10,"bsize":5}, perf: {"precision":1.0,"recall":0.7568359375,"f1":0.8470487845487853,"seconds":4.403293132781982e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.3203125,"distances_sum":2050.322019818327}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.798828125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.798828125,"f1":0.8794705294705305,"seconds":4.265457391738892e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.53125,"distances_sum":2236.271843020224}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.765625,"f1":0.8558415542790552,"seconds":4.135072231292725e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.3828125,"distances_sum":2091.0422745560063}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8984375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8984375,"f1":0.9407680860805865,"seconds":4.5709311962127686e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.6328125,"distances_sum":2678.7622792433267}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8984375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8984375,"f1":0.9407680860805865,"seconds":4.5709311962127686e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.6328125,"distances_sum":2678.7622792433267}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2138671875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2138671875,"f1":null,"seconds":0.000102238729596138,"exhaustive_search_seconds":1.905485987663269e-6,"evaluations":6.3359375,"distances_sum":491.74881566333534}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.541015625, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.541015625,"f1":null,"seconds":4.066154360771179e-6,"exhaustive_search_seconds":1.905485987663269e-6,"evaluations":7.265625,"distances_sum":1189.848761248477}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.541015625,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.541015625,"f1":null,"seconds":4.066154360771179e-6,"exhaustive_search_seconds":1.905485987663269e-6,"evaluations":7.265625,"distances_sum":1189.848761248477}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7958984375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7958984375,"f1":0.878866966366967,"seconds":3.635883331298828e-6,"exhaustive_search_seconds":1.905485987663269e-6,"evaluations":8.2109375,"distances_sum":1926.0307662235407}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9357059607059613,"seconds":5.444511771202087e-6,"exhaustive_search_seconds":1.905485987663269e-6,"evaluations":8.6640625,"distances_sum":2285.0413203115463}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8896484375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8896484375,"f1":0.9357059607059613,"seconds":5.444511771202087e-6,"exhaustive_search_seconds":1.905485987663269e-6,"evaluations":8.6640625,"distances_sum":2285.0413203115463}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9662431318681324,"seconds":4.0996819734573364e-6,"exhaustive_search_seconds":1.905485987663269e-6,"evaluations":8.8359375,"distances_sum":2484.4362057638864}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9662431318681324,"seconds":4.0996819734573364e-6,"exhaustive_search_seconds":1.905485987663269e-6,"evaluations":8.8359375,"distances_sum":2484.4362057638864}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.939453125,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9662431318681324,"seconds":4.0996819734573364e-6,"exhaustive_search_seconds":1.905485987663269e-6,"evaluations":8.8359375,"distances_sum":2484.4362057638864}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.265625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.265625,"f1":null,"seconds":3.0640512704849243e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":6.6171875,"distances_sum":561.009439241875}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.697265625, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.697265625,"f1":0.8101898101898111,"seconds":4.373490810394287e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":7.65625,"distances_sum":1525.396009765221}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.697265625,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.697265625,"f1":0.8101898101898111,"seconds":4.373490810394287e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":7.65625,"distances_sum":1525.396009765221}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7177734375, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.7177734375,"f1":0.8240070693195701,"seconds":6.1746686697006226e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":7.8359375,"distances_sum":1648.9002548211981}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.85546875, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.85546875,"f1":0.9153788919413927,"seconds":1.8578022718429565e-5,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.3984375,"distances_sum":1992.520290895044}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7900390625, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.7900390625,"f1":0.8759646603396611,"seconds":5.068257451057434e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.1171875,"distances_sum":1784.2460126514543}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7568359375, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.7568359375,"f1":0.8510369838494847,"seconds":4.6137720346450806e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":7.984375,"distances_sum":1706.371272704128}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.85546875,"state":{"ssize":7,"bsize":6},"perf":{"precision":1.0,"recall":0.85546875,"f1":0.9153788919413927,"seconds":1.8578022718429565e-5,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.3984375,"distances_sum":1992.520290895044}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.942307692307693,"seconds":5.373731255531311e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.7109375,"distances_sum":2212.133826090568}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":10,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9509761072261079,"seconds":2.561137080192566e-5,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.84375,"distances_sum":2226.03668328592}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":10,"bsize":9}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9547161172161178,"seconds":5.669891834259033e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.8125,"distances_sum":2250.3380811281736}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9577266483516487,"seconds":5.8785080909729e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.8203125,"distances_sum":2274.210570255198}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.92578125,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.92578125,"f1":0.9577266483516487,"seconds":5.8785080909729e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.8203125,"distances_sum":2274.210570255198}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.92578125,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.92578125,"f1":0.9577266483516487,"seconds":5.8785080909729e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.8203125,"distances_sum":2274.210570255198}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6953125, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6953125,"f1":0.8125265359640367,"seconds":4.69014048576355e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":7.7890625,"distances_sum":1513.5681010423325}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6953125,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.6953125,"f1":0.8125265359640367,"seconds":4.69014048576355e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":7.7890625,"distances_sum":1513.5681010423325}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.77734375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.77734375,"f1":0.8666500166500172,"seconds":5.330890417098999e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.1640625,"distances_sum":1767.0503120079911}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8408203125, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8408203125,"f1":0.9075695138195146,"seconds":5.492940545082092e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.46875,"distances_sum":1965.8368793026248}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8408203125,"state":{"ssize":5,"bsize":6},"perf":{"precision":1.0,"recall":0.8408203125,"f1":0.9075695138195146,"seconds":5.492940545082092e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.46875,"distances_sum":1965.8368793026248}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9611466658341662,"seconds":5.6549906730651855e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.84375,"distances_sum":2321.4298135325066}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":9,"bsize":10}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9707074175824179,"seconds":5.930662155151367e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.890625,"distances_sum":2384.9128185735667}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.960159111721612,"seconds":5.8319419622421265e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.8984375,"distances_sum":2300.295809701139}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9704269688644691,"seconds":5.887821316719055e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.90625,"distances_sum":2362.6475449227014}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.942542353479854,"seconds":5.46872615814209e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.6953125,"distances_sum":2192.943825240578}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9482421875,"state":{"ssize":9,"bsize":10},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9707074175824179,"seconds":5.930662155151367e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.890625,"distances_sum":2384.9128185735667}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9482421875,"state":{"ssize":9,"bsize":10},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9707074175824179,"seconds":5.930662155151367e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.890625,"distances_sum":2384.9128185735667}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5732421875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5732421875,"f1":0.7135501651126656,"seconds":4.36045229434967e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.3203125,"distances_sum":1279.9226671509296}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.380859375, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.380859375,"f1":null,"seconds":3.7029385566711426e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":6.4375,"distances_sum":799.6577490182507}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5732421875,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5732421875,"f1":0.7135501651126656,"seconds":4.36045229434967e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.3203125,"distances_sum":1279.9226671509296}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8095703125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.8095703125,"f1":0.8877060439560446,"seconds":5.206093192100525e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.1875,"distances_sum":1890.5794024600648}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9330815018315024,"seconds":5.539506673812866e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.53125,"distances_sum":2206.26793623971}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8837890625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8837890625,"f1":0.9330815018315024,"seconds":5.539506673812866e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.53125,"distances_sum":2206.26793623971}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9687728937728941,"seconds":6.122514605522156e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.8671875,"distances_sum":2388.6172259602795}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9521462912087916,"seconds":5.9157609939575195e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.8046875,"distances_sum":2287.6498355874082}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9687728937728941,"seconds":6.122514605522156e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.8671875,"distances_sum":2388.6172259602795}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9443359375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9687728937728941,"seconds":6.122514605522156e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.8671875,"distances_sum":2388.6172259602795}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5771484375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5771484375,"f1":0.7137934981684989,"seconds":4.604458808898926e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.25,"distances_sum":1278.8811473079954}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.24609375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.24609375,"f1":null,"seconds":3.8016587495803833e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":6.53125,"distances_sum":531.3186473510231}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.8604031385281393,"seconds":5.46872615814209e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.0234375,"distances_sum":1720.799179119146}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.767578125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.767578125,"f1":0.8604031385281393,"seconds":5.46872615814209e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.0234375,"distances_sum":1720.799179119146}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.845703125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.845703125,"f1":0.907376824564325,"seconds":5.617737770080566e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.5,"distances_sum":2006.0571606419026}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9579441391941393,"seconds":5.925074219703674e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.8359375,"distances_sum":2310.8757944329022}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.942605311355312,"seconds":5.979090929031372e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.734375,"distances_sum":2212.6518147086563}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9371966575091579,"seconds":5.804002285003662e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.65625,"distances_sum":2209.243093574934}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7744140625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7744140625,"f1":0.8640635406260415,"seconds":5.593523383140564e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.1171875,"distances_sum":1747.8612210122305}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.923828125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.9579441391941393,"seconds":5.925074219703674e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.8359375,"distances_sum":2310.8757944329022}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9743131868131871,"seconds":6.157904863357544e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.890625,"distances_sum":2432.120184386605}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.953125,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9743131868131871,"seconds":6.157904863357544e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.890625,"distances_sum":2432.120184386605}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.953125,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9743131868131871,"seconds":6.157904863357544e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.890625,"distances_sum":2432.120184386605}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.546875, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.546875,"f1":0.6941535894660901,"seconds":4.353001713752747e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":7.1328125,"distances_sum":1210.0606395609664}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.546875,"state":{"ssize":4,"bsize":3},"perf":{"precision":1.0,"recall":0.546875,"f1":0.6941535894660901,"seconds":4.353001713752747e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":7.1328125,"distances_sum":1210.0606395609664}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.78125,"f1":0.8668381965256974,"seconds":5.3942203521728516e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.0625,"distances_sum":1783.3102111623393}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.548828125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.548828125,"f1":0.6901001776001782,"seconds":4.610046744346619e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":7.140625,"distances_sum":1203.7974725035965}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.69921875, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.69921875,"f1":0.8126904345654354,"seconds":5.038455128669739e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":7.59375,"distances_sum":1504.2689918531544}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.78125,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.78125,"f1":0.8668381965256974,"seconds":5.3942203521728516e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.0625,"distances_sum":1783.3102111623393}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.956347298534799,"seconds":6.5267086029052734e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.8125,"distances_sum":2296.907404048799}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9465144230769234,"seconds":6.211921572685242e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.796875,"distances_sum":2225.4053086527565}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84765625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.84765625,"f1":0.9108636155511163,"seconds":5.753710865974426e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.4765625,"distances_sum":1990.216013547565}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.923828125,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.956347298534799,"seconds":6.5267086029052734e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.8125,"distances_sum":2296.907404048799}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.923828125,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.956347298534799,"seconds":6.5267086029052734e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.8125,"distances_sum":2296.907404048799}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4375,"f1":null,"seconds":3.7811696529388428e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":6.671875,"distances_sum":988.2365873665658}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4375,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.4375,"f1":null,"seconds":3.7811696529388428e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":6.671875,"distances_sum":988.2365873665658}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6875, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6875,"f1":0.8022007506382516,"seconds":4.509463906288147e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":7.8984375,"distances_sum":1602.46881265827}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7109375, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.7109375,"f1":0.8219676157176167,"seconds":2.8403475880622864e-5,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":7.90625,"distances_sum":1672.7408893197628}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.744140625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.744140625,"f1":0.8435304279054288,"seconds":5.1781535148620605e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":7.8984375,"distances_sum":1723.336140250828}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.744140625,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.744140625,"f1":0.8435304279054288,"seconds":5.1781535148620605e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":7.8984375,"distances_sum":1723.336140250828}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9516655219780225,"seconds":5.39049506187439e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.8046875,"distances_sum":2336.4398685571023}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.78125,"f1":0.8707818223443233,"seconds":2.0038336515426636e-5,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.1328125,"distances_sum":1850.2237549214374}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9502289377289382,"seconds":5.627050995826721e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.796875,"distances_sum":2338.8966954562147}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.794921875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.794921875,"f1":0.8762310606060613,"seconds":5.409121513366699e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.1796875,"distances_sum":1965.4683205435904}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9487236721611726,"seconds":6.146728992462158e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.8125,"distances_sum":2313.2642543649044}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9389823717948724,"seconds":5.545094609260559e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.6953125,"distances_sum":2255.513424160193}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8720703125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8720703125,"f1":0.9262622793872801,"seconds":5.966052412986755e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.6171875,"distances_sum":2161.479079471896}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9548420329670334,"seconds":5.925074219703674e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.8359375,"distances_sum":2354.3837090190964}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.919921875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.9548420329670334,"seconds":5.925074219703674e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.8359375,"distances_sum":2354.3837090190964}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.919921875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.9548420329670334,"seconds":5.925074219703674e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.8359375,"distances_sum":2354.3837090190964}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.224609375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.224609375,"f1":null,"seconds":3.4999102354049683e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":6.078125,"distances_sum":494.68559794970776}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2236328125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2236328125,"f1":null,"seconds":3.0156224966049194e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":6.15625,"distances_sum":477.54453641109546}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5908203125, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.5908203125,"f1":0.7253701159951167,"seconds":4.149973392486572e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":7.171875,"distances_sum":1328.1923847877358}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5908203125,"state":{"ssize":2,"bsize":3},"perf":{"precision":1.0,"recall":0.5908203125,"f1":0.7253701159951167,"seconds":4.149973392486572e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":7.171875,"distances_sum":1328.1923847877358}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6904296875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6904296875,"f1":0.8061880827505835,"seconds":4.47593629360199e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":7.7578125,"distances_sum":1532.3062063443801}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.865234375, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.865234375,"f1":0.9230196886446895,"seconds":5.2638351917266846e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.4921875,"distances_sum":2087.410115823739}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8193359375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.8193359375,"f1":0.8941313894438901,"seconds":2.1131709218025208e-5,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.265625,"distances_sum":1960.1495218578805}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.865234375,"state":{"ssize":6,"bsize":6},"perf":{"precision":1.0,"recall":0.865234375,"f1":0.9230196886446895,"seconds":5.2638351917266846e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.4921875,"distances_sum":2087.410115823739}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9707245879120883,"seconds":6.332993507385254e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.8671875,"distances_sum":2430.3430111083157}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.965979853479854,"seconds":5.329027771949768e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.859375,"distances_sum":2388.0532697294443}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9707245879120883,"seconds":6.332993507385254e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.8671875,"distances_sum":2430.3430111083157}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9707245879120883,"seconds":6.332993507385254e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.8671875,"distances_sum":2430.3430111083157}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6826171875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6826171875,"f1":0.8018184940059947,"seconds":4.403293132781982e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.9375,"distances_sum":1755.7239233376108}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7529296875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7529296875,"f1":0.848975330225331,"seconds":5.193054676055908e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.40625,"distances_sum":1994.0234133895983}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7529296875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7529296875,"f1":0.848975330225331,"seconds":5.193054676055908e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.40625,"distances_sum":1994.0234133895983}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.943020521145522,"seconds":5.621463060379028e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8515625,"distances_sum":2599.0352594802694}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7587890625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7587890625,"f1":0.8560413544788553,"seconds":5.241483449935913e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.3984375,"distances_sum":2002.0808340105355}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9566105769230773,"seconds":5.640089511871338e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8671875,"distances_sum":2714.1166125790887}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.81640625, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.81640625,"f1":0.8928342490842499,"seconds":5.306676030158997e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.703125,"distances_sum":2216.937309654169}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.923828125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.9566105769230773,"seconds":5.640089511871338e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8671875,"distances_sum":2714.1166125790887}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9593234890109893,"seconds":5.776062607765198e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.84375,"distances_sum":2757.149085705449}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9698889652014654,"seconds":6.064772605895996e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.96875,"distances_sum":2807.3284307865556}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.96484375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.96484375,"f1":0.9807864010989014,"seconds":6.01448118686676e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9375,"distances_sum":2918.7372149295643}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9646863553113558,"seconds":5.695968866348267e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9453125,"distances_sum":2761.209249898602}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.96484375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.96484375,"f1":0.9807864010989014,"seconds":6.01448118686676e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9375,"distances_sum":2918.7372149295643}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.96484375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.96484375,"f1":0.9807864010989014,"seconds":6.01448118686676e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9375,"distances_sum":2918.7372149295643}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3681640625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3681640625,"f1":null,"seconds":3.676861524581909e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":6.1796875,"distances_sum":920.6834542345729}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.67578125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.67578125,"f1":0.7947101509601517,"seconds":4.816800355911255e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.296875,"distances_sum":1694.0314227533975}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.67578125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.67578125,"f1":0.7947101509601517,"seconds":4.816800355911255e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.296875,"distances_sum":1694.0314227533975}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.67578125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.67578125,"f1":0.7947101509601517,"seconds":4.816800355911255e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.296875,"distances_sum":1694.0314227533975}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.67578125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.67578125,"f1":0.7947101509601517,"seconds":4.816800355911255e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.296875,"distances_sum":1694.0314227533975}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2431640625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2431640625,"f1":null,"seconds":3.4961849451065063e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":6.625,"distances_sum":553.3897480362455}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6796875, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6796875,"f1":0.7996498293373301,"seconds":4.850327968597412e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.2265625,"distances_sum":1594.0869390407618}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6796875,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.6796875,"f1":0.7996498293373301,"seconds":4.850327968597412e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.2265625,"distances_sum":1594.0869390407618}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9512133699633702,"seconds":6.008893251419067e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.9140625,"distances_sum":2483.2536830010017}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9130859375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9512133699633702,"seconds":6.008893251419067e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.9140625,"distances_sum":2483.2536830010017}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9619479478854482,"seconds":5.695968866348267e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.9453125,"distances_sum":2579.5150418201765}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.953125,"f1":0.974181547619048,"seconds":5.5674463510513306e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.96875,"distances_sum":2666.7225249842245}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9706330128205134,"seconds":5.606561899185181e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.9765625,"distances_sum":2625.5751140259918}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.953125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.953125,"f1":0.974181547619048,"seconds":5.5674463510513306e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.96875,"distances_sum":2666.7225249842245}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.953125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.953125,"f1":0.974181547619048,"seconds":5.5674463510513306e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.96875,"distances_sum":2666.7225249842245}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5673828125, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5673828125,"f1":null,"seconds":4.477798938751221e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.8984375,"distances_sum":1361.8538317203024}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4013671875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4013671875,"f1":null,"seconds":3.937631845474243e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.171875,"distances_sum":968.1661560690762}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2294921875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2294921875,"f1":null,"seconds":3.3471733331680298e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":6.6171875,"distances_sum":530.0994218503704}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5673828125,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.5673828125,"f1":null,"seconds":4.477798938751221e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.8984375,"distances_sum":1361.8538317203024}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7578125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7578125,"f1":0.8536864177489187,"seconds":5.256384611129761e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.671875,"distances_sum":1892.4198054661463}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.830078125, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.830078125,"f1":0.901745650183151,"seconds":5.511566996574402e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.875,"distances_sum":2132.4832340392027}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.662109375, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.662109375,"f1":0.7860835345210353,"seconds":4.4889748096466064e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.265625,"distances_sum":1616.3274373645668}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6796875, conf: {"ssize":7,"bsize":4}, perf: {"precision":1.0,"recall":0.6796875,"f1":0.8004594363969373,"seconds":4.598870873451233e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.1640625,"distances_sum":1673.2208856796929}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.765625,"f1":0.8595612720612729,"seconds":5.1781535148620605e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.6875,"distances_sum":1924.5882249973542}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.830078125,"state":{"ssize":4,"bsize":6},"perf":{"precision":1.0,"recall":0.830078125,"f1":0.901745650183151,"seconds":5.511566996574402e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.875,"distances_sum":2132.4832340392027}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.974891254578755,"seconds":5.809590220451355e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9609375,"distances_sum":2693.8199077554204}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9688072344322348,"seconds":5.641952157020569e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.96875,"distances_sum":2620.476842913761}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.9323005119880127,"seconds":5.559995770454407e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8828125,"distances_sum":2330.8494845062737}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9562328296703304,"seconds":5.66430389881134e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9140625,"distances_sum":2562.7974309501105}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9541015625,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.974891254578755,"seconds":5.809590220451355e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9609375,"distances_sum":2693.8199077554204}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9541015625,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.974891254578755,"seconds":5.809590220451355e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9609375,"distances_sum":2693.8199077554204}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5732421875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5732421875,"f1":0.7125711094461099,"seconds":4.4014304876327515e-6,"exhaustive_search_seconds":1.1399388313293457e-6,"evaluations":7.0546875,"distances_sum":1333.7399436210194}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5732421875,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5732421875,"f1":0.7125711094461099,"seconds":4.4014304876327515e-6,"exhaustive_search_seconds":1.1399388313293457e-6,"evaluations":7.0546875,"distances_sum":1333.7399436210194}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.744140625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.744140625,"f1":0.8451329920079927,"seconds":5.0496309995651245e-6,"exhaustive_search_seconds":1.1399388313293457e-6,"evaluations":8.2890625,"distances_sum":1801.7960892251988}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.744140625,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.744140625,"f1":0.8451329920079927,"seconds":5.0496309995651245e-6,"exhaustive_search_seconds":1.1399388313293457e-6,"evaluations":8.2890625,"distances_sum":1801.7960892251988}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9644001831501837,"seconds":6.0442835092544556e-6,"exhaustive_search_seconds":1.1399388313293457e-6,"evaluations":8.921875,"distances_sum":2575.8608897804747}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.751953125, conf: {"ssize":11,"bsize":5}, perf: {"precision":1.0,"recall":0.751953125,"f1":0.8510255369630378,"seconds":4.997476935386658e-6,"exhaustive_search_seconds":1.1399388313293457e-6,"evaluations":8.296875,"distances_sum":1812.422865442336}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9644001831501837,"seconds":6.0442835092544556e-6,"exhaustive_search_seconds":1.1399388313293457e-6,"evaluations":8.921875,"distances_sum":2575.8608897804747}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9644001831501837,"seconds":6.0442835092544556e-6,"exhaustive_search_seconds":1.1399388313293457e-6,"evaluations":8.921875,"distances_sum":2575.8608897804747}}, n: 9
mean(cfft.distances) = 0.35795282291982655
mean(cdnet.distances) = 0.3631054132300551
mean(crand.distances) = 0.3573108499637991
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8533333333333334
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.9
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8755555555555555
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8844444444444445
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8577777777777778
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8822222222222221
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.8955555555555557
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.94
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9444444444444445
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8488888888888889
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8733333333333334
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8844444444444445
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8866666666666667
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8911111111111111
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8888888888888888
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.8911111111111111
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9244444444444445
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9222222222222222
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.9066666666666666
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8866666666666667
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8844444444444445
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.9022222222222221
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9311111111111111
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9266666666666666
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8977777777777778
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9022222222222221
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.8911111111111111
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8422222222222223
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.9088888888888889
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9022222222222224
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9022222222222221
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9133333333333334
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9133333333333334
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 7, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 10]]
** centroid: 8, normalized-entropy: 0.7793498372920851, [(2, 3), (3, 10)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 11, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 2, 3, 2, 2, 3, 3, 3, 3, 1]
acc = 0.9533333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 7, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 10]]
** centroid: 8, normalized-entropy: 0.7793498372920851, [(2, 3), (3, 10)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 11, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 2, 3, 2, 2, 3, 3, 3, 3, 1]
acc = 0.9533333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 7, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 10]]
** centroid: 8, normalized-entropy: 0.7793498372920851, [(2, 3), (3, 10)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 11, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 2, 3, 2, 2, 3, 3, 3, 3, 1]
acc = 0.9533333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 7, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 10]]
** centroid: 8, normalized-entropy: 0.7793498372920851, [(2, 3), (3, 10)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 11, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 2, 3, 2, 2, 3, 3, 3, 3, 1]
acc = 0.9533333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 7, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 10]]
** centroid: 8, normalized-entropy: 0.7793498372920851, [(2, 3), (3, 10)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 11, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 2, 3, 2, 2, 3, 3, 3, 3, 1]
acc = 0.96
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 7, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 10]]
** centroid: 8, normalized-entropy: 0.7793498372920851, [(2, 3), (3, 10)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 11, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 2, 3, 2, 2, 3, 3, 3, 3, 1]
acc = 0.9066666666666666
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 7, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 10]]
** centroid: 8, normalized-entropy: 0.7793498372920851, [(2, 3), (3, 10)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 11, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 2, 3, 2, 2, 3, 3, 3, 3, 1]
acc = 0.9533333333333334
*** finished computation of 12 references, err: [Inf, 0.5264101357261339] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 17, 22]]
** centroid: 1, normalized-entropy: 0.98811083652183, [(2, 17), (3, 22)]
*** center 2: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 7, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 8, 0]]
finished with 14 centroids; started with 12
acc = 0.9266666666666666
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.342043276899948] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.342043276899948, 0.23665573246179447] ***
*** starting iteration: 2; err: [Inf, 0.342043276899948, 0.23665573246179447] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.342043276899948, 0.23665573246179447, 0.2330496114660529] ***
*** starting iteration: 3; err: [Inf, 0.342043276899948, 0.23665573246179447, 0.2330496114660529] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.342043276899948, 0.23665573246179447, 0.2330496114660529, 0.23234469518679818] ***
*** finished computation of 3 references, err: [Inf, 0.342043276899948, 0.23665573246179447, 0.2330496114660529, 0.23234469518679818] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [234, 24, 0]]
** centroid: 1, normalized-entropy: 0.446481346896803, [(1, 234), (2, 24)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [167, 38, 0]]
** centroid: 2, normalized-entropy: 0.691675892900456, [(1, 167), (2, 38)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 178, 26]]
** centroid: 3, normalized-entropy: 0.550405815580872, [(2, 178), (3, 26)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.31089391699828756] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31089391699828756, 0.24498890338652674] ***
*** starting iteration: 2; err: [Inf, 0.31089391699828756, 0.24498890338652674] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31089391699828756, 0.24498890338652674, 0.24116569372645202] ***
*** starting iteration: 3; err: [Inf, 0.31089391699828756, 0.24498890338652674, 0.24116569372645202] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31089391699828756, 0.24498890338652674, 0.24116569372645202, 0.24018209580209168] ***
*** finished computation of 3 references, err: [Inf, 0.31089391699828756, 0.24498890338652674, 0.24116569372645202, 0.24018209580209168] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [246, 8, 0]]
** centroid: 1, normalized-entropy: 0.20183992963258704, [(1, 246), (2, 8)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [168, 44, 0]]
** centroid: 2, normalized-entropy: 0.7367680100024784, [(1, 168), (2, 44)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [1, 181, 19]]
** centroid: 3, normalized-entropy: 0.45294254818728336, [(2, 181), (3, 19)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19125267313150046] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19125267313150046, 0.15012149708121791] ***
*** starting iteration: 2; err: [Inf, 0.19125267313150046, 0.15012149708121791] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19125267313150046, 0.15012149708121791, 0.14694772000975526] ***
*** starting iteration: 3; err: [Inf, 0.19125267313150046, 0.15012149708121791, 0.14694772000975526] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19125267313150046, 0.15012149708121791, 0.14694772000975526, 0.14662255677370098] ***
*** finished computation of 7 references, err: [Inf, 0.19125267313150046, 0.15012149708121791, 0.14694772000975526, 0.14662255677370098] ***
*** center 1: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 72, 2]]
** centroid: 2, normalized-entropy: 0.1792560669283214, [(2, 72), (3, 2)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [69, 21, 0]]
** centroid: 3, normalized-entropy: 0.7837769474847011, [(1, 69), (2, 21)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [69, 38, 0]]
** centroid: 4, normalized-entropy: 0.9385750889380636, [(1, 69), (2, 38)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 89, 15]]
** centroid: 5, normalized-entropy: 0.5952124653513116, [(2, 89), (3, 15)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [94, 19, 0]]
** centroid: 6, normalized-entropy: 0.6534358224760193, [(1, 94), (2, 19)]
*** center 7: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2516660859711982] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2516660859711982, 0.19069900145688592] ***
*** starting iteration: 2; err: [Inf, 0.2516660859711982, 0.19069900145688592] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2516660859711982, 0.19069900145688592, 0.17335693413430805] ***
*** starting iteration: 3; err: [Inf, 0.2516660859711982, 0.19069900145688592, 0.17335693413430805] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2516660859711982, 0.19069900145688592, 0.17335693413430805, 0.1605649110232794] ***
*** finished computation of 7 references, err: [Inf, 0.2516660859711982, 0.19069900145688592, 0.17335693413430805, 0.1605649110232794] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [11, 113, 19]]
** centroid: 1, normalized-entropy: 0.5930607666857419, [(1, 11), (2, 113), (3, 19)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [8, 104, 7]]
** centroid: 2, normalized-entropy: 0.42408075241381926, [(1, 8), (2, 104), (3, 7)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [63, 9, 0]]
** centroid: 3, normalized-entropy: 0.5435644431995963, [(1, 63), (2, 9)]
*** center 4: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [74, 14, 0]]
** centroid: 5, normalized-entropy: 0.6321302781219708, [(1, 74), (2, 14)]
*** center 6: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
finished with 13 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18919183279218701] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18919183279218701, 0.16380507539471853] ***
*** starting iteration: 2; err: [Inf, 0.18919183279218701, 0.16380507539471853] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18919183279218701, 0.16380507539471853, 0.15837387700817887] ***
*** starting iteration: 3; err: [Inf, 0.18919183279218701, 0.16380507539471853, 0.15837387700817887] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18919183279218701, 0.16380507539471853, 0.15837387700817887, 0.15621839941519758] ***
*** finished computation of 7 references, err: [Inf, 0.18919183279218701, 0.16380507539471853, 0.15837387700817887, 0.15621839941519758] ***
*** center 1: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [60, 7, 0]]
** centroid: 2, normalized-entropy: 0.4830306801456181, [(1, 60), (2, 7)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [101, 8, 0]]
** centroid: 3, normalized-entropy: 0.3784654279151717, [(1, 101), (2, 8)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 134, 19]]
** centroid: 4, normalized-entropy: 0.5412664421908896, [(2, 134), (3, 19)]
*** center 5: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [56, 28, 0]]
** centroid: 6, normalized-entropy: 0.9182958340544894, [(1, 56), (2, 28)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [67, 56, 0]]
** centroid: 7, normalized-entropy: 0.9942230305758529, [(1, 67), (2, 56)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.31730350509129307] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31730350509129307, 0.30173351099734214] ***
*** starting iteration: 2; err: [Inf, 0.31730350509129307, 0.30173351099734214] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31730350509129307, 0.30173351099734214, 0.29879958899663733] ***
*** starting iteration: 3; err: [Inf, 0.31730350509129307, 0.30173351099734214, 0.29879958899663733] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31730350509129307, 0.30173351099734214, 0.29879958899663733, 0.2982532130148788] ***
*** finished computation of 3 references, err: [Inf, 0.31730350509129307, 0.30173351099734214, 0.29879958899663733, 0.2982532130148788] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [229, 9, 0]]
** centroid: 1, normalized-entropy: 0.2321833410928974, [(1, 229), (2, 9)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 181, 17]]
** centroid: 2, normalized-entropy: 0.4224931157194282, [(2, 181), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [181, 49, 0]]
** centroid: 3, normalized-entropy: 0.7472601034500042, [(1, 181), (2, 49)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3999506927526806] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3999506927526806, 0.31837830390931965] ***
*** starting iteration: 2; err: [Inf, 0.3999506927526806, 0.31837830390931965] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3999506927526806, 0.31837830390931965, 0.3081587833789424] ***
*** starting iteration: 3; err: [Inf, 0.3999506927526806, 0.31837830390931965, 0.3081587833789424] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3999506927526806, 0.31837830390931965, 0.3081587833789424, 0.3062700207021948] ***
*** finished computation of 3 references, err: [Inf, 0.3999506927526806, 0.31837830390931965, 0.3081587833789424, 0.3062700207021948] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [103, 124, 0]]
** centroid: 1, normalized-entropy: 0.9938176644369764, [(1, 103), (2, 124)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [75, 116, 26]]
** centroid: 2, normalized-entropy: 0.8703864576615036, [(1, 75), (2, 116), (3, 26)]
*** center 3: selecting labels [1] (freq >= 2) [from [223, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.40109541771215745] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40109541771215745, 0.3164719032595629] ***
*** starting iteration: 2; err: [Inf, 0.40109541771215745, 0.3164719032595629] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40109541771215745, 0.3164719032595629, 0.30496525520673845] ***
*** starting iteration: 3; err: [Inf, 0.40109541771215745, 0.3164719032595629, 0.30496525520673845] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40109541771215745, 0.3164719032595629, 0.30496525520673845, 0.30349160480624376] ***
*** finished computation of 3 references, err: [Inf, 0.40109541771215745, 0.3164719032595629, 0.30496525520673845, 0.30349160480624376] ***
*** center 1: selecting labels [1] (freq >= 2) [from [224, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [97, 110, 1]]
** centroid: 2, normalized-entropy: 0.9971530725724463, [(1, 97), (2, 110)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [94, 123, 18]]
** centroid: 3, normalized-entropy: 0.8211811067097786, [(1, 94), (2, 123), (3, 18)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.23042815130808064] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23042815130808064, 0.1903258041708028] ***
*** starting iteration: 2; err: [Inf, 0.23042815130808064, 0.1903258041708028] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23042815130808064, 0.1903258041708028, 0.18640398192736837] ***
*** starting iteration: 3; err: [Inf, 0.23042815130808064, 0.1903258041708028, 0.18640398192736837] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23042815130808064, 0.1903258041708028, 0.18640398192736837, 0.18557620384064769] ***
*** finished computation of 7 references, err: [Inf, 0.23042815130808064, 0.1903258041708028, 0.18640398192736837, 0.18557620384064769] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [62, 55, 0]]
** centroid: 1, normalized-entropy: 0.9974163820804769, [(1, 62), (2, 55)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [65, 44, 0]]
** centroid: 2, normalized-entropy: 0.973056810401783, [(1, 65), (2, 44)]
*** center 3: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [112, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 77, 17]]
** centroid: 5, normalized-entropy: 0.6819353204567525, [(2, 77), (3, 17)]
*** center 6: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [6, 63, 0]]
** centroid: 7, normalized-entropy: 0.42622865699814483, [(1, 6), (2, 63)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.254123674121279] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.254123674121279, 0.21007114429322854] ***
*** starting iteration: 2; err: [Inf, 0.254123674121279, 0.21007114429322854] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.254123674121279, 0.21007114429322854, 0.19827051197473278] ***
*** starting iteration: 3; err: [Inf, 0.254123674121279, 0.21007114429322854, 0.19827051197473278] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.254123674121279, 0.21007114429322854, 0.19827051197473278, 0.1963972118697122] ***
*** starting iteration: 4; err: [Inf, 0.254123674121279, 0.21007114429322854, 0.19827051197473278, 0.1963972118697122] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.254123674121279, 0.21007114429322854, 0.19827051197473278, 0.1963972118697122, 0.19638787627337442] ***
*** finished computation of 7 references, err: [Inf, 0.254123674121279, 0.21007114429322854, 0.19827051197473278, 0.1963972118697122, 0.19638787627337442] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [10, 92, 0]]
** centroid: 1, normalized-entropy: 0.462749058578174, [(1, 10), (2, 92)]
*** center 2: selecting labels [1] (freq >= 2) [from [118, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [55, 4, 0]]
** centroid: 3, normalized-entropy: 0.3576467062456333, [(1, 55), (2, 4)]
*** center 4: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [66, 22, 0]]
** centroid: 5, normalized-entropy: 0.8112781244591328, [(1, 66), (2, 22)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 102, 26]]
** centroid: 6, normalized-entropy: 0.7281342378690551, [(2, 102), (3, 26)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [56, 20, 0]]
** centroid: 7, normalized-entropy: 0.8314743880097292, [(1, 56), (2, 20)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25354144922101585] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25354144922101585, 0.21040592597454724] ***
*** starting iteration: 2; err: [Inf, 0.25354144922101585, 0.21040592597454724] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25354144922101585, 0.21040592597454724, 0.19891491999662575] ***
*** starting iteration: 3; err: [Inf, 0.25354144922101585, 0.21040592597454724, 0.19891491999662575] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25354144922101585, 0.21040592597454724, 0.19891491999662575, 0.19498572887146268] ***
*** starting iteration: 4; err: [Inf, 0.25354144922101585, 0.21040592597454724, 0.19891491999662575, 0.19498572887146268] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25354144922101585, 0.21040592597454724, 0.19891491999662575, 0.19498572887146268, 0.19132290195744914] ***
*** starting iteration: 5; err: [Inf, 0.25354144922101585, 0.21040592597454724, 0.19891491999662575, 0.19498572887146268, 0.19132290195744914] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25354144922101585, 0.21040592597454724, 0.19891491999662575, 0.19498572887146268, 0.19132290195744914, 0.19032730341775864] ***
*** finished computation of 7 references, err: [Inf, 0.25354144922101585, 0.21040592597454724, 0.19891491999662575, 0.19498572887146268, 0.19132290195744914, 0.19032730341775864] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [83, 7, 0]]
** centroid: 1, normalized-entropy: 0.39430023792747493, [(1, 83), (2, 7)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [54, 47, 0]]
** centroid: 2, normalized-entropy: 0.9965322634876737, [(1, 54), (2, 47)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 79, 19]]
** centroid: 3, normalized-entropy: 0.7095128863456239, [(2, 79), (3, 19)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [69, 16, 0]]
** centroid: 4, normalized-entropy: 0.6977652006354232, [(1, 69), (2, 16)]
*** center 5: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [123, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [5, 84, 0]]
** centroid: 7, normalized-entropy: 0.3120895659343452, [(1, 5), (2, 84)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.35079050022345204] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35079050022345204, 0.24033536125315694] ***
*** finished computation of 3 references, err: [Inf, 0.35079050022345204, 0.24033536125315694] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [114, 137, 15]]
** centroid: 1, normalized-entropy: 0.7891885485002705, [(1, 114), (2, 137), (3, 15)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [110, 102, 2]]
** centroid: 2, normalized-entropy: 0.672609390924262, [(1, 110), (2, 102), (3, 2)]
*** center 3: selecting labels [1] (freq >= 2) [from [186, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.32022972822306617] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32022972822306617, 0.2475285676867887] ***
*** finished computation of 3 references, err: [Inf, 0.32022972822306617, 0.2475285676867887] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [117, 176, 26]]
** centroid: 1, normalized-entropy: 0.81951753278257, [(1, 117), (2, 176), (3, 26)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [119, 64, 0]]
** centroid: 2, normalized-entropy: 0.9338238064061994, [(1, 119), (2, 64)]
*** center 3: selecting labels [1] (freq >= 2) [from [165, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.42029101658065143] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42029101658065143, 0.24053939740345262] ***
*** finished computation of 3 references, err: [Inf, 0.42029101658065143, 0.24053939740345262] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [61, 171, 19]]
** centroid: 1, normalized-entropy: 0.7287591865052626, [(1, 61), (2, 171), (3, 19)]
*** center 2: selecting labels [1] (freq >= 2) [from [235, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [119, 62, 0]]
** centroid: 3, normalized-entropy: 0.9272299474277825, [(1, 119), (2, 62)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.48145119734486014] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.48145119734486014, 0.29491118107420355] ***
*** finished computation of 3 references, err: [Inf, 0.48145119734486014, 0.29491118107420355] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [267, 3, 0]]
** centroid: 1, normalized-entropy: 0.08807225904068142, [(1, 267), (2, 3)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [5, 181, 17]]
** centroid: 2, normalized-entropy: 0.365176474967891, [(1, 5), (2, 181), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [138, 55, 0]]
** centroid: 3, normalized-entropy: 0.8621401498108598, [(1, 138), (2, 55)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4431934698011497] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4431934698011497, 0.31520880675543733] ***
*** finished computation of 3 references, err: [Inf, 0.4431934698011497, 0.31520880675543733] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [118, 118, 2]]
** centroid: 1, normalized-entropy: 0.669800508635247, [(1, 118), (2, 118), (3, 2)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [99, 122, 24]]
** centroid: 2, normalized-entropy: 0.8564702327604663, [(1, 99), (2, 122), (3, 24)]
*** center 3: selecting labels [1] (freq >= 1) [from [184, 0, 0]]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.40437459384371854] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40437459384371854, 0.33223936969841616] ***
*** finished computation of 3 references, err: [Inf, 0.40437459384371854, 0.33223936969841616] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [163, 178, 19]]
** centroid: 1, normalized-entropy: 0.7848647871406118, [(1, 163), (2, 178), (3, 19)]
*** center 2: selecting labels [1] (freq >= 1) [from [158, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [94, 55, 0]]
** centroid: 3, normalized-entropy: 0.9499998204517307, [(1, 94), (2, 55)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.5936504533240298] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5936504533240298, 0.3249937077654196] ***
*** finished computation of 3 references, err: [Inf, 0.5936504533240298, 0.3249937077654196] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [213, 6, 0]]
** centroid: 1, normalized-entropy: 0.18116640155354563, [(1, 213), (2, 6)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [132, 84, 0]]
** centroid: 2, normalized-entropy: 0.9640787648082293, [(1, 132), (2, 84)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [65, 149, 17]]
** centroid: 3, normalized-entropy: 0.7569986487083457, [(1, 65), (2, 149), (3, 17)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4151598412230767] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4151598412230767, 0.3345865371429] ***
*** finished computation of 3 references, err: [Inf, 0.4151598412230767, 0.3345865371429] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [152, 101, 0]]
** centroid: 1, normalized-entropy: 0.9704862948470522, [(1, 152), (2, 101)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [197, 31, 0]]
** centroid: 2, normalized-entropy: 0.573572934976587, [(1, 197), (2, 31)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [52, 108, 26]]
** centroid: 3, normalized-entropy: 0.8620040126854502, [(1, 52), (2, 108), (3, 26)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4659821739841973] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4659821739841973, 0.3342535242129737] ***
*** finished computation of 3 references, err: [Inf, 0.4659821739841973, 0.3342535242129737] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 130, 19]]
** centroid: 1, normalized-entropy: 0.5505883966425158, [(2, 130), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [336, 29, 0]]
** centroid: 2, normalized-entropy: 0.4002455225006314, [(1, 336), (2, 29)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [79, 74, 0]]
** centroid: 3, normalized-entropy: 0.9992294886891654, [(1, 79), (2, 74)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.399343397759192] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.399343397759192, 0.3035175400805679] ***
*** starting iteration: 2; err: [Inf, 0.399343397759192, 0.3035175400805679] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.399343397759192, 0.3035175400805679, 0.293088581901066] ***
*** starting iteration: 3; err: [Inf, 0.399343397759192, 0.3035175400805679, 0.293088581901066] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.399343397759192, 0.3035175400805679, 0.293088581901066, 0.2925615374239402] ***
*** finished computation of 3 references, err: [Inf, 0.399343397759192, 0.3035175400805679, 0.293088581901066, 0.2925615374239402] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [149, 63, 0]]
** centroid: 1, normalized-entropy: 0.8778037341417048, [(1, 149), (2, 63)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [260, 11, 0]]
** centroid: 2, normalized-entropy: 0.24499266057007668, [(1, 260), (2, 11)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [1, 165, 17]]
** centroid: 3, normalized-entropy: 0.44773951024366665, [(2, 165), (3, 17)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.345541111348585] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.345541111348585, 0.3076983564540275] ***
*** starting iteration: 2; err: [Inf, 0.345541111348585, 0.3076983564540275] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.345541111348585, 0.3076983564540275, 0.2983974393302187] ***
*** starting iteration: 3; err: [Inf, 0.345541111348585, 0.3076983564540275, 0.2983974393302187] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.345541111348585, 0.3076983564540275, 0.2983974393302187, 0.2953741588536231] ***
*** finished computation of 3 references, err: [Inf, 0.345541111348585, 0.3076983564540275, 0.2983974393302187, 0.2953741588536231] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 179, 26]]
** centroid: 1, normalized-entropy: 0.5486778712031519, [(2, 179), (3, 26)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [156, 35, 0]]
** centroid: 2, normalized-entropy: 0.6871269864881856, [(1, 156), (2, 35)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [245, 26, 0]]
** centroid: 3, normalized-entropy: 0.45599506450037264, [(1, 245), (2, 26)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.42710551617295667] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42710551617295667, 0.30534958520225586] ***
*** starting iteration: 2; err: [Inf, 0.42710551617295667, 0.30534958520225586] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42710551617295667, 0.30534958520225586, 0.30398532748082724] ***
*** starting iteration: 3; err: [Inf, 0.42710551617295667, 0.30534958520225586, 0.30398532748082724] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42710551617295667, 0.30534958520225586, 0.30398532748082724, 0.3038710925485129] ***
*** finished computation of 3 references, err: [Inf, 0.42710551617295667, 0.30534958520225586, 0.30398532748082724, 0.3038710925485129] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [268, 18, 0]]
** centroid: 1, normalized-entropy: 0.3389952770978139, [(1, 268), (2, 18)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 166, 19]]
** centroid: 2, normalized-entropy: 0.4775048747918926, [(2, 166), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [147, 49, 0]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(1, 147), (2, 49)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.23223474230400534] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23223474230400534, 0.15386987448035105] ***
*** starting iteration: 2; err: [Inf, 0.23223474230400534, 0.15386987448035105] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23223474230400534, 0.15386987448035105, 0.14882594328681314] ***
*** starting iteration: 3; err: [Inf, 0.23223474230400534, 0.15386987448035105, 0.14882594328681314] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23223474230400534, 0.15386987448035105, 0.14882594328681314, 0.14724286908267048] ***
*** finished computation of 7 references, err: [Inf, 0.23223474230400534, 0.15386987448035105, 0.14882594328681314, 0.14724286908267048] ***
*** center 1: selecting labels [1] (freq >= 2) [from [128, 1, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [110, 12, 0]]
** centroid: 2, normalized-entropy: 0.4637773498877517, [(1, 110), (2, 12)]
*** center 3: selecting labels [1] (freq >= 2) [from [107, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 74, 17]]
** centroid: 5, normalized-entropy: 0.6947570868163001, [(2, 74), (3, 17)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 79, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [4, 73, 0]]
** centroid: 7, normalized-entropy: 0.29461520565280713, [(1, 4), (2, 73)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2697590863893459] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2697590863893459, 0.16317160675829945] ***
*** starting iteration: 2; err: [Inf, 0.2697590863893459, 0.16317160675829945] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2697590863893459, 0.16317160675829945, 0.15782030260489172] ***
*** starting iteration: 3; err: [Inf, 0.2697590863893459, 0.16317160675829945, 0.15782030260489172] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2697590863893459, 0.16317160675829945, 0.15782030260489172, 0.15547818203932834] ***
*** finished computation of 7 references, err: [Inf, 0.2697590863893459, 0.16317160675829945, 0.15782030260489172, 0.15547818203932834] ***
*** center 1: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 89, 6]]
** centroid: 3, normalized-entropy: 0.3398550782221443, [(2, 89), (3, 6)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [50, 34, 0]]
** centroid: 4, normalized-entropy: 0.9736680645496202, [(1, 50), (2, 34)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 94, 20]]
** centroid: 5, normalized-entropy: 0.6699960320994334, [(2, 94), (3, 20)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [121, 9, 0]]
** centroid: 6, normalized-entropy: 0.3630464536191718, [(1, 121), (2, 9)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [81, 14, 0]]
** centroid: 7, normalized-entropy: 0.6032154068313579, [(1, 81), (2, 14)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20715701069897166] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20715701069897166, 0.1695946063036504] ***
*** starting iteration: 2; err: [Inf, 0.20715701069897166, 0.1695946063036504] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20715701069897166, 0.1695946063036504, 0.1637257457176025] ***
*** starting iteration: 3; err: [Inf, 0.20715701069897166, 0.1695946063036504, 0.1637257457176025] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20715701069897166, 0.1695946063036504, 0.1637257457176025, 0.15864295594818678] ***
*** finished computation of 7 references, err: [Inf, 0.20715701069897166, 0.1695946063036504, 0.1637257457176025, 0.15864295594818678] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 32, 19]]
** centroid: 1, normalized-entropy: 0.9526092095121206, [(2, 32), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [9, 74, 0]]
** centroid: 2, normalized-entropy: 0.4951734787020683, [(1, 9), (2, 74)]
*** center 3: selecting labels [1] (freq >= 2) [from [108, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [94, 16, 0]]
** centroid: 4, normalized-entropy: 0.5983474220910422, [(1, 94), (2, 16)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [34, 58, 0]]
** centroid: 5, normalized-entropy: 0.9503376699710269, [(1, 34), (2, 58)]
*** center 6: selecting labels [1] (freq >= 2) [from [170, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 53, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19528128858236177] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19528128858236177, 0.14811832054906912] ***
*** starting iteration: 2; err: [Inf, 0.19528128858236177, 0.14811832054906912] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19528128858236177, 0.14811832054906912, 0.1452842192855795] ***
*** starting iteration: 3; err: [Inf, 0.19528128858236177, 0.14811832054906912, 0.1452842192855795] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19528128858236177, 0.14811832054906912, 0.1452842192855795, 0.1448862662919246] ***
*** finished computation of 7 references, err: [Inf, 0.19528128858236177, 0.14811832054906912, 0.1452842192855795, 0.1448862662919246] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [106, 22, 0]]
** centroid: 1, normalized-entropy: 0.6619760641115651, [(1, 106), (2, 22)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 91, 17]]
** centroid: 2, normalized-entropy: 0.6280710155029396, [(2, 91), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [67, 7, 0]]
** centroid: 3, normalized-entropy: 0.45162282218200417, [(1, 67), (2, 7)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [60, 39, 0]]
** centroid: 4, normalized-entropy: 0.9672947789468944, [(1, 60), (2, 39)]
*** center 5: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [6, 80, 0]]
** centroid: 6, normalized-entropy: 0.3650551896402848, [(1, 6), (2, 80)]
*** center 7: selecting labels [1] (freq >= 1) [from [96, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19560293514404384] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19560293514404384, 0.1526938526105063] ***
*** starting iteration: 2; err: [Inf, 0.19560293514404384, 0.1526938526105063] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19560293514404384, 0.1526938526105063, 0.14860973328580965] ***
*** starting iteration: 3; err: [Inf, 0.19560293514404384, 0.1526938526105063, 0.14860973328580965] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19560293514404384, 0.1526938526105063, 0.14860973328580965, 0.14689056610624338] ***
*** finished computation of 7 references, err: [Inf, 0.19560293514404384, 0.1526938526105063, 0.14860973328580965, 0.14689056610624338] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [6, 92, 0]]
** centroid: 1, normalized-entropy: 0.3322866302216152, [(1, 6), (2, 92)]
*** center 2: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [53, 41, 0]]
** centroid: 3, normalized-entropy: 0.988212082728797, [(1, 53), (2, 41)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [63, 37, 0]]
** centroid: 4, normalized-entropy: 0.950672092687066, [(1, 63), (2, 37)]
*** center 5: selecting labels [1] (freq >= 1) [from [96, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [110, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 70, 26]]
** centroid: 7, normalized-entropy: 0.842657877202239, [(2, 70), (3, 26)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19465634056591782] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19465634056591782, 0.15495751883047096] ***
*** starting iteration: 2; err: [Inf, 0.19465634056591782, 0.15495751883047096] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19465634056591782, 0.15495751883047096, 0.1502353999019507] ***
*** starting iteration: 3; err: [Inf, 0.19465634056591782, 0.15495751883047096, 0.1502353999019507] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19465634056591782, 0.15495751883047096, 0.1502353999019507, 0.14908731203509504] ***
*** finished computation of 7 references, err: [Inf, 0.19465634056591782, 0.15495751883047096, 0.1502353999019507, 0.14908731203509504] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 96, 14]]
** centroid: 1, normalized-entropy: 0.54991090463341, [(2, 96), (3, 14)]
*** center 2: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [89, 5, 0]]
** centroid: 3, normalized-entropy: 0.2998025130558691, [(1, 89), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [99, 2, 0]]
** centroid: 4, normalized-entropy: 0.1403272709905931, [(1, 99), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [71, 22, 0]]
** centroid: 5, normalized-entropy: 0.7892712724536985, [(1, 71), (2, 22)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 84, 5]]
** centroid: 6, normalized-entropy: 0.3120895659343452, [(2, 84), (3, 5)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [72, 24, 0]]
** centroid: 7, normalized-entropy: 0.8112781244591328, [(1, 72), (2, 24)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19604581499936524] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19604581499936524, 0.17238561667756433] ***
*** finished computation of 7 references, err: [Inf, 0.19604581499936524, 0.17238561667756433] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [151, 19, 0]]
** centroid: 1, normalized-entropy: 0.5052160044111427, [(1, 151), (2, 19)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 68, 8]]
** centroid: 2, normalized-entropy: 0.48546076074591343, [(2, 68), (3, 8)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 95, 9]]
** centroid: 3, normalized-entropy: 0.42480887386781474, [(2, 95), (3, 9)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [52, 16, 0]]
** centroid: 4, normalized-entropy: 0.787126586201269, [(1, 52), (2, 16)]
*** center 5: selecting labels [1] (freq >= 2) [from [141, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [10, 41, 0]]
** centroid: 7, normalized-entropy: 0.7140152804378671, [(1, 10), (2, 41)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.20910872949351525] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20910872949351525, 0.1614923100608556] ***
*** finished computation of 7 references, err: [Inf, 0.20910872949351525, 0.1614923100608556] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [79, 37, 0]]
** centroid: 1, normalized-entropy: 0.9032529465563456, [(1, 79), (2, 37)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [56, 45, 0]]
** centroid: 2, normalized-entropy: 0.9914266810680207, [(1, 56), (2, 45)]
*** center 3: selecting labels [1] (freq >= 2) [from [126, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 98, 26]]
** centroid: 4, normalized-entropy: 0.7408656862339816, [(2, 98), (3, 26)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [8, 60, 0]]
** centroid: 5, normalized-entropy: 0.5225593745369407, [(1, 8), (2, 60)]
*** center 6: selecting labels [1] (freq >= 2) [from [42, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.27635438575421917] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27635438575421917, 0.18255627179948397] ***
*** finished computation of 7 references, err: [Inf, 0.27635438575421917, 0.18255627179948397] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [5, 24, 0]]
** centroid: 1, normalized-entropy: 0.6631968402398286, [(1, 5), (2, 24)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [204, 4, 0]]
** centroid: 2, normalized-entropy: 0.13709947889981755, [(1, 204), (2, 4)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [104, 67, 0]]
** centroid: 3, normalized-entropy: 0.9659594947259894, [(1, 104), (2, 67)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 76, 19]]
** centroid: 4, normalized-entropy: 0.7219280948873623, [(2, 76), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [21, 36, 0]]
** centroid: 5, normalized-entropy: 0.9494520153879484, [(1, 21), (2, 36)]
*** center 6: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 26, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.20886926378987664] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20886926378987664, 0.15215470327565017] ***
*** starting iteration: 2; err: [Inf, 0.20886926378987664, 0.15215470327565017] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20886926378987664, 0.15215470327565017, 0.1481304402286942] ***
*** starting iteration: 3; err: [Inf, 0.20886926378987664, 0.15215470327565017, 0.1481304402286942] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20886926378987664, 0.15215470327565017, 0.1481304402286942, 0.14777818965437534] ***
*** finished computation of 7 references, err: [Inf, 0.20886926378987664, 0.15215470327565017, 0.1481304402286942, 0.14777818965437534] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [63, 38, 0]]
** centroid: 1, normalized-entropy: 0.9553413768968346, [(1, 63), (2, 38)]
*** center 2: selecting labels [1] (freq >= 1) [from [101, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [69, 41, 0]]
** centroid: 3, normalized-entropy: 0.9527431707334316, [(1, 69), (2, 41)]
*** center 4: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 82, 17]]
** centroid: 5, normalized-entropy: 0.6616179061408356, [(2, 82), (3, 17)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 78, 0]]
** centroid: 6, normalized-entropy: 0.1686609314966701, [(1, 2), (2, 78)]
*** center 7: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.179891938572635] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.179891938572635, 0.15175143240167685] ***
*** starting iteration: 2; err: [Inf, 0.179891938572635, 0.15175143240167685] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.179891938572635, 0.15175143240167685, 0.1485786839315704] ***
*** starting iteration: 3; err: [Inf, 0.179891938572635, 0.15175143240167685, 0.1485786839315704] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.179891938572635, 0.15175143240167685, 0.1485786839315704, 0.14835881492167688] ***
*** finished computation of 7 references, err: [Inf, 0.179891938572635, 0.15175143240167685, 0.1485786839315704, 0.14835881492167688] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [124, 2, 0]]
** centroid: 1, normalized-entropy: 0.11759466565886466, [(1, 124), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [59, 13, 0]]
** centroid: 2, normalized-entropy: 0.6812908868842175, [(1, 59), (2, 13)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 44, 26]]
** centroid: 3, normalized-entropy: 0.9517626756348312, [(2, 44), (3, 26)]
*** center 4: selecting labels [1] (freq >= 1) [from [96, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [118, 1, 0]]
** centroid: 5, normalized-entropy: 0.0700120504953614, [(1, 118), (2, 1)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 89, 0]]
** centroid: 6, normalized-entropy: 0.15240699892386778, [(1, 2), (2, 89)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [2, 91, 0]]
** centroid: 7, normalized-entropy: 0.14981136747274781, [(1, 2), (2, 91)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18548305323724446] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18548305323724446, 0.1498183775302218] ***
*** starting iteration: 2; err: [Inf, 0.18548305323724446, 0.1498183775302218] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18548305323724446, 0.1498183775302218, 0.14649906733968313] ***
*** starting iteration: 3; err: [Inf, 0.18548305323724446, 0.1498183775302218, 0.14649906733968313] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18548305323724446, 0.1498183775302218, 0.14649906733968313, 0.1457148051500946] ***
*** finished computation of 7 references, err: [Inf, 0.18548305323724446, 0.1498183775302218, 0.14649906733968313, 0.1457148051500946] ***
*** center 1: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 83, 19]]
** centroid: 2, normalized-entropy: 0.6936126404300949, [(2, 83), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [73, 24, 0]]
** centroid: 3, normalized-entropy: 0.8071675554288905, [(1, 73), (2, 24)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [13, 67, 0]]
** centroid: 4, normalized-entropy: 0.6402569436810504, [(1, 13), (2, 67)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [36, 59, 0]]
** centroid: 5, normalized-entropy: 0.9572951876544017, [(1, 36), (2, 59)]
*** center 6: selecting labels [1] (freq >= 1) [from [112, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [99, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4002793885588467] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4002793885588467, 0.23640319781221292] ***
*** starting iteration: 2; err: [Inf, 0.4002793885588467, 0.23640319781221292] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4002793885588467, 0.23640319781221292, 0.23533665575366747] ***
*** starting iteration: 3; err: [Inf, 0.4002793885588467, 0.23640319781221292, 0.23533665575366747] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4002793885588467, 0.23640319781221292, 0.23533665575366747, 0.23523524105157312] ***
*** finished computation of 3 references, err: [Inf, 0.4002793885588467, 0.23640319781221292, 0.23533665575366747, 0.23523524105157312] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [213, 11, 0]]
** centroid: 1, normalized-entropy: 0.2825919894097747, [(1, 213), (2, 11)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [197, 51, 0]]
** centroid: 2, normalized-entropy: 0.7330757423487608, [(1, 197), (2, 51)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 177, 17]]
** centroid: 3, normalized-entropy: 0.42850536452761046, [(2, 177), (3, 17)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3812778901442818] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3812778901442818, 0.2430743505812433] ***
*** starting iteration: 2; err: [Inf, 0.3812778901442818, 0.2430743505812433] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3812778901442818, 0.2430743505812433, 0.24225771496270684] ***
*** finished computation of 3 references, err: [Inf, 0.3812778901442818, 0.2430743505812433, 0.24225771496270684] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [92, 124, 22]]
** centroid: 1, normalized-entropy: 0.8439907273664224, [(1, 92), (2, 124), (3, 22)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [101, 116, 4]]
** centroid: 2, normalized-entropy: 0.6997933393052693, [(1, 101), (2, 116), (3, 4)]
*** center 3: selecting labels [1] (freq >= 2) [from [208, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.35568393740490234] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35568393740490234, 0.24365716797859593] ***
*** starting iteration: 2; err: [Inf, 0.35568393740490234, 0.24365716797859593] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35568393740490234, 0.24365716797859593, 0.24107913972985842] ***
*** starting iteration: 3; err: [Inf, 0.35568393740490234, 0.24365716797859593, 0.24107913972985842] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35568393740490234, 0.24365716797859593, 0.24107913972985842, 0.24030160587951205] ***
*** finished computation of 3 references, err: [Inf, 0.35568393740490234, 0.24365716797859593, 0.24107913972985842, 0.24030160587951205] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [90, 147, 19]]
** centroid: 1, normalized-entropy: 0.8001736134732849, [(1, 90), (2, 147), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [110, 86, 0]]
** centroid: 2, normalized-entropy: 0.9891571023188154, [(1, 110), (2, 86)]
*** center 3: selecting labels [1] (freq >= 2) [from [215, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3035412353236933] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3035412353236933, 0.25373367915718675] ***
*** starting iteration: 2; err: [Inf, 0.3035412353236933, 0.25373367915718675] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3035412353236933, 0.25373367915718675, 0.2435655639431364] ***
*** starting iteration: 3; err: [Inf, 0.3035412353236933, 0.25373367915718675, 0.2435655639431364] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3035412353236933, 0.25373367915718675, 0.2435655639431364, 0.23988683216620582] ***
*** starting iteration: 4; err: [Inf, 0.3035412353236933, 0.25373367915718675, 0.2435655639431364, 0.23988683216620582] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3035412353236933, 0.25373367915718675, 0.2435655639431364, 0.23988683216620582, 0.23842783364140102] ***
*** starting iteration: 5; err: [Inf, 0.3035412353236933, 0.25373367915718675, 0.2435655639431364, 0.23988683216620582, 0.23842783364140102] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3035412353236933, 0.25373367915718675, 0.2435655639431364, 0.23988683216620582, 0.23842783364140102, 0.238071779972194] ***
*** finished computation of 3 references, err: [Inf, 0.3035412353236933, 0.25373367915718675, 0.2435655639431364, 0.23988683216620582, 0.23842783364140102, 0.238071779972194] ***
*** center 1: selecting labels [1] (freq >= 2) [from [237, 1, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [8, 166, 17]]
** centroid: 2, normalized-entropy: 0.42792725393494635, [(1, 8), (2, 166), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [165, 72, 0]]
** centroid: 3, normalized-entropy: 0.8858834790484443, [(1, 165), (2, 72)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 15)
[0.927016837196478, 0.9259828690966416, 0.9209718700736665, 0.9199798600996205, 0.9190298082513652, 0.9109768451085817, 0.9060137982293671, 0.9049828271385159, 0.902992813172454, 0.9029898161634687, 0.8940437443431456, 0.8750127372881864, 0.8740506974039909, 0.7710105314895733, 0.7528936121750492]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.927016837196478
finished with 16
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.26587573539007] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26587573539007, 0.2293744593793694] ***
*** starting iteration: 2; err: [Inf, 0.26587573539007, 0.2293744593793694] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26587573539007, 0.2293744593793694, 0.21219640633779335] ***
*** starting iteration: 3; err: [Inf, 0.26587573539007, 0.2293744593793694, 0.21219640633779335] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26587573539007, 0.2293744593793694, 0.21219640633779335, 0.20433766968190312] ***
*** finished computation of 7 references, err: [Inf, 0.26587573539007, 0.2293744593793694, 0.21219640633779335, 0.20433766968190312] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [50, 40, 0]]
** centroid: 1, normalized-entropy: 0.9910760598382222, [(1, 50), (2, 40)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [64, 5, 0]]
** centroid: 2, normalized-entropy: 0.3750514064240124, [(1, 64), (2, 5)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [150, 4, 0]]
** centroid: 3, normalized-entropy: 0.17378132267943294, [(1, 150), (2, 4)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 92, 15]]
** centroid: 4, normalized-entropy: 0.5847281182574745, [(2, 92), (3, 15)]
*** center 5: selecting labels [1] (freq >= 2) [from [132, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [14, 21, 0]]
** centroid: 6, normalized-entropy: 0.9709505944546688, [(1, 14), (2, 21)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 77, 2]]
** centroid: 7, normalized-entropy: 0.17033057560105982, [(2, 77), (3, 2)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3173210183800808] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3173210183800808, 0.23264613927892133] ***
*** starting iteration: 2; err: [Inf, 0.3173210183800808, 0.23264613927892133] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3173210183800808, 0.23264613927892133, 0.20080368531479695] ***
*** starting iteration: 3; err: [Inf, 0.3173210183800808, 0.23264613927892133, 0.20080368531479695] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3173210183800808, 0.23264613927892133, 0.20080368531479695, 0.19645050958614388] ***
*** finished computation of 7 references, err: [Inf, 0.3173210183800808, 0.23264613927892133, 0.20080368531479695, 0.19645050958614388] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [113, 5, 0]]
** centroid: 1, normalized-entropy: 0.2530679372656293, [(1, 113), (2, 5)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [28, 61, 0]]
** centroid: 2, normalized-entropy: 0.898419774686072, [(1, 28), (2, 61)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 83, 6]]
** centroid: 3, normalized-entropy: 0.35620480393132253, [(2, 83), (3, 6)]
*** center 4: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 59, 20]]
** centroid: 6, normalized-entropy: 0.8162554088088008, [(2, 59), (3, 20)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [65, 32, 0]]
** centroid: 7, normalized-entropy: 0.9148210087144519, [(1, 65), (2, 32)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.35748444751168235] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.35748444751168235, 0.24303790507628686] ***
*** starting iteration: 2; err: [Inf, 0.35748444751168235, 0.24303790507628686] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.35748444751168235, 0.24303790507628686, 0.2175381758000361] ***
*** starting iteration: 3; err: [Inf, 0.35748444751168235, 0.24303790507628686, 0.2175381758000361] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.35748444751168235, 0.24303790507628686, 0.2175381758000361, 0.2048854076832734] ***
*** finished computation of 7 references, err: [Inf, 0.35748444751168235, 0.24303790507628686, 0.2175381758000361, 0.2048854076832734] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [23, 86, 0]]
** centroid: 1, normalized-entropy: 0.7434073165779199, [(1, 23), (2, 86)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [118, 2, 0]]
** centroid: 2, normalized-entropy: 0.12229159706937456, [(1, 118), (2, 2)]
*** center 3: selecting labels [1] (freq >= 2) [from [43, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [57, 22, 0]]
** centroid: 4, normalized-entropy: 0.8533728188427888, [(1, 57), (2, 22)]
*** center 5: selecting labels [1] (freq >= 2) [from [127, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [47, 30, 0]]
** centroid: 6, normalized-entropy: 0.9645476589143235, [(1, 47), (2, 30)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 93, 19]]
** centroid: 7, normalized-entropy: 0.6568871346605055, [(2, 93), (3, 19)]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 16)
[0.927016837196478, 0.9259828690966416, 0.9219968471465477, 0.9209718700736665, 0.9199798600996205, 0.9190298082513652, 0.9109768451085817, 0.9060137982293671, 0.9049828271385159, 0.902992813172454, 0.9029898161634687, 0.8940437443431456, 0.8750127372881864, 0.8740506974039909, 0.7710105314895733, 0.7528936121750492]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.927016837196478
finished with 17
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.45306839293491713] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45306839293491713, 0.2997729401404354] ***
*** starting iteration: 2; err: [Inf, 0.45306839293491713, 0.2997729401404354] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45306839293491713, 0.2997729401404354, 0.298155832408077] ***
*** starting iteration: 3; err: [Inf, 0.45306839293491713, 0.2997729401404354, 0.298155832408077] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45306839293491713, 0.2997729401404354, 0.298155832408077, 0.2978961186691549] ***
*** finished computation of 3 references, err: [Inf, 0.45306839293491713, 0.2997729401404354, 0.298155832408077, 0.2978961186691549] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [209, 19, 0]]
** centroid: 1, normalized-entropy: 0.4138168503036336, [(1, 209), (2, 19)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [192, 35, 0]]
** centroid: 2, normalized-entropy: 0.6202149818656472, [(1, 192), (2, 35)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 186, 26]]
** centroid: 3, normalized-entropy: 0.5369064378756415, [(2, 186), (3, 26)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.5106644398216773] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5106644398216773, 0.29771629625836293] ***
*** starting iteration: 2; err: [Inf, 0.5106644398216773, 0.29771629625836293] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5106644398216773, 0.29771629625836293, 0.29471702910903785] ***
*** starting iteration: 3; err: [Inf, 0.5106644398216773, 0.29771629625836293, 0.29471702910903785] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5106644398216773, 0.29771629625836293, 0.29471702910903785, 0.29398451148960236] ***
*** finished computation of 3 references, err: [Inf, 0.5106644398216773, 0.29771629625836293, 0.29471702910903785, 0.29398451148960236] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [115, 79, 0]]
** centroid: 1, normalized-entropy: 0.9750157547407654, [(1, 115), (2, 79)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [97, 160, 17]]
** centroid: 2, normalized-entropy: 0.7775492659763426, [(1, 97), (2, 160), (3, 17)]
*** center 3: selecting labels [1] (freq >= 2) [from [198, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.36222071089220514] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36222071089220514, 0.3068967753919358] ***
*** starting iteration: 2; err: [Inf, 0.36222071089220514, 0.3068967753919358] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36222071089220514, 0.3068967753919358, 0.30396847673196126] ***
*** starting iteration: 3; err: [Inf, 0.36222071089220514, 0.3068967753919358, 0.30396847673196126] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36222071089220514, 0.3068967753919358, 0.30396847673196126, 0.3035813862376887] ***
*** finished computation of 3 references, err: [Inf, 0.36222071089220514, 0.3068967753919358, 0.30396847673196126, 0.3035813862376887] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [279, 20, 0]]
** centroid: 1, normalized-entropy: 0.35420766784997604, [(1, 279), (2, 20)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [136, 54, 0]]
** centroid: 2, normalized-entropy: 0.8611247055579295, [(1, 136), (2, 54)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 159, 19]]
** centroid: 3, normalized-entropy: 0.49000864082234924, [(2, 159), (3, 19)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 17)
[0.927016837196478, 0.9259828690966416, 0.9219968471465477, 0.9209718700736665, 0.9199798600996205, 0.9190298082513652, 0.9109768451085817, 0.9060137982293671, 0.9049828271385159, 0.902992813172454, 0.9029898161634687, 0.8940437443431456, 0.8750127372881864, 0.8740506974039909, 0.844946743150336, 0.7710105314895733, 0.7528936121750492]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.927016837196478
finished with 17
iteration 4 finished
generating 4 configurations using top 12 configurations, starting with 17)
[0.927016837196478, 0.9259828690966416, 0.9219968471465477, 0.9209718700736665, 0.9199798600996205, 0.9190298082513652, 0.9109768451085817, 0.9060137982293671, 0.9049828271385159, 0.902992813172454, 0.9029898161634687, 0.8940437443431456, 0.8750127372881864, 0.8740506974039909, 0.844946743150336, 0.7710105314895733, 0.7528936121750492]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.927016837196478
finished with 17
iteration 5 finished
generating 4 configurations using top 12 configurations, starting with 17)
[0.927016837196478, 0.9259828690966416, 0.9219968471465477, 0.9209718700736665, 0.9199798600996205, 0.9190298082513652, 0.9109768451085817, 0.9060137982293671, 0.9049828271385159, 0.902992813172454, 0.9029898161634687, 0.8940437443431456, 0.8750127372881864, 0.8740506974039909, 0.844946743150336, 0.7710105314895733, 0.7528936121750492]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.927016837196478
finished with 18
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.21412500887186275] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21412500887186275, 0.19055978790087788] ***
*** starting iteration: 2; err: [Inf, 0.21412500887186275, 0.19055978790087788] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21412500887186275, 0.19055978790087788, 0.18862962864644198] ***
*** starting iteration: 3; err: [Inf, 0.21412500887186275, 0.19055978790087788, 0.18862962864644198] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21412500887186275, 0.19055978790087788, 0.18862962864644198, 0.18808071073927768] ***
*** finished computation of 7 references, err: [Inf, 0.21412500887186275, 0.19055978790087788, 0.18862962864644198, 0.18808071073927768] ***
*** center 1: selecting labels [2] (freq >= 2) [from [1, 78, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 79, 17]]
** centroid: 2, normalized-entropy: 0.673654715229001, [(2, 79), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [93, 45, 0]]
** centroid: 3, normalized-entropy: 0.9108783787500366, [(1, 93), (2, 45)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [80, 19, 0]]
** centroid: 4, normalized-entropy: 0.7054690408228712, [(1, 80), (2, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [61, 18, 0]]
** centroid: 5, normalized-entropy: 0.7742411580847273, [(1, 61), (2, 18)]
*** center 6: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22362394507616937] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22362394507616937, 0.204331258508744] ***
*** starting iteration: 2; err: [Inf, 0.22362394507616937, 0.204331258508744] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22362394507616937, 0.204331258508744, 0.20155769534342025] ***
*** starting iteration: 3; err: [Inf, 0.22362394507616937, 0.204331258508744, 0.20155769534342025] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22362394507616937, 0.204331258508744, 0.20155769534342025, 0.19969055018732618] ***
*** finished computation of 7 references, err: [Inf, 0.22362394507616937, 0.204331258508744, 0.20155769534342025, 0.19969055018732618] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [51, 26, 0]]
** centroid: 1, normalized-entropy: 0.9225641366401655, [(1, 51), (2, 26)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [31, 51, 0]]
** centroid: 2, normalized-entropy: 0.956652272148091, [(1, 31), (2, 51)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 73, 6]]
** centroid: 3, normalized-entropy: 0.3877431810559867, [(2, 73), (3, 6)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 80, 20]]
** centroid: 4, normalized-entropy: 0.7219280948873623, [(2, 80), (3, 20)]
*** center 5: selecting labels [1] (freq >= 2) [from [133, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [87, 10, 0]]
** centroid: 6, normalized-entropy: 0.478723511385963, [(1, 87), (2, 10)]
*** center 7: selecting labels [1] (freq >= 2) [from [99, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24501148607397544] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24501148607397544, 0.2044756150911974] ***
*** starting iteration: 2; err: [Inf, 0.24501148607397544, 0.2044756150911974] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24501148607397544, 0.2044756150911974, 0.1969828453079715] ***
*** starting iteration: 3; err: [Inf, 0.24501148607397544, 0.2044756150911974, 0.1969828453079715] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24501148607397544, 0.2044756150911974, 0.1969828453079715, 0.19337624773478088] ***
*** finished computation of 7 references, err: [Inf, 0.24501148607397544, 0.2044756150911974, 0.1969828453079715, 0.19337624773478088] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [79, 15, 0]]
** centroid: 1, normalized-entropy: 0.6332905746550958, [(1, 79), (2, 15)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 71, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 40, 19]]
** centroid: 3, normalized-entropy: 0.9065795484987461, [(2, 40), (3, 19)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [107, 15, 0]]
** centroid: 4, normalized-entropy: 0.537783841832964, [(1, 107), (2, 15)]
*** center 5: selecting labels [1] (freq >= 2) [from [116, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [110, 1, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 91, 0]]
** centroid: 7, normalized-entropy: 0.2039058755048202, [(1, 3), (2, 91)]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 18)
[0.927016837196478, 0.9259828690966416, 0.9219968471465477, 0.9209718700736665, 0.9199798600996205, 0.9190298082513652, 0.9129908351465238, 0.9109768451085817, 0.9060137982293671, 0.9049828271385159, 0.902992813172454, 0.9029898161634687, 0.8940437443431456, 0.8750127372881864, 0.8740506974039909, 0.844946743150336, 0.7710105314895733, 0.7528936121750492]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.927016837196478
finished with 19
iteration 7 finished
*** starting iteration: 1; err: [Inf, 0.24506158528450145] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24506158528450145, 0.1997939079732535] ***
*** starting iteration: 2; err: [Inf, 0.24506158528450145, 0.1997939079732535] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24506158528450145, 0.1997939079732535, 0.1986824918923707] ***
*** starting iteration: 3; err: [Inf, 0.24506158528450145, 0.1997939079732535, 0.1986824918923707] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24506158528450145, 0.1997939079732535, 0.1986824918923707, 0.19838849183819865] ***
*** finished computation of 7 references, err: [Inf, 0.24506158528450145, 0.1997939079732535, 0.1986824918923707, 0.19838849183819865] ***
*** center 1: selecting labels [1] (freq >= 1) [from [116, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [95, 5, 0]]
** centroid: 2, normalized-entropy: 0.2863969571159561, [(1, 95), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 64, 26]]
** centroid: 3, normalized-entropy: 0.8672816222000259, [(2, 64), (3, 26)]
*** center 4: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [73, 29, 0]]
** centroid: 5, normalized-entropy: 0.8612621884720756, [(1, 73), (2, 29)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 79, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [20, 63, 0]]
** centroid: 7, normalized-entropy: 0.7966394665488286, [(1, 20), (2, 63)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2264072847616923] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2264072847616923, 0.19211032018191307] ***
*** starting iteration: 2; err: [Inf, 0.2264072847616923, 0.19211032018191307] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2264072847616923, 0.19211032018191307, 0.1878710221453757] ***
*** starting iteration: 3; err: [Inf, 0.2264072847616923, 0.19211032018191307, 0.1878710221453757] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2264072847616923, 0.19211032018191307, 0.1878710221453757, 0.18756646017037756] ***
*** finished computation of 7 references, err: [Inf, 0.2264072847616923, 0.19211032018191307, 0.1878710221453757, 0.18756646017037756] ***
*** center 1: selecting labels [1] (freq >= 1) [from [107, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 64, 17]]
** centroid: 2, normalized-entropy: 0.7412466905234424, [(2, 64), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [65, 1, 0]]
** centroid: 3, normalized-entropy: 0.11327430349709665, [(1, 65), (2, 1)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [18, 72, 0]]
** centroid: 4, normalized-entropy: 0.7219280948873623, [(1, 18), (2, 72)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [90, 18, 0]]
** centroid: 5, normalized-entropy: 0.6500224216483541, [(1, 90), (2, 18)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [14, 84, 0]]
** centroid: 6, normalized-entropy: 0.5916727785823274, [(1, 14), (2, 84)]
*** center 7: selecting labels [1] (freq >= 1) [from [116, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2443907246471144] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2443907246471144, 0.1965361092375058] ***
*** starting iteration: 2; err: [Inf, 0.2443907246471144, 0.1965361092375058] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2443907246471144, 0.1965361092375058, 0.19193575862163995] ***
*** starting iteration: 3; err: [Inf, 0.2443907246471144, 0.1965361092375058, 0.19193575862163995] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2443907246471144, 0.1965361092375058, 0.19193575862163995, 0.19027708616174724] ***
*** finished computation of 7 references, err: [Inf, 0.2443907246471144, 0.1965361092375058, 0.19193575862163995, 0.19027708616174724] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 65, 19]]
** centroid: 1, normalized-entropy: 0.7713111060849788, [(2, 65), (3, 19)]
*** center 2: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [107, 1, 0]]
** centroid: 3, normalized-entropy: 0.07584150637714687, [(1, 107), (2, 1)]
*** center 4: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [126, 9, 0]]
** centroid: 5, normalized-entropy: 0.3533593350214213, [(1, 126), (2, 9)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 89, 0]]
** centroid: 6, normalized-entropy: 0.08807225904068142, [(1, 1), (2, 89)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [11, 69, 0]]
** centroid: 7, normalized-entropy: 0.5776539033535634, [(1, 11), (2, 69)]
finished with 8 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 19)
[0.9329808850766934, 0.927016837196478, 0.9259828690966416, 0.9219968471465477, 0.9209718700736665, 0.9199798600996205, 0.9190298082513652, 0.9129908351465238, 0.9109768451085817, 0.9060137982293671, 0.9049828271385159, 0.902992813172454, 0.9029898161634687, 0.8940437443431456, 0.8750127372881864, 0.8740506974039909, 0.844946743150336, 0.7710105314895733, 0.7528936121750492]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.9329808850766934
finished with 20
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.39919515279843576] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39919515279843576, 0.3315703483100148] ***
*** starting iteration: 2; err: [Inf, 0.39919515279843576, 0.3315703483100148] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39919515279843576, 0.3315703483100148, 0.3101531407073967] ***
*** starting iteration: 3; err: [Inf, 0.39919515279843576, 0.3315703483100148, 0.3101531407073967] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39919515279843576, 0.3315703483100148, 0.3101531407073967, 0.30277461227381425] ***
*** starting iteration: 4; err: [Inf, 0.39919515279843576, 0.3315703483100148, 0.3101531407073967, 0.30277461227381425] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39919515279843576, 0.3315703483100148, 0.3101531407073967, 0.30277461227381425, 0.30094759739834864] ***
*** starting iteration: 5; err: [Inf, 0.39919515279843576, 0.3315703483100148, 0.3101531407073967, 0.30277461227381425, 0.30094759739834864] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39919515279843576, 0.3315703483100148, 0.3101531407073967, 0.30277461227381425, 0.30094759739834864, 0.3004394359747018] ***
*** finished computation of 3 references, err: [Inf, 0.39919515279843576, 0.3315703483100148, 0.3101531407073967, 0.30277461227381425, 0.30094759739834864, 0.3004394359747018] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [106, 92, 0]]
** centroid: 1, normalized-entropy: 0.9963906193677697, [(1, 106), (2, 92)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [70, 148, 26]]
** centroid: 2, normalized-entropy: 0.8192766836425953, [(1, 70), (2, 148), (3, 26)]
*** center 3: selecting labels [1] (freq >= 2) [from [225, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4058060151449329] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4058060151449329, 0.3039347138591446] ***
*** starting iteration: 2; err: [Inf, 0.4058060151449329, 0.3039347138591446] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4058060151449329, 0.3039347138591446, 0.29894810430034324] ***
*** starting iteration: 3; err: [Inf, 0.4058060151449329, 0.3039347138591446, 0.29894810430034324] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4058060151449329, 0.3039347138591446, 0.29894810430034324, 0.29794996549366964] ***
*** finished computation of 3 references, err: [Inf, 0.4058060151449329, 0.3039347138591446, 0.29894810430034324, 0.29794996549366964] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [91, 132, 17]]
** centroid: 1, normalized-entropy: 0.8046918525730561, [(1, 91), (2, 132), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [111, 107, 0]]
** centroid: 2, normalized-entropy: 0.9997571288604837, [(1, 111), (2, 107)]
*** center 3: selecting labels [1] (freq >= 2) [from [208, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3742389537204152] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3742389537204152, 0.3073194253731748] ***
*** starting iteration: 2; err: [Inf, 0.3742389537204152, 0.3073194253731748] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3742389537204152, 0.3073194253731748, 0.3038643949366324] ***
*** starting iteration: 3; err: [Inf, 0.3742389537204152, 0.3073194253731748, 0.3038643949366324] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3742389537204152, 0.3073194253731748, 0.3038643949366324, 0.30341760035481363] ***
*** finished computation of 3 references, err: [Inf, 0.3742389537204152, 0.3073194253731748, 0.3038643949366324, 0.30341760035481363] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [281, 20, 0]]
** centroid: 1, normalized-entropy: 0.35251549775695296, [(1, 281), (2, 20)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 158, 19]]
** centroid: 2, normalized-entropy: 0.4918542451823737, [(2, 158), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [134, 55, 0]]
** centroid: 3, normalized-entropy: 0.8700163090612959, [(1, 134), (2, 55)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 20)
[0.9329808850766934, 0.927016837196478, 0.9259828690966416, 0.9219968471465477, 0.9209718700736665, 0.9199798600996205, 0.9190298082513652, 0.9129908351465238, 0.9109768451085817, 0.9060137982293671, 0.9049828271385159, 0.9030107952263641, 0.902992813172454, 0.9029898161634687, 0.8940437443431456, 0.8750127372881864, 0.8740506974039909, 0.844946743150336, 0.7710105314895733, 0.7528936121750492]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.9329808850766934
finished with 20
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.24139549856632947] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24139549856632947, 0.19675845019659027] ***
*** starting iteration: 2; err: [Inf, 0.24139549856632947, 0.19675845019659027] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24139549856632947, 0.19675845019659027, 0.19428332079015673] ***
*** starting iteration: 3; err: [Inf, 0.24139549856632947, 0.19675845019659027, 0.19428332079015673] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24139549856632947, 0.19675845019659027, 0.19428332079015673, 0.19316587655153125] ***
*** finished computation of 7 references, err: [Inf, 0.24139549856632947, 0.19675845019659027, 0.19428332079015673, 0.19316587655153125] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 126, 29]]
** centroid: 1, normalized-entropy: 0.6953584748246308, [(2, 126), (3, 29)]
*** center 2: selecting labels [1] (freq >= 1) [from [135, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [96, 30, 0]]
** centroid: 3, normalized-entropy: 0.7918583525674836, [(1, 96), (2, 30)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [142, 21, 0]]
** centroid: 4, normalized-entropy: 0.5542327134456861, [(1, 142), (2, 21)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [95, 45, 0]]
** centroid: 5, normalized-entropy: 0.9059282160429994, [(1, 95), (2, 45)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 134, 2]]
** centroid: 6, normalized-entropy: 0.11058084476988722, [(2, 134), (3, 2)]
*** center 7: selecting labels [1] (freq >= 1) [from [145, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22892422408238053] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22892422408238053, 0.19304464517673478] ***
*** starting iteration: 2; err: [Inf, 0.22892422408238053, 0.19304464517673478] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22892422408238053, 0.19304464517673478, 0.18892817183723673] ***
*** starting iteration: 3; err: [Inf, 0.22892422408238053, 0.19304464517673478, 0.18892817183723673] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22892422408238053, 0.19304464517673478, 0.18892817183723673, 0.18837294044345618] ***
*** finished computation of 7 references, err: [Inf, 0.22892422408238053, 0.19304464517673478, 0.18892817183723673, 0.18837294044345618] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [29, 47, 0]]
** centroid: 1, normalized-entropy: 0.9591495543968941, [(1, 29), (2, 47)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [46, 16, 0]]
** centroid: 2, normalized-entropy: 0.8238116333123173, [(1, 46), (2, 16)]
*** center 3: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 54, 13]]
** centroid: 4, normalized-entropy: 0.709825885194168, [(2, 54), (3, 13)]
*** center 5: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [3, 67, 0]]
** centroid: 6, normalized-entropy: 0.25524211319019174, [(1, 3), (2, 67)]
*** center 7: selecting labels [1] (freq >= 1) [from [50, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21744677167013288] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21744677167013288, 0.182926455931738] ***
*** starting iteration: 2; err: [Inf, 0.21744677167013288, 0.182926455931738] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21744677167013288, 0.182926455931738, 0.18158843964058907] ***
*** starting iteration: 3; err: [Inf, 0.21744677167013288, 0.182926455931738, 0.18158843964058907] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21744677167013288, 0.182926455931738, 0.18158843964058907, 0.18114687718451022] ***
*** finished computation of 7 references, err: [Inf, 0.21744677167013288, 0.182926455931738, 0.18158843964058907, 0.18114687718451022] ***
*** center 1: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 46, 16]]
** centroid: 2, normalized-entropy: 0.8238116333123173, [(2, 46), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [47, 23, 0]]
** centroid: 3, normalized-entropy: 0.9134601452569628, [(1, 47), (2, 23)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [36, 37, 0]]
** centroid: 4, normalized-entropy: 0.9998646331239297, [(1, 36), (2, 37)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [20, 64, 0]]
** centroid: 5, normalized-entropy: 0.7918583525674836, [(1, 20), (2, 64)]
*** center 6: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [62, 1, 0]]
** centroid: 7, normalized-entropy: 0.11759466565886466, [(1, 62), (2, 1)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2470825031059794] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2470825031059794, 0.1981211491767317] ***
*** starting iteration: 2; err: [Inf, 0.2470825031059794, 0.1981211491767317] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2470825031059794, 0.1981211491767317, 0.19407326266355812] ***
*** starting iteration: 3; err: [Inf, 0.2470825031059794, 0.1981211491767317, 0.19407326266355812] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2470825031059794, 0.1981211491767317, 0.19407326266355812, 0.19237662891671062] ***
*** finished computation of 7 references, err: [Inf, 0.2470825031059794, 0.1981211491767317, 0.19407326266355812, 0.19237662891671062] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [81, 13, 0]]
** centroid: 1, normalized-entropy: 0.57976367540648, [(1, 81), (2, 13)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [40, 2, 0]]
** centroid: 2, normalized-entropy: 0.2761954276479391, [(1, 40), (2, 2)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 82, 21]]
** centroid: 3, normalized-entropy: 0.7296274178915987, [(2, 82), (3, 21)]
*** center 4: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [52, 11, 0]]
** centroid: 6, normalized-entropy: 0.6681273338436138, [(1, 52), (2, 11)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [3, 59, 0]]
** centroid: 7, normalized-entropy: 0.2795055456366802, [(1, 3), (2, 59)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23169617002643644] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23169617002643644, 0.1974672337323427] ***
*** starting iteration: 2; err: [Inf, 0.23169617002643644, 0.1974672337323427] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23169617002643644, 0.1974672337323427, 0.19587326742708683] ***
*** starting iteration: 3; err: [Inf, 0.23169617002643644, 0.1974672337323427, 0.19587326742708683] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23169617002643644, 0.1974672337323427, 0.19587326742708683, 0.19570802317373454] ***
*** finished computation of 7 references, err: [Inf, 0.23169617002643644, 0.1974672337323427, 0.19587326742708683, 0.19570802317373454] ***
*** center 1: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [69, 3, 0]]
** centroid: 2, normalized-entropy: 0.24988229283318547, [(1, 69), (2, 3)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 42, 17]]
** centroid: 3, normalized-entropy: 0.8663006754980497, [(2, 42), (3, 17)]
*** center 4: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [67, 3, 0]]
** centroid: 5, normalized-entropy: 0.25524211319019174, [(1, 67), (2, 3)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 65, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [8, 68, 0]]
** centroid: 7, normalized-entropy: 0.48546076074591343, [(1, 8), (2, 68)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25104677941277626] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25104677941277626, 0.19794106391537936] ***
*** starting iteration: 2; err: [Inf, 0.25104677941277626, 0.19794106391537936] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25104677941277626, 0.19794106391537936, 0.19271654617786407] ***
*** starting iteration: 3; err: [Inf, 0.25104677941277626, 0.19794106391537936, 0.19271654617786407] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25104677941277626, 0.19794106391537936, 0.19271654617786407, 0.19153444484248758] ***
*** finished computation of 7 references, err: [Inf, 0.25104677941277626, 0.19794106391537936, 0.19271654617786407, 0.19153444484248758] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 47, 14]]
** centroid: 1, normalized-entropy: 0.7771529943226336, [(2, 47), (3, 14)]
*** center 2: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [54, 10, 0]]
** centroid: 3, normalized-entropy: 0.625262405223423, [(1, 54), (2, 10)]
*** center 4: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [87, 4, 0]]
** centroid: 5, normalized-entropy: 0.26014536394771426, [(1, 87), (2, 4)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 64, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [5, 58, 0]]
** centroid: 7, normalized-entropy: 0.39993804743902767, [(1, 5), (2, 58)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2357388185467571] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2357388185467571, 0.1978360506836325] ***
*** starting iteration: 2; err: [Inf, 0.2357388185467571, 0.1978360506836325] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2357388185467571, 0.1978360506836325, 0.19493619281053542] ***
*** starting iteration: 3; err: [Inf, 0.2357388185467571, 0.1978360506836325, 0.19493619281053542] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2357388185467571, 0.1978360506836325, 0.19493619281053542, 0.1930517057897523] ***
*** finished computation of 7 references, err: [Inf, 0.2357388185467571, 0.1978360506836325, 0.19493619281053542, 0.1930517057897523] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [21, 57, 0]]
** centroid: 1, normalized-entropy: 0.8403586716091169, [(1, 21), (2, 57)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [41, 3, 0]]
** centroid: 2, normalized-entropy: 0.3591016256485496, [(1, 41), (2, 3)]
*** center 3: selecting labels [1] (freq >= 1) [from [107, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 48, 16]]
** centroid: 4, normalized-entropy: 0.8112781244591328, [(2, 48), (3, 16)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [58, 15, 0]]
** centroid: 5, normalized-entropy: 0.7327525499549903, [(1, 58), (2, 15)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [74, 1, 0]]
** centroid: 6, normalized-entropy: 0.10215803640865054, [(1, 74), (2, 1)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 59, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22491818134114147] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22491818134114147, 0.19786289671063423] ***
*** starting iteration: 2; err: [Inf, 0.22491818134114147, 0.19786289671063423] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22491818134114147, 0.19786289671063423, 0.19277533554378898] ***
*** starting iteration: 3; err: [Inf, 0.22491818134114147, 0.19786289671063423, 0.19277533554378898] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22491818134114147, 0.19786289671063423, 0.19277533554378898, 0.18968738177604974] ***
*** finished computation of 7 references, err: [Inf, 0.22491818134114147, 0.19786289671063423, 0.19277533554378898, 0.18968738177604974] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 76, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [40, 10, 0]]
** centroid: 3, normalized-entropy: 0.7219280948873623, [(1, 40), (2, 10)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [58, 10, 0]]
** centroid: 4, normalized-entropy: 0.6024308020404452, [(1, 58), (2, 10)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [91, 5, 0]]
** centroid: 5, normalized-entropy: 0.29518174309075856, [(1, 91), (2, 5)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 78, 15]]
** centroid: 6, normalized-entropy: 0.6373874992221911, [(2, 78), (3, 15)]
*** center 7: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23399119414947928] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23399119414947928, 0.1916063558375463] ***
*** starting iteration: 2; err: [Inf, 0.23399119414947928, 0.1916063558375463] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23399119414947928, 0.1916063558375463, 0.1875780115481466] ***
*** starting iteration: 3; err: [Inf, 0.23399119414947928, 0.1916063558375463, 0.1875780115481466] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23399119414947928, 0.1916063558375463, 0.1875780115481466, 0.18647254152595996] ***
*** finished computation of 7 references, err: [Inf, 0.23399119414947928, 0.1916063558375463, 0.1875780115481466, 0.18647254152595996] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 68, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [41, 27, 0]]
** centroid: 3, normalized-entropy: 0.9692040949598235, [(1, 41), (2, 27)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [66, 4, 0]]
** centroid: 4, normalized-entropy: 0.3159971329784246, [(1, 66), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [70, 16, 0]]
** centroid: 5, normalized-entropy: 0.6931274153282881, [(1, 70), (2, 16)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 59, 15]]
** centroid: 6, normalized-entropy: 0.7273006785144036, [(2, 59), (3, 15)]
*** center 7: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2531975366156548] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2531975366156548, 0.2019673849157989] ***
*** starting iteration: 2; err: [Inf, 0.2531975366156548, 0.2019673849157989] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2531975366156548, 0.2019673849157989, 0.1977372732385993] ***
*** starting iteration: 3; err: [Inf, 0.2531975366156548, 0.2019673849157989, 0.1977372732385993] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2531975366156548, 0.2019673849157989, 0.1977372732385993, 0.19496277346462013] ***
*** finished computation of 7 references, err: [Inf, 0.2531975366156548, 0.2019673849157989, 0.1977372732385993, 0.19496277346462013] ***
*** center 1: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [76, 1, 0]]
** centroid: 2, normalized-entropy: 0.1000009430103234, [(1, 76), (2, 1)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 49, 16]]
** centroid: 3, normalized-entropy: 0.8051250074646822, [(2, 49), (3, 16)]
*** center 4: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [60, 15, 0]]
** centroid: 5, normalized-entropy: 0.7219280948873623, [(1, 60), (2, 15)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [4, 62, 0]]
** centroid: 6, normalized-entropy: 0.32984607020714635, [(1, 4), (2, 62)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [5, 54, 0]]
** centroid: 7, normalized-entropy: 0.4186843105268563, [(1, 5), (2, 54)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2212857577726245] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2212857577726245, 0.19045039763487875] ***
*** starting iteration: 2; err: [Inf, 0.2212857577726245, 0.19045039763487875] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2212857577726245, 0.19045039763487875, 0.18883554373681546] ***
*** starting iteration: 3; err: [Inf, 0.2212857577726245, 0.19045039763487875, 0.18883554373681546] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2212857577726245, 0.19045039763487875, 0.18883554373681546, 0.1884702746849507] ***
*** finished computation of 7 references, err: [Inf, 0.2212857577726245, 0.19045039763487875, 0.18883554373681546, 0.1884702746849507] ***
*** center 1: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 56, 18]]
** centroid: 2, normalized-entropy: 0.8003922080453356, [(2, 56), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [48, 30, 0]]
** centroid: 3, normalized-entropy: 0.961236604722876, [(1, 48), (2, 30)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [14, 51, 0]]
** centroid: 4, normalized-entropy: 0.7516499461153354, [(1, 14), (2, 51)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [12, 50, 0]]
** centroid: 5, normalized-entropy: 0.708835673332196, [(1, 12), (2, 50)]
*** center 6: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23245466162636877] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23245466162636877, 0.19288082071579993] ***
*** starting iteration: 2; err: [Inf, 0.23245466162636877, 0.19288082071579993] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23245466162636877, 0.19288082071579993, 0.1872570720994845] ***
*** starting iteration: 3; err: [Inf, 0.23245466162636877, 0.19288082071579993, 0.1872570720994845] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23245466162636877, 0.19288082071579993, 0.1872570720994845, 0.18542027189582586] ***
*** finished computation of 7 references, err: [Inf, 0.23245466162636877, 0.19288082071579993, 0.1872570720994845, 0.18542027189582586] ***
*** center 1: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 71, 17]]
** centroid: 2, normalized-entropy: 0.7080803256135676, [(2, 71), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [57, 1, 0]]
** centroid: 3, normalized-entropy: 0.12565805017256745, [(1, 57), (2, 1)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [55, 18, 0]]
** centroid: 4, normalized-entropy: 0.8058049113482652, [(1, 55), (2, 18)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [39, 34, 0]]
** centroid: 5, normalized-entropy: 0.9966132830150962, [(1, 39), (2, 34)]
*** center 6: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [3, 58, 0]]
** centroid: 7, normalized-entropy: 0.28290479297989196, [(1, 3), (2, 58)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23273269034177066] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23273269034177066, 0.18826521779969335] ***
*** starting iteration: 2; err: [Inf, 0.23273269034177066, 0.18826521779969335] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23273269034177066, 0.18826521779969335, 0.18571501697041096] ***
*** starting iteration: 3; err: [Inf, 0.23273269034177066, 0.18826521779969335, 0.18571501697041096] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23273269034177066, 0.18826521779969335, 0.18571501697041096, 0.1851911571258679] ***
*** finished computation of 7 references, err: [Inf, 0.23273269034177066, 0.18826521779969335, 0.18571501697041096, 0.1851911571258679] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [95, 2, 0]]
** centroid: 1, normalized-entropy: 0.14489961753310668, [(1, 95), (2, 2)]
*** center 2: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 42, 21]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(2, 42), (3, 21)]
*** center 4: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [52, 2, 0]]
** centroid: 5, normalized-entropy: 0.22853814395352806, [(1, 52), (2, 2)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 71, 0]]
** centroid: 6, normalized-entropy: 0.18116640155354563, [(1, 2), (2, 71)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [8, 61, 0]]
** centroid: 7, normalized-entropy: 0.5175827525559071, [(1, 8), (2, 61)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23425136560574175] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23425136560574175, 0.19559384183958173] ***
*** starting iteration: 2; err: [Inf, 0.23425136560574175, 0.19559384183958173] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23425136560574175, 0.19559384183958173, 0.1886087520942092] ***
*** starting iteration: 3; err: [Inf, 0.23425136560574175, 0.19559384183958173, 0.1886087520942092] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23425136560574175, 0.19559384183958173, 0.1886087520942092, 0.18739622958097607] ***
*** finished computation of 7 references, err: [Inf, 0.23425136560574175, 0.19559384183958173, 0.1886087520942092, 0.18739622958097607] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [40, 34, 0]]
** centroid: 1, normalized-entropy: 0.9952525494396791, [(1, 40), (2, 34)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [62, 3, 0]]
** centroid: 2, normalized-entropy: 0.269828447703074, [(1, 62), (2, 3)]
*** center 3: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 55, 2]]
** centroid: 4, normalized-entropy: 0.2192973081321754, [(2, 55), (3, 2)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [70, 8, 0]]
** centroid: 5, normalized-entropy: 0.4770713062193298, [(1, 70), (2, 8)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [85, 2, 0]]
** centroid: 6, normalized-entropy: 0.15790637433488164, [(1, 85), (2, 2)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 60, 16]]
** centroid: 7, normalized-entropy: 0.7424875695421234, [(2, 60), (3, 16)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23567850359156728] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23567850359156728, 0.1953080453686416] ***
*** starting iteration: 2; err: [Inf, 0.23567850359156728, 0.1953080453686416] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23567850359156728, 0.1953080453686416, 0.19271106617152692] ***
*** starting iteration: 3; err: [Inf, 0.23567850359156728, 0.1953080453686416, 0.19271106617152692] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23567850359156728, 0.1953080453686416, 0.19271106617152692, 0.1910533264428377] ***
*** finished computation of 7 references, err: [Inf, 0.23567850359156728, 0.1953080453686416, 0.19271106617152692, 0.1910533264428377] ***
*** center 1: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [80, 3, 0]]
** centroid: 2, normalized-entropy: 0.2243269603450881, [(1, 80), (2, 3)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 47, 13]]
** centroid: 3, normalized-entropy: 0.7540340561971327, [(2, 47), (3, 13)]
*** center 4: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [59, 23, 0]]
** centroid: 5, normalized-entropy: 0.8561146277685725, [(1, 59), (2, 23)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [9, 51, 0]]
** centroid: 6, normalized-entropy: 0.6098403047164005, [(1, 9), (2, 51)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 51, 0]]
** centroid: 7, normalized-entropy: 0.13709947889981755, [(1, 1), (2, 51)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22903774190600962] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22903774190600962, 0.1925879139341414] ***
*** starting iteration: 2; err: [Inf, 0.22903774190600962, 0.1925879139341414] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22903774190600962, 0.1925879139341414, 0.18896182954311372] ***
*** starting iteration: 3; err: [Inf, 0.22903774190600962, 0.1925879139341414, 0.18896182954311372] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22903774190600962, 0.1925879139341414, 0.18896182954311372, 0.18785838522575796] ***
*** finished computation of 7 references, err: [Inf, 0.22903774190600962, 0.1925879139341414, 0.18896182954311372, 0.18785838522575796] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 51, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [43, 31, 0]]
** centroid: 3, normalized-entropy: 0.9809470132751208, [(1, 43), (2, 31)]
*** center 4: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [84, 17, 0]]
** centroid: 5, normalized-entropy: 0.653839880626333, [(1, 84), (2, 17)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 70, 15]]
** centroid: 6, normalized-entropy: 0.6722948170756378, [(2, 70), (3, 15)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [73, 1, 0]]
** centroid: 7, normalized-entropy: 0.10327508457163559, [(1, 73), (2, 1)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2127010851262603] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2127010851262603, 0.18737025333568455] ***
*** starting iteration: 2; err: [Inf, 0.2127010851262603, 0.18737025333568455] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2127010851262603, 0.18737025333568455, 0.1837457243949175] ***
*** starting iteration: 3; err: [Inf, 0.2127010851262603, 0.18737025333568455, 0.1837457243949175] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2127010851262603, 0.18737025333568455, 0.1837457243949175, 0.1829971666559577] ***
*** finished computation of 7 references, err: [Inf, 0.2127010851262603, 0.18737025333568455, 0.1837457243949175, 0.1829971666559577] ***
*** center 1: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [74, 3, 0]]
** centroid: 2, normalized-entropy: 0.23750814382859295, [(1, 74), (2, 3)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 54, 13]]
** centroid: 3, normalized-entropy: 0.709825885194168, [(2, 54), (3, 13)]
*** center 4: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 53, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [51, 26, 0]]
** centroid: 6, normalized-entropy: 0.9225641366401655, [(1, 51), (2, 26)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [29, 41, 0]]
** centroid: 7, normalized-entropy: 0.9786961448300948, [(1, 29), (2, 41)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24804775376990437] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24804775376990437, 0.19398443677648902] ***
*** starting iteration: 2; err: [Inf, 0.24804775376990437, 0.19398443677648902] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24804775376990437, 0.19398443677648902, 0.18758614126313478] ***
*** starting iteration: 3; err: [Inf, 0.24804775376990437, 0.19398443677648902, 0.18758614126313478] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24804775376990437, 0.19398443677648902, 0.18758614126313478, 0.18494732040539383] ***
*** finished computation of 7 references, err: [Inf, 0.24804775376990437, 0.19398443677648902, 0.18758614126313478, 0.18494732040539383] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [77, 4, 0]]
** centroid: 1, normalized-entropy: 0.2837689703721877, [(1, 77), (2, 4)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 27, 20]]
** centroid: 2, normalized-entropy: 0.9839393951635759, [(2, 27), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [86, 1, 0]]
** centroid: 3, normalized-entropy: 0.09054385326964301, [(1, 86), (2, 1)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [63, 13, 0]]
** centroid: 4, normalized-entropy: 0.6601070987550468, [(1, 63), (2, 13)]
*** center 5: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 64, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 69, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2215407925248146] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2215407925248146, 0.1905074951807037] ***
*** starting iteration: 2; err: [Inf, 0.2215407925248146, 0.1905074951807037] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2215407925248146, 0.1905074951807037, 0.18776326317433267] ***
*** starting iteration: 3; err: [Inf, 0.2215407925248146, 0.1905074951807037, 0.18776326317433267] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2215407925248146, 0.1905074951807037, 0.18776326317433267, 0.18705974769871683] ***
*** finished computation of 7 references, err: [Inf, 0.2215407925248146, 0.1905074951807037, 0.18776326317433267, 0.18705974769871683] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 79, 14]]
** centroid: 1, normalized-entropy: 0.6111841012714984, [(2, 79), (3, 14)]
*** center 2: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [47, 6, 0]]
** centroid: 3, normalized-entropy: 0.5095157180881823, [(1, 47), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [54, 16, 0]]
** centroid: 4, normalized-entropy: 0.775512658133148, [(1, 54), (2, 16)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [76, 13, 0]]
** centroid: 5, normalized-entropy: 0.5999108763872215, [(1, 76), (2, 13)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [63, 1, 0]]
** centroid: 6, normalized-entropy: 0.11611507530476962, [(1, 63), (2, 1)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 75, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24677410558983684] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24677410558983684, 0.20387161002494394] ***
*** starting iteration: 2; err: [Inf, 0.24677410558983684, 0.20387161002494394] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24677410558983684, 0.20387161002494394, 0.2004081572201103] ***
*** starting iteration: 3; err: [Inf, 0.24677410558983684, 0.20387161002494394, 0.2004081572201103] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24677410558983684, 0.20387161002494394, 0.2004081572201103, 0.1995806982368231] ***
*** finished computation of 7 references, err: [Inf, 0.24677410558983684, 0.20387161002494394, 0.2004081572201103, 0.1995806982368231] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [80, 14, 0]]
** centroid: 1, normalized-entropy: 0.607171654871303, [(1, 80), (2, 14)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [56, 2, 0]]
** centroid: 2, normalized-entropy: 0.21639693245126485, [(1, 56), (2, 2)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 26, 13]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(2, 26), (3, 13)]
*** center 4: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [87, 7, 0]]
** centroid: 5, normalized-entropy: 0.3823806751537801, [(1, 87), (2, 7)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 56, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 77, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23479701231978833] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23479701231978833, 0.19805282096285373] ***
*** starting iteration: 2; err: [Inf, 0.23479701231978833, 0.19805282096285373] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23479701231978833, 0.19805282096285373, 0.19047821544855834] ***
*** starting iteration: 3; err: [Inf, 0.23479701231978833, 0.19805282096285373, 0.19047821544855834] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23479701231978833, 0.19805282096285373, 0.19047821544855834, 0.18850117196142674] ***
*** finished computation of 7 references, err: [Inf, 0.23479701231978833, 0.19805282096285373, 0.19047821544855834, 0.18850117196142674] ***
*** center 1: selecting labels [1] (freq >= 1) [from [96, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 43, 10]]
** centroid: 2, normalized-entropy: 0.6987003526563345, [(2, 43), (3, 10)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [74, 4, 0]]
** centroid: 3, normalized-entropy: 0.29181825659888555, [(1, 74), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [65, 9, 0]]
** centroid: 4, normalized-entropy: 0.5340042729285396, [(1, 65), (2, 9)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [8, 60, 0]]
** centroid: 5, normalized-entropy: 0.5225593745369407, [(1, 8), (2, 60)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [6, 61, 0]]
** centroid: 6, normalized-entropy: 0.43497348007474274, [(1, 6), (2, 61)]
*** center 7: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21153599944151938] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21153599944151938, 0.18878890051692723] ***
*** starting iteration: 2; err: [Inf, 0.21153599944151938, 0.18878890051692723] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21153599944151938, 0.18878890051692723, 0.18868035878241063] ***
*** finished computation of 7 references, err: [Inf, 0.21153599944151938, 0.18878890051692723, 0.18868035878241063] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [4, 73, 0]]
** centroid: 1, normalized-entropy: 0.29461520565280713, [(1, 4), (2, 73)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [51, 11, 0]]
** centroid: 2, normalized-entropy: 0.674398887071447, [(1, 51), (2, 11)]
*** center 3: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 75, 14]]
** centroid: 4, normalized-entropy: 0.6278191534832795, [(2, 75), (3, 14)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [70, 17, 0]]
** centroid: 5, normalized-entropy: 0.7126368350739763, [(1, 70), (2, 17)]
*** center 6: selecting labels [1] (freq >= 1) [from [42, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2295607278086245] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2295607278086245, 0.19348385929502546] ***
*** starting iteration: 2; err: [Inf, 0.2295607278086245, 0.19348385929502546] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2295607278086245, 0.19348385929502546, 0.19135905734263361] ***
*** starting iteration: 3; err: [Inf, 0.2295607278086245, 0.19348385929502546, 0.19135905734263361] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2295607278086245, 0.19348385929502546, 0.19135905734263361, 0.1908638929054141] ***
*** finished computation of 7 references, err: [Inf, 0.2295607278086245, 0.19348385929502546, 0.19135905734263361, 0.1908638929054141] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [3, 76, 0]]
** centroid: 1, normalized-entropy: 0.23292785546981223, [(1, 3), (2, 76)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [35, 23, 0]]
** centroid: 2, normalized-entropy: 0.9688977092243805, [(1, 35), (2, 23)]
*** center 3: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 61, 11]]
** centroid: 4, normalized-entropy: 0.6167482598263911, [(2, 61), (3, 11)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [45, 15, 0]]
** centroid: 5, normalized-entropy: 0.8112781244591328, [(1, 45), (2, 15)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [59, 10, 0]]
** centroid: 6, normalized-entropy: 0.5969995167604553, [(1, 59), (2, 10)]
*** center 7: selecting labels [1] (freq >= 1) [from [93, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23774316501989962] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23774316501989962, 0.1991657941788435] ***
*** starting iteration: 2; err: [Inf, 0.23774316501989962, 0.1991657941788435] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23774316501989962, 0.1991657941788435, 0.19402997261844576] ***
*** starting iteration: 3; err: [Inf, 0.23774316501989962, 0.1991657941788435, 0.19402997261844576] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23774316501989962, 0.1991657941788435, 0.19402997261844576, 0.1914834320228547] ***
*** finished computation of 7 references, err: [Inf, 0.23774316501989962, 0.1991657941788435, 0.19402997261844576, 0.1914834320228547] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [61, 10, 0]]
** centroid: 1, normalized-entropy: 0.5864477034453907, [(1, 61), (2, 10)]
*** center 2: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 38, 19]]
** centroid: 4, normalized-entropy: 0.9182958340544894, [(2, 38), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [75, 12, 0]]
** centroid: 5, normalized-entropy: 0.5787946246321198, [(1, 75), (2, 12)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 62, 0]]
** centroid: 6, normalized-entropy: 0.11759466565886466, [(1, 1), (2, 62)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 68, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25244452991336586] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25244452991336586, 0.1994206451661885] ***
*** starting iteration: 2; err: [Inf, 0.25244452991336586, 0.1994206451661885] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25244452991336586, 0.1994206451661885, 0.19319382692407816] ***
*** starting iteration: 3; err: [Inf, 0.25244452991336586, 0.1994206451661885, 0.19319382692407816] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25244452991336586, 0.1994206451661885, 0.19319382692407816, 0.18997041870094836] ***
*** finished computation of 7 references, err: [Inf, 0.25244452991336586, 0.1994206451661885, 0.19319382692407816, 0.18997041870094836] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [59, 3, 0]]
** centroid: 1, normalized-entropy: 0.2795055456366802, [(1, 59), (2, 3)]
*** center 2: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 28, 22]]
** centroid: 3, normalized-entropy: 0.9895875212220558, [(2, 28), (3, 22)]
*** center 4: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [84, 6, 0]]
** centroid: 5, normalized-entropy: 0.3533593350214213, [(1, 84), (2, 6)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 62, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [8, 64, 0]]
** centroid: 7, normalized-entropy: 0.5032583347756457, [(1, 8), (2, 64)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2231109033054672] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2231109033054672, 0.1927434301059693] ***
*** starting iteration: 2; err: [Inf, 0.2231109033054672, 0.1927434301059693] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2231109033054672, 0.1927434301059693, 0.18920371620054358] ***
*** starting iteration: 3; err: [Inf, 0.2231109033054672, 0.1927434301059693, 0.18920371620054358] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2231109033054672, 0.1927434301059693, 0.18920371620054358, 0.18881264261342584] ***
*** finished computation of 7 references, err: [Inf, 0.2231109033054672, 0.1927434301059693, 0.18920371620054358, 0.18881264261342584] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [59, 32, 0]]
** centroid: 1, normalized-entropy: 0.9355315642388212, [(1, 59), (2, 32)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [43, 11, 0]]
** centroid: 2, normalized-entropy: 0.7292739418449411, [(1, 43), (2, 11)]
*** center 3: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 58, 16]]
** centroid: 4, normalized-entropy: 0.7531979910695015, [(2, 58), (3, 16)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [83, 12, 0]]
** centroid: 5, normalized-entropy: 0.5472469471683307, [(1, 83), (2, 12)]
*** center 6: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 74, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22869904754683376] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22869904754683376, 0.18868669798597693] ***
*** starting iteration: 2; err: [Inf, 0.22869904754683376, 0.18868669798597693] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22869904754683376, 0.18868669798597693, 0.18680574892088772] ***
*** starting iteration: 3; err: [Inf, 0.22869904754683376, 0.18868669798597693, 0.18680574892088772] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22869904754683376, 0.18868669798597693, 0.18680574892088772, 0.18462110138498247] ***
*** finished computation of 7 references, err: [Inf, 0.22869904754683376, 0.18868669798597693, 0.18680574892088772, 0.18462110138498247] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 61, 3]]
** centroid: 1, normalized-entropy: 0.2729708579140699, [(2, 61), (3, 3)]
*** center 2: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [44, 17, 0]]
** centroid: 3, normalized-entropy: 0.8536576732793314, [(1, 44), (2, 17)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [61, 3, 0]]
** centroid: 4, normalized-entropy: 0.2729708579140699, [(1, 61), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [67, 17, 0]]
** centroid: 5, normalized-entropy: 0.7266645172796352, [(1, 67), (2, 17)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 72, 16]]
** centroid: 6, normalized-entropy: 0.6840384356390419, [(2, 72), (3, 16)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [44, 23, 0]]
** centroid: 7, normalized-entropy: 0.9279262619599757, [(1, 44), (2, 23)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24785705629363655] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24785705629363655, 0.19766791638731956] ***
*** starting iteration: 2; err: [Inf, 0.24785705629363655, 0.19766791638731956] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24785705629363655, 0.19766791638731956, 0.19121453789435328] ***
*** starting iteration: 3; err: [Inf, 0.24785705629363655, 0.19766791638731956, 0.19121453789435328] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24785705629363655, 0.19766791638731956, 0.19121453789435328, 0.1899924505855888] ***
*** finished computation of 7 references, err: [Inf, 0.24785705629363655, 0.19766791638731956, 0.19121453789435328, 0.1899924505855888] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [86, 7, 0]]
** centroid: 1, normalized-entropy: 0.3852851190780996, [(1, 86), (2, 7)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 35, 15]]
** centroid: 2, normalized-entropy: 0.8812908992306927, [(2, 35), (3, 15)]
*** center 3: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [63, 14, 0]]
** centroid: 4, normalized-entropy: 0.6840384356390419, [(1, 63), (2, 14)]
*** center 5: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [4, 53, 0]]
** centroid: 6, normalized-entropy: 0.36657801255334593, [(1, 4), (2, 53)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [2, 72, 0]]
** centroid: 7, normalized-entropy: 0.1792560669283214, [(1, 2), (2, 72)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24967111143842338] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24967111143842338, 0.19663671137392522] ***
*** starting iteration: 2; err: [Inf, 0.24967111143842338, 0.19663671137392522] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24967111143842338, 0.19663671137392522, 0.19281001626327635] ***
*** starting iteration: 3; err: [Inf, 0.24967111143842338, 0.19663671137392522, 0.19281001626327635] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24967111143842338, 0.19663671137392522, 0.19281001626327635, 0.1917512361947447] ***
*** finished computation of 7 references, err: [Inf, 0.24967111143842338, 0.19663671137392522, 0.19281001626327635, 0.1917512361947447] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [66, 4, 0]]
** centroid: 1, normalized-entropy: 0.3159971329784246, [(1, 66), (2, 4)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 53, 15]]
** centroid: 2, normalized-entropy: 0.7612401496918493, [(2, 53), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [56, 28, 0]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(1, 56), (2, 28)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [42, 13, 0]]
** centroid: 4, normalized-entropy: 0.7889406572966208, [(1, 42), (2, 13)]
*** center 5: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 79, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22821297907084226] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22821297907084226, 0.19295935606211423] ***
*** starting iteration: 2; err: [Inf, 0.22821297907084226, 0.19295935606211423] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22821297907084226, 0.19295935606211423, 0.18950326136406512] ***
*** starting iteration: 3; err: [Inf, 0.22821297907084226, 0.19295935606211423, 0.18950326136406512] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22821297907084226, 0.19295935606211423, 0.18950326136406512, 0.18896338929980994] ***
*** finished computation of 7 references, err: [Inf, 0.22821297907084226, 0.19295935606211423, 0.18950326136406512, 0.18896338929980994] ***
*** center 1: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 51, 21]]
** centroid: 2, normalized-entropy: 0.8708644692353648, [(2, 51), (3, 21)]
*** center 3: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [51, 31, 0]]
** centroid: 4, normalized-entropy: 0.956652272148091, [(1, 51), (2, 31)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [37, 35, 0]]
** centroid: 5, normalized-entropy: 0.9994433330902989, [(1, 37), (2, 35)]
*** center 6: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [9, 44, 0]]
** centroid: 7, normalized-entropy: 0.6572729784684466, [(1, 9), (2, 44)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2369736014716327] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2369736014716327, 0.19353026038780807] ***
*** starting iteration: 2; err: [Inf, 0.2369736014716327, 0.19353026038780807] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2369736014716327, 0.19353026038780807, 0.18822468556836247] ***
*** starting iteration: 3; err: [Inf, 0.2369736014716327, 0.19353026038780807, 0.18822468556836247] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2369736014716327, 0.19353026038780807, 0.18822468556836247, 0.18720912151690572] ***
*** finished computation of 7 references, err: [Inf, 0.2369736014716327, 0.19353026038780807, 0.18822468556836247, 0.18720912151690572] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [51, 30, 0]]
** centroid: 1, normalized-entropy: 0.9509560484549724, [(1, 51), (2, 30)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [41, 1, 0]]
** centroid: 2, normalized-entropy: 0.1623261801753929, [(1, 41), (2, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 78, 20]]
** centroid: 4, normalized-entropy: 0.7300166301457938, [(2, 78), (3, 20)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [48, 22, 0]]
** centroid: 5, normalized-entropy: 0.8980587934501658, [(1, 48), (2, 22)]
*** center 6: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [7, 50, 0]]
** centroid: 7, normalized-entropy: 0.5373760853377334, [(1, 7), (2, 50)]
finished with 10 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 356,3 => 31,1 => 613), Dict(2 => 382,3 => 34,1 => 584))
[ Info: ===== scores for single classifier: {"micro_f1":0.912,"precision":0.912,"recall":0.912,"macro_recall":0.9355859571110953,"macro_f1":0.8444691855827292,"accuracy":0.912,"class_f1":{"2":0.8839050131926122,"3":0.7010309278350516,"1":0.948471615720524},"class_precision":{"2":0.8909574468085106,"3":0.5396825396825397,"1":0.9679144385026738},"class_recall":{"2":0.8769633507853403,"3":1.0,"1":0.9297945205479452}}
[ Info: ===== scores for 1: {"micro_f1":0.976,"precision":0.976,"recall":0.976,"macro_recall":0.9829813048363576,"macro_f1":0.9694527121329686,"accuracy":0.976,"class_f1":{"2":0.968668407310705,"3":0.9577464788732395,"1":0.9819432502149613},"class_precision":{"2":0.9661458333333334,"3":0.918918918918919,"1":0.9861830742659758},"class_recall":{"2":0.9712041884816754,"3":1.0,"1":0.9777397260273972}}
[ Info: ===== scores for 5: {"micro_f1":0.979,"precision":0.979,"recall":0.979,"macro_recall":0.9868064022568075,"macro_f1":0.9675492173320149,"accuracy":0.979,"class_f1":{"2":0.9729729729729729,"3":0.9444444444444444,"1":0.9852302345786274},"class_precision":{"2":0.9569620253164557,"3":0.8947368421052632,"1":1.0},"class_recall":{"2":0.9895287958115183,"3":1.0,"1":0.9708904109589042}}
[ Info: ===== scores for 7: {"micro_f1":0.982,"precision":0.982,"recall":0.982,"macro_recall":0.9885187310239308,"macro_f1":0.9696856382399086,"accuracy":0.982,"class_f1":{"2":0.9767441860465117,"3":0.9444444444444444,"1":0.9878682842287695},"class_precision":{"2":0.9642857142857143,"3":0.8947368421052632,"1":1.0},"class_recall":{"2":0.9895287958115183,"3":1.0,"1":0.976027397260274}}
[ Info: ===== scores for 9: {"micro_f1":0.975,"precision":0.975,"recall":0.975,"macro_recall":0.9743846796410596,"macro_f1":0.9482880206514634,"accuracy":0.975,"class_f1":{"2":0.967741935483871,"3":0.8918918918918919,"1":0.9852302345786274},"class_precision":{"2":0.9541984732824428,"3":0.825,"1":1.0},"class_recall":{"2":0.981675392670157,"3":0.9705882352941176,"1":0.9708904109589042}}
[ Info: ===== scores for 11: {"micro_f1":0.978,"precision":0.978,"recall":0.978,"macro_recall":0.9850283296277702,"macro_f1":0.955036075036075,"accuracy":0.978,"class_f1":{"2":0.9714285714285715,"3":0.9066666666666667,"1":0.9870129870129869},"class_precision":{"2":0.9639175257731959,"3":0.8292682926829268,"1":0.9982486865148862},"class_recall":{"2":0.9790575916230366,"3":1.0,"1":0.976027397260274}}
(score = 0.976, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.976, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.977, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.977, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.981, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.981, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.985, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.985, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.979, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.979, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.978, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.978, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.982, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.982, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.98, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.98, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.985,"k":3,"kernel":"direct_kernel","dist":"l2_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.985,"precision":0.985,"recall":0.985,"macro_recall":0.9893255875110568,"macro_f1":0.9717927679335802,"accuracy":0.985,"class_f1":{"2":0.9803921568627451,"3":0.9444444444444444,"1":0.9905417024935511},"class_precision":{"2":0.97911227154047,"3":0.8947368421052632,"1":0.9948186528497409},"class_recall":{"2":0.981675392670157,"3":1.0,"1":0.9863013698630136}}
Test Summary: | Pass  Total
AKNC          |    8      8
[316, 1, 6, 1, 3, 2, 3, 4, 1, 7, 1, 3, 2, 1, 12, 1, 5, 5, 1, 4, 3, 19, 2, 4, 5, 14, 3, 29, 5, 1, 13, 1, 4, 1, 9, 4, 3, 130, 4, 26, 21, 6, 8, 11, 16, 8, 5, 11, 2, 2, 2, 4, 29, 17, 12, 8, 7, 5, 12, 26, 7, 26, 5, 7, 17, 10, 17, 21, 5, 24, 26, 24, 4, 11, 45, 15, 16, 16, 6, 23, 4, 9, 6, 35, 11, 27, 47, 6, 8, 3, 9, 6, 18, 30, 46, 8, 12, 15, 24, 4, 105, 14, 60, 26, 37, 9, 24, 11, 1418, 13, 19, 80, 96, 13, 3, 29, 3, 4, 4, 16, 45, 29, 11, 39, 8, 9, 22, 10, 70, 72, 40, 12, 27, 10, 2, 26, 50, 6, 2, 3, 12, 66, 102, 3, 4, 1, 8, 9, 7, 26, 64, 41, 2, 9, 7, 15, 7, 122, 36, 23, 41, 9, 8, 9, 15, 36, 9, 13, 31, 6, 13, 227, 162, 5, 112, 23, 6, 8, 32, 25, 11, 78, 96, 2, 24, 3, 7, 80, 34, 51, 43, 53, 11, 39, 22, 76, 33, 47, 73, 84, 8, 21, 13, 23, 38, 34, 123, 33, 11, 9, 3, 41, 87, 43, 55, 40, 6, 25, 22, 51, 44, 128, 14, 9, 69, 10, 28, 175, 2, 15, 68, 3, 5, 13, 56, 50, 2, 72, 33, 15, 34, 14, 15, 16, 52, 19, 15, 8, 5, 3, 21, 68, 6, 4, 39, 1, 31, 3, 13, 92, 32, 49, 85, 10, 9, 55, 61, 131, 6, 19, 8, 442, 8, 54, 6, 11, 78, 32, 12, 61, 2, 3, 3, 8, 62, 4, 26, 212, 5, 30, 11, 1, 34, 13, 10, 110, 21, 13, 70, 15]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6560000000000001, speedup = 0.287603639334147, eval_ratio = 0.09282699999999999)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.4214564732142857,"recall":0.4097222222222222,"f1":null,"seconds":0.00018398277461528778,"exhaustive_search_seconds":0.0003625229001045227,"evaluations":580.6015625,"distances_sum":1682.687593157607}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.6012369791666665,"recall":0.6006944444444443,"f1":null,"seconds":0.0004269257187843323,"exhaustive_search_seconds":0.0003625229001045227,"evaluations":778.0625,"distances_sum":1599.6091310136435}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6814236111111107,"recall":0.6814236111111107,"f1":0.6814236111111107,"seconds":0.00033895857632160187,"exhaustive_search_seconds":0.0003625229001045227,"evaluations":895.640625,"distances_sum":1563.0615409532854}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.764756944444444,"recall":0.764756944444444,"f1":0.764756944444444,"seconds":0.00040902942419052124,"exhaustive_search_seconds":0.0003625229001045227,"evaluations":1069.9296875,"distances_sum":1535.976234034294}
KCenters.DeloneInvIndex> reached performance {"precision":0.8133680555555554,"recall":0.8133680555555554,"f1":0.8133680555555554,"seconds":0.0005593933165073395,"exhaustive_search_seconds":0.0003625229001045227,"evaluations":1228.0546875,"distances_sum":1523.9207158444067}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.807, speedup = 0.41095951180154877, eval_ratio = 0.129255)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
