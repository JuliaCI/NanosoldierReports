Julia Version 1.6.0-DEV.27
Commit 35eb898ad7 (2020-05-12 10:33 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed MappedArrays ──────────────── v0.2.2
  Installed Missings ──────────────────── v0.4.3
  Installed PooledArrays ──────────────── v0.5.3
  Installed DataValueInterfaces ───────── v1.0.0
  Installed Compat ────────────────────── v3.9.1
  Installed KCenters ──────────────────── v0.2.2
  Installed OrderedCollections ────────── v1.2.0
  Installed MLDataUtils ───────────────── v0.5.1
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed CategoricalArrays ─────────── v0.7.7
  Installed Parsers ───────────────────── v1.0.3
  Installed Tables ────────────────────── v1.0.4
  Installed InvertedIndices ───────────── v1.0.0
  Installed DataStructures ────────────── v0.17.15
  Installed JSON ──────────────────────── v0.21.0
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed StatsBase ─────────────────── v0.32.2
  Installed MLDataPattern ─────────────── v0.5.3
  Installed DataFrames ────────────────── v0.20.2
  Installed SimilaritySearch ──────────── v0.3.19
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed Reexport ──────────────────── v0.2.0
  Installed TableTraits ───────────────── v1.0.0
  Installed LearnBase ─────────────────── v0.2.2
  Installed DataAPI ───────────────────── v1.3.0
Updating `~/.julia/environments/v1.6/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.9.1
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.15
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.2.0
  [69de0a69] + Parsers v1.0.3
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_avVq1O/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_avVq1O/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.9.1
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.15
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.2.0
  [69de0a69] Parsers v1.0.3
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.9323044313987097
[ Info: 0.8326150393486023
[ Info: 0.5568768373628458
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.3297804680218299
mean(cdnet.distances) = 0.36433700278401376
mean(crand.distances) = 0.3408242338895798
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.439453125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.439453125,"f1":null,"seconds":3.939494490623474e-6,"exhaustive_search_seconds":1.9222497940063477e-6,"evaluations":6.671875,"distances_sum":1150.6098401734994}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6953125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6953125,"f1":0.8117080835830844,"seconds":5.54695725440979e-6,"exhaustive_search_seconds":1.9222497940063477e-6,"evaluations":8.125,"distances_sum":1891.137426563934}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6953125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6953125,"f1":0.8117080835830844,"seconds":5.54695725440979e-6,"exhaustive_search_seconds":1.9222497940063477e-6,"evaluations":8.125,"distances_sum":1891.137426563934}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7705078125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7705078125,"f1":0.8652873168498176,"seconds":5.6121498346328735e-6,"exhaustive_search_seconds":1.9222497940063477e-6,"evaluations":8.4921875,"distances_sum":2119.7617864553245}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8369140625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8369140625,"f1":0.9065392940392948,"seconds":5.848705768585205e-6,"exhaustive_search_seconds":1.9222497940063477e-6,"evaluations":8.53125,"distances_sum":2369.5735123838917}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.77734375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.77734375,"f1":0.8671848984348992,"seconds":5.515292286872864e-6,"exhaustive_search_seconds":1.9222497940063477e-6,"evaluations":8.40625,"distances_sum":2132.4621113247654}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8369140625,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8369140625,"f1":0.9065392940392948,"seconds":5.848705768585205e-6,"exhaustive_search_seconds":1.9222497940063477e-6,"evaluations":8.53125,"distances_sum":2369.5735123838917}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9742788461538465,"seconds":6.580725312232971e-6,"exhaustive_search_seconds":1.9222497940063477e-6,"evaluations":8.9453125,"distances_sum":2888.1922245935825}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9376774267399275,"seconds":6.249174475669861e-6,"exhaustive_search_seconds":1.9222497940063477e-6,"evaluations":8.6953125,"distances_sum":2590.0676012268195}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.876953125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.876953125,"f1":0.9302770146520156,"seconds":6.5267086029052734e-6,"exhaustive_search_seconds":1.9222497940063477e-6,"evaluations":8.703125,"distances_sum":2511.386031949758}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9557177197802201,"seconds":6.543472409248352e-6,"exhaustive_search_seconds":1.9222497940063477e-6,"evaluations":8.90625,"distances_sum":2717.910981796584}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9453754578754585,"seconds":6.28642737865448e-6,"exhaustive_search_seconds":1.9222497940063477e-6,"evaluations":8.765625,"distances_sum":2646.2690651508824}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9651098901098906,"seconds":6.690621376037598e-6,"exhaustive_search_seconds":1.9222497940063477e-6,"evaluations":8.9140625,"distances_sum":2818.3108029040422}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9541015625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9742788461538465,"seconds":6.580725312232971e-6,"exhaustive_search_seconds":1.9222497940063477e-6,"evaluations":8.9453125,"distances_sum":2888.1922245935825}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9541015625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9742788461538465,"seconds":6.580725312232971e-6,"exhaustive_search_seconds":1.9222497940063477e-6,"evaluations":8.9453125,"distances_sum":2888.1922245935825}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.759765625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.759765625,"f1":0.8521905178155184,"seconds":5.627050995826721e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.1015625,"distances_sum":1965.676926313715}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.759765625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.759765625,"f1":0.8521905178155184,"seconds":5.627050995826721e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.1015625,"distances_sum":1965.676926313715}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.875,"f1":0.925964660339661,"seconds":5.781650543212891e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.578125,"distances_sum":2364.9346559122264}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.942141712454213,"seconds":5.7891011238098145e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.7421875,"distances_sum":2458.0617961699377}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9582646520146527,"seconds":5.8002769947052e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.75,"distances_sum":2594.208362202547}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.92578125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.92578125,"f1":0.9582646520146527,"seconds":5.8002769947052e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.75,"distances_sum":2594.208362202547}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9649210164835168,"seconds":5.587935447692871e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.8203125,"distances_sum":2616.5073008183076}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.962093635531136,"seconds":5.520880222320557e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.7890625,"distances_sum":2611.1268370562047}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.962890625, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.962890625,"f1":0.9792639652014656,"seconds":5.809590220451355e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.890625,"distances_sum":2724.368697950856}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9656135531135533,"seconds":5.548819899559021e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.8359375,"distances_sum":2624.417861174933}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.962890625,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9792639652014656,"seconds":5.809590220451355e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.890625,"distances_sum":2724.368697950856}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.962890625,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9792639652014656,"seconds":5.809590220451355e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.890625,"distances_sum":2724.368697950856}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.21484375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.21484375,"f1":null,"seconds":3.7532299757003784e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":7.0,"distances_sum":510.151767812154}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.21484375,"state":{"ssize":4,"bsize":1},"perf":{"precision":null,"recall":0.21484375,"f1":null,"seconds":3.7532299757003784e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":7.0,"distances_sum":510.151767812154}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5869140625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5869140625,"f1":0.7267329892329899,"seconds":4.4405460357666016e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":7.7421875,"distances_sum":1379.3050702725088}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7158203125, conf: {"ssize":1,"bsize":4}, perf: {"precision":null,"recall":0.7158203125,"f1":null,"seconds":5.0533562898635864e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.390625,"distances_sum":1791.84385095166}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7158203125,"state":{"ssize":1,"bsize":4},"perf":{"precision":null,"recall":0.7158203125,"f1":null,"seconds":5.0533562898635864e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.390625,"distances_sum":1791.84385095166}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9620592948717953,"seconds":6.20819628238678e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.9765625,"distances_sum":2559.193683203467}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7939453125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7939453125,"f1":0.8788347069597077,"seconds":5.669891834259033e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.7265625,"distances_sum":2011.1906904707107}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.830078125, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.830078125,"f1":0.89994900932401,"seconds":6.027519702911377e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.9375,"distances_sum":2147.2205802965236}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.779296875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.779296875,"f1":0.8687645687645696,"seconds":5.548819899559021e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.75,"distances_sum":1944.3679212872833}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9437957875457884,"seconds":5.9586018323898315e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.984375,"distances_sum":2391.7111615046406}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9326171875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9620592948717953,"seconds":6.20819628238678e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.9765625,"distances_sum":2559.193683203467}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9326171875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9620592948717953,"seconds":6.20819628238678e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.9765625,"distances_sum":2559.193683203467}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2021484375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2021484375,"f1":null,"seconds":3.458932042121887e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":5.7890625,"distances_sum":465.8915478541659}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6865234375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6865234375,"f1":0.8032670454545463,"seconds":5.09992241859436e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":7.953125,"distances_sum":1597.3728309800706}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6865234375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6865234375,"f1":0.8032670454545463,"seconds":5.09992241859436e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":7.953125,"distances_sum":1597.3728309800706}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9426453754578761,"seconds":5.997717380523682e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.9140625,"distances_sum":2338.5272994606225}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8984375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8984375,"f1":0.9426453754578761,"seconds":5.997717380523682e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.9140625,"distances_sum":2338.5272994606225}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9576293498168503,"seconds":5.982816219329834e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.9296875,"distances_sum":2434.4428081020437}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9646806318681325,"seconds":6.638467311859131e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.96875,"distances_sum":2471.365929207398}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9365234375,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9646806318681325,"seconds":6.638467311859131e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.96875,"distances_sum":2471.365929207398}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9365234375,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9646806318681325,"seconds":6.638467311859131e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.96875,"distances_sum":2471.365929207398}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7177734375, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.7177734375,"f1":0.8260978604728614,"seconds":5.260109901428223e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.0390625,"distances_sum":1800.1455470029885}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7177734375,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.7177734375,"f1":0.8260978604728614,"seconds":5.260109901428223e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.0390625,"distances_sum":1800.1455470029885}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7978515625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7978515625,"f1":0.8820372335997344,"seconds":5.446374416351318e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.5625,"distances_sum":2051.596359017443}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7978515625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7978515625,"f1":0.8820372335997344,"seconds":5.446374416351318e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.5625,"distances_sum":2051.596359017443}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.828125, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.828125,"f1":0.8992533508158516,"seconds":5.863606929779053e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.7109375,"distances_sum":2144.817909872717}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8427734375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8427734375,"f1":0.9100763819513829,"seconds":5.900859832763672e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.75,"distances_sum":2212.238514179786}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.845703125, conf: {"ssize":10,"bsize":6}, perf: {"precision":1.0,"recall":0.845703125,"f1":0.912179487179488,"seconds":5.843117833137512e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.7734375,"distances_sum":2212.115328852854}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9525927197802203,"seconds":6.252899765968323e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.875,"distances_sum":2544.9780638652683}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91796875,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9525927197802203,"seconds":6.252899765968323e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.875,"distances_sum":2544.9780638652683}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.91796875,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9525927197802203,"seconds":6.252899765968323e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.875,"distances_sum":2544.9780638652683}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.666015625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.666015625,"f1":0.7882053710178719,"seconds":5.070120096206665e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":7.7890625,"distances_sum":1710.047001225478}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7412109375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7412109375,"f1":0.8428748334998345,"seconds":5.239620804786682e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.1796875,"distances_sum":1920.7053606670438}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7412109375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7412109375,"f1":0.8428748334998345,"seconds":5.239620804786682e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.1796875,"distances_sum":1920.7053606670438}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9476820054945061,"seconds":6.010755896568298e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.796875,"distances_sum":2524.212158155794}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.908203125,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.908203125,"f1":0.9476820054945061,"seconds":6.010755896568298e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.796875,"distances_sum":2524.212158155794}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":4,"bsize":12}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.9766941391941396,"seconds":6.20819628238678e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.984375,"distances_sum":2716.228272456431}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9580078125,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9766941391941396,"seconds":6.20819628238678e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.984375,"distances_sum":2716.228272456431}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9580078125,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9766941391941396,"seconds":6.20819628238678e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.984375,"distances_sum":2716.228272456431}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.740234375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.740234375,"f1":0.8403945013320021,"seconds":5.472451448440552e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.0390625,"distances_sum":1843.3566504916294}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.619140625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.619140625,"f1":0.7522690850815857,"seconds":5.010515451431274e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":7.3046875,"distances_sum":1447.9046952665801}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.740234375,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.740234375,"f1":0.8403945013320021,"seconds":5.472451448440552e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.0390625,"distances_sum":1843.3566504916294}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9390510531135537,"seconds":5.95487654209137e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.6328125,"distances_sum":2427.7191817714834}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.944631410256411,"seconds":6.010755896568298e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.609375,"distances_sum":2469.034064308443}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.90234375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.90234375,"f1":0.944631410256411,"seconds":6.010755896568298e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.609375,"distances_sum":2469.034064308443}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9667067307692313,"seconds":6.20819628238678e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.859375,"distances_sum":2566.7352661600958}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9638671875, conf: {"ssize":3,"bsize":13}, perf: {"precision":1.0,"recall":0.9638671875,"f1":0.9801911630036632,"seconds":6.256625056266785e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.9296875,"distances_sum":2642.8182135270413}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9758184523809528,"seconds":6.029382348060608e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.8671875,"distances_sum":2635.898396248724}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9564961080586086,"seconds":5.826354026794434e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.78125,"distances_sum":2510.8812295981415}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9638671875,"state":{"ssize":3,"bsize":13},"perf":{"precision":1.0,"recall":0.9638671875,"f1":0.9801911630036632,"seconds":6.256625056266785e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.9296875,"distances_sum":2642.8182135270413}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9638671875,"state":{"ssize":3,"bsize":13},"perf":{"precision":1.0,"recall":0.9638671875,"f1":0.9801911630036632,"seconds":6.256625056266785e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.9296875,"distances_sum":2642.8182135270413}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4873046875, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.4873046875,"f1":null,"seconds":4.326924681663513e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":6.6484375,"distances_sum":1081.7052266741575}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7724609375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7724609375,"f1":0.8612590534465543,"seconds":5.11854887008667e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.171875,"distances_sum":1861.1428636786632}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7724609375,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7724609375,"f1":0.8612590534465543,"seconds":5.11854887008667e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.171875,"distances_sum":1861.1428636786632}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9540636446886451,"seconds":6.126239895820618e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.90625,"distances_sum":2392.566660733257}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.79296875, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.79296875,"f1":0.8740015193140203,"seconds":5.465000867843628e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.2421875,"distances_sum":1903.4948246184945}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9189453125,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.9189453125,"f1":0.9540636446886451,"seconds":6.126239895820618e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.90625,"distances_sum":2392.566660733257}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9619140625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9619140625,"f1":0.9786286630036632,"seconds":6.319954991340637e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.9296875,"distances_sum":2586.958525373761}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9693853021978025,"seconds":6.254762411117554e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.890625,"distances_sum":2525.2007353388267}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.960994734432235,"seconds":6.029382348060608e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.9140625,"distances_sum":2448.8298193651517}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9619140625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9786286630036632,"seconds":6.319954991340637e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.9296875,"distances_sum":2586.958525373761}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9619140625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9786286630036632,"seconds":6.319954991340637e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.9296875,"distances_sum":2586.958525373761}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2060546875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2060546875,"f1":null,"seconds":3.1795352697372437e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":5.9921875,"distances_sum":530.1637910879857}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.201171875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.201171875,"f1":null,"seconds":3.162771463394165e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":5.9765625,"distances_sum":476.41698345379973}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6875, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6875,"f1":0.8071980103230112,"seconds":4.7292560338974e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":7.7890625,"distances_sum":1628.1629433359178}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6875,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.6875,"f1":0.8071980103230112,"seconds":4.7292560338974e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":7.7890625,"distances_sum":1628.1629433359178}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7666015625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7666015625,"f1":0.8589608308358317,"seconds":5.29363751411438e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.078125,"distances_sum":1893.921598959421}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7890625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7890625,"f1":0.8725144647019654,"seconds":5.2638351917266846e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.078125,"distances_sum":2002.0571407265736}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9337168040293047,"seconds":5.584210157394409e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.6953125,"distances_sum":2346.0734668131736}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.783203125, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.783203125,"f1":0.8672338078588087,"seconds":5.02169132232666e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.0390625,"distances_sum":1975.3686257154895}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.794921875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.794921875,"f1":0.8743027805527813,"seconds":5.071982741355896e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.03125,"distances_sum":2043.6133219379951}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.69140625, conf: {"ssize":8,"bsize":4}, perf: {"precision":1.0,"recall":0.69140625,"f1":0.8081148018648028,"seconds":4.854053258895874e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":7.78125,"distances_sum":1650.6540579801213}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.884765625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.884765625,"f1":0.9337168040293047,"seconds":5.584210157394409e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.6953125,"distances_sum":2346.0734668131736}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9670043498168502,"seconds":6.010755896568298e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.8984375,"distances_sum":2595.3389961463286}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9607543498168505,"seconds":5.753710865974426e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.859375,"distances_sum":2536.445303291621}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.964119734432235,"seconds":5.843117833137512e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.84375,"distances_sum":2580.7845877561945}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9517170329670332,"seconds":5.802139639854431e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.8046875,"distances_sum":2489.3908659452045}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9418211996337004,"seconds":5.563721060752869e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.7578125,"distances_sum":2382.750172394701}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9404296875,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9670043498168502,"seconds":6.010755896568298e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.8984375,"distances_sum":2595.3389961463286}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9404296875,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9670043498168502,"seconds":6.010755896568298e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.8984375,"distances_sum":2595.3389961463286}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6806640625, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6806640625,"f1":0.7977300477300485,"seconds":4.805624485015869e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":7.6953125,"distances_sum":1620.59259858565}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6806640625,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.6806640625,"f1":0.7977300477300485,"seconds":4.805624485015869e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":7.6953125,"distances_sum":1620.59259858565}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9462339743589749,"seconds":5.446374416351318e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.7265625,"distances_sum":2479.981442315176}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9489869505494511,"seconds":5.548819899559021e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.6328125,"distances_sum":2443.2970902271286}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91015625,"state":{"ssize":7,"bsize":7},"perf":{"precision":1.0,"recall":0.91015625,"f1":0.9489869505494511,"seconds":5.548819899559021e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.6328125,"distances_sum":2443.2970902271286}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9744791666666672,"seconds":5.887821316719055e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.8984375,"distances_sum":2652.8649198162693}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9684008699633705,"seconds":5.731359124183655e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.8046875,"distances_sum":2610.3871459012475}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.953125,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9744791666666672,"seconds":5.887821316719055e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.8984375,"distances_sum":2652.8649198162693}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.953125,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9744791666666672,"seconds":5.887821316719055e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.8984375,"distances_sum":2652.8649198162693}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1669921875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1669921875,"f1":null,"seconds":2.814456820487976e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":4.609375,"distances_sum":459.16248256000364}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6533203125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6533203125,"f1":0.7765011030636036,"seconds":4.67151403427124e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":7.75,"distances_sum":1632.1320912712247}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1796875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.1796875,"f1":null,"seconds":2.857297658920288e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":4.6953125,"distances_sum":477.31620436949913}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6533203125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6533203125,"f1":0.7765011030636036,"seconds":4.67151403427124e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":7.75,"distances_sum":1632.1320912712247}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.810546875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.810546875,"f1":0.8870707417582425,"seconds":5.511566996574402e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.5390625,"distances_sum":2106.432923838708}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7236328125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7236328125,"f1":0.828612533300034,"seconds":4.857778549194336e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.109375,"distances_sum":1852.7750750954644}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6650390625, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6650390625,"f1":0.7867627164502172,"seconds":4.697591066360474e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":7.8984375,"distances_sum":1692.0802796525747}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.740234375, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.740234375,"f1":0.841773851148852,"seconds":5.297362804412842e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.1796875,"distances_sum":1903.196420290941}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.810546875,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.810546875,"f1":0.8870707417582425,"seconds":5.511566996574402e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.5390625,"distances_sum":2106.432923838708}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8701171875, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.8701171875,"f1":0.9239755036630044,"seconds":5.520880222320557e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.6328125,"distances_sum":2371.573262345036}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9501888736263742,"seconds":5.710870027542114e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.8125,"distances_sum":2516.1086139329345}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8515625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8515625,"f1":0.9121113261738267,"seconds":5.969777703285217e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.5546875,"distances_sum":2284.3414701355478}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9606456043956048,"seconds":6.01448118686676e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.8671875,"distances_sum":2602.7162124468464}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9427140567765574,"seconds":6.355345249176025e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.75,"distances_sum":2495.4391402583133}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9306640625,"state":{"ssize":7,"bsize":8},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.9606456043956048,"seconds":6.01448118686676e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.8671875,"distances_sum":2602.7162124468464}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9306640625,"state":{"ssize":7,"bsize":8},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.9606456043956048,"seconds":6.01448118686676e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.8671875,"distances_sum":2602.7162124468464}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6650390625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6650390625,"f1":0.7885603979353986,"seconds":4.7497451305389404e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":7.46875,"distances_sum":1740.717172698223}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1826171875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1826171875,"f1":null,"seconds":3.1851232051849365e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":4.75,"distances_sum":515.576010917034}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6650390625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6650390625,"f1":0.7885603979353986,"seconds":4.7497451305389404e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":7.46875,"distances_sum":1740.717172698223}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6689453125, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6689453125,"f1":0.7874229936729944,"seconds":4.520639777183533e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":7.5546875,"distances_sum":1695.8317497167238}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6689453125,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.6689453125,"f1":0.7874229936729944,"seconds":4.520639777183533e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":7.5546875,"distances_sum":1695.8317497167238}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.6689453125,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.6689453125,"f1":0.7874229936729944,"seconds":4.520639777183533e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":7.5546875,"distances_sum":1695.8317497167238}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1611328125, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.1611328125,"f1":null,"seconds":3.373250365257263e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":5.0859375,"distances_sum":307.7357138079911}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.1611328125,"state":{"ssize":4,"bsize":1},"perf":{"precision":null,"recall":0.1611328125,"f1":null,"seconds":3.373250365257263e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":5.0859375,"distances_sum":307.7357138079911}}, beam: 3, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.1611328125,"state":{"ssize":4,"bsize":1},"perf":{"precision":null,"recall":0.1611328125,"f1":null,"seconds":3.373250365257263e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":5.0859375,"distances_sum":307.7357138079911}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.787109375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.787109375,"f1":0.8729999167499176,"seconds":5.105510354042053e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.109375,"distances_sum":1645.0686715621594}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2607421875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2607421875,"f1":null,"seconds":3.559514880180359e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":6.5390625,"distances_sum":505.6609155653329}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.787109375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.787109375,"f1":0.8729999167499176,"seconds":5.105510354042053e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.109375,"distances_sum":1645.0686715621594}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9532795329670334,"seconds":5.824491381645203e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.84375,"distances_sum":2123.3959013037106}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.845703125, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.845703125,"f1":0.912208104395605,"seconds":5.424022674560547e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.5546875,"distances_sum":1838.143323159001}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91796875,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9532795329670334,"seconds":5.824491381645203e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.84375,"distances_sum":2123.3959013037106}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9597527472527478,"seconds":6.552785634994507e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.8203125,"distances_sum":2169.1143147824832}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9609375, conf: {"ssize":6,"bsize":13}, perf: {"precision":1.0,"recall":0.9609375,"f1":0.978794642857143,"seconds":7.014721632003784e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.9609375,"distances_sum":2250.319373246965}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9562557234432238,"seconds":6.321817636489868e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.8828125,"distances_sum":2124.2964230634007}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9698489010989015,"seconds":7.60108232498169e-5,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.9140625,"distances_sum":2214.3152270952064}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9551224816849824,"seconds":5.817040801048279e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.84375,"distances_sum":2141.2681854480297}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9609375,"state":{"ssize":6,"bsize":13},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.978794642857143,"seconds":7.014721632003784e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.9609375,"distances_sum":2250.319373246965}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9609375,"state":{"ssize":6,"bsize":13},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.978794642857143,"seconds":7.014721632003784e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.9609375,"distances_sum":2250.319373246965}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2373046875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2373046875,"f1":null,"seconds":3.6582350730895996e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":6.15625,"distances_sum":426.8023907133247}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.681640625, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.681640625,"f1":0.8000601828726838,"seconds":4.949048161506653e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":7.7734375,"distances_sum":1333.6427796209744}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.681640625,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.681640625,"f1":0.8000601828726838,"seconds":4.949048161506653e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":7.7734375,"distances_sum":1333.6427796209744}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.8601990023865032,"seconds":5.334615707397461e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.1015625,"distances_sum":1564.0532720186209}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9486836080586086,"seconds":5.766749382019043e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.8125,"distances_sum":2097.128532790798}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9091796875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9091796875,"f1":0.9486836080586086,"seconds":5.766749382019043e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.8125,"distances_sum":2097.128532790798}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9703697344322348,"seconds":6.057322025299072e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.953125,"distances_sum":2199.541961677293}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9543727106227113,"seconds":6.0442835092544556e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.8203125,"distances_sum":2131.778383525537}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9462890625,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.9703697344322348,"seconds":6.057322025299072e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.953125,"distances_sum":2199.541961677293}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9462890625,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.9703697344322348,"seconds":6.057322025299072e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.953125,"distances_sum":2199.541961677293}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3876953125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3876953125,"f1":null,"seconds":3.5017728805541992e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":5.984375,"distances_sum":725.3349088601344}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.533203125, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.533203125,"f1":null,"seconds":4.328787326812744e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":7.0234375,"distances_sum":1035.4204068757226}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.533203125,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.533203125,"f1":null,"seconds":4.328787326812744e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":7.0234375,"distances_sum":1035.4204068757226}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.9338146228771236,"seconds":5.5674463510513306e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.8125,"distances_sum":2039.421115549243}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.787109375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.787109375,"f1":0.8733859890109897,"seconds":5.358830094337463e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.53125,"distances_sum":1697.5603587010362}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5439453125, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5439453125,"f1":0.691667360417361,"seconds":4.2673200368881226e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":7.03125,"distances_sum":1049.304314177795}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.8605862887112895,"seconds":5.207955837249756e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.4921875,"distances_sum":1629.9288134535066}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.849609375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.849609375,"f1":0.912445887445888,"seconds":5.414709448814392e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.7265625,"distances_sum":1896.9479487569856}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.662109375, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.662109375,"f1":0.7859629953379961,"seconds":4.727393388748169e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":7.859375,"distances_sum":1350.7459335295841}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8876953125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8876953125,"f1":0.9338146228771236,"seconds":5.5674463510513306e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.8125,"distances_sum":2039.421115549243}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9651098901098905,"seconds":6.213784217834473e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.8125,"distances_sum":2251.3827461164633}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9600503663003666,"seconds":5.729496479034424e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.875,"distances_sum":2210.014047795029}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9593063186813191,"seconds":6.102025508880615e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.890625,"distances_sum":2187.1104291645815}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9418440934065941,"seconds":5.498528480529785e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.8046875,"distances_sum":2079.571665403691}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9604967948717952,"seconds":5.666166543960571e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.8671875,"distances_sum":2202.820502714017}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9577266483516486,"seconds":5.81890344619751e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.8671875,"distances_sum":2191.7756721959236}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9384765625,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9651098901098905,"seconds":6.213784217834473e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.8125,"distances_sum":2251.3827461164633}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9384765625,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9651098901098905,"seconds":6.213784217834473e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.8125,"distances_sum":2251.3827461164633}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.67578125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.67578125,"f1":0.7964701964701973,"seconds":4.606321454048157e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":7.6484375,"distances_sum":1342.1235459227296}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7548828125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7548828125,"f1":0.852121316183817,"seconds":5.213543772697449e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.2421875,"distances_sum":1544.5346452428073}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7548828125,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7548828125,"f1":0.852121316183817,"seconds":5.213543772697449e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.2421875,"distances_sum":1544.5346452428073}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7626953125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7626953125,"f1":0.8566948676323685,"seconds":5.375593900680542e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.21875,"distances_sum":1579.6618110539032}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9562557234432241,"seconds":5.846843123435974e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.796875,"distances_sum":2134.6802730191657}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7763671875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7763671875,"f1":0.8674741924741933,"seconds":5.945563316345215e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.3203125,"distances_sum":1623.7623605638955}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9525927197802203,"seconds":5.8002769947052e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.8046875,"distances_sum":2117.7431383214416}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8193359375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8193359375,"f1":0.8941969488844497,"seconds":5.587935447692871e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.53125,"distances_sum":1766.3499234634235}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9228515625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9228515625,"f1":0.9562557234432241,"seconds":5.846843123435974e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.796875,"distances_sum":2134.6802730191657}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9699404761904769,"seconds":5.895271897315979e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.8984375,"distances_sum":2216.734471157255}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9609375, conf: {"ssize":4,"bsize":12}, perf: {"precision":1.0,"recall":0.9609375,"f1":0.9788690476190478,"seconds":6.085261702537537e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.9375,"distances_sum":2253.327071028209}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9634901556776561,"seconds":5.854293704032898e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.8984375,"distances_sum":2160.1097687769948}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9609375,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9788690476190478,"seconds":6.085261702537537e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.9375,"distances_sum":2253.327071028209}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9609375,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9788690476190478,"seconds":6.085261702537537e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.9375,"distances_sum":2253.327071028209}}, n: 9
mean(cfft.distances) = 0.3297804681856231
mean(cdnet.distances) = 0.4735228425566327
mean(crand.distances) = 0.3463082001607652
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.9111111111111111
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8733333333333334
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.9
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.831111111111111
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8911111111111111
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.9022222222222221
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9133333333333332
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.94
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.94
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.9
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8977777777777778
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.9333333333333332
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8688888888888888
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9199999999999999
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.88
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.8733333333333334
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.928888888888889
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9244444444444445
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.9022222222222221
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8733333333333334
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.94
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.9088888888888889
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.8711111111111111
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9155555555555556
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8844444444444445
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9088888888888889
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9066666666666666
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.851111111111111
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8444444444444444
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9022222222222221
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9044444444444445
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9044444444444445
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.8955555555555555
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.9466666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.9733333333333334
*** finished computation of 12 references, err: [Inf, 0.5227793884277344] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 28]]
*** center 2: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 5, 7]]
** centroid: 5, normalized-entropy: 0.9798687566511527, [(2, 5), (3, 7)]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 9, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 1, 1]]
** centroid: 9, normalized-entropy: 1.0, [(2, 1), (3, 1)]
*** center 10: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 16, 2]]
** centroid: 12, normalized-entropy: 0.5032583347756457, [(2, 16), (3, 2)]
finished with 15 centroids; started with 12
acc = 0.9533333333333334
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.39742144689176445] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39742144689176445, 0.3139843610297139] ***
*** starting iteration: 2; err: [Inf, 0.39742144689176445, 0.3139843610297139] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39742144689176445, 0.3139843610297139, 0.30783356170172804] ***
*** starting iteration: 3; err: [Inf, 0.39742144689176445, 0.3139843610297139, 0.30783356170172804] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39742144689176445, 0.3139843610297139, 0.30783356170172804, 0.30661889628364564] ***
*** starting iteration: 4; err: [Inf, 0.39742144689176445, 0.3139843610297139, 0.30783356170172804, 0.30661889628364564] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39742144689176445, 0.3139843610297139, 0.30783356170172804, 0.30661889628364564, 0.3062347166957585] ***
*** finished computation of 3 references, err: [Inf, 0.39742144689176445, 0.3139843610297139, 0.30783356170172804, 0.30661889628364564, 0.3062347166957585] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [135, 31, 0]]
** centroid: 1, normalized-entropy: 0.6946165926490012, [(1, 135), (2, 31)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [263, 20, 0]]
** centroid: 2, normalized-entropy: 0.3684241224021199, [(1, 263), (2, 20)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 188, 29]]
** centroid: 3, normalized-entropy: 0.5673385459279106, [(2, 188), (3, 29)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.49165332639056525] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.49165332639056525, 0.30636439557470707] ***
*** starting iteration: 2; err: [Inf, 0.49165332639056525, 0.30636439557470707] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.49165332639056525, 0.30636439557470707, 0.29511230631914365] ***
*** starting iteration: 3; err: [Inf, 0.49165332639056525, 0.30636439557470707, 0.29511230631914365] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.49165332639056525, 0.30636439557470707, 0.29511230631914365, 0.291146096409015] ***
*** starting iteration: 4; err: [Inf, 0.49165332639056525, 0.30636439557470707, 0.29511230631914365, 0.291146096409015] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.49165332639056525, 0.30636439557470707, 0.29511230631914365, 0.291146096409015, 0.28994409412472344] ***
*** starting iteration: 5; err: [Inf, 0.49165332639056525, 0.30636439557470707, 0.29511230631914365, 0.291146096409015, 0.28994409412472344] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.49165332639056525, 0.30636439557470707, 0.29511230631914365, 0.291146096409015, 0.28994409412472344, 0.2897183940015633] ***
*** finished computation of 3 references, err: [Inf, 0.49165332639056525, 0.30636439557470707, 0.29511230631914365, 0.291146096409015, 0.28994409412472344, 0.2897183940015633] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [1, 196, 20]]
** centroid: 1, normalized-entropy: 0.44506485705083854, [(2, 196), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [245, 13, 0]]
** centroid: 2, normalized-entropy: 0.288041164758665, [(1, 245), (2, 13)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [143, 49, 0]]
** centroid: 3, normalized-entropy: 0.8194292532161828, [(1, 143), (2, 49)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.39121086688536305] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39121086688536305, 0.30691125299753635] ***
*** starting iteration: 2; err: [Inf, 0.39121086688536305, 0.30691125299753635] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39121086688536305, 0.30691125299753635, 0.30470703705039426] ***
*** starting iteration: 3; err: [Inf, 0.39121086688536305, 0.30691125299753635, 0.30470703705039426] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39121086688536305, 0.30691125299753635, 0.30470703705039426, 0.30394911993646817] ***
*** finished computation of 3 references, err: [Inf, 0.39121086688536305, 0.30691125299753635, 0.30470703705039426, 0.30394911993646817] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 180, 21]]
** centroid: 1, normalized-entropy: 0.4830306801456181, [(2, 180), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [215, 40, 0]]
** centroid: 2, normalized-entropy: 0.6267511370265896, [(1, 215), (2, 40)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [166, 45, 0]]
** centroid: 3, normalized-entropy: 0.7476871747810011, [(1, 166), (2, 45)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4403933171272367] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4403933171272367, 0.3669698700398296] ***
*** finished computation of 3 references, err: [Inf, 0.4403933171272367, 0.3669698700398296] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [315, 53, 0]]
** centroid: 1, normalized-entropy: 0.594675244416137, [(1, 315), (2, 53)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [65, 146, 5]]
** centroid: 2, normalized-entropy: 0.6492669281181269, [(1, 65), (2, 146), (3, 5)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [18, 40, 24]]
** centroid: 3, normalized-entropy: 0.9490444625338131, [(1, 18), (2, 40), (3, 24)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.34481873809788627] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34481873809788627, 0.30225637359363117] ***
*** finished computation of 3 references, err: [Inf, 0.34481873809788627, 0.30225637359363117] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [165, 72, 0]]
** centroid: 1, normalized-entropy: 0.8858834790484443, [(1, 165), (2, 72)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 162, 20]]
** centroid: 2, normalized-entropy: 0.49958440742366095, [(2, 162), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [224, 24, 0]]
** centroid: 3, normalized-entropy: 0.45868581620054033, [(1, 224), (2, 24)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.5566910274572547] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5566910274572547, 0.3436558000335674] ***
*** finished computation of 3 references, err: [Inf, 0.5566910274572547, 0.3436558000335674] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [279, 62, 0]]
** centroid: 1, normalized-entropy: 0.6840384356390419, [(1, 279), (2, 62)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [6, 88, 21]]
** centroid: 2, normalized-entropy: 0.6092747770280459, [(1, 6), (2, 88), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [96, 115, 0]]
** centroid: 3, normalized-entropy: 0.9941429994757438, [(1, 96), (2, 115)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.43564957618019784] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43564957618019784, 0.31633425461877884] ***
*** starting iteration: 2; err: [Inf, 0.43564957618019784, 0.31633425461877884] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43564957618019784, 0.31633425461877884, 0.3069093090324039] ***
*** starting iteration: 3; err: [Inf, 0.43564957618019784, 0.31633425461877884, 0.3069093090324039] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43564957618019784, 0.31633425461877884, 0.3069093090324039, 0.30530548635898186] ***
*** finished computation of 3 references, err: [Inf, 0.43564957618019784, 0.31633425461877884, 0.3069093090324039, 0.30530548635898186] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [111, 63, 0]]
** centroid: 1, normalized-entropy: 0.9443871950133461, [(1, 111), (2, 63)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [79, 176, 29]]
** centroid: 2, normalized-entropy: 0.8059640832782986, [(1, 79), (2, 176), (3, 29)]
*** center 3: selecting labels [1] (freq >= 2) [from [208, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.46985167472426415] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.46985167472426415, 0.3037314168421895] ***
*** starting iteration: 2; err: [Inf, 0.46985167472426415, 0.3037314168421895] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.46985167472426415, 0.3037314168421895, 0.2987873125346615] ***
*** starting iteration: 3; err: [Inf, 0.46985167472426415, 0.3037314168421895, 0.2987873125346615] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.46985167472426415, 0.3037314168421895, 0.2987873125346615, 0.29804804313207406] ***
*** finished computation of 3 references, err: [Inf, 0.46985167472426415, 0.3037314168421895, 0.2987873125346615, 0.29804804313207406] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [100, 81, 0]]
** centroid: 1, normalized-entropy: 0.9920366649222825, [(1, 100), (2, 81)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [78, 177, 20]]
** centroid: 2, normalized-entropy: 0.75697352708687, [(1, 78), (2, 177), (3, 20)]
*** center 3: selecting labels [1] (freq >= 2) [from [211, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.39446284900373335] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39446284900373335, 0.3470701339725835] ***
*** starting iteration: 2; err: [Inf, 0.39446284900373335, 0.3470701339725835] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39446284900373335, 0.3470701339725835, 0.3415598236443265] ***
*** starting iteration: 3; err: [Inf, 0.39446284900373335, 0.3470701339725835, 0.3415598236443265] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39446284900373335, 0.3470701339725835, 0.3415598236443265, 0.3390271025144312] ***
*** finished computation of 3 references, err: [Inf, 0.39446284900373335, 0.3470701339725835, 0.3415598236443265, 0.3390271025144312] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [93, 113, 0]]
** centroid: 1, normalized-entropy: 0.9931898855037856, [(1, 93), (2, 113)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [49, 99, 21]]
** centroid: 2, normalized-entropy: 0.8477712420463017, [(1, 49), (2, 99), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [239, 53, 0]]
** centroid: 3, normalized-entropy: 0.6833623972387554, [(1, 239), (2, 53)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.20958233337469018] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20958233337469018, 0.1790344211868606] ***
*** starting iteration: 2; err: [Inf, 0.20958233337469018, 0.1790344211868606] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20958233337469018, 0.1790344211868606, 0.16690111257465887] ***
*** starting iteration: 3; err: [Inf, 0.20958233337469018, 0.1790344211868606, 0.16690111257465887] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20958233337469018, 0.1790344211868606, 0.16690111257465887, 0.16044410644798307] ***
*** finished computation of 7 references, err: [Inf, 0.20958233337469018, 0.1790344211868606, 0.16690111257465887, 0.16044410644798307] ***
*** center 1: selecting labels [1] (freq >= 1) [from [100, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [109, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [42, 75, 0]]
** centroid: 3, normalized-entropy: 0.9418285354475157, [(1, 42), (2, 75)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [60, 5, 0]]
** centroid: 4, normalized-entropy: 0.3912435636292556, [(1, 60), (2, 5)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [33, 23, 0]]
** centroid: 5, normalized-entropy: 0.9768740126265281, [(1, 33), (2, 23)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [54, 42, 0]]
** centroid: 6, normalized-entropy: 0.9886994082884974, [(1, 54), (2, 42)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 94, 29]]
** centroid: 7, normalized-entropy: 0.7879388881327561, [(2, 94), (3, 29)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21153442641284534] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21153442641284534, 0.18122792093717177] ***
*** starting iteration: 2; err: [Inf, 0.21153442641284534, 0.18122792093717177] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21153442641284534, 0.18122792093717177, 0.16790455663255577] ***
*** starting iteration: 3; err: [Inf, 0.21153442641284534, 0.18122792093717177, 0.16790455663255577] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21153442641284534, 0.18122792093717177, 0.16790455663255577, 0.15947932313717175] ***
*** finished computation of 7 references, err: [Inf, 0.21153442641284534, 0.18122792093717177, 0.16790455663255577, 0.15947932313717175] ***
*** center 1: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 129, 20]]
** centroid: 2, normalized-entropy: 0.5689210181309736, [(2, 129), (3, 20)]
*** center 3: selecting labels [1] (freq >= 1) [from [47, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [91, 22, 0]]
** centroid: 5, normalized-entropy: 0.7111806626974718, [(1, 91), (2, 22)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [43, 77, 0]]
** centroid: 6, normalized-entropy: 0.9412910282277053, [(1, 43), (2, 77)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [61, 30, 0]]
** centroid: 7, normalized-entropy: 0.9145891955877994, [(1, 61), (2, 30)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19674252532422543] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19674252532422543, 0.16562091288780947] ***
*** starting iteration: 2; err: [Inf, 0.19674252532422543, 0.16562091288780947] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19674252532422543, 0.16562091288780947, 0.15749323176920996] ***
*** starting iteration: 3; err: [Inf, 0.19674252532422543, 0.16562091288780947, 0.15749323176920996] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19674252532422543, 0.16562091288780947, 0.15749323176920996, 0.15490790108160146] ***
*** finished computation of 7 references, err: [Inf, 0.19674252532422543, 0.16562091288780947, 0.15749323176920996, 0.15490790108160146] ***
*** center 1: selecting labels [1] (freq >= 1) [from [51, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 93, 21]]
** centroid: 2, normalized-entropy: 0.6892019851173655, [(2, 93), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [60, 43, 0]]
** centroid: 3, normalized-entropy: 0.98025955447738, [(1, 60), (2, 43)]
*** center 4: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [118, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [82, 54, 0]]
** centroid: 6, normalized-entropy: 0.9692040949598235, [(1, 82), (2, 54)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [17, 75, 0]]
** centroid: 7, normalized-entropy: 0.6904285855304167, [(1, 17), (2, 75)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.50202349188539] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.50202349188539, 0.3222064108674501] ***
*** starting iteration: 2; err: [Inf, 0.50202349188539, 0.3222064108674501] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.50202349188539, 0.3222064108674501, 0.31069495219614235] ***
*** starting iteration: 3; err: [Inf, 0.50202349188539, 0.3222064108674501, 0.31069495219614235] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.50202349188539, 0.3222064108674501, 0.31069495219614235, 0.3062512101577567] ***
*** starting iteration: 4; err: [Inf, 0.50202349188539, 0.3222064108674501, 0.31069495219614235, 0.3062512101577567] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.50202349188539, 0.3222064108674501, 0.31069495219614235, 0.3062512101577567, 0.30466442289356666] ***
*** starting iteration: 5; err: [Inf, 0.50202349188539, 0.3222064108674501, 0.31069495219614235, 0.3062512101577567, 0.30466442289356666] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.50202349188539, 0.3222064108674501, 0.31069495219614235, 0.3062512101577567, 0.30466442289356666, 0.3041030016221531] ***
*** finished computation of 3 references, err: [Inf, 0.50202349188539, 0.3222064108674501, 0.31069495219614235, 0.3062512101577567, 0.30466442289356666, 0.3041030016221531] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [149, 60, 0]]
** centroid: 1, normalized-entropy: 0.8649211163613938, [(1, 149), (2, 60)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [245, 4, 0]]
** centroid: 2, normalized-entropy: 0.11873167080049137, [(1, 245), (2, 4)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [4, 175, 29]]
** centroid: 3, normalized-entropy: 0.45150324436292877, [(1, 4), (2, 175), (3, 29)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4708824823128766] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4708824823128766, 0.3032107788251191] ***
*** starting iteration: 2; err: [Inf, 0.4708824823128766, 0.3032107788251191] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4708824823128766, 0.3032107788251191, 0.2976240975449959] ***
*** starting iteration: 3; err: [Inf, 0.4708824823128766, 0.3032107788251191, 0.2976240975449959] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4708824823128766, 0.3032107788251191, 0.2976240975449959, 0.29608217890219374] ***
*** starting iteration: 4; err: [Inf, 0.4708824823128766, 0.3032107788251191, 0.2976240975449959, 0.29608217890219374] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4708824823128766, 0.3032107788251191, 0.2976240975449959, 0.29608217890219374, 0.29572041583494624] ***
*** finished computation of 3 references, err: [Inf, 0.4708824823128766, 0.3032107788251191, 0.2976240975449959, 0.29608217890219374, 0.29572041583494624] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [158, 45, 0]]
** centroid: 1, normalized-entropy: 0.7632140080875525, [(1, 158), (2, 45)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 189, 20]]
** centroid: 2, normalized-entropy: 0.4551946341118398, [(2, 189), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [231, 24, 0]]
** centroid: 3, normalized-entropy: 0.4500666580964382, [(1, 231), (2, 24)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4817801144733645] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4817801144733645, 0.3484990190089062] ***
*** starting iteration: 2; err: [Inf, 0.4817801144733645, 0.3484990190089062] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4817801144733645, 0.3484990190089062, 0.33852511345837516] ***
*** starting iteration: 3; err: [Inf, 0.4817801144733645, 0.3484990190089062, 0.33852511345837516] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4817801144733645, 0.3484990190089062, 0.33852511345837516, 0.33440622678263926] ***
*** starting iteration: 4; err: [Inf, 0.4817801144733645, 0.3484990190089062, 0.33852511345837516, 0.33440622678263926] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4817801144733645, 0.3484990190089062, 0.33852511345837516, 0.33440622678263926, 0.33224973205834446] ***
*** starting iteration: 5; err: [Inf, 0.4817801144733645, 0.3484990190089062, 0.33852511345837516, 0.33440622678263926, 0.33224973205834446] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4817801144733645, 0.3484990190089062, 0.33852511345837516, 0.33440622678263926, 0.33224973205834446, 0.3307610935792662] ***
*** starting iteration: 6; err: [Inf, 0.4817801144733645, 0.3484990190089062, 0.33852511345837516, 0.33440622678263926, 0.33224973205834446, 0.3307610935792662] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4817801144733645, 0.3484990190089062, 0.33852511345837516, 0.33440622678263926, 0.33224973205834446, 0.3307610935792662, 0.330508965656798] ***
*** finished computation of 3 references, err: [Inf, 0.4817801144733645, 0.3484990190089062, 0.33852511345837516, 0.33440622678263926, 0.33224973205834446, 0.3307610935792662, 0.330508965656798] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [141, 68, 0]]
** centroid: 1, normalized-entropy: 0.9101140895294332, [(1, 141), (2, 68)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [175, 26, 0]]
** centroid: 2, normalized-entropy: 0.5556617546499439, [(1, 175), (2, 26)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [65, 171, 21]]
** centroid: 3, normalized-entropy: 0.749505649004936, [(1, 65), (2, 171), (3, 21)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2693709483084915] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2693709483084915, 0.20716866761496341] ***
*** starting iteration: 2; err: [Inf, 0.2693709483084915, 0.20716866761496341] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2693709483084915, 0.20716866761496341, 0.1979410008942658] ***
*** starting iteration: 3; err: [Inf, 0.2693709483084915, 0.20716866761496341, 0.1979410008942658] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2693709483084915, 0.20716866761496341, 0.1979410008942658, 0.19530431487577948] ***
*** starting iteration: 4; err: [Inf, 0.2693709483084915, 0.20716866761496341, 0.1979410008942658, 0.19530431487577948] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2693709483084915, 0.20716866761496341, 0.1979410008942658, 0.19530431487577948, 0.19441903211377762] ***
*** finished computation of 7 references, err: [Inf, 0.2693709483084915, 0.20716866761496341, 0.1979410008942658, 0.19530431487577948, 0.19441903211377762] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 74, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [79, 28, 0]]
** centroid: 2, normalized-entropy: 0.8292743048721369, [(1, 79), (2, 28)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [102, 5, 0]]
** centroid: 3, normalized-entropy: 0.2723359083120876, [(1, 102), (2, 5)]
*** center 4: selecting labels [1] (freq >= 1) [from [100, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [16, 90, 0]]
** centroid: 5, normalized-entropy: 0.612196127490834, [(1, 16), (2, 90)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 42, 29]]
** centroid: 6, normalized-entropy: 0.9756797868933086, [(2, 42), (3, 29)]
*** center 7: selecting labels [1] (freq >= 1) [from [101, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26968976550748097] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26968976550748097, 0.2127111042686354] ***
*** starting iteration: 2; err: [Inf, 0.26968976550748097, 0.2127111042686354] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26968976550748097, 0.2127111042686354, 0.20201297409307475] ***
*** starting iteration: 3; err: [Inf, 0.26968976550748097, 0.2127111042686354, 0.20201297409307475] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26968976550748097, 0.2127111042686354, 0.20201297409307475, 0.19492368533721435] ***
*** starting iteration: 4; err: [Inf, 0.26968976550748097, 0.2127111042686354, 0.20201297409307475, 0.19492368533721435] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26968976550748097, 0.2127111042686354, 0.20201297409307475, 0.19492368533721435, 0.1912413803131684] ***
*** starting iteration: 5; err: [Inf, 0.26968976550748097, 0.2127111042686354, 0.20201297409307475, 0.19492368533721435, 0.1912413803131684] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26968976550748097, 0.2127111042686354, 0.20201297409307475, 0.19492368533721435, 0.1912413803131684, 0.18955060375388014] ***
*** starting iteration: 6; err: [Inf, 0.26968976550748097, 0.2127111042686354, 0.20201297409307475, 0.19492368533721435, 0.1912413803131684, 0.18955060375388014] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26968976550748097, 0.2127111042686354, 0.20201297409307475, 0.19492368533721435, 0.1912413803131684, 0.18955060375388014, 0.18854457365189758] ***
*** starting iteration: 7; err: [Inf, 0.26968976550748097, 0.2127111042686354, 0.20201297409307475, 0.19492368533721435, 0.1912413803131684, 0.18955060375388014, 0.18854457365189758] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26968976550748097, 0.2127111042686354, 0.20201297409307475, 0.19492368533721435, 0.1912413803131684, 0.18955060375388014, 0.18854457365189758, 0.1873434791048204] ***
*** starting iteration: 8; err: [Inf, 0.26968976550748097, 0.2127111042686354, 0.20201297409307475, 0.19492368533721435, 0.1912413803131684, 0.18955060375388014, 0.18854457365189758, 0.1873434791048204] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26968976550748097, 0.2127111042686354, 0.20201297409307475, 0.19492368533721435, 0.1912413803131684, 0.18955060375388014, 0.18854457365189758, 0.1873434791048204, 0.1866867786491181] ***
*** finished computation of 7 references, err: [Inf, 0.26968976550748097, 0.2127111042686354, 0.20201297409307475, 0.19492368533721435, 0.1912413803131684, 0.18955060375388014, 0.18854457365189758, 0.1873434791048204, 0.1866867786491181] ***
*** center 1: selecting labels [1] (freq >= 1) [from [100, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [96, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [91, 16, 0]]
** centroid: 3, normalized-entropy: 0.6086696755779567, [(1, 91), (2, 16)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [30, 74, 0]]
** centroid: 4, normalized-entropy: 0.8667256130949592, [(1, 30), (2, 74)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 69, 19]]
** centroid: 5, normalized-entropy: 0.7526269564427315, [(2, 69), (3, 19)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [72, 29, 0]]
** centroid: 6, normalized-entropy: 0.8649832752018335, [(1, 72), (2, 29)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 70, 1]]
** centroid: 7, normalized-entropy: 0.10679203237584184, [(2, 70), (3, 1)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26096925185644243] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26096925185644243, 0.19888805416922295] ***
*** starting iteration: 2; err: [Inf, 0.26096925185644243, 0.19888805416922295] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26096925185644243, 0.19888805416922295, 0.19013344013234085] ***
*** starting iteration: 3; err: [Inf, 0.26096925185644243, 0.19888805416922295, 0.19013344013234085] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26096925185644243, 0.19888805416922295, 0.19013344013234085, 0.1886066217533965] ***
*** starting iteration: 4; err: [Inf, 0.26096925185644243, 0.19888805416922295, 0.19013344013234085, 0.1886066217533965] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26096925185644243, 0.19888805416922295, 0.19013344013234085, 0.1886066217533965, 0.18814960620303203] ***
*** finished computation of 7 references, err: [Inf, 0.26096925185644243, 0.19888805416922295, 0.19013344013234085, 0.1886066217533965, 0.18814960620303203] ***
*** center 1: selecting labels [1] (freq >= 1) [from [119, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [127, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [14, 89, 0]]
** centroid: 3, normalized-entropy: 0.5734593207286953, [(1, 14), (2, 89)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [34, 54, 0]]
** centroid: 4, normalized-entropy: 0.9624127354629922, [(1, 34), (2, 54)]
*** center 5: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [9, 59, 0]]
** centroid: 6, normalized-entropy: 0.5638560041131417, [(1, 9), (2, 59)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 63, 21]]
** centroid: 7, normalized-entropy: 0.8112781244591328, [(2, 63), (3, 21)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4260389054999561] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4260389054999561, 0.31255428510432776] ***
*** starting iteration: 2; err: [Inf, 0.4260389054999561, 0.31255428510432776] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4260389054999561, 0.31255428510432776, 0.3062413634939326] ***
*** starting iteration: 3; err: [Inf, 0.4260389054999561, 0.31255428510432776, 0.3062413634939326] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4260389054999561, 0.31255428510432776, 0.3062413634939326, 0.3042834249546041] ***
*** starting iteration: 4; err: [Inf, 0.4260389054999561, 0.31255428510432776, 0.3062413634939326, 0.3042834249546041] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4260389054999561, 0.31255428510432776, 0.3062413634939326, 0.3042834249546041, 0.30397102529429143] ***
*** finished computation of 3 references, err: [Inf, 0.4260389054999561, 0.31255428510432776, 0.3062413634939326, 0.3042834249546041, 0.30397102529429143] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [77, 156, 29]]
** centroid: 1, normalized-entropy: 0.8303470652132872, [(1, 77), (2, 156), (3, 29)]
*** center 2: selecting labels [1] (freq >= 2) [from [211, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [110, 83, 0]]
** centroid: 3, normalized-entropy: 0.9858360979442085, [(1, 110), (2, 83)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4367959336971102] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4367959336971102, 0.3406407366348975] ***
*** starting iteration: 2; err: [Inf, 0.4367959336971102, 0.3406407366348975] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4367959336971102, 0.3406407366348975, 0.33199814402231614] ***
*** starting iteration: 3; err: [Inf, 0.4367959336971102, 0.3406407366348975, 0.33199814402231614] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4367959336971102, 0.3406407366348975, 0.33199814402231614, 0.3259839239520491] ***
*** starting iteration: 4; err: [Inf, 0.4367959336971102, 0.3406407366348975, 0.33199814402231614, 0.3259839239520491] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4367959336971102, 0.3406407366348975, 0.33199814402231614, 0.3259839239520491, 0.3211902453853139] ***
*** starting iteration: 5; err: [Inf, 0.4367959336971102, 0.3406407366348975, 0.33199814402231614, 0.3259839239520491, 0.3211902453853139] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4367959336971102, 0.3406407366348975, 0.33199814402231614, 0.3259839239520491, 0.3211902453853139, 0.31538518348700373] ***
*** starting iteration: 6; err: [Inf, 0.4367959336971102, 0.3406407366348975, 0.33199814402231614, 0.3259839239520491, 0.3211902453853139, 0.31538518348700373] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4367959336971102, 0.3406407366348975, 0.33199814402231614, 0.3259839239520491, 0.3211902453853139, 0.31538518348700373, 0.30912034350797823] ***
*** starting iteration: 7; err: [Inf, 0.4367959336971102, 0.3406407366348975, 0.33199814402231614, 0.3259839239520491, 0.3211902453853139, 0.31538518348700373, 0.30912034350797823] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4367959336971102, 0.3406407366348975, 0.33199814402231614, 0.3259839239520491, 0.3211902453853139, 0.31538518348700373, 0.30912034350797823, 0.29366603842587385] ***
*** starting iteration: 8; err: [Inf, 0.4367959336971102, 0.3406407366348975, 0.33199814402231614, 0.3259839239520491, 0.3211902453853139, 0.31538518348700373, 0.30912034350797823, 0.29366603842587385] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4367959336971102, 0.3406407366348975, 0.33199814402231614, 0.3259839239520491, 0.3211902453853139, 0.31538518348700373, 0.30912034350797823, 0.29366603842587385, 0.28980084465651856] ***
*** starting iteration: 9; err: [Inf, 0.4367959336971102, 0.3406407366348975, 0.33199814402231614, 0.3259839239520491, 0.3211902453853139, 0.31538518348700373, 0.30912034350797823, 0.29366603842587385, 0.28980084465651856] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4367959336971102, 0.3406407366348975, 0.33199814402231614, 0.3259839239520491, 0.3211902453853139, 0.31538518348700373, 0.30912034350797823, 0.29366603842587385, 0.28980084465651856, 0.2893587830692887] ***
*** finished computation of 3 references, err: [Inf, 0.4367959336971102, 0.3406407366348975, 0.33199814402231614, 0.3259839239520491, 0.3211902453853139, 0.31538518348700373, 0.30912034350797823, 0.29366603842587385, 0.28980084465651856, 0.2893587830692887] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [5, 202, 20]]
** centroid: 1, normalized-entropy: 0.36582692580166554, [(1, 5), (2, 202), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [143, 51, 0]]
** centroid: 2, normalized-entropy: 0.8310711226002413, [(1, 143), (2, 51)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [241, 5, 0]]
** centroid: 3, normalized-entropy: 0.1432625927138025, [(1, 241), (2, 5)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4655089547558837] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4655089547558837, 0.30283050320629235] ***
*** starting iteration: 2; err: [Inf, 0.4655089547558837, 0.30283050320629235] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4655089547558837, 0.30283050320629235, 0.2996485051426707] ***
*** starting iteration: 3; err: [Inf, 0.4655089547558837, 0.30283050320629235, 0.2996485051426707] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4655089547558837, 0.30283050320629235, 0.2996485051426707, 0.29933367585525966] ***
*** finished computation of 3 references, err: [Inf, 0.4655089547558837, 0.30283050320629235, 0.2996485051426707, 0.29933367585525966] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [133, 108, 0]]
** centroid: 1, normalized-entropy: 0.9922237173282488, [(1, 133), (2, 108)]
*** center 2: selecting labels [1] (freq >= 2) [from [177, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [71, 157, 21]]
** centroid: 3, normalized-entropy: 0.7802100445110922, [(1, 71), (2, 157), (3, 21)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2822434607258363] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2822434607258363, 0.2314715715472701] ***
*** finished computation of 7 references, err: [Inf, 0.2822434607258363, 0.2314715715472701] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [75, 34, 0]]
** centroid: 1, normalized-entropy: 0.8953848900090126, [(1, 75), (2, 34)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [12, 99, 29]]
** centroid: 2, normalized-entropy: 0.711564009717308, [(1, 12), (2, 99), (3, 29)]
*** center 3: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [112, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [20, 106, 0]]
** centroid: 7, normalized-entropy: 0.6312630180916119, [(1, 20), (2, 106)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21450906268682615] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21450906268682615, 0.20041594929459772] ***
*** finished computation of 7 references, err: [Inf, 0.21450906268682615, 0.20041594929459772] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 57, 1]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 41, 19]]
** centroid: 2, normalized-entropy: 0.9007196798623592, [(2, 41), (3, 19)]
*** center 3: selecting labels [1] (freq >= 2) [from [163, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [110, 3, 0]]
** centroid: 4, normalized-entropy: 0.17677669701805485, [(1, 110), (2, 3)]
*** center 5: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [4, 83, 0]]
** centroid: 6, normalized-entropy: 0.2690553027246505, [(1, 4), (2, 83)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [25, 74, 0]]
** centroid: 7, normalized-entropy: 0.8152560766360704, [(1, 25), (2, 74)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21911852749977737] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21911852749977737, 0.19929731727055536] ***
*** finished computation of 7 references, err: [Inf, 0.21911852749977737, 0.19929731727055536] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 101, 21]]
** centroid: 1, normalized-entropy: 0.6625567995605484, [(2, 101), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [87, 50, 0]]
** centroid: 2, normalized-entropy: 0.946726290058515, [(1, 87), (2, 50)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [22, 52, 0]]
** centroid: 3, normalized-entropy: 0.8779620013943914, [(1, 22), (2, 52)]
*** center 4: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [115, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [21, 62, 0]]
** centroid: 6, normalized-entropy: 0.8160172973428256, [(1, 21), (2, 62)]
*** center 7: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19929250028414436] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19929250028414436, 0.15656253647455748] ***
*** starting iteration: 2; err: [Inf, 0.19929250028414436, 0.15656253647455748] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19929250028414436, 0.15656253647455748, 0.15185581967150835] ***
*** starting iteration: 3; err: [Inf, 0.19929250028414436, 0.15656253647455748, 0.15185581967150835] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19929250028414436, 0.15656253647455748, 0.15185581967150835, 0.15081693806072538] ***
*** finished computation of 7 references, err: [Inf, 0.19929250028414436, 0.15656253647455748, 0.15185581967150835, 0.15081693806072538] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [65, 54, 0]]
** centroid: 1, normalized-entropy: 0.9938275703358692, [(1, 65), (2, 54)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [70, 11, 0]]
** centroid: 2, normalized-entropy: 0.5731393980555147, [(1, 70), (2, 11)]
*** center 3: selecting labels [1] (freq >= 1) [from [103, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 67, 20]]
** centroid: 4, normalized-entropy: 0.7778108790853029, [(2, 67), (3, 20)]
*** center 5: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 113, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [59, 13, 0]]
** centroid: 7, normalized-entropy: 0.6812908868842175, [(1, 59), (2, 13)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19931029092738295] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19931029092738295, 0.15381881405949882] ***
*** starting iteration: 2; err: [Inf, 0.19931029092738295, 0.15381881405949882] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19931029092738295, 0.15381881405949882, 0.15097482346216107] ***
*** starting iteration: 3; err: [Inf, 0.19931029092738295, 0.15381881405949882, 0.15097482346216107] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19931029092738295, 0.15381881405949882, 0.15097482346216107, 0.15039060316488392] ***
*** finished computation of 7 references, err: [Inf, 0.19931029092738295, 0.15381881405949882, 0.15097482346216107, 0.15039060316488392] ***
*** center 1: selecting labels [1] (freq >= 1) [from [124, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 58, 21]]
** centroid: 3, normalized-entropy: 0.8354065254460503, [(2, 58), (3, 21)]
*** center 4: selecting labels [1] (freq >= 1) [from [113, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [54, 31, 0]]
** centroid: 5, normalized-entropy: 0.9465202215633438, [(1, 54), (2, 31)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 101, 0]]
** centroid: 6, normalized-entropy: 0.13815722856252646, [(1, 2), (2, 101)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [5, 75, 0]]
** centroid: 7, normalized-entropy: 0.3372900666170139, [(1, 5), (2, 75)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20038806852834248] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20038806852834248, 0.1503412516706542] ***
*** starting iteration: 2; err: [Inf, 0.20038806852834248, 0.1503412516706542] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20038806852834248, 0.1503412516706542, 0.14781958893900765] ***
*** starting iteration: 3; err: [Inf, 0.20038806852834248, 0.1503412516706542, 0.14781958893900765] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20038806852834248, 0.1503412516706542, 0.14781958893900765, 0.1475520040476331] ***
*** finished computation of 7 references, err: [Inf, 0.20038806852834248, 0.1503412516706542, 0.14781958893900765, 0.1475520040476331] ***
*** center 1: selecting labels [1] (freq >= 1) [from [125, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 56, 29]]
** centroid: 2, normalized-entropy: 0.9259400597385792, [(2, 56), (3, 29)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [70, 11, 0]]
** centroid: 3, normalized-entropy: 0.5731393980555147, [(1, 70), (2, 11)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [79, 32, 0]]
** centroid: 4, normalized-entropy: 0.8664998383682039, [(1, 79), (2, 32)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [42, 56, 0]]
** centroid: 5, normalized-entropy: 0.9852281360342514, [(1, 42), (2, 56)]
*** center 6: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 84, 0]]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 11)
[0.9480108851366337, 0.9390078701455947, 0.9370148591705477, 0.8910886934839031, 0.8820017622412832, 0.8710057362751974, 0.8680147213081345, 0.8640047232861604, 0.8519897142651635, 0.8130345914777054, 0.7880185574796353]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.9480108851366337
finished with 12
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.3922304698926532] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3922304698926532, 0.2984698521293772] ***
*** starting iteration: 2; err: [Inf, 0.3922304698926532, 0.2984698521293772] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3922304698926532, 0.2984698521293772, 0.29612506082144635] ***
*** starting iteration: 3; err: [Inf, 0.3922304698926532, 0.2984698521293772, 0.29612506082144635] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3922304698926532, 0.2984698521293772, 0.29612506082144635, 0.29549959390333436] ***
*** finished computation of 3 references, err: [Inf, 0.3922304698926532, 0.2984698521293772, 0.29612506082144635, 0.29549959390333436] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [69, 177, 20]]
** centroid: 1, normalized-entropy: 0.742438750853406, [(1, 69), (2, 177), (3, 20)]
*** center 2: selecting labels [1] (freq >= 2) [from [207, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [113, 81, 0]]
** centroid: 3, normalized-entropy: 0.9802835999883092, [(1, 113), (2, 81)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3834413491055235] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3834413491055235, 0.3163271303695568] ***
*** starting iteration: 2; err: [Inf, 0.3834413491055235, 0.3163271303695568] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3834413491055235, 0.3163271303695568, 0.3075095599058557] ***
*** starting iteration: 3; err: [Inf, 0.3834413491055235, 0.3163271303695568, 0.3075095599058557] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3834413491055235, 0.3163271303695568, 0.3075095599058557, 0.3047254901671609] ***
*** finished computation of 3 references, err: [Inf, 0.3834413491055235, 0.3163271303695568, 0.3075095599058557, 0.3047254901671609] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [83, 160, 29]]
** centroid: 1, normalized-entropy: 0.8310450743977676, [(1, 83), (2, 160), (3, 29)]
*** center 2: selecting labels [1] (freq >= 2) [from [204, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [111, 79, 0]]
** centroid: 3, normalized-entropy: 0.9794406595369853, [(1, 111), (2, 79)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.42734260894246456] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42734260894246456, 0.3111358106532867] ***
*** starting iteration: 2; err: [Inf, 0.42734260894246456, 0.3111358106532867] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42734260894246456, 0.3111358106532867, 0.30604670391693106] ***
*** starting iteration: 3; err: [Inf, 0.42734260894246456, 0.3111358106532867, 0.30604670391693106] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42734260894246456, 0.3111358106532867, 0.30604670391693106, 0.3045148420157372] ***
*** finished computation of 3 references, err: [Inf, 0.42734260894246456, 0.3111358106532867, 0.30604670391693106, 0.3045148420157372] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [233, 43, 0]]
** centroid: 1, normalized-entropy: 0.6241593982396273, [(1, 233), (2, 43)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [148, 53, 0]]
** centroid: 2, normalized-entropy: 0.8322512821991569, [(1, 148), (2, 53)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 169, 21]]
** centroid: 3, normalized-entropy: 0.5015014472254578, [(2, 169), (3, 21)]
finished with 5 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 12)
[0.9480108851366337, 0.9390078701455947, 0.9370148591705477, 0.8910886934839031, 0.8859907812003621, 0.8820017622412832, 0.8710057362751974, 0.8680147213081345, 0.8640047232861604, 0.8519897142651635, 0.8130345914777054, 0.7880185574796353]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.9480108851366337
finished with 13
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.34739808593855714] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34739808593855714, 0.23487892179474837] ***
*** starting iteration: 2; err: [Inf, 0.34739808593855714, 0.23487892179474837] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34739808593855714, 0.23487892179474837, 0.23157149654529666] ***
*** starting iteration: 3; err: [Inf, 0.34739808593855714, 0.23487892179474837, 0.23157149654529666] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34739808593855714, 0.23487892179474837, 0.23157149654529666, 0.23058449102822562] ***
*** finished computation of 3 references, err: [Inf, 0.34739808593855714, 0.23487892179474837, 0.23157149654529666, 0.23058449102822562] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [233, 19, 0]]
** centroid: 1, normalized-entropy: 0.3857481994527919, [(1, 233), (2, 19)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [156, 52, 0]]
** centroid: 2, normalized-entropy: 0.8112781244591328, [(1, 156), (2, 52)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 187, 20]]
** centroid: 3, normalized-entropy: 0.4581834507518116, [(2, 187), (3, 20)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.31505678442877355] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31505678442877355, 0.2529848739029364] ***
*** starting iteration: 2; err: [Inf, 0.31505678442877355, 0.2529848739029364] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31505678442877355, 0.2529848739029364, 0.24464564070709655] ***
*** starting iteration: 3; err: [Inf, 0.31505678442877355, 0.2529848739029364, 0.24464564070709655] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31505678442877355, 0.2529848739029364, 0.24464564070709655, 0.24198061015803712] ***
*** finished computation of 3 references, err: [Inf, 0.31505678442877355, 0.2529848739029364, 0.24464564070709655, 0.24198061015803712] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [258, 3, 0]]
** centroid: 1, normalized-entropy: 0.09054385326964301, [(1, 258), (2, 3)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [10, 175, 29]]
** centroid: 2, normalized-entropy: 0.5265941995601233, [(1, 10), (2, 175), (3, 29)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [130, 61, 0]]
** centroid: 3, normalized-entropy: 0.9036969260198581, [(1, 130), (2, 61)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.34228885333113807] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34228885333113807, 0.2402199869766005] ***
*** starting iteration: 2; err: [Inf, 0.34228885333113807, 0.2402199869766005] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34228885333113807, 0.2402199869766005, 0.23640444708605488] ***
*** starting iteration: 3; err: [Inf, 0.34228885333113807, 0.2402199869766005, 0.23640444708605488] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34228885333113807, 0.2402199869766005, 0.23640444708605488, 0.2352261172968481] ***
*** finished computation of 3 references, err: [Inf, 0.34228885333113807, 0.2402199869766005, 0.23640444708605488, 0.2352261172968481] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [87, 152, 17]]
** centroid: 1, normalized-entropy: 0.7795237302848433, [(1, 87), (2, 152), (3, 17)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [92, 113, 4]]
** centroid: 2, normalized-entropy: 0.7003324367037281, [(1, 92), (2, 113), (3, 4)]
*** center 3: selecting labels [1] (freq >= 2) [from [202, 0, 0]]
finished with 7 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 13)
[0.9480108851366337, 0.9390078701455947, 0.9370148591705477, 0.9129698560836287, 0.8910886934839031, 0.8859907812003621, 0.8820017622412832, 0.8710057362751974, 0.8680147213081345, 0.8640047232861604, 0.8519897142651635, 0.8130345914777054, 0.7880185574796353]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.9480108851366337
finished with 14
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.3018623558670148] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3018623558670148, 0.2665686805924127] ***
*** starting iteration: 2; err: [Inf, 0.3018623558670148, 0.2665686805924127] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3018623558670148, 0.2665686805924127, 0.2649731676950044] ***
*** starting iteration: 3; err: [Inf, 0.3018623558670148, 0.2665686805924127, 0.2649731676950044] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3018623558670148, 0.2665686805924127, 0.2649731676950044, 0.25621036905235983] ***
*** finished computation of 3 references, err: [Inf, 0.3018623558670148, 0.2665686805924127, 0.2649731676950044, 0.25621036905235983] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [21, 142, 29]]
** centroid: 1, normalized-entropy: 0.6832725877358307, [(1, 21), (2, 142), (3, 29)]
*** center 2: selecting labels [1] (freq >= 2) [from [238, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [139, 97, 0]]
** centroid: 3, normalized-entropy: 0.9770313764774391, [(1, 139), (2, 97)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2584653289058711] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2584653289058711, 0.24165940866910335] ***
*** starting iteration: 2; err: [Inf, 0.2584653289058711, 0.24165940866910335] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2584653289058711, 0.24165940866910335, 0.23732259653744636] ***
*** starting iteration: 3; err: [Inf, 0.2584653289058711, 0.24165940866910335, 0.23732259653744636] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2584653289058711, 0.24165940866910335, 0.23732259653744636, 0.23580564746236626] ***
*** finished computation of 3 references, err: [Inf, 0.2584653289058711, 0.24165940866910335, 0.23732259653744636, 0.23580564746236626] ***
*** center 1: selecting labels [1] (freq >= 2) [from [200, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [101, 124, 2]]
** centroid: 2, normalized-entropy: 0.6665809100460256, [(1, 101), (2, 124), (3, 2)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [88, 134, 18]]
** centroid: 3, normalized-entropy: 0.8078770497168277, [(1, 88), (2, 134), (3, 18)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2770399594315742] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2770399594315742, 0.24462082227719933] ***
*** starting iteration: 2; err: [Inf, 0.2770399594315742, 0.24462082227719933] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2770399594315742, 0.24462082227719933, 0.23961052642869896] ***
*** starting iteration: 3; err: [Inf, 0.2770399594315742, 0.24462082227719933, 0.23961052642869896] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2770399594315742, 0.24462082227719933, 0.23961052642869896, 0.23934451804804927] ***
*** finished computation of 3 references, err: [Inf, 0.2770399594315742, 0.24462082227719933, 0.23961052642869896, 0.23934451804804927] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 177, 21]]
** centroid: 1, normalized-entropy: 0.48791799258948565, [(2, 177), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [171, 67, 0]]
** centroid: 2, normalized-entropy: 0.8575036632820643, [(1, 171), (2, 67)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [210, 21, 0]]
** centroid: 3, normalized-entropy: 0.43949698692151346, [(1, 210), (2, 21)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 14)
[0.9480108851366337, 0.9390078701455947, 0.9370148591705477, 0.9129698560836287, 0.8959947971924019, 0.8910886934839031, 0.8859907812003621, 0.8820017622412832, 0.8710057362751974, 0.8680147213081345, 0.8640047232861604, 0.8519897142651635, 0.8130345914777054, 0.7880185574796353]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.9480108851366337
finished with 15
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.26197937822917494] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26197937822917494, 0.18268281525887503] ***
*** finished computation of 7 references, err: [Inf, 0.26197937822917494, 0.18268281525887503] ***
*** center 1: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 25, 28]]
** centroid: 2, normalized-entropy: 0.9976875760352552, [(2, 25), (3, 28)]
*** center 3: selecting labels [1] (freq >= 2) [from [153, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 75, 1]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [173, 47, 0]]
** centroid: 5, normalized-entropy: 0.7483762616610128, [(1, 173), (2, 47)]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 17, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 75, 0]]
** centroid: 7, normalized-entropy: 0.17378132267943294, [(1, 2), (2, 75)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17920616883756607] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17920616883756607, 0.15872024011838695] ***
*** finished computation of 7 references, err: [Inf, 0.17920616883756607, 0.15872024011838695] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [69, 21, 0]]
** centroid: 1, normalized-entropy: 0.7837769474847011, [(1, 69), (2, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [33, 53, 0]]
** centroid: 2, normalized-entropy: 0.9606276613221153, [(1, 33), (2, 53)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [88, 9, 0]]
** centroid: 3, normalized-entropy: 0.44569317772256106, [(1, 88), (2, 9)]
*** center 4: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [67, 37, 0]]
** centroid: 5, normalized-entropy: 0.9391151961320356, [(1, 67), (2, 37)]
*** center 6: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 138, 20]]
** centroid: 7, normalized-entropy: 0.5479900080939728, [(2, 138), (3, 20)]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.20377636847583327] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20377636847583327, 0.16620204999422963] ***
*** finished computation of 7 references, err: [Inf, 0.20377636847583327, 0.16620204999422963] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 42, 21]]
** centroid: 1, normalized-entropy: 0.9182958340544894, [(2, 42), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [78, 21, 0]]
** centroid: 2, normalized-entropy: 0.7455178428108284, [(1, 78), (2, 21)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 73, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [125, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 44, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [88, 68, 0]]
** centroid: 6, normalized-entropy: 0.98811083652183, [(1, 88), (2, 68)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [90, 17, 0]]
** centroid: 7, normalized-entropy: 0.6316198184485629, [(1, 90), (2, 17)]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 15)
[0.9480108851366337, 0.9390078701455947, 0.9370148591705477, 0.9269898641156127, 0.9129698560836287, 0.8959947971924019, 0.8910886934839031, 0.8859907812003621, 0.8820017622412832, 0.8710057362751974, 0.8680147213081345, 0.8640047232861604, 0.8519897142651635, 0.8130345914777054, 0.7880185574796353]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.9480108851366337
finished with 16
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.45940965083120083] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45940965083120083, 0.28668906329082205] ***
*** starting iteration: 2; err: [Inf, 0.45940965083120083, 0.28668906329082205] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45940965083120083, 0.28668906329082205, 0.2800726169404258] ***
*** starting iteration: 3; err: [Inf, 0.45940965083120083, 0.28668906329082205, 0.2800726169404258] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45940965083120083, 0.28668906329082205, 0.2800726169404258, 0.2734075735893671] ***
*** starting iteration: 4; err: [Inf, 0.45940965083120083, 0.28668906329082205, 0.2800726169404258, 0.2734075735893671] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45940965083120083, 0.28668906329082205, 0.2800726169404258, 0.2734075735893671, 0.25909179683450284] ***
*** starting iteration: 5; err: [Inf, 0.45940965083120083, 0.28668906329082205, 0.2800726169404258, 0.2734075735893671, 0.25909179683450284] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45940965083120083, 0.28668906329082205, 0.2800726169404258, 0.2734075735893671, 0.25909179683450284, 0.243640054063452] ***
*** starting iteration: 6; err: [Inf, 0.45940965083120083, 0.28668906329082205, 0.2800726169404258, 0.2734075735893671, 0.25909179683450284, 0.243640054063452] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45940965083120083, 0.28668906329082205, 0.2800726169404258, 0.2734075735893671, 0.25909179683450284, 0.243640054063452, 0.2413549107036556] ***
*** starting iteration: 7; err: [Inf, 0.45940965083120083, 0.28668906329082205, 0.2800726169404258, 0.2734075735893671, 0.25909179683450284, 0.243640054063452, 0.2413549107036556] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45940965083120083, 0.28668906329082205, 0.2800726169404258, 0.2734075735893671, 0.25909179683450284, 0.243640054063452, 0.2413549107036556, 0.24117700470186346] ***
*** finished computation of 3 references, err: [Inf, 0.45940965083120083, 0.28668906329082205, 0.2800726169404258, 0.2734075735893671, 0.25909179683450284, 0.243640054063452, 0.2413549107036556, 0.24117700470186346] ***
*** center 1: selecting labels [1] (freq >= 2) [from [234, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [99, 92, 0]]
** centroid: 2, normalized-entropy: 0.9990308942916307, [(1, 99), (2, 92)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [65, 147, 29]]
** centroid: 3, normalized-entropy: 0.8281126812816165, [(1, 65), (2, 147), (3, 29)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3456244423337605] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3456244423337605, 0.23735790640308424] ***
*** starting iteration: 2; err: [Inf, 0.3456244423337605, 0.23735790640308424] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3456244423337605, 0.23735790640308424, 0.23539514044604112] ***
*** starting iteration: 3; err: [Inf, 0.3456244423337605, 0.23735790640308424, 0.23539514044604112] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3456244423337605, 0.23735790640308424, 0.23539514044604112, 0.2348219256741979] ***
*** finished computation of 3 references, err: [Inf, 0.3456244423337605, 0.23735790640308424, 0.23539514044604112, 0.2348219256741979] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 179, 20]]
** centroid: 1, normalized-entropy: 0.4705864997996835, [(2, 179), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [222, 29, 0]]
** centroid: 2, normalized-entropy: 0.5163970551921141, [(1, 222), (2, 29)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [167, 50, 0]]
** centroid: 3, normalized-entropy: 0.778733599578567, [(1, 167), (2, 50)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.33239425206905987] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33239425206905987, 0.24930370137000504] ***
*** starting iteration: 2; err: [Inf, 0.33239425206905987, 0.24930370137000504] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33239425206905987, 0.24930370137000504, 0.24039998694952727] ***
*** starting iteration: 3; err: [Inf, 0.33239425206905987, 0.24930370137000504, 0.24039998694952727] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33239425206905987, 0.24930370137000504, 0.24039998694952727, 0.23788051956683687] ***
*** starting iteration: 4; err: [Inf, 0.33239425206905987, 0.24930370137000504, 0.24039998694952727, 0.23788051956683687] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33239425206905987, 0.24930370137000504, 0.24039998694952727, 0.23788051956683687, 0.23683731251213325] ***
*** starting iteration: 5; err: [Inf, 0.33239425206905987, 0.24930370137000504, 0.24039998694952727, 0.23788051956683687, 0.23683731251213325] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33239425206905987, 0.24930370137000504, 0.24039998694952727, 0.23788051956683687, 0.23683731251213325, 0.2364403288448411] ***
*** finished computation of 3 references, err: [Inf, 0.33239425206905987, 0.24930370137000504, 0.24039998694952727, 0.23788051956683687, 0.23683731251213325, 0.2364403288448411] ***
*** center 1: selecting labels [1] (freq >= 2) [from [212, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [75, 161, 19]]
** centroid: 2, normalized-entropy: 0.7680282763879329, [(1, 75), (2, 161), (3, 19)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [94, 104, 2]]
** centroid: 3, normalized-entropy: 0.6744454683101252, [(1, 94), (2, 104), (3, 2)]
finished with 7 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 16)
[0.9480108851366337, 0.9390078701455947, 0.9370148591705477, 0.9269898641156127, 0.9129698560836287, 0.8959947971924019, 0.8910886934839031, 0.8859907812003621, 0.8829757901614189, 0.8820017622412832, 0.8710057362751974, 0.8680147213081345, 0.8640047232861604, 0.8519897142651635, 0.8130345914777054, 0.7880185574796353]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.9480108851366337
finished with 16
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 16)
[0.9480108851366337, 0.9390078701455947, 0.9370148591705477, 0.9269898641156127, 0.9129698560836287, 0.8959947971924019, 0.8910886934839031, 0.8859907812003621, 0.8829757901614189, 0.8820017622412832, 0.8710057362751974, 0.8680147213081345, 0.8640047232861604, 0.8519897142651635, 0.8130345914777054, 0.7880185574796353]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.9480108851366337
finished with 17
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.23670402508106145] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23670402508106145, 0.19204204475068706] ***
*** starting iteration: 2; err: [Inf, 0.23670402508106145, 0.19204204475068706] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23670402508106145, 0.19204204475068706, 0.18798122871764886] ***
*** starting iteration: 3; err: [Inf, 0.23670402508106145, 0.19204204475068706, 0.18798122871764886] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23670402508106145, 0.19204204475068706, 0.18798122871764886, 0.18635461670995832] ***
*** finished computation of 7 references, err: [Inf, 0.23670402508106145, 0.19204204475068706, 0.18798122871764886, 0.18635461670995832] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 101, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [96, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [58, 33, 0]]
** centroid: 3, normalized-entropy: 0.9448506439764089, [(1, 58), (2, 33)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [89, 9, 0]]
** centroid: 4, normalized-entropy: 0.442571064839798, [(1, 89), (2, 9)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [62, 45, 0]]
** centroid: 5, normalized-entropy: 0.9817140837953373, [(1, 62), (2, 45)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 70, 20]]
** centroid: 6, normalized-entropy: 0.7642045065086204, [(2, 70), (3, 20)]
*** center 7: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2285111189397561] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2285111189397561, 0.18756039581169281] ***
*** starting iteration: 2; err: [Inf, 0.2285111189397561, 0.18756039581169281] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2285111189397561, 0.18756039581169281, 0.18537136254686717] ***
*** starting iteration: 3; err: [Inf, 0.2285111189397561, 0.18756039581169281, 0.18537136254686717] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2285111189397561, 0.18756039581169281, 0.18537136254686717, 0.18419447991795637] ***
*** finished computation of 7 references, err: [Inf, 0.2285111189397561, 0.18756039581169281, 0.18537136254686717, 0.18419447991795637] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [97, 5, 0]]
** centroid: 1, normalized-entropy: 0.28221763445592507, [(1, 97), (2, 5)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [59, 28, 0]]
** centroid: 2, normalized-entropy: 0.9063701886077911, [(1, 59), (2, 28)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 59, 29]]
** centroid: 3, normalized-entropy: 0.9144612916935675, [(2, 59), (3, 29)]
*** center 4: selecting labels [1] (freq >= 1) [from [107, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [50, 60, 0]]
** centroid: 5, normalized-entropy: 0.9940302114769566, [(1, 50), (2, 60)]
*** center 6: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 87, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2391228724069994] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2391228724069994, 0.1908871324515079] ***
*** starting iteration: 2; err: [Inf, 0.2391228724069994, 0.1908871324515079] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2391228724069994, 0.1908871324515079, 0.18843437067751048] ***
*** starting iteration: 3; err: [Inf, 0.2391228724069994, 0.1908871324515079, 0.18843437067751048] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2391228724069994, 0.1908871324515079, 0.18843437067751048, 0.18827635753582855] ***
*** finished computation of 7 references, err: [Inf, 0.2391228724069994, 0.1908871324515079, 0.18843437067751048, 0.18827635753582855] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [1, 115, 0]]
** centroid: 1, normalized-entropy: 0.07150378944995868, [(1, 1), (2, 115)]
*** center 2: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [65, 52, 0]]
** centroid: 3, normalized-entropy: 0.9910760598382222, [(1, 65), (2, 52)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [60, 42, 0]]
** centroid: 4, normalized-entropy: 0.9774178175281716, [(1, 60), (2, 42)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 56, 21]]
** centroid: 5, normalized-entropy: 0.8453509366224364, [(2, 56), (3, 21)]
*** center 6: selecting labels [1] (freq >= 1) [from [104, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 17)
[0.9480108851366337, 0.9390078701455947, 0.9390018761276245, 0.9370148591705477, 0.9269898641156127, 0.9129698560836287, 0.8959947971924019, 0.8910886934839031, 0.8859907812003621, 0.8829757901614189, 0.8820017622412832, 0.8710057362751974, 0.8680147213081345, 0.8640047232861604, 0.8519897142651635, 0.8130345914777054, 0.7880185574796353]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.9480108851366337
finished with 17
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.195977350510424] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.195977350510424, 0.15761179850855841] ***
*** starting iteration: 2; err: [Inf, 0.195977350510424, 0.15761179850855841] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.195977350510424, 0.15761179850855841, 0.1536664722636342] ***
*** starting iteration: 3; err: [Inf, 0.195977350510424, 0.15761179850855841, 0.1536664722636342] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.195977350510424, 0.15761179850855841, 0.1536664722636342, 0.15221089402749202] ***
*** finished computation of 7 references, err: [Inf, 0.195977350510424, 0.15761179850855841, 0.1536664722636342, 0.15221089402749202] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 123, 27]]
** centroid: 1, normalized-entropy: 0.6800770457282798, [(2, 123), (3, 27)]
*** center 2: selecting labels [1] (freq >= 1) [from [160, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [81, 33, 0]]
** centroid: 3, normalized-entropy: 0.8680403986166402, [(1, 81), (2, 33)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [165, 29, 0]]
** centroid: 4, normalized-entropy: 0.6085488514177504, [(1, 165), (2, 29)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [81, 62, 0]]
** centroid: 5, normalized-entropy: 0.9872278299417402, [(1, 81), (2, 62)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 134, 8]]
** centroid: 6, normalized-entropy: 0.3127333763966432, [(2, 134), (3, 8)]
*** center 7: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19639982799440622] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19639982799440622, 0.14927833863906562] ***
*** starting iteration: 2; err: [Inf, 0.19639982799440622, 0.14927833863906562] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19639982799440622, 0.14927833863906562, 0.14568200527317823] ***
*** starting iteration: 3; err: [Inf, 0.19639982799440622, 0.14927833863906562, 0.14568200527317823] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19639982799440622, 0.14927833863906562, 0.14568200527317823, 0.14493672179058195] ***
*** finished computation of 7 references, err: [Inf, 0.19639982799440622, 0.14927833863906562, 0.14568200527317823, 0.14493672179058195] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 56, 15]]
** centroid: 1, normalized-entropy: 0.743898745288434, [(2, 56), (3, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [44, 12, 0]]
** centroid: 3, normalized-entropy: 0.7495952572594798, [(1, 44), (2, 12)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [63, 20, 0]]
** centroid: 4, normalized-entropy: 0.7966394665488286, [(1, 63), (2, 20)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [41, 53, 0]]
** centroid: 5, normalized-entropy: 0.988212082728797, [(1, 41), (2, 53)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 54, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1864411358758807] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1864411358758807, 0.1508239017687738] ***
*** starting iteration: 2; err: [Inf, 0.1864411358758807, 0.1508239017687738] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1864411358758807, 0.1508239017687738, 0.14912085828930138] ***
*** starting iteration: 3; err: [Inf, 0.1864411358758807, 0.1508239017687738, 0.14912085828930138] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1864411358758807, 0.1508239017687738, 0.14912085828930138, 0.1481433639843017] ***
*** finished computation of 7 references, err: [Inf, 0.1864411358758807, 0.1508239017687738, 0.14912085828930138, 0.1481433639843017] ***
*** center 1: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 51, 17]]
** centroid: 2, normalized-entropy: 0.8112781244591328, [(2, 51), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [44, 10, 0]]
** centroid: 3, normalized-entropy: 0.6912898694057888, [(1, 44), (2, 10)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [61, 26, 0]]
** centroid: 4, normalized-entropy: 0.8798813089176428, [(1, 61), (2, 26)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [28, 56, 0]]
** centroid: 5, normalized-entropy: 0.9182958340544894, [(1, 28), (2, 56)]
*** center 6: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 50, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19204288666695357] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19204288666695357, 0.15449423689115793] ***
*** starting iteration: 2; err: [Inf, 0.19204288666695357, 0.15449423689115793] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19204288666695357, 0.15449423689115793, 0.15071427653729916] ***
*** starting iteration: 3; err: [Inf, 0.19204288666695357, 0.15449423689115793, 0.15071427653729916] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19204288666695357, 0.15449423689115793, 0.15071427653729916, 0.14965697832405567] ***
*** finished computation of 7 references, err: [Inf, 0.19204288666695357, 0.15449423689115793, 0.15071427653729916, 0.14965697832405567] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [59, 15, 0]]
** centroid: 1, normalized-entropy: 0.7273006785144036, [(1, 59), (2, 15)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [62, 20, 0]]
** centroid: 2, normalized-entropy: 0.8014698931335286, [(1, 62), (2, 20)]
*** center 3: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 41, 15]]
** centroid: 4, normalized-entropy: 0.8383729377099398, [(2, 41), (3, 15)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [43, 36, 0]]
** centroid: 5, normalized-entropy: 0.9943290455933883, [(1, 43), (2, 36)]
*** center 6: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 83, 2]]
** centroid: 7, normalized-entropy: 0.16082302082246946, [(2, 83), (3, 2)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17921415096893906] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17921415096893906, 0.14865679684327915] ***
*** starting iteration: 2; err: [Inf, 0.17921415096893906, 0.14865679684327915] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17921415096893906, 0.14865679684327915, 0.1465577906463295] ***
*** starting iteration: 3; err: [Inf, 0.17921415096893906, 0.14865679684327915, 0.1465577906463295] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17921415096893906, 0.14865679684327915, 0.1465577906463295, 0.14630320014618337] ***
*** finished computation of 7 references, err: [Inf, 0.17921415096893906, 0.14865679684327915, 0.1465577906463295, 0.14630320014618337] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [80, 3, 0]]
** centroid: 1, normalized-entropy: 0.2243269603450881, [(1, 80), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [59, 10, 0]]
** centroid: 2, normalized-entropy: 0.5969995167604553, [(1, 59), (2, 10)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 36, 17]]
** centroid: 3, normalized-entropy: 0.9052002969560479, [(2, 36), (3, 17)]
*** center 4: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [14, 80, 0]]
** centroid: 5, normalized-entropy: 0.607171654871303, [(1, 14), (2, 80)]
*** center 6: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 63, 0]]
** centroid: 7, normalized-entropy: 0.11611507530476962, [(1, 1), (2, 63)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18597735255584122] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18597735255584122, 0.15080654822383077] ***
*** starting iteration: 2; err: [Inf, 0.18597735255584122, 0.15080654822383077] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18597735255584122, 0.15080654822383077, 0.14695392675884067] ***
*** starting iteration: 3; err: [Inf, 0.18597735255584122, 0.15080654822383077, 0.14695392675884067] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18597735255584122, 0.15080654822383077, 0.14695392675884067, 0.14549053636565804] ***
*** finished computation of 7 references, err: [Inf, 0.18597735255584122, 0.15080654822383077, 0.14695392675884067, 0.14549053636565804] ***
*** center 1: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [43, 23, 0]]
** centroid: 2, normalized-entropy: 0.9327076126690367, [(1, 43), (2, 23)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 57, 18]]
** centroid: 3, normalized-entropy: 0.7950402793845225, [(2, 57), (3, 18)]
*** center 4: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [53, 33, 0]]
** centroid: 5, normalized-entropy: 0.9606276613221153, [(1, 53), (2, 33)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [13, 70, 0]]
** centroid: 6, normalized-entropy: 0.6261776539736496, [(1, 13), (2, 70)]
*** center 7: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1926446573259309] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1926446573259309, 0.1510507037602365] ***
*** starting iteration: 2; err: [Inf, 0.1926446573259309, 0.1510507037602365] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1926446573259309, 0.1510507037602365, 0.14637871882971376] ***
*** starting iteration: 3; err: [Inf, 0.1926446573259309, 0.1510507037602365, 0.14637871882971376] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1926446573259309, 0.1510507037602365, 0.14637871882971376, 0.14520375039288774] ***
*** finished computation of 7 references, err: [Inf, 0.1926446573259309, 0.1510507037602365, 0.14637871882971376, 0.14520375039288774] ***
*** center 1: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 45, 17]]
** centroid: 2, normalized-entropy: 0.8474179614176633, [(2, 45), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [50, 24, 0]]
** centroid: 3, normalized-entropy: 0.9090221560878149, [(1, 50), (2, 24)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [63, 12, 0]]
** centroid: 4, normalized-entropy: 0.634309554640566, [(1, 63), (2, 12)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [29, 52, 0]]
** centroid: 5, normalized-entropy: 0.9410313090323237, [(1, 29), (2, 52)]
*** center 6: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 62, 2]]
** centroid: 7, normalized-entropy: 0.2006223243127146, [(2, 62), (3, 2)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19213035244122148] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19213035244122148, 0.14987566000781954] ***
*** starting iteration: 2; err: [Inf, 0.19213035244122148, 0.14987566000781954] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19213035244122148, 0.14987566000781954, 0.14479411806724965] ***
*** starting iteration: 3; err: [Inf, 0.19213035244122148, 0.14987566000781954, 0.14479411806724965] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19213035244122148, 0.14987566000781954, 0.14479411806724965, 0.14375654571130872] ***
*** finished computation of 7 references, err: [Inf, 0.19213035244122148, 0.14987566000781954, 0.14479411806724965, 0.14375654571130872] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [2, 62, 0]]
** centroid: 1, normalized-entropy: 0.2006223243127146, [(1, 2), (2, 62)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [37, 31, 0]]
** centroid: 2, normalized-entropy: 0.9943766625699823, [(1, 37), (2, 31)]
*** center 3: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [30, 46, 0]]
** centroid: 4, normalized-entropy: 0.9677884628267678, [(1, 30), (2, 46)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 56, 21]]
** centroid: 5, normalized-entropy: 0.8453509366224364, [(2, 56), (3, 21)]
*** center 6: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1861753615029156] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1861753615029156, 0.15128659722208976] ***
*** starting iteration: 2; err: [Inf, 0.1861753615029156, 0.15128659722208976] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1861753615029156, 0.15128659722208976, 0.14777294810675085] ***
*** starting iteration: 3; err: [Inf, 0.1861753615029156, 0.15128659722208976, 0.14777294810675085] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1861753615029156, 0.15128659722208976, 0.14777294810675085, 0.14735947450622916] ***
*** finished computation of 7 references, err: [Inf, 0.1861753615029156, 0.15128659722208976, 0.14777294810675085, 0.14735947450622916] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [41, 46, 0]]
** centroid: 1, normalized-entropy: 0.9976161146077627, [(1, 41), (2, 46)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [46, 17, 0]]
** centroid: 2, normalized-entropy: 0.8412367762002599, [(1, 46), (2, 17)]
*** center 3: selecting labels [1] (freq >= 1) [from [46, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 52, 20]]
** centroid: 4, normalized-entropy: 0.8524051786494784, [(2, 52), (3, 20)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [7, 75, 0]]
** centroid: 5, normalized-entropy: 0.42080948947668984, [(1, 7), (2, 75)]
*** center 6: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.189663155216258] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.189663155216258, 0.1527692875666544] ***
*** starting iteration: 2; err: [Inf, 0.189663155216258, 0.1527692875666544] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.189663155216258, 0.1527692875666544, 0.14998026139847934] ***
*** starting iteration: 3; err: [Inf, 0.189663155216258, 0.1527692875666544, 0.14998026139847934] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.189663155216258, 0.1527692875666544, 0.14998026139847934, 0.1491309408713132] ***
*** finished computation of 7 references, err: [Inf, 0.189663155216258, 0.1527692875666544, 0.14998026139847934, 0.1491309408713132] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 85, 2]]
** centroid: 1, normalized-entropy: 0.15790637433488164, [(2, 85), (3, 2)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [45, 23, 0]]
** centroid: 2, normalized-entropy: 0.9231199835423002, [(1, 45), (2, 23)]
*** center 3: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 57, 17]]
** centroid: 4, normalized-entropy: 0.77753986416076, [(2, 57), (3, 17)]
*** center 5: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [65, 20, 0]]
** centroid: 6, normalized-entropy: 0.787126586201269, [(1, 65), (2, 20)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [45, 6, 0]]
** centroid: 7, normalized-entropy: 0.5225593745369407, [(1, 45), (2, 6)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18915912899374962] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18915912899374962, 0.15753047036752105] ***
*** starting iteration: 2; err: [Inf, 0.18915912899374962, 0.15753047036752105] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18915912899374962, 0.15753047036752105, 0.15053152184560895] ***
*** starting iteration: 3; err: [Inf, 0.18915912899374962, 0.15753047036752105, 0.15053152184560895] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18915912899374962, 0.15753047036752105, 0.15053152184560895, 0.14772320626303553] ***
*** finished computation of 7 references, err: [Inf, 0.18915912899374962, 0.15753047036752105, 0.15053152184560895, 0.14772320626303553] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [66, 12, 0]]
** centroid: 1, normalized-entropy: 0.6193821946787638, [(1, 66), (2, 12)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [47, 12, 0]]
** centroid: 2, normalized-entropy: 0.7286561673702678, [(1, 47), (2, 12)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 36, 17]]
** centroid: 3, normalized-entropy: 0.9052002969560479, [(2, 36), (3, 17)]
*** center 4: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [14, 68, 0]]
** centroid: 5, normalized-entropy: 0.6593758812786991, [(1, 14), (2, 68)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 76, 0]]
** centroid: 6, normalized-entropy: 0.1000009430103234, [(1, 1), (2, 76)]
*** center 7: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18126331961713732] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18126331961713732, 0.1540135312061757] ***
*** starting iteration: 2; err: [Inf, 0.18126331961713732, 0.1540135312061757] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18126331961713732, 0.1540135312061757, 0.15127753349766135] ***
*** starting iteration: 3; err: [Inf, 0.18126331961713732, 0.1540135312061757, 0.15127753349766135] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18126331961713732, 0.1540135312061757, 0.15127753349766135, 0.15047149242460728] ***
*** finished computation of 7 references, err: [Inf, 0.18126331961713732, 0.1540135312061757, 0.15127753349766135, 0.15047149242460728] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 70, 18]]
** centroid: 1, normalized-entropy: 0.7309263775906009, [(2, 70), (3, 18)]
*** center 2: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [42, 5, 0]]
** centroid: 3, normalized-entropy: 0.48890859144051524, [(1, 42), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [56, 26, 0]]
** centroid: 4, normalized-entropy: 0.9011701959974223, [(1, 56), (2, 26)]
*** center 5: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [6, 85, 0]]
** centroid: 6, normalized-entropy: 0.35056382068186565, [(1, 6), (2, 85)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [66, 8, 0]]
** centroid: 7, normalized-entropy: 0.4941829348497886, [(1, 66), (2, 8)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1975383071694523] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1975383071694523, 0.1536682303417474] ***
*** starting iteration: 2; err: [Inf, 0.1975383071694523, 0.1536682303417474] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1975383071694523, 0.1536682303417474, 0.14963641517609358] ***
*** starting iteration: 3; err: [Inf, 0.1975383071694523, 0.1536682303417474, 0.14963641517609358] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1975383071694523, 0.1536682303417474, 0.14963641517609358, 0.148449906764552] ***
*** finished computation of 7 references, err: [Inf, 0.1975383071694523, 0.1536682303417474, 0.14963641517609358, 0.148449906764552] ***
*** center 1: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [75, 6, 0]]
** centroid: 2, normalized-entropy: 0.38094658570539014, [(1, 75), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 29, 17]]
** centroid: 3, normalized-entropy: 0.9503376699710269, [(2, 29), (3, 17)]
*** center 4: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [12, 60, 0]]
** centroid: 5, normalized-entropy: 0.6500224216483541, [(1, 12), (2, 60)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [55, 6, 0]]
** centroid: 6, normalized-entropy: 0.4637773498877517, [(1, 55), (2, 6)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 77, 0]]
** centroid: 7, normalized-entropy: 0.098959095355743, [(1, 1), (2, 77)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18115060906298458] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18115060906298458, 0.1464031086396426] ***
*** starting iteration: 2; err: [Inf, 0.18115060906298458, 0.1464031086396426] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18115060906298458, 0.1464031086396426, 0.14452245737984776] ***
*** starting iteration: 3; err: [Inf, 0.18115060906298458, 0.1464031086396426, 0.14452245737984776] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18115060906298458, 0.1464031086396426, 0.14452245737984776, 0.1443230992667377] ***
*** finished computation of 7 references, err: [Inf, 0.18115060906298458, 0.1464031086396426, 0.14452245737984776, 0.1443230992667377] ***
*** center 1: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [50, 15, 0]]
** centroid: 2, normalized-entropy: 0.7793498372920851, [(1, 50), (2, 15)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 41, 19]]
** centroid: 3, normalized-entropy: 0.9007196798623592, [(2, 41), (3, 19)]
*** center 4: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [13, 77, 0]]
** centroid: 5, normalized-entropy: 0.5957610966703235, [(1, 13), (2, 77)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [29, 48, 0]]
** centroid: 6, normalized-entropy: 0.9556222693531471, [(1, 29), (2, 48)]
*** center 7: selecting labels [1] (freq >= 1) [from [52, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20871715965494514] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20871715965494514, 0.15055351786874235] ***
*** starting iteration: 2; err: [Inf, 0.20871715965494514, 0.15055351786874235] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20871715965494514, 0.15055351786874235, 0.14743983617983758] ***
*** starting iteration: 3; err: [Inf, 0.20871715965494514, 0.15055351786874235, 0.14743983617983758] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20871715965494514, 0.15055351786874235, 0.14743983617983758, 0.1469183831717819] ***
*** finished computation of 7 references, err: [Inf, 0.20871715965494514, 0.15055351786874235, 0.14743983617983758, 0.1469183831717819] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [62, 22, 0]]
** centroid: 1, normalized-entropy: 0.8296071030882032, [(1, 62), (2, 22)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [46, 6, 0]]
** centroid: 2, normalized-entropy: 0.5159469300074472, [(1, 46), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 57, 15]]
** centroid: 3, normalized-entropy: 0.7382848661434506, [(2, 57), (3, 15)]
*** center 4: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [34, 41, 0]]
** centroid: 5, normalized-entropy: 0.9937071066045081, [(1, 34), (2, 41)]
*** center 6: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 56, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18722273112088442] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18722273112088442, 0.15364710954390468] ***
*** starting iteration: 2; err: [Inf, 0.18722273112088442, 0.15364710954390468] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18722273112088442, 0.15364710954390468, 0.1483444636762142] ***
*** starting iteration: 3; err: [Inf, 0.18722273112088442, 0.15364710954390468, 0.1483444636762142] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18722273112088442, 0.15364710954390468, 0.1483444636762142, 0.14720119432732462] ***
*** finished computation of 7 references, err: [Inf, 0.18722273112088442, 0.15364710954390468, 0.1483444636762142, 0.14720119432732462] ***
*** center 1: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 54, 13]]
** centroid: 2, normalized-entropy: 0.709825885194168, [(2, 54), (3, 13)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [46, 16, 0]]
** centroid: 3, normalized-entropy: 0.8238116333123173, [(1, 46), (2, 16)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [41, 41, 0]]
** centroid: 4, normalized-entropy: 1.0, [(1, 41), (2, 41)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [14, 79, 0]]
** centroid: 5, normalized-entropy: 0.6111841012714984, [(1, 14), (2, 79)]
*** center 6: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [51, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18586446263641118] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18586446263641118, 0.1487363387066871] ***
*** starting iteration: 2; err: [Inf, 0.18586446263641118, 0.1487363387066871] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18586446263641118, 0.1487363387066871, 0.14642920500971376] ***
*** starting iteration: 3; err: [Inf, 0.18586446263641118, 0.1487363387066871, 0.14642920500971376] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18586446263641118, 0.1487363387066871, 0.14642920500971376, 0.14607512301392853] ***
*** finished computation of 7 references, err: [Inf, 0.18586446263641118, 0.1487363387066871, 0.14642920500971376, 0.14607512301392853] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [6, 95, 0]]
** centroid: 1, normalized-entropy: 0.3250821976451909, [(1, 6), (2, 95)]
*** center 2: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [47, 30, 0]]
** centroid: 3, normalized-entropy: 0.9645476589143235, [(1, 47), (2, 30)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [43, 20, 0]]
** centroid: 4, normalized-entropy: 0.9015982354056711, [(1, 43), (2, 20)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 41, 20]]
** centroid: 5, normalized-entropy: 0.9127341558073343, [(2, 41), (3, 20)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [66, 1, 0]]
** centroid: 6, normalized-entropy: 0.11190990870168394, [(1, 66), (2, 1)]
*** center 7: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1985881930477917] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1985881930477917, 0.15530852876394055] ***
*** starting iteration: 2; err: [Inf, 0.1985881930477917, 0.15530852876394055] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1985881930477917, 0.15530852876394055, 0.15233757741004228] ***
*** starting iteration: 3; err: [Inf, 0.1985881930477917, 0.15530852876394055, 0.15233757741004228] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1985881930477917, 0.15530852876394055, 0.15233757741004228, 0.15175261817127467] ***
*** finished computation of 7 references, err: [Inf, 0.1985881930477917, 0.15530852876394055, 0.15233757741004228, 0.15175261817127467] ***
*** center 1: selecting labels [1] (freq >= 1) [from [96, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 41, 19]]
** centroid: 2, normalized-entropy: 0.9007196798623592, [(2, 41), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [47, 11, 0]]
** centroid: 3, normalized-entropy: 0.7007495497162061, [(1, 47), (2, 11)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [64, 20, 0]]
** centroid: 4, normalized-entropy: 0.7918583525674836, [(1, 64), (2, 20)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [23, 56, 0]]
** centroid: 5, normalized-entropy: 0.8701883352082787, [(1, 23), (2, 56)]
*** center 6: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 59, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18182605091668666] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18182605091668666, 0.15146032558381559] ***
*** starting iteration: 2; err: [Inf, 0.18182605091668666, 0.15146032558381559] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18182605091668666, 0.15146032558381559, 0.14968232583161442] ***
*** starting iteration: 3; err: [Inf, 0.18182605091668666, 0.15146032558381559, 0.14968232583161442] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18182605091668666, 0.15146032558381559, 0.14968232583161442, 0.14921187900286167] ***
*** finished computation of 7 references, err: [Inf, 0.18182605091668666, 0.15146032558381559, 0.14968232583161442, 0.14921187900286167] ***
*** center 1: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [47, 21, 0]]
** centroid: 2, normalized-entropy: 0.8918107543797084, [(1, 47), (2, 21)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 48, 20]]
** centroid: 3, normalized-entropy: 0.8739810481273581, [(2, 48), (3, 20)]
*** center 4: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [25, 65, 0]]
** centroid: 5, normalized-entropy: 0.8524051786494784, [(1, 25), (2, 65)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 69, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18501263114623726] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18501263114623726, 0.1586483460282907] ***
*** starting iteration: 2; err: [Inf, 0.18501263114623726, 0.1586483460282907] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18501263114623726, 0.1586483460282907, 0.15545574433729054] ***
*** starting iteration: 3; err: [Inf, 0.18501263114623726, 0.1586483460282907, 0.15545574433729054] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18501263114623726, 0.1586483460282907, 0.15545574433729054, 0.15404323848802595] ***
*** finished computation of 7 references, err: [Inf, 0.18501263114623726, 0.1586483460282907, 0.15545574433729054, 0.15404323848802595] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [2, 80, 0]]
** centroid: 1, normalized-entropy: 0.16542703399626665, [(1, 2), (2, 80)]
*** center 2: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [58, 2, 0]]
** centroid: 4, normalized-entropy: 0.2108423003185322, [(1, 58), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [69, 14, 0]]
** centroid: 5, normalized-entropy: 0.6546640527143932, [(1, 69), (2, 14)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 68, 0]]
** centroid: 6, normalized-entropy: 0.10928571467638523, [(1, 1), (2, 68)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 34, 16]]
** centroid: 7, normalized-entropy: 0.9043814577244941, [(2, 34), (3, 16)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17896764473617077] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17896764473617077, 0.15797951420582831] ***
*** starting iteration: 2; err: [Inf, 0.17896764473617077, 0.15797951420582831] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17896764473617077, 0.15797951420582831, 0.15603153581731022] ***
*** starting iteration: 3; err: [Inf, 0.17896764473617077, 0.15797951420582831, 0.15603153581731022] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17896764473617077, 0.15797951420582831, 0.15603153581731022, 0.15536339526996015] ***
*** finished computation of 7 references, err: [Inf, 0.17896764473617077, 0.15797951420582831, 0.15603153581731022, 0.15536339526996015] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [98, 8, 0]]
** centroid: 1, normalized-entropy: 0.3860189005698936, [(1, 98), (2, 8)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [50, 11, 0]]
** centroid: 2, normalized-entropy: 0.6807937753703207, [(1, 50), (2, 11)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 34, 19]]
** centroid: 3, normalized-entropy: 0.9414231081869789, [(2, 34), (3, 19)]
*** center 4: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [10, 89, 0]]
** centroid: 5, normalized-entropy: 0.47218938467675087, [(1, 10), (2, 89)]
*** center 6: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 50, 0]]
** centroid: 7, normalized-entropy: 0.13923299905509884, [(1, 1), (2, 50)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19624939028173685] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19624939028173685, 0.155669906437397] ***
*** starting iteration: 2; err: [Inf, 0.19624939028173685, 0.155669906437397] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19624939028173685, 0.155669906437397, 0.15000861644186078] ***
*** starting iteration: 3; err: [Inf, 0.19624939028173685, 0.155669906437397, 0.15000861644186078] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19624939028173685, 0.155669906437397, 0.15000861644186078, 0.14839491666201501] ***
*** finished computation of 7 references, err: [Inf, 0.19624939028173685, 0.155669906437397, 0.15000861644186078, 0.14839491666201501] ***
*** center 1: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [81, 2, 0]]
** centroid: 2, normalized-entropy: 0.1638605128691586, [(1, 81), (2, 2)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 41, 15]]
** centroid: 3, normalized-entropy: 0.8383729377099398, [(2, 41), (3, 15)]
*** center 4: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [35, 41, 0]]
** centroid: 5, normalized-entropy: 0.9954993847275952, [(1, 35), (2, 41)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [10, 56, 0]]
** centroid: 6, normalized-entropy: 0.6136190195993708, [(1, 10), (2, 56)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 57, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21662607378140092] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21662607378140092, 0.150810621103039] ***
*** starting iteration: 2; err: [Inf, 0.21662607378140092, 0.150810621103039] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21662607378140092, 0.150810621103039, 0.14665740601345897] ***
*** starting iteration: 3; err: [Inf, 0.21662607378140092, 0.150810621103039, 0.14665740601345897] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21662607378140092, 0.150810621103039, 0.14665740601345897, 0.14624126289784908] ***
*** finished computation of 7 references, err: [Inf, 0.21662607378140092, 0.150810621103039, 0.14665740601345897, 0.14624126289784908] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [22, 56, 0]]
** centroid: 1, normalized-entropy: 0.8582307926411409, [(1, 22), (2, 56)]
*** center 2: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [43, 30, 0]]
** centroid: 4, normalized-entropy: 0.9770012394218561, [(1, 43), (2, 30)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 53, 21]]
** centroid: 5, normalized-entropy: 0.8605553930586318, [(2, 53), (3, 21)]
*** center 6: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 58, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19390782505273818] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19390782505273818, 0.15446247550286352] ***
*** starting iteration: 2; err: [Inf, 0.19390782505273818, 0.15446247550286352] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19390782505273818, 0.15446247550286352, 0.14940735151059925] ***
*** starting iteration: 3; err: [Inf, 0.19390782505273818, 0.15446247550286352, 0.14940735151059925] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19390782505273818, 0.15446247550286352, 0.14940735151059925, 0.14858632368594407] ***
*** finished computation of 7 references, err: [Inf, 0.19390782505273818, 0.15446247550286352, 0.14940735151059925, 0.14858632368594407] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [23, 58, 0]]
** centroid: 1, normalized-entropy: 0.8607781176165941, [(1, 23), (2, 58)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [52, 5, 0]]
** centroid: 2, normalized-entropy: 0.4288109647301171, [(1, 52), (2, 5)]
*** center 3: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 43, 22]]
** centroid: 4, normalized-entropy: 0.9233388889944429, [(2, 43), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [67, 9, 0]]
** centroid: 5, normalized-entropy: 0.524805134842907, [(1, 67), (2, 9)]
*** center 6: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 82, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1859046350196004] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1859046350196004, 0.1562834566179663] ***
*** starting iteration: 2; err: [Inf, 0.1859046350196004, 0.1562834566179663] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1859046350196004, 0.1562834566179663, 0.15133282399363815] ***
*** starting iteration: 3; err: [Inf, 0.1859046350196004, 0.1562834566179663, 0.15133282399363815] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1859046350196004, 0.1562834566179663, 0.15133282399363815, 0.15040097651723772] ***
*** finished computation of 7 references, err: [Inf, 0.1859046350196004, 0.1562834566179663, 0.15133282399363815, 0.15040097651723772] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [62, 1, 0]]
** centroid: 1, normalized-entropy: 0.11759466565886466, [(1, 62), (2, 1)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [65, 8, 0]]
** centroid: 2, normalized-entropy: 0.4986751363204345, [(1, 65), (2, 8)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 50, 15]]
** centroid: 3, normalized-entropy: 0.7793498372920851, [(2, 50), (3, 15)]
*** center 4: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [13, 64, 0]]
** centroid: 5, normalized-entropy: 0.6550239908788728, [(1, 13), (2, 64)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [3, 65, 0]]
** centroid: 6, normalized-entropy: 0.260862909647207, [(1, 3), (2, 65)]
*** center 7: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1963148191035725] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1963148191035725, 0.15818615254200996] ***
*** starting iteration: 2; err: [Inf, 0.1963148191035725, 0.15818615254200996] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1963148191035725, 0.15818615254200996, 0.15399164083320646] ***
*** starting iteration: 3; err: [Inf, 0.1963148191035725, 0.15818615254200996, 0.15399164083320646] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1963148191035725, 0.15818615254200996, 0.15399164083320646, 0.15310155085287988] ***
*** finished computation of 7 references, err: [Inf, 0.1963148191035725, 0.15818615254200996, 0.15399164083320646, 0.15310155085287988] ***
*** center 1: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [62, 16, 0]]
** centroid: 2, normalized-entropy: 0.7320666900931937, [(1, 62), (2, 16)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 44, 17]]
** centroid: 3, normalized-entropy: 0.8536576732793314, [(2, 44), (3, 17)]
*** center 4: selecting labels [1] (freq >= 1) [from [103, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [20, 46, 0]]
** centroid: 5, normalized-entropy: 0.8849636363831529, [(1, 20), (2, 46)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [12, 53, 0]]
** centroid: 6, normalized-entropy: 0.6900703653284017, [(1, 12), (2, 53)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 44, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19961591103672982] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19961591103672982, 0.15415322501026094] ***
*** starting iteration: 2; err: [Inf, 0.19961591103672982, 0.15415322501026094] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19961591103672982, 0.15415322501026094, 0.14999408838804812] ***
*** starting iteration: 3; err: [Inf, 0.19961591103672982, 0.15415322501026094, 0.14999408838804812] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19961591103672982, 0.15415322501026094, 0.14999408838804812, 0.14931850941479205] ***
*** finished computation of 7 references, err: [Inf, 0.19961591103672982, 0.15415322501026094, 0.14999408838804812, 0.14931850941479205] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [13, 82, 0]]
** centroid: 1, normalized-entropy: 0.5759084429149787, [(1, 13), (2, 82)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [42, 36, 0]]
** centroid: 2, normalized-entropy: 0.9957274520849256, [(1, 42), (2, 36)]
*** center 3: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 58, 17]]
** centroid: 4, normalized-entropy: 0.7721551435804817, [(2, 58), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [52, 12, 0]]
** centroid: 5, normalized-entropy: 0.6962122601251459, [(1, 52), (2, 12)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [67, 2, 0]]
** centroid: 6, normalized-entropy: 0.18927843126120178, [(1, 67), (2, 2)]
*** center 7: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19425624144729225] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19425624144729225, 0.15156857409793884] ***
*** starting iteration: 2; err: [Inf, 0.19425624144729225, 0.15156857409793884] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19425624144729225, 0.15156857409793884, 0.14942793044634164] ***
*** starting iteration: 3; err: [Inf, 0.19425624144729225, 0.15156857409793884, 0.14942793044634164] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19425624144729225, 0.15156857409793884, 0.14942793044634164, 0.14914007017202674] ***
*** finished computation of 7 references, err: [Inf, 0.19425624144729225, 0.15156857409793884, 0.14942793044634164, 0.14914007017202674] ***
*** center 1: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 50, 13]]
** centroid: 2, normalized-entropy: 0.7344461802527668, [(2, 50), (3, 13)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [54, 15, 0]]
** centroid: 3, normalized-entropy: 0.7553754125614286, [(1, 54), (2, 15)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [60, 5, 0]]
** centroid: 4, normalized-entropy: 0.3912435636292556, [(1, 60), (2, 5)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [18, 62, 0]]
** centroid: 5, normalized-entropy: 0.7691928290130138, [(1, 18), (2, 62)]
*** center 6: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 66, 0]]
** centroid: 7, normalized-entropy: 0.11190990870168394, [(1, 1), (2, 66)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.194969471052289] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.194969471052289, 0.14862983881495892] ***
*** starting iteration: 2; err: [Inf, 0.194969471052289, 0.14862983881495892] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.194969471052289, 0.14862983881495892, 0.14447177001927047] ***
*** starting iteration: 3; err: [Inf, 0.194969471052289, 0.14862983881495892, 0.14447177001927047] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.194969471052289, 0.14862983881495892, 0.14447177001927047, 0.14380681718047708] ***
*** finished computation of 7 references, err: [Inf, 0.194969471052289, 0.14862983881495892, 0.14447177001927047, 0.14380681718047708] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [46, 25, 0]]
** centroid: 1, normalized-entropy: 0.935940714955517, [(1, 46), (2, 25)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [56, 25, 0]]
** centroid: 2, normalized-entropy: 0.8915996278279094, [(1, 56), (2, 25)]
*** center 3: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 60, 19]]
** centroid: 4, normalized-entropy: 0.7958812735955936, [(2, 60), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [20, 66, 0]]
** centroid: 5, normalized-entropy: 0.7824441294066888, [(1, 20), (2, 66)]
*** center 6: selecting labels [1] (freq >= 1) [from [54, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19431439289450644] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19431439289450644, 0.1544174600127153] ***
*** starting iteration: 2; err: [Inf, 0.19431439289450644, 0.1544174600127153] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19431439289450644, 0.1544174600127153, 0.1501652149707079] ***
*** starting iteration: 3; err: [Inf, 0.19431439289450644, 0.1544174600127153, 0.1501652149707079] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19431439289450644, 0.1544174600127153, 0.1501652149707079, 0.14870349586755038] ***
*** finished computation of 7 references, err: [Inf, 0.19431439289450644, 0.1544174600127153, 0.1501652149707079, 0.14870349586755038] ***
*** center 1: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 61, 16]]
** centroid: 2, normalized-entropy: 0.7372413771710565, [(2, 61), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [44, 20, 0]]
** centroid: 3, normalized-entropy: 0.8960382325345574, [(1, 44), (2, 20)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [38, 52, 0]]
** centroid: 4, normalized-entropy: 0.9824740868386409, [(1, 38), (2, 52)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [10, 79, 0]]
** centroid: 5, normalized-entropy: 0.5069923067544342, [(1, 10), (2, 79)]
*** center 6: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [49, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21163923303037882] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21163923303037882, 0.15657701262272894] ***
*** starting iteration: 2; err: [Inf, 0.21163923303037882, 0.15657701262272894] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21163923303037882, 0.15657701262272894, 0.15285460976324974] ***
*** starting iteration: 3; err: [Inf, 0.21163923303037882, 0.15657701262272894, 0.15285460976324974] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21163923303037882, 0.15657701262272894, 0.15285460976324974, 0.15117943192087113] ***
*** finished computation of 7 references, err: [Inf, 0.21163923303037882, 0.15657701262272894, 0.15285460976324974, 0.15117943192087113] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [33, 41, 0]]
** centroid: 1, normalized-entropy: 0.9915528503834039, [(1, 33), (2, 41)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 45, 19]]
** centroid: 2, normalized-entropy: 0.877437311089633, [(2, 45), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [50, 16, 0]]
** centroid: 3, normalized-entropy: 0.7990485210442682, [(1, 50), (2, 16)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [58, 21, 0]]
** centroid: 4, normalized-entropy: 0.8354065254460503, [(1, 58), (2, 21)]
*** center 5: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 69, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
finished with 11 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 381,3 => 35,1 => 584), Dict(2 => 369,3 => 38,1 => 593))
[ Info: ===== scores for single classifier: {"micro_f1":0.919,"precision":0.919,"recall":0.919,"macro_recall":0.9473029974819142,"macro_f1":0.8753240274545506,"accuracy":0.919,"class_f1":{"2":0.8957528957528959,"3":0.7835051546391751,"1":0.9467140319715808},"class_precision":{"2":0.8529411764705882,"3":0.6440677966101694,"1":1.0},"class_recall":{"2":0.943089430894309,"3":1.0,"1":0.8988195615514334}}
[ Info: ===== scores for 1: {"micro_f1":0.969,"precision":0.969,"recall":0.969,"macro_recall":0.962060101651873,"macro_f1":0.9689355910815373,"accuracy":0.969,"class_f1":{"2":0.9583892617449665,"3":0.972972972972973,"1":0.9754445385266722},"class_precision":{"2":0.949468085106383,"3":1.0,"1":0.9795918367346939},"class_recall":{"2":0.967479674796748,"3":0.9473684210526315,"1":0.9713322091062394}}
[ Info: ===== scores for 5: {"micro_f1":0.971,"precision":0.971,"recall":0.971,"macro_recall":0.9707116873837299,"macro_f1":0.9627810053541292,"accuracy":0.971,"class_f1":{"2":0.9607577807848444,"3":0.9487179487179489,"1":0.9788672865595942},"class_precision":{"2":0.9594594594594594,"3":0.925,"1":0.9813559322033898},"class_recall":{"2":0.962059620596206,"3":0.9736842105263158,"1":0.9763912310286678}}
[ Info: ===== scores for 7: {"micro_f1":0.974,"precision":0.974,"recall":0.974,"macro_recall":0.9723980280245393,"macro_f1":0.9649473715708411,"accuracy":0.974,"class_f1":{"2":0.9646739130434783,"3":0.9487179487179489,"1":0.9814502529510961},"class_precision":{"2":0.9673024523160763,"3":0.925,"1":0.9814502529510961},"class_recall":{"2":0.962059620596206,"3":0.9736842105263158,"1":0.9814502529510961}}
[ Info: ===== scores for 9: {"micro_f1":0.971,"precision":0.971,"recall":0.971,"macro_recall":0.9710529162035503,"macro_f1":0.9628043817178806,"accuracy":0.971,"class_f1":{"2":0.960863697705803,"3":0.9487179487179489,"1":0.97883149872989},"class_precision":{"2":0.956989247311828,"3":0.925,"1":0.9829931972789115},"class_recall":{"2":0.964769647696477,"3":0.9736842105263158,"1":0.9747048903878583}}
[ Info: ===== scores for 11: {"micro_f1":0.975,"precision":0.975,"recall":0.975,"macro_recall":0.9743250568507579,"macro_f1":0.9657529561262109,"accuracy":0.975,"class_f1":{"2":0.9663526244952894,"3":0.9487179487179489,"1":0.9821882951653944},"class_precision":{"2":0.9598930481283422,"3":0.925,"1":0.9880546075085325},"class_recall":{"2":0.9728997289972899,"3":0.9736842105263158,"1":0.9763912310286678}}
(score = 0.968, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.968, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.969, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.969, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.968, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.968, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.969, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.969, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.968, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.968, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.971, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.971, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.97, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.97, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.974, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.974, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.974,"k":7,"kernel":"direct_kernel","dist":"l2_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.974,"precision":0.974,"recall":0.974,"macro_recall":0.9723980280245393,"macro_f1":0.9649473715708411,"accuracy":0.974,"class_f1":{"2":0.9646739130434783,"3":0.9487179487179489,"1":0.9814502529510961},"class_precision":{"2":0.9673024523160763,"3":0.925,"1":0.9814502529510961},"class_recall":{"2":0.962059620596206,"3":0.9736842105263158,"1":0.9814502529510961}}
Test Summary: | Pass  Total
AKNC          |    8      8
[410, 2, 1, 1, 1, 4, 3, 5, 7, 7, 2, 10, 10, 11, 3, 3, 2, 3, 10, 2, 19, 3, 7, 10, 22, 2, 6, 2, 10, 60, 3, 1, 36, 11, 12, 4, 13, 7, 4, 19, 11, 22, 8, 4, 41, 10, 3, 6, 3, 38, 142, 8, 13, 12, 9, 8, 8, 4, 7, 15, 19, 3, 11, 27, 10, 24, 15, 4, 48, 26, 1, 26, 2, 44, 8, 7, 7, 12, 7, 9, 5, 23, 5, 31, 53, 26, 16, 2, 64, 58, 16, 6, 19, 19, 11, 9, 8, 23, 92, 23, 2, 8, 5, 3, 21, 248, 5, 59, 29, 18, 59, 96, 4, 15, 237, 2, 10, 85, 13, 4, 6, 36, 21, 9, 9, 8, 64, 14, 10, 8, 39, 7, 16, 2, 6, 51, 2, 6, 11, 26, 13, 31, 1, 7, 3, 4, 40, 111, 16, 10, 31, 8, 1020, 6, 46, 99, 54, 3, 11, 46, 14, 78, 3, 3, 159, 48, 1, 4, 4, 8, 10, 24, 35, 4, 20, 54, 13, 26, 40, 6, 51, 25, 8, 32, 24, 23, 15, 3, 1, 22, 7, 18, 17, 10, 15, 12, 42, 7, 8, 34, 1, 7, 90, 11, 9, 3, 38, 33, 52, 16, 66, 16, 17, 82, 9, 15, 24, 10, 25, 11, 128, 28, 31, 1, 25, 3, 3, 12, 52, 220, 7, 28, 22, 193, 29, 26, 8, 25, 15, 53, 43, 30, 81, 11, 2, 121, 21, 55, 8, 44, 17, 23, 2, 66, 75, 30, 105, 24, 8, 42, 4, 23, 125, 81, 107, 40, 20, 30, 20, 34, 35, 36, 20, 23, 12, 37, 53, 295, 19, 59, 13, 11, 8, 8, 76, 34, 43, 7, 16, 150, 130, 8, 26, 25, 101, 116, 7, 14, 157, 24]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6529999999999997, speedup = 0.3061866535336124, eval_ratio = 0.072264)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.3836805555555557,"recall":0.38194444444444453,"f1":null,"seconds":0.0003292057663202286,"exhaustive_search_seconds":0.000350218266248703,"evaluations":441.859375,"distances_sum":1769.410346042454}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5295138888888886,"recall":0.5295138888888886,"f1":null,"seconds":0.00026257336139678955,"exhaustive_search_seconds":0.000350218266248703,"evaluations":613.7109375,"distances_sum":1642.9970353079407}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6458333333333329,"recall":0.6458333333333329,"f1":null,"seconds":0.0004411078989505768,"exhaustive_search_seconds":0.000350218266248703,"evaluations":742.5546875,"distances_sum":1585.126783954254}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7204861111111104,"recall":0.7204861111111104,"f1":null,"seconds":0.0005015954375267029,"exhaustive_search_seconds":0.000350218266248703,"evaluations":895.5859375,"distances_sum":1559.3148436939823}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.765624999999999,"recall":0.765624999999999,"f1":0.765624999999999,"seconds":0.000585576519370079,"exhaustive_search_seconds":0.000350218266248703,"evaluations":1022.734375,"distances_sum":1542.2521079912124}
KCenters.DeloneInvIndex> reached performance {"precision":0.8220486111111105,"recall":0.8220486111111105,"f1":0.8220486111111105,"seconds":0.0006767325103282928,"exhaustive_search_seconds":0.000350218266248703,"evaluations":1118.09375,"distances_sum":1523.847674640788}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8180000000000004, speedup = 0.46787195742349535, eval_ratio = 0.10586199999999998)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
