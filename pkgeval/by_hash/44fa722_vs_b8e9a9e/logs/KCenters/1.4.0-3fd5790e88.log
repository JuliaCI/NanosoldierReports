Julia Version 1.4.0
Commit 3fd5790e88 (2020-04-10 10:01 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-8.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed Missings ──────────────────── v0.4.3
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed DataValueInterfaces ───────── v1.0.0
  Installed Reexport ──────────────────── v0.2.0
  Installed OrderedCollections ────────── v1.1.0
  Installed KCenters ──────────────────── v0.2.2
  Installed MLDataUtils ───────────────── v0.5.1
  Installed MLDataPattern ─────────────── v0.5.1
  Installed JSON ──────────────────────── v0.21.0
  Installed PooledArrays ──────────────── v0.5.3
  Installed TableTraits ───────────────── v1.0.0
  Installed DataStructures ────────────── v0.17.11
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed LearnBase ─────────────────── v0.2.2
  Installed Compat ────────────────────── v3.8.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed Parsers ───────────────────── v1.0.1
  Installed CategoricalArrays ─────────── v0.7.7
  Installed SimilaritySearch ──────────── v0.3.19
  Installed InvertedIndices ───────────── v1.0.0
  Installed StatsBase ─────────────────── v0.32.2
  Installed MappedArrays ──────────────── v0.2.2
  Installed DataAPI ───────────────────── v1.1.0
  Installed Tables ────────────────────── v1.0.3
  Installed DataFrames ────────────────── v0.20.2
   Updating `~/.julia/environments/v1.4/Project.toml`
  [5d8de97f] + KCenters v0.2.2
   Updating `~/.julia/environments/v1.4/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.8.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.11
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.1
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v1.0.1
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.3
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
    Testing KCenters
Status `/tmp/jl_NIeMnG/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.8.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.11
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.1
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v1.0.1
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.3
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.932025450070699
[ Info: 0.8321307849884033
[ Info: 0.5529132370650768
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.3328977065036694
mean(cdnet.distances) = 0.3887716768682003
mean(crand.distances) = 0.3485511535902818
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4443359375, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.4443359375,"f1":null,"seconds":4.474073648452759e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":7.421875,"distances_sum":1262.0313785746623}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4443359375,"state":{"ssize":3,"bsize":2},"perf":{"precision":null,"recall":0.4443359375,"f1":null,"seconds":4.474073648452759e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":7.421875,"distances_sum":1262.0313785746623}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.751953125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.751953125,"f1":0.85323998917749,"seconds":6.126239895820618e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.875,"distances_sum":2348.6650046584637}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8544921875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8544921875,"f1":0.917513736263737,"seconds":6.083399057388306e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.984375,"distances_sum":2767.203636768549}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8544921875,"state":{"ssize":4,"bsize":6},"perf":{"precision":1.0,"recall":0.8544921875,"f1":0.917513736263737,"seconds":6.083399057388306e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.984375,"distances_sum":2767.203636768549}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9413981851481859,"seconds":6.068497896194458e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.9296875,"distances_sum":2996.276162937584}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9691620879120884,"seconds":6.727874279022217e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":9.0,"distances_sum":3229.8609427499873}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9581330128205133,"seconds":6.20819628238678e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":9.0,"distances_sum":3133.729902889682}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9691620879120884,"seconds":6.727874279022217e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":9.0,"distances_sum":3229.8609427499873}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9443359375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9691620879120884,"seconds":6.727874279022217e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":9.0,"distances_sum":3229.8609427499873}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7607421875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7607421875,"f1":0.8552973068598076,"seconds":5.433335900306702e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.3671875,"distances_sum":2202.2422733550493}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.564453125, conf: {"ssize":3,"bsize":3}, perf: {"precision":null,"recall":0.564453125,"f1":null,"seconds":4.468485713005066e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":7.3515625,"distances_sum":1482.6514432079464}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.763671875,"f1":0.8583681943056951,"seconds":5.60469925403595e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.4921875,"distances_sum":2188.4915992003284}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.763671875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.763671875,"f1":0.8583681943056951,"seconds":5.60469925403595e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.4921875,"distances_sum":2188.4915992003284}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9387336621711628,"seconds":5.537644028663635e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.71875,"distances_sum":2792.312903674335}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8935546875,"state":{"ssize":8,"bsize":7},"perf":{"precision":1.0,"recall":0.8935546875,"f1":0.9387336621711628,"seconds":5.537644028663635e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.71875,"distances_sum":2792.312903674335}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":10,"bsize":10}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9630608974358976,"seconds":6.321817636489868e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.8984375,"distances_sum":2976.75977254385}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":11,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9535771520146524,"seconds":5.988404154777527e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.8515625,"distances_sum":2918.293371292757}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.93359375,"state":{"ssize":10,"bsize":10},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9630608974358976,"seconds":6.321817636489868e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.8984375,"distances_sum":2976.75977254385}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.93359375,"state":{"ssize":10,"bsize":10},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9630608974358976,"seconds":6.321817636489868e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.8984375,"distances_sum":2976.75977254385}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.443359375, conf: {"ssize":1,"bsize":2}, perf: {"precision":1.0,"recall":0.443359375,"f1":0.5944250194250195,"seconds":4.207715392112732e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":7.296875,"distances_sum":1114.2540742164904}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1962890625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1962890625,"f1":null,"seconds":3.6675482988357544e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":6.4609375,"distances_sum":528.894333751514}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.443359375,"state":{"ssize":1,"bsize":2},"perf":{"precision":1.0,"recall":0.443359375,"f1":0.5944250194250195,"seconds":4.207715392112732e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":7.296875,"distances_sum":1114.2540742164904}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.748046875, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.748046875,"f1":0.8450044746919756,"seconds":5.245208740234375e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.390625,"distances_sum":2062.979882166905}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7587890625, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.7587890625,"f1":0.8530511155511165,"seconds":5.381181836128235e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.3828125,"distances_sum":2118.8181838210953}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7587890625,"state":{"ssize":8,"bsize":5},"perf":{"precision":1.0,"recall":0.7587890625,"f1":0.8530511155511165,"seconds":5.381181836128235e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.3828125,"distances_sum":2118.8181838210953}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7880859375, conf: {"ssize":12,"bsize":5}, perf: {"precision":1.0,"recall":0.7880859375,"f1":0.8735670579420588,"seconds":5.561858415603638e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.5625,"distances_sum":2210.0579687014215}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9616128663003667,"seconds":6.237998604774475e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.8359375,"distances_sum":2901.0198486608624}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9546588827838831,"seconds":5.617737770080566e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.875,"distances_sum":2824.9367308498827}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8525390625, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.8525390625,"f1":0.9137081668331677,"seconds":5.271285772323608e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.6796875,"distances_sum":2498.8590113919972}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.869140625, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.869140625,"f1":0.9201444388944394,"seconds":5.405396223068237e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.640625,"distances_sum":2578.4009324004314}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8564453125, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8564453125,"f1":0.9166781135531141,"seconds":5.533918738365173e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.6796875,"distances_sum":2523.6289109673426}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9501607767232773,"seconds":5.841255187988281e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.8671875,"distances_sum":2790.3315988247955}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.931640625,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9616128663003667,"seconds":6.237998604774475e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.8359375,"distances_sum":2901.0198486608624}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.931640625,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9616128663003667,"seconds":6.237998604774475e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.8359375,"distances_sum":2901.0198486608624}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4091796875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4091796875,"f1":null,"seconds":4.014000296592712e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":6.8046875,"distances_sum":1054.840340036803}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.568359375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.568359375,"f1":0.713541146353647,"seconds":4.557892680168152e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":7.5703125,"distances_sum":1437.7934187731878}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.568359375,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.568359375,"f1":0.713541146353647,"seconds":4.557892680168152e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":7.5703125,"distances_sum":1437.7934187731878}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.93347641941392,"seconds":5.938112735748291e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.875,"distances_sum":2632.890620854664}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.884765625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.884765625,"f1":0.93347641941392,"seconds":5.938112735748291e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.875,"distances_sum":2632.890620854664}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9671531593406596,"seconds":6.034970283508301e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.921875,"distances_sum":2924.9383663131525}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94140625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9671531593406596,"seconds":6.034970283508301e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.921875,"distances_sum":2924.9383663131525}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94140625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9671531593406596,"seconds":6.034970283508301e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.921875,"distances_sum":2924.9383663131525}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3876953125, conf: {"ssize":3,"bsize":2}, perf: {"precision":1.0,"recall":0.3876953125,"f1":0.5379058441558439,"seconds":4.073604941368103e-6,"exhaustive_search_seconds":1.600012183189392e-6,"evaluations":6.2734375,"distances_sum":973.758477970978}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7265625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7265625,"f1":0.8319919663669672,"seconds":5.653128027915955e-6,"exhaustive_search_seconds":1.600012183189392e-6,"evaluations":8.3984375,"distances_sum":2006.1432692665092}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7265625,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7265625,"f1":0.8319919663669672,"seconds":5.653128027915955e-6,"exhaustive_search_seconds":1.600012183189392e-6,"evaluations":8.3984375,"distances_sum":2006.1432692665092}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7265625,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7265625,"f1":0.8319919663669672,"seconds":5.653128027915955e-6,"exhaustive_search_seconds":1.600012183189392e-6,"evaluations":8.3984375,"distances_sum":2006.1432692665092}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.7265625,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7265625,"f1":0.8319919663669672,"seconds":5.653128027915955e-6,"exhaustive_search_seconds":1.600012183189392e-6,"evaluations":8.3984375,"distances_sum":2006.1432692665092}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4111328125, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.4111328125,"f1":null,"seconds":3.7942081689834595e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":6.421875,"distances_sum":832.221488462154}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.740234375, conf: {"ssize":1,"bsize":5}, perf: {"precision":0.9932291666666666,"recall":0.740234375,"f1":0.8422020687645694,"seconds":5.519017577171326e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.140625,"distances_sum":1607.7904170499526}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5224609375, conf: {"ssize":5,"bsize":3}, perf: {"precision":0.9713541666666666,"recall":0.5224609375,"f1":null,"seconds":4.468485713005066e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":6.6640625,"distances_sum":1124.6412245209387}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.740234375,"state":{"ssize":1,"bsize":5},"perf":{"precision":0.9932291666666666,"recall":0.740234375,"f1":0.8422020687645694,"seconds":5.519017577171326e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.140625,"distances_sum":1607.7904170499526}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":2,"bsize":8}, perf: {"precision":0.9859561011904763,"recall":0.9140625,"f1":0.945817593864469,"seconds":6.241723895072937e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.765625,"distances_sum":2283.3704569464776}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":1,"bsize":9}, perf: {"precision":0.9848865327380953,"recall":0.92578125,"f1":0.9521169585622715,"seconds":6.210058927536011e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.8671875,"distances_sum":2309.8297171260974}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8525390625, conf: {"ssize":6,"bsize":7}, perf: {"precision":0.9860212053571429,"recall":0.8525390625,"f1":0.9108924278846159,"seconds":5.900859832763672e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.6171875,"distances_sum":2048.5902967346865}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.798828125, conf: {"ssize":4,"bsize":6}, perf: {"precision":0.9885323660714286,"recall":0.798828125,"f1":0.8753117325382959,"seconds":5.638226866722107e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.3671875,"distances_sum":1808.0059277669543}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.92578125,"state":{"ssize":1,"bsize":9},"perf":{"precision":0.9848865327380953,"recall":0.92578125,"f1":0.9521169585622715,"seconds":6.210058927536011e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.8671875,"distances_sum":2309.8297171260974}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":1,"bsize":12}, perf: {"precision":0.9865606398809523,"recall":0.947265625,"f1":0.9649861206501834,"seconds":6.3478946685791016e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.953125,"distances_sum":2387.354132267125}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":1,"bsize":11}, perf: {"precision":0.9843750000000002,"recall":0.9384765625,"f1":0.959581043956044,"seconds":6.595626473426819e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.953125,"distances_sum":2343.315574881991}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":1,"bsize":12},"perf":{"precision":0.9865606398809523,"recall":0.947265625,"f1":0.9649861206501834,"seconds":6.3478946685791016e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.953125,"distances_sum":2387.354132267125}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":1,"bsize":12},"perf":{"precision":0.9865606398809523,"recall":0.947265625,"f1":0.9649861206501834,"seconds":6.3478946685791016e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.953125,"distances_sum":2387.354132267125}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5703125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5703125,"f1":0.7079399766899774,"seconds":4.9602240324020386e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":7.2734375,"distances_sum":1204.477610642449}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6240234375, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6240234375,"f1":0.7566886238761245,"seconds":5.09992241859436e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":7.46875,"distances_sum":1302.105614340975}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.373046875, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.373046875,"f1":null,"seconds":3.926455974578857e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":5.421875,"distances_sum":780.5927334404824}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6240234375,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.6240234375,"f1":0.7566886238761245,"seconds":5.09992241859436e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":7.46875,"distances_sum":1302.105614340975}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9280105311355318,"seconds":6.100162863731384e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.6953125,"distances_sum":2084.726724354097}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7109375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7109375,"f1":0.8220253704628714,"seconds":7.547251880168915e-5,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":7.875,"distances_sum":1573.2252415743708}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.765625,"f1":0.8567578255078263,"seconds":5.668029189109802e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.0546875,"distances_sum":1784.546131644967}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.935431235431236,"seconds":6.012618541717529e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.671875,"distances_sum":2134.861518668771}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6572265625, conf: {"ssize":7,"bsize":4}, perf: {"precision":1.0,"recall":0.6572265625,"f1":0.7817597333222341,"seconds":4.582107067108154e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":7.625,"distances_sum":1402.1402414119561}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.888671875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.888671875,"f1":0.935431235431236,"seconds":6.012618541717529e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.671875,"distances_sum":2134.861518668771}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9445257867132871,"seconds":5.653128027915955e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.65625,"distances_sum":2210.4788553052745}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9533940018315024,"seconds":5.6438148021698e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.7578125,"distances_sum":2249.4534665965916}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.919921875,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.9533940018315024,"seconds":5.6438148021698e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.7578125,"distances_sum":2249.4534665965916}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.919921875,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.9533940018315024,"seconds":5.6438148021698e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.7578125,"distances_sum":2249.4534665965916}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7236328125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7236328125,"f1":0.8312619671994682,"seconds":3.203749656677246e-6,"exhaustive_search_seconds":9.126961231231689e-7,"evaluations":7.609375,"distances_sum":1576.1950823752777}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3759765625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3759765625,"f1":null,"seconds":3.069639205932617e-6,"exhaustive_search_seconds":9.126961231231689e-7,"evaluations":5.1953125,"distances_sum":741.9753382382564}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7236328125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7236328125,"f1":0.8312619671994682,"seconds":3.203749656677246e-6,"exhaustive_search_seconds":9.126961231231689e-7,"evaluations":7.609375,"distances_sum":1576.1950823752777}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.794921875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.794921875,"f1":0.8768746878121887,"seconds":3.516674041748047e-6,"exhaustive_search_seconds":9.126961231231689e-7,"evaluations":8.3125,"distances_sum":1819.0454441769728}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.794921875,"state":{"ssize":3,"bsize":6},"perf":{"precision":1.0,"recall":0.794921875,"f1":0.8768746878121887,"seconds":3.516674041748047e-6,"exhaustive_search_seconds":9.126961231231689e-7,"evaluations":8.3125,"distances_sum":1819.0454441769728}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.861328125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.861328125,"f1":0.9202380952380961,"seconds":3.945082426071167e-6,"exhaustive_search_seconds":9.126961231231689e-7,"evaluations":8.640625,"distances_sum":2027.8266261991246}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8154296875, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8154296875,"f1":0.8908711080586088,"seconds":3.764405846595764e-6,"exhaustive_search_seconds":9.126961231231689e-7,"evaluations":8.359375,"distances_sum":1884.5798967531564}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.861328125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.861328125,"f1":0.9202380952380961,"seconds":3.945082426071167e-6,"exhaustive_search_seconds":9.126961231231689e-7,"evaluations":8.640625,"distances_sum":2027.8266261991246}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.861328125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.861328125,"f1":0.9202380952380961,"seconds":3.945082426071167e-6,"exhaustive_search_seconds":9.126961231231689e-7,"evaluations":8.640625,"distances_sum":2027.8266261991246}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.65625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.65625,"f1":0.7796857656232663,"seconds":3.0472874641418457e-6,"exhaustive_search_seconds":9.145587682723999e-7,"evaluations":7.140625,"distances_sum":1332.0785936409818}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.576171875, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.576171875,"f1":null,"seconds":3.071501851081848e-6,"exhaustive_search_seconds":9.145587682723999e-7,"evaluations":6.59375,"distances_sum":1104.543160171377}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.65625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.65625,"f1":0.7796857656232663,"seconds":3.0472874641418457e-6,"exhaustive_search_seconds":9.145587682723999e-7,"evaluations":7.140625,"distances_sum":1332.0785936409818}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9458994130869136,"seconds":5.695968866348267e-6,"exhaustive_search_seconds":9.145587682723999e-7,"evaluations":8.796875,"distances_sum":2163.248465876469}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7265625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7265625,"f1":0.8351190476190484,"seconds":5.062669515609741e-6,"exhaustive_search_seconds":9.145587682723999e-7,"evaluations":7.9765625,"distances_sum":1527.5869239398914}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9052734375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9052734375,"f1":0.9458994130869136,"seconds":5.695968866348267e-6,"exhaustive_search_seconds":9.145587682723999e-7,"evaluations":8.796875,"distances_sum":2163.248465876469}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9763049450549455,"seconds":6.102025508880615e-6,"exhaustive_search_seconds":9.145587682723999e-7,"evaluations":8.96875,"distances_sum":2320.777640589673}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.958984375, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.958984375,"f1":0.9775869963369966,"seconds":5.982816219329834e-6,"exhaustive_search_seconds":9.145587682723999e-7,"evaluations":8.9609375,"distances_sum":2324.9095514748224}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9633012820512824,"seconds":5.6978315114974976e-6,"exhaustive_search_seconds":9.145587682723999e-7,"evaluations":8.9140625,"distances_sum":2237.3427694944485}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9565361721611728,"seconds":5.749985575675964e-6,"exhaustive_search_seconds":9.145587682723999e-7,"evaluations":8.828125,"distances_sum":2232.4170068008116}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9445231851481858,"seconds":5.969777703285217e-6,"exhaustive_search_seconds":9.145587682723999e-7,"evaluations":8.703125,"distances_sum":2163.702797804193}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.958984375,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9775869963369966,"seconds":5.982816219329834e-6,"exhaustive_search_seconds":9.145587682723999e-7,"evaluations":8.9609375,"distances_sum":2324.9095514748224}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.958984375,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9775869963369966,"seconds":5.982816219329834e-6,"exhaustive_search_seconds":9.145587682723999e-7,"evaluations":8.9609375,"distances_sum":2324.9095514748224}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.66015625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.66015625,"f1":0.785876103063604,"seconds":3.2223761081695557e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":7.109375,"distances_sum":1354.210975379723}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.39453125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.39453125,"f1":null,"seconds":2.2407621145248413e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":5.609375,"distances_sum":777.4228011253831}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.66015625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.66015625,"f1":0.785876103063604,"seconds":3.2223761081695557e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":7.109375,"distances_sum":1354.210975379723}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7392578125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7392578125,"f1":0.8409756909756918,"seconds":3.1739473342895508e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.1171875,"distances_sum":1615.523243162877}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7392578125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7392578125,"f1":0.8409756909756918,"seconds":3.1739473342895508e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.1171875,"distances_sum":1615.523243162877}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8193359375, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8193359375,"f1":0.8947547244422255,"seconds":3.846362233161926e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.421875,"distances_sum":1915.1324264706357}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7958984375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.7958984375,"f1":0.8799310064935073,"seconds":3.468245267868042e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.4140625,"distances_sum":1802.5677828379105}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8193359375,"state":{"ssize":5,"bsize":6},"perf":{"precision":1.0,"recall":0.8193359375,"f1":0.8947547244422255,"seconds":3.846362233161926e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.421875,"distances_sum":1915.1324264706357}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8193359375,"state":{"ssize":5,"bsize":6},"perf":{"precision":1.0,"recall":0.8193359375,"f1":0.8947547244422255,"seconds":3.846362233161926e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.421875,"distances_sum":1915.1324264706357}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5576171875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5576171875,"f1":0.6972471972471976,"seconds":4.1387975215911865e-6,"exhaustive_search_seconds":9.145587682723999e-7,"evaluations":6.6875,"distances_sum":1092.5834749786425}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5576171875,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5576171875,"f1":0.6972471972471976,"seconds":4.1387975215911865e-6,"exhaustive_search_seconds":9.145587682723999e-7,"evaluations":6.6875,"distances_sum":1092.5834749786425}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.869140625, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.869140625,"f1":0.9242673992673998,"seconds":5.628913640975952e-6,"exhaustive_search_seconds":9.145587682723999e-7,"evaluations":8.53125,"distances_sum":2038.2781508948158}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.869140625,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.869140625,"f1":0.9242673992673998,"seconds":5.628913640975952e-6,"exhaustive_search_seconds":9.145587682723999e-7,"evaluations":8.53125,"distances_sum":2038.2781508948158}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.873046875, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.873046875,"f1":0.926551053113554,"seconds":5.37186861038208e-6,"exhaustive_search_seconds":9.145587682723999e-7,"evaluations":8.625,"distances_sum":2044.1796115785587}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9703353937728941,"seconds":5.692243576049805e-6,"exhaustive_search_seconds":9.145587682723999e-7,"evaluations":8.875,"distances_sum":2300.0761898760493}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9703353937728941,"seconds":5.692243576049805e-6,"exhaustive_search_seconds":9.145587682723999e-7,"evaluations":8.875,"distances_sum":2300.0761898760493}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9703353937728941,"seconds":5.692243576049805e-6,"exhaustive_search_seconds":9.145587682723999e-7,"evaluations":8.875,"distances_sum":2300.0761898760493}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4228515625, conf: {"ssize":1,"bsize":2}, perf: {"precision":1.0,"recall":0.4228515625,"f1":0.568055382117882,"seconds":2.6337802410125732e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":6.0859375,"distances_sum":851.3453998426637}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4228515625,"state":{"ssize":1,"bsize":2},"perf":{"precision":1.0,"recall":0.4228515625,"f1":0.568055382117882,"seconds":2.6337802410125732e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":6.0859375,"distances_sum":851.3453998426637}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5634765625, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.5634765625,"f1":0.710674568487069,"seconds":3.248453140258789e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":6.9609375,"distances_sum":1127.307844155222}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5634765625,"state":{"ssize":3,"bsize":3},"perf":{"precision":1.0,"recall":0.5634765625,"f1":0.710674568487069,"seconds":3.248453140258789e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":6.9609375,"distances_sum":1127.307844155222}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8056640625, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.8056640625,"f1":0.8839660339660347,"seconds":3.4421682357788086e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.390625,"distances_sum":1845.574721126944}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7275390625, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.7275390625,"f1":0.8315906315906325,"seconds":3.203749656677246e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.0390625,"distances_sum":1602.9919095404696}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5693359375, conf: {"ssize":7,"bsize":3}, perf: {"precision":1.0,"recall":0.5693359375,"f1":0.7115658646908652,"seconds":2.650544047355652e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":6.9140625,"distances_sum":1149.336376650178}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8056640625,"state":{"ssize":7,"bsize":6},"perf":{"precision":1.0,"recall":0.8056640625,"f1":0.8839660339660347,"seconds":3.4421682357788086e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.390625,"distances_sum":1845.574721126944}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8056640625,"state":{"ssize":7,"bsize":6},"perf":{"precision":1.0,"recall":0.8056640625,"f1":0.8839660339660347,"seconds":3.4421682357788086e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.390625,"distances_sum":1845.574721126944}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5126953125, conf: {"ssize":3,"bsize":3}, perf: {"precision":0.9711588541666666,"recall":0.5126953125,"f1":0.65291780701937,"seconds":2.561137080192566e-6,"exhaustive_search_seconds":9.369105100631714e-7,"evaluations":6.4609375,"distances_sum":1242.8547027491302}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6416015625, conf: {"ssize":4,"bsize":4}, perf: {"precision":0.9797061011904762,"recall":0.6416015625,"f1":0.7649632919164175,"seconds":2.8349459171295166e-6,"exhaustive_search_seconds":9.369105100631714e-7,"evaluations":7.078125,"distances_sum":1600.31550773258}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6416015625,"state":{"ssize":4,"bsize":4},"perf":{"precision":0.9797061011904762,"recall":0.6416015625,"f1":0.7649632919164175,"seconds":2.8349459171295166e-6,"exhaustive_search_seconds":9.369105100631714e-7,"evaluations":7.078125,"distances_sum":1600.31550773258}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7177734375, conf: {"ssize":3,"bsize":5}, perf: {"precision":0.986616443452381,"recall":0.7177734375,"f1":0.8228113683191814,"seconds":3.1385570764541626e-6,"exhaustive_search_seconds":9.369105100631714e-7,"evaluations":8.0390625,"distances_sum":1942.2204400133269}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":5,"bsize":8}, perf: {"precision":0.9850260416666666,"recall":0.9189453125,"f1":0.9478265224358979,"seconds":3.825873136520386e-6,"exhaustive_search_seconds":9.369105100631714e-7,"evaluations":8.9375,"distances_sum":2719.163368869402}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7978515625, conf: {"ssize":3,"bsize":6}, perf: {"precision":0.9817615327380953,"recall":0.7978515625,"f1":0.873743248938562,"seconds":3.2354146242141724e-6,"exhaustive_search_seconds":9.369105100631714e-7,"evaluations":8.4140625,"distances_sum":2274.9284377496797}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7978515625, conf: {"ssize":7,"bsize":6}, perf: {"precision":0.9840680803571429,"recall":0.7978515625,"f1":0.875170987866301,"seconds":3.680586814880371e-6,"exhaustive_search_seconds":9.369105100631714e-7,"evaluations":8.3828125,"distances_sum":2287.236575627621}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7060546875, conf: {"ssize":1,"bsize":5}, perf: {"precision":0.9843191964285714,"recall":0.7060546875,"f1":0.8146708759990016,"seconds":3.2335519790649414e-6,"exhaustive_search_seconds":9.369105100631714e-7,"evaluations":8.2109375,"distances_sum":1848.1550580448954}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9189453125,"state":{"ssize":5,"bsize":8},"perf":{"precision":0.9850260416666666,"recall":0.9189453125,"f1":0.9478265224358979,"seconds":3.825873136520386e-6,"exhaustive_search_seconds":9.369105100631714e-7,"evaluations":8.9375,"distances_sum":2719.163368869402}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":9,"bsize":11}, perf: {"precision":0.984747023809524,"recall":0.9423828125,"f1":0.9614611950549454,"seconds":4.211440682411194e-6,"exhaustive_search_seconds":9.369105100631714e-7,"evaluations":8.9921875,"distances_sum":2830.648531293972}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":6,"bsize":12}, perf: {"precision":0.9812593005952381,"recall":0.939453125,"f1":0.9586774553571431,"seconds":4.349276423454285e-6,"exhaustive_search_seconds":9.369105100631714e-7,"evaluations":9.0,"distances_sum":2828.1712875748776}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":3,"bsize":10}, perf: {"precision":0.9907924107142858,"recall":0.935546875,"f1":0.9600861378205131,"seconds":6.342306733131409e-6,"exhaustive_search_seconds":9.369105100631714e-7,"evaluations":8.984375,"distances_sum":2771.0461709885603}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":1,"bsize":8}, perf: {"precision":0.9893043154761905,"recall":0.9345703125,"f1":0.958872767857143,"seconds":6.137415766716003e-6,"exhaustive_search_seconds":9.369105100631714e-7,"evaluations":8.9453125,"distances_sum":2791.2591250832}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":11,"bsize":9}, perf: {"precision":0.9846075148809523,"recall":0.9287109375,"f1":0.9536408253205134,"seconds":5.48921525478363e-6,"exhaustive_search_seconds":9.369105100631714e-7,"evaluations":8.9609375,"distances_sum":2773.483619678129}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":1,"bsize":9}, perf: {"precision":0.9874162946428572,"recall":0.9228515625,"f1":0.9514730711996342,"seconds":5.669891834259033e-6,"exhaustive_search_seconds":9.369105100631714e-7,"evaluations":8.9453125,"distances_sum":2741.5571253610738}, best_list's length: 15, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9423828125,"state":{"ssize":9,"bsize":11},"perf":{"precision":0.984747023809524,"recall":0.9423828125,"f1":0.9614611950549454,"seconds":4.211440682411194e-6,"exhaustive_search_seconds":9.369105100631714e-7,"evaluations":8.9921875,"distances_sum":2830.648531293972}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9423828125,"state":{"ssize":9,"bsize":11},"perf":{"precision":0.984747023809524,"recall":0.9423828125,"f1":0.9614611950549454,"seconds":4.211440682411194e-6,"exhaustive_search_seconds":9.369105100631714e-7,"evaluations":8.9921875,"distances_sum":2830.648531293972}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2529296875,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2529296875,"f1":null,"seconds":3.7904828786849976e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":5.875,"distances_sum":603.7471666288385}}, beam: 2, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.2529296875,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2529296875,"f1":null,"seconds":3.7904828786849976e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":5.875,"distances_sum":603.7471666288385}}, n: 9
mean(cfft.distances) = 0.33765869766825785
mean(cdnet.distances) = 0.4245595843425062
mean(crand.distances) = 0.5704877690244547
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8644444444444446
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8888888888888888
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8577777777777778
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.9222222222222222
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8777777777777778
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8955555555555555
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9111111111111111
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9355555555555556
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9422222222222222
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8533333333333334
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.9155555555555556
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8911111111111111
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.9377777777777778
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9444444444444443
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9088888888888889
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9288888888888889
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9244444444444445
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9266666666666666
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8755555555555555
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8822222222222221
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8822222222222221
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.86
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.931111111111111
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9244444444444445
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8911111111111111
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9044444444444445
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.8866666666666667
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8844444444444445
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.9155555555555557
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8355555555555556
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8955555555555555
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.8888888888888888
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9066666666666667
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 2, 3, 3, 2, 3, 3, 2, 3, 1, 2]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 2, 3, 3, 2, 3, 3, 2, 3, 1, 2]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 2, 3, 3, 2, 3, 3, 2, 3, 1, 2]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 2, 3, 3, 2, 3, 3, 2, 3, 1, 2]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 2, 3, 3, 2, 3, 3, 2, 3, 1, 2]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 2, 3, 3, 2, 3, 3, 2, 3, 1, 2]
acc = 0.9333333333333333
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 2, 3, 3, 2, 3, 3, 2, 3, 1, 2]
acc = 0.9666666666666667
*** finished computation of 12 references, err: [Inf, 0.5666118808090687] ***
*** center 1: selecting labels [1] (freq >= 1) [from [39, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 2]]
** centroid: 3, normalized-entropy: 0.9709505944546688, [(2, 3), (3, 2)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 15, 2]]
** centroid: 4, normalized-entropy: 0.5225593745369407, [(2, 15), (3, 2)]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 14]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 4, 17]]
** centroid: 8, normalized-entropy: 0.7024665512903904, [(2, 4), (3, 17)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
finished with 15 centroids; started with 12
acc = 0.9466666666666667
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.27404874965391895] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27404874965391895, 0.18084629969826937] ***
*** starting iteration: 2; err: [Inf, 0.27404874965391895, 0.18084629969826937] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27404874965391895, 0.18084629969826937, 0.16576239070365648] ***
*** starting iteration: 3; err: [Inf, 0.27404874965391895, 0.18084629969826937, 0.16576239070365648] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27404874965391895, 0.18084629969826937, 0.16576239070365648, 0.15824378852231857] ***
*** starting iteration: 4; err: [Inf, 0.27404874965391895, 0.18084629969826937, 0.16576239070365648, 0.15824378852231857] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27404874965391895, 0.18084629969826937, 0.16576239070365648, 0.15824378852231857, 0.1543207016707798] ***
*** starting iteration: 5; err: [Inf, 0.27404874965391895, 0.18084629969826937, 0.16576239070365648, 0.15824378852231857, 0.1543207016707798] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27404874965391895, 0.18084629969826937, 0.16576239070365648, 0.15824378852231857, 0.1543207016707798, 0.15269374055368407] ***
*** starting iteration: 6; err: [Inf, 0.27404874965391895, 0.18084629969826937, 0.16576239070365648, 0.15824378852231857, 0.1543207016707798, 0.15269374055368407] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27404874965391895, 0.18084629969826937, 0.16576239070365648, 0.15824378852231857, 0.1543207016707798, 0.15269374055368407, 0.15226075679830112] ***
*** finished computation of 7 references, err: [Inf, 0.27404874965391895, 0.18084629969826937, 0.16576239070365648, 0.15824378852231857, 0.1543207016707798, 0.15269374055368407, 0.15226075679830112] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [41, 7, 0]]
** centroid: 1, normalized-entropy: 0.5993142373098089, [(1, 41), (2, 7)]
*** center 2: selecting labels [1] (freq >= 2) [from [88, 1, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [101, 58, 0]]
** centroid: 3, normalized-entropy: 0.9465794491502015, [(1, 101), (2, 58)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 94, 24]]
** centroid: 4, normalized-entropy: 0.7286561673702678, [(2, 94), (3, 24)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [8, 88, 0]]
** centroid: 5, normalized-entropy: 0.4138168503036336, [(1, 8), (2, 88)]
*** center 6: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [99, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19616868861953732] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19616868861953732, 0.1553850491984269] ***
*** starting iteration: 2; err: [Inf, 0.19616868861953732, 0.1553850491984269] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19616868861953732, 0.1553850491984269, 0.15152494184981874] ***
*** starting iteration: 3; err: [Inf, 0.19616868861953732, 0.1553850491984269, 0.15152494184981874] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19616868861953732, 0.1553850491984269, 0.15152494184981874, 0.1509149783317492] ***
*** finished computation of 7 references, err: [Inf, 0.19616868861953732, 0.1553850491984269, 0.15152494184981874, 0.1509149783317492] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [83, 40, 0]]
** centroid: 1, normalized-entropy: 0.9099503053612785, [(1, 83), (2, 40)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [79, 29, 0]]
** centroid: 2, normalized-entropy: 0.8393307617496655, [(1, 79), (2, 29)]
*** center 3: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 84, 10]]
** centroid: 4, normalized-entropy: 0.48890859144051524, [(2, 84), (3, 10)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [56, 24, 0]]
** centroid: 5, normalized-entropy: 0.8812908992306927, [(1, 56), (2, 24)]
*** center 6: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 71, 14]]
** centroid: 7, normalized-entropy: 0.6454495903301855, [(2, 71), (3, 14)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18547010150035728] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18547010150035728, 0.15140937895387008] ***
*** starting iteration: 2; err: [Inf, 0.18547010150035728, 0.15140937895387008] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18547010150035728, 0.15140937895387008, 0.1487020832825748] ***
*** starting iteration: 3; err: [Inf, 0.18547010150035728, 0.15140937895387008, 0.1487020832825748] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18547010150035728, 0.15140937895387008, 0.1487020832825748, 0.1484369249885966] ***
*** finished computation of 7 references, err: [Inf, 0.18547010150035728, 0.15140937895387008, 0.1487020832825748, 0.1484369249885966] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [114, 1, 0]]
** centroid: 1, normalized-entropy: 0.07201647168541395, [(1, 114), (2, 1)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [74, 15, 0]]
** centroid: 2, normalized-entropy: 0.6543524423071835, [(1, 74), (2, 15)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 75, 20]]
** centroid: 3, normalized-entropy: 0.7424875695421234, [(2, 75), (3, 20)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [47, 64, 0]]
** centroid: 4, normalized-entropy: 0.983013379603719, [(1, 47), (2, 64)]
*** center 5: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [12, 92, 0]]
** centroid: 6, normalized-entropy: 0.5159469300074472, [(1, 12), (2, 92)]
*** center 7: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19634805382208442] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19634805382208442, 0.15575772620502976] ***
*** starting iteration: 2; err: [Inf, 0.19634805382208442, 0.15575772620502976] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19634805382208442, 0.15575772620502976, 0.1488885589382392] ***
*** starting iteration: 3; err: [Inf, 0.19634805382208442, 0.15575772620502976, 0.1488885589382392] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19634805382208442, 0.15575772620502976, 0.1488885589382392, 0.14748973797761028] ***
*** finished computation of 7 references, err: [Inf, 0.19634805382208442, 0.15575772620502976, 0.1488885589382392, 0.14748973797761028] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [96, 4, 0]]
** centroid: 1, normalized-entropy: 0.24229218908241482, [(1, 96), (2, 4)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 59, 28]]
** centroid: 2, normalized-entropy: 0.9063701886077911, [(2, 59), (3, 28)]
*** center 3: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [92, 2, 0]]
** centroid: 4, normalized-entropy: 0.14854949043034832, [(1, 92), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [6, 85, 0]]
** centroid: 5, normalized-entropy: 0.35056382068186565, [(1, 6), (2, 85)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [4, 93, 0]]
** centroid: 6, normalized-entropy: 0.24793583772272637, [(1, 4), (2, 93)]
*** center 7: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23528460996762454] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23528460996762454, 0.18868556226863786] ***
*** starting iteration: 2; err: [Inf, 0.23528460996762454, 0.18868556226863786] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23528460996762454, 0.18868556226863786, 0.18471497261348563] ***
*** starting iteration: 3; err: [Inf, 0.23528460996762454, 0.18868556226863786, 0.18471497261348563] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23528460996762454, 0.18868556226863786, 0.18471497261348563, 0.1840180120593099] ***
*** finished computation of 7 references, err: [Inf, 0.23528460996762454, 0.18868556226863786, 0.18471497261348563, 0.1840180120593099] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [24, 79, 0]]
** centroid: 1, normalized-entropy: 0.7832211182191516, [(1, 24), (2, 79)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [63, 8, 0]]
** centroid: 2, normalized-entropy: 0.5079353563991225, [(1, 63), (2, 8)]
*** center 3: selecting labels [1] (freq >= 2) [from [109, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 69, 24]]
** centroid: 4, normalized-entropy: 0.8238116333123173, [(2, 69), (3, 24)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [87, 8, 0]]
** centroid: 5, normalized-entropy: 0.4168441963431652, [(1, 87), (2, 8)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [108, 2, 0]]
** centroid: 6, normalized-entropy: 0.13110652958234514, [(1, 108), (2, 2)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 82, 0]]
** centroid: 7, normalized-entropy: 0.22028326695127437, [(1, 3), (2, 82)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22897205421368758] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22897205421368758, 0.19000895725384445] ***
*** starting iteration: 2; err: [Inf, 0.22897205421368758, 0.19000895725384445] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22897205421368758, 0.19000895725384445, 0.18653685435362305] ***
*** starting iteration: 3; err: [Inf, 0.22897205421368758, 0.19000895725384445, 0.18653685435362305] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22897205421368758, 0.19000895725384445, 0.18653685435362305, 0.18574714816609647] ***
*** finished computation of 7 references, err: [Inf, 0.22897205421368758, 0.19000895725384445, 0.18653685435362305, 0.18574714816609647] ***
*** center 1: selecting labels [1] (freq >= 2) [from [107, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [66, 7, 0]]
** centroid: 2, normalized-entropy: 0.4558314584408233, [(1, 66), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 62, 20]]
** centroid: 3, normalized-entropy: 0.8014698931335286, [(2, 62), (3, 20)]
*** center 4: selecting labels [1] (freq >= 2) [from [113, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [103, 10, 0]]
** centroid: 5, normalized-entropy: 0.43142820800151405, [(1, 103), (2, 10)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [10, 85, 0]]
** centroid: 6, normalized-entropy: 0.48546076074591343, [(1, 10), (2, 85)]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 83, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2639072959435576] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2639072959435576, 0.19328061619011136] ***
*** starting iteration: 2; err: [Inf, 0.2639072959435576, 0.19328061619011136] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2639072959435576, 0.19328061619011136, 0.18814426836888606] ***
*** starting iteration: 3; err: [Inf, 0.2639072959435576, 0.19328061619011136, 0.18814426836888606] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2639072959435576, 0.19328061619011136, 0.18814426836888606, 0.18717398615540012] ***
*** finished computation of 7 references, err: [Inf, 0.2639072959435576, 0.19328061619011136, 0.18814426836888606, 0.18717398615540012] ***
*** center 1: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 87, 28]]
** centroid: 2, normalized-entropy: 0.8007768165404425, [(2, 87), (3, 28)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [66, 19, 0]]
** centroid: 3, normalized-entropy: 0.7665599404543365, [(1, 66), (2, 19)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [50, 54, 0]]
** centroid: 4, normalized-entropy: 0.9989326546260583, [(1, 50), (2, 54)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [23, 83, 0]]
** centroid: 5, normalized-entropy: 0.7546167018169155, [(1, 23), (2, 83)]
*** center 6: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3401319668796081] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3401319668796081, 0.23571681053665755] ***
*** starting iteration: 2; err: [Inf, 0.3401319668796081, 0.23571681053665755] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3401319668796081, 0.23571681053665755, 0.23323265334043103] ***
*** starting iteration: 3; err: [Inf, 0.3401319668796081, 0.23571681053665755, 0.23323265334043103] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3401319668796081, 0.23571681053665755, 0.23323265334043103, 0.23286738007975458] ***
*** finished computation of 3 references, err: [Inf, 0.3401319668796081, 0.23571681053665755, 0.23323265334043103, 0.23286738007975458] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [246, 31, 0]]
** centroid: 1, normalized-entropy: 0.5056603828887328, [(1, 246), (2, 31)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 168, 24]]
** centroid: 2, normalized-entropy: 0.5435644431995963, [(2, 168), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [148, 49, 0]]
** centroid: 3, normalized-entropy: 0.8092605480110476, [(1, 148), (2, 49)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3200704161513379] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3200704161513379, 0.24197461468696796] ***
*** starting iteration: 2; err: [Inf, 0.3200704161513379, 0.24197461468696796] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3200704161513379, 0.24197461468696796, 0.2395813750938095] ***
*** starting iteration: 3; err: [Inf, 0.3200704161513379, 0.24197461468696796, 0.2395813750938095] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3200704161513379, 0.24197461468696796, 0.2395813750938095, 0.23922471438061216] ***
*** finished computation of 3 references, err: [Inf, 0.3200704161513379, 0.24197461468696796, 0.2395813750938095, 0.23922471438061216] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [257, 22, 0]]
** centroid: 1, normalized-entropy: 0.3981248790232835, [(1, 257), (2, 22)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [143, 55, 0]]
** centroid: 2, normalized-entropy: 0.8524051786494784, [(1, 143), (2, 55)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 170, 20]]
** centroid: 3, normalized-entropy: 0.48546076074591343, [(2, 170), (3, 20)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3693458426861034] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3693458426861034, 0.23082389707385242] ***
*** starting iteration: 2; err: [Inf, 0.3693458426861034, 0.23082389707385242] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3693458426861034, 0.23082389707385242, 0.2299905955823588] ***
*** finished computation of 3 references, err: [Inf, 0.3693458426861034, 0.23082389707385242, 0.2299905955823588] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [247, 28, 0]]
** centroid: 1, normalized-entropy: 0.47473273925191906, [(1, 247), (2, 28)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [149, 58, 0]]
** centroid: 2, normalized-entropy: 0.8557139755367106, [(1, 149), (2, 58)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 157, 28]]
** centroid: 3, normalized-entropy: 0.6132117556860507, [(2, 157), (3, 28)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3128196880229757] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3128196880229757, 0.2450082079268287] ***
*** starting iteration: 2; err: [Inf, 0.3128196880229757, 0.2450082079268287] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3128196880229757, 0.2450082079268287, 0.2341900810518221] ***
*** starting iteration: 3; err: [Inf, 0.3128196880229757, 0.2450082079268287, 0.2341900810518221] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3128196880229757, 0.2450082079268287, 0.2341900810518221, 0.23244545789954305] ***
*** starting iteration: 4; err: [Inf, 0.3128196880229757, 0.2450082079268287, 0.2341900810518221, 0.23244545789954305] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3128196880229757, 0.2450082079268287, 0.2341900810518221, 0.23244545789954305, 0.23184645752836433] ***
*** finished computation of 3 references, err: [Inf, 0.3128196880229757, 0.2450082079268287, 0.2341900810518221, 0.23244545789954305, 0.23184645752836433] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [78, 162, 24]]
** centroid: 1, normalized-entropy: 0.7990913507480082, [(1, 78), (2, 162), (3, 24)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [128, 86, 0]]
** centroid: 2, normalized-entropy: 0.9720334868479672, [(1, 128), (2, 86)]
*** center 3: selecting labels [1] (freq >= 1) [from [188, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.35293945759350526] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35293945759350526, 0.23415637132606987] ***
*** starting iteration: 2; err: [Inf, 0.35293945759350526, 0.23415637132606987] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35293945759350526, 0.23415637132606987, 0.23255665514498078] ***
*** starting iteration: 3; err: [Inf, 0.35293945759350526, 0.23415637132606987, 0.23255665514498078] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35293945759350526, 0.23415637132606987, 0.23255665514498078, 0.23245193193439043] ***
*** finished computation of 3 references, err: [Inf, 0.35293945759350526, 0.23415637132606987, 0.23255665514498078, 0.23245193193439043] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [91, 150, 17]]
** centroid: 1, normalized-entropy: 0.7846947877180752, [(1, 91), (2, 150), (3, 17)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [130, 97, 3]]
** centroid: 2, normalized-entropy: 0.6764896377454706, [(1, 130), (2, 97), (3, 3)]
*** center 3: selecting labels [1] (freq >= 1) [from [179, 0, 0]]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.32044298120116677] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32044298120116677, 0.2347098155354877] ***
*** starting iteration: 2; err: [Inf, 0.32044298120116677, 0.2347098155354877] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32044298120116677, 0.2347098155354877, 0.23071796457650423] ***
*** starting iteration: 3; err: [Inf, 0.32044298120116677, 0.2347098155354877, 0.23071796457650423] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32044298120116677, 0.2347098155354877, 0.23071796457650423, 0.23021488591213188] ***
*** finished computation of 3 references, err: [Inf, 0.32044298120116677, 0.2347098155354877, 0.23071796457650423, 0.23021488591213188] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [251, 22, 0]]
** centroid: 1, normalized-entropy: 0.4042409224155875, [(1, 251), (2, 22)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [145, 63, 0]]
** centroid: 2, normalized-entropy: 0.8847885006763795, [(1, 145), (2, 63)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 158, 28]]
** centroid: 3, normalized-entropy: 0.6111841012714984, [(2, 158), (3, 28)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22431096302225315] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22431096302225315, 0.16627120569409773] ***
*** starting iteration: 2; err: [Inf, 0.22431096302225315, 0.16627120569409773] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22431096302225315, 0.16627120569409773, 0.15966390013678008] ***
*** starting iteration: 3; err: [Inf, 0.22431096302225315, 0.16627120569409773, 0.15966390013678008] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22431096302225315, 0.16627120569409773, 0.15966390013678008, 0.15513967609415572] ***
*** starting iteration: 4; err: [Inf, 0.22431096302225315, 0.16627120569409773, 0.15966390013678008, 0.15513967609415572] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22431096302225315, 0.16627120569409773, 0.15966390013678008, 0.15513967609415572, 0.15140622017447483] ***
*** starting iteration: 5; err: [Inf, 0.22431096302225315, 0.16627120569409773, 0.15966390013678008, 0.15513967609415572, 0.15140622017447483] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22431096302225315, 0.16627120569409773, 0.15966390013678008, 0.15513967609415572, 0.15140622017447483, 0.1491980151448893] ***
*** starting iteration: 6; err: [Inf, 0.22431096302225315, 0.16627120569409773, 0.15966390013678008, 0.15513967609415572, 0.15140622017447483, 0.1491980151448893] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22431096302225315, 0.16627120569409773, 0.15966390013678008, 0.15513967609415572, 0.15140622017447483, 0.1491980151448893, 0.14845196636480237] ***
*** finished computation of 7 references, err: [Inf, 0.22431096302225315, 0.16627120569409773, 0.15966390013678008, 0.15513967609415572, 0.15140622017447483, 0.1491980151448893, 0.14845196636480237] ***
*** center 1: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [88, 62, 0]]
** centroid: 2, normalized-entropy: 0.9782176659354249, [(1, 88), (2, 62)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 92, 20]]
** centroid: 3, normalized-entropy: 0.6769418697808861, [(2, 92), (3, 20)]
*** center 4: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [7, 78, 0]]
** centroid: 5, normalized-entropy: 0.4104161417181887, [(1, 7), (2, 78)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [89, 15, 0]]
** centroid: 6, normalized-entropy: 0.5952124653513116, [(1, 89), (2, 15)]
*** center 7: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2304788853308518] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2304788853308518, 0.18964027897545557] ***
*** starting iteration: 2; err: [Inf, 0.2304788853308518, 0.18964027897545557] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2304788853308518, 0.18964027897545557, 0.17163387907744349] ***
*** starting iteration: 3; err: [Inf, 0.2304788853308518, 0.18964027897545557, 0.17163387907744349] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2304788853308518, 0.18964027897545557, 0.17163387907744349, 0.1567204585201156] ***
*** starting iteration: 4; err: [Inf, 0.2304788853308518, 0.18964027897545557, 0.17163387907744349, 0.1567204585201156] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2304788853308518, 0.18964027897545557, 0.17163387907744349, 0.1567204585201156, 0.1487667574107401] ***
*** starting iteration: 5; err: [Inf, 0.2304788853308518, 0.18964027897545557, 0.17163387907744349, 0.1567204585201156, 0.1487667574107401] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2304788853308518, 0.18964027897545557, 0.17163387907744349, 0.1567204585201156, 0.1487667574107401, 0.14672009222561316] ***
*** starting iteration: 6; err: [Inf, 0.2304788853308518, 0.18964027897545557, 0.17163387907744349, 0.1567204585201156, 0.1487667574107401, 0.14672009222561316] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2304788853308518, 0.18964027897545557, 0.17163387907744349, 0.1567204585201156, 0.1487667574107401, 0.14672009222561316, 0.1460279006070445] ***
*** finished computation of 7 references, err: [Inf, 0.2304788853308518, 0.18964027897545557, 0.17163387907744349, 0.1567204585201156, 0.1487667574107401, 0.14672009222561316, 0.1460279006070445] ***
*** center 1: selecting labels [1] (freq >= 2) [from [106, 1, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [24, 74, 0]]
** centroid: 2, normalized-entropy: 0.8030909760146977, [(1, 24), (2, 74)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 86, 28]]
** centroid: 3, normalized-entropy: 0.8042522359016421, [(2, 86), (3, 28)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [55, 8, 0]]
** centroid: 4, normalized-entropy: 0.5491087450260074, [(1, 55), (2, 8)]
*** center 5: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [33, 74, 0]]
** centroid: 7, normalized-entropy: 0.891330958407023, [(1, 33), (2, 74)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.30819059323167075] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30819059323167075, 0.2069220400888014] ***
*** starting iteration: 2; err: [Inf, 0.30819059323167075, 0.2069220400888014] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30819059323167075, 0.2069220400888014, 0.19467472506955535] ***
*** starting iteration: 3; err: [Inf, 0.30819059323167075, 0.2069220400888014, 0.19467472506955535] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30819059323167075, 0.2069220400888014, 0.19467472506955535, 0.19220075880068246] ***
*** finished computation of 7 references, err: [Inf, 0.30819059323167075, 0.2069220400888014, 0.19467472506955535, 0.19220075880068246] ***
*** center 1: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 64, 22]]
** centroid: 2, normalized-entropy: 0.8203636429576731, [(2, 64), (3, 22)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 55, 2]]
** centroid: 3, normalized-entropy: 0.2192973081321754, [(2, 55), (3, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [37, 57, 0]]
** centroid: 4, normalized-entropy: 0.9670941140642181, [(1, 37), (2, 57)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [70, 37, 0]]
** centroid: 5, normalized-entropy: 0.9302559049579806, [(1, 70), (2, 37)]
*** center 6: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [106, 35, 0]]
** centroid: 7, normalized-entropy: 0.8084557936982762, [(1, 106), (2, 35)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.27695134904576296] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27695134904576296, 0.2203073944649317] ***
*** starting iteration: 2; err: [Inf, 0.27695134904576296, 0.2203073944649317] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27695134904576296, 0.2203073944649317, 0.20862739911509576] ***
*** starting iteration: 3; err: [Inf, 0.27695134904576296, 0.2203073944649317, 0.20862739911509576] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27695134904576296, 0.2203073944649317, 0.20862739911509576, 0.1979951105559471] ***
*** finished computation of 7 references, err: [Inf, 0.27695134904576296, 0.2203073944649317, 0.20862739911509576, 0.1979951105559471] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [72, 54, 0]]
** centroid: 1, normalized-entropy: 0.9852281360342514, [(1, 72), (2, 54)]
*** center 2: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [81, 41, 0]]
** centroid: 3, normalized-entropy: 0.9210038750793124, [(1, 81), (2, 41)]
*** center 4: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [39, 36, 0]]
** centroid: 5, normalized-entropy: 0.998845535995202, [(1, 39), (2, 36)]
*** center 6: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 116, 20]]
** centroid: 7, normalized-entropy: 0.6024308020404452, [(2, 116), (3, 20)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22040138126670689] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22040138126670689, 0.19035235453834073] ***
*** starting iteration: 2; err: [Inf, 0.22040138126670689, 0.19035235453834073] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22040138126670689, 0.19035235453834073, 0.18744509431534911] ***
*** starting iteration: 3; err: [Inf, 0.22040138126670689, 0.19035235453834073, 0.18744509431534911] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22040138126670689, 0.19035235453834073, 0.18744509431534911, 0.18653197779363465] ***
*** finished computation of 7 references, err: [Inf, 0.22040138126670689, 0.19035235453834073, 0.18744509431534911, 0.18653197779363465] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [3, 78, 0]]
** centroid: 1, normalized-entropy: 0.22853814395352806, [(1, 3), (2, 78)]
*** center 2: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [99, 29, 0]]
** centroid: 3, normalized-entropy: 0.7719706699485864, [(1, 99), (2, 29)]
*** center 4: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 99, 28]]
** centroid: 5, normalized-entropy: 0.7610292284611874, [(2, 99), (3, 28)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [43, 37, 0]]
** centroid: 6, normalized-entropy: 0.9959386076315955, [(1, 43), (2, 37)]
*** center 7: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.30657641664315183] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30657641664315183, 0.23199113647666042] ***
*** starting iteration: 2; err: [Inf, 0.30657641664315183, 0.23199113647666042] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30657641664315183, 0.23199113647666042, 0.20929909303543848] ***
*** starting iteration: 3; err: [Inf, 0.30657641664315183, 0.23199113647666042, 0.20929909303543848] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30657641664315183, 0.23199113647666042, 0.20929909303543848, 0.19317078564522994] ***
*** starting iteration: 4; err: [Inf, 0.30657641664315183, 0.23199113647666042, 0.20929909303543848, 0.19317078564522994] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30657641664315183, 0.23199113647666042, 0.20929909303543848, 0.19317078564522994, 0.18894329768893597] ***
*** starting iteration: 5; err: [Inf, 0.30657641664315183, 0.23199113647666042, 0.20929909303543848, 0.19317078564522994, 0.18894329768893597] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30657641664315183, 0.23199113647666042, 0.20929909303543848, 0.19317078564522994, 0.18894329768893597, 0.18764238048543422] ***
*** starting iteration: 6; err: [Inf, 0.30657641664315183, 0.23199113647666042, 0.20929909303543848, 0.19317078564522994, 0.18894329768893597, 0.18764238048543422] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30657641664315183, 0.23199113647666042, 0.20929909303543848, 0.19317078564522994, 0.18894329768893597, 0.18764238048543422, 0.18775461610286376] ***
*** finished computation of 7 references, err: [Inf, 0.30657641664315183, 0.23199113647666042, 0.20929909303543848, 0.19317078564522994, 0.18894329768893597, 0.18764238048543422, 0.18775461610286376] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [75, 10, 0]]
** centroid: 1, normalized-entropy: 0.5225593745369407, [(1, 75), (2, 10)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [88, 3, 0]]
** centroid: 2, normalized-entropy: 0.20905980566852464, [(1, 88), (2, 3)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [21, 78, 0]]
** centroid: 3, normalized-entropy: 0.7455178428108284, [(1, 21), (2, 78)]
*** center 4: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 77, 24]]
** centroid: 5, normalized-entropy: 0.7910662980902586, [(2, 77), (3, 24)]
*** center 6: selecting labels [1] (freq >= 2) [from [107, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 80, 0]]
** centroid: 7, normalized-entropy: 0.2243269603450881, [(1, 3), (2, 80)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2647671355479125] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2647671355479125, 0.20413856425027976] ***
*** starting iteration: 2; err: [Inf, 0.2647671355479125, 0.20413856425027976] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2647671355479125, 0.20413856425027976, 0.19616348610777615] ***
*** starting iteration: 3; err: [Inf, 0.2647671355479125, 0.20413856425027976, 0.19616348610777615] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2647671355479125, 0.20413856425027976, 0.19616348610777615, 0.19235528841603552] ***
*** starting iteration: 4; err: [Inf, 0.2647671355479125, 0.20413856425027976, 0.19616348610777615, 0.19235528841603552] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2647671355479125, 0.20413856425027976, 0.19616348610777615, 0.19235528841603552, 0.19140932173537986] ***
*** finished computation of 7 references, err: [Inf, 0.2647671355479125, 0.20413856425027976, 0.19616348610777615, 0.19235528841603552, 0.19140932173537986] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [9, 64, 0]]
** centroid: 1, normalized-entropy: 0.5387379148665815, [(1, 9), (2, 64)]
*** center 2: selecting labels [1] (freq >= 2) [from [117, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [117, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [102, 14, 0]]
** centroid: 4, normalized-entropy: 0.5313400141801669, [(1, 102), (2, 14)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 58, 17]]
** centroid: 5, normalized-entropy: 0.7721551435804817, [(2, 58), (3, 17)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 79, 3]]
** centroid: 6, normalized-entropy: 0.22641094842107634, [(2, 79), (3, 3)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [55, 32, 0]]
** centroid: 7, normalized-entropy: 0.9489804585630239, [(1, 55), (2, 32)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21880692827642367] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21880692827642367, 0.18946369995071233] ***
*** starting iteration: 2; err: [Inf, 0.21880692827642367, 0.18946369995071233] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21880692827642367, 0.18946369995071233, 0.186378069845415] ***
*** starting iteration: 3; err: [Inf, 0.21880692827642367, 0.18946369995071233, 0.186378069845415] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21880692827642367, 0.18946369995071233, 0.186378069845415, 0.18545411987931118] ***
*** finished computation of 7 references, err: [Inf, 0.21880692827642367, 0.18946369995071233, 0.186378069845415, 0.18545411987931118] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 76, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 91, 28]]
** centroid: 2, normalized-entropy: 0.787126586201269, [(2, 91), (3, 28)]
*** center 3: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [36, 48, 0]]
** centroid: 4, normalized-entropy: 0.9852281360342514, [(1, 36), (2, 48)]
*** center 5: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [89, 28, 0]]
** centroid: 7, normalized-entropy: 0.7939013591250944, [(1, 89), (2, 28)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.440175227004218] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.440175227004218, 0.3013685461603575] ***
*** starting iteration: 2; err: [Inf, 0.440175227004218, 0.3013685461603575] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.440175227004218, 0.3013685461603575, 0.29946867898721863] ***
*** starting iteration: 3; err: [Inf, 0.440175227004218, 0.3013685461603575, 0.29946867898721863] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.440175227004218, 0.3013685461603575, 0.29946867898721863, 0.299394256930362] ***
*** finished computation of 3 references, err: [Inf, 0.440175227004218, 0.3013685461603575, 0.29946867898721863, 0.299394256930362] ***
*** center 1: selecting labels [1] (freq >= 2) [from [199, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [102, 111, 0]]
** centroid: 2, normalized-entropy: 0.9987117514654895, [(1, 102), (2, 111)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [93, 137, 24]]
** centroid: 3, normalized-entropy: 0.8408620548976188, [(1, 93), (2, 137), (3, 24)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.39082353415227367] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39082353415227367, 0.3047620500905671] ***
*** starting iteration: 2; err: [Inf, 0.39082353415227367, 0.3047620500905671] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39082353415227367, 0.3047620500905671, 0.2989474632155926] ***
*** starting iteration: 3; err: [Inf, 0.39082353415227367, 0.3047620500905671, 0.2989474632155926] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39082353415227367, 0.3047620500905671, 0.2989474632155926, 0.2976040168172461] ***
*** starting iteration: 4; err: [Inf, 0.39082353415227367, 0.3047620500905671, 0.2989474632155926, 0.2976040168172461] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39082353415227367, 0.3047620500905671, 0.2989474632155926, 0.2976040168172461, 0.2971538431953633] ***
*** finished computation of 3 references, err: [Inf, 0.39082353415227367, 0.3047620500905671, 0.2989474632155926, 0.2976040168172461, 0.2971538431953633] ***
*** center 1: selecting labels [1] (freq >= 2) [from [228, 1, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [10, 187, 20]]
** centroid: 2, normalized-entropy: 0.4458071444001683, [(1, 10), (2, 187), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [162, 59, 0]]
** centroid: 3, normalized-entropy: 0.837080657221034, [(1, 162), (2, 59)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.5567126419127122] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5567126419127122, 0.32105379272950463] ***
*** starting iteration: 2; err: [Inf, 0.5567126419127122, 0.32105379272950463] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5567126419127122, 0.32105379272950463, 0.29647939832465] ***
*** starting iteration: 3; err: [Inf, 0.5567126419127122, 0.32105379272950463, 0.29647939832465] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5567126419127122, 0.32105379272950463, 0.29647939832465, 0.29319564628762484] ***
*** starting iteration: 4; err: [Inf, 0.5567126419127122, 0.32105379272950463, 0.29647939832465, 0.29319564628762484] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5567126419127122, 0.32105379272950463, 0.29647939832465, 0.29319564628762484, 0.2926280215142415] ***
*** finished computation of 3 references, err: [Inf, 0.5567126419127122, 0.32105379272950463, 0.29647939832465, 0.29319564628762484, 0.2926280215142415] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [144, 55, 0]]
** centroid: 1, normalized-entropy: 0.8504739449077229, [(1, 144), (2, 55)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 171, 28]]
** centroid: 2, normalized-entropy: 0.5860782996235411, [(2, 171), (3, 28)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [252, 17, 0]]
** centroid: 3, normalized-entropy: 0.34000731042564003, [(1, 252), (2, 17)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2030794368972918] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2030794368972918, 0.1609816397255788] ***
*** starting iteration: 2; err: [Inf, 0.2030794368972918, 0.1609816397255788] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2030794368972918, 0.1609816397255788, 0.1542643462167913] ***
*** starting iteration: 3; err: [Inf, 0.2030794368972918, 0.1609816397255788, 0.1542643462167913] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2030794368972918, 0.1609816397255788, 0.1542643462167913, 0.1506717338033759] ***
*** finished computation of 7 references, err: [Inf, 0.2030794368972918, 0.1609816397255788, 0.1542643462167913, 0.1506717338033759] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [27, 81, 0]]
** centroid: 1, normalized-entropy: 0.8112781244591328, [(1, 27), (2, 81)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [59, 10, 0]]
** centroid: 2, normalized-entropy: 0.5969995167604553, [(1, 59), (2, 10)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 114, 24]]
** centroid: 3, normalized-entropy: 0.6665783579949205, [(2, 114), (3, 24)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [98, 43, 0]]
** centroid: 4, normalized-entropy: 0.8872751171116969, [(1, 98), (2, 43)]
*** center 5: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19573629052605832] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19573629052605832, 0.15127668316815346] ***
*** starting iteration: 2; err: [Inf, 0.19573629052605832, 0.15127668316815346] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19573629052605832, 0.15127668316815346, 0.1481684546239082] ***
*** starting iteration: 3; err: [Inf, 0.19573629052605832, 0.15127668316815346, 0.1481684546239082] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19573629052605832, 0.15127668316815346, 0.1481684546239082, 0.14731478272773874] ***
*** finished computation of 7 references, err: [Inf, 0.19573629052605832, 0.15127668316815346, 0.1481684546239082, 0.14731478272773874] ***
*** center 1: selecting labels [1] (freq >= 2) [from [109, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 78, 20]]
** centroid: 2, normalized-entropy: 0.7300166301457938, [(2, 78), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [82, 56, 0]]
** centroid: 3, normalized-entropy: 0.9742408334889756, [(1, 82), (2, 56)]
*** center 4: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 98, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [61, 15, 0]]
** centroid: 7, normalized-entropy: 0.7166336117927455, [(1, 61), (2, 15)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3174237106651671] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3174237106651671, 0.20641291077560123] ***
*** starting iteration: 2; err: [Inf, 0.3174237106651671, 0.20641291077560123] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3174237106651671, 0.20641291077560123, 0.188134547946081] ***
*** starting iteration: 3; err: [Inf, 0.3174237106651671, 0.20641291077560123, 0.188134547946081] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3174237106651671, 0.20641291077560123, 0.188134547946081, 0.1703142373874292] ***
*** finished computation of 7 references, err: [Inf, 0.3174237106651671, 0.20641291077560123, 0.188134547946081, 0.1703142373874292] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [58, 17, 0]]
** centroid: 1, normalized-entropy: 0.7721551435804817, [(1, 58), (2, 17)]
*** center 2: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [13, 121, 10]]
** centroid: 3, normalized-entropy: 0.4993184695085967, [(1, 13), (2, 121), (3, 10)]
*** center 4: selecting labels [1, 2, 3] (freq >= 2) [from [23, 105, 18]]
** centroid: 4, normalized-entropy: 0.7157078330724548, [(1, 23), (2, 105), (3, 18)]
*** center 5: selecting labels [1] (freq >= 2) [from [109, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [41, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26476803542165134] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26476803542165134, 0.20712982954327352] ***
*** finished computation of 7 references, err: [Inf, 0.26476803542165134, 0.20712982954327352] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [130, 7, 0]]
** centroid: 1, normalized-entropy: 0.291029892098466, [(1, 130), (2, 7)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [116, 15, 0]]
** centroid: 2, normalized-entropy: 0.5133531208586248, [(1, 116), (2, 15)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [60, 20, 0]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(1, 60), (2, 20)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 64, 12]]
** centroid: 4, normalized-entropy: 0.6292492238560344, [(2, 64), (3, 12)]
*** center 5: selecting labels [1, 2, 3] (freq >= 1) [from [2, 42, 11]]
** centroid: 5, normalized-entropy: 0.5901338894164401, [(1, 2), (2, 42), (3, 11)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 100, 1]]
** centroid: 6, normalized-entropy: 0.08013604733127526, [(2, 100), (3, 1)]
*** center 7: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2969419463178788] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2969419463178788, 0.21697157726105096] ***
*** finished computation of 7 references, err: [Inf, 0.2969419463178788, 0.21697157726105096] ***
*** center 1: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [82, 118, 0]]
** centroid: 2, normalized-entropy: 0.9765004687578239, [(1, 82), (2, 118)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [72, 9, 0]]
** centroid: 3, normalized-entropy: 0.5032583347756457, [(1, 72), (2, 9)]
*** center 4: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [42, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 114, 20]]
** centroid: 6, normalized-entropy: 0.6079696120060726, [(2, 114), (3, 20)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [54, 6, 0]]
** centroid: 7, normalized-entropy: 0.46899559358928133, [(1, 54), (2, 6)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2580625253549401] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2580625253549401, 0.21527207579123026] ***
*** finished computation of 7 references, err: [Inf, 0.2580625253549401, 0.21527207579123026] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [2, 132, 28]]
** centroid: 1, normalized-entropy: 0.47744144290753554, [(1, 2), (2, 132), (3, 28)]
*** center 2: selecting labels [1] (freq >= 1) [from [29, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [35, 81, 0]]
** centroid: 3, normalized-entropy: 0.8833882724833615, [(1, 35), (2, 81)]
*** center 4: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [96, 25, 0]]
** centroid: 5, normalized-entropy: 0.7349557594762549, [(1, 96), (2, 25)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [128, 5, 0]]
** centroid: 6, normalized-entropy: 0.2311498003550482, [(1, 128), (2, 5)]
*** center 7: selecting labels [1] (freq >= 1) [from [29, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 12)
[0.9409978841116566, 0.9279908651166137, 0.9200068331804859, 0.9099908291525058, 0.9059748371125617, 0.9009668350985717, 0.8920207632782483, 0.88398278518039, 0.8729597861334389, 0.8490226753699807, 0.790991590392788, 0.7819436202669735]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.3, 1) => 0.9409978841116566
finished with 13
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.405691510355156] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.405691510355156, 0.30672685487207035] ***
*** starting iteration: 2; err: [Inf, 0.405691510355156, 0.30672685487207035] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.405691510355156, 0.30672685487207035, 0.29558889974921093] ***
*** starting iteration: 3; err: [Inf, 0.405691510355156, 0.30672685487207035, 0.29558889974921093] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.405691510355156, 0.30672685487207035, 0.29558889974921093, 0.29393225889541097] ***
*** starting iteration: 4; err: [Inf, 0.405691510355156, 0.30672685487207035, 0.29558889974921093, 0.29393225889541097] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.405691510355156, 0.30672685487207035, 0.29558889974921093, 0.29393225889541097, 0.29353510266220245] ***
*** finished computation of 3 references, err: [Inf, 0.405691510355156, 0.30672685487207035, 0.29558889974921093, 0.29393225889541097, 0.29353510266220245] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [239, 29, 0]]
** centroid: 1, normalized-entropy: 0.4944898771514348, [(1, 239), (2, 29)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [155, 52, 0]]
** centroid: 2, normalized-entropy: 0.813186724838245, [(1, 155), (2, 52)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 167, 24]]
** centroid: 3, normalized-entropy: 0.545398896829076, [(2, 167), (3, 24)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4466036499786502] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4466036499786502, 0.30772999425542946] ***
*** starting iteration: 2; err: [Inf, 0.4466036499786502, 0.30772999425542946] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4466036499786502, 0.30772999425542946, 0.30295573615341975] ***
*** starting iteration: 3; err: [Inf, 0.4466036499786502, 0.30772999425542946, 0.30295573615341975] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4466036499786502, 0.30772999425542946, 0.30295573615341975, 0.30012316241681664] ***
*** starting iteration: 4; err: [Inf, 0.4466036499786502, 0.30772999425542946, 0.30295573615341975, 0.30012316241681664] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4466036499786502, 0.30772999425542946, 0.30295573615341975, 0.30012316241681664, 0.2986383626608924] ***
*** starting iteration: 5; err: [Inf, 0.4466036499786502, 0.30772999425542946, 0.30295573615341975, 0.30012316241681664, 0.2986383626608924] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4466036499786502, 0.30772999425542946, 0.30295573615341975, 0.30012316241681664, 0.2986383626608924, 0.29808572948403445] ***
*** finished computation of 3 references, err: [Inf, 0.4466036499786502, 0.30772999425542946, 0.30295573615341975, 0.30012316241681664, 0.2986383626608924, 0.29808572948403445] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [235, 4, 0]]
** centroid: 1, normalized-entropy: 0.12270160947541414, [(1, 235), (2, 4)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [162, 50, 0]]
** centroid: 2, normalized-entropy: 0.7880689925063812, [(1, 162), (2, 50)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [3, 193, 20]]
** centroid: 3, normalized-entropy: 0.346187775855, [(1, 3), (2, 193), (3, 20)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4748101671668945] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4748101671668945, 0.2951899570283079] ***
*** starting iteration: 2; err: [Inf, 0.4748101671668945, 0.2951899570283079] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4748101671668945, 0.2951899570283079, 0.2919796110875067] ***
*** starting iteration: 3; err: [Inf, 0.4748101671668945, 0.2951899570283079, 0.2919796110875067] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4748101671668945, 0.2951899570283079, 0.2919796110875067, 0.29171686613935044] ***
*** finished computation of 3 references, err: [Inf, 0.4748101671668945, 0.2951899570283079, 0.2919796110875067, 0.29171686613935044] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [241, 27, 0]]
** centroid: 1, normalized-entropy: 0.47135675542107697, [(1, 241), (2, 27)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [155, 52, 0]]
** centroid: 2, normalized-entropy: 0.813186724838245, [(1, 155), (2, 52)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 164, 28]]
** centroid: 3, normalized-entropy: 0.5993142373098089, [(2, 164), (3, 28)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 13)
[0.9409978841116566, 0.9279908651166137, 0.9200068331804859, 0.9099908291525058, 0.9059748371125617, 0.9009668350985717, 0.8920207632782483, 0.88398278518039, 0.8729597861334389, 0.8570246893600187, 0.8490226753699807, 0.790991590392788, 0.7819436202669735]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.3, 1) => 0.9409978841116566
finished with 13
iteration 3 finished
generating 4 configurations using top 12 configurations, starting with 13)
[0.9409978841116566, 0.9279908651166137, 0.9200068331804859, 0.9099908291525058, 0.9059748371125617, 0.9009668350985717, 0.8920207632782483, 0.88398278518039, 0.8729597861334389, 0.8570246893600187, 0.8490226753699807, 0.790991590392788, 0.7819436202669735]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.3, 1) => 0.9409978841116566
finished with 14
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.2829982611090616] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2829982611090616, 0.2160070518845575] ***
*** starting iteration: 2; err: [Inf, 0.2829982611090616, 0.2160070518845575] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2829982611090616, 0.2160070518845575, 0.19954468013562104] ***
*** starting iteration: 3; err: [Inf, 0.2829982611090616, 0.2160070518845575, 0.19954468013562104] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2829982611090616, 0.2160070518845575, 0.19954468013562104, 0.19056525456022705] ***
*** finished computation of 7 references, err: [Inf, 0.2829982611090616, 0.2160070518845575, 0.19954468013562104, 0.19056525456022705] ***
*** center 1: selecting labels [1] (freq >= 2) [from [127, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [5, 102, 0]]
** centroid: 2, normalized-entropy: 0.2723359083120876, [(1, 5), (2, 102)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 65, 24]]
** centroid: 3, normalized-entropy: 0.8409805336163159, [(2, 65), (3, 24)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [101, 16, 0]]
** centroid: 4, normalized-entropy: 0.5756693370369834, [(1, 101), (2, 16)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [53, 56, 0]]
** centroid: 5, normalized-entropy: 0.9994535015927487, [(1, 53), (2, 56)]
*** center 6: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [46, 9, 0]]
** centroid: 7, normalized-entropy: 0.6429383500409613, [(1, 46), (2, 9)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26774373838421084] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26774373838421084, 0.22071930605742238] ***
*** starting iteration: 2; err: [Inf, 0.26774373838421084, 0.22071930605742238] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26774373838421084, 0.22071930605742238, 0.20595961659336867] ***
*** starting iteration: 3; err: [Inf, 0.26774373838421084, 0.22071930605742238, 0.20595961659336867] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26774373838421084, 0.22071930605742238, 0.20595961659336867, 0.20010065966016283] ***
*** finished computation of 7 references, err: [Inf, 0.26774373838421084, 0.22071930605742238, 0.20595961659336867, 0.20010065966016283] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [58, 18, 0]]
** centroid: 1, normalized-entropy: 0.7897492536625221, [(1, 58), (2, 18)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [70, 87, 0]]
** centroid: 2, normalized-entropy: 0.9915258742101811, [(1, 70), (2, 87)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [83, 25, 0]]
** centroid: 3, normalized-entropy: 0.7805849322915901, [(1, 83), (2, 25)]
*** center 4: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 117, 20]]
** centroid: 5, normalized-entropy: 0.5997019071283692, [(2, 117), (3, 20)]
*** center 6: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [44, 0, 0]]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.29327543007944346] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29327543007944346, 0.2142246397941009] ***
*** starting iteration: 2; err: [Inf, 0.29327543007944346, 0.2142246397941009] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29327543007944346, 0.2142246397941009, 0.19805200889251423] ***
*** starting iteration: 3; err: [Inf, 0.29327543007944346, 0.2142246397941009, 0.19805200889251423] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29327543007944346, 0.2142246397941009, 0.19805200889251423, 0.19450101883582088] ***
*** finished computation of 7 references, err: [Inf, 0.29327543007944346, 0.2142246397941009, 0.19805200889251423, 0.19450101883582088] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [103, 19, 0]]
** centroid: 1, normalized-entropy: 0.6240145748145288, [(1, 103), (2, 19)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [104, 7, 0]]
** centroid: 2, normalized-entropy: 0.33948600021427877, [(1, 104), (2, 7)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 115, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 81, 28]]
** centroid: 4, normalized-entropy: 0.8220027830221787, [(2, 81), (3, 28)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [73, 21, 0]]
** centroid: 5, normalized-entropy: 0.7663350359691776, [(1, 73), (2, 21)]
*** center 6: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 14)
[0.9409978841116566, 0.9279908651166137, 0.9200068331804859, 0.9099908291525058, 0.9059748371125617, 0.9009668350985717, 0.8969718221215227, 0.8920207632782483, 0.88398278518039, 0.8729597861334389, 0.8570246893600187, 0.8490226753699807, 0.790991590392788, 0.7819436202669735]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.3, 1) => 0.9409978841116566
finished with 15
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.4327019772998564] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4327019772998564, 0.2468726717511768] ***
*** starting iteration: 2; err: [Inf, 0.4327019772998564, 0.2468726717511768] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4327019772998564, 0.2468726717511768, 0.2153157844171823] ***
*** starting iteration: 3; err: [Inf, 0.4327019772998564, 0.2468726717511768, 0.2153157844171823] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4327019772998564, 0.2468726717511768, 0.2153157844171823, 0.20635363864488676] ***
*** starting iteration: 4; err: [Inf, 0.4327019772998564, 0.2468726717511768, 0.2153157844171823, 0.20635363864488676] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4327019772998564, 0.2468726717511768, 0.2153157844171823, 0.20635363864488676, 0.20071782730135215] ***
*** starting iteration: 5; err: [Inf, 0.4327019772998564, 0.2468726717511768, 0.2153157844171823, 0.20635363864488676, 0.20071782730135215] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4327019772998564, 0.2468726717511768, 0.2153157844171823, 0.20635363864488676, 0.20071782730135215, 0.1976353001645165] ***
*** starting iteration: 6; err: [Inf, 0.4327019772998564, 0.2468726717511768, 0.2153157844171823, 0.20635363864488676, 0.20071782730135215, 0.1976353001645165] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4327019772998564, 0.2468726717511768, 0.2153157844171823, 0.20635363864488676, 0.20071782730135215, 0.1976353001645165, 0.1957891817266183] ***
*** starting iteration: 7; err: [Inf, 0.4327019772998564, 0.2468726717511768, 0.2153157844171823, 0.20635363864488676, 0.20071782730135215, 0.1976353001645165, 0.1957891817266183] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4327019772998564, 0.2468726717511768, 0.2153157844171823, 0.20635363864488676, 0.20071782730135215, 0.1976353001645165, 0.1957891817266183, 0.1938170307447334] ***
*** starting iteration: 8; err: [Inf, 0.4327019772998564, 0.2468726717511768, 0.2153157844171823, 0.20635363864488676, 0.20071782730135215, 0.1976353001645165, 0.1957891817266183, 0.1938170307447334] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4327019772998564, 0.2468726717511768, 0.2153157844171823, 0.20635363864488676, 0.20071782730135215, 0.1976353001645165, 0.1957891817266183, 0.1938170307447334, 0.1926555243843758] ***
*** starting iteration: 9; err: [Inf, 0.4327019772998564, 0.2468726717511768, 0.2153157844171823, 0.20635363864488676, 0.20071782730135215, 0.1976353001645165, 0.1957891817266183, 0.1938170307447334, 0.1926555243843758] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4327019772998564, 0.2468726717511768, 0.2153157844171823, 0.20635363864488676, 0.20071782730135215, 0.1976353001645165, 0.1957891817266183, 0.1938170307447334, 0.1926555243843758, 0.1915551846198089] ***
*** starting iteration: 10; err: [Inf, 0.4327019772998564, 0.2468726717511768, 0.2153157844171823, 0.20635363864488676, 0.20071782730135215, 0.1976353001645165, 0.1957891817266183, 0.1938170307447334, 0.1926555243843758, 0.1915551846198089] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4327019772998564, 0.2468726717511768, 0.2153157844171823, 0.20635363864488676, 0.20071782730135215, 0.1976353001645165, 0.1957891817266183, 0.1938170307447334, 0.1926555243843758, 0.1915551846198089, 0.1909251712275216] ***
*** finished computation of 7 references, err: [Inf, 0.4327019772998564, 0.2468726717511768, 0.2153157844171823, 0.20635363864488676, 0.20071782730135215, 0.1976353001645165, 0.1957891817266183, 0.1938170307447334, 0.1926555243843758, 0.1915551846198089, 0.1909251712275216] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [86, 8, 0]]
** centroid: 1, normalized-entropy: 0.4199210973757179, [(1, 86), (2, 8)]
*** center 2: selecting labels [1] (freq >= 2) [from [90, 1, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [60, 56, 0]]
** centroid: 3, normalized-entropy: 0.999142103991909, [(1, 60), (2, 56)]
*** center 4: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 125, 24]]
** centroid: 5, normalized-entropy: 0.636872308381164, [(2, 125), (3, 24)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [45, 40, 0]]
** centroid: 6, normalized-entropy: 0.9975025463691153, [(1, 45), (2, 40)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [48, 18, 0]]
** centroid: 7, normalized-entropy: 0.8453509366224364, [(1, 48), (2, 18)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3215433084245386] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3215433084245386, 0.22799586040991313] ***
*** starting iteration: 2; err: [Inf, 0.3215433084245386, 0.22799586040991313] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3215433084245386, 0.22799586040991313, 0.20979368188481282] ***
*** starting iteration: 3; err: [Inf, 0.3215433084245386, 0.22799586040991313, 0.20979368188481282] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3215433084245386, 0.22799586040991313, 0.20979368188481282, 0.20004131369581768] ***
*** starting iteration: 4; err: [Inf, 0.3215433084245386, 0.22799586040991313, 0.20979368188481282, 0.20004131369581768] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3215433084245386, 0.22799586040991313, 0.20979368188481282, 0.20004131369581768, 0.19533431094078377] ***
*** starting iteration: 5; err: [Inf, 0.3215433084245386, 0.22799586040991313, 0.20979368188481282, 0.20004131369581768, 0.19533431094078377] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3215433084245386, 0.22799586040991313, 0.20979368188481282, 0.20004131369581768, 0.19533431094078377, 0.19296645647476146] ***
*** starting iteration: 6; err: [Inf, 0.3215433084245386, 0.22799586040991313, 0.20979368188481282, 0.20004131369581768, 0.19533431094078377, 0.19296645647476146] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3215433084245386, 0.22799586040991313, 0.20979368188481282, 0.20004131369581768, 0.19533431094078377, 0.19296645647476146, 0.19101780484468192] ***
*** starting iteration: 7; err: [Inf, 0.3215433084245386, 0.22799586040991313, 0.20979368188481282, 0.20004131369581768, 0.19533431094078377, 0.19296645647476146, 0.19101780484468192] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3215433084245386, 0.22799586040991313, 0.20979368188481282, 0.20004131369581768, 0.19533431094078377, 0.19296645647476146, 0.19101780484468192, 0.1899274428266155] ***
*** starting iteration: 8; err: [Inf, 0.3215433084245386, 0.22799586040991313, 0.20979368188481282, 0.20004131369581768, 0.19533431094078377, 0.19296645647476146, 0.19101780484468192, 0.1899274428266155] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3215433084245386, 0.22799586040991313, 0.20979368188481282, 0.20004131369581768, 0.19533431094078377, 0.19296645647476146, 0.19101780484468192, 0.1899274428266155, 0.18906927798041093] ***
*** finished computation of 7 references, err: [Inf, 0.3215433084245386, 0.22799586040991313, 0.20979368188481282, 0.20004131369581768, 0.19533431094078377, 0.19296645647476146, 0.19101780484468192, 0.1899274428266155, 0.18906927798041093] ***
*** center 1: selecting labels [1] (freq >= 2) [from [105, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [93, 25, 0]]
** centroid: 2, normalized-entropy: 0.7450314037905273, [(1, 93), (2, 25)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 79, 18]]
** centroid: 3, normalized-entropy: 0.6921053253628727, [(2, 79), (3, 18)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [1, 84, 2]]
** centroid: 4, normalized-entropy: 0.15935006268563429, [(2, 84), (3, 2)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [22, 50, 0]]
** centroid: 5, normalized-entropy: 0.887976319515135, [(1, 22), (2, 50)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [68, 9, 0]]
** centroid: 6, normalized-entropy: 0.5203346157857599, [(1, 68), (2, 9)]
*** center 7: selecting labels [1] (freq >= 2) [from [111, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2898762762208638] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2898762762208638, 0.2155995132545403] ***
*** starting iteration: 2; err: [Inf, 0.2898762762208638, 0.2155995132545403] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2898762762208638, 0.2155995132545403, 0.20211777999449795] ***
*** starting iteration: 3; err: [Inf, 0.2898762762208638, 0.2155995132545403, 0.20211777999449795] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2898762762208638, 0.2155995132545403, 0.20211777999449795, 0.19745173001441282] ***
*** starting iteration: 4; err: [Inf, 0.2898762762208638, 0.2155995132545403, 0.20211777999449795, 0.19745173001441282] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2898762762208638, 0.2155995132545403, 0.20211777999449795, 0.19745173001441282, 0.19570343449608474] ***
*** starting iteration: 5; err: [Inf, 0.2898762762208638, 0.2155995132545403, 0.20211777999449795, 0.19745173001441282, 0.19570343449608474] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2898762762208638, 0.2155995132545403, 0.20211777999449795, 0.19745173001441282, 0.19570343449608474, 0.19434153276455143] ***
*** starting iteration: 6; err: [Inf, 0.2898762762208638, 0.2155995132545403, 0.20211777999449795, 0.19745173001441282, 0.19570343449608474, 0.19434153276455143] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2898762762208638, 0.2155995132545403, 0.20211777999449795, 0.19745173001441282, 0.19570343449608474, 0.19434153276455143, 0.1926567095347207] ***
*** starting iteration: 7; err: [Inf, 0.2898762762208638, 0.2155995132545403, 0.20211777999449795, 0.19745173001441282, 0.19570343449608474, 0.19434153276455143, 0.1926567095347207] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2898762762208638, 0.2155995132545403, 0.20211777999449795, 0.19745173001441282, 0.19570343449608474, 0.19434153276455143, 0.1926567095347207, 0.19165620326470847] ***
*** starting iteration: 8; err: [Inf, 0.2898762762208638, 0.2155995132545403, 0.20211777999449795, 0.19745173001441282, 0.19570343449608474, 0.19434153276455143, 0.1926567095347207, 0.19165620326470847] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2898762762208638, 0.2155995132545403, 0.20211777999449795, 0.19745173001441282, 0.19570343449608474, 0.19434153276455143, 0.1926567095347207, 0.19165620326470847, 0.19129080435252752] ***
*** finished computation of 7 references, err: [Inf, 0.2898762762208638, 0.2155995132545403, 0.20211777999449795, 0.19745173001441282, 0.19570343449608474, 0.19434153276455143, 0.1926567095347207, 0.19165620326470847, 0.19129080435252752] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [70, 17, 0]]
** centroid: 1, normalized-entropy: 0.7126368350739763, [(1, 70), (2, 17)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [53, 40, 0]]
** centroid: 2, normalized-entropy: 0.9858587262978805, [(1, 53), (2, 40)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 116, 28]]
** centroid: 3, normalized-entropy: 0.710676853856123, [(2, 116), (3, 28)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [84, 19, 0]]
** centroid: 4, normalized-entropy: 0.6897501750585195, [(1, 84), (2, 19)]
*** center 5: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [38, 51, 0]]
** centroid: 6, normalized-entropy: 0.9845543528607513, [(1, 38), (2, 51)]
*** center 7: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 15)
[0.9409978841116566, 0.9279908651166137, 0.9200068331804859, 0.9099908291525058, 0.9059748371125617, 0.9019708331085576, 0.9009668350985717, 0.8969718221215227, 0.8920207632782483, 0.88398278518039, 0.8729597861334389, 0.8570246893600187, 0.8490226753699807, 0.790991590392788, 0.7819436202669735]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.3, 1) => 0.9409978841116566
finished with 16
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.2758373570297747] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2758373570297747, 0.20147293106465414] ***
*** finished computation of 7 references, err: [Inf, 0.2758373570297747, 0.20147293106465414] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [23, 161, 24]]
** centroid: 1, normalized-entropy: 0.6289059826577387, [(1, 23), (2, 161), (3, 24)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [54, 57, 0]]
** centroid: 2, normalized-entropy: 0.9994730201859837, [(1, 54), (2, 57)]
*** center 3: selecting labels [1] (freq >= 1) [from [161, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [11, 29, 0]]
** centroid: 4, normalized-entropy: 0.8485481782946159, [(1, 11), (2, 29)]
*** center 5: selecting labels [1] (freq >= 1) [from [30, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [115, 1, 0]]
** centroid: 7, normalized-entropy: 0.07150378944995868, [(1, 115), (2, 1)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24949528777418933] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24949528777418933, 0.17738913976576184] ***
*** finished computation of 7 references, err: [Inf, 0.24949528777418933, 0.17738913976576184] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [95, 2, 0]]
** centroid: 1, normalized-entropy: 0.14489961753310668, [(1, 95), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [128, 5, 0]]
** centroid: 2, normalized-entropy: 0.2311498003550482, [(1, 128), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 120, 14]]
** centroid: 3, normalized-entropy: 0.4830306801456181, [(2, 120), (3, 14)]
*** center 4: selecting labels [1, 2, 3] (freq >= 1) [from [39, 105, 6]]
** centroid: 4, normalized-entropy: 0.6632609608859827, [(1, 39), (2, 105), (3, 6)]
*** center 5: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [24, 15, 0]]
** centroid: 6, normalized-entropy: 0.961236604722876, [(1, 24), (2, 15)]
*** center 7: selecting labels [1] (freq >= 1) [from [28, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22708618239746772] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22708618239746772, 0.17257182933603074] ***
*** finished computation of 7 references, err: [Inf, 0.22708618239746772, 0.17257182933603074] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [111, 4, 0]]
** centroid: 1, normalized-entropy: 0.2178364755977513, [(1, 111), (2, 4)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 168, 28]]
** centroid: 2, normalized-entropy: 0.5916727785823274, [(2, 168), (3, 28)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [90, 12, 0]]
** centroid: 3, normalized-entropy: 0.5225593745369407, [(1, 90), (2, 12)]
*** center 4: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [39, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [38, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [53, 59, 0]]
** centroid: 7, normalized-entropy: 0.9979288148772633, [(1, 53), (2, 59)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 16)
[0.9409978841116566, 0.9279908651166137, 0.9200068331804859, 0.9159968351585118, 0.9099908291525058, 0.9059748371125617, 0.9019708331085576, 0.9009668350985717, 0.8969718221215227, 0.8920207632782483, 0.88398278518039, 0.8729597861334389, 0.8570246893600187, 0.8490226753699807, 0.790991590392788, 0.7819436202669735]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.3, 1) => 0.9409978841116566
finished with 18
iteration 7 finished
*** starting iteration: 1; err: [Inf, 0.23904009930951683] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23904009930951683, 0.19028754827256003] ***
*** starting iteration: 2; err: [Inf, 0.23904009930951683, 0.19028754827256003] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23904009930951683, 0.19028754827256003, 0.18758501152175147] ***
*** starting iteration: 3; err: [Inf, 0.23904009930951683, 0.19028754827256003, 0.18758501152175147] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23904009930951683, 0.19028754827256003, 0.18758501152175147, 0.18734274493312245] ***
*** finished computation of 7 references, err: [Inf, 0.23904009930951683, 0.19028754827256003, 0.18758501152175147, 0.18734274493312245] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [43, 60, 0]]
** centroid: 1, normalized-entropy: 0.98025955447738, [(1, 43), (2, 60)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [70, 18, 0]]
** centroid: 2, normalized-entropy: 0.7309263775906009, [(1, 70), (2, 18)]
*** center 3: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [31, 80, 0]]
** centroid: 4, normalized-entropy: 0.8544669184854021, [(1, 31), (2, 80)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 88, 24]]
** centroid: 5, normalized-entropy: 0.7495952572594798, [(2, 88), (3, 24)]
*** center 6: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [84, 2, 0]]
** centroid: 7, normalized-entropy: 0.15935006268563429, [(1, 84), (2, 2)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.23292417966829113] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23292417966829113, 0.1948689151711684] ***
*** starting iteration: 2; err: [Inf, 0.23292417966829113, 0.1948689151711684] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23292417966829113, 0.1948689151711684, 0.19148087463826163] ***
*** starting iteration: 3; err: [Inf, 0.23292417966829113, 0.1948689151711684, 0.19148087463826163] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23292417966829113, 0.1948689151711684, 0.19148087463826163, 0.19104042438150703] ***
*** finished computation of 7 references, err: [Inf, 0.23292417966829113, 0.1948689151711684, 0.19148087463826163, 0.19104042438150703] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [60, 66, 0]]
** centroid: 1, normalized-entropy: 0.998363672593813, [(1, 60), (2, 66)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [74, 7, 0]]
** centroid: 2, normalized-entropy: 0.42440514472480345, [(1, 74), (2, 7)]
*** center 3: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 78, 20]]
** centroid: 4, normalized-entropy: 0.7300166301457938, [(2, 78), (3, 20)]
*** center 5: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [83, 6, 0]]
** centroid: 6, normalized-entropy: 0.35620480393132253, [(1, 83), (2, 6)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [4, 90, 0]]
** centroid: 7, normalized-entropy: 0.2538784402981617, [(1, 4), (2, 90)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2228438203660087] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2228438203660087, 0.19225084459453798] ***
*** starting iteration: 2; err: [Inf, 0.2228438203660087, 0.19225084459453798] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2228438203660087, 0.19225084459453798, 0.18974904549298346] ***
*** starting iteration: 3; err: [Inf, 0.2228438203660087, 0.19225084459453798, 0.18974904549298346] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2228438203660087, 0.19225084459453798, 0.18974904549298346, 0.18987556418887097] ***
*** finished computation of 7 references, err: [Inf, 0.2228438203660087, 0.19225084459453798, 0.18974904549298346, 0.18987556418887097] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [69, 41, 0]]
** centroid: 1, normalized-entropy: 0.9527431707334316, [(1, 69), (2, 41)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [64, 27, 0]]
** centroid: 2, normalized-entropy: 0.8772236230732716, [(1, 64), (2, 27)]
*** center 3: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 59, 28]]
** centroid: 4, normalized-entropy: 0.9063701886077911, [(2, 59), (3, 28)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [79, 13, 0]]
** centroid: 5, normalized-entropy: 0.5876446142980418, [(1, 79), (2, 13)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 103, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18922605610511326] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18922605610511326, 0.152130653502772] ***
*** starting iteration: 2; err: [Inf, 0.18922605610511326, 0.152130653502772] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18922605610511326, 0.152130653502772, 0.14756844205049066] ***
*** starting iteration: 3; err: [Inf, 0.18922605610511326, 0.152130653502772, 0.14756844205049066] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18922605610511326, 0.152130653502772, 0.14756844205049066, 0.14694848814182118] ***
*** finished computation of 7 references, err: [Inf, 0.18922605610511326, 0.152130653502772, 0.14756844205049066, 0.14694848814182118] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [67, 49, 0]]
** centroid: 1, normalized-entropy: 0.9825606664869173, [(1, 67), (2, 49)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [73, 10, 0]]
** centroid: 2, normalized-entropy: 0.530744566923854, [(1, 73), (2, 10)]
*** center 3: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 88, 24]]
** centroid: 4, normalized-entropy: 0.7495952572594798, [(2, 88), (3, 24)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [3, 89, 0]]
** centroid: 5, normalized-entropy: 0.20731018585948177, [(1, 3), (2, 89)]
*** center 6: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [66, 12, 0]]
** centroid: 7, normalized-entropy: 0.6193821946787638, [(1, 66), (2, 12)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19833833477257387] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19833833477257387, 0.15315175233506548] ***
*** starting iteration: 2; err: [Inf, 0.19833833477257387, 0.15315175233506548] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19833833477257387, 0.15315175233506548, 0.14891264399561077] ***
*** starting iteration: 3; err: [Inf, 0.19833833477257387, 0.15315175233506548, 0.14891264399561077] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19833833477257387, 0.15315175233506548, 0.14891264399561077, 0.14822990247613935] ***
*** finished computation of 7 references, err: [Inf, 0.19833833477257387, 0.15315175233506548, 0.14891264399561077, 0.14822990247613935] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [67, 17, 0]]
** centroid: 1, normalized-entropy: 0.7266645172796352, [(1, 67), (2, 17)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [59, 7, 0]]
** centroid: 2, normalized-entropy: 0.48791799258948565, [(1, 59), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 91, 20]]
** centroid: 3, normalized-entropy: 0.680471054135434, [(2, 91), (3, 20)]
*** center 4: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [64, 41, 0]]
** centroid: 5, normalized-entropy: 0.9651061634819187, [(1, 64), (2, 41)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [8, 91, 0]]
** centroid: 6, normalized-entropy: 0.40502013262424225, [(1, 8), (2, 91)]
*** center 7: selecting labels [1] (freq >= 1) [from [107, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.21468560619913657] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21468560619913657, 0.15205061683679807] ***
*** starting iteration: 2; err: [Inf, 0.21468560619913657, 0.15205061683679807] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21468560619913657, 0.15205061683679807, 0.14730321598550614] ***
*** starting iteration: 3; err: [Inf, 0.21468560619913657, 0.15205061683679807, 0.14730321598550614] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21468560619913657, 0.15205061683679807, 0.14730321598550614, 0.1467620860492026] ***
*** finished computation of 7 references, err: [Inf, 0.21468560619913657, 0.15205061683679807, 0.14730321598550614, 0.1467620860492026] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 77, 28]]
** centroid: 1, normalized-entropy: 0.8366407419411671, [(2, 77), (3, 28)]
*** center 2: selecting labels [1] (freq >= 1) [from [103, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [101, 5, 0]]
** centroid: 3, normalized-entropy: 0.27425064105029284, [(1, 101), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [57, 51, 0]]
** centroid: 4, normalized-entropy: 0.9977724720899819, [(1, 57), (2, 51)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [51, 43, 0]]
** centroid: 5, normalized-entropy: 0.9947688847336321, [(1, 51), (2, 43)]
*** center 6: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 67, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 18)
[0.9409978841116566, 0.9280088471705238, 0.9279908651166137, 0.9200068331804859, 0.9159968351585118, 0.9099908291525058, 0.9059748371125617, 0.9020127912343482, 0.9019708331085576, 0.9009668350985717, 0.8969718221215227, 0.8920207632782483, 0.88398278518039, 0.8729597861334389, 0.8570246893600187, 0.8490226753699807, 0.790991590392788, 0.7819436202669735]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.3, 1) => 0.9409978841116566
finished with 20
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.21246941502600372] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21246941502600372, 0.14923097667572377] ***
*** finished computation of 7 references, err: [Inf, 0.21246941502600372, 0.14923097667572377] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [52, 74, 0]]
** centroid: 1, normalized-entropy: 0.9778956822310348, [(1, 52), (2, 74)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [98, 2, 0]]
** centroid: 2, normalized-entropy: 0.14144054254182067, [(1, 98), (2, 2)]
*** center 3: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 64, 24]]
** centroid: 4, normalized-entropy: 0.8453509366224364, [(2, 64), (3, 24)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [59, 12, 0]]
** centroid: 5, normalized-entropy: 0.6554444445609846, [(1, 59), (2, 12)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [6, 96, 0]]
** centroid: 6, normalized-entropy: 0.32275695889739825, [(1, 6), (2, 96)]
*** center 7: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19220112278677712] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19220112278677712, 0.15247987724304468] ***
*** finished computation of 7 references, err: [Inf, 0.19220112278677712, 0.15247987724304468] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 65, 20]]
** centroid: 1, normalized-entropy: 0.787126586201269, [(2, 65), (3, 20)]
*** center 2: selecting labels [1] (freq >= 2) [from [101, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [110, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [91, 18, 0]]
** centroid: 5, normalized-entropy: 0.6464599001526788, [(1, 91), (2, 18)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [5, 85, 0]]
** centroid: 6, normalized-entropy: 0.3095434291503252, [(1, 5), (2, 85)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [15, 79, 0]]
** centroid: 7, normalized-entropy: 0.6332905746550958, [(1, 15), (2, 79)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18254382919654183] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18254382919654183, 0.15253956316561176] ***
*** finished computation of 7 references, err: [Inf, 0.18254382919654183, 0.15253956316561176] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [82, 61, 0]]
** centroid: 1, normalized-entropy: 0.9843871271978376, [(1, 82), (2, 61)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [46, 8, 0]]
** centroid: 2, normalized-entropy: 0.6051865766334207, [(1, 46), (2, 8)]
*** center 3: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 70, 28]]
** centroid: 4, normalized-entropy: 0.8631205685666311, [(2, 70), (3, 28)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [17, 103, 0]]
** centroid: 5, normalized-entropy: 0.5885870739324579, [(1, 17), (2, 103)]
*** center 6: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [105, 1, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22736522902989084] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22736522902989084, 0.19465898066009577] ***
*** finished computation of 7 references, err: [Inf, 0.22736522902989084, 0.19465898066009577] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [47, 73, 0]]
** centroid: 1, normalized-entropy: 0.9658666887161, [(1, 47), (2, 73)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [72, 8, 0]]
** centroid: 2, normalized-entropy: 0.46899559358928133, [(1, 72), (2, 8)]
*** center 3: selecting labels [1] (freq >= 2) [from [46, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 75, 24]]
** centroid: 4, normalized-entropy: 0.7990485210442682, [(2, 75), (3, 24)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [28, 92, 0]]
** centroid: 5, normalized-entropy: 0.7837769474847011, [(1, 28), (2, 92)]
*** center 6: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2298212001600053] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2298212001600053, 0.1923093527918151] ***
*** finished computation of 7 references, err: [Inf, 0.2298212001600053, 0.1923093527918151] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 90, 3]]
** centroid: 1, normalized-entropy: 0.2055925081850832, [(2, 90), (3, 3)]
*** center 2: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [55, 43, 0]]
** centroid: 3, normalized-entropy: 0.9891571023188154, [(1, 55), (2, 43)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [112, 10, 0]]
** centroid: 4, normalized-entropy: 0.4090731390438265, [(1, 112), (2, 10)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [79, 27, 0]]
** centroid: 5, normalized-entropy: 0.8186691181065503, [(1, 79), (2, 27)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 77, 17]]
** centroid: 6, normalized-entropy: 0.6819353204567525, [(2, 77), (3, 17)]
*** center 7: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2571878133389144] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2571878133389144, 0.1953349154668747] ***
*** finished computation of 7 references, err: [Inf, 0.2571878133389144, 0.1953349154668747] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [95, 19, 0]]
** centroid: 1, normalized-entropy: 0.6500224216483541, [(1, 95), (2, 19)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 28, 28]]
** centroid: 2, normalized-entropy: 1.0, [(2, 28), (3, 28)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [108, 4, 0]]
** centroid: 3, normalized-entropy: 0.2222848306856879, [(1, 108), (2, 4)]
*** center 4: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [90, 7, 0]]
** centroid: 5, normalized-entropy: 0.37395136668121054, [(1, 90), (2, 7)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 88, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 97, 0]]
finished with 9 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 20)
[0.9409978841116566, 0.9299718880557203, 0.9280088471705238, 0.9279908651166137, 0.9200068331804859, 0.9159968351585118, 0.9099908291525058, 0.9059748371125617, 0.9020127912343482, 0.9019708331085576, 0.9009668350985717, 0.8980117842393293, 0.8969718221215227, 0.8920207632782483, 0.88398278518039, 0.8729597861334389, 0.8570246893600187, 0.8490226753699807, 0.790991590392788, 0.7819436202669735]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.3, 1) => 0.9409978841116566
finished with 20
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.19084710495639592] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19084710495639592, 0.15219018237665297] ***
*** starting iteration: 2; err: [Inf, 0.19084710495639592, 0.15219018237665297] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19084710495639592, 0.15219018237665297, 0.14742890995112248] ***
*** starting iteration: 3; err: [Inf, 0.19084710495639592, 0.15219018237665297, 0.14742890995112248] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19084710495639592, 0.15219018237665297, 0.14742890995112248, 0.14591643061721699] ***
*** finished computation of 7 references, err: [Inf, 0.19084710495639592, 0.15219018237665297, 0.14742890995112248, 0.14591643061721699] ***
*** center 1: selecting labels [1] (freq >= 1) [from [160, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 112, 36]]
** centroid: 2, normalized-entropy: 0.8003922080453356, [(2, 112), (3, 36)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [94, 17, 0]]
** centroid: 3, normalized-entropy: 0.6176751423955683, [(1, 94), (2, 17)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [18, 125, 0]]
** centroid: 4, normalized-entropy: 0.5460133954586516, [(1, 18), (2, 125)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [43, 115, 0]]
** centroid: 5, normalized-entropy: 0.8445355563366387, [(1, 43), (2, 115)]
*** center 6: selecting labels [1] (freq >= 1) [from [136, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [144, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2116128127835691] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2116128127835691, 0.15777704203128814] ***
*** starting iteration: 2; err: [Inf, 0.2116128127835691, 0.15777704203128814] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2116128127835691, 0.15777704203128814, 0.15029491384141147] ***
*** starting iteration: 3; err: [Inf, 0.2116128127835691, 0.15777704203128814, 0.15029491384141147] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2116128127835691, 0.15777704203128814, 0.15029491384141147, 0.14914923038892447] ***
*** finished computation of 7 references, err: [Inf, 0.2116128127835691, 0.15777704203128814, 0.15029491384141147, 0.14914923038892447] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [34, 43, 0]]
** centroid: 1, normalized-entropy: 0.9901226308935799, [(1, 34), (2, 43)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [47, 2, 0]]
** centroid: 2, normalized-entropy: 0.2460225782203316, [(1, 47), (2, 2)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 53, 23]]
** centroid: 3, normalized-entropy: 0.8844839729019952, [(2, 53), (3, 23)]
*** center 4: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [40, 35, 0]]
** centroid: 5, normalized-entropy: 0.9967916319816367, [(1, 40), (2, 35)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [4, 50, 0]]
** centroid: 6, normalized-entropy: 0.38094658570539014, [(1, 4), (2, 50)]
*** center 7: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1877557576112449] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1877557576112449, 0.14735936143808068] ***
*** starting iteration: 2; err: [Inf, 0.1877557576112449, 0.14735936143808068] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1877557576112449, 0.14735936143808068, 0.145565151615534] ***
*** starting iteration: 3; err: [Inf, 0.1877557576112449, 0.14735936143808068, 0.145565151615534] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1877557576112449, 0.14735936143808068, 0.145565151615534, 0.14542865123506635] ***
*** finished computation of 7 references, err: [Inf, 0.1877557576112449, 0.14735936143808068, 0.145565151615534, 0.14542865123506635] ***
*** center 1: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 62, 19]]
** centroid: 2, normalized-entropy: 0.785889583138768, [(2, 62), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [53, 21, 0]]
** centroid: 3, normalized-entropy: 0.8605553930586318, [(1, 53), (2, 21)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [42, 20, 0]]
** centroid: 4, normalized-entropy: 0.9071657675730821, [(1, 42), (2, 20)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [8, 64, 0]]
** centroid: 5, normalized-entropy: 0.5032583347756457, [(1, 8), (2, 64)]
*** center 6: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [82, 7, 0]]
** centroid: 7, normalized-entropy: 0.3974104103699249, [(1, 82), (2, 7)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1870991030521691] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1870991030521691, 0.1500793711738661] ***
*** starting iteration: 2; err: [Inf, 0.1870991030521691, 0.1500793711738661] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1870991030521691, 0.1500793711738661, 0.14469992430415005] ***
*** starting iteration: 3; err: [Inf, 0.1870991030521691, 0.1500793711738661, 0.14469992430415005] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1870991030521691, 0.1500793711738661, 0.14469992430415005, 0.14389220085553825] ***
*** finished computation of 7 references, err: [Inf, 0.1870991030521691, 0.1500793711738661, 0.14469992430415005, 0.14389220085553825] ***
*** center 1: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [70, 3, 0]]
** centroid: 2, normalized-entropy: 0.24729443986205674, [(1, 70), (2, 3)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 62, 16]]
** centroid: 3, normalized-entropy: 0.7320666900931937, [(2, 62), (3, 16)]
*** center 4: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [21, 51, 0]]
** centroid: 5, normalized-entropy: 0.8708644692353648, [(1, 21), (2, 51)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [7, 63, 0]]
** centroid: 6, normalized-entropy: 0.46899559358928133, [(1, 7), (2, 63)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [41, 5, 0]]
** centroid: 7, normalized-entropy: 0.49596907206183377, [(1, 41), (2, 5)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18104866050742566] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18104866050742566, 0.1544646039409563] ***
*** starting iteration: 2; err: [Inf, 0.18104866050742566, 0.1544646039409563] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18104866050742566, 0.1544646039409563, 0.15062560321576893] ***
*** starting iteration: 3; err: [Inf, 0.18104866050742566, 0.1544646039409563, 0.15062560321576893] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18104866050742566, 0.1544646039409563, 0.15062560321576893, 0.14894101985590533] ***
*** finished computation of 7 references, err: [Inf, 0.18104866050742566, 0.1544646039409563, 0.15062560321576893, 0.14894101985590533] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [16, 60, 0]]
** centroid: 1, normalized-entropy: 0.7424875695421234, [(1, 16), (2, 60)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [62, 7, 0]]
** centroid: 2, normalized-entropy: 0.47357292491745173, [(1, 62), (2, 7)]
*** center 3: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 38, 23]]
** centroid: 4, normalized-entropy: 0.9559312637896479, [(2, 38), (3, 23)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [78, 2, 0]]
** centroid: 5, normalized-entropy: 0.1686609314966701, [(1, 78), (2, 2)]
*** center 6: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 75, 0]]
** centroid: 7, normalized-entropy: 0.10106696361212422, [(1, 1), (2, 75)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18914965767040848] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18914965767040848, 0.1530892069833353] ***
*** starting iteration: 2; err: [Inf, 0.18914965767040848, 0.1530892069833353] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18914965767040848, 0.1530892069833353, 0.14831616866402328] ***
*** starting iteration: 3; err: [Inf, 0.18914965767040848, 0.1530892069833353, 0.14831616866402328] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18914965767040848, 0.1530892069833353, 0.14831616866402328, 0.148055955439806] ***
*** finished computation of 7 references, err: [Inf, 0.18914965767040848, 0.1530892069833353, 0.14831616866402328, 0.148055955439806] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [83, 3, 0]]
** centroid: 1, normalized-entropy: 0.21832103023746746, [(1, 83), (2, 3)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 61, 18]]
** centroid: 2, normalized-entropy: 0.7742411580847273, [(2, 61), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [50, 9, 0]]
** centroid: 3, normalized-entropy: 0.6161661934005354, [(1, 50), (2, 9)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [45, 44, 0]]
** centroid: 4, normalized-entropy: 0.9999089303498087, [(1, 45), (2, 44)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [7, 71, 0]]
** centroid: 5, normalized-entropy: 0.4356133734874324, [(1, 7), (2, 71)]
*** center 6: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [49, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18861477217823266] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18861477217823266, 0.148024637340568] ***
*** starting iteration: 2; err: [Inf, 0.18861477217823266, 0.148024637340568] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18861477217823266, 0.148024637340568, 0.14448444716259837] ***
*** starting iteration: 3; err: [Inf, 0.18861477217823266, 0.148024637340568, 0.14448444716259837] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18861477217823266, 0.148024637340568, 0.14448444716259837, 0.1442092865090817] ***
*** finished computation of 7 references, err: [Inf, 0.18861477217823266, 0.148024637340568, 0.14448444716259837, 0.1442092865090817] ***
*** center 1: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 51, 22]]
** centroid: 2, normalized-entropy: 0.8829589691462253, [(2, 51), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [47, 19, 0]]
** centroid: 3, normalized-entropy: 0.8659653498997099, [(1, 47), (2, 19)]
*** center 4: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [30, 47, 0]]
** centroid: 5, normalized-entropy: 0.9645476589143235, [(1, 30), (2, 47)]
*** center 6: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [2, 67, 0]]
** centroid: 7, normalized-entropy: 0.18927843126120178, [(1, 2), (2, 67)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18789281996898352] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18789281996898352, 0.14795883808471263] ***
*** starting iteration: 2; err: [Inf, 0.18789281996898352, 0.14795883808471263] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18789281996898352, 0.14795883808471263, 0.14564810376800597] ***
*** starting iteration: 3; err: [Inf, 0.18789281996898352, 0.14795883808471263, 0.14564810376800597] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18789281996898352, 0.14795883808471263, 0.14564810376800597, 0.14525004083942622] ***
*** finished computation of 7 references, err: [Inf, 0.18789281996898352, 0.14795883808471263, 0.14564810376800597, 0.14525004083942622] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [40, 45, 0]]
** centroid: 1, normalized-entropy: 0.9975025463691153, [(1, 40), (2, 45)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [56, 15, 0]]
** centroid: 2, normalized-entropy: 0.743898745288434, [(1, 56), (2, 15)]
*** center 3: selecting labels [1] (freq >= 1) [from [51, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 81, 13]]
** centroid: 4, normalized-entropy: 0.57976367540648, [(2, 81), (3, 13)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [27, 44, 0]]
** centroid: 5, normalized-entropy: 0.9582407282588409, [(1, 27), (2, 44)]
*** center 6: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20364939921768382] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20364939921768382, 0.14709519081283362] ***
*** starting iteration: 2; err: [Inf, 0.20364939921768382, 0.14709519081283362] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20364939921768382, 0.14709519081283362, 0.14361496441625057] ***
*** starting iteration: 3; err: [Inf, 0.20364939921768382, 0.14709519081283362, 0.14361496441625057] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20364939921768382, 0.14709519081283362, 0.14361496441625057, 0.1435063811354339] ***
*** finished computation of 7 references, err: [Inf, 0.20364939921768382, 0.14709519081283362, 0.14361496441625057, 0.1435063811354339] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [15, 63, 0]]
** centroid: 1, normalized-entropy: 0.7062740891876008, [(1, 15), (2, 63)]
*** center 2: selecting labels [1] (freq >= 1) [from [46, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [57, 21, 0]]
** centroid: 3, normalized-entropy: 0.8403586716091169, [(1, 57), (2, 21)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [38, 36, 0]]
** centroid: 4, normalized-entropy: 0.9994730201859837, [(1, 38), (2, 36)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 59, 20]]
** centroid: 5, normalized-entropy: 0.8162554088088008, [(2, 59), (3, 20)]
*** center 6: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19370007719658316] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19370007719658316, 0.15071745122224092] ***
*** starting iteration: 2; err: [Inf, 0.19370007719658316, 0.15071745122224092] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19370007719658316, 0.15071745122224092, 0.1472121390886605] ***
*** starting iteration: 3; err: [Inf, 0.19370007719658316, 0.15071745122224092, 0.1472121390886605] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19370007719658316, 0.15071745122224092, 0.1472121390886605, 0.14599901200830936] ***
*** finished computation of 7 references, err: [Inf, 0.19370007719658316, 0.15071745122224092, 0.1472121390886605, 0.14599901200830936] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [51, 24, 0]]
** centroid: 1, normalized-entropy: 0.9043814577244941, [(1, 51), (2, 24)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [64, 21, 0]]
** centroid: 2, normalized-entropy: 0.806583102274714, [(1, 64), (2, 21)]
*** center 3: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 70, 7]]
** centroid: 4, normalized-entropy: 0.43949698692151346, [(2, 70), (3, 7)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [57, 14, 0]]
** centroid: 5, normalized-entropy: 0.7162583911075451, [(1, 57), (2, 14)]
*** center 6: selecting labels [1] (freq >= 1) [from [52, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 65, 7]]
** centroid: 7, normalized-entropy: 0.460127886147135, [(2, 65), (3, 7)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19866134349815548] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19866134349815548, 0.14955279372259975] ***
*** starting iteration: 2; err: [Inf, 0.19866134349815548, 0.14955279372259975] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19866134349815548, 0.14955279372259975, 0.14600468733906746] ***
*** starting iteration: 3; err: [Inf, 0.19866134349815548, 0.14955279372259975, 0.14600468733906746] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19866134349815548, 0.14955279372259975, 0.14600468733906746, 0.14551918730139732] ***
*** finished computation of 7 references, err: [Inf, 0.19866134349815548, 0.14955279372259975, 0.14600468733906746, 0.14551918730139732] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [11, 63, 0]]
** centroid: 1, normalized-entropy: 0.6064481901491525, [(1, 11), (2, 63)]
*** center 2: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [49, 21, 0]]
** centroid: 3, normalized-entropy: 0.8812908992306927, [(1, 49), (2, 21)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [46, 27, 0]]
** centroid: 4, normalized-entropy: 0.9505668528932193, [(1, 46), (2, 27)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 67, 21]]
** centroid: 5, normalized-entropy: 0.7927652363756529, [(2, 67), (3, 21)]
*** center 6: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [71, 2, 0]]
** centroid: 7, normalized-entropy: 0.18116640155354563, [(1, 71), (2, 2)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20015293391793967] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20015293391793967, 0.1559090174594894] ***
*** starting iteration: 2; err: [Inf, 0.20015293391793967, 0.1559090174594894] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20015293391793967, 0.1559090174594894, 0.15075769399292768] ***
*** starting iteration: 3; err: [Inf, 0.20015293391793967, 0.1559090174594894, 0.15075769399292768] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20015293391793967, 0.1559090174594894, 0.15075769399292768, 0.15019119042903184] ***
*** finished computation of 7 references, err: [Inf, 0.20015293391793967, 0.1559090174594894, 0.15075769399292768, 0.15019119042903184] ***
*** center 1: selecting labels [1] (freq >= 1) [from [96, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 52, 12]]
** centroid: 3, normalized-entropy: 0.6962122601251459, [(2, 52), (3, 12)]
*** center 4: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [38, 30, 0]]
** centroid: 5, normalized-entropy: 0.9899927915575186, [(1, 38), (2, 30)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [6, 69, 0]]
** centroid: 6, normalized-entropy: 0.4021791902022729, [(1, 6), (2, 69)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [4, 41, 0]]
** centroid: 7, normalized-entropy: 0.43275015878875417, [(1, 4), (2, 41)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1832806560881436] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1832806560881436, 0.1515174531582743] ***
*** starting iteration: 2; err: [Inf, 0.1832806560881436, 0.1515174531582743] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1832806560881436, 0.1515174531582743, 0.14618034354411066] ***
*** starting iteration: 3; err: [Inf, 0.1832806560881436, 0.1515174531582743, 0.14618034354411066] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1832806560881436, 0.1515174531582743, 0.14618034354411066, 0.14422137241065502] ***
*** finished computation of 7 references, err: [Inf, 0.1832806560881436, 0.1515174531582743, 0.14618034354411066, 0.14422137241065502] ***
*** center 1: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [47, 6, 0]]
** centroid: 2, normalized-entropy: 0.5095157180881823, [(1, 47), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 51, 19]]
** centroid: 3, normalized-entropy: 0.8435070855739035, [(2, 51), (3, 19)]
*** center 4: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [23, 55, 0]]
** centroid: 5, normalized-entropy: 0.8749315876677922, [(1, 23), (2, 55)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 62, 0]]
** centroid: 6, normalized-entropy: 0.2006223243127146, [(1, 2), (2, 62)]
*** center 7: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18893705498240887] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18893705498240887, 0.15378838348947466] ***
*** starting iteration: 2; err: [Inf, 0.18893705498240887, 0.15378838348947466] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18893705498240887, 0.15378838348947466, 0.15035960621759295] ***
*** starting iteration: 3; err: [Inf, 0.18893705498240887, 0.15378838348947466, 0.15035960621759295] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18893705498240887, 0.15378838348947466, 0.15035960621759295, 0.1486608158564195] ***
*** finished computation of 7 references, err: [Inf, 0.18893705498240887, 0.15378838348947466, 0.15035960621759295, 0.1486608158564195] ***
*** center 1: selecting labels [1] (freq >= 1) [from [96, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [46, 25, 0]]
** centroid: 2, normalized-entropy: 0.935940714955517, [(1, 46), (2, 25)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 49, 17]]
** centroid: 3, normalized-entropy: 0.8230660790114689, [(2, 49), (3, 17)]
*** center 4: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [18, 45, 0]]
** centroid: 5, normalized-entropy: 0.8631205685666311, [(1, 18), (2, 45)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [7, 57, 0]]
** centroid: 6, normalized-entropy: 0.49802788653447644, [(1, 7), (2, 57)]
*** center 7: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1873034000582993] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1873034000582993, 0.15624537268280983] ***
*** starting iteration: 2; err: [Inf, 0.1873034000582993, 0.15624537268280983] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1873034000582993, 0.15624537268280983, 0.1509520133715123] ***
*** starting iteration: 3; err: [Inf, 0.1873034000582993, 0.15624537268280983, 0.1509520133715123] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1873034000582993, 0.15624537268280983, 0.1509520133715123, 0.149032604242675] ***
*** finished computation of 7 references, err: [Inf, 0.1873034000582993, 0.15624537268280983, 0.1509520133715123, 0.149032604242675] ***
*** center 1: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 61, 20]]
** centroid: 2, normalized-entropy: 0.8063495153650776, [(2, 61), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [46, 7, 0]]
** centroid: 3, normalized-entropy: 0.5631028237513912, [(1, 46), (2, 7)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [68, 4, 0]]
** centroid: 4, normalized-entropy: 0.3095434291503252, [(1, 68), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [20, 58, 0]]
** centroid: 5, normalized-entropy: 0.8212809417449864, [(1, 20), (2, 58)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [21, 51, 0]]
** centroid: 6, normalized-entropy: 0.8708644692353648, [(1, 21), (2, 51)]
*** center 7: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19807437195815145] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19807437195815145, 0.15148721212660893] ***
*** starting iteration: 2; err: [Inf, 0.19807437195815145, 0.15148721212660893] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19807437195815145, 0.15148721212660893, 0.14609212473897787] ***
*** starting iteration: 3; err: [Inf, 0.19807437195815145, 0.15148721212660893, 0.14609212473897787] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19807437195815145, 0.15148721212660893, 0.14609212473897787, 0.1452388909664005] ***
*** finished computation of 7 references, err: [Inf, 0.19807437195815145, 0.15148721212660893, 0.14609212473897787, 0.1452388909664005] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [56, 5, 0]]
** centroid: 1, normalized-entropy: 0.4090731390438265, [(1, 56), (2, 5)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [44, 7, 0]]
** centroid: 2, normalized-entropy: 0.577004250315725, [(1, 44), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 52, 22]]
** centroid: 3, normalized-entropy: 0.8779620013943914, [(2, 52), (3, 22)]
*** center 4: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [43, 49, 0]]
** centroid: 5, normalized-entropy: 0.996929708080541, [(1, 43), (2, 49)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 72, 0]]
** centroid: 6, normalized-entropy: 0.1792560669283214, [(1, 2), (2, 72)]
*** center 7: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19773627102933825] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19773627102933825, 0.1559670916683972] ***
*** starting iteration: 2; err: [Inf, 0.19773627102933825, 0.1559670916683972] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19773627102933825, 0.1559670916683972, 0.15214871064946056] ***
*** starting iteration: 3; err: [Inf, 0.19773627102933825, 0.1559670916683972, 0.15214871064946056] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19773627102933825, 0.1559670916683972, 0.15214871064946056, 0.15144409080035984] ***
*** finished computation of 7 references, err: [Inf, 0.19773627102933825, 0.1559670916683972, 0.15214871064946056, 0.15144409080035984] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [82, 2, 0]]
** centroid: 1, normalized-entropy: 0.1623261801753929, [(1, 82), (2, 2)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 70, 16]]
** centroid: 2, normalized-entropy: 0.6931274153282881, [(2, 70), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [53, 9, 0]]
** centroid: 3, normalized-entropy: 0.5975977764379984, [(1, 53), (2, 9)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [50, 42, 0]]
** centroid: 4, normalized-entropy: 0.9945386816500111, [(1, 50), (2, 42)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [11, 73, 0]]
** centroid: 5, normalized-entropy: 0.5600443203590992, [(1, 11), (2, 73)]
*** center 6: selecting labels [1] (freq >= 1) [from [46, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [46, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1855319371521473] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1855319371521473, 0.15757097099605016] ***
*** starting iteration: 2; err: [Inf, 0.1855319371521473, 0.15757097099605016] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1855319371521473, 0.15757097099605016, 0.15389575247466564] ***
*** starting iteration: 3; err: [Inf, 0.1855319371521473, 0.15757097099605016, 0.15389575247466564] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1855319371521473, 0.15757097099605016, 0.15389575247466564, 0.15218556369375438] ***
*** finished computation of 7 references, err: [Inf, 0.1855319371521473, 0.15757097099605016, 0.15389575247466564, 0.15218556369375438] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 60, 19]]
** centroid: 1, normalized-entropy: 0.7958812735955936, [(2, 60), (3, 19)]
*** center 2: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [45, 11, 0]]
** centroid: 3, normalized-entropy: 0.7147274731317893, [(1, 45), (2, 11)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [57, 10, 0]]
** centroid: 4, normalized-entropy: 0.6079696120060726, [(1, 57), (2, 10)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [83, 14, 0]]
** centroid: 5, normalized-entropy: 0.5954670513561874, [(1, 83), (2, 14)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 75, 3]]
** centroid: 6, normalized-entropy: 0.23519338181924157, [(2, 75), (3, 3)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [56, 3, 0]]
** centroid: 7, normalized-entropy: 0.2899860470332091, [(1, 56), (2, 3)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18342535234242677] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18342535234242677, 0.15170997447706758] ***
*** starting iteration: 2; err: [Inf, 0.18342535234242677, 0.15170997447706758] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18342535234242677, 0.15170997447706758, 0.14809774549864232] ***
*** starting iteration: 3; err: [Inf, 0.18342535234242677, 0.15170997447706758, 0.14809774549864232] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18342535234242677, 0.15170997447706758, 0.14809774549864232, 0.1471296388041228] ***
*** finished computation of 7 references, err: [Inf, 0.18342535234242677, 0.15170997447706758, 0.14809774549864232, 0.1471296388041228] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [34, 58, 0]]
** centroid: 1, normalized-entropy: 0.9503376699710269, [(1, 34), (2, 58)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [48, 13, 0]]
** centroid: 2, normalized-entropy: 0.7473944462440388, [(1, 48), (2, 13)]
*** center 3: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 69, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [79, 6, 0]]
** centroid: 5, normalized-entropy: 0.3681150054280774, [(1, 79), (2, 6)]
*** center 6: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 40, 18]]
** centroid: 7, normalized-entropy: 0.8935711016541908, [(2, 40), (3, 18)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19765187429636716] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19765187429636716, 0.15728671789355575] ***
*** starting iteration: 2; err: [Inf, 0.19765187429636716, 0.15728671789355575] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19765187429636716, 0.15728671789355575, 0.15208887051045894] ***
*** starting iteration: 3; err: [Inf, 0.19765187429636716, 0.15728671789355575, 0.15208887051045894] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19765187429636716, 0.15728671789355575, 0.15208887051045894, 0.15126111679524185] ***
*** finished computation of 7 references, err: [Inf, 0.19765187429636716, 0.15728671789355575, 0.15208887051045894, 0.15126111679524185] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [2, 68, 0]]
** centroid: 1, normalized-entropy: 0.18717625687320805, [(1, 2), (2, 68)]
*** center 2: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [52, 9, 0]]
** centroid: 3, normalized-entropy: 0.603652249754401, [(1, 52), (2, 9)]
*** center 4: selecting labels [1] (freq >= 1) [from [102, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [81, 4, 0]]
** centroid: 5, normalized-entropy: 0.2737691686829417, [(1, 81), (2, 4)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 63, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 32, 18]]
** centroid: 7, normalized-entropy: 0.9426831892554921, [(2, 32), (3, 18)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2127174556031823] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2127174556031823, 0.15199842073768377] ***
*** starting iteration: 2; err: [Inf, 0.2127174556031823, 0.15199842073768377] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2127174556031823, 0.15199842073768377, 0.1471554091554135] ***
*** starting iteration: 3; err: [Inf, 0.2127174556031823, 0.15199842073768377, 0.1471554091554135] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2127174556031823, 0.15199842073768377, 0.1471554091554135, 0.14689907681010664] ***
*** finished computation of 7 references, err: [Inf, 0.2127174556031823, 0.15199842073768377, 0.1471554091554135, 0.14689907681010664] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [52, 18, 0]]
** centroid: 1, normalized-entropy: 0.8224042259549892, [(1, 52), (2, 18)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 63, 17]]
** centroid: 2, normalized-entropy: 0.7462343013654809, [(2, 63), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [47, 36, 0]]
** centroid: 3, normalized-entropy: 0.9872927315785851, [(1, 47), (2, 36)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [69, 3, 0]]
** centroid: 4, normalized-entropy: 0.24988229283318547, [(1, 69), (2, 3)]
*** center 5: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 60, 0]]
** centroid: 6, normalized-entropy: 0.2055925081850832, [(1, 2), (2, 60)]
*** center 7: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18961911431513725] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18961911431513725, 0.1516919801328331] ***
*** starting iteration: 2; err: [Inf, 0.18961911431513725, 0.1516919801328331] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18961911431513725, 0.1516919801328331, 0.14834781542792916] ***
*** starting iteration: 3; err: [Inf, 0.18961911431513725, 0.1516919801328331, 0.14834781542792916] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18961911431513725, 0.1516919801328331, 0.14834781542792916, 0.14797423922270536] ***
*** finished computation of 7 references, err: [Inf, 0.18961911431513725, 0.1516919801328331, 0.14834781542792916, 0.14797423922270536] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 79, 17]]
** centroid: 1, normalized-entropy: 0.673654715229001, [(2, 79), (3, 17)]
*** center 2: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [59, 21, 0]]
** centroid: 3, normalized-entropy: 0.8304955225035798, [(1, 59), (2, 21)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [41, 3, 0]]
** centroid: 4, normalized-entropy: 0.3591016256485496, [(1, 41), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [80, 18, 0]]
** centroid: 5, normalized-entropy: 0.6880476235340797, [(1, 80), (2, 18)]
*** center 6: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [2, 69, 0]]
** centroid: 7, normalized-entropy: 0.18512476010054582, [(1, 2), (2, 69)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18967912024864927] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18967912024864927, 0.1525663611292839] ***
*** starting iteration: 2; err: [Inf, 0.18967912024864927, 0.1525663611292839] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18967912024864927, 0.1525663611292839, 0.14943852228857576] ***
*** starting iteration: 3; err: [Inf, 0.18967912024864927, 0.1525663611292839, 0.14943852228857576] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18967912024864927, 0.1525663611292839, 0.14943852228857576, 0.14810455766157246] ***
*** finished computation of 7 references, err: [Inf, 0.18967912024864927, 0.1525663611292839, 0.14943852228857576, 0.14810455766157246] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 67, 1]]
** centroid: 1, normalized-entropy: 0.11058084476988722, [(2, 67), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [57, 25, 0]]
** centroid: 3, normalized-entropy: 0.8871723027673716, [(1, 57), (2, 25)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [79, 1, 0]]
** centroid: 4, normalized-entropy: 0.09694460606247329, [(1, 79), (2, 1)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 75, 18]]
** centroid: 5, normalized-entropy: 0.708835673332196, [(2, 75), (3, 18)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [66, 3, 0]]
** centroid: 6, normalized-entropy: 0.2580186686648155, [(1, 66), (2, 3)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [42, 5, 0]]
** centroid: 7, normalized-entropy: 0.48890859144051524, [(1, 42), (2, 5)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1877840701378882] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1877840701378882, 0.147650343477726] ***
*** starting iteration: 2; err: [Inf, 0.1877840701378882, 0.147650343477726] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1877840701378882, 0.147650343477726, 0.14512476694397627] ***
*** starting iteration: 3; err: [Inf, 0.1877840701378882, 0.147650343477726, 0.14512476694397627] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1877840701378882, 0.147650343477726, 0.14512476694397627, 0.14469190592691303] ***
*** finished computation of 7 references, err: [Inf, 0.1877840701378882, 0.147650343477726, 0.14512476694397627, 0.14469190592691303] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [49, 36, 0]]
** centroid: 1, normalized-entropy: 0.9830605548016024, [(1, 49), (2, 36)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [49, 27, 0]]
** centroid: 2, normalized-entropy: 0.9386808697586004, [(1, 49), (2, 27)]
*** center 3: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 65, 18]]
** centroid: 4, normalized-entropy: 0.7544062039636575, [(2, 65), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [25, 44, 0]]
** centroid: 5, normalized-entropy: 0.9445911819316588, [(1, 25), (2, 44)]
*** center 6: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20119805042631925] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20119805042631925, 0.1521006980985403] ***
*** starting iteration: 2; err: [Inf, 0.20119805042631925, 0.1521006980985403] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20119805042631925, 0.1521006980985403, 0.1479957617316395] ***
*** starting iteration: 3; err: [Inf, 0.20119805042631925, 0.1521006980985403, 0.1479957617316395] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20119805042631925, 0.1521006980985403, 0.1479957617316395, 0.14712766893580556] ***
*** finished computation of 7 references, err: [Inf, 0.20119805042631925, 0.1521006980985403, 0.1479957617316395, 0.14712766893580556] ***
*** center 1: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [61, 6, 0]]
** centroid: 2, normalized-entropy: 0.43497348007474274, [(1, 61), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 48, 18]]
** centroid: 3, normalized-entropy: 0.8453509366224364, [(2, 48), (3, 18)]
*** center 4: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [60, 19, 0]]
** centroid: 5, normalized-entropy: 0.7958812735955936, [(1, 60), (2, 19)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [10, 53, 0]]
** centroid: 6, normalized-entropy: 0.6312630180916119, [(1, 10), (2, 53)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 57, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1818715377263725] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1818715377263725, 0.14460571397282182] ***
*** starting iteration: 2; err: [Inf, 0.1818715377263725, 0.14460571397282182] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1818715377263725, 0.14460571397282182, 0.1423095650714822] ***
*** starting iteration: 3; err: [Inf, 0.1818715377263725, 0.14460571397282182, 0.1423095650714822] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1818715377263725, 0.14460571397282182, 0.1423095650714822, 0.14213375139981507] ***
*** finished computation of 7 references, err: [Inf, 0.1818715377263725, 0.14460571397282182, 0.1423095650714822, 0.14213375139981507] ***
*** center 1: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [38, 9, 0]]
** centroid: 2, normalized-entropy: 0.7045767128725937, [(1, 38), (2, 9)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 55, 24]]
** centroid: 3, normalized-entropy: 0.8858834790484443, [(2, 55), (3, 24)]
*** center 4: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [11, 66, 0]]
** centroid: 5, normalized-entropy: 0.5916727785823274, [(1, 11), (2, 66)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [41, 52, 0]]
** centroid: 6, normalized-entropy: 0.989884644089986, [(1, 41), (2, 52)]
*** center 7: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19778300729207696] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19778300729207696, 0.15027610232681035] ***
*** starting iteration: 2; err: [Inf, 0.19778300729207696, 0.15027610232681035] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19778300729207696, 0.15027610232681035, 0.14738427226804196] ***
*** starting iteration: 3; err: [Inf, 0.19778300729207696, 0.15027610232681035, 0.14738427226804196] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19778300729207696, 0.15027610232681035, 0.14738427226804196, 0.147230878200382] ***
*** finished computation of 7 references, err: [Inf, 0.19778300729207696, 0.15027610232681035, 0.14738427226804196, 0.147230878200382] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 73, 20]]
** centroid: 1, normalized-entropy: 0.7510324165275097, [(2, 73), (3, 20)]
*** center 2: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [49, 1, 0]]
** centroid: 3, normalized-entropy: 0.14144054254182067, [(1, 49), (2, 1)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [78, 26, 0]]
** centroid: 4, normalized-entropy: 0.8112781244591328, [(1, 78), (2, 26)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [37, 16, 0]]
** centroid: 5, normalized-entropy: 0.8835850861052531, [(1, 37), (2, 16)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [9, 52, 0]]
** centroid: 6, normalized-entropy: 0.603652249754401, [(1, 9), (2, 52)]
*** center 7: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19148066186066717] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19148066186066717, 0.15148999269492924] ***
*** starting iteration: 2; err: [Inf, 0.19148066186066717, 0.15148999269492924] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19148066186066717, 0.15148999269492924, 0.14894898211583496] ***
*** starting iteration: 3; err: [Inf, 0.19148066186066717, 0.15148999269492924, 0.14894898211583496] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19148066186066717, 0.15148999269492924, 0.14894898211583496, 0.1481255912873894] ***
*** finished computation of 7 references, err: [Inf, 0.19148066186066717, 0.15148999269492924, 0.14894898211583496, 0.1481255912873894] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [42, 43, 0]]
** centroid: 1, normalized-entropy: 0.9999001572094882, [(1, 42), (2, 43)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [50, 6, 0]]
** centroid: 2, normalized-entropy: 0.4912373418243334, [(1, 50), (2, 6)]
*** center 3: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 69, 15]]
** centroid: 4, normalized-entropy: 0.6769418697808861, [(2, 69), (3, 15)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [82, 19, 0]]
** centroid: 5, normalized-entropy: 0.6975195309289136, [(1, 82), (2, 19)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 53, 1]]
** centroid: 6, normalized-entropy: 0.13303964861069897, [(2, 53), (3, 1)]
*** center 7: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1936423300690949] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1936423300690949, 0.15301022700965405] ***
*** starting iteration: 2; err: [Inf, 0.1936423300690949, 0.15301022700965405] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1936423300690949, 0.15301022700965405, 0.14729967913497238] ***
*** starting iteration: 3; err: [Inf, 0.1936423300690949, 0.15301022700965405, 0.14729967913497238] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1936423300690949, 0.15301022700965405, 0.14729967913497238, 0.14604476657137275] ***
*** finished computation of 7 references, err: [Inf, 0.1936423300690949, 0.15301022700965405, 0.14729967913497238, 0.14604476657137275] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [88, 1, 0]]
** centroid: 1, normalized-entropy: 0.08887969568457589, [(1, 88), (2, 1)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 52, 19]]
** centroid: 2, normalized-entropy: 0.8380078505079931, [(2, 52), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [60, 2, 0]]
** centroid: 3, normalized-entropy: 0.2055925081850832, [(1, 60), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [60, 3, 0]]
** centroid: 4, normalized-entropy: 0.2761954276479391, [(1, 60), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [3, 72, 0]]
** centroid: 5, normalized-entropy: 0.24229218908241482, [(1, 3), (2, 72)]
*** center 6: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [6, 56, 0]]
** centroid: 7, normalized-entropy: 0.45868581620054033, [(1, 6), (2, 56)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19365547084435822] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19365547084435822, 0.14786129551567137] ***
*** starting iteration: 2; err: [Inf, 0.19365547084435822, 0.14786129551567137] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19365547084435822, 0.14786129551567137, 0.14393084636703132] ***
*** starting iteration: 3; err: [Inf, 0.19365547084435822, 0.14786129551567137, 0.14393084636703132] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19365547084435822, 0.14786129551567137, 0.14393084636703132, 0.1430304087935947] ***
*** finished computation of 7 references, err: [Inf, 0.19365547084435822, 0.14786129551567137, 0.14393084636703132, 0.1430304087935947] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [9, 80, 0]]
** centroid: 1, normalized-entropy: 0.4725472219330293, [(1, 9), (2, 80)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [45, 42, 0]]
** centroid: 2, normalized-entropy: 0.999142103991909, [(1, 45), (2, 42)]
*** center 3: selecting labels [1] (freq >= 1) [from [47, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 66, 21]]
** centroid: 4, normalized-entropy: 0.7973265101474423, [(2, 66), (3, 21)]
*** center 5: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [46, 2, 0]]
** centroid: 6, normalized-entropy: 0.24988229283318547, [(1, 46), (2, 2)]
*** center 7: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19895663517341017] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19895663517341017, 0.15279245181009174] ***
*** starting iteration: 2; err: [Inf, 0.19895663517341017, 0.15279245181009174] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19895663517341017, 0.15279245181009174, 0.14966693504806608] ***
*** starting iteration: 3; err: [Inf, 0.19895663517341017, 0.15279245181009174, 0.14966693504806608] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19895663517341017, 0.15279245181009174, 0.14966693504806608, 0.14915970809478313] ***
*** finished computation of 7 references, err: [Inf, 0.19895663517341017, 0.15279245181009174, 0.14966693504806608, 0.14915970809478313] ***
*** center 1: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 65, 17]]
** centroid: 2, normalized-entropy: 0.7363230272021651, [(2, 65), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [48, 7, 0]]
** centroid: 3, normalized-entropy: 0.54991090463341, [(1, 48), (2, 7)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [73, 15, 0]]
** centroid: 4, normalized-entropy: 0.6587435307694671, [(1, 73), (2, 15)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [28, 45, 0]]
** centroid: 5, normalized-entropy: 0.9605187074766162, [(1, 28), (2, 45)]
*** center 6: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [2, 70, 0]]
** centroid: 7, normalized-entropy: 0.18312206830137262, [(1, 2), (2, 70)]
finished with 11 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 369,3 => 36,1 => 595), Dict(2 => 371,3 => 38,1 => 591))
[ Info: ===== scores for single classifier: {"micro_f1":0.933,"precision":0.933,"recall":0.933,"macro_recall":0.9458225585033362,"macro_f1":0.8964156554169009,"accuracy":0.933,"class_f1":{"2":0.9057665260196905,"3":0.8260869565217391,"1":0.9573934837092731},"class_precision":{"2":0.9470588235294117,"3":0.7037037037037037,"1":0.9455445544554455},"class_recall":{"2":0.8679245283018868,"3":1.0,"1":0.9695431472081218}}
[ Info: ===== scores for 1: {"micro_f1":0.953,"precision":0.953,"recall":0.953,"macro_recall":0.9631230968267651,"macro_f1":0.9013592486850275,"accuracy":0.953,"class_f1":{"2":0.9353507565337001,"3":0.7916666666666666,"1":0.9770603228547154},"class_precision":{"2":0.9550561797752809,"3":0.6551724137931034,"1":0.9812286689419796},"class_recall":{"2":0.9164420485175202,"3":1.0,"1":0.9729272419627749}}
[ Info: ===== scores for 5: {"micro_f1":0.948,"precision":0.948,"recall":0.948,"macro_recall":0.9609719314728413,"macro_f1":0.9109898697494606,"accuracy":0.948,"class_f1":{"2":0.9293478260869565,"3":0.8351648351648352,"1":0.9684569479965899},"class_precision":{"2":0.936986301369863,"3":0.7169811320754716,"1":0.9759450171821306},"class_recall":{"2":0.921832884097035,"3":1.0,"1":0.961082910321489}}
[ Info: ===== scores for 7: {"micro_f1":0.9469999999999998,"precision":0.947,"recall":0.947,"macro_recall":0.9604079156803991,"macro_f1":0.9102761551694362,"accuracy":0.947,"class_f1":{"2":0.9280868385345997,"3":0.8351648351648352,"1":0.9675767918088737},"class_precision":{"2":0.9344262295081968,"3":0.7169811320754716,"1":0.9759036144578314},"class_recall":{"2":0.921832884097035,"3":1.0,"1":0.9593908629441624}}
[ Info: ===== scores for 9: {"micro_f1":0.946,"precision":0.946,"recall":0.946,"macro_recall":0.9601783566921006,"macro_f1":0.9096100048195858,"accuracy":0.946,"class_f1":{"2":0.9270270270270271,"3":0.8351648351648352,"1":0.9666381522668948},"class_precision":{"2":0.9295392953929539,"3":0.7169811320754716,"1":0.9775086505190311},"class_recall":{"2":0.9245283018867925,"3":1.0,"1":0.9560067681895094}}
[ Info: ===== scores for 11: {"micro_f1":0.943,"precision":0.943,"recall":0.943,"macro_recall":0.9581518525106304,"macro_f1":0.9074276180440565,"accuracy":0.943,"class_f1":{"2":0.9230769230769231,"3":0.8351648351648352,"1":0.964041095890411},"class_precision":{"2":0.9243243243243243,"3":0.7169811320754716,"1":0.975736568457539},"class_recall":{"2":0.921832884097035,"3":1.0,"1":0.9526226734348562}}
(score = 0.947, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.947, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.953, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.953, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.954, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.954, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.951, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.951, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.958, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.958, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.948, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.948, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.952, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.952, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.947, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.947, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.958,"k":5,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.958,"precision":0.958,"recall":0.958,"macro_recall":0.9525374589620301,"macro_f1":0.9249586321014892,"accuracy":0.958,"class_f1":{"2":0.9432432432432433,"3":0.8571428571428571,"1":0.9744897959183674},"class_precision":{"2":0.94579945799458,"3":0.782608695652174,"1":0.9794871794871794},"class_recall":{"2":0.9407008086253369,"3":0.9473684210526315,"1":0.9695431472081218}}
Test Summary: | Pass  Total
AKNC          |    8      8
[80, 2, 9, 2, 3, 2, 3, 4, 1, 1, 6, 7, 12, 2, 10, 2, 3, 5, 16, 13, 22, 3, 1, 14, 9, 2, 2, 6, 14, 9, 5, 2, 7, 7, 2, 3, 12, 9, 5, 17, 18, 6, 1, 32, 8, 6, 28, 10, 13, 5, 11, 5, 3, 18, 2, 2, 13, 3, 21, 7, 5, 214, 1, 10, 46, 1, 26, 11, 5, 4, 19, 13, 3, 5, 35, 11, 5, 14, 11, 40, 2, 3, 9, 21, 4, 21, 88, 12, 41, 9, 10, 94, 1, 54, 5, 27, 67, 8, 1, 85, 68, 26, 7, 8, 6, 23, 106, 12, 47, 13, 16, 9, 12, 5, 5, 21, 6, 9, 24, 9, 11, 6, 32, 232, 7, 6, 18, 12, 11, 3, 2, 12, 12, 2, 2, 2, 8, 19, 434, 10, 18, 27, 12, 21, 10, 5, 4, 538, 3, 31, 28, 75, 35, 23, 1, 20, 6, 3, 2, 17, 35, 18, 22, 2, 78, 47, 10, 3, 5, 94, 12, 1, 7, 40, 55, 28, 7, 13, 13, 5, 38, 25, 21, 17, 78, 6, 12, 19, 4, 33, 177, 84, 74, 3, 35, 45, 88, 18, 38, 5, 7, 9, 12, 14, 50, 8, 17, 2, 26, 2, 68, 6, 27, 12, 15, 426, 8, 12, 7, 15, 36, 16, 122, 58, 9, 33, 57, 31, 9, 68, 36, 22, 9, 5, 6, 7, 62, 28, 75, 19, 827, 175, 125, 4, 60, 34, 225, 9, 37, 9, 207, 14, 7, 44, 26, 10, 54, 21, 128, 110, 66, 30, 16, 13, 10, 21, 5, 15, 78, 10, 28, 6, 53, 20, 20, 11, 55, 48, 21, 46, 18, 31, 44, 136, 5, 14, 8, 8, 36, 164, 46, 5, 7, 21, 26, 61, 1, 7, 153, 6]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.653, speedup = 0.32586413059559266, eval_ratio = 0.076298)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.41062127976190477,"recall":0.40190972222222227,"f1":null,"seconds":0.00017763860523700714,"exhaustive_search_seconds":0.0004094000905752182,"evaluations":488.8359375,"distances_sum":1734.0234670175194}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5746527777777777,"recall":0.5746527777777777,"f1":0.5746527777777777,"seconds":0.00030710361897945404,"exhaustive_search_seconds":0.0004094000905752182,"evaluations":661.296875,"distances_sum":1661.490248416939}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6944444444444439,"recall":0.6944444444444439,"f1":0.6944444444444439,"seconds":0.0005529839545488358,"exhaustive_search_seconds":0.0004094000905752182,"evaluations":826.2421875,"distances_sum":1605.6048784700374}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7638888888888884,"recall":0.7638888888888884,"f1":0.7638888888888884,"seconds":0.0007065180689096451,"exhaustive_search_seconds":0.0004094000905752182,"evaluations":956.65625,"distances_sum":1581.565208886773}
KCenters.DeloneInvIndex> reached performance {"precision":0.8124999999999993,"recall":0.8124999999999993,"f1":0.8124999999999993,"seconds":0.0007450766861438751,"exhaustive_search_seconds":0.0004094000905752182,"evaluations":1048.328125,"distances_sum":1569.5270996329623}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.7809999999999998, speedup = 0.544217034524256, eval_ratio = 0.10289000000000001)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
