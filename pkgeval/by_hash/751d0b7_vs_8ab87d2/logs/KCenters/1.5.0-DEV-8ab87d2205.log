Julia Version 1.5.0-DEV.803
Commit 8ab87d2205 (2020-05-03 08:07 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed Missings ──────────────────── v0.4.3
  Installed DataValueInterfaces ───────── v1.0.0
  Installed Compat ────────────────────── v3.9.0
  Installed KCenters ──────────────────── v0.2.2
  Installed Parsers ───────────────────── v1.0.2
  Installed JSON ──────────────────────── v0.21.0
  Installed MLDataPattern ─────────────── v0.5.3
  Installed PooledArrays ──────────────── v0.5.3
  Installed Reexport ──────────────────── v0.2.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed DataAPI ───────────────────── v1.3.0
  Installed TableTraits ───────────────── v1.0.0
  Installed InvertedIndices ───────────── v1.0.0
  Installed StatsBase ─────────────────── v0.32.2
  Installed OrderedCollections ────────── v1.1.0
  Installed SimilaritySearch ──────────── v0.3.19
  Installed DataFrames ────────────────── v0.20.2
  Installed MLDataUtils ───────────────── v0.5.1
  Installed MappedArrays ──────────────── v0.2.2
  Installed LearnBase ─────────────────── v0.2.2
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed CategoricalArrays ─────────── v0.7.7
  Installed Tables ────────────────────── v1.0.4
  Installed DataStructures ────────────── v0.17.15
Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.9.0
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.15
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v1.0.2
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_WMiElf/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_WMiElf/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.9.0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.15
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v1.0.2
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.9326678744951884
[ Info: 0.8326150393486023
[ Info: 0.5556202241281668
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.3346230382720629
mean(cdnet.distances) = 0.3554948795586824
mean(crand.distances) = 0.3475474449247122
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5771484375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5771484375,"f1":0.7157875111000117,"seconds":5.50784170627594e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":7.4609375,"distances_sum":1691.5409274122592}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6748046875, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6748046875,"f1":0.7951829420579428,"seconds":4.986301064491272e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.0625,"distances_sum":2015.047428061437}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7587890625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7587890625,"f1":0.853664044289045,"seconds":5.271285772323608e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.4921875,"distances_sum":2417.0368592841255}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7587890625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7587890625,"f1":0.853664044289045,"seconds":5.271285772323608e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.4921875,"distances_sum":2417.0368592841255}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9578926282051287,"seconds":6.467103958129883e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.8515625,"distances_sum":3208.9936885040393}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.849609375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.849609375,"f1":0.9122715825840833,"seconds":6.148591637611389e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.671875,"distances_sum":2819.5043157174605}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9555288461538465,"seconds":6.100162863731384e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.8671875,"distances_sum":3200.948942890215}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.873046875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.873046875,"f1":0.925790355477856,"seconds":6.144866347312927e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.6875,"distances_sum":2925.995129972121}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8623046875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8623046875,"f1":0.9207760989010996,"seconds":6.040558218955994e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.6015625,"distances_sum":2875.9271471042207}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.9294585622710629,"seconds":5.945563316345215e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.671875,"distances_sum":2942.2226297577677}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9248046875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.9578926282051287,"seconds":6.467103958129883e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.8515625,"distances_sum":3208.9936885040393}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9587657134532137,"seconds":7.169321179389954e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.8125,"distances_sum":3265.7126645336484}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9630837912087914,"seconds":7.0426613092422485e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.890625,"distances_sum":3286.702115830949}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9708905677655683,"seconds":7.024034857749939e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.9375,"distances_sum":3322.3843100788936}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9604395604395609,"seconds":6.863847374916077e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.859375,"distances_sum":3261.7507388135264}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9708905677655683,"seconds":7.024034857749939e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.9375,"distances_sum":3322.3843100788936}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9708905677655683,"seconds":7.024034857749939e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.9375,"distances_sum":3322.3843100788936}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.513671875, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.513671875,"f1":0.661154817404818,"seconds":5.295500159263611e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":7.3515625,"distances_sum":1500.762620963989}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.513671875,"state":{"ssize":3,"bsize":3},"perf":{"precision":1.0,"recall":0.513671875,"f1":0.661154817404818,"seconds":5.295500159263611e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":7.3515625,"distances_sum":1500.762620963989}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.85546875, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.85546875,"f1":0.9153960622710631,"seconds":6.927177309989929e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.8359375,"distances_sum":2773.4126102285463}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.85546875,"state":{"ssize":7,"bsize":6},"perf":{"precision":1.0,"recall":0.85546875,"f1":0.9153960622710631,"seconds":6.927177309989929e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.8359375,"distances_sum":2773.4126102285463}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9493017399267403,"seconds":6.804242730140686e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.7578125,"distances_sum":3109.5201753850206}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.912109375,"state":{"ssize":7,"bsize":8},"perf":{"precision":1.0,"recall":0.912109375,"f1":0.9493017399267403,"seconds":6.804242730140686e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.7578125,"distances_sum":3109.5201753850206}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.912109375,"state":{"ssize":7,"bsize":8},"perf":{"precision":1.0,"recall":0.912109375,"f1":0.9493017399267403,"seconds":6.804242730140686e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.7578125,"distances_sum":3109.5201753850206}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6171875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.6171875,"f1":0.7433857808857818,"seconds":4.196539521217346e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":7.5625,"distances_sum":1756.723992609843}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2392578125, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2392578125,"f1":null,"seconds":3.462657332420349e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":6.9375,"distances_sum":688.6758200313566}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6171875,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.6171875,"f1":0.7433857808857818,"seconds":4.196539521217346e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":7.5625,"distances_sum":1756.723992609843}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7587890625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7587890625,"f1":0.8546255827505834,"seconds":5.1353126764297485e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.5,"distances_sum":2224.5276733132814}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8857421875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8857421875,"f1":0.9333307317682324,"seconds":5.910173058509827e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.7265625,"distances_sum":2770.188416283078}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8857421875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8857421875,"f1":0.9333307317682324,"seconds":5.910173058509827e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.7265625,"distances_sum":2770.188416283078}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9566449175824179,"seconds":6.230548024177551e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.859375,"distances_sum":3002.5942330512435}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9511504120879126,"seconds":5.986541509628296e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.78125,"distances_sum":2936.540092183622}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9712053571428574,"seconds":5.951151251792908e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.9140625,"distances_sum":3115.318233070279}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9525526556776561,"seconds":5.947425961494446e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.8203125,"distances_sum":2985.030480849818}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9551027097902104,"seconds":5.945563316345215e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.8671875,"distances_sum":2996.812495655138}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9482421875,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9712053571428574,"seconds":5.951151251792908e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.9140625,"distances_sum":3115.318233070279}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9482421875,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9712053571428574,"seconds":5.951151251792908e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.9140625,"distances_sum":3115.318233070279}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2021484375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2021484375,"f1":null,"seconds":3.5855919122695923e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":5.8984375,"distances_sum":541.658676182633}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5849609375, conf: {"ssize":4,"bsize":3}, perf: {"precision":null,"recall":0.5849609375,"f1":null,"seconds":4.3120235204696655e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.296875,"distances_sum":1602.3301384474323}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7216796875, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.7216796875,"f1":0.8286879786879794,"seconds":4.766508936882019e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.953125,"distances_sum":2125.7565957130423}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7216796875,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.7216796875,"f1":0.8286879786879794,"seconds":4.766508936882019e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.953125,"distances_sum":2125.7565957130423}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.779296875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.779296875,"f1":0.868091804029305,"seconds":5.077570676803589e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.390625,"distances_sum":2380.248203549224}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9477907509157513,"seconds":5.552545189857483e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.5703125,"distances_sum":2977.1352659362883}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9072265625,"state":{"ssize":6,"bsize":7},"perf":{"precision":1.0,"recall":0.9072265625,"f1":0.9477907509157513,"seconds":5.552545189857483e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.5703125,"distances_sum":2977.1352659362883}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.961979166666667,"seconds":6.292015314102173e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.8515625,"distances_sum":3123.623589066717}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.931640625,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.961979166666667,"seconds":6.292015314102173e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.8515625,"distances_sum":3123.623589066717}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.931640625,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.961979166666667,"seconds":6.292015314102173e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.8515625,"distances_sum":3123.623589066717}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1640625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.1640625,"f1":null,"seconds":3.200024366378784e-6,"exhaustive_search_seconds":1.5329569578170776e-6,"evaluations":4.796875,"distances_sum":456.9385288879166}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.560546875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.560546875,"f1":0.7037002927627934,"seconds":4.177913069725037e-6,"exhaustive_search_seconds":1.5329569578170776e-6,"evaluations":6.34375,"distances_sum":1540.7449610205429}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1611328125, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.1611328125,"f1":null,"seconds":3.1460076570510864e-6,"exhaustive_search_seconds":1.5329569578170776e-6,"evaluations":4.8203125,"distances_sum":443.2248196906069}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.412109375, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.412109375,"f1":null,"seconds":3.730878233909607e-6,"exhaustive_search_seconds":1.5329569578170776e-6,"evaluations":5.796875,"distances_sum":1062.9129224553467}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.560546875,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.560546875,"f1":0.7037002927627934,"seconds":4.177913069725037e-6,"exhaustive_search_seconds":1.5329569578170776e-6,"evaluations":6.34375,"distances_sum":1540.7449610205429}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8623046875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8623046875,"f1":0.9185954670329679,"seconds":5.770474672317505e-6,"exhaustive_search_seconds":1.5329569578170776e-6,"evaluations":8.2578125,"distances_sum":2773.0937768578915}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6728515625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6728515625,"f1":0.7910568598068607,"seconds":4.716217517852783e-6,"exhaustive_search_seconds":1.5329569578170776e-6,"evaluations":7.3984375,"distances_sum":1904.1744233605707}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.662109375, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.662109375,"f1":0.7846747002997011,"seconds":4.751607775688171e-6,"exhaustive_search_seconds":1.5329569578170776e-6,"evaluations":7.25,"distances_sum":1849.351131355959}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.74609375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.74609375,"f1":0.8435475982350991,"seconds":4.824250936508179e-6,"exhaustive_search_seconds":1.5329569578170776e-6,"evaluations":7.8125,"distances_sum":2219.5231211715936}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8623046875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8623046875,"f1":0.9185954670329679,"seconds":5.770474672317505e-6,"exhaustive_search_seconds":1.5329569578170776e-6,"evaluations":8.2578125,"distances_sum":2773.0937768578915}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9475331959706966,"seconds":5.519017577171326e-6,"exhaustive_search_seconds":1.5329569578170776e-6,"evaluations":8.671875,"distances_sum":2972.123070249268}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9444799991674997,"seconds":5.736947059631348e-6,"exhaustive_search_seconds":1.5329569578170776e-6,"evaluations":8.5859375,"distances_sum":2993.451995254412}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9518257783882789,"seconds":5.420297384262085e-6,"exhaustive_search_seconds":1.5329569578170776e-6,"evaluations":8.7109375,"distances_sum":3024.033586400463}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9404506951381956,"seconds":5.792826414108276e-6,"exhaustive_search_seconds":1.5329569578170776e-6,"evaluations":8.546875,"distances_sum":2985.365661745206}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9380582958707965,"seconds":5.781650543212891e-6,"exhaustive_search_seconds":1.5329569578170776e-6,"evaluations":8.5546875,"distances_sum":2935.46938031657}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9150390625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9150390625,"f1":0.9518257783882789,"seconds":5.420297384262085e-6,"exhaustive_search_seconds":1.5329569578170776e-6,"evaluations":8.7109375,"distances_sum":3024.033586400463}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9150390625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9150390625,"f1":0.9518257783882789,"seconds":5.420297384262085e-6,"exhaustive_search_seconds":1.5329569578170776e-6,"evaluations":8.7109375,"distances_sum":3024.033586400463}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2802734375,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2802734375,"f1":null,"seconds":4.4405460357666016e-6,"exhaustive_search_seconds":1.6782432794570923e-6,"evaluations":7.0390625,"distances_sum":411.4277162497385}}, beam: 1, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.2802734375,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2802734375,"f1":null,"seconds":4.4405460357666016e-6,"exhaustive_search_seconds":1.6782432794570923e-6,"evaluations":7.0390625,"distances_sum":411.4277162497385}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5205078125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5205078125,"f1":0.6666869588744593,"seconds":5.200505256652832e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":6.65625,"distances_sum":1063.894277093506}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7353515625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7353515625,"f1":0.8371888528138538,"seconds":6.919726729393005e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":7.9921875,"distances_sum":1654.5042061245174}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7548828125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7548828125,"f1":0.8529970029970039,"seconds":6.051734089851379e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.0234375,"distances_sum":1704.3646837392657}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7548828125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7548828125,"f1":0.8529970029970039,"seconds":6.051734089851379e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.0234375,"distances_sum":1704.3646837392657}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9436813186813192,"seconds":6.660819053649902e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.6640625,"distances_sum":2157.2561239808524}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9359260531135534,"seconds":6.577000021934509e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.7109375,"distances_sum":2112.310444146868}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.90234375,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.90234375,"f1":0.9436813186813192,"seconds":6.660819053649902e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.6640625,"distances_sum":2157.2561239808524}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.958984375, conf: {"ssize":6,"bsize":12}, perf: {"precision":1.0,"recall":0.958984375,"f1":0.9772893772893776,"seconds":6.800517439842224e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.9140625,"distances_sum":2350.109043801853}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9443337912087918,"seconds":6.666406989097595e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.7578125,"distances_sum":2149.0722031565597}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9693853021978024,"seconds":6.765127182006836e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.890625,"distances_sum":2289.4388593332765}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.958984375,"state":{"ssize":6,"bsize":12},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9772893772893776,"seconds":6.800517439842224e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.9140625,"distances_sum":2350.109043801853}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.958984375,"state":{"ssize":6,"bsize":12},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9772893772893776,"seconds":6.800517439842224e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.9140625,"distances_sum":2350.109043801853}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7666015625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7666015625,"f1":0.860251207126208,"seconds":4.988163709640503e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.5546875,"distances_sum":1691.2637241962532}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7490234375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7490234375,"f1":0.8494120462870469,"seconds":4.857778549194336e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.3984375,"distances_sum":1624.1364793607715}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7666015625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7666015625,"f1":0.860251207126208,"seconds":4.988163709640503e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.5546875,"distances_sum":1691.2637241962532}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9516998626373632,"seconds":5.519017577171326e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.9375,"distances_sum":2192.8864456926303}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9634329212454217,"seconds":5.934387445449829e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.9296875,"distances_sum":2305.4878890414575}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9447229853479856,"seconds":6.195157766342163e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.921875,"distances_sum":2174.9426722893213}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.935546875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9634329212454217,"seconds":5.934387445449829e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.9296875,"distances_sum":2305.4878890414575}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9662431318681324,"seconds":6.381422281265259e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.9375,"distances_sum":2314.350631446736}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":4,"bsize":12}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9742387820512823,"seconds":1.0211020708084106e-5,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.984375,"distances_sum":2359.351128450644}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.953125,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9742387820512823,"seconds":1.0211020708084106e-5,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.984375,"distances_sum":2359.351128450644}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.953125,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9742387820512823,"seconds":1.0211020708084106e-5,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.984375,"distances_sum":2359.351128450644}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.265625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.265625,"f1":null,"seconds":3.859400749206543e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":6.1171875,"distances_sum":540.1762733742221}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.705078125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.705078125,"f1":0.818328026140527,"seconds":5.105510354042053e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.7109375,"distances_sum":1520.4812753090964}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2568359375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2568359375,"f1":null,"seconds":3.112480044364929e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":6.328125,"distances_sum":541.6074324405046}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.705078125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.705078125,"f1":0.818328026140527,"seconds":5.105510354042053e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.7109375,"distances_sum":1520.4812753090964}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7509765625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7509765625,"f1":0.8496722027972036,"seconds":5.276873707771301e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.0,"distances_sum":1696.3393430859933}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9344379578754585,"seconds":9.80868935585022e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.828125,"distances_sum":2147.398713567196}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8837890625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8837890625,"f1":0.9344379578754585,"seconds":9.80868935585022e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.828125,"distances_sum":2147.398713567196}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9507669413919417,"seconds":6.509944796562195e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.890625,"distances_sum":2260.523401983128}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9679716117216122,"seconds":6.509944796562195e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.9453125,"distances_sum":2357.4247855890276}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9630608974358981,"seconds":6.3944607973098755e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.9296875,"distances_sum":2332.1737847599866}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9644173534798542,"seconds":6.411224603652954e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.90625,"distances_sum":2355.680465795905}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9535599816849821,"seconds":6.314367055892944e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.84375,"distances_sum":2310.348468787981}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9423828125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9679716117216122,"seconds":6.509944796562195e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.9453125,"distances_sum":2357.4247855890276}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9423828125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9679716117216122,"seconds":6.509944796562195e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.9453125,"distances_sum":2357.4247855890276}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7490234375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7490234375,"f1":0.8491451257076266,"seconds":5.06080687046051e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.15625,"distances_sum":1745.547443452346}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.74609375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.74609375,"f1":0.8464181651681659,"seconds":4.861503839492798e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.171875,"distances_sum":1733.5877318662872}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7490234375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7490234375,"f1":0.8491451257076266,"seconds":5.06080687046051e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.15625,"distances_sum":1745.547443452346}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9355025183150188,"seconds":5.617737770080566e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.84375,"distances_sum":2250.7747898438124}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.82421875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.82421875,"f1":0.8975852272727277,"seconds":5.142763257026672e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.5546875,"distances_sum":2010.2685235760619}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9675995879120882,"seconds":5.533918738365173e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.921875,"distances_sum":2493.852374197415}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94140625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9675995879120882,"seconds":5.533918738365173e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.921875,"distances_sum":2493.852374197415}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9754464285714288,"seconds":5.852431058883667e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.953125,"distances_sum":2517.8831339731896}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9700721153846158,"seconds":5.446374416351318e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.953125,"distances_sum":2475.0086765747637}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9669502372627378,"seconds":5.418434739112854e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.859375,"distances_sum":2508.453179078846}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.955078125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9754464285714288,"seconds":5.852431058883667e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.953125,"distances_sum":2517.8831339731896}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.955078125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9754464285714288,"seconds":5.852431058883667e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.953125,"distances_sum":2517.8831339731896}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.380859375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.380859375,"f1":null,"seconds":3.721565008163452e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":5.9296875,"distances_sum":847.3594257067725}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.380859375,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.380859375,"f1":null,"seconds":3.721565008163452e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":5.9296875,"distances_sum":847.3594257067725}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7431640625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7431640625,"f1":0.841769515207016,"seconds":5.245208740234375e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":8.3203125,"distances_sum":1887.7743213448757}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.650390625, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.650390625,"f1":0.7781270812520821,"seconds":4.433095455169678e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":7.3359375,"distances_sum":1604.6193377309964}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.580078125, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.580078125,"f1":0.7224324286824293,"seconds":4.190951585769653e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":7.0859375,"distances_sum":1451.7839718202283}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7431640625,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7431640625,"f1":0.841769515207016,"seconds":5.245208740234375e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":8.3203125,"distances_sum":1887.7743213448757}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9576522435897439,"seconds":5.29363751411438e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":8.7890625,"distances_sum":2605.3889507841573}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9528903388278394,"seconds":5.8300793170928955e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":8.859375,"distances_sum":2561.7086314882918}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7998046875, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.7998046875,"f1":0.8798592032967041,"seconds":5.085021257400513e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":8.5234375,"distances_sum":2117.8472235086656}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9419127747252753,"seconds":5.379319190979004e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":8.75,"distances_sum":2501.2671565958854}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8203125, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8203125,"f1":0.893575695138196,"seconds":5.06080687046051e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":8.5859375,"distances_sum":2223.5210054476906}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9248046875,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.9576522435897439,"seconds":5.29363751411438e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":8.7890625,"distances_sum":2605.3889507841573}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9248046875,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.9576522435897439,"seconds":5.29363751411438e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":8.7890625,"distances_sum":2605.3889507841573}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7431640625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7431640625,"f1":0.844598110223111,"seconds":4.8335641622543335e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":7.9765625,"distances_sum":1880.1592287583992}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6884765625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6884765625,"f1":0.8041217463092472,"seconds":4.287809133529663e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":7.2734375,"distances_sum":1682.9998275542641}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.751953125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.751953125,"f1":0.8500036421911431,"seconds":5.796551704406738e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.0078125,"distances_sum":1942.090303155143}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.751953125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.751953125,"f1":0.8500036421911431,"seconds":5.796551704406738e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.0078125,"distances_sum":1942.090303155143}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83984375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.83984375,"f1":0.9081444597069607,"seconds":5.479902029037476e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.71875,"distances_sum":2237.496612084725}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8720703125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8720703125,"f1":0.9253491300366309,"seconds":6.3050538301467896e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.828125,"distances_sum":2409.240465971768}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.950251831501832,"seconds":5.6158751249313354e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.796875,"distances_sum":2596.031339449118}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9522753288378295,"seconds":6.01448118686676e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.8828125,"distances_sum":2568.8428638934}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9600331959706965,"seconds":6.444752216339111e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.890625,"distances_sum":2644.611558310967}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9287109375,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9600331959706965,"seconds":6.444752216339111e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.890625,"distances_sum":2644.611558310967}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":9,"bsize":11}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.975169101731602,"seconds":6.148591637611389e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.875,"distances_sum":2772.3048633932076}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9599609375, conf: {"ssize":10,"bsize":12}, perf: {"precision":1.0,"recall":0.9599609375,"f1":0.9777358058608061,"seconds":6.215646862983704e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.953125,"distances_sum":2780.477620746502}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":8,"bsize":11}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9699404761904766,"seconds":7.400102913379669e-5,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.9296875,"distances_sum":2709.618231076559}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.962890625, conf: {"ssize":5,"bsize":12}, perf: {"precision":1.0,"recall":0.962890625,"f1":0.9796703296703302,"seconds":5.675479769706726e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.9296875,"distances_sum":2794.7681426991553}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.958984375, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.958984375,"f1":0.977604166666667,"seconds":5.9604644775390625e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.9765625,"distances_sum":2769.0166128122655}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.962890625,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9796703296703302,"seconds":5.675479769706726e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.9296875,"distances_sum":2794.7681426991553}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.962890625,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9796703296703302,"seconds":5.675479769706726e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.9296875,"distances_sum":2794.7681426991553}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6171875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6171875,"f1":0.7529683857808863,"seconds":4.421919584274292e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":7.25,"distances_sum":1453.5212639414594}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.201171875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.201171875,"f1":null,"seconds":2.9727816581726074e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":4.609375,"distances_sum":506.3559826617199}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6171875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6171875,"f1":0.7529683857808863,"seconds":4.421919584274292e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":7.25,"distances_sum":1453.5212639414594}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.826171875, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.826171875,"f1":0.8975425616050623,"seconds":5.375593900680542e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.515625,"distances_sum":2133.8631650819075}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7568359375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7568359375,"f1":0.8518091283716293,"seconds":5.282461643218994e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.0,"distances_sum":1897.5151967324452}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.826171875,"state":{"ssize":2,"bsize":6},"perf":{"precision":1.0,"recall":0.826171875,"f1":0.8975425616050623,"seconds":5.375593900680542e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.515625,"distances_sum":2133.8631650819075}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9325466200466206,"seconds":5.45009970664978e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.5625,"distances_sum":2371.2199984499825}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.959861492673993,"seconds":5.5674463510513306e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.7890625,"distances_sum":2524.266227348448}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8544921875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8544921875,"f1":0.9143143315018323,"seconds":5.4426491260528564e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.484375,"distances_sum":2263.4304716707657}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9323775183150187,"seconds":5.375593900680542e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.546875,"distances_sum":2387.6996149032375}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.927734375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.959861492673993,"seconds":5.5674463510513306e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.7890625,"distances_sum":2524.266227348448}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.927734375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.959861492673993,"seconds":5.5674463510513306e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.7890625,"distances_sum":2524.266227348448}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4326171875, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.4326171875,"f1":null,"seconds":3.7923455238342285e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":6.3046875,"distances_sum":945.0190328754401}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.56640625, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.56640625,"f1":null,"seconds":2.7641654014587402e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":7.046875,"distances_sum":1292.4558561061226}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.56640625,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.56640625,"f1":null,"seconds":2.7641654014587402e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":7.046875,"distances_sum":1292.4558561061226}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83203125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.83203125,"f1":0.9012222152847162,"seconds":3.5781413316726685e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.59375,"distances_sum":2127.763295047848}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9336939102564109,"seconds":3.6098062992095947e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.6875,"distances_sum":2303.551451856649}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9383444680319688,"seconds":3.6135315895080566e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.7421875,"distances_sum":2340.9624658569155}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8916015625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8916015625,"f1":0.9383444680319688,"seconds":3.6135315895080566e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.7421875,"distances_sum":2340.9624658569155}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.965464743589744,"seconds":9.04873013496399e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.8828125,"distances_sum":2559.52964380611}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9621539918414923,"seconds":7.692724466323853e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.890625,"distances_sum":2526.186676644187}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9610004578754584,"seconds":6.517395377159119e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.8828125,"distances_sum":2491.6617473836977}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9384765625,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.965464743589744,"seconds":9.04873013496399e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.8828125,"distances_sum":2559.52964380611}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9384765625,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.965464743589744,"seconds":9.04873013496399e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.8828125,"distances_sum":2559.52964380611}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.251953125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.251953125,"f1":null,"seconds":3.248453140258789e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":6.28125,"distances_sum":539.7602047137226}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.427734375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.427734375,"f1":null,"seconds":5.381181836128235e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":6.1875,"distances_sum":942.9477437233267}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.427734375,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.427734375,"f1":null,"seconds":5.381181836128235e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":6.1875,"distances_sum":942.9477437233267}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.43359375, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.43359375,"f1":null,"seconds":4.023313522338867e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":6.21875,"distances_sum":980.1043382458942}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6923828125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6923828125,"f1":0.8074179292929301,"seconds":6.252899765968323e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":7.8046875,"distances_sum":1646.8248014955866}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.765625,"f1":0.8594873876123884,"seconds":5.731359124183655e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":7.90625,"distances_sum":1847.9643709920633}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.765625,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.765625,"f1":0.8594873876123884,"seconds":5.731359124183655e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":7.90625,"distances_sum":1847.9643709920633}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9482371794871801,"seconds":9.277835488319397e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.7890625,"distances_sum":2423.472963172567}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7685546875, conf: {"ssize":9,"bsize":5}, perf: {"precision":1.0,"recall":0.7685546875,"f1":0.8615192099567107,"seconds":5.675479769706726e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":7.8359375,"distances_sum":1859.877728687324}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9579498626373631,"seconds":8.529052138328552e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.921875,"distances_sum":2463.08411691374}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.81640625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.81640625,"f1":0.8936157592407601,"seconds":7.2624534368515015e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.640625,"distances_sum":2020.2157861863732}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.78125,"f1":0.8689730408480417,"seconds":5.898997187614441e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":7.9375,"distances_sum":1872.1696362546409}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8369140625, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8369140625,"f1":0.9058925449550457,"seconds":8.64267349243164e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.6796875,"distances_sum":2116.3728065945775}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9248046875,"state":{"ssize":9,"bsize":9},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.9579498626373631,"seconds":8.529052138328552e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.921875,"distances_sum":2463.08411691374}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9248046875,"state":{"ssize":9,"bsize":9},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.9579498626373631,"seconds":8.529052138328552e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.921875,"distances_sum":2463.08411691374}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6669921875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6669921875,"f1":0.789330461205462,"seconds":5.3551048040390015e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.7265625,"distances_sum":1566.3296793837162}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7646484375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7646484375,"f1":0.8554388320013326,"seconds":5.949288606643677e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.109375,"distances_sum":1861.2809049776906}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.234375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.234375,"f1":null,"seconds":4.548579454421997e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":6.3515625,"distances_sum":538.993757802778}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7646484375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7646484375,"f1":0.8554388320013326,"seconds":5.949288606643677e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.109375,"distances_sum":1861.2809049776906}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9447833416583424,"seconds":6.57886266708374e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.796875,"distances_sum":2427.932026594636}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8369140625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8369140625,"f1":0.9058753746253754,"seconds":4.915520548820496e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.65625,"distances_sum":2129.5056345851276}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9619848901098909,"seconds":3.9655715227127075e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.875,"distances_sum":2514.8255134134315}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8232421875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8232421875,"f1":0.8967293123543131,"seconds":5.54695725440979e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.6015625,"distances_sum":2080.6799443661525}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7734375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7734375,"f1":0.8624443265068273,"seconds":5.623325705528259e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.09375,"distances_sum":1885.3808002001717}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7900390625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7900390625,"f1":0.8765286796536804,"seconds":5.533918738365173e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.3203125,"distances_sum":1919.15429360283}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.931640625,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9619848901098909,"seconds":3.9655715227127075e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.875,"distances_sum":2514.8255134134315}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9653903388278392,"seconds":6.243586540222168e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.8828125,"distances_sum":2557.5079091485773}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9698374542124546,"seconds":6.278976798057556e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.9375,"distances_sum":2567.3742497620965}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9638450091575097,"seconds":6.258487701416016e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.8984375,"distances_sum":2538.8065995433103}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9462890625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.9698374542124546,"seconds":6.278976798057556e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.9375,"distances_sum":2567.3742497620965}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9462890625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.9698374542124546,"seconds":6.278976798057556e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.9375,"distances_sum":2567.3742497620965}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6611328125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6611328125,"f1":0.7850919913419923,"seconds":4.90434467792511e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":7.625,"distances_sum":1554.4999892657477}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.552734375, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.552734375,"f1":0.6969357031857037,"seconds":3.946945071220398e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":6.9140625,"distances_sum":1213.345605251468}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6611328125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6611328125,"f1":0.7850919913419923,"seconds":4.90434467792511e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":7.625,"distances_sum":1554.4999892657477}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8330078125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8330078125,"f1":0.9029793123543132,"seconds":5.204230546951294e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.6953125,"distances_sum":2082.2048269461243}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7548828125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7548828125,"f1":0.8532888986013996,"seconds":4.868954420089722e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.0546875,"distances_sum":1845.469089740696}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.755859375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.755859375,"f1":0.8512430278055284,"seconds":4.84660267829895e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":7.9609375,"distances_sum":1846.2753576956486}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8330078125,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8330078125,"f1":0.9029793123543132,"seconds":5.204230546951294e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.6953125,"distances_sum":2082.2048269461243}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.869140625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.869140625,"f1":0.9227137445887452,"seconds":5.295500159263611e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.625,"distances_sum":2255.006471519363}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.9278591200466206,"seconds":5.407258868217468e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.6328125,"distances_sum":2303.408148418573}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9565705128205132,"seconds":5.6996941566467285e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.8515625,"distances_sum":2481.1007054564066}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9579498626373631,"seconds":5.882233381271362e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.875,"distances_sum":2493.421371093481}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.9317479395604401,"seconds":6.0889869928359985e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.7421875,"distances_sum":2291.3785510429284}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9248046875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.9579498626373631,"seconds":5.882233381271362e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.875,"distances_sum":2493.421371093481}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9248046875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.9579498626373631,"seconds":5.882233381271362e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.875,"distances_sum":2493.421371093481}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4326171875, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.4326171875,"f1":null,"seconds":4.364177584648132e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":6.1640625,"distances_sum":976.3519914102213}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7861328125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7861328125,"f1":0.8737439643689653,"seconds":6.6105276346206665e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.1875,"distances_sum":1960.7422852751488}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5830078125, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.5830078125,"f1":0.7238296425796432,"seconds":4.652887582778931e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":7.078125,"distances_sum":1316.2020505859468}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7861328125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7861328125,"f1":0.8737439643689653,"seconds":6.6105276346206665e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.1875,"distances_sum":1960.7422852751488}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9331761988011996,"seconds":5.709007382392883e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.6640625,"distances_sum":2366.509413719759}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9577609890109896,"seconds":5.366280674934387e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.8515625,"distances_sum":2530.8626815641155}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9513679029304034,"seconds":3.4384429454803467e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.859375,"distances_sum":2464.3250507269486}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8349609375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8349609375,"f1":0.9046646062271073,"seconds":5.098059773445129e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.484375,"distances_sum":2115.433849867455}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.92578125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.92578125,"f1":0.9577609890109896,"seconds":5.366280674934387e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.8515625,"distances_sum":2530.8626815641155}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.969831730769231,"seconds":6.03310763835907e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.890625,"distances_sum":2610.872618495739}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":3,"bsize":12}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9651442307692313,"seconds":6.3534826040267944e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.8515625,"distances_sum":2586.269786451659}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.967748397435898,"seconds":5.6568533182144165e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.8671875,"distances_sum":2618.9624443775606}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9697265625, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.9697265625,"f1":0.9833905677655679,"seconds":5.817040801048279e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.9609375,"distances_sum":2705.5139719263257}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9624656593406599,"seconds":5.651265382766724e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.8203125,"distances_sum":2574.7341101232987}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9697265625,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.9697265625,"f1":0.9833905677655679,"seconds":5.817040801048279e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.9609375,"distances_sum":2705.5139719263257}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9697265625,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.9697265625,"f1":0.9833905677655679,"seconds":5.817040801048279e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.9609375,"distances_sum":2705.5139719263257}}, n: 9
mean(cfft.distances) = 0.34056621305048856
mean(cdnet.distances) = 0.37669280204116856
mean(crand.distances) = 0.33135192237187944
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8533333333333334
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.9288888888888889
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.9022222222222221
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8777777777777778
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8911111111111111
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8844444444444445
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8488888888888889
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.9
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8977777777777778
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.8777777777777779
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9422222222222222
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9377777777777778
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.9
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.9222222222222222
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8844444444444445
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.9022222222222221
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8777777777777778
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8977777777777778
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9111111111111111
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9422222222222222
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9177777777777778
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8244444444444445
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.9155555555555557
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8822222222222221
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8577777777777778
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.8688888888888888
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.8777777777777778
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8644444444444445
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.8999999999999999
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.8911111111111111
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.9044444444444445
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.9044444444444445
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9177777777777777
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9088888888888889
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9022222222222224
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9155555555555556
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 2, 2, 3, 3, 1]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 2, 2, 3, 3, 1]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 2, 2, 3, 3, 1]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 2, 2, 3, 3, 1]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 2, 2, 3, 3, 1]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 2, 2, 3, 3, 1]
acc = 0.92
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 2, 2, 3, 3, 1]
acc = 0.96
*** finished computation of 12 references, err: [Inf, 0.6065741968154907] ***
*** center 1: selecting labels [1] (freq >= 1) [from [40, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 2]]
** centroid: 3, normalized-entropy: 0.9709505944546688, [(2, 3), (3, 2)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 15, 2]]
** centroid: 4, normalized-entropy: 0.5225593745369407, [(2, 15), (3, 2)]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 14]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 4, 17]]
** centroid: 8, normalized-entropy: 0.7024665512903904, [(2, 4), (3, 17)]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [6, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
finished with 15 centroids; started with 12
acc = 0.9466666666666667
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.2597214245508696] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2597214245508696, 0.2077561186028046] ***
*** finished computation of 7 references, err: [Inf, 0.2597214245508696, 0.2077561186028046] ***
*** center 1: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [60, 2, 0]]
** centroid: 3, normalized-entropy: 0.2055925081850832, [(1, 60), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [38, 19, 0]]
** centroid: 4, normalized-entropy: 0.9182958340544894, [(1, 38), (2, 19)]
*** center 5: selecting labels [1, 2, 3] (freq >= 1) [from [1, 115, 21]]
** centroid: 5, normalized-entropy: 0.4281128877768271, [(1, 1), (2, 115), (3, 21)]
*** center 6: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [47, 92, 0]]
** centroid: 7, normalized-entropy: 0.9230175044782261, [(1, 47), (2, 92)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2317502045741436] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2317502045741436, 0.18960728566685894] ***
*** starting iteration: 2; err: [Inf, 0.2317502045741436, 0.18960728566685894] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2317502045741436, 0.18960728566685894, 0.1859278158554207] ***
*** starting iteration: 3; err: [Inf, 0.2317502045741436, 0.18960728566685894, 0.1859278158554207] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2317502045741436, 0.18960728566685894, 0.1859278158554207, 0.18526015603549031] ***
*** finished computation of 7 references, err: [Inf, 0.2317502045741436, 0.18960728566685894, 0.1859278158554207, 0.18526015603549031] ***
*** center 1: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 72, 19]]
** centroid: 2, normalized-entropy: 0.7391658175693049, [(2, 72), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [86, 13, 0]]
** centroid: 3, normalized-entropy: 0.5610284863400681, [(1, 86), (2, 13)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [41, 72, 0]]
** centroid: 4, normalized-entropy: 0.9450087651303387, [(1, 41), (2, 72)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [26, 69, 0]]
** centroid: 5, normalized-entropy: 0.846701711600821, [(1, 26), (2, 69)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [99, 3, 0]]
** centroid: 6, normalized-entropy: 0.1914332548141934, [(1, 99), (2, 3)]
*** center 7: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23176585089602414] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23176585089602414, 0.19186851076748238] ***
*** starting iteration: 2; err: [Inf, 0.23176585089602414, 0.19186851076748238] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23176585089602414, 0.19186851076748238, 0.189004541213472] ***
*** starting iteration: 3; err: [Inf, 0.23176585089602414, 0.19186851076748238, 0.189004541213472] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23176585089602414, 0.19186851076748238, 0.189004541213472, 0.18846472078093748] ***
*** finished computation of 7 references, err: [Inf, 0.23176585089602414, 0.19186851076748238, 0.189004541213472, 0.18846472078093748] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [48, 61, 0]]
** centroid: 1, normalized-entropy: 0.9897148052727835, [(1, 48), (2, 61)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [113, 5, 0]]
** centroid: 2, normalized-entropy: 0.2530679372656293, [(1, 113), (2, 5)]
*** center 3: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [2, 94, 0]]
** centroid: 4, normalized-entropy: 0.14609425012013613, [(1, 2), (2, 94)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [86, 8, 0]]
** centroid: 5, normalized-entropy: 0.4199210973757179, [(1, 86), (2, 8)]
*** center 6: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 65, 22]]
** centroid: 7, normalized-entropy: 0.8158009273789572, [(2, 65), (3, 22)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21327041832215568] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21327041832215568, 0.1533612758704313] ***
*** finished computation of 7 references, err: [Inf, 0.21327041832215568, 0.1533612758704313] ***
*** center 1: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 60, 21]]
** centroid: 2, normalized-entropy: 0.8256265261578954, [(2, 60), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [76, 1, 0]]
** centroid: 3, normalized-entropy: 0.1000009430103234, [(1, 76), (2, 1)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [103, 39, 0]]
** centroid: 4, normalized-entropy: 0.8480552826349698, [(1, 103), (2, 39)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [60, 60, 0]]
** centroid: 5, normalized-entropy: 1.0, [(1, 60), (2, 60)]
*** center 6: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [7, 68, 0]]
** centroid: 7, normalized-entropy: 0.44749925503686355, [(1, 7), (2, 68)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2080113843021945] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2080113843021945, 0.15020433382125575] ***
*** finished computation of 7 references, err: [Inf, 0.2080113843021945, 0.15020433382125575] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [80, 12, 0]]
** centroid: 1, normalized-entropy: 0.5586293734521991, [(1, 80), (2, 12)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [106, 18, 0]]
** centroid: 2, normalized-entropy: 0.5975977764379984, [(1, 106), (2, 18)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 59, 19]]
** centroid: 3, normalized-entropy: 0.8009591077369054, [(2, 59), (3, 19)]
*** center 4: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [77, 59, 0]]
** centroid: 5, normalized-entropy: 0.9873267857661039, [(1, 77), (2, 59)]
*** center 6: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 81, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18945133691581004] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18945133691581004, 0.15389528065344607] ***
*** finished computation of 7 references, err: [Inf, 0.18945133691581004, 0.15389528065344607] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [84, 44, 0]]
** centroid: 1, normalized-entropy: 0.9283620723948678, [(1, 84), (2, 44)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [86, 12, 0]]
** centroid: 2, normalized-entropy: 0.5363596511250623, [(1, 86), (2, 12)]
*** center 3: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 82, 18]]
** centroid: 4, normalized-entropy: 0.6800770457282798, [(2, 82), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [99, 20, 0]]
** centroid: 5, normalized-entropy: 0.6532642567060226, [(1, 99), (2, 20)]
*** center 6: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 75, 4]]
** centroid: 7, normalized-entropy: 0.2890794597316462, [(2, 75), (3, 4)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21615998640606204] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21615998640606204, 0.18800175609974668] ***
*** finished computation of 7 references, err: [Inf, 0.21615998640606204, 0.18800175609974668] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [107, 2, 0]]
** centroid: 1, normalized-entropy: 0.13206535647488304, [(1, 107), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [62, 35, 0]]
** centroid: 2, normalized-entropy: 0.94336565829991, [(1, 62), (2, 35)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [8, 84, 0]]
** centroid: 3, normalized-entropy: 0.42622865699814483, [(1, 8), (2, 84)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [70, 49, 0]]
** centroid: 4, normalized-entropy: 0.9774178175281716, [(1, 70), (2, 49)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 59, 19]]
** centroid: 5, normalized-entropy: 0.8009591077369054, [(2, 59), (3, 19)]
*** center 6: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2342182038173169] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2342182038173169, 0.19345031582263075] ***
*** finished computation of 7 references, err: [Inf, 0.2342182038173169, 0.19345031582263075] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [120, 22, 0]]
** centroid: 1, normalized-entropy: 0.6220403090607189, [(1, 120), (2, 22)]
*** center 2: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [93, 6, 0]]
** centroid: 3, normalized-entropy: 0.32984607020714635, [(1, 93), (2, 6)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 86, 8]]
** centroid: 4, normalized-entropy: 0.4199210973757179, [(2, 86), (3, 8)]
*** center 5: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [57, 22, 0]]
** centroid: 6, normalized-entropy: 0.8533728188427888, [(1, 57), (2, 22)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 97, 14]]
** centroid: 7, normalized-entropy: 0.5467175366117469, [(2, 97), (3, 14)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24482052623959924] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24482052623959924, 0.20860184934381787] ***
*** starting iteration: 2; err: [Inf, 0.24482052623959924, 0.20860184934381787] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24482052623959924, 0.20860184934381787, 0.19541740705267535] ***
*** starting iteration: 3; err: [Inf, 0.24482052623959924, 0.20860184934381787, 0.19541740705267535] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24482052623959924, 0.20860184934381787, 0.19541740705267535, 0.19177566764053997] ***
*** finished computation of 7 references, err: [Inf, 0.24482052623959924, 0.20860184934381787, 0.19541740705267535, 0.19177566764053997] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [40, 36, 0]]
** centroid: 1, normalized-entropy: 0.9980008838722993, [(1, 40), (2, 36)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 91, 21]]
** centroid: 2, normalized-entropy: 0.6962122601251459, [(2, 91), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [37, 65, 0]]
** centroid: 3, normalized-entropy: 0.9449382598624693, [(1, 37), (2, 65)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [65, 26, 0]]
** centroid: 4, normalized-entropy: 0.8631205685666311, [(1, 65), (2, 26)]
*** center 5: selecting labels [1] (freq >= 1) [from [115, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [73, 10, 0]]
** centroid: 7, normalized-entropy: 0.530744566923854, [(1, 73), (2, 10)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24719484220084356] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24719484220084356, 0.20028949643567628] ***
*** starting iteration: 2; err: [Inf, 0.24719484220084356, 0.20028949643567628] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24719484220084356, 0.20028949643567628, 0.19280204283160116] ***
*** starting iteration: 3; err: [Inf, 0.24719484220084356, 0.20028949643567628, 0.19280204283160116] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24719484220084356, 0.20028949643567628, 0.19280204283160116, 0.1882064245945622] ***
*** finished computation of 7 references, err: [Inf, 0.24719484220084356, 0.20028949643567628, 0.19280204283160116, 0.1882064245945622] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [62, 33, 0]]
** centroid: 1, normalized-entropy: 0.9316958485118404, [(1, 62), (2, 33)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [85, 40, 0]]
** centroid: 2, normalized-entropy: 0.9043814577244941, [(1, 85), (2, 40)]
*** center 3: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 112, 19]]
** centroid: 4, normalized-entropy: 0.59728274179791, [(2, 112), (3, 19)]
*** center 5: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [46, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [100, 44, 0]]
** centroid: 7, normalized-entropy: 0.887976319515135, [(1, 100), (2, 44)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2362282435749022] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2362282435749022, 0.19007108889023092] ***
*** starting iteration: 2; err: [Inf, 0.2362282435749022, 0.19007108889023092] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2362282435749022, 0.19007108889023092, 0.1885450941390418] ***
*** starting iteration: 3; err: [Inf, 0.2362282435749022, 0.19007108889023092, 0.1885450941390418] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2362282435749022, 0.19007108889023092, 0.1885450941390418, 0.18856492814799208] ***
*** finished computation of 7 references, err: [Inf, 0.2362282435749022, 0.19007108889023092, 0.1885450941390418, 0.18856492814799208] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [77, 3, 0]]
** centroid: 1, normalized-entropy: 0.2307099556914763, [(1, 77), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [99, 5, 0]]
** centroid: 2, normalized-entropy: 0.2781710079264946, [(1, 99), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 86, 22]]
** centroid: 3, normalized-entropy: 0.7292739418449411, [(2, 86), (3, 22)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [83, 7, 0]]
** centroid: 4, normalized-entropy: 0.39430023792747493, [(1, 83), (2, 7)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 100, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [84, 32, 0]]
** centroid: 6, normalized-entropy: 0.8497511372532974, [(1, 84), (2, 32)]
*** center 7: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.33034527047282763] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33034527047282763, 0.22038322788112247] ***
*** finished computation of 7 references, err: [Inf, 0.33034527047282763, 0.22038322788112247] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [144, 143, 16]]
** centroid: 1, normalized-entropy: 0.7857489115690931, [(1, 144), (2, 143), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [52, 1, 0]]
** centroid: 2, normalized-entropy: 0.13503620280212753, [(1, 52), (2, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
*** center 5: selecting labels [1, 2, 3] (freq >= 1) [from [64, 84, 5]]
** centroid: 5, normalized-entropy: 0.7332642335900585, [(1, 64), (2, 84), (3, 5)]
*** center 6: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [42, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.21097003316682675] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21097003316682675, 0.16005257158952094] ***
*** finished computation of 7 references, err: [Inf, 0.21097003316682675, 0.16005257158952094] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [131, 9, 0]]
** centroid: 1, normalized-entropy: 0.34422774398506073, [(1, 131), (2, 9)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [10, 66, 1]]
** centroid: 2, normalized-entropy: 0.4129170640507142, [(1, 10), (2, 66), (3, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [13, 55, 0]]
** centroid: 4, normalized-entropy: 0.7039260680195971, [(1, 13), (2, 55)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 61, 18]]
** centroid: 5, normalized-entropy: 0.7742411580847273, [(2, 61), (3, 18)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [76, 38, 0]]
** centroid: 6, normalized-entropy: 0.9182958340544894, [(1, 76), (2, 38)]
*** center 7: selecting labels [1] (freq >= 1) [from [103, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.23787410634275208] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23787410634275208, 0.18530492656138156] ***
*** finished computation of 7 references, err: [Inf, 0.23787410634275208, 0.18530492656138156] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 95, 16]]
** centroid: 1, normalized-entropy: 0.5949898952560516, [(2, 95), (3, 16)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [32, 113, 6]]
** centroid: 2, normalized-entropy: 0.6134188116993629, [(1, 32), (2, 113), (3, 6)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [114, 4, 0]]
** centroid: 3, normalized-entropy: 0.21357981533827744, [(1, 114), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [18, 18, 0]]
** centroid: 4, normalized-entropy: 1.0, [(1, 18), (2, 18)]
*** center 5: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [182, 3, 0]]
** centroid: 6, normalized-entropy: 0.11963274690373807, [(1, 182), (2, 3)]
*** center 7: selecting labels [1] (freq >= 1) [from [45, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4969566549837321] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4969566549837321, 0.3014928209609366] ***
*** finished computation of 3 references, err: [Inf, 0.4969566549837321, 0.3014928209609366] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [125, 109, 0]]
** centroid: 1, normalized-entropy: 0.99662486067979, [(1, 125), (2, 109)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [132, 119, 21]]
** centroid: 2, normalized-entropy: 0.8285775205997358, [(1, 132), (2, 119), (3, 21)]
*** center 3: selecting labels [1] (freq >= 1) [from [160, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3682594013468794] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3682594013468794, 0.2999729114023318] ***
*** finished computation of 3 references, err: [Inf, 0.3682594013468794, 0.2999729114023318] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [156, 160, 19]]
** centroid: 1, normalized-entropy: 0.7933591843190184, [(1, 156), (2, 160), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [119, 69, 0]]
** centroid: 2, normalized-entropy: 0.9483574615109408, [(1, 119), (2, 69)]
*** center 3: selecting labels [1] (freq >= 1) [from [144, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4406252556956601] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4406252556956601, 0.3080036741886651] ***
*** finished computation of 3 references, err: [Inf, 0.4406252556956601, 0.3080036741886651] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [296, 14, 0]]
** centroid: 1, normalized-entropy: 0.2654754854839938, [(1, 296), (2, 14)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 158, 22]]
** centroid: 2, normalized-entropy: 0.5357150195407704, [(2, 158), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [116, 61, 0]]
** centroid: 3, normalized-entropy: 0.9291831036076619, [(1, 116), (2, 61)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.23509037978359842] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23509037978359842, 0.19102024997643255] ***
*** finished computation of 7 references, err: [Inf, 0.23509037978359842, 0.19102024997643255] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [54, 75, 0]]
** centroid: 1, normalized-entropy: 0.9807983646944296, [(1, 54), (2, 75)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [67, 6, 0]]
** centroid: 2, normalized-entropy: 0.4098553703184051, [(1, 67), (2, 6)]
*** center 3: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 57, 21]]
** centroid: 4, normalized-entropy: 0.8403586716091169, [(2, 57), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [19, 89, 0]]
** centroid: 5, normalized-entropy: 0.6710828900205286, [(1, 19), (2, 89)]
*** center 6: selecting labels [1] (freq >= 2) [from [79, 1, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [109, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.23503790813466086] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23503790813466086, 0.1864242765897497] ***
*** finished computation of 7 references, err: [Inf, 0.23503790813466086, 0.1864242765897497] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [39, 69, 0]]
** centroid: 1, normalized-entropy: 0.943601631299382, [(1, 39), (2, 69)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [85, 25, 0]]
** centroid: 2, normalized-entropy: 0.7732266742876346, [(1, 85), (2, 25)]
*** center 3: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 79, 19]]
** centroid: 4, normalized-entropy: 0.7095128863456239, [(2, 79), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [66, 56, 0]]
** centroid: 5, normalized-entropy: 0.995148095654003, [(1, 66), (2, 56)]
*** center 6: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.23867330314504956] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23867330314504956, 0.19287806413118272] ***
*** finished computation of 7 references, err: [Inf, 0.23867330314504956, 0.19287806413118272] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [82, 41, 0]]
** centroid: 1, normalized-entropy: 0.9182958340544894, [(1, 82), (2, 41)]
*** center 2: selecting labels [1] (freq >= 2) [from [59, 1, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 87, 22]]
** centroid: 4, normalized-entropy: 0.725582675704817, [(2, 87), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [67, 29, 0]]
** centroid: 5, normalized-entropy: 0.8838226609360483, [(1, 67), (2, 29)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [27, 75, 0]]
** centroid: 6, normalized-entropy: 0.8337649072106652, [(1, 27), (2, 75)]
*** center 7: selecting labels [1] (freq >= 2) [from [99, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.18704042747314717] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18704042747314717, 0.15462487071539993] ***
*** finished computation of 7 references, err: [Inf, 0.18704042747314717, 0.15462487071539993] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [161, 10, 0]]
** centroid: 1, normalized-entropy: 0.3213794252641027, [(1, 161), (2, 10)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [60, 19, 0]]
** centroid: 2, normalized-entropy: 0.7958812735955936, [(1, 60), (2, 19)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 44, 21]]
** centroid: 3, normalized-entropy: 0.9076961653608385, [(2, 44), (3, 21)]
*** center 4: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [31, 80, 0]]
** centroid: 5, normalized-entropy: 0.8544669184854021, [(1, 31), (2, 80)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 75, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18476981452681582] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18476981452681582, 0.15036263825396995] ***
*** finished computation of 7 references, err: [Inf, 0.18476981452681582, 0.15036263825396995] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [83, 67, 0]]
** centroid: 1, normalized-entropy: 0.9917770334127775, [(1, 83), (2, 67)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [89, 3, 0]]
** centroid: 2, normalized-entropy: 0.20731018585948177, [(1, 89), (2, 3)]
*** center 3: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 62, 19]]
** centroid: 4, normalized-entropy: 0.785889583138768, [(2, 62), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [110, 11, 0]]
** centroid: 5, normalized-entropy: 0.43949698692151346, [(1, 110), (2, 11)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [2, 86, 0]]
** centroid: 6, normalized-entropy: 0.1564910629057016, [(1, 2), (2, 86)]
*** center 7: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.18158740759862105] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18158740759862105, 0.15340507023086747] ***
*** finished computation of 7 references, err: [Inf, 0.18158740759862105, 0.15340507023086747] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [96, 23, 0]]
** centroid: 1, normalized-entropy: 0.7082772165975041, [(1, 96), (2, 23)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [66, 26, 0]]
** centroid: 2, normalized-entropy: 0.8589810370425965, [(1, 66), (2, 26)]
*** center 3: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 61, 18]]
** centroid: 4, normalized-entropy: 0.7742411580847273, [(2, 61), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [95, 31, 0]]
** centroid: 5, normalized-entropy: 0.8049277932345736, [(1, 95), (2, 31)]
*** center 6: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 92, 4]]
** centroid: 7, normalized-entropy: 0.24988229283318547, [(2, 92), (3, 4)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24295473917647525] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24295473917647525, 0.189635836530488] ***
*** starting iteration: 2; err: [Inf, 0.24295473917647525, 0.189635836530488] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24295473917647525, 0.189635836530488, 0.1850902530883492] ***
*** starting iteration: 3; err: [Inf, 0.24295473917647525, 0.189635836530488, 0.1850902530883492] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24295473917647525, 0.189635836530488, 0.1850902530883492, 0.1841013301695297] ***
*** finished computation of 7 references, err: [Inf, 0.24295473917647525, 0.189635836530488, 0.1850902530883492, 0.1841013301695297] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [15, 85, 0]]
** centroid: 1, normalized-entropy: 0.6098403047164005, [(1, 15), (2, 85)]
*** center 2: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [81, 36, 0]]
** centroid: 3, normalized-entropy: 0.8904916402194913, [(1, 81), (2, 36)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [68, 42, 0]]
** centroid: 4, normalized-entropy: 0.9593160320543779, [(1, 68), (2, 42)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 64, 21]]
** centroid: 5, normalized-entropy: 0.806583102274714, [(2, 64), (3, 21)]
*** center 6: selecting labels [1] (freq >= 2) [from [94, 1, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2186838254706747] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2186838254706747, 0.18855164663913637] ***
*** starting iteration: 2; err: [Inf, 0.2186838254706747, 0.18855164663913637] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2186838254706747, 0.18855164663913637, 0.18563786953215725] ***
*** starting iteration: 3; err: [Inf, 0.2186838254706747, 0.18855164663913637, 0.18563786953215725] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2186838254706747, 0.18855164663913637, 0.18563786953215725, 0.18502050905727196] ***
*** finished computation of 7 references, err: [Inf, 0.2186838254706747, 0.18855164663913637, 0.18563786953215725, 0.18502050905727196] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 88, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [70, 39, 0]]
** centroid: 3, normalized-entropy: 0.9408403089808224, [(1, 70), (2, 39)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [90, 12, 0]]
** centroid: 4, normalized-entropy: 0.5225593745369407, [(1, 90), (2, 12)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [106, 4, 0]]
** centroid: 5, normalized-entropy: 0.22536363912739493, [(1, 106), (2, 4)]
*** center 6: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 86, 19]]
** centroid: 7, normalized-entropy: 0.6821560732869936, [(2, 86), (3, 19)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22358703695103593] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22358703695103593, 0.19014321064445255] ***
*** starting iteration: 2; err: [Inf, 0.22358703695103593, 0.19014321064445255] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22358703695103593, 0.19014321064445255, 0.1862515032094536] ***
*** starting iteration: 3; err: [Inf, 0.22358703695103593, 0.19014321064445255, 0.1862515032094536] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22358703695103593, 0.19014321064445255, 0.1862515032094536, 0.18606826821356073] ***
*** finished computation of 7 references, err: [Inf, 0.22358703695103593, 0.19014321064445255, 0.1862515032094536, 0.18606826821356073] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [8, 94, 0]]
** centroid: 1, normalized-entropy: 0.3966277727783787, [(1, 8), (2, 94)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [88, 2, 0]]
** centroid: 2, normalized-entropy: 0.1537421803287618, [(1, 88), (2, 2)]
*** center 3: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 73, 22]]
** centroid: 4, normalized-entropy: 0.7807536250860868, [(2, 73), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [49, 62, 0]]
** centroid: 5, normalized-entropy: 0.9900829509840566, [(1, 49), (2, 62)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [69, 2, 0]]
** centroid: 6, normalized-entropy: 0.18512476010054582, [(1, 69), (2, 2)]
*** center 7: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18653948420683877] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18653948420683877, 0.1520987994697605] ***
*** starting iteration: 2; err: [Inf, 0.18653948420683877, 0.1520987994697605] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18653948420683877, 0.1520987994697605, 0.14754714024764998] ***
*** starting iteration: 3; err: [Inf, 0.18653948420683877, 0.1520987994697605, 0.14754714024764998] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18653948420683877, 0.1520987994697605, 0.14754714024764998, 0.1460678882969616] ***
*** starting iteration: 4; err: [Inf, 0.18653948420683877, 0.1520987994697605, 0.14754714024764998, 0.1460678882969616] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18653948420683877, 0.1520987994697605, 0.14754714024764998, 0.1460678882969616, 0.14545661891256836] ***
*** finished computation of 7 references, err: [Inf, 0.18653948420683877, 0.1520987994697605, 0.14754714024764998, 0.1460678882969616, 0.14545661891256836] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [82, 39, 0]]
** centroid: 1, normalized-entropy: 0.9068801718670692, [(1, 82), (2, 39)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [66, 36, 0]]
** centroid: 2, normalized-entropy: 0.9366673818775627, [(1, 66), (2, 36)]
*** center 3: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 75, 21]]
** centroid: 4, normalized-entropy: 0.7578784625383954, [(2, 75), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [20, 76, 0]]
** centroid: 5, normalized-entropy: 0.7382848661434506, [(1, 20), (2, 76)]
*** center 6: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [99, 2, 0]]
** centroid: 7, normalized-entropy: 0.1403272709905931, [(1, 99), (2, 2)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20789617911030747] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20789617911030747, 0.15071096254905023] ***
*** starting iteration: 2; err: [Inf, 0.20789617911030747, 0.15071096254905023] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20789617911030747, 0.15071096254905023, 0.14630169269029816] ***
*** starting iteration: 3; err: [Inf, 0.20789617911030747, 0.15071096254905023, 0.14630169269029816] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20789617911030747, 0.15071096254905023, 0.14630169269029816, 0.146230388910969] ***
*** finished computation of 7 references, err: [Inf, 0.20789617911030747, 0.15071096254905023, 0.14630169269029816, 0.146230388910969] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [103, 7, 0]]
** centroid: 1, normalized-entropy: 0.34171390666761664, [(1, 103), (2, 7)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 40, 19]]
** centroid: 2, normalized-entropy: 0.9065795484987461, [(2, 40), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [127, 2, 0]]
** centroid: 3, normalized-entropy: 0.11539039325220708, [(1, 127), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [104, 12, 0]]
** centroid: 4, normalized-entropy: 0.47983202361612853, [(1, 104), (2, 12)]
*** center 5: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [3, 84, 0]]
** centroid: 6, normalized-entropy: 0.21639693245126485, [(1, 3), (2, 84)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 84, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19184591732863365] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19184591732863365, 0.1515797022730112] ***
*** starting iteration: 2; err: [Inf, 0.19184591732863365, 0.1515797022730112] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19184591732863365, 0.1515797022730112, 0.14763505511946495] ***
*** starting iteration: 3; err: [Inf, 0.19184591732863365, 0.1515797022730112, 0.14763505511946495] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19184591732863365, 0.1515797022730112, 0.14763505511946495, 0.14651325508404797] ***
*** starting iteration: 4; err: [Inf, 0.19184591732863365, 0.1515797022730112, 0.14763505511946495, 0.14651325508404797] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19184591732863365, 0.1515797022730112, 0.14763505511946495, 0.14651325508404797, 0.14605672637592704] ***
*** finished computation of 7 references, err: [Inf, 0.19184591732863365, 0.1515797022730112, 0.14763505511946495, 0.14651325508404797, 0.14605672637592704] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [87, 2, 0]]
** centroid: 1, normalized-entropy: 0.1551032721030341, [(1, 87), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [101, 4, 0]]
** centroid: 2, normalized-entropy: 0.23348971044772968, [(1, 101), (2, 4)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 63, 22]]
** centroid: 3, normalized-entropy: 0.8249658680139929, [(2, 63), (3, 22)]
*** center 4: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [34, 69, 0]]
** centroid: 5, normalized-entropy: 0.9150255357249155, [(1, 34), (2, 69)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [5, 95, 0]]
** centroid: 6, normalized-entropy: 0.2863969571159561, [(1, 5), (2, 95)]
*** center 7: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19122803691206863] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19122803691206863, 0.15199900052283663] ***
*** starting iteration: 2; err: [Inf, 0.19122803691206863, 0.15199900052283663] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19122803691206863, 0.15199900052283663, 0.14720842830400477] ***
*** starting iteration: 3; err: [Inf, 0.19122803691206863, 0.15199900052283663, 0.14720842830400477] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19122803691206863, 0.15199900052283663, 0.14720842830400477, 0.14678388870357573] ***
*** finished computation of 7 references, err: [Inf, 0.19122803691206863, 0.15199900052283663, 0.14720842830400477, 0.14678388870357573] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [2, 98, 0]]
** centroid: 1, normalized-entropy: 0.14144054254182067, [(1, 2), (2, 98)]
*** center 2: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [70, 43, 0]]
** centroid: 3, normalized-entropy: 0.9584161691555605, [(1, 70), (2, 43)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [77, 12, 0]]
** centroid: 4, normalized-entropy: 0.5705411428522262, [(1, 77), (2, 12)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [96, 14, 0]]
** centroid: 5, normalized-entropy: 0.54991090463341, [(1, 96), (2, 14)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 61, 21]]
** centroid: 6, normalized-entropy: 0.8208002549877175, [(2, 61), (3, 21)]
*** center 7: selecting labels [1] (freq >= 1) [from [102, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20284493959465552] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20284493959465552, 0.1479609138716286] ***
*** starting iteration: 2; err: [Inf, 0.20284493959465552, 0.1479609138716286] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20284493959465552, 0.1479609138716286, 0.1443354497954104] ***
*** starting iteration: 3; err: [Inf, 0.20284493959465552, 0.1479609138716286, 0.1443354497954104] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20284493959465552, 0.1479609138716286, 0.1443354497954104, 0.14351936622566056] ***
*** finished computation of 7 references, err: [Inf, 0.20284493959465552, 0.1479609138716286, 0.1443354497954104, 0.14351936622566056] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [87, 43, 0]]
** centroid: 1, normalized-entropy: 0.9157103623282269, [(1, 87), (2, 43)]
*** center 2: selecting labels [1] (freq >= 1) [from [123, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 81, 19]]
** centroid: 4, normalized-entropy: 0.7014714598838974, [(2, 81), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [52, 35, 0]]
** centroid: 5, normalized-entropy: 0.9722794620968822, [(1, 52), (2, 35)]
*** center 6: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 70, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19292732361198656] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19292732361198656, 0.15465211837847104] ***
*** starting iteration: 2; err: [Inf, 0.19292732361198656, 0.15465211837847104] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19292732361198656, 0.15465211837847104, 0.14957132465604028] ***
*** starting iteration: 3; err: [Inf, 0.19292732361198656, 0.15465211837847104, 0.14957132465604028] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19292732361198656, 0.15465211837847104, 0.14957132465604028, 0.14862911331130826] ***
*** finished computation of 7 references, err: [Inf, 0.19292732361198656, 0.15465211837847104, 0.14957132465604028, 0.14862911331130826] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [4, 94, 0]]
** centroid: 1, normalized-entropy: 0.2460225782203316, [(1, 4), (2, 94)]
*** center 2: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [80, 40, 0]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(1, 80), (2, 40)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [65, 17, 0]]
** centroid: 4, normalized-entropy: 0.7363230272021651, [(1, 65), (2, 17)]
*** center 5: selecting labels [1] (freq >= 1) [from [101, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [91, 9, 0]]
** centroid: 6, normalized-entropy: 0.4364698170641031, [(1, 91), (2, 9)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 73, 22]]
** centroid: 7, normalized-entropy: 0.7807536250860868, [(2, 73), (3, 22)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2245192173309065] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2245192173309065, 0.1903009181342286] ***
*** starting iteration: 2; err: [Inf, 0.2245192173309065, 0.1903009181342286] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2245192173309065, 0.1903009181342286, 0.18874935401944784] ***
*** starting iteration: 3; err: [Inf, 0.2245192173309065, 0.1903009181342286, 0.18874935401944784] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2245192173309065, 0.1903009181342286, 0.18874935401944784, 0.18838029650079124] ***
*** finished computation of 7 references, err: [Inf, 0.2245192173309065, 0.1903009181342286, 0.18874935401944784, 0.18838029650079124] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 92, 21]]
** centroid: 1, normalized-entropy: 0.6926889992682925, [(2, 92), (3, 21)]
*** center 2: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [69, 6, 0]]
** centroid: 3, normalized-entropy: 0.4021791902022729, [(1, 69), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [80, 18, 0]]
** centroid: 4, normalized-entropy: 0.6880476235340797, [(1, 80), (2, 18)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [93, 23, 0]]
** centroid: 5, normalized-entropy: 0.7184663880382773, [(1, 93), (2, 23)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [93, 11, 0]]
** centroid: 6, normalized-entropy: 0.48702128315977294, [(1, 93), (2, 11)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 78, 0]]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 12)
[0.9479929030827234, 0.9359958761156366, 0.9359958761156365, 0.9249818680956405, 0.9229828631026235, 0.9200098301894709, 0.9069968171764579, 0.9049768331205458, 0.8959738181295068, 0.8260026493559428, 0.8141554728381076, 0.7779995564426702]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.3, 2) => 0.9479929030827234
finished with 13
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.2004478008978561] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2004478008978561, 0.14948080676711267] ***
*** starting iteration: 2; err: [Inf, 0.2004478008978561, 0.14948080676711267] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2004478008978561, 0.14948080676711267, 0.1448653546251446] ***
*** starting iteration: 3; err: [Inf, 0.2004478008978561, 0.14948080676711267, 0.1448653546251446] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2004478008978561, 0.14948080676711267, 0.1448653546251446, 0.1444669234856205] ***
*** finished computation of 7 references, err: [Inf, 0.2004478008978561, 0.14948080676711267, 0.1448653546251446, 0.1444669234856205] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [81, 33, 0]]
** centroid: 1, normalized-entropy: 0.8680403986166402, [(1, 81), (2, 33)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [66, 44, 0]]
** centroid: 2, normalized-entropy: 0.9709505944546688, [(1, 66), (2, 44)]
*** center 3: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 69, 21]]
** centroid: 4, normalized-entropy: 0.7837769474847011, [(2, 69), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [23, 82, 0]]
** centroid: 5, normalized-entropy: 0.7584246665423688, [(1, 23), (2, 82)]
*** center 6: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19021966707972304] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19021966707972304, 0.14907392183307563] ***
*** starting iteration: 2; err: [Inf, 0.19021966707972304, 0.14907392183307563] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19021966707972304, 0.14907392183307563, 0.14440079846239973] ***
*** starting iteration: 3; err: [Inf, 0.19021966707972304, 0.14907392183307563, 0.14440079846239973] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19021966707972304, 0.14907392183307563, 0.14440079846239973, 0.14348493896618855] ***
*** finished computation of 7 references, err: [Inf, 0.19021966707972304, 0.14907392183307563, 0.14440079846239973, 0.14348493896618855] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 90, 1]]
** centroid: 1, normalized-entropy: 0.08728058888363333, [(2, 90), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [88, 34, 0]]
** centroid: 3, normalized-entropy: 0.8536576732793314, [(1, 88), (2, 34)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [130, 5, 0]]
** centroid: 4, normalized-entropy: 0.22853814395352806, [(1, 130), (2, 5)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [68, 30, 0]]
** centroid: 5, normalized-entropy: 0.8886466698980794, [(1, 68), (2, 30)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 70, 18]]
** centroid: 6, normalized-entropy: 0.7309263775906009, [(2, 70), (3, 18)]
*** center 7: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18955625354269076] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18955625354269076, 0.14933963069158873] ***
*** starting iteration: 2; err: [Inf, 0.18955625354269076, 0.14933963069158873] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18955625354269076, 0.14933963069158873, 0.14619968838939468] ***
*** starting iteration: 3; err: [Inf, 0.18955625354269076, 0.14933963069158873, 0.14619968838939468] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18955625354269076, 0.14933963069158873, 0.14619968838939468, 0.14558316817447106] ***
*** finished computation of 7 references, err: [Inf, 0.18955625354269076, 0.14933963069158873, 0.14619968838939468, 0.14558316817447106] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [112, 3, 0]]
** centroid: 1, normalized-entropy: 0.17437145292163486, [(1, 112), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [103, 3, 0]]
** centroid: 2, normalized-entropy: 0.1858030790723033, [(1, 103), (2, 3)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 62, 22]]
** centroid: 3, normalized-entropy: 0.8296071030882032, [(2, 62), (3, 22)]
*** center 4: selecting labels [1] (freq >= 1) [from [96, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [67, 2, 0]]
** centroid: 5, normalized-entropy: 0.18927843126120178, [(1, 67), (2, 2)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [30, 69, 0]]
** centroid: 6, normalized-entropy: 0.8849636363831529, [(1, 30), (2, 69)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [4, 94, 0]]
** centroid: 7, normalized-entropy: 0.2460225782203316, [(1, 4), (2, 94)]
finished with 9 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 13)
[0.9499919080757403, 0.9479929030827234, 0.9359958761156366, 0.9359958761156365, 0.9249818680956405, 0.9229828631026235, 0.9200098301894709, 0.9069968171764579, 0.9049768331205458, 0.8959738181295068, 0.8260026493559428, 0.8141554728381076, 0.7779995564426702]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 1) => 0.9499919080757403
finished with 13
iteration 3 finished
generating 4 configurations using top 12 configurations, starting with 13)
[0.9499919080757403, 0.9479929030827234, 0.9359958761156366, 0.9359958761156365, 0.9249818680956405, 0.9229828631026235, 0.9200098301894709, 0.9069968171764579, 0.9049768331205458, 0.8959738181295068, 0.8260026493559428, 0.8141554728381076, 0.7779995564426702]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 1) => 0.9499919080757403
finished with 13
iteration 4 finished
generating 4 configurations using top 12 configurations, starting with 13)
[0.9499919080757403, 0.9479929030827234, 0.9359958761156366, 0.9359958761156365, 0.9249818680956405, 0.9229828631026235, 0.9200098301894709, 0.9069968171764579, 0.9049768331205458, 0.8959738181295068, 0.8260026493559428, 0.8141554728381076, 0.7779995564426702]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 1) => 0.9499919080757403
finished with 14
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.2785844155692135] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2785844155692135, 0.21634343136787168] ***
*** finished computation of 7 references, err: [Inf, 0.2785844155692135, 0.21634343136787168] ***
*** center 1: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [73, 1, 0]]
** centroid: 2, normalized-entropy: 0.10327508457163559, [(1, 73), (2, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [35, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [36, 77, 0]]
** centroid: 4, normalized-entropy: 0.9028350359954473, [(1, 36), (2, 77)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [145, 65, 0]]
** centroid: 5, normalized-entropy: 0.8926230133850988, [(1, 145), (2, 65)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 85, 21]]
** centroid: 6, normalized-entropy: 0.7181384220154764, [(2, 85), (3, 21)]
*** center 7: selecting labels [1] (freq >= 1) [from [42, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3077276406329365] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3077276406329365, 0.2160479197309337] ***
*** finished computation of 7 references, err: [Inf, 0.3077276406329365, 0.2160479197309337] ***
*** center 1: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 117, 19]]
** centroid: 2, normalized-entropy: 0.5834680254658803, [(2, 117), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [37, 58, 0]]
** centroid: 3, normalized-entropy: 0.9644590583765235, [(1, 37), (2, 58)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [55, 14, 0]]
** centroid: 4, normalized-entropy: 0.7276874545656657, [(1, 55), (2, 14)]
*** center 5: selecting labels [1] (freq >= 1) [from [43, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [52, 14, 0]]
** centroid: 6, normalized-entropy: 0.7455178428108284, [(1, 52), (2, 14)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [155, 26, 0]]
** centroid: 7, normalized-entropy: 0.5937093374192539, [(1, 155), (2, 26)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.25275186315664777] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25275186315664777, 0.19918635018404457] ***
*** finished computation of 7 references, err: [Inf, 0.25275186315664777, 0.19918635018404457] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 81, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [101, 43, 0]]
** centroid: 2, normalized-entropy: 0.8795864999831354, [(1, 101), (2, 43)]
*** center 3: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [68, 58, 0]]
** centroid: 5, normalized-entropy: 0.9954515828457716, [(1, 68), (2, 58)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [70, 21, 0]]
** centroid: 6, normalized-entropy: 0.7793498372920851, [(1, 70), (2, 21)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 30, 22]]
** centroid: 7, normalized-entropy: 0.9828586897127057, [(2, 30), (3, 22)]
finished with 9 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 14)
[0.9499919080757403, 0.9479929030827234, 0.9359958761156366, 0.9359958761156365, 0.9249818680956405, 0.9229828631026235, 0.9200098301894709, 0.9069968171764579, 0.9049768331205458, 0.8959738181295068, 0.8710207213201224, 0.8260026493559428, 0.8141554728381076, 0.7779995564426702]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 1) => 0.9499919080757403
finished with 15
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.25073069756481425] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25073069756481425, 0.19788218765273444] ***
*** starting iteration: 2; err: [Inf, 0.25073069756481425, 0.19788218765273444] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25073069756481425, 0.19788218765273444, 0.19306350530855157] ***
*** starting iteration: 3; err: [Inf, 0.25073069756481425, 0.19788218765273444, 0.19306350530855157] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25073069756481425, 0.19788218765273444, 0.19306350530855157, 0.1916971653378247] ***
*** finished computation of 7 references, err: [Inf, 0.25073069756481425, 0.19788218765273444, 0.19306350530855157, 0.1916971653378247] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [108, 6, 0]]
** centroid: 1, normalized-entropy: 0.2974722489192896, [(1, 108), (2, 6)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 45, 21]]
** centroid: 2, normalized-entropy: 0.9023932827949788, [(2, 45), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [113, 19, 0]]
** centroid: 3, normalized-entropy: 0.5944634715679662, [(1, 113), (2, 19)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [97, 1, 0]]
** centroid: 4, normalized-entropy: 0.08214305133815322, [(1, 97), (2, 1)]
*** center 5: selecting labels [1] (freq >= 1) [from [96, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 82, 0]]
** centroid: 6, normalized-entropy: 0.1623261801753929, [(1, 2), (2, 82)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 75, 0]]
** centroid: 7, normalized-entropy: 0.10106696361212422, [(1, 1), (2, 75)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23368200212800833] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23368200212800833, 0.1930255206578273] ***
*** starting iteration: 2; err: [Inf, 0.23368200212800833, 0.1930255206578273] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23368200212800833, 0.1930255206578273, 0.18580340123365352] ***
*** starting iteration: 3; err: [Inf, 0.23368200212800833, 0.1930255206578273, 0.18580340123365352] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23368200212800833, 0.1930255206578273, 0.18580340123365352, 0.18489663350930635] ***
*** finished computation of 7 references, err: [Inf, 0.23368200212800833, 0.1930255206578273, 0.18580340123365352, 0.18489663350930635] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 95, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [76, 33, 0]]
** centroid: 3, normalized-entropy: 0.8846293067903075, [(1, 76), (2, 33)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [78, 43, 0]]
** centroid: 4, normalized-entropy: 0.9387743321221517, [(1, 78), (2, 43)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 58, 19]]
** centroid: 5, normalized-entropy: 0.8060914696192223, [(2, 58), (3, 19)]
*** center 6: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2208598373196684] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2208598373196684, 0.1943268721722167] ***
*** starting iteration: 2; err: [Inf, 0.2208598373196684, 0.1943268721722167] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2208598373196684, 0.1943268721722167, 0.19161805924868722] ***
*** starting iteration: 3; err: [Inf, 0.2208598373196684, 0.1943268721722167, 0.19161805924868722] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2208598373196684, 0.1943268721722167, 0.19161805924868722, 0.1900640543608897] ***
*** finished computation of 7 references, err: [Inf, 0.2208598373196684, 0.1943268721722167, 0.19161805924868722, 0.1900640543608897] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [51, 54, 0]]
** centroid: 1, normalized-entropy: 0.9994110647387552, [(1, 51), (2, 54)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [65, 7, 0]]
** centroid: 2, normalized-entropy: 0.460127886147135, [(1, 65), (2, 7)]
*** center 3: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 92, 22]]
** centroid: 4, normalized-entropy: 0.7076690004167966, [(2, 92), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [34, 70, 0]]
** centroid: 5, normalized-entropy: 0.9117517586347538, [(1, 34), (2, 70)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [99, 10, 0]]
** centroid: 6, normalized-entropy: 0.4422615143479816, [(1, 99), (2, 10)]
*** center 7: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 15)
[0.9499919080757403, 0.9479929030827234, 0.9389898880916845, 0.9359958761156366, 0.9359958761156365, 0.9249818680956405, 0.9229828631026235, 0.9200098301894709, 0.9069968171764579, 0.9049768331205458, 0.8959738181295068, 0.8710207213201224, 0.8260026493559428, 0.8141554728381076, 0.7779995564426702]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 1) => 0.9499919080757403
finished with 15
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9499919080757403, 0.9479929030827234, 0.9389898880916845, 0.9359958761156366, 0.9359958761156365, 0.9249818680956405, 0.9229828631026235, 0.9200098301894709, 0.9069968171764579, 0.9049768331205458, 0.8959738181295068, 0.8710207213201224, 0.8260026493559428, 0.8141554728381076, 0.7779995564426702]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 1) => 0.9499919080757403
finished with 15
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9499919080757403, 0.9479929030827234, 0.9389898880916845, 0.9359958761156366, 0.9359958761156365, 0.9249818680956405, 0.9229828631026235, 0.9200098301894709, 0.9069968171764579, 0.9049768331205458, 0.8959738181295068, 0.8710207213201224, 0.8260026493559428, 0.8141554728381076, 0.7779995564426702]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 1) => 0.9499919080757403
finished with 15
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.19194133549928666] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19194133549928666, 0.1536672857105732] ***
*** starting iteration: 2; err: [Inf, 0.19194133549928666, 0.1536672857105732] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19194133549928666, 0.1536672857105732, 0.14972283959249036] ***
*** starting iteration: 3; err: [Inf, 0.19194133549928666, 0.1536672857105732, 0.14972283959249036] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19194133549928666, 0.1536672857105732, 0.14972283959249036, 0.1482995423632674] ***
*** starting iteration: 4; err: [Inf, 0.19194133549928666, 0.1536672857105732, 0.14972283959249036, 0.1482995423632674] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19194133549928666, 0.1536672857105732, 0.14972283959249036, 0.1482995423632674, 0.14773507548170164] ***
*** finished computation of 7 references, err: [Inf, 0.19194133549928666, 0.1536672857105732, 0.14972283959249036, 0.1482995423632674, 0.14773507548170164] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [180, 4, 0]]
** centroid: 1, normalized-entropy: 0.1510969705171136, [(1, 180), (2, 4)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [124, 18, 0]]
** centroid: 2, normalized-entropy: 0.5484866088431741, [(1, 124), (2, 18)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 88, 31]]
** centroid: 3, normalized-entropy: 0.8275062669879832, [(2, 88), (3, 31)]
*** center 4: selecting labels [1] (freq >= 1) [from [131, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [43, 111, 0]]
** centroid: 5, normalized-entropy: 0.8543868938309275, [(1, 43), (2, 111)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [4, 124, 0]]
** centroid: 6, normalized-entropy: 0.2006223243127146, [(1, 4), (2, 124)]
*** center 7: selecting labels [1] (freq >= 1) [from [142, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18596848515421152] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18596848515421152, 0.15130043797381224] ***
*** starting iteration: 2; err: [Inf, 0.18596848515421152, 0.15130043797381224] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18596848515421152, 0.15130043797381224, 0.14623115732707084] ***
*** starting iteration: 3; err: [Inf, 0.18596848515421152, 0.15130043797381224, 0.14623115732707084] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18596848515421152, 0.15130043797381224, 0.14623115732707084, 0.14542901764344424] ***
*** finished computation of 7 references, err: [Inf, 0.18596848515421152, 0.15130043797381224, 0.14623115732707084, 0.14542901764344424] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [45, 39, 0]]
** centroid: 1, normalized-entropy: 0.9963165195589622, [(1, 45), (2, 39)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [49, 6, 0]]
** centroid: 2, normalized-entropy: 0.4971677614160751, [(1, 49), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 53, 18]]
** centroid: 3, normalized-entropy: 0.8168114277045246, [(2, 53), (3, 18)]
*** center 4: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [50, 24, 0]]
** centroid: 5, normalized-entropy: 0.9090221560878149, [(1, 50), (2, 24)]
*** center 6: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [2, 62, 0]]
** centroid: 7, normalized-entropy: 0.2006223243127146, [(1, 2), (2, 62)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18227368449047207] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18227368449047207, 0.14571688939072192] ***
*** starting iteration: 2; err: [Inf, 0.18227368449047207, 0.14571688939072192] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18227368449047207, 0.14571688939072192, 0.140977093975991] ***
*** starting iteration: 3; err: [Inf, 0.18227368449047207, 0.14571688939072192, 0.140977093975991] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18227368449047207, 0.14571688939072192, 0.140977093975991, 0.1400820996556431] ***
*** finished computation of 7 references, err: [Inf, 0.18227368449047207, 0.14571688939072192, 0.140977093975991, 0.1400820996556431] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [64, 20, 0]]
** centroid: 1, normalized-entropy: 0.7918583525674836, [(1, 64), (2, 20)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [59, 2, 0]]
** centroid: 2, normalized-entropy: 0.20818094555717087, [(1, 59), (2, 2)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 66, 16]]
** centroid: 3, normalized-entropy: 0.7120640548905481, [(2, 66), (3, 16)]
*** center 4: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [3, 65, 0]]
** centroid: 5, normalized-entropy: 0.260862909647207, [(1, 3), (2, 65)]
*** center 6: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [55, 8, 0]]
** centroid: 7, normalized-entropy: 0.5491087450260074, [(1, 55), (2, 8)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18564926729910075] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18564926729910075, 0.1505257111657411] ***
*** starting iteration: 2; err: [Inf, 0.18564926729910075, 0.1505257111657411] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18564926729910075, 0.1505257111657411, 0.14653172298148273] ***
*** starting iteration: 3; err: [Inf, 0.18564926729910075, 0.1505257111657411, 0.14653172298148273] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18564926729910075, 0.1505257111657411, 0.14653172298148273, 0.14584333176771178] ***
*** finished computation of 7 references, err: [Inf, 0.18564926729910075, 0.1505257111657411, 0.14653172298148273, 0.14584333176771178] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [61, 39, 0]]
** centroid: 1, normalized-entropy: 0.9647995485050873, [(1, 61), (2, 39)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [47, 23, 0]]
** centroid: 2, normalized-entropy: 0.9134601452569628, [(1, 47), (2, 23)]
*** center 3: selecting labels [1] (freq >= 1) [from [45, 0, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 59, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [75, 13, 0]]
** centroid: 5, normalized-entropy: 0.6041234581483739, [(1, 75), (2, 13)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [68, 1, 0]]
** centroid: 6, normalized-entropy: 0.10928571467638523, [(1, 68), (2, 1)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 55, 14]]
** centroid: 7, normalized-entropy: 0.7276874545656657, [(2, 55), (3, 14)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19091012256778778] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19091012256778778, 0.15427826767787337] ***
*** starting iteration: 2; err: [Inf, 0.19091012256778778, 0.15427826767787337] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19091012256778778, 0.15427826767787337, 0.14760482801496982] ***
*** starting iteration: 3; err: [Inf, 0.19091012256778778, 0.15427826767787337, 0.14760482801496982] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19091012256778778, 0.15427826767787337, 0.14760482801496982, 0.14645818698965013] ***
*** starting iteration: 4; err: [Inf, 0.19091012256778778, 0.15427826767787337, 0.14760482801496982, 0.14645818698965013] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19091012256778778, 0.15427826767787337, 0.14760482801496982, 0.14645818698965013, 0.14599692710116505] ***
*** finished computation of 7 references, err: [Inf, 0.19091012256778778, 0.15427826767787337, 0.14760482801496982, 0.14645818698965013, 0.14599692710116505] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [73, 3, 0]]
** centroid: 1, normalized-entropy: 0.23987382528036535, [(1, 73), (2, 3)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 63, 14]]
** centroid: 2, normalized-entropy: 0.6840384356390419, [(2, 63), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [57, 4, 0]]
** centroid: 3, normalized-entropy: 0.34918437350730797, [(1, 57), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [56, 40, 0]]
** centroid: 4, normalized-entropy: 0.9798687566511527, [(1, 56), (2, 40)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [12, 71, 0]]
** centroid: 5, normalized-entropy: 0.5961045458832345, [(1, 12), (2, 71)]
*** center 6: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [40, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.175307168437168] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.175307168437168, 0.14653989840112627] ***
*** starting iteration: 2; err: [Inf, 0.175307168437168, 0.14653989840112627] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.175307168437168, 0.14653989840112627, 0.14473602903448046] ***
*** starting iteration: 3; err: [Inf, 0.175307168437168, 0.14653989840112627, 0.14473602903448046] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.175307168437168, 0.14653989840112627, 0.14473602903448046, 0.14445590282045304] ***
*** finished computation of 7 references, err: [Inf, 0.175307168437168, 0.14653989840112627, 0.14473602903448046, 0.14445590282045304] ***
*** center 1: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 45, 16]]
** centroid: 2, normalized-entropy: 0.8301899714180444, [(2, 45), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [63, 13, 0]]
** centroid: 3, normalized-entropy: 0.6601070987550468, [(1, 63), (2, 13)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [23, 46, 0]]
** centroid: 4, normalized-entropy: 0.9182958340544894, [(1, 23), (2, 46)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [20, 58, 0]]
** centroid: 5, normalized-entropy: 0.8212809417449864, [(1, 20), (2, 58)]
*** center 6: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [85, 1, 0]]
** centroid: 7, normalized-entropy: 0.09140162014739266, [(1, 85), (2, 1)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19520955380238592] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19520955380238592, 0.1510597511716187] ***
*** starting iteration: 2; err: [Inf, 0.19520955380238592, 0.1510597511716187] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19520955380238592, 0.1510597511716187, 0.14753070436418056] ***
*** starting iteration: 3; err: [Inf, 0.19520955380238592, 0.1510597511716187, 0.14753070436418056] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19520955380238592, 0.1510597511716187, 0.14753070436418056, 0.14624476008862258] ***
*** starting iteration: 4; err: [Inf, 0.19520955380238592, 0.1510597511716187, 0.14753070436418056, 0.14624476008862258] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19520955380238592, 0.1510597511716187, 0.14753070436418056, 0.14624476008862258, 0.14557550711929798] ***
*** finished computation of 7 references, err: [Inf, 0.19520955380238592, 0.1510597511716187, 0.14753070436418056, 0.14624476008862258, 0.14557550711929798] ***
*** center 1: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 52, 17]]
** centroid: 2, normalized-entropy: 0.8054848387405957, [(2, 52), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [78, 15, 0]]
** centroid: 3, normalized-entropy: 0.6373874992221911, [(1, 78), (2, 15)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [39, 31, 0]]
** centroid: 4, normalized-entropy: 0.9905577004075262, [(1, 39), (2, 31)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [2, 55, 0]]
** centroid: 5, normalized-entropy: 0.2192973081321754, [(1, 2), (2, 55)]
*** center 6: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [57, 4, 0]]
** centroid: 7, normalized-entropy: 0.34918437350730797, [(1, 57), (2, 4)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19193681348115205] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19193681348115205, 0.15048316671233625] ***
*** starting iteration: 2; err: [Inf, 0.19193681348115205, 0.15048316671233625] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19193681348115205, 0.15048316671233625, 0.1481432769659441] ***
*** starting iteration: 3; err: [Inf, 0.19193681348115205, 0.15048316671233625, 0.1481432769659441] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19193681348115205, 0.15048316671233625, 0.1481432769659441, 0.1478555592885241] ***
*** finished computation of 7 references, err: [Inf, 0.19193681348115205, 0.15048316671233625, 0.1481432769659441, 0.1478555592885241] ***
*** center 1: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 36, 17]]
** centroid: 2, normalized-entropy: 0.9052002969560479, [(2, 36), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [51, 8, 0]]
** centroid: 3, normalized-entropy: 0.572580465623769, [(1, 51), (2, 8)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [79, 2, 0]]
** centroid: 4, normalized-entropy: 0.16702680404522793, [(1, 79), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [19, 67, 0]]
** centroid: 5, normalized-entropy: 0.7618624463753669, [(1, 19), (2, 67)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [9, 53, 0]]
** centroid: 6, normalized-entropy: 0.5975977764379984, [(1, 9), (2, 53)]
*** center 7: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19156141573749483] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19156141573749483, 0.14856131482403725] ***
*** starting iteration: 2; err: [Inf, 0.19156141573749483, 0.14856131482403725] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19156141573749483, 0.14856131482403725, 0.1457512690583244] ***
*** starting iteration: 3; err: [Inf, 0.19156141573749483, 0.14856131482403725, 0.1457512690583244] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19156141573749483, 0.14856131482403725, 0.1457512690583244, 0.14525548714213074] ***
*** finished computation of 7 references, err: [Inf, 0.19156141573749483, 0.14856131482403725, 0.1457512690583244, 0.14525548714213074] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 60, 19]]
** centroid: 1, normalized-entropy: 0.7958812735955936, [(2, 60), (3, 19)]
*** center 2: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [73, 3, 0]]
** centroid: 3, normalized-entropy: 0.23987382528036535, [(1, 73), (2, 3)]
*** center 4: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [77, 4, 0]]
** centroid: 5, normalized-entropy: 0.2837689703721877, [(1, 77), (2, 4)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [4, 51, 0]]
** centroid: 6, normalized-entropy: 0.37601985096927276, [(1, 4), (2, 51)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [18, 51, 0]]
** centroid: 7, normalized-entropy: 0.828055725379504, [(1, 18), (2, 51)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2088553161993623] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2088553161993623, 0.15189727730304003] ***
*** starting iteration: 2; err: [Inf, 0.2088553161993623, 0.15189727730304003] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2088553161993623, 0.15189727730304003, 0.14693191137723624] ***
*** starting iteration: 3; err: [Inf, 0.2088553161993623, 0.15189727730304003, 0.14693191137723624] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2088553161993623, 0.15189727730304003, 0.14693191137723624, 0.14638325177505612] ***
*** finished computation of 7 references, err: [Inf, 0.2088553161993623, 0.15189727730304003, 0.14693191137723624, 0.14638325177505612] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 56, 12]]
** centroid: 1, normalized-entropy: 0.6722948170756378, [(2, 56), (3, 12)]
*** center 2: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [71, 31, 0]]
** centroid: 3, normalized-entropy: 0.8860318997477157, [(1, 71), (2, 31)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [53, 4, 0]]
** centroid: 4, normalized-entropy: 0.36657801255334593, [(1, 53), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [46, 29, 0]]
** centroid: 5, normalized-entropy: 0.9626147059982517, [(1, 46), (2, 29)]
*** center 6: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 65, 0]]
** centroid: 7, normalized-entropy: 0.11327430349709665, [(1, 1), (2, 65)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18349425544962286] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18349425544962286, 0.1479536349028349] ***
*** starting iteration: 2; err: [Inf, 0.18349425544962286, 0.1479536349028349] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18349425544962286, 0.1479536349028349, 0.14564861883595587] ***
*** starting iteration: 3; err: [Inf, 0.18349425544962286, 0.1479536349028349, 0.14564861883595587] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18349425544962286, 0.1479536349028349, 0.14564861883595587, 0.1447695735245943] ***
*** finished computation of 7 references, err: [Inf, 0.18349425544962286, 0.1479536349028349, 0.14564861883595587, 0.1447695735245943] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [75, 9, 0]]
** centroid: 1, normalized-entropy: 0.4912373418243334, [(1, 75), (2, 9)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [77, 14, 0]]
** centroid: 2, normalized-entropy: 0.6193821946787638, [(1, 77), (2, 14)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 40, 16]]
** centroid: 3, normalized-entropy: 0.8631205685666311, [(2, 40), (3, 16)]
*** center 4: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [40, 42, 0]]
** centroid: 5, normalized-entropy: 0.9995708393473225, [(1, 40), (2, 42)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 74, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1918466804996133] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1918466804996133, 0.1532001659683883] ***
*** starting iteration: 2; err: [Inf, 0.1918466804996133, 0.1532001659683883] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1918466804996133, 0.1532001659683883, 0.14863306348398328] ***
*** starting iteration: 3; err: [Inf, 0.1918466804996133, 0.1532001659683883, 0.14863306348398328] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1918466804996133, 0.1532001659683883, 0.14863306348398328, 0.14782277517020703] ***
*** finished computation of 7 references, err: [Inf, 0.1918466804996133, 0.1532001659683883, 0.14863306348398328, 0.14782277517020703] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [32, 50, 0]]
** centroid: 1, normalized-entropy: 0.9649567669505686, [(1, 32), (2, 50)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [58, 4, 0]]
** centroid: 2, normalized-entropy: 0.3451173149449528, [(1, 58), (2, 4)]
*** center 3: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 47, 13]]
** centroid: 4, normalized-entropy: 0.7540340561971327, [(2, 47), (3, 13)]
*** center 5: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [5, 70, 0]]
** centroid: 6, normalized-entropy: 0.3533593350214213, [(1, 5), (2, 70)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [78, 1, 0]]
** centroid: 7, normalized-entropy: 0.09794058271817412, [(1, 78), (2, 1)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19097946466505528] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19097946466505528, 0.15143803860992194] ***
*** starting iteration: 2; err: [Inf, 0.19097946466505528, 0.15143803860992194] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19097946466505528, 0.15143803860992194, 0.1472265655659139] ***
*** starting iteration: 3; err: [Inf, 0.19097946466505528, 0.15143803860992194, 0.1472265655659139] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19097946466505528, 0.15143803860992194, 0.1472265655659139, 0.1465547281121835] ***
*** finished computation of 7 references, err: [Inf, 0.19097946466505528, 0.15143803860992194, 0.1472265655659139, 0.1465547281121835] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [5, 70, 0]]
** centroid: 1, normalized-entropy: 0.3533593350214213, [(1, 5), (2, 70)]
*** center 2: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [79, 5, 0]]
** centroid: 3, normalized-entropy: 0.3255517134879513, [(1, 79), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [80, 4, 0]]
** centroid: 4, normalized-entropy: 0.2761954276479391, [(1, 80), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [81, 3, 0]]
** centroid: 5, normalized-entropy: 0.2222848306856879, [(1, 81), (2, 3)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 54, 0]]
** centroid: 6, normalized-entropy: 0.13110652958234514, [(1, 1), (2, 54)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 33, 15]]
** centroid: 7, normalized-entropy: 0.8960382325345574, [(2, 33), (3, 15)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18590581944491713] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18590581944491713, 0.1479720847532153] ***
*** starting iteration: 2; err: [Inf, 0.18590581944491713, 0.1479720847532153] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18590581944491713, 0.1479720847532153, 0.143659144109115] ***
*** starting iteration: 3; err: [Inf, 0.18590581944491713, 0.1479720847532153, 0.143659144109115] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18590581944491713, 0.1479720847532153, 0.143659144109115, 0.14255987289734184] ***
*** starting iteration: 4; err: [Inf, 0.18590581944491713, 0.1479720847532153, 0.143659144109115, 0.14255987289734184] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18590581944491713, 0.1479720847532153, 0.143659144109115, 0.14255987289734184, 0.14230625807307662] ***
*** finished computation of 7 references, err: [Inf, 0.18590581944491713, 0.1479720847532153, 0.143659144109115, 0.14255987289734184, 0.14230625807307662] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [36, 52, 0]]
** centroid: 1, normalized-entropy: 0.976020648236615, [(1, 36), (2, 52)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [74, 5, 0]]
** centroid: 2, normalized-entropy: 0.340373285759646, [(1, 74), (2, 5)]
*** center 3: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 64, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [62, 11, 0]]
** centroid: 5, normalized-entropy: 0.6115516951951333, [(1, 62), (2, 11)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [69, 1, 0]]
** centroid: 6, normalized-entropy: 0.10802319526362848, [(1, 69), (2, 1)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 46, 14]]
** centroid: 7, normalized-entropy: 0.7837769474847011, [(2, 46), (3, 14)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1909631899856031] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1909631899856031, 0.1521481045531109] ***
*** starting iteration: 2; err: [Inf, 0.1909631899856031, 0.1521481045531109] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1909631899856031, 0.1521481045531109, 0.14631995109468698] ***
*** starting iteration: 3; err: [Inf, 0.1909631899856031, 0.1521481045531109, 0.14631995109468698] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1909631899856031, 0.1521481045531109, 0.14631995109468698, 0.14505671571567655] ***
*** starting iteration: 4; err: [Inf, 0.1909631899856031, 0.1521481045531109, 0.14631995109468698, 0.14505671571567655] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1909631899856031, 0.1521481045531109, 0.14631995109468698, 0.14505671571567655, 0.14444099366292357] ***
*** finished computation of 7 references, err: [Inf, 0.1909631899856031, 0.1521481045531109, 0.14631995109468698, 0.14505671571567655, 0.14444099366292357] ***
*** center 1: selecting labels [1] (freq >= 1) [from [107, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 39, 14]]
** centroid: 2, normalized-entropy: 0.8329458235361399, [(2, 39), (3, 14)]
*** center 3: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [69, 2, 0]]
** centroid: 4, normalized-entropy: 0.18512476010054582, [(1, 69), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [15, 53, 0]]
** centroid: 5, normalized-entropy: 0.7612401496918493, [(1, 15), (2, 53)]
*** center 6: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [2, 70, 0]]
** centroid: 7, normalized-entropy: 0.18312206830137262, [(1, 2), (2, 70)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18238056865334512] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18238056865334512, 0.15097320519573987] ***
*** starting iteration: 2; err: [Inf, 0.18238056865334512, 0.15097320519573987] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18238056865334512, 0.15097320519573987, 0.14598156963475048] ***
*** starting iteration: 3; err: [Inf, 0.18238056865334512, 0.15097320519573987, 0.14598156963475048] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18238056865334512, 0.15097320519573987, 0.14598156963475048, 0.14494795830827206] ***
*** starting iteration: 4; err: [Inf, 0.18238056865334512, 0.15097320519573987, 0.14598156963475048, 0.14494795830827206] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18238056865334512, 0.15097320519573987, 0.14598156963475048, 0.14494795830827206, 0.14441788671724498] ***
*** finished computation of 7 references, err: [Inf, 0.18238056865334512, 0.15097320519573987, 0.14598156963475048, 0.14494795830827206, 0.14441788671724498] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [80, 5, 0]]
** centroid: 1, normalized-entropy: 0.32275695889739825, [(1, 80), (2, 5)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 49, 13]]
** centroid: 2, normalized-entropy: 0.7408656862339816, [(2, 49), (3, 13)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [59, 3, 0]]
** centroid: 3, normalized-entropy: 0.2795055456366802, [(1, 59), (2, 3)]
*** center 4: selecting labels [1] (freq >= 1) [from [52, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [49, 41, 0]]
** centroid: 5, normalized-entropy: 0.9942929346520455, [(1, 49), (2, 41)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [8, 73, 0]]
** centroid: 6, normalized-entropy: 0.46506984488164627, [(1, 8), (2, 73)]
*** center 7: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18621293502673505] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18621293502673505, 0.14828692780435085] ***
*** starting iteration: 2; err: [Inf, 0.18621293502673505, 0.14828692780435085] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18621293502673505, 0.14828692780435085, 0.14623256333637982] ***
*** starting iteration: 3; err: [Inf, 0.18621293502673505, 0.14828692780435085, 0.14623256333637982] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18621293502673505, 0.14828692780435085, 0.14623256333637982, 0.1458514975104481] ***
*** finished computation of 7 references, err: [Inf, 0.18621293502673505, 0.14828692780435085, 0.14623256333637982, 0.1458514975104481] ***
*** center 1: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [79, 23, 0]]
** centroid: 2, normalized-entropy: 0.7700664782920602, [(1, 79), (2, 23)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 45, 17]]
** centroid: 3, normalized-entropy: 0.8474179614176633, [(2, 45), (3, 17)]
*** center 4: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [36, 41, 0]]
** centroid: 5, normalized-entropy: 0.9969562518473082, [(1, 36), (2, 41)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [4, 55, 0]]
** centroid: 6, normalized-entropy: 0.3576467062456333, [(1, 4), (2, 55)]
*** center 7: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1829349006805569] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1829349006805569, 0.15002831187844276] ***
*** starting iteration: 2; err: [Inf, 0.1829349006805569, 0.15002831187844276] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1829349006805569, 0.15002831187844276, 0.14636369924340398] ***
*** starting iteration: 3; err: [Inf, 0.1829349006805569, 0.15002831187844276, 0.14636369924340398] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1829349006805569, 0.15002831187844276, 0.14636369924340398, 0.14548268034821377] ***
*** finished computation of 7 references, err: [Inf, 0.1829349006805569, 0.15002831187844276, 0.14636369924340398, 0.14548268034821377] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [73, 3, 0]]
** centroid: 1, normalized-entropy: 0.23987382528036535, [(1, 73), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [76, 1, 0]]
** centroid: 2, normalized-entropy: 0.1000009430103234, [(1, 76), (2, 1)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 31, 14]]
** centroid: 3, normalized-entropy: 0.8944518845341284, [(2, 31), (3, 14)]
*** center 4: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [85, 4, 0]]
** centroid: 5, normalized-entropy: 0.2645173683629748, [(1, 85), (2, 4)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [4, 69, 0]]
** centroid: 6, normalized-entropy: 0.306424729870515, [(1, 4), (2, 69)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [5, 71, 0]]
** centroid: 7, normalized-entropy: 0.35001059292688486, [(1, 5), (2, 71)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19272397983819245] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19272397983819245, 0.15265575146768243] ***
*** starting iteration: 2; err: [Inf, 0.19272397983819245, 0.15265575146768243] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19272397983819245, 0.15265575146768243, 0.14861385867651553] ***
*** starting iteration: 3; err: [Inf, 0.19272397983819245, 0.15265575146768243, 0.14861385867651553] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19272397983819245, 0.15265575146768243, 0.14861385867651553, 0.148096771158278] ***
*** finished computation of 7 references, err: [Inf, 0.19272397983819245, 0.15265575146768243, 0.14861385867651553, 0.148096771158278] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [58, 30, 0]]
** centroid: 1, normalized-entropy: 0.9256859869821296, [(1, 58), (2, 30)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [50, 4, 0]]
** centroid: 2, normalized-entropy: 0.38094658570539014, [(1, 50), (2, 4)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 64, 10]]
** centroid: 3, normalized-entropy: 0.5713549744279549, [(2, 64), (3, 10)]
*** center 4: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [64, 4, 0]]
** centroid: 6, normalized-entropy: 0.32275695889739825, [(1, 64), (2, 4)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 79, 0]]
** centroid: 7, normalized-entropy: 0.09694460606247329, [(1, 1), (2, 79)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19107093659043312] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19107093659043312, 0.1537107957266271] ***
*** starting iteration: 2; err: [Inf, 0.19107093659043312, 0.1537107957266271] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19107093659043312, 0.1537107957266271, 0.14883770360611379] ***
*** starting iteration: 3; err: [Inf, 0.19107093659043312, 0.1537107957266271, 0.14883770360611379] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19107093659043312, 0.1537107957266271, 0.14883770360611379, 0.14717625676468016] ***
*** starting iteration: 4; err: [Inf, 0.19107093659043312, 0.1537107957266271, 0.14883770360611379, 0.14717625676468016] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19107093659043312, 0.1537107957266271, 0.14883770360611379, 0.14717625676468016, 0.1463259354699403] ***
*** finished computation of 7 references, err: [Inf, 0.19107093659043312, 0.1537107957266271, 0.14883770360611379, 0.14717625676468016, 0.1463259354699403] ***
*** center 1: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [77, 7, 0]]
** centroid: 2, normalized-entropy: 0.4138168503036336, [(1, 77), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 46, 19]]
** centroid: 3, normalized-entropy: 0.871683617119982, [(2, 46), (3, 19)]
*** center 4: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [56, 33, 0]]
** centroid: 5, normalized-entropy: 0.951274087437692, [(1, 56), (2, 33)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [38, 37, 0]]
** centroid: 6, normalized-entropy: 0.999871756640849, [(1, 38), (2, 37)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 52, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2002702037487179] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2002702037487179, 0.15469504196196796] ***
*** starting iteration: 2; err: [Inf, 0.2002702037487179, 0.15469504196196796] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2002702037487179, 0.15469504196196796, 0.14723888177238403] ***
*** starting iteration: 3; err: [Inf, 0.2002702037487179, 0.15469504196196796, 0.14723888177238403] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2002702037487179, 0.15469504196196796, 0.14723888177238403, 0.14593917424045502] ***
*** starting iteration: 4; err: [Inf, 0.2002702037487179, 0.15469504196196796, 0.14723888177238403, 0.14593917424045502] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2002702037487179, 0.15469504196196796, 0.14723888177238403, 0.14593917424045502, 0.14559849292598664] ***
*** finished computation of 7 references, err: [Inf, 0.2002702037487179, 0.15469504196196796, 0.14723888177238403, 0.14593917424045502, 0.14559849292598664] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [57, 16, 0]]
** centroid: 1, normalized-entropy: 0.7586638628883696, [(1, 57), (2, 16)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 29, 18]]
** centroid: 2, normalized-entropy: 0.9601186626422924, [(2, 29), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [85, 2, 0]]
** centroid: 3, normalized-entropy: 0.15790637433488164, [(1, 85), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [95, 1, 0]]
** centroid: 4, normalized-entropy: 0.08354288831032243, [(1, 95), (2, 1)]
*** center 5: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 63, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 62, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18553642774559556] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18553642774559556, 0.15082468619942666] ***
*** starting iteration: 2; err: [Inf, 0.18553642774559556, 0.15082468619942666] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18553642774559556, 0.15082468619942666, 0.14878875245619566] ***
*** starting iteration: 3; err: [Inf, 0.18553642774559556, 0.15082468619942666, 0.14878875245619566] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18553642774559556, 0.15082468619942666, 0.14878875245619566, 0.14855992804467677] ***
*** finished computation of 7 references, err: [Inf, 0.18553642774559556, 0.15082468619942666, 0.14878875245619566, 0.14855992804467677] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 55, 14]]
** centroid: 1, normalized-entropy: 0.7276874545656657, [(2, 55), (3, 14)]
*** center 2: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [3, 52, 0]]
** centroid: 6, normalized-entropy: 0.30540057087920036, [(1, 3), (2, 52)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [30, 51, 0]]
** centroid: 7, normalized-entropy: 0.9509560484549724, [(1, 30), (2, 51)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19034342741221189] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19034342741221189, 0.15596778681315482] ***
*** starting iteration: 2; err: [Inf, 0.19034342741221189, 0.15596778681315482] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19034342741221189, 0.15596778681315482, 0.14999171334411948] ***
*** starting iteration: 3; err: [Inf, 0.19034342741221189, 0.15596778681315482, 0.14999171334411948] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19034342741221189, 0.15596778681315482, 0.14999171334411948, 0.14836635859753006] ***
*** starting iteration: 4; err: [Inf, 0.19034342741221189, 0.15596778681315482, 0.14999171334411948, 0.14836635859753006] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19034342741221189, 0.15596778681315482, 0.14999171334411948, 0.14836635859753006, 0.14785470486525445] ***
*** finished computation of 7 references, err: [Inf, 0.19034342741221189, 0.15596778681315482, 0.14999171334411948, 0.14836635859753006, 0.14785470486525445] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [36, 39, 0]]
** centroid: 1, normalized-entropy: 0.998845535995202, [(1, 36), (2, 39)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [70, 6, 0]]
** centroid: 2, normalized-entropy: 0.39845927409523557, [(1, 70), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 50, 15]]
** centroid: 3, normalized-entropy: 0.7793498372920851, [(2, 50), (3, 15)]
*** center 4: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [3, 59, 0]]
** centroid: 5, normalized-entropy: 0.2795055456366802, [(1, 3), (2, 59)]
*** center 6: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [50, 17, 0]]
** centroid: 7, normalized-entropy: 0.8171387756817725, [(1, 50), (2, 17)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2123497705515474] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2123497705515474, 0.1494759999923408] ***
*** starting iteration: 2; err: [Inf, 0.2123497705515474, 0.1494759999923408] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2123497705515474, 0.1494759999923408, 0.1454591012429446] ***
*** starting iteration: 3; err: [Inf, 0.2123497705515474, 0.1494759999923408, 0.1454591012429446] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2123497705515474, 0.1494759999923408, 0.1454591012429446, 0.14512672159820794] ***
*** finished computation of 7 references, err: [Inf, 0.2123497705515474, 0.1494759999923408, 0.1454591012429446, 0.14512672159820794] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [63, 17, 0]]
** centroid: 1, normalized-entropy: 0.7462343013654809, [(1, 63), (2, 17)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 53, 16]]
** centroid: 2, normalized-entropy: 0.7812812090702043, [(2, 53), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [57, 41, 0]]
** centroid: 3, normalized-entropy: 0.9806857319036603, [(1, 57), (2, 41)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [77, 6, 0]]
** centroid: 4, normalized-entropy: 0.3744088453489206, [(1, 77), (2, 6)]
*** center 5: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 56, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1944421053417027] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1944421053417027, 0.15371730960533023] ***
*** starting iteration: 2; err: [Inf, 0.1944421053417027, 0.15371730960533023] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1944421053417027, 0.15371730960533023, 0.14774800555221737] ***
*** starting iteration: 3; err: [Inf, 0.1944421053417027, 0.15371730960533023, 0.14774800555221737] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1944421053417027, 0.15371730960533023, 0.14774800555221737, 0.14694828638620674] ***
*** finished computation of 7 references, err: [Inf, 0.1944421053417027, 0.15371730960533023, 0.14774800555221737, 0.14694828638620674] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [5, 54, 0]]
** centroid: 1, normalized-entropy: 0.4186843105268563, [(1, 5), (2, 54)]
*** center 2: selecting labels [1] (freq >= 1) [from [49, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [56, 39, 0]]
** centroid: 3, normalized-entropy: 0.9767760065324896, [(1, 56), (2, 39)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [61, 26, 0]]
** centroid: 4, normalized-entropy: 0.8798813089176428, [(1, 61), (2, 26)]
*** center 5: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 43, 18]]
** centroid: 6, normalized-entropy: 0.8751957887407251, [(2, 43), (3, 18)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [72, 2, 0]]
** centroid: 7, normalized-entropy: 0.1792560669283214, [(1, 72), (2, 2)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18302350885421037] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18302350885421037, 0.15013625897374003] ***
*** starting iteration: 2; err: [Inf, 0.18302350885421037, 0.15013625897374003] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18302350885421037, 0.15013625897374003, 0.1462267793668434] ***
*** starting iteration: 3; err: [Inf, 0.18302350885421037, 0.15013625897374003, 0.1462267793668434] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18302350885421037, 0.15013625897374003, 0.1462267793668434, 0.14574803880415857] ***
*** finished computation of 7 references, err: [Inf, 0.18302350885421037, 0.15013625897374003, 0.1462267793668434, 0.14574803880415857] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [95, 20, 0]]
** centroid: 1, normalized-entropy: 0.6665783579949205, [(1, 95), (2, 20)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [68, 3, 0]]
** centroid: 2, normalized-entropy: 0.25253077151613923, [(1, 68), (2, 3)]
*** center 3: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 24, 18]]
** centroid: 4, normalized-entropy: 0.9852281360342514, [(2, 24), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [76, 3, 0]]
** centroid: 5, normalized-entropy: 0.23292785546981223, [(1, 76), (2, 3)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 67, 0]]
** centroid: 6, normalized-entropy: 0.11058084476988722, [(1, 1), (2, 67)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 61, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18095151968486606] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18095151968486606, 0.15372445657104253] ***
*** starting iteration: 2; err: [Inf, 0.18095151968486606, 0.15372445657104253] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18095151968486606, 0.15372445657104253, 0.1485460396055132] ***
*** starting iteration: 3; err: [Inf, 0.18095151968486606, 0.15372445657104253, 0.1485460396055132] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18095151968486606, 0.15372445657104253, 0.1485460396055132, 0.14707130958046763] ***
*** starting iteration: 4; err: [Inf, 0.18095151968486606, 0.15372445657104253, 0.1485460396055132, 0.14707130958046763] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18095151968486606, 0.15372445657104253, 0.1485460396055132, 0.14707130958046763, 0.14670197751000524] ***
*** finished computation of 7 references, err: [Inf, 0.18095151968486606, 0.15372445657104253, 0.1485460396055132, 0.14707130958046763, 0.14670197751000524] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 81, 16]]
** centroid: 1, normalized-entropy: 0.6460174789535751, [(2, 81), (3, 16)]
*** center 2: selecting labels [1] (freq >= 1) [from [49, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [57, 2, 0]]
** centroid: 3, normalized-entropy: 0.21357981533827744, [(1, 57), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [56, 38, 0]]
** centroid: 4, normalized-entropy: 0.9733854352299557, [(1, 56), (2, 38)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [60, 11, 0]]
** centroid: 5, normalized-entropy: 0.6220403090607189, [(1, 60), (2, 11)]
*** center 6: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [6, 57, 0]]
** centroid: 7, normalized-entropy: 0.45371633918694493, [(1, 6), (2, 57)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18133138133957982] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18133138133957982, 0.15059910022187978] ***
*** starting iteration: 2; err: [Inf, 0.18133138133957982, 0.15059910022187978] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18133138133957982, 0.15059910022187978, 0.14820155861601234] ***
*** starting iteration: 3; err: [Inf, 0.18133138133957982, 0.15059910022187978, 0.14820155861601234] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18133138133957982, 0.15059910022187978, 0.14820155861601234, 0.1476818224284798] ***
*** finished computation of 7 references, err: [Inf, 0.18133138133957982, 0.15059910022187978, 0.14820155861601234, 0.1476818224284798] ***
*** center 1: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 55, 15]]
** centroid: 2, normalized-entropy: 0.7495952572594798, [(2, 55), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [46, 2, 0]]
** centroid: 3, normalized-entropy: 0.24988229283318547, [(1, 46), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [78, 26, 0]]
** centroid: 4, normalized-entropy: 0.8112781244591328, [(1, 78), (2, 26)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [31, 32, 0]]
** centroid: 5, normalized-entropy: 0.9998182469603427, [(1, 31), (2, 32)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [3, 48, 0]]
** centroid: 6, normalized-entropy: 0.32275695889739825, [(1, 3), (2, 48)]
*** center 7: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19605564543046058] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19605564543046058, 0.15217049758229403] ***
*** starting iteration: 2; err: [Inf, 0.19605564543046058, 0.15217049758229403] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19605564543046058, 0.15217049758229403, 0.14839092267863452] ***
*** starting iteration: 3; err: [Inf, 0.19605564543046058, 0.15217049758229403, 0.14839092267863452] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19605564543046058, 0.15217049758229403, 0.14839092267863452, 0.14790124352462589] ***
*** finished computation of 7 references, err: [Inf, 0.19605564543046058, 0.15217049758229403, 0.14839092267863452, 0.14790124352462589] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [78, 2, 0]]
** centroid: 1, normalized-entropy: 0.1686609314966701, [(1, 78), (2, 2)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 46, 15]]
** centroid: 2, normalized-entropy: 0.8047175193210769, [(2, 46), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [62, 8, 0]]
** centroid: 3, normalized-entropy: 0.5127091420308771, [(1, 62), (2, 8)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [55, 41, 0]]
** centroid: 4, normalized-entropy: 0.98460399620868, [(1, 55), (2, 41)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [6, 72, 0]]
** centroid: 5, normalized-entropy: 0.3912435636292556, [(1, 6), (2, 72)]
*** center 6: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [39, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1943291468527168] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1943291468527168, 0.14728022601595148] ***
*** starting iteration: 2; err: [Inf, 0.1943291468527168, 0.14728022601595148] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1943291468527168, 0.14728022601595148, 0.1445771538009867] ***
*** starting iteration: 3; err: [Inf, 0.1943291468527168, 0.14728022601595148, 0.1445771538009867] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1943291468527168, 0.14728022601595148, 0.1445771538009867, 0.1441988728037104] ***
*** finished computation of 7 references, err: [Inf, 0.1943291468527168, 0.14728022601595148, 0.1445771538009867, 0.1441988728037104] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 75, 19]]
** centroid: 1, normalized-entropy: 0.7261630586710504, [(2, 75), (3, 19)]
*** center 2: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [65, 3, 0]]
** centroid: 3, normalized-entropy: 0.260862909647207, [(1, 65), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [77, 16, 0]]
** centroid: 4, normalized-entropy: 0.6623570516079519, [(1, 77), (2, 16)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [53, 27, 0]]
** centroid: 5, normalized-entropy: 0.9224062617590724, [(1, 53), (2, 27)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 61, 0]]
** centroid: 6, normalized-entropy: 0.11911602665564841, [(1, 1), (2, 61)]
*** center 7: selecting labels [1] (freq >= 1) [from [48, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20025962067209185] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20025962067209185, 0.15196807219833136] ***
*** starting iteration: 2; err: [Inf, 0.20025962067209185, 0.15196807219833136] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20025962067209185, 0.15196807219833136, 0.1464924883451313] ***
*** starting iteration: 3; err: [Inf, 0.20025962067209185, 0.15196807219833136, 0.1464924883451313] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20025962067209185, 0.15196807219833136, 0.1464924883451313, 0.14363676088675856] ***
*** starting iteration: 4; err: [Inf, 0.20025962067209185, 0.15196807219833136, 0.1464924883451313, 0.14363676088675856] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20025962067209185, 0.15196807219833136, 0.1464924883451313, 0.14363676088675856, 0.14224789991881698] ***
*** starting iteration: 5; err: [Inf, 0.20025962067209185, 0.15196807219833136, 0.1464924883451313, 0.14363676088675856, 0.14224789991881698] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20025962067209185, 0.15196807219833136, 0.1464924883451313, 0.14363676088675856, 0.14224789991881698, 0.14196954733505845] ***
*** finished computation of 7 references, err: [Inf, 0.20025962067209185, 0.15196807219833136, 0.1464924883451313, 0.14363676088675856, 0.14224789991881698, 0.14196954733505845] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 75, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [63, 28, 0]]
** centroid: 3, normalized-entropy: 0.8904916402194913, [(1, 63), (2, 28)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [89, 6, 0]]
** centroid: 4, normalized-entropy: 0.3398550782221443, [(1, 89), (2, 6)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 56, 13]]
** centroid: 5, normalized-entropy: 0.698124573139618, [(2, 56), (3, 13)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [41, 18, 0]]
** centroid: 6, normalized-entropy: 0.8874179270685693, [(1, 41), (2, 18)]
*** center 7: selecting labels [1] (freq >= 1) [from [51, 0, 0]]
finished with 10 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 345,3 => 31,1 => 624), Dict(2 => 385,3 => 36,1 => 579))
[ Info: ===== scores for single classifier: {"micro_f1":0.922,"precision":0.922,"recall":0.922,"macro_recall":0.9344982018557149,"macro_f1":0.8798948421848481,"accuracy":0.922,"class_f1":{"2":0.8895184135977338,"3":0.8,"1":0.9501661129568105},"class_precision":{"2":0.9781931464174455,"3":0.6666666666666666,"1":0.9152},"class_recall":{"2":0.8155844155844156,"3":1.0,"1":0.9879101899827288}}
[ Info: ===== scores for 1: {"micro_f1":0.978,"precision":0.978,"recall":0.978,"macro_recall":0.9812424765792641,"macro_f1":0.9529002849002849,"accuracy":0.978,"class_f1":{"2":0.9706666666666667,"3":0.9,"1":0.9880341880341882},"class_precision":{"2":0.9972602739726028,"3":0.8181818181818182,"1":0.9780033840947546},"class_recall":{"2":0.9454545454545454,"3":1.0,"1":0.998272884283247}}
[ Info: ===== scores for 5: {"micro_f1":0.982,"precision":0.982,"recall":0.982,"macro_recall":0.9870264450575331,"macro_f1":0.9559759081498213,"accuracy":0.982,"class_f1":{"2":0.9766233766233766,"3":0.9,"1":0.991304347826087},"class_precision":{"2":0.9766233766233766,"3":0.8181818181818182,"1":0.9982486865148862},"class_recall":{"2":0.9766233766233766,"3":1.0,"1":0.9844559585492227}}
[ Info: ===== scores for 7: {"micro_f1":0.98,"precision":0.98,"recall":0.98,"macro_recall":0.9852948433259314,"macro_f1":0.9510967717282878,"accuracy":0.98,"class_f1":{"2":0.9739583333333335,"3":0.888888888888889,"1":0.9904430929626411},"class_precision":{"2":0.9765013054830287,"3":0.8,"1":0.9965034965034965},"class_recall":{"2":0.9714285714285714,"3":1.0,"1":0.9844559585492227}}
[ Info: ===== scores for 9: {"micro_f1":0.982,"precision":0.982,"recall":0.982,"macro_recall":0.9870264450575331,"macro_f1":0.9525597891133138,"accuracy":0.982,"class_f1":{"2":0.9766233766233766,"3":0.888888888888889,"1":0.9921671018276762},"class_precision":{"2":0.9766233766233766,"3":0.8,"1":1.0},"class_recall":{"2":0.9766233766233766,"3":1.0,"1":0.9844559585492227}}
[ Info: ===== scores for 11: {"micro_f1":0.98,"precision":0.98,"recall":0.98,"macro_recall":0.9855849389528145,"macro_f1":0.9477879843733502,"accuracy":0.98,"class_f1":{"2":0.974025974025974,"3":0.878048780487805,"1":0.9912891986062717},"class_precision":{"2":0.974025974025974,"3":0.782608695652174,"1":1.0},"class_recall":{"2":0.974025974025974,"3":1.0,"1":0.9827288428324698}}
(score = 0.977, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.977, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.978, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.978, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.977, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.977, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.974, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.974, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.982, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.982, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.982, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.982, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.984, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.984, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.98, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.98, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.984,"k":7,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.984,"precision":0.984,"recall":0.984,"macro_recall":0.9794943015150269,"macro_f1":0.9530571657377623,"accuracy":0.984,"class_f1":{"2":0.9791666666666667,"3":0.8860759493670887,"1":0.9939288811795316},"class_precision":{"2":0.9817232375979112,"3":0.813953488372093,"1":0.9982578397212544},"class_recall":{"2":0.9766233766233766,"3":0.9722222222222222,"1":0.9896373056994818}}
Test Summary: | Pass  Total
AKNC          |    8      8
[880, 1, 3, 3, 1, 3, 4, 1, 1, 5, 5, 6, 1, 2, 6, 20, 4, 7, 2, 11, 2, 13, 1, 6, 4, 9, 2, 18, 1, 4, 4, 8, 6, 1, 1, 2, 26, 18, 20, 106, 15, 8, 6, 9, 22, 14, 2, 36, 17, 4, 9, 60, 13, 19, 23, 1, 5, 7, 80, 8, 48, 5, 20, 11, 27, 90, 9, 13, 9, 10, 21, 19, 24, 26, 20, 14, 16, 37, 26, 13, 9, 5, 3, 3, 10, 12, 8, 6, 16, 8, 12, 15, 4, 15, 11, 81, 4, 126, 2, 21, 16, 13, 102, 59, 49, 30, 4, 12, 2, 30, 66, 9, 25, 32, 21, 7, 6, 8, 17, 18, 6, 84, 48, 13, 16, 27, 2, 3, 18, 12, 38, 17, 20, 1, 49, 8, 27, 27, 8, 4, 20, 148, 65, 16, 240, 11, 4, 13, 5, 23, 18, 19, 15, 57, 6, 7, 203, 24, 31, 49, 7, 6, 150, 7, 12, 5, 13, 76, 79, 31, 139, 15, 13, 9, 10, 20, 55, 89, 11, 131, 21, 11, 9, 20, 22, 52, 59, 6, 7, 4, 16, 17, 6, 36, 21, 16, 16, 25, 10, 14, 7, 2, 63, 29, 39, 14, 15, 63, 13, 14, 96, 2, 14, 4, 78, 13, 39, 8, 7, 722, 8, 10, 33, 12, 91, 8, 55, 14, 72, 51, 30, 63, 11, 22, 4, 35, 13, 16, 35, 17, 18, 31, 4, 8, 3, 17, 222, 9, 8, 15, 22, 47, 34, 42, 215, 94, 3, 31, 51, 17, 1, 8, 21, 32, 30, 25, 18, 17, 27, 11, 4, 58, 126, 71, 82, 3, 16, 26, 50, 24, 9, 18, 23, 51, 18, 116, 19, 13, 56, 67, 68, 2, 15, 24, 78, 5, 97, 258, 7, 74]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6429999999999998, speedup = 0.3507373824414341, eval_ratio = 0.07441299999999999)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.37743055555555555,"recall":0.37326388888888884,"f1":null,"seconds":0.00013647787272930145,"exhaustive_search_seconds":0.00022300705313682556,"evaluations":486.71875,"distances_sum":1820.3676909420751}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5460069444444443,"recall":0.5460069444444443,"f1":null,"seconds":0.0002924688160419464,"exhaustive_search_seconds":0.00022300705313682556,"evaluations":616.28125,"distances_sum":1687.5144830468914}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6631944444444444,"recall":0.6631944444444444,"f1":null,"seconds":0.00023045577108860016,"exhaustive_search_seconds":0.00022300705313682556,"evaluations":716.2890625,"distances_sum":1622.6435535551145}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7361111111111104,"recall":0.7361111111111104,"f1":0.7361111111111104,"seconds":0.0005570407956838608,"exhaustive_search_seconds":0.00022300705313682556,"evaluations":833.59375,"distances_sum":1591.8236551123389}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7812499999999991,"recall":0.7812499999999991,"f1":0.7812499999999991,"seconds":0.0003244727849960327,"exhaustive_search_seconds":0.00022300705313682556,"evaluations":906.6953125,"distances_sum":1577.6822562902146}
KCenters.DeloneInvIndex> reached performance {"precision":0.8315972222222213,"recall":0.8315972222222213,"f1":0.8315972222222213,"seconds":0.0005664899945259094,"exhaustive_search_seconds":0.00022300705313682556,"evaluations":1031.2890625,"distances_sum":1566.9877142338642}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8100000000000003, speedup = 0.6241399754069563, eval_ratio = 0.111616)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
