Julia Version 1.5.0-DEV.808
Commit e597b522ad (2020-05-03 12:55 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed InvertedIndices ───────────── v1.0.0
  Installed MappedArrays ──────────────── v0.2.2
  Installed PooledArrays ──────────────── v0.5.3
  Installed DataValueInterfaces ───────── v1.0.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed KCenters ──────────────────── v0.2.2
  Installed Parsers ───────────────────── v1.0.2
  Installed JSON ──────────────────────── v0.21.0
  Installed Reexport ──────────────────── v0.2.0
  Installed Compat ────────────────────── v3.9.0
  Installed DataAPI ───────────────────── v1.3.0
  Installed TableTraits ───────────────── v1.0.0
  Installed DataStructures ────────────── v0.17.15
  Installed MLDataUtils ───────────────── v0.5.1
  Installed Tables ────────────────────── v1.0.4
  Installed MLDataPattern ─────────────── v0.5.3
  Installed CategoricalArrays ─────────── v0.7.7
  Installed Missings ──────────────────── v0.4.3
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed DataFrames ────────────────── v0.20.2
  Installed LearnBase ─────────────────── v0.2.2
  Installed OrderedCollections ────────── v1.1.0
  Installed SimilaritySearch ──────────── v0.3.19
  Installed StatsBase ─────────────────── v0.32.2
  Installed MLLabelUtils ──────────────── v0.5.2
Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.9.0
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.15
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v1.0.2
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_3544r2/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_3544r2/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.9.0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.15
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v1.0.2
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0723782532413801
[ Info: 0.9326678744951884
[ Info: 0.8302954188982645
[ Info: 0.5562061394751072
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.3260943145304918
mean(cdnet.distances) = 0.368610893090566
mean(crand.distances) = 0.3410770813127359
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7900390625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7900390625,"f1":0.8755905552780562,"seconds":6.256625056266785e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.484375,"distances_sum":2430.067361099072}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4072265625, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.4072265625,"f1":null,"seconds":2.639368176460266e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":6.203125,"distances_sum":1144.8398044613475}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5693359375, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5693359375,"f1":null,"seconds":2.7157366275787354e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":7.8203125,"distances_sum":1605.6820808078955}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7900390625,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7900390625,"f1":0.8755905552780562,"seconds":6.256625056266785e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.484375,"distances_sum":2430.067361099072}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9325237262737268,"seconds":6.185844540596008e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.6640625,"distances_sum":2884.048626250622}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9540407509157514,"seconds":6.273388862609863e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.84375,"distances_sum":3034.338480522887}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7919921875, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.7919921875,"f1":0.8764688436563444,"seconds":5.694106221199036e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.4140625,"distances_sum":2423.2393057607637}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9443540834165839,"seconds":6.021931767463684e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.7265625,"distances_sum":2961.2143967837087}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.845703125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.845703125,"f1":0.9111721611721619,"seconds":5.798414349555969e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.65625,"distances_sum":2690.0331276515412}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91796875,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9540407509157514,"seconds":6.273388862609863e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.84375,"distances_sum":3034.338480522887}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.974609375, conf: {"ssize":10,"bsize":13}, perf: {"precision":1.0,"recall":0.974609375,"f1":0.9861607142857143,"seconds":6.4801424741744995e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.9765625,"distances_sum":3316.067688967274}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.961097756410257,"seconds":5.556270480155945e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.8984375,"distances_sum":3119.726475702651}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":9,"bsize":13}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.970982142857143,"seconds":6.316229701042175e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.9375,"distances_sum":3182.589420210005}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9573889652014658,"seconds":5.666166543960571e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.859375,"distances_sum":3074.104357358447}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":6,"bsize":11}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9678972069597073,"seconds":5.68293035030365e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.90625,"distances_sum":3145.6324737998957}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9603079212454215,"seconds":5.7034194469451904e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.8515625,"distances_sum":3106.385685156743}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9593234890109896,"seconds":5.4389238357543945e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.8359375,"distances_sum":3098.4238963967914}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.974609375,"state":{"ssize":10,"bsize":13},"perf":{"precision":1.0,"recall":0.974609375,"f1":0.9861607142857143,"seconds":6.4801424741744995e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.9765625,"distances_sum":3316.067688967274}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.974609375,"state":{"ssize":10,"bsize":13},"perf":{"precision":1.0,"recall":0.974609375,"f1":0.9861607142857143,"seconds":6.4801424741744995e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.9765625,"distances_sum":3316.067688967274}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1787109375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.1787109375,"f1":null,"seconds":3.1832605600357056e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":6.265625,"distances_sum":481.4621897108837}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.1787109375,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.1787109375,"f1":null,"seconds":3.1832605600357056e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":6.265625,"distances_sum":481.4621897108837}}, beam: 3, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.1787109375,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.1787109375,"f1":null,"seconds":3.1832605600357056e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":6.265625,"distances_sum":481.4621897108837}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1064453125, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.1064453125,"f1":null,"seconds":2.779066562652588e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":3.671875,"distances_sum":289.6436392524292}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4404296875, conf: {"ssize":1,"bsize":3}, perf: {"precision":0.95,"recall":0.4404296875,"f1":null,"seconds":3.987923264503479e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":6.171875,"distances_sum":795.3320780895141}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2646484375, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.2646484375,"f1":null,"seconds":3.598630428314209e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":4.8671875,"distances_sum":514.6745469867058}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4404296875,"state":{"ssize":1,"bsize":3},"perf":{"precision":0.95,"recall":0.4404296875,"f1":null,"seconds":3.987923264503479e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":6.171875,"distances_sum":795.3320780895141}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5859375, conf: {"ssize":1,"bsize":4}, perf: {"precision":0.960267857142857,"recall":0.5859375,"f1":0.718019480519481,"seconds":4.63239848613739e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":7.484375,"distances_sum":1076.790566379422}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4599609375, conf: {"ssize":3,"bsize":3}, perf: {"precision":null,"recall":0.4599609375,"f1":null,"seconds":4.2729079723358154e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":6.3359375,"distances_sum":853.0851778366535}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":1,"bsize":6}, perf: {"precision":0.9594215029761903,"recall":0.765625,"f1":0.8433119614760243,"seconds":5.887821316719055e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.15625,"distances_sum":1558.6540605789048}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.693359375, conf: {"ssize":3,"bsize":5}, perf: {"precision":0.9681454613095236,"recall":0.693359375,"f1":0.7996967225482854,"seconds":5.6121498346328735e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":7.96875,"distances_sum":1313.9115725600777}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.765625,"state":{"ssize":1,"bsize":6},"perf":{"precision":0.9594215029761903,"recall":0.765625,"f1":0.8433119614760243,"seconds":5.887821316719055e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.15625,"distances_sum":1558.6540605789048}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.859375, conf: {"ssize":1,"bsize":7}, perf: {"precision":0.962202380952381,"recall":0.859375,"f1":0.9033081501831501,"seconds":6.3478946685791016e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.734375,"distances_sum":1748.2535856921102}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.873046875, conf: {"ssize":7,"bsize":7}, perf: {"precision":0.9665178571428572,"recall":0.873046875,"f1":0.9127489697802199,"seconds":6.508082151412964e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.8515625,"distances_sum":1783.5554467255333}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":5,"bsize":8}, perf: {"precision":0.9691406249999999,"recall":0.888671875,"f1":0.9226519574175827,"seconds":6.854534149169922e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.7421875,"distances_sum":1876.7186273158025}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8515625, conf: {"ssize":5,"bsize":7}, perf: {"precision":0.9626767113095239,"recall":0.8515625,"f1":0.8969665100524478,"seconds":7.241964340209961e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.7578125,"distances_sum":1723.3630003412034}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.888671875,"state":{"ssize":5,"bsize":8},"perf":{"precision":0.9691406249999999,"recall":0.888671875,"f1":0.9226519574175827,"seconds":6.854534149169922e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.7421875,"distances_sum":1876.7186273158025}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.888671875,"state":{"ssize":5,"bsize":8},"perf":{"precision":0.9691406249999999,"recall":0.888671875,"f1":0.9226519574175827,"seconds":6.854534149169922e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.7421875,"distances_sum":1876.7186273158025}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5517578125, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.5517578125,"f1":0.6973321817071823,"seconds":4.988163709640503e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":7.1953125,"distances_sum":1066.0911079888829}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5517578125,"state":{"ssize":2,"bsize":3},"perf":{"precision":1.0,"recall":0.5517578125,"f1":0.6973321817071823,"seconds":4.988163709640503e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":7.1953125,"distances_sum":1066.0911079888829}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.568359375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.568359375,"f1":0.7099147380397387,"seconds":5.073845386505127e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":7.2421875,"distances_sum":1081.8557556495075}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.568359375,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.568359375,"f1":0.7099147380397387,"seconds":5.073845386505127e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":7.2421875,"distances_sum":1081.8557556495075}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.693359375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.693359375,"f1":0.8056479978354985,"seconds":6.05359673500061e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":7.7265625,"distances_sum":1434.7509275797497}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8056640625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8056640625,"f1":0.884942141192142,"seconds":6.215646862983704e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.2578125,"distances_sum":1759.474528503667}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7548828125, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7548828125,"f1":0.8508876540126549,"seconds":3.762543201446533e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":7.9296875,"distances_sum":1551.5281055737214}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8056640625,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8056640625,"f1":0.884942141192142,"seconds":6.215646862983704e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.2578125,"distances_sum":1759.474528503667}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8056640625,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8056640625,"f1":0.884942141192142,"seconds":6.215646862983704e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.2578125,"distances_sum":1759.474528503667}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.392578125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.392578125,"f1":null,"seconds":2.8703361749649048e-6,"exhaustive_search_seconds":1.085922122001648e-6,"evaluations":6.5703125,"distances_sum":684.336337264986}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5615234375, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5615234375,"f1":null,"seconds":3.164634108543396e-6,"exhaustive_search_seconds":1.085922122001648e-6,"evaluations":7.359375,"distances_sum":1081.518322632608}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2294921875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2294921875,"f1":null,"seconds":2.7995556592941284e-6,"exhaustive_search_seconds":1.085922122001648e-6,"evaluations":6.734375,"distances_sum":413.12930261872253}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5615234375,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.5615234375,"f1":null,"seconds":3.164634108543396e-6,"exhaustive_search_seconds":1.085922122001648e-6,"evaluations":7.359375,"distances_sum":1081.518322632608}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9366929945054951,"seconds":4.55416738986969e-6,"exhaustive_search_seconds":1.085922122001648e-6,"evaluations":8.8125,"distances_sum":1912.2891400482586}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.869140625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.869140625,"f1":0.923134157509158,"seconds":4.559755325317383e-6,"exhaustive_search_seconds":1.085922122001648e-6,"evaluations":8.7109375,"distances_sum":1885.006490323698}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7646484375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7646484375,"f1":0.8580991924741934,"seconds":3.915280103683472e-6,"exhaustive_search_seconds":1.085922122001648e-6,"evaluations":8.1796875,"distances_sum":1565.820126264168}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7685546875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7685546875,"f1":0.8626519314019324,"seconds":3.935769200325012e-6,"exhaustive_search_seconds":1.085922122001648e-6,"evaluations":8.3046875,"distances_sum":1611.8115524957666}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.888671875,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.888671875,"f1":0.9366929945054951,"seconds":4.55416738986969e-6,"exhaustive_search_seconds":1.085922122001648e-6,"evaluations":8.8125,"distances_sum":1912.2891400482586}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9571860431235436,"seconds":4.53554093837738e-6,"exhaustive_search_seconds":1.085922122001648e-6,"evaluations":8.90625,"distances_sum":2091.823718461474}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9668555402930407,"seconds":4.386529326438904e-6,"exhaustive_search_seconds":1.085922122001648e-6,"evaluations":8.9140625,"distances_sum":2153.4799144382496}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9450065559440564,"seconds":4.5765191316604614e-6,"exhaustive_search_seconds":1.085922122001648e-6,"evaluations":8.7890625,"distances_sum":2034.196015204132}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9736836080586082,"seconds":5.798414349555969e-6,"exhaustive_search_seconds":1.085922122001648e-6,"evaluations":8.921875,"distances_sum":2199.0492815894986}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9371336996337003,"seconds":7.616356015205383e-6,"exhaustive_search_seconds":1.085922122001648e-6,"evaluations":8.8125,"distances_sum":1939.8372684271433}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9458962912087917,"seconds":7.612630724906921e-6,"exhaustive_search_seconds":1.085922122001648e-6,"evaluations":8.890625,"distances_sum":1996.3903977735345}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.953125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9736836080586082,"seconds":5.798414349555969e-6,"exhaustive_search_seconds":1.085922122001648e-6,"evaluations":8.921875,"distances_sum":2199.0492815894986}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.953125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9736836080586082,"seconds":5.798414349555969e-6,"exhaustive_search_seconds":1.085922122001648e-6,"evaluations":8.921875,"distances_sum":2199.0492815894986}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2138671875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2138671875,"f1":null,"seconds":4.490837454795837e-6,"exhaustive_search_seconds":1.9762665033340454e-6,"evaluations":6.4921875,"distances_sum":447.8293365291928}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.529296875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.529296875,"f1":0.6726844336219341,"seconds":5.7034194469451904e-6,"exhaustive_search_seconds":1.9762665033340454e-6,"evaluations":7.1171875,"distances_sum":1104.4216469404594}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.529296875,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.529296875,"f1":0.6726844336219341,"seconds":5.7034194469451904e-6,"exhaustive_search_seconds":1.9762665033340454e-6,"evaluations":7.1171875,"distances_sum":1104.4216469404594}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6875,"f1":0.800358322233323,"seconds":6.575137376785278e-6,"exhaustive_search_seconds":1.9762665033340454e-6,"evaluations":7.828125,"distances_sum":1541.706604965284}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9308493589743598,"seconds":7.614493370056152e-6,"exhaustive_search_seconds":1.9762665033340454e-6,"evaluations":8.734375,"distances_sum":2118.210925506017}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6630859375, conf: {"ssize":8,"bsize":4}, perf: {"precision":1.0,"recall":0.6630859375,"f1":0.7849785631035637,"seconds":4.0512531995773315e-6,"exhaustive_search_seconds":1.9762665033340454e-6,"evaluations":7.71875,"distances_sum":1436.1849220705597}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.87890625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.87890625,"f1":0.9308493589743598,"seconds":7.614493370056152e-6,"exhaustive_search_seconds":1.9762665033340454e-6,"evaluations":8.734375,"distances_sum":2118.210925506017}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9508241758241764,"seconds":4.477798938751221e-6,"exhaustive_search_seconds":1.9762665033340454e-6,"evaluations":8.8125,"distances_sum":2253.0362609182266}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.951865842490843,"seconds":5.0049275159835815e-6,"exhaustive_search_seconds":1.9762665033340454e-6,"evaluations":8.8125,"distances_sum":2272.690971047616}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9150390625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9150390625,"f1":0.951865842490843,"seconds":5.0049275159835815e-6,"exhaustive_search_seconds":1.9762665033340454e-6,"evaluations":8.8125,"distances_sum":2272.690971047616}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9150390625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9150390625,"f1":0.951865842490843,"seconds":5.0049275159835815e-6,"exhaustive_search_seconds":1.9762665033340454e-6,"evaluations":8.8125,"distances_sum":2272.690971047616}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7138671875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7138671875,"f1":0.8225524475524484,"seconds":4.176050424575806e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":7.734375,"distances_sum":1566.9490376687213}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7138671875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7138671875,"f1":0.8225524475524484,"seconds":4.176050424575806e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":7.734375,"distances_sum":1566.9490376687213}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8740234375,"f1":0.925326756576757,"seconds":4.544854164123535e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.6328125,"distances_sum":2104.5840121550204}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.951751373626374,"seconds":5.563721060752869e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.75,"distances_sum":2252.474764820403}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9150390625,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9150390625,"f1":0.951751373626374,"seconds":5.563721060752869e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.75,"distances_sum":2252.474764820403}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9694196428571431,"seconds":3.5874545574188232e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.921875,"distances_sum":2336.6764362140143}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9682119963369968,"seconds":3.518536686897278e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.8984375,"distances_sum":2304.6287555786994}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9694196428571431,"seconds":3.5874545574188232e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.921875,"distances_sum":2336.6764362140143}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9443359375,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9694196428571431,"seconds":3.5874545574188232e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.921875,"distances_sum":2336.6764362140143}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.79296875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.79296875,"f1":0.8748267357642365,"seconds":3.470107913017273e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.546875,"distances_sum":1943.2426083371718}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.357421875, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.357421875,"f1":null,"seconds":2.3189932107925415e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":6.4375,"distances_sum":839.5495369724551}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.35546875, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.35546875,"f1":null,"seconds":2.2333115339279175e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":6.4296875,"distances_sum":828.656087705774}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.79296875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.79296875,"f1":0.8748267357642365,"seconds":3.470107913017273e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.546875,"distances_sum":1943.2426083371718}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9722870879120882,"seconds":3.6731362342834473e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.9453125,"distances_sum":2535.50164263928}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9339622183372187,"seconds":3.814697265625e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.703125,"distances_sum":2273.16814169129}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8544921875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8544921875,"f1":0.9143606393606402,"seconds":3.559514880180359e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.8203125,"distances_sum":2186.1580406576645}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9501953125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9722870879120882,"seconds":3.6731362342834473e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.9453125,"distances_sum":2535.50164263928}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.958984375, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.958984375,"f1":0.9774381868131871,"seconds":3.986060619354248e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.9765625,"distances_sum":2549.8205184645185}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9599609375, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.9599609375,"f1":0.9781250000000001,"seconds":3.727152943611145e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.953125,"distances_sum":2564.166992671707}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":2,"bsize":13}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.9769917582417584,"seconds":4.3120235204696655e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.984375,"distances_sum":2550.2834854987323}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9599609375,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.9599609375,"f1":0.9781250000000001,"seconds":3.727152943611145e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.953125,"distances_sum":2564.166992671707}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9599609375,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.9599609375,"f1":0.9781250000000001,"seconds":3.727152943611145e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.953125,"distances_sum":2564.166992671707}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3740234375, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.3740234375,"f1":null,"seconds":3.4123659133911133e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":6.2890625,"distances_sum":765.2645012044388}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3681640625, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.3681640625,"f1":null,"seconds":2.2388994693756104e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":6.09375,"distances_sum":748.0401810634504}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3740234375,"state":{"ssize":5,"bsize":2},"perf":{"precision":null,"recall":0.3740234375,"f1":null,"seconds":3.4123659133911133e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":6.2890625,"distances_sum":765.2645012044388}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7724609375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7724609375,"f1":0.8597428613053621,"seconds":3.935769200325012e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":8.3515625,"distances_sum":1743.4840033706187}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8115234375, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8115234375,"f1":0.8885936979686986,"seconds":3.6656856536865234e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":8.671875,"distances_sum":1879.9475857380562}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8115234375,"state":{"ssize":5,"bsize":6},"perf":{"precision":1.0,"recall":0.8115234375,"f1":0.8885936979686986,"seconds":3.6656856536865234e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":8.671875,"distances_sum":1879.9475857380562}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9691792582417587,"seconds":3.7923455238342285e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":8.9375,"distances_sum":2346.827450161573}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8603515625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8603515625,"f1":0.9196886446886455,"seconds":3.3713877201080322e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":8.78125,"distances_sum":2070.5450659164544}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9403216575091581,"seconds":3.512948751449585e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":8.8125,"distances_sum":2174.8797136356043}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9663919413919416,"seconds":3.5781413316726685e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":8.9453125,"distances_sum":2336.711555619872}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9691792582417587,"seconds":3.7923455238342285e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":8.9375,"distances_sum":2346.827450161573}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9443359375,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9691792582417587,"seconds":3.7923455238342285e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":8.9375,"distances_sum":2346.827450161573}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.517578125, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.517578125,"f1":null,"seconds":2.639368176460266e-6,"exhaustive_search_seconds":8.344650268554688e-7,"evaluations":7.09375,"distances_sum":1172.4307102607315}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1572265625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1572265625,"f1":null,"seconds":1.6596168279647827e-6,"exhaustive_search_seconds":8.344650268554688e-7,"evaluations":4.15625,"distances_sum":426.69989373005984}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.517578125,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.517578125,"f1":null,"seconds":2.639368176460266e-6,"exhaustive_search_seconds":8.344650268554688e-7,"evaluations":7.09375,"distances_sum":1172.4307102607315}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8212890625, conf: {"ssize":3,"bsize":6}, perf: {"precision":0.9842354910714285,"recall":0.8212890625,"f1":0.890609975961539,"seconds":3.4905970096588135e-6,"exhaustive_search_seconds":8.344650268554688e-7,"evaluations":8.4609375,"distances_sum":2023.3678372829513}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8212890625,"state":{"ssize":3,"bsize":6},"perf":{"precision":0.9842354910714285,"recall":0.8212890625,"f1":0.890609975961539,"seconds":3.4905970096588135e-6,"exhaustive_search_seconds":8.344650268554688e-7,"evaluations":8.4609375,"distances_sum":2023.3678372829513}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":7,"bsize":7}, perf: {"precision":0.9908575148809524,"recall":0.88671875,"f1":0.9299057062728943,"seconds":3.634020686149597e-6,"exhaustive_search_seconds":8.344650268554688e-7,"evaluations":8.6328125,"distances_sum":2265.174809941298}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":1,"bsize":10}, perf: {"precision":0.9891648065476191,"recall":0.9345703125,"f1":0.9591052827380953,"seconds":3.5446137189865112e-6,"exhaustive_search_seconds":8.344650268554688e-7,"evaluations":8.828125,"distances_sum":2476.6349531240603}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9345703125,"state":{"ssize":1,"bsize":10},"perf":{"precision":0.9891648065476191,"recall":0.9345703125,"f1":0.9591052827380953,"seconds":3.5446137189865112e-6,"exhaustive_search_seconds":8.344650268554688e-7,"evaluations":8.828125,"distances_sum":2476.6349531240603}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9345703125,"state":{"ssize":1,"bsize":10},"perf":{"precision":0.9891648065476191,"recall":0.9345703125,"f1":0.9591052827380953,"seconds":3.5446137189865112e-6,"exhaustive_search_seconds":8.344650268554688e-7,"evaluations":8.828125,"distances_sum":2476.6349531240603}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6787109375, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6787109375,"f1":0.7993751040626049,"seconds":3.1534582376480103e-6,"exhaustive_search_seconds":8.363276720046997e-7,"evaluations":7.9453125,"distances_sum":1538.9969546705793}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.529296875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.529296875,"f1":0.6766240703740708,"seconds":2.5853514671325684e-6,"exhaustive_search_seconds":8.363276720046997e-7,"evaluations":7.1171875,"distances_sum":1146.5981567445754}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6787109375,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.6787109375,"f1":0.7993751040626049,"seconds":3.1534582376480103e-6,"exhaustive_search_seconds":8.363276720046997e-7,"evaluations":7.9453125,"distances_sum":1538.9969546705793}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9571657509157516,"seconds":3.6302953958511353e-6,"exhaustive_search_seconds":8.363276720046997e-7,"evaluations":8.765625,"distances_sum":2391.0494232637743}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.833984375, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.833984375,"f1":0.9028305028305038,"seconds":3.3471733331680298e-6,"exhaustive_search_seconds":8.363276720046997e-7,"evaluations":8.3828125,"distances_sum":2038.7543447770431}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.75,"f1":0.8473999958374967,"seconds":3.112480044364929e-6,"exhaustive_search_seconds":8.363276720046997e-7,"evaluations":8.3515625,"distances_sum":1747.0055721089388}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8291015625, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8291015625,"f1":0.9008559149184157,"seconds":3.3229589462280273e-6,"exhaustive_search_seconds":8.363276720046997e-7,"evaluations":8.4609375,"distances_sum":1981.9217302723744}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.923828125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.9571657509157516,"seconds":3.6302953958511353e-6,"exhaustive_search_seconds":8.363276720046997e-7,"evaluations":8.765625,"distances_sum":2391.0494232637743}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9654449716949721,"seconds":3.6749988794326782e-6,"exhaustive_search_seconds":8.363276720046997e-7,"evaluations":8.8359375,"distances_sum":2435.307101747416}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9592662545787549,"seconds":3.5855919122695923e-6,"exhaustive_search_seconds":8.363276720046997e-7,"evaluations":8.8046875,"distances_sum":2397.0333397389777}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9685267857142862,"seconds":3.7588179111480713e-6,"exhaustive_search_seconds":8.363276720046997e-7,"evaluations":8.859375,"distances_sum":2464.4050584288625}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.943359375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9685267857142862,"seconds":3.7588179111480713e-6,"exhaustive_search_seconds":8.363276720046997e-7,"evaluations":8.859375,"distances_sum":2464.4050584288625}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.943359375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9685267857142862,"seconds":3.7588179111480713e-6,"exhaustive_search_seconds":8.363276720046997e-7,"evaluations":8.859375,"distances_sum":2464.4050584288625}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76171875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.76171875,"f1":0.8567999708624717,"seconds":3.209337592124939e-6,"exhaustive_search_seconds":8.437782526016235e-7,"evaluations":8.140625,"distances_sum":1815.1887599676834}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6689453125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6689453125,"f1":0.7889152514152522,"seconds":2.9578804969787598e-6,"exhaustive_search_seconds":8.437782526016235e-7,"evaluations":7.6953125,"distances_sum":1531.1188141675761}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2353515625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2353515625,"f1":null,"seconds":2.898275852203369e-6,"exhaustive_search_seconds":8.437782526016235e-7,"evaluations":4.984375,"distances_sum":564.2181063293784}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.76171875,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.76171875,"f1":0.8567999708624717,"seconds":3.209337592124939e-6,"exhaustive_search_seconds":8.437782526016235e-7,"evaluations":8.140625,"distances_sum":1815.1887599676834}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9409340659340665,"seconds":5.144625902175903e-6,"exhaustive_search_seconds":8.437782526016235e-7,"evaluations":8.421875,"distances_sum":2302.063185498837}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9300824175824183,"seconds":5.06080687046051e-6,"exhaustive_search_seconds":8.437782526016235e-7,"evaluations":8.3203125,"distances_sum":2252.0320912437173}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.771484375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.771484375,"f1":0.8614333583083589,"seconds":4.732981324195862e-6,"exhaustive_search_seconds":8.437782526016235e-7,"evaluations":8.171875,"distances_sum":1850.7672133909205}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.78125,"f1":0.8707849442224451,"seconds":4.781410098075867e-6,"exhaustive_search_seconds":8.437782526016235e-7,"evaluations":8.1484375,"distances_sum":1894.3235761422193}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.783203125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.783203125,"f1":0.8727793040293048,"seconds":4.881992936134338e-6,"exhaustive_search_seconds":8.437782526016235e-7,"evaluations":8.2109375,"distances_sum":1862.0197753030225}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.896484375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.896484375,"f1":0.9409340659340665,"seconds":5.144625902175903e-6,"exhaustive_search_seconds":8.437782526016235e-7,"evaluations":8.421875,"distances_sum":2302.063185498837}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9455242673992678,"seconds":5.6438148021698e-6,"exhaustive_search_seconds":8.437782526016235e-7,"evaluations":8.6171875,"distances_sum":2388.279476333136}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9745535714285716,"seconds":6.051734089851379e-6,"exhaustive_search_seconds":8.437782526016235e-7,"evaluations":8.8671875,"distances_sum":2557.766823516004}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9691449175824179,"seconds":5.945563316345215e-6,"exhaustive_search_seconds":8.437782526016235e-7,"evaluations":8.8515625,"distances_sum":2512.8012008991204}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9511275183150186,"seconds":5.360692739486694e-6,"exhaustive_search_seconds":8.437782526016235e-7,"evaluations":8.703125,"distances_sum":2395.6554088851994}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9464743589743598,"seconds":5.124136805534363e-6,"exhaustive_search_seconds":8.437782526016235e-7,"evaluations":8.703125,"distances_sum":2370.8262269309635}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9518086080586086,"seconds":5.159527063369751e-6,"exhaustive_search_seconds":8.437782526016235e-7,"evaluations":8.7109375,"distances_sum":2408.5160210879453}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9541015625,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9745535714285716,"seconds":6.051734089851379e-6,"exhaustive_search_seconds":8.437782526016235e-7,"evaluations":8.8671875,"distances_sum":2557.766823516004}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9541015625,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9745535714285716,"seconds":6.051734089851379e-6,"exhaustive_search_seconds":8.437782526016235e-7,"evaluations":8.8671875,"distances_sum":2557.766823516004}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6591796875, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6591796875,"f1":0.7819043803418811,"seconds":4.405155777931213e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":7.75,"distances_sum":1546.2631496396366}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6787109375, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6787109375,"f1":0.7990077630702639,"seconds":4.382804036140442e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":7.90625,"distances_sum":1605.164961601175}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6787109375,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.6787109375,"f1":0.7990077630702639,"seconds":4.382804036140442e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":7.90625,"distances_sum":1605.164961601175}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.873046875, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.873046875,"f1":0.9260390651015658,"seconds":5.166977643966675e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.40625,"distances_sum":2223.280013704631}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9379922161172167,"seconds":5.083158612251282e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.609375,"distances_sum":2314.5887281710134}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9316136988011995,"seconds":5.25452196598053e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.4921875,"distances_sum":2265.653603606967}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.81640625, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.81640625,"f1":0.8941652097902107,"seconds":4.969537258148193e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.3671875,"distances_sum":1975.4007676076844}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7626953125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7626953125,"f1":0.8574300699300706,"seconds":4.686415195465088e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.171875,"distances_sum":1819.3370486657989}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8916015625,"state":{"ssize":6,"bsize":8},"perf":{"precision":1.0,"recall":0.8916015625,"f1":0.9379922161172167,"seconds":5.083158612251282e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.609375,"distances_sum":2314.5887281710134}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":7,"bsize":12}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9692536630036632,"seconds":5.466863512992859e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.8359375,"distances_sum":2530.292264634037}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9731398809523812,"seconds":5.433335900306702e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.890625,"distances_sum":2545.8594914711502}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9759500915750918,"seconds":5.338340997695923e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.9375,"distances_sum":2560.7584521117005}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":6,"bsize":11}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9668555402930407,"seconds":5.705282092094421e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.875,"distances_sum":2481.358066550298}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9392799908424913,"seconds":5.105510354042053e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.53125,"distances_sum":2320.205292134655}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9639537545787551,"seconds":5.256384611129761e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.8125,"distances_sum":2506.6704503183155}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9471668956043963,"seconds":5.11854887008667e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.6953125,"distances_sum":2414.762282503507}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9560546875,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9759500915750918,"seconds":5.338340997695923e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.9375,"distances_sum":2560.7584521117005}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9560546875,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9759500915750918,"seconds":5.338340997695923e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.9375,"distances_sum":2560.7584521117005}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.498046875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.498046875,"f1":0.6475253912753917,"seconds":3.926455974578857e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":7.375,"distances_sum":1195.5336825495287}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7646484375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7646484375,"f1":0.8586486430236436,"seconds":4.686415195465088e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.375,"distances_sum":1982.9174165382062}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7646484375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7646484375,"f1":0.8586486430236436,"seconds":4.686415195465088e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.375,"distances_sum":1982.9174165382062}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9606971153846158,"seconds":5.582347512245178e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.8359375,"distances_sum":2608.8486371403665}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9287109375,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9606971153846158,"seconds":5.582347512245178e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.8359375,"distances_sum":2608.8486371403665}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9681547619047622,"seconds":5.688518285751343e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.8671875,"distances_sum":2643.850102062086}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.962890625, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.962890625,"f1":0.9797619047619048,"seconds":5.532056093215942e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.9453125,"distances_sum":2748.717373374452}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.962890625,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9797619047619048,"seconds":5.532056093215942e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.9453125,"distances_sum":2748.717373374452}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.962890625,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9797619047619048,"seconds":5.532056093215942e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.9453125,"distances_sum":2748.717373374452}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7431640625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7431640625,"f1":0.8445341117216125,"seconds":4.794448614120483e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.5,"distances_sum":1816.94557508208}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4140625, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.4140625,"f1":null,"seconds":3.3099204301834106e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":6.0,"distances_sum":979.6734729998547}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7431640625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7431640625,"f1":0.8445341117216125,"seconds":4.794448614120483e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.5,"distances_sum":1816.94557508208}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.95726304945055,"seconds":5.282461643218994e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.78125,"distances_sum":2575.2170890211783}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9640853937728944,"seconds":5.491077899932861e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.8671875,"distances_sum":2612.4683477032877}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.935546875,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9640853937728944,"seconds":5.491077899932861e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.8671875,"distances_sum":2612.4683477032877}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":3,"bsize":12}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9761904761904766,"seconds":5.383044481277466e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.953125,"distances_sum":2675.141146720636}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9560546875,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9761904761904766,"seconds":5.383044481277466e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.953125,"distances_sum":2675.141146720636}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9560546875,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9761904761904766,"seconds":5.383044481277466e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.953125,"distances_sum":2675.141146720636}}, n: 9
mean(cfft.distances) = 0.7512608525361165
mean(cdnet.distances) = 0.34523717090245704
mean(crand.distances) = 0.33629730972483196
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8377777777777777
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.9
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.9022222222222224
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8888888888888888
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8955555555555555
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.8911111111111111
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9377777777777778
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9422222222222222
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.92
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8911111111111111
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.9288888888888889
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.9244444444444445
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8777777777777778
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8844444444444445
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9199999999999999
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9333333333333335
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9288888888888889
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8866666666666667
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8533333333333334
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.9222222222222222
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.9044444444444445
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.8777777777777778
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9155555555555557
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8955555555555555
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.8933333333333332
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.8999999999999999
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8977777777777778
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.9066666666666667
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.851111111111111
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.8666666666666667
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9111111111111111
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 4, 15]]
** centroid: 1, normalized-entropy: 0.7424875695421234, [(2, 4), (3, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 8, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 2, 3, 1, 2, 1, 3, 1, 3]
acc = 0.9666666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 4, 15]]
** centroid: 1, normalized-entropy: 0.7424875695421234, [(2, 4), (3, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 8, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 2, 3, 1, 2, 1, 3, 1, 3]
acc = 0.9666666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 4, 15]]
** centroid: 1, normalized-entropy: 0.7424875695421234, [(2, 4), (3, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 8, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 2, 3, 1, 2, 1, 3, 1, 3]
acc = 0.9666666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 4, 15]]
** centroid: 1, normalized-entropy: 0.7424875695421234, [(2, 4), (3, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 8, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 2, 3, 1, 2, 1, 3, 1, 3]
acc = 0.9666666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 4, 15]]
** centroid: 1, normalized-entropy: 0.7424875695421234, [(2, 4), (3, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 8, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 2, 3, 1, 2, 1, 3, 1, 3]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 4, 15]]
** centroid: 1, normalized-entropy: 0.7424875695421234, [(2, 4), (3, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 8, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 2, 3, 1, 2, 1, 3, 1, 3]
acc = 0.9133333333333333
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 4, 15]]
** centroid: 1, normalized-entropy: 0.7424875695421234, [(2, 4), (3, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 8, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 2, 3, 1, 2, 1, 3, 1, 3]
acc = 0.9533333333333334
*** finished computation of 12 references, err: [Inf, 0.6031272208690643] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 11, 20]]
** centroid: 1, normalized-entropy: 0.9383153522334071, [(2, 11), (3, 20)]
*** center 2: selecting labels [1] (freq >= 1) [from [37, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 13]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 8: selecting labels [1] (freq >= 1) [from [3, 0, 0]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 10, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 12, 1]]
** centroid: 12, normalized-entropy: 0.3912435636292556, [(2, 12), (3, 1)]
finished with 14 centroids; started with 12
acc = 0.92
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.3090853236459039] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3090853236459039, 0.28079769129420185] ***
*** finished computation of 3 references, err: [Inf, 0.3090853236459039, 0.28079769129420185] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [93, 122, 1]]
** centroid: 1, normalized-entropy: 0.9868359909116974, [(1, 93), (2, 122)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [294, 59, 0]]
** centroid: 2, normalized-entropy: 0.6511175480750335, [(1, 294), (2, 59)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [21, 61, 15]]
** centroid: 3, normalized-entropy: 0.8297997439061807, [(1, 21), (2, 61), (3, 15)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2290307920728181] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2290307920728181, 0.19243613774986104] ***
*** finished computation of 7 references, err: [Inf, 0.2290307920728181, 0.19243613774986104] ***
*** center 1: selecting labels [1] (freq >= 2) [from [129, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 52, 16]]
** centroid: 2, normalized-entropy: 0.787126586201269, [(2, 52), (3, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [86, 8, 0]]
** centroid: 4, normalized-entropy: 0.4199210973757179, [(1, 86), (2, 8)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [4, 102, 0]]
** centroid: 5, normalized-entropy: 0.23181305002459035, [(1, 4), (2, 102)]
*** center 6: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [27, 80, 0]]
** centroid: 7, normalized-entropy: 0.8149603494908418, [(1, 27), (2, 80)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2399371936805602] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2399371936805602, 0.19273611351169054] ***
*** finished computation of 7 references, err: [Inf, 0.2399371936805602, 0.19273611351169054] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [106, 29, 0]]
** centroid: 1, normalized-entropy: 0.7505858411812107, [(1, 106), (2, 29)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [70, 10, 0]]
** centroid: 2, normalized-entropy: 0.5435644431995963, [(1, 70), (2, 10)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 71, 23]]
** centroid: 3, normalized-entropy: 0.8027381019527042, [(2, 71), (3, 23)]
*** center 4: selecting labels [1] (freq >= 2) [from [107, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [85, 28, 0]]
** centroid: 5, normalized-entropy: 0.8077527023327313, [(1, 85), (2, 28)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [44, 17, 0]]
** centroid: 6, normalized-entropy: 0.8536576732793314, [(1, 44), (2, 17)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 77, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.250598384120475] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.250598384120475, 0.19373639570507242] ***
*** finished computation of 7 references, err: [Inf, 0.250598384120475, 0.19373639570507242] ***
*** center 1: selecting labels [1] (freq >= 2) [from [132, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 46, 21]]
** centroid: 2, normalized-entropy: 0.8970964164730478, [(2, 46), (3, 21)]
*** center 3: selecting labels [1] (freq >= 2) [from [104, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [84, 34, 0]]
** centroid: 4, normalized-entropy: 0.8663006754980497, [(1, 84), (2, 34)]
*** center 5: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 91, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [12, 67, 0]]
** centroid: 7, normalized-entropy: 0.6145715612236268, [(1, 12), (2, 67)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.36005688011869674] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36005688011869674, 0.272489507372297] ***
*** finished computation of 3 references, err: [Inf, 0.36005688011869674, 0.272489507372297] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [177, 18, 0]]
** centroid: 1, normalized-entropy: 0.4441260450795996, [(1, 177), (2, 18)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [138, 29, 0]]
** centroid: 2, normalized-entropy: 0.6659927721501786, [(1, 138), (2, 29)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [97, 185, 23]]
** centroid: 3, normalized-entropy: 0.7850915764235771, [(1, 97), (2, 185), (3, 23)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2856870327742472] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2856870327742472, 0.23362643738044075] ***
*** finished computation of 3 references, err: [Inf, 0.2856870327742472, 0.23362643738044075] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [59, 116, 18]]
** centroid: 1, normalized-entropy: 0.8096947839130892, [(1, 59), (2, 116), (3, 18)]
*** center 2: selecting labels [1] (freq >= 2) [from [236, 1, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [113, 121, 3]]
** centroid: 3, normalized-entropy: 0.684211606269992, [(1, 113), (2, 121), (3, 3)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.21204104908048413] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21204104908048413, 0.19579745175501517] ***
*** starting iteration: 2; err: [Inf, 0.21204104908048413, 0.19579745175501517] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21204104908048413, 0.19579745175501517, 0.19396543345349776] ***
*** starting iteration: 3; err: [Inf, 0.21204104908048413, 0.19579745175501517, 0.19396543345349776] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21204104908048413, 0.19579745175501517, 0.19396543345349776, 0.1926263012432468] ***
*** finished computation of 7 references, err: [Inf, 0.21204104908048413, 0.19579745175501517, 0.19396543345349776, 0.1926263012432468] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [108, 34, 0]]
** centroid: 1, normalized-entropy: 0.7941021417852022, [(1, 108), (2, 34)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [40, 38, 0]]
** centroid: 2, normalized-entropy: 0.9995256892936492, [(1, 40), (2, 38)]
*** center 3: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [46, 20, 0]]
** centroid: 4, normalized-entropy: 0.8849636363831529, [(1, 46), (2, 20)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 82, 2]]
** centroid: 5, normalized-entropy: 0.1623261801753929, [(2, 82), (3, 2)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 68, 14]]
** centroid: 6, normalized-entropy: 0.6593758812786991, [(2, 68), (3, 14)]
*** center 7: selecting labels [1] (freq >= 2) [from [112, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.28317115353657746] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28317115353657746, 0.21685652904117528] ***
*** starting iteration: 2; err: [Inf, 0.28317115353657746, 0.21685652904117528] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28317115353657746, 0.21685652904117528, 0.2037639715820495] ***
*** starting iteration: 3; err: [Inf, 0.28317115353657746, 0.21685652904117528, 0.2037639715820495] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28317115353657746, 0.21685652904117528, 0.2037639715820495, 0.19817772865745015] ***
*** finished computation of 7 references, err: [Inf, 0.28317115353657746, 0.21685652904117528, 0.2037639715820495, 0.19817772865745015] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 80, 23]]
** centroid: 1, normalized-entropy: 0.7661493370832159, [(2, 80), (3, 23)]
*** center 2: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [44, 49, 0]]
** centroid: 3, normalized-entropy: 0.9979139338855983, [(1, 44), (2, 49)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [83, 4, 0]]
** centroid: 4, normalized-entropy: 0.2690553027246505, [(1, 83), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [59, 59, 0]]
** centroid: 5, normalized-entropy: 1.0, [(1, 59), (2, 59)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [55, 40, 0]]
** centroid: 6, normalized-entropy: 0.9819407868640977, [(1, 55), (2, 40)]
*** center 7: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2740760669021447] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2740760669021447, 0.21725384229752256] ***
*** starting iteration: 2; err: [Inf, 0.2740760669021447, 0.21725384229752256] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2740760669021447, 0.21725384229752256, 0.2034864582741323] ***
*** starting iteration: 3; err: [Inf, 0.2740760669021447, 0.21725384229752256, 0.2034864582741323] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2740760669021447, 0.21725384229752256, 0.2034864582741323, 0.19609418270252144] ***
*** finished computation of 7 references, err: [Inf, 0.2740760669021447, 0.21725384229752256, 0.2034864582741323, 0.19609418270252144] ***
*** center 1: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [110, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [65, 11, 0]]
** centroid: 3, normalized-entropy: 0.5965109917085881, [(1, 65), (2, 11)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [1, 106, 2]]
** centroid: 4, normalized-entropy: 0.13303964861069897, [(2, 106), (3, 2)]
*** center 5: selecting labels [1, 2, 3] (freq >= 2) [from [15, 110, 19]]
** centroid: 5, normalized-entropy: 0.6449751701251524, [(1, 15), (2, 110), (3, 19)]
*** center 6: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [76, 11, 0]]
** centroid: 7, normalized-entropy: 0.5475844288749033, [(1, 76), (2, 11)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2227134185797023] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2227134185797023, 0.1837648848224118] ***
*** starting iteration: 2; err: [Inf, 0.2227134185797023, 0.1837648848224118] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2227134185797023, 0.1837648848224118, 0.17314598263540604] ***
*** starting iteration: 3; err: [Inf, 0.2227134185797023, 0.1837648848224118, 0.17314598263540604] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2227134185797023, 0.1837648848224118, 0.17314598263540604, 0.16032529976246906] ***
*** starting iteration: 4; err: [Inf, 0.2227134185797023, 0.1837648848224118, 0.17314598263540604, 0.16032529976246906] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2227134185797023, 0.1837648848224118, 0.17314598263540604, 0.16032529976246906, 0.15332005964731937] ***
*** starting iteration: 5; err: [Inf, 0.2227134185797023, 0.1837648848224118, 0.17314598263540604, 0.16032529976246906, 0.15332005964731937] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2227134185797023, 0.1837648848224118, 0.17314598263540604, 0.16032529976246906, 0.15332005964731937, 0.14886518557102899] ***
*** starting iteration: 6; err: [Inf, 0.2227134185797023, 0.1837648848224118, 0.17314598263540604, 0.16032529976246906, 0.15332005964731937, 0.14886518557102899] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2227134185797023, 0.1837648848224118, 0.17314598263540604, 0.16032529976246906, 0.15332005964731937, 0.14886518557102899, 0.1460174182401942] ***
*** starting iteration: 7; err: [Inf, 0.2227134185797023, 0.1837648848224118, 0.17314598263540604, 0.16032529976246906, 0.15332005964731937, 0.14886518557102899, 0.1460174182401942] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2227134185797023, 0.1837648848224118, 0.17314598263540604, 0.16032529976246906, 0.15332005964731937, 0.14886518557102899, 0.1460174182401942, 0.14469093862779764] ***
*** starting iteration: 8; err: [Inf, 0.2227134185797023, 0.1837648848224118, 0.17314598263540604, 0.16032529976246906, 0.15332005964731937, 0.14886518557102899, 0.1460174182401942, 0.14469093862779764] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2227134185797023, 0.1837648848224118, 0.17314598263540604, 0.16032529976246906, 0.15332005964731937, 0.14886518557102899, 0.1460174182401942, 0.14469093862779764, 0.14445055554853053] ***
*** finished computation of 7 references, err: [Inf, 0.2227134185797023, 0.1837648848224118, 0.17314598263540604, 0.16032529976246906, 0.15332005964731937, 0.14886518557102899, 0.1460174182401942, 0.14469093862779764, 0.14445055554853053] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 99, 16]]
** centroid: 1, normalized-entropy: 0.5819569606149722, [(2, 99), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [109, 13, 0]]
** centroid: 2, normalized-entropy: 0.48944383152584386, [(1, 109), (2, 13)]
*** center 3: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [69, 42, 0]]
** centroid: 4, normalized-entropy: 0.9568886656798214, [(1, 69), (2, 42)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [9, 86, 0]]
** centroid: 5, normalized-entropy: 0.4520861986745138, [(1, 9), (2, 86)]
*** center 6: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [92, 2, 0]]
** centroid: 7, normalized-entropy: 0.14854949043034832, [(1, 92), (2, 2)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.31661004581763735] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.31661004581763735, 0.19743704973444945] ***
*** starting iteration: 2; err: [Inf, 0.31661004581763735, 0.19743704973444945] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.31661004581763735, 0.19743704973444945, 0.1713027823018259] ***
*** starting iteration: 3; err: [Inf, 0.31661004581763735, 0.19743704973444945, 0.1713027823018259] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.31661004581763735, 0.19743704973444945, 0.1713027823018259, 0.158544704872372] ***
*** starting iteration: 4; err: [Inf, 0.31661004581763735, 0.19743704973444945, 0.1713027823018259, 0.158544704872372] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.31661004581763735, 0.19743704973444945, 0.1713027823018259, 0.158544704872372, 0.1534685264306626] ***
*** starting iteration: 5; err: [Inf, 0.31661004581763735, 0.19743704973444945, 0.1713027823018259, 0.158544704872372, 0.1534685264306626] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.31661004581763735, 0.19743704973444945, 0.1713027823018259, 0.158544704872372, 0.1534685264306626, 0.15046366765841038] ***
*** starting iteration: 6; err: [Inf, 0.31661004581763735, 0.19743704973444945, 0.1713027823018259, 0.158544704872372, 0.1534685264306626, 0.15046366765841038] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.31661004581763735, 0.19743704973444945, 0.1713027823018259, 0.158544704872372, 0.1534685264306626, 0.15046366765841038, 0.1493058373001048] ***
*** starting iteration: 7; err: [Inf, 0.31661004581763735, 0.19743704973444945, 0.1713027823018259, 0.158544704872372, 0.1534685264306626, 0.15046366765841038, 0.1493058373001048] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.31661004581763735, 0.19743704973444945, 0.1713027823018259, 0.158544704872372, 0.1534685264306626, 0.15046366765841038, 0.1493058373001048, 0.14888211044537342] ***
*** finished computation of 7 references, err: [Inf, 0.31661004581763735, 0.19743704973444945, 0.1713027823018259, 0.158544704872372, 0.1534685264306626, 0.15046366765841038, 0.1493058373001048, 0.14888211044537342] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 85, 23]]
** centroid: 1, normalized-entropy: 0.7471082932651727, [(2, 85), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [68, 2, 0]]
** centroid: 2, normalized-entropy: 0.18717625687320805, [(1, 68), (2, 2)]
*** center 3: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [122, 48, 0]]
** centroid: 5, normalized-entropy: 0.8586370819183629, [(1, 122), (2, 48)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [4, 65, 0]]
** centroid: 6, normalized-entropy: 0.3193373865339728, [(1, 4), (2, 65)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [52, 32, 0]]
** centroid: 7, normalized-entropy: 0.9587118829771317, [(1, 52), (2, 32)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23489577254082175] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23489577254082175, 0.19644458389267147] ***
*** starting iteration: 2; err: [Inf, 0.23489577254082175, 0.19644458389267147] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23489577254082175, 0.19644458389267147, 0.18135150373708095] ***
*** starting iteration: 3; err: [Inf, 0.23489577254082175, 0.19644458389267147, 0.18135150373708095] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23489577254082175, 0.19644458389267147, 0.18135150373708095, 0.16191948339415677] ***
*** starting iteration: 4; err: [Inf, 0.23489577254082175, 0.19644458389267147, 0.18135150373708095, 0.16191948339415677] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23489577254082175, 0.19644458389267147, 0.18135150373708095, 0.16191948339415677, 0.15118173905438848] ***
*** starting iteration: 5; err: [Inf, 0.23489577254082175, 0.19644458389267147, 0.18135150373708095, 0.16191948339415677, 0.15118173905438848] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23489577254082175, 0.19644458389267147, 0.18135150373708095, 0.16191948339415677, 0.15118173905438848, 0.14745349466250554] ***
*** starting iteration: 6; err: [Inf, 0.23489577254082175, 0.19644458389267147, 0.18135150373708095, 0.16191948339415677, 0.15118173905438848, 0.14745349466250554] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23489577254082175, 0.19644458389267147, 0.18135150373708095, 0.16191948339415677, 0.15118173905438848, 0.14745349466250554, 0.14656337401850605] ***
*** finished computation of 7 references, err: [Inf, 0.23489577254082175, 0.19644458389267147, 0.18135150373708095, 0.16191948339415677, 0.15118173905438848, 0.14745349466250554, 0.14656337401850605] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [15, 81, 0]]
** centroid: 1, normalized-entropy: 0.625262405223423, [(1, 15), (2, 81)]
*** center 2: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [79, 15, 0]]
** centroid: 4, normalized-entropy: 0.6332905746550958, [(1, 79), (2, 15)]
*** center 5: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [59, 45, 0]]
** centroid: 6, normalized-entropy: 0.9868884753797076, [(1, 59), (2, 45)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 97, 21]]
** centroid: 7, normalized-entropy: 0.6756073580863721, [(2, 97), (3, 21)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5703817385587249] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5703817385587249, 0.3346709547460907] ***
*** starting iteration: 2; err: [Inf, 0.5703817385587249, 0.3346709547460907] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5703817385587249, 0.3346709547460907, 0.33078515871956543] ***
*** starting iteration: 3; err: [Inf, 0.5703817385587249, 0.3346709547460907, 0.33078515871956543] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5703817385587249, 0.3346709547460907, 0.33078515871956543, 0.3292242134319948] ***
*** finished computation of 3 references, err: [Inf, 0.5703817385587249, 0.3346709547460907, 0.33078515871956543, 0.3292242134319948] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [141, 86, 0]]
** centroid: 1, normalized-entropy: 0.9572290617728079, [(1, 141), (2, 86)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [78, 156, 16]]
** centroid: 2, normalized-entropy: 0.7587862850129383, [(1, 78), (2, 156), (3, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [189, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3144601314891314] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3144601314891314, 0.2937416108311161] ***
*** starting iteration: 2; err: [Inf, 0.3144601314891314, 0.2937416108311161] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3144601314891314, 0.2937416108311161, 0.29285972376634695] ***
*** finished computation of 3 references, err: [Inf, 0.3144601314891314, 0.2937416108311161, 0.29285972376634695] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [75, 152, 23]]
** centroid: 1, normalized-entropy: 0.8039502819799229, [(1, 75), (2, 152), (3, 23)]
*** center 2: selecting labels [1] (freq >= 2) [from [199, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [138, 80, 0]]
** centroid: 3, normalized-entropy: 0.9483190833715304, [(1, 138), (2, 80)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.33335854638943163] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33335854638943163, 0.29181602609663576] ***
*** starting iteration: 2; err: [Inf, 0.33335854638943163, 0.29181602609663576] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33335854638943163, 0.29181602609663576, 0.2871471709212933] ***
*** starting iteration: 3; err: [Inf, 0.33335854638943163, 0.29181602609663576, 0.2871471709212933] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33335854638943163, 0.29181602609663576, 0.2871471709212933, 0.28635293840691783] ***
*** finished computation of 3 references, err: [Inf, 0.33335854638943163, 0.29181602609663576, 0.2871471709212933, 0.28635293840691783] ***
*** center 1: selecting labels [1] (freq >= 2) [from [223, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [130, 85, 0]]
** centroid: 2, normalized-entropy: 0.9681647320759545, [(1, 130), (2, 85)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [55, 153, 21]]
** centroid: 3, normalized-entropy: 0.7565202537786236, [(1, 55), (2, 153), (3, 21)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.39735430653847464] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39735430653847464, 0.301410631711564] ***
*** starting iteration: 2; err: [Inf, 0.39735430653847464, 0.301410631711564] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39735430653847464, 0.301410631711564, 0.2933049106595663] ***
*** starting iteration: 3; err: [Inf, 0.39735430653847464, 0.301410631711564, 0.2933049106595663] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39735430653847464, 0.301410631711564, 0.2933049106595663, 0.2916948899050598] ***
*** finished computation of 3 references, err: [Inf, 0.39735430653847464, 0.301410631711564, 0.2933049106595663, 0.2916948899050598] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [9, 175, 16]]
** centroid: 1, normalized-entropy: 0.4172968392347432, [(1, 9), (2, 175), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [153, 65, 0]]
** centroid: 2, normalized-entropy: 0.8790363991859849, [(1, 153), (2, 65)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [246, 2, 0]]
** centroid: 3, normalized-entropy: 0.06766982525198395, [(1, 246), (2, 2)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3771903223513082] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3771903223513082, 0.30284426841923945] ***
*** starting iteration: 2; err: [Inf, 0.3771903223513082, 0.30284426841923945] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3771903223513082, 0.30284426841923945, 0.29497941529638005] ***
*** starting iteration: 3; err: [Inf, 0.3771903223513082, 0.30284426841923945, 0.29497941529638005] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3771903223513082, 0.30284426841923945, 0.29497941529638005, 0.2930294933793103] ***
*** finished computation of 3 references, err: [Inf, 0.3771903223513082, 0.30284426841923945, 0.29497941529638005, 0.2930294933793103] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [139, 86, 0]]
** centroid: 1, normalized-entropy: 0.9595964000483795, [(1, 139), (2, 86)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [84, 146, 23]]
** centroid: 2, normalized-entropy: 0.8204241441449106, [(1, 84), (2, 146), (3, 23)]
*** center 3: selecting labels [1] (freq >= 1) [from [189, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3453579858291721] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3453579858291721, 0.2901341886716201] ***
*** starting iteration: 2; err: [Inf, 0.3453579858291721, 0.2901341886716201] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3453579858291721, 0.2901341886716201, 0.2864117651872024] ***
*** starting iteration: 3; err: [Inf, 0.3453579858291721, 0.2901341886716201, 0.2864117651872024] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3453579858291721, 0.2901341886716201, 0.2864117651872024, 0.28592308945786293] ***
*** finished computation of 3 references, err: [Inf, 0.3453579858291721, 0.2901341886716201, 0.2864117651872024, 0.28592308945786293] ***
*** center 1: selecting labels [1] (freq >= 1) [from [222, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [124, 83, 0]]
** centroid: 2, normalized-entropy: 0.9715129705922371, [(1, 124), (2, 83)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [62, 155, 21]]
** centroid: 3, normalized-entropy: 0.7681662738371634, [(1, 62), (2, 155), (3, 21)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.222334170912591] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.222334170912591, 0.19125250810141992] ***
*** starting iteration: 2; err: [Inf, 0.222334170912591, 0.19125250810141992] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.222334170912591, 0.19125250810141992, 0.18573630688706408] ***
*** starting iteration: 3; err: [Inf, 0.222334170912591, 0.19125250810141992, 0.18573630688706408] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.222334170912591, 0.19125250810141992, 0.18573630688706408, 0.18390287930710805] ***
*** starting iteration: 4; err: [Inf, 0.222334170912591, 0.19125250810141992, 0.18573630688706408, 0.18390287930710805] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.222334170912591, 0.19125250810141992, 0.18573630688706408, 0.18390287930710805, 0.183009406435653] ***
*** finished computation of 7 references, err: [Inf, 0.222334170912591, 0.19125250810141992, 0.18573630688706408, 0.18390287930710805, 0.183009406435653] ***
*** center 1: selecting labels [1] (freq >= 2) [from [114, 1, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [67, 8, 0]]
** centroid: 2, normalized-entropy: 0.48977901368693744, [(1, 67), (2, 8)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 63, 16]]
** centroid: 3, normalized-entropy: 0.7269625813353975, [(2, 63), (3, 16)]
*** center 4: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [121, 2, 0]]
** centroid: 5, normalized-entropy: 0.11989294671951675, [(1, 121), (2, 2)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 83, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [8, 85, 0]]
** centroid: 7, normalized-entropy: 0.42304881571335795, [(1, 8), (2, 85)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22939118031674866] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22939118031674866, 0.19268199182611176] ***
*** starting iteration: 2; err: [Inf, 0.22939118031674866, 0.19268199182611176] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22939118031674866, 0.19268199182611176, 0.1887887234155876] ***
*** starting iteration: 3; err: [Inf, 0.22939118031674866, 0.19268199182611176, 0.1887887234155876] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22939118031674866, 0.19268199182611176, 0.1887887234155876, 0.18808147634590405] ***
*** finished computation of 7 references, err: [Inf, 0.22939118031674866, 0.19268199182611176, 0.1887887234155876, 0.18808147634590405] ***
*** center 1: selecting labels [1] (freq >= 2) [from [123, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [70, 9, 0]]
** centroid: 2, normalized-entropy: 0.511639783631173, [(1, 70), (2, 9)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 58, 23]]
** centroid: 3, normalized-entropy: 0.8607781176165941, [(2, 58), (3, 23)]
*** center 4: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [109, 16, 0]]
** centroid: 5, normalized-entropy: 0.5519275534566073, [(1, 109), (2, 16)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [12, 71, 0]]
** centroid: 6, normalized-entropy: 0.5961045458832345, [(1, 12), (2, 71)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 78, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.233181559091163] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.233181559091163, 0.19413121321379603] ***
*** starting iteration: 2; err: [Inf, 0.233181559091163, 0.19413121321379603] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.233181559091163, 0.19413121321379603, 0.18855763636836628] ***
*** starting iteration: 3; err: [Inf, 0.233181559091163, 0.19413121321379603, 0.18855763636836628] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.233181559091163, 0.19413121321379603, 0.18855763636836628, 0.1867636457948514] ***
*** starting iteration: 4; err: [Inf, 0.233181559091163, 0.19413121321379603, 0.18855763636836628, 0.1867636457948514] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.233181559091163, 0.19413121321379603, 0.18855763636836628, 0.1867636457948514, 0.1854718060398857] ***
*** starting iteration: 5; err: [Inf, 0.233181559091163, 0.19413121321379603, 0.18855763636836628, 0.1867636457948514, 0.1854718060398857] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.233181559091163, 0.19413121321379603, 0.18855763636836628, 0.1867636457948514, 0.1854718060398857, 0.1847877649009518] ***
*** finished computation of 7 references, err: [Inf, 0.233181559091163, 0.19413121321379603, 0.18855763636836628, 0.1867636457948514, 0.1854718060398857, 0.1847877649009518] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [98, 3, 0]]
** centroid: 1, normalized-entropy: 0.192900074578984, [(1, 98), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [73, 12, 0]]
** centroid: 2, normalized-entropy: 0.5873116089977589, [(1, 73), (2, 12)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 41, 21]]
** centroid: 3, normalized-entropy: 0.9235785996175947, [(2, 41), (3, 21)]
*** center 4: selecting labels [1] (freq >= 2) [from [115, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [119, 1, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 95, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 86, 0]]
** centroid: 7, normalized-entropy: 0.1564910629057016, [(1, 2), (2, 86)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2204388349901538] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2204388349901538, 0.18731957804076038] ***
*** starting iteration: 2; err: [Inf, 0.2204388349901538, 0.18731957804076038] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2204388349901538, 0.18731957804076038, 0.18438954417266556] ***
*** starting iteration: 3; err: [Inf, 0.2204388349901538, 0.18731957804076038, 0.18438954417266556] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2204388349901538, 0.18731957804076038, 0.18438954417266556, 0.18370366095657553] ***
*** finished computation of 7 references, err: [Inf, 0.2204388349901538, 0.18731957804076038, 0.18438954417266556, 0.18370366095657553] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 83, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [65, 38, 0]]
** centroid: 3, normalized-entropy: 0.9498485528365604, [(1, 65), (2, 38)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [91, 10, 0]]
** centroid: 4, normalized-entropy: 0.46584917377204255, [(1, 91), (2, 10)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [89, 19, 0]]
** centroid: 5, normalized-entropy: 0.6710828900205286, [(1, 89), (2, 19)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 92, 16]]
** centroid: 6, normalized-entropy: 0.6051865766334207, [(2, 92), (3, 16)]
*** center 7: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23497065557432228] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23497065557432228, 0.19345448079283] ***
*** starting iteration: 2; err: [Inf, 0.23497065557432228, 0.19345448079283] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23497065557432228, 0.19345448079283, 0.18877947470941198] ***
*** starting iteration: 3; err: [Inf, 0.23497065557432228, 0.19345448079283, 0.18877947470941198] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23497065557432228, 0.19345448079283, 0.18877947470941198, 0.18777582296791642] ***
*** starting iteration: 4; err: [Inf, 0.23497065557432228, 0.19345448079283, 0.18877947470941198, 0.18777582296791642] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23497065557432228, 0.19345448079283, 0.18877947470941198, 0.18777582296791642, 0.18738706256418294] ***
*** finished computation of 7 references, err: [Inf, 0.23497065557432228, 0.19345448079283, 0.18877947470941198, 0.18777582296791642, 0.18738706256418294] ***
*** center 1: selecting labels [1] (freq >= 1) [from [102, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 61, 23]]
** centroid: 2, normalized-entropy: 0.8468781063424823, [(2, 61), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [106, 4, 0]]
** centroid: 3, normalized-entropy: 0.22536363912739493, [(1, 106), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [83, 1, 0]]
** centroid: 4, normalized-entropy: 0.09317131799548928, [(1, 83), (2, 1)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [4, 80, 0]]
** centroid: 5, normalized-entropy: 0.2761954276479391, [(1, 4), (2, 80)]
*** center 6: selecting labels [1] (freq >= 1) [from [104, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [13, 86, 0]]
** centroid: 7, normalized-entropy: 0.5610284863400681, [(1, 13), (2, 86)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23547374463264553] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23547374463264553, 0.19414413445562856] ***
*** starting iteration: 2; err: [Inf, 0.23547374463264553, 0.19414413445562856] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23547374463264553, 0.19414413445562856, 0.18807287589329919] ***
*** starting iteration: 3; err: [Inf, 0.23547374463264553, 0.19414413445562856, 0.18807287589329919] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23547374463264553, 0.19414413445562856, 0.18807287589329919, 0.1858336441707553] ***
*** starting iteration: 4; err: [Inf, 0.23547374463264553, 0.19414413445562856, 0.18807287589329919, 0.1858336441707553] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23547374463264553, 0.19414413445562856, 0.18807287589329919, 0.1858336441707553, 0.18540009452138972] ***
*** finished computation of 7 references, err: [Inf, 0.23547374463264553, 0.19414413445562856, 0.18807287589329919, 0.1858336441707553, 0.18540009452138972] ***
*** center 1: selecting labels [1] (freq >= 1) [from [104, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 65, 21]]
** centroid: 2, normalized-entropy: 0.8019325020834525, [(2, 65), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [59, 51, 0]]
** centroid: 3, normalized-entropy: 0.9961812375892514, [(1, 59), (2, 51)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [76, 17, 0]]
** centroid: 4, normalized-entropy: 0.6861549474202007, [(1, 76), (2, 17)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [3, 104, 0]]
** centroid: 5, normalized-entropy: 0.18445186314098744, [(1, 3), (2, 104)]
*** center 6: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [91, 1, 0]]
** centroid: 7, normalized-entropy: 0.08650421412134586, [(1, 91), (2, 1)]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 10)
[0.9349948751146355, 0.924019828211445, 0.9230008451565338, 0.9219818621016226, 0.9190268112423802, 0.9109858361355366, 0.8910317503131875, 0.8839767911624198, 0.8029826233419047, 0.7968867070663478]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9349948751146355
finished with 11
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.18365597797840186] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18365597797840186, 0.15395964411305482] ***
*** starting iteration: 2; err: [Inf, 0.18365597797840186, 0.15395964411305482] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18365597797840186, 0.15395964411305482, 0.14980165101587772] ***
*** starting iteration: 3; err: [Inf, 0.18365597797840186, 0.15395964411305482, 0.14980165101587772] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18365597797840186, 0.15395964411305482, 0.14980165101587772, 0.14850694426931804] ***
*** starting iteration: 4; err: [Inf, 0.18365597797840186, 0.15395964411305482, 0.14980165101587772, 0.14850694426931804] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18365597797840186, 0.15395964411305482, 0.14980165101587772, 0.14850694426931804, 0.1479040416381979] ***
*** finished computation of 7 references, err: [Inf, 0.18365597797840186, 0.15395964411305482, 0.14980165101587772, 0.14850694426931804, 0.1479040416381979] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [123, 8, 0]]
** centroid: 1, normalized-entropy: 0.3316727407990799, [(1, 123), (2, 8)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [83, 4, 0]]
** centroid: 2, normalized-entropy: 0.2690553027246505, [(1, 83), (2, 4)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 57, 16]]
** centroid: 3, normalized-entropy: 0.7586638628883696, [(2, 57), (3, 16)]
*** center 4: selecting labels [1] (freq >= 1) [from [101, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [99, 6, 0]]
** centroid: 5, normalized-entropy: 0.3159971329784246, [(1, 99), (2, 6)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 82, 0]]
** centroid: 6, normalized-entropy: 0.09408443883267342, [(1, 1), (2, 82)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 85, 0]]
** centroid: 7, normalized-entropy: 0.09140162014739266, [(1, 1), (2, 85)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1937971289410651] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1937971289410651, 0.14743249199591923] ***
*** starting iteration: 2; err: [Inf, 0.1937971289410651, 0.14743249199591923] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1937971289410651, 0.14743249199591923, 0.14469979345767775] ***
*** starting iteration: 3; err: [Inf, 0.1937971289410651, 0.14743249199591923, 0.14469979345767775] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1937971289410651, 0.14743249199591923, 0.14469979345767775, 0.14451732815207] ***
*** finished computation of 7 references, err: [Inf, 0.1937971289410651, 0.14743249199591923, 0.14469979345767775, 0.14451732815207] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 87, 23]]
** centroid: 1, normalized-entropy: 0.73974144872329, [(2, 87), (3, 23)]
*** center 2: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [74, 41, 0]]
** centroid: 4, normalized-entropy: 0.9397580401106037, [(1, 74), (2, 41)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [88, 24, 0]]
** centroid: 5, normalized-entropy: 0.7495952572594798, [(1, 88), (2, 24)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 80, 0]]
** centroid: 6, normalized-entropy: 0.09597040299587173, [(1, 1), (2, 80)]
*** center 7: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21446425207531725] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21446425207531725, 0.1522177825646958] ***
*** starting iteration: 2; err: [Inf, 0.21446425207531725, 0.1522177825646958] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21446425207531725, 0.1522177825646958, 0.14797246913290185] ***
*** starting iteration: 3; err: [Inf, 0.21446425207531725, 0.1522177825646958, 0.14797246913290185] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21446425207531725, 0.1522177825646958, 0.14797246913290185, 0.1472287747689217] ***
*** finished computation of 7 references, err: [Inf, 0.21446425207531725, 0.1522177825646958, 0.14797246913290185, 0.1472287747689217] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [108, 1, 0]]
** centroid: 1, normalized-entropy: 0.07526826758743464, [(1, 108), (2, 1)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [110, 3, 0]]
** centroid: 2, normalized-entropy: 0.17677669701805485, [(1, 110), (2, 3)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 54, 21]]
** centroid: 3, normalized-entropy: 0.8554508105601307, [(2, 54), (3, 21)]
*** center 4: selecting labels [1] (freq >= 1) [from [121, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [67, 17, 0]]
** centroid: 5, normalized-entropy: 0.7266645172796352, [(1, 67), (2, 17)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 77, 0]]
** centroid: 6, normalized-entropy: 0.098959095355743, [(1, 1), (2, 77)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 86, 0]]
** centroid: 7, normalized-entropy: 0.09054385326964301, [(1, 1), (2, 86)]
finished with 9 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 11)
[0.9349948751146355, 0.92902483321645, 0.924019828211445, 0.9230008451565338, 0.9219818621016226, 0.9190268112423802, 0.9109858361355366, 0.8910317503131875, 0.8839767911624198, 0.8029826233419047, 0.7968867070663478]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9349948751146355
finished with 11
iteration 3 finished
generating 4 configurations using top 12 configurations, starting with 11)
[0.9349948751146355, 0.92902483321645, 0.924019828211445, 0.9230008451565338, 0.9219818621016226, 0.9190268112423802, 0.9109858361355366, 0.8910317503131875, 0.8839767911624198, 0.8029826233419047, 0.7968867070663478]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9349948751146355
finished with 13
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.3891364079578458] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3891364079578458, 0.2770401429561143] ***
*** starting iteration: 2; err: [Inf, 0.3891364079578458, 0.2770401429561143] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3891364079578458, 0.2770401429561143, 0.2458162469643954] ***
*** starting iteration: 3; err: [Inf, 0.3891364079578458, 0.2770401429561143, 0.2458162469643954] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3891364079578458, 0.2770401429561143, 0.2458162469643954, 0.23605185192128694] ***
*** finished computation of 3 references, err: [Inf, 0.3891364079578458, 0.2770401429561143, 0.2458162469643954, 0.23605185192128694] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 184, 16]]
** centroid: 1, normalized-entropy: 0.4021791902022729, [(2, 184), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [151, 32, 0]]
** centroid: 2, normalized-entropy: 0.6687101353436768, [(1, 151), (2, 32)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [257, 26, 0]]
** centroid: 3, normalized-entropy: 0.44269025055451466, [(1, 257), (2, 26)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2932487652892585] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2932487652892585, 0.24056919578133315] ***
*** starting iteration: 2; err: [Inf, 0.2932487652892585, 0.24056919578133315] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2932487652892585, 0.24056919578133315, 0.23396661501612398] ***
*** starting iteration: 3; err: [Inf, 0.2932487652892585, 0.24056919578133315, 0.23396661501612398] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2932487652892585, 0.24056919578133315, 0.23396661501612398, 0.23267668826474824] ***
*** finished computation of 3 references, err: [Inf, 0.2932487652892585, 0.24056919578133315, 0.23396661501612398, 0.23267668826474824] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [86, 152, 23]]
** centroid: 1, normalized-entropy: 0.8144016823689552, [(1, 86), (2, 152), (3, 23)]
*** center 2: selecting labels [1] (freq >= 1) [from [192, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [134, 80, 0]]
** centroid: 3, normalized-entropy: 0.9535688597080136, [(1, 134), (2, 80)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.270541208766183] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.270541208766183, 0.22933988757375656] ***
*** starting iteration: 2; err: [Inf, 0.270541208766183, 0.22933988757375656] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.270541208766183, 0.22933988757375656, 0.22664952286096035] ***
*** starting iteration: 3; err: [Inf, 0.270541208766183, 0.22933988757375656, 0.22664952286096035] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.270541208766183, 0.22933988757375656, 0.22664952286096035, 0.2264513569923098] ***
*** finished computation of 3 references, err: [Inf, 0.270541208766183, 0.22933988757375656, 0.22664952286096035, 0.2264513569923098] ***
*** center 1: selecting labels [1] (freq >= 1) [from [222, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [57, 163, 21]]
** centroid: 2, normalized-entropy: 0.7446810061420718, [(1, 57), (2, 163), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [129, 75, 0]]
** centroid: 3, normalized-entropy: 0.9488482942421287, [(1, 129), (2, 75)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3534106003265973] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3534106003265973, 0.2951734401159794] ***
*** starting iteration: 2; err: [Inf, 0.3534106003265973, 0.2951734401159794] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3534106003265973, 0.2951734401159794, 0.289562939964067] ***
*** starting iteration: 3; err: [Inf, 0.3534106003265973, 0.2951734401159794, 0.289562939964067] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3534106003265973, 0.2951734401159794, 0.289562939964067, 0.2890385035970794] ***
*** finished computation of 3 references, err: [Inf, 0.3534106003265973, 0.2951734401159794, 0.289562939964067, 0.2890385035970794] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [108, 101, 0]]
** centroid: 1, normalized-entropy: 0.9991906632216203, [(1, 108), (2, 101)]
*** center 2: selecting labels [1] (freq >= 1) [from [210, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [90, 141, 16]]
** centroid: 3, normalized-entropy: 0.7875208651841042, [(1, 90), (2, 141), (3, 16)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3995163797050424] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3995163797050424, 0.32830908987671137] ***
*** starting iteration: 2; err: [Inf, 0.3995163797050424, 0.32830908987671137] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3995163797050424, 0.32830908987671137, 0.3053735837496041] ***
*** starting iteration: 3; err: [Inf, 0.3995163797050424, 0.32830908987671137, 0.3053735837496041] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3995163797050424, 0.32830908987671137, 0.3053735837496041, 0.29800300163564564] ***
*** finished computation of 3 references, err: [Inf, 0.3995163797050424, 0.32830908987671137, 0.3053735837496041, 0.29800300163564564] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [95, 146, 23]]
** centroid: 1, normalized-entropy: 0.8264879939948075, [(1, 95), (2, 146), (3, 23)]
*** center 2: selecting labels [1] (freq >= 1) [from [200, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [117, 86, 0]]
** centroid: 3, normalized-entropy: 0.9831120694234091, [(1, 117), (2, 86)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.5537910277479101] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5537910277479101, 0.3528846267700151] ***
*** starting iteration: 2; err: [Inf, 0.5537910277479101, 0.3528846267700151] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5537910277479101, 0.3528846267700151, 0.3098181392355212] ***
*** starting iteration: 3; err: [Inf, 0.5537910277479101, 0.3528846267700151, 0.3098181392355212] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5537910277479101, 0.3528846267700151, 0.3098181392355212, 0.2924299165885756] ***
*** finished computation of 3 references, err: [Inf, 0.5537910277479101, 0.3528846267700151, 0.3098181392355212, 0.2924299165885756] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [278, 12, 0]]
** centroid: 1, normalized-entropy: 0.24858092371911047, [(1, 278), (2, 12)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [129, 74, 0]]
** centroid: 2, normalized-entropy: 0.9463809171549198, [(1, 129), (2, 74)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [1, 152, 21]]
** centroid: 3, normalized-entropy: 0.36676787943830674, [(1, 1), (2, 152), (3, 21)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 13)
[0.9349948751146355, 0.92902483321645, 0.924019828211445, 0.9230008451565338, 0.9219818621016226, 0.9190268112423802, 0.9109858361355366, 0.9099848351345358, 0.8910317503131875, 0.8839767911624198, 0.879064693435951, 0.8029826233419047, 0.7968867070663478]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9349948751146355
finished with 13
iteration 5 finished
generating 4 configurations using top 12 configurations, starting with 13)
[0.9349948751146355, 0.92902483321645, 0.924019828211445, 0.9230008451565338, 0.9219818621016226, 0.9190268112423802, 0.9109858361355366, 0.9099848351345358, 0.8910317503131875, 0.8839767911624198, 0.879064693435951, 0.8029826233419047, 0.7968867070663478]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9349948751146355
finished with 13
iteration 6 finished
generating 4 configurations using top 12 configurations, starting with 13)
[0.9349948751146355, 0.92902483321645, 0.924019828211445, 0.9230008451565338, 0.9219818621016226, 0.9190268112423802, 0.9109858361355366, 0.9099848351345358, 0.8910317503131875, 0.8839767911624198, 0.879064693435951, 0.8029826233419047, 0.7968867070663478]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9349948751146355
finished with 13
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 13)
[0.9349948751146355, 0.92902483321645, 0.924019828211445, 0.9230008451565338, 0.9219818621016226, 0.9190268112423802, 0.9109858361355366, 0.9099848351345358, 0.8910317503131875, 0.8839767911624198, 0.879064693435951, 0.8029826233419047, 0.7968867070663478]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9349948751146355
finished with 15
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.3486977028296897] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3486977028296897, 0.3058236640606736] ***
*** starting iteration: 2; err: [Inf, 0.3486977028296897, 0.3058236640606736] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3486977028296897, 0.3058236640606736, 0.29427954154061126] ***
*** starting iteration: 3; err: [Inf, 0.3486977028296897, 0.3058236640606736, 0.29427954154061126] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3486977028296897, 0.3058236640606736, 0.29427954154061126, 0.29318453012979606] ***
*** starting iteration: 4; err: [Inf, 0.3486977028296897, 0.3058236640606736, 0.29427954154061126, 0.29318453012979606] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3486977028296897, 0.3058236640606736, 0.29427954154061126, 0.29318453012979606, 0.2924996361083298] ***
*** finished computation of 3 references, err: [Inf, 0.3486977028296897, 0.3058236640606736, 0.29427954154061126, 0.29318453012979606, 0.2924996361083298] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [6, 171, 16]]
** centroid: 1, normalized-entropy: 0.3837283807838102, [(1, 6), (2, 171), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [243, 5, 0]]
** centroid: 2, normalized-entropy: 0.14234518598912696, [(1, 243), (2, 5)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [159, 66, 0]]
** centroid: 3, normalized-entropy: 0.8729882944709463, [(1, 159), (2, 66)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3046290756215801] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3046290756215801, 0.2924027430295743] ***
*** starting iteration: 2; err: [Inf, 0.3046290756215801, 0.2924027430295743] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3046290756215801, 0.2924027430295743, 0.2912623573072266] ***
*** starting iteration: 3; err: [Inf, 0.3046290756215801, 0.2924027430295743, 0.2912623573072266] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3046290756215801, 0.2924027430295743, 0.2912623573072266, 0.2910565375650617] ***
*** finished computation of 3 references, err: [Inf, 0.3046290756215801, 0.2924027430295743, 0.2912623573072266, 0.2910565375650617] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [2, 163, 23]]
** centroid: 1, normalized-entropy: 0.3905659555119583, [(1, 2), (2, 163), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [162, 61, 0]]
** centroid: 2, normalized-entropy: 0.8465022404644964, [(1, 162), (2, 61)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [248, 8, 0]]
** centroid: 3, normalized-entropy: 0.2006223243127146, [(1, 248), (2, 8)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3991156705366126] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3991156705366126, 0.32231170273730825] ***
*** starting iteration: 2; err: [Inf, 0.3991156705366126, 0.32231170273730825] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3991156705366126, 0.32231170273730825, 0.29589865803914045] ***
*** starting iteration: 3; err: [Inf, 0.3991156705366126, 0.32231170273730825, 0.29589865803914045] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3991156705366126, 0.32231170273730825, 0.29589865803914045, 0.2874333030136506] ***
*** starting iteration: 4; err: [Inf, 0.3991156705366126, 0.32231170273730825, 0.29589865803914045, 0.2874333030136506] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3991156705366126, 0.32231170273730825, 0.29589865803914045, 0.2874333030136506, 0.2852364901461634] ***
*** starting iteration: 5; err: [Inf, 0.3991156705366126, 0.32231170273730825, 0.29589865803914045, 0.2874333030136506, 0.2852364901461634] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3991156705366126, 0.32231170273730825, 0.29589865803914045, 0.2874333030136506, 0.2852364901461634, 0.2850100601516452] ***
*** finished computation of 3 references, err: [Inf, 0.3991156705366126, 0.32231170273730825, 0.29589865803914045, 0.2874333030136506, 0.2852364901461634, 0.2850100601516452] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [10, 174, 21]]
** centroid: 1, normalized-entropy: 0.47323826496240634, [(1, 10), (2, 174), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [161, 63, 0]]
** centroid: 2, normalized-entropy: 0.8571484374283717, [(1, 161), (2, 63)]
*** center 3: selecting labels [1] (freq >= 2) [from [237, 1, 0]]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.32651279780974574] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32651279780974574, 0.27111103286961086] ***
*** starting iteration: 2; err: [Inf, 0.32651279780974574, 0.27111103286961086] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32651279780974574, 0.27111103286961086, 0.23974402904840517] ***
*** starting iteration: 3; err: [Inf, 0.32651279780974574, 0.27111103286961086, 0.23974402904840517] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32651279780974574, 0.27111103286961086, 0.23974402904840517, 0.23219192065522298] ***
*** starting iteration: 4; err: [Inf, 0.32651279780974574, 0.27111103286961086, 0.23974402904840517, 0.23219192065522298] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32651279780974574, 0.27111103286961086, 0.23974402904840517, 0.23219192065522298, 0.23076589904409517] ***
*** starting iteration: 5; err: [Inf, 0.32651279780974574, 0.27111103286961086, 0.23974402904840517, 0.23219192065522298, 0.23076589904409517] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32651279780974574, 0.27111103286961086, 0.23974402904840517, 0.23219192065522298, 0.23076589904409517, 0.23042455992267072] ***
*** finished computation of 3 references, err: [Inf, 0.32651279780974574, 0.27111103286961086, 0.23974402904840517, 0.23219192065522298, 0.23076589904409517, 0.23042455992267072] ***
*** center 1: selecting labels [1] (freq >= 2) [from [228, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [142, 76, 0]]
** centroid: 2, normalized-entropy: 0.9328330312384981, [(1, 142), (2, 76)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [38, 166, 16]]
** centroid: 3, normalized-entropy: 0.6430359931342192, [(1, 38), (2, 166), (3, 16)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.27631909814642286] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27631909814642286, 0.2373473971022357] ***
*** starting iteration: 2; err: [Inf, 0.27631909814642286, 0.2373473971022357] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27631909814642286, 0.2373473971022357, 0.2363398243111839] ***
*** starting iteration: 3; err: [Inf, 0.27631909814642286, 0.2373473971022357, 0.2363398243111839] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27631909814642286, 0.2373473971022357, 0.2363398243111839, 0.23601252740637205] ***
*** finished computation of 3 references, err: [Inf, 0.27631909814642286, 0.2373473971022357, 0.2363398243111839, 0.23601252740637205] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 167, 23]]
** centroid: 1, normalized-entropy: 0.5323790723705373, [(2, 167), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [242, 17, 0]]
** centroid: 2, normalized-entropy: 0.3494269296876828, [(1, 242), (2, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [170, 48, 0]]
** centroid: 3, normalized-entropy: 0.7605024019419504, [(1, 170), (2, 48)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.31573496778974536] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31573496778974536, 0.2392607060794452] ***
*** starting iteration: 2; err: [Inf, 0.31573496778974536, 0.2392607060794452] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31573496778974536, 0.2392607060794452, 0.2288632973724197] ***
*** starting iteration: 3; err: [Inf, 0.31573496778974536, 0.2392607060794452, 0.2288632973724197] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31573496778974536, 0.2392607060794452, 0.2288632973724197, 0.22719313636578542] ***
*** starting iteration: 4; err: [Inf, 0.31573496778974536, 0.2392607060794452, 0.2288632973724197, 0.22719313636578542] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31573496778974536, 0.2392607060794452, 0.2288632973724197, 0.22719313636578542, 0.22656819463122463] ***
*** finished computation of 3 references, err: [Inf, 0.31573496778974536, 0.2392607060794452, 0.2288632973724197, 0.22719313636578542, 0.22656819463122463] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [150, 66, 0]]
** centroid: 1, normalized-entropy: 0.887976319515135, [(1, 150), (2, 66)]
*** center 2: selecting labels [1] (freq >= 2) [from [246, 1, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [12, 171, 21]]
** centroid: 3, normalized-entropy: 0.4993740148680541, [(1, 12), (2, 171), (3, 21)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 15)
[0.9349948751146355, 0.92902483321645, 0.924019828211445, 0.9230008451565338, 0.9219818621016226, 0.9190268112423802, 0.9109858361355366, 0.9099848351345358, 0.8910317503131875, 0.8839767911624198, 0.879064693435951, 0.8749917582252912, 0.8610017202831575, 0.8029826233419047, 0.7968867070663478]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9349948751146355
finished with 16
iteration 9 finished
*** starting iteration: 1; err: [Inf, 0.29926712208290446] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29926712208290446, 0.24905892834906374] ***
*** starting iteration: 2; err: [Inf, 0.29926712208290446, 0.24905892834906374] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29926712208290446, 0.24905892834906374, 0.23564414865289768] ***
*** starting iteration: 3; err: [Inf, 0.29926712208290446, 0.24905892834906374, 0.23564414865289768] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29926712208290446, 0.24905892834906374, 0.23564414865289768, 0.2323525262907058] ***
*** finished computation of 3 references, err: [Inf, 0.29926712208290446, 0.24905892834906374, 0.23564414865289768, 0.2323525262907058] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [2, 178, 16]]
** centroid: 1, normalized-entropy: 0.30839131322707836, [(1, 2), (2, 178), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [146, 59, 0]]
** centroid: 2, normalized-entropy: 0.8658687555599284, [(1, 146), (2, 59)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [260, 5, 0]]
** centroid: 3, normalized-entropy: 0.13503620280212753, [(1, 260), (2, 5)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2952254042699598] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2952254042699598, 0.2380603662059493] ***
*** starting iteration: 2; err: [Inf, 0.2952254042699598, 0.2380603662059493] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2952254042699598, 0.2380603662059493, 0.23468928944146347] ***
*** starting iteration: 3; err: [Inf, 0.2952254042699598, 0.2380603662059493, 0.23468928944146347] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2952254042699598, 0.2380603662059493, 0.23468928944146347, 0.2338566437497668] ***
*** finished computation of 3 references, err: [Inf, 0.2952254042699598, 0.2380603662059493, 0.23468928944146347, 0.2338566437497668] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [74, 134, 22]]
** centroid: 1, normalized-entropy: 0.8229510721322164, [(1, 74), (2, 134), (3, 22)]
*** center 2: selecting labels [1] (freq >= 1) [from [204, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [134, 98, 1]]
** centroid: 3, normalized-entropy: 0.642459400335424, [(1, 134), (2, 98), (3, 1)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3367542304333182] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3367542304333182, 0.27026326164032155] ***
*** starting iteration: 2; err: [Inf, 0.3367542304333182, 0.27026326164032155] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3367542304333182, 0.27026326164032155, 0.25054801368144813] ***
*** starting iteration: 3; err: [Inf, 0.3367542304333182, 0.27026326164032155, 0.25054801368144813] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3367542304333182, 0.27026326164032155, 0.25054801368144813, 0.23131657650657947] ***
*** finished computation of 3 references, err: [Inf, 0.3367542304333182, 0.27026326164032155, 0.25054801368144813, 0.23131657650657947] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [1, 197, 21]]
** centroid: 1, normalized-entropy: 0.3137233140157178, [(1, 1), (2, 197), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [162, 22, 0]]
** centroid: 2, normalized-entropy: 0.5281098034628294, [(1, 162), (2, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [245, 19, 0]]
** centroid: 3, normalized-entropy: 0.37323155189232515, [(1, 245), (2, 19)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.23185364506812767] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23185364506812767, 0.19130636032763867] ***
*** finished computation of 7 references, err: [Inf, 0.23185364506812767, 0.19130636032763867] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [201, 11, 0]]
** centroid: 1, normalized-entropy: 0.29435848412935534, [(1, 201), (2, 11)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [98, 23, 0]]
** centroid: 2, normalized-entropy: 0.7016443140299524, [(1, 98), (2, 23)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 88, 30]]
** centroid: 3, normalized-entropy: 0.8179252501386403, [(2, 88), (3, 30)]
*** center 4: selecting labels [1] (freq >= 2) [from [111, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [44, 116, 0]]
** centroid: 5, normalized-entropy: 0.8485481782946159, [(1, 44), (2, 116)]
*** center 6: selecting labels [1] (freq >= 2) [from [159, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 118, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23460753539018334] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23460753539018334, 0.185196362381801] ***
*** finished computation of 7 references, err: [Inf, 0.23460753539018334, 0.185196362381801] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 73, 16]]
** centroid: 1, normalized-entropy: 0.6795851972782937, [(2, 73), (3, 16)]
*** center 2: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [48, 14, 0]]
** centroid: 3, normalized-entropy: 0.7706290693639406, [(1, 48), (2, 14)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [68, 12, 0]]
** centroid: 4, normalized-entropy: 0.6098403047164005, [(1, 68), (2, 12)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [55, 10, 0]]
** centroid: 5, normalized-entropy: 0.6193821946787638, [(1, 55), (2, 10)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 69, 1]]
*** center 7: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21627417712658645] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21627417712658645, 0.1849898498430848] ***
*** finished computation of 7 references, err: [Inf, 0.21627417712658645, 0.1849898498430848] ***
*** center 1: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 54, 10]]
** centroid: 2, normalized-entropy: 0.625262405223423, [(2, 54), (3, 10)]
*** center 3: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [68, 28, 0]]
** centroid: 4, normalized-entropy: 0.8708644692353648, [(1, 68), (2, 28)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [20, 48, 0]]
** centroid: 5, normalized-entropy: 0.8739810481273581, [(1, 20), (2, 48)]
*** center 6: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [7, 46, 0]]
** centroid: 7, normalized-entropy: 0.5631028237513912, [(1, 7), (2, 46)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24195112589001655] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24195112589001655, 0.19469298467598856] ***
*** finished computation of 7 references, err: [Inf, 0.24195112589001655, 0.19469298467598856] ***
*** center 1: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [51, 17, 0]]
** centroid: 2, normalized-entropy: 0.8112781244591328, [(1, 51), (2, 17)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 29, 16]]
** centroid: 3, normalized-entropy: 0.9389320105807949, [(2, 29), (3, 16)]
*** center 4: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [19, 81, 0]]
** centroid: 5, normalized-entropy: 0.7014714598838974, [(1, 19), (2, 81)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [13, 46, 0]]
** centroid: 6, normalized-entropy: 0.7607859931846075, [(1, 13), (2, 46)]
*** center 7: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22392846858873963] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22392846858873963, 0.18739842641167342] ***
*** finished computation of 7 references, err: [Inf, 0.22392846858873963, 0.18739842641167342] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 47, 16]]
** centroid: 1, normalized-entropy: 0.8175072881213616, [(2, 47), (3, 16)]
*** center 2: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [63, 6, 0]]
** centroid: 3, normalized-entropy: 0.42622865699814483, [(1, 63), (2, 6)]
*** center 4: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [78, 20, 0]]
** centroid: 5, normalized-entropy: 0.7300166301457938, [(1, 78), (2, 20)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 55, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [8, 48, 0]]
** centroid: 7, normalized-entropy: 0.5916727785823274, [(1, 8), (2, 48)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2313033433035016] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2313033433035016, 0.194052954162471] ***
*** finished computation of 7 references, err: [Inf, 0.2313033433035016, 0.194052954162471] ***
*** center 1: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [49, 5, 0]]
** centroid: 2, normalized-entropy: 0.44506485705083854, [(1, 49), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 65, 13]]
** centroid: 3, normalized-entropy: 0.6500224216483541, [(2, 65), (3, 13)]
*** center 4: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [36, 43, 0]]
** centroid: 5, normalized-entropy: 0.9943290455933883, [(1, 36), (2, 43)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [21, 51, 0]]
** centroid: 6, normalized-entropy: 0.8708644692353648, [(1, 21), (2, 51)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [38, 6, 0]]
** centroid: 7, normalized-entropy: 0.5746356978376794, [(1, 38), (2, 6)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2298764084726572] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2298764084726572, 0.18570902345515788] ***
*** finished computation of 7 references, err: [Inf, 0.2298764084726572, 0.18570902345515788] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 65, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [26, 33, 0]]
** centroid: 3, normalized-entropy: 0.9898220559635807, [(1, 26), (2, 33)]
*** center 4: selecting labels [1] (freq >= 2) [from [102, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [75, 8, 0]]
** centroid: 5, normalized-entropy: 0.4574321808988397, [(1, 75), (2, 8)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 61, 15]]
** centroid: 6, normalized-entropy: 0.7166336117927455, [(2, 61), (3, 15)]
*** center 7: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22985886530391872] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22985886530391872, 0.1894071641433984] ***
*** finished computation of 7 references, err: [Inf, 0.22985886530391872, 0.1894071641433984] ***
*** center 1: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 30, 22]]
** centroid: 2, normalized-entropy: 0.9828586897127057, [(2, 30), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [50, 23, 0]]
** centroid: 3, normalized-entropy: 0.8989377852081333, [(1, 50), (2, 23)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [54, 31, 0]]
** centroid: 4, normalized-entropy: 0.9465202215633438, [(1, 54), (2, 31)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [5, 86, 0]]
** centroid: 5, normalized-entropy: 0.30704288878312236, [(1, 5), (2, 86)]
*** center 6: selecting labels [1] (freq >= 2) [from [43, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.249365093187429] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.249365093187429, 0.19395827323384582] ***
*** finished computation of 7 references, err: [Inf, 0.249365093187429, 0.19395827323384582] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [75, 10, 0]]
** centroid: 1, normalized-entropy: 0.5225593745369407, [(1, 75), (2, 10)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [56, 5, 0]]
** centroid: 2, normalized-entropy: 0.4090731390438265, [(1, 56), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 57, 12]]
** centroid: 3, normalized-entropy: 0.6665783579949205, [(2, 57), (3, 12)]
*** center 4: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [44, 48, 0]]
** centroid: 5, normalized-entropy: 0.9986359641585719, [(1, 44), (2, 48)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [30, 5, 0]]
** centroid: 6, normalized-entropy: 0.5916727785823274, [(1, 30), (2, 5)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 52, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21529034622758628] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21529034622758628, 0.18969716934487224] ***
*** finished computation of 7 references, err: [Inf, 0.21529034622758628, 0.18969716934487224] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [75, 2, 0]]
** centroid: 1, normalized-entropy: 0.17378132267943294, [(1, 75), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [49, 9, 0]]
** centroid: 2, normalized-entropy: 0.6226343162547099, [(1, 49), (2, 9)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 59, 14]]
** centroid: 3, normalized-entropy: 0.7051819722888517, [(2, 59), (3, 14)]
*** center 4: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [19, 75, 0]]
** centroid: 5, normalized-entropy: 0.7261630586710504, [(1, 19), (2, 75)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [40, 42, 0]]
** centroid: 6, normalized-entropy: 0.9995708393473225, [(1, 40), (2, 42)]
*** center 7: selecting labels [1] (freq >= 2) [from [43, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2238773422278464] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2238773422278464, 0.18878981220908464] ***
*** finished computation of 7 references, err: [Inf, 0.2238773422278464, 0.18878981220908464] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 83, 15]]
** centroid: 1, normalized-entropy: 0.6174482957894681, [(2, 83), (3, 15)]
*** center 2: selecting labels [1] (freq >= 2) [from [48, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [62, 2, 0]]
** centroid: 3, normalized-entropy: 0.2006223243127146, [(1, 62), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [56, 15, 0]]
** centroid: 4, normalized-entropy: 0.743898745288434, [(1, 56), (2, 15)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [80, 11, 0]]
** centroid: 5, normalized-entropy: 0.5318826028800231, [(1, 80), (2, 11)]
*** center 6: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 62, 0]]
** centroid: 7, normalized-entropy: 0.2006223243127146, [(1, 2), (2, 62)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2316339517980814] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2316339517980814, 0.1956798417083919] ***
*** finished computation of 7 references, err: [Inf, 0.2316339517980814, 0.1956798417083919] ***
*** center 1: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 34, 14]]
** centroid: 2, normalized-entropy: 0.8708644692353648, [(2, 34), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [70, 2, 0]]
** centroid: 3, normalized-entropy: 0.18312206830137262, [(1, 70), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [53, 7, 0]]
** centroid: 4, normalized-entropy: 0.5197027865043053, [(1, 53), (2, 7)]
*** center 5: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [2, 78, 0]]
** centroid: 6, normalized-entropy: 0.1686609314966701, [(1, 2), (2, 78)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [17, 70, 0]]
** centroid: 7, normalized-entropy: 0.7126368350739763, [(1, 17), (2, 70)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25083461061213164] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25083461061213164, 0.19680053593590854] ***
*** finished computation of 7 references, err: [Inf, 0.25083461061213164, 0.19680053593590854] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [102, 4, 0]]
** centroid: 1, normalized-entropy: 0.23181305002459035, [(1, 102), (2, 4)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 26, 9]]
** centroid: 2, normalized-entropy: 0.8224042259549892, [(2, 26), (3, 9)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [80, 13, 0]]
** centroid: 3, normalized-entropy: 0.5836753280239112, [(1, 80), (2, 13)]
*** center 4: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 71, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [7, 53, 0]]
** centroid: 7, normalized-entropy: 0.5197027865043053, [(1, 7), (2, 53)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21394062977097927] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21394062977097927, 0.1895652319677174] ***
*** finished computation of 7 references, err: [Inf, 0.21394062977097927, 0.1895652319677174] ***
*** center 1: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [44, 6, 0]]
** centroid: 2, normalized-entropy: 0.5293608652873645, [(1, 44), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 33, 14]]
** centroid: 3, normalized-entropy: 0.8786744932173094, [(2, 33), (3, 14)]
*** center 4: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [57, 19, 0]]
** centroid: 5, normalized-entropy: 0.8112781244591328, [(1, 57), (2, 19)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 57, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [30, 57, 0]]
** centroid: 7, normalized-entropy: 0.9293636260137188, [(1, 30), (2, 57)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21029706622008235] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21029706622008235, 0.18503255737572907] ***
*** finished computation of 7 references, err: [Inf, 0.21029706622008235, 0.18503255737572907] ***
*** center 1: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [44, 6, 0]]
** centroid: 2, normalized-entropy: 0.5293608652873645, [(1, 44), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 42, 15]]
** centroid: 3, normalized-entropy: 0.8314743880097292, [(2, 42), (3, 15)]
*** center 4: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [20, 68, 0]]
** centroid: 5, normalized-entropy: 0.7732266742876346, [(1, 20), (2, 68)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [21, 59, 0]]
** centroid: 6, normalized-entropy: 0.8304955225035798, [(1, 21), (2, 59)]
*** center 7: selecting labels [1] (freq >= 2) [from [46, 1, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22706613862328232] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22706613862328232, 0.19149678508751095] ***
*** finished computation of 7 references, err: [Inf, 0.22706613862328232, 0.19149678508751095] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [72, 26, 0]]
** centroid: 1, normalized-entropy: 0.834648285181383, [(1, 72), (2, 26)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [49, 2, 0]]
** centroid: 2, normalized-entropy: 0.23868451135100152, [(1, 49), (2, 2)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 60, 16]]
** centroid: 3, normalized-entropy: 0.7424875695421234, [(2, 60), (3, 16)]
*** center 4: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [46, 21, 0]]
** centroid: 5, normalized-entropy: 0.8970964164730478, [(1, 46), (2, 21)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [9, 71, 0]]
** centroid: 6, normalized-entropy: 0.5074109636646968, [(1, 9), (2, 71)]
*** center 7: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22517093178862707] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22517093178862707, 0.18598817962035535] ***
*** finished computation of 7 references, err: [Inf, 0.22517093178862707, 0.18598817962035535] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [32, 55, 0]]
** centroid: 1, normalized-entropy: 0.9489804585630239, [(1, 32), (2, 55)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [45, 10, 0]]
** centroid: 2, normalized-entropy: 0.6840384356390419, [(1, 45), (2, 10)]
*** center 3: selecting labels [1] (freq >= 2) [from [46, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 69, 17]]
** centroid: 4, normalized-entropy: 0.7172524777375696, [(2, 69), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [33, 55, 0]]
** centroid: 5, normalized-entropy: 0.954434002924965, [(1, 33), (2, 55)]
*** center 6: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23542976921051742] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23542976921051742, 0.1996064940271899] ***
*** finished computation of 7 references, err: [Inf, 0.23542976921051742, 0.1996064940271899] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [5, 78, 0]]
** centroid: 1, normalized-entropy: 0.32840071392894665, [(1, 5), (2, 78)]
*** center 2: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 50, 14]]
** centroid: 4, normalized-entropy: 0.7578784625383954, [(2, 50), (3, 14)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [49, 7, 0]]
** centroid: 5, normalized-entropy: 0.5435644431995963, [(1, 49), (2, 7)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [41, 56, 0]]
** centroid: 6, normalized-entropy: 0.9826808027585991, [(1, 41), (2, 56)]
*** center 7: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22727513701282442] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22727513701282442, 0.18680204917583615] ***
*** finished computation of 7 references, err: [Inf, 0.22727513701282442, 0.18680204917583615] ***
*** center 1: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 62, 13]]
** centroid: 2, normalized-entropy: 0.6652735227649414, [(2, 62), (3, 13)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [33, 3, 0]]
** centroid: 3, normalized-entropy: 0.4138168503036336, [(1, 33), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [47, 33, 0]]
** centroid: 4, normalized-entropy: 0.9777945702913884, [(1, 47), (2, 33)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [44, 16, 0]]
** centroid: 5, normalized-entropy: 0.8366407419411671, [(1, 44), (2, 16)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [15, 54, 0]]
** centroid: 6, normalized-entropy: 0.7553754125614286, [(1, 15), (2, 54)]
*** center 7: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2258473357465118] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2258473357465118, 0.19042634418979287] ***
*** finished computation of 7 references, err: [Inf, 0.2258473357465118, 0.19042634418979287] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [38, 60, 0]]
** centroid: 1, normalized-entropy: 0.9633355456726842, [(1, 38), (2, 60)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [52, 5, 0]]
** centroid: 2, normalized-entropy: 0.4288109647301171, [(1, 52), (2, 5)]
*** center 3: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 39, 13]]
** centroid: 4, normalized-entropy: 0.8112781244591328, [(2, 39), (3, 13)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [83, 13, 0]]
** centroid: 5, normalized-entropy: 0.572108447204188, [(1, 83), (2, 13)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 66, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2610530222281814] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2610530222281814, 0.19287629404105247] ***
*** finished computation of 7 references, err: [Inf, 0.2610530222281814, 0.19287629404105247] ***
*** center 1: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 53, 11]]
** centroid: 2, normalized-entropy: 0.6619760641115651, [(2, 53), (3, 11)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [47, 28, 0]]
** centroid: 3, normalized-entropy: 0.9531971725430559, [(1, 47), (2, 28)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [38, 39, 0]]
** centroid: 4, normalized-entropy: 0.9998783322990061, [(1, 38), (2, 39)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [23, 74, 0]]
** centroid: 5, normalized-entropy: 0.790206924188637, [(1, 23), (2, 74)]
*** center 6: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2349421909097582] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2349421909097582, 0.19657598730735482] ***
*** finished computation of 7 references, err: [Inf, 0.2349421909097582, 0.19657598730735482] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [70, 32, 0]]
** centroid: 1, normalized-entropy: 0.8974271930876951, [(1, 70), (2, 32)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [40, 4, 0]]
** centroid: 2, normalized-entropy: 0.43949698692151346, [(1, 40), (2, 4)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 66, 15]]
** centroid: 3, normalized-entropy: 0.6912898694057888, [(2, 66), (3, 15)]
*** center 4: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [39, 9, 0]]
** centroid: 5, normalized-entropy: 0.6962122601251459, [(1, 39), (2, 9)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [73, 6, 0]]
** centroid: 6, normalized-entropy: 0.3877431810559867, [(1, 73), (2, 6)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [4, 72, 0]]
** centroid: 7, normalized-entropy: 0.2974722489192896, [(1, 4), (2, 72)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24484074877016246] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24484074877016246, 0.18903121944516899] ***
*** finished computation of 7 references, err: [Inf, 0.24484074877016246, 0.18903121944516899] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [37, 50, 0]]
** centroid: 1, normalized-entropy: 0.9838333347337009, [(1, 37), (2, 50)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [36, 6, 0]]
** centroid: 2, normalized-entropy: 0.5916727785823274, [(1, 36), (2, 6)]
*** center 3: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 63, 14]]
** centroid: 4, normalized-entropy: 0.6840384356390419, [(2, 63), (3, 14)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [38, 53, 0]]
** centroid: 5, normalized-entropy: 0.9803107984107206, [(1, 38), (2, 53)]
*** center 6: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22920532764680684] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22920532764680684, 0.18790800945088268] ***
*** finished computation of 7 references, err: [Inf, 0.22920532764680684, 0.18790800945088268] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [76, 6, 0]]
** centroid: 1, normalized-entropy: 0.3776463213737003, [(1, 76), (2, 6)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [40, 8, 0]]
** centroid: 2, normalized-entropy: 0.6500224216483541, [(1, 40), (2, 8)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 66, 13]]
** centroid: 3, normalized-entropy: 0.6451006442088483, [(2, 66), (3, 13)]
*** center 4: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [14, 68, 0]]
** centroid: 5, normalized-entropy: 0.6593758812786991, [(1, 14), (2, 68)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [37, 37, 0]]
** centroid: 6, normalized-entropy: 1.0, [(1, 37), (2, 37)]
*** center 7: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23313579369336368] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23313579369336368, 0.1896262000333518] ***
*** finished computation of 7 references, err: [Inf, 0.23313579369336368, 0.1896262000333518] ***
*** center 1: selecting labels [1] (freq >= 2) [from [84, 1, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 42, 17]]
** centroid: 2, normalized-entropy: 0.8663006754980497, [(2, 42), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [40, 22, 0]]
** centroid: 3, normalized-entropy: 0.9383153522334071, [(1, 40), (2, 22)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [58, 25, 0]]
** centroid: 4, normalized-entropy: 0.8827586787955116, [(1, 58), (2, 25)]
*** center 5: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 80, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [74, 2, 0]]
** centroid: 7, normalized-entropy: 0.17556502585750275, [(1, 74), (2, 2)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24224263720400632] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24224263720400632, 0.18793482655938715] ***
*** finished computation of 7 references, err: [Inf, 0.24224263720400632, 0.18793482655938715] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 60, 19]]
** centroid: 1, normalized-entropy: 0.7958812735955936, [(2, 60), (3, 19)]
*** center 2: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [48, 6, 0]]
** centroid: 3, normalized-entropy: 0.5032583347756457, [(1, 48), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [53, 27, 0]]
** centroid: 4, normalized-entropy: 0.9224062617590724, [(1, 53), (2, 27)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [51, 26, 0]]
** centroid: 5, normalized-entropy: 0.9225641366401655, [(1, 51), (2, 26)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [3, 61, 0]]
** centroid: 6, normalized-entropy: 0.2729708579140699, [(1, 3), (2, 61)]
*** center 7: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2376975640691817] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2376975640691817, 0.1954321917332709] ***
*** finished computation of 7 references, err: [Inf, 0.2376975640691817, 0.1954321917332709] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 66, 17]]
** centroid: 1, normalized-entropy: 0.7314625617214586, [(2, 66), (3, 17)]
*** center 2: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [37, 5, 0]]
** centroid: 3, normalized-entropy: 0.5266170655714281, [(1, 37), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [60, 30, 0]]
** centroid: 4, normalized-entropy: 0.9182958340544894, [(1, 60), (2, 30)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [50, 15, 0]]
** centroid: 5, normalized-entropy: 0.7793498372920851, [(1, 50), (2, 15)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [16, 57, 0]]
** centroid: 6, normalized-entropy: 0.7586638628883696, [(1, 16), (2, 57)]
*** center 7: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2546245466731489] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2546245466731489, 0.18809863253310322] ***
*** finished computation of 7 references, err: [Inf, 0.2546245466731489, 0.18809863253310322] ***
*** center 1: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 61, 15]]
** centroid: 2, normalized-entropy: 0.7166336117927455, [(2, 61), (3, 15)]
*** center 3: selecting labels [1] (freq >= 2) [from [50, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [30, 41, 0]]
** centroid: 4, normalized-entropy: 0.9826154285526119, [(1, 30), (2, 41)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [71, 15, 0]]
** centroid: 5, normalized-entropy: 0.6677135405281421, [(1, 71), (2, 15)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [4, 55, 0]]
** centroid: 6, normalized-entropy: 0.3576467062456333, [(1, 4), (2, 55)]
*** center 7: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20829964179173113] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20829964179173113, 0.18460335247032345] ***
*** finished computation of 7 references, err: [Inf, 0.20829964179173113, 0.18460335247032345] ***
*** center 1: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 50, 16]]
** centroid: 2, normalized-entropy: 0.7990485210442682, [(2, 50), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [49, 10, 0]]
** centroid: 3, normalized-entropy: 0.656540281386946, [(1, 49), (2, 10)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [37, 47, 0]]
** centroid: 4, normalized-entropy: 0.9897525351939971, [(1, 37), (2, 47)]
*** center 5: selecting labels [1] (freq >= 2) [from [39, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [11, 69, 0]]
** centroid: 6, normalized-entropy: 0.5776539033535634, [(1, 11), (2, 69)]
*** center 7: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22546281592547893] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22546281592547893, 0.18943766116723418] ***
*** finished computation of 7 references, err: [Inf, 0.22546281592547893, 0.18943766116723418] ***
*** center 1: selecting labels [1] (freq >= 2) [from [90, 1, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [52, 18, 0]]
** centroid: 2, normalized-entropy: 0.8224042259549892, [(1, 52), (2, 18)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 25, 15]]
** centroid: 3, normalized-entropy: 0.954434002924965, [(2, 25), (3, 15)]
*** center 4: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [85, 4, 0]]
** centroid: 5, normalized-entropy: 0.2645173683629748, [(1, 85), (2, 4)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 73, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [24, 47, 0]]
** centroid: 7, normalized-entropy: 0.9229192878686723, [(1, 24), (2, 47)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2441480932813138] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2441480932813138, 0.19550323163159192] ***
*** finished computation of 7 references, err: [Inf, 0.2441480932813138, 0.19550323163159192] ***
*** center 1: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 54, 19]]
** centroid: 2, normalized-entropy: 0.8271595195340525, [(2, 54), (3, 19)]
*** center 3: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [47, 36, 0]]
** centroid: 4, normalized-entropy: 0.9872927315785851, [(1, 47), (2, 36)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [33, 36, 0]]
** centroid: 5, normalized-entropy: 0.9986359641585719, [(1, 33), (2, 36)]
*** center 6: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 58, 0]]
** centroid: 7, normalized-entropy: 0.28290479297989196, [(1, 3), (2, 58)]
finished with 10 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 356,3 => 30,1 => 614), Dict(2 => 369,3 => 43,1 => 588))
[ Info: ===== scores for single classifier: {"micro_f1":0.933,"precision":0.933,"recall":0.933,"macro_recall":0.9376741999503526,"macro_f1":0.9006958838537785,"accuracy":0.933,"class_f1":{"2":0.9046941678520625,"3":0.8399999999999999,"1":0.9573934837092731},"class_precision":{"2":0.9520958083832335,"3":0.7368421052631579,"1":0.9408866995073891},"class_recall":{"2":0.8617886178861789,"3":0.9767441860465116,"1":0.9744897959183674}}
[ Info: ===== scores for 1: {"micro_f1":0.973,"precision":0.973,"recall":0.973,"macro_recall":0.9447312674360725,"macro_f1":0.9610528788042466,"accuracy":0.973,"class_f1":{"2":0.9635627530364373,"3":0.9382716049382717,"1":0.9813242784380306},"class_precision":{"2":0.9596774193548387,"3":1.0,"1":0.9796610169491525},"class_recall":{"2":0.967479674796748,"3":0.8837209302325582,"1":0.9829931972789115}}
[ Info: ===== scores for 5: {"micro_f1":0.976,"precision":0.976,"recall":0.976,"macro_recall":0.9679870813895609,"macro_f1":0.9679870813895609,"accuracy":0.976,"class_f1":{"2":0.967479674796748,"3":0.9534883720930233,"1":0.9829931972789115},"class_precision":{"2":0.967479674796748,"3":0.9534883720930233,"1":0.9829931972789115},"class_recall":{"2":0.967479674796748,"3":0.9534883720930233,"1":0.9829931972789115}}
[ Info: ===== scores for 7: {"micro_f1":0.974,"precision":0.974,"recall":0.974,"macro_recall":0.9720196454456239,"macro_f1":0.9602328579485939,"accuracy":0.974,"class_f1":{"2":0.9642857142857143,"3":0.9333333333333332,"1":0.9830795262267343},"class_precision":{"2":0.9777158774373259,"3":0.8936170212765957,"1":0.9781144781144782},"class_recall":{"2":0.9512195121951219,"3":0.9767441860465116,"1":0.9880952380952381}}
[ Info: ===== scores for 9: {"micro_f1":0.972,"precision":0.972,"recall":0.972,"macro_recall":0.9767251073871283,"macro_f1":0.9560761667911514,"accuracy":0.972,"class_f1":{"2":0.961218836565097,"3":0.924731182795699,"1":0.9822784810126581},"class_precision":{"2":0.9830028328611898,"3":0.86,"1":0.9748743718592965},"class_recall":{"2":0.940379403794038,"3":1.0,"1":0.9897959183673469}}
[ Info: ===== scores for 11: {"micro_f1":0.973,"precision":0.973,"recall":0.973,"macro_recall":0.9779648986966061,"macro_f1":0.9568564432373629,"accuracy":0.973,"class_f1":{"2":0.9627586206896553,"3":0.924731182795699,"1":0.9830795262267343},"class_precision":{"2":0.9803370786516854,"3":0.86,"1":0.9781144781144782},"class_recall":{"2":0.94579945799458,"3":1.0,"1":0.9880952380952381}}
(score = 0.973, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.973, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.974, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.974, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.974, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.974, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.97, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.97, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.976, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.976, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.973, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.973, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.974, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.974, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.974, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.974, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.976,"k":5,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.976,"precision":0.976,"recall":0.976,"macro_recall":0.9679870813895609,"macro_f1":0.9679870813895609,"accuracy":0.976,"class_f1":{"2":0.967479674796748,"3":0.9534883720930233,"1":0.9829931972789115},"class_precision":{"2":0.967479674796748,"3":0.9534883720930233,"1":0.9829931972789115},"class_recall":{"2":0.967479674796748,"3":0.9534883720930233,"1":0.9829931972789115}}
Test Summary: | Pass  Total
AKNC          |    8      8
[141, 3, 5, 3, 6, 1, 7, 11, 1, 7, 2, 1, 3, 9, 17, 2, 3, 4, 16, 10, 14, 8, 4, 3, 1, 2, 2, 8, 4, 6, 3, 2, 5, 4, 3, 3, 15, 1, 18, 24, 2, 2, 13, 8, 6, 8, 6, 546, 2, 16, 18, 19, 1, 9, 21, 26, 15, 26, 4, 11, 45, 11, 3, 19, 31, 12, 75, 13, 64, 70, 50, 62, 31, 2, 10, 7, 14, 52, 18, 12, 1, 176, 34, 12, 30, 22, 5, 42, 26, 58, 8, 131, 2, 11, 4, 46, 10, 13, 22, 2, 9, 13, 8, 6, 40, 17, 75, 101, 45, 6, 13, 31, 27, 83, 10, 6, 7, 3, 4, 15, 27, 10, 3, 20, 13, 69, 74, 2, 5, 12, 9, 17, 1, 16, 73, 12, 3, 16, 41, 57, 17, 3, 6, 151, 11, 71, 52, 8, 7, 8, 7, 38, 17, 845, 6, 4, 5, 88, 20, 63, 7, 15, 227, 2, 120, 12, 4, 10, 2, 41, 7, 42, 4, 411, 23, 12, 1, 24, 6, 58, 3, 130, 9, 9, 4, 98, 5, 43, 1, 9, 36, 11, 38, 6, 111, 41, 6, 2, 13, 26, 8, 20, 4, 50, 73, 26, 97, 11, 136, 78, 3, 6, 17, 30, 4, 3, 148, 3, 1, 12, 9, 23, 8, 15, 29, 38, 59, 4, 101, 6, 16, 43, 159, 14, 42, 30, 82, 13, 12, 2, 17, 66, 70, 23, 20, 21, 10, 11, 4, 67, 46, 11, 11, 49, 41, 18, 8, 17, 15, 13, 5, 41, 101, 123, 123, 43, 16, 8, 2, 36, 7, 7, 75, 136, 132, 23, 3, 13, 122, 34, 34, 15, 40, 6, 23, 4, 11, 26, 65, 2, 92, 25, 22, 26, 40, 62, 7, 15, 4, 6]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6439999999999999, speedup = 0.2202336939372389, eval_ratio = 0.071599)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.4114583333333334,"recall":0.4062500000000001,"f1":null,"seconds":0.00011084601283073425,"exhaustive_search_seconds":0.0004672035574913025,"evaluations":509.625,"distances_sum":1674.0251520155539}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5571676587301588,"recall":0.5564236111111112,"f1":null,"seconds":0.0001896582543849945,"exhaustive_search_seconds":0.0004672035574913025,"evaluations":634.2421875,"distances_sum":1598.8553202826122}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6640624999999998,"recall":0.6640624999999998,"f1":0.6640624999999998,"seconds":0.00024654529988765717,"exhaustive_search_seconds":0.0004672035574913025,"evaluations":743.09375,"distances_sum":1550.4277841430144}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7465277777777773,"recall":0.7465277777777773,"f1":0.7465277777777773,"seconds":0.00048505328595638275,"exhaustive_search_seconds":0.0004672035574913025,"evaluations":855.703125,"distances_sum":1521.0684366957207}
KCenters.DeloneInvIndex> reached performance {"precision":0.8107638888888883,"recall":0.8107638888888883,"f1":0.8107638888888883,"seconds":0.0004573017358779907,"exhaustive_search_seconds":0.0004672035574913025,"evaluations":973.921875,"distances_sum":1505.1166819281686}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.7639999999999999, speedup = 0.6087613096400443, eval_ratio = 0.091613)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
