Julia Version 1.5.0-DEV.164
Commit 75996845a6 (2020-01-28 14:07 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-8.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

 Resolving package versions...
 Installed DataAPI ───────────── v1.1.0
 Installed OpenBLAS_jll ──────── v0.3.7+4
 Installed Missings ──────────── v0.4.3
 Installed Rmath ─────────────── v0.6.0
 Installed FillArrays ────────── v0.8.4
 Installed QuadGK ────────────── v2.3.1
 Installed BinaryProvider ────── v0.5.8
 Installed OpenSpecFun_jll ───── v0.5.3+1
 Installed MicrostructureNoise ─ v0.10.0
 Installed OrderedCollections ── v1.1.0
 Installed Arpack ────────────── v0.4.0
 Installed SpecialFunctions ──── v0.9.0
 Installed DataStructures ────── v0.17.9
 Installed StatsFuns ─────────── v0.9.3
 Installed StatsBase ─────────── v0.32.0
 Installed Arpack_jll ────────── v3.5.0+2
 Installed PDMats ────────────── v0.9.11
 Installed SortingAlgorithms ─── v0.3.1
 Installed Distributions ─────── v0.22.3
  Updating `~/.julia/environments/v1.5/Project.toml`
  [47737169] + MicrostructureNoise v0.10.0
  Updating `~/.julia/environments/v1.5/Manifest.toml`
  [7d9fca2a] + Arpack v0.4.0
  [68821587] + Arpack_jll v3.5.0+2
  [b99e7846] + BinaryProvider v0.5.8
  [9a962f9c] + DataAPI v1.1.0
  [864edb3b] + DataStructures v0.17.9
  [31c24e10] + Distributions v0.22.3
  [1a297f60] + FillArrays v0.8.4
  [47737169] + MicrostructureNoise v0.10.0
  [e1d29d7a] + Missings v0.4.3
  [4536629a] + OpenBLAS_jll v0.3.7+4
  [efe28fd5] + OpenSpecFun_jll v0.5.3+1
  [bac558e1] + OrderedCollections v1.1.0
  [90014a1f] + PDMats v0.9.11
  [1fd47b50] + QuadGK v2.3.1
  [79098fc4] + Rmath v0.6.0
  [a2af1166] + SortingAlgorithms v0.3.1
  [276daf66] + SpecialFunctions v0.9.0
  [2913bbd2] + StatsBase v0.32.0
  [4c63d2b9] + StatsFuns v0.9.3
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [4607b0f0] + SuiteSparse 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
  Building Rmath → `~/.julia/packages/Rmath/BoBag/deps/build.log`
  Updating `/tmp/jl_6rx2Ly/Project.toml`
 [no changes]
  Updating `/tmp/jl_6rx2Ly/Manifest.toml`
 [no changes]
   Testing MicrostructureNoise
  Updating `/tmp/jl_z1tgtg/Project.toml`
 [no changes]
  Updating `/tmp/jl_z1tgtg/Manifest.toml`
 [no changes]
Running sandbox
Status `/tmp/jl_z1tgtg/Project.toml`
  [31c24e10] Distributions v0.22.3
  [47737169] MicrostructureNoise v0.10.0
  [276daf66] SpecialFunctions v0.9.0
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [37e2e46d] LinearAlgebra 
  [9a3f8284] Random 
  [10745b16] Statistics 
  [8dfed614] Test 
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = MCMC(::MicrostructureNoise.Prior, ::Array{Float64,1}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64; subinds::StepRange{Int64,Int64}, η0::Float64, printiter::Int64, fixalpha::Bool, fixeta::Bool, skipfirst::Bool) at microstructure.jl:203
└ @ MicrostructureNoise ~/.julia/packages/MicrostructureNoise/Wxg8U/src/microstructure.jl:203
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = MCMC(::MicrostructureNoise.Prior, ::Array{Float64,1}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64; subinds::StepRange{Int64,Int64}, η0::Float64, printiter::Int64, fixalpha::Bool, fixeta::Bool, skipfirst::Bool) at microstructure.jl:208
└ @ MicrostructureNoise ~/.julia/packages/MicrostructureNoise/Wxg8U/src/microstructure.jl:208
100 	 α 3.341889985830237	 √η0.10353683959795058
200 	 α 4.979308772130828✓	 √η0.10575249573366086
300 	 α 5.05256380946945✓	 √η0.10639961593695062
400 	 α 4.6467189388988706✓	 √η0.10543971705549567
500 	 α 5.402892062431761✓	 √η0.11114504359765588
600 	 α 5.082299161150758✓	 √η0.10716140626672584
700 	 α 6.3196306726598594✓	 √η0.1103429569161719
800 	 α 5.61564548029832✓	 √η0.1102677518449161
900 	 α 5.693565860797947✓	 √η0.10992458497153625
1000 	 α 4.527876521457294✓	 √η0.11477435904295538
1100 	 α 3.5128639903663053	 √η0.10622174461910029
1200 	 α 3.332135428675985✓	 √η0.11460262792422048
1300 	 α 5.132145444978113✓	 √η0.10721079537645695
1400 	 α 4.687456079615605✓	 √η0.10686706079947875
1500 	 α 5.761021476201143✓	 √η0.10664480597677779
skipfirst: Log Test Failed at /home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/test/microstructure.jl:37
  Expression: MicrostructureNoise.MCMC(prior, tt, y, α, σα, 10; skipfirst = true)
  Log Pattern: (:info, "skip observation y[1] at t[1] (skipfirst == true)")
  Captured Logs: 
    Test.LogRecord(Info, "skip observation y[1] at t[1] (skipfirst == true)", MicrostructureNoise, :microstructure, :MicrostructureNoise_c1d651c6, "/home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/src/microstructure.jl", 114, Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}())
    Test.LogRecord(Warn, "`lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.", MicrostructureNoise, :depwarn, (Ptr{Nothing} @0x00007ff83ba1875e, :lgamma), "/home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/src/microstructure.jl", 203, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => MCMC(::MicrostructureNoise.Prior, ::Array{Float64,1}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64; subinds::StepRange{Int64,Int64}, η0::Float64, printiter::Int64, fixalpha::Bool, fixeta::Bool, skipfirst::Bool) at microstructure.jl:203,:maxlog => 1))
    Test.LogRecord(Warn, "`lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.", MicrostructureNoise, :depwarn, (Ptr{Nothing} @0x00007ff83ba18b0e, :lgamma), "/home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/src/microstructure.jl", 208, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => MCMC(::MicrostructureNoise.Prior, ::Array{Float64,1}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64; subinds::StepRange{Int64,Int64}, η0::Float64, printiter::Int64, fixalpha::Bool, fixeta::Bool, skipfirst::Bool) at microstructure.jl:208,:maxlog => 1))
    Test.LogRecord(Warn, "`lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.", MicrostructureNoise, :depwarn, (Ptr{Nothing} @0x00007ff83ba1875e, :lgamma), "/home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/src/microstructure.jl", 203, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => MCMC(::MicrostructureNoise.Prior, ::Array{Float64,1}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64; subinds::StepRange{Int64,Int64}, η0::Float64, printiter::Int64, fixalpha::Bool, fixeta::Bool, skipfirst::Bool) at microstructure.jl:203,:maxlog => 1))
    Test.LogRecord(Warn, "`lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.", MicrostructureNoise, :depwarn, (Ptr{Nothing} @0x00007ff83ba18b0e, :lgamma), "/home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/src/microstructure.jl", 208, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => MCMC(::MicrostructureNoise.Prior, ::Array{Float64,1}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64; subinds::StepRange{Int64,Int64}, η0::Float64, printiter::Int64, fixalpha::Bool, fixeta::Bool, skipfirst::Bool) at microstructure.jl:208,:maxlog => 1))
    Test.LogRecord(Warn, "`lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.", MicrostructureNoise, :depwarn, (Ptr{Nothing} @0x00007ff83ba1875e, :lgamma), "/home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/src/microstructure.jl", 203, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => MCMC(::MicrostructureNoise.Prior, ::Array{Float64,1}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64; subinds::StepRange{Int64,Int64}, η0::Float64, printiter::Int64, fixalpha::Bool, fixeta::Bool, skipfirst::Bool) at microstructure.jl:203,:maxlog => 1))
    Test.LogRecord(Warn, "`lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.", MicrostructureNoise, :depwarn, (Ptr{Nothing} @0x00007ff83ba18b0e, :lgamma), "/home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/src/microstructure.jl", 208, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => MCMC(::MicrostructureNoise.Prior, ::Array{Float64,1}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64; subinds::StepRange{Int64,Int64}, η0::Float64, printiter::Int64, fixalpha::Bool, fixeta::Bool, skipfirst::Bool) at microstructure.jl:208,:maxlog => 1))
    Test.LogRecord(Warn, "`lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.", MicrostructureNoise, :depwarn, (Ptr{Nothing} @0x00007ff83ba1875e, :lgamma), "/home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/src/microstructure.jl", 203, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => MCMC(::MicrostructureNoise.Prior, ::Array{Float64,1}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64; subinds::StepRange{Int64,Int64}, η0::Float64, printiter::Int64, fixalpha::Bool, fixeta::Bool, skipfirst::Bool) at microstructure.jl:203,:maxlog => 1))
    Test.LogRecord(Warn, "`lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.", MicrostructureNoise, :depwarn, (Ptr{Nothing} @0x00007ff83ba18b0e, :lgamma), "/home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/src/microstructure.jl", 208, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => MCMC(::MicrostructureNoise.Prior, ::Array{Float64,1}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64; subinds::StepRange{Int64,Int64}, η0::Float64, printiter::Int64, fixalpha::Bool, fixeta::Bool, skipfirst::Bool) at microstructure.jl:208,:maxlog => 1))
    Test.LogRecord(Warn, "`lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.", MicrostructureNoise, :depwarn, (Ptr{Nothing} @0x00007ff83ba1875e, :lgamma), "/home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/src/microstructure.jl", 203, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => MCMC(::MicrostructureNoise.Prior, ::Array{Float64,1}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64; subinds::StepRange{Int64,Int64}, η0::Float64, printiter::Int64, fixalpha::Bool, fixeta::Bool, skipfirst::Bool) at microstructure.jl:203,:maxlog => 1))
    Test.LogRecord(Warn, "`lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.", MicrostructureNoise, :depwarn, (Ptr{Nothing} @0x00007ff83ba18b0e, :lgamma), "/home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/src/microstructure.jl", 208, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => MCMC(::MicrostructureNoise.Prior, ::Array{Float64,1}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64; subinds::StepRange{Int64,Int64}, η0::Float64, printiter::Int64, fixalpha::Bool, fixeta::Bool, skipfirst::Bool) at microstructure.jl:208,:maxlog => 1))
    Test.LogRecord(Warn, "`lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.", MicrostructureNoise, :depwarn, (Ptr{Nothing} @0x00007ff83ba1875e, :lgamma), "/home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/src/microstructure.jl", 203, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => MCMC(::MicrostructureNoise.Prior, ::Array{Float64,1}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64; subinds::StepRange{Int64,Int64}, η0::Float64, printiter::Int64, fixalpha::Bool, fixeta::Bool, skipfirst::Bool) at microstructure.jl:203,:maxlog => 1))
    Test.LogRecord(Warn, "`lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.", MicrostructureNoise, :depwarn, (Ptr{Nothing} @0x00007ff83ba18b0e, :lgamma), "/home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/src/microstructure.jl", 208, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => MCMC(::MicrostructureNoise.Prior, ::Array{Float64,1}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64; subinds::StepRange{Int64,Int64}, η0::Float64, printiter::Int64, fixalpha::Bool, fixeta::Bool, skipfirst::Bool) at microstructure.jl:208,:maxlog => 1))
    Test.LogRecord(Warn, "`lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.", MicrostructureNoise, :depwarn, (Ptr{Nothing} @0x00007ff83ba1875e, :lgamma), "/home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/src/microstructure.jl", 203, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => MCMC(::MicrostructureNoise.Prior, ::Array{Float64,1}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64; subinds::StepRange{Int64,Int64}, η0::Float64, printiter::Int64, fixalpha::Bool, fixeta::Bool, skipfirst::Bool) at microstructure.jl:203,:maxlog => 1))
    Test.LogRecord(Warn, "`lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.", MicrostructureNoise, :depwarn, (Ptr{Nothing} @0x00007ff83ba18b0e, :lgamma), "/home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/src/microstructure.jl", 208, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => MCMC(::MicrostructureNoise.Prior, ::Array{Float64,1}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64; subinds::StepRange{Int64,Int64}, η0::Float64, printiter::Int64, fixalpha::Bool, fixeta::Bool, skipfirst::Bool) at microstructure.jl:208,:maxlog => 1))
    Test.LogRecord(Warn, "`lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.", MicrostructureNoise, :depwarn, (Ptr{Nothing} @0x00007ff83ba1875e, :lgamma), "/home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/src/microstructure.jl", 203, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => MCMC(::MicrostructureNoise.Prior, ::Array{Float64,1}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64; subinds::StepRange{Int64,Int64}, η0::Float64, printiter::Int64, fixalpha::Bool, fixeta::Bool, skipfirst::Bool) at microstructure.jl:203,:maxlog => 1))
    Test.LogRecord(Warn, "`lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.", MicrostructureNoise, :depwarn, (Ptr{Nothing} @0x00007ff83ba18b0e, :lgamma), "/home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/src/microstructure.jl", 208, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => MCMC(::MicrostructureNoise.Prior, ::Array{Float64,1}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64; subinds::StepRange{Int64,Int64}, η0::Float64, printiter::Int64, fixalpha::Bool, fixeta::Bool, skipfirst::Bool) at microstructure.jl:208,:maxlog => 1))
    Test.LogRecord(Warn, "`lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.", MicrostructureNoise, :depwarn, (Ptr{Nothing} @0x00007ff83ba1875e, :lgamma), "/home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/src/microstructure.jl", 203, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => MCMC(::MicrostructureNoise.Prior, ::Array{Float64,1}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64; subinds::StepRange{Int64,Int64}, η0::Float64, printiter::Int64, fixalpha::Bool, fixeta::Bool, skipfirst::Bool) at microstructure.jl:203,:maxlog => 1))
    Test.LogRecord(Warn, "`lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.", MicrostructureNoise, :depwarn, (Ptr{Nothing} @0x00007ff83ba18b0e, :lgamma), "/home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/src/microstructure.jl", 208, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => MCMC(::MicrostructureNoise.Prior, ::Array{Float64,1}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64; subinds::StepRange{Int64,Int64}, η0::Float64, printiter::Int64, fixalpha::Bool, fixeta::Bool, skipfirst::Bool) at microstructure.jl:208,:maxlog => 1))
    Test.LogRecord(Warn, "`lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.", MicrostructureNoise, :depwarn, (Ptr{Nothing} @0x00007ff83ba1875e, :lgamma), "/home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/src/microstructure.jl", 203, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => MCMC(::MicrostructureNoise.Prior, ::Array{Float64,1}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64; subinds::StepRange{Int64,Int64}, η0::Float64, printiter::Int64, fixalpha::Bool, fixeta::Bool, skipfirst::Bool) at microstructure.jl:203,:maxlog => 1))
    Test.LogRecord(Warn, "`lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.", MicrostructureNoise, :depwarn, (Ptr{Nothing} @0x00007ff83ba18b0e, :lgamma), "/home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/src/microstructure.jl", 208, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => MCMC(::MicrostructureNoise.Prior, ::Array{Float64,1}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64; subinds::StepRange{Int64,Int64}, η0::Float64, printiter::Int64, fixalpha::Bool, fixeta::Bool, skipfirst::Bool) at microstructure.jl:208,:maxlog => 1))

Stacktrace:
 [1] record(::Test.DefaultTestSet, ::Test.LogTestFailure) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/logging.jl:89
 [2] top-level scope at /home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/test/microstructure.jl:37
 [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1113
 [4] top-level scope at /home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/test/microstructure.jl:37
[ Info: skip observation y[1] at t[1] (skipfirst == true)
Test Summary: | Pass  Fail  Total
skipfirst     |    3     1      4
ERROR: LoadError: LoadError: Some tests did not pass: 3 passed, 1 failed, 0 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/test/microstructure.jl:36
in expression starting at /home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/test/runtests.jl:4
err = ProcessFailedException(Base.Process[Process(`/opt/julia/bin/julia -Cnative -J/opt/julia/lib/julia/sys.so -g1 --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --inline=yes --startup-file=no --track-allocation=none --eval 'append!(empty!(Base.DEPOT_PATH), ["/home/pkgeval/.julia", "/opt/julia/local/share/julia", "/opt/julia/share/julia", "/usr/local/share/julia"])
append!(empty!(Base.DL_LOAD_PATH), String[])

cd("/home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/test")
append!(empty!(ARGS), String[])
include("/home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/test/runtests.jl")
'`, ProcessExited(1))])
ERROR: Package MicrostructureNoise errored during testing
Stacktrace:
 [1] pkgerror(::String, ::Vararg{String,N} where N) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/Types.jl:54
 [2] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/Operations.jl:1471
 [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:313
 [4] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:300
 [5] #test#66 at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:294 [inlined]
 [6] test at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:294 [inlined]
 [7] #test#65 at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:293 [inlined]
 [8] test at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:293 [inlined]
 [9] test(::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:292
 [10] test(::String) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:292
 [11] top-level scope at none:13
