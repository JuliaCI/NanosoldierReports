Julia Version 1.3.2-pre.0
Commit 2e6715c045 (2019-12-31 00:49 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-6.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

 Resolving package versions...
 Installed PooledArrays ──────────────── v0.5.3
 Installed Missings ──────────────────── v0.4.3
 Installed LearnBase ─────────────────── v0.2.2
 Installed DataValueInterfaces ───────── v1.0.0
 Installed KCenters ──────────────────── v0.1.9
 Installed MLLabelUtils ──────────────── v0.5.1
 Installed MLDataPattern ─────────────── v0.5.0
 Installed MLDataUtils ───────────────── v0.5.0
 Installed SortingAlgorithms ─────────── v0.3.1
 Installed Parsers ───────────────────── v0.3.10
 Installed InvertedIndices ───────────── v1.0.0
 Installed Reexport ──────────────────── v0.2.0
 Installed DataAPI ───────────────────── v1.1.0
 Installed OrderedCollections ────────── v1.1.0
 Installed CategoricalArrays ─────────── v0.7.7
 Installed TableTraits ───────────────── v1.0.0
 Installed Tables ────────────────────── v0.2.11
 Installed IteratorInterfaceExtensions ─ v1.0.0
 Installed StatsBase ─────────────────── v0.32.0
 Installed MappedArrays ──────────────── v0.2.2
 Installed Compat ────────────────────── v3.2.0
 Installed DataStructures ────────────── v0.17.9
 Installed SimilaritySearch ──────────── v0.3.17
 Installed DataFrames ────────────────── v0.20.0
 Installed JSON ──────────────────────── v0.21.0
  Updating `~/.julia/environments/v1.3/Project.toml`
  [5d8de97f] + KCenters v0.1.9
  Updating `~/.julia/environments/v1.3/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.2.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.0
  [864edb3b] + DataStructures v0.17.9
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.1.9
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.0
  [cc2ba9b6] + MLDataUtils v0.5.0
  [66a33bbf] + MLLabelUtils v0.5.1
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.10
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.17
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.0
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v0.2.11
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
   Testing KCenters
    Status `/tmp/jl_J7rVot/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.2.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.0
  [864edb3b] DataStructures v0.17.9
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.1.9
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.0
  [cc2ba9b6] MLDataUtils v0.5.0
  [66a33bbf] MLLabelUtils v0.5.1
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v0.3.10
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.17
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.0
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v0.2.11
  [2a0f44e3] Base64  [`@stdlib/Base64`]
  [ade2ca70] Dates  [`@stdlib/Dates`]
  [8bb1440f] DelimitedFiles  [`@stdlib/DelimitedFiles`]
  [8ba89e20] Distributed  [`@stdlib/Distributed`]
  [9fa8497b] Future  [`@stdlib/Future`]
  [b77e0a4c] InteractiveUtils  [`@stdlib/InteractiveUtils`]
  [76f85450] LibGit2  [`@stdlib/LibGit2`]
  [8f399da3] Libdl  [`@stdlib/Libdl`]
  [37e2e46d] LinearAlgebra  [`@stdlib/LinearAlgebra`]
  [56ddb016] Logging  [`@stdlib/Logging`]
  [d6f4376e] Markdown  [`@stdlib/Markdown`]
  [a63ad114] Mmap  [`@stdlib/Mmap`]
  [44cfe95a] Pkg  [`@stdlib/Pkg`]
  [de0858da] Printf  [`@stdlib/Printf`]
  [3fa0cd96] REPL  [`@stdlib/REPL`]
  [9a3f8284] Random  [`@stdlib/Random`]
  [ea8e919c] SHA  [`@stdlib/SHA`]
  [9e88b42a] Serialization  [`@stdlib/Serialization`]
  [1a1011a3] SharedArrays  [`@stdlib/SharedArrays`]
  [6462fe0b] Sockets  [`@stdlib/Sockets`]
  [2f01184e] SparseArrays  [`@stdlib/SparseArrays`]
  [10745b16] Statistics  [`@stdlib/Statistics`]
  [8dfed614] Test  [`@stdlib/Test`]
  [cf7118a7] UUIDs  [`@stdlib/UUIDs`]
  [4ec0a83e] Unicode  [`@stdlib/Unicode`]
Test Summary: | Pass  Total
Scores        |    9      9
[ Info: 104.48000000000003
[ Info: 74.92000000000003
[ Info: 41.249999999999986
[ Info: 28.00999999999999
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 313.64000338064864
[ Info: 547.7199992669996
[ Info: 146.21999839687118
[ Info: 75.76000114354103
Test Summary:        |
Clustering with dnet | No tests
inertia(cfft.distances) = 19.352222769708103
inertia(cdnet.distances) = 22.096268007545902
inertia(crand.distances) = 21.377702058715027
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.779296875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.779296875,"f1":0.8674970862470871,"seconds":4.0084123611450195e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.6015625,"distances_sum":2523.695667425806}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.244140625, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.244140625,"f1":null,"seconds":3.56137752532959e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.0546875,"distances_sum":755.0379201249833}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.779296875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.779296875,"f1":0.8674970862470871,"seconds":4.0084123611450195e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.6015625,"distances_sum":2523.695667425806}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7802734375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7802734375,"f1":0.868172972860474,"seconds":5.846843123435974e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.53125,"distances_sum":2567.5306601858633}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9605170870795875,"seconds":5.777925252914429e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.9296875,"distances_sum":3340.8846236850995}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.931640625,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9605170870795875,"seconds":5.777925252914429e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.9296875,"distances_sum":3340.8846236850995}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.970703125, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.970703125,"f1":0.9840602106227109,"seconds":6.342306733131409e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.9765625,"distances_sum":3545.3945133969914}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9686412545787549,"seconds":6.295740604400635e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.9765625,"distances_sum":3383.0689754297514}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.970703125,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.970703125,"f1":0.9840602106227109,"seconds":6.342306733131409e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.9765625,"distances_sum":3545.3945133969914}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.970703125,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.970703125,"f1":0.9840602106227109,"seconds":6.342306733131409e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.9765625,"distances_sum":3545.3945133969914}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6591796875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6591796875,"f1":0.784496753246754,"seconds":4.736706614494324e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":7.90625,"distances_sum":1913.3192208394325}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.57421875, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.57421875,"f1":0.711456425518926,"seconds":4.569068551063538e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":7.53125,"distances_sum":1585.2439239647297}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6591796875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6591796875,"f1":0.784496753246754,"seconds":4.736706614494324e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":7.90625,"distances_sum":1913.3192208394325}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8564453125, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8564453125,"f1":0.9162176365301373,"seconds":5.6568533182144165e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.6328125,"distances_sum":2790.6661709697482}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8505859375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8505859375,"f1":0.9128663003663009,"seconds":5.587935447692871e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.578125,"distances_sum":2754.4809357779045}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8564453125,"state":{"ssize":5,"bsize":6},"perf":{"precision":1.0,"recall":0.8564453125,"f1":0.9162176365301373,"seconds":5.6568533182144165e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.6328125,"distances_sum":2790.6661709697482}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9436100357975364,"seconds":5.48921525478363e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.75,"distances_sum":2974.247749728128}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9571314102564108,"seconds":5.561858415603638e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.8203125,"distances_sum":3121.423161548505}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9568509615384622,"seconds":5.68293035030365e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.796875,"distances_sum":3132.3800599987667}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9665006868131873,"seconds":5.720183253288269e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.859375,"distances_sum":3212.3960359410303}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9665006868131873,"seconds":5.720183253288269e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.859375,"distances_sum":3212.3960359410303}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.939453125,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9665006868131873,"seconds":5.720183253288269e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.859375,"distances_sum":3212.3960359410303}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7880859375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7880859375,"f1":0.8746597152847161,"seconds":5.334615707397461e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.734375,"distances_sum":2375.880996653159}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2373046875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2373046875,"f1":null,"seconds":3.337860107421875e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":6.875,"distances_sum":643.791013724862}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7880859375,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7880859375,"f1":0.8746597152847161,"seconds":5.334615707397461e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.734375,"distances_sum":2375.880996653159}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.936315247252748,"seconds":5.645677447319031e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.71875,"distances_sum":2871.240261824375}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9470867673992679,"seconds":5.574896931648254e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.75,"distances_sum":2931.067057530202}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.90625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.90625,"f1":0.9470867673992679,"seconds":5.574896931648254e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.75,"distances_sum":2931.067057530202}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9662259615384619,"seconds":5.6438148021698e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.921875,"distances_sum":3109.7480316685983}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9696657509157514,"seconds":6.137415766716003e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.921875,"distances_sum":3170.5778925836285}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9709649725274729,"seconds":5.7891011238098145e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.9296875,"distances_sum":3183.3537416656814}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9602163461538467,"seconds":6.042420864105225e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.8671875,"distances_sum":3094.0345262860724}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9709649725274729,"seconds":5.7891011238098145e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.9296875,"distances_sum":3183.3537416656814}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9709649725274729,"seconds":5.7891011238098145e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.9296875,"distances_sum":3183.3537416656814}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.669921875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.669921875,"f1":0.7934012168387177,"seconds":4.751607775688171e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.15625,"distances_sum":1964.6385050456352}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2216796875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2216796875,"f1":null,"seconds":3.1776726245880127e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":6.03125,"distances_sum":654.028082311405}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.548828125, conf: {"ssize":3,"bsize":3}, perf: {"precision":null,"recall":0.548828125,"f1":null,"seconds":4.114583134651184e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":7.1875,"distances_sum":1495.8787290881796}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.669921875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.669921875,"f1":0.7934012168387177,"seconds":4.751607775688171e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.15625,"distances_sum":1964.6385050456352}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83203125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.83203125,"f1":0.8978797244422251,"seconds":5.414709448814392e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.546875,"distances_sum":2704.531698909788}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7099609375, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.7099609375,"f1":0.8219161047286054,"seconds":4.980713129043579e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.1953125,"distances_sum":2145.138881408476}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9538919413919419,"seconds":5.824491381645203e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.859375,"distances_sum":3131.2743020441717}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.771484375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.771484375,"f1":0.8637456293706302,"seconds":5.150213837623596e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.5078125,"distances_sum":2420.534071488623}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9442250457875461,"seconds":5.8785080909729e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.734375,"distances_sum":3053.6784102410998}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9189453125,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.9189453125,"f1":0.9538919413919419,"seconds":5.824491381645203e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.859375,"distances_sum":3131.2743020441717}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9733287545787549,"seconds":6.1765313148498535e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.921875,"distances_sum":3289.9664100626137}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9694024725274729,"seconds":6.446614861488342e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.8984375,"distances_sum":3258.275411539859}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.953125,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9733287545787549,"seconds":6.1765313148498535e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.921875,"distances_sum":3289.9664100626137}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.953125,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9733287545787549,"seconds":6.1765313148498535e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.921875,"distances_sum":3289.9664100626137}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.25390625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.25390625,"f1":null,"seconds":3.4049153327941895e-6,"exhaustive_search_seconds":1.600012183189392e-6,"evaluations":6.1328125,"distances_sum":560.0164538457174}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.251953125, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.251953125,"f1":null,"seconds":3.926455974578857e-6,"exhaustive_search_seconds":1.600012183189392e-6,"evaluations":6.1171875,"distances_sum":602.8882370895452}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7265625, conf: {"ssize":1,"bsize":5}, perf: {"precision":0.974534970238095,"recall":0.7265625,"f1":0.824382128288379,"seconds":5.297362804412842e-6,"exhaustive_search_seconds":1.600012183189392e-6,"evaluations":8.1875,"distances_sum":1551.4077549947128}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7265625,"state":{"ssize":1,"bsize":5},"perf":{"precision":0.974534970238095,"recall":0.7265625,"f1":0.824382128288379,"seconds":5.297362804412842e-6,"exhaustive_search_seconds":1.600012183189392e-6,"evaluations":8.1875,"distances_sum":1551.4077549947128}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":1,"bsize":8}, perf: {"precision":0.9802362351190476,"recall":0.927734375,"f1":0.9514244219322344,"seconds":6.1336904764175415e-6,"exhaustive_search_seconds":1.600012183189392e-6,"evaluations":8.875,"distances_sum":2331.60881206686}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":1,"bsize":9}, perf: {"precision":0.9832310267857143,"recall":0.916015625,"f1":0.945519259386447,"seconds":6.278976798057556e-6,"exhaustive_search_seconds":1.600012183189392e-6,"evaluations":8.921875,"distances_sum":2259.378296891724}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.73046875, conf: {"ssize":5,"bsize":5}, perf: {"precision":0.9749069940476188,"recall":0.73046875,"f1":0.8285165355477858,"seconds":5.19677996635437e-6,"exhaustive_search_seconds":1.600012183189392e-6,"evaluations":8.2265625,"distances_sum":1568.517252351213}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.927734375,"state":{"ssize":1,"bsize":8},"perf":{"precision":0.9802362351190476,"recall":0.927734375,"f1":0.9514244219322344,"seconds":6.1336904764175415e-6,"exhaustive_search_seconds":1.600012183189392e-6,"evaluations":8.875,"distances_sum":2331.60881206686}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":1,"bsize":12}, perf: {"precision":0.9799758184523809,"recall":0.9375,"f1":0.956621308379121,"seconds":6.24731183052063e-6,"exhaustive_search_seconds":1.600012183189392e-6,"evaluations":8.9609375,"distances_sum":2346.2869676090268}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":1,"bsize":11}, perf: {"precision":0.9853980654761904,"recall":0.939453125,"f1":0.9603236607142859,"seconds":6.359070539474487e-6,"exhaustive_search_seconds":1.600012183189392e-6,"evaluations":8.9296875,"distances_sum":2352.059152936138}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":5,"bsize":12}, perf: {"precision":0.9799107142857144,"recall":0.9482421875,"f1":0.9627060439560441,"seconds":6.278976798057556e-6,"exhaustive_search_seconds":1.600012183189392e-6,"evaluations":8.9765625,"distances_sum":2388.124954492506}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":3,"bsize":13}, perf: {"precision":0.9829799107142858,"recall":0.9462890625,"f1":0.9628162202380954,"seconds":6.441026926040649e-6,"exhaustive_search_seconds":1.600012183189392e-6,"evaluations":8.9609375,"distances_sum":2378.526760619451}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":1,"bsize":13}, perf: {"precision":0.9859095982142857,"recall":0.947265625,"f1":0.9643894516941395,"seconds":6.463378667831421e-6,"exhaustive_search_seconds":1.600012183189392e-6,"evaluations":8.96875,"distances_sum":2348.0804653998125}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9482421875,"state":{"ssize":5,"bsize":12},"perf":{"precision":0.9799107142857144,"recall":0.9482421875,"f1":0.9627060439560441,"seconds":6.278976798057556e-6,"exhaustive_search_seconds":1.600012183189392e-6,"evaluations":8.9765625,"distances_sum":2388.124954492506}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9482421875,"state":{"ssize":5,"bsize":12},"perf":{"precision":0.9799107142857144,"recall":0.9482421875,"f1":0.9627060439560441,"seconds":6.278976798057556e-6,"exhaustive_search_seconds":1.600012183189392e-6,"evaluations":8.9765625,"distances_sum":2388.124954492506}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.701171875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.701171875,"f1":0.8154392482517492,"seconds":4.889443516731262e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":7.7109375,"distances_sum":1500.2452376437639}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5302734375, conf: {"ssize":3,"bsize":3}, perf: {"precision":null,"recall":0.5302734375,"f1":null,"seconds":4.0959566831588745e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":6.515625,"distances_sum":1085.2212484444392}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1904296875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.1904296875,"f1":null,"seconds":3.0212104320526123e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":4.1640625,"distances_sum":456.32937998162555}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.701171875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.701171875,"f1":0.8154392482517492,"seconds":4.889443516731262e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":7.7109375,"distances_sum":1500.2452376437639}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.941011592574093,"seconds":5.673617124557495e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.6171875,"distances_sum":2200.8947710520174}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83203125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.83203125,"f1":0.9014225357975364,"seconds":5.736947059631348e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.3359375,"distances_sum":1919.7705929690414}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.845703125, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.845703125,"f1":0.9091408591408598,"seconds":5.342066287994385e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.4453125,"distances_sum":1980.4155776344937}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.853515625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.853515625,"f1":0.9152873168498177,"seconds":6.284564733505249e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.46875,"distances_sum":1986.6896336366656}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7578125, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7578125,"f1":0.8518802378177386,"seconds":5.425885319709778e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":7.984375,"distances_sum":1644.9655164544372}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.736328125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.736328125,"f1":0.8375697219447228,"seconds":4.837289452552795e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":7.96875,"distances_sum":1602.9062569753323}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8984375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.8984375,"f1":0.941011592574093,"seconds":5.673617124557495e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.6171875,"distances_sum":2200.8947710520174}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.971262591575092,"seconds":6.409361958503723e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.890625,"distances_sum":2330.013764339598}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9617387820512826,"seconds":6.074085831642151e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.7890625,"distances_sum":2302.431484958158}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9591575091575095,"seconds":3.894791007041931e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.78125,"distances_sum":2267.353607471751}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9482421875,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.971262591575092,"seconds":6.409361958503723e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.890625,"distances_sum":2330.013764339598}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9482421875,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.971262591575092,"seconds":6.409361958503723e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.890625,"distances_sum":2330.013764339598}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.427734375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.427734375,"f1":null,"seconds":2.4922192096710205e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":5.796875,"distances_sum":838.5726190490088}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.427734375,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.427734375,"f1":null,"seconds":2.4922192096710205e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":5.796875,"distances_sum":838.5726190490088}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4375, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.4375,"f1":null,"seconds":2.171844244003296e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":6.0,"distances_sum":816.593013529587}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8173828125, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8173828125,"f1":0.8930803571428578,"seconds":3.4477561712265015e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.2890625,"distances_sum":1797.4194765985835}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.744140625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.744140625,"f1":0.8461226273726281,"seconds":3.300607204437256e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":7.9921875,"distances_sum":1539.9753850176373}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6708984375, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6708984375,"f1":0.7910951895326902,"seconds":3.2261013984680176e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":7.5390625,"distances_sum":1344.2506715104394}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8173828125,"state":{"ssize":2,"bsize":6},"perf":{"precision":1.0,"recall":0.8173828125,"f1":0.8930803571428578,"seconds":3.4477561712265015e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.2890625,"distances_sum":1797.4194765985835}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9636389652014656,"seconds":4.189088940620422e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.8671875,"distances_sum":2201.3355290409645}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.971005036630037,"seconds":3.913417458534241e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.8203125,"distances_sum":2305.338479903215}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9389053654678662,"seconds":3.902241587638855e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.6015625,"distances_sum":2060.305192064901}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9510359432234435,"seconds":3.991648554801941e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.7265625,"distances_sum":2187.687064315056}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9553228021978025,"seconds":4.092231392860413e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.8203125,"distances_sum":2185.8659076411154}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9296302655677663,"seconds":3.937631845474243e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.6328125,"distances_sum":2004.0921592427574}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8271484375, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.8271484375,"f1":0.9011504120879129,"seconds":3.686174750328064e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.4375,"distances_sum":1796.9705386438052}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.822265625, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.822265625,"f1":0.8960138819513827,"seconds":3.855675458908081e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.46875,"distances_sum":1791.8940413390287}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9482421875,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.971005036630037,"seconds":3.913417458534241e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.8203125,"distances_sum":2305.338479903215}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9482421875,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.971005036630037,"seconds":3.913417458534241e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.8203125,"distances_sum":2305.338479903215}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6396484375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6396484375,"f1":0.7667346542346549,"seconds":3.2261013984680176e-6,"exhaustive_search_seconds":1.0244548320770264e-6,"evaluations":7.2421875,"distances_sum":1341.9685817466404}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.18359375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.18359375,"f1":null,"seconds":1.9725412130355835e-6,"exhaustive_search_seconds":1.0244548320770264e-6,"evaluations":4.9453125,"distances_sum":435.391171678133}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6396484375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6396484375,"f1":0.7667346542346549,"seconds":3.2261013984680176e-6,"exhaustive_search_seconds":1.0244548320770264e-6,"evaluations":7.2421875,"distances_sum":1341.9685817466404}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.646484375, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.646484375,"f1":0.7703272422022429,"seconds":3.0882656574249268e-6,"exhaustive_search_seconds":1.0244548320770264e-6,"evaluations":7.2890625,"distances_sum":1364.5312806670115}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.646484375,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.646484375,"f1":0.7703272422022429,"seconds":3.0882656574249268e-6,"exhaustive_search_seconds":1.0244548320770264e-6,"evaluations":7.2890625,"distances_sum":1364.5312806670115}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.646484375,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.646484375,"f1":0.7703272422022429,"seconds":3.0882656574249268e-6,"exhaustive_search_seconds":1.0244548320770264e-6,"evaluations":7.2890625,"distances_sum":1364.5312806670115}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.544921875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.544921875,"f1":0.6908985112110116,"seconds":2.868473529815674e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":6.6171875,"distances_sum":1038.244462042749}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.453125, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.453125,"f1":null,"seconds":2.5276094675064087e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":6.125,"distances_sum":857.8435900472231}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.544921875,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.544921875,"f1":0.6908985112110116,"seconds":2.868473529815674e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":6.6171875,"distances_sum":1038.244462042749}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.677734375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.677734375,"f1":0.7988277347652357,"seconds":3.2652169466018677e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":7.3359375,"distances_sum":1358.291113922661}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8193359375, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8193359375,"f1":0.8917988261738268,"seconds":3.7811696529388428e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":8.640625,"distances_sum":1798.2608202039305}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9427369505494514,"seconds":3.976747393608093e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":8.7578125,"distances_sum":2070.8197051966085}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.720703125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.720703125,"f1":0.8312307484182492,"seconds":3.384426236152649e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":7.9921875,"distances_sum":1461.0384686067946}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.74609375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.74609375,"f1":0.8491191100566109,"seconds":3.5427510738372803e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":8.1796875,"distances_sum":1545.881048246473}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8173828125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8173828125,"f1":0.8940762362637371,"seconds":3.7606805562973022e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":8.6796875,"distances_sum":1781.069733793485}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8984375,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.8984375,"f1":0.9427369505494514,"seconds":3.976747393608093e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":8.7578125,"distances_sum":2070.8197051966085}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9525157134532138,"seconds":4.14624810218811e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":8.84375,"distances_sum":2179.039981742452}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9732543498168501,"seconds":4.157423973083496e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":8.9453125,"distances_sum":2295.0488179391737}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9572573260073263,"seconds":4.0084123611450195e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":8.8984375,"distances_sum":2183.3918516446333}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9688072344322349,"seconds":4.1406601667404175e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":8.9609375,"distances_sum":2254.4077919005285}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9521484375,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9732543498168501,"seconds":4.157423973083496e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":8.9453125,"distances_sum":2295.0488179391737}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9521484375,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9732543498168501,"seconds":4.157423973083496e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":8.9453125,"distances_sum":2295.0488179391737}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3671875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3671875,"f1":null,"seconds":2.7436763048171997e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":5.546875,"distances_sum":797.5299228425877}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3671875,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.3671875,"f1":null,"seconds":2.7436763048171997e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":5.546875,"distances_sum":797.5299228425877}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.66015625, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.66015625,"f1":0.7818658771783779,"seconds":4.738569259643555e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":7.765625,"distances_sum":1424.7999037347786}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.517578125, conf: {"ssize":8,"bsize":3}, perf: {"precision":1.0,"recall":0.517578125,"f1":0.6640333624708628,"seconds":4.151836037635803e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":6.8828125,"distances_sum":1105.5921234618731}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5546875, conf: {"ssize":2,"bsize":3}, perf: {"precision":null,"recall":0.5546875,"f1":null,"seconds":4.263594746589661e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":7.09375,"distances_sum":1132.9188403030214}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.775390625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.775390625,"f1":0.8625010406260414,"seconds":5.06080687046051e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":8.2734375,"distances_sum":1752.6498909590848}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.775390625,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.775390625,"f1":0.8625010406260414,"seconds":5.06080687046051e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":8.2734375,"distances_sum":1752.6498909590848}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8349609375, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.8349609375,"f1":0.9032941017316026,"seconds":5.505979061126709e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":8.5,"distances_sum":1907.1003423747857}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8505859375, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8505859375,"f1":0.913619193306694,"seconds":5.386769771575928e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":8.6171875,"distances_sum":1956.3791892275526}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.84375,"f1":0.9074951090576098,"seconds":5.25452196598053e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":8.6640625,"distances_sum":1954.0000918011021}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.9280162545787551,"seconds":5.2675604820251465e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":8.546875,"distances_sum":2108.93207647574}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8505859375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8505859375,"f1":0.9117762445887454,"seconds":5.340203642845154e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":8.484375,"distances_sum":2007.6509641657856}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9303717116217124,"seconds":5.0906091928482056e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":8.59375,"distances_sum":2086.389783699006}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8798828125,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.8798828125,"f1":0.9303717116217124,"seconds":5.0906091928482056e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":8.59375,"distances_sum":2086.389783699006}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8798828125,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.8798828125,"f1":0.9303717116217124,"seconds":5.0906091928482056e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":8.59375,"distances_sum":2086.389783699006}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2568359375,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2568359375,"f1":null,"seconds":3.0174851417541504e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":5.75,"distances_sum":499.4882198567125}}, beam: 3, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.2568359375,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2568359375,"f1":null,"seconds":3.0174851417541504e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":5.75,"distances_sum":499.4882198567125}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.490234375, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.490234375,"f1":0.6461182914307917,"seconds":3.7178397178649902e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":6.71875,"distances_sum":924.014968868261}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5224609375, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5224609375,"f1":null,"seconds":3.8929283618927e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":6.875,"distances_sum":1056.831381243923}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5224609375,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.5224609375,"f1":null,"seconds":3.8929283618927e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":6.875,"distances_sum":1056.831381243923}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6474609375, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6474609375,"f1":0.7754193722943731,"seconds":4.4889748096466064e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":7.8984375,"distances_sum":1232.9745550864118}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7607421875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7607421875,"f1":0.8544018481518488,"seconds":4.7869980335235596e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.234375,"distances_sum":1556.1834594759237}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76171875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.76171875,"f1":0.8563077547452556,"seconds":4.887580871582031e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.3046875,"distances_sum":1532.9540337296708}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6572265625, conf: {"ssize":9,"bsize":4}, perf: {"precision":1.0,"recall":0.6572265625,"f1":0.7813779970029978,"seconds":4.49642539024353e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":7.8203125,"distances_sum":1270.3396940620073}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6591796875, conf: {"ssize":2,"bsize":4}, perf: {"precision":null,"recall":0.6591796875,"f1":null,"seconds":4.369765520095825e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":7.9296875,"distances_sum":1280.648411637443}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.76171875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.76171875,"f1":0.8563077547452556,"seconds":4.887580871582031e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.3046875,"distances_sum":1532.9540337296708}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9519803113553119,"seconds":5.463138222694397e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.8203125,"distances_sum":2116.443680638678}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.8595503454878464,"seconds":4.978850483894348e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.2578125,"distances_sum":1606.9220825285342}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9461996336996342,"seconds":5.632638931274414e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.84375,"distances_sum":2052.668202595281}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.944207875457876,"seconds":5.552545189857483e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.71875,"distances_sum":2066.4829994133493}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87109375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.87109375,"f1":0.9237127455877464,"seconds":5.286186933517456e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.5859375,"distances_sum":1966.616036523778}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.779296875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.779296875,"f1":0.8668794746919755,"seconds":4.988163709640503e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.3125,"distances_sum":1616.4901772435219}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9472730394605402,"seconds":5.41098415851593e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.6875,"distances_sum":2083.3460419142266}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.849609375, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.849609375,"f1":0.9126061438561448,"seconds":5.062669515609741e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.6953125,"distances_sum":1834.882394635858}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8447265625, conf: {"ssize":9,"bsize":6}, perf: {"precision":1.0,"recall":0.8447265625,"f1":0.9094468031968038,"seconds":5.3085386753082275e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.7109375,"distances_sum":1822.934520316098}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8603515625, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.8603515625,"f1":0.917820200632701,"seconds":5.582347512245178e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.6875,"distances_sum":1897.6764516122873}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.916015625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.9519803113553119,"seconds":5.463138222694397e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.8203125,"distances_sum":2116.443680638678}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.916015625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.9519803113553119,"seconds":5.463138222694397e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.8203125,"distances_sum":2116.443680638678}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.54296875, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.54296875,"f1":null,"seconds":4.308298230171204e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":6.6953125,"distances_sum":1034.7895644122327}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3662109375, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.3662109375,"f1":null,"seconds":3.7588179111480713e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":5.390625,"distances_sum":663.5846981403871}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.54296875,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.54296875,"f1":null,"seconds":4.308298230171204e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":6.6953125,"distances_sum":1034.7895644122327}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.876953125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.876953125,"f1":0.9283971237096242,"seconds":5.424022674560547e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.3984375,"distances_sum":1956.3406675106783}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.876953125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.876953125,"f1":0.9283971237096242,"seconds":5.424022674560547e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.3984375,"distances_sum":1956.3406675106783}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9627804487179491,"seconds":5.386769771575928e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.796875,"distances_sum":2128.8480116557585}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9300225815850822,"seconds":5.153939127922058e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.5234375,"distances_sum":1994.90432900096}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.93359375,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9627804487179491,"seconds":5.386769771575928e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.796875,"distances_sum":2128.8480116557585}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.93359375,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9627804487179491,"seconds":5.386769771575928e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.796875,"distances_sum":2128.8480116557585}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6494140625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6494140625,"f1":0.7751717032967042,"seconds":4.330649971961975e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":7.4453125,"distances_sum":1287.6879359730287}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5224609375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5224609375,"f1":0.669152375402376,"seconds":4.0959566831588745e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":6.703125,"distances_sum":1019.6032932531225}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7705078125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7705078125,"f1":0.8628496503496511,"seconds":5.358830094337463e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.3203125,"distances_sum":1604.6738292959953}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7705078125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7705078125,"f1":0.8628496503496511,"seconds":5.358830094337463e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.3203125,"distances_sum":1604.6738292959953}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9315762362637371,"seconds":5.5711716413497925e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.65625,"distances_sum":1944.4414186499882}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.962780448717949,"seconds":5.725771188735962e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.84375,"distances_sum":2130.800200983835}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8642578125, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8642578125,"f1":0.9214431401931411,"seconds":5.252659320831299e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.578125,"distances_sum":1921.0412084740449}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.818359375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.818359375,"f1":0.8939820596070603,"seconds":5.0943344831466675e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.3515625,"distances_sum":1745.7907385703086}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9326171875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.962780448717949,"seconds":5.725771188735962e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.84375,"distances_sum":2130.800200983835}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9707417582417587,"seconds":5.5283308029174805e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.890625,"distances_sum":2176.4300828383407}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9753548534798538,"seconds":5.589798092842102e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.9609375,"distances_sum":2196.947197730157}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9692364926739931,"seconds":5.921348929405212e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.9453125,"distances_sum":2152.7323186916656}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9695169413919418,"seconds":5.923211574554443e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.890625,"distances_sum":2174.4089093306898}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.955078125,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9753548534798538,"seconds":5.589798092842102e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.9609375,"distances_sum":2196.947197730157}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.955078125,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9753548534798538,"seconds":5.589798092842102e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.9609375,"distances_sum":2196.947197730157}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7099609375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7099609375,"f1":0.8203941891441899,"seconds":5.045905709266663e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":7.7578125,"distances_sum":1520.972540777314}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.185546875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.185546875,"f1":null,"seconds":2.6766210794448853e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":4.96875,"distances_sum":406.89487061531094}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7099609375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7099609375,"f1":0.8203941891441899,"seconds":5.045905709266663e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":7.7578125,"distances_sum":1520.972540777314}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9653102106227109,"seconds":5.3998082876205444e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.8125,"distances_sum":2182.389481545175}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9653102106227109,"seconds":5.3998082876205444e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.8125,"distances_sum":2182.389481545175}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9670043498168502,"seconds":5.7220458984375e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.8828125,"distances_sum":2195.920188913809}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.970703125, conf: {"ssize":3,"bsize":13}, perf: {"precision":1.0,"recall":0.970703125,"f1":0.983596611721612,"seconds":5.867332220077515e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.9453125,"distances_sum":2283.3692284144417}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.970703125,"state":{"ssize":3,"bsize":13},"perf":{"precision":1.0,"recall":0.970703125,"f1":0.983596611721612,"seconds":5.867332220077515e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.9453125,"distances_sum":2283.3692284144417}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.970703125,"state":{"ssize":3,"bsize":13},"perf":{"precision":1.0,"recall":0.970703125,"f1":0.983596611721612,"seconds":5.867332220077515e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.9453125,"distances_sum":2283.3692284144417}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.759765625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.759765625,"f1":0.8566912254412264,"seconds":3.2186508178710938e-6,"exhaustive_search_seconds":8.735805749893188e-7,"evaluations":8.484375,"distances_sum":1569.5520770485919}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6162109375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.6162109375,"f1":0.751881972194473,"seconds":3.0212104320526123e-6,"exhaustive_search_seconds":8.735805749893188e-7,"evaluations":7.6171875,"distances_sum":1131.8105903895305}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.759765625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.759765625,"f1":0.8566912254412264,"seconds":3.2186508178710938e-6,"exhaustive_search_seconds":8.735805749893188e-7,"evaluations":8.484375,"distances_sum":1569.5520770485919}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.833984375, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.833984375,"f1":0.9037145146520154,"seconds":3.416091203689575e-6,"exhaustive_search_seconds":8.735805749893188e-7,"evaluations":8.875,"distances_sum":1759.8496245296137}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.9311698717948723,"seconds":3.779307007789612e-6,"exhaustive_search_seconds":8.735805749893188e-7,"evaluations":8.921875,"distances_sum":1948.104635795649}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.880859375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.880859375,"f1":0.9311698717948723,"seconds":3.779307007789612e-6,"exhaustive_search_seconds":8.735805749893188e-7,"evaluations":8.921875,"distances_sum":1948.104635795649}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9511420870795877,"seconds":3.596767783164978e-6,"exhaustive_search_seconds":8.735805749893188e-7,"evaluations":8.875,"distances_sum":2078.187472773845}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9689045329670332,"seconds":3.809109330177307e-6,"exhaustive_search_seconds":8.735805749893188e-7,"evaluations":9.0,"distances_sum":2158.410079403046}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9545074716949721,"seconds":3.63960862159729e-6,"exhaustive_search_seconds":8.735805749893188e-7,"evaluations":8.9453125,"distances_sum":2085.9342257792578}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9437728937728942,"seconds":3.6656856536865234e-6,"exhaustive_search_seconds":8.735805749893188e-7,"evaluations":8.9375,"distances_sum":2001.829727308699}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9572630494505501,"seconds":3.935769200325012e-6,"exhaustive_search_seconds":8.735805749893188e-7,"evaluations":8.953125,"distances_sum":2098.8506359003263}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9689045329670332,"seconds":3.809109330177307e-6,"exhaustive_search_seconds":8.735805749893188e-7,"evaluations":9.0,"distances_sum":2158.410079403046}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9443359375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9689045329670332,"seconds":3.809109330177307e-6,"exhaustive_search_seconds":8.735805749893188e-7,"evaluations":9.0,"distances_sum":2158.410079403046}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6572265625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6572265625,"f1":0.7837246087246095,"seconds":3.0566006898880005e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":7.21875,"distances_sum":1341.1190709777736}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.556640625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.556640625,"f1":0.700896152458653,"seconds":2.6114284992218018e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":6.7421875,"distances_sum":1063.6607069587842}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6572265625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6572265625,"f1":0.7837246087246095,"seconds":3.0566006898880005e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":7.21875,"distances_sum":1341.1190709777736}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6767578125, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6767578125,"f1":0.7972969738594746,"seconds":2.775341272354126e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":7.171875,"distances_sum":1370.322916668182}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83203125, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.83203125,"f1":0.9029564185814193,"seconds":3.4514814615249634e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.515625,"distances_sum":1859.5305014703372}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.798828125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.798828125,"f1":0.880595446220447,"seconds":3.470107913017273e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.3984375,"distances_sum":1738.1338494303488}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7587890625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7587890625,"f1":0.8549138361638371,"seconds":3.17208468914032e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.0078125,"distances_sum":1647.0008105749762}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.83203125,"state":{"ssize":2,"bsize":6},"perf":{"precision":1.0,"recall":0.83203125,"f1":0.9029564185814193,"seconds":3.4514814615249634e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.515625,"distances_sum":1859.5305014703372}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9693280677655681,"seconds":3.954395651817322e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.90625,"distances_sum":2280.069249470601}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9536515567765572,"seconds":3.7401914596557617e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.8671875,"distances_sum":2168.3649495695745}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9405620421245426,"seconds":3.6209821701049805e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.71875,"distances_sum":2129.853661535968}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8583984375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8583984375,"f1":0.9183582042957049,"seconds":3.4831464290618896e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.6484375,"distances_sum":1951.9775643932649}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9678972069597075,"seconds":3.8016587495803833e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.9140625,"distances_sum":2269.4545142781762}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9312385531135541,"seconds":3.5781413316726685e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.6796875,"distances_sum":2017.8109439837567}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9441334706959713,"seconds":3.77558171749115e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.75,"distances_sum":2144.488380473189}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9453125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9453125,"f1":0.9693280677655681,"seconds":3.954395651817322e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.90625,"distances_sum":2280.069249470601}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9453125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9453125,"f1":0.9693280677655681,"seconds":3.954395651817322e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.90625,"distances_sum":2280.069249470601}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.66796875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.66796875,"f1":0.7928644272394282,"seconds":2.859160304069519e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":7.3515625,"distances_sum":1322.6934938433103}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.712890625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.712890625,"f1":0.8218416999667008,"seconds":3.3136457204818726e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.140625,"distances_sum":1473.6098348210548}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.712890625,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.712890625,"f1":0.8218416999667008,"seconds":3.3136457204818726e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.140625,"distances_sum":1473.6098348210548}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9614068223443228,"seconds":3.982335329055786e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.8984375,"distances_sum":2190.034459842426}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.72265625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.72265625,"f1":0.8293487762237769,"seconds":3.1944364309310913e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.15625,"distances_sum":1487.236974882232}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.9321173618048625,"seconds":3.6582350730895996e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.7265625,"distances_sum":1964.6847808013877}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8193359375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8193359375,"f1":0.8956616300366307,"seconds":3.3956021070480347e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.6953125,"distances_sum":1775.1232781150009}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9306640625,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.9614068223443228,"seconds":3.982335329055786e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.8984375,"distances_sum":2190.034459842426}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9656650641025647,"seconds":3.87243926525116e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.9140625,"distances_sum":2198.906251244193}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":3,"bsize":12}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9720810439560442,"seconds":4.155375063419342e-5,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.9296875,"distances_sum":2256.6992934822906}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9655906593406599,"seconds":3.7085264921188354e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.890625,"distances_sum":2200.649719462231}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9501953125,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9720810439560442,"seconds":4.155375063419342e-5,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.9296875,"distances_sum":2256.6992934822906}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9501953125,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9720810439560442,"seconds":4.155375063419342e-5,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.9296875,"distances_sum":2256.6992934822906}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8017578125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.8017578125,"f1":0.8836512445887454,"seconds":3.1851232051849365e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.671875,"distances_sum":1530.612396165849}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.791015625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.791015625,"f1":0.8767170329670338,"seconds":5.5264681577682495e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.703125,"distances_sum":1501.0792851587935}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8017578125,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.8017578125,"f1":0.8836512445887454,"seconds":3.1851232051849365e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.671875,"distances_sum":1530.612396165849}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9492273351648359,"seconds":6.146728992462158e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.84375,"distances_sum":1870.802521943424}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9445028929403935,"seconds":6.057322025299072e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.890625,"distances_sum":1823.1846947284837}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.841796875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.841796875,"f1":0.9082734973359979,"seconds":5.889683961868286e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.8515625,"distances_sum":1627.0652933530962}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9412863178488183,"seconds":6.070360541343689e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.8359375,"distances_sum":1823.2970812156377}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9562931859806865,"seconds":6.1336904764175415e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.828125,"distances_sum":1935.8937289147207}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.923828125,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.9562931859806865,"seconds":6.1336904764175415e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.828125,"distances_sum":1935.8937289147207}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9652758699633703,"seconds":6.346032023429871e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.921875,"distances_sum":1944.101737940953}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9713541666666667,"seconds":6.463378667831421e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.9375,"distances_sum":1988.2091091316186}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9695169413919418,"seconds":6.310641765594482e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.921875,"distances_sum":1984.8894573796463}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.974609375, conf: {"ssize":10,"bsize":12}, perf: {"precision":1.0,"recall":0.974609375,"f1":0.9863839285714288,"seconds":6.444752216339111e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.9921875,"distances_sum":2073.631586655161}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9683436355311359,"seconds":6.280839443206787e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.953125,"distances_sum":1972.5638582132954}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9704670329670333,"seconds":6.429851055145264e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.953125,"distances_sum":1994.6269201286123}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9598672161172163,"seconds":6.144866347312927e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.8671875,"distances_sum":1937.7059181441643}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9669471153846159,"seconds":6.18956983089447e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.921875,"distances_sum":1962.4302693643467}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.974609375,"state":{"ssize":10,"bsize":12},"perf":{"precision":1.0,"recall":0.974609375,"f1":0.9863839285714288,"seconds":6.444752216339111e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.9921875,"distances_sum":2073.631586655161}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.974609375,"state":{"ssize":10,"bsize":12},"perf":{"precision":1.0,"recall":0.974609375,"f1":0.9863839285714288,"seconds":6.444752216339111e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.9921875,"distances_sum":2073.631586655161}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2041015625,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2041015625,"f1":null,"seconds":3.242865204811096e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":5.6484375,"distances_sum":346.36599751093786}}, beam: 3, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.2041015625,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2041015625,"f1":null,"seconds":3.242865204811096e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":5.6484375,"distances_sum":346.36599751093786}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2265625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2265625,"f1":null,"seconds":3.5427510738372803e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":6.5078125,"distances_sum":395.46982860941773}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2265625,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.2265625,"f1":null,"seconds":3.5427510738372803e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":6.5078125,"distances_sum":395.46982860941773}}, beam: 3, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.2265625,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.2265625,"f1":null,"seconds":3.5427510738372803e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":6.5078125,"distances_sum":395.46982860941773}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2275390625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2275390625,"f1":null,"seconds":3.5688281059265137e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":6.2421875,"distances_sum":436.03620960985245}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7841796875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7841796875,"f1":0.8723099816849824,"seconds":5.232170224189758e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.3515625,"distances_sum":1627.3585953210834}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7841796875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7841796875,"f1":0.8723099816849824,"seconds":5.232170224189758e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.3515625,"distances_sum":1627.3585953210834}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9539663461538467,"seconds":3.768131136894226e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.8046875,"distances_sum":2107.2080249380865}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8291015625, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8291015625,"f1":0.9010218947718955,"seconds":5.854293704032898e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.6484375,"distances_sum":1771.5813828694984}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9189453125,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.9189453125,"f1":0.9539663461538467,"seconds":3.768131136894226e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.8046875,"distances_sum":2107.2080249380865}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9703010531135534,"seconds":6.327405571937561e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.9296875,"distances_sum":2174.317470954483}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9709478021978024,"seconds":6.401911377906799e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.921875,"distances_sum":2186.2427493484224}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9562728937728944,"seconds":6.379559636116028e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.8828125,"distances_sum":2085.6719931670273}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9574690934065939,"seconds":6.260350346565247e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.8515625,"distances_sum":2117.4321905437987}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9703010531135534,"seconds":6.327405571937561e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.9296875,"distances_sum":2174.317470954483}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9703010531135534,"seconds":6.327405571937561e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.9296875,"distances_sum":2174.317470954483}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2001953125, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2001953125,"f1":null,"seconds":3.3061951398849487e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":5.46875,"distances_sum":361.30336665212906}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7568359375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7568359375,"f1":0.85373844905095,"seconds":5.414709448814392e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":7.8515625,"distances_sum":1522.8952483224384}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2314453125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2314453125,"f1":null,"seconds":3.470107913017273e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":5.9375,"distances_sum":455.8698181405913}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7568359375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7568359375,"f1":0.85373844905095,"seconds":5.414709448814392e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":7.8515625,"distances_sum":1522.8952483224384}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8251953125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8251953125,"f1":0.8974161255411264,"seconds":6.07222318649292e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.359375,"distances_sum":1740.06848857868}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8251953125,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8251953125,"f1":0.8974161255411264,"seconds":6.07222318649292e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.359375,"distances_sum":1740.06848857868}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9462542665667669,"seconds":6.416812539100647e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.7109375,"distances_sum":2024.6930980795312}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8583984375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8583984375,"f1":0.9168300449550454,"seconds":4.718080163002014e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.6015625,"distances_sum":1845.9001195756673}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9072265625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9072265625,"f1":0.9462542665667669,"seconds":6.416812539100647e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.7109375,"distances_sum":2024.6930980795312}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9072265625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9072265625,"f1":0.9462542665667669,"seconds":6.416812539100647e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.7109375,"distances_sum":2024.6930980795312}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6572265625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6572265625,"f1":0.7837509712509722,"seconds":2.9671937227249146e-6,"exhaustive_search_seconds":8.922070264816284e-7,"evaluations":7.875,"distances_sum":1329.4649938151535}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6572265625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6572265625,"f1":0.7837509712509722,"seconds":2.9671937227249146e-6,"exhaustive_search_seconds":8.922070264816284e-7,"evaluations":7.875,"distances_sum":1329.4649938151535}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.853515625, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.853515625,"f1":0.916248855311356,"seconds":3.4868717193603516e-6,"exhaustive_search_seconds":8.922070264816284e-7,"evaluations":8.5703125,"distances_sum":1906.3031986143692}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7890625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7890625,"f1":0.8744078837828846,"seconds":3.257766366004944e-6,"exhaustive_search_seconds":8.922070264816284e-7,"evaluations":8.296875,"distances_sum":1699.4674885933725}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.853515625,"state":{"ssize":4,"bsize":6},"perf":{"precision":1.0,"recall":0.853515625,"f1":0.916248855311356,"seconds":3.4868717193603516e-6,"exhaustive_search_seconds":8.922070264816284e-7,"evaluations":8.5703125,"distances_sum":1906.3031986143692}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9639136904761909,"seconds":3.807246685028076e-6,"exhaustive_search_seconds":8.922070264816284e-7,"evaluations":8.8359375,"distances_sum":2191.5150018845484}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.931433670496171,"seconds":3.6526471376419067e-6,"exhaustive_search_seconds":8.922070264816284e-7,"evaluations":8.5390625,"distances_sum":2021.8781186024828}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9317312895437901,"seconds":3.4570693969726562e-6,"exhaustive_search_seconds":8.922070264816284e-7,"evaluations":8.59375,"distances_sum":2011.5168581856253}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9557348901098907,"seconds":3.917142748832703e-6,"exhaustive_search_seconds":8.922070264816284e-7,"evaluations":8.78125,"distances_sum":2171.687654723645}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9715773809523813,"seconds":3.591179847717285e-6,"exhaustive_search_seconds":8.922070264816284e-7,"evaluations":8.875,"distances_sum":2255.32093297653}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9353937728937736,"seconds":3.771856427192688e-6,"exhaustive_search_seconds":8.922070264816284e-7,"evaluations":8.5703125,"distances_sum":2030.14210145857}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.859375, conf: {"ssize":9,"bsize":6}, perf: {"precision":1.0,"recall":0.859375,"f1":0.9201407967032974,"seconds":5.748122930526733e-6,"exhaustive_search_seconds":8.922070264816284e-7,"evaluations":8.578125,"distances_sum":1916.2692877213335}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9482421875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9715773809523813,"seconds":3.591179847717285e-6,"exhaustive_search_seconds":8.922070264816284e-7,"evaluations":8.875,"distances_sum":2255.32093297653}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9482421875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9715773809523813,"seconds":3.591179847717285e-6,"exhaustive_search_seconds":8.922070264816284e-7,"evaluations":8.875,"distances_sum":2255.32093297653}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5908203125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5908203125,"f1":0.7304428210678219,"seconds":2.594664692878723e-6,"exhaustive_search_seconds":1.0710209608078003e-6,"evaluations":6.859375,"distances_sum":1141.3778044807607}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5908203125,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5908203125,"f1":0.7304428210678219,"seconds":2.594664692878723e-6,"exhaustive_search_seconds":1.0710209608078003e-6,"evaluations":6.859375,"distances_sum":1141.3778044807607}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5908203125,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5908203125,"f1":0.7304428210678219,"seconds":2.594664692878723e-6,"exhaustive_search_seconds":1.0710209608078003e-6,"evaluations":6.859375,"distances_sum":1141.3778044807607}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.5908203125,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5908203125,"f1":0.7304428210678219,"seconds":2.594664692878723e-6,"exhaustive_search_seconds":1.0710209608078003e-6,"evaluations":6.859375,"distances_sum":1141.3778044807607}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.771484375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.771484375,"f1":0.8654361263736271,"seconds":3.207474946975708e-6,"exhaustive_search_seconds":8.735805749893188e-7,"evaluations":7.84375,"distances_sum":1615.9617937692974}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4375,"f1":null,"seconds":2.2854655981063843e-6,"exhaustive_search_seconds":8.735805749893188e-7,"evaluations":6.0703125,"distances_sum":792.7620899479468}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.771484375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.771484375,"f1":0.8654361263736271,"seconds":3.207474946975708e-6,"exhaustive_search_seconds":8.735805749893188e-7,"evaluations":7.84375,"distances_sum":1615.9617937692974}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9372825091575098,"seconds":3.6098062992095947e-6,"exhaustive_search_seconds":8.735805749893188e-7,"evaluations":8.6328125,"distances_sum":2006.550692450092}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8603515625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8603515625,"f1":0.917854541292042,"seconds":3.5762786865234375e-6,"exhaustive_search_seconds":8.735805749893188e-7,"evaluations":8.5,"distances_sum":1906.2105653775834}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8896484375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8896484375,"f1":0.9372825091575098,"seconds":3.6098062992095947e-6,"exhaustive_search_seconds":8.735805749893188e-7,"evaluations":8.6328125,"distances_sum":2006.550692450092}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9684924450549455,"seconds":3.7848949432373047e-6,"exhaustive_search_seconds":8.735805749893188e-7,"evaluations":8.8515625,"distances_sum":2190.8811590622563}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9706845238095243,"seconds":3.863126039505005e-6,"exhaustive_search_seconds":8.735805749893188e-7,"evaluations":8.8828125,"distances_sum":2199.9800736009233}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9462890625,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.9706845238095243,"seconds":3.863126039505005e-6,"exhaustive_search_seconds":8.735805749893188e-7,"evaluations":8.8828125,"distances_sum":2199.9800736009233}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9462890625,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.9706845238095243,"seconds":3.863126039505005e-6,"exhaustive_search_seconds":8.735805749893188e-7,"evaluations":8.8828125,"distances_sum":2199.9800736009233}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5361328125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5361328125,"f1":0.6846500721500727,"seconds":2.6635825634002686e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":7.1796875,"distances_sum":1111.2982230320627}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1796875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.1796875,"f1":null,"seconds":1.8496066331863403e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":4.796875,"distances_sum":407.4506997437291}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1826171875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1826171875,"f1":null,"seconds":1.864507794380188e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":4.75,"distances_sum":398.9484960102871}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.779296875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.779296875,"f1":0.8653965825840833,"seconds":3.343448042869568e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.3671875,"distances_sum":1714.8426673756394}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.779296875,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.779296875,"f1":0.8653965825840833,"seconds":3.343448042869568e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.3671875,"distances_sum":1714.8426673756394}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9364526098901105,"seconds":3.5390257835388184e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.75,"distances_sum":2090.8904538759552}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9452037545787554,"seconds":3.676861524581909e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.7890625,"distances_sum":2151.055145283467}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8720703125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8720703125,"f1":0.9251092657342664,"seconds":3.779307007789612e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.75,"distances_sum":2018.7448059730277}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9033203125,"state":{"ssize":7,"bsize":8},"perf":{"precision":1.0,"recall":0.9033203125,"f1":0.9452037545787554,"seconds":3.676861524581909e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.7890625,"distances_sum":2151.055145283467}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9609375, conf: {"ssize":4,"bsize":12}, perf: {"precision":1.0,"recall":0.9609375,"f1":0.9788690476190478,"seconds":3.67872416973114e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.9453125,"distances_sum":2322.071626347245}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":8,"bsize":12}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9732715201465205,"seconds":3.7029385566711426e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.8984375,"distances_sum":2305.9383790662346}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.954023580586081,"seconds":3.825873136520386e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.796875,"distances_sum":2182.045379616746}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9488553113553118,"seconds":3.591179847717285e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.7578125,"distances_sum":2172.501191825039}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9737351190476193,"seconds":3.913417458534241e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.8984375,"distances_sum":2295.204038556592}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9609375,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9788690476190478,"seconds":3.67872416973114e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.9453125,"distances_sum":2322.071626347245}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9609375,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9788690476190478,"seconds":3.67872416973114e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.9453125,"distances_sum":2322.071626347245}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7548828125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7548828125,"f1":0.8498152888777898,"seconds":3.4496188163757324e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":7.71875,"distances_sum":1613.2960787477066}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.224609375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.224609375,"f1":null,"seconds":1.8924474716186523e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":5.578125,"distances_sum":451.3467235207636}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7548828125,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7548828125,"f1":0.8498152888777898,"seconds":3.4496188163757324e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":7.71875,"distances_sum":1613.2960787477066}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9429804570429575,"seconds":3.555789589881897e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.6953125,"distances_sum":2093.2264148037634}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9013671875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9013671875,"f1":0.9429804570429575,"seconds":3.555789589881897e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.6953125,"distances_sum":2093.2264148037634}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9711881868131872,"seconds":3.563240170478821e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.84375,"distances_sum":2245.3329159534655}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9482421875,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9711881868131872,"seconds":3.563240170478821e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.84375,"distances_sum":2245.3329159534655}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9482421875,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9711881868131872,"seconds":3.563240170478821e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.84375,"distances_sum":2245.3329159534655}}, n: 9
inertia(cfft.distances) = 19.384190361611022
inertia(cdnet.distances) = 30.32085996550799
inertia(crand.distances) = 22.692191309017776
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8977777777777778
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8911111111111111
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8844444444444445
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.9
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9422222222222222
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9422222222222222
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9444444444444443
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.9288888888888889
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8933333333333334
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8866666666666667
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8933333333333334
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8955555555555555
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8888888888888888
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9222222222222222
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9244444444444445
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9288888888888889
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.9266666666666666
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.9022222222222224
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8866666666666667
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.88
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9400000000000001
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.8777777777777778
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8977777777777778
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9044444444444443
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9088888888888889
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8666666666666666
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.88
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9022222222222221
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9199999999999999
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.8955555555555557
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9199999999999999
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX===== rocchio like>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX==== clustering>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
nc.class_map = [2, 3, 1, 3, 1, 1, 2, 3, 3, 1, 2, 3, 3, 2, 3, 2, 3, 3, 2, 1, 3]
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 4, 1]]
** centroid: 8, normalized-entropy: 0.7219280948873623, Tuple{Int64,Int64}[(2, 4), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 8]]
** centroid: 9, normalized-entropy: 0.8453509366224364, Tuple{Int64,Int64}[(2, 3), (3, 8)]
*** center 10: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 11, normalized-entropy: 0.46899559358928133, Tuple{Int64,Int64}[(2, 1), (3, 9)]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 2, 3, 3, 2, 3, 2, 3, 1, 3, 2]
acc = 0.9266666666666666
*** starting iteration: 1; err: [Inf, 0.3433333377306934] ***
*** computing centroids ***
*** computing 12 nearest references ***
*** new score with 12 references: [Inf, 0.3433333377306934, 0.17040320812185775] ***
*** starting iteration: 2; err: [Inf, 0.3433333377306934, 0.17040320812185775] ***
*** computing centroids ***
*** computing 12 nearest references ***
*** new score with 12 references: [Inf, 0.3433333377306934, 0.17040320812185775, 0.16322967695279464] ***
*** starting iteration: 3; err: [Inf, 0.3433333377306934, 0.17040320812185775, 0.16322967695279464] ***
*** computing centroids ***
*** computing 12 nearest references ***
*** new score with 12 references: [Inf, 0.3433333377306934, 0.17040320812185775, 0.16322967695279464, 0.1606991774586644] ***
*** starting iteration: 4; err: [Inf, 0.3433333377306934, 0.17040320812185775, 0.16322967695279464, 0.1606991774586644] ***
*** computing centroids ***
*** computing 12 nearest references ***
*** new score with 12 references: [Inf, 0.3433333377306934, 0.17040320812185775, 0.16322967695279464, 0.1606991774586644, 0.15896062980381273] ***
*** starting iteration: 5; err: [Inf, 0.3433333377306934, 0.17040320812185775, 0.16322967695279464, 0.1606991774586644, 0.15896062980381273] ***
*** computing centroids ***
*** computing 12 nearest references ***
*** new score with 12 references: [Inf, 0.3433333377306934, 0.17040320812185775, 0.16322967695279464, 0.1606991774586644, 0.15896062980381273, 0.15754258263496715] ***
*** starting iteration: 6; err: [Inf, 0.3433333377306934, 0.17040320812185775, 0.16322967695279464, 0.1606991774586644, 0.15896062980381273, 0.15754258263496715] ***
*** computing centroids ***
*** computing 12 nearest references ***
*** new score with 12 references: [Inf, 0.3433333377306934, 0.17040320812185775, 0.16322967695279464, 0.1606991774586644, 0.15896062980381273, 0.15754258263496715, 0.1556950171451142] ***
*** starting iteration: 7; err: [Inf, 0.3433333377306934, 0.17040320812185775, 0.16322967695279464, 0.1606991774586644, 0.15896062980381273, 0.15754258263496715, 0.1556950171451142] ***
*** computing centroids ***
*** computing 12 nearest references ***
*** new score with 12 references: [Inf, 0.3433333377306934, 0.17040320812185775, 0.16322967695279464, 0.1606991774586644, 0.15896062980381273, 0.15754258263496715, 0.1556950171451142, 0.15514203626493828] ***
*** finished computation of 12 references, err: [Inf, 0.3433333377306934, 0.17040320812185775, 0.16322967695279464, 0.1606991774586644, 0.15896062980381273, 0.15754258263496715, 0.1556950171451142, 0.15514203626493828] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 3, 9]]
** centroid: 5, normalized-entropy: 0.8112781244591328, Tuple{Int64,Int64}[(2, 3), (3, 9)]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 4, 7]]
** centroid: 12, normalized-entropy: 0.9456603046006401, Tuple{Int64,Int64}[(2, 4), (3, 7)]
finished with 14 centroids; started with 12
acc = 0.96
Test Summary:   | Pass  Total
NearestCentroid |   10     10
iteration 1 finished
*** starting iteration: 1; err: [Inf, 4.681305103478352] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 4.681305103478352, 1.0252302863647054] ***
*** starting iteration: 2; err: [Inf, 4.681305103478352, 1.0252302863647054] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 4.681305103478352, 1.0252302863647054, 0.36009533777527947] ***
*** starting iteration: 3; err: [Inf, 4.681305103478352, 1.0252302863647054, 0.36009533777527947] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 4.681305103478352, 1.0252302863647054, 0.36009533777527947, 0.20553876121048295] ***
*** starting iteration: 4; err: [Inf, 4.681305103478352, 1.0252302863647054, 0.36009533777527947, 0.20553876121048295] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 4.681305103478352, 1.0252302863647054, 0.36009533777527947, 0.20553876121048295, 0.18893325346476503] ***
*** starting iteration: 5; err: [Inf, 4.681305103478352, 1.0252302863647054, 0.36009533777527947, 0.20553876121048295, 0.18893325346476503] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 4.681305103478352, 1.0252302863647054, 0.36009533777527947, 0.20553876121048295, 0.18893325346476503, 0.18896507598008994] ***
*** finished computation of 7 references, err: [Inf, 4.681305103478352, 1.0252302863647054, 0.36009533777527947, 0.20553876121048295, 0.18893325346476503, 0.18896507598008994] ***
*** center 1: selecting labels [1] (freq >= 1) [from [31, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 11, 2]]
** centroid: 2, normalized-entropy: 0.6193821946787638, Tuple{Int64,Int64}[(2, 11), (3, 2)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 19, 1]]
** centroid: 3, normalized-entropy: 0.2863969571159561, Tuple{Int64,Int64}[(2, 19), (3, 1)]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 2, 12]]
** centroid: 6, normalized-entropy: 0.5916727785823274, Tuple{Int64,Int64}[(2, 2), (3, 12)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3275049007692092] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3275049007692092, 0.1718477780359649] ***
*** finished computation of 7 references, err: [Inf, 0.3275049007692092, 0.1718477780359649] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 16, 11]]
** centroid: 1, normalized-entropy: 0.975119064940866, Tuple{Int64,Int64}[(2, 16), (3, 11)]
*** center 2: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 5: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 9, 1]]
** centroid: 6, normalized-entropy: 0.46899559358928133, Tuple{Int64,Int64}[(2, 9), (3, 1)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 14]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3410657240660435] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3410657240660435, 0.20990606427827851] ***
*** finished computation of 7 references, err: [Inf, 0.3410657240660435, 0.20990606427827851] ***
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 19, 7]]
** centroid: 3, normalized-entropy: 0.8403586716091169, Tuple{Int64,Int64}[(2, 19), (3, 7)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 10, 4]]
** centroid: 4, normalized-entropy: 0.8631205685666311, Tuple{Int64,Int64}[(2, 10), (3, 4)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 15]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 1.0331000047132874] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0331000047132874, 0.5701341162713598] ***
*** starting iteration: 2; err: [Inf, 1.0331000047132874, 0.5701341162713598] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0331000047132874, 0.5701341162713598, 0.5620593825202183] ***
*** starting iteration: 3; err: [Inf, 1.0331000047132874, 0.5701341162713598, 0.5620593825202183] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0331000047132874, 0.5701341162713598, 0.5620593825202183, 0.561522389220118] ***
*** finished computation of 3 references, err: [Inf, 1.0331000047132874, 0.5701341162713598, 0.5620593825202183, 0.561522389220118] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 4, 31]]
** centroid: 1, normalized-entropy: 0.5127091420308771, Tuple{Int64,Int64}[(2, 4), (3, 31)]
*** center 2: selecting labels [1] (freq >= 1) [from [31, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 28, 6]]
** centroid: 3, normalized-entropy: 0.6722948170756378, Tuple{Int64,Int64}[(2, 28), (3, 6)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.4538999954543845] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.4538999954543845, 0.5192486440637469] ***
*** starting iteration: 2; err: [Inf, 1.4538999954543845, 0.5192486440637469] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.4538999954543845, 0.5192486440637469, 0.5118444637421358] ***
*** starting iteration: 3; err: [Inf, 1.4538999954543845, 0.5192486440637469, 0.5118444637421358] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.4538999954543845, 0.5192486440637469, 0.5118444637421358, 0.5079685132875761] ***
*** finished computation of 3 references, err: [Inf, 1.4538999954543845, 0.5192486440637469, 0.5118444637421358, 0.5079685132875761] ***
*** center 1: selecting labels [1] (freq >= 1) [from [36, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 2, 22]]
** centroid: 2, normalized-entropy: 0.4138168503036336, Tuple{Int64,Int64}[(2, 2), (3, 22)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 30, 10]]
** centroid: 3, normalized-entropy: 0.8112781244591328, Tuple{Int64,Int64}[(2, 30), (3, 10)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9880000053780991] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9880000053780991, 0.5201145876221824] ***
*** starting iteration: 2; err: [Inf, 0.9880000053780991, 0.5201145876221824] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9880000053780991, 0.5201145876221824, 0.49845565031536365] ***
*** starting iteration: 3; err: [Inf, 0.9880000053780991, 0.5201145876221824, 0.49845565031536365] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9880000053780991, 0.5201145876221824, 0.49845565031536365, 0.4971697201114452] ***
*** finished computation of 3 references, err: [Inf, 0.9880000053780991, 0.5201145876221824, 0.49845565031536365, 0.4971697201114452] ***
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 1, 20]]
** centroid: 2, normalized-entropy: 0.2761954276479391, Tuple{Int64,Int64}[(2, 1), (3, 20)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 35, 11]]
** centroid: 3, normalized-entropy: 0.7935912300117066, Tuple{Int64,Int64}[(2, 35), (3, 11)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.069999993762088] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.069999993762088, 0.6019961476274073] ***
*** finished computation of 3 references, err: [Inf, 1.069999993762088, 0.6019961476274073] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 12, 36]]
** centroid: 1, normalized-entropy: 0.8112781244591328, Tuple{Int64,Int64}[(2, 12), (3, 36)]
*** center 2: selecting labels [1] (freq >= 1) [from [31, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 3, normalized-entropy: 0.2761954276479391, Tuple{Int64,Int64}[(2, 20), (3, 1)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.7320999996584703] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.7320999996584703, 0.5079500050863891] ***
*** finished computation of 3 references, err: [Inf, 1.7320999996584703, 0.5079500050863891] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 2, 22]]
** centroid: 1, normalized-entropy: 0.4138168503036336, Tuple{Int64,Int64}[(2, 2), (3, 22)]
*** center 2: selecting labels [1] (freq >= 1) [from [36, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 30, 10]]
** centroid: 3, normalized-entropy: 0.8112781244591328, Tuple{Int64,Int64}[(2, 30), (3, 10)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 2.382699982595528] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.382699982595528, 0.49760224960491056] ***
*** finished computation of 3 references, err: [Inf, 2.382699982595528, 0.49760224960491056] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 34, 11]]
** centroid: 1, normalized-entropy: 0.80235344282919, Tuple{Int64,Int64}[(2, 34), (3, 11)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 2, 20]]
** centroid: 2, normalized-entropy: 0.43949698692151346, Tuple{Int64,Int64}[(2, 2), (3, 20)]
*** center 3: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.201800001953619] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.201800001953619, 0.561522389220118] ***
*** starting iteration: 2; err: [Inf, 1.201800001953619, 0.561522389220118] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.201800001953619, 0.561522389220118, 0.561522389220118] ***
*** finished computation of 3 references, err: [Inf, 1.201800001953619, 0.561522389220118, 0.561522389220118] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 4, 31]]
** centroid: 1, normalized-entropy: 0.5127091420308771, Tuple{Int64,Int64}[(2, 4), (3, 31)]
*** center 2: selecting labels [1] (freq >= 1) [from [31, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 28, 6]]
** centroid: 3, normalized-entropy: 0.6722948170756378, Tuple{Int64,Int64}[(2, 28), (3, 6)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 2.403699991107035] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.403699991107035, 0.507170004955143] ***
*** starting iteration: 2; err: [Inf, 2.403699991107035, 0.507170004955143] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.403699991107035, 0.507170004955143, 0.507170004955143] ***
*** finished computation of 3 references, err: [Inf, 2.403699991107035, 0.507170004955143, 0.507170004955143] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 30, 10]]
** centroid: 1, normalized-entropy: 0.8112781244591328, Tuple{Int64,Int64}[(2, 30), (3, 10)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 2, 22]]
** centroid: 2, normalized-entropy: 0.4138168503036336, Tuple{Int64,Int64}[(2, 2), (3, 22)]
*** center 3: selecting labels [1] (freq >= 1) [from [36, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.1356000041874352] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1356000041874352, 0.5743039247364661] ***
*** starting iteration: 2; err: [Inf, 1.1356000041874352, 0.5743039247364661] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1356000041874352, 0.5743039247364661, 0.5258534771256688] ***
*** starting iteration: 3; err: [Inf, 1.1356000041874352, 0.5743039247364661, 0.5258534771256688] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1356000041874352, 0.5743039247364661, 0.5258534771256688, 0.49845565031536365] ***
*** finished computation of 3 references, err: [Inf, 1.1356000041874352, 0.5743039247364661, 0.5258534771256688, 0.49845565031536365] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 36, 11]]
** centroid: 1, normalized-entropy: 0.7849920887641585, Tuple{Int64,Int64}[(2, 36), (3, 11)]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.1605620185509966] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1605620185509966, 0.4970207057937056] ***
*** finished computation of 3 references, err: [Inf, 1.1605620185509966, 0.4970207057937056] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 31, 22]]
** centroid: 1, normalized-entropy: 0.9790981671667148, Tuple{Int64,Int64}[(2, 31), (3, 22)]
*** center 2: selecting labels [1] (freq >= 2) [from [31, 1, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 15]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3247388310428154] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3247388310428154, 0.16150096496631158] ***
*** starting iteration: 2; err: [Inf, 0.3247388310428154, 0.16150096496631158] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3247388310428154, 0.16150096496631158, 0.15768918237357302] ***
*** starting iteration: 3; err: [Inf, 0.3247388310428154, 0.16150096496631158, 0.15768918237357302] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3247388310428154, 0.16150096496631158, 0.15768918237357302, 0.15602294147346812] ***
*** starting iteration: 4; err: [Inf, 0.3247388310428154, 0.16150096496631158, 0.15768918237357302, 0.15602294147346812] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3247388310428154, 0.16150096496631158, 0.15768918237357302, 0.15602294147346812, 0.15602294147346812] ***
*** finished computation of 7 references, err: [Inf, 0.3247388310428154, 0.16150096496631158, 0.15768918237357302, 0.15602294147346812, 0.15602294147346812] ***
*** center 1: selecting labels [1] (freq >= 1) [from [24, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 14]]
*** center 3: selecting labels [1] (freq >= 1) [from [12, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 16, 1]]
** centroid: 4, normalized-entropy: 0.32275695889739825, Tuple{Int64,Int64}[(2, 16), (3, 1)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 16, 2]]
** centroid: 5, normalized-entropy: 0.5032583347756457, Tuple{Int64,Int64}[(2, 16), (3, 2)]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.8232990154287887] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8232990154287887, 0.3307263971563276] ***
*** starting iteration: 2; err: [Inf, 0.8232990154287887, 0.3307263971563276] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8232990154287887, 0.3307263971563276, 0.2858646281576831] ***
*** starting iteration: 3; err: [Inf, 0.8232990154287887, 0.3307263971563276, 0.2858646281576831] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8232990154287887, 0.3307263971563276, 0.2858646281576831, 0.25669341147549485] ***
*** starting iteration: 4; err: [Inf, 0.8232990154287887, 0.3307263971563276, 0.2858646281576831, 0.25669341147549485] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8232990154287887, 0.3307263971563276, 0.2858646281576831, 0.25669341147549485, 0.2490620955075528] ***
*** starting iteration: 5; err: [Inf, 0.8232990154287887, 0.3307263971563276, 0.2858646281576831, 0.25669341147549485, 0.2490620955075528] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8232990154287887, 0.3307263971563276, 0.2858646281576831, 0.25669341147549485, 0.2490620955075528, 0.24507479919902192] ***
*** starting iteration: 6; err: [Inf, 0.8232990154287887, 0.3307263971563276, 0.2858646281576831, 0.25669341147549485, 0.2490620955075528, 0.24507479919902192] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8232990154287887, 0.3307263971563276, 0.2858646281576831, 0.25669341147549485, 0.2490620955075528, 0.24507479919902192, 0.2422264545422268] ***
*** starting iteration: 7; err: [Inf, 0.8232990154287887, 0.3307263971563276, 0.2858646281576831, 0.25669341147549485, 0.2490620955075528, 0.24507479919902192, 0.2422264545422268] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8232990154287887, 0.3307263971563276, 0.2858646281576831, 0.25669341147549485, 0.2490620955075528, 0.24507479919902192, 0.2422264545422268, 0.23965216732972244] ***
*** starting iteration: 8; err: [Inf, 0.8232990154287887, 0.3307263971563276, 0.2858646281576831, 0.25669341147549485, 0.2490620955075528, 0.24507479919902192, 0.2422264545422268, 0.23965216732972244] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8232990154287887, 0.3307263971563276, 0.2858646281576831, 0.25669341147549485, 0.2490620955075528, 0.24507479919902192, 0.2422264545422268, 0.23965216732972244, 0.23509047018996543] ***
*** starting iteration: 9; err: [Inf, 0.8232990154287887, 0.3307263971563276, 0.2858646281576831, 0.25669341147549485, 0.2490620955075528, 0.24507479919902192, 0.2422264545422268, 0.23965216732972244, 0.23509047018996543] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8232990154287887, 0.3307263971563276, 0.2858646281576831, 0.25669341147549485, 0.2490620955075528, 0.24507479919902192, 0.2422264545422268, 0.23965216732972244, 0.23509047018996543, 0.22929201134251356] ***
*** starting iteration: 10; err: [Inf, 0.8232990154287887, 0.3307263971563276, 0.2858646281576831, 0.25669341147549485, 0.2490620955075528, 0.24507479919902192, 0.2422264545422268, 0.23965216732972244, 0.23509047018996543, 0.22929201134251356] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8232990154287887, 0.3307263971563276, 0.2858646281576831, 0.25669341147549485, 0.2490620955075528, 0.24507479919902192, 0.2422264545422268, 0.23965216732972244, 0.23509047018996543, 0.22929201134251356, 0.22316272363428563] ***
*** finished computation of 7 references, err: [Inf, 0.8232990154287887, 0.3307263971563276, 0.2858646281576831, 0.25669341147549485, 0.2490620955075528, 0.24507479919902192, 0.2422264545422268, 0.23965216732972244, 0.23509047018996543, 0.22929201134251356, 0.22316272363428563] ***
*** center 1: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [9, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 29, 2]]
** centroid: 3, normalized-entropy: 0.3451173149449528, Tuple{Int64,Int64}[(2, 29), (3, 2)]
*** center 4: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 7, 20]]
** centroid: 6, normalized-entropy: 0.8256265261578954, Tuple{Int64,Int64}[(2, 7), (3, 20)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7229000095802054] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7229000095802054, 0.561012516446753] ***
*** finished computation of 3 references, err: [Inf, 0.7229000095802054, 0.561012516446753] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 30, 7]]
** centroid: 1, normalized-entropy: 0.699772221773307, Tuple{Int64,Int64}[(2, 30), (3, 7)]
*** center 2: selecting labels [1] (freq >= 2) [from [31, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 2, 30]]
** centroid: 3, normalized-entropy: 0.3372900666170139, Tuple{Int64,Int64}[(2, 2), (3, 30)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 3.1341000045387064] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.1341000045387064, 0.7632689595397117] ***
*** finished computation of 3 references, err: [Inf, 3.1341000045387064, 0.7632689595397117] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [36, 2, 0]]
** centroid: 1, normalized-entropy: 0.2974722489192896, Tuple{Int64,Int64}[(1, 36), (2, 2)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 30, 10]]
** centroid: 2, normalized-entropy: 0.8112781244591328, Tuple{Int64,Int64}[(2, 30), (3, 10)]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 22]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.1619000021275654] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1619000021275654, 0.9265897793248149] ***
*** finished computation of 3 references, err: [Inf, 1.1619000021275654, 0.9265897793248149] ***
*** center 1: selecting labels [1] (freq >= 2) [from [33, 1, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 29, 24]]
** centroid: 2, normalized-entropy: 0.9935704757706079, Tuple{Int64,Int64}[(2, 29), (3, 24)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 6, 7]]
** centroid: 3, normalized-entropy: 0.9957274520849256, Tuple{Int64,Int64}[(2, 6), (3, 7)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 3.3702999891398506] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.3702999891398506, 1.1091189436530646] ***
*** starting iteration: 2; err: [Inf, 3.3702999891398506, 1.1091189436530646] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.3702999891398506, 1.1091189436530646, 0.6552453014612887] ***
*** starting iteration: 3; err: [Inf, 3.3702999891398506, 1.1091189436530646, 0.6552453014612887] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.3702999891398506, 1.1091189436530646, 0.6552453014612887, 0.5830979076079159] ***
*** starting iteration: 4; err: [Inf, 3.3702999891398506, 1.1091189436530646, 0.6552453014612887, 0.5830979076079159] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.3702999891398506, 1.1091189436530646, 0.6552453014612887, 0.5830979076079159, 0.5626784082500312] ***
*** starting iteration: 5; err: [Inf, 3.3702999891398506, 1.1091189436530646, 0.6552453014612887, 0.5830979076079159, 0.5626784082500312] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.3702999891398506, 1.1091189436530646, 0.6552453014612887, 0.5830979076079159, 0.5626784082500312, 0.5602972335354364] ***
*** starting iteration: 6; err: [Inf, 3.3702999891398506, 1.1091189436530646, 0.6552453014612887, 0.5830979076079159, 0.5626784082500312, 0.5602972335354364] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.3702999891398506, 1.1091189436530646, 0.6552453014612887, 0.5830979076079159, 0.5626784082500312, 0.5602972335354364, 0.5602972335354364] ***
*** finished computation of 3 references, err: [Inf, 3.3702999891398506, 1.1091189436530646, 0.6552453014612887, 0.5830979076079159, 0.5626784082500312, 0.5602972335354364, 0.5602972335354364] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 30, 7]]
** centroid: 1, normalized-entropy: 0.699772221773307, Tuple{Int64,Int64}[(2, 30), (3, 7)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 2, 30]]
** centroid: 2, normalized-entropy: 0.3372900666170139, Tuple{Int64,Int64}[(2, 2), (3, 30)]
*** center 3: selecting labels [1] (freq >= 2) [from [31, 0, 0]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.764800002058234] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.764800002058234, 0.9171108792204247] ***
*** starting iteration: 2; err: [Inf, 1.764800002058234, 0.9171108792204247] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.764800002058234, 0.9171108792204247, 0.8332333688577414] ***
*** starting iteration: 3; err: [Inf, 1.764800002058234, 0.9171108792204247, 0.8332333688577414] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.764800002058234, 0.9171108792204247, 0.8332333688577414, 0.6398817133659068] ***
*** starting iteration: 4; err: [Inf, 1.764800002058234, 0.9171108792204247, 0.8332333688577414, 0.6398817133659068] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.764800002058234, 0.9171108792204247, 0.8332333688577414, 0.6398817133659068, 0.5732000039391406] ***
*** starting iteration: 5; err: [Inf, 1.764800002058234, 0.9171108792204247, 0.8332333688577414, 0.6398817133659068, 0.5732000039391406] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.764800002058234, 0.9171108792204247, 0.8332333688577414, 0.6398817133659068, 0.5732000039391406, 0.5456372972161954] ***
*** starting iteration: 6; err: [Inf, 1.764800002058234, 0.9171108792204247, 0.8332333688577414, 0.6398817133659068, 0.5732000039391406, 0.5456372972161954] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.764800002058234, 0.9171108792204247, 0.8332333688577414, 0.6398817133659068, 0.5732000039391406, 0.5456372972161954, 0.539384396330702] ***
*** starting iteration: 7; err: [Inf, 1.764800002058234, 0.9171108792204247, 0.8332333688577414, 0.6398817133659068, 0.5732000039391406, 0.5456372972161954, 0.539384396330702] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.764800002058234, 0.9171108792204247, 0.8332333688577414, 0.6398817133659068, 0.5732000039391406, 0.5456372972161954, 0.539384396330702, 0.5250501883926613] ***
*** starting iteration: 8; err: [Inf, 1.764800002058234, 0.9171108792204247, 0.8332333688577414, 0.6398817133659068, 0.5732000039391406, 0.5456372972161954, 0.539384396330702, 0.5250501883926613] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.764800002058234, 0.9171108792204247, 0.8332333688577414, 0.6398817133659068, 0.5732000039391406, 0.5456372972161954, 0.539384396330702, 0.5250501883926613, 0.5151056734812418] ***
*** starting iteration: 9; err: [Inf, 1.764800002058234, 0.9171108792204247, 0.8332333688577414, 0.6398817133659068, 0.5732000039391406, 0.5456372972161954, 0.539384396330702, 0.5250501883926613, 0.5151056734812418] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.764800002058234, 0.9171108792204247, 0.8332333688577414, 0.6398817133659068, 0.5732000039391406, 0.5456372972161954, 0.539384396330702, 0.5250501883926613, 0.5151056734812418, 0.5139829850960637] ***
*** starting iteration: 10; err: [Inf, 1.764800002058234, 0.9171108792204247, 0.8332333688577414, 0.6398817133659068, 0.5732000039391406, 0.5456372972161954, 0.539384396330702, 0.5250501883926613, 0.5151056734812418, 0.5139829850960637] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.764800002058234, 0.9171108792204247, 0.8332333688577414, 0.6398817133659068, 0.5732000039391406, 0.5456372972161954, 0.539384396330702, 0.5250501883926613, 0.5151056734812418, 0.5139829850960637, 0.5133116353623046] ***
*** finished computation of 3 references, err: [Inf, 1.764800002058234, 0.9171108792204247, 0.8332333688577414, 0.6398817133659068, 0.5732000039391406, 0.5456372972161954, 0.539384396330702, 0.5250501883926613, 0.5151056734812418, 0.5139829850960637, 0.5133116353623046] ***
*** center 1: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 3, 26]]
** centroid: 2, normalized-entropy: 0.47983202361612853, Tuple{Int64,Int64}[(2, 3), (3, 26)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 29, 6]]
** centroid: 3, normalized-entropy: 0.6609623351442084, Tuple{Int64,Int64}[(2, 29), (3, 6)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.6798000019201522] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6798000019201522, 0.49683525349556773] ***
*** starting iteration: 2; err: [Inf, 0.6798000019201522, 0.49683525349556773] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6798000019201522, 0.49683525349556773, 0.49683525349556773] ***
*** finished computation of 3 references, err: [Inf, 0.6798000019201522, 0.49683525349556773, 0.49683525349556773] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 34, 11]]
** centroid: 1, normalized-entropy: 0.80235344282919, Tuple{Int64,Int64}[(2, 34), (3, 11)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 2, 20]]
** centroid: 2, normalized-entropy: 0.43949698692151346, Tuple{Int64,Int64}[(2, 2), (3, 20)]
*** center 3: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9413000032223109] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9413000032223109, 0.581372388510513] ***
*** finished computation of 3 references, err: [Inf, 0.9413000032223109, 0.581372388510513] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 2]]
** centroid: 1, normalized-entropy: 0.4138168503036336, Tuple{Int64,Int64}[(2, 22), (3, 2)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 10, 35]]
** centroid: 2, normalized-entropy: 0.7642045065086204, Tuple{Int64,Int64}[(2, 10), (3, 35)]
*** center 3: selecting labels [1] (freq >= 1) [from [31, 0, 0]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.0205999978086704] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0205999978086704, 0.5366311525456251] ***
*** finished computation of 3 references, err: [Inf, 1.0205999978086704, 0.5366311525456251] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 26, 3]]
** centroid: 1, normalized-entropy: 0.47983202361612853, Tuple{Int64,Int64}[(2, 26), (3, 3)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 6, 29]]
** centroid: 2, normalized-entropy: 0.6609623351442084, Tuple{Int64,Int64}[(2, 6), (3, 29)]
*** center 3: selecting labels [1] (freq >= 1) [from [36, 0, 0]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9088999932191902] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9088999932191902, 0.5606382387096696] ***
*** finished computation of 3 references, err: [Inf, 0.9088999932191902, 0.5606382387096696] ***
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 36, 15]]
** centroid: 2, normalized-entropy: 0.8739810481273581, Tuple{Int64,Int64}[(2, 36), (3, 15)]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.2345000039914165] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.2345000039914165, 0.8184536686613625] ***
*** starting iteration: 2; err: [Inf, 1.2345000039914165, 0.8184536686613625] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.2345000039914165, 0.8184536686613625, 0.6387108125917732] ***
*** starting iteration: 3; err: [Inf, 1.2345000039914165, 0.8184536686613625, 0.6387108125917732] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.2345000039914165, 0.8184536686613625, 0.6387108125917732, 0.5789865771117805] ***
*** finished computation of 3 references, err: [Inf, 1.2345000039914165, 0.8184536686613625, 0.6387108125917732, 0.5789865771117805] ***
*** center 1: selecting labels [1] (freq >= 2) [from [31, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 31, 8]]
** centroid: 2, normalized-entropy: 0.7320666900931937, Tuple{Int64,Int64}[(2, 31), (3, 8)]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 1, 29]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.7059000054984343] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.7059000054984343, 0.6763991521179874] ***
*** starting iteration: 2; err: [Inf, 1.7059000054984343, 0.6763991521179874] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.7059000054984343, 0.6763991521179874, 0.5835343548822658] ***
*** starting iteration: 3; err: [Inf, 1.7059000054984343, 0.6763991521179874, 0.5835343548822658] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.7059000054984343, 0.6763991521179874, 0.5835343548822658, 0.5322651868810943] ***
*** finished computation of 3 references, err: [Inf, 1.7059000054984343, 0.6763991521179874, 0.5835343548822658, 0.5322651868810943] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 32, 12]]
** centroid: 1, normalized-entropy: 0.8453509366224364, Tuple{Int64,Int64}[(2, 32), (3, 12)]
*** center 2: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 20]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 3.7015000234130127] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.7015000234130127, 1.2765723015818888] ***
*** starting iteration: 2; err: [Inf, 3.7015000234130127, 1.2765723015818888] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.7015000234130127, 1.2765723015818888, 0.5313133303581928] ***
*** starting iteration: 3; err: [Inf, 3.7015000234130127, 1.2765723015818888, 0.5313133303581928] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.7015000234130127, 1.2765723015818888, 0.5313133303581928, 0.49811255478656685] ***
*** finished computation of 3 references, err: [Inf, 3.7015000234130127, 1.2765723015818888, 0.5313133303581928, 0.49811255478656685] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 35, 11]]
** centroid: 1, normalized-entropy: 0.7935912300117066, Tuple{Int64,Int64}[(2, 35), (3, 11)]
*** center 2: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 1, 20]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 3.7798867996006775] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.7798867996006775, 1.0766381769504532] ***
*** starting iteration: 2; err: [Inf, 3.7798867996006775, 1.0766381769504532] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.7798867996006775, 1.0766381769504532, 0.6146968289539568] ***
*** starting iteration: 3; err: [Inf, 3.7798867996006775, 1.0766381769504532, 0.6146968289539568] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.7798867996006775, 1.0766381769504532, 0.6146968289539568, 0.4763866731573623] ***
*** starting iteration: 4; err: [Inf, 3.7798867996006775, 1.0766381769504532, 0.6146968289539568, 0.4763866731573623] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.7798867996006775, 1.0766381769504532, 0.6146968289539568, 0.4763866731573623, 0.4309055144647882] ***
*** starting iteration: 5; err: [Inf, 3.7798867996006775, 1.0766381769504532, 0.6146968289539568, 0.4763866731573623, 0.4309055144647882] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.7798867996006775, 1.0766381769504532, 0.6146968289539568, 0.4763866731573623, 0.4309055144647882, 0.40643931276700507] ***
*** starting iteration: 6; err: [Inf, 3.7798867996006775, 1.0766381769504532, 0.6146968289539568, 0.4763866731573623, 0.4309055144647882, 0.40643931276700507] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.7798867996006775, 1.0766381769504532, 0.6146968289539568, 0.4763866731573623, 0.4309055144647882, 0.40643931276700507, 0.3942684044263414] ***
*** starting iteration: 7; err: [Inf, 3.7798867996006775, 1.0766381769504532, 0.6146968289539568, 0.4763866731573623, 0.4309055144647882, 0.40643931276700507, 0.3942684044263414] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.7798867996006775, 1.0766381769504532, 0.6146968289539568, 0.4763866731573623, 0.4309055144647882, 0.40643931276700507, 0.3942684044263414, 0.3907516455784665] ***
*** starting iteration: 8; err: [Inf, 3.7798867996006775, 1.0766381769504532, 0.6146968289539568, 0.4763866731573623, 0.4309055144647882, 0.40643931276700507, 0.3942684044263414, 0.3907516455784665] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.7798867996006775, 1.0766381769504532, 0.6146968289539568, 0.4763866731573623, 0.4309055144647882, 0.40643931276700507, 0.3942684044263414, 0.3907516455784665, 0.388086528423856] ***
*** starting iteration: 9; err: [Inf, 3.7798867996006775, 1.0766381769504532, 0.6146968289539568, 0.4763866731573623, 0.4309055144647882, 0.40643931276700507, 0.3942684044263414, 0.3907516455784665, 0.388086528423856] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.7798867996006775, 1.0766381769504532, 0.6146968289539568, 0.4763866731573623, 0.4309055144647882, 0.40643931276700507, 0.3942684044263414, 0.3907516455784665, 0.388086528423856, 0.388086528423856] ***
*** finished computation of 3 references, err: [Inf, 3.7798867996006775, 1.0766381769504532, 0.6146968289539568, 0.4763866731573623, 0.4309055144647882, 0.40643931276700507, 0.3942684044263414, 0.3907516455784665, 0.388086528423856, 0.388086528423856] ***
*** center 1: selecting labels [1] (freq >= 2) [from [31, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 29, 6]]
** centroid: 2, normalized-entropy: 0.6609623351442084, Tuple{Int64,Int64}[(2, 29), (3, 6)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 3, 31]]
** centroid: 3, normalized-entropy: 0.43055186701043935, Tuple{Int64,Int64}[(2, 3), (3, 31)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8508142302856128] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8508142302856128, 0.5981257166280487] ***
*** starting iteration: 2; err: [Inf, 0.8508142302856128, 0.5981257166280487] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8508142302856128, 0.5981257166280487, 0.5971008977995463] ***
*** starting iteration: 3; err: [Inf, 0.8508142302856128, 0.5981257166280487, 0.5971008977995463] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8508142302856128, 0.5981257166280487, 0.5971008977995463, 0.5971008977995463] ***
*** finished computation of 3 references, err: [Inf, 0.8508142302856128, 0.5981257166280487, 0.5971008977995463, 0.5971008977995463] ***
*** center 1: selecting labels [1] (freq >= 2) [from [11, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [25, 1, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 31, 32]]
** centroid: 3, normalized-entropy: 0.9998182469603427, Tuple{Int64,Int64}[(2, 31), (3, 32)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 3.578316366465963] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.578316366465963, 1.5460750310696927] ***
*** starting iteration: 2; err: [Inf, 3.578316366465963, 1.5460750310696927] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.578316366465963, 1.5460750310696927, 0.6550389036303622] ***
*** starting iteration: 3; err: [Inf, 3.578316366465963, 1.5460750310696927, 0.6550389036303622] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.578316366465963, 1.5460750310696927, 0.6550389036303622, 0.36935943968059676] ***
*** starting iteration: 4; err: [Inf, 3.578316366465963, 1.5460750310696927, 0.6550389036303622, 0.36935943968059676] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.578316366465963, 1.5460750310696927, 0.6550389036303622, 0.36935943968059676, 0.3530151067283165] ***
*** starting iteration: 5; err: [Inf, 3.578316366465963, 1.5460750310696927, 0.6550389036303622, 0.36935943968059676, 0.3530151067283165] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.578316366465963, 1.5460750310696927, 0.6550389036303622, 0.36935943968059676, 0.3530151067283165, 0.3523167652126908] ***
*** finished computation of 3 references, err: [Inf, 3.578316366465963, 1.5460750310696927, 0.6550389036303622, 0.36935943968059676, 0.3530151067283165, 0.3523167652126908] ***
*** center 1: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 20]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 36, 11]]
** centroid: 3, normalized-entropy: 0.7849920887641585, Tuple{Int64,Int64}[(2, 36), (3, 11)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.6104840676281319] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6104840676281319, 0.4000853733131943] ***
*** finished computation of 3 references, err: [Inf, 0.6104840676281319, 0.4000853733131943] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 12, 36]]
** centroid: 1, normalized-entropy: 0.8112781244591328, Tuple{Int64,Int64}[(2, 12), (3, 36)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 20, 1]]
*** center 3: selecting labels [1] (freq >= 2) [from [31, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.6445118957205099] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6445118957205099, 0.39432970565569525] ***
*** finished computation of 3 references, err: [Inf, 0.6445118957205099, 0.39432970565569525] ***
*** center 1: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 19, 1]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 13, 31]]
** centroid: 3, normalized-entropy: 0.8756633923230399, Tuple{Int64,Int64}[(2, 13), (3, 31)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.1349614733519322] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1349614733519322, 0.4090603677706058] ***
*** finished computation of 3 references, err: [Inf, 1.1349614733519322, 0.4090603677706058] ***
*** center 1: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 12, 31]]
** centroid: 2, normalized-entropy: 0.8541802051521676, Tuple{Int64,Int64}[(2, 12), (3, 31)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 24, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.394375264517581] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.394375264517581, 0.2206509969679145] ***
*** starting iteration: 2; err: [Inf, 1.394375264517581, 0.2206509969679145] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.394375264517581, 0.2206509969679145, 0.1922011070223082] ***
*** starting iteration: 3; err: [Inf, 1.394375264517581, 0.2206509969679145, 0.1922011070223082] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.394375264517581, 0.2206509969679145, 0.1922011070223082, 0.18962839527771685] ***
*** starting iteration: 4; err: [Inf, 1.394375264517581, 0.2206509969679145, 0.1922011070223082, 0.18962839527771685] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.394375264517581, 0.2206509969679145, 0.1922011070223082, 0.18962839527771685, 0.18574829185144254] ***
*** starting iteration: 5; err: [Inf, 1.394375264517581, 0.2206509969679145, 0.1922011070223082, 0.18962839527771685, 0.18574829185144254] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.394375264517581, 0.2206509969679145, 0.1922011070223082, 0.18962839527771685, 0.18574829185144254, 0.18301947517249506] ***
*** starting iteration: 6; err: [Inf, 1.394375264517581, 0.2206509969679145, 0.1922011070223082, 0.18962839527771685, 0.18574829185144254, 0.18301947517249506] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.394375264517581, 0.2206509969679145, 0.1922011070223082, 0.18962839527771685, 0.18574829185144254, 0.18301947517249506, 0.1826881704695265] ***
*** finished computation of 7 references, err: [Inf, 1.394375264517581, 0.2206509969679145, 0.1922011070223082, 0.18962839527771685, 0.18574829185144254, 0.18301947517249506, 0.1826881704695265] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 15, 1]]
** centroid: 1, normalized-entropy: 0.3372900666170139, Tuple{Int64,Int64}[(2, 15), (3, 1)]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 10, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [31, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 6, 6]]
** centroid: 6, normalized-entropy: 1.0, Tuple{Int64,Int64}[(2, 6), (3, 6)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 1, 13]]
** centroid: 7, normalized-entropy: 0.3712323266408756, Tuple{Int64,Int64}[(2, 1), (3, 13)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4210845896182766] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4210845896182766, 0.29039258636133636] ***
*** starting iteration: 2; err: [Inf, 0.4210845896182766, 0.29039258636133636] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4210845896182766, 0.29039258636133636, 0.2833655937059214] ***
*** starting iteration: 3; err: [Inf, 0.4210845896182766, 0.29039258636133636, 0.2833655937059214] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4210845896182766, 0.29039258636133636, 0.2833655937059214, 0.2823840206340692] ***
*** finished computation of 7 references, err: [Inf, 0.4210845896182766, 0.29039258636133636, 0.2833655937059214, 0.2823840206340692] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 3, 25]]
** centroid: 1, normalized-entropy: 0.4912373418243334, Tuple{Int64,Int64}[(2, 3), (3, 25)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 29, 7]]
** centroid: 2, normalized-entropy: 0.710676853856123, Tuple{Int64,Int64}[(2, 29), (3, 7)]
*** center 3: selecting labels [1] (freq >= 1) [from [6, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [5, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [2, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [12, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.34306641148537] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34306641148537, 0.18075596262342547] ***
*** starting iteration: 2; err: [Inf, 0.34306641148537, 0.18075596262342547] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34306641148537, 0.18075596262342547, 0.167162825102541] ***
*** starting iteration: 3; err: [Inf, 0.34306641148537, 0.18075596262342547, 0.167162825102541] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34306641148537, 0.18075596262342547, 0.167162825102541, 0.1654775117977341] ***
*** starting iteration: 4; err: [Inf, 0.34306641148537, 0.18075596262342547, 0.167162825102541, 0.1654775117977341] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34306641148537, 0.18075596262342547, 0.167162825102541, 0.1654775117977341, 0.1651320431207869] ***
*** finished computation of 7 references, err: [Inf, 0.34306641148537, 0.18075596262342547, 0.167162825102541, 0.1654775117977341, 0.1651320431207869] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 13, 10]]
** centroid: 2, normalized-entropy: 0.9876925088958032, Tuple{Int64,Int64}[(2, 13), (3, 10)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 2, 14]]
** centroid: 3, normalized-entropy: 0.5435644431995963, Tuple{Int64,Int64}[(2, 2), (3, 14)]
*** center 4: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [19, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 7, normalized-entropy: 0.8112781244591328, Tuple{Int64,Int64}[(2, 3), (3, 1)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 2.5031000390644405] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.5031000390644405, 1.0245198245276435] ***
*** starting iteration: 2; err: [Inf, 2.5031000390644405, 1.0245198245276435] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.5031000390644405, 1.0245198245276435, 0.7435909763054167] ***
*** starting iteration: 3; err: [Inf, 2.5031000390644405, 1.0245198245276435, 0.7435909763054167] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.5031000390644405, 1.0245198245276435, 0.7435909763054167, 0.6676056418444404] ***
*** starting iteration: 4; err: [Inf, 2.5031000390644405, 1.0245198245276435, 0.7435909763054167, 0.6676056418444404] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.5031000390644405, 1.0245198245276435, 0.7435909763054167, 0.6676056418444404, 0.5964203384501254] ***
*** starting iteration: 5; err: [Inf, 2.5031000390644405, 1.0245198245276435, 0.7435909763054167, 0.6676056418444404, 0.5964203384501254] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.5031000390644405, 1.0245198245276435, 0.7435909763054167, 0.6676056418444404, 0.5964203384501254, 0.5641046565183436] ***
*** starting iteration: 6; err: [Inf, 2.5031000390644405, 1.0245198245276435, 0.7435909763054167, 0.6676056418444404, 0.5964203384501254, 0.5641046565183436] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.5031000390644405, 1.0245198245276435, 0.7435909763054167, 0.6676056418444404, 0.5964203384501254, 0.5641046565183436, 0.5612328095214536] ***
*** starting iteration: 7; err: [Inf, 2.5031000390644405, 1.0245198245276435, 0.7435909763054167, 0.6676056418444404, 0.5964203384501254, 0.5641046565183436, 0.5612328095214536] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.5031000390644405, 1.0245198245276435, 0.7435909763054167, 0.6676056418444404, 0.5964203384501254, 0.5641046565183436, 0.5612328095214536, 0.5602972335354364] ***
*** finished computation of 3 references, err: [Inf, 2.5031000390644405, 1.0245198245276435, 0.7435909763054167, 0.6676056418444404, 0.5964203384501254, 0.5641046565183436, 0.5612328095214536, 0.5602972335354364] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 30, 7]]
** centroid: 1, normalized-entropy: 0.699772221773307, Tuple{Int64,Int64}[(2, 30), (3, 7)]
*** center 2: selecting labels [1] (freq >= 2) [from [31, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 2, 30]]
** centroid: 3, normalized-entropy: 0.3372900666170139, Tuple{Int64,Int64}[(2, 2), (3, 30)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 3.758299979957652] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.758299979957652, 1.3651786737768907] ***
*** starting iteration: 2; err: [Inf, 3.758299979957652, 1.3651786737768907] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.758299979957652, 1.3651786737768907, 0.6407897645215545] ***
*** starting iteration: 3; err: [Inf, 3.758299979957652, 1.3651786737768907, 0.6407897645215545] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.758299979957652, 1.3651786737768907, 0.6407897645215545, 0.5300939029720207] ***
*** starting iteration: 4; err: [Inf, 3.758299979957652, 1.3651786737768907, 0.6407897645215545, 0.5300939029720207] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.758299979957652, 1.3651786737768907, 0.6407897645215545, 0.5300939029720207, 0.5133717135332694] ***
*** starting iteration: 5; err: [Inf, 3.758299979957652, 1.3651786737768907, 0.6407897645215545, 0.5300939029720207, 0.5133717135332694] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.758299979957652, 1.3651786737768907, 0.6407897645215545, 0.5300939029720207, 0.5133717135332694, 0.5118444637421358] ***
*** starting iteration: 6; err: [Inf, 3.758299979957652, 1.3651786737768907, 0.6407897645215545, 0.5300939029720207, 0.5133717135332694, 0.5118444637421358] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.758299979957652, 1.3651786737768907, 0.6407897645215545, 0.5300939029720207, 0.5133717135332694, 0.5118444637421358, 0.5079685132875761] ***
*** starting iteration: 7; err: [Inf, 3.758299979957652, 1.3651786737768907, 0.6407897645215545, 0.5300939029720207, 0.5133717135332694, 0.5118444637421358, 0.5079685132875761] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.758299979957652, 1.3651786737768907, 0.6407897645215545, 0.5300939029720207, 0.5133717135332694, 0.5118444637421358, 0.5079685132875761, 0.507170004955143] ***
*** finished computation of 3 references, err: [Inf, 3.758299979957652, 1.3651786737768907, 0.6407897645215545, 0.5300939029720207, 0.5133717135332694, 0.5118444637421358, 0.5079685132875761, 0.507170004955143] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 30, 10]]
** centroid: 1, normalized-entropy: 0.8112781244591328, Tuple{Int64,Int64}[(2, 30), (3, 10)]
*** center 2: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 2, 22]]
** centroid: 3, normalized-entropy: 0.4138168503036336, Tuple{Int64,Int64}[(2, 2), (3, 22)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 3.7996000271591237] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.7996000271591237, 1.4184499138729152] ***
*** starting iteration: 2; err: [Inf, 3.7996000271591237, 1.4184499138729152] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.7996000271591237, 1.4184499138729152, 0.5599320088840285] ***
*** starting iteration: 3; err: [Inf, 3.7996000271591237, 1.4184499138729152, 0.5599320088840285] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.7996000271591237, 1.4184499138729152, 0.5599320088840285, 0.49850862599191353] ***
*** starting iteration: 4; err: [Inf, 3.7996000271591237, 1.4184499138729152, 0.5599320088840285, 0.49850862599191353] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.7996000271591237, 1.4184499138729152, 0.5599320088840285, 0.49850862599191353, 0.49634526519621075] ***
*** starting iteration: 5; err: [Inf, 3.7996000271591237, 1.4184499138729152, 0.5599320088840285, 0.49850862599191353, 0.49634526519621075] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.7996000271591237, 1.4184499138729152, 0.5599320088840285, 0.49850862599191353, 0.49634526519621075, 0.49634526519621075] ***
*** finished computation of 3 references, err: [Inf, 3.7996000271591237, 1.4184499138729152, 0.5599320088840285, 0.49850862599191353, 0.49634526519621075, 0.49634526519621075] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 35, 11]]
** centroid: 1, normalized-entropy: 0.7935912300117066, Tuple{Int64,Int64}[(2, 35), (3, 11)]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 1, 20]]
*** center 3: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.7248000056214792] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7248000056214792, 0.34584718521892077] ***
*** starting iteration: 2; err: [Inf, 0.7248000056214792, 0.34584718521892077] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7248000056214792, 0.34584718521892077, 0.2968235621522302] ***
*** starting iteration: 3; err: [Inf, 0.7248000056214792, 0.34584718521892077, 0.2968235621522302] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7248000056214792, 0.34584718521892077, 0.2968235621522302, 0.27478921592145306] ***
*** finished computation of 7 references, err: [Inf, 0.7248000056214792, 0.34584718521892077, 0.2968235621522302, 0.27478921592145306] ***
*** center 1: selecting labels [1] (freq >= 2) [from [17, 0, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 19, 1]]
*** center 3: selecting labels [1] (freq >= 2) [from [14, 0, 0]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 11]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 6, 7]]
** centroid: 5, normalized-entropy: 0.9957274520849256, Tuple{Int64,Int64}[(2, 6), (3, 7)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 7, 8]]
** centroid: 6, normalized-entropy: 0.9967916319816367, Tuple{Int64,Int64}[(2, 7), (3, 8)]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 10]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5946999969276153] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5946999969276153, 0.2798718154338132] ***
*** starting iteration: 2; err: [Inf, 0.5946999969276153, 0.2798718154338132] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5946999969276153, 0.2798718154338132, 0.2746823019289187] ***
*** starting iteration: 3; err: [Inf, 0.5946999969276153, 0.2798718154338132, 0.2746823019289187] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5946999969276153, 0.2798718154338132, 0.2746823019289187, 0.27239622896610244] ***
*** finished computation of 7 references, err: [Inf, 0.5946999969276153, 0.2798718154338132, 0.2746823019289187, 0.27239622896610244] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 18, 1]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 14, 1]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
*** center 4: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 3]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 15]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 5]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5670999987308086] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5670999987308086, 0.2934605767085272] ***
*** starting iteration: 2; err: [Inf, 0.5670999987308086, 0.2934605767085272] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5670999987308086, 0.2934605767085272, 0.24964321273506107] ***
*** starting iteration: 3; err: [Inf, 0.5670999987308086, 0.2934605767085272, 0.24964321273506107] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5670999987308086, 0.2934605767085272, 0.24964321273506107, 0.24215938122489244] ***
*** finished computation of 7 references, err: [Inf, 0.5670999987308086, 0.2934605767085272, 0.24964321273506107, 0.24215938122489244] ***
*** center 1: selecting labels [1] (freq >= 2) [from [20, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 15, 11]]
** centroid: 2, normalized-entropy: 0.9828586897127057, Tuple{Int64,Int64}[(2, 15), (3, 11)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 19, 0]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 2]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 2, 12]]
** centroid: 5, normalized-entropy: 0.5916727785823274, Tuple{Int64,Int64}[(2, 2), (3, 12)]
*** center 6: selecting labels [1] (freq >= 2) [from [13, 0, 0]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 6]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 1.5935487754904838] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.5935487754904838, 0.3515330460997065] ***
*** finished computation of 3 references, err: [Inf, 1.5935487754904838, 0.3515330460997065] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 29, 8]]
** centroid: 1, normalized-entropy: 0.7531979910695015, Tuple{Int64,Int64}[(2, 29), (3, 8)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 3, 24]]
** centroid: 2, normalized-entropy: 0.5032583347756457, Tuple{Int64,Int64}[(2, 3), (3, 24)]
*** center 3: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.7143900827226224] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7143900827226224, 0.3974675289290204] ***
*** finished computation of 3 references, err: [Inf, 0.7143900827226224, 0.3974675289290204] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 12, 31]]
** centroid: 1, normalized-entropy: 0.8541802051521676, Tuple{Int64,Int64}[(2, 12), (3, 31)]
*** center 2: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 24, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.085300003253903] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.085300003253903, 0.5961785143508197] ***
*** starting iteration: 2; err: [Inf, 1.085300003253903, 0.5961785143508197] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.085300003253903, 0.5961785143508197, 0.5804009442752153] ***
*** starting iteration: 3; err: [Inf, 1.085300003253903, 0.5961785143508197, 0.5804009442752153] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.085300003253903, 0.5961785143508197, 0.5804009442752153, 0.5771697183678789] ***
*** finished computation of 3 references, err: [Inf, 1.085300003253903, 0.5961785143508197, 0.5804009442752153, 0.5771697183678789] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 9, 36]]
** centroid: 1, normalized-entropy: 0.7219280948873623, Tuple{Int64,Int64}[(2, 9), (3, 36)]
*** center 2: selecting labels [1] (freq >= 2) [from [31, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 23, 1]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 2.4450999894689547] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.4450999894689547, 0.5079650264845236] ***
*** starting iteration: 2; err: [Inf, 2.4450999894689547, 0.5079650264845236] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.4450999894689547, 0.5079650264845236, 0.507170004955143] ***
*** finished computation of 3 references, err: [Inf, 2.4450999894689547, 0.5079650264845236, 0.507170004955143] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 30, 10]]
** centroid: 1, normalized-entropy: 0.8112781244591328, Tuple{Int64,Int64}[(2, 30), (3, 10)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 2, 22]]
** centroid: 2, normalized-entropy: 0.4138168503036336, Tuple{Int64,Int64}[(2, 2), (3, 22)]
*** center 3: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 2.382699982595528] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.382699982595528, 0.49760224960491056] ***
*** starting iteration: 2; err: [Inf, 2.382699982595528, 0.49760224960491056] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.382699982595528, 0.49760224960491056, 0.49683525349556773] ***
*** finished computation of 3 references, err: [Inf, 2.382699982595528, 0.49760224960491056, 0.49683525349556773] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 34, 11]]
** centroid: 1, normalized-entropy: 0.80235344282919, Tuple{Int64,Int64}[(2, 34), (3, 11)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 2, 20]]
** centroid: 2, normalized-entropy: 0.43949698692151346, Tuple{Int64,Int64}[(2, 2), (3, 20)]
*** center 3: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4648472975581892] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4648472975581892, 0.17327202925135] ***
*** finished computation of 7 references, err: [Inf, 0.4648472975581892, 0.17327202925135] ***
*** center 1: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 11, 2]]
** centroid: 3, normalized-entropy: 0.6193821946787638, Tuple{Int64,Int64}[(2, 11), (3, 2)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 13, 6]]
** centroid: 4, normalized-entropy: 0.8997437586982626, Tuple{Int64,Int64}[(2, 13), (3, 6)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 8, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
finished with 7 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 16)
[0.96, 0.96, 0.9533333333333333, 0.94, 0.94, 0.94, 0.9333333333333332, 0.9266666666666666, 0.9199999999999999, 0.9199999999999999, 0.9133333333333334, 0.9133333333333332, 0.9066666666666667, 0.9, 0.8866666666666667, 0.8733333333333334]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 10, 1.0, :rand, 0.3, 1) => 0.96
finished with 17
iteration 2 finished
*** starting iteration: 1; err: [Inf, 5.3947364539208005] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 5.3947364539208005, 1.016433175594282] ***
*** finished computation of 3 references, err: [Inf, 5.3947364539208005, 1.016433175594282] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 14]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 21, 23]]
** centroid: 2, normalized-entropy: 0.9985090989176322, Tuple{Int64,Int64}[(2, 21), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [31, 11, 0]]
** centroid: 3, normalized-entropy: 0.8296071030882032, Tuple{Int64,Int64}[(1, 31), (2, 11)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 4.155442099170639] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 4.155442099170639, 1.3352494662077685] ***
*** finished computation of 3 references, err: [Inf, 4.155442099170639, 1.3352494662077685] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [36, 14, 0]]
** centroid: 1, normalized-entropy: 0.8554508105601307, Tuple{Int64,Int64}[(1, 36), (2, 14)]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 8]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 18, 24]]
** centroid: 3, normalized-entropy: 0.9852281360342514, Tuple{Int64,Int64}[(2, 18), (3, 24)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.5226610009896995] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5226610009896995, 0.40605352201535033] ***
*** finished computation of 3 references, err: [Inf, 0.5226610009896995, 0.40605352201535033] ***
*** center 1: selecting labels [1] (freq >= 2) [from [33, 1, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 35, 19]]
** centroid: 2, normalized-entropy: 0.9357110512652843, Tuple{Int64,Int64}[(2, 35), (3, 19)]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 12]]
finished with 4 centroids; started with 3
generating 4 configurations using top 4 configurations, starting with 17)
[0.96, 0.96, 0.9533333333333333, 0.94, 0.94, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9266666666666666, 0.9199999999999999, 0.9199999999999999, 0.9133333333333334, 0.9133333333333332, 0.9066666666666667, 0.9, 0.8866666666666667, 0.8733333333333334]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 10, 1.0, :rand, 0.3, 1) => 0.96
finished with 19
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.6129600284434583] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6129600284434583, 0.26319980395440457] ***
*** starting iteration: 2; err: [Inf, 0.6129600284434583, 0.26319980395440457] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6129600284434583, 0.26319980395440457, 0.2218975948874093] ***
*** starting iteration: 3; err: [Inf, 0.6129600284434583, 0.26319980395440457, 0.2218975948874093] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6129600284434583, 0.26319980395440457, 0.2218975948874093, 0.2187608404044944] ***
*** finished computation of 7 references, err: [Inf, 0.6129600284434583, 0.26319980395440457, 0.2218975948874093, 0.2187608404044944] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 16, 1]]
** centroid: 1, normalized-entropy: 0.32275695889739825, Tuple{Int64,Int64}[(2, 16), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 26]]
*** center 3: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 10, 1]]
** centroid: 4, normalized-entropy: 0.43949698692151346, Tuple{Int64,Int64}[(2, 10), (3, 1)]
*** center 5: selecting labels [1] (freq >= 1) [from [12, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 6, 9]]
** centroid: 6, normalized-entropy: 0.9709505944546688, Tuple{Int64,Int64}[(2, 6), (3, 9)]
*** center 7: selecting labels [1] (freq >= 1) [from [12, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4737590160476206] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4737590160476206, 0.2695032299895919] ***
*** starting iteration: 2; err: [Inf, 0.4737590160476206, 0.2695032299895919] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4737590160476206, 0.2695032299895919, 0.2425028001623633] ***
*** starting iteration: 3; err: [Inf, 0.4737590160476206, 0.2695032299895919, 0.2425028001623633] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4737590160476206, 0.2695032299895919, 0.2425028001623633, 0.2318319603115109] ***
*** finished computation of 7 references, err: [Inf, 0.4737590160476206, 0.2695032299895919, 0.2425028001623633, 0.2318319603115109] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 2, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 3, normalized-entropy: 0.9182958340544894, Tuple{Int64,Int64}[(2, 2), (3, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 10, 11]]
** centroid: 4, normalized-entropy: 0.998363672593813, Tuple{Int64,Int64}[(2, 10), (3, 11)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [36, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 12, 1]]
** centroid: 7, normalized-entropy: 0.3912435636292556, Tuple{Int64,Int64}[(2, 12), (3, 1)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4720182530510793] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4720182530510793, 0.2415350715566826] ***
*** starting iteration: 2; err: [Inf, 0.4720182530510793, 0.2415350715566826] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4720182530510793, 0.2415350715566826, 0.21242647897391836] ***
*** starting iteration: 3; err: [Inf, 0.4720182530510793, 0.2415350715566826, 0.21242647897391836] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4720182530510793, 0.2415350715566826, 0.21242647897391836, 0.20756500733175154] ***
*** finished computation of 7 references, err: [Inf, 0.4720182530510793, 0.2415350715566826, 0.21242647897391836, 0.20756500733175154] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 13, 2]]
** centroid: 1, normalized-entropy: 0.5665095065529052, Tuple{Int64,Int64}[(2, 13), (3, 2)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 15]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 9, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 1, 14]]
** centroid: 4, normalized-entropy: 0.3533593350214213, Tuple{Int64,Int64}[(2, 1), (3, 14)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 2, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4677000026324727] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4677000026324727, 0.29083360553811005] ***
*** starting iteration: 2; err: [Inf, 0.4677000026324727, 0.29083360553811005] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4677000026324727, 0.29083360553811005, 0.2675112663846158] ***
*** starting iteration: 3; err: [Inf, 0.4677000026324727, 0.29083360553811005, 0.2675112663846158] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4677000026324727, 0.29083360553811005, 0.2675112663846158, 0.26155208120642115] ***
*** finished computation of 7 references, err: [Inf, 0.4677000026324727, 0.29083360553811005, 0.2675112663846158, 0.26155208120642115] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 4, 1]]
** centroid: 3, normalized-entropy: 0.7219280948873623, Tuple{Int64,Int64}[(2, 4), (3, 1)]
*** center 4: selecting labels [1] (freq >= 1) [from [31, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 14, 4]]
** centroid: 5, normalized-entropy: 0.7642045065086204, Tuple{Int64,Int64}[(2, 14), (3, 4)]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 10, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.8022999837898019] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8022999837898019, 0.3599844782223704] ***
*** starting iteration: 2; err: [Inf, 0.8022999837898019, 0.3599844782223704] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8022999837898019, 0.3599844782223704, 0.3115081289674264] ***
*** starting iteration: 3; err: [Inf, 0.8022999837898019, 0.3599844782223704, 0.3115081289674264] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8022999837898019, 0.3599844782223704, 0.3115081289674264, 0.28323099676663854] ***
*** finished computation of 7 references, err: [Inf, 0.8022999837898019, 0.3599844782223704, 0.3115081289674264, 0.28323099676663854] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 19, 6]]
** centroid: 1, normalized-entropy: 0.7950402793845225, Tuple{Int64,Int64}[(2, 19), (3, 6)]
*** center 2: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [6, 0, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 5]]
*** center 6: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.40630000401850397] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.40630000401850397, 0.27119911667863505] ***
*** starting iteration: 2; err: [Inf, 0.40630000401850397, 0.27119911667863505] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.40630000401850397, 0.27119911667863505, 0.2592374639112187] ***
*** starting iteration: 3; err: [Inf, 0.40630000401850397, 0.27119911667863505, 0.2592374639112187] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.40630000401850397, 0.27119911667863505, 0.2592374639112187, 0.2536351535764794] ***
*** finished computation of 7 references, err: [Inf, 0.40630000401850397, 0.27119911667863505, 0.2592374639112187, 0.2536351535764794] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 4, normalized-entropy: 0.8112781244591328, Tuple{Int64,Int64}[(2, 3), (3, 1)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 1, 15]]
** centroid: 5, normalized-entropy: 0.3372900666170139, Tuple{Int64,Int64}[(2, 1), (3, 15)]
*** center 6: selecting labels [1] (freq >= 1) [from [19, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 15]]
finished with 8 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 19)
[0.96, 0.96, 0.96, 0.9533333333333333, 0.94, 0.94, 0.94, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9266666666666666, 0.9199999999999999, 0.9199999999999999, 0.9133333333333334, 0.9133333333333332, 0.9066666666666667, 0.9, 0.8866666666666667, 0.8733333333333334]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 10, 1.0, :rand, 0.3, 1) => 0.96
finished with 20
iteration 4 finished
*** starting iteration: 1; err: [Inf, 1.8168718841902176] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.8168718841902176, 0.361170326852844] ***
*** starting iteration: 2; err: [Inf, 1.8168718841902176, 0.361170326852844] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.8168718841902176, 0.361170326852844, 0.2053177182830948] ***
*** starting iteration: 3; err: [Inf, 1.8168718841902176, 0.361170326852844, 0.2053177182830948] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.8168718841902176, 0.361170326852844, 0.2053177182830948, 0.19573138534815915] ***
*** finished computation of 7 references, err: [Inf, 1.8168718841902176, 0.361170326852844, 0.2053177182830948, 0.19573138534815915] ***
*** center 1: selecting labels [1] (freq >= 2) [from [31, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 20]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 18, 1]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 14, 6]]
** centroid: 4, normalized-entropy: 0.8812908992306927, Tuple{Int64,Int64}[(2, 14), (3, 6)]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 5]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 2]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 3]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.375668412135567] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.375668412135567, 0.2143771091419051] ***
*** starting iteration: 2; err: [Inf, 0.375668412135567, 0.2143771091419051] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.375668412135567, 0.2143771091419051, 0.19450360063329597] ***
*** starting iteration: 3; err: [Inf, 0.375668412135567, 0.2143771091419051, 0.19450360063329597] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.375668412135567, 0.2143771091419051, 0.19450360063329597, 0.1877898525333074] ***
*** finished computation of 7 references, err: [Inf, 0.375668412135567, 0.2143771091419051, 0.19450360063329597, 0.1877898525333074] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 8, 1]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 10, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 13, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 1, 16]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 6]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 9]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4078558419532865] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4078558419532865, 0.2426449995309079] ***
*** starting iteration: 2; err: [Inf, 0.4078558419532865, 0.2426449995309079] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4078558419532865, 0.2426449995309079, 0.22099893359173073] ***
*** starting iteration: 3; err: [Inf, 0.4078558419532865, 0.2426449995309079, 0.22099893359173073] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4078558419532865, 0.2426449995309079, 0.22099893359173073, 0.18982637240842754] ***
*** finished computation of 7 references, err: [Inf, 0.4078558419532865, 0.2426449995309079, 0.22099893359173073, 0.18982637240842754] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 11, 11]]
** centroid: 1, normalized-entropy: 1.0, Tuple{Int64,Int64}[(2, 11), (3, 11)]
*** center 2: selecting labels [1] (freq >= 2) [from [16, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [17, 0, 0]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 11]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 25, 1]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 2]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 6]]
finished with 8 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 20)
[0.9666666666666667, 0.96, 0.96, 0.96, 0.9533333333333333, 0.94, 0.94, 0.94, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9266666666666666, 0.9199999999999999, 0.9199999999999999, 0.9133333333333334, 0.9133333333333332, 0.9066666666666667, 0.9, 0.8866666666666667, 0.8733333333333334]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :dnet, 0.3, 2) => 0.9666666666666667
finished with 21
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.7005999990204043] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7005999990204043, 0.35184236128525226] ***
*** starting iteration: 2; err: [Inf, 0.7005999990204043, 0.35184236128525226] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7005999990204043, 0.35184236128525226, 0.2635205957927248] ***
*** starting iteration: 3; err: [Inf, 0.7005999990204043, 0.35184236128525226, 0.2635205957927248] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7005999990204043, 0.35184236128525226, 0.2635205957927248, 0.25654786824157816] ***
*** starting iteration: 4; err: [Inf, 0.7005999990204043, 0.35184236128525226, 0.2635205957927248, 0.25654786824157816] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7005999990204043, 0.35184236128525226, 0.2635205957927248, 0.25654786824157816, 0.25654786824157816] ***
*** finished computation of 7 references, err: [Inf, 0.7005999990204043, 0.35184236128525226, 0.2635205957927248, 0.25654786824157816, 0.25654786824157816] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [31, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 14, 7]]
** centroid: 6, normalized-entropy: 0.9182958340544894, Tuple{Int64,Int64}[(2, 14), (3, 7)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 7, normalized-entropy: 0.9182958340544894, Tuple{Int64,Int64}[(2, 2), (3, 1)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4322000111559701] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4322000111559701, 0.2626744691294126] ***
*** starting iteration: 2; err: [Inf, 0.4322000111559701, 0.2626744691294126] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4322000111559701, 0.2626744691294126, 0.25268818261765597] ***
*** starting iteration: 3; err: [Inf, 0.4322000111559701, 0.2626744691294126, 0.25268818261765597] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4322000111559701, 0.2626744691294126, 0.25268818261765597, 0.24184562498887377] ***
*** starting iteration: 4; err: [Inf, 0.4322000111559701, 0.2626744691294126, 0.25268818261765597, 0.24184562498887377] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4322000111559701, 0.2626744691294126, 0.25268818261765597, 0.24184562498887377, 0.2412744692677191] ***
*** finished computation of 7 references, err: [Inf, 0.4322000111559701, 0.2626744691294126, 0.25268818261765597, 0.24184562498887377, 0.2412744692677191] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 7, 1]]
** centroid: 1, normalized-entropy: 0.5435644431995963, Tuple{Int64,Int64}[(2, 7), (3, 1)]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 14]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 8, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [12, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 2, 17]]
** centroid: 6, normalized-entropy: 0.48546076074591343, Tuple{Int64,Int64}[(2, 2), (3, 17)]
*** center 7: selecting labels [1] (freq >= 1) [from [24, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5049000012081513] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5049000012081513, 0.2994366720215928] ***
*** starting iteration: 2; err: [Inf, 0.5049000012081513, 0.2994366720215928] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5049000012081513, 0.2994366720215928, 0.259534559724631] ***
*** starting iteration: 3; err: [Inf, 0.5049000012081513, 0.2994366720215928, 0.259534559724631] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5049000012081513, 0.2994366720215928, 0.259534559724631, 0.23595789779384269] ***
*** starting iteration: 4; err: [Inf, 0.5049000012081513, 0.2994366720215928, 0.259534559724631, 0.23595789779384269] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5049000012081513, 0.2994366720215928, 0.259534559724631, 0.23595789779384269, 0.2272682370778375] ***
*** starting iteration: 5; err: [Inf, 0.5049000012081513, 0.2994366720215928, 0.259534559724631, 0.23595789779384269, 0.2272682370778375] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5049000012081513, 0.2994366720215928, 0.259534559724631, 0.23595789779384269, 0.2272682370778375, 0.22349521791241778] ***
*** starting iteration: 6; err: [Inf, 0.5049000012081513, 0.2994366720215928, 0.259534559724631, 0.23595789779384269, 0.2272682370778375, 0.22349521791241778] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5049000012081513, 0.2994366720215928, 0.259534559724631, 0.23595789779384269, 0.2272682370778375, 0.22349521791241778, 0.22164532007738372] ***
*** starting iteration: 7; err: [Inf, 0.5049000012081513, 0.2994366720215928, 0.259534559724631, 0.23595789779384269, 0.2272682370778375, 0.22349521791241778, 0.22164532007738372] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5049000012081513, 0.2994366720215928, 0.259534559724631, 0.23595789779384269, 0.2272682370778375, 0.22349521791241778, 0.22164532007738372, 0.22164532007738372] ***
*** finished computation of 7 references, err: [Inf, 0.5049000012081513, 0.2994366720215928, 0.259534559724631, 0.23595789779384269, 0.2272682370778375, 0.22349521791241778, 0.22164532007738372, 0.22164532007738372] ***
*** center 1: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 15, 11]]
** centroid: 3, normalized-entropy: 0.9828586897127057, Tuple{Int64,Int64}[(2, 15), (3, 11)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 8, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
finished with 8 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 21)
[0.9666666666666667, 0.96, 0.96, 0.96, 0.9533333333333333, 0.9466666666666667, 0.94, 0.94, 0.94, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9266666666666666, 0.9199999999999999, 0.9199999999999999, 0.9133333333333334, 0.9133333333333332, 0.9066666666666667, 0.9, 0.8866666666666667, 0.8733333333333334]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :dnet, 0.3, 2) => 0.9666666666666667
finished with 21
iteration 6 finished
generating 4 configurations using top 4 configurations, starting with 21)
[0.9666666666666667, 0.96, 0.96, 0.96, 0.9533333333333333, 0.9466666666666667, 0.94, 0.94, 0.94, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9266666666666666, 0.9199999999999999, 0.9199999999999999, 0.9133333333333334, 0.9133333333333332, 0.9066666666666667, 0.9, 0.8866666666666667, 0.8733333333333334]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :dnet, 0.3, 2) => 0.9666666666666667
finished with 21
iteration 7 finished
generating 4 configurations using top 4 configurations, starting with 21)
[0.9666666666666667, 0.96, 0.96, 0.96, 0.9533333333333333, 0.9466666666666667, 0.94, 0.94, 0.94, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9266666666666666, 0.9199999999999999, 0.9199999999999999, 0.9133333333333334, 0.9133333333333332, 0.9066666666666667, 0.9, 0.8866666666666667, 0.8733333333333334]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :dnet, 0.3, 2) => 0.9666666666666667
finished with 21
iteration 8 finished
generating 4 configurations using top 4 configurations, starting with 21)
[0.9666666666666667, 0.96, 0.96, 0.96, 0.9533333333333333, 0.9466666666666667, 0.94, 0.94, 0.94, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9266666666666666, 0.9199999999999999, 0.9199999999999999, 0.9133333333333334, 0.9133333333333332, 0.9066666666666667, 0.9, 0.8866666666666667, 0.8733333333333334]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :dnet, 0.3, 2) => 0.9666666666666667
finished with 21
iteration 9 finished
[ Info: ========== BEST MODEL ==========
[ Info: (AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :dnet, 0.3, 2), 0.9666666666666667)
[ Info: AKNC{Array{Float64,1}}[AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}(Array{Float64,1}[[5.006451612903224, 3.451612903225807, 1.448387096774193, 0.24516129032258072], [6.5200000000000005, 3.02, 5.51, 2.0699999999999994], [5.515, 2.5549999999999997, 3.94, 1.225], [6.421428571428572, 2.907142857142857, 4.671428571428571, 1.4857142857142855], [5.983333333333333, 2.75, 5.0, 1.8166666666666667], [7.339999999999999, 2.94, 6.040000000000001, 1.9400000000000002], [7.65, 2.8, 6.75, 2.2], [7.6000000000000005, 3.733333333333333, 6.3999999999999995, 2.2333333333333334]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1, 3, 2, 2, 3, 3, 3, 3], 3), KCenters.var"#fun#70"{SimilaritySearch.var"#_lp#1"{Float64}}(SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25)), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :dnet, 0.3, 2)), AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}(Array{Float64,1}[[5.311111111111112, 2.4555555555555553, 3.7666666666666666, 1.177777777777778], [5.8, 2.8200000000000003, 4.27, 1.34], [6.435714285714288, 2.964285714285714, 4.6571428571428575, 1.4285714285714286], [5.041666666666666, 3.447222222222222, 1.4805555555555552, 0.2555555555555556], [6.1375, 2.8187499999999996, 5.174999999999999, 1.8875000000000002], [7.2444444444444445, 3.122222222222222, 6.177777777777778, 2.0999999999999996], [6.45, 3.25, 5.683333333333334, 2.3833333333333333]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [2, 2, 2, 1, 3, 3, 3], 3), KCenters.var"#fun#70"{SimilaritySearch.var"#_lp#1"{Float64}}(SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25)), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :dnet, 0.3, 2)), AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}(Array{Float64,1}[[6.445454545454546, 3.027272727272727, 4.7, 1.481818181818182], [6.054545454545456, 2.7636363636363637, 4.9818181818181815, 1.8818181818181818], [4.656249999999999, 3.09375, 1.4, 0.19375000000000003], [5.258823529411765, 3.6, 1.5176470588235293, 0.26470588235294124], [6.644444444444444, 3.1222222222222227, 5.577777777777778, 2.1999999999999997], [5.775757575757576, 2.7151515151515153, 4.260606060606061, 1.3727272727272726], [7.7, 2.7, 6.800000000000001, 2.15], [7.400000000000001, 3.15, 6.083333333333333, 1.9333333333333333]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [2, 3, 1, 1, 3, 2, 3, 3], 3), KCenters.var"#fun#70"{SimilaritySearch.var"#_lp#1"{Float64}}(SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25)), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :dnet, 0.3, 2))]
Test Summary: | Pass  Total
AKNC          |    1      1
[77, 1, 7, 1, 28, 1, 1, 1, 22, 4, 6, 31, 15, 3, 23, 28, 26, 23, 21, 24, 27, 25, 22, 23, 16, 40, 37, 41, 4, 1, 27, 14, 29, 45, 14, 12, 1, 29, 44, 27, 31, 42, 28, 23, 17, 45, 36, 25, 22, 11, 16, 39, 23, 31, 1, 45, 46, 16, 29, 32, 32, 13, 15, 9, 39, 11, 32, 25, 29, 22, 49, 37, 48, 16, 47, 20, 21, 38, 67, 50, 35, 49, 39, 39, 45, 50, 38, 29, 52, 25, 57, 37, 18, 42, 43, 22, 39, 27, 1, 43, 38, 35, 23, 26, 43, 25, 38, 26, 36, 45, 30, 46, 25, 22, 22, 23, 30, 54, 28, 36, 51, 25, 40, 34, 52, 29, 50, 23, 55, 47, 43, 38, 30, 32, 50, 60, 43, 24, 28, 34, 65, 31, 38, 27, 33, 46, 14, 32, 32, 39, 34, 28, 30, 49, 22, 19, 60, 48, 43, 31, 41, 41, 29, 39, 31, 9, 94, 27, 18, 26, 42, 12, 37, 21, 20, 47, 41, 27, 46, 30, 24, 37, 31, 46, 28, 30, 20, 49, 35, 31, 22, 35, 39, 21, 45, 50, 38, 75, 24, 45, 50, 46, 42, 41, 38, 65, 61, 41, 36, 20, 23, 36, 45, 30, 22, 30, 36, 39, 47, 36, 26, 37, 30, 33, 43, 40, 32, 27, 56, 51, 1, 34, 31, 6, 51, 25, 24, 31, 40, 66, 49, 31, 29, 65, 20, 39, 47, 28, 33, 11, 28, 33, 32, 23, 45, 42, 20, 25, 43, 20, 42, 41, 41, 46, 37, 48, 22, 41, 29, 17, 28, 40, 23, 29, 41, 44, 35, 47, 39, 45, 37, 41, 51, 61, 32, 33, 30, 38, 31, 32, 51, 54, 51, 57, 46, 47, 44, 43, 46, 17]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6349999999999997, speedup = 0.43875119799112283, eval_ratio = 0.041998)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.39756944444444464,"recall":0.39756944444444464,"f1":null,"seconds":4.69498336315155e-5,"exhaustive_search_seconds":0.0002386178821325302,"evaluations":339.6875,"distances_sum":1749.845293120201}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5460069444444443,"recall":0.5460069444444443,"f1":0.5460069444444443,"seconds":6.916932761669159e-5,"exhaustive_search_seconds":0.0002386178821325302,"evaluations":377.359375,"distances_sum":1641.7862011240554}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6449652777777776,"recall":0.6449652777777776,"f1":0.6449652777777776,"seconds":8.570216596126556e-5,"exhaustive_search_seconds":0.0002386178821325302,"evaluations":416.7109375,"distances_sum":1601.9505045479402}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7282986111111106,"recall":0.7282986111111106,"f1":0.7282986111111106,"seconds":9.85320657491684e-5,"exhaustive_search_seconds":0.0002386178821325302,"evaluations":455.0703125,"distances_sum":1572.701025156439}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7873263888888886,"recall":0.7873263888888886,"f1":0.7873263888888886,"seconds":0.00011301785707473755,"exhaustive_search_seconds":0.0002386178821325302,"evaluations":491.6015625,"distances_sum":1557.4906010577151}
KCenters.DeloneInvIndex> reached performance {"precision":0.8246527777777769,"recall":0.8246527777777769,"f1":0.8246527777777769,"seconds":0.0001338757574558258,"exhaustive_search_seconds":0.0002386178821325302,"evaluations":530.3984375,"distances_sum":1548.8061672171116}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8180000000000003, speedup = 1.7009537845214993, eval_ratio = 0.054003999999999996)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
   Testing KCenters tests passed 
