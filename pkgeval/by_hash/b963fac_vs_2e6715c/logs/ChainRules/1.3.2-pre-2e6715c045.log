Julia Version 1.3.2-pre.0
Commit 2e6715c045 (2019-12-31 00:49 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-6.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

 Resolving package versions...
 Installed Requires ─────── v1.0.0
 Installed Reexport ─────── v0.2.0
 Installed ChainRulesCore ─ v0.6.0
 Installed MuladdMacro ──── v0.2.2
 Installed ChainRules ───── v0.3.2
  Updating `~/.julia/environments/v1.3/Project.toml`
  [082447d4] + ChainRules v0.3.2
  Updating `~/.julia/environments/v1.3/Manifest.toml`
  [082447d4] + ChainRules v0.3.2
  [d360d2e6] + ChainRulesCore v0.6.0
  [46d2c3a1] + MuladdMacro v0.2.2
  [189a3867] + Reexport v0.2.0
  [ae029012] + Requires v1.0.0
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8ba89e20] + Distributed 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
   Testing ChainRules
 Resolving package versions...
 Installed NaNMath ─────────── v0.3.3
 Installed OpenSpecFun_jll ─── v0.5.3+1
 Installed FiniteDifferences ─ v0.9.1
 Installed SpecialFunctions ── v0.10.0
    Status `/tmp/jl_3JLZ2m/Manifest.toml`
  [082447d4] ChainRules v0.3.2
  [d360d2e6] ChainRulesCore v0.6.0
  [26cc04aa] FiniteDifferences v0.9.1
  [46d2c3a1] MuladdMacro v0.2.2
  [77ba4419] NaNMath v0.3.3
  [efe28fd5] OpenSpecFun_jll v0.5.3+1
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v1.0.0
  [276daf66] SpecialFunctions v0.10.0
  [2a0f44e3] Base64  [`@stdlib/Base64`]
  [ade2ca70] Dates  [`@stdlib/Dates`]
  [8ba89e20] Distributed  [`@stdlib/Distributed`]
  [b77e0a4c] InteractiveUtils  [`@stdlib/InteractiveUtils`]
  [76f85450] LibGit2  [`@stdlib/LibGit2`]
  [8f399da3] Libdl  [`@stdlib/Libdl`]
  [37e2e46d] LinearAlgebra  [`@stdlib/LinearAlgebra`]
  [56ddb016] Logging  [`@stdlib/Logging`]
  [d6f4376e] Markdown  [`@stdlib/Markdown`]
  [44cfe95a] Pkg  [`@stdlib/Pkg`]
  [de0858da] Printf  [`@stdlib/Printf`]
  [3fa0cd96] REPL  [`@stdlib/REPL`]
  [9a3f8284] Random  [`@stdlib/Random`]
  [ea8e919c] SHA  [`@stdlib/SHA`]
  [9e88b42a] Serialization  [`@stdlib/Serialization`]
  [6462fe0b] Sockets  [`@stdlib/Sockets`]
  [2f01184e] SparseArrays  [`@stdlib/SparseArrays`]
  [10745b16] Statistics  [`@stdlib/Statistics`]
  [8dfed614] Test  [`@stdlib/Test`]
  [cf7118a7] UUIDs  [`@stdlib/UUIDs`]
  [4ec0a83e] Unicode  [`@stdlib/Unicode`]
Testing ChainRules.jl
sincos: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
  Test threw exception
  Expression: isapprox(x̄_ad, x̄_fd; rtol=rtol, atol=atol, kwargs...)
  MethodError: no method matching isapprox(::Float64, ::Tuple{Float64}; rtol=1.0e-9, atol=1.0e-9)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::Number, !Matched::Number; atol, rtol, nans) at floatfuncs.jl:274
    ...
  Stacktrace:
   [1] eval_test(::Expr, ::Expr, ::LineNumberNode, ::Bool) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:257
   [2] #rrule_test#8(::Float64, ::Float64, ::FiniteDifferences.Central{UnitRange{Int64},Array{Float64,1}}, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::typeof(rrule_test), ::typeof(sincos), ::Tuple{Float64,Float64}, ::Tuple{Float64,Float64}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
   [3] rrule_test(::Function, ::Tuple{Float64,Float64}, ::Tuple{Float64,Float64}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:106
   [4] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/Base/base.jl:60
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [6] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/Base/base.jl:56
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [8] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/Base/base.jl:55
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [10] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/Base/base.jl:3
   [11] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [12] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/Base/base.jl:2
  
binary function (hypot): Test Failed at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:173
  Expression: isapprox(x̄_ad, x̄_fd; rtol=rtol, atol=atol, kwargs...)
   Evaluated: isapprox(0.019276133094402466, 0.01927612903323225; rtol=1.0e-9, atol=1.0e-9)
Stacktrace:
 [1] #rrule_test#9(::Float64, ::Float64, ::FiniteDifferences.Central{UnitRange{Int64},Array{Float64,1}}, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::typeof(rrule_test), ::Function, ::Float64, ::Tuple{Float64,Float64}, ::Vararg{Tuple{Float64,Float64},N} where N) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:173
 [2] rrule_test(::Function, ::Float64, ::Tuple{Float64,Float64}, ::Tuple{Float64,Float64}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:153
 [3] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/Base/base.jl:125
 [4] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1180
 [5] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/Base/base.jl:118
 [6] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
 [7] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/Base/base.jl:2
identity: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
  Test threw exception
  Expression: isapprox(x̄_ad, x̄_fd; rtol=rtol, atol=atol, kwargs...)
  MethodError: no method matching isapprox(::Float64, ::Tuple{Float64}; rtol=1.0e-9, atol=1.0e-9)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::Number, !Matched::Number; atol, rtol, nans) at floatfuncs.jl:274
    ...
  Stacktrace:
   [1] eval_test(::Expr, ::Expr, ::LineNumberNode, ::Bool) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:257
   [2] #rrule_test#8(::Float64, ::Float64, ::FiniteDifferences.Central{UnitRange{Int64},Array{Float64,1}}, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::typeof(rrule_test), ::typeof(identity), ::Float64, ::Tuple{Float64,Float64}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
   [3] rrule_test(::Function, ::Float64, ::Tuple{Float64,Float64}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:106
   [4] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/Base/base.jl:130
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [6] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/Base/base.jl:129
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [8] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/Base/base.jl:2
  
identity: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
  Test threw exception
  Expression: isapprox(x̄_ad, x̄_fd; rtol=rtol, atol=atol, kwargs...)
  MethodError: no method matching isapprox(::Array{Float64,1}, ::Tuple{Array{Float64,1}}; rtol=1.0e-9, atol=1.0e-9)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::AbstractArray, !Matched::AbstractArray; atol, rtol, nans, norm) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/LinearAlgebra/src/generic.jl:1522
    ...
  Stacktrace:
   [1] eval_test(::Expr, ::Expr, ::LineNumberNode, ::Bool) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:257
   [2] #rrule_test#8(::Float64, ::Float64, ::FiniteDifferences.Central{UnitRange{Int64},Array{Float64,1}}, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::typeof(rrule_test), ::typeof(identity), ::Array{Float64,1}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
   [3] rrule_test(::Function, ::Array{Float64,1}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:106
   [4] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/Base/base.jl:131
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [6] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/Base/base.jl:129
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [8] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/Base/base.jl:2
  
mapreduce: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/Base/mapreduce.jl:25
  Test threw exception
  Expression: ≈(x̄_ad, x̄_fd, atol=1.0e-9, rtol=1.0e-9)
  MethodError: no method matching isapprox(::Array{Float64,2}, ::Tuple{Array{Float64,2}}; atol=1.0e-9, rtol=1.0e-9)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::AbstractArray, !Matched::AbstractArray; atol, rtol, nans, norm) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/LinearAlgebra/src/generic.jl:1522
    ...
  Stacktrace:
   [1] #isapprox#11(::Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:atol, :rtol),Tuple{Float64,Float64}}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#134#137"{Array{Float64,2},typeof(abs2),Array{Float64,2}}}, ::Tuple{Array{Float64,2}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:183
   [2] (::Base.var"#kw##isapprox")(::NamedTuple{(:atol, :rtol),Tuple{Float64,Float64}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#134#137"{Array{Float64,2},typeof(abs2),Array{Float64,2}}}, ::Tuple{Array{Float64,2}}) at ./none:0
   [3] eval_test(::Expr, ::Expr, ::LineNumberNode, ::Bool) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:257
   [4] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/Base/mapreduce.jl:25
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [6] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/Base/mapreduce.jl:12
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [8] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/Base/mapreduce.jl:2
  
Vector: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
  Test threw exception
  Expression: isapprox(x̄_ad, x̄_fd; rtol=rtol, atol=atol, kwargs...)
  MethodError: no method matching isapprox(::Array{Float64,1}, ::Tuple{Array{Float64,1}}; rtol=1.0e-9, atol=1.0e-9)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::AbstractArray, !Matched::AbstractArray; atol, rtol, nans, norm) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/LinearAlgebra/src/generic.jl:1522
    ...
  Stacktrace:
   [1] #isapprox#11(::Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#134#137"{Float64,typeof(identity),Array{Float64,1}}}, ::Tuple{Array{Float64,1}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:183
   [2] (::Base.var"#kw##isapprox")(::NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#134#137"{Float64,typeof(identity),Array{Float64,1}}}, ::Tuple{Array{Float64,1}}) at ./none:0
   [3] eval_test(::Expr, ::Expr, ::LineNumberNode, ::Bool) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:257
   [4] #rrule_test#8(::Float64, ::Float64, ::FiniteDifferences.Central{UnitRange{Int64},Array{Float64,1}}, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::typeof(rrule_test), ::typeof(sum), ::Float64, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
   [5] rrule_test(::Function, ::Float64, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:106
   [6] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/Base/mapreduce.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [8] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/Base/mapreduce.jl:37
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [10] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/Base/mapreduce.jl:36
   [11] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [12] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/Base/mapreduce.jl:2
  
Matrix: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
  Test threw exception
  Expression: isapprox(x̄_ad, x̄_fd; rtol=rtol, atol=atol, kwargs...)
  MethodError: no method matching isapprox(::Array{Float64,2}, ::Tuple{Array{Float64,2}}; rtol=1.0e-9, atol=1.0e-9)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::AbstractArray, !Matched::AbstractArray; atol, rtol, nans, norm) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/LinearAlgebra/src/generic.jl:1522
    ...
  Stacktrace:
   [1] #isapprox#11(::Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#134#137"{Float64,typeof(identity),Array{Float64,2}}}, ::Tuple{Array{Float64,2}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:183
   [2] (::Base.var"#kw##isapprox")(::NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#134#137"{Float64,typeof(identity),Array{Float64,2}}}, ::Tuple{Array{Float64,2}}) at ./none:0
   [3] eval_test(::Expr, ::Expr, ::LineNumberNode, ::Bool) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:257
   [4] #rrule_test#8(::Float64, ::Float64, ::FiniteDifferences.Central{UnitRange{Int64},Array{Float64,1}}, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::typeof(rrule_test), ::typeof(sum), ::Float64, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
   [5] rrule_test(::Function, ::Float64, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:106
   [6] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/Base/mapreduce.jl:44
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [8] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/Base/mapreduce.jl:42
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [10] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/Base/mapreduce.jl:36
   [11] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [12] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/Base/mapreduce.jl:2
  
Array{T, 3}: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
  Test threw exception
  Expression: isapprox(x̄_ad, x̄_fd; rtol=rtol, atol=atol, kwargs...)
  MethodError: no method matching isapprox(::Array{Float64,3}, ::Tuple{Array{Float64,3}}; rtol=1.0e-9, atol=1.0e-9)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::AbstractArray, !Matched::AbstractArray; atol, rtol, nans, norm) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/LinearAlgebra/src/generic.jl:1522
    ...
  Stacktrace:
   [1] #isapprox#11(::Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#134#137"{Float64,typeof(identity),Array{Float64,3}}}, ::Tuple{Array{Float64,3}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:183
   [2] (::Base.var"#kw##isapprox")(::NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#134#137"{Float64,typeof(identity),Array{Float64,3}}}, ::Tuple{Array{Float64,3}}) at ./none:0
   [3] eval_test(::Expr, ::Expr, ::LineNumberNode, ::Bool) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:257
   [4] #rrule_test#8(::Float64, ::Float64, ::FiniteDifferences.Central{UnitRange{Int64},Array{Float64,1}}, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::typeof(rrule_test), ::typeof(sum), ::Float64, ::Tuple{Array{Float64,3},Array{Float64,3}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
   [5] rrule_test(::Function, ::Float64, ::Tuple{Array{Float64,3},Array{Float64,3}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:106
   [6] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/Base/mapreduce.jl:49
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [8] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/Base/mapreduce.jl:47
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [10] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/Base/mapreduce.jl:36
   [11] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [12] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/Base/mapreduce.jl:2
  
keyword arguments: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/Base/mapreduce.jl:65
  Test threw exception
  Expression: ≈(x̄_ad, x̄_fd, atol=1.0e-9, rtol=1.0e-9)
  MethodError: no method matching isapprox(::Array{Float64,2}, ::Tuple{Array{Float64,2}}; atol=1.0e-9, rtol=1.0e-9)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::AbstractArray, !Matched::AbstractArray; atol, rtol, nans, norm) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/LinearAlgebra/src/generic.jl:1522
    ...
  Stacktrace:
   [1] #isapprox#11(::Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:atol, :rtol),Tuple{Float64,Float64}}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#134#137"{Array{Float64,2},typeof(identity),Array{Float64,2}}}, ::Tuple{Array{Float64,2}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:183
   [2] (::Base.var"#kw##isapprox")(::NamedTuple{(:atol, :rtol),Tuple{Float64,Float64}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#134#137"{Array{Float64,2},typeof(identity),Array{Float64,2}}}, ::Tuple{Array{Float64,2}}) at ./none:0
   [3] eval_test(::Expr, ::Expr, ::LineNumberNode, ::Bool) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:257
   [4] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/Base/mapreduce.jl:65
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [6] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/Base/mapreduce.jl:58
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [8] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/Base/mapreduce.jl:36
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [10] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/Base/mapreduce.jl:2
  
 Basic: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
  Test threw exception
  Expression: isapprox(x̄_ad, x̄_fd; rtol=rtol, atol=atol, kwargs...)
  MethodError: no method matching isapprox(::Array{Float64,1}, ::Tuple{Array{Float64,1}}; rtol=1.0e-9, atol=1.0e-9)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::AbstractArray, !Matched::AbstractArray; atol, rtol, nans, norm) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/LinearAlgebra/src/generic.jl:1522
    ...
  Stacktrace:
   [1] #isapprox#11(::Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#160#162"{Float64,ChainRules.var"#sum_pullback#152"{ChainRules.var"#sum_pullback#150"{ChainRules.var"#mapreduce_pullback#136"{typeof(identity),Array{Float64,1}}}},Int64}}, ::Tuple{Array{Float64,1}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:183
   [2] (::Base.var"#kw##isapprox")(::NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#160#162"{Float64,ChainRules.var"#sum_pullback#152"{ChainRules.var"#sum_pullback#150"{ChainRules.var"#mapreduce_pullback#136"{typeof(identity),Array{Float64,1}}}},Int64}}, ::Tuple{Array{Float64,1}}) at ./none:0
   [3] eval_test(::Expr, ::Expr, ::LineNumberNode, ::Bool) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:257
   [4] #rrule_test#8(::Float64, ::Float64, ::FiniteDifferences.Central{UnitRange{Int64},Array{Float64,1}}, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::typeof(rrule_test), ::typeof(mean), ::Float64, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
   [5] rrule_test(::Function, ::Float64, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:106
   [6] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/Statistics/statistics.jl:6
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [8] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/Statistics/statistics.jl:6
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [10] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/Statistics/statistics.jl:2
  
with dims kwargs: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/Statistics/statistics.jl:31
  Test threw exception
  Expression: ≈(X̄_ad, X̄_fd, rtol=1.0e-9, atol=1.0e-9)
  MethodError: no method matching isapprox(::Array{Float64,2}, ::Tuple{Array{Float64,2}}; rtol=1.0e-9, atol=1.0e-9)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::AbstractArray, !Matched::AbstractArray; atol, rtol, nans, norm) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/LinearAlgebra/src/generic.jl:1522
    ...
  Stacktrace:
   [1] eval_test(::Expr, ::Expr, ::LineNumberNode, ::Bool) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:257
   [2] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/Statistics/statistics.jl:31
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [4] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/Statistics/statistics.jl:25
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [6] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/Statistics/statistics.jl:2
  
 inv: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
  Test threw exception
  Expression: isapprox(x̄_ad, x̄_fd; rtol=rtol, atol=atol, kwargs...)
  MethodError: no method matching isapprox(::Array{Float64,2}, ::Tuple{Array{Float64,2}}; rtol=1.0e-9, atol=1.0e-9)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::AbstractArray, !Matched::AbstractArray; atol, rtol, nans, norm) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/LinearAlgebra/src/generic.jl:1522
    ...
  Stacktrace:
   [1] eval_test(::Expr, ::Expr, ::LineNumberNode, ::Bool) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:257
   [2] #rrule_test#8(::Float64, ::Float64, ::FiniteDifferences.Central{UnitRange{Int64},Array{Float64,1}}, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::typeof(rrule_test), ::typeof(inv), ::Array{Float64,2}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
   [3] rrule_test(::Function, ::Array{Float64,2}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:106
   [4] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/dense.jl:32
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [6] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/dense.jl:29
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [8] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/dense.jl:2
  
det: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
  Test threw exception
  Expression: isapprox(x̄_ad, x̄_fd; rtol=rtol, atol=atol, kwargs...)
  MethodError: no method matching isapprox(::Array{Float64,2}, ::Tuple{Array{Float64,2}}; rtol=1.0e-9, atol=1.0e-9)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::AbstractArray, !Matched::AbstractArray; atol, rtol, nans, norm) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/LinearAlgebra/src/generic.jl:1522
    ...
  Stacktrace:
   [1] #isapprox#11(::Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#245#247"{Float64,Array{Float64,2},Float64}}, ::Tuple{Array{Float64,2}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:183
   [2] (::Base.var"#kw##isapprox")(::NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#245#247"{Float64,Array{Float64,2},Float64}}, ::Tuple{Array{Float64,2}}) at ./none:0
   [3] eval_test(::Expr, ::Expr, ::LineNumberNode, ::Bool) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:257
   [4] #rrule_test#8(::Float64, ::Float64, ::FiniteDifferences.Central{UnitRange{Int64},Array{Float64,1}}, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::typeof(rrule_test), ::typeof(det), ::Float64, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
   [5] rrule_test(::Function, ::Float64, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:106
   [6] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/dense.jl:38
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [8] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/dense.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [10] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/dense.jl:2
  
logdet: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
  Test threw exception
  Expression: isapprox(x̄_ad, x̄_fd; rtol=rtol, atol=atol, kwargs...)
  MethodError: no method matching isapprox(::Array{Float64,2}, ::Tuple{Array{Float64,2}}; rtol=1.0e-9, atol=1.0e-9)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::AbstractArray, !Matched::AbstractArray; atol, rtol, nans, norm) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/LinearAlgebra/src/generic.jl:1522
    ...
  Stacktrace:
   [1] #isapprox#11(::Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#248#250"{Float64,Array{Float64,2}}}, ::Tuple{Array{Float64,2}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:183
   [2] (::Base.var"#kw##isapprox")(::NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#248#250"{Float64,Array{Float64,2}}}, ::Tuple{Array{Float64,2}}) at ./none:0
   [3] eval_test(::Expr, ::Expr, ::LineNumberNode, ::Bool) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:257
   [4] #rrule_test#8(::Float64, ::Float64, ::FiniteDifferences.Central{UnitRange{Int64},Array{Float64,1}}, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::typeof(rrule_test), ::typeof(logdet), ::Float64, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
   [5] rrule_test(::Function, ::Float64, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:106
   [6] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/dense.jl:44
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [8] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/dense.jl:41
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [10] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/dense.jl:2
  
tr: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
  Test threw exception
  Expression: isapprox(x̄_ad, x̄_fd; rtol=rtol, atol=atol, kwargs...)
  MethodError: no method matching isapprox(::Diagonal{Float64,Array{Float64,1}}, ::Tuple{Array{Float64,2}}; rtol=1.0e-9, atol=1.0e-9)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::AbstractArray, !Matched::AbstractArray; atol, rtol, nans, norm) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/LinearAlgebra/src/generic.jl:1522
    ...
  Stacktrace:
   [1] #isapprox#11(::Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#251#253"{Float64,Array{Float64,2}}}, ::Tuple{Array{Float64,2}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:183
   [2] (::Base.var"#kw##isapprox")(::NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#251#253"{Float64,Array{Float64,2}}}, ::Tuple{Array{Float64,2}}) at ./none:0
   [3] eval_test(::Expr, ::Expr, ::LineNumberNode, ::Bool) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:257
   [4] #rrule_test#8(::Float64, ::Float64, ::FiniteDifferences.Central{UnitRange{Int64},Array{Float64,1}}, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::typeof(rrule_test), ::typeof(tr), ::Float64, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
   [5] rrule_test(::Function, ::Float64, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:106
   [6] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/dense.jl:49
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [8] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/dense.jl:47
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [10] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/dense.jl:2
  
Matrix: Test Failed at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:173
  Expression: isapprox(x̄_ad, x̄_fd; rtol=rtol, atol=atol, kwargs...)
   Evaluated: isapprox(Thunk(ChainRules.var"#274#277"{Array{Float64,2},Array{Float64,2},Array{Float64,2},Array{Float64,2}}([-0.9827718177516547 -3.049187087985662 -0.45753014518031915 0.049550548181828; -1.1457095184571038 -1.281790532097414 -0.7991285413217107 -0.8913053693383933; 0.25819205428715203 2.8015194483397003 1.0753460926351635 -0.7053146611866707; -2.282547976724439 0.5639614209301308 -0.5569593865129592 1.3970437844025363], [-0.34807928510100733 0.8718983568753548 -1.3002596896606895 -0.4385362125324239; -0.19506959830062723 -0.007206357093314457 -1.0059040824152614 -0.09173118968880091; -0.5497606187369344 -0.6163495955240155 0.6796485760534101 1.22561207137653; 1.0808323747949233 -0.5801739513350528 -0.043207370167515954 -0.232131676978592; -2.2125060475463463 -1.5612897485472592 -0.039839626218822005 -1.2139396904067505], [-0.23690460123730323 -1.7170129974387656 1.604831121738095 -0.330419660506073; -0.3827075659919168 -2.446261897220929 1.7480788262457672 -0.2672312785080624; -1.9688978438045297 -0.26713540122649804 0.9166815687612451 1.200964147356692; -1.5797479817238906 0.6778692338783507 1.1341703209400371 1.3170491877286854; -0.5654974841550139 -0.1689008828898645 -2.1775754411288144 0.6023924017880021], [-0.3162341605832586 0.4410185608089526 0.6775190618538066 0.3336809981458051; 1.7116615245412652 0.35751648886194604 -0.8628870265065961 -1.195470375407145; 1.2683824885596202 2.106437022846627 -2.341581668062198 -0.3755709619578594; -1.272062789754402 -1.1597991843364066 1.7767909510594972 0.4986289544382589]))
, [0.26686096499751677 0.13347269753366897 0.3196430110849233 0.8419908676476237; 0.6559056115790607 3.0495029976204893 3.2920065204492985 -3.2227056808361954; … ; 0.3666734338983696 0.73123403794996 2.6655741007828295 -0.8833723751836531; -0.28814178663132756 -1.708809012952866 -1.9517852999988166 1.5653470879092373]; rtol=1.0e-9, atol=1.0e-9)
Stacktrace:
 [1] #rrule_test#9(::Float64, ::Float64, ::FiniteDifferences.Central{UnitRange{Int64},Array{Float64,1}}, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::typeof(rrule_test), ::Function, ::Array{Float64,2}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Vararg{Tuple{Array{Float64,2},Array{Float64,2}},N} where N) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:173
 [2] rrule_test(::Function, ::Array{Float64,2}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:153
 [3] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/dense.jl:69
 [4] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
 [5] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/dense.jl:65
 [6] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1180
 [7] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/dense.jl:62
 [8] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
 [9] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/dense.jl:2
Diagonal: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
  Test threw exception
  Expression: isapprox(x̄_ad, x̄_fd; rtol=rtol, atol=atol, kwargs...)
  MethodError: no method matching isapprox(::Array{Float64,1}, ::Tuple{Array{Float64,1}}; rtol=1.0e-9, atol=1.0e-9)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::AbstractArray, !Matched::AbstractArray; atol, rtol, nans, norm) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/LinearAlgebra/src/generic.jl:1522
    ...
  Stacktrace:
   [1] #isapprox#11(::Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#291#293"{Array{Float64,2}}}, ::Tuple{Array{Float64,1}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:183
   [2] (::Base.var"#kw##isapprox")(::NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#291#293"{Array{Float64,2}}}, ::Tuple{Array{Float64,1}}) at ./none:0
   [3] eval_test(::Expr, ::Expr, ::LineNumberNode, ::Bool) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:257
   [4] #rrule_test#8(::Float64, ::Float64, ::FiniteDifferences.Central{UnitRange{Int64},Array{Float64,1}}, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::typeof(rrule_test), ::Type, ::Array{Float64,2}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
   [5] rrule_test(::Type, ::Array{Float64,2}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:106
   [6] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:4
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [8] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:3
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [10] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:2
  
Diagonal: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
  Test threw exception
  Expression: isapprox(x̄_ad, x̄_fd; rtol=rtol, atol=atol, kwargs...)
  MethodError: no method matching isapprox(::Array{Float64,1}, ::Tuple{Array{Float64,1}}; rtol=1.0e-9, atol=1.0e-9)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::AbstractArray, !Matched::AbstractArray; atol, rtol, nans, norm) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/LinearAlgebra/src/generic.jl:1522
    ...
  Stacktrace:
   [1] #isapprox#11(::Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#291#293"{Diagonal{Float64,Array{Float64,1}}}}, ::Tuple{Array{Float64,1}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:183
   [2] (::Base.var"#kw##isapprox")(::NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#291#293"{Diagonal{Float64,Array{Float64,1}}}}, ::Tuple{Array{Float64,1}}) at ./none:0
   [3] eval_test(::Expr, ::Expr, ::LineNumberNode, ::Bool) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:257
   [4] #rrule_test#8(::Float64, ::Float64, ::FiniteDifferences.Central{UnitRange{Int64},Array{Float64,1}}, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::typeof(rrule_test), ::Type, ::Diagonal{Float64,Array{Float64,1}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
   [5] rrule_test(::Type, ::Diagonal{Float64,Array{Float64,1}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:106
   [6] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:6
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [8] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:3
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [10] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:2
  
Diagonal: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
  Test threw exception
  Expression: isapprox(x̄_ad, x̄_fd; rtol=rtol, atol=atol, kwargs...)
  MethodError: no method matching isapprox(::Array{Float64,1}, ::Tuple{Array{Float64,1}}; rtol=1.0e-9, atol=1.0e-9)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::AbstractArray, !Matched::AbstractArray; atol, rtol, nans, norm) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/LinearAlgebra/src/generic.jl:1522
    ...
  Stacktrace:
   [1] #isapprox#11(::Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#291#293"{Diagonal{Float64,Array{Float64,1}}}}, ::Tuple{Array{Float64,1}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:183
   [2] (::Base.var"#kw##isapprox")(::NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#291#293"{Diagonal{Float64,Array{Float64,1}}}}, ::Tuple{Array{Float64,1}}) at ./none:0
   [3] eval_test(::Expr, ::Expr, ::LineNumberNode, ::Bool) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:257
   [4] #rrule_test#8(::Float64, ::Float64, ::FiniteDifferences.Central{UnitRange{Int64},Array{Float64,1}}, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::typeof(rrule_test), ::Type, ::Diagonal{Float64,Array{Float64,1}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
   [5] rrule_test(::Type, ::Diagonal{Float64,Array{Float64,1}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:106
   [6] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:8
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [8] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:3
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [10] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:2
  
diag: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
  Test threw exception
  Expression: isapprox(x̄_ad, x̄_fd; rtol=rtol, atol=atol, kwargs...)
  MethodError: no method matching isapprox(::Diagonal{Float64,Array{Float64,1}}, ::Tuple{Array{Float64,2}}; rtol=1.0e-9, atol=1.0e-9)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::AbstractArray, !Matched::AbstractArray; atol, rtol, nans, norm) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/LinearAlgebra/src/generic.jl:1522
    ...
  Stacktrace:
   [1] #isapprox#11(::Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#294#296"{Array{Float64,1}}}, ::Tuple{Array{Float64,2}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:183
   [2] (::Base.var"#kw##isapprox")(::NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#294#296"{Array{Float64,1}}}, ::Tuple{Array{Float64,2}}) at ./none:0
   [3] eval_test(::Expr, ::Expr, ::LineNumberNode, ::Bool) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:257
   [4] #rrule_test#8(::Float64, ::Float64, ::FiniteDifferences.Central{UnitRange{Int64},Array{Float64,1}}, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::typeof(rrule_test), ::typeof(diag), ::Array{Float64,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
   [5] rrule_test(::Function, ::Array{Float64,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:106
   [6] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:21
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [8] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:20
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [10] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:2
  
diag: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
  Test threw exception
  Expression: isapprox(x̄_ad, x̄_fd; rtol=rtol, atol=atol, kwargs...)
  MethodError: no method matching isapprox(::Diagonal{Float64,Array{Float64,1}}, ::Tuple{Diagonal{Float64,Array{Float64,1}}}; rtol=1.0e-9, atol=1.0e-9)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::AbstractArray, !Matched::AbstractArray; atol, rtol, nans, norm) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/LinearAlgebra/src/generic.jl:1522
    ...
  Stacktrace:
   [1] #isapprox#11(::Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#294#296"{Array{Float64,1}}}, ::Tuple{Diagonal{Float64,Array{Float64,1}}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:183
   [2] (::Base.var"#kw##isapprox")(::NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#294#296"{Array{Float64,1}}}, ::Tuple{Diagonal{Float64,Array{Float64,1}}}) at ./none:0
   [3] eval_test(::Expr, ::Expr, ::LineNumberNode, ::Bool) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:257
   [4] #rrule_test#8(::Float64, ::Float64, ::FiniteDifferences.Central{UnitRange{Int64},Array{Float64,1}}, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::typeof(rrule_test), ::typeof(diag), ::Array{Float64,1}, ::Tuple{Diagonal{Float64,Array{Float64,1}},Array{Float64,2}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
   [5] rrule_test(::Function, ::Array{Float64,1}, ::Tuple{Diagonal{Float64,Array{Float64,1}},Array{Float64,2}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:106
   [6] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:22
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [8] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:20
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [10] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:2
  
diag: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
  Test threw exception
  Expression: isapprox(x̄_ad, x̄_fd; rtol=rtol, atol=atol, kwargs...)
  MethodError: no method matching isapprox(::Diagonal{Float64,Array{Float64,1}}, ::Tuple{Array{Float64,2}}; rtol=1.0e-9, atol=1.0e-9)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::AbstractArray, !Matched::AbstractArray; atol, rtol, nans, norm) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/LinearAlgebra/src/generic.jl:1522
    ...
  Stacktrace:
   [1] #isapprox#11(::Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#294#296"{Array{Float64,1}}}, ::Tuple{Array{Float64,2}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:183
   [2] (::Base.var"#kw##isapprox")(::NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#294#296"{Array{Float64,1}}}, ::Tuple{Array{Float64,2}}) at ./none:0
   [3] eval_test(::Expr, ::Expr, ::LineNumberNode, ::Bool) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:257
   [4] #rrule_test#8(::Float64, ::Float64, ::FiniteDifferences.Central{UnitRange{Int64},Array{Float64,1}}, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::typeof(rrule_test), ::typeof(diag), ::Array{Float64,1}, ::Tuple{Array{Float64,2},Diagonal{Float64,Array{Float64,1}}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
   [5] rrule_test(::Function, ::Array{Float64,1}, ::Tuple{Array{Float64,2},Diagonal{Float64,Array{Float64,1}}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:106
   [6] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:23
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [8] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:20
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [10] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:2
  
diag: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
  Test threw exception
  Expression: isapprox(x̄_ad, x̄_fd; rtol=rtol, atol=atol, kwargs...)
  MethodError: no method matching isapprox(::Diagonal{Float64,Array{Float64,1}}, ::Tuple{Diagonal{Float64,Array{Float64,1}}}; rtol=1.0e-9, atol=1.0e-9)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::AbstractArray, !Matched::AbstractArray; atol, rtol, nans, norm) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/LinearAlgebra/src/generic.jl:1522
    ...
  Stacktrace:
   [1] #isapprox#11(::Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#294#296"{Array{Float64,1}}}, ::Tuple{Diagonal{Float64,Array{Float64,1}}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:183
   [2] (::Base.var"#kw##isapprox")(::NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#294#296"{Array{Float64,1}}}, ::Tuple{Diagonal{Float64,Array{Float64,1}}}) at ./none:0
   [3] eval_test(::Expr, ::Expr, ::LineNumberNode, ::Bool) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:257
   [4] #rrule_test#8(::Float64, ::Float64, ::FiniteDifferences.Central{UnitRange{Int64},Array{Float64,1}}, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::typeof(rrule_test), ::typeof(diag), ::Array{Float64,1}, ::Tuple{Diagonal{Float64,Array{Float64,1}},Diagonal{Float64,Array{Float64,1}}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
   [5] rrule_test(::Function, ::Array{Float64,1}, ::Tuple{Diagonal{Float64,Array{Float64,1}},Diagonal{Float64,Array{Float64,1}}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:106
   [6] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:24
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [8] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:20
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [10] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:2
  
Symmetric: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
  Test threw exception
  Expression: isapprox(x̄_ad, x̄_fd; rtol=rtol, atol=atol, kwargs...)
  MethodError: no method matching isapprox(::Array{Float64,2}, ::Tuple{Array{Float64,2}}; rtol=1.0e-9, atol=1.0e-9)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::AbstractArray, !Matched::AbstractArray; atol, rtol, nans, norm) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/LinearAlgebra/src/generic.jl:1522
    ...
  Stacktrace:
   [1] #isapprox#11(::Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#302#304"{Array{Float64,2}}}, ::Tuple{Array{Float64,2}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:183
   [2] (::Base.var"#kw##isapprox")(::NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#302#304"{Array{Float64,2}}}, ::Tuple{Array{Float64,2}}) at ./none:0
   [3] eval_test(::Expr, ::Expr, ::LineNumberNode, ::Bool) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:257
   [4] #rrule_test#8(::Float64, ::Float64, ::FiniteDifferences.Central{UnitRange{Int64},Array{Float64,1}}, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::typeof(rrule_test), ::Type, ::Array{Float64,2}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
   [5] rrule_test(::Type, ::Array{Float64,2}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:106
   [6] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:28
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [8] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:27
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [10] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:2
  
Adjoint: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
  Test threw exception
  Expression: isapprox(x̄_ad, x̄_fd; rtol=rtol, atol=atol, kwargs...)
  MethodError: no method matching isapprox(::Adjoint{Float64,Array{Float64,2}}, ::Tuple{Array{Float64,2}}; rtol=1.0e-9, atol=1.0e-9)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::AbstractArray, !Matched::AbstractArray; atol, rtol, nans, norm) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/LinearAlgebra/src/generic.jl:1522
    ...
  Stacktrace:
   [1] #isapprox#11(::Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#305#307"{Array{Float64,2}}}, ::Tuple{Array{Float64,2}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:183
   [2] (::Base.var"#kw##isapprox")(::NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#305#307"{Array{Float64,2}}}, ::Tuple{Array{Float64,2}}) at ./none:0
   [3] eval_test(::Expr, ::Expr, ::LineNumberNode, ::Bool) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:257
   [4] #rrule_test#8(::Float64, ::Float64, ::FiniteDifferences.Central{UnitRange{Int64},Array{Float64,1}}, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::typeof(rrule_test), ::Type, ::Array{Float64,2}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
   [5] rrule_test(::Type, ::Array{Float64,2}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:106
   [6] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:34
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1180
   [8] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:30
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [10] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:2
  
Adjoint: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
  Test threw exception
  Expression: isapprox(x̄_ad, x̄_fd; rtol=rtol, atol=atol, kwargs...)
  MethodError: no method matching isapprox(::Base.ReshapedArray{Float64,1,Adjoint{Float64,Array{Float64,2}},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, ::Tuple{Array{Float64,1}}; rtol=1.0e-9, atol=1.0e-9)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::AbstractArray, !Matched::AbstractArray; atol, rtol, nans, norm) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/LinearAlgebra/src/generic.jl:1522
    ...
  Stacktrace:
   [1] #isapprox#11(::Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#308#310"{Array{Float64,2}}}, ::Tuple{Array{Float64,1}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:183
   [2] (::Base.var"#kw##isapprox")(::NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#308#310"{Array{Float64,2}}}, ::Tuple{Array{Float64,1}}) at ./none:0
   [3] eval_test(::Expr, ::Expr, ::LineNumberNode, ::Bool) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:257
   [4] #rrule_test#8(::Float64, ::Float64, ::FiniteDifferences.Central{UnitRange{Int64},Array{Float64,1}}, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::typeof(rrule_test), ::Type, ::Array{Float64,2}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
   [5] rrule_test(::Type, ::Array{Float64,2}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:106
   [6] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:35
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1180
   [8] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:30
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [10] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:2
  
adjoint: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
  Test threw exception
  Expression: isapprox(x̄_ad, x̄_fd; rtol=rtol, atol=atol, kwargs...)
  MethodError: no method matching isapprox(::Adjoint{Float64,Array{Float64,2}}, ::Tuple{Array{Float64,2}}; rtol=1.0e-9, atol=1.0e-9)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::AbstractArray, !Matched::AbstractArray; atol, rtol, nans, norm) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/LinearAlgebra/src/generic.jl:1522
    ...
  Stacktrace:
   [1] #isapprox#11(::Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#311#313"{Array{Float64,2}}}, ::Tuple{Array{Float64,2}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:183
   [2] (::Base.var"#kw##isapprox")(::NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#311#313"{Array{Float64,2}}}, ::Tuple{Array{Float64,2}}) at ./none:0
   [3] eval_test(::Expr, ::Expr, ::LineNumberNode, ::Bool) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:257
   [4] #rrule_test#8(::Float64, ::Float64, ::FiniteDifferences.Central{UnitRange{Int64},Array{Float64,1}}, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::typeof(rrule_test), ::typeof(adjoint), ::Array{Float64,2}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
   [5] rrule_test(::Function, ::Array{Float64,2}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:106
   [6] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:34
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1180
   [8] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:30
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [10] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:2
  
adjoint: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
  Test threw exception
  Expression: isapprox(x̄_ad, x̄_fd; rtol=rtol, atol=atol, kwargs...)
  MethodError: no method matching isapprox(::Base.ReshapedArray{Float64,1,Adjoint{Float64,Array{Float64,2}},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, ::Tuple{Array{Float64,1}}; rtol=1.0e-9, atol=1.0e-9)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::AbstractArray, !Matched::AbstractArray; atol, rtol, nans, norm) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/LinearAlgebra/src/generic.jl:1522
    ...
  Stacktrace:
   [1] #isapprox#11(::Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#314#316"{Array{Float64,2}}}, ::Tuple{Array{Float64,1}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:183
   [2] (::Base.var"#kw##isapprox")(::NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#314#316"{Array{Float64,2}}}, ::Tuple{Array{Float64,1}}) at ./none:0
   [3] eval_test(::Expr, ::Expr, ::LineNumberNode, ::Bool) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:257
   [4] #rrule_test#8(::Float64, ::Float64, ::FiniteDifferences.Central{UnitRange{Int64},Array{Float64,1}}, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::typeof(rrule_test), ::typeof(adjoint), ::Array{Float64,2}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
   [5] rrule_test(::Function, ::Array{Float64,2}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:106
   [6] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:35
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1180
   [8] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:30
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [10] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:2
  
Transpose: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
  Test threw exception
  Expression: isapprox(x̄_ad, x̄_fd; rtol=rtol, atol=atol, kwargs...)
  MethodError: no method matching isapprox(::Transpose{Float64,Array{Float64,2}}, ::Tuple{Array{Float64,2}}; rtol=1.0e-9, atol=1.0e-9)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::AbstractArray, !Matched::AbstractArray; atol, rtol, nans, norm) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/LinearAlgebra/src/generic.jl:1522
    ...
  Stacktrace:
   [1] #isapprox#11(::Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#317#319"{Array{Float64,2}}}, ::Tuple{Array{Float64,2}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:183
   [2] (::Base.var"#kw##isapprox")(::NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#317#319"{Array{Float64,2}}}, ::Tuple{Array{Float64,2}}) at ./none:0
   [3] eval_test(::Expr, ::Expr, ::LineNumberNode, ::Bool) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:257
   [4] #rrule_test#8(::Float64, ::Float64, ::FiniteDifferences.Central{UnitRange{Int64},Array{Float64,1}}, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::typeof(rrule_test), ::Type, ::Array{Float64,2}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
   [5] rrule_test(::Type, ::Array{Float64,2}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:106
   [6] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:34
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1180
   [8] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:30
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [10] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:2
  
Transpose: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
  Test threw exception
  Expression: isapprox(x̄_ad, x̄_fd; rtol=rtol, atol=atol, kwargs...)
  MethodError: no method matching isapprox(::Base.ReshapedArray{Float64,1,Transpose{Float64,Array{Float64,2}},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, ::Tuple{Array{Float64,1}}; rtol=1.0e-9, atol=1.0e-9)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::AbstractArray, !Matched::AbstractArray; atol, rtol, nans, norm) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/LinearAlgebra/src/generic.jl:1522
    ...
  Stacktrace:
   [1] #isapprox#11(::Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#320#322"{Array{Float64,2}}}, ::Tuple{Array{Float64,1}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:183
   [2] (::Base.var"#kw##isapprox")(::NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#320#322"{Array{Float64,2}}}, ::Tuple{Array{Float64,1}}) at ./none:0
   [3] eval_test(::Expr, ::Expr, ::LineNumberNode, ::Bool) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:257
   [4] #rrule_test#8(::Float64, ::Float64, ::FiniteDifferences.Central{UnitRange{Int64},Array{Float64,1}}, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::typeof(rrule_test), ::Type, ::Array{Float64,2}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
   [5] rrule_test(::Type, ::Array{Float64,2}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:106
   [6] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:35
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1180
   [8] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:30
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [10] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:2
  
transpose: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
  Test threw exception
  Expression: isapprox(x̄_ad, x̄_fd; rtol=rtol, atol=atol, kwargs...)
  MethodError: no method matching isapprox(::Transpose{Float64,Array{Float64,2}}, ::Tuple{Array{Float64,2}}; rtol=1.0e-9, atol=1.0e-9)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::AbstractArray, !Matched::AbstractArray; atol, rtol, nans, norm) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/LinearAlgebra/src/generic.jl:1522
    ...
  Stacktrace:
   [1] #isapprox#11(::Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#323#325"{Array{Float64,2}}}, ::Tuple{Array{Float64,2}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:183
   [2] (::Base.var"#kw##isapprox")(::NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#323#325"{Array{Float64,2}}}, ::Tuple{Array{Float64,2}}) at ./none:0
   [3] eval_test(::Expr, ::Expr, ::LineNumberNode, ::Bool) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:257
   [4] #rrule_test#8(::Float64, ::Float64, ::FiniteDifferences.Central{UnitRange{Int64},Array{Float64,1}}, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::typeof(rrule_test), ::typeof(transpose), ::Array{Float64,2}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
   [5] rrule_test(::Function, ::Array{Float64,2}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:106
   [6] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:34
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1180
   [8] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:30
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [10] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:2
  
transpose: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
  Test threw exception
  Expression: isapprox(x̄_ad, x̄_fd; rtol=rtol, atol=atol, kwargs...)
  MethodError: no method matching isapprox(::Base.ReshapedArray{Float64,1,Transpose{Float64,Array{Float64,2}},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, ::Tuple{Array{Float64,1}}; rtol=1.0e-9, atol=1.0e-9)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::AbstractArray, !Matched::AbstractArray; atol, rtol, nans, norm) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/LinearAlgebra/src/generic.jl:1522
    ...
  Stacktrace:
   [1] #isapprox#11(::Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#326#328"{Array{Float64,2}}}, ::Tuple{Array{Float64,1}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:183
   [2] (::Base.var"#kw##isapprox")(::NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#326#328"{Array{Float64,2}}}, ::Tuple{Array{Float64,1}}) at ./none:0
   [3] eval_test(::Expr, ::Expr, ::LineNumberNode, ::Bool) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:257
   [4] #rrule_test#8(::Float64, ::Float64, ::FiniteDifferences.Central{UnitRange{Int64},Array{Float64,1}}, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::typeof(rrule_test), ::typeof(transpose), ::Array{Float64,2}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
   [5] rrule_test(::Function, ::Array{Float64,2}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:106
   [6] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:35
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1180
   [8] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:30
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [10] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:2
  
UpperTriangular: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
  Test threw exception
  Expression: isapprox(x̄_ad, x̄_fd; rtol=rtol, atol=atol, kwargs...)
  MethodError: no method matching isapprox(::Array{Float64,2}, ::Tuple{Array{Float64,2}}; rtol=1.0e-9, atol=1.0e-9)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::AbstractArray, !Matched::AbstractArray; atol, rtol, nans, norm) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/LinearAlgebra/src/generic.jl:1522
    ...
  Stacktrace:
   [1] #isapprox#11(::Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#329#331"{UpperTriangular{Float64,Array{Float64,2}}}}, ::Tuple{Array{Float64,2}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:183
   [2] (::Base.var"#kw##isapprox")(::NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#329#331"{UpperTriangular{Float64,Array{Float64,2}}}}, ::Tuple{Array{Float64,2}}) at ./none:0
   [3] eval_test(::Expr, ::Expr, ::LineNumberNode, ::Bool) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:257
   [4] #rrule_test#8(::Float64, ::Float64, ::FiniteDifferences.Central{UnitRange{Int64},Array{Float64,1}}, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::typeof(rrule_test), ::Type, ::UpperTriangular{Float64,Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
   [5] rrule_test(::Type, ::UpperTriangular{Float64,Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:106
   [6] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:40
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1180
   [8] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:37
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [10] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:2
  
LowerTriangular: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
  Test threw exception
  Expression: isapprox(x̄_ad, x̄_fd; rtol=rtol, atol=atol, kwargs...)
  MethodError: no method matching isapprox(::Array{Float64,2}, ::Tuple{Array{Float64,2}}; rtol=1.0e-9, atol=1.0e-9)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::AbstractArray, !Matched::AbstractArray; atol, rtol, nans, norm) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/LinearAlgebra/src/generic.jl:1522
    ...
  Stacktrace:
   [1] #isapprox#11(::Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#332#334"{LowerTriangular{Float64,Array{Float64,2}}}}, ::Tuple{Array{Float64,2}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:183
   [2] (::Base.var"#kw##isapprox")(::NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}, ::typeof(isapprox), ::Thunk{ChainRules.var"#332#334"{LowerTriangular{Float64,Array{Float64,2}}}}, ::Tuple{Array{Float64,2}}) at ./none:0
   [3] eval_test(::Expr, ::Expr, ::LineNumberNode, ::Bool) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:257
   [4] #rrule_test#8(::Float64, ::Float64, ::FiniteDifferences.Central{UnitRange{Int64},Array{Float64,1}}, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::typeof(rrule_test), ::Type, ::LowerTriangular{Float64,Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
   [5] rrule_test(::Type, ::LowerTriangular{Float64,Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:106
   [6] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:40
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1180
   [8] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:37
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [10] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/structured.jl:2
  
svd: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
  Test threw exception
  Expression: all(isapprox.(X̄_ad, X̄_fd; rtol=1.0e-6, atol=1.0e-6))
  MethodError: no method matching isapprox(::Float64, ::Array{Float64,2}; rtol=1.0e-6, atol=1.0e-6)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::Number, !Matched::Number; atol, rtol, nans) at floatfuncs.jl:274
    ...
  Stacktrace:
   [1] (::Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)})(::Float64, ::Vararg{Any,N} where N) at ./broadcast.jl:1219
   [2] _broadcast_getindex_evalf at ./broadcast.jl:630 [inlined]
   [3] _broadcast_getindex at ./broadcast.jl:603 [inlined]
   [4] getindex at ./broadcast.jl:563 [inlined]
   [5] copy at ./broadcast.jl:853 [inlined]
   [6] materialize(::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2},Nothing,Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)},Tuple{Array{Float64,2},Tuple{Array{Float64,2}}}}) at ./broadcast.jl:819
   [7] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
   [8] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [9] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:5
   [10] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [11] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:4
  
svd: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
  Test threw exception
  Expression: all(isapprox.(X̄_ad, X̄_fd; rtol=1.0e-6, atol=1.0e-6))
  MethodError: no method matching isapprox(::Float64, ::Array{Float64,2}; rtol=1.0e-6, atol=1.0e-6)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::Number, !Matched::Number; atol, rtol, nans) at floatfuncs.jl:274
    ...
  Stacktrace:
   [1] (::Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)})(::Float64, ::Vararg{Any,N} where N) at ./broadcast.jl:1219
   [2] _broadcast_getindex_evalf at ./broadcast.jl:630 [inlined]
   [3] _broadcast_getindex at ./broadcast.jl:603 [inlined]
   [4] getindex at ./broadcast.jl:563 [inlined]
   [5] copy at ./broadcast.jl:853 [inlined]
   [6] materialize(::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2},Nothing,Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)},Tuple{Array{Float64,2},Tuple{Array{Float64,2}}}}) at ./broadcast.jl:819
   [7] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
   [8] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [9] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:5
   [10] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [11] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:4
  
svd: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
  Test threw exception
  Expression: all(isapprox.(X̄_ad, X̄_fd; rtol=1.0e-6, atol=1.0e-6))
  MethodError: no method matching isapprox(::Float64, ::Array{Float64,2}; rtol=1.0e-6, atol=1.0e-6)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::Number, !Matched::Number; atol, rtol, nans) at floatfuncs.jl:274
    ...
  Stacktrace:
   [1] (::Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)})(::Float64, ::Vararg{Any,N} where N) at ./broadcast.jl:1219
   [2] _broadcast_getindex_evalf at ./broadcast.jl:630 [inlined]
   [3] _broadcast_getindex at ./broadcast.jl:603 [inlined]
   [4] getindex at ./broadcast.jl:563 [inlined]
   [5] copy at ./broadcast.jl:853 [inlined]
   [6] materialize(::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2},Nothing,Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)},Tuple{Array{Float64,2},Tuple{Array{Float64,2}}}}) at ./broadcast.jl:819
   [7] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
   [8] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [9] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:5
   [10] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [11] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:4
  
svd: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
  Test threw exception
  Expression: all(isapprox.(X̄_ad, X̄_fd; rtol=1.0e-6, atol=1.0e-6))
  MethodError: no method matching isapprox(::Float64, ::Array{Float64,2}; rtol=1.0e-6, atol=1.0e-6)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::Number, !Matched::Number; atol, rtol, nans) at floatfuncs.jl:274
    ...
  Stacktrace:
   [1] (::Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)})(::Float64, ::Vararg{Any,N} where N) at ./broadcast.jl:1219
   [2] _broadcast_getindex_evalf at ./broadcast.jl:630 [inlined]
   [3] _broadcast_getindex at ./broadcast.jl:603 [inlined]
   [4] getindex at ./broadcast.jl:563 [inlined]
   [5] copy at ./broadcast.jl:853 [inlined]
   [6] materialize(::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2},Nothing,Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)},Tuple{Array{Float64,2},Tuple{Array{Float64,2}}}}) at ./broadcast.jl:819
   [7] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
   [8] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [9] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:5
   [10] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [11] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:4
  
svd: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
  Test threw exception
  Expression: all(isapprox.(X̄_ad, X̄_fd; rtol=1.0e-6, atol=1.0e-6))
  MethodError: no method matching isapprox(::Float64, ::Array{Float64,2}; rtol=1.0e-6, atol=1.0e-6)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::Number, !Matched::Number; atol, rtol, nans) at floatfuncs.jl:274
    ...
  Stacktrace:
   [1] (::Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)})(::Float64, ::Vararg{Any,N} where N) at ./broadcast.jl:1219
   [2] _broadcast_getindex_evalf at ./broadcast.jl:630 [inlined]
   [3] _broadcast_getindex at ./broadcast.jl:603 [inlined]
   [4] getindex at ./broadcast.jl:563 [inlined]
   [5] copy at ./broadcast.jl:853 [inlined]
   [6] materialize(::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2},Nothing,Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)},Tuple{Array{Float64,2},Tuple{Array{Float64,2}}}}) at ./broadcast.jl:819
   [7] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
   [8] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [9] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:5
   [10] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [11] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:4
  
svd: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
  Test threw exception
  Expression: all(isapprox.(X̄_ad, X̄_fd; rtol=1.0e-6, atol=1.0e-6))
  MethodError: no method matching isapprox(::Float64, ::Array{Float64,2}; rtol=1.0e-6, atol=1.0e-6)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::Number, !Matched::Number; atol, rtol, nans) at floatfuncs.jl:274
    ...
  Stacktrace:
   [1] (::Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)})(::Float64, ::Vararg{Any,N} where N) at ./broadcast.jl:1219
   [2] _broadcast_getindex_evalf at ./broadcast.jl:630 [inlined]
   [3] _broadcast_getindex at ./broadcast.jl:603 [inlined]
   [4] getindex at ./broadcast.jl:563 [inlined]
   [5] copy at ./broadcast.jl:853 [inlined]
   [6] materialize(::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2},Nothing,Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)},Tuple{Array{Float64,2},Tuple{Array{Float64,2}}}}) at ./broadcast.jl:819
   [7] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
   [8] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [9] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:5
   [10] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [11] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:4
  
svd: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
  Test threw exception
  Expression: all(isapprox.(X̄_ad, X̄_fd; rtol=1.0e-6, atol=1.0e-6))
  MethodError: no method matching isapprox(::Float64, ::Array{Float64,2}; rtol=1.0e-6, atol=1.0e-6)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::Number, !Matched::Number; atol, rtol, nans) at floatfuncs.jl:274
    ...
  Stacktrace:
   [1] (::Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)})(::Float64, ::Vararg{Any,N} where N) at ./broadcast.jl:1219
   [2] _broadcast_getindex_evalf at ./broadcast.jl:630 [inlined]
   [3] _broadcast_getindex at ./broadcast.jl:603 [inlined]
   [4] getindex at ./broadcast.jl:563 [inlined]
   [5] copy at ./broadcast.jl:853 [inlined]
   [6] materialize(::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2},Nothing,Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)},Tuple{Array{Float64,2},Tuple{Array{Float64,2}}}}) at ./broadcast.jl:819
   [7] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
   [8] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [9] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:5
   [10] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [11] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:4
  
svd: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
  Test threw exception
  Expression: all(isapprox.(X̄_ad, X̄_fd; rtol=1.0e-6, atol=1.0e-6))
  MethodError: no method matching isapprox(::Float64, ::Array{Float64,2}; rtol=1.0e-6, atol=1.0e-6)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::Number, !Matched::Number; atol, rtol, nans) at floatfuncs.jl:274
    ...
  Stacktrace:
   [1] (::Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)})(::Float64, ::Vararg{Any,N} where N) at ./broadcast.jl:1219
   [2] _broadcast_getindex_evalf at ./broadcast.jl:630 [inlined]
   [3] _broadcast_getindex at ./broadcast.jl:603 [inlined]
   [4] getindex at ./broadcast.jl:563 [inlined]
   [5] copy at ./broadcast.jl:853 [inlined]
   [6] materialize(::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2},Nothing,Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)},Tuple{Array{Float64,2},Tuple{Array{Float64,2}}}}) at ./broadcast.jl:819
   [7] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
   [8] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [9] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:5
   [10] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [11] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:4
  
svd: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
  Test threw exception
  Expression: all(isapprox.(X̄_ad, X̄_fd; rtol=1.0e-6, atol=1.0e-6))
  MethodError: no method matching isapprox(::Float64, ::Array{Float64,2}; rtol=1.0e-6, atol=1.0e-6)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::Number, !Matched::Number; atol, rtol, nans) at floatfuncs.jl:274
    ...
  Stacktrace:
   [1] (::Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)})(::Float64, ::Vararg{Any,N} where N) at ./broadcast.jl:1219
   [2] _broadcast_getindex_evalf at ./broadcast.jl:630 [inlined]
   [3] _broadcast_getindex at ./broadcast.jl:603 [inlined]
   [4] getindex at ./broadcast.jl:563 [inlined]
   [5] copy at ./broadcast.jl:853 [inlined]
   [6] materialize(::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2},Nothing,Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)},Tuple{Array{Float64,2},Tuple{Array{Float64,2}}}}) at ./broadcast.jl:819
   [7] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
   [8] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [9] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:5
   [10] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [11] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:4
  
svd: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
  Test threw exception
  Expression: all(isapprox.(X̄_ad, X̄_fd; rtol=1.0e-6, atol=1.0e-6))
  MethodError: no method matching isapprox(::Float64, ::Array{Float64,2}; rtol=1.0e-6, atol=1.0e-6)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::Number, !Matched::Number; atol, rtol, nans) at floatfuncs.jl:274
    ...
  Stacktrace:
   [1] (::Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)})(::Float64, ::Vararg{Any,N} where N) at ./broadcast.jl:1219
   [2] _broadcast_getindex_evalf at ./broadcast.jl:630 [inlined]
   [3] _broadcast_getindex at ./broadcast.jl:603 [inlined]
   [4] getindex at ./broadcast.jl:563 [inlined]
   [5] copy at ./broadcast.jl:853 [inlined]
   [6] materialize(::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2},Nothing,Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)},Tuple{Array{Float64,2},Tuple{Array{Float64,2}}}}) at ./broadcast.jl:819
   [7] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
   [8] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [9] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:5
   [10] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [11] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:4
  
svd: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
  Test threw exception
  Expression: all(isapprox.(X̄_ad, X̄_fd; rtol=1.0e-6, atol=1.0e-6))
  MethodError: no method matching isapprox(::Float64, ::Array{Float64,2}; rtol=1.0e-6, atol=1.0e-6)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::Number, !Matched::Number; atol, rtol, nans) at floatfuncs.jl:274
    ...
  Stacktrace:
   [1] (::Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)})(::Float64, ::Vararg{Any,N} where N) at ./broadcast.jl:1219
   [2] _broadcast_getindex_evalf at ./broadcast.jl:630 [inlined]
   [3] _broadcast_getindex at ./broadcast.jl:603 [inlined]
   [4] getindex at ./broadcast.jl:563 [inlined]
   [5] copy at ./broadcast.jl:853 [inlined]
   [6] materialize(::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2},Nothing,Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)},Tuple{Array{Float64,2},Tuple{Array{Float64,2}}}}) at ./broadcast.jl:819
   [7] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
   [8] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [9] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:5
   [10] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [11] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:4
  
svd: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
  Test threw exception
  Expression: all(isapprox.(X̄_ad, X̄_fd; rtol=1.0e-6, atol=1.0e-6))
  MethodError: no method matching isapprox(::Float64, ::Array{Float64,2}; rtol=1.0e-6, atol=1.0e-6)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::Number, !Matched::Number; atol, rtol, nans) at floatfuncs.jl:274
    ...
  Stacktrace:
   [1] (::Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)})(::Float64, ::Vararg{Any,N} where N) at ./broadcast.jl:1219
   [2] _broadcast_getindex_evalf at ./broadcast.jl:630 [inlined]
   [3] _broadcast_getindex at ./broadcast.jl:603 [inlined]
   [4] getindex at ./broadcast.jl:563 [inlined]
   [5] copy at ./broadcast.jl:853 [inlined]
   [6] materialize(::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2},Nothing,Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)},Tuple{Array{Float64,2},Tuple{Array{Float64,2}}}}) at ./broadcast.jl:819
   [7] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
   [8] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [9] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:5
   [10] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [11] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:4
  
svd: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
  Test threw exception
  Expression: all(isapprox.(X̄_ad, X̄_fd; rtol=1.0e-6, atol=1.0e-6))
  MethodError: no method matching isapprox(::Float64, ::Array{Float64,2}; rtol=1.0e-6, atol=1.0e-6)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::Number, !Matched::Number; atol, rtol, nans) at floatfuncs.jl:274
    ...
  Stacktrace:
   [1] (::Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)})(::Float64, ::Vararg{Any,N} where N) at ./broadcast.jl:1219
   [2] _broadcast_getindex_evalf at ./broadcast.jl:630 [inlined]
   [3] _broadcast_getindex at ./broadcast.jl:603 [inlined]
   [4] getindex at ./broadcast.jl:563 [inlined]
   [5] copy at ./broadcast.jl:853 [inlined]
   [6] materialize(::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2},Nothing,Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)},Tuple{Array{Float64,2},Tuple{Array{Float64,2}}}}) at ./broadcast.jl:819
   [7] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
   [8] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [9] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:5
   [10] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [11] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:4
  
svd: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
  Test threw exception
  Expression: all(isapprox.(X̄_ad, X̄_fd; rtol=1.0e-6, atol=1.0e-6))
  MethodError: no method matching isapprox(::Float64, ::Array{Float64,2}; rtol=1.0e-6, atol=1.0e-6)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::Number, !Matched::Number; atol, rtol, nans) at floatfuncs.jl:274
    ...
  Stacktrace:
   [1] (::Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)})(::Float64, ::Vararg{Any,N} where N) at ./broadcast.jl:1219
   [2] _broadcast_getindex_evalf at ./broadcast.jl:630 [inlined]
   [3] _broadcast_getindex at ./broadcast.jl:603 [inlined]
   [4] getindex at ./broadcast.jl:563 [inlined]
   [5] copy at ./broadcast.jl:853 [inlined]
   [6] materialize(::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2},Nothing,Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)},Tuple{Array{Float64,2},Tuple{Array{Float64,2}}}}) at ./broadcast.jl:819
   [7] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
   [8] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [9] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:5
   [10] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [11] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:4
  
svd: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
  Test threw exception
  Expression: all(isapprox.(X̄_ad, X̄_fd; rtol=1.0e-6, atol=1.0e-6))
  MethodError: no method matching isapprox(::Float64, ::Array{Float64,2}; rtol=1.0e-6, atol=1.0e-6)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::Number, !Matched::Number; atol, rtol, nans) at floatfuncs.jl:274
    ...
  Stacktrace:
   [1] (::Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)})(::Float64, ::Vararg{Any,N} where N) at ./broadcast.jl:1219
   [2] _broadcast_getindex_evalf at ./broadcast.jl:630 [inlined]
   [3] _broadcast_getindex at ./broadcast.jl:603 [inlined]
   [4] getindex at ./broadcast.jl:563 [inlined]
   [5] copy at ./broadcast.jl:853 [inlined]
   [6] materialize(::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2},Nothing,Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)},Tuple{Array{Float64,2},Tuple{Array{Float64,2}}}}) at ./broadcast.jl:819
   [7] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
   [8] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [9] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:5
   [10] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [11] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:4
  
svd: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
  Test threw exception
  Expression: all(isapprox.(X̄_ad, X̄_fd; rtol=1.0e-6, atol=1.0e-6))
  MethodError: no method matching isapprox(::Float64, ::Array{Float64,2}; rtol=1.0e-6, atol=1.0e-6)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::Number, !Matched::Number; atol, rtol, nans) at floatfuncs.jl:274
    ...
  Stacktrace:
   [1] (::Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)})(::Float64, ::Vararg{Any,N} where N) at ./broadcast.jl:1219
   [2] _broadcast_getindex_evalf at ./broadcast.jl:630 [inlined]
   [3] _broadcast_getindex at ./broadcast.jl:603 [inlined]
   [4] getindex at ./broadcast.jl:563 [inlined]
   [5] copy at ./broadcast.jl:853 [inlined]
   [6] materialize(::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2},Nothing,Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)},Tuple{Array{Float64,2},Tuple{Array{Float64,2}}}}) at ./broadcast.jl:819
   [7] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
   [8] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [9] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:5
   [10] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [11] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:4
  
svd: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
  Test threw exception
  Expression: all(isapprox.(X̄_ad, X̄_fd; rtol=1.0e-6, atol=1.0e-6))
  MethodError: no method matching isapprox(::Float64, ::Array{Float64,2}; rtol=1.0e-6, atol=1.0e-6)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::Number, !Matched::Number; atol, rtol, nans) at floatfuncs.jl:274
    ...
  Stacktrace:
   [1] (::Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)})(::Float64, ::Vararg{Any,N} where N) at ./broadcast.jl:1219
   [2] _broadcast_getindex_evalf at ./broadcast.jl:630 [inlined]
   [3] _broadcast_getindex at ./broadcast.jl:603 [inlined]
   [4] getindex at ./broadcast.jl:563 [inlined]
   [5] copy at ./broadcast.jl:853 [inlined]
   [6] materialize(::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2},Nothing,Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)},Tuple{Array{Float64,2},Tuple{Array{Float64,2}}}}) at ./broadcast.jl:819
   [7] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
   [8] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [9] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:5
   [10] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [11] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:4
  
svd: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
  Test threw exception
  Expression: all(isapprox.(X̄_ad, X̄_fd; rtol=1.0e-6, atol=1.0e-6))
  MethodError: no method matching isapprox(::Float64, ::Array{Float64,2}; rtol=1.0e-6, atol=1.0e-6)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::Number, !Matched::Number; atol, rtol, nans) at floatfuncs.jl:274
    ...
  Stacktrace:
   [1] (::Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)})(::Float64, ::Vararg{Any,N} where N) at ./broadcast.jl:1219
   [2] _broadcast_getindex_evalf at ./broadcast.jl:630 [inlined]
   [3] _broadcast_getindex at ./broadcast.jl:603 [inlined]
   [4] getindex at ./broadcast.jl:563 [inlined]
   [5] copy at ./broadcast.jl:853 [inlined]
   [6] materialize(::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2},Nothing,Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)},Tuple{Array{Float64,2},Tuple{Array{Float64,2}}}}) at ./broadcast.jl:819
   [7] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
   [8] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [9] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:5
   [10] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [11] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:4
  
svd: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
  Test threw exception
  Expression: all(isapprox.(X̄_ad, X̄_fd; rtol=1.0e-6, atol=1.0e-6))
  MethodError: no method matching isapprox(::Float64, ::Array{Float64,2}; rtol=1.0e-6, atol=1.0e-6)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::Number, !Matched::Number; atol, rtol, nans) at floatfuncs.jl:274
    ...
  Stacktrace:
   [1] (::Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)})(::Float64, ::Vararg{Any,N} where N) at ./broadcast.jl:1219
   [2] _broadcast_getindex_evalf at ./broadcast.jl:630 [inlined]
   [3] _broadcast_getindex at ./broadcast.jl:603 [inlined]
   [4] getindex at ./broadcast.jl:563 [inlined]
   [5] copy at ./broadcast.jl:853 [inlined]
   [6] materialize(::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2},Nothing,Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)},Tuple{Array{Float64,2},Tuple{Array{Float64,2}}}}) at ./broadcast.jl:819
   [7] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
   [8] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [9] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:5
   [10] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [11] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:4
  
svd: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
  Test threw exception
  Expression: all(isapprox.(X̄_ad, X̄_fd; rtol=1.0e-6, atol=1.0e-6))
  MethodError: no method matching isapprox(::Float64, ::Array{Float64,2}; rtol=1.0e-6, atol=1.0e-6)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::Number, !Matched::Number; atol, rtol, nans) at floatfuncs.jl:274
    ...
  Stacktrace:
   [1] (::Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)})(::Float64, ::Vararg{Any,N} where N) at ./broadcast.jl:1219
   [2] _broadcast_getindex_evalf at ./broadcast.jl:630 [inlined]
   [3] _broadcast_getindex at ./broadcast.jl:603 [inlined]
   [4] getindex at ./broadcast.jl:563 [inlined]
   [5] copy at ./broadcast.jl:853 [inlined]
   [6] materialize(::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2},Nothing,Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)},Tuple{Array{Float64,2},Tuple{Array{Float64,2}}}}) at ./broadcast.jl:819
   [7] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
   [8] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [9] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:5
   [10] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [11] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:4
  
svd: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
  Test threw exception
  Expression: all(isapprox.(X̄_ad, X̄_fd; rtol=1.0e-6, atol=1.0e-6))
  MethodError: no method matching isapprox(::Float64, ::Array{Float64,2}; rtol=1.0e-6, atol=1.0e-6)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::Number, !Matched::Number; atol, rtol, nans) at floatfuncs.jl:274
    ...
  Stacktrace:
   [1] (::Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)})(::Float64, ::Vararg{Any,N} where N) at ./broadcast.jl:1219
   [2] _broadcast_getindex_evalf at ./broadcast.jl:630 [inlined]
   [3] _broadcast_getindex at ./broadcast.jl:603 [inlined]
   [4] getindex at ./broadcast.jl:563 [inlined]
   [5] copy at ./broadcast.jl:853 [inlined]
   [6] materialize(::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2},Nothing,Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)},Tuple{Array{Float64,2},Tuple{Array{Float64,2}}}}) at ./broadcast.jl:819
   [7] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
   [8] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [9] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:5
   [10] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [11] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:4
  
svd: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
  Test threw exception
  Expression: all(isapprox.(X̄_ad, X̄_fd; rtol=1.0e-6, atol=1.0e-6))
  MethodError: no method matching isapprox(::Float64, ::Array{Float64,2}; rtol=1.0e-6, atol=1.0e-6)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::Number, !Matched::Number; atol, rtol, nans) at floatfuncs.jl:274
    ...
  Stacktrace:
   [1] (::Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)})(::Float64, ::Vararg{Any,N} where N) at ./broadcast.jl:1219
   [2] _broadcast_getindex_evalf at ./broadcast.jl:630 [inlined]
   [3] _broadcast_getindex at ./broadcast.jl:603 [inlined]
   [4] getindex at ./broadcast.jl:563 [inlined]
   [5] copy at ./broadcast.jl:853 [inlined]
   [6] materialize(::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2},Nothing,Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)},Tuple{Array{Float64,2},Tuple{Array{Float64,2}}}}) at ./broadcast.jl:819
   [7] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
   [8] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [9] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:5
   [10] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [11] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:4
  
svd: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
  Test threw exception
  Expression: all(isapprox.(X̄_ad, X̄_fd; rtol=1.0e-6, atol=1.0e-6))
  MethodError: no method matching isapprox(::Float64, ::Array{Float64,2}; rtol=1.0e-6, atol=1.0e-6)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::Number, !Matched::Number; atol, rtol, nans) at floatfuncs.jl:274
    ...
  Stacktrace:
   [1] (::Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)})(::Float64, ::Vararg{Any,N} where N) at ./broadcast.jl:1219
   [2] _broadcast_getindex_evalf at ./broadcast.jl:630 [inlined]
   [3] _broadcast_getindex at ./broadcast.jl:603 [inlined]
   [4] getindex at ./broadcast.jl:563 [inlined]
   [5] copy at ./broadcast.jl:853 [inlined]
   [6] materialize(::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2},Nothing,Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)},Tuple{Array{Float64,2},Tuple{Array{Float64,2}}}}) at ./broadcast.jl:819
   [7] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
   [8] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [9] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:5
   [10] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [11] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:4
  
svd: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
  Test threw exception
  Expression: all(isapprox.(X̄_ad, X̄_fd; rtol=1.0e-6, atol=1.0e-6))
  MethodError: no method matching isapprox(::Float64, ::Array{Float64,2}; rtol=1.0e-6, atol=1.0e-6)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::Number, !Matched::Number; atol, rtol, nans) at floatfuncs.jl:274
    ...
  Stacktrace:
   [1] (::Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)})(::Float64, ::Vararg{Any,N} where N) at ./broadcast.jl:1219
   [2] _broadcast_getindex_evalf at ./broadcast.jl:630 [inlined]
   [3] _broadcast_getindex at ./broadcast.jl:603 [inlined]
   [4] getindex at ./broadcast.jl:563 [inlined]
   [5] copy at ./broadcast.jl:853 [inlined]
   [6] materialize(::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2},Nothing,Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)},Tuple{Array{Float64,2},Tuple{Array{Float64,2}}}}) at ./broadcast.jl:819
   [7] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
   [8] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [9] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:5
   [10] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [11] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:4
  
svd: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
  Test threw exception
  Expression: all(isapprox.(X̄_ad, X̄_fd; rtol=1.0e-6, atol=1.0e-6))
  MethodError: no method matching isapprox(::Float64, ::Array{Float64,2}; rtol=1.0e-6, atol=1.0e-6)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::Number, !Matched::Number; atol, rtol, nans) at floatfuncs.jl:274
    ...
  Stacktrace:
   [1] (::Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)})(::Float64, ::Vararg{Any,N} where N) at ./broadcast.jl:1219
   [2] _broadcast_getindex_evalf at ./broadcast.jl:630 [inlined]
   [3] _broadcast_getindex at ./broadcast.jl:603 [inlined]
   [4] getindex at ./broadcast.jl:563 [inlined]
   [5] copy at ./broadcast.jl:853 [inlined]
   [6] materialize(::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2},Nothing,Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)},Tuple{Array{Float64,2},Tuple{Array{Float64,2}}}}) at ./broadcast.jl:819
   [7] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
   [8] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [9] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:5
   [10] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [11] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:4
  
svd: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
  Test threw exception
  Expression: all(isapprox.(X̄_ad, X̄_fd; rtol=1.0e-6, atol=1.0e-6))
  MethodError: no method matching isapprox(::Float64, ::Array{Float64,2}; rtol=1.0e-6, atol=1.0e-6)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::Number, !Matched::Number; atol, rtol, nans) at floatfuncs.jl:274
    ...
  Stacktrace:
   [1] (::Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)})(::Float64, ::Vararg{Any,N} where N) at ./broadcast.jl:1219
   [2] _broadcast_getindex_evalf at ./broadcast.jl:630 [inlined]
   [3] _broadcast_getindex at ./broadcast.jl:603 [inlined]
   [4] getindex at ./broadcast.jl:563 [inlined]
   [5] copy at ./broadcast.jl:853 [inlined]
   [6] materialize(::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2},Nothing,Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)},Tuple{Array{Float64,2},Tuple{Array{Float64,2}}}}) at ./broadcast.jl:819
   [7] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
   [8] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [9] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:5
   [10] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [11] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:4
  
svd: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
  Test threw exception
  Expression: all(isapprox.(X̄_ad, X̄_fd; rtol=1.0e-6, atol=1.0e-6))
  MethodError: no method matching isapprox(::Float64, ::Array{Float64,2}; rtol=1.0e-6, atol=1.0e-6)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::Number, !Matched::Number; atol, rtol, nans) at floatfuncs.jl:274
    ...
  Stacktrace:
   [1] (::Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)})(::Float64, ::Vararg{Any,N} where N) at ./broadcast.jl:1219
   [2] _broadcast_getindex_evalf at ./broadcast.jl:630 [inlined]
   [3] _broadcast_getindex at ./broadcast.jl:603 [inlined]
   [4] getindex at ./broadcast.jl:563 [inlined]
   [5] copy at ./broadcast.jl:853 [inlined]
   [6] materialize(::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2},Nothing,Base.Broadcast.var"#31#32"{Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:rtol, :atol),Tuple{Float64,Float64}}},typeof(isapprox)},Tuple{Array{Float64,2},Tuple{Array{Float64,2}}}}) at ./broadcast.jl:819
   [7] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:22
   [8] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [9] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:5
   [10] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [11] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/LinearAlgebra/factorization.jl:4
  
 ┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = rrule at rule_definition_tools.jl:196 [inlined]
└ @ Core ~/.julia/packages/ChainRulesCore/goWfn/src/rule_definition_tools.jl:196
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = frule at rule_definition_tools.jl:167 [inlined]
└ @ Core ~/.julia/packages/ChainRulesCore/goWfn/src/rule_definition_tools.jl:167
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = macro expansion at test_util.jl:38 [inlined]
└ @ Core ~/.julia/packages/ChainRules/kvLfe/test/test_util.jl:38
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = fdm(::FiniteDifferences.Central{UnitRange{Int64},Array{Float64,1}}, ::typeof(lgamma), ::Float64, ::Val{true}) at methods.jl:222
└ @ FiniteDifferences ~/.julia/packages/FiniteDifferences/nxw5i/src/methods.jl:222
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = _mapreduce(::FiniteDifferences.var"#20#22"{typeof(lgamma),Float64,Array{Int64,1},Array{Float64,1},Float64}, ::typeof(Base.add_sum), ::IndexLinear, ::Base.OneTo{Int64}) at methods.jl:263
└ @ Base ~/.julia/packages/FiniteDifferences/nxw5i/src/methods.jl:263
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = _mapreduce(::FiniteDifferences.var"#20#22"{typeof(lgamma),Float64,Array{Int64,1},Array{Float64,1},Float64}, ::typeof(Base.add_sum), ::IndexLinear, ::Base.OneTo{Int64}) at methods.jl:263
└ @ Base ~/.julia/packages/FiniteDifferences/nxw5i/src/methods.jl:263
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = _mapreduce(::FiniteDifferences.var"#20#22"{typeof(lgamma),Float64,Array{Int64,1},Array{Float64,1},Float64}, ::typeof(Base.add_sum), ::IndexLinear, ::Base.OneTo{Int64}) at methods.jl:263
└ @ Base ~/.julia/packages/FiniteDifferences/nxw5i/src/methods.jl:263
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = #20 at methods.jl:263 [inlined]
└ @ Core ~/.julia/packages/FiniteDifferences/nxw5i/src/methods.jl:263
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = _mapreduce(::FiniteDifferences.var"#20#22"{typeof(lgamma),Float64,UnitRange{Int64},Array{Float64,1},Float64}, ::typeof(Base.add_sum), ::IndexLinear, ::Base.OneTo{Int64}) at methods.jl:263
└ @ Base ~/.julia/packages/FiniteDifferences/nxw5i/src/methods.jl:263
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = _mapreduce(::FiniteDifferences.var"#20#22"{typeof(lgamma),Float64,UnitRange{Int64},Array{Float64,1},Float64}, ::typeof(Base.add_sum), ::IndexLinear, ::Base.OneTo{Int64}) at methods.jl:263
└ @ Base ~/.julia/packages/FiniteDifferences/nxw5i/src/methods.jl:263
log gamma and co: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
  Test threw exception
  Expression: isapprox(x̄_ad, x̄_fd; rtol=rtol, atol=atol, kwargs...)
  MethodError: no method matching isapprox(::Float64, ::Tuple{Float64}; rtol=1.0e-9, atol=1.0e-9)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::Number, !Matched::Number; atol, rtol, nans) at floatfuncs.jl:274
    ...
  Stacktrace:
   [1] eval_test(::Expr, ::Expr, ::LineNumberNode, ::Bool) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:257
   [2] #rrule_test#8(::Float64, ::Float64, ::FiniteDifferences.Central{UnitRange{Int64},Array{Float64,1}}, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::typeof(rrule_test), ::typeof(logabsgamma), ::Tuple{Float64,Float64}, ::Tuple{Float64,Float64}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
   [3] rrule_test(::Function, ::Tuple{Float64,Float64}, ::Tuple{Float64,Float64}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:106
   [4] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/packages/SpecialFunctions.jl:56
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [6] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/packages/SpecialFunctions.jl:40
  
log gamma and co: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
  Test threw exception
  Expression: isapprox(x̄_ad, x̄_fd; rtol=rtol, atol=atol, kwargs...)
  MethodError: no method matching isapprox(::Float64, ::Tuple{Float64}; rtol=1.0e-9, atol=1.0e-9)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::Number, !Matched::Number; atol, rtol, nans) at floatfuncs.jl:274
    ...
  Stacktrace:
   [1] eval_test(::Expr, ::Expr, ::LineNumberNode, ::Bool) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:257
   [2] #rrule_test#8(::Float64, ::Float64, ::FiniteDifferences.Central{UnitRange{Int64},Array{Float64,1}}, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::typeof(rrule_test), ::typeof(logabsgamma), ::Tuple{Float64,Float64}, ::Tuple{Float64,Float64}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
   [3] rrule_test(::Function, ::Tuple{Float64,Float64}, ::Tuple{Float64,Float64}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:106
   [4] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/packages/SpecialFunctions.jl:56
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [6] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/packages/SpecialFunctions.jl:40
  
log gamma and co: Error During Test at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
  Test threw exception
  Expression: isapprox(x̄_ad, x̄_fd; rtol=rtol, atol=atol, kwargs...)
  MethodError: no method matching isapprox(::Float64, ::Tuple{Float64}; rtol=1.0e-9, atol=1.0e-9)
  Closest candidates are:
    isapprox(!Matched::Missing, ::Any; kwargs...) at missing.jl:90
    isapprox(::Any, !Matched::Missing; kwargs...) at missing.jl:91
    isapprox(::Number, !Matched::Number; atol, rtol, nans) at floatfuncs.jl:274
    ...
  Stacktrace:
   [1] eval_test(::Expr, ::Expr, ::LineNumberNode, ::Bool) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:257
   [2] #rrule_test#8(::Float64, ::Float64, ::FiniteDifferences.Central{UnitRange{Int64},Array{Float64,1}}, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::typeof(rrule_test), ::typeof(logabsgamma), ::Tuple{Float64,Float64}, ::Tuple{Float64,Float64}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:122
   [3] rrule_test(::Function, ::Tuple{Float64,Float64}, ::Tuple{Float64,Float64}) at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/test_util.jl:106
   [4] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/packages/SpecialFunctions.jl:56
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
   [6] top-level scope at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/rulesets/packages/SpecialFunctions.jl:40
  
┌ Warning: `lgamma(x::Number)` is deprecated, use `loggamma(x)` instead.
│   caller = rrule at rule_definition_tools.jl:196 [inlined]
└ @ Core ~/.julia/packages/ChainRulesCore/goWfn/src/rule_definition_tools.jl:196
┌ Warning: `lgamma(x::Number)` is deprecated, use `loggamma(x)` instead.
│   caller = frule at rule_definition_tools.jl:167 [inlined]
└ @ Core ~/.julia/packages/ChainRulesCore/goWfn/src/rule_definition_tools.jl:167
┌ Warning: `lgamma(x::Number)` is deprecated, use `loggamma(x)` instead.
│   caller = macro expansion at test_util.jl:38 [inlined]
└ @ Core ~/.julia/packages/ChainRules/kvLfe/test/test_util.jl:38
┌ Warning: `lgamma(x::Number)` is deprecated, use `loggamma(x)` instead.
│   caller = fdm(::FiniteDifferences.Central{UnitRange{Int64},Array{Float64,1}}, ::typeof(lgamma), ::Complex{Float64}, ::Val{true}) at methods.jl:222
└ @ FiniteDifferences ~/.julia/packages/FiniteDifferences/nxw5i/src/methods.jl:222
┌ Warning: `lgamma(x::Number)` is deprecated, use `loggamma(x)` instead.
│   caller = #20 at methods.jl:263 [inlined]
└ @ Core ~/.julia/packages/FiniteDifferences/nxw5i/src/methods.jl:263
┌ Warning: `lgamma(x::Number)` is deprecated, use `loggamma(x)` instead.
│   caller = _mapreduce(::FiniteDifferences.var"#20#22"{typeof(lgamma),Complex{Float64},Array{Int64,1},Array{Float64,1},Float64}, ::typeof(Base.add_sum), ::IndexLinear, ::Base.OneTo{Int64}) at methods.jl:263
└ @ Base ~/.julia/packages/FiniteDifferences/nxw5i/src/methods.jl:263
┌ Warning: `lgamma(x::Number)` is deprecated, use `loggamma(x)` instead.
│   caller = _mapreduce(::FiniteDifferences.var"#20#22"{typeof(lgamma),Complex{Float64},Array{Int64,1},Array{Float64,1},Float64}, ::typeof(Base.add_sum), ::IndexLinear, ::Base.OneTo{Int64}) at methods.jl:263
└ @ Base ~/.julia/packages/FiniteDifferences/nxw5i/src/methods.jl:263
┌ Warning: `lgamma(x::Number)` is deprecated, use `loggamma(x)` instead.
│   caller = #20 at methods.jl:263 [inlined]
└ @ Core ~/.julia/packages/FiniteDifferences/nxw5i/src/methods.jl:263
┌ Warning: `lgamma(x::Number)` is deprecated, use `loggamma(x)` instead.
│   caller = _mapreduce(::FiniteDifferences.var"#20#22"{typeof(lgamma),Complex{Float64},UnitRange{Int64},Array{Float64,1},Float64}, ::typeof(Base.add_sum), ::IndexLinear, ::Base.OneTo{Int64}) at methods.jl:263
└ @ Base ~/.julia/packages/FiniteDifferences/nxw5i/src/methods.jl:263
┌ Warning: `lgamma(x::Number)` is deprecated, use `loggamma(x)` instead.
│   caller = _mapreduce(::FiniteDifferences.var"#20#22"{typeof(lgamma),Complex{Float64},UnitRange{Int64},Array{Float64,1},Float64}, ::typeof(Base.add_sum), ::IndexLinear, ::Base.OneTo{Int64}) at methods.jl:263
└ @ Base ~/.julia/packages/FiniteDifferences/nxw5i/src/methods.jl:263
Test Summary:                           | Pass  Fail  Error  Total
ChainRules                              | 2895     2     62   2959
  helper functions                      |    2                   2
  rulesets                              | 2893     2     62   2957
    Base                                |  850     1      8    859
      base                              |  771     1      3    775
        Trig                            |  424            1    425
          Basics                        |   48                  48
          Basics                        |   48                  48
          Hyperbolic                    |   36                  36
          Hyperbolic                    |   36                  36
          Degrees                       |   36                  36
          Inverses                      |   36                  36
          Inverses                      |   36                  36
          Inverse hyperbolic            |   36                  36
          Inverse hyperbolic            |   36                  36
          Inverse degrees               |   36                  36
          Inverse degrees               |   36                  36
          Multivariate                  |    4            1      5
            sincos                      |    4            1      5
        math                            |  114                 114
        Unary complex functions         |   96                  96
        *(x, y)                         |    4                   4
        binary function (hypot)         |    5     1             6
        binary function (atan)          |    6                   6
        binary function (mod)           |    6                   6
        binary function (rem)           |    6                   6
        binary function (^)             |    6                   6
        identity                        |    4            2      6
        Constants                       |   12                  12
        Constants                       |   12                  12
        Constants                       |   12                  12
        Constants                       |   12                  12
        Constants                       |   12                  12
        sign                            |   26                  26
        trinary (muladd)                |    7                   7
        trinary (fma)                   |    7                   7
      reshape                           |    9                   9
      hcat                              |    5                   5
      vcat                              |    5                   5
      fill                              |    8                   8
      Maps and Reductions               |   44            5     49
        map                             |    9                   9
        mapreduce                       |    5            1      6
        mapfoldl                        |    5                   5
        mapfoldr                        |    5                   5
        sum                             |   20            4     24
          Vector                        |    4            1      5
          Matrix                        |    4            1      5
          Array{T, 3}                   |    4            1      5
          function argument             |    8                   8
          keyword arguments             |                 1      1
      broadcast                         |    8                   8
    Statistics                          |    6            2      8
      mean                              |    6            2      8
        Basic                           |    2            1      3
        with function arg               |    4                   4
        with dims kwargs                |                 1      1
    LinearAlgebra                       | 1305     1     49   1355
      linalg                            |  273     1      4    278
        dot                             |   18                  18
        inv                             |    4            1      5
        det                             |    4            1      5
        logdet                          |    4            1      5
        tr                              |    4            1      5
        *                               |  100                 100
        /                               |   52                  52
        \                               |   71     1            72
          Matrix                        |   35     1            36
          Vector                        |    4                   4
          Diagonal on LHS               |    8                   8
          UpperTriangular on LHS        |    8                   8
          LowerTriangular on LHS        |    8                   8
          Matrix \ Vector               |    4                   4
          Vector \ Matrix               |    4                   4
        norm                            |   16                  16
      Structured Matrices               |   40           18     58
        Diagonal                        |    6            3      9
        ::Diagonal * ::AbstractVector   |    4                   4
        diag                            |    8            4     12
        Symmetric                       |    2            1      3
        Adjoint                         |    4            2      6
        adjoint                         |    4            2      6
        Transpose                       |    4            2      6
        transpose                       |    4            2      6
        UpperTriangular                 |    2            1      3
        LowerTriangular                 |    2            1      3
      Factorizations                    |  128           27    155
        svd                             |  102           27    129
          Vt                            |    1                   1
          Vt                            |    1                   1
          Vt                            |    1                   1
          Vt                            |    1                   1
          Vt                            |    1                   1
          Vt                            |    1                   1
          Vt                            |    1                   1
          Vt                            |    1                   1
          Vt                            |    1                   1
          +                             |    9                   9
          Helper functions              |    3                   3
        cholesky                        |   26                  26
      BLAS                              |  864                 864
    packages                            |  732            3    735
      SpecialFunctions                  |  102                 102
      SpecialFunctions                  |   72                  72
      SpecialFunctions                  |   72                  72
      SpecialFunctions                  |  114                 114
      SpecialFunctions                  |  102                 102
      SpecialFunctions                  |   72                  72
      SpecialFunctions                  |   96                  96
      log gamma and co                  |  102            3    105
        lgamma at 1.5, rrule            |    3                   3
        lgamma at 1.5, frule            |    2                   2
        loggamma at 1.5, rrule          |    3                   3
        loggamma at 1.5, frule          |    2                   2
        lgamma at 2.5, rrule            |    3                   3
        lgamma at 2.5, frule            |    2                   2
        loggamma at 2.5, rrule          |    3                   3
        loggamma at 2.5, frule          |    2                   2
        lgamma at 10.5, rrule           |    3                   3
        lgamma at 10.5, frule           |    2                   2
        loggamma at 10.5, rrule         |    3                   3
        loggamma at 10.5, frule         |    2                   2
        lgamma at -0.6, rrule           |    3                   3
        lgamma at -0.6, frule           |    2                   2
        lgamma at -2.6, rrule           |    3                   3
        lgamma at -2.6, frule           |    2                   2
        lgamma at -3.3, rrule           |    3                   3
        lgamma at -3.3, frule           |    2                   2
        lgamma at 1.6 + 1.6im, rrule    |    3                   3
        lgamma at 1.6 + 1.6im, frule    |    2                   2
        loggamma at 1.6 + 1.6im, rrule  |    3                   3
        loggamma at 1.6 + 1.6im, frule  |    2                   2
        lgamma at 1.6 - 1.6im, rrule    |    3                   3
        lgamma at 1.6 - 1.6im, frule    |    2                   2
        loggamma at 1.6 - 1.6im, rrule  |    3                   3
        loggamma at 1.6 - 1.6im, frule  |    2                   2
        lgamma at -4.6 + 1.6im, rrule   |    3                   3
        lgamma at -4.6 + 1.6im, frule   |    2                   2
        loggamma at -4.6 + 1.6im, rrule |    3                   3
        loggamma at -4.6 + 1.6im, frule |    2                   2
ERROR: LoadError: Some tests did not pass: 2895 passed, 2 failed, 62 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/ChainRules/kvLfe/test/runtests.jl:17
ERROR: Package ChainRules errored during testing
Stacktrace:
 [1] pkgerror(::String, ::Vararg{String,N} where N) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Pkg/src/Types.jl:113
 [2] #test#131(::Bool, ::Nothing, ::Cmd, ::Cmd, ::typeof(Pkg.Operations.test), ::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Pkg/src/Operations.jl:1372
 [3] #test at ./none:0 [inlined]
 [4] #test#62(::Bool, ::Nothing, ::Cmd, ::Cmd, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::typeof(Pkg.API.test), ::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Pkg/src/API.jl:253
 [5] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Pkg/src/API.jl:239
 [6] #test#61 at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Pkg/src/API.jl:233 [inlined]
 [7] test at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Pkg/src/API.jl:233 [inlined]
 [8] #test#60 at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Pkg/src/API.jl:232 [inlined]
 [9] test at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Pkg/src/API.jl:232 [inlined]
 [10] #test#59(::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::typeof(Pkg.API.test), ::String) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Pkg/src/API.jl:231
 [11] test(::String) at /workspace/srcdir/usr/share/julia/stdlib/v1.3/Pkg/src/API.jl:231
 [12] top-level scope at none:13
