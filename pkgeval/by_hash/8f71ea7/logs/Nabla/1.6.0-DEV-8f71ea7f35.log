################################################################################
# PkgEval set-up: 2020-10-28T10:45:55.578
#

Julia Version 1.6.0-DEV.1352
Commit 8f71ea7f35 (2020-10-28 02:10 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: AMD EPYC 7502 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-11.0.0 (ORCJIT, znver2)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2
  JULIA_MAX_NUM_PRECOMPILE_FILES = 9223372036854775807



################################################################################
# Installation: 2020-10-28T10:45:57.528
#

   Resolving package versions...
   Installed CompilerSupportLibraries_jll ─ v0.3.4+0
   Installed OpenSpecFun_jll ────────────── v0.5.3+4
   Installed NaNMath ────────────────────── v0.3.4
   Installed SpecialFunctions ───────────── v0.10.3
   Installed Calculus ───────────────────── v0.5.1
   Installed FDM ────────────────────────── v0.6.1
   Installed JLLWrappers ────────────────── v1.1.3
   Installed Nabla ──────────────────────── v0.12.1
   Installed DualNumbers ────────────────── v0.6.2
   Installed DiffRules ──────────────────── v0.0.10
Updating `~/.julia/environments/v1.6/Project.toml`
  [49c96f43] + Nabla v0.12.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [49dc2e85] + Calculus v0.5.1
  [b552c78f] + DiffRules v0.0.10
  [fa6b7ba4] + DualNumbers v0.6.2
  [e25cca7e] + FDM v0.6.1
  [692b3bcd] + JLLWrappers v1.1.3
  [77ba4419] + NaNMath v0.3.4
  [49c96f43] + Nabla v0.12.1
  [276daf66] + SpecialFunctions v0.10.3
  [e66e0078] + CompilerSupportLibraries_jll v0.3.4+0
  [efe28fd5] + OpenSpecFun_jll v0.5.3+4
  [0dad84c5] + ArgTools
  [56f22d72] + Artifacts
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [f43a241f] + Downloads
  [b77e0a4c] + InteractiveUtils
  [b27032c2] + LibCURL
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
  [deac9b47] + LibCURL_jll
  [14a3606d] + MozillaCACerts_jll


################################################################################
# Testing: 2020-10-28T10:46:02.064
#


     Testing Nabla
Status `/tmp/jl_BmsXR0/Project.toml`
  [6e4b80f9] BenchmarkTools v0.5.0
  [b552c78f] DiffRules v0.0.10
  [31c24e10] Distributions v0.24.1
  [fa6b7ba4] DualNumbers v0.6.2
  [e25cca7e] FDM v0.6.1
  [49c96f43] Nabla v0.12.1
  [276daf66] SpecialFunctions v0.10.3
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [10745b16] Statistics
  [8dfed614] Test
Status `/tmp/jl_BmsXR0/Manifest.toml`
  [6e4b80f9] BenchmarkTools v0.5.0
  [49dc2e85] Calculus v0.5.1
  [34da2185] Compat v3.23.0
  [9a962f9c] DataAPI v1.3.0
  [864edb3b] DataStructures v0.18.8
  [b552c78f] DiffRules v0.0.10
  [31c24e10] Distributions v0.24.1
  [fa6b7ba4] DualNumbers v0.6.2
  [e25cca7e] FDM v0.6.1
  [1a297f60] FillArrays v0.9.7
  [692b3bcd] JLLWrappers v1.1.3
  [682c06a0] JSON v0.21.1
  [e1d29d7a] Missings v0.4.4
  [77ba4419] NaNMath v0.3.4
  [49c96f43] Nabla v0.12.1
  [bac558e1] OrderedCollections v1.3.1
  [90014a1f] PDMats v0.10.1
  [69de0a69] Parsers v1.0.11
  [1fd47b50] QuadGK v2.4.1
  [79098fc4] Rmath v0.6.1
  [a2af1166] SortingAlgorithms v0.3.1
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.5
  [2913bbd2] StatsBase v0.33.2
  [4c63d2b9] StatsFuns v0.9.5
  [e66e0078] CompilerSupportLibraries_jll v0.3.4+0
  [efe28fd5] OpenSpecFun_jll v0.5.3+4
  [f50d1b31] Rmath_jll v0.2.2+1
  [0dad84c5] ArgTools
  [56f22d72] Artifacts
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [f43a241f] Downloads
  [b77e0a4c] InteractiveUtils
  [b27032c2] LibCURL
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [4607b0f0] SuiteSparse
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
  [deac9b47] LibCURL_jll
  [14a3606d] MozillaCACerts_jll
     Testing Running tests...
WARNING: Method definition f(Any) in module Main at /home/pkgeval/.julia/packages/Nabla/D60dX/test/core.jl:105 overwritten at /home/pkgeval/.julia/packages/Nabla/D60dX/test/core.jl:114.
Test Summary: | Pass  Total
Core          |  234    234
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = in_domain(f::Function, x::Float64) at finite_differencing.jl:128
└ @ Nabla ~/.julia/packages/Nabla/D60dX/src/finite_differencing.jl:128
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = #Branch#13 at core.jl:82 [inlined]
└ @ Core ~/.julia/packages/Nabla/D60dX/src/core.jl:82
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = #44 at finite_differencing.jl:24 [inlined]
└ @ Core ~/.julia/packages/Nabla/D60dX/src/finite_differencing.jl:24
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = #44 at finite_differencing.jl:24 [inlined]
└ @ Core ~/.julia/packages/Nabla/D60dX/src/finite_differencing.jl:24
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = #44 at finite_differencing.jl:24 [inlined]
└ @ Core ~/.julia/packages/Nabla/D60dX/src/finite_differencing.jl:24
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = #44 at finite_differencing.jl:24 [inlined]
└ @ Core ~/.julia/packages/Nabla/D60dX/src/finite_differencing.jl:24
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = #44 at finite_differencing.jl:24 [inlined]
└ @ Core ~/.julia/packages/Nabla/D60dX/src/finite_differencing.jl:24
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = #44 at finite_differencing.jl:24 [inlined]
└ @ Core ~/.julia/packages/Nabla/D60dX/src/finite_differencing.jl:24
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = #44 at finite_differencing.jl:24 [inlined]
└ @ Core ~/.julia/packages/Nabla/D60dX/src/finite_differencing.jl:24
┌ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
│   caller = (::Nabla.var"#55#59"{Float64, typeof(lbeta)})(y::Float64) at finite_differencing.jl:197
└ @ Nabla ~/.julia/packages/Nabla/D60dX/src/finite_differencing.jl:197
┌ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
│   caller = #Branch#13 at core.jl:82 [inlined]
└ @ Core ~/.julia/packages/Nabla/D60dX/src/core.jl:82
┌ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
│   caller = (::Nabla.var"#44#45"{typeof(lbeta), Float64, Tuple{Float64, Float64}, Tuple{Float64, Float64}})(ε::Float64) at finite_differencing.jl:24
└ @ Nabla ~/.julia/packages/Nabla/D60dX/src/finite_differencing.jl:24
WARNING: Method definition f(Any, Any, Any) in module Main at /home/pkgeval/.julia/packages/Nabla/D60dX/test/sensitivities/array.jl:14 overwritten at /home/pkgeval/.julia/packages/Nabla/D60dX/test/sensitivities/array.jl:17.
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = _broadcast_getindex_evalf at broadcast.jl:648 [inlined]
└ @ Core ./broadcast.jl:648
┌ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
│   caller = _broadcast_getindex_evalf at broadcast.jl:648 [inlined]
└ @ Core ./broadcast.jl:648
┌ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
│   caller = _broadcast_getindex_evalf at broadcast.jl:648 [inlined]
└ @ Core ./broadcast.jl:648
┌ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
│   caller = _broadcast_getindex_evalf at broadcast.jl:648 [inlined]
└ @ Core ./broadcast.jl:648
┌ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
│   caller = _broadcast_getindex_evalf at broadcast.jl:648 [inlined]
└ @ Core ./broadcast.jl:648
┌ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
│   caller = _broadcast_getindex_evalf at broadcast.jl:648 [inlined]
└ @ Core ./broadcast.jl:648
┌ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
│   caller = _broadcast_getindex_evalf at broadcast.jl:648 [inlined]
└ @ Core ./broadcast.jl:648
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = broadcast(f::Function, x::Float64) at broadcast.jl:822
└ @ Base.Broadcast ./broadcast.jl:822
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = _broadcast_getindex_evalf(f::typeof(lgamma), args::Float64) at broadcast.jl:648
└ @ Base.Broadcast ./broadcast.jl:648
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = broadcast at broadcast.jl:822 [inlined]
└ @ Core ./broadcast.jl:822
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = _broadcast_getindex_evalf at broadcast.jl:648 [inlined]
└ @ Core ./broadcast.jl:648
┌ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
│   caller = _broadcast_getindex_evalf at broadcast.jl:648 [inlined]
└ @ Core ./broadcast.jl:648
┌ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
│   caller = _broadcast_getindex_evalf at broadcast.jl:648 [inlined]
└ @ Core ./broadcast.jl:648
┌ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
│   caller = _broadcast_getindex_evalf at broadcast.jl:648 [inlined]
└ @ Core ./broadcast.jl:648
┌ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
│   caller = _broadcast_getindex_evalf at broadcast.jl:648 [inlined]
└ @ Core ./broadcast.jl:648
┌ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
│   caller = _broadcast_getindex_evalf at broadcast.jl:648 [inlined]
└ @ Core ./broadcast.jl:648
┌ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
│   caller = _broadcast_getindex_evalf at broadcast.jl:648 [inlined]
└ @ Core ./broadcast.jl:648
┌ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
│   caller = _broadcast_getindex_evalf at broadcast.jl:648 [inlined]
└ @ Core ./broadcast.jl:648
┌ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
│   caller = _broadcast_getindex_evalf at broadcast.jl:648 [inlined]
└ @ Core ./broadcast.jl:648
┌ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
│   caller = _broadcast_getindex_evalf at broadcast.jl:648 [inlined]
└ @ Core ./broadcast.jl:648
┌ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
│   caller = broadcast(::Function, ::Float64, ::Float64) at broadcast.jl:822
└ @ Base.Broadcast ./broadcast.jl:822
┌ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
│   caller = broadcast at broadcast.jl:822 [inlined]
└ @ Core ./broadcast.jl:822
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = _mapreduce(f::typeof(lgamma), op::typeof(+), #unused#::IndexLinear, A::Vector{Float64}) at reduce.jl:408
└ @ Base ./reduce.jl:408
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = _mapreduce(f::typeof(lgamma), op::typeof(+), #unused#::IndexLinear, A::Vector{Float64}) at reduce.jl:408
└ @ Base ./reduce.jl:408
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = _mapreduce(f::typeof(lgamma), op::typeof(+), #unused#::IndexLinear, A::Vector{Float64}) at reduce.jl:411
└ @ Base ./reduce.jl:411
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = MappingRF at reduce.jl:93 [inlined]
└ @ Core ./reduce.jl:93
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = MappingRF at reduce.jl:93 [inlined]
└ @ Core ./reduce.jl:93
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = MappingRF at reduce.jl:93 [inlined]
└ @ Core ./reduce.jl:93
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = MappingRF at reduce.jl:93 [inlined]
└ @ Core ./reduce.jl:93
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = _mapreduce(f::typeof(lgamma), op::typeof(Base.add_sum), #unused#::IndexLinear, A::Vector{Float64}) at reduce.jl:408
└ @ Base ./reduce.jl:408
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = _mapreduce(f::typeof(lgamma), op::typeof(Base.add_sum), #unused#::IndexLinear, A::Vector{Float64}) at reduce.jl:408
└ @ Base ./reduce.jl:408
┌ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
│   caller = _mapreduce(f::typeof(lgamma), op::typeof(Base.add_sum), #unused#::IndexLinear, A::Vector{Float64}) at reduce.jl:411
└ @ Base ./reduce.jl:411
Test Summary: | Pass  Total
Sensitivities | 3343   3343
     Testing Nabla tests passed 

PkgEval succeeded


################################################################################
# PkgEval teardown: 2020-10-28T11:00:45.950
#


CPU usage: 641.25s (536.46s user, 104.60s kernel)

Network usage:
- eth0: 1.395 MiB received, 87.855 KiB sent

Raw statistics: {"read":"2020-10-28T11:00:46.048080448Z","preread":"0001-01-01T00:00:00Z","pids_stats":{"current":46},"blkio_stats":{"io_service_bytes_recursive":[{"major":259,"minor":0,"op":"Read","value":0},{"major":259,"minor":0,"op":"Write","value":32768},{"major":259,"minor":0,"op":"Sync","value":0},{"major":259,"minor":0,"op":"Async","value":32768},{"major":259,"minor":0,"op":"Total","value":32768},{"major":253,"minor":2,"op":"Read","value":0},{"major":253,"minor":2,"op":"Write","value":32768},{"major":253,"minor":2,"op":"Sync","value":0},{"major":253,"minor":2,"op":"Async","value":32768},{"major":253,"minor":2,"op":"Total","value":32768}],"io_serviced_recursive":[{"major":259,"minor":0,"op":"Read","value":0},{"major":259,"minor":0,"op":"Write","value":5},{"major":259,"minor":0,"op":"Sync","value":0},{"major":259,"minor":0,"op":"Async","value":5},{"major":259,"minor":0,"op":"Total","value":5},{"major":253,"minor":2,"op":"Read","value":0},{"major":253,"minor":2,"op":"Write","value":5},{"major":253,"minor":2,"op":"Sync","value":0},{"major":253,"minor":2,"op":"Async","value":5},{"major":253,"minor":2,"op":"Total","value":5}],"io_queue_recursive":[],"io_service_time_recursive":[],"io_wait_time_recursive":[],"io_merged_recursive":[],"io_time_recursive":[],"sectors_recursive":[]},"num_procs":0,"storage_stats":{},"cpu_stats":{"cpu_usage":{"total_usage":641251501116,"percpu_usage":[514704353,638226026,303448211,526001987,883696698,451185051,606166432,841387317,630168656,1022168009,547751349,933490538,1491976731,757362685,720885572,765547792,733796375,841926224,784932462,725655937,839966000,731569461,740377500,959561043,617379389,694972534,834797091,789594439,786592859,679012923,589939297,472766709,10317634456,10340743142,9963530643,9334140535,8498646993,11257884631,9368965228,10661925741,9456017178,10680841830,9825349006,8422013137,9383526789,10161474617,9623840292,8667802625,8715367217,10641377913,7924193338,9066593716,9748964842,8674727396,10410554153,7283490592,7767965627,11785155265,7481675975,9355224574,8116127769,6871697972,7591297948,7790797770,958050513,539581226,620190856,702207767,701477268,969423662,801286678,496909952,999578353,896756736,398027979,880777529,738287152,451380730,907195828,855683841,777067054,473429977,525082133,1080227052,933464476,701371648,853212791,421563749,576141720,737453193,1094851874,422988399,1050850962,655950086,652085131,677773674,10508012765,11069340461,9294672007,11526678017,10392789886,11019329782,9082140659,9733826972,8242811231,8877886819,8980025045,8101250715,8499210336,8532803012,10311400447,9985993622,9110834551,9152447256,11044491069,10516954865,8164072621,7964647927,9037990585,9902026074,7439474801,8596559203,10769315328,9943217551,7745073185,9214126478,8539305640,7755905657],"usage_in_kernelmode":104600000000,"usage_in_usermode":536460000000},"system_cpu_usage":93775808110000000,"online_cpus":128,"throttling_data":{"periods":8555,"throttled_periods":379,"throttled_time":140594095710}},"precpu_stats":{"cpu_usage":{"total_usage":0,"usage_in_kernelmode":0,"usage_in_usermode":0},"throttling_data":{"periods":0,"throttled_periods":0,"throttled_time":0}},"memory_stats":{"usage":263565312,"max_usage":1142292480,"stats":{"active_anon":218210304,"active_file":0,"cache":17395712,"dirty":0,"hierarchical_memory_limit":9223372036854771712,"hierarchical_memsw_limit":0,"inactive_anon":5554176,"inactive_file":8192,"mapped_file":0,"pgfault":17087294,"pgmajfault":0,"pgpgin":1531728,"pgpgout":1477096,"rss":206376960,"rss_huge":0,"total_active_anon":218210304,"total_active_file":0,"total_cache":17395712,"total_dirty":0,"total_inactive_anon":5554176,"total_inactive_file":8192,"total_mapped_file":0,"total_pgfault":17087294,"total_pgmajfault":0,"total_pgpgin":1531728,"total_pgpgout":1477096,"total_rss":206376960,"total_rss_huge":0,"total_unevictable":0,"total_writeback":0,"unevictable":0,"writeback":0},"limit":540972998656},"name":"/Nabla-fZ38dDLF","id":"cd23f9bfb41ff903e6d2332ded0081518cb3b8fe1ee9d5f6debfce0d8c81ef7a","networks":{"eth0":{"rx_bytes":1462894,"rx_packets":1675,"rx_errors":0,"rx_dropped":30,"tx_bytes":89964,"tx_packets":636,"tx_errors":0,"tx_dropped":0}}}

