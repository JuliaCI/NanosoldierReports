################################################################################
# PkgEval set-up: 2020-10-28T10:32:58.630
#

Julia Version 1.6.0-DEV.1352
Commit 8f71ea7f35 (2020-10-28 02:10 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: AMD EPYC 7502 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-11.0.0 (ORCJIT, znver2)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2
  JULIA_MAX_NUM_PRECOMPILE_FILES = 9223372036854775807



################################################################################
# Installation: 2020-10-28T10:33:00.395
#

   Resolving package versions...
   Installed MuladdMacro ────────────────── v0.2.2
   Installed ProgressMeter ──────────────── v1.4.0
   Installed ProgressLogging ────────────── v0.1.3
   Installed OrderedCollections ─────────── v1.3.1
   Installed Bijectors ──────────────────── v0.8.7
   Installed NNlib ──────────────────────── v0.7.5
   Installed ChainRulesCore ─────────────── v0.9.17
   Installed DynamicPPL ─────────────────── v0.9.6
   Installed PDMats ─────────────────────── v0.10.1
   Installed LeftChildRightSiblingTrees ─── v0.1.2
   Installed StatsFuns ──────────────────── v0.9.5
   Installed CompilerSupportLibraries_jll ─ v0.3.4+0
   Installed DataAPI ────────────────────── v1.3.0
   Installed AbstractMCMC ───────────────── v1.0.1
   Installed QuadGK ─────────────────────── v2.4.1
   Installed ConsoleProgressMonitor ─────── v0.1.2
   Installed FixedPointNumbers ──────────── v0.8.4
   Installed SortingAlgorithms ──────────── v0.3.1
   Installed MappedArrays ───────────────── v0.3.0
   Installed Rmath ──────────────────────── v0.6.1
   Installed OpenSpecFun_jll ────────────── v0.5.3+4
   Installed NaturalSort ────────────────── v1.0.0
   Installed Compat ─────────────────────── v3.23.0
   Installed AbstractTrees ──────────────── v0.3.3
   Installed MacroTools ─────────────────── v0.5.6
   Installed Reexport ───────────────────── v0.2.0
   Installed FillArrays ─────────────────── v0.9.7
   Installed SpecialFunctions ───────────── v0.10.3
   Installed Roots ──────────────────────── v1.0.5
   Installed StatsBase ──────────────────── v0.33.2
   Installed DataStructures ─────────────── v0.18.8
   Installed Missings ───────────────────── v0.4.4
   Installed Rmath_jll ──────────────────── v0.2.2+1
   Installed Distributions ──────────────── v0.23.12
   Installed Requires ───────────────────── v1.1.0
   Installed LoggingExtras ──────────────── v0.4.2
   Installed ArgCheck ───────────────────── v2.1.0
   Installed StaticArrays ───────────────── v0.12.5
   Installed JLLWrappers ────────────────── v1.1.3
   Installed TerminalLoggers ────────────── v0.1.2
Updating `~/.julia/environments/v1.6/Project.toml`
  [366bfd00] + DynamicPPL v0.9.6
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [80f14c24] + AbstractMCMC v1.0.1
  [1520ce14] + AbstractTrees v0.3.3
  [dce04be8] + ArgCheck v2.1.0
  [76274a88] + Bijectors v0.8.7
  [d360d2e6] + ChainRulesCore v0.9.17
  [34da2185] + Compat v3.23.0
  [88cd18e8] + ConsoleProgressMonitor v0.1.2
  [9a962f9c] + DataAPI v1.3.0
  [864edb3b] + DataStructures v0.18.8
  [31c24e10] + Distributions v0.23.12
  [366bfd00] + DynamicPPL v0.9.6
  [1a297f60] + FillArrays v0.9.7
  [53c48c17] + FixedPointNumbers v0.8.4
  [692b3bcd] + JLLWrappers v1.1.3
  [1d6d02ad] + LeftChildRightSiblingTrees v0.1.2
  [e6f89c97] + LoggingExtras v0.4.2
  [1914dd2f] + MacroTools v0.5.6
  [dbb5928d] + MappedArrays v0.3.0
  [e1d29d7a] + Missings v0.4.4
  [46d2c3a1] + MuladdMacro v0.2.2
  [872c559c] + NNlib v0.7.5
  [c020b1a1] + NaturalSort v1.0.0
  [bac558e1] + OrderedCollections v1.3.1
  [90014a1f] + PDMats v0.10.1
  [33c8b6b6] + ProgressLogging v0.1.3
  [92933f4c] + ProgressMeter v1.4.0
  [1fd47b50] + QuadGK v2.4.1
  [189a3867] + Reexport v0.2.0
  [ae029012] + Requires v1.1.0
  [79098fc4] + Rmath v0.6.1
  [f2b01f46] + Roots v1.0.5
  [a2af1166] + SortingAlgorithms v0.3.1
  [276daf66] + SpecialFunctions v0.10.3
  [90137ffa] + StaticArrays v0.12.5
  [2913bbd2] + StatsBase v0.33.2
  [4c63d2b9] + StatsFuns v0.9.5
  [5d786b92] + TerminalLoggers v0.1.2
  [e66e0078] + CompilerSupportLibraries_jll v0.3.4+0
  [efe28fd5] + OpenSpecFun_jll v0.5.3+4
  [f50d1b31] + Rmath_jll v0.2.2+1
  [0dad84c5] + ArgTools
  [56f22d72] + Artifacts
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [f43a241f] + Downloads
  [b77e0a4c] + InteractiveUtils
  [b27032c2] + LibCURL
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [4607b0f0] + SuiteSparse
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
  [deac9b47] + LibCURL_jll
  [14a3606d] + MozillaCACerts_jll


################################################################################
# Testing: 2020-10-28T10:33:05.818
#


     Testing DynamicPPL
Status `/tmp/jl_tfzHAY/Project.toml`
  [80f14c24] AbstractMCMC v1.0.1
  [0bf59076] AdvancedHMC v0.2.26
  [5b7e9947] AdvancedMH v0.5.1
  [b5ca4192] AdvancedVI v0.1.0
  [76274a88] Bijectors v0.8.7
  [31c24e10] Distributions v0.23.12
  [ced4e74d] DistributionsAD v0.6.9
  [ffbed154] DocStringExtensions v0.8.3
  [366bfd00] DynamicPPL v0.9.6
  [cad2338a] EllipticalSliceSampling v0.2.2
  [f6369f11] ForwardDiff v0.10.12
  [6f1fad26] Libtask v0.4.2
  [6fdf6af0] LogDensityProblems v0.10.3
  [c7f686f2] MCMCChains v4.2.4
  [1914dd2f] MacroTools v0.5.6
  [86f7a689] NamedArrays v0.9.4
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v1.1.0
  [276daf66] SpecialFunctions v0.10.3
  [2913bbd2] StatsBase v0.33.2
  [4c63d2b9] StatsFuns v0.9.5
  [9f7883ad] Tracker v0.2.12
  [e88e6eb3] Zygote v0.5.9
  [700de1a5] ZygoteRules v0.2.0
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [de0858da] Printf
  [9a3f8284] Random
  [9e88b42a] Serialization
  [10745b16] Statistics
  [8dfed614] Test
Status `/tmp/jl_tfzHAY/Manifest.toml`
  [621f4979] AbstractFFTs v0.5.0
  [80f14c24] AbstractMCMC v1.0.1
  [1520ce14] AbstractTrees v0.3.3
  [79e6a3ab] Adapt v2.3.0
  [0bf59076] AdvancedHMC v0.2.26
  [5b7e9947] AdvancedMH v0.5.1
  [b5ca4192] AdvancedVI v0.1.0
  [dce04be8] ArgCheck v2.1.0
  [4fba245c] ArrayInterface v2.13.7
  [4c555306] ArrayLayouts v0.4.10
  [39de3d68] AxisArrays v0.4.3
  [6e4b80f9] BenchmarkTools v0.5.0
  [76274a88] Bijectors v0.8.7
  [b99e7846] BinaryProvider v0.5.10
  [082447d4] ChainRules v0.7.31
  [d360d2e6] ChainRulesCore v0.9.17
  [cdddcdb0] ChainRulesTestUtils v0.5.3
  [861a8166] Combinatorics v1.0.2
  [bbf7d656] CommonSubexpressions v0.3.0
  [34da2185] Compat v3.23.0
  [88cd18e8] ConsoleProgressMonitor v0.1.2
  [adafc99b] CpuId v0.2.2
  [a8cc5b0e] Crayons v4.0.4
  [9a962f9c] DataAPI v1.3.0
  [864edb3b] DataStructures v0.18.8
  [e2d170a0] DataValueInterfaces v1.0.0
  [163ba53b] DiffResults v1.0.2
  [b552c78f] DiffRules v1.0.1
  [31c24e10] Distributions v0.23.12
  [ced4e74d] DistributionsAD v0.6.9
  [ffbed154] DocStringExtensions v0.8.3
  [366bfd00] DynamicPPL v0.9.6
  [da5c29d0] EllipsisNotation v0.4.0
  [cad2338a] EllipticalSliceSampling v0.2.2
  [1a297f60] FillArrays v0.9.7
  [26cc04aa] FiniteDifferences v0.11.2
  [53c48c17] FixedPointNumbers v0.8.4
  [59287772] Formatting v0.4.1
  [f6369f11] ForwardDiff v0.10.12
  [7869d1d1] IRTools v0.4.1
  [505f98c9] InplaceOps v0.3.0
  [8197267c] IntervalSets v0.5.1
  [41ab1584] InvertedIndices v1.0.0
  [c8e1da08] IterTools v1.3.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [692b3bcd] JLLWrappers v1.1.3
  [682c06a0] JSON v0.21.1
  [1d6d02ad] LeftChildRightSiblingTrees v0.1.2
  [6f1fad26] Libtask v0.4.2
  [6fdf6af0] LogDensityProblems v0.10.3
  [e6f89c97] LoggingExtras v0.4.2
  [bdcacae8] LoopVectorization v0.8.26
  [c7f686f2] MCMCChains v4.2.4
  [e80e1ace] MLJModelInterface v0.3.6
  [1914dd2f] MacroTools v0.5.6
  [dbb5928d] MappedArrays v0.3.0
  [e1d29d7a] Missings v0.4.4
  [46d2c3a1] MuladdMacro v0.2.2
  [872c559c] NNlib v0.7.5
  [77ba4419] NaNMath v0.3.4
  [86f7a689] NamedArrays v0.9.4
  [c020b1a1] NaturalSort v1.0.0
  [6fe1bfb0] OffsetArrays v1.3.1
  [bac558e1] OrderedCollections v1.3.1
  [90014a1f] PDMats v0.10.1
  [d96e819e] Parameters v0.12.1
  [69de0a69] Parsers v1.0.11
  [08abe8d2] PrettyTables v0.9.1
  [33c8b6b6] ProgressLogging v0.1.3
  [92933f4c] ProgressMeter v1.4.0
  [1fd47b50] QuadGK v2.4.1
  [b3c3ace0] RangeArrays v0.3.2
  [3cdcf5f2] RecipesBase v1.1.0
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v1.1.0
  [708f8203] Richardson v1.2.0
  [79098fc4] Rmath v0.6.1
  [f2b01f46] Roots v1.0.5
  [21efa798] SIMDPirates v0.8.25
  [476501e8] SLEEFPirates v0.5.5
  [321657f4] ScientificTypes v1.1.0
  [a2af1166] SortingAlgorithms v0.3.1
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.5
  [2913bbd2] StatsBase v0.33.2
  [4c63d2b9] StatsFuns v0.9.5
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.1.0
  [5d786b92] TerminalLoggers v0.1.2
  [9f7883ad] Tracker v0.2.12
  [84d833dd] TransformVariables v0.3.10
  [3a884ed6] UnPack v1.0.2
  [3d5dd08c] VectorizationBase v0.12.33
  [e88e6eb3] Zygote v0.5.9
  [700de1a5] ZygoteRules v0.2.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.4+0
  [efe28fd5] OpenSpecFun_jll v0.5.3+4
  [f50d1b31] Rmath_jll v0.2.2+1
  [0dad84c5] ArgTools
  [56f22d72] Artifacts
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [f43a241f] Downloads
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [b27032c2] LibCURL
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [4607b0f0] SuiteSparse
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
  [deac9b47] LibCURL_jll
  [14a3606d] MozillaCACerts_jll
     Testing Running tests...
[ Info: [Turing]: progress logging is disabled globally
[ Info: [AdvancedVI]: global PROGRESS is set as false
┌ Warning: you are using the internal variable `_varinfo`
└ @ DynamicPPL ~/.julia/packages/DynamicPPL/jOFDR/src/compiler.jl:169
┌ Warning: you are using the internal variable `_varinfo`
└ @ DynamicPPL ~/.julia/packages/DynamicPPL/jOFDR/src/compiler.jl:169
┌ Warning: you are using the internal variable `_sampler`
└ @ DynamicPPL ~/.julia/packages/DynamicPPL/jOFDR/src/compiler.jl:169
┌ Warning: you are using the internal variable `_model`
└ @ DynamicPPL ~/.julia/packages/DynamicPPL/jOFDR/src/compiler.jl:169
┌ Warning: you are using the internal variable `_context`
└ @ DynamicPPL ~/.julia/packages/DynamicPPL/jOFDR/src/compiler.jl:169
┌ Warning: you are using the internal variable `_rng`
└ @ DynamicPPL ~/.julia/packages/DynamicPPL/jOFDR/src/compiler.jl:169
┌ Warning: you are using the internal variable `_varinfo`
└ @ DynamicPPL ~/.julia/packages/DynamicPPL/jOFDR/src/compiler.jl:169
[ Info: (symbol = :y, exact = 0.5, evaluated = 0.5)
[ Info: (symbol = :y, exact = 0.5, evaluated = 0.47)
beta binomial: Error During Test at /home/pkgeval/.julia/packages/DynamicPPL/jOFDR/test/compiler.jl:40
  Got exception outside of a @test
  type Task has no field state
  Stacktrace:
    [1] setproperty!(x::Task, f::Symbol, v::Symbol)
      @ Base ./Base.jl:34
    [2] copy(ctask::CTask)
      @ Libtask ~/.julia/packages/Libtask/OtgFl/src/ctask.jl:97
    [3] copy(trace::Main.Turing.Core.Trace{Sampler{SMC{(), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.SMCState{VarInfo{NamedTuple{(:p, :x), Tuple{DynamicPPL.Metadata{Dict{VarName{:p, Tuple{}}, Int64}, Vector{Beta{Float64}}, Vector{VarName{:p, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:x, Tuple{}}, Int64}, Vector{Bernoulli{Float64}}, Vector{VarName{:x, Tuple{}}}, BitVector, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:p, :x), Tuple{DynamicPPL.Metadata{Dict{VarName{:p, Tuple{}}, Int64}, Vector{Beta{Float64}}, Vector{VarName{:p, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:x, Tuple{}}, Int64}, Vector{Bernoulli{Float64}}, Vector{VarName{:x, Tuple{}}}, BitVector, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Model{var"#61#125", (:obs,), (), (), Tuple{Vector{Int64}}, Tuple{}}})
      @ Main.Turing.Core ~/.julia/packages/DynamicPPL/jOFDR/test/Turing/core/container.jl:18
    [4] fork(trace::Main.Turing.Core.Trace{Sampler{SMC{(), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.SMCState{VarInfo{NamedTuple{(:p, :x), Tuple{DynamicPPL.Metadata{Dict{VarName{:p, Tuple{}}, Int64}, Vector{Beta{Float64}}, Vector{VarName{:p, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:x, Tuple{}}, Int64}, Vector{Bernoulli{Float64}}, Vector{VarName{:x, Tuple{}}}, BitVector, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:p, :x), Tuple{DynamicPPL.Metadata{Dict{VarName{:p, Tuple{}}, Int64}, Vector{Beta{Float64}}, Vector{VarName{:p, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:x, Tuple{}}, Int64}, Vector{Bernoulli{Float64}}, Vector{VarName{:x, Tuple{}}}, BitVector, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Model{var"#61#125", (:obs,), (), (), Tuple{Vector{Int64}}, Tuple{}}}, is_ref::Bool)
      @ Main.Turing.Core ~/.julia/packages/DynamicPPL/jOFDR/test/Turing/core/container.jl:61
    [5] resample_propagate!(pc::Main.Turing.Core.ParticleContainer{Main.Turing.Core.Trace{Sampler{SMC{(), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.SMCState{VarInfo{NamedTuple{(:p, :x), Tuple{DynamicPPL.Metadata{Dict{VarName{:p, Tuple{}}, Int64}, Vector{Beta{Float64}}, Vector{VarName{:p, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:x, Tuple{}}, Int64}, Vector{Bernoulli{Float64}}, Vector{VarName{:x, Tuple{}}}, BitVector, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:p, :x), Tuple{DynamicPPL.Metadata{Dict{VarName{:p, Tuple{}}, Int64}, Vector{Beta{Float64}}, Vector{VarName{:p, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:x, Tuple{}}, Int64}, Vector{Bernoulli{Float64}}, Vector{VarName{:x, Tuple{}}}, BitVector, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Model{var"#61#125", (:obs,), (), (), Tuple{Vector{Int64}}, Tuple{}}}}, randcat::typeof(Main.Turing.Inference.resample_systematic), ref::Nothing; weights::Vector{Float64})
      @ Main.Turing.Core ~/.julia/packages/DynamicPPL/jOFDR/test/Turing/core/container.jl:216
    [6] #resample_propagate!#6
      @ ~/.julia/packages/DynamicPPL/jOFDR/test/Turing/core/container.jl:356 [inlined]
    [7] resample_propagate!(pc::Main.Turing.Core.ParticleContainer{Main.Turing.Core.Trace{Sampler{SMC{(), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.SMCState{VarInfo{NamedTuple{(:p, :x), Tuple{DynamicPPL.Metadata{Dict{VarName{:p, Tuple{}}, Int64}, Vector{Beta{Float64}}, Vector{VarName{:p, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:x, Tuple{}}, Int64}, Vector{Bernoulli{Float64}}, Vector{VarName{:x, Tuple{}}}, BitVector, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:p, :x), Tuple{DynamicPPL.Metadata{Dict{VarName{:p, Tuple{}}, Int64}, Vector{Beta{Float64}}, Vector{VarName{:p, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:x, Tuple{}}, Int64}, Vector{Bernoulli{Float64}}, Vector{VarName{:x, Tuple{}}}, BitVector, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Model{var"#61#125", (:obs,), (), (), Tuple{Vector{Int64}}, Tuple{}}}}, resampler::Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}, ref::Nothing)
      @ Main.Turing.Core ~/.julia/packages/DynamicPPL/jOFDR/test/Turing/core/container.jl:353
    [8] sweep!(pc::Main.Turing.Core.ParticleContainer{Main.Turing.Core.Trace{Sampler{SMC{(), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.SMCState{VarInfo{NamedTuple{(:p, :x), Tuple{DynamicPPL.Metadata{Dict{VarName{:p, Tuple{}}, Int64}, Vector{Beta{Float64}}, Vector{VarName{:p, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:x, Tuple{}}, Int64}, Vector{Bernoulli{Float64}}, Vector{VarName{:x, Tuple{}}}, BitVector, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:p, :x), Tuple{DynamicPPL.Metadata{Dict{VarName{:p, Tuple{}}, Int64}, Vector{Beta{Float64}}, Vector{VarName{:p, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:x, Tuple{}}, Int64}, Vector{Bernoulli{Float64}}, Vector{VarName{:x, Tuple{}}}, BitVector, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Model{var"#61#125", (:obs,), (), (), Tuple{Vector{Int64}}, Tuple{}}}}, resampler::Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64})
      @ Main.Turing.Core ~/.julia/packages/DynamicPPL/jOFDR/test/Turing/core/container.jl:318
    [9] sample_init!(::Random._GLOBAL_RNG, model::Model{var"#61#125", (:obs,), (), (), Tuple{Vector{Int64}}, Tuple{}}, spl::Sampler{SMC{(), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.SMCState{VarInfo{NamedTuple{(:p, :x), Tuple{DynamicPPL.Metadata{Dict{VarName{:p, Tuple{}}, Int64}, Vector{Beta{Float64}}, Vector{VarName{:p, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:x, Tuple{}}, Int64}, Vector{Bernoulli{Float64}}, Vector{VarName{:x, Tuple{}}}, BitVector, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Main.Turing.Inference ~/.julia/packages/DynamicPPL/jOFDR/test/Turing/inference/AdvancedSMC.jl:117
   [10] sample_init!
      @ ~/.julia/packages/DynamicPPL/jOFDR/test/Turing/inference/AdvancedSMC.jl:100 [inlined]
   [11] mcmcsample(rng::Random._GLOBAL_RNG, model::Model{var"#61#125", (:obs,), (), (), Tuple{Vector{Int64}}, Tuple{}}, sampler::Sampler{SMC{(), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.SMCState{VarInfo{NamedTuple{(:p, :x), Tuple{DynamicPPL.Metadata{Dict{VarName{:p, Tuple{}}, Int64}, Vector{Beta{Float64}}, Vector{VarName{:p, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:x, Tuple{}}, Int64}, Vector{Bernoulli{Float64}}, Vector{VarName{:x, Tuple{}}}, BitVector, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:74
   [12] sample(rng::Random._GLOBAL_RNG, model::Model{var"#61#125", (:obs,), (), (), Tuple{Vector{Int64}}, Tuple{}}, sampler::Sampler{SMC{(), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.SMCState{VarInfo{NamedTuple{(:p, :x), Tuple{DynamicPPL.Metadata{Dict{VarName{:p, Tuple{}}, Int64}, Vector{Beta{Float64}}, Vector{VarName{:p, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:x, Tuple{}}, Int64}, Vector{Bernoulli{Float64}}, Vector{VarName{:x, Tuple{}}}, BitVector, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Main.Turing.Inference ~/.julia/packages/DynamicPPL/jOFDR/test/Turing/inference/Inference.jl:178
   [13] sample(rng::Random._GLOBAL_RNG, model::Model{var"#61#125", (:obs,), (), (), Tuple{Vector{Int64}}, Tuple{}}, sampler::Sampler{SMC{(), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.SMCState{VarInfo{NamedTuple{(:p, :x), Tuple{DynamicPPL.Metadata{Dict{VarName{:p, Tuple{}}, Int64}, Vector{Beta{Float64}}, Vector{VarName{:p, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:x, Tuple{}}, Int64}, Vector{Bernoulli{Float64}}, Vector{VarName{:x, Tuple{}}}, BitVector, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, N::Int64)
      @ Main.Turing.Inference ~/.julia/packages/DynamicPPL/jOFDR/test/Turing/inference/Inference.jl:177
   [14] sample(rng::Random._GLOBAL_RNG, model::Model{var"#61#125", (:obs,), (), (), Tuple{Vector{Int64}}, Tuple{}}, alg::SMC{(), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Main.Turing.Inference ~/.julia/packages/DynamicPPL/jOFDR/test/Turing/inference/Inference.jl:164
   [15] sample
      @ ~/.julia/packages/DynamicPPL/jOFDR/test/Turing/inference/Inference.jl:164 [inlined]
   [16] #sample#1
      @ ~/.julia/packages/DynamicPPL/jOFDR/test/Turing/inference/Inference.jl:154 [inlined]
   [17] sample(model::Model{var"#61#125", (:obs,), (), (), Tuple{Vector{Int64}}, Tuple{}}, alg::SMC{(), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, N::Int64)
      @ Main.Turing.Inference ~/.julia/packages/DynamicPPL/jOFDR/test/Turing/inference/Inference.jl:154
   [18] macro expansion
      @ ~/.julia/packages/DynamicPPL/jOFDR/test/compiler.jl:59 [inlined]
   [19] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [20] macro expansion
      @ ~/.julia/packages/DynamicPPL/jOFDR/test/compiler.jl:41 [inlined]
   [21] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [22] top-level scope
      @ ~/.julia/packages/DynamicPPL/jOFDR/test/compiler.jl:20
   [23] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [24] macro expansion
      @ ~/.julia/packages/DynamicPPL/jOFDR/test/runtests.jl:23 [inlined]
   [25] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [26] top-level scope
      @ ~/.julia/packages/DynamicPPL/jOFDR/test/runtests.jl:22
   [27] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [28] top-level scope
      @ none:6
   [29] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [30] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [31] _start()
      @ Base ./client.jl:485
WARNING: Method definition testmodel0() in module Main at /home/pkgeval/.julia/packages/DynamicPPL/jOFDR/src/compiler.jl:344 overwritten on the same line.
WARNING: Method definition testmodel0(Any) in module Main at /home/pkgeval/.julia/packages/DynamicPPL/jOFDR/src/compiler.jl:344 overwritten on the same line.
[ Info: Testing the compiler's ability to catch bad models...
WARNING: Method definition testmodel(Any) in module Main at /home/pkgeval/.julia/packages/DynamicPPL/jOFDR/src/compiler.jl:344 overwritten on the same line.
WARNING: Method definition testmodel(Any) in module Main at /home/pkgeval/.julia/packages/DynamicPPL/jOFDR/src/compiler.jl:344 overwritten on the same line.
WARNING: Method definition testmodel(Any) in module Main at /home/pkgeval/.julia/packages/DynamicPPL/jOFDR/src/compiler.jl:344 overwritten on the same line.
WARNING: Method definition testmodel(Any) in module Main at /home/pkgeval/.julia/packages/DynamicPPL/jOFDR/src/compiler.jl:344 overwritten on the same line.
new grammar: Error During Test at /home/pkgeval/.julia/packages/DynamicPPL/jOFDR/test/compiler.jl:287
  Got exception outside of a @test
  type Task has no field state
  Stacktrace:
    [1] setproperty!(x::Task, f::Symbol, v::Symbol)
      @ Base ./Base.jl:34
    [2] copy(ctask::CTask)
      @ Libtask ~/.julia/packages/Libtask/OtgFl/src/ctask.jl:97
    [3] copy(trace::Main.Turing.Core.Trace{Sampler{PG{(), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:priors,), Tuple{DynamicPPL.Metadata{Dict{VarName{:priors, Tuple{Tuple{Int64}}}, Int64}, Vector{Distribution{Univariate, Continuous}}, Vector{VarName{:priors, Tuple{Tuple{Int64}}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:priors,), Tuple{DynamicPPL.Metadata{Dict{VarName{:priors, Tuple{Tuple{Int64}}}, Int64}, Vector{Distribution{Univariate, Continuous}}, Vector{VarName{:priors, Tuple{Tuple{Int64}}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Model{var"#87#166", (:x,), (), (), Tuple{Matrix{Float64}}, Tuple{}}})
      @ Main.Turing.Core ~/.julia/packages/DynamicPPL/jOFDR/test/Turing/core/container.jl:18
    [4] fork(trace::Main.Turing.Core.Trace{Sampler{PG{(), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:priors,), Tuple{DynamicPPL.Metadata{Dict{VarName{:priors, Tuple{Tuple{Int64}}}, Int64}, Vector{Distribution{Univariate, Continuous}}, Vector{VarName{:priors, Tuple{Tuple{Int64}}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:priors,), Tuple{DynamicPPL.Metadata{Dict{VarName{:priors, Tuple{Tuple{Int64}}}, Int64}, Vector{Distribution{Univariate, Continuous}}, Vector{VarName{:priors, Tuple{Tuple{Int64}}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Model{var"#87#166", (:x,), (), (), Tuple{Matrix{Float64}}, Tuple{}}}, is_ref::Bool)
      @ Main.Turing.Core ~/.julia/packages/DynamicPPL/jOFDR/test/Turing/core/container.jl:61
    [5] resample_propagate!(pc::Main.Turing.Core.ParticleContainer{Main.Turing.Core.Trace{Sampler{PG{(), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:priors,), Tuple{DynamicPPL.Metadata{Dict{VarName{:priors, Tuple{Tuple{Int64}}}, Int64}, Vector{Distribution{Univariate, Continuous}}, Vector{VarName{:priors, Tuple{Tuple{Int64}}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:priors,), Tuple{DynamicPPL.Metadata{Dict{VarName{:priors, Tuple{Tuple{Int64}}}, Int64}, Vector{Distribution{Univariate, Continuous}}, Vector{VarName{:priors, Tuple{Tuple{Int64}}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Model{var"#87#166", (:x,), (), (), Tuple{Matrix{Float64}}, Tuple{}}}}, randcat::typeof(Main.Turing.Inference.resample_systematic), ref::Nothing; weights::Vector{Float64})
      @ Main.Turing.Core ~/.julia/packages/DynamicPPL/jOFDR/test/Turing/core/container.jl:216
    [6] #resample_propagate!#6
      @ ~/.julia/packages/DynamicPPL/jOFDR/test/Turing/core/container.jl:356 [inlined]
    [7] resample_propagate!(pc::Main.Turing.Core.ParticleContainer{Main.Turing.Core.Trace{Sampler{PG{(), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:priors,), Tuple{DynamicPPL.Metadata{Dict{VarName{:priors, Tuple{Tuple{Int64}}}, Int64}, Vector{Distribution{Univariate, Continuous}}, Vector{VarName{:priors, Tuple{Tuple{Int64}}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:priors,), Tuple{DynamicPPL.Metadata{Dict{VarName{:priors, Tuple{Tuple{Int64}}}, Int64}, Vector{Distribution{Univariate, Continuous}}, Vector{VarName{:priors, Tuple{Tuple{Int64}}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Model{var"#87#166", (:x,), (), (), Tuple{Matrix{Float64}}, Tuple{}}}}, resampler::Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}, ref::Nothing)
      @ Main.Turing.Core ~/.julia/packages/DynamicPPL/jOFDR/test/Turing/core/container.jl:353
    [8] sweep!(pc::Main.Turing.Core.ParticleContainer{Main.Turing.Core.Trace{Sampler{PG{(), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:priors,), Tuple{DynamicPPL.Metadata{Dict{VarName{:priors, Tuple{Tuple{Int64}}}, Int64}, Vector{Distribution{Univariate, Continuous}}, Vector{VarName{:priors, Tuple{Tuple{Int64}}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:priors,), Tuple{DynamicPPL.Metadata{Dict{VarName{:priors, Tuple{Tuple{Int64}}}, Int64}, Vector{Distribution{Univariate, Continuous}}, Vector{VarName{:priors, Tuple{Tuple{Int64}}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Model{var"#87#166", (:x,), (), (), Tuple{Matrix{Float64}}, Tuple{}}}}, resampler::Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64})
      @ Main.Turing.Core ~/.julia/packages/DynamicPPL/jOFDR/test/Turing/core/container.jl:318
    [9] step!(::Random._GLOBAL_RNG, model::Model{var"#87#166", (:x,), (), (), Tuple{Matrix{Float64}}, Tuple{}}, spl::Sampler{PG{(), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:priors,), Tuple{DynamicPPL.Metadata{Dict{VarName{:priors, Tuple{Tuple{Int64}}}, Int64}, Vector{Distribution{Univariate, Continuous}}, Vector{VarName{:priors, Tuple{Tuple{Int64}}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, ::Int64, transition::Nothing; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Main.Turing.Inference ~/.julia/packages/DynamicPPL/jOFDR/test/Turing/inference/AdvancedSMC.jl:266
   [10] #step!#8
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/interface.jl:87 [inlined]
   [11] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:78 [inlined]
   [12] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:15 [inlined]
   [13] mcmcsample(rng::Random._GLOBAL_RNG, model::Model{var"#87#166", (:x,), (), (), Tuple{Matrix{Float64}}, Tuple{}}, sampler::Sampler{PG{(), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:priors,), Tuple{DynamicPPL.Metadata{Dict{VarName{:priors, Tuple{Tuple{Int64}}}, Int64}, Vector{Distribution{Univariate, Continuous}}, Vector{VarName{:priors, Tuple{Tuple{Int64}}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
   [14] sample(rng::Random._GLOBAL_RNG, model::Model{var"#87#166", (:x,), (), (), Tuple{Matrix{Float64}}, Tuple{}}, sampler::Sampler{PG{(), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:priors,), Tuple{DynamicPPL.Metadata{Dict{VarName{:priors, Tuple{Tuple{Int64}}}, Int64}, Vector{Distribution{Univariate, Continuous}}, Vector{VarName{:priors, Tuple{Tuple{Int64}}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Main.Turing.Inference ~/.julia/packages/DynamicPPL/jOFDR/test/Turing/inference/Inference.jl:178
   [15] sample(rng::Random._GLOBAL_RNG, model::Model{var"#87#166", (:x,), (), (), Tuple{Matrix{Float64}}, Tuple{}}, sampler::Sampler{PG{(), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:priors,), Tuple{DynamicPPL.Metadata{Dict{VarName{:priors, Tuple{Tuple{Int64}}}, Int64}, Vector{Distribution{Univariate, Continuous}}, Vector{VarName{:priors, Tuple{Tuple{Int64}}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, N::Int64)
      @ Main.Turing.Inference ~/.julia/packages/DynamicPPL/jOFDR/test/Turing/inference/Inference.jl:177
   [16] sample(rng::Random._GLOBAL_RNG, model::Model{var"#87#166", (:x,), (), (), Tuple{Matrix{Float64}}, Tuple{}}, alg::PG{(), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Main.Turing.Inference ~/.julia/packages/DynamicPPL/jOFDR/test/Turing/inference/Inference.jl:164
   [17] sample
      @ ~/.julia/packages/DynamicPPL/jOFDR/test/Turing/inference/Inference.jl:164 [inlined]
   [18] #sample#1
      @ ~/.julia/packages/DynamicPPL/jOFDR/test/Turing/inference/Inference.jl:154 [inlined]
   [19] sample(model::Model{var"#87#166", (:x,), (), (), Tuple{Matrix{Float64}}, Tuple{}}, alg::PG{(), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, N::Int64)
      @ Main.Turing.Inference ~/.julia/packages/DynamicPPL/jOFDR/test/Turing/inference/Inference.jl:154
   [20] macro expansion
      @ ~/.julia/packages/DynamicPPL/jOFDR/test/compiler.jl:300 [inlined]
   [21] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [22] macro expansion
      @ ~/.julia/packages/DynamicPPL/jOFDR/test/compiler.jl:288 [inlined]
   [23] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [24] top-level scope
      @ ~/.julia/packages/DynamicPPL/jOFDR/test/compiler.jl:20
   [25] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [26] macro expansion
      @ ~/.julia/packages/DynamicPPL/jOFDR/test/runtests.jl:23 [inlined]
   [27] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [28] top-level scope
      @ ~/.julia/packages/DynamicPPL/jOFDR/test/runtests.jl:22
   [29] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [30] top-level scope
      @ none:6
   [31] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [32] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [33] _start()
      @ Base ./client.jl:485
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 1.8741447602030021)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.1816996319031534)
sample: Error During Test at /home/pkgeval/.julia/packages/DynamicPPL/jOFDR/test/compiler.jl:372
  Got exception outside of a @test
  type Task has no field state
  Stacktrace:
    [1] setproperty!(x::Task, f::Symbol, v::Symbol)
      @ Base ./Base.jl:34
    [2] copy(ctask::CTask)
      @ Libtask ~/.julia/packages/Libtask/OtgFl/src/ctask.jl:97
    [3] copy(trace::Main.Turing.Core.Trace{Sampler{PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Model{var"#48#49", (), (), (), Tuple{}, Tuple{}}})
      @ Main.Turing.Core ~/.julia/packages/DynamicPPL/jOFDR/test/Turing/core/container.jl:18
    [4] fork(trace::Main.Turing.Core.Trace{Sampler{PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Model{var"#48#49", (), (), (), Tuple{}, Tuple{}}}, is_ref::Bool)
      @ Main.Turing.Core ~/.julia/packages/DynamicPPL/jOFDR/test/Turing/core/container.jl:61
    [5] resample_propagate!(pc::Main.Turing.Core.ParticleContainer{Main.Turing.Core.Trace{Sampler{PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Model{var"#48#49", (), (), (), Tuple{}, Tuple{}}}}, randcat::typeof(Main.Turing.Inference.resample_systematic), ref::Nothing; weights::Vector{Float64})
      @ Main.Turing.Core ~/.julia/packages/DynamicPPL/jOFDR/test/Turing/core/container.jl:216
    [6] #resample_propagate!#6
      @ ~/.julia/packages/DynamicPPL/jOFDR/test/Turing/core/container.jl:356 [inlined]
    [7] resample_propagate!(pc::Main.Turing.Core.ParticleContainer{Main.Turing.Core.Trace{Sampler{PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Model{var"#48#49", (), (), (), Tuple{}, Tuple{}}}}, resampler::Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}, ref::Nothing)
      @ Main.Turing.Core ~/.julia/packages/DynamicPPL/jOFDR/test/Turing/core/container.jl:353
    [8] sweep!(pc::Main.Turing.Core.ParticleContainer{Main.Turing.Core.Trace{Sampler{PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Model{var"#48#49", (), (), (), Tuple{}, Tuple{}}}}, resampler::Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64})
      @ Main.Turing.Core ~/.julia/packages/DynamicPPL/jOFDR/test/Turing/core/container.jl:318
    [9] step!(::Random._GLOBAL_RNG, model::Model{var"#48#49", (), (), (), Tuple{}, Tuple{}}, spl::Sampler{PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, ::Int64, transition::Main.Turing.Inference.ParticleTransition{NamedTuple{(:s, :m), Tuple{Tuple{Vector{Float64}, Vector{String}}, Tuple{Vector{Float64}, Vector{String}}}}, Float64}; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Main.Turing.Inference ~/.julia/packages/DynamicPPL/jOFDR/test/Turing/inference/AdvancedSMC.jl:266
   [10] (::Main.Turing.Inference.var"#85#86"{Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}}, Random._GLOBAL_RNG, Model{var"#48#49", (), (), (), Tuple{}, Tuple{}}, Sampler{Gibbs{(:m, :s), Tuple{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}}}, Main.Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Main.Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, Sampler{PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}}}, Int64, Main.Turing.Inference.GibbsTransition{NamedTuple{(:s, :m), Tuple{Tuple{Vector{Float64}, Vector{String}}, Tuple{Vector{Float64}, Vector{String}}}}, Float64, Vector{Any}}})(::Tuple{Int64, Sampler{PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}})
      @ Main.Turing.Inference ~/.julia/packages/DynamicPPL/jOFDR/test/Turing/inference/gibbs.jl:189
   [11] iterate
      @ ./generator.jl:47 [inlined]
   [12] collect_to!(dest::Vector{Main.Turing.Inference.HamiltonianTransition{NamedTuple{(:s, :m), Tuple{Tuple{Vector{Float64}, Vector{String}}, Tuple{Vector{Float64}, Vector{String}}}}, NamedTuple{(:n_steps, :is_accept, :acceptance_rate, :log_density, :hamiltonian_energy, :hamiltonian_energy_error, :step_size, :nom_step_size), Tuple{Int64, Bool, Float64, Float64, Float64, Float64, Float64, Float64}}, Float64}}, itr::Base.Generator{Base.Iterators.Enumerate{Tuple{Sampler{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Main.Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, Sampler{PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}}, Main.Turing.Inference.var"#85#86"{Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}}, Random._GLOBAL_RNG, Model{var"#48#49", (), (), (), Tuple{}, Tuple{}}, Sampler{Gibbs{(:m, :s), Tuple{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}}}, Main.Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Main.Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, Sampler{PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}}}, Int64, Main.Turing.Inference.GibbsTransition{NamedTuple{(:s, :m), Tuple{Tuple{Vector{Float64}, Vector{String}}, Tuple{Vector{Float64}, Vector{String}}}}, Float64, Vector{Any}}}}, offs::Int64, st::Tuple{Int64, Int64})
      @ Base ./array.jl:710
   [13] collect_to_with_first!(dest::Vector{Main.Turing.Inference.HamiltonianTransition{NamedTuple{(:s, :m), Tuple{Tuple{Vector{Float64}, Vector{String}}, Tuple{Vector{Float64}, Vector{String}}}}, NamedTuple{(:n_steps, :is_accept, :acceptance_rate, :log_density, :hamiltonian_energy, :hamiltonian_energy_error, :step_size, :nom_step_size), Tuple{Int64, Bool, Float64, Float64, Float64, Float64, Float64, Float64}}, Float64}}, v1::Main.Turing.Inference.HamiltonianTransition{NamedTuple{(:s, :m), Tuple{Tuple{Vector{Float64}, Vector{String}}, Tuple{Vector{Float64}, Vector{String}}}}, NamedTuple{(:n_steps, :is_accept, :acceptance_rate, :log_density, :hamiltonian_energy, :hamiltonian_energy_error, :step_size, :nom_step_size), Tuple{Int64, Bool, Float64, Float64, Float64, Float64, Float64, Float64}}, Float64}, itr::Base.Generator{Base.Iterators.Enumerate{Tuple{Sampler{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Main.Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, Sampler{PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}}, Main.Turing.Inference.var"#85#86"{Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}}, Random._GLOBAL_RNG, Model{var"#48#49", (), (), (), Tuple{}, Tuple{}}, Sampler{Gibbs{(:m, :s), Tuple{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}}}, Main.Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Main.Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, Sampler{PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}}}, Int64, Main.Turing.Inference.GibbsTransition{NamedTuple{(:s, :m), Tuple{Tuple{Vector{Float64}, Vector{String}}, Tuple{Vector{Float64}, Vector{String}}}}, Float64, Vector{Any}}}}, st::Tuple{Int64, Int64})
      @ Base ./array.jl:688
   [14] collect(itr::Base.Generator{Base.Iterators.Enumerate{Tuple{Sampler{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Main.Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, Sampler{PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}}, Main.Turing.Inference.var"#85#86"{Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}}, Random._GLOBAL_RNG, Model{var"#48#49", (), (), (), Tuple{}, Tuple{}}, Sampler{Gibbs{(:m, :s), Tuple{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}}}, Main.Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Main.Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, Sampler{PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}}}, Int64, Main.Turing.Inference.GibbsTransition{NamedTuple{(:s, :m), Tuple{Tuple{Vector{Float64}, Vector{String}}, Tuple{Vector{Float64}, Vector{String}}}}, Float64, Vector{Any}}}})
      @ Base ./array.jl:669
   [15] map
      @ ./abstractarray.jl:2297 [inlined]
   [16] step!(rng::Random._GLOBAL_RNG, model::Model{var"#48#49", (), (), (), Tuple{}, Tuple{}}, spl::Sampler{Gibbs{(:m, :s), Tuple{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}}}, Main.Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Main.Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, Sampler{PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}}}, N::Int64, transition::Main.Turing.Inference.GibbsTransition{NamedTuple{(:s, :m), Tuple{Tuple{Vector{Float64}, Vector{String}}, Tuple{Vector{Float64}, Vector{String}}}}, Float64, Vector{Any}}; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Main.Turing.Inference ~/.julia/packages/DynamicPPL/jOFDR/test/Turing/inference/gibbs.jl:179
   [17] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:93 [inlined]
   [18] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:15 [inlined]
   [19] mcmcsample(rng::Random._GLOBAL_RNG, model::Model{var"#48#49", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:m, :s), Tuple{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}}}, Main.Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Main.Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, Sampler{PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
   [20] sample(rng::Random._GLOBAL_RNG, model::Model{var"#48#49", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:m, :s), Tuple{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}}}, Main.Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Main.Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, Sampler{PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Main.Turing.Inference ~/.julia/packages/DynamicPPL/jOFDR/test/Turing/inference/Inference.jl:178
   [21] sample(rng::Random._GLOBAL_RNG, model::Model{var"#48#49", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:m, :s), Tuple{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}}}, Main.Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Main.Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, Sampler{PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}}}, N::Int64)
      @ Main.Turing.Inference ~/.julia/packages/DynamicPPL/jOFDR/test/Turing/inference/Inference.jl:177
   [22] sample(rng::Random._GLOBAL_RNG, model::Model{var"#48#49", (), (), (), Tuple{}, Tuple{}}, alg::Gibbs{(:m, :s), Tuple{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}}}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Main.Turing.Inference ~/.julia/packages/DynamicPPL/jOFDR/test/Turing/inference/Inference.jl:164
   [23] sample
      @ ~/.julia/packages/DynamicPPL/jOFDR/test/Turing/inference/Inference.jl:164 [inlined]
   [24] #sample#1
      @ ~/.julia/packages/DynamicPPL/jOFDR/test/Turing/inference/Inference.jl:154 [inlined]
   [25] sample(model::Model{var"#48#49", (), (), (), Tuple{}, Tuple{}}, alg::Gibbs{(:m, :s), Tuple{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}}}, N::Int64)
      @ Main.Turing.Inference ~/.julia/packages/DynamicPPL/jOFDR/test/Turing/inference/Inference.jl:154
   [26] macro expansion
      @ ~/.julia/packages/DynamicPPL/jOFDR/test/compiler.jl:374 [inlined]
   [27] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [28] macro expansion
      @ ~/.julia/packages/DynamicPPL/jOFDR/test/compiler.jl:373 [inlined]
   [29] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [30] top-level scope
      @ ~/.julia/packages/DynamicPPL/jOFDR/test/compiler.jl:20
   [31] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [32] macro expansion
      @ ~/.julia/packages/DynamicPPL/jOFDR/test/runtests.jl:23 [inlined]
   [33] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [34] top-level scope
      @ ~/.julia/packages/DynamicPPL/jOFDR/test/runtests.jl:22
   [35] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [36] top-level scope
      @ none:6
   [37] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [38] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [39] _start()
      @ Base ./client.jl:485
[ Info: [Turing]: AD chunk size is set as 10
Time for
  Loop : 12.371053127
  Vec  : 17.595836393
  Mv   : 11.296473692
Time for
  Loop : 8.506678229
  Vec  : 10.951878163
  Mv   : 8.37906657
[ Info: (symbol = "p[1,1]", exact = 0, evaluated = 0.032107025244295255)
[ Info: (symbol = "p[1][1]", exact = 0, evaluated = 0.09291745899173241)
┌ Warning: Argument x is not defined. A value of `nothing` is used.
└ @ DynamicPPL ~/.julia/packages/DynamicPPL/jOFDR/src/prob_macro.jl:165
┌ Warning: Argument x is not defined. A value of `nothing` is used.
└ @ DynamicPPL ~/.julia/packages/DynamicPPL/jOFDR/src/prob_macro.jl:165
┌ Warning: Argument x is not defined. A value of `nothing` is used.
└ @ DynamicPPL ~/.julia/packages/DynamicPPL/jOFDR/src/prob_macro.jl:165
┌ Warning: Argument x is not defined. A value of `nothing` is used.
└ @ DynamicPPL ~/.julia/packages/DynamicPPL/jOFDR/src/prob_macro.jl:165
┌ Info: Found initial step size
└   ϵ = 0.0125
┌ Info: Found initial step size
└   ϵ = 0.05
┌ Warning: The current proposal will be rejected due to numerical error(s).
│   isfinite.((θ, r, ℓπ, ℓκ)) = (true, false, false, false)
└ @ AdvancedHMC ~/.julia/packages/AdvancedHMC/QB368/src/hamiltonian.jl:47
┌ Warning: The current proposal will be rejected due to numerical error(s).
│   isfinite.((θ, r, ℓπ, ℓκ)) = (true, false, false, false)
└ @ AdvancedHMC ~/.julia/packages/AdvancedHMC/QB368/src/hamiltonian.jl:47
┌ Warning: you are using the internal variable `_varinfo`
└ @ DynamicPPL ~/.julia/packages/DynamicPPL/jOFDR/src/compiler.jl:169
┌ Warning: you are using the internal variable `_varinfo`
└ @ DynamicPPL ~/.julia/packages/DynamicPPL/jOFDR/src/compiler.jl:169
Peforming threading tests with 2 threads
With `@threads`:
  default:
  0.164348 seconds (120.49 k allocations: 3.698 MiB, 74.08% gc time)
  evaluate_threadsafe:
  0.017493 seconds (120.01 k allocations: 3.663 MiB)
Without `@threads`:
  default:
  0.020396 seconds (120.00 k allocations: 3.662 MiB)
  evaluate_threadunsafe:
  0.024330 seconds (120.00 k allocations: 3.662 MiB)
      From worker 26:	Master process (id 1) could not connect within 60.0 seconds.
      From worker 26:	exiting.
      From worker 9:	Master process (id 1) could not connect within 60.0 seconds.
      From worker 9:	exiting.
      From worker 24:	Master process (id 1) could not connect within 60.0 seconds.
      From worker 24:	exiting.
      From worker 4:	Master process (id 1) could not connect within 60.0 seconds.
      From worker 4:	exiting.
      From worker 7:	Master process (id 1) could not connect within 60.0 seconds.
      From worker 7:	exiting.
      From worker 27:	Master process (id 1) could not connect within 60.0 seconds.
      From worker 27:	exiting.
      From worker 8:	Master process (id 1) could not connect within 60.0 seconds.
      From worker 8:	exiting.
      From worker 18:	Master process (id 1) could not connect within 60.0 seconds.
      From worker 18:	exiting.
      From worker 6:	Master process (id 1) could not connect within 60.0 seconds.
      From worker 6:	exiting.
      From worker 20:	Master process (id 1) could not connect within 60.0 seconds.
      From worker 20:	exiting.
      From worker 3:	Master process (id 1) could not connect within 60.0 seconds.
      From worker 3:	exiting.
      From worker 22:	Master process (id 1) could not connect within 60.0 seconds.
      From worker 22:	exiting.
      From worker 28:	Master process (id 1) could not connect within 60.0 seconds.
      From worker 28:	exiting.
      From worker 17:	Master process (id 1) could not connect within 60.0 seconds.
      From worker 17:	exiting.
      From worker 10:	Master process (id 1) could not connect within 60.0 seconds.
      From worker 10:	exiting.
      From worker 21:	Master process (id 1) could not connect within 60.0 seconds.
      From worker 21:	exiting.
      From worker 5:	Master process (id 1) could not connect within 60.0 seconds.
      From worker 5:	exiting.
      From worker 16:	Master process (id 1) could not connect within 60.0 seconds.
      From worker 16:	exiting.
      From worker 19:	Master process (id 1) could not connect within 60.0 seconds.
      From worker 19:	exiting.
      From worker 23:	Master process (id 1) could not connect within 60.0 seconds.
      From worker 23:	exiting.
      From worker 2:	Master process (id 1) could not connect within 60.0 seconds.
      From worker 2:	exiting.
pmap: Error During Test at /home/pkgeval/.julia/packages/DynamicPPL/jOFDR/test/serialization.jl:24
  Got exception outside of a @test
  TaskFailedException
  
      nested task error: worker did not connect within 60.0 seconds
      Stacktrace:
       [1] error(s::String)
         @ Base ./error.jl:33
       [2] create_worker(manager::Distributed.LocalManager, wconfig::WorkerConfig)
         @ Distributed /workspace/srcdir/usr/share/julia/stdlib/v1.6/Distributed/src/cluster.jl:672
       [3] setup_launched_worker(manager::Distributed.LocalManager, wconfig::WorkerConfig, launched_q::Vector{Int64})
         @ Distributed /workspace/srcdir/usr/share/julia/stdlib/v1.6/Distributed/src/cluster.jl:526
       [4] (::Distributed.var"#41#44"{Distributed.LocalManager, Vector{Int64}, WorkerConfig})()
         @ Distributed ./task.jl:395
  
  ...and 126 more exceptions.
  
  Stacktrace:
    [1] sync_end(c::Channel{Any})
      @ Base ./task.jl:353
    [2] macro expansion
      @ ./task.jl:372 [inlined]
    [3] addprocs_locked(manager::Distributed.LocalManager; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Distributed /workspace/srcdir/usr/share/julia/stdlib/v1.6/Distributed/src/cluster.jl:480
    [4] addprocs_locked
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Distributed/src/cluster.jl:451 [inlined]
    [5] addprocs(manager::Distributed.LocalManager; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Distributed /workspace/srcdir/usr/share/julia/stdlib/v1.6/Distributed/src/cluster.jl:444
    [6] addprocs
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Distributed/src/cluster.jl:438 [inlined]
    [7] #addprocs#241
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Distributed/src/managers.jl:366 [inlined]
    [8] addprocs(np::Int64)
      @ Distributed /workspace/srcdir/usr/share/julia/stdlib/v1.6/Distributed/src/managers.jl:365
    [9] addprocs(; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Distributed /workspace/srcdir/usr/share/julia/stdlib/v1.6/Distributed/src/managers.jl:353
   [10] addprocs()
      @ Distributed /workspace/srcdir/usr/share/julia/stdlib/v1.6/Distributed/src/managers.jl:353
   [11] macro expansion
      @ ~/.julia/packages/DynamicPPL/jOFDR/test/serialization.jl:26 [inlined]
   [12] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [13] macro expansion
      @ ~/.julia/packages/DynamicPPL/jOFDR/test/serialization.jl:26 [inlined]
   [14] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [15] top-level scope
      @ ~/.julia/packages/DynamicPPL/jOFDR/test/serialization.jl:2
   [16] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [17] macro expansion
      @ ~/.julia/packages/DynamicPPL/jOFDR/test/runtests.jl:35 [inlined]
   [18] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [19] top-level scope
      @ ~/.julia/packages/DynamicPPL/jOFDR/test/runtests.jl:22
   [20] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [21] top-level scope
      @ none:6
   [22] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [23] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [24] _start()
      @ Base ./client.jl:485
      From worker 34:	Master process (id 1) could not connect within 60.0 seconds.logp: 
      From worker 34:	exiting.
      From worker 31:	Master process (id 1) could not connect within 60.0 seconds.
      From worker 31:	exiting.
      From worker 30:	Master process (id 1) could not connect within 60.0 seconds.
      From worker 30:	exiting.
Error During Test at /home/pkgeval/.julia/packages/DynamicPPL/jOFDR/test/compat/ad.jl:2
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2812#1248
      @ ~/.julia/packages/Zygote/c0awc/src/compiler/interface2.jl:34 [inlined]
    [4] var"#s2812#1248"(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] _pullback(f::Function, args::Vector{Float64})
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:38
    [7] pullback(f::Function, args::Vector{Float64})
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:44
    [8] test_model_ad(model::Model{var"#365#366", (), (), (), Tuple{}, Tuple{}}, logp_manual::var"#logp_gdemo_default#426")
      @ Main ~/.julia/packages/DynamicPPL/jOFDR/test/test_util.jl:24
    [9] macro expansion
      @ ~/.julia/packages/DynamicPPL/jOFDR/test/compat/ad.jl:13 [inlined]
   [10] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [11] macro expansion
      @ ~/.julia/packages/DynamicPPL/jOFDR/test/compat/ad.jl:4 [inlined]
   [12] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [13] top-level scope
      @ ~/.julia/packages/DynamicPPL/jOFDR/test/compat/ad.jl:2
   [14] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [15] macro expansion
      @ ~/.julia/packages/DynamicPPL/jOFDR/test/runtests.jl:38 [inlined]
   [16] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [17] macro expansion
      @ ~/.julia/packages/DynamicPPL/jOFDR/test/runtests.jl:38 [inlined]
   [18] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [19] top-level scope
      @ ~/.julia/packages/DynamicPPL/jOFDR/test/runtests.jl:22
   [20] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [21] top-level scope
      @ none:6
   [22] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [23] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [24] _start()
      @ Base ./client.jl:485
      From worker 32:	Master process (id 1) could not connect within 60.0 seconds.Test Summary:                  | 
Pass        From worker 32:	exiting.Error  
Total
      From worker 33:	Master process (id 1) could not connect within 60.0 seconds.
      From worker 33:	exiting.
DynamicPPL.jl                  | 1163      5   1168
  addlogprob!                  |    2             2
  getargs_dottilde             |    9             9
  getargs_tilde                |    9             9
  compiler.jl                  |   55      3     58
    assume                     |    4             4
    beta binomial              |           1      1
    forbid global              |              No tests
    model macro                |   20            20
    nested model               |    1             1
    new grammar                |           1      1
    new interface              |              No tests
    no return                  |    2             2
    observe                    |    5             5
    sample                     |           1      1
    vectorization @.           |              No tests
    vectorization .~           |              No tests
    Type parameters            |              No tests
    var name splitting         |   14            14
    user-defined variable name |    6             6
    custom tilde               |    1             1
    docstring                  |    2             2
  RandomVariables.jl           |  175           175
  model.jl                     |   38            38
  AbstractMCMC interface       |    8             8
  prob_macro                   |   29            29
  Turing independence          |              No tests
  distribution_wrappers.jl     |    4             4
  context_implementations.jl   |              No tests
  loglikelihoods               |  808           808
  threadsafe.jl                |   21            21
  serialization.jl             |    2      1      3
    saving and loading         |    2             2
    pmap                       |           1      1
  compat                       |    3      1      4
    ad.jl                      |    3      1      4
      logp                     |    3      1      4
ERROR: LoadError: Some tests did not pass: 1163 passed, 0 failed, 5 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/DynamicPPL/jOFDR/test/runtests.jl:21
┌ Warning: Forcibly interrupting busy workers
│   exception = IOError: stream is closed or unusable
└ @ Distributed /workspace/srcdir/usr/share/julia/stdlib/v1.6/Distributed/src/cluster.jl:1234
┌ Error: Unable to terminate all workers
│   exception =
│    IOError: stream is closed or unusable
│    Stacktrace:
│      [1] check_open
│        @ ./stream.jl:386 [inlined]
│      [2] uv_write_async(s::Sockets.TCPSocket, p::Ptr{UInt8}, n::UInt64)
│        @ Base ./stream.jl:1018
│      [3] uv_write(s::Sockets.TCPSocket, p::Ptr{UInt8}, n::UInt64)
│        @ Base ./stream.jl:981
│      [4] uv_write
│        @ ./stream.jl:977 [inlined]
│      [5] flush(s::Sockets.TCPSocket)
│        @ Base ./stream.jl:1073
│      [6] send_msg_(w::Distributed.Worker, header::Distributed.MsgHeader, msg::Distributed.RemoteDoMsg, now::Bool)
│        @ Distributed /workspace/srcdir/usr/share/julia/stdlib/v1.6/Distributed/src/messages.jl:179
│      [7] send_msg(w::Distributed.Worker, header::Distributed.MsgHeader, msg::Distributed.RemoteDoMsg)
│        @ Distributed /workspace/srcdir/usr/share/julia/stdlib/v1.6/Distributed/src/messages.jl:122
│      [8] #remote_do#153
│        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Distributed/src/remotecall.jl:461 [inlined]
│      [9] remote_do
│        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Distributed/src/remotecall.jl:461 [inlined]
│     [10] #remote_do#154
│        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Distributed/src/remotecall.jl:486 [inlined]
│     [11] remote_do
│        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Distributed/src/remotecall.jl:486 [inlined]
│     [12] kill(manager::Distributed.LocalManager, pid::Int64, config::WorkerConfig)
│        @ Distributed /workspace/srcdir/usr/share/julia/stdlib/v1.6/Distributed/src/managers.jl:598
│     [13] _rmprocs(pids::Vector{Int64}, waitfor::Float64)
│        @ Distributed /workspace/srcdir/usr/share/julia/stdlib/v1.6/Distributed/src/cluster.jl:1035
│     [14] rmprocs(pids::Vector{Int64}; waitfor::Float64)
│        @ Distributed /workspace/srcdir/usr/share/julia/stdlib/v1.6/Distributed/src/cluster.jl:1018
│     [15] terminate_all_workers()
│        @ Distributed /workspace/srcdir/usr/share/julia/stdlib/v1.6/Distributed/src/cluster.jl:1238
│     [16] _atexit()
│        @ Base ./initdefs.jl:338
│     [17] exit
│        @ ./initdefs.jl:28 [inlined]
│     [18] _start()
│        @ Base ./client.jl:488
└ @ Distributed /workspace/srcdir/usr/share/julia/stdlib/v1.6/Distributed/src/cluster.jl:1240

PkgEval failed: Package DynamicPPL errored during testing
Stacktrace:
  [1] pkgerror(msg::┌ Error: Fatal error on process 11
│   exception =
│    InterruptException:
│    Stacktrace:
│      [1] poptask(W::Base.InvasiveLinkedListSynchronized{Task})
│        @ Base ./task.jl:744
│      [2] wait
│        @ ./task.jl:752 [inlined]
│      [3] wait(c::Base.GenericCondition{Base.Threads.SpinLock})
│        @ Base ./condition.jl:106
│      [4] wait_readnb(x::Sockets.TCPSocket, nb::Int64)
│        @ Base ./stream.jl:413
│      [5] (::Base.var"#wait_locked#588")(s::Sockets.TCPSocket, buf::IOBuffer, nb::Int64)
│        @ Base ./stream.jl:894
│      [6] unsafe_read(s::Sockets.TCPSocket, p::Ptr{UInt8}, nb::UInt64)
│        @ Base ./stream.jl:900
│      [7] unsafe_read
│        @ ./io.jl:722 [inlined]
│      [8] unsafe_read(s::Sockets.TCPSocket, p::Base.RefValue{NTuple{4, Int64}}, n::Int64)
│        @ Base ./io.jl:721
│      [9] read!
│        @ ./io.jl:723 [inlined]
│     [10] deserialize_hdr_raw
│        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Distributed/src/messages.jl:159 [inlined]
│     [11] message_handler_loop(r_stream::Sockets.TCPSocket, w_stream::Sockets.TCPSocket, incoming::Bool)
│        @ Distributed /workspace/srcdir/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:165
│     [12] process_tcp_streams(r_stream::Sockets.TCPSocket, w_stream::Sockets.TCPSocket, incoming::Bool)
│        @ Distributed /workspace/srcdir/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:126
│     [13] (::Distributed.var"#99#100"{Sockets.TCPSocket, Sockets.TCPSocket, Bool})()
│        @ Distributed ./task.jl:395
└ @ Distributed /workspace/srcdir/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:222
┌ Error: Fatal error on process 14
│   exception =
│    InterruptException:
│    Stacktrace:
│      [1] poptask(W::Base.InvasiveLinkedListSynchronized{Task})
│        @ Base ./task.jl:744
│      [2] wait
│        @ ./task.jl:752 [inlined]
│      [3] wait(c::Base.GenericCondition{Base.Threads.SpinLock})
│        @ Base ./condition.jl:106
│      [4] wait_readnb(x::Sockets.TCPSocket, nb::Int64)
│        @ Base ./stream.jl:413
│      [5] (::Base.var"#wait_locked#588")(s::Sockets.TCPSocket, buf::IOBuffer, nb::Int64)
│        @ Base ./stream.jl:894
│      [6] unsafe_read(s::Sockets.TCPSocket, p::Ptr{UInt8}, nb::UInt64)
│        @ Base ./stream.jl:900
│      [7] unsafe_read
│        @ ./io.jl:722 [inlined]
│      [8] unsafe_read(s::Sockets.TCPSocket, p::Base.RefValue{NTuple{4, Int64}}, n::Int64)
│        @ Base ./io.jl:721
│      [9] read!
│        @ ./io.jl:723 [inlined]
│     [10] deserialize_hdr_raw
│        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Distributed/src/messages.jl:159 [inlined]
│     [11] message_handler_loop(r_stream::Sockets.TCPSocket, w_stream::Sockets.TCPSocket, incoming::Bool)
│        @ Distributed /workspace/srcdir/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:165
│     [12] process_tcp_streams(r_stream::Sockets.TCPSocket, w_stream::Sockets.TCPSocket, incoming::Bool)
│        @ Distributed /workspace/srcdir/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:126
│     [13] (::Distributed.var"#99#100"{Sockets.TCPSocket, Sockets.TCPSocket, Bool})()
│        @ Distributed ./task.jl:395
└ @ Distributed /workspace/srcdir/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:222
String)
    @ Pkg.Types /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
  [2] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing)
    @ Pkg.Operations /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1651
  [3] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::┌ Error: Fatal error on process 29
│   exception =
│    InterruptException:
│    Stacktrace:
│      [1] poptask(W::Base.InvasiveLinkedListSynchronized{Task})
│        @ Base ./task.jl:744
│      [2] wait
│        @ ./task.jl:752 [inlined]
│      [3] wait(c::Base.GenericCondition{Base.Threads.SpinLock})
│        @ Base ./condition.jl:106
│      [4] wait_readnb(x::Sockets.TCPSocket, nb::Int64)
│        @ Base ./stream.jl:413
│      [5] (::Base.var"#wait_locked#588")(s::Sockets.TCPSocket, buf::IOBuffer, nb::Int64)
│        @ Base ./stream.jl:894
│      [6] unsafe_read(s::Sockets.TCPSocket, p::Ptr{UInt8}, nb::UInt64)
│        @ Base ./stream.jl:900
│      [7] unsafe_read
│        @ ./io.jl:722 [inlined]
│      [8] unsafe_read(s::Sockets.TCPSocket, p::Base.RefValue{NTuple{4, Int64}}, n::Int64)
│        @ Base ./io.jl:721
│      [9] read!
│        @ ./io.jl:723 [inlined]
│     [10] deserialize_hdr_raw
│        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Distributed/src/messages.jl:159 [inlined]
│     [11] message_handler_loop(r_stream::Sockets.TCPSocket, w_stream::Sockets.TCPSocket, incoming::Bool)
│        @ Distributed /workspace/srcdir/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:165
│     [12] process_tcp_streams(r_stream::Sockets.TCPSocket, w_stream::Sockets.TCPSocket, incoming::Bool)
│        @ Distributed /workspace/srcdir/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:126
│     [13] (::Distributed.var"#99#100"{Sockets.TCPSocket, Sockets.TCPSocket, Bool})()
│        @ Distributed ./task.jl:395
└ @ Distributed /workspace/srcdir/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:222
┌ Error: Fatal error on process 15
│   exception =
│    InterruptException:
│    Stacktrace:
│      [1] poptask(W::Base.InvasiveLinkedListSynchronized{Task})
│        @ Base ./task.jl:744
│      [2] wait
│        @ ./task.jl:752 [inlined]
│      [3] wait(c::Base.GenericCondition{Base.Threads.SpinLock})
│        @ Base ./condition.jl:106
│      [4] wait_readnb(x::Sockets.TCPSocket, nb::Int64)
│        @ Base ./stream.jl:413
│      [5] (::Base.var"#wait_locked#588")(s::Sockets.TCPSocket, buf::IOBuffer, nb::Int64)
│        @ Base ./stream.jl:894
│      [6] unsafe_read(s::Sockets.TCPSocket, p::Ptr{UInt8}, nb::UInt64)
│        @ Base ./stream.jl:900
│      [7] unsafe_read
│        @ ./io.jl:722 [inlined]
│      [8] unsafe_read(s::Sockets.TCPSocket, p::Base.RefValue{NTuple{4, Int64}}, n::Int64)
│        @ Base ./io.jl:721
│      [9] read!
│        @ ./io.jl:723 [inlined]
│     [10] deserialize_hdr_raw
│        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Distributed/src/messages.jl:159 [inlined]
│     [11] message_handler_loop(r_stream::Sockets.TCPSocket, w_stream::Sockets.TCPSocket, incoming::Bool)
│        @ Distributed /workspace/srcdir/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:165
│     [12] process_tcp_streams(r_stream::Sockets.TCPSocket, w_stream::Sockets.TCPSocket, incoming::Bool)
│        @ Distributed /workspace/srcdir/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:126
│     [13] (::Distributed.var"#99#100"{Sockets.TCPSocket, Sockets.TCPSocket, Bool})()
│        @ Distributed ./task.jl:395
└ @ Distributed /workspace/srcdir/usr/share/julia/stdlib/v1.6/Distributed/src/process_messages.jl:222
Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:334
  [4] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:321
  [5] #test#62
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:71 [inlined]
  [6] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:70 [inlined]
  [7] #test#61
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:68 [inlined]
  [8] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:68 [inlined]
  [9] test(pkg::String; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67
 [10] test(pkg::String)
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67
 [11] top-level scope
    @ none:44
 [12] eval
    @ ./boot.jl:360 [inlined]
 [13] eval(x::Expr)
    @ Base.MainInclude ./client.jl:446
 [14] top-level scope
    @ none:1
 [15] eval(m::Module, e::Any)
    @ Core ./boot.jl:360
 [16] exec_options(opts::Base.JLOptions)
    @ Base ./client.jl:261
 [17] _start()
    @ Base ./client.jl:485


################################################################################
# PkgEval teardown: 2020-10-28T10:58:27.657
#


CPU usage: 1424.38s (1297.82s user, 145.59s kernel)

Network usage:
- eth0: 12.741 MiB received, 314.117 KiB sent

Raw statistics: {"read":"2020-10-28T10:58:27.659326512Z","preread":"0001-01-01T00:00:00Z","pids_stats":{"current":117},"blkio_stats":{"io_service_bytes_recursive":[{"major":259,"minor":0,"op":"Read","value":0},{"major":259,"minor":0,"op":"Write","value":81920},{"major":259,"minor":0,"op":"Sync","value":0},{"major":259,"minor":0,"op":"Async","value":81920},{"major":259,"minor":0,"op":"Total","value":81920},{"major":253,"minor":2,"op":"Read","value":0},{"major":253,"minor":2,"op":"Write","value":81920},{"major":253,"minor":2,"op":"Sync","value":0},{"major":253,"minor":2,"op":"Async","value":81920},{"major":253,"minor":2,"op":"Total","value":81920}],"io_serviced_recursive":[{"major":259,"minor":0,"op":"Read","value":0},{"major":259,"minor":0,"op":"Write","value":13},{"major":259,"minor":0,"op":"Sync","value":0},{"major":259,"minor":0,"op":"Async","value":13},{"major":259,"minor":0,"op":"Total","value":13},{"major":253,"minor":2,"op":"Read","value":0},{"major":253,"minor":2,"op":"Write","value":13},{"major":253,"minor":2,"op":"Sync","value":0},{"major":253,"minor":2,"op":"Async","value":13},{"major":253,"minor":2,"op":"Total","value":13}],"io_queue_recursive":[],"io_service_time_recursive":[],"io_wait_time_recursive":[],"io_merged_recursive":[],"io_time_recursive":[],"sectors_recursive":[]},"num_procs":0,"storage_stats":{},"cpu_stats":{"cpu_usage":{"total_usage":1424379288835,"percpu_usage":[3441746690,3882349240,3724825699,3280394487,3914829778,3278819547,3612034892,4799737149,3383587825,3201243490,3237632995,2912492255,3302453009,3512463589,3476451220,4550491726,3840758186,3735363598,4053937929,3469799252,3650471169,3580036628,3294856072,3386302504,3225537016,3118525219,3378576920,3666006229,4015100570,3897094241,4093062548,3361608495,22215522762,20660603863,19402520095,18954494891,20781019323,19560951875,20194511334,17388739336,18166511776,22247709239,21829405915,15723740938,16061406954,17603245132,18735776279,16735971976,15540111800,18435100635,18973417940,20163519823,19116889137,15191568422,18073215141,19078642424,16105828233,16419362993,18710840581,18183381258,15221378280,17974319099,18475861606,18745490516,3252030328,3049482934,3599016301,3133276352,3501417846,3614035292,4263435636,3997407371,3668210028,3767967337,3893807012,3849957094,3639212682,3807237192,3574335376,3953439735,3535226125,3438665383,4183350421,3544043518,3997521894,3685323581,3450854494,3803597379,3400987733,3245555570,2950537762,4014682706,3861841589,3461446752,3907415769,4356435593,19521157517,17369755791,17364832233,19006925009,17585880666,19816643885,19527543162,16590197488,20977587264,20682394387,17987529000,16117055640,20812933412,16616834560,20817491364,21156629437,18764590962,19825410376,20073649085,19849421999,18862676591,19517971341,20375927670,16784830388,18241114090,16940433672,16340847384,18318947705,17812023712,19498199911,19351899020,18518549586],"usage_in_kernelmode":145590000000,"usage_in_usermode":1297820000000},"system_cpu_usage":93758219850000000,"online_cpus":128,"throttling_data":{"periods":14926,"throttled_periods":3235,"throttled_time":12473362271026}},"precpu_stats":{"cpu_usage":{"total_usage":0,"usage_in_kernelmode":0,"usage_in_usermode":0},"throttling_data":{"periods":0,"throttled_periods":0,"throttled_time":0}},"memory_stats":{"usage":1724309504,"max_usage":23710670848,"stats":{"active_anon":1607643136,"active_file":851968,"cache":55095296,"dirty":0,"hierarchical_memory_limit":9223372036854771712,"hierarchical_memsw_limit":0,"inactive_anon":22515712,"inactive_file":8192,"mapped_file":0,"pgfault":43165969,"pgmajfault":0,"pgpgin":13076237,"pgpgout":12677983,"rss":1576153088,"rss_huge":0,"total_active_anon":1607643136,"total_active_file":851968,"total_cache":55095296,"total_dirty":0,"total_inactive_anon":22515712,"total_inactive_file":8192,"total_mapped_file":0,"total_pgfault":43165989,"total_pgmajfault":0,"total_pgpgin":13076237,"total_pgpgout":12677983,"total_rss":1576153088,"total_rss_huge":0,"total_unevictable":0,"total_writeback":0,"unevictable":0,"writeback":0},"limit":540972998656},"name":"/DynamicPPL-zq9WwBe8","id":"87aa0bda1706b62abcccdc85003adb689897d8779d1a8a4248dfcb5d1b020445","networks":{"eth0":{"rx_bytes":13360164,"rx_packets":4491,"rx_errors":0,"rx_dropped":50,"tx_bytes":321656,"tx_packets":2616,"tx_errors":0,"tx_dropped":0}}}

