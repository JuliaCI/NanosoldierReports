################################################################################
# PkgEval set-up: 2020-10-28T11:20:19.422
#

Julia Version 1.6.0-DEV.1352
Commit 8f71ea7f35 (2020-10-28 02:10 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: AMD EPYC 7502 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-11.0.0 (ORCJIT, znver2)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2
  JULIA_MAX_NUM_PRECOMPILE_FILES = 9223372036854775807



################################################################################
# Installation: 2020-10-28T11:20:21.397
#

   Resolving package versions...
   Installed RBNF ─────────────── v0.2.1
   Installed Compat ───────────── v3.23.0
   Installed OrderedCollections ─ v1.3.1
   Installed DataStructures ───── v0.18.8
   Installed PrettyPrint ──────── v0.2.0
   Installed MLStyle ──────────── v0.4.6
Updating `~/.julia/environments/v1.6/Project.toml`
  [83ef0002] + RBNF v0.2.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [34da2185] + Compat v3.23.0
  [864edb3b] + DataStructures v0.18.8
  [d8e11817] + MLStyle v0.4.6
  [bac558e1] + OrderedCollections v1.3.1
  [8162dcfd] + PrettyPrint v0.2.0
  [83ef0002] + RBNF v0.2.1
  [0dad84c5] + ArgTools
  [56f22d72] + Artifacts
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [f43a241f] + Downloads
  [b77e0a4c] + InteractiveUtils
  [b27032c2] + LibCURL
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
  [deac9b47] + LibCURL_jll
  [14a3606d] + MozillaCACerts_jll


################################################################################
# Testing: 2020-10-28T11:20:24.423
#


     Testing RBNF
Status `/tmp/jl_q0pQ60/Project.toml`
  [864edb3b] DataStructures v0.18.8
  [d8e11817] MLStyle v0.4.6
  [8162dcfd] PrettyPrint v0.2.0
  [83ef0002] RBNF v0.2.1
  [8dfed614] Test
Status `/tmp/jl_q0pQ60/Manifest.toml`
  [34da2185] Compat v3.23.0
  [864edb3b] DataStructures v0.18.8
  [d8e11817] MLStyle v0.4.6
  [bac558e1] OrderedCollections v1.3.1
  [8162dcfd] PrettyPrint v0.2.0
  [83ef0002] RBNF v0.2.1
  [0dad84c5] ArgTools
  [56f22d72] Artifacts
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [f43a241f] Downloads
  [b77e0a4c] InteractiveUtils
  [b27032c2] LibCURL
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
  [deac9b47] LibCURL_jll
  [14a3606d] MozillaCACerts_jll
     Testing Running tests...
Main.QASM.MainProgram(
  ver=2.0,
  prog=[
         Main.QASM.S_gate(
           decl=Main.QASM.S_gatedecl(
                  id=Token{id}(str=cu1, lineno=3, colno=3),
                  arglist1=Token{id}(str=lambda, lineno=3, colno=3),
                  arglist2=(
                             Token{id}(str=a, lineno=3, colno=3),
                             Token{id}(str=b, lineno=3, colno=3),
                           ),
                ),
           goplist=[
                     Main.QASM.S_u(
                       exprs=(
                               (
                                 Token{nninteger}(str=0, lineno=5, colno=5),
                                 Token{nninteger}(str=0, lineno=5, colno=5),
                               ),
                               (
                                 Token{id}(str=theta, lineno=5, colno=5),
                                 Token{unnamed}(str=/, lineno=5, colno=5),
                                 Token{nninteger}(str=2, lineno=5, colno=5),
                               ),
                             ),
                       arg=Main.QASM.S_argument(
                             id=Token{id}(str=a, lineno=5, colno=5),
                             arg=nothing,
                           ),
                     ),
                     Main.QASM.S_cx(
                       arg1=Main.QASM.S_argument(
                              id=Token{id}(str=a, lineno=6, colno=6),
                              arg=nothing,
                            ),
                       arg2=Main.QASM.S_argument(
                              id=Token{id}(str=b, lineno=6, colno=6),
                              arg=nothing,
                            ),
                     ),
                     Main.QASM.S_u(
                       exprs=(
                               (
                                 Token{nninteger}(str=0, lineno=7, colno=7),
                                 Token{nninteger}(str=0, lineno=7, colno=7),
                               ),
                               Main.QASM.S_neg(
                                 value=(
                                         Token{id}(str=theta, lineno=7, colno=7),
                                         Token{unnamed}(str=/, lineno=7, colno=7),
                                         Token{nninteger}(str=2, lineno=7, colno=7),
                                       ),
                               ),
                             ),
                       arg=Main.QASM.S_argument(
                             id=Token{id}(str=b, lineno=7, colno=7),
                             arg=nothing,
                           ),
                     ),
                     Main.QASM.S_cx(
                       arg1=Main.QASM.S_argument(
                              id=Token{id}(str=a, lineno=8, colno=8),
                              arg=nothing,
                            ),
                       arg2=Main.QASM.S_argument(
                              id=Token{id}(str=b, lineno=8, colno=8),
                              arg=nothing,
                            ),
                     ),
                     Main.QASM.S_u(
                       exprs=(
                               (
                                 Token{nninteger}(str=0, lineno=9, colno=9),
                                 Token{nninteger}(str=0, lineno=9, colno=9),
                               ),
                               (
                                 Token{id}(str=theta, lineno=9, colno=9),
                                 Token{unnamed}(str=/, lineno=9, colno=9),
                                 Token{nninteger}(str=2, lineno=9, colno=9),
                               ),
                             ),
                       arg=Main.QASM.S_argument(
                             id=Token{id}(str=b, lineno=9, colno=9),
                             arg=nothing,
                           ),
                     ),
                   ],
         ),
         Main.QASM.S_decl(
           regtype=Token{id}(str=qreg, lineno=12, colno=12),
           id=Token{id}(str=q, lineno=12, colno=12),
           int=Token{nninteger}(str=3, lineno=12, colno=12),
         ),
         Main.QASM.S_decl(
           regtype=Token{id}(str=qreg, lineno=13, colno=13),
           id=Token{id}(str=a, lineno=13, colno=13),
           int=Token{nninteger}(str=2, lineno=13, colno=13),
         ),
         Main.QASM.S_decl(
           regtype=Token{id}(str=creg, lineno=14, colno=14),
           id=Token{id}(str=c, lineno=14, colno=14),
           int=Token{nninteger}(str=3, lineno=14, colno=14),
         ),
         Main.QASM.S_decl(
           regtype=Token{id}(str=creg, lineno=15, colno=15),
           id=Token{id}(str=syn, lineno=15, colno=15),
           int=Token{nninteger}(str=2, lineno=15, colno=15),
         ),
         Main.QASM.S_iduop(
           op=Token{id}(str=cu1, lineno=16, colno=16),
           lst1=(
                  Token{id}(str=pi, lineno=16, colno=16),
                  Token{unnamed}(str=/, lineno=16, colno=16),
                  Token{nninteger}(str=2, lineno=16, colno=16),
                ),
           lst2=(
                  Main.QASM.S_mixeditem(
                    id=Token{id}(str=q, lineno=16, colno=16),
                    arg=Token{nninteger}(str=0, lineno=16, colno=16),
                  ),
                  Main.QASM.S_mixeditem(
                    id=Token{id}(str=q, lineno=16, colno=16),
                    arg=Token{nninteger}(str=1, lineno=16, colno=16),
                  ),
                ),
         ),
       ],
)RModule(
  hd=Token{reserved}(str=module, lineno=1, colno=1),
  name=Token{id}(str=Poly, lineno=1, colno=1),
  stmts=[
          RDefine(
            hd=Token{reserved}(str=def, lineno=2, colno=2),
            name=Token{id}(str=a, lineno=2, colno=2),
            value=RExp(
                    hd=RComp(
                         forall=nothing,
                         value=RCall(
                                 fn=RAnnotate(
                                      value=RStr(
                                              value=Token{str}(str="12\"3", lineno=2, colno=2),
                                            ),
                                    ),
                                 args=[],
                               ),
                       ),
                    tl=[],
                  ),
          ),
          RClass(
            hd=Token{reserved}(str=class, lineno=4, colno=4),
            name=Token{id}(str=Monad, lineno=4, colno=4),
            ids=[
                  Token{id}(str=m, lineno=4, colno=4),
                ],
            constrains=RConstaints(
                         hd=Token{reserved}(str=that, lineno=4, colno=4),
                         elts=GoodSeq{Any}(
                                head=RCall(
                                       fn=RAnnotate(
                                            value=RVar(
                                                    value=Token{id}(str=Functor, lineno=4, colno=4),
                                                  ),
                                          ),
                                       args=[
                                              RAnnotate(
                                                value=RVar(
                                                        value=Token{id}(str=m, lineno=4, colno=4),
                                                      ),
                                              ),
                                            ],
                                     ),
                                tail=[],
                              ),
                       ),
            interfaces=[
                         RDecl(
                           hd=Token{reserved}(str=val, lineno=5, colno=5),
                           name=Token{id}(str=bind, lineno=5, colno=5),
                           typ=RExp(
                                 hd=RComp(
                                      forall=RForall(
                                               fresh=[
                                                       Token{id}(str=a, lineno=5, colno=5),
                                                       Token{id}(str=b, lineno=5, colno=5),
                                                     ],
                                               constraints=nothing,
                                             ),
                                      value=RCall(
                                              fn=RAnnotate(
                                                   value=RVar(
                                                           value=Token{id}(str=m, lineno=5, colno=5),
                                                         ),
                                                 ),
                                              args=[
                                                     RAnnotate(
                                                       value=RVar(
                                                               value=Token{id}(str=a, lineno=5, colno=5),
                                                             ),
                                                     ),
                                                   ],
                                            ),
                                    ),
                                 tl=[
                                      [Unreachable reached at 0x7f92ff92cb5f

signal (4): Illegal instruction
in expression starting at /home/pkgeval/.julia/packages/RBNF/isoMc/test/reml.jl:126
Generator at ./generator.jl:32 [inlined]
Generator at ./generator.jl:32 [inlined]
pprint_for_seq at /home/pkgeval/.julia/packages/PrettyPrint/z2Fty/src/PrettyPrint.jl:60
unknown function (ip: 0x7f92ff92caef)
unknown function (ip: 0x75ce)
Allocations: 27961249 (Pool: 27953031; Big: 8218); GC: 35

PkgEval failed: Package RBNF errored during testing (received signal: 4)
Stacktrace:
  [1] pkgerror(msg::String)
    @ Pkg.Types /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
  [2] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing)
    @ Pkg.Operations /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1651
  [3] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:334
  [4] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:321
  [5] #test#62
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:71 [inlined]
  [6] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:70 [inlined]
  [7] #test#61
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:68 [inlined]
  [8] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:68 [inlined]
  [9] test(pkg::String; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67
 [10] test(pkg::String)
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67
 [11] top-level scope
    @ none:44
 [12] eval
    @ ./boot.jl:360 [inlined]
 [13] eval(x::Expr)
    @ Base.MainInclude ./client.jl:446
 [14] top-level scope
    @ none:1
 [15] eval(m::Module, e::Any)
    @ Core ./boot.jl:360
 [16] exec_options(opts::Base.JLOptions)
    @ Base ./client.jl:261
 [17] _start()
    @ Base ./client.jl:485


################################################################################
# PkgEval teardown: 2020-10-28T11:22:25.236
#


CPU usage: 101.14s (90.86s user, 10.48s kernel)

Network usage:
- eth0: 420.125 KiB received, 28.990 KiB sent

Raw statistics: {"read":"2020-10-28T11:22:25.238993685Z","preread":"0001-01-01T00:00:00Z","pids_stats":{"current":46},"blkio_stats":{"io_service_bytes_recursive":[{"major":259,"minor":0,"op":"Read","value":0},{"major":259,"minor":0,"op":"Write","value":20480},{"major":259,"minor":0,"op":"Sync","value":0},{"major":259,"minor":0,"op":"Async","value":20480},{"major":259,"minor":0,"op":"Total","value":20480},{"major":253,"minor":2,"op":"Read","value":0},{"major":253,"minor":2,"op":"Write","value":20480},{"major":253,"minor":2,"op":"Sync","value":0},{"major":253,"minor":2,"op":"Async","value":20480},{"major":253,"minor":2,"op":"Total","value":20480}],"io_serviced_recursive":[{"major":259,"minor":0,"op":"Read","value":0},{"major":259,"minor":0,"op":"Write","value":5},{"major":259,"minor":0,"op":"Sync","value":0},{"major":259,"minor":0,"op":"Async","value":5},{"major":259,"minor":0,"op":"Total","value":5},{"major":253,"minor":2,"op":"Read","value":0},{"major":253,"minor":2,"op":"Write","value":5},{"major":253,"minor":2,"op":"Sync","value":0},{"major":253,"minor":2,"op":"Async","value":5},{"major":253,"minor":2,"op":"Total","value":5}],"io_queue_recursive":[],"io_service_time_recursive":[],"io_wait_time_recursive":[],"io_merged_recursive":[],"io_time_recursive":[],"sectors_recursive":[]},"num_procs":0,"storage_stats":{},"cpu_stats":{"cpu_usage":{"total_usage":101140402759,"percpu_usage":[1554936865,1149951016,1465661623,1201643001,2717594749,737445116,2733773421,1271271633,1173251156,585498160,1337245499,1228030519,1724598001,864779999,999125440,1565936117,426270443,303618670,1021074933,816057130,1264143357,801861423,790744779,1687790519,1129365506,888021835,1212699158,672208089,254367815,831404680,1166719102,1079747033,496566732,415405824,285974215,410784368,264842879,669881321,145269489,315720455,370216241,546868728,428929542,316643636,32970553,288845707,248348078,197342229,299458881,248387221,30791521,312966412,328810905,464716714,601177816,238973988,220066498,332041086,429660381,357673555,307781364,256164603,409272491,215575828,1303637899,1330141553,939482352,619946886,3244129954,1610240387,1833536016,2771008905,725481474,791931873,1050439872,568811031,430294153,837380264,459510061,1703837636,1161180715,4000390559,534716764,1342789514,1618767456,841466099,1197357183,3673537633,994006330,528353407,774955930,1637996257,1524274785,1316976371,491447640,1012411636,302315159,820915406,560510184,479594101,274724713,412710581,253856433,408114648,262463027,596115149,213766030,389400715,90803935,438966465,99436370,384527026,157638973,164378444,101699086,221766926,594795102,199453101,181904302,128700652,364456346,325981128,760266407,205549180,236945083,630003974,280279834,582959636],"usage_in_kernelmode":10480000000,"usage_in_usermode":90860000000},"system_cpu_usage":93940965000000000,"online_cpus":128,"throttling_data":{"periods":1267,"throttled_periods":13,"throttled_time":3145818316}},"precpu_stats":{"cpu_usage":{"total_usage":0,"usage_in_kernelmode":0,"usage_in_usermode":0},"throttling_data":{"periods":0,"throttled_periods":0,"throttled_time":0}},"memory_stats":{"usage":538071040,"max_usage":795119616,"stats":{"active_anon":197218304,"active_file":24576,"cache":323407872,"dirty":0,"hierarchical_memory_limit":9223372036854771712,"hierarchical_memsw_limit":0,"inactive_anon":320225280,"inactive_file":8192,"mapped_file":0,"pgfault":1856270,"pgmajfault":0,"pgpgin":572504,"pgpgout":446160,"rss":194097152,"rss_huge":0,"total_active_anon":197218304,"total_active_file":24576,"total_cache":323407872,"total_dirty":0,"total_inactive_anon":320225280,"total_inactive_file":8192,"total_mapped_file":0,"total_pgfault":1856270,"total_pgmajfault":0,"total_pgpgin":572504,"total_pgpgout":446160,"total_rss":194097152,"total_rss_huge":0,"total_unevictable":0,"total_writeback":0,"unevictable":0,"writeback":0},"limit":540972998656},"name":"/RBNF-eHLIc7Mq","id":"24ede283808ab67e148d81fc9c3e9f06547fe078145413b07abc3b2a9434d40a","networks":{"eth0":{"rx_bytes":430208,"rx_packets":321,"rx_errors":0,"rx_dropped":4,"tx_bytes":29686,"tx_packets":223,"tx_errors":0,"tx_dropped":0}}}

