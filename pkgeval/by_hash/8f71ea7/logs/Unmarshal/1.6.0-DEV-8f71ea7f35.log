################################################################################
# PkgEval set-up: 2020-10-28T12:07:24.929
#

Julia Version 1.6.0-DEV.1352
Commit 8f71ea7f35 (2020-10-28 02:10 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: AMD EPYC 7502 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-11.0.0 (ORCJIT, znver2)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2
  JULIA_MAX_NUM_PRECOMPILE_FILES = 9223372036854775807



################################################################################
# Installation: 2020-10-28T12:07:26.823
#

   Resolving package versions...
   Installed Missings ─────────── v0.4.4
   Installed DataAPI ──────────── v1.3.0
   Installed Unmarshal ────────── v0.4.2
   Installed PropertyDicts ────── v0.1.0
   Installed Parsers ──────────── v1.0.11
   Installed OrderedCollections ─ v1.3.1
   Installed JSON ─────────────── v0.21.1
   Installed LazyJSON ─────────── v0.2.2
   Installed Nullables ────────── v1.0.0
   Installed Requires ─────────── v1.1.0
Updating `~/.julia/environments/v1.6/Project.toml`
  [cbff2730] + Unmarshal v0.4.2
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [9a962f9c] + DataAPI v1.3.0
  [682c06a0] + JSON v0.21.1
  [fc18253b] + LazyJSON v0.2.2
  [e1d29d7a] + Missings v0.4.4
  [4d1e1d77] + Nullables v1.0.0
  [bac558e1] + OrderedCollections v1.3.1
  [69de0a69] + Parsers v1.0.11
  [f8a19df8] + PropertyDicts v0.1.0
  [ae029012] + Requires v1.1.0
  [cbff2730] + Unmarshal v0.4.2
  [ade2ca70] + Dates
  [a63ad114] + Mmap
  [de0858da] + Printf
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode


################################################################################
# Testing: 2020-10-28T12:07:30.074
#


     Testing Unmarshal
Status `/tmp/jl_kFFJs0/Project.toml`
  [682c06a0] JSON v0.21.1
  [fc18253b] LazyJSON v0.2.2
  [e1d29d7a] Missings v0.4.4
  [4d1e1d77] Nullables v1.0.0
  [ae029012] Requires v1.1.0
  [cbff2730] Unmarshal v0.4.2
  [37e2e46d] LinearAlgebra
  [8dfed614] Test
Status `/tmp/jl_kFFJs0/Manifest.toml`
  [9a962f9c] DataAPI v1.3.0
  [682c06a0] JSON v0.21.1
  [fc18253b] LazyJSON v0.2.2
  [e1d29d7a] Missings v0.4.4
  [4d1e1d77] Nullables v1.0.0
  [bac558e1] OrderedCollections v1.3.1
  [69de0a69] Parsers v1.0.11
  [f8a19df8] PropertyDicts v0.1.0
  [ae029012] Requires v1.1.0
  [cbff2730] Unmarshal v0.4.2
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [b77e0a4c] InteractiveUtils
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [de0858da] Printf
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
     Testing Running tests...
Start testing with library JSON
Unmarshal.unmarshal(BazNullable, JSON.parse(input2)) === BazNullable(Nullable{Float64}(), Bar(17)) = false
Vector{Float64}
Foo AbstractDict
\--> bar <: Bar 
	Bar AbstractDict
	\--> baz <: Int64 
Array{Float64, 3}
	Array{Float64, 2}
		Vector{Float64}
		Vector{Float64}
		Vector{Float64}
	Array{Float64, 2}
		Vector{Float64}
		Vector{Float64}
		Vector{Float64}
	Array{Float64, 2}
		Vector{Float64}
		Vector{Float64}
		Vector{Float64}
	Array{Float64, 2}
		Vector{Float64}
		Vector{Float64}
		Vector{Float64}
Any{Int64}
List
Tuple: Tuple{NTuple{4, Float64}, Tuple{Float64, Float64}}
	Tuple: NTuple{4, Float64}
	Tuple: Tuple{Float64, Float64}
Tuple: Tuple
	Any{Any}
	List
	Any{Any}
	List
Tuple: Tuple{Vararg{Array, N} where N}
	Vector{Any}
	Vector{Any}
Tuple: Tuple{Array, Array}
	Vector{Any}
	Vector{Any}
Tuple: Tuple{Vararg{Tuple, N} where N}
	Tuple: Tuple
	Tuple: Tuple
Tuple: Tuple{Vararg{Tuple{Vararg{Float64, N} where N}, N} where N}
	Tuple: Tuple{Vararg{Float64, N} where N}
	Tuple: Tuple{Vararg{Float64, N} where N}
TupleTest AbstractDict
\--> a <: Tuple 
	Tuple: Tuple
\--> b <: Tuple{Int64, Float64} 
	Tuple: Tuple{Int64, Float64}
\--> c <: Tuple{Float64, Vararg{Int64, N} where N} 
	Tuple: Tuple{Float64, Vararg{Int64, N} where N}
\--> d <: NamedTuple{(:x, :y), T} where T<:Tuple 
	NamedTuple{(:x, :y),Tuple{Any, Any}}
	\--> x 
	\--> y 
\--> e <: NamedTuple{(:x, :y), Tuple{Int64, Float64}} 
	NamedTuple{(:x, :y),Tuple{Int64, Float64}}
	\--> x 
	\--> y 
DictTest AbstractDict
\--> testDict <: Dict{Int64, String} 
	Dict{Int64, String} Dict 
	\--> 1 String
		String (String)
	\--> 2 String
		String (String)
dictTest2 = Dict("k" => "val") = Dict("k" => "val")
Dict{String, String} Dict 
\--> k String
	String (String)
Unmarshal.unmarshal(TestUnmarshal, j) = TestUnmarshal("", "Test", Dict("self" => "TestDict"))
Starting tests on Pairs
Pair Pair{String, String} AbstractDict
Pair Pair{Int64, Int64} AbstractDict
Pair Pair{String, Int64} AbstractDict
Pair Pair{Int64, String} AbstractDict
Pair Pair{Int64, Vector{Float64}} AbstractDict
┌ Warning: Expected a single pair, but found a multi-entry dictionary, just using the first key: 1
└ @ Unmarshal ~/.julia/packages/Unmarshal/4tOu7/src/Unmarshal.jl:145
Unmarshal.unmarshal(typeof(p), JSON.parse(raw)) = "1" => "Test1"
Pair Pair{Int64, Dict{String, Int64}} AbstractDict
Pair Pair{Int64, Dict{String, Int64}} AbstractDict
Tweet AbstractDict
\--> id <: Union{Nothing, Int64} 
\--> id_str <: Union{Nothing, String} 
	String (String)
\--> created_at <: Union{Nothing, String} 
	String (String)
\--> favorite_count <: Union{Nothing, Int64} 
\--> retweet_count <: Union{Nothing, Int64} 
\--> full_text <: Union{Nothing, String} 
\--> lang <: Union{Nothing, String} 
\--> place <: Union{Nothing, String} 
\--> truncated <: Union{Nothing, Bool} 
\--> user <: User 
	User AbstractDict
	\--> id <: Union{Nothing, Int64} 
	\--> id_str <: Union{Nothing, String} 
		String (String)
	\--> created_at <: Union{Nothing, String} 
		String (String)
	\--> name <: Union{Nothing, String} 
		String (String)
	\--> screen_name <: Union{Nothing, String} 
	\--> location <: Union{Nothing, String} 
	\--> statuses_count <: Union{Nothing, Int64} 
	\--> followers_count <: Union{Nothing, Int64} 
	\--> description <: Union{Nothing, String} 
	\--> profile_image_url <: Union{Nothing, String} 
Done testing with library JSON
Start testing with library LazyJSON
Unmarshal.unmarshal(BazNullable, LazyJSON.parse(input2)) === BazNullable(Nullable{Float64}(), Bar(17)) = true
Vector{Float64}
jstring = "{\"a1\":[0.0,1.0,2.0],\"a2\":[1,2,3]}"
LazyJSON.parse(jstring) = LazyJSON.Object{Nothing, String}("a1" => Any[0.0, 1.0, 2.0], "a2" => Any[1, 2, 3])
Foo AbstractDict
\--> bar <: Bar 
	Bar AbstractDict
	\--> baz <: Int64 
Array{Float64, 3}
	Array{Float64, 2}
		Vector{Float64}
		Vector{Float64}
		Vector{Float64}
	Array{Float64, 2}
		Vector{Float64}
		Vector{Float64}
		Vector{Float64}
	Array{Float64, 2}
		Vector{Float64}
		Vector{Float64}
		Vector{Float64}
	Array{Float64, 2}
		Vector{Float64}
		Vector{Float64}
		Vector{Float64}
Any{Any}
List
Tuple: Tuple
	Any{Any}
	List
	Any{Any}
	List
Tuple: Tuple{Vararg{Array, N} where N}
	Vector{Any}
	Vector{Any}
Tuple: Tuple{Array, Array}
	Vector{Any}
	Vector{Any}
Tuple: Tuple{Vararg{Tuple, N} where N}
	Tuple: Tuple
	Tuple: Tuple
Tuple: Tuple{Vararg{Tuple{Vararg{Float64, N} where N}, N} where N}
	Tuple: Tuple{Vararg{Float64, N} where N}
	Tuple: Tuple{Vararg{Float64, N} where N}
TupleTest AbstractDict
\--> a <: Tuple 
	Tuple: Tuple
\--> b <: Tuple{Int64, Float64} 
	Tuple: Tuple{Int64, Float64}
\--> c <: Tuple{Float64, Vararg{Int64, N} where N} 
	Tuple: Tuple{Float64, Vararg{Int64, N} where N}
\--> d <: NamedTuple{(:x, :y), T} where T<:Tuple 
	NamedTuple{(:x, :y),Tuple{Any, Any}}
	\--> x 
	\--> y 
\--> e <: NamedTuple{(:x, :y), Tuple{Int64, Float64}} 
	NamedTuple{(:x, :y),Tuple{Int64, Float64}}
	\--> x 
	\--> y 
js = Unmarshal.unmarshal(TupleTest, LazyJSON.parse(jstring), true) = TupleTest(("a", 1, 5), (5, 3.5), (1.2, 6, 7, 3), (x = 5, y = 9), (x = 3, y = 1.4))
(typeof(testTuples.a), typeof(js.a)) = (Tuple{String, Int64, Int64}, Tuple{LazyJSON.String{String}, LazyJSON.Number{String}, LazyJSON.Number{String}})
(typeof(testTuples.d), typeof(js.d)) = (NamedTuple{(:x, :y), Tuple{Int64, Int64}}, NamedTuple{(:x, :y), Tuple{LazyJSON.Number{String}, LazyJSON.Number{String}}})
DictTest AbstractDict
\--> testDict <: Dict{Int64, String} 
	Dict{Int64, String} Dict from LazyJSON
	\--> 2 String
	\--> 1 String
dictTest2 = Dict("k" => "val") = Dict("k" => "val")
Dict{String, String} Dict from LazyJSON
\--> k String
Unmarshal.unmarshal(TestUnmarshal, j) = TestUnmarshal("", "Test", Dict("self" => "TestDict"))
Starting tests on Pairs
Pair Pair{String, String} AbstractDict
Pair Pair{Int64, Int64} AbstractDict
Pair Pair{String, Int64} AbstractDict
Pair Pair{Int64, String} AbstractDict
Pair Pair{Int64, Vector{Float64}} AbstractDict
┌ Warning: Expected a single pair, but found a multi-entry dictionary, just using the first key: 2
└ @ Unmarshal ~/.julia/packages/Unmarshal/4tOu7/src/lazyjson.jl:35
Unmarshal.unmarshal(typeof(p), LazyJSON.parse(raw)) = "2" => "Test2"
Pair Pair{Int64, Dict{String, Int64}} AbstractDict
Pair Pair{Int64, Dict{String, Int64}} AbstractDict
Done testing with library LazyJSON
     Testing Unmarshal tests passed 

PkgEval succeeded


################################################################################
# PkgEval teardown: 2020-10-28T12:08:28.076
#


signal (15): Terminated
in expression starting at none:1
pthread_cond_wait at /lib/x86_64-linux-gnu/libpthread.so.0 (unknown line)

CPU usage: 57.62s (49.30s user, 8.61s kernel)

Network usage:
- eth0: 821.864 KiB received, 44.959 KiB sent

Raw statistics: {"read":"2020-10-28T12:08:28.842131623Z","preread":"0001-01-01T00:00:00Z","pids_stats":{"current":46},"blkio_stats":{"io_service_bytes_recursive":[{"major":259,"minor":0,"op":"Read","value":0},{"major":259,"minor":0,"op":"Write","value":20480},{"major":259,"minor":0,"op":"Sync","value":0},{"major":259,"minor":0,"op":"Async","value":20480},{"major":259,"minor":0,"op":"Total","value":20480},{"major":253,"minor":2,"op":"Read","value":0},{"major":253,"minor":2,"op":"Write","value":20480},{"major":253,"minor":2,"op":"Sync","value":0},{"major":253,"minor":2,"op":"Async","value":20480},{"major":253,"minor":2,"op":"Total","value":20480}],"io_serviced_recursive":[{"major":259,"minor":0,"op":"Read","value":0},{"major":259,"minor":0,"op":"Write","value":5},{"major":259,"minor":0,"op":"Sync","value":0},{"major":259,"minor":0,"op":"Async","value":5},{"major":259,"minor":0,"op":"Total","value":5},{"major":253,"minor":2,"op":"Read","value":0},{"major":253,"minor":2,"op":"Write","value":5},{"major":253,"minor":2,"op":"Sync","value":0},{"major":253,"minor":2,"op":"Async","value":5},{"major":253,"minor":2,"op":"Total","value":5}],"io_queue_recursive":[],"io_service_time_recursive":[],"io_wait_time_recursive":[],"io_merged_recursive":[],"io_time_recursive":[],"sectors_recursive":[]},"num_procs":0,"storage_stats":{},"cpu_stats":{"cpu_usage":{"total_usage":57622086026,"percpu_usage":[3397292,230413303,16183966,274604138,255792881,71432408,2556641,211327653,98838618,193752536,89639385,41683277,25592470,110467284,10500846,467864542,559096998,144666588,54717582,137124552,13887134,99845392,246678212,574171,6825373,144190968,63750688,57636733,10545305,188868486,177738036,235648864,309493428,237866303,478936139,243977029,1296870608,505070601,324948610,482478170,987088730,527496431,400292203,1604259689,1467312846,738283446,746969902,776831627,1647251542,340807176,867089325,3277695956,1349513716,201545091,308865167,1066200202,426958481,411008574,653587571,607268230,201304969,73297782,854096404,667754118,83033103,90454656,20076448,108852177,146742609,97367029,229889748,26378232,48462069,89523926,33682204,2462891,802160,41129235,21408040,262754894,83923903,13399736,232196374,334796916,60329624,0,23564329,112071923,62737976,280047462,14403376,180817766,1114871106,301080628,148757198,70160497,174928391,679093961,1156615270,213748995,245654231,1300191186,308334274,426107014,584094210,299167445,1532492850,1498357865,1124418250,771109614,563899998,662097428,2821802934,652539512,441945321,779086466,845063930,1004317636,139576439,892893389,773602997,813261281,1122337383,509076040,1042938292,729006591,698655580,151230630],"usage_in_kernelmode":8610000000,"usage_in_usermode":49300000000},"system_cpu_usage":94291671310000000,"online_cpus":128,"throttling_data":{"periods":643,"throttled_periods":18,"throttled_time":3588054882}},"precpu_stats":{"cpu_usage":{"total_usage":0,"usage_in_kernelmode":0,"usage_in_usermode":0},"throttling_data":{"periods":0,"throttled_periods":0,"throttled_time":0}},"memory_stats":{"usage":215134208,"max_usage":750944256,"stats":{"active_anon":187355136,"active_file":0,"cache":8327168,"dirty":0,"hierarchical_memory_limit":9223372036854771712,"hierarchical_memsw_limit":0,"inactive_anon":5132288,"inactive_file":8192,"mapped_file":0,"pgfault":1213250,"pgmajfault":0,"pgpgin":528083,"pgpgout":481087,"rss":184168448,"rss_huge":0,"total_active_anon":187355136,"total_active_file":0,"total_cache":8327168,"total_dirty":0,"total_inactive_anon":5132288,"total_inactive_file":8192,"total_mapped_file":0,"total_pgfault":1213250,"total_pgmajfault":0,"total_pgpgin":528083,"total_pgpgout":481087,"total_rss":184168448,"total_rss_huge":0,"total_unevictable":0,"total_writeback":0,"unevictable":0,"writeback":0},"limit":540972998656},"name":"/Unmarshal-19cpPhi4","id":"0463961bdefd93e2368315072715e1bec738177ca19152ddb758913ac2a4a0a2","networks":{"eth0":{"rx_bytes":841589,"rx_packets":416,"rx_errors":0,"rx_dropped":3,"tx_bytes":46038,"tx_packets":353,"tx_errors":0,"tx_dropped":0}}}

