################################################################################
# PkgEval set-up: 2020-10-28T11:56:13.012
#

Julia Version 1.6.0-DEV.1352
Commit 8f71ea7f35 (2020-10-28 02:10 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: AMD EPYC 7502 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-11.0.0 (ORCJIT, znver2)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2
  JULIA_MAX_NUM_PRECOMPILE_FILES = 9223372036854775807



################################################################################
# Installation: 2020-10-28T11:56:14.586
#

   Resolving package versions...
   Installed LabelledArrays ─ v1.3.0
   Installed ArrayInterface ─ v2.13.7
   Installed Requires ─────── v1.1.0
   Installed MacroTools ───── v0.5.6
   Installed StaticArrays ─── v0.12.5
Updating `~/.julia/environments/v1.6/Project.toml`
  [2ee39098] + LabelledArrays v1.3.0
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [4fba245c] + ArrayInterface v2.13.7
  [2ee39098] + LabelledArrays v1.3.0
  [1914dd2f] + MacroTools v0.5.6
  [ae029012] + Requires v1.1.0
  [90137ffa] + StaticArrays v0.12.5
  [2a0f44e3] + Base64
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [d6f4376e] + Markdown
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [cf7118a7] + UUIDs


################################################################################
# Testing: 2020-10-28T11:56:17.202
#


     Testing LabelledArrays
Status `/tmp/jl_p6V0EZ/Project.toml`
  [4fba245c] ArrayInterface v2.13.7
  [2ee39098] LabelledArrays v1.3.0
  [1914dd2f] MacroTools v0.5.6
  [1dea7af3] OrdinaryDiffEq v5.43.0
  [90137ffa] StaticArrays v0.12.5
  [b77e0a4c] InteractiveUtils
  [37e2e46d] LinearAlgebra
  [8dfed614] Test
Status `/tmp/jl_p6V0EZ/Manifest.toml`
  [79e6a3ab] Adapt v2.3.0
  [ec485272] ArnoldiMethod v0.0.4
  [4fba245c] ArrayInterface v2.13.7
  [d360d2e6] ChainRulesCore v0.9.17
  [bbf7d656] CommonSubexpressions v0.3.0
  [34da2185] Compat v3.23.0
  [adafc99b] CpuId v0.2.2
  [9a962f9c] DataAPI v1.3.0
  [864edb3b] DataStructures v0.18.8
  [e2d170a0] DataValueInterfaces v1.0.0
  [2b5f629d] DiffEqBase v6.48.2
  [163ba53b] DiffResults v1.0.2
  [b552c78f] DiffRules v1.0.1
  [b4f34e82] Distances v0.9.2
  [ffbed154] DocStringExtensions v0.8.3
  [d4d017d3] ExponentialUtilities v1.8.0
  [9aa1b823] FastClosures v0.3.2
  [6a86dc24] FiniteDiff v2.7.0
  [f6369f11] ForwardDiff v0.10.12
  [069b7b12] FunctionWrappers v1.1.1
  [01680d73] GenericSVD v0.3.0
  [d25df0c9] Inflate v0.1.2
  [42fd0dbc] IterativeSolvers v0.8.4
  [82899510] IteratorInterfaceExtensions v1.0.0
  [692b3bcd] JLLWrappers v1.1.3
  [2ee39098] LabelledArrays v1.3.0
  [093fc24a] LightGraphs v1.3.0
  [d3d80556] LineSearches v7.1.0
  [bdcacae8] LoopVectorization v0.8.26
  [1914dd2f] MacroTools v0.5.6
  [46d2c3a1] MuladdMacro v0.2.2
  [d41bc354] NLSolversBase v7.7.1
  [2774e3e8] NLsolve v4.4.1
  [77ba4419] NaNMath v0.3.4
  [6fe1bfb0] OffsetArrays v1.3.1
  [bac558e1] OrderedCollections v1.3.1
  [1dea7af3] OrdinaryDiffEq v5.43.0
  [d96e819e] Parameters v0.12.1
  [3cdcf5f2] RecipesBase v1.1.0
  [731186ca] RecursiveArrayTools v2.7.2
  [f2c3362d] RecursiveFactorization v0.1.4
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v1.1.0
  [f2b01f46] Roots v1.0.5
  [21efa798] SIMDPirates v0.8.25
  [476501e8] SLEEFPirates v0.5.5
  [699a6c99] SimpleTraits v0.9.3
  [47a9eef4] SparseDiffTools v1.10.0
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.5
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.1.0
  [a2a6695c] TreeViews v0.3.0
  [3a884ed6] UnPack v1.0.2
  [3d5dd08c] VectorizationBase v0.12.33
  [19fa3120] VertexSafeGraphs v0.1.2
  [700de1a5] ZygoteRules v0.2.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.4+0
  [efe28fd5] OpenSpecFun_jll v0.5.3+4
  [0dad84c5] ArgTools
  [56f22d72] Artifacts
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [f43a241f] Downloads
  [b77e0a4c] InteractiveUtils
  [b27032c2] LibCURL
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [4607b0f0] SuiteSparse
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
  [deac9b47] LibCURL_jll
  [14a3606d] MozillaCACerts_jll
     Testing Running tests...
3-element SLArray{Tuple{3}, Int64, 1, 3, (:a, :b, :c)} with indices SOneTo(3):
 :a => 1
 :b => 2
 :c => 33-element SLArray{Tuple{3}, Float64, 1, 3, (a = 1:2, b = 3)} with indices SOneTo(3):
 :a => 1.0
 :a => 2.0
 :b => 3.03-element SLArray{Tuple{3}, Float64, 1, 3, (a = 1:2, b = 2:3)} with indices SOneTo(3):
 :a => 1.0
 :a => 2.0
 :b => 3.02-element SLArray{Tuple{2}, Int64, 1, 2, (a = 1, b = 2)} with indices SOneTo(2):
 :a => 1
 :b => 22×2 SLArray{Tuple{2, 2}, Int64, 2, 4, (a = (2, Colon()), b = 3)} with indices SOneTo(2)×SOneTo(2):
 nothing => 1  :b => 3
      :a => 2  :a => 4Test Summary: | Pass  Total
SLArrays      |   40     40
 17.819990 seconds (16.11 M allocations: 938.026 MiB, 4.31% gc time, 98.80% compilation time)
3-element LArray{Float64, 1, Vector{Float64}, (:a, :b, :c)}:
 :a => 1.0
 :b => 2.0
 :c => 3.0(i, s) = (1, :a)
(i, s) = (2, :b)
(i, s) = (3, :c)
  0.006896 seconds (898 allocations: 59.039 KiB, 99.43% compilation time)
  0.000010 seconds (7 allocations: 208 bytes)
  0.012107 seconds (3.65 k allocations: 253.384 KiB, 99.84% compilation time)
  0.000010 seconds (7 allocations: 208 bytes)
Variables
  #self#::Core.Const(var"#g#27"())
  x::LArray{Float64, 1, Vector{Float64}, (:a, :b, :c)}

Body::Float64
1 ─ %1 = Base.getproperty(x, :a)::Float64
└──      return %1
Variables
  #unused#::Core.Const(Core.var"#Type##kw"())
  @_2::NamedTuple{(:a, :b, :c, :d), NTuple{4, Int64}}
  @_3::Type{LArray}
  size::Tuple{Int64, Int64}
  kwargs...::Base.Iterators.Pairs{Symbol, Int64, NTuple{4, Symbol}, NamedTuple{(:a, :b, :c, :d), NTuple{4, Int64}}}

Body::LArray{Int64, 2, Matrix{Int64}, (:a, :b, :c, :d)}
1 ─      (kwargs... = Base.pairs(@_2))
│   %2 = LabelledArrays.:(var"#LArray#7")(kwargs...::Core.PartialStruct(Base.Iterators.Pairs{Symbol, Int64, NTuple{4, Symbol}, NamedTuple{(:a, :b, :c, :d), NTuple{4, Int64}}}, Any[NamedTuple{(:a, :b, :c, :d), NTuple{4, Int64}}, Core.Const((:a, :b, :c, :d))]), @_3, size)::LArray{Int64, 2, Matrix{Int64}, (:a, :b, :c, :d)}
└──      return %2
Variables
  #self#::Core.Const(convert)
  #unused#::Type{NamedTuple}
  x::LArray{Int64, 2, Matrix{Int64}, (:a, :b, :c, :d)}
  tup::NTuple{4, Int64}

Body::NamedTuple{(:a, :b, :c, :d), NTuple{4, Int64}}
1 ─ %1 = LabelledArrays.length($(Expr(:static_parameter, 4)))::Core.Const(4)
│   %2 = Core.apply_type(LabelledArrays.NTuple, %1, $(Expr(:static_parameter, 1)))::Core.Const(NTuple{4, Int64})
│        (tup = (%2)(x))
│   %4 = $(Expr(:static_parameter, 4))::Core.Const((:a, :b, :c, :d))
│   %5 = LabelledArrays.typeof(tup)::Core.Const(NTuple{4, Int64})
│   %6 = Core.apply_type(LabelledArrays.NamedTuple, %4, %5)::Core.Const(NamedTuple{(:a, :b, :c, :d), NTuple{4, Int64}})
│   %7 = (%6)(tup)::NamedTuple{(:a, :b, :c, :d), NTuple{4, Int64}}
└──      return %7
Variables
  #self#::Core.Const(collect)
  itr::Base.Generator{UnitRange{Int64}, LabelledArrays.var"#9#10"{(:a, :b, :c, :d), LArray{Int64, 2, Matrix{Int64}, (:a, :b, :c, :d)}}}
  @_3::Int64
  st::Int64
  v1::Pair{Symbol, Int64}
  y::UNION{NOTHING, TUPLE{PAIR{SYMBOL, INT64}, INT64}}
  et::Type{Pair{Symbol, Int64}}
  isz::Base.HasShape{1}
  @_9::Type{Pair{Symbol, Int64}}

Body::Vector{Pair{Symbol, Int64}}
1 ─       Core.NewvarNode(:(@_3))
│         Core.NewvarNode(:(st))
│         Core.NewvarNode(:(v1))
│         Core.NewvarNode(:(y))
│         Core.NewvarNode(:(et))
│   %6  = Base.getproperty(itr, :iter)::UnitRange{Int64}
│         (isz = Base.IteratorSize(%6))
│   %8  = (itr isa Base.Generator)::Core.Const(true)
└──       goto #4 if not %8
2 ─ %10 = Base.getproperty(itr, :f)::LabelledArrays.var"#9#10"{(:a, :b, :c, :d), LArray{Int64, 2, Matrix{Int64}, (:a, :b, :c, :d)}}
│   %11 = (%10 isa Base.Type)::Core.Const(false)
└──       goto #4 if not %11
3 ─       Core.Const(:(@_9 = Base.getproperty(itr, :f)))
└──       Core.Const(:(goto %20))
4 ┄ %15 = Core.Compiler::Core.Const(Core.Compiler)
│   %16 = Base.getproperty(%15, :return_type)::Core.Const(Core.Compiler.return_type)
│   %17 = Base.typeof(itr)::Core.Const(Base.Generator{UnitRange{Int64}, LabelledArrays.var"#9#10"{(:a, :b, :c, :d), LArray{Int64, 2, Matrix{Int64}, (:a, :b, :c, :d)}}})
│   %18 = Core.apply_type(Base.Tuple, %17)::Core.Const(Tuple{Base.Generator{UnitRange{Int64}, LabelledArrays.var"#9#10"{(:a, :b, :c, :d), LArray{Int64, 2, Matrix{Int64}, (:a, :b, :c, :d)}}}})
│         (@_9 = (%16)(Base.first, %18))
│         (et = @_9::Core.Const(Pair{Symbol, Int64}))
│   %21 = (isz isa Base.SizeUnknown)::Core.Const(false)
└──       goto #6 if not %21
5 ─       Core.Const(:(Core.apply_type(Base.Vector, et)))
│         Core.Const(:((%23)()))
│         Core.Const(:(Base.grow_to!(%24, itr)))
└──       Core.Const(:(return %25))
6 ┄       (y = Base.iterate(itr))
│   %28 = (y === Base.nothing)::Bool
└──       goto #8 if not %28
7 ─ %30 = et::Core.Const(Pair{Symbol, Int64})::Core.Const(Pair{Symbol, Int64})
│   %31 = Base.getproperty(itr, :iter)::UnitRange{Int64}
│   %32 = Base._array_for(%30, %31, isz)::Vector{Pair{Symbol, Int64}}
└──       return %32
8 ─ %34 = Base.indexed_iterate(y::Tuple{Pair{Symbol, Int64}, Int64}, 1)::Core.PartialStruct(Tuple{Pair{Symbol, Int64}, Int64}, Any[Pair{Symbol, Int64}, Core.Const(2)])
│         (v1 = Core.getfield(%34, 1))
│         (@_3 = Core.getfield(%34, 2))
│   %37 = Base.indexed_iterate(y::Tuple{Pair{Symbol, Int64}, Int64}, 2, @_3::Core.Const(2))::Core.PartialStruct(Tuple{Int64, Int64}, Any[Int64, Core.Const(3)])
│         (st = Core.getfield(%37, 1))
│   %39 = Base.typeof(v1)::Core.Const(Pair{Symbol, Int64})
│   %40 = Base.getproperty(itr, :iter)::UnitRange{Int64}
│   %41 = Base._array_for(%39, %40, isz)::Vector{Pair{Symbol, Int64}}
│   %42 = v1::Pair{Symbol, Int64}
│   %43 = Base.collect_to_with_first!(%41, %42, itr, st)::Vector{Pair{Symbol, Int64}}
└──       return %43
2×2 LArray{Float64, 2, Matrix{Float64}, (:a, :b, :c, :d)}:
 :a => 6.9410716418018e-310  :c => 6.94107161823606e-310
 :b => 0.0                   :d => 6.9410716146377e-3103-element LArray{Float64, 1, Vector{Float64}, (a = 1:2, b = 3)}:
 :a => 1.0
 :a => 2.0
 :b => 3.02-element LArray{Float64, 1, Vector{Float64}, (a = 1, b = 2)}:
 :a => 1.0
 :b => 2.02×2 LArray{Int64, 2, Matrix{Int64}, (a = (2, Colon()), b = 2:3)}:
 nothing => 1  :b => 2
      :a => 3  :a => 4Test Summary: | Pass  Total
LArrays       |   51     51
 15.277576 seconds (17.39 M allocations: 971.357 MiB, 6.61% gc time, 93.52% compilation time)
Test Summary: | Pass  Total
DiffEq        |    9      9
255.871656 seconds (67.40 M allocations: 3.895 GiB, 2.12% gc time, 30.51% compilation time)
288.972294 seconds (100.90 M allocations: 5.760 GiB, 2.49% gc time, 38.05% compilation time)
     Testing LabelledArrays tests passed 

PkgEval succeeded


################################################################################
# PkgEval teardown: 2020-10-28T12:01:43.026
#


signal (15): Terminated
in expression starting at none:1
pthread_cond_wait at /lib/x86_64-linux-gnu/libpthread.so.0 (unknown line)

CPU usage: 290.06s (256.47s user, 35.12s kernel)

Network usage:
- eth0: 9.950 MiB received, 197.586 KiB sent

Raw statistics: {"read":"2020-10-28T12:01:43.53220429Z","preread":"0001-01-01T00:00:00Z","pids_stats":{"current":46},"blkio_stats":{"io_service_bytes_recursive":[{"major":259,"minor":0,"op":"Read","value":0},{"major":259,"minor":0,"op":"Write","value":49152},{"major":259,"minor":0,"op":"Sync","value":0},{"major":259,"minor":0,"op":"Async","value":49152},{"major":259,"minor":0,"op":"Total","value":49152},{"major":253,"minor":2,"op":"Read","value":0},{"major":253,"minor":2,"op":"Write","value":49152},{"major":253,"minor":2,"op":"Sync","value":0},{"major":253,"minor":2,"op":"Async","value":49152},{"major":253,"minor":2,"op":"Total","value":49152}],"io_serviced_recursive":[{"major":259,"minor":0,"op":"Read","value":0},{"major":259,"minor":0,"op":"Write","value":9},{"major":259,"minor":0,"op":"Sync","value":0},{"major":259,"minor":0,"op":"Async","value":9},{"major":259,"minor":0,"op":"Total","value":9},{"major":253,"minor":2,"op":"Read","value":0},{"major":253,"minor":2,"op":"Write","value":9},{"major":253,"minor":2,"op":"Sync","value":0},{"major":253,"minor":2,"op":"Async","value":9},{"major":253,"minor":2,"op":"Total","value":9}],"io_queue_recursive":[],"io_service_time_recursive":[],"io_wait_time_recursive":[],"io_merged_recursive":[],"io_time_recursive":[],"sectors_recursive":[]},"num_procs":0,"storage_stats":{},"cpu_stats":{"cpu_usage":{"total_usage":290057966511,"percpu_usage":[1413023700,2905540353,1533032313,3658562202,3711934096,3839262166,6499938054,5908266183,2229612885,1115475303,3550430590,3779220946,5865530565,6265752537,8521379000,2801903138,2998825189,4445757789,3797193376,2440377787,4272482701,2815335072,7122172692,1818123204,3982167882,6164217365,4592610218,4411497399,3557499987,6541934963,1549672523,2076892212,301949313,146065488,430061484,535494267,353914337,651809674,315336674,359141466,490744653,462209534,569255560,477652044,1693278734,841403143,717310101,631318351,440490867,1188438201,656925408,226824479,369609990,581514679,373476504,388805826,1727140019,240042078,663897354,725923534,477290821,564147751,309788082,429622290,3170275449,4971496132,2914702966,4257598296,2463092179,3532275539,4058725739,3753708130,4215605299,2923621553,3946263215,3137565321,3082913022,3433760993,8410908001,5814053868,5384908254,7085564281,4399255430,3927145298,3480339080,2172909577,2346180275,5025883005,2794204636,3678850886,4342001444,6307567691,3562065594,2772194630,4005146872,3244337430,1140464579,195458676,404454219,386238865,198359218,646027015,1658198556,602452809,246744587,255529333,104272553,517020464,252707383,913935969,411958474,284935701,1116680786,451357990,1009590974,53308091,388403063,637200169,375019266,406389544,1152191750,396957132,747936777,520968677,621631063,422904846,115963358,281077443],"usage_in_kernelmode":35120000000,"usage_in_usermode":256470000000},"system_cpu_usage":94240348720000000,"online_cpus":128,"throttling_data":{"periods":3296,"throttled_periods":88,"throttled_time":14669176891}},"precpu_stats":{"cpu_usage":{"total_usage":0,"usage_in_kernelmode":0,"usage_in_usermode":0},"throttling_data":{"periods":0,"throttled_periods":0,"throttled_time":0}},"memory_stats":{"usage":298246144,"max_usage":1733394432,"stats":{"active_anon":227520512,"active_file":0,"cache":54820864,"dirty":0,"hierarchical_memory_limit":9223372036854771712,"hierarchical_memsw_limit":0,"inactive_anon":15265792,"inactive_file":8192,"mapped_file":0,"pgfault":5779100,"pgmajfault":0,"pgpgin":3159601,"pgpgout":3100325,"rss":187973632,"rss_huge":0,"total_active_anon":227520512,"total_active_file":0,"total_cache":54820864,"total_dirty":0,"total_inactive_anon":15265792,"total_inactive_file":8192,"total_mapped_file":0,"total_pgfault":5779100,"total_pgmajfault":0,"total_pgpgin":3159601,"total_pgpgout":3100325,"total_rss":187973632,"total_rss_huge":0,"total_unevictable":0,"total_writeback":0,"unevictable":0,"writeback":0},"limit":540972998656},"name":"/LabelledArrays-GCW46sHk","id":"d1757f83b0c4a349e1062c42b9d3b72cd988cdbc7daefb796301d1e045c4724d","networks":{"eth0":{"rx_bytes":10433038,"rx_packets":2182,"rx_errors":0,"rx_dropped":11,"tx_bytes":202328,"tx_packets":1719,"tx_errors":0,"tx_dropped":0}}}

