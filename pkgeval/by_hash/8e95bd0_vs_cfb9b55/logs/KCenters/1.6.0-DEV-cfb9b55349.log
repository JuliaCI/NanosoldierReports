Julia Version 1.6.0-DEV.139
Commit cfb9b55349 (2020-06-01 16:09 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed Reexport ──────────────────── v0.2.0
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed Missings ──────────────────── v0.4.3
  Installed DataAPI ───────────────────── v1.3.0
  Installed KCenters ──────────────────── v0.2.2
  Installed Tables ────────────────────── v1.0.4
  Installed CategoricalArrays ─────────── v0.7.7
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed DataValueInterfaces ───────── v1.0.0
  Installed InvertedIndices ───────────── v1.0.0
  Installed PooledArrays ──────────────── v0.5.3
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed TableTraits ───────────────── v1.0.0
  Installed MappedArrays ──────────────── v0.2.2
  Installed DataStructures ────────────── v0.17.17
  Installed Parsers ───────────────────── v1.0.4
  Installed OrderedCollections ────────── v1.2.0
  Installed MLDataUtils ───────────────── v0.5.1
  Installed DataFrames ────────────────── v0.20.2
  Installed JSON ──────────────────────── v0.21.0
  Installed Compat ────────────────────── v3.10.0
  Installed LearnBase ─────────────────── v0.2.2
  Installed MLDataPattern ─────────────── v0.5.3
  Installed StatsBase ─────────────────── v0.32.2
  Installed SimilaritySearch ──────────── v0.3.19
Updating `~/.julia/environments/v1.6/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.10.0
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.17
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.2.0
  [69de0a69] + Parsers v1.0.4
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_jMQuvU/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_jMQuvU/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.10.0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.17
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.2.0
  [69de0a69] Parsers v1.0.4
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.9316620069742203
[ Info: 0.8321307849884033
[ Info: 0.5531853482623895
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.33956977538764477
mean(cdnet.distances) = 0.3841504596173763
mean(crand.distances) = 0.3452425153553486
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7509765625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7509765625,"f1":0.850018731268732,"seconds":3.663450479507446e-5,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.1171875,"distances_sum":2213.1462315023587}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7509765625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7509765625,"f1":0.850018731268732,"seconds":3.663450479507446e-5,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.1171875,"distances_sum":2213.1462315023587}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9575606684981688,"seconds":6.115064024925232e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.8515625,"distances_sum":2918.4451002242154}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9248046875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.9575606684981688,"seconds":6.115064024925232e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.8515625,"distances_sum":2918.4451002242154}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":3,"bsize":12}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9726018772893777,"seconds":6.530433893203735e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.953125,"distances_sum":3053.475801487613}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9634157509157513,"seconds":6.7856162786483765e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.875,"distances_sum":2981.2044699210282}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.951171875,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9726018772893777,"seconds":6.530433893203735e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.953125,"distances_sum":3053.475801487613}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.951171875,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9726018772893777,"seconds":6.530433893203735e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.953125,"distances_sum":3053.475801487613}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6884765625, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6884765625,"f1":0.8032810939060948,"seconds":4.727393388748169e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.8984375,"distances_sum":1683.2857866229378}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.77734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.77734375,"f1":0.8665064102564111,"seconds":5.228444933891296e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.2109375,"distances_sum":1979.0129505664431}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.77734375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.77734375,"f1":0.8665064102564111,"seconds":5.228444933891296e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.2109375,"distances_sum":1979.0129505664431}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8271484375, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.8271484375,"f1":0.8981456043956051,"seconds":5.325302481651306e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.46875,"distances_sum":2167.433564751224}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8271484375,"state":{"ssize":8,"bsize":6},"perf":{"precision":1.0,"recall":0.8271484375,"f1":0.8981456043956051,"seconds":5.325302481651306e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.46875,"distances_sum":2167.433564751224}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":11,"bsize":9}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9419528388278394,"seconds":5.867332220077515e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.75,"distances_sum":2432.248239759445}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8349609375, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.8349609375,"f1":0.9038232600732609,"seconds":6.748363375663757e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.5078125,"distances_sum":2183.870957415318}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":10,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9554201007326013,"seconds":5.826354026794434e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8671875,"distances_sum":2521.6326430496924}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9334935897435905,"seconds":5.824491381645203e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.7578125,"distances_sum":2364.53477140734}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.859375, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.859375,"f1":0.9180777555777561,"seconds":5.731359124183655e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.6796875,"distances_sum":2287.3891136872403}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.921875,"state":{"ssize":10,"bsize":9},"perf":{"precision":1.0,"recall":0.921875,"f1":0.9554201007326013,"seconds":5.826354026794434e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8671875,"distances_sum":2521.6326430496924}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.921875,"state":{"ssize":10,"bsize":9},"perf":{"precision":1.0,"recall":0.921875,"f1":0.9554201007326013,"seconds":5.826354026794434e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8671875,"distances_sum":2521.6326430496924}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.15625,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.15625,"f1":null,"seconds":2.300366759300232e-6,"exhaustive_search_seconds":1.1324882507324219e-6,"evaluations":4.4765625,"distances_sum":453.20737138109956}}, beam: 1, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.15625,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.15625,"f1":null,"seconds":2.300366759300232e-6,"exhaustive_search_seconds":1.1324882507324219e-6,"evaluations":4.4765625,"distances_sum":453.20737138109956}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.791015625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.791015625,"f1":0.8729265526140532,"seconds":5.606561899185181e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.4140625,"distances_sum":1779.0100446215872}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4091796875, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.4091796875,"f1":null,"seconds":3.820285201072693e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":6.2109375,"distances_sum":837.9804137943959}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.791015625,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.791015625,"f1":0.8729265526140532,"seconds":5.606561899185181e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.4140625,"distances_sum":1779.0100446215872}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9355399808524816,"seconds":5.8785080909729e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.6796875,"distances_sum":2131.72463525266}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8544921875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8544921875,"f1":0.9138798701298709,"seconds":5.772337317466736e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.5078125,"distances_sum":1982.7226127193742}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.857421875, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.857421875,"f1":0.9165152555777565,"seconds":5.7220458984375e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.4765625,"distances_sum":1979.2768993928914}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8896484375,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.8896484375,"f1":0.9355399808524816,"seconds":5.8785080909729e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.6796875,"distances_sum":2131.72463525266}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9691048534798538,"seconds":6.0442835092544556e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.8828125,"distances_sum":2320.7746432087515}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.964755036630037,"seconds":5.880370736122131e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.84375,"distances_sum":2292.2790314601825}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.958984375, conf: {"ssize":6,"bsize":12}, perf: {"precision":1.0,"recall":0.958984375,"f1":0.977529761904762,"seconds":6.0070306062698364e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.9375,"distances_sum":2376.8979419885763}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9657967032967039,"seconds":5.939975380897522e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.875,"distances_sum":2293.4541376946413}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9615556318681324,"seconds":5.7034194469451904e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.78125,"distances_sum":2290.106485773267}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9562557234432238,"seconds":5.6568533182144165e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.8515625,"distances_sum":2244.136528656158}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9405422702297708,"seconds":5.587935447692871e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.703125,"distances_sum":2151.5199465309834}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.958984375,"state":{"ssize":6,"bsize":12},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.977529761904762,"seconds":6.0070306062698364e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.9375,"distances_sum":2376.8979419885763}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.958984375,"state":{"ssize":6,"bsize":12},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.977529761904762,"seconds":6.0070306062698364e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.9375,"distances_sum":2376.8979419885763}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.298828125, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.298828125,"f1":null,"seconds":2.734363079071045e-6,"exhaustive_search_seconds":1.1343508958816528e-6,"evaluations":6.4296875,"distances_sum":635.028678403298}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6533203125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6533203125,"f1":0.7774104367854376,"seconds":4.9192458391189575e-6,"exhaustive_search_seconds":1.1343508958816528e-6,"evaluations":7.2421875,"distances_sum":1241.6819467055227}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6533203125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6533203125,"f1":0.7774104367854376,"seconds":4.9192458391189575e-6,"exhaustive_search_seconds":1.1343508958816528e-6,"evaluations":7.2421875,"distances_sum":1241.6819467055227}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76171875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.76171875,"f1":0.8570315101565108,"seconds":5.075708031654358e-6,"exhaustive_search_seconds":1.1343508958816528e-6,"evaluations":7.84375,"distances_sum":1570.1863457213717}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9311901640026645,"seconds":5.3942203521728516e-6,"exhaustive_search_seconds":1.1343508958816528e-6,"evaluations":8.65625,"distances_sum":1993.6969368651776}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78515625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.78515625,"f1":0.8695986305361314,"seconds":5.146488547325134e-6,"exhaustive_search_seconds":1.1343508958816528e-6,"evaluations":7.953125,"distances_sum":1632.7318512305317}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8818359375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.8818359375,"f1":0.9311901640026645,"seconds":5.3942203521728516e-6,"exhaustive_search_seconds":1.1343508958816528e-6,"evaluations":8.65625,"distances_sum":1993.6969368651776}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9576350732600738,"seconds":5.591660737991333e-6,"exhaustive_search_seconds":1.1343508958816528e-6,"evaluations":8.75,"distances_sum":2163.777481194205}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9658882783882786,"seconds":5.8766454458236694e-6,"exhaustive_search_seconds":1.1343508958816528e-6,"evaluations":8.859375,"distances_sum":2222.095034850949}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9555517399267404,"seconds":5.148351192474365e-6,"exhaustive_search_seconds":1.1343508958816528e-6,"evaluations":8.7734375,"distances_sum":2142.467952914697}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9658882783882786,"seconds":5.8766454458236694e-6,"exhaustive_search_seconds":1.1343508958816528e-6,"evaluations":8.859375,"distances_sum":2222.095034850949}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.939453125,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9658882783882786,"seconds":5.8766454458236694e-6,"exhaustive_search_seconds":1.1343508958816528e-6,"evaluations":8.859375,"distances_sum":2222.095034850949}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2880859375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2880859375,"f1":null,"seconds":3.764405846595764e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":6.421875,"distances_sum":628.3841070672004}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.455078125, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.455078125,"f1":null,"seconds":4.179775714874268e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":6.421875,"distances_sum":876.1550233190661}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.455078125,"state":{"ssize":5,"bsize":2},"perf":{"precision":null,"recall":0.455078125,"f1":null,"seconds":4.179775714874268e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":6.421875,"distances_sum":876.1550233190661}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7509765625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7509765625,"f1":0.8510026431901441,"seconds":5.433335900306702e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":7.890625,"distances_sum":1587.0289745251955}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.67578125, conf: {"ssize":9,"bsize":4}, perf: {"precision":1.0,"recall":0.67578125,"f1":0.7967683358308366,"seconds":4.980713129043579e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":7.4609375,"distances_sum":1374.2270496384833}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6630859375, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6630859375,"f1":0.788040605228106,"seconds":4.883855581283569e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":7.46875,"distances_sum":1324.0078005964235}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6845703125, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6845703125,"f1":0.8004429598179608,"seconds":4.591420292854309e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":7.546875,"distances_sum":1410.730008481263}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7509765625,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7509765625,"f1":0.8510026431901441,"seconds":5.433335900306702e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":7.890625,"distances_sum":1587.0289745251955}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.765625,"f1":0.8605914918414925,"seconds":5.250796675682068e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":7.890625,"distances_sum":1626.454535159571}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8779296875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8779296875,"f1":0.9305918040293047,"seconds":6.029382348060608e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.828125,"distances_sum":2036.6453897050021}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.828125, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.828125,"f1":0.8995135073260079,"seconds":5.68293035030365e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.21875,"distances_sum":1868.39370695184}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87109375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.87109375,"f1":0.9248772061272069,"seconds":5.843117833137512e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.8125,"distances_sum":2004.0298927728998}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8408203125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8408203125,"f1":0.9080159423909432,"seconds":5.584210157394409e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.2734375,"distances_sum":1893.8177407539663}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8779296875,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.8779296875,"f1":0.9305918040293047,"seconds":6.029382348060608e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.828125,"distances_sum":2036.6453897050021}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8779296875,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.8779296875,"f1":0.9305918040293047,"seconds":6.029382348060608e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.828125,"distances_sum":2036.6453897050021}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7880859375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7880859375,"f1":0.8734864094239104,"seconds":8.344650268554688e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.15625,"distances_sum":1734.3212806673646}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.798828125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.798828125,"f1":0.8819310897435904,"seconds":6.336718797683716e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.328125,"distances_sum":1756.5282887707044}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.65625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.65625,"f1":0.7802000083250091,"seconds":5.444511771202087e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":7.53125,"distances_sum":1379.7762575090985}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.798828125,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.798828125,"f1":0.8819310897435904,"seconds":6.336718797683716e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.328125,"distances_sum":1756.5282887707044}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9388621794871801,"seconds":6.666406989097595e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.84375,"distances_sum":2082.5968883674177}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.949244505494506,"seconds":6.658956408500671e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.78125,"distances_sum":2174.216402253734}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9575034340659344,"seconds":6.645917892456055e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.7734375,"distances_sum":2221.04608886522}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9659054487179493,"seconds":6.448477506637573e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.84375,"distances_sum":2274.3459790165102}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8173828125, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8173828125,"f1":0.8878260628260637,"seconds":5.938112735748291e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.3359375,"distances_sum":1821.1732715203193}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.853515625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.853515625,"f1":0.9130926365301372,"seconds":6.4838677644729614e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.5078125,"distances_sum":1945.7371200740329}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9384765625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9659054487179493,"seconds":6.448477506637573e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.84375,"distances_sum":2274.3459790165102}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9739583333333336,"seconds":6.718561053276062e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.9609375,"distances_sum":2305.3114863590417}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9755780677655681,"seconds":6.429851055145264e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.953125,"distances_sum":2326.070413166365}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.972321428571429,"seconds":6.744638085365295e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.90625,"distances_sum":2314.9950231811804}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":2,"bsize":12}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.977066163003663,"seconds":6.888061761856079e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.953125,"distances_sum":2333.2819640506714}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":3,"bsize":13}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.9770833333333337,"seconds":6.839632987976074e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.921875,"distances_sum":2340.3798491645466}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9667983058608063,"seconds":6.472691893577576e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.9375,"distances_sum":2259.990729562041}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9580078125,"state":{"ssize":2,"bsize":12},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.977066163003663,"seconds":6.888061761856079e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.953125,"distances_sum":2333.2819640506714}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9580078125,"state":{"ssize":2,"bsize":12},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.977066163003663,"seconds":6.888061761856079e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.953125,"distances_sum":2333.2819640506714}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5439453125, conf: {"ssize":4,"bsize":3}, perf: {"precision":null,"recall":0.5439453125,"f1":null,"seconds":4.366040229797363e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":6.9921875,"distances_sum":1146.7294379561129}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1767578125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.1767578125,"f1":null,"seconds":2.771615982055664e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":4.6171875,"distances_sum":397.21531630029807}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2001953125, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2001953125,"f1":null,"seconds":2.857297658920288e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":4.6875,"distances_sum":530.6183789729167}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5439453125,"state":{"ssize":4,"bsize":3},"perf":{"precision":null,"recall":0.5439453125,"f1":null,"seconds":4.366040229797363e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":6.9921875,"distances_sum":1146.7294379561129}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8505859375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8505859375,"f1":0.9125889735264743,"seconds":5.522742867469788e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.6953125,"distances_sum":1951.6527209812882}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8505859375, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8505859375,"f1":0.9127637987012993,"seconds":5.500391125679016e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.53125,"distances_sum":1939.38265668821}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.65625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.65625,"f1":0.7760440947940958,"seconds":4.36045229434967e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":7.8046875,"distances_sum":1377.725815496875}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8505859375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8505859375,"f1":0.9125889735264743,"seconds":5.522742867469788e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.6953125,"distances_sum":1951.6527209812882}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9343292124542132,"seconds":5.280598998069763e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.640625,"distances_sum":2134.9922823454203}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9574461996337001,"seconds":5.5655837059021e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.8125,"distances_sum":2243.316811994844}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9248046875,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.9574461996337001,"seconds":5.5655837059021e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.8125,"distances_sum":2243.316811994844}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9248046875,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.9574461996337001,"seconds":5.5655837059021e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.8125,"distances_sum":2243.316811994844}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.71484375, conf: {"ssize":5,"bsize":4}, perf: {"precision":null,"recall":0.71484375,"f1":null,"seconds":4.976987838745117e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.0390625,"distances_sum":1635.0069919516711}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5283203125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5283203125,"f1":0.6797001609501614,"seconds":4.461035132408142e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":7.109375,"distances_sum":1099.6194142983527}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.71484375,"state":{"ssize":5,"bsize":4},"perf":{"precision":null,"recall":0.71484375,"f1":null,"seconds":4.976987838745117e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.0390625,"distances_sum":1635.0069919516711}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9471783424908432,"seconds":5.509704351425171e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.7109375,"distances_sum":2293.3299100507393}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9334249084249091,"seconds":5.4389238357543945e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.5625,"distances_sum":2162.4431475109604}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.837890625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.837890625,"f1":0.9039127539127545,"seconds":5.416572093963623e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.28125,"distances_sum":1963.2786072671818}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7890625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7890625,"f1":0.8726658757908767,"seconds":5.036592483520508e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.3046875,"distances_sum":1810.208340400343}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9052734375,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.9052734375,"f1":0.9471783424908432,"seconds":5.509704351425171e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.7109375,"distances_sum":2293.3299100507393}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.949490613553114,"seconds":5.602836608886719e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.6953125,"distances_sum":2269.693750242898}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9667639652014656,"seconds":5.893409252166748e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.8515625,"distances_sum":2388.294463731817}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9561469780219787,"seconds":5.729496479034424e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.7734375,"distances_sum":2320.6178274187428}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":11,"bsize":10}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9598271520146526,"seconds":5.219131708145142e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.7734375,"distances_sum":2353.2202986049374}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":9,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9687500000000002,"seconds":6.200745701789856e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.8515625,"distances_sum":2402.4642444540946}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.943359375,"state":{"ssize":9,"bsize":10},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9687500000000002,"seconds":6.200745701789856e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.8515625,"distances_sum":2402.4642444540946}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.943359375,"state":{"ssize":9,"bsize":10},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9687500000000002,"seconds":6.200745701789856e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.8515625,"distances_sum":2402.4642444540946}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.802734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.802734375,"f1":0.8813337703962714,"seconds":5.688518285751343e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.2265625,"distances_sum":1812.7914475152027}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6005859375, conf: {"ssize":4,"bsize":3}, perf: {"precision":null,"recall":0.6005859375,"f1":null,"seconds":4.785135388374329e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":7.2890625,"distances_sum":1214.0292607821768}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.71484375, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.71484375,"f1":0.822897415084916,"seconds":5.327165126800537e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":7.75,"distances_sum":1520.3300649766777}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.802734375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.802734375,"f1":0.8813337703962714,"seconds":5.688518285751343e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.2265625,"distances_sum":1812.7914475152027}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9583905677655682,"seconds":6.280839443206787e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.828125,"distances_sum":2314.86846927417}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8603515625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8603515625,"f1":0.9193827006327012,"seconds":6.094574928283691e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.7421875,"distances_sum":2039.7059014869642}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9534111721611729,"seconds":6.420537829399109e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.828125,"distances_sum":2276.9276901966796}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9511046245421247,"seconds":6.42240047454834e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.8046875,"distances_sum":2257.699342736653}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.876953125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.876953125,"f1":0.9305173992674002,"seconds":5.753710865974426e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.7578125,"distances_sum":2138.082977593689}, best_list's length: 14, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8486328125, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.8486328125,"f1":0.9119047619047629,"seconds":5.62518835067749e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.328125,"distances_sum":2002.445532934169}, best_list's length: 15, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.92578125,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.92578125,"f1":0.9583905677655682,"seconds":6.280839443206787e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.828125,"distances_sum":2314.86846927417}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.976156135531136,"seconds":6.398186087608337e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.9453125,"distances_sum":2396.412398165204}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":5,"bsize":12}, perf: {"precision":1.0,"recall":0.953125,"f1":0.974479166666667,"seconds":7.0855021476745605e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.8984375,"distances_sum":2407.1755164318997}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9606258325008329,"seconds":6.979331374168396e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.859375,"distances_sum":2305.4941326958015}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9612580128205132,"seconds":6.804242730140686e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.90625,"distances_sum":2316.832209282324}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9671932234432238,"seconds":7.0463865995407104e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.9140625,"distances_sum":2347.6826783972924}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.95703125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.976156135531136,"seconds":6.398186087608337e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.9453125,"distances_sum":2396.412398165204}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.95703125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.976156135531136,"seconds":6.398186087608337e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.9453125,"distances_sum":2396.412398165204}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.55859375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.55859375,"f1":0.697974421411922,"seconds":5.014240741729736e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":6.7109375,"distances_sum":1197.577388018664}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7578125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7578125,"f1":0.8502455877455886,"seconds":6.22868537902832e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":7.9140625,"distances_sum":1684.9826396689953}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7578125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7578125,"f1":0.8502455877455886,"seconds":6.22868537902832e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":7.9140625,"distances_sum":1684.9826396689953}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.8572568056943064,"seconds":6.0927122831344604e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":7.9765625,"distances_sum":1746.4719813276363}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9499141483516489,"seconds":6.809830665588379e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.6953125,"distances_sum":2289.2228249114246}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.912109375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.912109375,"f1":0.9499141483516489,"seconds":6.809830665588379e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.6953125,"distances_sum":2289.2228249114246}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9514766483516488,"seconds":6.552785634994507e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.765625,"distances_sum":2281.5432819634316}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9140625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.9514766483516488,"seconds":6.552785634994507e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.765625,"distances_sum":2281.5432819634316}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9140625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.9514766483516488,"seconds":6.552785634994507e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.765625,"distances_sum":2281.5432819634316}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.236328125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.236328125,"f1":null,"seconds":3.982335329055786e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":6.0625,"distances_sum":529.3620171783197}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.236328125,"state":{"ssize":5,"bsize":1},"perf":{"precision":null,"recall":0.236328125,"f1":null,"seconds":3.982335329055786e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":6.0625,"distances_sum":529.3620171783197}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6591796875, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6591796875,"f1":0.7820075757575765,"seconds":5.533918738365173e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":7.59375,"distances_sum":1427.9244964948841}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5498046875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5498046875,"f1":0.6941894910644917,"seconds":4.624947905540466e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":6.875,"distances_sum":1106.1784580542026}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6591796875,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.6591796875,"f1":0.7820075757575765,"seconds":5.533918738365173e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":7.59375,"distances_sum":1427.9244964948841}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.822265625, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.822265625,"f1":0.8957422785547793,"seconds":6.1746686697006226e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.359375,"distances_sum":1911.2320776714012}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9410599816849823,"seconds":6.334856152534485e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.875,"distances_sum":2203.6550600611977}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7490234375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7490234375,"f1":0.8489422036297044,"seconds":5.505979061126709e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":7.8828125,"distances_sum":1694.202030511306}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.89453125,"state":{"ssize":6,"bsize":7},"perf":{"precision":1.0,"recall":0.89453125,"f1":0.9410599816849823,"seconds":6.334856152534485e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.875,"distances_sum":2203.6550600611977}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.89453125,"state":{"ssize":6,"bsize":7},"perf":{"precision":1.0,"recall":0.89453125,"f1":0.9410599816849823,"seconds":6.334856152534485e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.875,"distances_sum":2203.6550600611977}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.236328125, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.236328125,"f1":null,"seconds":3.859400749206543e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":5.59375,"distances_sum":572.8536665037999}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.671875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.671875,"f1":0.7911047286047294,"seconds":5.41098415851593e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":7.84375,"distances_sum":1509.414216820891}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.671875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.671875,"f1":0.7911047286047294,"seconds":5.41098415851593e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":7.84375,"distances_sum":1509.414216820891}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.70703125, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.70703125,"f1":0.8192357989232999,"seconds":5.77978789806366e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":7.9296875,"distances_sum":1596.6233797329214}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.70703125,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.70703125,"f1":0.8192357989232999,"seconds":5.77978789806366e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":7.9296875,"distances_sum":1596.6233797329214}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9494677197802205,"seconds":6.588175892829895e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.7578125,"distances_sum":2422.358462285727}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.912109375,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.912109375,"f1":0.9494677197802205,"seconds":6.588175892829895e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.7578125,"distances_sum":2422.358462285727}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.912109375,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.912109375,"f1":0.9494677197802205,"seconds":6.588175892829895e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.7578125,"distances_sum":2422.358462285727}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7890625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7890625,"f1":0.8761623792873802,"seconds":5.932524800300598e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.125,"distances_sum":1863.4603352131137}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7890625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7890625,"f1":0.8761623792873802,"seconds":5.932524800300598e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.125,"distances_sum":1863.4603352131137}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.814453125, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.814453125,"f1":0.8895604395604403,"seconds":5.964189767837524e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.1875,"distances_sum":2000.6390788223732}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.814453125,"state":{"ssize":2,"bsize":6},"perf":{"precision":1.0,"recall":0.814453125,"f1":0.8895604395604403,"seconds":5.964189767837524e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.1875,"distances_sum":2000.6390788223732}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9705357142857146,"seconds":6.640329957008362e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.890625,"distances_sum":2534.454016524191}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8505859375, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.8505859375,"f1":0.9132071053946059,"seconds":6.0442835092544556e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.6484375,"distances_sum":2144.6682344023648}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.95603250915751,"seconds":6.552785634994507e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.8359375,"distances_sum":2411.4047321069}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8466796875, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.8466796875,"f1":0.9119219322344331,"seconds":6.096437573432922e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.4296875,"distances_sum":2112.827512334345}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9705357142857146,"seconds":6.640329957008362e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.890625,"distances_sum":2534.454016524191}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9705357142857146,"seconds":6.640329957008362e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.890625,"distances_sum":2534.454016524191}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6455078125, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6455078125,"f1":0.7687565906315915,"seconds":5.377456545829773e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.7890625,"distances_sum":1424.1199380838157}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.564453125, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.564453125,"f1":null,"seconds":4.637986421585083e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.1640625,"distances_sum":1172.6526550781487}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.552734375, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.552734375,"f1":0.6942132520257525,"seconds":4.541128873825073e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.0859375,"distances_sum":1138.8745687209403}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6455078125,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.6455078125,"f1":0.7687565906315915,"seconds":5.377456545829773e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.7890625,"distances_sum":1424.1199380838157}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8564453125, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8564453125,"f1":0.9167015276390282,"seconds":6.0480087995529175e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.5234375,"distances_sum":2137.3432826429807}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8203125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8203125,"f1":0.8927291458541465,"seconds":6.236135959625244e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.3125,"distances_sum":1935.9714651404217}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7529296875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7529296875,"f1":0.8465669746919753,"seconds":6.109476089477539e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.1875,"distances_sum":1764.982196942431}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6669921875, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.6669921875,"f1":0.7860436438561447,"seconds":6.7818909883499146e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.78125,"distances_sum":1487.0100898469798}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8642578125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8642578125,"f1":0.9214629120879129,"seconds":6.329268217086792e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.4765625,"distances_sum":2191.2731900563836}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8642578125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8642578125,"f1":0.9214629120879129,"seconds":6.329268217086792e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.4765625,"distances_sum":2191.2731900563836}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8779296875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8779296875,"f1":0.9296417124542133,"seconds":6.616115570068359e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.59375,"distances_sum":2212.0544037350037}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9684008699633704,"seconds":5.7425349950790405e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.8828125,"distances_sum":2436.090618915645}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9312099358974364,"seconds":5.4854899644851685e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.5703125,"distances_sum":2258.729386747997}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":8,"bsize":10}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9595638736263739,"seconds":5.977228283882141e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.8125,"distances_sum":2396.5761080584225}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9537831959706965,"seconds":5.766749382019043e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.7578125,"distances_sum":2380.8367250457513}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.943359375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9684008699633704,"seconds":5.7425349950790405e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.8828125,"distances_sum":2436.090618915645}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.943359375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9684008699633704,"seconds":5.7425349950790405e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.8828125,"distances_sum":2436.090618915645}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6328125, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6328125,"f1":0.7619569666444673,"seconds":4.798173904418945e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":7.0078125,"distances_sum":1527.4364262091578}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1923828125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1923828125,"f1":null,"seconds":3.0957162380218506e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":4.8359375,"distances_sum":515.9057175506239}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6328125,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.6328125,"f1":0.7619569666444673,"seconds":4.798173904418945e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":7.0078125,"distances_sum":1527.4364262091578}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6533203125, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6533203125,"f1":0.7781869172494181,"seconds":4.6174973249435425e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":7.140625,"distances_sum":1570.5557363847279}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.837890625, conf: {"ssize":9,"bsize":6}, perf: {"precision":1.0,"recall":0.837890625,"f1":0.9047853188478197,"seconds":5.772337317466736e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.5078125,"distances_sum":2217.8193743375855}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.837890625,"state":{"ssize":9,"bsize":6},"perf":{"precision":1.0,"recall":0.837890625,"f1":0.9047853188478197,"seconds":5.772337317466736e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.5078125,"distances_sum":2217.8193743375855}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.841796875, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.841796875,"f1":0.9084935897435905,"seconds":5.5674463510513306e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.65625,"distances_sum":2153.809139566809}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.841796875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.841796875,"f1":0.906393606393607,"seconds":5.66430389881134e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.4765625,"distances_sum":2225.2035575598998}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.841796875,"state":{"ssize":6,"bsize":6},"perf":{"precision":1.0,"recall":0.841796875,"f1":0.9084935897435905,"seconds":5.5674463510513306e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.65625,"distances_sum":2153.809139566809}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.841796875,"state":{"ssize":6,"bsize":6},"perf":{"precision":1.0,"recall":0.841796875,"f1":0.9084935897435905,"seconds":5.5674463510513306e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.65625,"distances_sum":2153.809139566809}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.28125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.28125,"f1":null,"seconds":3.7439167499542236e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":6.2734375,"distances_sum":636.7765114711307}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.28125,"state":{"ssize":5,"bsize":1},"perf":{"precision":null,"recall":0.28125,"f1":null,"seconds":3.7439167499542236e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":6.2734375,"distances_sum":636.7765114711307}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6875, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6875,"f1":0.8020269660894669,"seconds":4.649162292480469e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.390625,"distances_sum":1525.2171535457592}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6875,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.6875,"f1":0.8020269660894669,"seconds":4.649162292480469e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.390625,"distances_sum":1525.2171535457592}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.826171875, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.826171875,"f1":0.895108884171385,"seconds":5.505979061126709e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.484375,"distances_sum":2031.3020799174685}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9545844780219787,"seconds":6.098300218582153e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.8125,"distances_sum":2404.025339048999}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.740234375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.740234375,"f1":0.8434924450549459,"seconds":5.129724740982056e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.0,"distances_sum":1697.675157811756}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.919921875,"state":{"ssize":6,"bsize":8},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.9545844780219787,"seconds":6.098300218582153e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.8125,"distances_sum":2404.025339048999}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.919921875,"state":{"ssize":6,"bsize":8},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.9545844780219787,"seconds":6.098300218582153e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.8125,"distances_sum":2404.025339048999}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4208984375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4208984375,"f1":null,"seconds":3.8053840398788452e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":5.9765625,"distances_sum":928.3959211998165}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.28515625, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.28515625,"f1":null,"seconds":3.5222619771957397e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":6.1875,"distances_sum":640.3297233651084}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7646484375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7646484375,"f1":0.8590576090576098,"seconds":5.107372999191284e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.1171875,"distances_sum":1898.7999517427088}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7646484375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7646484375,"f1":0.8590576090576098,"seconds":5.107372999191284e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.1171875,"distances_sum":1898.7999517427088}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9601965742590749,"seconds":5.591660737991333e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.828125,"distances_sum":2602.67767566583}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9296875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9296875,"f1":0.9601965742590749,"seconds":5.591660737991333e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.828125,"distances_sum":2602.67767566583}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9661687271062274,"seconds":5.453824996948242e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.890625,"distances_sum":2621.729060653211}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.96856684981685,"seconds":5.932524800300598e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.8984375,"distances_sum":2634.490173602062}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.943359375,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.96856684981685,"seconds":5.932524800300598e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.8984375,"distances_sum":2634.490173602062}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.943359375,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.96856684981685,"seconds":5.932524800300598e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.8984375,"distances_sum":2634.490173602062}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.560546875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.560546875,"f1":0.7028591200466205,"seconds":4.058703780174255e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":6.5703125,"distances_sum":1225.3539104755082}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.224609375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.224609375,"f1":null,"seconds":3.4011900424957275e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":5.15625,"distances_sum":519.5206191255585}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.22265625, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.22265625,"f1":null,"seconds":3.1106173992156982e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":5.109375,"distances_sum":496.66573310731144}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.560546875,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.560546875,"f1":0.7028591200466205,"seconds":4.058703780174255e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":6.5703125,"distances_sum":1225.3539104755082}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9357200091575096,"seconds":5.727633833885193e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.5625,"distances_sum":2355.5055861370192}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8310546875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8310546875,"f1":0.9014854936729945,"seconds":5.2675604820251465e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.3671875,"distances_sum":2099.596558206471}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6640625, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6640625,"f1":0.7868369477744486,"seconds":4.837289452552795e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":7.109375,"distances_sum":1531.0750676860723}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6357421875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6357421875,"f1":0.7661229395604402,"seconds":4.559755325317383e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":6.9453125,"distances_sum":1455.2324156707691}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.888671875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.888671875,"f1":0.9357200091575096,"seconds":5.727633833885193e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.5625,"distances_sum":2355.5055861370192}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9722870879120884,"seconds":6.1355531215667725e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.8828125,"distances_sum":2566.442882978546}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9574805402930407,"seconds":5.889683961868286e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.796875,"distances_sum":2482.7797335896557}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9383819305694312,"seconds":5.552545189857483e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.65625,"distances_sum":2336.87894656795}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9501953125,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9722870879120884,"seconds":6.1355531215667725e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.8828125,"distances_sum":2566.442882978546}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9501953125,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9722870879120884,"seconds":6.1355531215667725e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.8828125,"distances_sum":2566.442882978546}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.203125,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.203125,"f1":null,"seconds":3.2354146242141724e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":4.984375,"distances_sum":476.26621749435276}}, beam: 1, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.203125,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.203125,"f1":null,"seconds":3.2354146242141724e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":4.984375,"distances_sum":476.26621749435276}}, n: 9
mean(cfft.distances) = 0.6020458501488667
mean(cdnet.distances) = 0.339911672312394
mean(crand.distances) = 0.915464613434671
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8822222222222221
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8711111111111111
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.9
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8711111111111111
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.9022222222222224
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.9022222222222221
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9288888888888889
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9377777777777778
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9422222222222222
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8866666666666667
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8866666666666667
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8822222222222221
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8999999999999999
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8888888888888888
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9444444444444443
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9111111111111111
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9333333333333332
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9377777777777778
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8355555555555556
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.9377777777777778
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8777777777777778
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8733333333333334
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.8755555555555556
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9066666666666667
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8866666666666667
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.8911111111111111
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9044444444444445
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8466666666666667
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8688888888888888
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9022222222222224
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.88
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9177777777777778
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.88
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.92
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.9733333333333334
*** finished computation of 12 references, err: [Inf, 0.5144179357091586] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 19, 14]]
** centroid: 1, normalized-entropy: 0.9833761901392238, [(2, 19), (3, 14)]
*** center 2: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 16, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 1, 1]]
** centroid: 9, normalized-entropy: 1.0, [(2, 1), (3, 1)]
*** center 10: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 9, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
finished with 14 centroids; started with 12
acc = 0.96
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.2441416370655889] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2441416370655889, 0.19166865086425905] ***
*** starting iteration: 2; err: [Inf, 0.2441416370655889, 0.19166865086425905] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2441416370655889, 0.19166865086425905, 0.18921778264079897] ***
*** starting iteration: 3; err: [Inf, 0.2441416370655889, 0.19166865086425905, 0.18921778264079897] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2441416370655889, 0.19166865086425905, 0.18921778264079897, 0.18742937366778348] ***
*** starting iteration: 4; err: [Inf, 0.2441416370655889, 0.19166865086425905, 0.18921778264079897, 0.18742937366778348] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2441416370655889, 0.19166865086425905, 0.18921778264079897, 0.18742937366778348, 0.18651917604157056] ***
*** finished computation of 7 references, err: [Inf, 0.2441416370655889, 0.19166865086425905, 0.18921778264079897, 0.18742937366778348, 0.18651917604157056] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [11, 88, 0]]
** centroid: 1, normalized-entropy: 0.5032583347756457, [(1, 11), (2, 88)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [68, 35, 0]]
** centroid: 2, normalized-entropy: 0.9246327718618892, [(1, 68), (2, 35)]
*** center 3: selecting labels [1] (freq >= 1) [from [96, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [45, 43, 0]]
** centroid: 4, normalized-entropy: 0.9996273710574612, [(1, 45), (2, 43)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 97, 22]]
** centroid: 5, normalized-entropy: 0.6906241389199443, [(2, 97), (3, 22)]
*** center 6: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2338857207156863] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2338857207156863, 0.1965555465826276] ***
*** starting iteration: 2; err: [Inf, 0.2338857207156863, 0.1965555465826276] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2338857207156863, 0.1965555465826276, 0.1926888099046371] ***
*** starting iteration: 3; err: [Inf, 0.2338857207156863, 0.1965555465826276, 0.1926888099046371] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2338857207156863, 0.1965555465826276, 0.1926888099046371, 0.1911208861349695] ***
*** starting iteration: 4; err: [Inf, 0.2338857207156863, 0.1965555465826276, 0.1926888099046371, 0.1911208861349695] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2338857207156863, 0.1965555465826276, 0.1926888099046371, 0.1911208861349695, 0.18935268028043042] ***
*** starting iteration: 5; err: [Inf, 0.2338857207156863, 0.1965555465826276, 0.1926888099046371, 0.1911208861349695, 0.18935268028043042] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2338857207156863, 0.1965555465826276, 0.1926888099046371, 0.1911208861349695, 0.18935268028043042, 0.18868366436965797] ***
*** finished computation of 7 references, err: [Inf, 0.2338857207156863, 0.1965555465826276, 0.1926888099046371, 0.1911208861349695, 0.18935268028043042, 0.18868366436965797] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 101, 27]]
** centroid: 1, normalized-entropy: 0.7432709194035553, [(2, 101), (3, 27)]
*** center 2: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [49, 35, 0]]
** centroid: 3, normalized-entropy: 0.9798687566511527, [(1, 49), (2, 35)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [70, 5, 0]]
** centroid: 4, normalized-entropy: 0.3533593350214213, [(1, 70), (2, 5)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [91, 13, 0]]
** centroid: 5, normalized-entropy: 0.5435644431995963, [(1, 91), (2, 13)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [15, 87, 0]]
** centroid: 6, normalized-entropy: 0.6024308020404452, [(1, 15), (2, 87)]
*** center 7: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.46086091232729387] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.46086091232729387, 0.2984969779127487] ***
*** starting iteration: 2; err: [Inf, 0.46086091232729387, 0.2984969779127487] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.46086091232729387, 0.2984969779127487, 0.296155057332196] ***
*** starting iteration: 3; err: [Inf, 0.46086091232729387, 0.2984969779127487, 0.296155057332196] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.46086091232729387, 0.2984969779127487, 0.296155057332196, 0.2960966493033835] ***
*** finished computation of 3 references, err: [Inf, 0.46086091232729387, 0.2984969779127487, 0.296155057332196, 0.2960966493033835] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [67, 178, 21]]
** centroid: 1, normalized-entropy: 0.7432588158639112, [(1, 67), (2, 178), (3, 21)]
*** center 2: selecting labels [1] (freq >= 2) [from [207, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [111, 82, 0]]
** centroid: 3, normalized-entropy: 0.9836517235709581, [(1, 111), (2, 82)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.500501602153661] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.500501602153661, 0.30103601562068694] ***
*** starting iteration: 2; err: [Inf, 0.500501602153661, 0.30103601562068694] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.500501602153661, 0.30103601562068694, 0.29436308420591356] ***
*** starting iteration: 3; err: [Inf, 0.500501602153661, 0.30103601562068694, 0.29436308420591356] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.500501602153661, 0.30103601562068694, 0.29436308420591356, 0.29195345692180175] ***
*** finished computation of 3 references, err: [Inf, 0.500501602153661, 0.30103601562068694, 0.29436308420591356, 0.29195345692180175] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [66, 168, 22]]
** centroid: 1, normalized-entropy: 0.7616829591415583, [(1, 66), (2, 168), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [110, 95, 0]]
** centroid: 2, normalized-entropy: 0.9961344835095798, [(1, 110), (2, 95)]
*** center 3: selecting labels [1] (freq >= 2) [from [206, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.397079781242374] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.397079781242374, 0.30361099464670827] ***
*** starting iteration: 2; err: [Inf, 0.397079781242374, 0.30361099464670827] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.397079781242374, 0.30361099464670827, 0.29934622059161514] ***
*** starting iteration: 3; err: [Inf, 0.397079781242374, 0.30361099464670827, 0.29934622059161514] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.397079781242374, 0.30361099464670827, 0.29934622059161514, 0.2990888980031572] ***
*** finished computation of 3 references, err: [Inf, 0.397079781242374, 0.30361099464670827, 0.29934622059161514, 0.2990888980031572] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [73, 163, 27]]
** centroid: 1, normalized-entropy: 0.8064238233667902, [(1, 73), (2, 163), (3, 27)]
*** center 2: selecting labels [1] (freq >= 2) [from [219, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [107, 78, 0]]
** centroid: 3, normalized-entropy: 0.9822012409694036, [(1, 107), (2, 78)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2027691858037523] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2027691858037523, 0.15521142458229945] ***
*** finished computation of 7 references, err: [Inf, 0.2027691858037523, 0.15521142458229945] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [5, 105, 1]]
** centroid: 1, normalized-entropy: 0.2667649878030262, [(1, 5), (2, 105)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [69, 18, 0]]
** centroid: 2, normalized-entropy: 0.7355085815538399, [(1, 69), (2, 18)]
*** center 3: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 98, 20]]
** centroid: 4, normalized-entropy: 0.656540281386946, [(2, 98), (3, 20)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [80, 32, 0]]
** centroid: 5, normalized-entropy: 0.8631205685666311, [(1, 80), (2, 32)]
*** center 6: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [58, 7, 0]]
** centroid: 7, normalized-entropy: 0.49291577961610966, [(1, 58), (2, 7)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2070799004258602] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2070799004258602, 0.1512670894998169] ***
*** finished computation of 7 references, err: [Inf, 0.2070799004258602, 0.1512670894998169] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [60, 55, 0]]
** centroid: 1, normalized-entropy: 0.9986359641585719, [(1, 60), (2, 55)]
*** center 2: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 87, 22]]
** centroid: 4, normalized-entropy: 0.725582675704817, [(2, 87), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [90, 28, 0]]
** centroid: 5, normalized-entropy: 0.7905013842153699, [(1, 90), (2, 28)]
*** center 6: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [4, 93, 0]]
** centroid: 7, normalized-entropy: 0.24793583772272637, [(1, 4), (2, 93)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19623858942419872] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19623858942419872, 0.15248527085810698] ***
*** finished computation of 7 references, err: [Inf, 0.19623858942419872, 0.15248527085810698] ***
*** center 1: selecting labels [2] (freq >= 2) [from [1, 134, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [48, 33, 0]]
** centroid: 3, normalized-entropy: 0.975119064940866, [(1, 48), (2, 33)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [64, 29, 0]]
** centroid: 4, normalized-entropy: 0.8952722642402938, [(1, 64), (2, 29)]
*** center 5: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [112, 2, 0]]
** centroid: 6, normalized-entropy: 0.1274185117923586, [(1, 112), (2, 2)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 43, 27]]
** centroid: 7, normalized-entropy: 0.9619780596506257, [(2, 43), (3, 27)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25405601498757574] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25405601498757574, 0.20622286633182843] ***
*** starting iteration: 2; err: [Inf, 0.25405601498757574, 0.20622286633182843] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25405601498757574, 0.20622286633182843, 0.19974954531167274] ***
*** starting iteration: 3; err: [Inf, 0.25405601498757574, 0.20622286633182843, 0.19974954531167274] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25405601498757574, 0.20622286633182843, 0.19974954531167274, 0.1970556194309492] ***
*** finished computation of 7 references, err: [Inf, 0.25405601498757574, 0.20622286633182843, 0.19974954531167274, 0.1970556194309492] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [102, 37, 0]]
** centroid: 1, normalized-entropy: 0.8359399258935529, [(1, 102), (2, 37)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 110, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [57, 11, 0]]
** centroid: 3, normalized-entropy: 0.6385146263620961, [(1, 57), (2, 11)]
*** center 4: selecting labels [1] (freq >= 2) [from [112, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [33, 46, 0]]
** centroid: 5, normalized-entropy: 0.980377508715691, [(1, 33), (2, 46)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [81, 9, 0]]
** centroid: 6, normalized-entropy: 0.46899559358928133, [(1, 81), (2, 9)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 47, 21]]
** centroid: 7, normalized-entropy: 0.8918107543797084, [(2, 47), (3, 21)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.39728516822672455] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.39728516822672455, 0.21813380149384398] ***
*** starting iteration: 2; err: [Inf, 0.39728516822672455, 0.21813380149384398] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.39728516822672455, 0.21813380149384398, 0.20100078123134338] ***
*** starting iteration: 3; err: [Inf, 0.39728516822672455, 0.21813380149384398, 0.20100078123134338] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.39728516822672455, 0.21813380149384398, 0.20100078123134338, 0.19561166890702772] ***
*** finished computation of 7 references, err: [Inf, 0.39728516822672455, 0.21813380149384398, 0.20100078123134338, 0.19561166890702772] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 114, 22]]
** centroid: 1, normalized-entropy: 0.6385146263620961, [(2, 114), (3, 22)]
*** center 2: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [129, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [3, 54, 0]]
** centroid: 4, normalized-entropy: 0.2974722489192896, [(1, 3), (2, 54)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [53, 35, 0]]
** centroid: 5, normalized-entropy: 0.9696055994904408, [(1, 53), (2, 35)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [91, 50, 0]]
** centroid: 6, normalized-entropy: 0.9381178648327114, [(1, 91), (2, 50)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [42, 10, 0]]
** centroid: 7, normalized-entropy: 0.7062740891876008, [(1, 42), (2, 10)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.30251422818195817] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30251422818195817, 0.22086965716744159] ***
*** starting iteration: 2; err: [Inf, 0.30251422818195817, 0.22086965716744159] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30251422818195817, 0.22086965716744159, 0.21111175286649228] ***
*** starting iteration: 3; err: [Inf, 0.30251422818195817, 0.22086965716744159, 0.21111175286649228] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30251422818195817, 0.22086965716744159, 0.21111175286649228, 0.2066033968445042] ***
*** finished computation of 7 references, err: [Inf, 0.30251422818195817, 0.22086965716744159, 0.21111175286649228, 0.2066033968445042] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [110, 55, 0]]
** centroid: 1, normalized-entropy: 0.9182958340544894, [(1, 110), (2, 55)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [14, 37, 0]]
** centroid: 2, normalized-entropy: 0.8478617451660525, [(1, 14), (2, 37)]
*** center 3: selecting labels [1] (freq >= 2) [from [118, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [101, 2, 0]]
** centroid: 4, normalized-entropy: 0.13815722856252646, [(1, 101), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [11, 39, 0]]
** centroid: 5, normalized-entropy: 0.7601675029619658, [(1, 11), (2, 39)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 108, 27]]
** centroid: 6, normalized-entropy: 0.7219280948873623, [(2, 108), (3, 27)]
*** center 7: selecting labels [1] (freq >= 2) [from [45, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.32111546883286834] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32111546883286834, 0.2354407491925936] ***
*** starting iteration: 2; err: [Inf, 0.32111546883286834, 0.2354407491925936] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32111546883286834, 0.2354407491925936, 0.23496904514741163] ***
*** finished computation of 3 references, err: [Inf, 0.32111546883286834, 0.2354407491925936, 0.23496904514741163] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [101, 129, 6]]
** centroid: 1, normalized-entropy: 0.7161221368137958, [(1, 101), (2, 129), (3, 6)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [83, 131, 15]]
** centroid: 2, normalized-entropy: 0.7881597143753761, [(1, 83), (2, 131), (3, 15)]
*** center 3: selecting labels [1] (freq >= 1) [from [201, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.24965405776940364] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.24965405776940364, 0.2296010918846854] ***
*** starting iteration: 2; err: [Inf, 0.24965405776940364, 0.2296010918846854] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.24965405776940364, 0.2296010918846854, 0.22606732802133242] ***
*** starting iteration: 3; err: [Inf, 0.24965405776940364, 0.2296010918846854, 0.22606732802133242] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.24965405776940364, 0.2296010918846854, 0.22606732802133242, 0.2256642058194996] ***
*** finished computation of 3 references, err: [Inf, 0.24965405776940364, 0.2296010918846854, 0.22606732802133242, 0.2256642058194996] ***
*** center 1: selecting labels [1] (freq >= 1) [from [235, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [13, 198, 22]]
** centroid: 2, normalized-entropy: 0.4753082192456905, [(1, 13), (2, 198), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [134, 65, 0]]
** centroid: 3, normalized-entropy: 0.9114494478391713, [(1, 134), (2, 65)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4912387081184543] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4912387081184543, 0.27487255849301634] ***
*** starting iteration: 2; err: [Inf, 0.4912387081184543, 0.27487255849301634] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4912387081184543, 0.27487255849301634, 0.2459426148455294] ***
*** starting iteration: 3; err: [Inf, 0.4912387081184543, 0.27487255849301634, 0.2459426148455294] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4912387081184543, 0.27487255849301634, 0.2459426148455294, 0.23885460156316254] ***
*** finished computation of 3 references, err: [Inf, 0.4912387081184543, 0.27487255849301634, 0.2459426148455294, 0.23885460156316254] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [115, 67, 0]]
** centroid: 1, normalized-entropy: 0.9492268840488396, [(1, 115), (2, 67)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [82, 174, 27]]
** centroid: 2, normalized-entropy: 0.8029637587267165, [(1, 82), (2, 174), (3, 27)]
*** center 3: selecting labels [1] (freq >= 1) [from [202, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4244468741667074] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4244468741667074, 0.23732036689866906] ***
*** finished computation of 3 references, err: [Inf, 0.4244468741667074, 0.23732036689866906] ***
*** center 1: selecting labels [1] (freq >= 1) [from [248, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [25, 198, 21]]
** centroid: 2, normalized-entropy: 0.5589216088359912, [(1, 25), (2, 198), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [112, 62, 0]]
** centroid: 3, normalized-entropy: 0.9395876193289702, [(1, 112), (2, 62)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.37288806155586485] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37288806155586485, 0.22933211580415938] ***
*** finished computation of 3 references, err: [Inf, 0.37288806155586485, 0.22933211580415938] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [233, 42, 0]]
** centroid: 1, normalized-entropy: 0.6166234321896394, [(1, 233), (2, 42)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [149, 57, 0]]
** centroid: 2, normalized-entropy: 0.8509139235120906, [(1, 149), (2, 57)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 164, 22]]
** centroid: 3, normalized-entropy: 0.5243952392403632, [(2, 164), (3, 22)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3230183057325042] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3230183057325042, 0.2405885006461678] ***
*** finished computation of 3 references, err: [Inf, 0.3230183057325042, 0.2405885006461678] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [80, 193, 27]]
** centroid: 1, normalized-entropy: 0.7763910053364088, [(1, 80), (2, 193), (3, 27)]
*** center 2: selecting labels [1] (freq >= 1) [from [202, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [117, 48, 0]]
** centroid: 3, normalized-entropy: 0.8698926856041562, [(1, 117), (2, 48)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.26516269919373003] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26516269919373003, 0.20742010784352216] ***
*** starting iteration: 2; err: [Inf, 0.26516269919373003, 0.20742010784352216] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26516269919373003, 0.20742010784352216, 0.19388566876540672] ***
*** starting iteration: 3; err: [Inf, 0.26516269919373003, 0.20742010784352216, 0.19388566876540672] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26516269919373003, 0.20742010784352216, 0.19388566876540672, 0.1897288135241706] ***
*** starting iteration: 4; err: [Inf, 0.26516269919373003, 0.20742010784352216, 0.19388566876540672, 0.1897288135241706] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26516269919373003, 0.20742010784352216, 0.19388566876540672, 0.1897288135241706, 0.18888704132641088] ***
*** finished computation of 7 references, err: [Inf, 0.26516269919373003, 0.20742010784352216, 0.19388566876540672, 0.1897288135241706, 0.18888704132641088] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [64, 6, 0]]
** centroid: 1, normalized-entropy: 0.4220005168831531, [(1, 64), (2, 6)]
*** center 2: selecting labels [1] (freq >= 2) [from [109, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [101, 24, 0]]
** centroid: 3, normalized-entropy: 0.705636606460175, [(1, 101), (2, 24)]
*** center 4: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [2, 110, 0]]
** centroid: 5, normalized-entropy: 0.12923377484588472, [(1, 2), (2, 110)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 49, 21]]
** centroid: 6, normalized-entropy: 0.8812908992306927, [(2, 49), (3, 21)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [6, 71, 0]]
** centroid: 7, normalized-entropy: 0.39481484603049416, [(1, 6), (2, 71)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25571090184261036] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25571090184261036, 0.2100530075400822] ***
*** starting iteration: 2; err: [Inf, 0.25571090184261036, 0.2100530075400822] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25571090184261036, 0.2100530075400822, 0.1984708610910928] ***
*** starting iteration: 3; err: [Inf, 0.25571090184261036, 0.2100530075400822, 0.1984708610910928] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25571090184261036, 0.2100530075400822, 0.1984708610910928, 0.19314916362787696] ***
*** starting iteration: 4; err: [Inf, 0.25571090184261036, 0.2100530075400822, 0.1984708610910928, 0.19314916362787696] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25571090184261036, 0.2100530075400822, 0.1984708610910928, 0.19314916362787696, 0.1904292467023725] ***
*** starting iteration: 5; err: [Inf, 0.25571090184261036, 0.2100530075400822, 0.1984708610910928, 0.19314916362787696, 0.1904292467023725] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25571090184261036, 0.2100530075400822, 0.1984708610910928, 0.19314916362787696, 0.1904292467023725, 0.18880442069072662] ***
*** starting iteration: 6; err: [Inf, 0.25571090184261036, 0.2100530075400822, 0.1984708610910928, 0.19314916362787696, 0.1904292467023725, 0.18880442069072662] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25571090184261036, 0.2100530075400822, 0.1984708610910928, 0.19314916362787696, 0.1904292467023725, 0.18880442069072662, 0.18839200510541493] ***
*** finished computation of 7 references, err: [Inf, 0.25571090184261036, 0.2100530075400822, 0.1984708610910928, 0.19314916362787696, 0.1904292467023725, 0.18880442069072662, 0.18839200510541493] ***
*** center 1: selecting labels [1] (freq >= 2) [from [129, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 86, 2]]
** centroid: 2, normalized-entropy: 0.1564910629057016, [(2, 86), (3, 2)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [93, 23, 0]]
** centroid: 3, normalized-entropy: 0.7184663880382773, [(1, 93), (2, 23)]
*** center 4: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 69, 20]]
** centroid: 5, normalized-entropy: 0.7686913027030167, [(2, 69), (3, 20)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [52, 38, 0]]
** centroid: 6, normalized-entropy: 0.9824740868386409, [(1, 52), (2, 38)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [16, 47, 0]]
** centroid: 7, normalized-entropy: 0.8175072881213616, [(1, 16), (2, 47)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2676875714849362] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2676875714849362, 0.21244254688323214] ***
*** starting iteration: 2; err: [Inf, 0.2676875714849362, 0.21244254688323214] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2676875714849362, 0.21244254688323214, 0.201199507766656] ***
*** starting iteration: 3; err: [Inf, 0.2676875714849362, 0.21244254688323214, 0.201199507766656] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2676875714849362, 0.21244254688323214, 0.201199507766656, 0.19627426918512253] ***
*** starting iteration: 4; err: [Inf, 0.2676875714849362, 0.21244254688323214, 0.201199507766656, 0.19627426918512253] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2676875714849362, 0.21244254688323214, 0.201199507766656, 0.19627426918512253, 0.19372288603649784] ***
*** starting iteration: 5; err: [Inf, 0.2676875714849362, 0.21244254688323214, 0.201199507766656, 0.19627426918512253, 0.19372288603649784] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2676875714849362, 0.21244254688323214, 0.201199507766656, 0.19627426918512253, 0.19372288603649784, 0.19262960591985995] ***
*** starting iteration: 6; err: [Inf, 0.2676875714849362, 0.21244254688323214, 0.201199507766656, 0.19627426918512253, 0.19372288603649784, 0.19262960591985995] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2676875714849362, 0.21244254688323214, 0.201199507766656, 0.19627426918512253, 0.19372288603649784, 0.19262960591985995, 0.19197753811537147] ***
*** finished computation of 7 references, err: [Inf, 0.2676875714849362, 0.21244254688323214, 0.201199507766656, 0.19627426918512253, 0.19372288603649784, 0.19262960591985995, 0.19197753811537147] ***
*** center 1: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [113, 17, 0]]
** centroid: 2, normalized-entropy: 0.5595440356886702, [(1, 113), (2, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [6, 72, 0]]
** centroid: 3, normalized-entropy: 0.3912435636292556, [(1, 6), (2, 72)]
*** center 4: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 107, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 45, 27]]
** centroid: 6, normalized-entropy: 0.954434002924965, [(2, 45), (3, 27)]
*** center 7: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3257673195403841] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3257673195403841, 0.23924208239738917] ***
*** starting iteration: 2; err: [Inf, 0.3257673195403841, 0.23924208239738917] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3257673195403841, 0.23924208239738917, 0.23387231937030684] ***
*** starting iteration: 3; err: [Inf, 0.3257673195403841, 0.23924208239738917, 0.23387231937030684] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3257673195403841, 0.23924208239738917, 0.23387231937030684, 0.23281130320448484] ***
*** finished computation of 3 references, err: [Inf, 0.3257673195403841, 0.23924208239738917, 0.23387231937030684, 0.23281130320448484] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [83, 167, 21]]
** centroid: 1, normalized-entropy: 0.7818333311884146, [(1, 83), (2, 167), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [110, 93, 0]]
** centroid: 2, normalized-entropy: 0.9949352377725679, [(1, 110), (2, 93)]
*** center 3: selecting labels [1] (freq >= 2) [from [192, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.36728394210528487] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36728394210528487, 0.23440351439681814] ***
*** starting iteration: 2; err: [Inf, 0.36728394210528487, 0.23440351439681814] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36728394210528487, 0.23440351439681814, 0.2332443117319063] ***
*** starting iteration: 3; err: [Inf, 0.36728394210528487, 0.23440351439681814, 0.2332443117319063] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36728394210528487, 0.23440351439681814, 0.2332443117319063, 0.23297958100295585] ***
*** finished computation of 3 references, err: [Inf, 0.36728394210528487, 0.23440351439681814, 0.2332443117319063, 0.23297958100295585] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [241, 33, 0]]
** centroid: 1, normalized-entropy: 0.5306184480326079, [(1, 241), (2, 33)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 179, 22]]
** centroid: 2, normalized-entropy: 0.49826303575443887, [(2, 179), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [141, 51, 0]]
** centroid: 3, normalized-entropy: 0.8351164948421137, [(1, 141), (2, 51)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.34643387150806915] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34643387150806915, 0.23327943382259722] ***
*** starting iteration: 2; err: [Inf, 0.34643387150806915, 0.23327943382259722] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34643387150806915, 0.23327943382259722, 0.23133014230618903] ***
*** starting iteration: 3; err: [Inf, 0.34643387150806915, 0.23327943382259722, 0.23133014230618903] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34643387150806915, 0.23327943382259722, 0.23133014230618903, 0.23094150016707057] ***
*** finished computation of 3 references, err: [Inf, 0.34643387150806915, 0.23327943382259722, 0.23133014230618903, 0.23094150016707057] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [252, 9, 0]]
** centroid: 1, normalized-entropy: 0.21639693245126485, [(1, 252), (2, 9)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [1, 177, 27]]
** centroid: 2, normalized-entropy: 0.5638560041131417, [(2, 177), (3, 27)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [146, 55, 0]]
** centroid: 3, normalized-entropy: 0.8466279606299794, [(1, 146), (2, 55)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4006228146448105] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4006228146448105, 0.3250529154696063] ***
*** starting iteration: 2; err: [Inf, 0.4006228146448105, 0.3250529154696063] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4006228146448105, 0.3250529154696063, 0.3027851683683358] ***
*** starting iteration: 3; err: [Inf, 0.4006228146448105, 0.3250529154696063, 0.3027851683683358] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4006228146448105, 0.3250529154696063, 0.3027851683683358, 0.2971740196782022] ***
*** starting iteration: 4; err: [Inf, 0.4006228146448105, 0.3250529154696063, 0.3027851683683358, 0.2971740196782022] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4006228146448105, 0.3250529154696063, 0.3027851683683358, 0.2971740196782022, 0.29561922897923143] ***
*** starting iteration: 5; err: [Inf, 0.4006228146448105, 0.3250529154696063, 0.3027851683683358, 0.2971740196782022, 0.29561922897923143] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4006228146448105, 0.3250529154696063, 0.3027851683683358, 0.2971740196782022, 0.29561922897923143, 0.2954844912379846] ***
*** finished computation of 3 references, err: [Inf, 0.4006228146448105, 0.3250529154696063, 0.3027851683683358, 0.2971740196782022, 0.29561922897923143, 0.2954844912379846] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [4, 196, 21]]
** centroid: 1, normalized-entropy: 0.3665806651138637, [(1, 4), (2, 196), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [143, 61, 0]]
** centroid: 2, normalized-entropy: 0.8800891716251928, [(1, 143), (2, 61)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [238, 3, 0]]
** centroid: 3, normalized-entropy: 0.09661748905380377, [(1, 238), (2, 3)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3290172649067135] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3290172649067135, 0.2893500189608273] ***
*** starting iteration: 2; err: [Inf, 0.3290172649067135, 0.2893500189608273] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3290172649067135, 0.2893500189608273, 0.2877621728273435] ***
*** starting iteration: 3; err: [Inf, 0.3290172649067135, 0.2893500189608273, 0.2877621728273435] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3290172649067135, 0.2893500189608273, 0.2877621728273435, 0.287357898482095] ***
*** finished computation of 3 references, err: [Inf, 0.3290172649067135, 0.2893500189608273, 0.2877621728273435, 0.287357898482095] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [43, 191, 22]]
** centroid: 1, normalized-entropy: 0.6636449740048113, [(1, 43), (2, 191), (3, 22)]
*** center 2: selecting labels [1] (freq >= 2) [from [213, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [126, 72, 0]]
** centroid: 3, normalized-entropy: 0.9456603046006401, [(1, 126), (2, 72)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.40029990601854615] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40029990601854615, 0.3071131971308674] ***
*** starting iteration: 2; err: [Inf, 0.40029990601854615, 0.3071131971308674] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40029990601854615, 0.3071131971308674, 0.30023904879210234] ***
*** starting iteration: 3; err: [Inf, 0.40029990601854615, 0.3071131971308674, 0.30023904879210234] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40029990601854615, 0.3071131971308674, 0.30023904879210234, 0.2993997011439822] ***
*** finished computation of 3 references, err: [Inf, 0.40029990601854615, 0.3071131971308674, 0.30023904879210234, 0.2993997011439822] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [89, 104, 0]]
** centroid: 1, normalized-entropy: 0.9956383531091013, [(1, 89), (2, 104)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [76, 137, 27]]
** centroid: 2, normalized-entropy: 0.8464945118412815, [(1, 76), (2, 137), (3, 27)]
*** center 3: selecting labels [1] (freq >= 2) [from [234, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2292506093258603] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2292506093258603, 0.19404605441858191] ***
*** starting iteration: 2; err: [Inf, 0.2292506093258603, 0.19404605441858191] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2292506093258603, 0.19404605441858191, 0.19114587878019693] ***
*** starting iteration: 3; err: [Inf, 0.2292506093258603, 0.19404605441858191, 0.19114587878019693] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2292506093258603, 0.19404605441858191, 0.19114587878019693, 0.18994832480768184] ***
*** starting iteration: 4; err: [Inf, 0.2292506093258603, 0.19404605441858191, 0.19114587878019693, 0.18994832480768184] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2292506093258603, 0.19404605441858191, 0.19114587878019693, 0.18994832480768184, 0.18949010375713757] ***
*** finished computation of 7 references, err: [Inf, 0.2292506093258603, 0.19404605441858191, 0.19114587878019693, 0.18994832480768184, 0.18949010375713757] ***
*** center 1: selecting labels [1] (freq >= 1) [from [114, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 90, 21]]
** centroid: 2, normalized-entropy: 0.699772221773307, [(2, 90), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [80, 7, 0]]
** centroid: 3, normalized-entropy: 0.40379715049939235, [(1, 80), (2, 7)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [86, 39, 0]]
** centroid: 4, normalized-entropy: 0.8954686411420222, [(1, 86), (2, 39)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [38, 49, 0]]
** centroid: 5, normalized-entropy: 0.9884374283487116, [(1, 38), (2, 49)]
*** center 6: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 75, 0]]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 10)
[0.9119928311545079, 0.9079858301415188, 0.9040177902453351, 0.9009998021974069, 0.89899480318642, 0.8910197622772472, 0.8580226933520346, 0.8559997122871374, 0.8319127510744276, 0.7899696103288919]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :dnet, 0.3, 2) => 0.9119928311545079
finished with 11
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.41428481654876526] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41428481654876526, 0.3325853761769384] ***
*** finished computation of 3 references, err: [Inf, 0.41428481654876526, 0.3325853761769384] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [85, 166, 21]]
** centroid: 1, normalized-entropy: 0.7851745694772624, [(1, 85), (2, 166), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [143, 94, 0]]
** centroid: 2, normalized-entropy: 0.9689417585311385, [(1, 143), (2, 94)]
*** center 3: selecting labels [1] (freq >= 1) [from [157, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.45683136197278973] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45683136197278973, 0.3258205866985682] ***
*** finished computation of 3 references, err: [Inf, 0.45683136197278973, 0.3258205866985682] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [80, 176, 22]]
** centroid: 1, normalized-entropy: 0.7724212206893102, [(1, 80), (2, 176), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [166, 87, 0]]
** centroid: 2, normalized-entropy: 0.928477251601706, [(1, 166), (2, 87)]
*** center 3: selecting labels [1] (freq >= 1) [from [136, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3698569392475455] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3698569392475455, 0.3379179110849692] ***
*** finished computation of 3 references, err: [Inf, 0.3698569392475455, 0.3379179110849692] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [86, 120, 0]]
** centroid: 1, normalized-entropy: 0.98025955447738, [(1, 86), (2, 120)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [41, 97, 27]]
** centroid: 2, normalized-entropy: 0.8688094850051095, [(1, 41), (2, 97), (3, 27)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [272, 24, 0]]
** centroid: 3, normalized-entropy: 0.40597703847557104, [(1, 272), (2, 24)]
finished with 7 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 11)
[0.9119928311545079, 0.9079858301415188, 0.9040177902453351, 0.9009998021974069, 0.89899480318642, 0.8910197622772472, 0.877985770201339, 0.8580226933520346, 0.8559997122871374, 0.8319127510744276, 0.7899696103288919]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :dnet, 0.3, 2) => 0.9119928311545079
finished with 12
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.47210636402087947] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.47210636402087947, 0.2958685437990897] ***
*** starting iteration: 2; err: [Inf, 0.47210636402087947, 0.2958685437990897] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.47210636402087947, 0.2958685437990897, 0.29398974643481235] ***
*** starting iteration: 3; err: [Inf, 0.47210636402087947, 0.2958685437990897, 0.29398974643481235] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.47210636402087947, 0.2958685437990897, 0.29398974643481235, 0.2936796214783388] ***
*** finished computation of 3 references, err: [Inf, 0.47210636402087947, 0.2958685437990897, 0.29398974643481235, 0.2936796214783388] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [236, 39, 0]]
** centroid: 1, normalized-entropy: 0.5889807313755775, [(1, 236), (2, 39)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [146, 43, 0]]
** centroid: 2, normalized-entropy: 0.7736510483021695, [(1, 146), (2, 43)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 181, 22]]
** centroid: 3, normalized-entropy: 0.4949930542685224, [(2, 181), (3, 22)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.46992542139777504] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.46992542139777504, 0.30094879853899953] ***
*** starting iteration: 2; err: [Inf, 0.46992542139777504, 0.30094879853899953] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.46992542139777504, 0.30094879853899953, 0.2985421021024252] ***
*** starting iteration: 3; err: [Inf, 0.46992542139777504, 0.30094879853899953, 0.2985421021024252] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.46992542139777504, 0.30094879853899953, 0.2985421021024252, 0.29803093287998716] ***
*** finished computation of 3 references, err: [Inf, 0.46992542139777504, 0.30094879853899953, 0.2985421021024252, 0.29803093287998716] ***
*** center 1: selecting labels [1] (freq >= 2) [from [244, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [11, 195, 21]]
** centroid: 2, normalized-entropy: 0.4527815449888955, [(1, 11), (2, 195), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [130, 65, 0]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(1, 130), (2, 65)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3711349419506638] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3711349419506638, 0.3085571728588111] ***
*** starting iteration: 2; err: [Inf, 0.3711349419506638, 0.3085571728588111] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3711349419506638, 0.3085571728588111, 0.3005738820883444] ***
*** starting iteration: 3; err: [Inf, 0.3711349419506638, 0.3085571728588111, 0.3005738820883444] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3711349419506638, 0.3085571728588111, 0.3005738820883444, 0.29935583435669205] ***
*** finished computation of 3 references, err: [Inf, 0.3711349419506638, 0.3085571728588111, 0.3005738820883444, 0.29935583435669205] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [77, 162, 27]]
** centroid: 1, normalized-entropy: 0.8129148024318706, [(1, 77), (2, 162), (3, 27)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [103, 79, 0]]
** centroid: 2, normalized-entropy: 0.9874197313752753, [(1, 103), (2, 79)]
*** center 3: selecting labels [1] (freq >= 2) [from [219, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 12)
[0.9119928311545079, 0.9079858301415188, 0.9040177902453351, 0.9009998021974069, 0.89899480318642, 0.8910197622772472, 0.8889608171045297, 0.877985770201339, 0.8580226933520346, 0.8559997122871374, 0.8319127510744276, 0.7899696103288919]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :dnet, 0.3, 2) => 0.9119928311545079
finished with 13
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.48477972392132435] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.48477972392132435, 0.30084696675286343] ***
*** finished computation of 3 references, err: [Inf, 0.48477972392132435, 0.30084696675286343] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [267, 9, 0]]
** centroid: 1, normalized-entropy: 0.20731018585948177, [(1, 267), (2, 9)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [3, 193, 22]]
** centroid: 2, normalized-entropy: 0.3625171620908588, [(1, 3), (2, 193), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [112, 61, 0]]
** centroid: 3, normalized-entropy: 0.9363696793026917, [(1, 112), (2, 61)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4082859300238931] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4082859300238931, 0.3014997589070981] ***
*** finished computation of 3 references, err: [Inf, 0.4082859300238931, 0.3014997589070981] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [98, 158, 27]]
** centroid: 1, normalized-entropy: 0.8345158416622086, [(1, 98), (2, 158), (3, 27)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [102, 83, 0]]
** centroid: 2, normalized-entropy: 0.9923779054736782, [(1, 102), (2, 83)]
*** center 3: selecting labels [1] (freq >= 1) [from [199, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.5065190855388504] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5065190855388504, 0.29820175352995776] ***
*** finished computation of 3 references, err: [Inf, 0.5065190855388504, 0.29820175352995776] ***
*** center 1: selecting labels [1] (freq >= 1) [from [256, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [14, 195, 21]]
** centroid: 2, normalized-entropy: 0.4814039714120881, [(1, 14), (2, 195), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [115, 65, 0]]
** centroid: 3, normalized-entropy: 0.943601631299382, [(1, 115), (2, 65)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 13)
[0.9119928311545079, 0.9079858301415188, 0.9040177902453351, 0.9009998021974069, 0.8999778221335109, 0.89899480318642, 0.8910197622772472, 0.8889608171045297, 0.877985770201339, 0.8580226933520346, 0.8559997122871374, 0.8319127510744276, 0.7899696103288919]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :dnet, 0.3, 2) => 0.9119928311545079
finished with 14
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.29275293958683807] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29275293958683807, 0.2378202563406223] ***
*** finished computation of 3 references, err: [Inf, 0.29275293958683807, 0.2378202563406223] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [110, 72, 0]]
** centroid: 1, normalized-entropy: 0.9683211863989214, [(1, 110), (2, 72)]
*** center 2: selecting labels [1] (freq >= 1) [from [181, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [94, 188, 21]]
** centroid: 3, normalized-entropy: 0.7684620179334276, [(1, 94), (2, 188), (3, 21)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.29051459745351765] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29051459745351765, 0.22959104471880457] ***
*** finished computation of 3 references, err: [Inf, 0.29051459745351765, 0.22959104471880457] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [50, 197, 22]]
** centroid: 1, normalized-entropy: 0.6787276360147529, [(1, 50), (2, 197), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [113, 66, 0]]
** centroid: 2, normalized-entropy: 0.9496803882666356, [(1, 113), (2, 66)]
*** center 3: selecting labels [1] (freq >= 1) [from [219, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2817132161962318] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2817132161962318, 0.23261883564717856] ***
*** finished computation of 3 references, err: [Inf, 0.2817132161962318, 0.23261883564717856] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [39, 170, 27]]
** centroid: 1, normalized-entropy: 0.7116530754973633, [(1, 39), (2, 170), (3, 27)]
*** center 2: selecting labels [1] (freq >= 1) [from [233, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [127, 71, 0]]
** centroid: 3, normalized-entropy: 0.9415030811659858, [(1, 127), (2, 71)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 14)
[0.9119928311545079, 0.9079858301415188, 0.9040177902453351, 0.9009998021974069, 0.8999988011964061, 0.8999778221335109, 0.89899480318642, 0.8910197622772472, 0.8889608171045297, 0.877985770201339, 0.8580226933520346, 0.8559997122871374, 0.8319127510744276, 0.7899696103288919]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :dnet, 0.3, 2) => 0.9119928311545079
finished with 15
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.20562666676576352] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20562666676576352, 0.16799171298375917] ***
*** starting iteration: 2; err: [Inf, 0.20562666676576352, 0.16799171298375917] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20562666676576352, 0.16799171298375917, 0.1514571542972587] ***
*** starting iteration: 3; err: [Inf, 0.20562666676576352, 0.16799171298375917, 0.1514571542972587] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20562666676576352, 0.16799171298375917, 0.1514571542972587, 0.1486457024544321] ***
*** finished computation of 7 references, err: [Inf, 0.20562666676576352, 0.16799171298375917, 0.1514571542972587, 0.1486457024544321] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [26, 65, 0]]
** centroid: 1, normalized-entropy: 0.8631205685666311, [(1, 26), (2, 65)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [63, 6, 0]]
** centroid: 2, normalized-entropy: 0.42622865699814483, [(1, 63), (2, 6)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [95, 19, 0]]
** centroid: 3, normalized-entropy: 0.6500224216483541, [(1, 95), (2, 19)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 89, 21]]
** centroid: 4, normalized-entropy: 0.7033693386668108, [(2, 89), (3, 21)]
*** center 5: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [109, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 81, 0]]
** centroid: 7, normalized-entropy: 0.1638605128691586, [(1, 2), (2, 81)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2440466565901003] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2440466565901003, 0.17477370970540385] ***
*** starting iteration: 2; err: [Inf, 0.2440466565901003, 0.17477370970540385] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2440466565901003, 0.17477370970540385, 0.1602823201970461] ***
*** starting iteration: 3; err: [Inf, 0.2440466565901003, 0.17477370970540385, 0.1602823201970461] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2440466565901003, 0.17477370970540385, 0.1602823201970461, 0.15449267924194973] ***
*** finished computation of 7 references, err: [Inf, 0.2440466565901003, 0.17477370970540385, 0.1602823201970461, 0.15449267924194973] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [106, 38, 0]]
** centroid: 1, normalized-entropy: 0.8325582396745668, [(1, 106), (2, 38)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 78, 20]]
** centroid: 2, normalized-entropy: 0.7300166301457938, [(2, 78), (3, 20)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 77, 2]]
** centroid: 3, normalized-entropy: 0.17033057560105982, [(2, 77), (3, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [42, 38, 0]]
** centroid: 4, normalized-entropy: 0.99819587904281, [(1, 42), (2, 38)]
*** center 5: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [136, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [18, 32, 0]]
** centroid: 7, normalized-entropy: 0.9426831892554921, [(1, 18), (2, 32)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2801560639332899] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2801560639332899, 0.1701920716401966] ***
*** starting iteration: 2; err: [Inf, 0.2801560639332899, 0.1701920716401966] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2801560639332899, 0.1701920716401966, 0.15575536508971863] ***
*** starting iteration: 3; err: [Inf, 0.2801560639332899, 0.1701920716401966, 0.15575536508971863] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2801560639332899, 0.1701920716401966, 0.15575536508971863, 0.15130041857044782] ***
*** finished computation of 7 references, err: [Inf, 0.2801560639332899, 0.1701920716401966, 0.15575536508971863, 0.15130041857044782] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [74, 15, 0]]
** centroid: 1, normalized-entropy: 0.6543524423071835, [(1, 74), (2, 15)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [127, 12, 0]]
** centroid: 2, normalized-entropy: 0.4241029056104217, [(1, 127), (2, 12)]
*** center 3: selecting labels [1] (freq >= 2) [from [141, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [2, 94, 0]]
** centroid: 4, normalized-entropy: 0.14609425012013613, [(1, 2), (2, 94)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 72, 2]]
** centroid: 5, normalized-entropy: 0.1792560669283214, [(2, 72), (3, 2)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [55, 15, 0]]
** centroid: 6, normalized-entropy: 0.7495952572594798, [(1, 55), (2, 15)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 33, 25]]
** centroid: 7, normalized-entropy: 0.9862325350724501, [(2, 33), (3, 25)]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 15)
[0.9299898701096305, 0.9119928311545079, 0.9079858301415188, 0.9040177902453351, 0.9009998021974069, 0.8999988011964061, 0.8999778221335109, 0.89899480318642, 0.8910197622772472, 0.8889608171045297, 0.877985770201339, 0.8580226933520346, 0.8559997122871374, 0.8319127510744276, 0.7899696103288919]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.3, 2) => 0.9299898701096305
finished with 16
iteration 7 finished
*** starting iteration: 1; err: [Inf, 0.21543629261855227] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21543629261855227, 0.16665309027058292] ***
*** starting iteration: 2; err: [Inf, 0.21543629261855227, 0.16665309027058292] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21543629261855227, 0.16665309027058292, 0.1579508991763779] ***
*** starting iteration: 3; err: [Inf, 0.21543629261855227, 0.16665309027058292, 0.1579508991763779] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21543629261855227, 0.16665309027058292, 0.1579508991763779, 0.15475553075724222] ***
*** starting iteration: 4; err: [Inf, 0.21543629261855227, 0.16665309027058292, 0.1579508991763779, 0.15475553075724222] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21543629261855227, 0.16665309027058292, 0.1579508991763779, 0.15475553075724222, 0.15326790570689774] ***
*** starting iteration: 5; err: [Inf, 0.21543629261855227, 0.16665309027058292, 0.1579508991763779, 0.15475553075724222, 0.15326790570689774] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21543629261855227, 0.16665309027058292, 0.1579508991763779, 0.15475553075724222, 0.15326790570689774, 0.15266837091492796] ***
*** finished computation of 7 references, err: [Inf, 0.21543629261855227, 0.16665309027058292, 0.1579508991763779, 0.15475553075724222, 0.15326790570689774, 0.15266837091492796] ***
*** center 1: selecting labels [1] (freq >= 2) [from [101, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [66, 13, 0]]
** centroid: 2, normalized-entropy: 0.6451006442088483, [(1, 66), (2, 13)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [106, 43, 0]]
** centroid: 3, normalized-entropy: 0.8668936705568643, [(1, 106), (2, 43)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 76, 18]]
** centroid: 4, normalized-entropy: 0.7045767128725937, [(2, 76), (3, 18)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 61, 3]]
** centroid: 5, normalized-entropy: 0.2729708579140699, [(2, 61), (3, 3)]
*** center 6: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [16, 67, 0]]
** centroid: 7, normalized-entropy: 0.7072324944713736, [(1, 16), (2, 67)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20476850158028093] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20476850158028093, 0.16976174875965405] ***
*** starting iteration: 2; err: [Inf, 0.20476850158028093, 0.16976174875965405] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20476850158028093, 0.16976174875965405, 0.1626283311287871] ***
*** starting iteration: 3; err: [Inf, 0.20476850158028093, 0.16976174875965405, 0.1626283311287871] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20476850158028093, 0.16976174875965405, 0.1626283311287871, 0.15781648093876408] ***
*** starting iteration: 4; err: [Inf, 0.20476850158028093, 0.16976174875965405, 0.1626283311287871, 0.15781648093876408] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20476850158028093, 0.16976174875965405, 0.1626283311287871, 0.15781648093876408, 0.15494360350005362] ***
*** starting iteration: 5; err: [Inf, 0.20476850158028093, 0.16976174875965405, 0.1626283311287871, 0.15781648093876408, 0.15494360350005362] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20476850158028093, 0.16976174875965405, 0.1626283311287871, 0.15781648093876408, 0.15494360350005362, 0.1535225625972318] ***
*** starting iteration: 6; err: [Inf, 0.20476850158028093, 0.16976174875965405, 0.1626283311287871, 0.15781648093876408, 0.15494360350005362, 0.1535225625972318] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20476850158028093, 0.16976174875965405, 0.1626283311287871, 0.15781648093876408, 0.15494360350005362, 0.1535225625972318, 0.15163263256453546] ***
*** starting iteration: 7; err: [Inf, 0.20476850158028093, 0.16976174875965405, 0.1626283311287871, 0.15781648093876408, 0.15494360350005362, 0.1535225625972318, 0.15163263256453546] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20476850158028093, 0.16976174875965405, 0.1626283311287871, 0.15781648093876408, 0.15494360350005362, 0.1535225625972318, 0.15163263256453546, 0.14958697864073683] ***
*** starting iteration: 8; err: [Inf, 0.20476850158028093, 0.16976174875965405, 0.1626283311287871, 0.15781648093876408, 0.15494360350005362, 0.1535225625972318, 0.15163263256453546, 0.14958697864073683] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20476850158028093, 0.16976174875965405, 0.1626283311287871, 0.15781648093876408, 0.15494360350005362, 0.1535225625972318, 0.15163263256453546, 0.14958697864073683, 0.1481234238607281] ***
*** starting iteration: 9; err: [Inf, 0.20476850158028093, 0.16976174875965405, 0.1626283311287871, 0.15781648093876408, 0.15494360350005362, 0.1535225625972318, 0.15163263256453546, 0.14958697864073683, 0.1481234238607281] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20476850158028093, 0.16976174875965405, 0.1626283311287871, 0.15781648093876408, 0.15494360350005362, 0.1535225625972318, 0.15163263256453546, 0.14958697864073683, 0.1481234238607281, 0.14727818825654965] ***
*** finished computation of 7 references, err: [Inf, 0.20476850158028093, 0.16976174875965405, 0.1626283311287871, 0.15781648093876408, 0.15494360350005362, 0.1535225625972318, 0.15163263256453546, 0.14958697864073683, 0.1481234238607281, 0.14727818825654965] ***
*** center 1: selecting labels [1] (freq >= 2) [from [108, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [96, 13, 0]]
** centroid: 2, normalized-entropy: 0.527247477024035, [(1, 96), (2, 13)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 69, 22]]
** centroid: 3, normalized-entropy: 0.7979519684655734, [(2, 69), (3, 22)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [102, 14, 0]]
** centroid: 4, normalized-entropy: 0.5313400141801669, [(1, 102), (2, 14)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 105, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [7, 62, 0]]
** centroid: 7, normalized-entropy: 0.47357292491745173, [(1, 7), (2, 62)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2718134509773738] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2718134509773738, 0.1638552880450815] ***
*** starting iteration: 2; err: [Inf, 0.2718134509773738, 0.1638552880450815] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2718134509773738, 0.1638552880450815, 0.1542553622319225] ***
*** starting iteration: 3; err: [Inf, 0.2718134509773738, 0.1638552880450815, 0.1542553622319225] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2718134509773738, 0.1638552880450815, 0.1542553622319225, 0.15104044845391965] ***
*** starting iteration: 4; err: [Inf, 0.2718134509773738, 0.1638552880450815, 0.1542553622319225, 0.15104044845391965] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2718134509773738, 0.1638552880450815, 0.1542553622319225, 0.15104044845391965, 0.14936560985731376] ***
*** starting iteration: 5; err: [Inf, 0.2718134509773738, 0.1638552880450815, 0.1542553622319225, 0.15104044845391965, 0.14936560985731376] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2718134509773738, 0.1638552880450815, 0.1542553622319225, 0.15104044845391965, 0.14936560985731376, 0.14808954653222633] ***
*** starting iteration: 6; err: [Inf, 0.2718134509773738, 0.1638552880450815, 0.1542553622319225, 0.15104044845391965, 0.14936560985731376, 0.14808954653222633] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2718134509773738, 0.1638552880450815, 0.1542553622319225, 0.15104044845391965, 0.14936560985731376, 0.14808954653222633, 0.14753560078884664] ***
*** finished computation of 7 references, err: [Inf, 0.2718134509773738, 0.1638552880450815, 0.1542553622319225, 0.15104044845391965, 0.14936560985731376, 0.14808954653222633, 0.14753560078884664] ***
*** center 1: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [73, 33, 0]]
** centroid: 2, normalized-entropy: 0.8946921645908384, [(1, 73), (2, 33)]
*** center 3: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [51, 43, 0]]
** centroid: 4, normalized-entropy: 0.9947688847336321, [(1, 51), (2, 43)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [85, 16, 0]]
** centroid: 5, normalized-entropy: 0.6305062394675903, [(1, 85), (2, 16)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 77, 21]]
** centroid: 6, normalized-entropy: 0.7495952572594798, [(2, 77), (3, 21)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 72, 6]]
** centroid: 7, normalized-entropy: 0.3912435636292556, [(2, 72), (3, 6)]
finished with 12 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 16)
[0.9299898701096305, 0.9209628790467114, 0.9119928311545079, 0.9079858301415188, 0.9040177902453351, 0.9009998021974069, 0.8999988011964061, 0.8999778221335109, 0.89899480318642, 0.8910197622772472, 0.8889608171045297, 0.877985770201339, 0.8580226933520346, 0.8559997122871374, 0.8319127510744276, 0.7899696103288919]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.3, 2) => 0.9299898701096305
finished with 17
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.31485347330567426] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31485347330567426, 0.2991811859088617] ***
*** starting iteration: 2; err: [Inf, 0.31485347330567426, 0.2991811859088617] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31485347330567426, 0.2991811859088617, 0.29558448322598374] ***
*** starting iteration: 3; err: [Inf, 0.31485347330567426, 0.2991811859088617, 0.29558448322598374] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31485347330567426, 0.2991811859088617, 0.29558448322598374, 0.29452501028683875] ***
*** finished computation of 3 references, err: [Inf, 0.31485347330567426, 0.2991811859088617, 0.29558448322598374, 0.29452501028683875] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [118, 87, 0]]
** centroid: 1, normalized-entropy: 0.9834412509028283, [(1, 118), (2, 87)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [70, 173, 21]]
** centroid: 2, normalized-entropy: 0.7557794884285031, [(1, 70), (2, 173), (3, 21)]
*** center 3: selecting labels [1] (freq >= 1) [from [197, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4663681788300199] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4663681788300199, 0.3347698110902774] ***
*** starting iteration: 2; err: [Inf, 0.4663681788300199, 0.3347698110902774] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4663681788300199, 0.3347698110902774, 0.3307245303241388] ***
*** starting iteration: 3; err: [Inf, 0.4663681788300199, 0.3347698110902774, 0.3307245303241388] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4663681788300199, 0.3347698110902774, 0.3307245303241388, 0.3282920473734841] ***
*** finished computation of 3 references, err: [Inf, 0.4663681788300199, 0.3347698110902774, 0.3307245303241388, 0.3282920473734841] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [61, 186, 22]]
** centroid: 1, normalized-entropy: 0.7248828482060956, [(1, 61), (2, 186), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [155, 74, 0]]
** centroid: 2, normalized-entropy: 0.9077678410486947, [(1, 155), (2, 74)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [166, 3, 0]]
** centroid: 3, normalized-entropy: 0.12862243565642706, [(1, 166), (2, 3)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.5506859484004385] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5506859484004385, 0.3527069395433167] ***
*** starting iteration: 2; err: [Inf, 0.5506859484004385, 0.3527069395433167] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5506859484004385, 0.3527069395433167, 0.34454411383288197] ***
*** starting iteration: 3; err: [Inf, 0.5506859484004385, 0.3527069395433167, 0.34454411383288197] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5506859484004385, 0.3527069395433167, 0.34454411383288197, 0.34154981372785803] ***
*** finished computation of 3 references, err: [Inf, 0.5506859484004385, 0.3527069395433167, 0.34454411383288197, 0.34154981372785803] ***
*** center 1: selecting labels [1] (freq >= 1) [from [163, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [156, 69, 0]]
** centroid: 2, normalized-entropy: 0.8892881527272397, [(1, 156), (2, 69)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [80, 172, 27]]
** centroid: 3, normalized-entropy: 0.8031941505814492, [(1, 80), (2, 172), (3, 27)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 17)
[0.9299898701096305, 0.9209628790467114, 0.9119928311545079, 0.9079858301415188, 0.9040177902453351, 0.9009998021974069, 0.8999988011964061, 0.8999778221335109, 0.89899480318642, 0.8910197622772472, 0.8889608171045297, 0.877985770201339, 0.867972763182344, 0.8580226933520346, 0.8559997122871374, 0.8319127510744276, 0.7899696103288919]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.3, 2) => 0.9299898701096305
finished with 17
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.22809288502042183] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22809288502042183, 0.1796796287363395] ***
*** starting iteration: 2; err: [Inf, 0.22809288502042183, 0.1796796287363395] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22809288502042183, 0.1796796287363395, 0.16255085997842253] ***
*** starting iteration: 3; err: [Inf, 0.22809288502042183, 0.1796796287363395, 0.16255085997842253] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22809288502042183, 0.1796796287363395, 0.16255085997842253, 0.15340861475397832] ***
*** finished computation of 7 references, err: [Inf, 0.22809288502042183, 0.1796796287363395, 0.16255085997842253, 0.15340861475397832] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [74, 39, 0]]
** centroid: 1, normalized-entropy: 0.9296459040774003, [(1, 74), (2, 39)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [114, 13, 0]]
** centroid: 2, normalized-entropy: 0.47643919109803384, [(1, 114), (2, 13)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [74, 46, 0]]
** centroid: 3, normalized-entropy: 0.9603622703154779, [(1, 74), (2, 46)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 180, 35]]
** centroid: 4, normalized-entropy: 0.6409441847875289, [(2, 180), (3, 35)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [73, 104, 0]]
** centroid: 5, normalized-entropy: 0.9777585247444954, [(1, 73), (2, 104)]
*** center 6: selecting labels [1] (freq >= 2) [from [129, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [119, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.28160467522591354] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28160467522591354, 0.19506883733533323] ***
*** starting iteration: 2; err: [Inf, 0.28160467522591354, 0.19506883733533323] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28160467522591354, 0.19506883733533323, 0.1781726523861289] ***
*** starting iteration: 3; err: [Inf, 0.28160467522591354, 0.19506883733533323, 0.1781726523861289] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28160467522591354, 0.19506883733533323, 0.1781726523861289, 0.16884105473244562] ***
*** finished computation of 7 references, err: [Inf, 0.28160467522591354, 0.19506883733533323, 0.1781726523861289, 0.16884105473244562] ***
*** center 1: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 16, 11]]
** centroid: 2, normalized-entropy: 0.975119064940866, [(2, 16), (3, 11)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [43, 54, 0]]
** centroid: 3, normalized-entropy: 0.9907034651869471, [(1, 43), (2, 54)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 33, 9]]
** centroid: 4, normalized-entropy: 0.7495952572594798, [(2, 33), (3, 9)]
*** center 5: selecting labels [1] (freq >= 2) [from [128, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [11, 38, 0]]
** centroid: 6, normalized-entropy: 0.7682814090975241, [(1, 11), (2, 38)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [12, 47, 0]]
** centroid: 7, normalized-entropy: 0.7286561673702678, [(1, 12), (2, 47)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.16764086646959186] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16764086646959186, 0.14656676494609563] ***
*** starting iteration: 2; err: [Inf, 0.16764086646959186, 0.14656676494609563] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16764086646959186, 0.14656676494609563, 0.14171501742489637] ***
*** starting iteration: 3; err: [Inf, 0.16764086646959186, 0.14656676494609563, 0.14171501742489637] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16764086646959186, 0.14656676494609563, 0.14171501742489637, 0.14149578615650535] ***
*** finished computation of 7 references, err: [Inf, 0.16764086646959186, 0.14656676494609563, 0.14171501742489637, 0.14149578615650535] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [79, 7, 0]]
** centroid: 1, normalized-entropy: 0.40707680632541937, [(1, 79), (2, 7)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [50, 14, 0]]
** centroid: 2, normalized-entropy: 0.7578784625383954, [(1, 50), (2, 14)]
*** center 3: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [43, 40, 0]]
** centroid: 4, normalized-entropy: 0.9990574042663861, [(1, 43), (2, 40)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 65, 15]]
** centroid: 5, normalized-entropy: 0.6962122601251459, [(2, 65), (3, 15)]
*** center 6: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 54, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21138854195177556] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21138854195177556, 0.16409837215580045] ***
*** starting iteration: 2; err: [Inf, 0.21138854195177556, 0.16409837215580045] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21138854195177556, 0.16409837215580045, 0.15571601126808673] ***
*** starting iteration: 3; err: [Inf, 0.21138854195177556, 0.16409837215580045, 0.15571601126808673] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21138854195177556, 0.16409837215580045, 0.15571601126808673, 0.15332871665805578] ***
*** finished computation of 7 references, err: [Inf, 0.21138854195177556, 0.16409837215580045, 0.15571601126808673, 0.15332871665805578] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 81, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [32, 13, 0]]
** centroid: 2, normalized-entropy: 0.8672816222000259, [(1, 32), (2, 13)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 70, 20]]
** centroid: 3, normalized-entropy: 0.7642045065086204, [(2, 70), (3, 20)]
*** center 4: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [87, 31, 0]]
** centroid: 6, normalized-entropy: 0.8308111022361421, [(1, 87), (2, 31)]
*** center 7: selecting labels [1] (freq >= 2) [from [23, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2405860022166744] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2405860022166744, 0.16496595425345004] ***
*** starting iteration: 2; err: [Inf, 0.2405860022166744, 0.16496595425345004] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2405860022166744, 0.16496595425345004, 0.15075272967200726] ***
*** starting iteration: 3; err: [Inf, 0.2405860022166744, 0.16496595425345004, 0.15075272967200726] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2405860022166744, 0.16496595425345004, 0.15075272967200726, 0.1487409996520728] ***
*** finished computation of 7 references, err: [Inf, 0.2405860022166744, 0.16496595425345004, 0.15075272967200726, 0.1487409996520728] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [55, 40, 0]]
** centroid: 1, normalized-entropy: 0.9819407868640977, [(1, 55), (2, 40)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [76, 5, 0]]
** centroid: 2, normalized-entropy: 0.33426813256179383, [(1, 76), (2, 5)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [2, 69, 0]]
** centroid: 3, normalized-entropy: 0.18512476010054582, [(1, 2), (2, 69)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 70, 14]]
** centroid: 4, normalized-entropy: 0.6500224216483541, [(2, 70), (3, 14)]
*** center 5: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [40, 4, 0]]
** centroid: 6, normalized-entropy: 0.43949698692151346, [(1, 40), (2, 4)]
*** center 7: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24378543301485478] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24378543301485478, 0.1831929112014477] ***
*** starting iteration: 2; err: [Inf, 0.24378543301485478, 0.1831929112014477] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24378543301485478, 0.1831929112014477, 0.16711930529400706] ***
*** starting iteration: 3; err: [Inf, 0.24378543301485478, 0.1831929112014477, 0.16711930529400706] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24378543301485478, 0.1831929112014477, 0.16711930529400706, 0.1581894964184612] ***
*** finished computation of 7 references, err: [Inf, 0.24378543301485478, 0.1831929112014477, 0.16711930529400706, 0.1581894964184612] ***
*** center 1: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [35, 46, 0]]
** centroid: 3, normalized-entropy: 0.9866554896538049, [(1, 35), (2, 46)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [8, 23, 0]]
** centroid: 4, normalized-entropy: 0.8238116333123173, [(1, 8), (2, 23)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [96, 2, 0]]
** centroid: 5, normalized-entropy: 0.14372616993938164, [(1, 96), (2, 2)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 80, 17]]
** centroid: 6, normalized-entropy: 0.6695920597928519, [(2, 80), (3, 17)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [5, 42, 0]]
** centroid: 7, normalized-entropy: 0.48890859144051524, [(1, 5), (2, 42)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2361973710451275] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2361973710451275, 0.20484921847609802] ***
*** starting iteration: 2; err: [Inf, 0.2361973710451275, 0.20484921847609802] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2361973710451275, 0.20484921847609802, 0.18154410818777977] ***
*** starting iteration: 3; err: [Inf, 0.2361973710451275, 0.20484921847609802, 0.18154410818777977] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2361973710451275, 0.20484921847609802, 0.18154410818777977, 0.16214337193779646] ***
*** finished computation of 7 references, err: [Inf, 0.2361973710451275, 0.20484921847609802, 0.18154410818777977, 0.16214337193779646] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 56, 9]]
** centroid: 1, normalized-entropy: 0.5801954953637372, [(2, 56), (3, 9)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [58, 35, 0]]
** centroid: 2, normalized-entropy: 0.9554189905653109, [(1, 58), (2, 35)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [62, 13, 0]]
** centroid: 3, normalized-entropy: 0.6652735227649414, [(1, 62), (2, 13)]
*** center 4: selecting labels [1] (freq >= 2) [from [116, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 83, 4]]
** centroid: 5, normalized-entropy: 0.2690553027246505, [(2, 83), (3, 4)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [12, 18, 0]]
** centroid: 6, normalized-entropy: 0.9709505944546688, [(1, 12), (2, 18)]
*** center 7: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17967287622299044] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17967287622299044, 0.16133158222958446] ***
*** starting iteration: 2; err: [Inf, 0.17967287622299044, 0.16133158222958446] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17967287622299044, 0.16133158222958446, 0.15394377625733613] ***
*** starting iteration: 3; err: [Inf, 0.17967287622299044, 0.16133158222958446, 0.15394377625733613] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17967287622299044, 0.16133158222958446, 0.15394377625733613, 0.15208565563894808] ***
*** finished computation of 7 references, err: [Inf, 0.17967287622299044, 0.16133158222958446, 0.15394377625733613, 0.15208565563894808] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 89, 20]]
** centroid: 1, normalized-entropy: 0.6876445334580582, [(2, 89), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [39, 29, 0]]
** centroid: 2, normalized-entropy: 0.9843432030984676, [(1, 39), (2, 29)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [9, 55, 0]]
** centroid: 3, normalized-entropy: 0.5858732928619204, [(1, 9), (2, 55)]
*** center 4: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [47, 19, 0]]
** centroid: 5, normalized-entropy: 0.8659653498997099, [(1, 47), (2, 19)]
*** center 6: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [45, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2539066890943795] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2539066890943795, 0.17877958074305206] ***
*** starting iteration: 2; err: [Inf, 0.2539066890943795, 0.17877958074305206] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2539066890943795, 0.17877958074305206, 0.16379065971821546] ***
*** starting iteration: 3; err: [Inf, 0.2539066890943795, 0.17877958074305206, 0.16379065971821546] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2539066890943795, 0.17877958074305206, 0.16379065971821546, 0.15615484105609356] ***
*** finished computation of 7 references, err: [Inf, 0.2539066890943795, 0.17877958074305206, 0.16379065971821546, 0.15615484105609356] ***
*** center 1: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [80, 37, 0]]
** centroid: 2, normalized-entropy: 0.9002448724102409, [(1, 80), (2, 37)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 65, 1]]
*** center 4: selecting labels [2] (freq >= 2) [from [1, 54, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [72, 3, 0]]
** centroid: 5, normalized-entropy: 0.24229218908241482, [(1, 72), (2, 3)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 22, 17]]
** centroid: 6, normalized-entropy: 0.98811083652183, [(2, 22), (3, 17)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [34, 8, 0]]
** centroid: 7, normalized-entropy: 0.7024665512903904, [(1, 34), (2, 8)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20223623111657799] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20223623111657799, 0.15391288005188108] ***
*** starting iteration: 2; err: [Inf, 0.20223623111657799, 0.15391288005188108] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20223623111657799, 0.15391288005188108, 0.14894457183219492] ***
*** starting iteration: 3; err: [Inf, 0.20223623111657799, 0.15391288005188108, 0.14894457183219492] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20223623111657799, 0.15391288005188108, 0.14894457183219492, 0.1463951430451125] ***
*** finished computation of 7 references, err: [Inf, 0.20223623111657799, 0.15391288005188108, 0.14894457183219492, 0.1463951430451125] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 77, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [71, 6, 0]]
** centroid: 2, normalized-entropy: 0.39481484603049416, [(1, 71), (2, 6)]
*** center 3: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [48, 19, 0]]
** centroid: 5, normalized-entropy: 0.8602858652332406, [(1, 48), (2, 19)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [40, 43, 0]]
** centroid: 6, normalized-entropy: 0.9990574042663861, [(1, 40), (2, 43)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 37, 18]]
** centroid: 7, normalized-entropy: 0.9121156307204275, [(2, 37), (3, 18)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18986203552037478] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18986203552037478, 0.1586379988640547] ***
*** starting iteration: 2; err: [Inf, 0.18986203552037478, 0.1586379988640547] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18986203552037478, 0.1586379988640547, 0.15268395882472396] ***
*** starting iteration: 3; err: [Inf, 0.18986203552037478, 0.1586379988640547, 0.15268395882472396] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18986203552037478, 0.1586379988640547, 0.15268395882472396, 0.14904130166582763] ***
*** finished computation of 7 references, err: [Inf, 0.18986203552037478, 0.1586379988640547, 0.15268395882472396, 0.14904130166582763] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [67, 20, 0]]
** centroid: 1, normalized-entropy: 0.7778108790853029, [(1, 67), (2, 20)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [79, 2, 0]]
** centroid: 2, normalized-entropy: 0.16702680404522793, [(1, 79), (2, 2)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 61, 13]]
** centroid: 3, normalized-entropy: 0.6705250693158382, [(2, 61), (3, 13)]
*** center 4: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 64, 1]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [16, 52, 0]]
** centroid: 6, normalized-entropy: 0.787126586201269, [(1, 16), (2, 52)]
*** center 7: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18611697187274695] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18611697187274695, 0.156078115420416] ***
*** starting iteration: 2; err: [Inf, 0.18611697187274695, 0.156078115420416] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18611697187274695, 0.156078115420416, 0.1521364327259362] ***
*** starting iteration: 3; err: [Inf, 0.18611697187274695, 0.156078115420416, 0.1521364327259362] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18611697187274695, 0.156078115420416, 0.1521364327259362, 0.1510334198754281] ***
*** finished computation of 7 references, err: [Inf, 0.18611697187274695, 0.156078115420416, 0.1521364327259362, 0.1510334198754281] ***
*** center 1: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [67, 14, 0]]
** centroid: 2, normalized-entropy: 0.6641593279528072, [(1, 67), (2, 14)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [36, 19, 0]]
** centroid: 3, normalized-entropy: 0.9299429352091801, [(1, 36), (2, 19)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 65, 21]]
** centroid: 4, normalized-entropy: 0.8019325020834525, [(2, 65), (3, 21)]
*** center 5: selecting labels [1] (freq >= 2) [from [47, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [7, 62, 0]]
** centroid: 6, normalized-entropy: 0.47357292491745173, [(1, 7), (2, 62)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [35, 32, 0]]
** centroid: 7, normalized-entropy: 0.9985532860835362, [(1, 35), (2, 32)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26200556016527116] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26200556016527116, 0.17049310654494912] ***
*** starting iteration: 2; err: [Inf, 0.26200556016527116, 0.17049310654494912] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26200556016527116, 0.17049310654494912, 0.1545216573420912] ***
*** starting iteration: 3; err: [Inf, 0.26200556016527116, 0.17049310654494912, 0.1545216573420912] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26200556016527116, 0.17049310654494912, 0.1545216573420912, 0.14925066750496627] ***
*** finished computation of 7 references, err: [Inf, 0.26200556016527116, 0.17049310654494912, 0.1545216573420912, 0.14925066750496627] ***
*** center 1: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 46, 16]]
** centroid: 2, normalized-entropy: 0.8238116333123173, [(2, 46), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [81, 12, 0]]
** centroid: 3, normalized-entropy: 0.5547781633412736, [(1, 81), (2, 12)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [33, 56, 0]]
** centroid: 4, normalized-entropy: 0.951274087437692, [(1, 33), (2, 56)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 72, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [46, 3, 0]]
** centroid: 6, normalized-entropy: 0.3322866302216152, [(1, 46), (2, 3)]
*** center 7: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24756456727860496] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24756456727860496, 0.19175374517776073] ***
*** starting iteration: 2; err: [Inf, 0.24756456727860496, 0.19175374517776073] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24756456727860496, 0.19175374517776073, 0.1661017863638699] ***
*** starting iteration: 3; err: [Inf, 0.24756456727860496, 0.19175374517776073, 0.1661017863638699] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24756456727860496, 0.19175374517776073, 0.1661017863638699, 0.15497738800290972] ***
*** finished computation of 7 references, err: [Inf, 0.24756456727860496, 0.19175374517776073, 0.1661017863638699, 0.15497738800290972] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 78, 6]]
** centroid: 1, normalized-entropy: 0.3712323266408756, [(2, 78), (3, 6)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [35, 12, 0]]
** centroid: 2, normalized-entropy: 0.8196004346196011, [(1, 35), (2, 12)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 81, 12]]
** centroid: 3, normalized-entropy: 0.5547781633412736, [(2, 81), (3, 12)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [64, 5, 0]]
** centroid: 4, normalized-entropy: 0.3750514064240124, [(1, 64), (2, 5)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [39, 7, 0]]
** centroid: 5, normalized-entropy: 0.6152538910563409, [(1, 39), (2, 7)]
*** center 6: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [83, 1, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2111835520621389] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2111835520621389, 0.16240012148208915] ***
*** starting iteration: 2; err: [Inf, 0.2111835520621389, 0.16240012148208915] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2111835520621389, 0.16240012148208915, 0.15753540453314782] ***
*** starting iteration: 3; err: [Inf, 0.2111835520621389, 0.16240012148208915, 0.15753540453314782] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2111835520621389, 0.16240012148208915, 0.15753540453314782, 0.1555277687571943] ***
*** finished computation of 7 references, err: [Inf, 0.2111835520621389, 0.16240012148208915, 0.15753540453314782, 0.1555277687571943] ***
*** center 1: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 50, 24]]
** centroid: 2, normalized-entropy: 0.9090221560878149, [(2, 50), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [45, 48, 0]]
** centroid: 3, normalized-entropy: 0.9992492479956566, [(1, 45), (2, 48)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 72, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [47, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [79, 19, 0]]
** centroid: 7, normalized-entropy: 0.7095128863456239, [(1, 79), (2, 19)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19823121878970415] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19823121878970415, 0.15780295623466373] ***
*** starting iteration: 2; err: [Inf, 0.19823121878970415, 0.15780295623466373] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19823121878970415, 0.15780295623466373, 0.15024754094332457] ***
*** starting iteration: 3; err: [Inf, 0.19823121878970415, 0.15780295623466373, 0.15024754094332457] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19823121878970415, 0.15780295623466373, 0.15024754094332457, 0.14814838387910276] ***
*** finished computation of 7 references, err: [Inf, 0.19823121878970415, 0.15780295623466373, 0.15024754094332457, 0.14814838387910276] ***
*** center 1: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [78, 2, 0]]
** centroid: 2, normalized-entropy: 0.1686609314966701, [(1, 78), (2, 2)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [54, 35, 0]]
** centroid: 3, normalized-entropy: 0.9668701645630143, [(1, 54), (2, 35)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 46, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 52, 18]]
** centroid: 5, normalized-entropy: 0.8224042259549892, [(2, 52), (3, 18)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [7, 49, 0]]
** centroid: 6, normalized-entropy: 0.5435644431995963, [(1, 7), (2, 49)]
*** center 7: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3384692394975573] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3384692394975573, 0.18180483881756662] ***
*** starting iteration: 2; err: [Inf, 0.3384692394975573, 0.18180483881756662] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3384692394975573, 0.18180483881756662, 0.16582095390744508] ***
*** starting iteration: 3; err: [Inf, 0.3384692394975573, 0.18180483881756662, 0.16582095390744508] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3384692394975573, 0.18180483881756662, 0.16582095390744508, 0.16035938193742186] ***
*** finished computation of 7 references, err: [Inf, 0.3384692394975573, 0.18180483881756662, 0.16582095390744508, 0.16035938193742186] ***
*** center 1: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [34, 29, 0]]
** centroid: 3, normalized-entropy: 0.9954515828457716, [(1, 34), (2, 29)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [80, 35, 0]]
** centroid: 4, normalized-entropy: 0.8865408928220899, [(1, 80), (2, 35)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 106, 20]]
** centroid: 5, normalized-entropy: 0.6312630180916119, [(2, 106), (3, 20)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [23, 26, 0]]
** centroid: 6, normalized-entropy: 0.9972943816462351, [(1, 23), (2, 26)]
*** center 7: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.220226286765188] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.220226286765188, 0.1821719299381366] ***
*** starting iteration: 2; err: [Inf, 0.220226286765188, 0.1821719299381366] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.220226286765188, 0.1821719299381366, 0.16278152052313088] ***
*** starting iteration: 3; err: [Inf, 0.220226286765188, 0.1821719299381366, 0.16278152052313088] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.220226286765188, 0.1821719299381366, 0.16278152052313088, 0.15461883551627398] ***
*** finished computation of 7 references, err: [Inf, 0.220226286765188, 0.1821719299381366, 0.16278152052313088, 0.15461883551627398] ***
*** center 1: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 55, 15]]
** centroid: 2, normalized-entropy: 0.7495952572594798, [(2, 55), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [57, 63, 0]]
** centroid: 3, normalized-entropy: 0.99819587904281, [(1, 57), (2, 63)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 63, 1]]
*** center 5: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [47, 12, 0]]
** centroid: 6, normalized-entropy: 0.7286561673702678, [(1, 47), (2, 12)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [33, 6, 0]]
** centroid: 7, normalized-entropy: 0.6193821946787638, [(1, 33), (2, 6)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19123237129999324] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19123237129999324, 0.15863078410364687] ***
*** starting iteration: 2; err: [Inf, 0.19123237129999324, 0.15863078410364687] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19123237129999324, 0.15863078410364687, 0.1494357009269297] ***
*** starting iteration: 3; err: [Inf, 0.19123237129999324, 0.15863078410364687, 0.1494357009269297] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19123237129999324, 0.15863078410364687, 0.1494357009269297, 0.14607180294394492] ***
*** finished computation of 7 references, err: [Inf, 0.19123237129999324, 0.15863078410364687, 0.1494357009269297, 0.14607180294394492] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [53, 9, 0]]
** centroid: 1, normalized-entropy: 0.5975977764379984, [(1, 53), (2, 9)]
*** center 2: selecting labels [1] (freq >= 2) [from [63, 1, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [47, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [70, 2, 0]]
** centroid: 4, normalized-entropy: 0.18312206830137262, [(1, 70), (2, 2)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 59, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [42, 39, 0]]
** centroid: 6, normalized-entropy: 0.9990102708804813, [(1, 42), (2, 39)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 93, 22]]
** centroid: 7, normalized-entropy: 0.7041920940481365, [(2, 93), (3, 22)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3097372881490737] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3097372881490737, 0.17457406547479332] ***
*** starting iteration: 2; err: [Inf, 0.3097372881490737, 0.17457406547479332] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3097372881490737, 0.17457406547479332, 0.16367614280385898] ***
*** starting iteration: 3; err: [Inf, 0.3097372881490737, 0.17457406547479332, 0.16367614280385898] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3097372881490737, 0.17457406547479332, 0.16367614280385898, 0.15976609509810805] ***
*** finished computation of 7 references, err: [Inf, 0.3097372881490737, 0.17457406547479332, 0.16367614280385898, 0.15976609509810805] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [74, 20, 0]]
** centroid: 1, normalized-entropy: 0.7467366074830678, [(1, 74), (2, 20)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [70, 34, 0]]
** centroid: 2, normalized-entropy: 0.9117517586347538, [(1, 70), (2, 34)]
*** center 3: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 86, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 33, 12]]
** centroid: 6, normalized-entropy: 0.8366407419411671, [(2, 33), (3, 12)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 14, 8]]
** centroid: 7, normalized-entropy: 0.9456603046006401, [(2, 14), (3, 8)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19370705444924533] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19370705444924533, 0.14837729564867913] ***
*** starting iteration: 2; err: [Inf, 0.19370705444924533, 0.14837729564867913] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19370705444924533, 0.14837729564867913, 0.1449794450197369] ***
*** starting iteration: 3; err: [Inf, 0.19370705444924533, 0.14837729564867913, 0.1449794450197369] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19370705444924533, 0.14837729564867913, 0.1449794450197369, 0.14421788392309098] ***
*** finished computation of 7 references, err: [Inf, 0.19370705444924533, 0.14837729564867913, 0.1449794450197369, 0.14421788392309098] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 84, 26]]
** centroid: 1, normalized-entropy: 0.7889406572966208, [(2, 84), (3, 26)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [69, 4, 0]]
** centroid: 2, normalized-entropy: 0.306424729870515, [(1, 69), (2, 4)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [38, 40, 0]]
** centroid: 3, normalized-entropy: 0.9995256892936492, [(1, 38), (2, 40)]
*** center 4: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [43, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [62, 1, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [19, 46, 0]]
** centroid: 7, normalized-entropy: 0.871683617119982, [(1, 19), (2, 46)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20517590893805027] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20517590893805027, 0.16051500099652913] ***
*** starting iteration: 2; err: [Inf, 0.20517590893805027, 0.16051500099652913] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20517590893805027, 0.16051500099652913, 0.14627566329576075] ***
*** starting iteration: 3; err: [Inf, 0.20517590893805027, 0.16051500099652913, 0.14627566329576075] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20517590893805027, 0.16051500099652913, 0.14627566329576075, 0.14383503223583102] ***
*** finished computation of 7 references, err: [Inf, 0.20517590893805027, 0.16051500099652913, 0.14627566329576075, 0.14383503223583102] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 54, 19]]
** centroid: 1, normalized-entropy: 0.8271595195340525, [(2, 54), (3, 19)]
*** center 2: selecting labels [1] (freq >= 2) [from [68, 1, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [2, 85, 0]]
** centroid: 3, normalized-entropy: 0.15790637433488164, [(1, 2), (2, 85)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [42, 35, 0]]
** centroid: 4, normalized-entropy: 0.9940302114769566, [(1, 42), (2, 35)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [49, 26, 0]]
** centroid: 5, normalized-entropy: 0.9310558233850329, [(1, 49), (2, 26)]
*** center 6: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19638398519810288] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19638398519810288, 0.1556241039885208] ***
*** starting iteration: 2; err: [Inf, 0.19638398519810288, 0.1556241039885208] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19638398519810288, 0.1556241039885208, 0.15310690654814244] ***
*** starting iteration: 3; err: [Inf, 0.19638398519810288, 0.1556241039885208, 0.15310690654814244] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19638398519810288, 0.1556241039885208, 0.15310690654814244, 0.1515361756114289] ***
*** finished computation of 7 references, err: [Inf, 0.19638398519810288, 0.1556241039885208, 0.15310690654814244, 0.1515361756114289] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [65, 26, 0]]
** centroid: 1, normalized-entropy: 0.8631205685666311, [(1, 65), (2, 26)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 64, 16]]
** centroid: 2, normalized-entropy: 0.7219280948873623, [(2, 64), (3, 16)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 65, 2]]
** centroid: 3, normalized-entropy: 0.19364280468389852, [(2, 65), (3, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [36, 21, 0]]
** centroid: 4, normalized-entropy: 0.9494520153879484, [(1, 36), (2, 21)]
*** center 5: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [74, 15, 0]]
** centroid: 6, normalized-entropy: 0.6543524423071835, [(1, 74), (2, 15)]
*** center 7: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2042174503710121] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2042174503710121, 0.16956918520946054] ***
*** starting iteration: 2; err: [Inf, 0.2042174503710121, 0.16956918520946054] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2042174503710121, 0.16956918520946054, 0.15586204649414867] ***
*** starting iteration: 3; err: [Inf, 0.2042174503710121, 0.16956918520946054, 0.15586204649414867] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2042174503710121, 0.16956918520946054, 0.15586204649414867, 0.151883639103733] ***
*** finished computation of 7 references, err: [Inf, 0.2042174503710121, 0.16956918520946054, 0.15586204649414867, 0.151883639103733] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [53, 36, 0]]
** centroid: 1, normalized-entropy: 0.9735190023846809, [(1, 53), (2, 36)]
*** center 2: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 35, 7]]
** centroid: 4, normalized-entropy: 0.6500224216483541, [(2, 35), (3, 7)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [45, 39, 0]]
** centroid: 5, normalized-entropy: 0.9963165195589622, [(1, 45), (2, 39)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [8, 60, 0]]
** centroid: 6, normalized-entropy: 0.5225593745369407, [(1, 8), (2, 60)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 29, 13]]
** centroid: 7, normalized-entropy: 0.8926230133850988, [(2, 29), (3, 13)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1931472881361842] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1931472881361842, 0.1667547237435356] ***
*** starting iteration: 2; err: [Inf, 0.1931472881361842, 0.1667547237435356] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1931472881361842, 0.1667547237435356, 0.16042175981402398] ***
*** starting iteration: 3; err: [Inf, 0.1931472881361842, 0.1667547237435356, 0.16042175981402398] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1931472881361842, 0.1667547237435356, 0.16042175981402398, 0.15633111580833792] ***
*** finished computation of 7 references, err: [Inf, 0.1931472881361842, 0.1667547237435356, 0.16042175981402398, 0.15633111580833792] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [65, 21, 0]]
** centroid: 1, normalized-entropy: 0.8019325020834525, [(1, 65), (2, 21)]
*** center 2: selecting labels [1] (freq >= 2) [from [118, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [14, 52, 0]]
** centroid: 3, normalized-entropy: 0.7455178428108284, [(1, 14), (2, 52)]
*** center 4: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [3, 55, 0]]
** centroid: 5, normalized-entropy: 0.29367630985136944, [(1, 3), (2, 55)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 35, 6]]
** centroid: 6, normalized-entropy: 0.6006085754131871, [(2, 35), (3, 6)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 24, 12]]
** centroid: 7, normalized-entropy: 0.9182958340544894, [(2, 24), (3, 12)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.33652509083226323] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33652509083226323, 0.19284257772937416] ***
*** starting iteration: 2; err: [Inf, 0.33652509083226323, 0.19284257772937416] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33652509083226323, 0.19284257772937416, 0.1617201125540305] ***
*** starting iteration: 3; err: [Inf, 0.33652509083226323, 0.19284257772937416, 0.1617201125540305] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33652509083226323, 0.19284257772937416, 0.1617201125540305, 0.15017241652868688] ***
*** finished computation of 7 references, err: [Inf, 0.33652509083226323, 0.19284257772937416, 0.1617201125540305, 0.15017241652868688] ***
*** center 1: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 67, 16]]
** centroid: 2, normalized-entropy: 0.7072324944713736, [(2, 67), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [48, 15, 0]]
** centroid: 3, normalized-entropy: 0.7918583525674836, [(1, 48), (2, 15)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [40, 51, 0]]
** centroid: 4, normalized-entropy: 0.9894340222202265, [(1, 40), (2, 51)]
*** center 5: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 54, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [48, 3, 0]]
** centroid: 7, normalized-entropy: 0.32275695889739825, [(1, 48), (2, 3)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1887581438771449] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1887581438771449, 0.15004507634229958] ***
*** starting iteration: 2; err: [Inf, 0.1887581438771449, 0.15004507634229958] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1887581438771449, 0.15004507634229958, 0.14476690370682627] ***
*** starting iteration: 3; err: [Inf, 0.1887581438771449, 0.15004507634229958, 0.14476690370682627] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1887581438771449, 0.15004507634229958, 0.14476690370682627, 0.14248909155046569] ***
*** finished computation of 7 references, err: [Inf, 0.1887581438771449, 0.15004507634229958, 0.14476690370682627, 0.14248909155046569] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [40, 36, 0]]
** centroid: 1, normalized-entropy: 0.9980008838722993, [(1, 40), (2, 36)]
*** center 2: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [58, 9, 0]]
** centroid: 3, normalized-entropy: 0.569190343735683, [(1, 58), (2, 9)]
*** center 4: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [74, 7, 0]]
** centroid: 5, normalized-entropy: 0.42440514472480345, [(1, 74), (2, 7)]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 82, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 44, 18]]
** centroid: 7, normalized-entropy: 0.8691375806126381, [(2, 44), (3, 18)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2509388998616487] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2509388998616487, 0.16943236056808383] ***
*** starting iteration: 2; err: [Inf, 0.2509388998616487, 0.16943236056808383] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2509388998616487, 0.16943236056808383, 0.15789403326809406] ***
*** starting iteration: 3; err: [Inf, 0.2509388998616487, 0.16943236056808383, 0.15789403326809406] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2509388998616487, 0.16943236056808383, 0.15789403326809406, 0.1545336216855794] ***
*** finished computation of 7 references, err: [Inf, 0.2509388998616487, 0.16943236056808383, 0.15789403326809406, 0.1545336216855794] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [21, 50, 0]]
** centroid: 1, normalized-entropy: 0.8760643678555242, [(1, 21), (2, 50)]
*** center 2: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [9, 66, 0]]
** centroid: 3, normalized-entropy: 0.5293608652873645, [(1, 9), (2, 66)]
*** center 4: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 65, 22]]
** centroid: 5, normalized-entropy: 0.8158009273789572, [(2, 65), (3, 22)]
*** center 6: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [20, 14, 0]]
** centroid: 7, normalized-entropy: 0.9774178175281716, [(1, 20), (2, 14)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20018282443843782] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20018282443843782, 0.1650422667376697] ***
*** starting iteration: 2; err: [Inf, 0.20018282443843782, 0.1650422667376697] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20018282443843782, 0.1650422667376697, 0.15521091743186116] ***
*** starting iteration: 3; err: [Inf, 0.20018282443843782, 0.1650422667376697, 0.15521091743186116] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20018282443843782, 0.1650422667376697, 0.15521091743186116, 0.15126988117513246] ***
*** finished computation of 7 references, err: [Inf, 0.20018282443843782, 0.1650422667376697, 0.15521091743186116, 0.15126988117513246] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 89, 10]]
** centroid: 1, normalized-entropy: 0.47218938467675087, [(2, 89), (3, 10)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [42, 23, 0]]
** centroid: 2, normalized-entropy: 0.937456170782005, [(1, 42), (2, 23)]
*** center 3: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [74, 12, 0]]
** centroid: 4, normalized-entropy: 0.5830194167347007, [(1, 74), (2, 12)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [20, 66, 0]]
** centroid: 5, normalized-entropy: 0.7824441294066888, [(1, 20), (2, 66)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [15, 3, 0]]
** centroid: 6, normalized-entropy: 0.6500224216483541, [(1, 15), (2, 3)]
*** center 7: selecting labels [1] (freq >= 2) [from [54, 1, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20286896710656582] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20286896710656582, 0.16038860284211115] ***
*** starting iteration: 2; err: [Inf, 0.20286896710656582, 0.16038860284211115] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20286896710656582, 0.16038860284211115, 0.15237768977694213] ***
*** starting iteration: 3; err: [Inf, 0.20286896710656582, 0.16038860284211115, 0.15237768977694213] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20286896710656582, 0.16038860284211115, 0.15237768977694213, 0.14967032353300602] ***
*** finished computation of 7 references, err: [Inf, 0.20286896710656582, 0.16038860284211115, 0.15237768977694213, 0.14967032353300602] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [44, 18, 0]]
** centroid: 1, normalized-entropy: 0.8691375806126381, [(1, 44), (2, 18)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [44, 15, 0]]
** centroid: 2, normalized-entropy: 0.8179252501386403, [(1, 44), (2, 15)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [54, 12, 0]]
** centroid: 3, normalized-entropy: 0.6840384356390419, [(1, 54), (2, 12)]
*** center 4: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 103, 18]]
** centroid: 5, normalized-entropy: 0.6067293172263869, [(2, 103), (3, 18)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [33, 35, 0]]
** centroid: 6, normalized-entropy: 0.9993759069576513, [(1, 33), (2, 35)]
*** center 7: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24029956603050232] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24029956603050232, 0.19327538090385496] ***
*** starting iteration: 2; err: [Inf, 0.24029956603050232, 0.19327538090385496] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24029956603050232, 0.19327538090385496, 0.17431587209366262] ***
*** starting iteration: 3; err: [Inf, 0.24029956603050232, 0.19327538090385496, 0.17431587209366262] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24029956603050232, 0.19327538090385496, 0.17431587209366262, 0.16500235187076032] ***
*** finished computation of 7 references, err: [Inf, 0.24029956603050232, 0.19327538090385496, 0.17431587209366262, 0.16500235187076032] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 5]]
*** center 2: selecting labels [1] (freq >= 2) [from [134, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [1, 70, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [86, 21, 0]]
** centroid: 4, normalized-entropy: 0.7143881566559658, [(1, 86), (2, 21)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 50, 5]]
** centroid: 5, normalized-entropy: 0.43949698692151346, [(2, 50), (3, 5)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [67, 34, 0]]
** centroid: 6, normalized-entropy: 0.9215608652945444, [(1, 67), (2, 34)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 19, 8]]
** centroid: 7, normalized-entropy: 0.876716288999464, [(2, 19), (3, 8)]
finished with 11 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 382,3 => 35,1 => 583), Dict(2 => 360,3 => 40,1 => 600))
[ Info: ===== scores for single classifier: {"micro_f1":0.924,"precision":0.924,"recall":0.924,"macro_recall":0.9448148148148148,"macro_f1":0.8801692305942986,"accuracy":0.924,"class_f1":{"2":0.8953168044077134,"3":0.7920792079207921,"1":0.9531116794543905},"class_precision":{"2":0.8879781420765027,"3":0.6557377049180327,"1":0.9755671902268761},"class_recall":{"2":0.9027777777777778,"3":1.0,"1":0.9316666666666666}}
[ Info: ===== scores for 1: {"micro_f1":0.969,"precision":0.969,"recall":0.969,"macro_recall":0.977962962962963,"macro_f1":0.9588563701342606,"accuracy":0.969,"class_f1":{"2":0.9572413793103448,"3":0.9411764705882353,"1":0.9781512605042016},"class_precision":{"2":0.9506849315068493,"3":0.8888888888888888,"1":0.9864406779661017},"class_recall":{"2":0.9638888888888889,"3":1.0,"1":0.97}}
[ Info: ===== scores for 5: {"micro_f1":0.961,"precision":0.961,"recall":0.961,"macro_recall":0.9735185185185186,"macro_f1":0.946405194362916,"accuracy":0.961,"class_f1":{"2":0.946793997271487,"3":0.9195402298850576,"1":0.9728813559322034},"class_precision":{"2":0.9302949061662198,"3":0.851063829787234,"1":0.9896551724137931},"class_recall":{"2":0.9638888888888889,"3":1.0,"1":0.9566666666666667}}
[ Info: ===== scores for 7: {"micro_f1":0.958,"precision":0.958,"recall":0.958,"macro_recall":0.9725925925925926,"macro_f1":0.9411079711421008,"accuracy":0.958,"class_f1":{"2":0.9432432432432432,"3":0.9090909090909091,"1":0.9709897610921502},"class_precision":{"2":0.9184210526315789,"3":0.8333333333333334,"1":0.9947552447552448},"class_recall":{"2":0.9694444444444444,"3":1.0,"1":0.9483333333333334}}
[ Info: ===== scores for 9: {"micro_f1":0.96,"precision":0.96,"recall":0.96,"macro_recall":0.9748148148148149,"macro_f1":0.9458491777502256,"accuracy":0.96,"class_f1":{"2":0.946236559139785,"3":0.9195402298850576,"1":0.9717707442258341},"class_precision":{"2":0.9166666666666666,"3":0.851063829787234,"1":0.9982425307557118},"class_recall":{"2":0.9777777777777777,"3":1.0,"1":0.9466666666666667}}
[ Info: ===== scores for 11: {"micro_f1":0.96,"precision":0.96,"recall":0.96,"macro_recall":0.9744444444444444,"macro_f1":0.9458169440817774,"accuracy":0.96,"class_f1":{"2":0.9460916442048517,"3":0.9195402298850576,"1":0.9718189581554227},"class_precision":{"2":0.918848167539267,"3":0.851063829787234,"1":0.9964973730297724},"class_recall":{"2":0.975,"3":1.0,"1":0.9483333333333334}}
(score = 0.971, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.971, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.969, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.969, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.969, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.969, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.967, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.967, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.961, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.961, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.961, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.961, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.958, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.958, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.958, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.958, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.971,"k":1,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.971,"precision":0.971,"recall":0.971,"macro_recall":0.9794444444444445,"macro_f1":0.9569628571987404,"accuracy":0.971,"class_f1":{"2":0.9600000000000001,"3":0.9302325581395349,"1":0.9806560134566863},"class_precision":{"2":0.9534246575342465,"3":0.8695652173913043,"1":0.9898132427843803},"class_recall":{"2":0.9666666666666667,"3":1.0,"1":0.9716666666666667}}
Test Summary: | Pass  Total
AKNC          |    8      8
[61, 2, 5, 3, 5, 3, 2, 4, 10, 2, 15, 10, 10, 13, 6, 11, 10, 9, 1, 7, 2, 12, 3, 13, 5, 18, 9, 4, 34, 12, 6, 15, 1, 2, 1, 5, 4, 4, 12, 23, 4, 13, 7, 15, 5, 4, 14, 49, 13, 21, 186, 8, 3, 1, 31, 17, 5, 9, 2, 2, 5, 42, 3, 18, 15, 1, 4, 21, 14, 3, 1, 14, 43, 2, 14, 20, 7, 5, 5, 9, 570, 9, 16, 6, 116, 21, 4, 5, 4, 1, 49, 3, 5, 116, 3, 16, 11, 4, 17, 8, 3, 4, 12, 11, 26, 10, 12, 8, 26, 7, 10, 12, 4, 14, 8, 73, 67, 151, 9, 24, 13, 65, 4, 8, 61, 107, 67, 14, 82, 15, 18, 43, 19, 8, 5, 14, 1, 44, 62, 7, 74, 17, 75, 23, 5, 12, 3, 72, 21, 2, 11, 42, 33, 4, 3, 22, 27, 5, 6, 162, 5, 31, 24, 90, 97, 15, 10, 25, 43, 1, 8, 6, 2, 4, 5, 6, 28, 13, 83, 24, 17, 19, 6, 72, 10, 290, 1, 14, 95, 4, 17, 27, 16, 12, 745, 48, 23, 29, 14, 3, 68, 9, 20, 8, 1, 8, 87, 35, 60, 182, 59, 15, 3, 3, 38, 125, 19, 28, 82, 28, 78, 9, 34, 37, 9, 30, 67, 16, 472, 26, 9, 18, 78, 18, 18, 49, 16, 49, 5, 22, 72, 4, 8, 160, 67, 12, 20, 21, 96, 18, 11, 5, 54, 2, 18, 8, 180, 72, 8, 6, 15, 93, 20, 3, 8, 25, 35, 7, 45, 12, 62, 28, 104, 36, 13, 21, 72, 36, 15, 2, 45, 75, 27, 9, 9, 5, 25, 52, 21, 21, 29, 15, 110, 39, 216, 5, 51, 27, 8, 17]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.655, speedup = 0.2794050322380601, eval_ratio = 0.07886699999999999)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.35807291666666685,"recall":0.35763888888888906,"f1":null,"seconds":0.00010067224502563477,"exhaustive_search_seconds":0.00021882914006710052,"evaluations":450.953125,"distances_sum":1731.8938106618502}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5564236111111112,"recall":0.5564236111111112,"f1":0.5564236111111112,"seconds":0.000470675528049469,"exhaustive_search_seconds":0.00021882914006710052,"evaluations":565.9453125,"distances_sum":1629.4731678005683}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6701388888888887,"recall":0.6701388888888887,"f1":0.6701388888888887,"seconds":0.0004734788089990616,"exhaustive_search_seconds":0.00021882914006710052,"evaluations":703.6640625,"distances_sum":1576.644106007218}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7439236111111105,"recall":0.7439236111111105,"f1":0.7439236111111105,"seconds":0.0005621816962957382,"exhaustive_search_seconds":0.00021882914006710052,"evaluations":813.1953125,"distances_sum":1554.0054294791446}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.799479166666666,"recall":0.799479166666666,"f1":0.799479166666666,"seconds":0.0008022245019674301,"exhaustive_search_seconds":0.00021882914006710052,"evaluations":941.984375,"distances_sum":1537.7428793268084}
KCenters.DeloneInvIndex> reached performance {"precision":0.8394097222222217,"recall":0.8394097222222217,"f1":0.8394097222222217,"seconds":0.0004228129982948303,"exhaustive_search_seconds":0.00021882914006710052,"evaluations":1017.5546875,"distances_sum":1528.8322507961914}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8340000000000001, speedup = 0.7496244244028716, eval_ratio = 0.10611500000000001)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
