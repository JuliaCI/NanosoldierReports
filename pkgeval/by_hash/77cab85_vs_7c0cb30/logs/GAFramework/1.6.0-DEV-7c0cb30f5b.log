Julia Version 1.6.0-DEV.603
Commit 7c0cb30f5b (2020-08-07 05:02 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.0
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.0
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_BHUoBV/Project.toml`
  [5789e2e9] FileIO v1.4.0
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_BHUoBV/Manifest.toml`
  [5789e2e9] FileIO v1.4.0
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21723357326899348
curgen: 20 fitness: 0.21723357326899348
curgen: 30 fitness: 0.21723357326899348
curgen: 40 fitness: 0.21723357326899348
curgen: 50 fitness: 0.21723357326899348
CoordinateCreature{Vector{Float64}}([-0.22251293703090788], -0.21723357326899348) -0.22251293703090788 -0.21723357326899348
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.2581948222428
curgen: 100 fitness: 3.258339222081717
curgen: 150 fitness: 3.258378393430921
curgen: 200 fitness: 3.258378393430921
curgen: 250 fitness: 3.2584521581071457
curgen: 300 fitness: 3.258452342090233
curgen: 350 fitness: 3.2584618395237217
curgen: 400 fitness: 3.2584618395237217
curgen: 450 fitness: 3.2584688771899244
curgen: 500 fitness: 3.2584688771899244
CoordinateCreature{Vector{Float64}}([-0.22237740739709927, -0.2220189312832141, -0.2227051338032804, -0.22272211854645357, 0.22237932494339177, -0.2227420979362815, 0.22285023966342102, -0.22257300997476243, 0.22240516026931145, -0.22221035604284406, 0.22241438331149788, 0.22263835086764053, -0.22222583501821344, -0.2224813130150208, -0.22244550460011], -3.2584688771899244) [-0.22237740739709927, -0.2220189312832141, -0.2227051338032804, -0.22272211854645357, 0.22237932494339177, -0.2227420979362815, 0.22285023966342102, -0.22257300997476243, 0.22240516026931145, -0.22221035604284406, 0.22241438331149788, 0.22263835086764053, -0.22222583501821344, -0.2224813130150208, -0.22244550460011] -3.2584688771899244
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.004535674872869322
curgen: 100 fitness: -0.0018619890626894176
curgen: 150 fitness: -0.0018619890626894176
curgen: 200 fitness: -0.0010572295776114515
curgen: 250 fitness: -0.0010572295776114515
curgen: 300 fitness: -0.0010572295776114515
curgen: 350 fitness: -0.0010572295776114515
curgen: 400 fitness: -0.0010536473824060977
curgen: 450 fitness: -0.0009852414063402648
curgen: 500 fitness: -0.0009391681871022683
CoordinateCreature{Vector{Float64}}([0.0004385690729576137, -7.716684044364788e-5, 0.00010322103139527496, 0.000524104641856764, -0.00017525111334673734, -0.0013694578722771907, 7.833532546380322e-5, 0.0003347783545898483, 0.0002847355811315007, 0.00023877262283937203, -0.0002472639504743024, 0.001285991509762015, -8.664151947594066e-5, 5.527612160667065e-5, -0.0006019797468421269], 0.0009391681871022683) [0.0004385690729576137, -7.716684044364788e-5, 0.00010322103139527496, 0.000524104641856764, -0.00017525111334673734, -0.0013694578722771907, 7.833532546380322e-5, 0.0003347783545898483, 0.0002847355811315007, 0.00023877262283937203, -0.0002472639504743024, 0.001285991509762015, -8.664151947594066e-5, 5.527612160667065e-5, -0.0006019797468421269] 0.0009391681871022683
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
