Julia Version 1.6.0-DEV.608
Commit ccb7fb0005 (2020-08-07 12:57 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.0
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.0
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_39sx7Q/Project.toml`
  [5789e2e9] FileIO v1.4.0
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_39sx7Q/Manifest.toml`
  [5789e2e9] FileIO v1.4.0
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21723159725269206
curgen: 20 fitness: 0.21723159725269206
curgen: 30 fitness: 0.21723159725269206
curgen: 40 fitness: 0.21723159725269206
curgen: 50 fitness: 0.21723159725269206
CoordinateCreature{Vector{Float64}}([0.22276246181175383], -0.21723159725269206) 0.22276246181175383 -0.21723159725269206
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.2573066969135414
curgen: 100 fitness: 3.2578751584440786
curgen: 150 fitness: 3.2580275528012885
curgen: 200 fitness: 3.258149575078606
curgen: 250 fitness: 3.2583502517077583
curgen: 300 fitness: 3.2584099304576934
curgen: 350 fitness: 3.2584123388341504
curgen: 400 fitness: 3.2584150760543347
curgen: 450 fitness: 3.258424677159786
curgen: 500 fitness: 3.258437524583594
CoordinateCreature{Vector{Float64}}([-0.22239456645976755, 0.22292449837077594, -0.22261668398462572, -0.22241105193695354, -0.22233825640284485, 0.22250254428936458, 0.22293312379466482, 0.2222619390192046, -0.22229115457426962, 0.22251503499438294, 0.22216489447789553, 0.22250177085046588, -0.22280916346372936, -0.22307038358968548, -0.22184978148806933], -3.258437524583594) [-0.22239456645976755, 0.22292449837077594, -0.22261668398462572, -0.22241105193695354, -0.22233825640284485, 0.22250254428936458, 0.22293312379466482, 0.2222619390192046, -0.22229115457426962, 0.22251503499438294, 0.22216489447789553, 0.22250177085046588, -0.22280916346372936, -0.22307038358968548, -0.22184978148806933] -3.258437524583594
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.001163826548349789
curgen: 100 fitness: -0.0008356261813560195
curgen: 150 fitness: -0.0008356261813560195
curgen: 200 fitness: -0.0008268311769654701
curgen: 250 fitness: -0.0008268311769654701
curgen: 300 fitness: -0.0007259083756991913
curgen: 350 fitness: -0.0007259083756991913
curgen: 400 fitness: -0.0007259083756991913
curgen: 450 fitness: -0.0007123520123855087
curgen: 500 fitness: -0.0007123520123855087
CoordinateCreature{Vector{Float64}}([0.0004995501865281068, -2.782928836083271e-5, -0.0013328729579993016, 0.0001643527957615145, -0.000381021360802898, -0.00017329128764174972, -0.0002787042656601131, 0.00016793003245933405, 9.342231039314503e-5, 0.0002587688947787159, 0.000524047149760872, 0.00012562272208718511, 0.0002325014322616004, -0.00014631418433608018, 0.0009022799766720338], 0.0007123520123855087) [0.0004995501865281068, -2.782928836083271e-5, -0.0013328729579993016, 0.0001643527957615145, -0.000381021360802898, -0.00017329128764174972, -0.0002787042656601131, 0.00016793003245933405, 9.342231039314503e-5, 0.0002587688947787159, 0.000524047149760872, 0.00012562272208718511, 0.0002325014322616004, -0.00014631418433608018, 0.0009022799766720338] 0.0007123520123855087
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
